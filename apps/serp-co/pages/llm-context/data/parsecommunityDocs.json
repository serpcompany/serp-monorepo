[
  {
    "owner": "parse-community",
    "repo": "docs",
    "content": "TITLE: Initializing Parse Client in AppDelegate\nDESCRIPTION: Configuration code for initializing Parse client with application ID, client key, and server URL. Shows implementation in both Objective-C and Swift within the application launch method.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/getting-started.md#2025-04-22_snippet_1\n\nLANGUAGE: objective-c\nCODE:\n```\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n [Parse initializeWithConfiguration:[ParseClientConfiguration configurationWithBlock:^(id<ParseMutableClientConfiguration> configuration) {\n        configuration.applicationId = @\"parseAppId\";\n        configuration.clientKey = @\"parseClientKey\";\n        configuration.server = @\"parseServerUrlString\";\n    }]];\n\treturn YES;\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\nfunc application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -> Bool {\n        let parseConfig = ParseClientConfiguration {\n            $0.applicationId = \"parseAppId\"\n            $0.clientKey = \"parseClientKey\"\n            $0.server = \"parseServerUrlString\"\n        }\n        Parse.initialize(with: parseConfig)\n        return true\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Parse.User with ES6 Classes for Custom User Functionality (JavaScript)\nDESCRIPTION: This code extends Parse.User using ES6 class syntax to add custom methods and properties. It shows how to register the custom subclass so that user queries return instances of the subclass, and how to override or enhance the default user behavior. Applicable from SDK version 2.3.0 onward.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/objects.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclass CustomUser extends Parse.User {\n  constructor(attributes) {\n    super(attributes);\n  }\n\n  doSomething() {\n    return 5;\n  }\n}\nParse.Object.registerSubclass('_User', CustomUser);\n```\n\n----------------------------------------\n\nTITLE: Importing Parse SDK in Node.js\nDESCRIPTION: Import methods for Parse SDK in Node.js environment, showing both CommonJS and ES6 import syntax.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/getting-started.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// In a node.js environment\nconst Parse = require('parse/node');\n// ES6 Minimized\nimport Parse from 'parse/dist/parse.min.js';\n```\n\n----------------------------------------\n\nTITLE: Handling One-to-One and One-to-Many Relationships in Parse Objects with JavaScript\nDESCRIPTION: Illustrates creating one-to-one and one-to-many relationships by saving a `Parse.Object` within another object. Shows how to save and link comments to posts using object references or `objectId`s.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/objects.md#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n// Declare the types.\nconst Post = Parse.Object.extend(\"Post\");\nconst Comment = Parse.Object.extend(\"Comment\");\n\n// Create the post\nconst myPost = new Post();\nmyPost.set(\"title\", \"I'm Hungry\");\nmyPost.set(\"content\", \"Where should we go for lunch?\");\n\n// Create the comment\nconst myComment = new Comment();\nmyComment.set(\"content\", \"Let's do Sushirrito.\");\n\n// Add the post as a value in the comment\nmyComment.set(\"parent\", myPost);\n\n// This will save both myPost and myComment\nmyComment.save();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst post = new Post();\npost.id = \"1zEcyElZ80\";\n\nmyComment.set(\"parent\", post);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst post = fetchedComment.get(\"parent\");\nawait post.fetch();\nconst title = post.get(\"title\");\n```\n\n----------------------------------------\n\nTITLE: Defining a Cloud Function for Averaging Movie Ratings in JavaScript\nDESCRIPTION: This Cloud Function calculates the average star rating for a given movie. It accepts a movie name as a parameter, queries the Review objects, and returns the average rating.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/cloudcode/cloud-code.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nParse.Cloud.define(\"averageStars\", async (request) => {\n  const query = new Parse.Query(\"Review\");\n  query.equalTo(\"movie\", request.params.movie);\n  const results = await query.find();\n  let sum = 0;\n  for (let i = 0; i < results.length; ++i) {\n    sum += results[i].get(\"stars\");\n  }\n  return sum / results.length;\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Parse.Object Subclasses with Methods and Properties (JavaScript)\nDESCRIPTION: This code defines a complex subclass named 'Monster' by extending Parse.Object and adding instance and class methods as well as properties via an initialize method. The pattern demonstrates how to encapsulate business logic and custom initialization inside Parse.Object-based models. Dependencies are the Parse JavaScript SDK. Usage of get and set for object fields, and custom spawn class method is shown, with example usage producing alerts for field values.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/objects.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// A complex subclass of Parse.Object\nconst Monster = Parse.Object.extend(\"Monster\", {\n  // Instance methods\n  hasSuperHumanStrength: function () {\n    return this.get(\"strength\") > 18;\n  },\n  // Instance properties go in an initialize method\n  initialize: function (attrs, options) {\n    this.sound = \"Rawr\"\n  }\n}, {\n  // Class methods\n  spawn: function(strength) {\n    const monster = new Monster();\n    monster.set(\"strength\", strength);\n    return monster;\n  }\n});\n\nconst monster = Monster.spawn(200);\nalert(monster.get('strength'));  // Displays 200.\nalert(monster.sound); // Displays Rawr.\n```\n\n----------------------------------------\n\nTITLE: Signing Up a New User with Parse PHP SDK\nDESCRIPTION: This snippet demonstrates how to register a new user. It creates a `ParseUser` instance, sets mandatory properties like 'username' and 'password', optional properties like 'email', and custom fields like 'phone'. The `signUp()` method is called within a try-catch block to handle potential exceptions, such as duplicate usernames or emails. Note that `signUp()` should be used for initial user creation, while `save()` is used for subsequent updates.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/users.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n```php\n\n$user = new ParseUser();\n$user->set(\"username\", \"my name\");\n$user->set(\"password\", \"my pass\");\n$user->set(\"email\", \"email@example.com\");\n\n// other fields can be set just like with ParseObject\n$user->set(\"phone\", \"415-392-0202\");\n\ntry {\n  $user->signUp();\n  // Hooray! Let them use the app now.\n} catch (ParseException $ex) {\n  // Show the error message somewhere and let the user try again.\n  echo \"Error: \" . $ex->getCode() . \" \" . $ex->getMessage();\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing Parse Server with Push Notification Configuration - JavaScript\nDESCRIPTION: This snippet demonstrates initializing Parse Server with push notification support for both Android (FCM) and iOS (APNS) using a JavaScript configuration object. Dependencies include the ParseServer npm package and valid platform credentials (PFX/.p12 for iOS and API key for Android). Parameters under 'push' specify paths to credential files and relevant settings for each platform. The server is set up with database URI, cloud function path, app ID, and master key. The configuration supports sending notifications to both Android and Apple devices.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/push-notifications.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar server = new ParseServer({\n  databaseURI: '...',\n  cloud: '...',\n  appId: '...',\n  masterKey: '...',\n  push: {\n    android: {\n      apiKey: '...'\n    },\n    ios: {\n      pfx: '/file/path/to/XXX.p12',\n      passphrase: '', // optional password to your p12/PFX\n      bundleId: '',\n      production: false\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Related Objects with Parse Query in Java\nDESCRIPTION: Example showing how to fetch User objects along with their related Weapon objects using includeKey parameter in Java. The query retrieves both the 'one' and 'many' sides of the relationship simultaneously.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/relations.md#2025-04-22_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n// set up our query for a User object\nParseQuery<ParseUser> userQuery = ParseUser.getQuery();\n\n// configure any constraints on your query...\n// for example, you may want users who are also playing with or against you\n// tell the query to fetch all of the Weapon objects along with the user\n// get the \"many\" at the same time that you're getting the \"one\"\nuserQuery.include(\"weaponsList\");\n\n// execute the query\nuserQuery.findInBackground(new FindCallback<ParseUser>() {\n  public void done(List<ParseUser> userList, ParseException e) {\n    // userList contains all of the User objects, and their associated Weapon objects, too\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Role Hierarchies in Parse\nDESCRIPTION: This snippet demonstrates how to establish a parent-child relationship between roles, where permissions granted to the parent role are implicitly granted to child roles. Here, administrators are added as a child role of moderators.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/roles.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst administrators = /* Your \"Administrators\" role */;\nconst moderators = /* Your \"Moderators\" role */;\nmoderators.getRoles().add(administrators);\nmoderators.save();\n```\n\n----------------------------------------\n\nTITLE: Initializing LiveQuery Server Instance with Express in JavaScript\nDESCRIPTION: This snippet shows how to instantiate a LiveQuery server for Parse, binding it to an HTTP server that wraps an Express app. The LiveQuery server listens on the specified port and enables WebSocket connections for real-time communication. Dependencies include the Node.js 'http' module and a previously initialized Express app ('app'). Required parameters are the Express app and the desired port number. The ParseServer.createLiveQueryServer function ties the live query functionality directly to your HTTP server for seamless integration.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/live-query.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Initialize a LiveQuery server instance, app is the express app of your Parse Server\\nlet httpServer = require('http').createServer(app);\\nhttpServer.listen(port);\\nvar parseLiveQueryServer = ParseServer.createLiveQueryServer(httpServer);\n```\n\n----------------------------------------\n\nTITLE: Creating and Signing Up a New Parse User in JavaScript\nDESCRIPTION: This code demonstrates how to create a new Parse.User object, set required properties like username, password, and email, and sign up the user. It also shows error handling for signup failures.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/users.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst user = new Parse.User();\nuser.set(\"username\", \"my name\");\nuser.set(\"password\", \"my pass\");\nuser.set(\"email\", \"email@example.com\");\n\n// other fields can be set just like with Parse.Object\nuser.set(\"phone\", \"415-392-0202\");\ntry {\n  await user.signUp();\n  // Hooray! Let them use the app now.\n} catch (error) {\n  // Show the error message somewhere and let the user try again.\n  alert(\"Error: \" + error.code + \" \" + error.message);\n}\n```\n\n----------------------------------------\n\nTITLE: Mounting and Starting Parse Server with Express in Node.js\nDESCRIPTION: This snippet demonstrates integrating the initialized Parse Server instance into an Express application. It requires the `express` and `parse-server` modules, creates an Express app, instantiates `ParseServer` (using placeholder options), asynchronously starts the Parse Server using `api.start()`, mounts the Parse API middleware at the `/parse` URL prefix using `app.use('/parse', api.app)`, and finally starts the Express server to listen on a specified port (1337 in this example).\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/usage.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst express = require('express');\nconst ParseServer = require('parse-server').ParseServer;\n\nconst app = express();\nconst api = new ParseServer({ ... });\nawait api.start();\n\n// Serve the Parse API at /parse URL prefix\napp.use('/parse', api.app);\n\nconst port = 1337;\napp.listen(port, function() {\n  console.log('parse-server-example running on port ' + port + '.');\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Server-wide Rate Limit in Parse\nDESCRIPTION: This snippet demonstrates how to set a server-wide rate limit in Parse Server, allowing a maximum of 200 requests per 15-minute window across all API routes. This is critical for preventing resource exhaustion and protecting server integrity.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/security.md#2025-04-22_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst parseServer = new ParseServer({\n  rateLimit: {\n    requestPath: '*',\n    requestTimeWindow: 15 * 60 * 1000,\n    requestCount: 200,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a beforeSave Trigger in Parse Cloud Code\nDESCRIPTION: This code snippet defines a `beforeSave` trigger for the `Parse.User` class, ensuring each user object has an email address before saving. It relies on Parse's Cloud Code infrastructure, where the `request` parameter is used to access the object being saved, and throws an error if the `email` field is missing.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/security.md#2025-04-22_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nParse.Cloud.beforeSave(Parse.User, request => {\n  const user = request.object;\n  if (!user.get(\"email\")) {\n    throw \"Every user must have an email address.\";\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Fields in Parse.Query Results in JavaScript\nDESCRIPTION: Shows how to restrict the fields returned by a Parse.Query using the select method, which is useful for reducing network usage by retrieving only the needed fields.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/queries.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst GameScore = Parse.Object.extend(\"GameScore\");\nconst query = new Parse.Query(GameScore);\nquery.select(\"score\", \"playerName\");\nquery.find().then(function(results) {\n  // each of results will only have the selected fields available.\n});\n```\n\n----------------------------------------\n\nTITLE: Logging Out a Parse User in Dart\nDESCRIPTION: Demonstrates the process of logging out a Parse user and handling the logout response.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dart/users.md#2025-04-22_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvar response = await user.logout();\nif (response.success) {\n    print('User logout');\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Cloud Code Entry Point in Parse Server\nDESCRIPTION: This snippet shows the default file path for the main Cloud Code entry point in Parse Server. It indicates where developers should place their Cloud Code implementation.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/cloudcode/getting-started.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n./cloud/main.js\n```\n\n----------------------------------------\n\nTITLE: Refreshing Parse Objects with Latest Data in JavaScript\nDESCRIPTION: Illustrates how to refresh a `Parse.Object` with updated data from the Parse Cloud using the `fetch` method, including error handling.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/objects.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nmyObject.fetch().then((myObject) => {\n  // The object was refreshed successfully.\n}, (error) => {\n  // The object was not refreshed successfully.\n  // error is a Parse.Error with an error code and message.\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nif (!myObject.isDataAvailable()) {\n  await myObject.fetch();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Search Preprocessing with Parse Cloud Code\nDESCRIPTION: A Cloud Code beforeSave hook that preprocesses post content by extracting and indexing words and hashtags. It converts text to lowercase, filters stop words, and stores searchable terms in array fields for efficient querying.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_96\n\nLANGUAGE: javascript\nCODE:\n```\nvar _ = require(\"underscore\");\nParse.Cloud.beforeSave(\"Post\", request => {\n  var post = request.object;\n  var toLowerCase = function(w) { return w.toLowerCase(); };\n  var words = post.get(\"text\").split(/\\b/);\n  words = _.map(words, toLowerCase);\n  var stopWords = [\"the\", \"in\", \"and\"]\n  words = _.filter(words, function(w) {\n    return w.match(/^\\w+$/) && !   _.contains(stopWords, w);\n  });\n  var hashtags = post.get(\"text\").match(/#.+?\\b/g);\n  hashtags = _.map(hashtags, toLowerCase);\n  post.set(\"words\", words);\n  post.set(\"hashtags\", hashtags);\n});\n```\n\n----------------------------------------\n\nTITLE: Performing Relational Queries in C#\nDESCRIPTION: Shows how to query for Parse objects based on relationships. This includes querying by a specific ParseObject, by ObjectId, and using nested queries to find related objects.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/queries.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n// Assume ParseObject myPost was previously created.\nvar query = from comment in ParseObject.GetQuery(\"Comment\")\n            where comment[\"post\"] == myPost\n            select comment;\n\nvar comments = await query.FindAsync();\n// comments now contains the comments for myPost\n\n// or using LINQ\n// Assume ParseObject myPost was previously created.\nvar query = ParseObject.GetQuery(\"Comment\")\n    .WhereEqualTo(\"post\", myPost);\n\nvar comments = await query.FindAsync();\n//comments now contains the comments for myPost\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar query = from comment in ParseObject.GetQuery(\"Comment\")\n            where comment[\"post\"] == ParseObject.CreateWithoutData(\"Post\", \"1zEcyElZ80\")\n            select comment;\n\n// or using LINQ\nvar query = ParseObject.GetQuery(\"Comment\")\n    .WhereEqualTo(\"post\", ParseObject.CreateWithoutData(\"Post\", \"1zEcyElZ80\"));\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar imagePosts = from post in ParseObject.GetQuery(\"Post\")\n                 where post.ContainsKey(\"image\")\n                 select post;\nvar query = from comment in ParseObject.GetQuery(\"Comment\")\n            join post in imagePosts on comment[\"post\"] equals post\n            select comment;\n\nvar comments = await query.FindAsync();\n// comments now contains the comments for posts with images\n\n// or using LINQ\nvar imagePosts = ParseObject.GetQuery(\"Post\")\n    .WhereExists(\"image\");\nvar query = ParseObject.GetQuery(\"Comment\")\n    .WhereMatchesQuery(\"post\", imagePosts);\n\nvar comments = await query.FindAsync();\n// comments now contains the comments for posts with images\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar imagePosts = from post in ParseObject.GetQuery(\"Post\")\n                 where post.ContainsKey(\"image\")\n                 select post;\nvar query = ParseObject.GetQuery(\"Comment\")\n    .WhereDoesNotMatchQuery(\"post\", imagePosts);\n\nvar comments = await query.FindAsync();\n// comments now contains the comments for posts without images\n\n// or using LINQ\nvar imagePosts = ParseObject.GetQuery(\"Post\")\n    .WhereExists(\"image\");\nvar query = ParseObject.GetQuery(\"Comment\")\n    .WhereDoesNotMatchQuery(\"post\", imagePosts);\n\nvar comments = await query.FindAsync();\n// comments now contains the comments for posts without images\n```\n\nLANGUAGE: csharp\nCODE:\n```\n// Retrieve the most recent comments\nvar query = from comment in ParseObject.GetQuery(\"Comment\")\n                                       // Only retrieve the last 10 comments\n                                       .Limit(10)\n                                       // Include the post data with each comment\n                                       .Include(\"post\")\n            orderby comment.CreatedAt descending\n            select comment;\n\nvar comments = await comments.FindAsync();\n\n// Comments now contains the last ten comments, and the \"post\" field\n// contains an object that has already been fetched.  For example:\nforeach (var comment in comments)\n{\n    // This does not require a network access.\n    var post = comment.Get<ParseObject>(\"post\");\n    Debug.WriteLine(\"Post title: \" + post[\"title\"]);\n}\n\n// or using LINQ\n// Retrieve the most recent comments\nvar query = ParseObject.GetQuery(\"Comment\")\n    .OrderByDescending(\"createdAt\")\n    .Limit(10) // Only retrieve the last 10 comments\n    .Include(\"post\"); // Include the post data with each comment\n\n// Only retrieve the last 10 comments\nquery = query.Limit(10);\n\n// Include the post data with each comment\nquery = query.Include(\"post\");\n\nvar comments = await comments.FindAsync();\n\n// Comments now contains the last ten comments, and the \"post\" field\n// contains an object that has already been fetched.  For example:\nforeach (var comment in comments)\n{\n    // This does not require a network access.\n    var post = comment.Get<ParseObject>(\"post\");\n    Debug.WriteLine(\"Post title: \" + post[\"title\"]);\n}\n```\n\nLANGUAGE: csharp\nCODE:\n```\nquery = query.Include(\"post.author\");\n```\n\n----------------------------------------\n\nTITLE: Polling Connection with Parse SDK in JavaScript\nDESCRIPTION: This snippet demonstrates how to initiate polling by calling the `sendQueue` when a connection to the server is established using `Parse.EventuallyQueue.poll()`. It uses the `serverURL` specified during SDK initialization.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/objects.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nParse.EventuallyQueue.poll();\n```\n\n----------------------------------------\n\nTITLE: Setting Various Data Types on Parse.Object in JavaScript\nDESCRIPTION: This snippet demonstrates how to create and set different data types on a Parse.Object. It includes examples of primitive types, arrays, objects, pointers, and null values. The code also shows how to save the object after setting its properties.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/objects.md#2025-04-22_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nconst number = 42;\nconst bool = false;\nconst string = \"the number is \" + number;\nconst date = new Date();\nconst array = [string, number];\nconst object = { number: number, string: string };\nconst pointer = MyClassName.createWithoutData(objectId);\n\nconst BigObject = Parse.Object.extend(\"BigObject\");\nconst bigObject = new BigObject();\nbigObject.set(\"myNumber\", number);\nbigObject.set(\"myBool\", bool);\nbigObject.set(\"myString\", string);\nbigObject.set(\"myDate\", date);\nbigObject.set(\"myArray\", array);\nbigObject.set(\"myObject\", object);\nbigObject.set(\"anyKey\", null); // this value can only be saved to an existing key\nbigObject.set(\"myPointerKey\", pointer); // shows up as Pointer &lt;MyClassName&gt; in the Data Browser\nbigObject.save();\n```\n\n----------------------------------------\n\nTITLE: Cursor-based Pagination with Parse Server GraphQL - GraphQL\nDESCRIPTION: Utilizes the 'after' argument with Relay cursor-based pagination for fetching result pages. Returns pageInfo (hasNextPage, hasPreviousPage, startCursor, endCursor), and only edges after the specified cursor. Useful for constructing next/prev page navigation; cursors are opaque and not persistent, belonging to the current filtered result set.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/queries.md#2025-04-22_snippet_13\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery getSomeGameScores {\n  gameScores(after: \"YXJyYXljb25uZWN0aW9uOjE\") {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    count\n    edges {\n      cursor\n      node {\n        id\n        playerName\n        score\n        cheatMode\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Parse Server with Defined Schema in JavaScript\nDESCRIPTION: Example of setting up Parse Server with a predefined schema for User, City, and Country classes. The configuration includes field definitions, indexes, class level permissions, and schema control options such as locking schemas and strict mode.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/defined-schema/getting-started.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { ParseServer } = require(\"parse-server\");\n\nconst UserSchema = {\n  className: \"_User\",\n  fields: {\n    birthDate: { type: \"Date\" },\n    firstname: { type: \"String\", required: true },\n    lastname: { type: \"String\", required: true },\n    tags: { type: \"Array\" },\n    location: { type: \"GeoPoint\" },\n    city: { type: \"Pointer\", targetClass: \"City\" },\n    friends: { type: \"Relation\", targetClass: \"_User\" },\n    zone: { type: \"Polygon\" },\n  },\n  indexes: {\n    tagsIndex: { tags: 1 },\n    // The special prefix _p_ is used to create indexes on pointer fields\n    cityPointerIndex: { _p_city: 1 },\n    tagAndCityIndex: { _p_city: 1, tags: 1 },\n  },\n  classLevelPermissions: {\n    find: { requiresAuthentication: true },\n    count: { \"role:Admin\": true },\n    get: { requiresAuthentication: true },\n    update: { requiresAuthentication: true },\n    create: { \"role:Admin\": true },\n    delete: { \"role:Admin\": true },\n    protectedFields: {\n      // These fields will be protected from all other users. AuthData and password are already protected by default\n      \"*\": [\"authData\", \"emailVerified\", \"password\", \"username\"],\n    },\n  },\n};\n\nconst City = {\n  className: \"City\",\n  fields: {\n    name: { type: \"String\", required: true },\n    location: { type: \"GeoPoint\" },\n    country: { type: \"Pointer\", targetClass: \"Country\" },\n  },\n  classLevelPermissions: {\n    find: { requiresAuthentication: true },\n    count: { requiresAuthentication: true },\n    get: { requiresAuthentication: true },\n    // Only a user linked to the Admin Parse Role is authorized to manage cities\n    update: { \"role:Admin\": true },\n    create: { \"role:Admin\": true },\n    delete: { \"role:Admin\": true },\n  },\n};\n\nconst Country = {\n  className: \"Country\",\n  fields: {\n    name: { type: \"String\", required: true },\n  },\n  classLevelPermissions: {\n    find: { requiresAuthentication: true },\n    count: { requiresAuthentication: true },\n    get: { requiresAuthentication: true },\n    // An empty object means that only master key is authorized to manage countries\n    update: {},\n    create: {},\n    delete: {},\n  },\n};\n\nParseServer.start({\n  databaseURI: \"mongodb://your.mongo.uri\",\n  appId: \"myAppId\",\n  masterKey: \"mySecretMasterKey\",\n  serverURL: \"http://localhost:1337/parse\",\n  port: 1337,\n  publicServerURL: \"http://localhost:1337/parse\",\n  // Define schemas of Parse Server\n  schema: {\n    definitions: [User, City, Country],\n    // If set to `true`, the Parse Server API for schema changes is disabled and schema \n    // changes are only possible by redeployingParse Server with a new schema definition\n    lockSchemas: true,\n    // If set to `true`, Parse Server will automatically delete non-defined classes from\n    // the database; internal classes like `User` or `Role` are never deleted.\n    strict: true,\n    // If set to `true`, a field type change will cause the field including its data to be\n    // deleted from the database, and then a new field to be created with the new type\n    recreateModifiedFields: false,\n    // If set to `true`, Parse Server will automatically delete non-defined class fields;\n    // internal fields in classes like User or Role are never deleted.\n    deleteExtraFields: false,\n  },\n  serverStartComplete: () => {\n    // Parse Server is ready with up-to-date schema\n    parseServer.expressApp.get(\"/ready\", (req: any, res: any) => {\n      res.send(\"true\");\n    });\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Values from Parse Objects in JavaScript\nDESCRIPTION: Demonstrates how to get values from a `Parse.Object` using the `get` method and destructuring. Special reserved values are noted as inaccessible via `get`.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/objects.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst score = gameScore.get(\"score\");\nconst playerName = gameScore.get(\"playerName\");\nconst cheatMode = gameScore.get(\"cheatMode\");\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst { score, playerName, cheatMode } = result.attributes;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst objectId = gameScore.id;\nconst updatedAt = gameScore.updatedAt;\nconst createdAt = gameScore.createdAt;\nconst acl = gameScore.getACL();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Objects with Parse.Query in JavaScript\nDESCRIPTION: Demonstrates how to create a basic Parse.Query to retrieve multiple objects that match specific criteria. This example finds all GameScore objects with a playerName equal to 'Dan Stemkoski' and iterates through the results.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/queries.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst GameScore = Parse.Object.extend(\"GameScore\");\nconst query = new Parse.Query(GameScore);\nquery.equalTo(\"playerName\", \"Dan Stemkoski\");\nconst results = await query.find();\nalert(\"Successfully retrieved \" + results.length + \" scores.\");\n// Do something with the returned Parse.Object values\nfor (let i = 0; i < results.length; i++) {\n  const object = results[i];\n  alert(object.id + ' - ' + object.get('playerName'));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Average Rating Cloud Function in JavaScript\nDESCRIPTION: A Cloud Function that calculates the average star rating for a movie by querying the Review class. This approach offloads computation to the server and reduces data transferred to clients.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_76\n\nLANGUAGE: javascript\nCODE:\n```\nParse.Cloud.define(\"averageStars\", async (request) => {\n  const query = new Parse.Query(\"Review\");\n  query.equalTo(\"movie\", request.params.movie);\n  const results = await query.find();\n  let sum = 0;\n  for (let i = 0; i < results.length; ++i) {\n    sum += results[i].get(\"stars\");\n  }\n  return sum / results.length;\n});\n```\n\n----------------------------------------\n\nTITLE: Using withCount in Parse.Query for Total Count in JavaScript\nDESCRIPTION: Demonstrates how to get the total count of objects that match a query using withCount. This changes the structure of the response to include both results and count.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/queries.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst GameScore = Parse.Object.extend(\"GameScore\");\nconst query = new Parse.Query(GameScore);\n\nquery.limit(25);\n\nconst results = await query.find(); // [ GameScore, GameScore, ...]\n\n// to include count:\nquery.withCount();\nconst response = await query.find(); // { results: [ GameScore, ... ], count: 200 }\n```\n\n----------------------------------------\n\nTITLE: Executing Promises in Parallel in Parse JavaScript SDK\nDESCRIPTION: Example demonstrating how to execute multiple operations concurrently using Promise.all(), which creates a new Promise that resolves when all input Promises resolve.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/promises.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst query = new Parse.Query(\"Comments\");\nquery.equalTo(\"post\", post);\n\nquery.find().then(function(results) {\n  // Collect one promise for each delete into an array.\n  const promises = [];\n  const promises = results.map((result) => {\n    // Start this delete immediately and add its promise to the list.\n    return result.destroy();\n  });\n  // Return a new promise that is resolved when all of the deletes are finished.\n  return Promise.all(promises);\n\n}).then(function() {\n  // Every comment was deleted.\n});\n```\n\n----------------------------------------\n\nTITLE: Destroying Parse Objects in JavaScript\nDESCRIPTION: Explains how to delete a `Parse.Object` from the cloud using the `destroy` method, including error handling. Also covers how to delete a field using the `unset` method.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/objects.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nmyObject.destroy().then((myObject) => {\n  // The object was deleted from the Parse Cloud.\n}, (error) => {\n  // The delete failed.\n  // error is a Parse.Error with an error code and message.\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// After this, the playerName field will be empty\nmyObject.unset(\"playerName\");\n\n// Saves the field deletion to the Parse Cloud.\n// If the object's field is an array, call save() after every unset() operation.\nmyObject.save();\n```\n\n----------------------------------------\n\nTITLE: Signing Up a New User with Parse REST API\nDESCRIPTION: This snippet demonstrates how to sign up a new user with a username, password, and phone number using the Parse REST API. It sends a POST request to the users endpoint with the required data.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/users.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -H \"X-Parse-Revocable-Session: 1\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"username\":\"cooldude6\",\"password\":\"p_n7!-e8\",\"phone\":\"415-392-0202\"}' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/users\n```\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nconnection.connect()\nconnection.request('POST', '/parse/users', json.dumps({\n    \"username\": \"cooldude6\",\n    \"password\": \"p_n7!-e8\",\n    \"phone\": \"415-392-0202\"\n}), {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\",\n    \"X-Parse-Revocable-Session\": \"1\",\n    \"Content-Type\": \"application/json\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Signing Up a New User with ParseUser in C#\nDESCRIPTION: This snippet demonstrates how to create a new user account using the ParseUser class. It sets required fields like username, password, and email, as well as additional custom fields. The SignUpAsync method is used to create the user in the Parse backend.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/users.md#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic async void SignUpButton_Click(object sender, RoutedEventArgs e)\n{\n    var user = new ParseUser()\n    {\n        Username = \"my name\",\n        Password = \"my pass\",\n        Email = \"email@example.com\"\n    };\n\n    // other fields can be set just like with ParseObject\n    user[\"phone\"] = \"415-392-0202\";\n\n    await user.SignUpAsync();\n}\n```\n\n----------------------------------------\n\nTITLE: Saving Parse.Object with Attributes via save() Argument (JavaScript)\nDESCRIPTION: This alternative save pattern directly passes an object of attributes to save rather than setting them individually. Useful for atomic creation of objects and improves code brevity. Uses Promises for result handling. Requires the Parse JavaScript SDK.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/objects.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst GameScore = Parse.Object.extend(\"GameScore\");\nconst gameScore = new GameScore();\n\ngameScore.save({\n  score: 1337,\n  playerName: \"Sean Plott\",\n  cheatMode: false\n})\n.then((gameScore) => {\n  // The object was saved successfully.\n}, (error) => {\n  // The save failed.\n  // error is a Parse.Error with an error code and message.\n});\n```\n\n----------------------------------------\n\nTITLE: Promise Chaining for Multi-step Operations in Parse JavaScript SDK\nDESCRIPTION: Example of using Promise chaining for logging in, finding an object, and saving it. Demonstrates how Promises flatten the code structure.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/promises.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nParse.User.logIn(\"user\", \"pass\").then(function(user) {\n  return query.find();\n}).then(function(results) {\n  return results[0].save({ key: value });\n}).then(function(result) {\n  // the object was saved.\n});\n```\n\n----------------------------------------\n\nTITLE: Grouping by Field in Parse Aggregate Query\nDESCRIPTION: Shows how to use the aggregate pipeline to group results by a specific field (score in this case) in a Parse query. The result contains unique score values.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/queries.md#2025-04-22_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nconst pipeline = [\n  { $group: { _id: '$score' } }\n];\nconst query = new Parse.Query(\"User\");\nquery.aggregate(pipeline)\n  .then(function(results) {\n    // results contains unique score values\n  })\n  .catch(function(error) {\n    // There was an error.\n  });\n```\n\n----------------------------------------\n\nTITLE: Initializing Parse Server with Master Key\nDESCRIPTION: Advanced initialization code for Parse Server including master key configuration. Note: Should only be used in secure server environments.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/getting-started.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nParse.initialize(\"YOUR_APP_ID\", \"YOUR_JAVASCRIPT_KEY\", \"YOUR_MASTERKEY\");\n//javascriptKey is required only if you have it on server.\n\nParse.serverURL = 'http://YOUR_PARSE_SERVER:1337/parse'\n```\n\n----------------------------------------\n\nTITLE: LiveQuery with Local Datastore Integration\nDESCRIPTION: Demonstrates how LiveQuery updates automatically sync with pinned objects in local datastore.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/local-datastore.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst gameScore = new GameScore();\nawait gameScore.save();\nawait gameScore.pin();\nconst query = new Parse.Query(GameScore);\nquery.equalTo('objectId', gameScore.id)\nconst subscription = query.subscribe();\nsubscription.on('update', (object) => {\n  // Since object (gameScore) is pinned, LDS will update automatically\n});\n```\n\n----------------------------------------\n\nTITLE: Manipulating Arrays in Parse Objects in JavaScript\nDESCRIPTION: Shows atomic operations for manipulating arrays in a `Parse.Object`, such as `add`, `addUnique`, and `remove`. Emphasizes the necessity of using `save` between different array operations.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/objects.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\ngameScore.addUnique(\"skills\", \"flying\");\ngameScore.addUnique(\"skills\", \"kungfu\");\ngameScore.save();\n```\n\n----------------------------------------\n\nTITLE: Filtering with Not-Equal Constraints using PFQuery and NSPredicate in Swift\nDESCRIPTION: Shows how to construct a Parse query in Swift that excludes objects matching a provided value for a given field using either direct PFQuery methods or NSPredicate. Requires ParseSwift SDK and uses field and value as parameters. Results are queries that filter out specified matches.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/queries.md#2025-04-22_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\n// Using PFQuery\nquery.whereKey(\"playerName\", notEqualTo: \"Michael Yabuti\")\n\n// Using NSPredicate\nlet predicate = NSPredicate(format:\"playerName != 'Michael Yabuti'\")\nlet query = PFQuery(className: \"GameScore\", predicate: predicate)\n```\n\n----------------------------------------\n\nTITLE: User Signup Implementation in Parse iOS\nDESCRIPTION: Demonstrates how to create a new user account with username, password, email and additional custom fields. The code shows asynchronous signup process with error handling.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/users.md#2025-04-22_snippet_0\n\nLANGUAGE: objective-c\nCODE:\n```\n- (void)myMethod {\n    PFUser *user = [PFUser user];\n    user.username = @\"my name\";\n    user.password = @\"my pass\";\n    user.email = @\"email@example.com\";\n\n    // other fields can be set just like with PFObject\n    user[@\"phone\"] = @\"415-392-0202\";\n\n    [user signUpInBackgroundWithBlock:^(BOOL succeeded, NSError *error) {\n      if (!error) {   // Hooray! Let them use the app now.\n      } else {   NSString *errorString = [error userInfo][@\"error\"];   // Show the errorString somewhere and let the user try again.\n      }\n    }];\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\nfunc myMethod() {\n  var user = PFUser()\n  user.username = \"myUsername\"\n  user.password = \"myPassword\"\n  user.email = \"email@example.com\"\n  // other fields can be set just like with PFObject\n  user[\"phone\"] = \"415-392-0202\"\n\n  user.signUpInBackground {\n    (succeeded: Bool, error: Error?) -> Void in\n    if let error = error {\n      let errorString = error.localizedDescription\n      // Show the errorString somewhere and let the user try again.\n    } else {\n      // Hooray! Let them use the app now.\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Login Validation with beforeLogin\nDESCRIPTION: This example shows how to use the beforeLogin trigger to implement custom validation for login requests. It checks if a user has been banned and prevents them from logging in.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/cloudcode/cloud-code.md#2025-04-22_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nParse.Cloud.beforeLogin(async request => {\n  const { object: user }  = request;\n  if(user.get('isBanned')) {\n   throw new Error('Access denied, you have been banned.')\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing AfterSave Hook for Review Counter\nDESCRIPTION: A Cloud Code afterSave hook that automatically increments a review counter on a Movie object whenever a new Review is created. This provides an efficient way to track review counts without using count queries.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_89\n\nLANGUAGE: javascript\nCODE:\n```\nParse.Cloud.afterSave(\"Review\", function(request) {\n  // Get the movie id for the Review\n  var movieId = request.object.get(\"movie\").id;\n  // Query the Movie represented by this review\n  var Movie = Parse.Object.extend(\"Movie\");\n  var query = new Parse.Query(Movie);\n  query.get(movieId).then(function(movie) {\n    // Increment the reviews field on the Movie object\n    movie.increment(\"reviews\");\n    movie.save();\n  }, function(error) {\n    throw \"Got an error \" + error.code + \" : \" + error.message;\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Querying GameScores with GreaterThan in Objective-C and Swift\nDESCRIPTION: This snippet shows how to query for GameScores with a score greater than a previously retrieved highScore in both Objective-C and Swift.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_30\n\nLANGUAGE: objective_c\nCODE:\n```\nPFQuery *query = [PFQuery queryWithClassName:@\"GameScore\"];\n// Previously retrieved highScore for Michael Yabuti\n[query whereKey:@\"score\" greaterThan:highScore];\n[query findObjectsInBackgroundWithBlock:^(NSArray *objects, NSError *error) {\n  if (!error) {\n    // Retrieved scores successfully\n  }\n}];\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet query = PFQuery.queryWithClassName(\"GameScore\")\n// Previously retrieved highScore for Michael Yabuti\nquery.whereKey(\"score\", greaterThan: highScore)\nquery.findObjectsInBackgroundWithBlock {\n  (objects, error) in\n  if !error {\n    // Retrieved scores successfully\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a LiveQuery Subscription in JavaScript\nDESCRIPTION: Demonstrates how to create a LiveQuery subscription using a Parse Query. The subscription is an event emitter that allows listening for real-time updates.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/live-queries.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet query = new Parse.Query('Game');\nlet subscription = await query.subscribe();\n```\n\n----------------------------------------\n\nTITLE: Calling a Cloud Function from Android in Java\nDESCRIPTION: This snippet demonstrates how to call the 'averageStars' Cloud Function from an Android app using Java. It passes the movie name as a parameter and handles the result asynchronously.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/cloudcode/cloud-code.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nHashMap<String, Object> params = new HashMap<String, Object>();\nparams.put(\"movie\", \"The Matrix\");\nParseCloud.callFunctionInBackground(\"averageStars\", params, new FunctionCallback<Float>() {\n   void done(Float ratings, ParseException e) {\n       if (e == null) {\n          // ratings is 4.5\n       }\n   }\n});\n```\n\n----------------------------------------\n\nTITLE: Returning a Different Query in beforeFind\nDESCRIPTION: This example shows how to return a different query from the beforeFind trigger. It creates a new query and combines it with the original query using Parse.Query.or.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/cloudcode/cloud-code.md#2025-04-22_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\n// Returning a different query\nParse.Cloud.beforeFind('MyObject', (req) => {\n  let query = req.query;\n  let otherQuery = new Parse.Query('MyObject');\n  otherQuery.equalTo('key', 'value');\n  return Parse.Query.or(query, otherQuery);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Class Level Permissions for Announcement Class in Parse Server\nDESCRIPTION: This code sets up Class Level Permissions (CLP) for an Announcement class. It restricts find and get operations to authenticated users and admin role, while limiting create, update, and delete operations to the admin role only.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/security.md#2025-04-22_snippet_12\n\nLANGUAGE: js\nCODE:\n```\n{\n  classLevelPermissions:\n  {\n    \"find\": {\n      \"requiresAuthentication\": true,\n      \"role:admin\": true\n    },\n    \"get\": {\n      \"requiresAuthentication\": true,\n      \"role:admin\": true\n    },\n    \"create\": { \"role:admin\": true },\n    \"update\": { \"role:admin\": true },\n    \"delete\": { \"role:admin\": true }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Rate Limit to a Cloud Function in Parse\nDESCRIPTION: This example sets a specific rate limit for a Parse Cloud function named `someFunction`, allowing 3 requests per hour. Rate limiting at the function-level helps manage API usage and protect server resources from overuse.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/security.md#2025-04-22_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nParse.Cloud.define('someFunction', () => {\n  return 'Hello world';\n}, {\n  rateLimit: {\n    requestTimeWindow: 60 * 60 * 1000,\n    requestCount: 3,\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Encrypted User Storage in Parse\nDESCRIPTION: This snippet demonstrates how to enable encryption for the current user object stored in the browser's local storage. This provides additional security for sensitive user data by encrypting it with a secret key.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/users.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nParse.enableEncryptedUser();\nParse.secret = 'my Secrey Key';\n```\n\n----------------------------------------\n\nTITLE: Full Multi-platform Push Configuration in Parse Server - JavaScript\nDESCRIPTION: This full example shows a Parse Server initialization supporting push notifications for Android, iOS, macOS, tvOS, and watchOS. Each platform's configuration includes paths to certificate files, optional passphrases, bundle IDs, and the production flag. Requires valid credentials for each platform and is intended for deployments targeting a broad range of Apple and Android devices.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/push-notifications.md#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar server = new ParseServer({\n  databaseURI: '...',\n  cloud: '...',\n  appId: '...',\n  masterKey: '...',\n  push: {\n    android: {\n      apiKey: '...'\n    },\n    ios: {\n      pfx: '/file/path/to/XXX.p12',\n      passphrase: '', // optional password to your p12/PFX\n      bundleId: '',\n      production: false\n    },\n    osx: {\n      pfx: '/file/path/to/XXX.p12',\n      passphrase: '', // optional password to your p12/PFX\n      bundleId: '',\n      production: false\n    },\n    tvos: {\n      pfx: '/file/path/to/XXX.p12',\n      passphrase: '', // optional password to your p12/PFX\n      bundleId: '',\n      production: false\n    },\n    watchos: {\n      pfx: '/file/path/to/XXX.p12',\n      passphrase: '', // optional password to your p12/PFX\n      bundleId: '',\n      production: false\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Schemas in Parse Server JavaScript SDK\nDESCRIPTION: Demonstrates how to create, retrieve, and modify schemas using Parse.Schema. Shows how to create a schema instance, get schema data for a single class or all classes, and add fields of various types including strings, numbers, booleans, dates, and relationships.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/schema.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// create an instance to manage your class\nconst mySchema = new Parse.Schema('MyClass');\n\n// gets the current schema data\nmySchema.get();\n\n// returns schema for all classes\nParse.Schema.all()\n\n// add any # of fields, without having to create any objects\nmySchema\n  .addString('stringField')\n  .addNumber('numberField')\n  .addBoolean('booleanField')\n  .addDate('dateField')\n  .addFile('fileField')\n  .addGeoPoint('geoPointField')\n  .addPolygon('polygonField')\n  .addArray('arrayField')\n  .addObject('objectField')\n  .addPointer('pointerField', '_User')\n  .addRelation('relationField', '_User');\n\n// new types can be added as they are available\nmySchema.addField('newField', 'ANewDataType')\n\n// save/update this schema to persist your field changes\nmySchema.save().then((result) => {\n  // returns save new schema\n});\n// or\nmySchema.update().then((result) => {\n  // updates existing schema\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Cloud Function with Master Key Permissions in Parse\nDESCRIPTION: This snippet shows how to define a Cloud Code function in Parse that allows users to 'like' a `Post` object without giving them direct write permissions. By setting `useMasterKey: true`, the function can override ACLs to increment the `likes` count securely.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/security.md#2025-04-22_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nParse.Cloud.define(\"like\", async request => {\n  var post = new Parse.Object(\"Post\");\n  post.id = request.params.postId;\n  post.increment(\"likes\");\n  await post.save(null, { useMasterKey: true })\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Parse Objects by ID in JavaScript\nDESCRIPTION: This example shows how to retrieve a `Parse.Object` using its `objectId` with `Parse.Query`. It includes error handling for unsuccessful retrievals.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/objects.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst GameScore = Parse.Object.extend(\"GameScore\");\nconst query = new Parse.Query(GameScore);\nquery.get(\"xWMyZ4YEGZ\")\n.then((gameScore) => {\n  // The object was retrieved successfully.\n}, (error) => {\n  // The object was not retrieved successfully.\n  // error is a Parse.Error with an error code and message.\n});\n```\n\n----------------------------------------\n\nTITLE: Advanced Parse SDK Initialization in Dart\nDESCRIPTION: Comprehensive initialization of the Parse SDK with additional parameters for enhanced functionality, including client key, debug mode, LiveQuery URL, and custom security context.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dart/getting-started.md#2025-04-22_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nawait Parse().initialize(\n    keyApplicationId,\n    keyParseServerUrl,\n    clientKey: keyParseClientKey, // Required for some setups\n    debug: true, // When enabled, prints logs to console\n    liveQueryUrl: keyLiveQueryUrl, // Required if using LiveQuery \n    autoSendSessionId: true, // Required for authentication and ACL\n    securityContext: securityContext, // Again, required for some setups\n    coreStore: CoreStoreMemoryImp()); // Non persistent mode (default): Sdk will store everything in memory instead of using Sembast as an internal DB.\n```\n\n----------------------------------------\n\nTITLE: Extending and Instantiating Parse.Object Subclasses in JavaScript SDK\nDESCRIPTION: This snippet demonstrates defining and instantiating Parse.Object subclasses using the extend method for custom class creation in JavaScript. It covers both string-based and object-based syntax for creating subclasses, such as 'GameScore' and 'Achievement'. Dependencies include the Parse JavaScript SDK, and these patterns allow for returning new object instances that follow a class structure.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/objects.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Simple syntax to create a new subclass of Parse.Object.\nconst GameScore = Parse.Object.extend(\"GameScore\");\n\n// Create a new instance of that class.\nconst gameScore = new GameScore();\n\n// Alternatively, you can use the typical Backbone syntax.\nconst Achievement = Parse.Object.extend({\n  className: \"Achievement\"\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Basic Object Data in Parse JSON Format\nDESCRIPTION: Example showing the JSON structure for importing a basic object into Parse with score, player name, and other standard fields. Demonstrates the required format including createdAt, updatedAt, and objectId fields.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/data.md#2025-04-22_snippet_0\n\nLANGUAGE: jsonc\nCODE:\n```\n{ \"results\": [\n  {\n    \"score\": 1337,\n    \"playerName\": \"Sean Plott\",\n    \"cheatMode\": false,\n    \"createdAt\": \"2022-01-01T12:23:45.678Z\",\n    \"updatedAt\": \"2022-01-01T12:23:45.678Z\",\n    \"objectId\": \"fchpZwSuGG\"\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Subclassing ParseObject for Type-Safe Access (C#)\nDESCRIPTION: Explains how to create a subclass of ParseObject to provide type-safe access to object properties. It demonstrates the process of defining a subclass, adding properties, and registering the subclass with Parse.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/objects.md#2025-04-22_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\n// Armor.cs\nusing Parse;\n\n[ParseClassName(\"Armor\")]\npublic class Armor : ParseObject\n{\n}\n\n// App.xaml.cs\nusing Parse;\n\npublic class App : Application\n{\n  public App()\n  {\n    ParseObject.RegisterSubclass<Armor>();\n    ParseClient.Initialize(ParseApplicationId, ParseWindowsKey);\n  }\n}\n```\n\nLANGUAGE: C#\nCODE:\n```\n// Armor.cs\n[ParseClassName(\"Armor\")]\npublic class Armor : ParseObject\n{\n  [ParseFieldName(\"displayName\")]\n  public string DisplayName\n  {\n    get { return GetProperty<string>(); }\n    set { SetProperty<string>(value); }\n  }\n}\n```\n\nLANGUAGE: C#\nCODE:\n```\n// Armor.cs\n[ParseClassName(\"Armor\")]\npublic class Armor : ParseObject\n{\n  [ParseFieldName(\"attribute\")]\n  public ParseRelation<ArmorAttribute> Attributes\n  {\n    get { return GetRelationProperty<ArmorAttribute>(); }\n  }\n}\n```\n\nLANGUAGE: C#\nCODE:\n```\npublic void TakeDamage(int amount) {\n  // Decrease the armor's durability and determine whether it has broken\n  this.Increment(\"durability\", -amount);\n  if (this.Durability < 0) {\n    this.IsBroken = true;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Fields in PHP Queries\nDESCRIPTION: Illustrates the `select` method for specifying fields in query results, thereby optimizing data retrieval for large datasets or performance-intensive applications. Further fields can be retrieved using `fetch`.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/queries.md#2025-04-22_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\n$query = new ParseQuery(\"GameScore\");\n$query->select([\"score\", \"playerName\"]);\n$results = $query->find();\n// each of results will only have the selected fields available.\n```\n\n----------------------------------------\n\nTITLE: Associations with Parse.User in JavaScript\nDESCRIPTION: Describes storing a new blog post associated with the current user and retrieving all posts by that user with Parse.Object and Parse.Query. Requires Parse.User for user management.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/users.md#2025-04-22_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst user = Parse.User.current();\n\n// Make a new post\nconst Post = Parse.Object.extend(\"Post\");\nconst post = new Post();\npost.set(\"title\", \"My New Post\");\npost.set(\"body\", \"This is some great content.\");\npost.set(\"user\", user);\nawait post.save();\n// Find all posts by the current user\nconst query = new Parse.Query(Post);\nquery.equalTo(\"user\", user);\nconst userPosts = await query.find();\n// userPosts contains all of the posts by the current user.\n});\n```\n\n----------------------------------------\n\nTITLE: Saving Nested Parse.Objects as Fields in Another Object (JavaScript)\nDESCRIPTION: Demonstrates the ability to assign a Parse.Object instance as a property value of another Parse.Object. When saving the parent, nested objects are also saved (cascade save) by default. Dependencies include the Parse JavaScript SDK and assumes objects are newly created and unsaved. This pattern automates the saving order for related data models.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/objects.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst Child = Parse.Object.extend(\"Child\");\nconst child = new Child();\n\nconst Parent = Parse.Object.extend(\"Parent\");\nconst parent = new Parent();\n\nparent.save({ child: child });\n// Automatically the object Child is created on the server\n// just before saving the Parent\n```\n\n----------------------------------------\n\nTITLE: Sending Push Notifications via Cloud Code - JavaScript\nDESCRIPTION: This snippet shows two methods (Promise and callback) in JavaScript for sending push notifications from Parse Server cloud functions. It uses Parse.Push.send() with a target query and payload data. Dependency is a properly initialized Parse Server in the cloud code context, and masterKey access must be used. Parameters include the target query and data object for the push message, expected input is a query and data, and output is a resolved/rejected promise or a callback. Must be executed in the cloud code environment.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/push-notifications.md#2025-04-22_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n// With promises\nParse.Push.send({\n  where: { ... },\n  data: { ... }\n}, { useMasterKey: true })\n.then(function() {\n  // Push sent!\n}, function(error) {\n  // There was a problem :(\n});\n\n// With Legacy Backbone callbacks\nParse.Push.send({\n  where: query,\n  data: {\n    alert: 'Test',\n    badge: 1,\n    sound: 'default'\n  }\n}, {\n  useMasterKey: true,\n  success: function() {\n    // Push sent!\n  },\n  error: function(error) {\n    // There was a problem :(\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Signing Up a New User with ParseUser in Java\nDESCRIPTION: This snippet demonstrates how to create a new user account using ParseUser. It sets the username, password, email, and additional fields, then calls the signUpInBackground method to asynchronously create the user in the Parse App.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/users.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nParseUser user = new ParseUser();\nuser.setUsername(\"my name\");\nuser.setPassword(\"my pass\");\nuser.setEmail(\"email@example.com\");\n\n// other fields can be set just like with ParseObject\nuser.put(\"phone\", \"650-253-0000\");\n\nuser.signUpInBackground(new SignUpCallback() {\n  public void done(ParseException e) {\n    if (e == null) {\n      // Hooray! Let them use the app now.\n    } else {\n      // Sign up didn't succeed. Look at the ParseException\n      // to figure out what went wrong\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Executing Compound Queries in Parse (JavaScript)\nDESCRIPTION: This snippet shows how to create compound queries using Parse.Query.or and Parse.Query.and methods. It includes examples of finding players with specific win conditions and users with complex age and friend count criteria.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/queries.md#2025-04-22_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nconst lotsOfWins = new Parse.Query(\"Player\");\nlotsOfWins.greaterThan(\"wins\", 150);\n\nconst fewWins = new Parse.Query(\"Player\");\nfewWins.lessThan(\"wins\", 5);\n\nconst mainQuery = Parse.Query.or(lotsOfWins, fewWins);\nmainQuery.find()\n  .then(function(results) {\n    // results contains a list of players that either have won a lot of games or won only a few games.\n  })\n  .catch(function(error) {\n    // There was an error.\n  });\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst query = new Parse.Query(\"User\");\nquery.greaterThan(\"age\", 18);\nquery.greaterThan(\"friends\", 0);\nquery.find()\n  .then(function(results) {\n    // results contains a list of users both older than 18 and having friends.\n  })\n  .catch(function(error) {\n    // There was an error.\n  });\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst age16Query = new Parse.Query(\"User\");\nage16Query.equalTo(\"age\", 16);\n\nconst age18Query = new Parse.Query(\"User\");\nage18Query.equalTo(\"age\", 18);\n\nconst friends0Query = new Parse.Query(\"User\");\nfriends0Query.equalTo(\"friends\", 0);\n\nconst friends2Query = new Parse.Query(\"User\");\nfriends2Query.greaterThan(\"friends\", 2);\n\nconst mainQuery = Parse.Query.and(\n  Parse.Query.or(age16Query, age18Query),\n  Parse.Query.or(friends0Query, friends2Query)\n);\nmainQuery.find()\n  .then(function(results) {\n    // results contains a list of users in the age of 16 or 18 who have either no friends or at least 2 friends\n    // results: (age 16 or 18) and (0 or >2 friends)\n  })\n  .catch(function(error) {\n    // There was an error.\n  });\n```\n\n----------------------------------------\n\nTITLE: Sorting Results in Parse.Query in JavaScript\nDESCRIPTION: Shows how to control the order of results returned by a Parse.Query using ascending and descending sorting methods.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/queries.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// Sorts the results in ascending order by the score field\nquery.ascending(\"score\");\n\n// Sorts the results in descending order by the score field\nquery.descending(\"score\");\n```\n\n----------------------------------------\n\nTITLE: Using Comparison Operators in Parse.Query in JavaScript\nDESCRIPTION: Demonstrates how to use comparison operators (lessThan, lessThanOrEqualTo, greaterThan, greaterThanOrEqualTo) in Parse.Query to filter results based on numeric values.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/queries.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Restricts to wins < 50\nquery.lessThan(\"wins\", 50);\n\n// Restricts to wins <= 50\nquery.lessThanOrEqualTo(\"wins\", 50);\n\n// Restricts to wins > 50\nquery.greaterThan(\"wins\", 50);\n\n// Restricts to wins >= 50\nquery.greaterThanOrEqualTo(\"wins\", 50);\n```\n\n----------------------------------------\n\nTITLE: Counting Objects in Parse Queries (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the count method to count objects that match a query without retrieving all the objects. It shows an example of counting how many games a player has played.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/queries.md#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst GameScore = Parse.Object.extend(\"GameScore\");\nconst query = new Parse.Query(GameScore);\nquery.equalTo(\"playerName\", \"Sean Plott\");\nconst count = await query.count();\nalert(\"Sean has played \" + count + \" games\");\n```\n\n----------------------------------------\n\nTITLE: Async Current User Retrieval in Parse\nDESCRIPTION: This code demonstrates how to retrieve the current user asynchronously using Parse.User.currentAsync(), which is recommended for platforms with async storage systems.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/users.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nParse.User.currentAsync().then(function(user) {\n    // do stuff with your user\n});\n```\n\n----------------------------------------\n\nTITLE: Making a GET Request with Parse.Cloud.httpRequest in JavaScript\nDESCRIPTION: Demonstrates how to make a simple GET request using Parse.Cloud.httpRequest. The function returns a Promise that resolves on success or rejects on failure.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/cloudcode/cloud-code-advanced.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nParse.Cloud.httpRequest({\n  url: 'https://www.awesomewebsite.com/'\n}).then(function(httpResponse) {\n  // success\n  console.log(httpResponse.text);\n},function(httpResponse) {\n  // error\n  console.error('Request failed with response code ' + httpResponse.status);\n});\n```\n\n----------------------------------------\n\nTITLE: Saving a New Parse.Object Instance (GameScore) to Parse Cloud (JavaScript)\nDESCRIPTION: This example demonstrates creating, populating, and saving a new instance of a Parse.Object subclass, with Promise-based success and error handling. It uses the set method to define field values, and the save method to persist data to Parse Cloud. Alerts display the objectId upon success or an error message upon failure. Requires Parse JavaScript SDK.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/objects.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst GameScore = Parse.Object.extend(\"GameScore\");\nconst gameScore = new GameScore();\n\ngameScore.set(\"score\", 1337);\ngameScore.set(\"playerName\", \"Sean Plott\");\ngameScore.set(\"cheatMode\", false);\n\ngameScore.save()\n.then((gameScore) => {\n  // Execute any logic that should take place after the object is saved.\n  alert('New object created with objectId: ' + gameScore.id);\n}, (error) => {\n  // Execute any logic that should take place if the save fails.\n  // error is a Parse.Error with an error code and message.\n  alert('Failed to create new object, with error code: ' + error.message);\n});\n```\n\n----------------------------------------\n\nTITLE: Performing Post-Delete Actions with afterDelete in Parse JavaScript SDK\nDESCRIPTION: This example demonstrates how to use afterDelete trigger to perform actions after an object is deleted. It deletes all associated comments when a Post is deleted.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/cloudcode/cloud-code.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nParse.Cloud.afterDelete(\"Post\", (request) => {\n  const query = new Parse.Query(\"Comment\");\n  query.equalTo(\"post\", request.object);\n  query.find()\n    .then(Parse.Object.destroyAll)\n    .catch((error) => {\n      console.error(\"Error finding related comments \" + error.code + \": \" + error.message);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Validation with beforeSave in Parse JavaScript SDK\nDESCRIPTION: This example demonstrates how to use beforeSave trigger to validate data before saving a Review object. It checks if the 'stars' field is within a valid range.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/cloudcode/cloud-code.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nParse.Cloud.beforeSave(\"Review\", (request) => {\n// do any additional beforeSave logic here\n},{\n  fields: {\n    stars : {\n      required:true,\n      options: stars => {\n        return stars >= 1 && stars =< 5;\n      },\n      error: 'Your review must be between one and five stars'\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Selecting Returned Fields in Parse Java\nDESCRIPTION: Shows how to use selectKeys in a Parse Java query to restrict returned data to only desired fields (e.g., score, playerName). This pattern is useful for bandwidth reduction and efficiency.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_71\n\nLANGUAGE: java\nCODE:\n```\nParseQuery<ParseObject> query = ParseQuery.getQuery(\"GameScore\");\nquery.selectKeys(Arrays.asList(\"score\", \"playerName\"));\nquery.findInBackground(new FindCallback<ParseObject>() {\n  @Override\n  public void done(List<ParseObject> list, ParseException e) {\n    if (e == null) {\n      // each of results will only have the selected fields available.\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Performing Full Text Search Query in Parse Server\nDESCRIPTION: Demonstrates how to use whereFullText to search string fields in Parse objects. Includes example of basic text search and sorting by search score.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/queries.md#2025-04-22_snippet_20\n\nLANGUAGE: java\nCODE:\n```\nParseQuery<ParseObject> query = ParseQuery.getQuery(\"BarbecueSauce\");\nquery.whereFullText(\"name\", \"bbq\");\n```\n\nLANGUAGE: java\nCODE:\n```\nParseQuery<ParseObject> query = ParseQuery.getQuery(\"BarbecueSauce\");\nquery.whereFullText(\"name\", \"Big Daddy's\");\nquery.orderByAscending(\"$score\");\nquery.selectKeys(Arrays.asList(\"$score\"));\nList<ParseObject> results = query.find();\n```\n\n----------------------------------------\n\nTITLE: User Validation in Parse.User beforeSave Trigger\nDESCRIPTION: This code sets up a beforeSave trigger for Parse.User objects. It sets a default value for the 'accType' field and makes it immutable unless the masterKey is provided.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/cloudcode/cloud-code.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nParse.Cloud.beforeSave(Parse.User, () => {\n  // any additional beforeSave logic here\n}, {\n    fields: {\n      accType: {\n        default: 'viewer',\n        constant: true\n      },\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding notEqualTo Constraint to Parse.Query in JavaScript\nDESCRIPTION: Shows how to filter out objects that match a specific key-value pair using the notEqualTo constraint on a Parse.Query.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/queries.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nquery.notEqualTo(\"playerName\", \"Michael Yabuti\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Caching in Parse\nDESCRIPTION: Shows how to cache query results using the local datastore and execute hybrid queries that combine local and network data.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/queries.md#2025-04-22_snippet_23\n\nLANGUAGE: java\nCODE:\n```\nfinal ParseQuery query = ParseQuery.getQuery(\"GameScore\");\nquery.fromLocalDatastore().findInBackground().continueWithTask((task) -> {\n  // Update UI with results from Local Datastore ...\n  ParseException error = task.getError();\n  if(error == null){\n    List<ParseObject> gameScore = task.getResult();\n    for(ParseObject game : gameScore){\n        //...\n    }\n  }\n  // Now query the network:\n  return query.fromNetwork().findInBackground();\n}, Task.UI_EXECUTOR).continueWithTask((task) -> {\n  // Update UI with results from Network ...\n  ParseException error = task.getError();\n  if(error == null){\n    List<ParseObject> gameScore = task.getResult();\n    for(ParseObject game : gameScore){\n        //...\n    }\n  }\n  return task;\n}, Task.UI_EXECUTOR);\n```\n\n----------------------------------------\n\nTITLE: Executing Relational Queries in Parse\nDESCRIPTION: Shows different ways to query related objects in Parse, including matching specific objects, using inner queries, and including related object data.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/queries.md#2025-04-22_snippet_21\n\nLANGUAGE: java\nCODE:\n```\nParseQuery<ParseObject> query = ParseQuery.getQuery(\"Comment\");\nquery.whereEqualTo(\"post\", myPost);\n\nquery.findInBackground(new FindCallback<ParseObject>() {\n  public void done(List<ParseObject> commentList, ParseException e) {\n    // commentList now has the comments for myPost\n  }\n});\n```\n\nLANGUAGE: java\nCODE:\n```\nParseQuery<ParseObject> innerQuery = ParseQuery.getQuery(\"Post\");\ninnerQuery.whereExists(\"image\");\nParseQuery<ParseObject> query = ParseQuery.getQuery(\"Comment\");\nquery.whereMatchesQuery(\"post\", innerQuery);\nquery.findInBackground(new FindCallback<ParseObject>() {\n  public void done(List<ParseObject> commentList, ParseException e) {\n    // comments now contains the comments for posts with images.\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Private User Data with ACL in Parse\nDESCRIPTION: Shows how to create a separate object for storing private user data with an ACL that restricts access to the current user only. This is useful for sensitive information like phone numbers.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/security.md#2025-04-22_snippet_8\n\nLANGUAGE: objective-c\nCODE:\n```\nPFObject *privateData = [PFObject objectWithClassName:@\"PrivateUserData\"];\nprivateData.ACL = [PFACL ACLWithUser:[PFUser currentUser]];\n[privateData setObject:@\"555-5309\" forKey:@\"phoneNumber\"];\n\n[[PFUser currentUser] setObject:privateData forKey:@\"privateData\"];\n```\n\nLANGUAGE: swift\nCODE:\n```\nif let currentUser = PFUser.current() {\n    let privateData = PFObject(className: \"PrivateUserData\")\n    privateData.ACL = PFACL(user: currentUser)\n    privateData.setObject(\"555-5309\", forKey: \"phoneNumber\")\n    currentUser.setObject(privateData, forKey: \"privateData\")\n}\n```\n\nLANGUAGE: java\nCODE:\n```\nParseObject privateData = new ParseObject(\"PrivateUserData\");\nprivateData.setACL(new ParseACL(ParseUser.getCurrentUser()));\nprivateData.put(\"phoneNumber\", \"555-5309\");\n\nParseUser.getCurrentUser().put(\"privateData\", privateData);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar privateData = Parse.Object.extend(\"PrivateUserData\");\nprivateData.setACL(new Parse.ACL(Parse.User.current()));\nprivateData.set(\"phoneNumber\", \"555-5309\");\n\nParse.User.current().set(\"privateData\", privateData);\n```\n\nLANGUAGE: c#\nCODE:\n```\nvar privateData = new ParseObject(\"PrivateUserData\");\nprivateData.ACL = new ParseACL(ParseUser.CurrentUser);\nprivateData[\"phoneNumber\"] = \"555-5309\";\n\nParseUser.CurrentUser[\"privateData\"] =  privateData;\n```\n\nLANGUAGE: php\nCODE:\n```\n$privateData = ParseObject::create(\"PrivateUserData\");\n$privateData->setACL(new ParseACL(ParseUser::getCurrentUser()));\n$privateData->set(\"phoneNumber\", \"555-5309\");\n\nParseUser::getCurrentUser()->set(\"privateData\", $privateData);\n```\n\n----------------------------------------\n\nTITLE: Handling Invalid Session Token Error in PHP\nDESCRIPTION: Implementation of a global error handler in PHP that handles invalid session token errors (code 209) by automatically logging out the user and redirecting them to the login page for re-authentication.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/sessions.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\npublic class ParseErrorHandler {\n  public static handleParseError(ParseException $e) {\n    $code = $e->getCode();\n    switch ($code) {\n      case: 209: // INVALID_SESSION_TOKEN\n        ParseUser::logOut();\n        ... // Redirect the to login page.\n        break;\n\n      ... // Other Parse API errors that you want to explicitly handle\n    }\n  }\n});\n\n// For each API request, call the global error handler\ntry {\n  $results = $query->find();\n  // ...\n} catch (ParseException $e) {\n  ParseErrorHandler::handleParseError($e)\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Comments for a Specific Post using PFQuery and NSPredicate in iOS\nDESCRIPTION: This snippet demonstrates how to fetch comments for a particular post using both PFQuery and NSPredicate methods. It shows the process for both Objective-C and Swift.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/queries.md#2025-04-22_snippet_46\n\nLANGUAGE: objective-c\nCODE:\n```\n// Assume PFObject *myPost was previously created.\n// Using PFQuery\nPFQuery *query = [PFQuery queryWithClassName:@\"Comment\"];\n[query whereKey:@\"post\" equalTo:myPost];\n\n[query findObjectsInBackgroundWithBlock:^(NSArray *comments, NSError *error) {\n    // comments now contains the comments for myPost\n}];\n\n// Using NSPredicate\nNSPredicate *predicate = [NSPredicate predicateWithFormat:@\"post = %@\", myPost];\nPFQuery *query = [PFQuery queryWithClassName:@\"Comment\" predicate:predicate];\n\n[query findObjectsInBackgroundWithBlock:^(NSArray *comments, NSError *error) {\n    // comments now contains the comments for myPost\n}];\n```\n\nLANGUAGE: swift\nCODE:\n```\n// Assume PFObject *myPost was previously created.\n// Using PFQuery\nlet query = PFQuery(className: \"Comment\")\nquery.whereKey(\"post\", equalTo: myPost)\nquery.findObjectsInBackground { (comments: [PFObject]?, error: Error?) in\n    if let error = error {\n        // The request failed\n        print(error.localizedDescription)\n    } else {\n        // comments now contains the comments for myPost\n    }\n}\n\n// Using NSPredicate\nlet predicate = NSPredicate(format: \"post = %@\", myPost)\nlet query = PFQuery(className: \"Comment\", predicate: predicate)\n\nquery.findObjectsInBackground { (comments: [PFObject]?, error: Error?) in\n    if let error = error {\n        // The request failed\n        print(error.localizedDescription)\n    } else {\n        // comments now contains the comments for myPost\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Error Handling with Parse Query\nDESCRIPTION: Demonstrates basic error handling when attempting to fetch a non-existent object using Parse.Query. Shows both Promise-style .then() and .catch() approaches for handling errors.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/handling-errors.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst query = new Parse.Query(Note);\nquery.get(\"aBcDeFgH\").then((results) => {\n  // This function will *not* be called.\n  alert(\"Everything went fine!\");\n}, (error) => {\n  // This will be called.\n  // error is an instance of Parse.Error with details about the error.\n  if (error.code === Parse.Error.OBJECT_NOT_FOUND) {\n    alert(\"Uh oh, we couldn't find the object!\");\n  }\n});\n\n// You can also use `.catch`\n\nquery.get(\"aBcDeFgH\").then((results) => {\n  // This function will *not* be called.\n  alert(\"Everything went fine!\");\n}).catch((error) => {\n  // This will be called.\n  // error is an instance of Parse.Error with details about the error.\n  if (error.code === Parse.Error.OBJECT_NOT_FOUND) {\n    alert(\"Uh oh, we couldn't find the object!\");\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Real-Time Update Events with Parse LiveQuery in JavaScript\nDESCRIPTION: This snippet shows how to set up an event listener for 'update' events using a LiveQuery subscription. Whenever the subscribed 'People' object is updated (e.g., changing the 'score' field), the callback is triggered with the updated object as an argument. Assumes an active subscription on a Parse.Query and that the update event will include the latest field values.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/live-query.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nsubscription.on('update', (people) => {\\n  console.log(people.get('score')); // This should output 100\\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering Results in Aggregate Query for Parse Server (Bash)\nDESCRIPTION: This snippet demonstrates how to filter results in an aggregate query for Parse Server using a curl command. It filters objects where the score is greater than 15.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/queries.md#2025-04-22_snippet_39\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-Master-Key: ${MASTER_KEY}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -G \\\n  --data-urlencode 'match={\"score\":{\"$gt\":15}}' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/aggregate/Player\n```\n\n----------------------------------------\n\nTITLE: Custom Validation Function for Cloud Code in JavaScript\nDESCRIPTION: This example shows how to create a custom validation function that can be reused across multiple Cloud Functions. It checks for master key or a specific user ID.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/cloudcode/cloud-code.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst validationRules = request => {\n  if (request.master) {\n    return;\n  }\n  if (!request.user || request.user.id !== 'masterUser') {\n    throw 'Unauthorized';\n  }\n}\n\nParse.Cloud.define('adminFunction', request => {\n// do admin code here, confident that request.user.id is masterUser, or masterKey is provided\n},validationRules)\n\nParse.Cloud.define('adminFunctionTwo', request => {\n// do admin code here, confident that request.user.id is masterUser, or masterKey is provided\n},validationRules)\n```\n\n----------------------------------------\n\nTITLE: Defining JSON-Compatible Data for Parse.Object in JavaScript\nDESCRIPTION: This snippet shows a sample data structure for storing key-value pairs with Parse.Object, using JavaScript object syntax compatible with JSON. It illustrates that keys can be alphanumeric strings and values can be strings, numbers, or booleans. The data is intended as initialization data to be used when creating or saving Parse.Object instances.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/objects.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscore: 1337, playerName: \"Sean Plott\", cheatMode: false\n```\n\n----------------------------------------\n\nTITLE: Executing Promises in Series in Parse JavaScript SDK\nDESCRIPTION: Example showing how to execute a series of operations sequentially using Promises, where each operation waits for the previous one to complete.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/promises.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst query = new Parse.Query(\"Comments\");\nquery.equalTo(\"post\", post);\n\nquery.find().then(function(results) {\n  // Create a trivial resolved promise as a base case.\n  let promise = Promise.resolve();\n  results.forEach((result) =>  {\n    // For each item, extend the promise with a function to delete it.\n    promise = promise.then(() => {\n      // Return a promise that will be resolved when the delete is finished.\n      return result.destroy();\n    });\n  });\n  return promise;\n\n}).then(function() {\n  // Every comment was deleted.\n});\n```\n\n----------------------------------------\n\nTITLE: Set Membership Constraints with containedIn and NSPredicate in Objective-C\nDESCRIPTION: Demonstrates querying objects where a field matches any value from a given list using whereKey:containedIn: or an NSPredicate, which reduces the need for multiple queries. Requires Parse SDK and an array of acceptable values.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/queries.md#2025-04-22_snippet_22\n\nLANGUAGE: objective_c\nCODE:\n```\n// Finds scores from any of Jonathan, Dario, or Shawn\n// Using PFQuery\nNSArray *names = @[@\"Jonathan Walsh\", @\"Dario Wunsch\", @\"Shawn Simon\"];\n[query whereKey:@\"playerName\" containedIn:names];\n\n// Using NSPredicate\nNSArray *names = @[@\"Jonathan Walsh\", @\"Dario Wunsch\", @\"Shawn Simon\"];\nNSPredicate *pred = [NSPredicate predicateWithFormat: @\"playerName IN %@\", names];\nPFQuery *query = [PFQuery queryWithClassName:@\"GameScore\" predicate:pred];\n```\n\n----------------------------------------\n\nTITLE: Logging In a User with ParseUser in C#\nDESCRIPTION: This code snippet shows how to log in an existing user using their username and password. It uses the ParseUser.LogInAsync method and demonstrates error handling for failed login attempts.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/users.md#2025-04-22_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\ntry\n{\n    await ParseUser.LogInAsync(\"myname\", \"mypass\");\n    // Login was successful.\n}\ncatch (Exception e)\n{\n    // The login failed. Check the error to see why.\n}\n```\n\n----------------------------------------\n\nTITLE: Checking and Using Current User in ParseUser for Java\nDESCRIPTION: This snippet demonstrates how to check for a currently logged-in user and use their data. It retrieves the current user object and checks if it's null to determine if a user is logged in.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/users.md#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nParseUser currentUser = ParseUser.getCurrentUser();\nif (currentUser != null) {\n  // do stuff with the user\n} else {\n  // show the signup or login screen\n}\n```\n\n----------------------------------------\n\nTITLE: Registering for Push Notifications - Swift\nDESCRIPTION: Demonstrates how to register an iOS app for push notifications using Swift with proper notification types and handling. This snippet requires the UIKit framework, iOS app delegate, and user notification settings. It expects to be added inside application:didFinishLaunchingWithOptions:, specifies alert, badge, and sound as notification types, and registers for remote notifications. Limitations include requiring iOS 8+ and the app having permission for push notifications.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/push-notifications-ios.md#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n// Swift\\nlet types: UIUserNotificationType = [.Alert, .Badge, .Sound]\\nlet settings = UIUserNotificationSettings(forTypes: types, categories: nil)\\napplication.registerUserNotificationSettings(settings)\\napplication.registerForRemoteNotifications()\n```\n\n----------------------------------------\n\nTITLE: Managing Many-to-Many Relationships with Parse.Relation in JavaScript\nDESCRIPTION: Describes using `Parse.Relation` for many-to-many relationships, such as a `User` liking multiple `Posts`. Provides examples of adding and removing objects from relations, as well as querying related objects.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/objects.md#2025-04-22_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nconst user = Parse.User.current();\nconst relation = user.relation(\"likes\");\nrelation.add(post);\nuser.save();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nrelation.remove(post);\nuser.save();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nrelation.remove(post1);\nrelation.remove(post2);\nuser.save();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nrelation.add([post1, post2, post3]);\nuser.save();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nrelation.query().find({\n  success: function(list) {\n    // list contains the posts that the current user likes.\n  }\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst query = relation.query();\nquery.equalTo(\"title\", \"I'm Hungry\");\nquery.find({\n  success:function(list) {\n    // list contains post liked by the current user which have the title \"I'm Hungry\".\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Public Post with Author-Only Edit Access in PHP\nDESCRIPTION: This snippet illustrates how to create a post that can be read by anyone but edited only by its author. It uses ParseACL to set public read access while restricting write access to the current user.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/users.md#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$publicPost = new ParseObject(\"Post\");\n$postACL = ParseACL::createACLWithUser(ParseUser::getCurrentUser());\n$postACL->setPublicReadAccess(true);\n$publicPost->setACL($postACL);\n$publicPost->save();\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Queries with QueryBuilder in Dart\nDESCRIPTION: This example demonstrates how to create complex queries using the QueryBuilder class. It shows multiple conditions chained together to filter results.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dart/queries.md#2025-04-22_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar queryBuilder = QueryBuilder<DietPlan>(DietPlan())\n  ..startsWith(DietPlan.keyName, \"Keto\")\n  ..greaterThan(DietPlan.keyFat, 64)\n  ..lessThan(DietPlan.keyFat, 66)\n  ..equals(DietPlan.keyCarbs, 5);\n\nvar response = await queryBuilder.query();\n\nif (response.success) {\n  print(ApplicationConstants.keyAppName + \": \" + ((response.results as List<dynamic>).first as DietPlan).toString());\n} else {\n  print(ApplicationConstants.keyAppName + \": \" + response.exception.message);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Schema with Various Field Types in Parse\nDESCRIPTION: This code snippet demonstrates how to define a Parse Schema for a User class. It showcases the usage of different field types including Date, String, Array, GeoPoint, Pointer, Relation, and Polygon. The example illustrates how to set required fields and specify target classes for Pointer and Relation types.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/defined-schema/fields.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst UserSchema = {\n  className: \"_User\",\n  fields: {\n    birthDate: { type: \"Date\" },\n    firstname: { type: \"String\", required: true },\n    lastname: { type: \"String\", required: true },\n    tags: { type: \"Array\" },\n    location: { type: \"GeoPoint\" },\n    city: { type: \"Pointer\", targetClass: \"City\" },\n    friends: { type: \"Relation\", targetClass: \"_User\" },\n    zone: { type: \"Polygon\" },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Error Handling with Promise Chains in Parse JavaScript SDK\nDESCRIPTION: Example demonstrating simplified error handling with Promise chains, showing how a single error handler can catch errors from any step in the chain.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/promises.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nParse.User.logIn(\"user\", \"pass\").then(function(user) {\n  return query.find();\n}).then(function(results) {\n  return results[0].save({ key: value });\n}).then(function(result) {\n  // the object was saved.\n}, function(error) {\n  // there was some error.\n});\n```\n\n----------------------------------------\n\nTITLE: Scheduling Future Parse Push Notifications in JavaScript\nDESCRIPTION: Schedules a push notification to be sent at a specific future date and time using the `push_time` parameter in `Parse.Push.send`. The example targets a specific user by querying the `Parse.Installation` class for an entry matching a `user` object. The `push_time` accepts a JavaScript `Date` object, an ISO 8601 formatted string, or a UNIX timestamp.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/push-notifications.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst tomorrowDate = new Date(...);\n\nconst query = new Parse.Query(Parse.Installation);\nquery.equalTo('user', user);\n\nParse.Push.send({\n  where: query,\n  data: {\n    alert: \"You previously created a reminder for the game today\"\n  },\n  push_time: tomorrowDate\n})\n.then(function() {\n  // Push was successful\n}, function(error) {\n  // Handle error\n});\n```\n\n----------------------------------------\n\nTITLE: Working with Data Types in Parse Server Java SDK\nDESCRIPTION: Illustrates the various data types supported by Parse Server and how to use them in Java. It includes examples of storing primitive types, arrays, objects, and null values.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/objects.md#2025-04-22_snippet_18\n\nLANGUAGE: java\nCODE:\n```\nint myNumber = 42;\nString myString = \"the number is \" + myNumber;\nDate myDate = new Date();\n\nJSONArray myArray = new JSONArray();\nmyArray.put(myString);\nmyArray.put(myNumber);\n\nJSONObject myObject = new JSONObject();\nmyObject.put(\"number\", myNumber);\nmyObject.put(\"string\", myString);\n\nParseObject bigObject = new ParseObject(\"BigObject\");\nbigObject.put(\"myNumber\", myNumber);\nbigObject.put(\"myString\", myString);\nbigObject.put(\"myDate\", myDate);\nbigObject.put(\"myArray\", myArray);\nbigObject.put(\"myObject\", myObject);\nbigObject.put(\"myNull\", JSONObject.NULL);\nbigObject.saveInBackground();\n```\n\n----------------------------------------\n\nTITLE: Adding Users and Roles to a Parse Role\nDESCRIPTION: This snippet shows how to add users and other roles to a newly created Parse.Role using the users and roles relations. This is essential for building role hierarchies and assigning permissions to groups of users.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/roles.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst role = new Parse.Role(roleName, roleACL);\nrole.getUsers().add(usersToAddToRole);\nrole.getRoles().add(rolesToAddToRole);\nrole.save();\n```\n\n----------------------------------------\n\nTITLE: User Login Implementation in Parse iOS\nDESCRIPTION: Shows how to authenticate existing users using their username and password credentials with async login and error handling.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/users.md#2025-04-22_snippet_1\n\nLANGUAGE: objective-c\nCODE:\n```\n[PFUser logInWithUsernameInBackground:@\"myname\" password:@\"mypass\"\n  block:^(PFUser *user, NSError *error) {\n    if (user) {\n      // Do stuff after successful login.\n    } else {\n      // The login failed. Check error to see why.\n    }\n}];\n```\n\nLANGUAGE: swift\nCODE:\n```\nPFUser.logInWithUsername(inBackground:\"myname\", password:\"mypass\") {\n  (user: PFUser?, error: Error?) -> Void in\n  if user != nil {\n    // Do stuff after successful login.\n  } else {\n    // The login failed. Check error to see why.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Platform/Environment Push Configuration - JavaScript\nDESCRIPTION: This snippet illustrates how to configure Parse Server to support multiple environments (dev/prod) and platforms (iOS, tvOS, watchOS, macOS) by providing arrays of configuration objects under the respective platform keys. Each object specifies the PFX file, bundleId, and environment flag. This supports scenarios where both development and production certificates are needed for push notification delivery.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/push-notifications.md#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\npush: {\n  ios: [\n    {\n      pfx: '', // Dev PFX or P12\n      bundleId: '',\n      production: false // Dev\n    },\n    {\n      pfx: '', // Prod PFX or P12\n      bundleId: '',  \n      production: true // Prod\n    }\n  ],\n  tvos: [\n    // ...\n  ],\n  watchos: [\n    // ...\n  ],\n  osx: [\n    // ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Parse FCM Dependency in Module build.gradle (Gradle)\nDESCRIPTION: This snippet adds the Parse FCM Android SDK dependency to the `dependencies` block in the module-level `build.gradle` file (typically `app/build.gradle`). Replace `latest.version.here` with the specific version of the library you intend to use. This dependency provides the necessary classes for FCM integration with Parse.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/push-notifications-android.md#2025-04-22_snippet_1\n\nLANGUAGE: gradle\nCODE:\n```\ndependencies {\n    implementation \"com.github.parse-community.Parse-SDK-Android:fcm:latest.version.here\"\n}\n```\n\n----------------------------------------\n\nTITLE: Relational Queries in Parse PHP\nDESCRIPTION: Shows various ways to perform relational queries including matching objects, using matchesQuery and includeKey for retrieving related objects.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/queries.md#2025-04-22_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n// Assume ParseObject $myPost was previously created.\n$query = new ParseQuery(\"Comment\");\n$query->equalTo(\"post\", $myPost);\n$comments = $query->find();\n// comments now contains the comments for myPost\n```\n\nLANGUAGE: php\nCODE:\n```\n$innerQuery = new ParseQuery(\"Post\");\n$innerQuery->exists(\"image\");\n$query = new ParseQuery(\"Comment\");\n$query->matchesQuery(\"post\", $innerQuery);\n$comments = $query->find();\n// comments now contains the comments for posts with images.\n```\n\nLANGUAGE: php\nCODE:\n```\n$innerQuery = new ParseQuery(\"Post\");\n$innerQuery->exists(\"image\");\n$query = new ParseQuery(\"Comment\");\n$query->doesNotMatchQuery(\"post\", $innerQuery);\n$query->find();\n// comments now contains the comments for posts without images.\n```\n\nLANGUAGE: php\nCODE:\n```\n$post = new ParseObject(\"Post\", \"1zEcyElZ80\");\n$query->equalTo(\"post\", $post);\n```\n\nLANGUAGE: php\nCODE:\n```\n$query = new ParseQuery(\"Comment\");\n\n// Retrieve the most recent ones\nquery->descending(\"createdAt\");\n\n// Only retrieve the last ten\nquery->limit(10);\n\n// Include the post data with each comment\nquery->includeKey(\"post\");\n\n$comments = query->find();\n// Comments now contains the last ten comments, and the \"post\" field\n// has been populated. For example:\nfor ($i = 0; $i < count($comments); $i++) {\n  // This does not require a network access.\n  $post = $comments[$i]->get(\"post\");\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n$query->includeKey(\"post.author\");\n```\n\n----------------------------------------\n\nTITLE: Setting ACL on Current User in Java\nDESCRIPTION: This Java implementation sets an Access Control List (ACL) on the current user, restricting access to user data. It creates a new ParseACL instance specific to the current user and assigns it to that user.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/security.md#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nParseUser user = ParseUser.getCurrentUser();\nuser.setACL(new ParseACL(user));\n```\n\n----------------------------------------\n\nTITLE: Initial Parse Server Setup for Public File Uploads using JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates configuring Parse Server to allow public file uploads. It includes enabling uploads for anonymous users and the general public. This requires Parse Server version 5.0.0 or newer.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/file-adapters.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst api = new ParseServer({\n  databaseURI: databaseUri || 'mongodb://localhost:27017/dev',\n  cloud: process.env.PARSE_SERVER_CLOUD || __dirname + '/cloud/main.js',\n  appId: process.env.PARSE_SERVER_APPLICATION_ID || 'myAppId',\n  masterKey: process.env.PARSE_SERVER_MASTER_KEY || '',\n  fileUpload: {\n    enableForPublic: true,\n    enableForAnonymousUser: true,\n    enableForAuthenticatedUser: true,\n  }\n});\nawait api.start();\n```\n\n----------------------------------------\n\nTITLE: Setting Up Parse Server and MongoDB Locally\nDESCRIPTION: To quickly start using Parse Server locally, execute a bootstrap script, install the MongoDB runner, start MongoDB, and launch the Parse Server. This setup requires Node.js and either MongoDB or PostgreSQL. After installation, use arbitrary strings for the application id and master key for client authentication. Expected output: a standalone Parse Server instance running locally.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/getting-started.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsh <(curl -fsSL https://raw.githubusercontent.com/parse-community/parse-server/master/bootstrap.sh)\nnpm install -g mongodb-runner\nmongodb-runner start\nnpm start\n\n```\n\n----------------------------------------\n\nTITLE: Signing Up a Parse User in Dart\nDESCRIPTION: Shows the process of signing up a newly created Parse user and handling the response.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dart/users.md#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar response = await user.signUp();\nif (response.success) user = response.result;\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Parse LiveQuery in JavaScript Client\nDESCRIPTION: This snippet illustrates initializing a Parse.Query for a specific class ('People'), applying a condition with 'equalTo', and subscribing to real-time updates. Dependencies include the Parse JavaScript SDK and a pre-configured connection to the Parse server. The 'query' object defines the criteria, while 'subscribe()' initiates the subscription for live updates. The example expects that 'Parse' is already imported and initialized with application credentials, and usage of 'await' requires an async function context.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/live-query.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet query = new Parse.Query('People');\\nquery.equalTo('name', 'Mengyan');\\nlet subscription = await query.subscribe();\n```\n\n----------------------------------------\n\nTITLE: Enforcing Rate Limit on a beforeSave Trigger in Parse\nDESCRIPTION: This code snippet illustrates how to apply a rate limit to a `beforeSave` trigger on the `TestObject` class, restricting writes to once per minute. This ensures the class is not written to excessively, protecting server resources.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/security.md#2025-04-22_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nParse.Cloud.beforeSave('TestObject', () => {}, {\n  rateLimit: {\n    requestTimeWindow: 1 * 60 * 1000, // one write per minute,,\n    requestCount: 1,\n    errorResponseMessage: 'Too many requests!',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Invalid Session Token Error in JavaScript\nDESCRIPTION: Implementation of a global error handler in JavaScript/Node.js that handles invalid session token errors by automatically logging out the user and prompting them to log in again, either in a web browser or through an Express.js redirect.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/sessions.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction handleParseError(err) {\n  switch (err.code) {\n    case Parse.Error.INVALID_SESSION_TOKEN:\n      Parse.User.logOut();\n      ... // If web browser, render a log in screen\n      ... // If Express.js, redirect the user to the log in route\n      break;\n\n    ... // Other Parse API errors that you want to explicitly handle\n  }\n}\n\n// For each API request, call the global error handler\nquery.find().then(function() {\n  ...\n}, function(err) {\n  handleParseError(err);\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Multiple Constraints to a Parse Query in Android\nDESCRIPTION: This snippet demonstrates how to apply multiple constraints to a ParseQuery. Objects will only appear in results if they match all constraints, effectively creating an AND operation.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/queries.md#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nquery.whereNotEqualTo(\"playerName\", \"Michael Yabuti\");\nquery.whereGreaterThan(\"playerAge\", 18);\n```\n\n----------------------------------------\n\nTITLE: Implementing Cloud Function Validation in JavaScript\nDESCRIPTION: This example shows how to add validation to the 'averageStars' Cloud Function. It ensures that the 'movie' parameter is provided and that the function is only called by logged-in users.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/cloudcode/cloud-code.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nParse.Cloud.define(\"averageStars\", async (request) => {\n  const query = new Parse.Query(\"Review\");\n  query.equalTo(\"movie\", request.params.movie);\n  const results = await query.find();\n  let sum = 0;\n  for (let i = 0; i < results.length; ++i) {\n    sum += results[i].get(\"stars\");\n  }\n  return sum / results.length;\n},{\n  fields : ['movie'],\n  requireUser: true\n});\n```\n\n----------------------------------------\n\nTITLE: Setting ACL on Current User in JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to set an Access Control List (ACL) on the current user in Parse. It retrieves the current user and uses the setACL method to assign permissions that restrict data access to only that user.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/security.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar user = Parse.User.current();\nuser.setACL(new Parse.ACL(user));\n```\n\n----------------------------------------\n\nTITLE: Projecting Fields in Aggregate Query for Parse Server (Python)\nDESCRIPTION: This snippet shows how to project specific fields in an aggregate query for Parse Server using Python. It projects only the 'score' field.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/queries.md#2025-04-22_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\nimport urllib.parse\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nparams = urllib.parse.urlencode({\"project\": json.dumps({\n    \"score\": 1\n})})\nconnection.connect()\nconnection.request('GET', '/parse/aggregate/Player?%s' % params, '', {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-Master-Key\": \"${MASTER_KEY}\"\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Accessing PFObject Properties in Parse iOS SDK\nDESCRIPTION: Demonstrates how to access properties of a PFObject using different methods in Objective-C and Swift. It shows accessing custom properties as well as special properties like objectId and createdAt.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/objects.md#2025-04-22_snippet_2\n\nLANGUAGE: objective-c\nCODE:\n```\nint score = [[gameScore objectForKey:@\"score\"] intValue];\nNSString *playerName = gameScore[@\"playerName\"];\nBOOL cheatMode = [gameScore[@\"cheatMode\"] boolValue];\n\nNSString *objectId = gameScore.objectId;\nNSDate *updatedAt = gameScore.updatedAt;\nNSDate *createdAt = gameScore.createdAt;\nPFACL *ACL = gameScore.ACL;\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet score = gameScore[\"score\"] as? Int\nlet playerName = gameScore[\"playerName\"] as? String\nlet cheatMode = gameScore[\"cheatMode\"] as? Bool\n\nlet objectId = gameScore.objectId\nlet updatedAt = gameScore.updatedAt\nlet createdAt = gameScore.createdAt\nlet acl = gameScore.acl\n```\n\n----------------------------------------\n\nTITLE: Setting Per-User Permissions with ParseACL in C#\nDESCRIPTION: Demonstrates how to create an object with permissions granted to multiple specific users by adding individual read and write access to a ParseACL.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/users.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nvar groupMessage = new ParseObject(\"Message\");\nvar groupACL = new ParseACL();\n\n// userList is an IEnumerable<ParseUser> with the users we are sending\n// this message to.\nforeach (var user in userList)\n{\n    groupACL.SetReadAccess(user, true);\n    groupACL.SetWriteAccess(user, true);\n}\n\ngroupMessage.ACL = groupACL;\nTask saveTask = groupMessage.SaveAsync();\n```\n\n----------------------------------------\n\nTITLE: Configuring LiveQuery Server Settings in JavaScript\nDESCRIPTION: This snippet presents the full configuration object for initializing a standalone LiveQuery server. Options include Parse server credentials ('appId', 'masterKey', 'serverURL'), per-session keyPairs, timeouts, and logging preferences. Each option, described in the accompanying text, tailors the LiveQuery server's authentication, security, communication timeout, and logging. This configuration is required when starting a LiveQuery server separately from the Parse Server core process.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/live-query.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\\n  appId: 'myAppId',\\n  masterKey: 'myMasterKey',\\n  keyPairs: {\\n    \"restAPIKey\": \"\",\\n    \"javascriptKey\": \"\",\\n    \"clientKey\": \"\",\\n    \"windowsKey\": \"\",\\n    \"masterKey\": \"\"\\n  },\\n  serverURL: 'serverURL',\\n  websocketTimeout: 10 * 1000,\\n  cacheTimeout: 60 * 600 * 1000,\\n  logLevel: 'VERBOSE'\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Compound Queries with ParseQuery in Java\nDESCRIPTION: This Java snippet demonstrates how to combine multiple Parse queries using an 'or' operation with Parse SDK. It allows finding objects that match any of the provided queries. Dependencies include the Parse SDK, and queries can be modified to include additional constraints that act as 'and' operators. Involves asynchronous processing.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/queries.md#2025-04-22_snippet_27\n\nLANGUAGE: Java\nCODE:\n```\nParseQuery<ParseObject> lotsOfWins = ParseQuery.getQuery(\"Player\");\nlotsOfWins.whereGreaterThan(150);\n\nParseQuery<ParseObject> fewWins = ParseQuery.getQuery(\"Player\");\nfewWins.whereLessThan(5);\n\nList<ParseQuery<ParseObject>> queries = new ArrayList<ParseQuery<ParseObject>>();\nqueries.add(lotsOfWins);\nqueries.add(fewWins);\n\nParseQuery<ParseObject> mainQuery = ParseQuery.or(queries);\nmainQuery.findInBackground(new FindCallback<ParseObject>() {\n  public void done(List<ParseObject> results, ParseException e) {\n    // results has the list of players that win a lot or haven't won much.\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Performing Full Text Search in Parse (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the fullText method for efficient search capabilities in Parse. It includes an example of searching for barbecue sauce names containing 'bbq' and sorting results by relevance score.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/queries.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst query = new Parse.Query(BarbecueSauce);\nquery.fullText('name', 'bbq');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst query = new Parse.Query(BarbecueSauce);\nquery.fullText('name', 'bbq');\nquery.ascending('$score');\nquery.select('$score');\nquery.find()\n  .then(function(results) {\n    // results contains a weight / rank in result.get('score')\n  })\n  .catch(function(error) {\n    // There was an error.\n  });\n```\n\n----------------------------------------\n\nTITLE: Subclassing Parse.Object Using ES6 Classes in JavaScript SDK\nDESCRIPTION: This snippet introduces using ES6 class syntax for extending Parse.Object, providing modern subclassing support in JavaScript. It encapsulates initialization logic and adds instance and static methods. Requires Parse JavaScript SDK version 1.6.0 or higher. The Monster class includes a constructor, an instance method, and a static spawn method to generate new objects with specific attributes.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/objects.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass Monster extends Parse.Object {\n  constructor() {\n    // Pass the ClassName to the Parse.Object constructor\n    super('Monster');\n    // All other initialization\n    this.sound = 'Rawr';\n  }\n\n  hasSuperHumanStrength() {\n    return this.get('strength') > 18;\n  }\n\n  static spawn(strength) {\n    const monster = new Monster();\n    monster.set('strength', strength);\n    return monster;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Error Handling with Promise Chains in Parse JavaScript SDK\nDESCRIPTION: Detailed example showing how errors propagate through a Promise chain and how error callbacks can transform or handle errors to continue the chain.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/promises.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst query = new Parse.Query(\"Student\");\nquery.descending(\"gpa\");\nquery.find().then(function(students) {\n  students[0].set(\"valedictorian\", true);\n  // Force this callback to fail.\n  return Parse.Promise.error(\"There was an error.\");\n\n}).then(function(valedictorian) {\n  // Now this will be skipped.\n  return query.find();\n\n}).then(function(students) {\n  // This will also be skipped.\n  students[1].set(\"salutatorian\", true);\n  return students[1].save();\n}, function(error) {\n  // This error handler WILL be called. error will be \"There was an error.\".\n  // Let's handle the error by returning a new promise.\n  return Parse.Promise.as(\"Hello!\");\n\n}).then(function(hello) {\n  // Everything is done!\n}, function(error) {\n  // This isn't called because the error was already handled.\n});\n```\n\n----------------------------------------\n\nTITLE: Querying with equalTo and containedIn in JavaScript\nDESCRIPTION: Demonstrates creating an efficient query in JavaScript using equalTo and containedIn constraints, which can take advantage of database indexes for better performance.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar GameScore = Parse.Object.extend(\"GameScore\");\nvar query = new Parse.Query(GameScore);\nquery.equalTo(\"score\", 50);\nquery.containedIn(\"playerName\",\n    [\"Jonathan Walsh\", \"Dario Wunsch\", \"Shawn Simon\"]);\n```\n\n----------------------------------------\n\nTITLE: Restricting Field Selection with 'keys' Parameter in Parse Server\nDESCRIPTION: This snippet shows how to restrict the fields returned in the query results using the 'keys' parameter. The example retrieves only the 'score' and 'playerName' fields from GameScore objects, along with built-in fields like objectId and timestamps.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/queries.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -G \\\n  --data-urlencode 'keys=score,playerName' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/classes/GameScore\n```\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\nimport urllib.parse\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nparams = urllib.parse.urlencode({\"keys\": \"[score, playerName]\"})\nconnection.connect()\nconnection.request('GET', '/parse/classes/GameScore?%s' % params, '', {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Using Distinct Query in Parse JavaScript SDK\nDESCRIPTION: Demonstrates how to use the distinct query to find unique values for a specified field. This example finds unique 'age' values in the 'User' class.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/queries.md#2025-04-22_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nconst query = new Parse.Query(\"User\");\nquery.distinct(\"age\")\n  .then(function(results) {\n    // results contains unique age\n  })\n  .catch(function(error) {\n    // There was an error.\n  });\n```\n\n----------------------------------------\n\nTITLE: Fetching Parse Config Values\nDESCRIPTION: Demonstrates how to fetch configuration values from Parse.Config and handle the response or error cases.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nParse.Config.get().then(function(config) {\n  const winningNumber = config.get(\"winningNumber\");\n  const message = \"Yay! The number is \" + winningNumber + \"!\";\n  console.log(message);\n}, function(error) {\n  // Something went wrong (e.g. request timed out)\n});\n```\n\n----------------------------------------\n\nTITLE: Sending Custom Push Notification with Badge and Sound\nDESCRIPTION: Example showing how to send a push notification with custom properties including badge increment and sound for iOS, and custom title for Android. Uses both curl and Python HTTP client implementations.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/push-notifications.md#2025-04-22_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"channels\": [\n          \"Mets\"\n        ],\n        \"data\": {\n          \"alert\": \"The Mets scored! The game is now tied 1-1.\",\n          \"badge\": \"Increment\",\n          \"sound\": \"cheering.caf\",\n          \"title\": \"Mets Score!\"\n        }\n      }' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/push\n```\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nconnection.connect()\nconnection.request('POST', '/parse/push', json.dumps({\n    \"channels\": [\n        \"Mets\"\n    ],\n    \"data\": {\n        \"alert\": \"The Mets scored! The game is now tied 1-1.\",\n        \"badge\": \"Increment\",\n        \"sound\": \"cheering.caf\",\n        \"title\": \"Mets Score!\"\n    }\n}), {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\",\n    \"Content-Type\": \"application/json\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Current User Management in Parse iOS\nDESCRIPTION: Demonstrates how to handle the current user session, including checking logged-in status and logging out users.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/users.md#2025-04-22_snippet_2\n\nLANGUAGE: objective-c\nCODE:\n```\nPFUser *currentUser = [PFUser currentUser];\nif (currentUser) {\n    // do stuff with the user\n} else {\n    // show the signup or login screen\n}\n\n[PFUser logOut];\nPFUser *currentUser = [PFUser currentUser]; // this will now be nil\n```\n\nLANGUAGE: swift\nCODE:\n```\nvar currentUser = PFUser.current()\nif currentUser != nil {\n  // Do stuff with the user\n} else {\n  // Show the signup or login screen\n}\n\nPFUser.logOut()\nvar currentUser = PFUser.current() // this will now be nil\n```\n\n----------------------------------------\n\nTITLE: Setting ACL on Current User in Objective-C\nDESCRIPTION: This code sets an Access Control List (ACL) on the current user's data to restrict it from being publicly readable. It retrieves the current user and assigns an ACL that only gives access to that specific user.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/security.md#2025-04-22_snippet_0\n\nLANGUAGE: objective_c\nCODE:\n```\nPFUser *user = [PFUser currentUser];\nuser.ACL = [PFACL ACLWithUser:user];\n```\n\n----------------------------------------\n\nTITLE: Querying Array Values in Parse Server (Bash and Python)\nDESCRIPTION: Demonstrates how to query objects based on array field values, including exact match and using the $all operator. Shows both cURL and Python examples.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/queries.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -G \\\n  --data-urlencode 'where={\"arrayKey\":2}' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/classes/RandomObject\n```\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\nimport urllib.parse\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nparams = urllib.parse.urlencode({\"where\": json.dumps({\n    \"arrayKey\": 2\n})})\nconnection.connect()\nconnection.request('GET', '/parse/classes/RandomObject?%s' % params, '', {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -G \\\n  --data-urlencode 'where={\"arrayKey\":{\"$all\":[2,3,4]}}' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/classes/RandomObject\n```\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\nimport urllib.parse\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nparams = urllib.parse.urlencode({\"where\": json.dumps({\n    \"arrayKey\": {\n        \"$all\": [\n            2,\n            3,\n            4\n        ]\n    }\n})})\nconnection.connect()\nconnection.request('GET', '/parse/classes/RandomObject?%s' % params, '', {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Registering Parse.Object Subclasses for Query Results (JavaScript SDK)\nDESCRIPTION: This snippet demonstrates the use of Parse.Object.registerSubclass to inform the SDK to use a specific subclass constructor when returning query results. This ensures instances returned from queries are of the registered subclass. Requires Parse JavaScript SDK, and should be used after subclass definition to ensure correct deserialization of objects.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/objects.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// After specifying the Monster subclass...\nParse.Object.registerSubclass('Monster', Monster);\n```\n\n----------------------------------------\n\nTITLE: Fetching Remaining Fields After a Selective Query in Parse in JavaScript\nDESCRIPTION: Shows how to fetch all fields of a Parse object after initially retrieving only selected fields, which can be useful when you need more information about a specific object later.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/queries.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nquery.first().then(function(result) {\n  // only the selected fields of the object will now be available here.\n  return result.fetch();\n}).then(function(result) {\n  // all fields of the object will now be available here.\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Objects with Master Key Privileges in Parse Server - JavaScript\nDESCRIPTION: Shows how to use the master key to override ACL permissions in Parse queries, allowing unrestricted access to object data. The find operation is performed with the 'useMasterKey' option, available from Parse Server 4.x onwards. The key parameter is an options object with useMasterKey set to true. Input is a Parse.Query; output is an unfiltered list of objects.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/cloudcode/cloud-code.md#2025-04-22_snippet_46\n\nLANGUAGE: JavaScript\nCODE:\n```\n```javascript\nquery.find({ useMasterKey: true });\n```\n```\n\n----------------------------------------\n\nTITLE: Sending Location-Based Push Notifications Using Relational Queries\nDESCRIPTION: This code demonstrates how to send push notifications based on user location data by using relational queries. It finds users within a mile of a stadium and targets their associated devices.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/push-notifications.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Find users near a given location\nconst userQuery = new Parse.Query(Parse.User);\nuserQuery.withinMiles(\"location\", stadiumLocation, 1.0);\n\n// Find devices associated with these users\nconst pushQuery = new Parse.Query(Parse.Installation);\npushQuery.matchesQuery('user', userQuery);\n\n// Send push notification to query\nParse.Push.send({\n  where: pushQuery,\n  data: {\n    alert: \"Free hotdogs at the Parse concession stand!\"\n  }\n})\n.then(function() {\n  // Push was successful\n}, function(error) {\n  // Handle error\n});\n```\n\n----------------------------------------\n\nTITLE: Sending Push Notifications Using Advanced Targeting with Installation Query\nDESCRIPTION: This code demonstrates how to use an Installation query to target users who have enabled injury reports. The query filters Installation objects and sends push notifications only to those matching the criteria.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/push-notifications.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst query = new Parse.Query(Parse.Installation);\nquery.equalTo('injuryReports', true);\n\nParse.Push.send({\n  where: query, // Set our Installation query\n  data: {\n    alert: \"Willie Hayes injured by own pop fly.\"\n  }\n})\n.then(function() {\n  // Push was successful\n}, function(error) {\n  // Handle error\n});\n```\n\n----------------------------------------\n\nTITLE: Handling LiveQuery Create Event in JavaScript\nDESCRIPTION: Demonstrates how to listen for the 'create' event, which is triggered when a new object matching the query is created.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/live-queries.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsubscription.on('create', (object) => {\n  console.log('object created');\n});\n```\n\n----------------------------------------\n\nTITLE: Executing Compound Queries in C#\nDESCRIPTION: Demonstrates how to use the Or method to combine multiple queries. This allows finding objects that match any of several conditions, with the ability to add additional constraints.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/queries.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nvar lotsOfWins = from player in ParseObject.GetQuery(\"Player\")\n                 where player.Get<int>(\"wins\") > 150\n                 select player;\n\nvar fewWins = from player in ParseObject.GetQuery(\"Player\")\n              where player.Get<int>(\"wins\") < 5\n              select player;\n\nParseQuery<ParseObject> query = lotsOfWins.Or(fewWins);\n\nvar results = await query.FindAsync();\n// results contains players with lots of wins or only a few wins.\n\n// or using LINQ\nvar lotsOfWins = ParseObject.GetQuery(\"Player\")\n    .WhereGreaterThan(\"wins\", 150);\n\nvar fewWins = ParseObject.GetQuery(\"Player\")\n    .WhereLessThan(\"wins\", 5);\n\nParseQuery<ParseObject> query = lotsOfWins.Or(fewWins);\n// results contains players with lots of wins or only a few wins.\n```\n\n----------------------------------------\n\nTITLE: Implementing File Deletion Permissions with Cloud Triggers\nDESCRIPTION: This example combines afterSaveFile and beforeDeleteFile triggers to implement permission checking for file deletion. It tracks who created each file and only allows file deletion by the creator.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/cloudcode/cloud-code.md#2025-04-22_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nParse.Cloud.afterSaveFile(async (request) => {\n  const { file, user } = request;\n  const fileObject = new Parse.Object('FileObject');\n  fileObject.set('fileName', file.name());\n  fileObject.set('createdBy', user);\n  await fileObject.save(null, { useMasterKey: true );\n});\n\nParse.Cloud.beforeDeleteFile(async (request) => {\n  const { file, user } = request;\n  const query = new Parse.Query('FileObject');\n  query.equalTo('fileName', file.name());\n  const fileObject = await query.first({ useMasterKey: true });\n  if (fileObject.get('createdBy').id !== user.id) {\n    throw 'You do not have permission to delete this file';\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Public ReadOnly ParseObject in C#\nDESCRIPTION: This snippet shows how to create a Parse object that can be read by anyone but only edited by its author. It uses ParseACL to set public read access while restricting write access to the current user.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/users.md#2025-04-22_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nvar publicPost = new ParseObject(\"Post\");\nvar postACL = new ParseACL(ParseUser.CurrentUser)\n{\n    PublicReadAccess = true,\n    PublicWriteAccess = false\n};\npublicPost.ACL = postACL;\nawait publicPost.SaveAsync();\n```\n\n----------------------------------------\n\nTITLE: Configuring Complex Protected Fields with Role-Based Access in JavaScript\nDESCRIPTION: This example shows a more complex configuration of protected fields, including role-based access. It demonstrates how to set different levels of field protection for various user roles.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/defined-schema/class-level-permissions.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    protectedFields: {\n      \"*\": [\"authData\", \"emailVerified\", \"password\", \"username\", \"phone\", \"score\"],\n      \"role:Admin\": [\"password\", \"authData\", \"emailVerified\"],\n      \"role:VerifiedUser\": [\"password\", \"authData\", \"emailVerified\", \"score\"],\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Push Notifications with Custom Data via Parse Query in JavaScript\nDESCRIPTION: Sends a push notification with custom data fields (`action`, `name`, `newsItem`) in addition to the standard alert. The notification is targeted using a `Parse.Query` on the `Parse.Installation` class, filtering for devices subscribed to the 'Indians' channel and having the `injuryReports` field set to true. A Promise handles the asynchronous operation result.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/push-notifications.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst query = new Parse.Query(Parse.Installation);\nquery.equalTo('channels', 'Indians');\nquery.equalTo('injuryReports', true);\n\nParse.Push.send({\n  where: query,\n  data: {\n    action: \"com.example.UPDATE_STATUS\"\n    alert: \"Ricky Vaughn was injured in last night's game!\",\n    name: \"Vaughn\",\n    newsItem: \"Man bites dog\"\n  }\n})\n.then(function() {\n  // Push was successful\n}, function(error) {\n  // Handle error\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Parse Object Subclasses\nDESCRIPTION: Registers custom Parse Object subclasses during SDK initialization for automatic type conversion.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dart/objects.md#2025-04-22_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nParse().initialize(\n   ...,\n   registeredSubClassMap: <String, ParseObjectConstructor>{\n     'Diet_Plans': () => DietPlan(),\n   },\n   parseUserConstructor: (username, password, emailAddress, {client, debug, sessionToken}) => CustomParseUser(username, password, emailAddress),\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Role-Based Write Access in Parse\nDESCRIPTION: Shows how to create an ACL that allows public read access but restricts write access to a specific role (e.g., 'admins'). This is useful for managing group-based permissions without updating individual user ACLs.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/security.md#2025-04-22_snippet_10\n\nLANGUAGE: objective-c\nCODE:\n```\nPFACL *acl = [PFACL ACL];\n[acl setPublicReadAccess:true];\n[acl setWriteAccess:true forRoleWithName:@\"admins\"];\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet acl = PFACL()\nacl.setPublicReadAccess(true)\nacl.setWriteAccess(true, forRoleWithName: \"admins\")\n```\n\nLANGUAGE: java\nCODE:\n```\nParseACL acl = new ParseACL();\nacl.setPublicReadAccess(true);\nacl.setRoleWriteAccess(\"admins\", true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar acl = new Parse.ACL();\nacl.setPublicReadAccess(true);\nacl.setRoleWriteAccess(\"admins\", true);\n```\n\nLANGUAGE: c#\nCODE:\n```\nvar acl = new ParseACL();\nacl.PublicReadAccess = true;\nacl.SetRoleWriteAccess(\"admins\", true);\n```\n\nLANGUAGE: php\nCODE:\n```\n$acl = new ParseACL();\n$acl->setPublicReadAccess(true);\n$acl->setRoleWriteAccessWithName(\"admins\", true);\n```\n\n----------------------------------------\n\nTITLE: Signing Up with a Custom Parse.User Subclass and Accessing Custom Methods (JavaScript)\nDESCRIPTION: Illustrates how to create an instance of a custom user subclass, set credentials, perform sign-up with Parse, and access custom methods on the resulting user object. Dependencies include the Parse JS SDK, and the usage demonstrates Promise-based handling of signup. The returned user is an instance of the custom subclass, providing both Parse.User functionality and added methods.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/objects.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst customUser = new CustomUser({ foo: 'bar' });\ncustomUser.setUsername('username');\ncustomUser.setPassword('password');\ncustomUser.signUp().then((user) => {\n  // user is an instance of CustomUser\n  user.doSomething(); // return 5\n  user.get('foo');    // return 'bar'\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Parse SDK with Custom Storage in Dart\nDESCRIPTION: Initialization of the Parse SDK using a custom CoreStorage implementation. This is recommended for secure storage or when using the Flutter web/desktop SDK.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dart/getting-started.md#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nawait Parse().initialize(\n  \tkeyParseApplicationId, \n  \tkeyParseServerUrl,\n        coreStore: await CoreStoreSembastImp.getInstance(\"/data\"));\n```\n\n----------------------------------------\n\nTITLE: Storing Selected Image with Parse SDK in Flutter\nDESCRIPTION: This example shows how to store a selected image using the Parse SDK in Flutter. It uses the image_picker package to select an image from the gallery, creates a ParseFileBase object based on the platform (web or mobile), and saves it to a Parse object.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dart/files.md#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n// Libraries: image_picker (https://pub.dev/packages/image_picker), image_picker_for_web (https://pub.dev/packages/image_picker_for_web)\nPickedFile pickedFile = await ImagePicker().getImage(source: ImageSource.gallery);\n\nParseFileBase parseFile;\n\nif (kIsWeb) {\n  // Get data from selected file as an Uint8List\n  ParseWebFile file = ParseWebFile(null, name: null, url: pickedFile.path);\n  await file.download();\n  parseFile = ParseWebFile(file.file, name: file.name);\n} else {\n  parseFile = ParseFile(File(pickedFile.path));\n}\n\nsomeParseObject.set(\"image\", parseFile);\n// Save ParseObject and its children like the ParseFileBase\nawait someParseObject.save();\n```\n\n----------------------------------------\n\nTITLE: Subclassing ParseObject in Parse Server Java SDK\nDESCRIPTION: Demonstrates how to create and use subclasses of ParseObject in Parse Server using Java. It shows class definition, registration, and implementation of custom accessors and methods.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/objects.md#2025-04-22_snippet_19\n\nLANGUAGE: java\nCODE:\n```\n// Armor.java\nimport com.parse.ParseObject;\nimport com.parse.ParseClassName;\n\n@ParseClassName(\"Armor\")\npublic class Armor extends ParseObject {\n}\n```\n\nLANGUAGE: java\nCODE:\n```\n// App.java\nimport com.parse.Parse;\nimport android.app.Application;\n\npublic class App extends Application {\n  @Override\n  public void onCreate() {\n    super.onCreate();\n\n    ParseObject.registerSubclass(Armor.class);\n    Parse.initialize(this);\n  }\n}\n```\n\nLANGUAGE: java\nCODE:\n```\n// Armor.java\n@ParseClassName(\"Armor\")\npublic class Armor extends ParseObject {\n  public String getDisplayName() {\n    return getString(\"displayName\");\n  }\n  public void setDisplayName(String value) {\n    put(\"displayName\", value);\n  }\n}\n```\n\nLANGUAGE: java\nCODE:\n```\npublic void takeDamage(int amount) {\n  // Decrease the armor's durability and determine whether it has broken\n  increment(\"durability\", -amount);\n  if (getDurability() < 0) {\n    setBroken(true);\n  }\n}\n```\n\nLANGUAGE: java\nCODE:\n```\nArmor armorReference = ParseObject.createWithoutData(Armor.class, armor.getObjectId());\n```\n\nLANGUAGE: java\nCODE:\n```\nParseQuery<Armor> query = ParseQuery.getQuery(Armor.class);\nquery.whereLessThanOrEqualTo(\"rupees\", ParseUser.getCurrentUser().get(\"rupees\"));\nquery.findInBackground(new FindCallback<Armor>() {\n  @Override\n  public void done(List<Armor> results, ParseException e) {\n    for (Armor a : results) {\n      // ...\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Many-to-Many Relationships with ParseRelation in PHP\nDESCRIPTION: Examples of adding and removing objects from a ParseRelation, demonstrating relationship management between Users and Posts.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/objects.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$user = ParseUser::getCurrentUser();\n$relation = $user->getRelation(\"likes\");\n$relation->add($post);\n$user->save();\n```\n\nLANGUAGE: php\nCODE:\n```\n$relation->remove($post);\n$user->save();\n```\n\nLANGUAGE: php\nCODE:\n```\n$relation->remove($post1);\n$relation->remove($post2);\n$user->save();\n```\n\nLANGUAGE: php\nCODE:\n```\n$relation->add([$post1, $post2, $post3]);\n$user->save();\n```\n\nLANGUAGE: php\nCODE:\n```\n$postsLiked = $relation->getQuery()->find();\n// $postsLiked contains the posts that the current user likes.\n```\n\nLANGUAGE: php\nCODE:\n```\n$query = $relation->getQuery();\n$query->equalTo(\"title\", \"I'm Hungry\");\n$postsLiked = $query->find();\n// $postsLiked contains post liked by the current user which have the title \"I'm Hungry\".\n```\n\n----------------------------------------\n\nTITLE: Nested Mutation for Creating Complex Object Relationships - GraphQL\nDESCRIPTION: Shows how to leverage Parse Server's GraphQL nested mutations to create objects with related data (e.g., Country, City, Company) in a single request. This mutation creates a Country with a City, and the City with a Company, all atomically. The response structure mirrors the nested relationships for easy consumption.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/objects.md#2025-04-22_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\nmutation aNestedMutation {\n  createCountry(\n    input: {\n      fields: {\n        name: \"Mars\"\n        cities: {\n          createAndAdd: [\n            { name: \"Alpha\", companies: { createAndAdd: [{ name: \"Motors\" }] } }\n          ]\n        }\n      }\n    }\n  ) {\n    country {\n      name\n      cities {\n        edges {\n          node {\n            name\n            companies {\n              edges {\n                node {\n                  name\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Syncing Labeled Local Changes with saveInBackground - Parse SDK Swift\nDESCRIPTION: This Swift snippet queries local datastore pins labeled \\\"MyChanges\\\" for \\\"GameScore\\\" objects, iterates over them, saves each to Parse server asynchronously using saveInBackground, and unpins after success. Parsed objects must be already pinned with the specified label. Dependencies include the Parse Swift SDK. Returns the final task completion, removing local pins only when the remote save succeeds.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/local-datastore.md#2025-04-22_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nlet query = PFQuery(className:\"GameScore\")\nquery.fromPinWithName(\"MyChanges\")\nquery.findObjectsInBackground().continueWithBlock({\n  (task: BFTask!) -> AnyObject! in\n  let scores = task.result as NSArray\n  for score in scores {\n    score.saveInBackground().continueWithSuccessBlock({\n      (task: BFTask!) -> AnyObject! in\n      return score.unpinInBackground()\n    })\n  }\n  return task\n})\n```\n\n----------------------------------------\n\nTITLE: Queuing, Sending, and Clearing Parse.Object Saves with EventuallyQueue (JavaScript SDK)\nDESCRIPTION: Demonstrates advanced offline save queuing and batch operations using Parse.EventuallyQueue. Includes saving and destroying objects with unique hashes, sending the queue to the server, and clearing the queue. Requires Parse JS SDK with connectivity to EventuallyQueue utility feature. Intended for scenarios needing explicit queue management for reliable offline-first data synchronization.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/objects.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst object = new Parse.Object('TestObject');\nobject.save({ hash: 'unique' });\n\nawait Parse.EventuallyQueue.save(object, options);\nawait Parse.EventuallyQueue.destroy(object, options);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nawait Parse.EventuallyQueue.sendQueue();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nawait Parse.EventuallyQueue.clear();\n```\n\n----------------------------------------\n\nTITLE: Logging In a Parse User in Dart\nDESCRIPTION: Illustrates how to log in an existing Parse user and handle the login response.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dart/users.md#2025-04-22_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar response = await user.login();\nif (response.success) user = response.result;\n```\n\n----------------------------------------\n\nTITLE: Sorting Query Results in PHP\nDESCRIPTION: This code snippet demonstrates ordering query results using the `ascending` and `descending` methods on sortable fields like numbers and strings. This ensures results are fetched in the specified order, crucial for ordered data retrieval.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/queries.md#2025-04-22_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n// Sorts the results in ascending order by the score field\n$query->ascending(\"score\");\n\n// Sorts the results in descending order by the score field\n$query->descending(\"score\");\n```\n\n----------------------------------------\n\nTITLE: Inverse Subqueries with whereDoesNotMatchKeyInQuery in Parse Android\nDESCRIPTION: This snippet shows how to use whereDoesNotMatchKeyInQuery to find objects where a field value does not match any values from another query's results.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/queries.md#2025-04-22_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nParseQuery<ParseUser> losingUserQuery = ParseUser.getQuery();\nlosingUserQuery.whereDoesNotMatchKeyInQuery(\"hometown\", \"city\", teamQuery);\nlosingUserQuery.findInBackground(new FindCallback<ParseUser>() {\n  void done(List<ParseUser> results, ParseException e) {\n    // results has the list of users with a hometown team with a losing record\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Parse SDK in React Native\nDESCRIPTION: Import method for Parse SDK specifically for React Native applications.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/getting-started.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// In a React Native application\nconst Parse = require('parse/react-native.js');\n```\n\n----------------------------------------\n\nTITLE: Creating Compound Queries with OR Conditions in Parse SDK\nDESCRIPTION: Shows how to create compound queries with OR conditions using orQueryWithSubqueries. This allows finding objects that match any of several query conditions rather than requiring all conditions to match.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/queries.md#2025-04-22_snippet_58\n\nLANGUAGE: objective_c\nCODE:\n```\nPFQuery *lotsOfWins = [PFQuery queryWithClassName:@\"Player\"];\n[lotsOfWins whereKey:@\"wins\" greaterThan:@150];\n\nPFQuery *fewWins = [PFQuery queryWithClassName:@\"Player\"];\n[fewWins whereKey:@\"wins\" lessThan:@5];\nPFQuery *query = [PFQuery orQueryWithSubqueries:@[fewWins,lotsOfWins]];\n[query findObjectsInBackgroundWithBlock:^(NSArray *results, NSError *error) {\n  // results contains players with lots of wins or only a few wins.\n}];\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet lotsOfWins = PFQuery(className:\"Player\")\nlotsOfWins.whereKey(\"wins\", greaterThan:150)\n\nlet fewWins = PFQuery(className:\"Player\")\nfewWins.whereKey(\"wins\", lessThan:5)\n\nlet query = PFQuery.orQuery(withSubqueries: [lotsOfWins, fewWins])\nquery.findObjectsInBackground { (results: [PFObject]?, error: Error?) in\n    if let error = error {\n        // The request failed\n        print(error.localizedDescription)\n    } else {\n        // results contains players with lots of wins or only a few wins.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Parse SDK in Android Application Class\nDESCRIPTION: Sets up Parse SDK in a custom Application class. This initializes Parse with application ID, optional client key, and server URL configuration.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/getting-started.md#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nimport com.parse.Parse;\nimport android.app.Application;\n\npublic class App extends Application {\n  @Override\n  public void onCreate() {\n    super.onCreate();\n    Parse.initialize(new Parse.Configuration.Builder(this)\n      .applicationId(\"YOUR_APP_ID\")\n      // if defined\n      .clientKey(\"YOUR_CLIENT_KEY\")\n      .server(\"http://localhost:1337/parse/\")\n      .build()\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Periodic Config Refresh and Caching - Parse PFConfig - Swift\nDESCRIPTION: Implements a Swift system for refreshing PFConfig from Parse at most once every 12 hours using a static variable to track the last fetch time. Employs struct-based static storage and NSTimeInterval for interval management. Requires Parse SDK and Objective-C bridging for NSDate; output is implicit, ensuring config refreshes do not overload network traffic.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/config.md#2025-04-22_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\n// Fetches the config at most once every 12 hours per app runtime\nlet configRefreshInterval: NSTimeInterval  = 12.0 * 60.0 * 60.0\nstruct DateSingleton {\n    static var lastFetchedDate: NSDate? = nil\n}\nlet date: NSDate? = DateSingleton.lastFetchedDate;\nif date == nil ||\n   date!.timeIntervalSinceNow * -1.0 > configRefreshInterval {\n  PFConfig.getConfigInBackgroundWithBlock(nil);\n  DateSingleton.lastFetchedDate = NSDate();\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering with Pointers Using Dot Notation in Parse.Query in JavaScript\nDESCRIPTION: Demonstrates how to filter rows based on objectId's from pointers in a second table using dot notation in a Parse.Query.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/queries.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst rolesOfTypeX = new Parse.Query('Role');\nrolesOfTypeX.equalTo('type', 'x');\n\nconst groupsWithRoleX = new Parse.Query('Group');\ngroupsWithRoleX.matchesKeyInQuery('objectId', 'belongsTo.objectId', rolesOfTypeX);\ngroupsWithRoleX.find().then(function(results) {\n   // results has the list of groups with role x\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Invalid Session Token Error in C#\nDESCRIPTION: Implementation of a global error handler in C# that specifically handles invalid session token errors with options to either show a message asking the user to log out and log back in, or automatically showing the login screen for re-authentication.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/sessions.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ParseErrorHandler {\n  public static void HandleParseError(ParseException e) {\n    switch (e.Code) {\n      case ParseException.ErrorCode.InvalidSessionToken:\n        HandleInvalidSessionToken()\n        break;\n\n      ... // Other Parse API errors that you want to explicitly handle\n    }\n  }\n\n  private static void HandleInvalidSessionToken() {\n    //--------------------------------------\n    // Option 1: Show a message asking the user to log out and log back in.\n    //--------------------------------------\n    // If the user needs to finish what they were doing, they have the opportunity to do so.\n\n    //--------------------------------------\n    // Option #2: Show login screen so user can re-authenticate.\n    //--------------------------------------\n    // You may want this if the logout button is inaccessible in the UI.\n  }\n});\n\n// In all API requests, call the global error handler, e.g.\nquery.FindAsync().ContinueWith(t => {\n  if (t.IsFaulted) {\n    // Query Failed - handle an error.\n    ParseErrorHandler.HandleParseError(t.Exception.InnerException as ParseException);\n  } else {\n    // Query Succeeded - continue your app logic here.\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Parse Server Request Headers - JSONC\nDESCRIPTION: Each GraphQL request to the Parse Server API requires mandatory headers specifying the application ID (X-Parse-Application-Id) and, optionally, the master key (X-Parse-Master-Key). These headers authenticate and authorize all GraphQL requests against your Parse Server instance. Ensure you replace APPLICATION_ID and MASTER_KEY with your actual credentials.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/queries.md#2025-04-22_snippet_0\n\nLANGUAGE: JSONC\nCODE:\n```\n{\n  \"X-Parse-Application-Id\": \"APPLICATION_ID\",\n  \"X-Parse-Master-Key\": \"MASTER_KEY\" // (optional)\n}\n```\n\n----------------------------------------\n\nTITLE: Querying with equalTo and containedIn in Swift\nDESCRIPTION: Demonstrates creating an efficient query in Swift using equalTo and containedIn constraints that can utilize database indexes for better performance.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nlet query = PFQuery.queryWithClassName(\"GameScore\")\nquery.whereKey(\"score\", equalTo: 50)\nquery.whereKey(\"playerName\", containedIn: [\"Jonathan Walsh\", \"Dario Wunsch\", \"Shawn Simon\"])\n```\n\n----------------------------------------\n\nTITLE: Executing Nested Relational Queries with Parse Server GraphQL - GraphQL\nDESCRIPTION: Demonstrates a complex query where objects within a parent class (Country) have nested queries for a related field (cities) including their own filters. This pattern enables retrieving hierarchical or relational data in a single request, leveraging Parse Server's support for Pointer or Relation fields. Each subquery provides filtering, and returned objects reflect the nested relationships.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/queries.md#2025-04-22_snippet_15\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery aNestedQuery {\n  countries(where: {\n    name: { matchesRegex: \"Ma\", options: \"i\" }\n  }) {\n    edges {\n      node {\n        name\n        cities(where: {\n          name: { matchesRegex: \"pha\", options: \"i\"}\n        }) {\n          edges {\n            node {\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling LiveQuery Update Event in JavaScript\nDESCRIPTION: Shows how to listen for the 'update' event, which is triggered when an existing object matching the query is updated.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/live-queries.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsubscription.on('update', (object) => {\n  console.log('object updated');\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Parse User in Dart\nDESCRIPTION: Demonstrates how to create a new Parse user object with username, password, and email.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dart/users.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvar user =  ParseUser().create(\"TestFlutter\", \"TestPassword123\", \"TestFlutterSDK@gmail.com\");\n```\n\n----------------------------------------\n\nTITLE: Using afterFind with Predefined Classes\nDESCRIPTION: This example demonstrates how to use the afterFind trigger with predefined classes like Parse.User. Instead of passing a string as the first argument, you pass the class itself.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/cloudcode/cloud-code.md#2025-04-22_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nParse.Cloud.afterFind(Parse.User, async (request) => {\n    // code here\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Robust Config Retrieval with Fallback\nDESCRIPTION: Shows how to retrieve the latest configuration while providing a fallback to cached configuration when network requests fail. This example also demonstrates using default values for configuration parameters.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/config.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nLog.d(\"TAG\", \"Getting the latest config...\");\nParseConfig.getInBackground(new ConfigCallback() {\n  @Override\n  public void done(ParseConfig config, ParseException e) {\n    if (e == null) {\n      Log.d(\"TAG\", \"Yay! Config was fetched from the server.\");\n    } else {\n      Log.e(\"TAG\", \"Failed to fetch. Using Cached Config.\");\n      config = ParseConfig.getCurrentConfig();\n    }\n\n    // Get the message from config or fallback to default value\n    String welcomeMessage = config.getString(\"welcomeMessage\", \"Welcome!\");\n    Log.d(\"TAG\", String.format(\"Welcome Messsage From Config = %s\", welcomeMessage));\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Rejecting a Query in beforeFind\nDESCRIPTION: This example demonstrates how to reject a query in the beforeFind trigger. It shows two methods: throwing a Parse.Error or returning a rejected promise.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/cloudcode/cloud-code.md#2025-04-22_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\n// Rejecting a query\nParse.Cloud.beforeFind('MyObject', (req) =>  {\n  // throw an error\n  throw new Parse.Error(101, 'error');\n\n  // rejecting promise\n  return Promise.reject('error');\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Default ACLs with Role-Based Permissions in Java\nDESCRIPTION: Configures default ACLs for the application, giving public read access to all objects, write access to moderators, and full access to the creating user. This is useful for forum applications.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/roles.md#2025-04-22_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nParseACL defaultACL = new ParseACL();\n// Everybody can read objects created by this user\ndefaultACL.setPublicReadAccess(true);\n// Moderators can also modify these objects\ndefaultACL.setRoleWriteAccess(\"Moderators\");\n// And the user can read and modify its own objects\nParseACL.setDefaultACL(defaultACL, true);\n```\n\n----------------------------------------\n\nTITLE: Batch Saving Multiple Objects with Master Key in Parse Server - JavaScript\nDESCRIPTION: Explains how to save multiple Parse.Object instances at once with master key permissions by using Parse.Object.saveAll. The saveAll method takes an array of objects and an options parameter with 'useMasterKey: true'. It enables atomic persistence regardless of ACLs. Inputs are a list of Parse.Objects; output is the updated objects after save.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/cloudcode/cloud-code.md#2025-04-22_snippet_48\n\nLANGUAGE: JavaScript\nCODE:\n```\n```javascript\nParse.Object.saveAll(objects, { useMasterKey: true });\n```\n```\n\n----------------------------------------\n\nTITLE: Fetching Related Objects in LiveQuery Update Events - JavaScript\nDESCRIPTION: Demonstrates fetching a pointer object during a LiveQuery 'update' event in the afterLiveQueryEvent cloud code trigger. Only triggers when the event is an update, fetches a child pointer using async/await, and suppresses the event if the condition is not met. Depends on Parse Server 4.4.0+ and the use of async/await in Node.js environments. Input is the LiveQuery update request; output is conditional event emission with included data.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/cloudcode/cloud-code.md#2025-04-22_snippet_43\n\nLANGUAGE: JavaScript\nCODE:\n```\n```javascript\n// Including an object on LiveQuery event, on update only.\nParse.Cloud.afterLiveQueryEvent('MyObject', async (request) => {\n  if (request.event != \"update\") {\n    request.sendEvent = false;\n    return;\n  }\n  const object = request.object;\n  const pointer = object.get(\"child\");\n  await pointer.fetch();\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Custom Authentication Provider Implementation\nDESCRIPTION: Complete example of implementing and using a custom authentication provider with Parse, including provider registration and user linking.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/users.md#2025-04-22_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nconst provider = {\n  authenticate: (options) => {\n    // Some code to get retrieve authData\n    // If retrieved valid authData, call success function with the data\n    options.success(this, {\n      id: 1234\n    });\n    // You can also handle error\n    // options.error(this, {});\n  },\n  restoreAuthentication() {\n    return true;\n  },\n\n  getAuthType() {\n    return 'myAuth';\n  },\n\n  getAuthData() {\n    return {\n      authData: {\n        id: 1234,\n      },\n    };\n  },\n};\n// Must register before linking\nParse.User._registerAuthenticationProvider(provider);\nconst user = new Parse.User();\nuser.setUsername('Alice');\nuser.setPassword('sekrit');\nawait user.signUp();\nawait user.linkWith(provider.getAuthType(), provider.getAuthData());\nuser._isLinked(provider); // true\n// Unlink\nawait user._unlinkFrom(provider.getAuthType());\n```\n\n----------------------------------------\n\nTITLE: Setting Group Permissions with Parse.ACL in JavaScript\nDESCRIPTION: This code shows how to set read and write permissions for a list of users onto a Parse object using Parse.ACL. It requires Parse Framework and user list initialization before use.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/users.md#2025-04-22_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst Message = Parse.Object.extend(\"Message\");\nconst groupMessage = new Message();\nconst groupACL = new Parse.ACL();\n\n// userList is an array with the users we are sending this message to.\nfor (let i = 0; i < userList.length; i++) {\n  groupACL.setReadAccess(userList[i], true);\n  groupACL.setWriteAccess(userList[i], true);\n}\n\ngroupMessage.setACL(groupACL);\ngroupMessage.save();\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Aliases\nDESCRIPTION: JSON configuration example showing how to set custom aliases for get and find operations.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/customisation.md#2025-04-22_snippet_8\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"classConfigs\": [\n    {\n      \"className\": \"Likes\",\n      \"query\": {\n        \"getAlias\": \"like\"\n      }\n    },\n    {\n      \"className\": \"Data\",\n      \"query\": {\n        \"findAlias\": \"findData\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying PFQuery Constraints with NSPredicate in Objective-C\nDESCRIPTION: This Objective-C snippet shows how to create a PFQuery with an NSPredicate to specify constraints when querying Parse. It uses NSPredicate for flexible filtering, supporting various comparison operations. Dependencies: Parse Objective-C SDK, Foundation framework for NSPredicate. Inputs: none directly; expects valid predicate and field(s). Outputs: constructed PFQuery instance with constraints. Does not execute the query.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/queries.md#2025-04-22_snippet_4\n\nLANGUAGE: objective_c\nCODE:\n```\nNSPredicate *predicate = [NSPredicate predicateWithFormat:@\"playerName = 'Dan Stemkosk'\"];\nPFQuery *query = [PFQuery queryWithClassName:@\"GameScore\" predicate:predicate];\n```\n\n----------------------------------------\n\nTITLE: Accessing and Updating Global Configuration with ParseConfig in PHP\nDESCRIPTION: This snippet illustrates how to retrieve, check, update, and save application-wide configuration using the ParseConfig class in PHP. It demonstrates creating a new ParseConfig instance, using the 'get' method to check a configuration value, setting a new value with the 'set' method, and persisting changes to the server via 'save'. Requires the Parse PHP SDK to be installed and properly configured with credentials. The key methods are 'get', 'set', and 'save', which handle key-value configuration pairs. Inputs are string keys and their corresponding values; outputs are the updated configuration state on the Parse Server. All actions are performed at the application level and affect all connected SDKs and clients.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/config.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// get existing application-wide config\n$config = new ParseConfig();\n\n// check a config value of yours\n$allowed = $config->get('feature_allowed');\n\n// add a simple config value\n$config->set('feature_allowed', true);\n\n// save this global config\n$config->save();\n```\n\n----------------------------------------\n\nTITLE: Using afterFind with Custom Classes\nDESCRIPTION: This example shows how to use the afterFind trigger with a custom class. It allows manipulation of query results before they are sent to the client.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/cloudcode/cloud-code.md#2025-04-22_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nParse.Cloud.afterFind('MyCustomClass', async (request) => {\n    // code here\n})\n```\n\n----------------------------------------\n\nTITLE: Associating ParseInstallation with ParseUser in Android\nDESCRIPTION: Shows how to create a relationship between a ParseInstallation object and the current ParseUser, allowing for user-specific push notifications.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/push-notifications.md#2025-04-22_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n// Associate the device with a user\nParseInstallation installation = ParseInstallation.getCurrentInstallation();\ninstallation.put(\"user\",ParseUser.getCurrentUser());\ninstallation.saveInBackground();\n```\n\n----------------------------------------\n\nTITLE: Parse Server API Path Reference - Users API\nDESCRIPTION: REST API endpoints for user management including signup, login/logout, user CRUD operations, password reset and session management.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/quick-reference.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n/parse/users                POST   Signing Up, Linking Users\n/parse/login                GET    Logging In\n/parse/logout               POST   Logging Out\n/parse/users/<objectId>     GET    Retrieving Users\n/parse/users/me             GET    Validating Sessions, Current User\n/parse/users/<objectId>     PUT    Updating Users, Linking, Verifying Emails\n/parse/users                GET    Querying Users\n/parse/users/<objectId>     DELETE Deleting Users\n/parse/requestPasswordReset POST   Requesting Password Reset\n```\n\n----------------------------------------\n\nTITLE: Defining a Parse Object - JSON Example - jsonc\nDESCRIPTION: This snippet shows a sample Parse object in JSON format, used for storing game scores. No external dependencies are needed; this example illustrates the structure and key/value schema including standard fields. Required fields and values are illustrative; actual schemas may include additional fields based on application requirements.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/objects.md#2025-04-22_snippet_0\n\nLANGUAGE: jsonc\nCODE:\n```\n{\\n  \"score\": 1337,\\n  \"playerName\": \"Sean Plott\",\\n  \"cheatMode\": false\\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing the Current Parse User\nDESCRIPTION: This snippet shows how to access the cached current user object using Parse.User.current(). This allows you to determine if a user is logged in and access their data without requiring re-authentication.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/users.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst currentUser = Parse.User.current();\nif (currentUser) {\n    // do stuff with the user\n} else {\n    // show the signup or login page\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Constraints to Parse.Query in JavaScript\nDESCRIPTION: Demonstrates how to add multiple constraints to a Parse.Query. Objects will only be returned if they satisfy all constraints (logical AND).\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/queries.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nquery.notEqualTo(\"playerName\", \"Michael Yabuti\");\nquery.greaterThan(\"playerAge\", 18);\n```\n\n----------------------------------------\n\nTITLE: Requesting Password Reset for Parse User in PHP\nDESCRIPTION: This code demonstrates how to initiate a password reset for a Parse user. It sends a password reset email to the specified address and handles potential exceptions.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/users.md#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\ntry {\n  ParseUser::requestPasswordReset(\"email@example.com\");\n\t// Password reset request was sent successfully\n} catch (ParseException $ex) {\n  // Password reset failed, check the exception message\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving ParseObject\nDESCRIPTION: Shows how to retrieve a ParseObject using its ObjectId and query.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/objects.md#2025-04-22_snippet_4\n\nLANGUAGE: cs\nCODE:\n```\nParseQuery<ParseObject> query = ParseObject.GetQuery(\"GameScore\");\nquery.GetAsync(\"xWMyZ4YEGZ\").ContinueWith(t =>\n{\n    ParseObject gameScore = t.Result;\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Parse.File with Custom Content-Type in JavaScript\nDESCRIPTION: This snippet illustrates how to create a Parse.File object with a custom Content-Type. It specifies the filename, file data, and the content type.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/files.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst file = new Parse.File(\"myfile.zzz\", fileData, \"image/png\");\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Support in beforeFind Trigger\nDESCRIPTION: This example demonstrates asynchronous support in the beforeFind trigger using promises. It performs an asynchronous operation and modifies the query based on the results.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/cloudcode/cloud-code.md#2025-04-22_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\n// Asynchronous support\nParse.Cloud.beforeFind('MyObject', (req) => {\n  let query = req.query;\n  return aPromise().then((results) => {\n    // do something with the results\n    query.containedIn('key', results);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Installation-User Relationships in Parse Server\nDESCRIPTION: Demonstrates how to create relationships between Installation objects and User objects using pointers. This allows for user-specific push notification targeting.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/push-notifications.md#2025-04-22_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"user\": {\n          \"__type\": \"Pointer\",\n          \"className\": \"_User\",\n          \"objectId\": \"vmRZXZ1Dvo\"\n        }\n      }' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/installations/mrmBZvsErB\n```\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nconnection.connect()\nconnection.request('PUT', '/parse/installations/mrmBZvsErB', json.dumps({\n    \"user\": {\n        \"__type\": \"Pointer\",\n        \"className\": \"_User\",\n        \"objectId\": \"vmRZXZ1Dvo\"\n    }\n}), {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\",\n    \"Content-Type\": \"application/json\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Saving Parse Objects with Callbacks in JavaScript\nDESCRIPTION: Example of using the callback pattern to save a Parse.Object. This demonstrates the traditional approach before Promises.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/promises.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nobject.save({ key: value }, {\n  success: function(object) {\n    // the object was saved.\n  },\n  error: function(object, error) {\n    // saving the object failed.\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Advanced Parse SDK Initialization in Dart\nDESCRIPTION: Detailed initialization of the Parse SDK with additional parameters for client key, debugging, LiveQuery, session management, and security context.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/flutter/getting-started.md#2025-04-22_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nawait Parse().initialize(\n    keyApplicationId,\n    keyParseServerUrl,\n    clientKey: keyParseClientKey, // Required for some setups\n    debug: true, // When enabled, prints logs to console\n    liveQueryUrl: keyLiveQueryUrl, // Required if using LiveQuery \n    autoSendSessionId: true, // Required for authentication and ACL\n    securityContext: securityContext, // Again, required for some setups\n    coreStore: CoreStoreMemoryImp()); // Non persistent mode (default): Sdk will store everything in memory instead of using Sembast as an internal DB.\n```\n\n----------------------------------------\n\nTITLE: Initializing Parse Push Notifications with Firebase in Dart\nDESCRIPTION: This snippet shows how to initialize Parse Push notifications using Firebase Cloud Messaging. It sets up listeners for incoming messages both when the app is in the foreground and background.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/flutter/push-notifications.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nParsePush.instance.initialize(FirebaseMessaging.instance);\nFirebaseMessaging.onMessage.listen((message) => ParsePush.instance.onMessage(message));\n```\n\n----------------------------------------\n\nTITLE: Setting Current User with Session Token in Parse iOS SDK\nDESCRIPTION: This code demonstrates how to authenticate a user with a session token using the 'become' method. It validates the token before setting the current user, useful when implementing custom authentication workflows.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/users.md#2025-04-22_snippet_4\n\nLANGUAGE: objective_c\nCODE:\n```\n[PFUser becomeInBackground:@\"session-token-here\" block:^(PFUser *user, NSError *error) {\n  if (error) {\n    // The token could not be validated.\n  } else {\n    // The current user is now set to user.\n  }\n}];\n```\n\nLANGUAGE: swift\nCODE:\n```\nPFUser.becomeInBackground(\"session-token-here\", {\n  (user: PFUser?, error: NSError?) -> Void in\n  if error != nil {\n    // The token could not be validated.\n  } else {\n    // The current user is now set to user.\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Querying Parse Server Class using Python\nDESCRIPTION: This Python script shows how to connect to a Parse Server, send a GET request to retrieve all objects from a class, and parse the JSON response. It uses the http.client library for the HTTP connection.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/queries.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nconnection.connect()\nconnection.request('GET', '/parse/classes/GameScore', '', {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Login to Parse with Facebook Using JavaScript\nDESCRIPTION: Describes the process of logging in a Parse user via Facebook using Parse.FacebookUtils in the JavaScript SDK. This snippet handles the Facebook authentication with permissions specification if required.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/users.md#2025-04-22_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\ntry {\n  const users = await Parse.FacebookUtils.logIn();\n  if (!user.existed()) {\n    alert(\"User signed up and logged in through Facebook!\");\n  } else {\n    alert(\"User logged in through Facebook!\");\n  }\n} catch(error) {\n  alert(\"User cancelled the Facebook login or did not fully authorize.\");\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Row Layout in ParseQueryAdapter for Java\nDESCRIPTION: This code shows how to override getItemView method to customize the row layout in ParseQueryAdapter. It inflates a custom layout and configures additional views beyond the default TextView and ParseImageView.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/user-interface.md#2025-04-22_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n@Override \npublic View getItemView(ParseObject object, View v, ViewGroup parent) { \n  if (v == null) { \n    v = View.inflate(getContext(), R.layout.adapter_item, null); \n  } \n \n  // Take advantage of ParseQueryAdapter's getItemView logic for \n  // populating the main TextView/ImageView. \n  // The IDs in your custom layout must match what ParseQueryAdapter expects \n  // if it will be populating a TextView or ImageView for you. \n  super.getItemView(object, v, parent); \n \n  // Do additional configuration before returning the View. \n  TextView descriptionView = (TextView) v.findViewById(R.id.description); \n  descriptionView.setText(object.getString(\"description\")); \n  return v; \n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving ParseConfig with Fallback in C#\nDESCRIPTION: This example shows how to fetch the latest ParseConfig from the server, falling back to the cached version if the fetch fails. It also demonstrates retrieving a specific value from the config with a default fallback.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/config.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nParseConfig config = null;\ntry {\n  config = await ParseConfig.GetAsync();\n  Console.WriteLine(\"Yay! Config was fetched from the server.\");\n} catch (Exception e) {\n  Console.WriteLine(\"Failed to fetch. Using Cached Config.\");\n  config = ParseConfig.CurrentConfig;\n}\n\nstring welcomeMessage = null;\nboolean result = config.TryGetValue(\"welcomeMessage\", out welcomeMessage);\nif (!result) {\n  Console.WriteLine(\"Falling back to default message.\");\n  welcomeMessage = \"Welcome!\";\n}\n\nConsole.WriteLine(String.Format(\"Welcome Messsage From Config = {0}\", welcomeMessage));\n```\n\n----------------------------------------\n\nTITLE: Adding Users and Roles to PFRole\nDESCRIPTION: Demonstrates how to add users and child roles to a PFRole through relations, establishing role inheritance hierarchies.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/roles.md#2025-04-22_snippet_1\n\nLANGUAGE: objective_c\nCODE:\n```\nPFRole *role = [PFRole roleWithName:roleName acl:roleACL];\nfor (PFUser *user in usersToAddToRole) {\n  [role.users addObject:user];\n}\nfor (PFRole *childRole in rolesToAddToRole) {\n  [role.roles addObject:childRole];\n}\n[role saveInBackground];\n```\n\nLANGUAGE: swift\nCODE:\n```\nvar role = PFRole.roleWithName(roleName, acl:roleACL)\nfor user in usersToAddToRole {\n  role.users.addObject(user)\n}\nfor childRole in rolesToAddToRole {\n  role.roles.addObject(childRole)\n}\nrole.saveInBackground()\n```\n\n----------------------------------------\n\nTITLE: Resetting User Password with Parse.User in JavaScript\nDESCRIPTION: Uses Parse JavaScript SDK to issue a password reset request for a Parse User based on their email. It involves calling requestPasswordReset on Parse.User and requires the user's email address.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/users.md#2025-04-22_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nParse.User.requestPasswordReset(\"email@example.com\")\n.then(() => {\n  // Password reset request was sent successfully\n}).catch((error) => {\n  // Show the error message somewhere\n  alert(\"Error: \" + error.code + \" \" + error.message);\n});\n```\n\n----------------------------------------\n\nTITLE: Modifying Objects on Save with beforeSave in Parse JavaScript SDK\nDESCRIPTION: This snippet shows how to use beforeSave trigger to modify an object before saving. It truncates the 'comment' field of a Review object if it exceeds 140 characters.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/cloudcode/cloud-code.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nParse.Cloud.beforeSave(\"Review\", (request) => {\n  const comment = request.object.get(\"comment\");\n  if (comment.length > 140) {\n    // Truncate and add a ...\n    request.object.set(\"comment\", comment.substring(0, 137) + \"...\");\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using $notInQuery to Find Comments on Posts without Images\nDESCRIPTION: This example demonstrates the $notInQuery operator to find Comment objects where the related Post does not have an image field. The query returns comments whose post field points to Post objects that don't match the specified condition.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/queries.md#2025-04-22_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -G \\\n  --data-urlencode 'where={\"post\":{\"$notInQuery\":{\"where\":{\"image\":{\"$exists\":true}},\"className\":\"Post\"}}}' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/classes/Comment\n```\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\nimport urllib.parse\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nparams = urllib.parse.urlencode({\"where\": json.dumps({\n    \"post\": {\n        \"$notInQuery\": {\n            \"where\": {\n                \"image\": {\n                    \"$exists\": True\n                }\n            },\n            \"className\": \"Post\"\n        }\n    }\n})})\nconnection.connect()\nconnection.request('GET', '/parse/classes/Comment?%s' % params, '', {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Sending LiveQuery Events Based on Attribute Changes - JavaScript\nDESCRIPTION: Shows how to prevent a LiveQuery event from being sent unless a specific field ('foo') has changed. Utilizes the afterLiveQueryEvent trigger, available since Parse Server 4.4.0+, and sets 'request.sendEvent' to false to suppress unnecessary notifications. This improves performance by filtering out events unless meaningful data changes occurred.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/cloudcode/cloud-code.md#2025-04-22_snippet_42\n\nLANGUAGE: JavaScript\nCODE:\n```\n```javascript\n// Prevent LiveQuery trigger unless 'foo' is modified\nParse.Cloud.afterLiveQueryEvent('MyObject', (request) => {\n  const object = request.object;\n  const original = request.original;\n  if (!original) {\n    return;\n  }\n  if (object.get('foo') != original.get('foo')) {\n    request.sendEvent = false;\n  }\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Querying Parse Users by Attribute with JavaScript\nDESCRIPTION: This demonstrates how to use Parse.Query to find users matching specific criteria, in this case, all female users. Dependencies include Parse JavaScript SDK and Parse.User.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/users.md#2025-04-22_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst query = new Parse.Query(Parse.User);\nquery.equalTo(\"gender\", \"female\");  // find all the women\nconst women = await query.find();\n```\n\n----------------------------------------\n\nTITLE: Batch Deleting Parse Objects in iOS\nDESCRIPTION: Demonstrates how to delete multiple Parse objects at once using the static deleteAllInBackground method, with a completion block to handle success or failure cases.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/objects.md#2025-04-22_snippet_8\n\nLANGUAGE: objective_c\nCODE:\n```\n[PFObject deleteAllInBackground:objectArray block:^(BOOL succeeded, NSError * _Nullable error) {\n    if (succeeded) {\n        // The array of objects was successfully deleted.\n    } else {\n        // There was an error. Check the errors localizedDescription.\n    }\n}];\n```\n\nLANGUAGE: swift\nCODE:\n```\nPFObject.deleteAll(inBackground: objectArray) { (succeeded, error) in\n    if (succeeded) {\n        // The array of objects was successfully deleted.\n    } else {\n        // There was an error. Check the errors localizedDescription.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single Object with getFirstInBackground in Parse Android SDK\nDESCRIPTION: This snippet demonstrates how to use getFirstInBackground to retrieve exactly one object that matches the query constraints, which is more convenient than using find when only one result is needed.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/queries.md#2025-04-22_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nParseQuery<ParseObject> query = ParseQuery.getQuery(\"GameScore\");\nquery.whereEqualTo(\"playerEmail\", \"dstemkoski@example.com\");\nquery.getFirstInBackground(new GetCallback<ParseObject>() {\n  public void done(ParseObject object, ParseException e) {\n    if (object == null) {\n      Log.d(\"score\", \"The getFirst request failed.\");\n    } else {\n      Log.d(\"score\", \"Retrieved the object.\");\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Current User with Session Token in Parse\nDESCRIPTION: This code shows how to set the current user using a session token with Parse.User.become() method. This is useful when you've authenticated a user on the server side and need to pass the session to the client.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/users.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nParse.User.become(\"session-token-here\").then(function (user) {\n  // The current user is now set to user.\n}, function (error) {\n  // The token could not be validated.\n});\n```\n\n----------------------------------------\n\nTITLE: Demonstrating ParseUser Security Policy in C#\nDESCRIPTION: This code demonstrates the security policy of ParseUser objects. It shows that authenticated users can modify their own data, while attempts to modify user data without authentication will throw an exception.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/users.md#2025-04-22_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nvar user = await ParseUser.LogInAsync(\"my_username\", \"my_password\");\nuser.Username = \"my_new_username\"; // attempt to change username\nawait user.SaveAsync(); // This succeeds, since this user was\n                        // authenticated on the device\n\nParseUser.LogOut();\n// Get the user from a non-authenticated method\nuser = await ParseUser.Query.GetAsync(user.ObjectId);\nuser.Username = \"another_username\";\n\n// This will throw an exception, since the ParseUser is not authenticated\nawait user.SaveAsync();\n```\n\n----------------------------------------\n\nTITLE: Fetching Single Class Schema in Parse Server (Python)\nDESCRIPTION: This Python snippet shows how to fetch the schema for a single class in Parse Server using the http.client library. It requires the Application ID and Master Key for authentication.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/schemas.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nconnection.connect()\nconnection.request('GET', '/parse/schemas/Game', \"\", {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-Master-Key\": \"${MASTER_KEY}\",\n    \"Content-Type\": \"application/json\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating User Object Security in Parse iOS SDK\nDESCRIPTION: This code illustrates Parse's security policy for PFUser objects. It shows how authenticated users can modify their data while non-authenticated references to the same user will fail when attempting modifications.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/users.md#2025-04-22_snippet_5\n\nLANGUAGE: objective_c\nCODE:\n```\nPFUser *user = [PFUser logInWithUsername:@\"my_username\" password:@\"my_password\"];\nuser.username = \"my_new_username\"; // attempt to change username\n[user save]; // This succeeds, since the user was authenticated on the device\n\n// Get the user from a non-authenticated method\nPFQuery *query = [PFUser query];\nPFUser *userAgain = (PFUser *)[query getObjectWithId:user.objectId];\n\nuserAgain.username = \"another_username\";\n\n// This will throw an exception, since the PFUser is not authenticated\n[userAgain save];\n```\n\nLANGUAGE: swift\nCODE:\n```\nvar user = PFUser.logInWithUsername(\"my_username\", password:\"my_password\")\nuser.username = \"my_new_username\" // attempt to change username\nuser.save() // This succeeds, since the user was authenticated on the device\n\n// Get the user from a non-authenticated method\nvar query = PFUser.query()\nvar userAgain = query.getObjectWithId(user.objectId) as PFUser\n\nuserAgain.username = \"another_username\"\n\n// This will crash, since the PFUser is not authenticated\nuserAgain.save()\n```\n\n----------------------------------------\n\nTITLE: Setting Current User with Session Token in C#\nDESCRIPTION: This snippet illustrates how to set the current user using a session token. It's useful for custom authentication routines or server-side login. The becomeAsync method validates the token before setting the current user.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/users.md#2025-04-22_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\ntry\n{\n  await ParseUser.becomeAsync(\"session-token-here\");\n  // The current user is now set to user.\n}\ncatch (Exception e)\n{\n  // The token could not be validated.\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Relational Data in Parse Server Java SDK\nDESCRIPTION: Shows how to create relationships between objects in Parse Server using Java. It demonstrates creating a Post with a Comment, linking objects using objectIds, and fetching related objects.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/objects.md#2025-04-22_snippet_16\n\nLANGUAGE: java\nCODE:\n```\n// Create the post\nParseObject myPost = new ParseObject(\"Post\");\nmyPost.put(\"title\", \"I'm Hungry\");\nmyPost.put(\"content\", \"Where should we go for lunch?\");\n\n// Create the comment\nParseObject myComment = new ParseObject(\"Comment\");\nmyComment.put(\"content\", \"Let's do Sushirrito.\");\n\n// Add a relation between the Post and Comment\nmyComment.put(\"post\", myPost);\n\n// This will save both myPost and myComment\nmyComment.saveInBackground();\n```\n\nLANGUAGE: java\nCODE:\n```\n// Add a relation between the Post with objectId \"1zEcyElZ80\" and the comment\nmyComment.put(\"post\", ParseObject.createWithoutData(\"Post\", \"1zEcyElZ80\"));\n```\n\nLANGUAGE: java\nCODE:\n```\nfetchedComment.getParseObject(\"post\")\n    .fetchIfNeededInBackground(new GetCallback<ParseObject>() {\n        public void done(ParseObject post, ParseException e) {\n          String title = post.getString(\"title\");\n          // Do something with your new title variable\n        }\n    });\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Constraints with PFQuery and NSPredicate in Objective-C\nDESCRIPTION: Demonstrates combining several constraints in a Parse query using either direct PFQuery calls or a single NSPredicate. Prerequisites include Parse iOS SDK and creating a PFQuery object. Accepts multiple key-condition pairs and returns records matching all constraints (logical AND).\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/queries.md#2025-04-22_snippet_8\n\nLANGUAGE: objective_c\nCODE:\n```\n// Using PFQuery\n[query whereKey:@\"playerName\" notEqualTo:@\"Michael Yabuti\"];\n[query whereKey:@\"playerAge\" greaterThan:@18];\n\n// Using NSPredicate\nNSPredicate *predicate = [NSPredicate predicateWithFormat:   @\"playerName != 'Michael Yabuti' AND playerAge > 18\"];\nPFQuery *query = [PFQuery queryWithClassName:@\"GameScore\" predicate:predicate];\n```\n\n----------------------------------------\n\nTITLE: Setting Public Read and User-Specific Write Access in Parse\nDESCRIPTION: Demonstrates how to create an ACL that allows public read access but restricts write access to the current user. This is useful for scenarios like public posts where anyone can read but only the author can edit.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/security.md#2025-04-22_snippet_9\n\nLANGUAGE: objective-c\nCODE:\n```\nPFACL *acl = [PFACL ACL];\n[acl setPublicReadAccess:true];\n[acl setWriteAccess:true forUser:[PFUser currentUser]];\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet acl = PFACL()\nacl.hasPublicReadAccess = true\nif let currentUser = PFUser.currentUser() {\n    acl.setWriteAccess(true, for: currentUser)\n}\n```\n\nLANGUAGE: java\nCODE:\n```\nParseACL acl = new ParseACL();\nacl.setPublicReadAccess(true);\nacl.setWriteAccess(ParseUser.getCurrentUser(), true);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar acl = new Parse.ACL();\nacl.setPublicReadAccess(true);\nacl.setWriteAccess(Parse.User.current().id, true);\n```\n\nLANGUAGE: c#\nCODE:\n```\nvar acl = new ParseACL();\nacl.PublicReadAccess = true;\nacl.SetRoleWriteAccess(ParseUser.CurrentUser.ObjectId, true);\n```\n\nLANGUAGE: php\nCODE:\n```\n$acl = new ParseACL();\n$acl->setPublicReadAccess(true);\n$acl->setWriteAccess(ParseUser::getCurrentUser(), true);\n```\n\n----------------------------------------\n\nTITLE: Initializing GCSAdapter in Node.js/Express for Parse Server\nDESCRIPTION: This code snippet shows how to initialize and configure the GCSAdapter for Parse Server in a Node.js/Express environment. It includes setting up the ParseServer with database URI, app ID, master key, and the GCSAdapter with project ID, keyfile path, bucket, and direct access option.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/file-adapters.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar GCSAdapter = require('parse-server-gcs-adapter');\n\nvar api = new ParseServer({\n  databaseURI: databaseUri || 'mongodb://localhost:27017/dev',\n  appId: process.env.APP_ID || 'APPLICATION_ID',\n  masterKey: process.env.MASTER_KEY || 'MASTER_KEY',\n  ...\n  filesAdapter: new GCSAdapter(\n    \"GCP_PROJECT_ID\",\n    \"GCP_KEYFILE_PATH\",\n    \"GCS_BUCKET\",\n    {directAccess: true}\n  ),\n  ...\n});\n```\n\n----------------------------------------\n\nTITLE: Saving Parse.Object Offline with saveEventually (JavaScript SDK)\nDESCRIPTION: Illustrates saving an object with saveEventually, which will persist data on the device if offline and queue the operation until network connectivity is restored. This approach is fault-tolerant for intermittent connectivity. Dependencies: Requires Parse.enableLocalDatastore() and the Parse JavaScript SDK. The code uses async/await for promise resolution.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/objects.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst TeamMember = Parse.Object.extend(\"TeamMember\");\nconst teamMember = new TeamMember();\n\nteamMember.set('ownerAccount', ownerAccount); \n\nawait teamMember.saveEventually();\n```\n\n----------------------------------------\n\nTITLE: Initializing Parse SDK in Dart\nDESCRIPTION: Basic initialization of the Parse SDK in a Dart application. This snippet shows how to set up the SDK with the application ID and server URL.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dart/getting-started.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nawait Parse().initialize(\n    keyApplicationId,\n    keyParseServerUrl,\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Group Permissions for a ParseObject in C#\nDESCRIPTION: This code demonstrates how to set read and write permissions for a group of users on a Parse object. It uses ParseACL to grant individual permissions to each user in a list.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/users.md#2025-04-22_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nvar groupMessage = new ParseObject(\"Message\");\nvar groupACL = new ParseACL();\n\n// userList is an IEnumerable<ParseUser> with the users we are sending\n// this message to.\nforeach (var user in userList)\n{\n    groupACL.SetReadAccess(user, true);\n    groupACL.SetWriteAccess(user, true);\n}\n\ngroupMessage.ACL = groupACL;\nawait groupMessage.SaveAsync();\n```\n\n----------------------------------------\n\nTITLE: Defining Push Notification Configuration Format - JavaScript (Object Structure)\nDESCRIPTION: This snippet details the structure for specifying the push notification configuration in Parse Server. It is a plain JavaScript object, illustrating the expected keys and purposes for Android and iOS under the 'push' property. All parameters such as API keys, certificate file paths, and production flags should be filled as needed. This format supports both .p12/PFX and PEM files for APNS, and API key for FCM. The configuration must be included when initializing Parse Server.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/push-notifications.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\npush: {\n  android: {\n    apiKey: '' // The Server API Key of FCM\n  },\n  ios: {\n    pfx: '', // The filename of private key and certificate in PFX or PKCS12 format from disk  \n    passphrase: '', // optional password to your p12\n    cert: '', // If not using the .p12 format, the path to the certificate PEM to load from disk\n    key: '', // If not using the .p12 format, the path to the private key PEM to load from disk\n    bundleId: '', // The bundle identifier associated with your app\n    production: false // Specifies which APNS environment to connect to: Production (if true) or Sandbox\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a One-to-Many Relationship with Arrays in Parse\nDESCRIPTION: This snippet shows how to create a one-to-many relationship using Arrays in Parse. It demonstrates storing multiple Weapon objects in a user's weaponsList.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/relations.md#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n// let's say we have four weapons\nParseObject scimitar = ...\nParseObject plasmaRifle = ...\nParseObject grenade = ...\nParseObject bunnyRabbit = ...\n\n// stick the objects in an array\nArrayList<ParseObject> weapons = new ArrayList<ParseObject>();\nweapons.add(scimitar);\nweapons.add(plasmaRifle);\nweapons.add(grenade);\nweapons.add(bunnyRabbit);\n\n// store the weapons for the user\nParseUser.getCurrentUser().put(\"weaponsList\", weapons);\n```\n\nLANGUAGE: objective_c\nCODE:\n```\n// let's say we have four weapons\nPFObject *scimitar = ...\nPFObject *plasmaRifle = ...\nPFObject *grenade = ...\nPFObject *bunnyRabbit = ...\n\n// stick the objects in an array\nNSArray *weapons = @[scimitar, plasmaRifle, grenade, bunnyRabbit];\n\n// store the weapons for the user\n[[PFUser currentUser] setObject:weapons forKey:@weaponsList\"];\n```\n\nLANGUAGE: swift\nCODE:\n```\n// let's say we have four weapons\nlet scimitar = ...\nlet plasmaRifle = ...\nlet grenade = ...\nlet bunnyRabbit = ...\n\n// stick the objects in an array\nlet weapons = [scimitar, plasmaRifle, grenade, bunnyRabbit]\n\n// store the weapons for the user\nlet user = PFUser.currentUser()\nuser[\"weaponsList\"] = weapons\n```\n\nLANGUAGE: php\nCODE:\n```\n// let's say we have four weapons\n$scimitar = ...\n$plasmaRifle = ...\n$grenade = ...\n$bunnyRabbit = ...\n\n// stick the objects in an array\n$weapons = [$scimitar, $plasmaRifle, $grenade, $bunnyRabbit];\n\n// store the weapons for the user\n$user = ParseUser::getCurrentUser();\n$user->set(\"weaponsList\", weapons);\n```\n\nLANGUAGE: cs\nCODE:\n```\n// let's say we have four weapons\nvar scimitar = ...\nvar plasmaRifle = ...\nvar grenade = ...\nvar bunnyRabbit = ...\n\n// stick the objects in an array\nvar weapons = new List<ParseObject>();\nweapons.Add(scimitar);\nweapons.Add(plasmaRifle);\nweapons.Add(grenade);\nweapons.Add(bunnyRabbit);\n\n// store the weapons for the user\nvar user = ParseUser.CurrentUser;\nuser.AddRangeToList(\"weaponsList\", weapons);\n```\n\nLANGUAGE: js\nCODE:\n```\n// let's say we have four weapons\nvar scimitar = ...\nvar plasmaRifle = ...\nvar grenade = ...\nvar bunnyRabbit = ...\n\n// stick the objects in an array\nvar weapons = [scimitar, plasmaRifle, grenade, bunnyRabbit];\n\n// store the weapons for the user\nvar user = Parse.User.current();\nuser.set(\"weaponsList\", weapons);\n```\n\n----------------------------------------\n\nTITLE: Creating a Parse Object - cURL Example - bash\nDESCRIPTION: This bash/cURL snippet sends a POST request to create a new object in the GameScore class using the Parse REST API. Dependencies include curl and network access; required headers specify application and REST API keys, with the object JSON sent in the request body. On success, it returns a 201 response with location and the new object's metadata—make sure to replace placeholders with actual values.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/objects.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n  curl -X POST \\\\\\n  -H \"X-Parse-Application-Id: <span class=\\\"custom-parse-server-appid\\\">${APPLICATION_ID}</span>\" \\\\\\n  -H \"X-Parse-REST-API-Key: <span class=\\\"custom-parse-server-restapikey\\\">${REST_API_KEY}</span>\" \\\\\\n  -H \"Content-Type: application/json\" \\\\\\n  -d '{\"score\":1337,\"playerName\":\"Sean Plott\",\"cheatMode\":false}' \\\\\\n  <span class=\\\"custom-parse-server-protocol\\\">https</span>://<span class=\\\"custom-parse-server-url\\\">YOUR.PARSE-SERVER.HERE</span><span class=\\\"custom-parse-server-mount\\\">/parse/</span>classes/GameScore\n```\n\n----------------------------------------\n\nTITLE: Creating Aggregate Pipeline in Parse JavaScript SDK\nDESCRIPTION: Demonstrates how to create an aggregate pipeline using either an Array or an Object in Parse queries. The example shows a pipeline similar to 'distinct' grouping by the name field.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/queries.md#2025-04-22_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nconst pipelineObject = {\n  $group: { _id: '$name' }\n };\n\nconst pipelineArray = [\n  { $group: { _id: '$name' } }\n];\n```\n\n----------------------------------------\n\nTITLE: Querying Parse Server Class via REST API (cURL)\nDESCRIPTION: This snippet demonstrates how to perform a GET request to retrieve all objects from a Parse Server class using cURL. It includes the necessary headers for authentication and the endpoint structure.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/queries.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  https://YOUR.PARSE-SERVER.HERE/parse/classes/GameScore\n```\n\n----------------------------------------\n\nTITLE: Adding Relations to Parse Objects\nDESCRIPTION: Shows how to add a related object using the AddRelation operation. This example adds a Player object with ID 'Vx4nudeWn' to the opponents relation field.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/objects.md#2025-04-22_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"opponents\":{\"__op\":\"AddRelation\",\"objects\":[{\"__type\":\"Pointer\",\"className\":\"Player\",\"objectId\":\"Vx4nudeWn\"}]}}' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/classes/GameScore/Ed1nuqPvcm\n```\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nconnection.connect()\nconnection.request('PUT', '/parse/classes/GameScore/Ed1nuqPvcm', json.dumps({\n    \"opponents\": {\n        \"__op\": \"AddRelation\",\n        \"objects\": [\n            {\n                \"__type\": \"Pointer\",\n                \"className\": \"Player\",\n                \"objectId\": \"Vx4nudeWn\"\n            }\n        ]\n    }\n}), {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\",\n    \"Content-Type\": \"application/json\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Creating PFObject Subclasses in Parse SDK (Objective-C and Swift)\nDESCRIPTION: Shows how to create subclasses of PFObject for more structured and type-safe code. This approach allows for better code organization and autocompletion support.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/objects.md#2025-04-22_snippet_16\n\nLANGUAGE: objective-c\nCODE:\n```\nArmor *shield = [Armor object];\nshield.displayName = @\"Wooden Shield\";\nshield.fireProof = NO;\nshield.rupees = 50;\n```\n\nLANGUAGE: swift\nCODE:\n```\nvar shield = Armor()\nshield.displayName = \"Wooden Shield\"\nshield.fireProof = false\nshield.rupees = 50\n```\n\n----------------------------------------\n\nTITLE: Creating and Signing Up a New ParseUser in C#\nDESCRIPTION: Creates a new user account with username, password, and email, along with additional custom fields. The SignUpAsync method checks for uniqueness and securely hashes the password.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/users.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar user = new ParseUser()\n{\n    Username = \"my name\",\n    Password = \"my pass\",\n    Email = \"email@example.com\"\n};\n\n// other fields can be set just like with ParseObject\nuser[\"phone\"] = \"415-392-0202\";\n\nTask signUpTask = user.SignUpAsync();\n```\n\n----------------------------------------\n\nTITLE: Applying Constraints with ParseQuery in PHP\nDESCRIPTION: This snippet demonstrates the use of different constraints like `notEqualTo` and `greaterThan` in `ParseQuery`. The example filters out objects based on 'playerName' and 'playerAge' fields. Essential to the PHP Parse SDK, these constraints help refine query results to match all specified conditions.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/queries.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$query->notEqualTo(\"playerName\", \"Michael Yabuti\");\n$query->greaterThan(\"playerAge\", 18);\n```\n\n----------------------------------------\n\nTITLE: Using Counters with Parse Objects in JavaScript\nDESCRIPTION: Demonstrates how to use Parse's `increment` method to atomically update counter fields like 'score' on a `Parse.Object`. Includes how to specify custom increment values.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/objects.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\ngameScore.increment(\"score\");\ngameScore.save();\n```\n\n----------------------------------------\n\nTITLE: Initializing Parse PHP SDK with API Keys\nDESCRIPTION: Initializes the Parse PHP SDK client using the Application ID, REST API Key, and Master Key. This step is required after including the SDK files and before making any requests to the Parse Server.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/setup.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nParseClient::initialize( $app_id, $rest_key, $master_key );\n```\n\n----------------------------------------\n\nTITLE: Querying Local Datastore\nDESCRIPTION: Basic query setup for retrieving objects from local datastore using ParseQuery.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/local-datastore.md#2025-04-22_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nParseQuery<ParseObject> query = ParseQuery.getQuery(\"GameScore\");\nquery.fromLocalDatastore();\n```\n\n----------------------------------------\n\nTITLE: Setting Dropbox-like Private Access in Parse iOS SDK\nDESCRIPTION: This code sets up a Dropbox-like security model where user data is only accessible to the user unless explicit permission is granted. It creates a default ACL where only the current user has access.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/users.md#2025-04-22_snippet_11\n\nLANGUAGE: objective_c\nCODE:\n```\n[PFACL setDefaultACL:[PFACL ACL] withAccessForCurrentUser:YES];\n```\n\nLANGUAGE: swift\nCODE:\n```\nPFACL.setDefaultACL(PFACL.ACL(), withAccessForCurrentUser:true)\n```\n\n----------------------------------------\n\nTITLE: Periodic Config Refresh Implementation\nDESCRIPTION: Implements a configuration refresh mechanism that fetches new config values at most once every 12 hours per app runtime.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/config.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Fetches the config at most once every 12 hours per app runtime\nconst refreshConfig = function() {\n  let lastFetchedDate;\n  const configRefreshInterval = 12 * 60 * 60 * 1000;\n  return function() {\n    const currentDate = new Date();\n    if (lastFetchedDate === undefined ||\n        currentDate.getTime() - lastFetchedDate.getTime() > configRefreshInterval) {\n      Parse.Config.get();\n      lastFetchedDate = currentDate;\n    }\n  };\n}();\n```\n\n----------------------------------------\n\nTITLE: Establishing Role Hierarchy\nDESCRIPTION: Shows how to create parent-child relationships between roles, allowing permission inheritance from parent to child roles.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/roles.md#2025-04-22_snippet_4\n\nLANGUAGE: objective_c\nCODE:\n```\nPFRole *administrators = /* Your \"Administrators\" role */;\nPFRole *moderators = /* Your \"Moderators\" role */;\n[moderators.roles addObject:administrators];\n[moderators saveInBackground];\n```\n\nLANGUAGE: swift\nCODE:\n```\nvar administrators = /* Your \"Administrators\" role */\nvar moderators = /* Your \"Moderators\" role */\nmoderators.roles.addObject(administrators)\nmoderators.saveInBackground()\n```\n\n----------------------------------------\n\nTITLE: Transforming LiveQuery Subscriptions with Parse Cloud Hooks - JavaScript\nDESCRIPTION: Demonstrates using the beforeSubscribe cloud code trigger to validate a user's admin status before allowing a LiveQuery subscription and to restrict the subscription query to selected fields. Requires Parse Server 4.3.0+ and the Parse JavaScript SDK. Key parameters include the request object (containing user and query), where only users with 'Admin' access may subscribe, and selected fields are limited to 'name' and 'year'. Input is the subscription request; output is a customized query or an error.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/cloudcode/cloud-code.md#2025-04-22_snippet_40\n\nLANGUAGE: JavaScript\nCODE:\n```\n```javascript\nParse.Cloud.beforeSubscribe('MyObject', request => {\n    if (!request.user.get('Admin')) {\n        throw new Parse.Error(101, 'You are not authorized to subscribe to MyObject.');\n    }\n    let query = request.query; // the Parse.Query\n    query.select(\"name\",\"year\")\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Public Read Access with Parse.ACL and JavaScript\nDESCRIPTION: This snippet illustrates granting public read access to a Parse object, making it readable by everyone but writable only by the author. It uses Parse.ACL for access control and Parse.User to identify the current user.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/users.md#2025-04-22_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst publicPost = new Post();\nconst postACL = new Parse.ACL(Parse.User.current());\npostACL.setPublicReadAccess(true);\npublicPost.setACL(postACL);\npublicPost.save();\n```\n\n----------------------------------------\n\nTITLE: Removing a Child Role from a Parent Role in Parse Server\nDESCRIPTION: This snippet shows how to remove a child role from the \"Moderators\" role using the RemoveRelation operator via a PUT request to the Parse Server API.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/roles.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-Master-Key: ${MASTER_KEY}\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"roles\": {\n          \"__op\": \"RemoveRelation\",\n          \"objects\": [\n            {\n              \"__type\": \"Pointer\",\n              \"className\": \"_Role\",\n              \"objectId\": \"Ed1nuqPvc\"\n            }\n          ]\n        }\n      }' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/roles/mrmBZvsErB\n```\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nconnection.connect()\nconnection.request('PUT', '/parse/roles/mrmBZvsErB', json.dumps({\n    \"roles\": {\n        \"__op\": \"RemoveRelation\",\n        \"objects\": [\n            {\n                \"__type\": \"Pointer\",\n                \"className\": \"_Role\",\n                \"objectId\": \"Ed1nuqPvc\"\n            }\n        ]\n    }\n}), {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-Master-Key\": \"${MASTER_KEY}\",\n    \"Content-Type\": \"application/json\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Handling Remote Notification Device Tokens and Push Events - Swift\nDESCRIPTION: Contains Swift methods to manage device token registration, error handling for push notification registration, and handling received push notifications. Intended for inclusion in the app delegate, this requires Parse SDK for iOS and UIKit. Dependencies include having Parse correctly set up in the project. Expects device token and error objects as parameters; on success, stores the device token with the current Parse Installation and saves asynchronously.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/push-notifications-ios.md#2025-04-22_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n// Swift\\nfunc application(application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: NSData) {\\n    let installation = PFInstallation.currentInstallation()\\n    installation.setDeviceTokenFromData(deviceToken)\\n    installation.saveInBackground()\\n}\\n\\nfunc application(application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: NSError) {\\n    if error.code == 3010 {\\n        print(\"Push notifications are not supported in the iOS Simulator.\")\\n    } else {\\n        print(\"application:didFailToRegisterForRemoteNotificationsWithError: %@\", error)\\n    }\\n}\\n\\nfunc application(application: UIApplication, didReceiveRemoteNotification userInfo: [NSObject : AnyObject]) {\\n    PFPush.handlePush(userInfo)\\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing ParseServer Instance in Node.js\nDESCRIPTION: This snippet shows how to create an instance of the ParseServer API object by calling its constructor with essential configuration options. These options include the database connection string (`databaseURI`), path to Cloud Code (`cloud`), application identifiers (`appId`, `fileKey`), the master key (`masterKey`), push notification settings (`push`), and a files adapter (`filesAdapter`). This instance conforms to Express middleware.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/usage.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst api = new ParseServer({\n  databaseURI: 'mongodb://your.mongo.uri',\n  cloud: './cloud/main.js',\n  appId: 'myAppId',\n  fileKey: 'myFileKey',\n  masterKey: 'mySecretMasterKey',\n  push: { ... }, // See the Push wiki page\n  filesAdapter: ...,\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Sort Keys for Ordering in Parse using Swift\nDESCRIPTION: Shows how to add additional sort fields for tie-breakers in a query result using addAscendingOrder and addDescendingOrder in Swift. Each call specifies a field name for secondary sorting after primary key equality. Requires ParseSwift SDK.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/queries.md#2025-04-22_snippet_19\n\nLANGUAGE: swift\nCODE:\n```\n// Sorts the results in ascending order by the score field if the previous sort keys are equal.\nquery.addAscendingOrder(\"score\")\n\n// Sorts the results in descending order by the score field if the previous sort keys are equal.\nquery.addDescendingOrder(\"score\")\n```\n\n----------------------------------------\n\nTITLE: Custom Schema Integration with Parse GraphQL\nDESCRIPTION: Example showing how to add custom schema definitions to Parse GraphQL server using both inline and file-based approaches.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/getting-started.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install graphql-tag --save\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst gql = require('graphql-tag');\n\nconst parseServer = new ParseServer({\n  appId: 'APPLICATION_ID',\n  cloud: './cloud/main.js',\n});\n\nconst parseGraphQLServer = new ParseGraphQLServer(\n  parseServer,\n  {\n    graphQLPath: '/graphql',\n    playgroundPath: '/playground',\n    graphQLCustomTypeDefs: gql`\n      extend type Query {\n        hello: String! @resolve\n        hello2: String! @resolve(to: \"hello\")\n      }\n    `,\n  }\n);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst gql = require('graphql-tag');\nconst fs = require('fs');\nconst customSchema = fs.readFileSync('./cloud/schema.graphql');\n\nconst parseServer = new ParseServer({\n  appId: 'APPLICATION_ID',\n  cloud: './cloud/main.js',\n});\n\nconst parseGraphQLServer = new ParseGraphQLServer(\n  parseServer,\n  {\n    graphQLPath: '/graphql',\n    playgroundPath: '/playground',\n    graphQLCustomTypeDefs: gql`${customSchema}`,\n  }\n);\n```\n\nLANGUAGE: graphql\nCODE:\n```\n# schema.graphql\nextend type Query {\n  hello: String! @resolve\n  hello2: String! @resolve(to: \"hello\")\n}\n```\n\n----------------------------------------\n\nTITLE: Adding an Author to a Book's Authors Array in PHP\nDESCRIPTION: This PHP snippet shows how to add an Author object to the 'authors' array of a Book object using Parse. It uses the addUnique method to ensure no duplicates are added to the array.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/relations.md#2025-04-22_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n// let's say we have an author\n$author = ...\n\n// and let's also say we have an book\n$book = ...\n\n// add the author to the authors list for the book\n$book->addUnique(\"authors\", array($author));\n```\n\n----------------------------------------\n\nTITLE: Applying Collective Calculations in Parse Aggregate Query\nDESCRIPTION: Demonstrates how to use aggregate functions like $sum, $avg, $max, $min in a Parse query. This example calculates the sum of the 'score' field.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/queries.md#2025-04-22_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nconst pipeline = [\n  { $group: { _id: null, total: { $sum: '$score' } } }\n];\nconst query = new Parse.Query(\"User\");\nquery.aggregate(pipeline)\n  .then(function(results) {\n    // results contains sum of score field and stores it in results[0].total\n  })\n  .catch(function(error) {\n    // There was an error.\n  });\n```\n\n----------------------------------------\n\nTITLE: Customizing Parse UI Strings with Localization\nDESCRIPTION: Examples of how to customize or localize string resources in Parse UI components using iOS localization support through the Localizable.strings file.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/user-interface.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n\"Loading...\" = \"In progress\";\n```\n\nLANGUAGE: javascript\nCODE:\n```\n\"The email address \\\"%@\\\" is invalid. Please enter a valid email.\" = \"Wrong email: \\\"%@\\\"\";\n```\n\n----------------------------------------\n\nTITLE: User Signup in Parse Server GraphQL\nDESCRIPTION: Demonstrates how to sign up a new user with username, password and email. Returns a session token for authentication of subsequent operations.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/users.md#2025-04-22_snippet_0\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"X-Parse-Application-Id\": \"APPLICATION_ID\",\n  \"X-Parse-Master-Key\": \"MASTER_KEY\" // (optional)\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\nmutation signUp {\n  signUp(\n    input: {\n      fields: {\n        username: \"johndoe\"\n        password: \"ASuperStrongPassword\"\n        email: \"john.doe@email.com\"\n      }\n    }\n  ) {\n    viewer {\n      sessionToken\n      user {\n        username\n        email\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"data\": {\n    \"signUp\": {\n      \"viewer\": {\n        \"sessionToken\": \"r:a0ec8428409b6b85c6f54ab1e654c53d\",\n        \"user\": {\n          \"username\": \"johndoe\",\n          \"email\": \"john.doe@email.com\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Email Verification with Parse REST API\nDESCRIPTION: This snippet demonstrates how to request a verification email for a user's email address. It sends a POST request to the verificationEmailRequest endpoint with the email to be verified.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/users.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"email\":\"email@example.com\"}' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/verificationEmailRequest\n```\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nconnection.connect()\nconnection.request('POST', '/parse/verificationEmailRequest', json.dumps({\n    \"email\": \"email@example.com\"\n}), {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\",\n    \"Content-Type\": \"application/json\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Scheduling Push Notifications with Parse Server REST API\nDESCRIPTION: This snippet shows how to schedule a push notification for future delivery using Parse Server's REST API. It demonstrates setting a specific date and time for the push to be sent, along with targeting a specific user.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/push-notifications.md#2025-04-22_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"where\": {\n          \"user_id\": \"user_123\"\n        },\n        \"push_time\": \"2015-03-19T12:00:00Z\",\n        \"data\": {\n          \"alert\": \"You previously created a reminder for the game today\"\n        }\n      }' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/push\n```\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nconnection.connect()\nconnection.request('POST', '/parse/push', json.dumps({\n    \"where\": {\n        \"user_id\": \"user_123\"\n    },\n    \"push_time\": \"2015-03-19T12:00:00Z\",\n    \"data\": {\n        \"alert\": \"You previously created a reminder for the game today\"\n    }\n}), {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\",\n    \"Content-Type\": \"application/json\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: User Login in Parse Server GraphQL\nDESCRIPTION: Shows how to log in an existing user with username and password credentials. Returns a new session token for authentication.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/users.md#2025-04-22_snippet_1\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"X-Parse-Application-Id\": \"APPLICATION_ID\",\n  \"X-Parse-Master-Key\": \"MASTER_KEY\" // (optional)\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\nmutation logIn {\n  logIn(input: { username: \"johndoe\", password: \"ASuperStrongPassword\" }) {\n    viewer {\n      sessionToken\n      user {\n        username\n        email\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"data\": {\n    \"logIn\": {\n      \"viewer\": {\n        \"sessionToken\": \"r:b0dfad1eeafa4425d9508f1c0a15c3fa\",\n        \"user\": {\n          \"username\": \"johndoe\",\n          \"email\": \"john.doe@email.com\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Caching in Parse SDK\nDESCRIPTION: Shows how to enable query caching to display data when the device is offline or when network requests haven't completed. The example uses NetworkElseCache policy to try network first and then fall back to cached data.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/queries.md#2025-04-22_snippet_53\n\nLANGUAGE: objective_c\nCODE:\n```\nPFQuery *query = [PFQuery queryWithClassName:@\"GameScore\"];\nquery.cachePolicy = kPFCachePolicyNetworkElseCache;\n[query findObjectsInBackgroundWithBlock:^(NSArray *objects, NSError *error) {\n  if (!error) {\n    // Results were successfully found, looking first on the\n    // network and then on disk.\n  } else {\n    // The network was inaccessible and we have no cached data for\n    // this query.\n  }\n}];\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet query = PFQuery(className:\"GameScore\")\nquery.cachePolicy = .cacheElseNetwork\nquery.findObjectsInBackground { (objects: [PFObject]?, error: Error?) in\n    if let error = error {\n        // The network was inaccessible and we have no cached data for\n        // this query.\n        print(error.localizedDescription)\n    } else {\n        // Results were successfully found, looking first on the\n        // network and then on disk.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Aggregates in Parse Queries with PHP\nDESCRIPTION: These snippets demonstrate utilizing aggregates to perform advanced data retrieval operations like `sum`, `avg`, `max`, and `min` on set data, necessitating the use of the MasterKey and compatible with aggregate pipeline expressions.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/queries.md#2025-04-22_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\n// group pipeline is similar to distinct, can apply $sum, $avg, $max, $min\n// accumulate sum and store in total field\n$pipeline = [\n    'group' => [\n        'objectId' => null,\n        'total' => [ '$sum' => '$score']\n    ]\n];\n$results = $query->aggregate($pipeline);\n```\n\nLANGUAGE: PHP\nCODE:\n```\n// project pipeline is similar to keys, add or remove existing fields\n// includes name key\n$pipeline = [\n    'project' => [\n        'name' => 1\n    ]\n];\n$results = $query->aggregate($pipeline);\n```\n\nLANGUAGE: PHP\nCODE:\n```\n// match pipeline is similar to equalTo\n// filter out objects with score greater than 15\n $pipeline = [\n    'match' => [\n        'score' => [ '$gt' => 15 ]\n    ]\n];\n$results = $query->aggregate($pipeline);\n```\n\n----------------------------------------\n\nTITLE: Handling Global LiveQuery Open Event in JavaScript\nDESCRIPTION: Shows how to listen for the global 'open' event, which is emitted when the WebSocket connection to the LiveQuery server is established.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/live-queries.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nParse.LiveQuery.on('open', () => {\n  console.log('socket connection established');\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting Objects in Parse Server Java SDK\nDESCRIPTION: Demonstrates how to delete an entire object or a single field from an object in Parse Server using Java. It shows asynchronous deletion with callbacks and field removal.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/objects.md#2025-04-22_snippet_15\n\nLANGUAGE: java\nCODE:\n```\nmyObject.deleteInBackground();\n```\n\nLANGUAGE: java\nCODE:\n```\n// After this, the playerName field will be empty\nmyObject.remove(\"playerName\");\n\n// Saves the field deletion to your Parse Server\nmyObject.saveInBackground();\n```\n\n----------------------------------------\n\nTITLE: Saving Objects to Parse Cloud in PHP\nDESCRIPTION: This code shows how to save a ParseObject instance to the Parse Cloud, using the save method. The process includes exception handling for unsuccessful attempts, and viewing the saved data in the Parse Data Browser.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/objects.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$gameScore = new ParseObject(\"GameScore\");\n\n$gameScore->set(\"score\", 1337);\n$gameScore->set(\"playerName\", \"Sean Plott\");\n$gameScore->set(\"cheatMode\", false);\n\ntry {\n  $gameScore->save();\n  echo 'New object created with objectId: ' . $gameScore->getObjectId();\n} catch (ParseException $ex) {  \n  // Execute any logic that should take place if the save fails.\n  // error is a ParseException object with an error code and message.\n  echo 'Failed to create new object, with error message: ' . $ex->getMessage();\n}\n```\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"objectId\": \"xWMyZ4YEGZ\",\n  \"score\": 1337,\n  \"playerName\": \"Sean Plott\",\n  \"cheatMode\": false,\n  \"createdAt\":\"2022-01-01T12:23:45.678Z\",\n  \"updatedAt\":\"2022-01-01T12:23:45.678Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Executing a Cloud Function with parameters in Dart\nDESCRIPTION: Shows how to call a Parse Cloud Function with custom parameters. This example passes a 'plan' parameter with value 'paid' to the 'hello' Cloud Function.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dart/cloud-code.md#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal ParseCloudFunction function = ParseCloudFunction('hello');\nfinal Map<String, String> params = <String, String>{'plan': 'paid'};\nfunction.execute(parameters: params);\n```\n\n----------------------------------------\n\nTITLE: Storing Data with ParseObject in PHP\nDESCRIPTION: This snippet demonstrates the creation of a ParseObject with key-value pairs, highlighting how the Parse backend accepts schemaless data and automatically creates classes.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/objects.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nscore: 1337, playerName: \"Sean Plott\", cheatMode: false\n```\n\n----------------------------------------\n\nTITLE: Handling LiveQuery Open Event in JavaScript\nDESCRIPTION: Shows how to listen for the 'open' event on a LiveQuery subscription, which is emitted when the subscription is confirmed by the server.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/live-queries.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsubscription.on('open', () => {\n console.log('subscription opened');\n});\n```\n\n----------------------------------------\n\nTITLE: Selecting Returned Fields in Parse Objective-C and Swift\nDESCRIPTION: Demonstrates field selection in Parse queries using selectKeys for Objective-C and Swift. Accepts an array of field names (e.g., score, playerName) and returns results containing only those fields, improving efficiency.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_70\n\nLANGUAGE: objective_c\nCODE:\n```\nPFQuery *query = [PFQuery queryWithClassName:@\"GameScore\"];\n[query selectKeys:@[@\"score\", @\"playerName\"]];\n[query findObjectsInBackgroundWithBlock:^(NSArray *objects, NSError *error) {\n  if (!error) {\n    // each of results will only have the selected fields available.\n  }\n}];\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet query = PFQuery.queryWithClassName(\"GameScore\")\nquery.selectKeys([\"score\", \"playerName\"])\nquery.findObjectsInBackgroundWithBlock {\n  (objects, error) in\n  if !error {\n    // each of results will only have the selected fields available.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Distinct Query with Constraints in Parse JavaScript SDK\nDESCRIPTION: Shows how to use the distinct query with additional constraints. This example finds unique 'age' values for users with the name 'foo'.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/queries.md#2025-04-22_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nconst query = new Parse.Query(\"User\");\nquery.equalTo(\"name\", \"foo\");\nquery.distinct(\"age\")\n  .then(function(results) {\n    // results contains unique age where name is foo\n  })\n  .catch(function(error) {\n    // There was an error.\n  });\n```\n\n----------------------------------------\n\nTITLE: Querying Movies with Review Count in JavaScript\nDESCRIPTION: An optimized query for fetching movies that already contain their review counts as a field. This avoids expensive count operations on the Review class.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_90\n\nLANGUAGE: javascript\nCODE:\n```\nvar Movie = Parse.Object.extend(\"Movie\");\nvar query = new Parse.Query(Movie);\nquery.find().then(function(results) {\n  // Results include the reviews count field\n}, function(error) {\n  // Request failed\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Cloud Function in JavaScript for Parse Server\nDESCRIPTION: This snippet demonstrates how to define a simple Cloud Function named 'hello' using Parse.Cloud.define(). The function returns the request body.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/embedded_c/cloud-code.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nParse.Cloud.define(\"hello\", request => {\n\treturn request.body;\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Role-based ACL on a ParseObject in PHP\nDESCRIPTION: This snippet shows two ways to set role-based ACLs on a ParseObject. It demonstrates both querying a role and directly using a role name to define write access with ACLs. Requires Parse PHP SDK and configured access roles.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/roles.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$moderators = /* Query for some ParseRole */;\n$wallPost = new ParseObject(\"WallPost\");\n$postACL = new ParseACL();\n$postACL->setRoleWriteAccess($moderators, true);\n$wallPost->setACL($postACL);\n$wallPost->save();\n?>\n```\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$wallPost = new ParseObject(\"WallPost\");\n$postACL = new ParseACL();\n$postACL->setRoleWriteAccessWithName(\"Moderators\", true);\n$wallPost->setACL($postACL);\n$wallPost->save();\n?>\n```\n\n----------------------------------------\n\nTITLE: Handling ParseExceptions in Parse PHP SDK\nDESCRIPTION: This code snippet demonstrates how to handle ParseExceptions when querying objects with the Parse PHP SDK. It involves wrapping Parse calls in a try/catch block to capture ParseExceptions and retrieve the relevant error code and message. It requires the Parse PHP SDK and a correct setup to perform API queries.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/handling-errors.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$query = new ParseQuery(\"Note\");\ntry {\n  // This will throw a ParseException, the object is not found.\n  $result = $query->get(\"aBcDeFgH\")\n} catch (ParseException $error) {\n  // $error is an instance of ParseException with details about the error.\n  echo $error->getCode();\n  echo $error->getMessage();\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Logging In a ParseUser in C#\nDESCRIPTION: Authenticates a user with their username and password using the LogInAsync method. The code includes error handling for failed login attempts.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/users.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nParseUser.LogInAsync(\"myname\", \"mypass\").ContinueWith(t =>\n{\n    if (t.IsFaulted || t.IsCanceled)\n    {\n        // The login failed. Check the error to see why.\n    }\n    else\n    {\n        // Login was successful.\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Query with Multiple Constraints\nDESCRIPTION: Shows how to combine multiple query constraints to filter results based on multiple conditions\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/queries.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar query = ParseObject.GetQuery(\"GameScore\")\n    .WhereNotEqualTo(\"playerName\", \"Michael Yabuti\")\n    .WhereGreaterThan(\"playerAge\", 18);\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Push Notification Setup with Parse and Firebase in Dart\nDESCRIPTION: This example demonstrates a complete setup for push notifications in a Flutter app using Parse Platform and Firebase. It includes initializing Firebase, Parse, setting up push notification handlers, and a basic app structure.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/flutter/push-notifications.md#2025-04-22_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n\n  // Initialize Firebase Core\n  await Firebase.initializeApp(\n    options: DefaultFirebaseOptions.currentPlatform,\n  );\n\n  // Initialize Parse\n  await Parse().initialize(\"applicationId\", \"serverUrl\",\n      clientKey: \"clientKey\", debug: true);\n\n  // Initialize Parse push notifications\n  ParsePush.instance.initialize(FirebaseMessaging.instance);\n  FirebaseMessaging.onMessage\n      .listen((message) => ParsePush.instance.onMessage(message));\n\n  // Process push notifications while app is in the background\n  FirebaseMessaging.onBackgroundMessage(onBackgroundMessage);\n\n  runApp(const MyApp());\n}\n\nFuture<void> onBackgroundMessage(RemoteMessage message) async =>\n    ParsePush.instance.onMessage(message);\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Flutter Demo',\n      theme: ThemeData(\n        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\n        useMaterial3: true,\n      ),\n      home: const MyHomePage(title: 'Flutter Demo Home Page'),\n    );\n  }\n}\n...\n```\n\n----------------------------------------\n\nTITLE: Targeting Push Notifications by Platform in C#\nDESCRIPTION: This comprehensive example demonstrates how to send different push notifications to users on different platforms (Android, iOS, Windows 8, Windows Phone 8) by filtering on the deviceType field.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/push-notifications.md#2025-04-22_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\n// Notification for Android users\nvar androidPush = new ParsePush();\nandroidPush.Query = ParseInstallation.Query\n                    .WhereContainsAll(\"channels\", new string[] { \"suitcaseOwners\" })\n                    .WhereEqualTo(\"deviceType\", \"android\");\nandroidPush.SendAsync();\n\n// Notification for iOS users\n+var iosPush = new ParsePush();\niosPush.Alert = \"Your suitcase has been filled with tiny apples!\";\niosPush.Query = ParseInstallation.Query\n                .WhereContainsAll(\"channels\", new string[] { \"suitcaseOwners\" })\n                .WhereEqualTo(\"deviceType\", \"ios\");\niosPush.SendAsync();\n\n// Notification for Windows 8 users\nvar winPush = new ParsePush();\nwinPush.Alert = \"Your suitcase has been filled with tiny glass!\";\nwinPush.Query = ParseInstallation.Query\n                .WhereContainsAll(\"channels\", new string[] { \"suitcaseOwners\" })\n                .WhereEqualTo(\"deviceType\", \"winrt\");\nwinPush.SendAsync();\n\n// Notification for Windows Phone 8 users\nvar wpPush = new ParsePush();\nwpPush.Alert = \"Your suitcase is very hip; very metro.\";\nwpPush.Query = ParseInstallation.Query\n               .WhereContainsAll(\"channels\", new string[] { \"suitcaseOwners\" })\n               .WhereEqualTo(\"deviceType\", \"winphone\");\nwpPush.SendAsync();\n```\n\n----------------------------------------\n\nTITLE: Handling Push Notifications in Background/Foreground iOS\nDESCRIPTION: Implementation of push notification handling when app is running or backgrounded. Tracks when app is opened from a push notification.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/push-notifications.md#2025-04-22_snippet_12\n\nLANGUAGE: objective_c\nCODE:\n```\n- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo {\n  if (application.applicationState == UIApplicationStateInactive) {\n    [PFAnalytics trackAppOpenedWithRemoteNotificationPayload:userInfo];\n  }\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\nfunc application(application: UIApplication, didReceiveRemoteNotification userInfo: [NSObject : AnyObject]) {\n    if application.applicationState == .Inactive  {\n        PFAnalytics.trackAppOpenedWithRemoteNotificationPayload(userInfo)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Users and Roles to ParseRole in PHP\nDESCRIPTION: This PHP snippet illustrates how to add users and roles to a previously created ParseRole. The loop iterates over collections of users and roles, granting them the permissions associated with the new role. Requires the Parse PHP SDK and existing user and role objects.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/roles.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$role = ParseRole::createRole($roleName, $roleACL);\nfor ($i = 0; $i < count($usersToAddToRole); $i++) {\n  $role->getUsers()->add($usersToAddToRole[$i]);\n}\nfor ($i = 0; $i < count($rolesToAddToRole); $i++) {\n  $role->getRoles()->add($rolesToAddToRole[$i]);\n}\n$role->save();\n?>\n```\n\n----------------------------------------\n\nTITLE: Importing User Object with Bcrypt Password in Parse JSON Format\nDESCRIPTION: Example showing the JSON structure for importing a User object into Parse, including username, session token, and bcrypt hashed password. Demonstrates the special bcryptPassword field format for user authentication.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/data.md#2025-04-22_snippet_1\n\nLANGUAGE: jsonc\nCODE:\n```\n{ \"results\":\n  [{\n    \"username\": \"cooldude\",\n    \"createdAt\": \"1983-09-13T22:42:30.548Z\",\n    \"updatedAt\": \"2015-09-04T10:12:42.137Z\",\n    \"objectId\": \"ttttSEpfXm\",\n    \"sessionToken\": \"dfwfq3dh0zwe5y2sqv514p4ib\",\n    \"bcryptPassword\": \"$2a$10$ICV5UeEf3lICfnE9W9pN9.O9Ved/ozNo7G83Qbdk5rmyvY8l16MIK\"\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: APNS Token-based Configuration for Push Notifications - JavaScript\nDESCRIPTION: This example shows how to configure Parse Server for APNS push notifications using token-based authentication instead of certificate. It is a JavaScript object structure, specifying the path to the .p8 key, keyId, teamId, app topic, and environment flag. This method requires Apple's JWT-based authentication and is suitable for modern iOS/tvOS/watchOS/macOS push setups. The configuration must be nested under the 'ios' key in the 'push' section.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/push-notifications.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\npush: {\n  ios: {\n    token: {\n      key: '/file/path/to/AuthKey_XXXXXXXXXX.p8',\n      keyId: \"XXXXXXXXXX\",\n      teamId: \"YYYYYYYYYY\" // The Team ID for your developer account\n    },\n    topic: 'com.domain.appname', // The bundle identifier associated with your app\n    production: false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Subclasses of ParseObject (C#)\nDESCRIPTION: Demonstrates how to perform queries on subclasses of ParseObject using ParseQuery<T>. It shows how to use LINQ and fluent syntax to create queries with type-safe property access.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/objects.md#2025-04-22_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nvar query = from armor in new ParseQuery<Armor>()\n            where armor.Rupees <= ((Player)ParseUser.CurrentUser).Rupees\n            select armor;\nIEnumerable<Armor> result = await query.FindAsync();\n\n// or using LINQ\nvar query = new ParseQuery<Armor>()\n    .WhereLessThanOrEqualTo(\"rupees\", ((Player)ParseUser.CurrentUser).Rupees);\nIEnumerable<Armor> result = await query.FindAsync();\n```\n\n----------------------------------------\n\nTITLE: Using OR Queries with QueryBuilder in Dart\nDESCRIPTION: This snippet shows how to create OR queries using the QueryBuilder.or method. It combines multiple query conditions to find objects that match any of the specified criteria.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dart/queries.md#2025-04-22_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nParseObject playerObject = ParseObject(\"Player\");\n\nQueryBuilder<ParseObject> lotsOfWins =\n    QueryBuilder<ParseObject>(playerObject))\n      ..whereGreaterThan('wins', 50);\n\nQueryBuilder<ParseObject> fewWins =\n    QueryBuilder<ParseObject>(playerObject)\n      ..whereLessThan('wins', 5);\n\nQueryBuilder<ParseObject> mainQuery = QueryBuilder.or(\n      playerObject,\n      [lotsOfWins, fewWins],\n    );\n\nvar apiResponse = await mainQuery.query();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Related Objects in a Single Query using PFQuery in iOS\nDESCRIPTION: This snippet demonstrates how to retrieve multiple types of related objects in one query using the includeKey method. It shows how to fetch the last ten comments along with their related posts in Objective-C and Swift.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/queries.md#2025-04-22_snippet_50\n\nLANGUAGE: objective-c\nCODE:\n```\nPFQuery *query = [PFQuery queryWithClassName:@\"Comment\"];\n\n// Retrieve the most recent ones\n[query orderByDescending:@\"createdAt\"];\n\n// Only retrieve the last ten\nquery.limit = 10;\n\n// Include the post data with each comment\n[query includeKey:@\"post\"];\n\n[query findObjectsInBackgroundWithBlock:^(NSArray *comments, NSError *error) {\n    // Comments now contains the last ten comments, and the \"post\" field\n    // has been populated. For example:\n    for (PFObject *comment in comments) {\n         // This does not require a network access.\n         PFObject *post = comment[@\"post\"];\n         NSLog(@\"retrieved related post: %@\", post);\n    }\n}];\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet query = PFQuery(className:\"Comment\")\n\n// Retrieve the most recent ones\nquery.order(byDescending: \"createdAt\")\n\n// Only retrieve the last ten\nquery.limit = 10\n\n// Include the post data with each comment\nquery.includeKey(\"post\")\n\nquery.findObjectsInBackground { (comments: [PFObject]?, error: Error?) in\n    if let error = error {\n        // The request failed\n        print(error.localizedDescription)\n    } else if let comments = comments {\n        // Comments now contains the last ten comments, and the \"post\" field\n        // has been populated. For example:\n        for comment in comments {\n            // This does not require a network access.\n            let post = comment[\"post\"] as? PFObject\n            print(\"retrieved related post: \\(String(describing: post))\")\n        }\n\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Relations from Parse Objects\nDESCRIPTION: Demonstrates how to remove a related object using the RemoveRelation operation. This example removes the Player object with ID 'Vx4nudeWn' from the opponents relation field.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/objects.md#2025-04-22_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"opponents\":{\"__op\":\"RemoveRelation\",\"objects\":[{\"__type\":\"Pointer\",\"className\":\"Player\",\"objectId\":\"Vx4nudeWn\"}]}}' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/classes/GameScore/Ed1nuqPvcm\n```\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nconnection.connect()\nconnection.request('PUT', '/parse/classes/GameScore/Ed1nuqPvcm', json.dumps({\n    \"opponents\": {\n        \"__op\": \"RemoveRelation\",\n        \"objects\": [\n            {\n                \"__type\": \"Pointer\",\n                \"className\": \"Player\",\n                \"objectId\": \"Vx4nudeWn\"\n            }\n        ]\n    }\n}), {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\",\n    \"Content-Type\": \"application/json\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Creating a LiveQuery Subscription in Dart\nDESCRIPTION: This example shows how to create a LiveQuery subscription for real-time updates on a specific query. It sets up the query and subscribes to it.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dart/queries.md#2025-04-22_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nfinal LiveQuery liveQuery = LiveQuery();\n\nQueryBuilder<ParseObject> query =\n  QueryBuilder<ParseObject>(ParseObject('TestAPI'))\n  ..whereEqualTo('intNumber', 1);\n\nSubscription subscription = await liveQuery.client.subscribe(query);\n```\n\n----------------------------------------\n\nTITLE: Querying Within a Polygon in Parse JavaScript SDK\nDESCRIPTION: Demonstrates how to query for objects that lie within or on a polygon defined by Parse.GeoPoints.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/geopoints.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nquery.withinPolygon(\"location\", [geoPoint1, geoPoint2, geoPoint3]);\nconst robjectsWithGeoPointInPolygon = await query.find();\n```\n\n----------------------------------------\n\nTITLE: Requesting Password Reset with Parse REST API\nDESCRIPTION: This snippet demonstrates how to initiate a password reset for a user. It sends a POST request to the requestPasswordReset endpoint with the user's email address.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/users.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"email\":\"coolguy@iloveapps.com\"}' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/requestPasswordReset\n```\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nconnection.connect()\nconnection.request('POST', '/parse/requestPasswordReset', json.dumps({\n    \"email\": \"coolguy@iloveapps.com\"\n}), {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\",\n    \"Content-Type\": \"application/json\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Adding Properties to ParseObject Subclass\nDESCRIPTION: Demonstrates how to add type-safe properties to a ParseObject subclass using ParseFieldName attribute.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/objects.md#2025-04-22_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\n// Armor.cs\n[ParseClassName(\"Armor\")]\npublic class Armor : ParseObject\n{\n  [ParseFieldName(\"displayName\")]\n  public string DisplayName\n  {\n    get { return GetProperty<string>(\"DisplayName\"); }\n    set { SetProperty<string>(value, \"DisplayName\"); }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing S3Adapter in Node.js/Express for Parse Server\nDESCRIPTION: This code snippet demonstrates how to initialize and configure the S3Adapter for Parse Server in a Node.js/Express environment. It includes setting up the ParseServer with database URI, app ID, master key, and the S3Adapter with access key, secret key, bucket, and direct access option.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/file-adapters.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar S3Adapter = require('parse-server').S3Adapter;\n\nvar api = new ParseServer({\n  databaseURI: databaseUri || 'mongodb://localhost:27017/dev',\n  appId: process.env.APP_ID || 'APPLICATION_ID',\n  masterKey: process.env.MASTER_KEY || 'MASTER_KEY',\n  ...\n  filesAdapter: new S3Adapter(\n    \"S3_ACCESS_KEY\",\n    \"S3_SECRET_KEY\",\n    \"S3_BUCKET\",\n    {directAccess: true}\n  ),\n  ...\n});\n```\n\n----------------------------------------\n\nTITLE: Using matchesKeyInQuery for Relational Queries in JavaScript\nDESCRIPTION: Demonstrates how to use matchesKeyInQuery to find objects where a key's value matches the value of a key in objects returned by another query. This example finds users whose hometown teams have winning records.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/queries.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst Team = Parse.Object.extend(\"Team\");\nconst teamQuery = new Parse.Query(Team);\nteamQuery.greaterThan(\"winPct\", 0.5);\nconst userQuery = new Parse.Query(Parse.User);\nuserQuery.matchesKeyInQuery(\"hometown\", \"city\", teamQuery);\n// results has the list of users with a hometown team with a winning record\nconst results = await userQuery.find();\n```\n\n----------------------------------------\n\nTITLE: Sending Push Notifications Using Queries in Parse PHP SDK\nDESCRIPTION: This snippet sends push notifications based on queries targeting specific 'Installation' objects. It showcases how to filter devices using their properties and send customized alerts. Requires the Parse SDK, with input parameters defining query criteria and notification data.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/push-notifications.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$query = ParseInstallation::query();\n$query->equalTo(\"design\", \"rad\");\nParsePush::send(array(\n  \"where\" => $query,\n  \"data\" => $data\n), true);\n```\n\n----------------------------------------\n\nTITLE: Executing Relational Queries in Parse (JavaScript)\nDESCRIPTION: This snippet shows various ways to perform relational queries in Parse, including querying for objects where a field matches a particular Parse.Object, using matchesQuery and doesNotMatchQuery, and including related objects in the results.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/queries.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst query = new Parse.Query(Comment);\nquery.equalTo(\"post\", myPost);\nconst comments = await query.find();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst Post = Parse.Object.extend(\"Post\");\nconst Comment = Parse.Object.extend(\"Comment\");\nconst innerQuery = new Parse.Query(Post);\ninnerQuery.exists(\"image\");\nconst query = new Parse.Query(Comment);\nquery.matchesQuery(\"post\", innerQuery);\nconst comments = await query.find();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst Post = Parse.Object.extend(\"Post\");\nconst Comment = Parse.Object.extend(\"Comment\");\nconst innerQuery = new Parse.Query(Post);\ninnerQuery.exists(\"image\");\nconst query = new Parse.Query(Comment);\nquery.doesNotMatchQuery(\"post\", innerQuery);\nconst comments = await query.find();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst post = new Post();\npost.id = \"1zEcyElZ80\";\nquery.equalTo(\"post\", post);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst query = new Parse.Query(Comment);\nquery.descending(\"createdAt\");\nquery.limit(10);\nquery.include(\"post\");\nconst comments = await query.find();\nfor (let i = 0; i < comments.length; i++) {\n  const post = comments[i].get(\"post\");\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nquery.include([\"post.author\"]);\n```\n\n----------------------------------------\n\nTITLE: Unpinning Objects from Local Datastore\nDESCRIPTION: Shows various methods for unpinning objects from local datastore, including single object, multiple objects, and all objects.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/local-datastore.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nawait gameScore.unPin();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nawait Parse.Object.unPinAll(listOfObjects);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nawait Parse.Object.unPinAllObjects();\n```\n\n----------------------------------------\n\nTITLE: Calling a Cloud Function from .NET C#\nDESCRIPTION: This example demonstrates how to call the 'averageStars' Cloud Function from a .NET C# app, such as Windows 10, Unity, or Xamarin applications. It passes the movie name and handles the result asynchronously.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/cloudcode/cloud-code.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nIDictionary<string, object> params = new Dictionary<string, object>\n{\n    { \"movie\", \"The Matrix\" }\n};\nParseCloud.CallFunctionAsync<IDictionary<string, object>>(\"averageStars\", params).ContinueWith(t => {\n  var ratings = t.Result;\n  // ratings is 4.5\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Current User Session in C#\nDESCRIPTION: Demonstrates how to check if a user is currently logged in by accessing the ParseUser.CurrentUser property, which represents the cached user session.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/users.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nif (ParseUser.CurrentUser != null)\n{\n    // do stuff with the user\n}\nelse\n{\n    // show the signup or login screen\n}\n```\n\n----------------------------------------\n\nTITLE: Checking if a ParsePolygon Contains a Point in Java\nDESCRIPTION: This code shows how to efficiently check if a ParsePolygon contains a ParseGeoPoint without querying.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/geopoints.md#2025-04-22_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nList<ParseGeoPoint> points = new ArrayList<ParseGeoPoint>();\npoints.add(new ParseGeoPoint(0, 0));\npoints.add(new ParseGeoPoint(0, 1));\npoints.add(new ParseGeoPoint(1, 1));\npoints.add(new ParseGeoPoint(1, 0));\n\nParseGeoPoint inside = new ParseGeoPoint(0.5, 0.5);\nParseGeoPoint outside = new ParseGeoPoint(10, 10);\n\nParsePolygon polygon = new ParsePolygon(points);\n\n// Returns True\npolygon.containsPoint(inside);\n\n// Returns False\npolygon.containsPoint(outside);\n```\n\n----------------------------------------\n\nTITLE: Creating a Private Note with ParseACL in PHP\nDESCRIPTION: This snippet demonstrates how to create a private note that can only be accessed by the current user using ParseACL. It sets the content of the note and applies an ACL that restricts access to the current user.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/users.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$privateNote = new ParseObject(\"Note\");\n$privateNote->set(\"content\", \"This note is private!\");\n$privateNote->setACL(ParseACL::createACLWithUser(ParseUser::getCurrentUser()));\n$privateNote->save();\n```\n\n----------------------------------------\n\nTITLE: Google Sign-In Integration with Parse in Dart\nDESCRIPTION: Shows how to integrate Google Sign-In with Parse using the google_sign_in package.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dart/users.md#2025-04-22_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nclass OAuthLogin {\n  final GoogleSignIn _googleSignIn = GoogleSignIn( scopes: ['email', 'https://www.googleapis.com/auth/contacts.readonly'] );\n  \n  sigInGoogle() async {\n    GoogleSignInAccount account = await _googleSignIn.signIn();\n    GoogleSignInAuthentication authentication = await account.authentication;\n    await ParseUser.loginWith(\n        'google',\n        google(authentication.accessToken,\n               _googleSignIn.currentUser.id, \n               authentication.idToken));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Many-to-Many Relations in Parse Server Java SDK\nDESCRIPTION: Demonstrates how to use ParseRelation to model many-to-many relationships in Parse Server using Java. It shows adding and removing objects from a relation, and querying related objects.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/objects.md#2025-04-22_snippet_17\n\nLANGUAGE: java\nCODE:\n```\nParseUser user = ParseUser.getCurrentUser();\nParseRelation<ParseObject> relation = user.getRelation(\"likes\");\nrelation.add(post);\nuser.saveInBackground();\n```\n\nLANGUAGE: java\nCODE:\n```\nrelation.remove(post);\n```\n\nLANGUAGE: java\nCODE:\n```\nrelation.getQuery().findInBackground(new FindCallback<ParseObject>() {\n    void done(List<ParseObject> results, ParseException e) {\n      if (e != null) {\n        // There was an error\n      } else {\n        // results have all the Posts the current user liked.\n      }\n    }\n});\n```\n\nLANGUAGE: java\nCODE:\n```\nParseQuery<ParseObject> query = relation.getQuery();\n// Add other query constraints.\n```\n\n----------------------------------------\n\nTITLE: Performing Parse Server Health Check in PHP\nDESCRIPTION: Demonstrates how to check the health of the configured Parse Server using `ParseClient::getServerHealth()`. It retrieves the server status (e.g., HTTP status code), allowing verification of the connection and configuration before making API calls.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/setup.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$health = ParseClient::getServerHealth();\nif($health['status'] === 200) {\n    // everything looks good!\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Specific Session using Parse REST API\nDESCRIPTION: This snippet illustrates how to delete a specific Session object for a user using its objectId. It uses the DELETE method to remove the session without logging out the current user.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/sessions.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X DELETE \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -H \"X-Parse-Session-Token: r:pnktnjyb996sj4p156gjtp4im\" \\\n  https://YOUR.PARSE-SERVER.HERE/parse/sessions/Axy98kq1B09\n```\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nconnection.connect()\nconnection.request('DELETE', '/parse/sessions/Axy98kq1B09', '', {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\",\n    \"X-Parse-Session-Token\": \"r:pnktnjyb996sj4p156gjtp4im\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Compound Queries in Parse PHP\nDESCRIPTION: Demonstrates how to combine multiple queries using OR logic to match different conditions.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/queries.md#2025-04-22_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$lotsOfWins = new ParseQuery(\"Player\");\n$lotsOfWins->greaterThan(\"wins\", 150);\n\n$fewWins = new ParseQuery(\"Player\");\n$fewWins->lessThan(\"wins\", 5);\n\n$mainQuery = ParseQuery::orQueries([$lotsOfWins, $fewWins]);\n$results = $mainQuery->find();\n// results contains an array of players that either have won a lot of games or won only a few games.\n```\n\n----------------------------------------\n\nTITLE: Using notContainedIn Constraint in Parse.Query in JavaScript\nDESCRIPTION: Demonstrates how to use the notContainedIn constraint to find objects where a key's value does not match any value in a provided array.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/queries.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// Finds scores from anyone who is neither Jonathan, Dario, nor Shawn\nquery.notContainedIn(\"playerName\",\n                     [\"Jonathan Walsh\", \"Dario Wunsch\", \"Shawn Simon\"]);\n```\n\n----------------------------------------\n\nTITLE: Handling LiveQuery Delete Event in JavaScript\nDESCRIPTION: Demonstrates how to listen for the 'delete' event, which is triggered when an object matching the query is deleted.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/live-queries.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nsubscription.on('delete', (object) => {\n  console.log('object deleted');\n});\n```\n\n----------------------------------------\n\nTITLE: Optimized User Query with ContainedIn in JavaScript\nDESCRIPTION: This snippet shows an optimized way to query for users with specific states using the ContainedIn condition in JavaScript. This approach is faster than using NotEqualTo.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nquery.containedIn(\"state\", [\"SignedUp\", \"Verified\"]);\n```\n\n----------------------------------------\n\nTITLE: Saving Parse.File to Cloud in JavaScript\nDESCRIPTION: This code demonstrates how to save a Parse.File object to the cloud. It uses a Promise-based approach to handle the save operation and potential errors.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/files.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nparseFile.save().then(function() {\n  // The file has been saved to Parse.\n}, function(error) {\n  // The file either could not be read, or could not be saved to Parse.\n});\n```\n\n----------------------------------------\n\nTITLE: Subscribing to a Query with LiveQueryClient in JavaScript\nDESCRIPTION: Demonstrates how to subscribe to a Parse Query using a LiveQueryClient instance, optionally providing a session token for ACL checks.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/live-queries.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nlet query = new Parse.Query('Game');\nlet subscription = client.subscribe(query, sessionToken); \n```\n\n----------------------------------------\n\nTITLE: Triggering Background Job via REST API - Python\nDESCRIPTION: This Python snippet demonstrates how to start the 'userMigration' background job on Parse Server using http.client. The script sends a JSON payload with a 'plan' parameter and sets essential headers including Application ID and Master Key. It processes the response as JSON and prints the result. Requires http.client, json, and valid Parse server credentials.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/cloud-code.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('<span class=\\\"custom-parse-server-url\\\">YOUR.PARSE-SERVER.HERE</span>', 443)\nconnection.connect()\nconnection.request('POST', '<span class=\\\"custom-parse-server-mount\\\">/parse/</span>jobs/userMigration', json.dumps({\n    \"plan\": \"paid\"\n}), {\n    \"X-Parse-Application-Id\": \"<span class=\\\"custom-parse-server-appid\\\">${APPLICATION_ID}</span>\",\n    \"X-Parse-Master-Key\": \"<span class=\\\"custom-parse-server-masterkey\\\">${MASTER_KEY}</span>\",\n    \"Content-Type\": \"application/json\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Setting ACL on Current User in PHP\nDESCRIPTION: This PHP code demonstrates setting an Access Control List (ACL) on the current user in Parse. It retrieves the current user and creates a new ParseACL instance that restricts data access to only that specific user.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/security.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$user = ParseUser::getCurrentUser();\n$user->setACL(new ParseACL($user))\n```\n\n----------------------------------------\n\nTITLE: Configuring Secure SSL Connection for Parse on Arduino\nDESCRIPTION: Establishes a secure SSL connection to the Parse server by providing the host's SSL certificate fingerprint. This is the recommended approach for connecting to Parse servers.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/arduino/getting-started.md#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nvoid setup() {\n\tParse.begin(\"${APPLICATION_ID}\", \"${CLIENT_KEY}\");\n\tParse.setServerURL(\"parseapi.back4app.com\");\n\tParse.setHostFingerprint(\"${HOST_THUMBPRINT}\");\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Querying a Specific Object by ID in Parse Server (Bash and Python)\nDESCRIPTION: Demonstrates how to query a specific GameScore object by ID, excluding the playerName field. Uses both cURL and Python http.client approaches.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/queries.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -G \\\n  --data-urlencode 'excludeKeys=playerName' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/classes/GameScore/Ed1nuqPvcm\n```\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\nimport urllib.parse\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nparams = urllib.parse.urlencode({\"excludeKeys\": \"playerName\"})\nconnection.connect()\nconnection.request('GET', '/parse/classes/GameScore/Ed1nuqPvcm?%s' % params, '', {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Tracking Custom Events with Parse Analytics in JavaScript\nDESCRIPTION: This snippet demonstrates how to use Parse.Analytics to track custom events with additional metadata for segmentation. It requires the Parse JavaScript SDK. Developers can define custom dimensions, such as price range or source, and send this data along with event names to the Parse backend.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/analytics.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst dimensions = {\n  // Define ranges to bucket data points into meaningful segments\n  priceRange: '1000-1500',\n  // Did the user filter the query?\n  source: 'craigslist',\n  // Do searches happen more often on weekdays or weekends?\n  dayType: 'weekday'\n};\n// Send the dimensions to Parse along with the 'search' event\nParse.Analytics.track('search', dimensions);\n```\n\n----------------------------------------\n\nTITLE: Implementing PFQueryTableViewController in Objective-C\nDESCRIPTION: This snippet shows how to subclass PFQueryTableViewController to display Todo items with priorities. It demonstrates initialization, query customization, and cell configuration.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/user-interface.md#2025-04-22_snippet_13\n\nLANGUAGE: objective-c\nCODE:\n```\n@interface SimpleTableViewController : PFQueryTableViewController\n\n@end\n\n@implementation SimpleTableViewController\n\n- (instancetype)initWithStyle:(UITableViewStyle)style {\n    self = [super initWithStyle:style];\n    if (self) { // This table displays items in the Todo class\n      self.parseClassName = @\"Todo\";\n      self.pullToRefreshEnabled = YES;\n      self.paginationEnabled = YES;\n      self.objectsPerPage = 25;\n    }\n    return self;\n}\n\n- (PFQuery *)queryForTable {\n    PFQuery *query = [PFQuery queryWithClassName:self.parseClassName];\n\n    // If no objects are loaded in memory, we look to the cache first to fill the table\n    // and then subsequently do a query against the network.\n    if (self.objects.count == 0) {\n      query.cachePolicy = kPFCachePolicyCacheThenNetwork;\n    }\n\n    [query orderByDescending:@\"createdAt\"];\n\n    return query;\n}\n\n- (UITableViewCell *)tableView:(UITableView *)tableView  \n         cellForRowAtIndexPath:(NSIndexPath *)indexPath\n                        object:(PFObject *)object {\n    static NSString *cellIdentifier = @\"cell\";\n\n    PFTableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:cellIdentifier];\n    if (!cell) {\n      cell = [[PFTableViewCell alloc] initWithStyle:UITableViewCellStyleSubtitle\n                                    reuseIdentifier:cellIdentifier];\n    }\n\n    // Configure the cell to show todo item with a priority at the bottom\n    cell.textLabel.text = object[@\"text\"];\n    cell.detailTextLabel.text = [NSString stringWithFormat:@\"Priority: %@\",  object[@\"priority\"]];\n\n    return cell;\n}\n\n@end\n```\n\n----------------------------------------\n\nTITLE: Saving Object Using Parse REST API\nDESCRIPTION: Save your first object in Parse Server using a curl command to post JSON data to the server. Required: Set 'X-Parse-Application-Id' header and provide data as a JSON object with properties like 'score', 'playerName', and 'cheatMode'. The server responds with JSON providing an 'objectId' and 'createdAt' timestamp.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/getting-started.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"X-Parse-Application-Id: APPLICATION_ID\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\"score\":123,\"playerName\":\"Sean Plott\",\"cheatMode\":false}' \\\nhttp://localhost:1337/parse/classes/GameScore\n\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Constraints with PFQuery and NSPredicate in Swift\nDESCRIPTION: Displays how to require objects to match several constraints simultaneously, either by chaining calls to whereKey or via a compound NSPredicate. Uses field-value-condition arguments and returns query objects that enforce an AND logic. Requires ParseSwift SDK.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/queries.md#2025-04-22_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\n// Using PFQuery\nquery.whereKey(\"playerName\", notEqualTo: \"Michael Yabuti\")\nquery.whereKey(\"playerAge\", greaterThan: 18)\n\n// Using NSPredicate\nlet predicate = NSPredicate(format:\"playerName != 'Michael Yabuti' AND playerAge > 18\")\nlet query = PFQuery(className: \"GameScore\", predicate: predicate)\n```\n\n----------------------------------------\n\nTITLE: Implementing Complex Mutation Resolver with Relay ID Handling\nDESCRIPTION: Cloud Code function that implements the addToCart mutation, handling Relay global IDs, checking if an item is already in the cart, and incrementing quantity or creating a new CartItem as needed. Demonstrates Parse queries, object manipulation, and ID encoding/decoding.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/customisation.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n// main.js\nconst { fromGlobalId, toGlobalId } = require('graphql-relay');\n\nParse.Cloud.define(\"addToCart\", async (req) => {\n  const { user, params: { id } } = req;\n\n  // Decode the incoming Relay Node Id to a\n  // Parse objectId for Cloud Code use.\n  const { id: itemObjectId } = fromGlobalId(id);\n\n  // Query the user's current cart.\n  const itemQuery = new Parse.Query(\"Item\");\n  const item = await itemQuery.get(itemObjectId);\n  const cartItemQuery = new Parse.Query(\"CartItem\");\n  cartItemQuery.equalTo(\"item\", item);\n  cartItemQuery.equalTo(\"user\", user);\n  const [existingCartItem] = await cartItemQuery.find();\n  let savedCartItem;\n\n  if (existingCartItem) {\n    // The item is found in the user's cart; increment its quantity.\n    const quantity = await existingCartItem.get(\"quantity\");\n    existingCartItem.set(\"quantity\", quantity + 1);\n    savedCartItem = await existingCartItem.save();\n  } else {\n    // The item has not yet been added; create a new cartItem object.\n    const CartItem = Parse.Object.extend(\"CartItem\");\n    const cartItem = new CartItem();\n    savedCartItem = await cartItem.save({ quantity: 1, item, user });\n  }\n\n  // Encode the Parse objectId to a Relay Node Id\n  // for Parse GraphQL use.\n  const cartItemId = toGlobalId('CartItem', savedCartItem.id);\n\n  // Convert to a JSON object to handle adding the\n  // Relay Node Id property.\n  return { ...savedCartItem.toJSON(), id: cartItemId };\n});\n```\n\n----------------------------------------\n\nTITLE: Linking User Account with Facebook in Parse (cURL)\nDESCRIPTION: Shows how to link an existing user account with a Facebook account using Parse Server's REST API. It sends a PUT request with the user's Facebook authentication data.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/users.md#2025-04-22_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -H \"X-Parse-Session-Token: r:samplei3l83eerhnln0ecxgy5\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"authData\": {\n          \"facebook\": {\n            \"id\": \"123456789\",\n            \"access_token\": \"SaMpLeAAibS7Q55FSzcERWIEmzn6rosftAr7pmDME10008bWgyZAmv7mziwfacNOhWkgxDaBf8a2a2FCc9Hbk9wAsqLYZBLR995wxBvSGNoTrEaL\",\n            \"expiration_date\": \"2022-01-01T12:23:45.678Z\"\n          }\n        }\n      }' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/users/uMz0YZeAqc\n```\n\n----------------------------------------\n\nTITLE: Configuring Parse SDK with Custom Server URL in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates initializing the Parse JavaScript SDK with a custom application ID and setting the server URL property to the Parse Server endpoint. This setup is necessary to route all SDK requests to the correct server for web or Node.js projects. Required: Parse JavaScript SDK loaded in the environment.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/using-parse-sdks.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nParse.initialize(\"YOUR_APP_ID\");\nParse.serverURL = 'http://localhost:1337/parse'\n```\n\n----------------------------------------\n\nTITLE: Creating One-to-Many Relationships in Parse C#\nDESCRIPTION: Demonstrates how to create a one-to-many relationship between Post and Comment objects in Parse. Shows creating new objects and establishing the relationship by setting a pointer.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/objects.md#2025-04-22_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\n// Create the post\nvar myPost = new ParseObject(\"Post\")\n{\n    { \"title\", \"I'm Hungry\" },\n    { \"content\", \"Where should we go for lunch?\" }\n};\n\n// Create the comment\nvar myComment = new ParseObject(\"Comment\")\n{\n    { \"content\", \"Let's do Sushirrito.\" }\n};\n\n// Add a relation between the Post and Comment\nmyComment[\"parent\"] = myPost;\n\n// This will save both myPost and myComment\nTask saveTask = myComment.SaveAsync();\n```\n\n----------------------------------------\n\nTITLE: Setting Protected Fields for Parse User Class in JavaScript\nDESCRIPTION: This snippet demonstrates how to set protected fields for the Parse User class using CLP. It restricts access to sensitive user data fields for all users.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/defined-schema/class-level-permissions.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// className: '_User'\n{\n    protectedFields: {\n      \"*\": [\"authData\", \"emailVerified\", \"password\", \"username\"],\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Querying User Posts\nDESCRIPTION: Shows how to create a new post associated with a user and query for all posts by a specific user.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/users.md#2025-04-22_snippet_15\n\nLANGUAGE: java\nCODE:\n```\nParseUser user = ParseUser.getCurrentUser();\n\n// Make a new post\nParseObject post = new ParseObject(\"Post\");\npost.put(\"title\", \"My New Post\");\npost.put(\"body\", \"This is some great content.\");\npost.put(\"user\", user);\npost.saveInBackground();\n\n// Find all posts by the current user\nParseQuery<ParseObject> query = ParseQuery.getQuery(\"Post\");\nquery.whereEqualTo(\"user\", user);\nquery.findInBackground(new FindCallback<ParseObject>() { ... });\n```\n\n----------------------------------------\n\nTITLE: Creating and Saving PFObject in Parse iOS SDK\nDESCRIPTION: Demonstrates how to create a PFObject for a GameScore, set its properties, and save it to Parse Server. The code shows both Objective-C and Swift implementations.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/objects.md#2025-04-22_snippet_0\n\nLANGUAGE: objective-c\nCODE:\n```\nPFObject *gameScore = [PFObject objectWithClassName:@\"GameScore\"];\ngameScore[@\"score\"] = @1337;\ngameScore[@\"playerName\"] = @\"Sean Plott\";\ngameScore[@\"cheatMode\"] = @NO;\n[gameScore saveInBackgroundWithBlock:^(BOOL succeeded, NSError * _Nullable error) {\n  if (succeeded) {\n    // The object has been saved.\n  } else {\n    // There was a problem, check error.description\n  }\n}];\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet gameScore = PFObject(className:\"GameScore\")\ngameScore[\"score\"] = 1337\ngameScore[\"playerName\"] = \"Sean Plott\"\ngameScore[\"cheatMode\"] = false\ngameScore.saveInBackground { (succeeded, error)  in\n    if (succeeded) {\n        // The object has been saved.\n    } else {\n        // There was a problem, check error.description\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting LiveQuery Server URL in JavaScript\nDESCRIPTION: Demonstrates how to manually set the LiveQuery server URL if needed, overriding the default behavior.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/live-queries.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nParse.liveQueryServerURL = 'ws://XXXX'\n```\n\n----------------------------------------\n\nTITLE: Using Full Text Search with Sorting and Score in Objective-C\nDESCRIPTION: Demonstrates advanced full text search with sort by relevance score and retrieving the score value in the results. This feature requires Parse Server 2.5.0+.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/queries.md#2025-04-22_snippet_44\n\nLANGUAGE: objective-c\nCODE:\n```\n// You can sort by weight / rank. orderByAscending and selectKeys\nPFQuery *query = [PFQuery queryWithClassName:@\"BarbecueSauce\"];\n[query whereKey:@\"name\" matchesText:@\"bbq\"];\n[query orderByAscending:@\"$score\"];\n[query selectKeys:@[@\"$score\"]];\n[query findObjectsInBackgroundWithBlock:^(NSArray *objects, NSError *error) {\n  if (!error) {\n    // The find succeeded.\n    for (PFObject *object in objects) {\n      NSLog(@\"Successfully retrieved %d weight / rank.\", object[@\"$score\"]);\n    }\n  } else {\n    // Log details of the failure\n    NSLog(@\"Error: %@ %@\", error, [error userInfo]);\n  }\n}];\n```\n\n----------------------------------------\n\nTITLE: Creating a One-to-Many Relationship with Pointers in Parse\nDESCRIPTION: This snippet demonstrates how to create a one-to-many relationship between a Game object and a Parse User using Pointers. It sets the current user as the creator of a new Game object.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/relations.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nParseObject game = new ParseObject(\"Game\");\ngame.put(\"createdBy\", ParseUser.getCurrentUser());\n```\n\nLANGUAGE: objective_c\nCODE:\n```\nPFObject *game= [PFObject objectWithClassName:@\"Game\"];\n[game setObject:[PFUser currentUser] forKey:@\"createdBy\"];\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet game = PFObject(className:\"Game\")\ngame[\"createdBy\"] = PFUser.currentUser()\n```\n\nLANGUAGE: php\nCODE:\n```\n$game = ParseObject::create(\"Game\");\n\n$game->set(\"createdBy\", ParseUser::getCurrentUser());\n```\n\nLANGUAGE: cs\nCODE:\n```\nvar game = new ParseObject(\"Game\");\ngame[\"createdBy\"] = ParseUser.CurrentUser;\n```\n\nLANGUAGE: js\nCODE:\n```\nvar game = new Parse.Object(\"Game\");\ngame.set(\"createdBy\", Parse.User.current());\n```\n\n----------------------------------------\n\nTITLE: Creating a Parse Object (GameScore) via GraphQL Mutation - GraphQL\nDESCRIPTION: Illustrates the mutation request to create a new 'GameScore' object using Parse Server's automatically generated GraphQL mutation. Requires proper typing of input fields according to schema, including 'clientMutationId' and new object data. Returns the new object's details, including fields and Access Control List (ACL), for immediate use or UI feedback.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/objects.md#2025-04-22_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nmutation createAGameScore {\n  createGameScore(\n    input: {\n      clientMutationId: \"anUniqueId\"\n      fields: { playerName: \"Sean Plott\", score: 1337, cheatMode: false }\n    }\n  ) {\n    clientMutationId\n    gameScore {\n      id\n      updatedAt\n      createdAt\n      playerName\n      score\n      cheatMode\n      ACL {\n        public {\n          write\n          read\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Private Note with Access Control in Parse iOS SDK\nDESCRIPTION: This snippet demonstrates how to create an object that can only be read or modified by the current user. It uses PFACL to restrict access to the object to only the authenticated user.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/users.md#2025-04-22_snippet_6\n\nLANGUAGE: objective_c\nCODE:\n```\nPFObject *privateNote = [PFObject objectWithClassName:@\"Note\"];\nprivateNote[@\"content\"] = @\"This note is private!\";\nprivateNote.ACL = [PFACL ACLWithUser:[PFUser currentUser]];\n[privateNote saveInBackground];\n```\n\nLANGUAGE: swift\nCODE:\n```\nvar privateNote = PFObject(className:\"Note\")\nprivateNote[\"content\"] = \"This note is private!\"\nprivateNote.ACL = PFACL.ACLWithUser(PFUser.currentUser())\nprivateNote.saveInBackground()\n```\n\n----------------------------------------\n\nTITLE: Sorting Parse Query Results in Ascending and Descending Order\nDESCRIPTION: This snippet demonstrates how to sort query results by a specific field in either ascending or descending order using orderByAscending and orderByDescending methods.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/queries.md#2025-04-22_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n// Sorts the results in ascending order by the score field\nquery.orderByAscending(\"score\");\n\n// Sorts the results in descending order by the score field\nquery.orderByDescending(\"score\");\n```\n\n----------------------------------------\n\nTITLE: Text Search with Sorting by Relevance in Python\nDESCRIPTION: This Python snippet demonstrates how to perform a text search query on Parse Server and sort the results by relevance score. It searches for barbecue sauces containing \"Daddy\" in their name.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/queries.md#2025-04-22_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n# Finds string that contains \"Daddy\" ordered by relevance\nimport http.client\nimport json\nimport urllib.parse\n\n\nconnection = http.client.HTTPSConnection('api.parse.com', 443)\nparams = urllib.parse.urlencode({\"where\": json.dumps({\n    \"name\": {\n        \"$text\": {\n            \"$search\": {\n                \"$term\": \"Daddy\"\n            }\n        }\n    }\n}),\n\"order\": \"$score\",\n\"keys\": \"$score\"})\nconnection.connect()\nconnection.request('GET', '/1/classes/BarbecueSauce?%s' % params, '', {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Creating One-to-Many Relationship between Post and Comment (C#)\nDESCRIPTION: Demonstrates how to create a one-to-many relationship between Post and Comment objects using object references. It shows how to create and save related objects, and how to link objects using ObjectIds.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/objects.md#2025-04-22_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\n// Create the post\nvar myPost = new ParseObject(\"Post\")\n{\n    { \"title\", \"I'm Hungry\" },\n    { \"content\", \"Where should we go for lunch?\" }\n};\n\n// Create the comment\nvar myComment = new ParseObject(\"Comment\")\n{\n    { \"content\", \"Let's do Sushirrito.\" }\n};\n\n// Add a relation between the Post and Comment\nmyComment[\"parent\"] = myPost;\n\n// This will save both myPost and myComment\nawait myComment.SaveAsync();\n```\n\nLANGUAGE: C#\nCODE:\n```\nmyComment[\"parent\"] = ParseObject.CreateWithoutData(\"Post\", \"1zEcyElZ80\");\n```\n\nLANGUAGE: C#\nCODE:\n```\nParseObject post = fetchedComment.Get<ParseObject>(\"parent\");\nawait post.FetchIfNeededAsync();\n```\n\n----------------------------------------\n\nTITLE: Querying Books by Author in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to query for Book objects that contain a specific Author. It uses the equalTo method to filter books and includes the authors in the query results using an asynchronous approach.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/relations.md#2025-04-22_snippet_39\n\nLANGUAGE: js\nCODE:\n```\n// set up our query for the Book object\nvar bookQuery = new Parse.Query(\"Book\");\n\n// configure any constraints on your query...\nbookQuery.equalTo(\"authors\", author);\n\n// tell the query to fetch all of the Author objects along with the Book\nbookQuery.include(\"authors\");\n\n// execute the query\nconst books = await bookQuery.find();\n```\n\n----------------------------------------\n\nTITLE: Querying by objectId using PFQuery and NSPredicate in iOS\nDESCRIPTION: This snippet shows how to perform relational queries by objectId using both PFQuery and NSPredicate methods in Objective-C and Swift.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/queries.md#2025-04-22_snippet_47\n\nLANGUAGE: objective-c\nCODE:\n```\n// Using PFQuery\n[query whereKey:@\"post\" equalTo:[PFObject objectWithoutDataWithClassName:@\"Post\" objectId:@\"1zEcyElZ80\"]];\n\n// Using NSPredicate\n[NSPredicate predicateWithFormat:@\"post = %@\",\n    [PFObject objectWithoutDataWithClassName:@\"Post\" objectId:@\"1zEcyElZ80\"]];\n```\n\nLANGUAGE: swift\nCODE:\n```\n// Using PFQuery\nquery.whereKey(\"post\", equalTo: PFObject(withoutDataWithClassName: \"Post\", objectId: \"1zEcyElZ80\"))\n\n// Using NSPredicate\nNSPredicate(format: \"post = %@\", PFObject(withoutDataWithClassName: \"Post\", objectId: \"1zEcyElZ80\"))\n```\n\n----------------------------------------\n\nTITLE: Creating a Public-Readable Post in Parse iOS SDK\nDESCRIPTION: This example shows how to create a post that can be read by any user but only edited by its author. It uses PFACL to set public read access while limiting write access to the current user.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/users.md#2025-04-22_snippet_8\n\nLANGUAGE: objective_c\nCODE:\n```\nPFObject *publicPost = [PFObject objectWithClassName:@\"Post\"];\nPFACL *postACL = [PFACL ACLWithUser:[PFUser currentUser]];\n[postACL setPublicReadAccess:YES];\npublicPost.ACL = postACL;\n[publicPost saveInBackground];\n```\n\nLANGUAGE: swift\nCODE:\n```\nvar publicPost = PFObject(className:\"Post\")\nvar postACL = PFACL.ACLWithUser(PFUser.currentUser())\npostACL.setPublicReadAccess(true)\npublicPost.ACL = postACL\npublicPost.saveInBackground()\n```\n\n----------------------------------------\n\nTITLE: Adding Metadata and Tags to Files with beforeSaveFile\nDESCRIPTION: This example demonstrates how to add metadata and tags to files using the beforeSaveFile trigger. It adds a createdById metadata field and a groupId tag to the file.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/cloudcode/cloud-code.md#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n// Adding metadata and tags\nParse.Cloud.beforeSaveFile((request) => {\n  const { file, user } = request;\n  file.addMetadata('createdById', user.id);\n  file.addTag('groupId', user.get('groupId'));\n});\n```\n\n----------------------------------------\n\nTITLE: Using startsWith for String Queries in Parse in JavaScript\nDESCRIPTION: Demonstrates how to use the startsWith constraint to find objects where a string field starts with a specific string. This method is indexed and efficient for large datasets.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/queries.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// Finds barbecue sauces that start with \"Big Daddy's\".\nconst query = new Parse.Query(BarbecueSauce);\nquery.startsWith(\"name\", \"Big Daddy's\");\n```\n\n----------------------------------------\n\nTITLE: Querying ParseInstallation and Sending Push Notifications in Android\nDESCRIPTION: Illustrates how to create a ParseQuery for ParseInstallation objects, filter installations based on stored data, and send a push notification to the queried devices.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/push-notifications.md#2025-04-22_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n// Create our Installation query\nParseQuery pushQuery = ParseInstallation.getQuery();\npushQuery.whereEqualTo(\"injuryReports\", true);\n\n// Send push notification to query\nParsePush push = new ParsePush();\npush.setQuery(pushQuery); // Set our Installation query\npush.setMessage(\"Willie Hayes injured by own pop fly.\");\npush.sendInBackground();\n```\n\n----------------------------------------\n\nTITLE: Setting Default ACL in Parse SDKs\nDESCRIPTION: Demonstrates how to set a default ACL that will be applied to all new objects created in Parse. This ensures basic access control without explicitly setting it for each object.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/security.md#2025-04-22_snippet_7\n\nLANGUAGE: objective-c\nCODE:\n```\n[PFACL setDefaultACL:[PFACL ACL] withAccessForCurrentUser:YES];\n```\n\nLANGUAGE: swift\nCODE:\n```\nPFACL.setDefault(PFACL(), withAccessForCurrentUser: true)\n```\n\nLANGUAGE: java\nCODE:\n```\nParseACL.setDefaultACL(new ParseACL(), true);\n```\n\nLANGUAGE: php\nCODE:\n```\nParseACL::setDefaultACL(new ParseACL(), true);\n```\n\n----------------------------------------\n\nTITLE: Including Related Objects in Query Results\nDESCRIPTION: This example demonstrates how to retrieve Comment objects with their related Post objects included in the response. The 'include' parameter tells Parse Server to return the complete Post object instead of just a Pointer reference.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/queries.md#2025-04-22_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -G \\\n  --data-urlencode 'order=-createdAt' \\\n  --data-urlencode 'limit=10' \\\n  --data-urlencode 'include=post' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/classes/Comment\n```\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\nimport urllib.parse\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nparams = urllib.parse.urlencode({\"order\": \"-createdAt\", \"limit\": 10, \"include\": \"post\"})\nconnection.connect()\nconnection.request('GET', '/parse/classes/Comment?%s' % params, '', {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Calculating Distance Between Points - C#\nDESCRIPTION: Demonstrates how to calculate the distance in kilometers between two ParseGeoPoints.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/geopoints.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nParseGeoPoint p1 = /* Some location */;\nParseGeoPoint p2 = /* Some other location */;\ndouble distanceInKm = p1.DistanceTo(p2).Kilometers;\n```\n\n----------------------------------------\n\nTITLE: Parse Server Response for New User Creation\nDESCRIPTION: Demonstrates the response structure when a new user is created in Parse Server. It includes the automatically generated username, creation date, object ID, and session token.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/users.md#2025-04-22_snippet_26\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"username\": \"iwz8sna7sug28v4eyu7t89fij\",\n  \"createdAt\": \"2022-01-01T12:23:45.678Z\",\n  \"objectId\": \"uMz0YZeAqc\",\n  \"sessionToken\": \"r:samplei3l83eerhnln0ecxgy5\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying for Multiple Array Values in Parse with Objective-C\nDESCRIPTION: Shows how to find objects where an array field contains all elements in a specified set of values. This example finds objects where 'arrayKey' contains all of the values 2, 3, and 4.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/queries.md#2025-04-22_snippet_38\n\nLANGUAGE: objective-c\nCODE:\n```\n// Find objects where the array in arrayKey contains each of the\n// elements 2, 3, and 4.\n[query whereKey:@\"arrayKey\" containsAllObjectsInArray:@[@2, @3, @4]];\n```\n\n----------------------------------------\n\nTITLE: First Result Query\nDESCRIPTION: Demonstrates retrieving only the first matching result using FirstAsync\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/queries.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar query = ParseObject.GetQuery(\"GameScore\")\n    .WhereEqualTo(\"playerEmail\", \"dstemkoski@example.com\");\nquery.FirstAsync().ContinueWith(t =>\n{\n    ParseObject obj = t.Result;\n});\n```\n\n----------------------------------------\n\nTITLE: Sending Geolocation-Based Push Notification\nDESCRIPTION: Demonstrates sending push notifications to users near a specific geographic location using GeoPoint queries. Includes a distance filter of 1 mile from the specified coordinates.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/push-notifications.md#2025-04-22_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"where\": {\n          \"user\": {\n            \"$inQuery\": {\n              \"location\": {\n                \"$nearSphere\": {\n                  \"__type\": \"GeoPoint\",\n                  \"latitude\": 30.0,\n                  \"longitude\": -20.0\n                },\n                \"$maxDistanceInMiles\": 1.0\n              }\n            }\n          }\n        },\n        \"data\": {\n          \"alert\": \"Free hotdogs at the Parse concession stand!\"\n        }\n      }' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/push\n```\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nconnection.connect()\nconnection.request('POST', '/parse/push', json.dumps({\n    \"where\": {\n        \"user\": {\n            \"$inQuery\": {\n                \"where\": {\n                    \"location\": {\n                        \"$nearSphere\": {\n                            \"__type\": \"GeoPoint\",\n                            \"latitude\": 51.252437591552734,\n                            \"longitude\": -1.6038470268249512\n                        },\n                        \"$maxDistanceInMiles\": 1.0\n                    }\n                },\n                \"className\": \"_User\"\n            }\n        }\n    },\n    \"data\": {\n        \"alert\": \"Free hotdogs at the Parse concession stand!\"\n    }\n}), {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\",\n    \"Content-Type\": \"application/json\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Querying One-to-Many Relationships with Pointers in Parse\nDESCRIPTION: This snippet shows how to query for all Game objects created by the current user using the one-to-many relationship established with Pointers.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/relations.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nParseQuery<ParseObject> gameQuery = ParseQuery.getQuery(\"Game\");\ngameQuery.whereEqualTo(\"createdBy\", ParseUser.getCurrentUser());\n```\n\nLANGUAGE: objective_c\nCODE:\n```\nPFQuery *gameQuery = [PFQuery queryWithClassName:@\"Game\"];\n[gameQuery whereKey:@\"createdBy\" equalTo:[PFUser currentUser]];\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet gameQuery = PFQuery(className:\"Game\")\nif let user = PFUser.currentUser() {\n  gameQuery.whereKey(\"createdBy\", equalTo: user)\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n$gameQuery = new ParseQuery(\"Game\");\n\n$gameQuery->equalTo(\"createdBy\", ParseUser::getCurrentUser());\n```\n\nLANGUAGE: cs\nCODE:\n```\nvar query = ParseObject.getQuery(\"Game\").WhereEqualTo(\"createdBy\", ParseUser.CurrentUser);\n```\n\nLANGUAGE: js\nCODE:\n```\nvar query = new Parse.Query(\"Game\");\nquery.equalTo(\"createdBy\", Parse.User.current());\n```\n\n----------------------------------------\n\nTITLE: Pagination with Limit and Skip Parameters in Parse Server\nDESCRIPTION: This code demonstrates how to implement pagination using the 'limit' and 'skip' parameters. The example retrieves 200 GameScore objects after skipping the first 400 results.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/queries.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -G \\\n  --data-urlencode 'limit=200' \\\n  --data-urlencode 'skip=400' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/classes/GameScore\n```\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\nimport urllib.parse\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nparams = urllib.parse.urlencode({\"limit\": 200, \"skip\": 400})\nconnection.connect()\nconnection.request('GET', '/parse/classes/GameScore?%s' % params, '', {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Calling a Parse Cloud Function Synchronously using PHP\nDESCRIPTION: This snippet demonstrates how to execute a server-side Parse Cloud Function named 'aCloudFunction' using the `ParseCloud::run` method from the Parse PHP SDK. It passes an associative array as parameters and receives the function's return value directly.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/cloud.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$results = ParseCloud::run(\"aCloudFunction\", array(\"from\" => \"php\"));\n```\n\n----------------------------------------\n\nTITLE: Sending Customized Push Notification in Parse .NET SDK\nDESCRIPTION: This code shows how to send a push notification with additional custom data, including a title. It uses a dictionary to package the alert message and title, allowing for more customized notifications.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/push-notifications.md#2025-04-22_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nvar push = new ParsePush();\npush.Channels = new List<string> {\"Mets\"};\npush.Data = new Dictionary<string, object> {\n  {\"title\", \"Score Alert\"}\n  {\"alert\", \"The Mets scored! The game is now tied 1-1!\"},\n};\nawait push.SendAsync();\n```\n\n----------------------------------------\n\nTITLE: Adding an Author to a Book's Authors Array in C#\nDESCRIPTION: This C# snippet demonstrates how to add an Author object to the 'authors' array of a Book object using Parse. It uses the AddToList method to append the author to the existing list.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/relations.md#2025-04-22_snippet_27\n\nLANGUAGE: cs\nCODE:\n```\n// let's say we have an author\nvar author = ...\n\n// and let's also say we have an book\nvar book = ...\n\n// add the author to the authors list for the book\nbook.AddToList(\"authors\", author);\n```\n\n----------------------------------------\n\nTITLE: Making a POST Request with Parse.Cloud.httpRequest in JavaScript\nDESCRIPTION: Shows how to send a POST request with a JSON body using Parse.Cloud.httpRequest. It sets the Content-Type header and includes a JSON payload in the body.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/cloudcode/cloud-code-advanced.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nParse.Cloud.httpRequest({\n  method: 'POST',\n  url: 'http://www.example.com/create_post',\n  headers: {\n    'Content-Type': 'application/json;charset=utf-8'\n  },\n  body: {\n    title: 'Vote for Pedro',\n    body: 'If you vote for Pedro, your wildest dreams will come true'\n  }\n}).then(function(httpResponse) {\n  console.log(httpResponse.text);\n}, function(httpResponse) {\n  console.error('Request failed with response code ' + httpResponse.status);\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Local vs. Server Data in Parse JavaScript SDK\nDESCRIPTION: Illustrates the behavior of local and server data in Parse Objects, demonstrating how to handle unsaved local changes and revert to server values.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/queries.md#2025-04-22_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\n// Save object\nconst GameScore = Parse.Object.extend(\"GameScore\");\nconst localObject = new Parse.Object(GameScore);\nlocalObject.set('field', 'a');\nawait localObject.save();\n\n// Modify object locally without saving it\nlocalObject.set('field', 'b');\n\n// Fetch local object from server\nconst query = new Parse.Query(GameScore);\nconst fetchedObject = await query.first();\n\n// Determine field value\nfetchedObject.get('field'); // Returns value 'b'\nfetchedObject.revert();\nfetchedObject.get('field'); // Returns value 'a'\n```\n\n----------------------------------------\n\nTITLE: Purging All Objects from a Schema in Parse Server JavaScript SDK\nDESCRIPTION: Shows how to delete all objects from a schema using the purge method. This is an irreversible action and should be used with caution, typically when preparing to delete a class entirely.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/schema.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// delete all objects in the schema\nmySchema.purge();\n```\n\n----------------------------------------\n\nTITLE: Caching Query Results by Pinning with Labels - Parse SDK Objective-C\nDESCRIPTION: This Objective-C snippet demonstrates how to cache the results of a Parse query by first removing previously pinned objects with a specific label (\\\"HighScores\\\") and then pinning newly fetched objects from the network with the same label. It requires the Parse SDK for Objective-C, and uses asynchronous operations with continuation blocks. Parameters include the class name (\\\"GameScore\\\"), the ordering key (\\\"score\\\"), and the pin label. Input is an asynchronous network query; output is updated cached objects in the local datastore under the designated label.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/local-datastore.md#2025-04-22_snippet_3\n\nLANGUAGE: objective_c\nCODE:\n```\nPFQuery *query = [PFQuery queryWithClassName:@\"GameScore\"];\n[query orderByDescending:@\"score\"];\n\n// Query for new results from the network\n[[query findObjectsInBackground] continueWithSuccessBlock:^id(BFTask *task) {\n  return [[PFObject unpinAllObjectsInBackgroundWithName:@\"HighScores\"] continueWithSuccessBlock:^id(BFTask *ignored) {\n    // Cache the new results.\n    NSArray *scores = task.result;\n    return [PFObject pinAllInBackground:scores withName:@\"HighScores\"];\n  }];\n}];\n```\n\n----------------------------------------\n\nTITLE: Advanced Cloud Function Validation in JavaScript\nDESCRIPTION: This snippet demonstrates more advanced validation for the 'averageStars' Cloud Function. It checks the type and length of the 'movie' parameter and ensures the user has the correct account type.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/cloudcode/cloud-code.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nParse.Cloud.define(\"averageStars\", async (request) => {\n  const query = new Parse.Query(\"Review\");\n  query.equalTo(\"movie\", request.params.movie);\n  const results = await query.find();\n  let sum = 0;\n  for (let i = 0; i < results.length; ++i) {\n    sum += results[i].get(\"stars\");\n  }\n  return sum / results.length;\n},{\n  fields : {\n    movie : {\n      required: true,\n      type: String,\n      options: val => {\n        return val.length < 20;\n      },\n      error: \"Movie must be less than 20 characters\"\n    }\n  },\n  requireUserKeys: {\n    accType : {\n      options: 'reviewer',\n      error: 'Only reviewers can get average stars'\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Calling Cloud Function via REST API - Python\nDESCRIPTION: This Python snippet demonstrates invoking the 'hello' Cloud Function using the http.client library to perform an HTTP POST request. The script sets the required X-Parse-Application-Id and X-Parse-REST-API-Key headers and defines the endpoint as '/parse/functions/hello'. The response is parsed from JSON and printed. Requires the http.client and json libraries, a valid Parse server URL, and appropriate headers.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/cloud-code.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('<span class=\\\"custom-parse-server-url\\\">YOUR.PARSE-SERVER.HERE</span>', 443)\nconnection.connect()\nconnection.request('POST', '<span class=\\\"custom-parse-server-mount\\\">/parse/</span>functions/hello', '', {\n    \"X-Parse-Application-Id\": \"<span class=\\\"custom-parse-server-appid\\\">${APPLICATION_ID}</span>\",\n    \"X-Parse-REST-API-Key\": \"<span class=\\\"custom-parse-server-restapikey\\\">${REST_API_KEY}</span>\",\n    \"Content-Type\": \"application/json\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Defining Indexes in Parse Server Schema\nDESCRIPTION: This example demonstrates how to define different types of indexes in a Parse Server schema for the _User class. It includes a simple index on an array field, an index on a Pointer field using the special _p_ notation, and a compound index combining multiple fields.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/defined-schema/indexes.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst UserSchema = {\n  className: \"_User\",\n  fields: {\n    tags: { type: \"Array\" },\n    city: { type: \"Pointer\", targetClass: \"City\" },\n  },\n  indexes: {\n    tagsIndex: { tags: 1 },\n    cityPointerIndex: { _p_city: 1 },\n    tagAndCityIndex: { _p_city: 1, tags: 1 },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Adding an Author to a Book's Authors Array in Objective-C and Swift\nDESCRIPTION: This snippet demonstrates how to add an Author object to the 'authors' array of a Book object in both Objective-C and Swift. It shows the syntax for creating a Many-to-Many relationship in iOS development with Parse.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/relations.md#2025-04-22_snippet_25\n\nLANGUAGE: objective-c\nCODE:\n```\n// let's say we have an author\nPFObject *author = ...\n\n// and let's also say we have an book\nPFObject *book = ...\n\n// add the author to the authors list for the book\n[book addObject:author forKey:@\"authors\"];\n```\n\nLANGUAGE: swift\nCODE:\n```\n// let's say we have an author\nlet author = ...\n\n// and let's also say we have an book\nlet book = ...\n\n// add the author to the authors list for the book\nbook.addObject(author, forKey: \"authors\")\n```\n\n----------------------------------------\n\nTITLE: Fetching Related Parse Objects\nDESCRIPTION: Demonstrates how to fetch related objects that weren't automatically included in the initial object fetch.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/objects.md#2025-04-22_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nParseObject post = fetchedComment.Get<ParseObject>(\"parent\");\nTask<ParseObject> fetchTask = post.FetchIfNeededAsync();\n```\n\n----------------------------------------\n\nTITLE: Pinning Parse Objects to Local Datastore\nDESCRIPTION: Demonstrates how to save and pin a Parse Object to local storage, including single object pinning and bulk pinning multiple objects.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/local-datastore.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst GameScore = Parse.Object.extend(\"GameScore\");\nconst gameScore = new GameScore();\n\nawait gameScore.save();\nawait gameScore.pin();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nawait Parse.Object.pinAll(listOfObjects);\n```\n\n----------------------------------------\n\nTITLE: Efficient Query with StartsWith in JavaScript\nDESCRIPTION: This snippet demonstrates an efficient way to query for player names using the StartsWith condition in JavaScript. This approach is recommended for better performance as it can use an index.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\nquery.startsWith(\"playerName\", \"Michael\");\n```\n\n----------------------------------------\n\nTITLE: Handling Counters and Arrays in ParseObjects with PHP\nDESCRIPTION: This example demonstrates managing counters with atomic increments and handling arrays by appending, adding uniquely, and removing elements in ParseObjects.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/objects.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$gameScore->increment(\"score\");\n$gameScore->save();\n\n$gameScore->addUnique(\"skills\", [\"flying\"]);\n$gameScore->addUnique(\"skills\", [\"kungfu\"]);\n$gameScore->save();\n```\n\n----------------------------------------\n\nTITLE: Querying Users with Hometown Teams Query in Parse Server\nDESCRIPTION: This snippet demonstrates how to perform a complex query using the $select operator to find users whose hometown teams have winning records. The query uses a subquery to match users based on their hometown team's win percentage.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/queries.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -G \\\n  --data-urlencode 'where={\"hometown\":{\"$select\":{\"query\":{\"className\":\"Team\",\"where\":{\"winPct\":{\"$gt\":0.5}}},\"key\":\"city\"}}}' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/classes/_User\n```\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\nimport urllib.parse\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nparams = urllib.parse.urlencode({\"where\": json.dumps({\n    \"hometown\": {\n        \"$select\": {\n            \"query\": {\n                \"className\": \"Team\",\n                \"where\": {\n                    \"winPct\": {\n                        \"$gt\": 0.5\n                    }\n                }\n            },\n            \"key\": \"city\"\n        }\n    }\n})})\nconnection.connect()\nconnection.request('GET', '/parse/classes/_User?%s' % params, '', {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Querying Books by Author in Objective-C and Swift\nDESCRIPTION: These snippets show how to query for Book objects that contain a specific Author in both Objective-C and Swift. They demonstrate using whereKey:equalTo: to filter books and including the authors in the query results.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/relations.md#2025-04-22_snippet_36\n\nLANGUAGE: objective-c\nCODE:\n```\n// suppose we have an Author object\nPFObject *author = ...\n\n// set up our query for the Book object\nPFQuery *bookQuery = [PFQuery queryWithClassName:@\"Book\"];\n\n// configure any constraints on your query...\n[bookQuery whereKey:@\"authors\" equalTo:author];\n\n// tell the query to fetch all of the Author objects along with the Book\n[bookQuery includeKey:@\"authors\"];\n\n// execute the query\n[bookQuery findObjectsInBackgroundWithBlock:^(NSArray *objects, NSError *error) {\n    // objects is all of the Book objects, and their associated Author objects, too\n}];\n```\n\nLANGUAGE: swift\nCODE:\n```\n// suppose we have an Author object\nlet author = ...\n\n// set up our query for the Book object\nlet bookQuery = PFQuery(className: \"Book\")\n\n// configure any constraints on your query...\nbookQuery.whereKey(\"authors\", equalTo: author)\n\n// tell the query to fetch all of the Author objects along with the Book\nbookQuery.includeKey(\"authors\")\n\n// execute the query\nbookQuery.findObjectsInBackgroundWithBlock{\n\t(objects: [AnyObject]?, error: NSError?) -> Void in\n    // objects is all of the Book objects, and their associated Author objects, too\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating ParseUser Security Policy in Java\nDESCRIPTION: This snippet illustrates the security policy of ParseUser objects. It shows that authenticated users can modify their own data, while attempts to modify user data from non-authenticated sources will throw exceptions.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/users.md#2025-04-22_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nParseUser user = ParseUser.logIn(\"my_username\", \"my_password\");\nuser.setUsername(\"my_new_username\"); // attempt to change username\nuser.saveInBackground(); // This succeeds, since the user was authenticated on the device\n\n// Get the user from a non-authenticated manner\nParseQuery<ParseUser> query = ParseUser.getQuery();\nquery.getInBackground(user.getObjectId(), new GetCallback<ParseUser>() {\n  public void done(ParseUser object, ParseException e) {\n    object.setUsername(\"another_username\");\n\n    // This will throw an exception, since the ParseUser is not authenticated\n    object.saveInBackground();\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Initiating Password Reset in Parse iOS SDK\nDESCRIPTION: This code shows how to initiate a password reset flow for a user. It sends a password reset email to the specified address, which will contain a link allowing the user to set a new password.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/users.md#2025-04-22_snippet_13\n\nLANGUAGE: objective_c\nCODE:\n```\n[PFUser requestPasswordResetForEmailInBackground:@\"email@example.com\"];\n```\n\nLANGUAGE: swift\nCODE:\n```\nPFUser.requestPasswordResetForEmail(inBackground:\"email@example.com\")\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Async Methods with Promises in JavaScript\nDESCRIPTION: Example showing how to create custom asynchronous functions that return Promises, demonstrated with a promisified version of setTimeout.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/promises.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst delay = function(millis) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, millis);\n  });\n};\n\ndelay(100).then(function() {\n  // This ran after 100ms!\n});\n```\n\n----------------------------------------\n\nTITLE: Using Full Text Search in Parse with Swift\nDESCRIPTION: Swift implementation for full text search capabilities in Parse Server 2.5.0+ with the whereKey(_:matchesText:) method. This example searches for BarbecueSauce objects where the name contains 'bbq'.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/queries.md#2025-04-22_snippet_43\n\nLANGUAGE: swift\nCODE:\n```\nlet query = PFQuery(className: \"BarbecueSauce\")\nquery.whereKey(\"name\", matchesText: \"bbq\")\n```\n\n----------------------------------------\n\nTITLE: Selecting Returned Fields in Parse C#\nDESCRIPTION: Shows how to return only specified fields from a Parse query using Select and FindAsync in the C# SDK. Takes an array of field names, such as score and playerName.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_72\n\nLANGUAGE: cs\nCODE:\n```\nvar results = await ParseObject.GetQuery(\"GameScore\")\n     .Select(new[] { \"score\", \"playerName\" })\n     .FindAsync();\n// each of results will only have the selected fields available.\n```\n\n----------------------------------------\n\nTITLE: Creating Private Note with ParseACL in Java\nDESCRIPTION: Creates a private note object that can only be accessed by the current user using ParseACL security model.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/users.md#2025-04-22_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nParseObject privateNote = new ParseObject(\"Note\");\nprivateNote.put(\"content\", \"This note is private!\");\nprivateNote.setACL(new ParseACL(ParseUser.getCurrentUser()));\nprivateNote.saveInBackground();\n```\n\n----------------------------------------\n\nTITLE: Setting User-Specific Permissions in Parse iOS SDK\nDESCRIPTION: This code shows how to grant specific read and write permissions to multiple users for a single object. It creates a group message that can be read and modified by a list of specified users.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/users.md#2025-04-22_snippet_7\n\nLANGUAGE: objective_c\nCODE:\n```\nPFObject *groupMessage = [PFObject objectWithClassName:@\"Message\"];\nPFACL *groupACL = [PFACL ACL];\n\n// userList is an NSArray with the users we are sending this message to.\nfor (PFUser *user in userList) {\n    [groupACL setReadAccess:YES forUser:user];\n    [groupACL setWriteAccess:YES forUser:user];\n}\n\ngroupMessage.ACL = groupACL;\n[groupMessage saveInBackground];\n```\n\nLANGUAGE: swift\nCODE:\n```\nvar groupMessage = PFObject(className:\"Message\")\nvar groupACL = PFACL.ACL()\n\n// userList is an NSArray with the users we are sending this message to.\nfor (user : PFUser in userList) {\n    groupACL.setReadAccess(true, forUser:user)\n    groupACL.setWriteAccess(true, forUser:user)\n}\n\ngroupMessage.ACL = groupACL\ngroupMessage.saveInBackground()\n```\n\n----------------------------------------\n\nTITLE: Saving and Restoring ParseObject State with Parcelable - Android SDK Java\nDESCRIPTION: This snippet demonstrates storing and retrieving a ParseObject instance using Parcelable in an Android Activity. It uses the Bundle methods putParcelable and getParcelable to save and restore state during configuration changes. Dependencies include the Parse Android SDK, and the code should be used in activities that need to retain ParseObjects across recreations.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/objects.md#2025-04-22_snippet_20\n\nLANGUAGE: Java\nCODE:\n```\nprivate ParseObject object;\n\n@Override\nprotected void onSaveInstanceState(Bundle outState) {\n    super.onSaveInstanceState(outState);\n    outState.putParcelable(\"object\", object);\n}\n\n@Override\nprotected void onCreate(@Nullable Bundle savedInstanceState) {\n  if (savedInstanceState != null) {\n    object = (ParseObject) savedInstanceState.getParcelable(\"object\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Many-to-Many Relationships with ParseRelation (C#)\nDESCRIPTION: Shows how to use ParseRelation to handle many-to-many relationships, such as a user liking multiple posts. It covers adding and removing objects from the relation, and querying related objects with optional constraints.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/objects.md#2025-04-22_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nvar user = ParseUser.CurrentUser;\nvar relation = user.GetRelation<ParseObject>(\"likes\");\nrelation.Add(post);\nawait user.SaveAsync();\n```\n\nLANGUAGE: C#\nCODE:\n```\nrelation.Remove(post);\n```\n\nLANGUAGE: C#\nCODE:\n```\nIEnumerable<ParseObject> relatedObjects = await relation.Query.FindAsync();\n```\n\nLANGUAGE: C#\nCODE:\n```\nvar query = from post in relation.Query\n            where post.CreatedAt > DateTime.Now - TimeSpan.FromDays(10)\n                  // alternatively, add any other query constraints\n            select post;\nvar relatedObjects = await query.FindAsync();\n\n// or using LINQ\nvar query = relation.Query\n    .WhereGreaterThan(\"createdAt\", DateTime.Now - TimeSpan.FromDays(10));\n    // alternatively, add any other query constraints\nvar relatedObjects = await query.FindAsync();\n```\n\n----------------------------------------\n\nTITLE: Querying Locations Within Radius\nDESCRIPTION: Example of querying for objects within a specific radius using WhereWithinDistance, finding places within 5 miles of a user.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/geopoints.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\nParseGeoPoint userGeoPoint = ParseUser.CurrentUser.Get<ParseGeoPoint>(\"location\");\nParseQuery<ParseObject> query = ParseObject.GetQuery(\"PlaceObject\")\n    .WhereWithinDistance(\"location\", userGeoPoint, ParseGeoDistance.FromMiles(5));\nquery.FindAsync().ContinueWith(t =>\n{\n    IEnumerable<ParseObject> nearbyLocations = t.Result;\n    // nearbyLocations contains PlaceObjects within 5 miles of the user's location\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Array Values in Parse PHP\nDESCRIPTION: Shows how to query objects based on array field values, including exact matching and checking for multiple values.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/queries.md#2025-04-22_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n// Find objects where the array in arrayKey contains 2.\n$query->equalTo(\"arrayKey\", 2);\n```\n\nLANGUAGE: php\nCODE:\n```\n// Find objects where the array in arrayKey contains all of the elements 2, 3, and 4.\n$query->containsAll(\"arrayKey\", [2, 3, 4]);\n```\n\n----------------------------------------\n\nTITLE: Querying Local Datastore\nDESCRIPTION: Demonstrates how to query multiple objects from local datastore using Parse Query with specific criteria.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/local-datastore.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst GameScore = Parse.Object.extend(\"GameScore\");\nconst query = new Parse.Query(GameScore);\nquery.equalTo('playerName', 'Joe Bob');\nquery.fromLocalDatastore();\nconst results = await query.find();\n```\n\n----------------------------------------\n\nTITLE: Counting Parse Objects in C#\nDESCRIPTION: Shows how to use CountAsync to count the number of objects that match a query without retrieving the actual objects. This is useful for getting a count of objects efficiently.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/queries.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nvar query = from gameScore in ParseObject.GetQuery(\"GameScore\")\n            where gameScore[\"playerName\"] == \"Sean Plott\"\n            select gameScore;\nvar count = await query.CountAsync();\n\n// or using LINQ\n// First set up a callback.\nvar query = ParseObject.GetQuery(\"GameScore\")\n    .WhereEqualTo(\"playerName\", \"Sean Plott\");\nvar count = await query.CountAsync();\n```\n\n----------------------------------------\n\nTITLE: Creating Relational Data Between Parse Objects in iOS\nDESCRIPTION: Shows how to establish relationships between Parse objects by setting one object as a field value in another object, which automatically handles saving both objects.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/objects.md#2025-04-22_snippet_9\n\nLANGUAGE: objective_c\nCODE:\n```\n// Create the post\nPFObject *myPost = [PFObject objectWithClassName:@\"Post\"];\nmyPost[@\"title\"] = @\"I'm Hungry\";\nmyPost[@\"content\"] = @\"Where should we go for lunch?\";\n\n// Create the comment\nPFObject *myComment = [PFObject objectWithClassName:@\"Comment\"];\nmyComment[@\"content\"] = @\"Let's do Sushirrito.\";\n\n// Add a relation between the Post and Comment\nmyComment[@\"post\"] = myPost;\n\n// This will save both myPost and myComment\n[myComment saveInBackground];\n```\n\nLANGUAGE: swift\nCODE:\n```\n// Create the post\nlet myPost = PFObject(className:\"Post\")\nmyPost[\"title\"] = \"I'm Hungry\"\nmyPost[\"content\"] = \"Where should we go for lunch?\"\n\n// Create the comment\nlet myComment = PFObject(className:\"Comment\")\nmyComment[\"content\"] = \"Let's do Sushirrito.\"\n\n// Add a relation between the Post and Comment\nmyComment[\"post\"] = myPost\n\n// This will save both myPost and myComment\nmyComment.saveInBackground()\n```\n\n----------------------------------------\n\nTITLE: Setting Group Message Permissions with ParseACL\nDESCRIPTION: Creates a group message with specific read and write permissions for multiple users using ParseACL.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/users.md#2025-04-22_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nParseObject groupMessage = new ParseObject(\"Message\");\nParseACL groupACL = new ParseACL();\n\n// userList is an Iterable<ParseUser> with the users we are sending this message to.\nfor (ParseUser user : userList) {\n  groupACL.setReadAccess(user, true);\n  groupACL.setWriteAccess(user, true);\n}\n\ngroupMessage.setACL(groupACL);\ngroupMessage.saveInBackground();\n```\n\n----------------------------------------\n\nTITLE: Handling Global LiveQuery Error Event in JavaScript\nDESCRIPTION: Shows how to listen for the global 'error' event, which is emitted when a network error or LiveQuery server error occurs.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/live-queries.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nParse.LiveQuery.on('error', (error) => {\n  console.log(error);\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Parse Data Asynchronously with PFQuery in Objective-C\nDESCRIPTION: This snippet demonstrates how to use PFQuery to asynchronously find all GameScore objects where the playerName is a specified value, in Objective-C. The query is constrained via whereKey:equalTo:, and results are handled in a completion block passed to findObjectsInBackgroundWithBlock:. Outputs include the number of scores found and object IDs. Requires the Parse SDK for Objective-C. Input: none directly, but expects objects with a playerName field in Parse. Output: logs the result to the console.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/queries.md#2025-04-22_snippet_0\n\nLANGUAGE: objective_c\nCODE:\n```\nPFQuery *query = [PFQuery queryWithClassName:@\"GameScore\"];\n[query whereKey:@\"playerName\" equalTo:@\"Dan Stemkoski\"];\n[query findObjectsInBackgroundWithBlock:^(NSArray *objects, NSError *error) {\n  if (!error) {\n    // The find succeeded.\n    NSLog(@\"Successfully retrieved %d scores.\", objects.count);\n    // Do something with the found objects\n    for (PFObject *object in objects) {\n        NSLog(@\"%@\", object.objectId);\n    }\n  } else {\n    // Log details of the failure\n    NSLog(@\"Error: %@ %@\", error, [error userInfo]);\n  }\n}];\n```\n\n----------------------------------------\n\nTITLE: Filtering by objectId using Dot Notation in Parse Android Queries\nDESCRIPTION: This snippet demonstrates how to filter rows based on objectId values from pointers in a second table using dot notation in Parse queries.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/queries.md#2025-04-22_snippet_14\n\nLANGUAGE: java\nCODE:\n```\nParseQuery<ParseObject> chartersOfTypeX = ParseQuery.getQuery(\"Charter\");\ncharterOfTypeX.equalTo('type', 'x');\n\nParseQuery<ParseObject> groupsWithoutCharterX = ParseQuery.getQuery(\"Group\");\ngroupsWithoutCharterX.doesNotMatchKeyInQuery(\"objectId\", \"belongsTo.objectId\", chartersOfTypeX);\ngroupsWithoutCharterX.findInBackground(new FindCallback<ParseObject>() {\n  void done(List<ParseObject> results, ParseException e) {\n   // results has the list of groups without charter x\n });\n```\n\n----------------------------------------\n\nTITLE: Batch Operations with Parse REST API (Bash)\nDESCRIPTION: This Bash snippet demonstrates how to perform batch operations using Parse REST API. It sends multiple commands in a single request to create multiple GameScore objects.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/objects.md#2025-04-22_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"requests\": [\n          {\n            \"method\": \"POST\",\n            \"path\": \"/parse/classes/GameScore\",\n            \"body\": {\n              \"score\": 1337,\n              \"playerName\": \"Sean Plott\"\n            }\n          },\n          {\n            \"method\": \"POST\",\n            \"path\": \"/parse/classes/GameScore\",\n            \"body\": {\n              \"score\": 1338,\n              \"playerName\": \"ZeroCool\"\n            }\n          }\n        ]\n      }' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/batch\n```\n\n----------------------------------------\n\nTITLE: Querying Books by Author in Java\nDESCRIPTION: This Java snippet demonstrates how to query for Book objects that contain a specific Author. It uses the whereEqualTo method to filter books and includes the authors in the query results.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/relations.md#2025-04-22_snippet_35\n\nLANGUAGE: java\nCODE:\n```\n// set up our query for the Book object\nParseQuery bookQuery = ParseQuery.getQuery(\"Book\");\n\n// configure any constraints on your query...\nbooKQuery.whereEqualTo(\"authors\", author);\n\n// tell the query to fetch all of the Author objects along with the Book\nbookQuery.include(\"authors\");\n\n// execute the query\nbookQuery.findInBackground(newFindCallback<ParseObject>() {\n    public void done(List<ParseObject> bookList, ParseException e) {\n\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a New ParseRole in Java\nDESCRIPTION: Creates a new Administrator role with public read access but no write access. This ensures the role can be viewed but not modified by regular users.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/roles.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n// By specifying no write privileges for the ACL, we can ensure the role cannot be altered.\nParseACL roleACL = new ParseACL();\nroleACL.setPublicReadAccess(true);\nParseRole role = new ParseRole(\"Administrator\", roleACL);\nrole.saveInBackground();\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Parse User via REST API in Python\nDESCRIPTION: Uses Python's http.client to retrieve a specific user by ID from the Parse Server. Makes a GET request with the required Application ID and REST API Key headers.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/users.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nconnection.connect()\nconnection.request('GET', '/parse/users/g7y9tkhB7O', '', {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Linking Facebook Account to ParseUser in C#\nDESCRIPTION: Demonstrates how to link an existing ParseUser with a Facebook account. This code checks if the user is already linked and performs the linking operation if not.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/users.md#2025-04-22_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\nif (!ParseFacebookUtils.IsLinked(user))\n{\n    Task linkTask = ParseFacebookUtils.LinkAsync(user, userId, accessToken, tokenExpiration);\n}\n```\n\n----------------------------------------\n\nTITLE: Key Matching Queries in PHP\nDESCRIPTION: This snippet explores `matchesKeyInQuery` and `doesNotMatchKeyInQuery`, which facilitate complex queries requiring key-value matches between two query results. These techniques are indispensable for cross-referencing data sets.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/queries.md#2025-04-22_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\n$teamQuery = new ParseQuery(\"Team\");\n$teamQuery->greaterThan(\"winPct\", 0.5);\n$userQuery = ParseUser::query();\n$userQuery->matchesKeyInQuery(\"hometown\", \"city\", $teamQuery);\n$results = $userQuery->find();\n// results has the array of users with a hometown team with a winning record\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$losingUserQuery = ParseUser::query();\n$losingUserQuery->doesNotMatchKeyInQuery(\"hometown\", \"city\", teamQuery);\n$results = $losingUserQuery->find();\n// results has the array of users with a hometown team with a losing record\n```\n\n----------------------------------------\n\nTITLE: Checking and Clearing Cached Results in Java\nDESCRIPTION: This Java snippet shows how to check for cached results and clear cached results for a ParseQuery using the Parse SDK. It allows for cache management by checking the existence of cache and removing cached results either for a specific query or all queries. Requires Parse SDK.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/queries.md#2025-04-22_snippet_25\n\nLANGUAGE: Java\nCODE:\n```\nboolean isInCache = query.hasCachedResult();\n```\n\nLANGUAGE: Java\nCODE:\n```\nquery.clearCachedResult();\n```\n\nLANGUAGE: Java\nCODE:\n```\nParseQuery.clearAllCachedResults();\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Cache Adapter for Parse Server\nDESCRIPTION: This snippet demonstrates how to set up and configure a Redis cache adapter in Parse Server. It shows how to initialize the adapter with Redis connection options and integrate it into the ParseServer configuration. The Redis options are passed directly to the redis.createClient method.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/cache-adapters.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar RedisCacheAdapter = require('parse-server').RedisCacheAdapter;\nvar redisOptions = {url: 'YOUR REDIS URL HERE'}\nvar redisCache = new RedisCacheAdapter(redisOptions);\n\nvar api = new ParseServer({\n  databaseURI: databaseUri || 'mongodb://localhost:27017/dev',\n  appId: process.env.APP_ID || 'APPLICATION_ID',\n  masterKey: process.env.MASTER_KEY || 'MASTER_KEY',\n  ...\n  cacheAdapter: redisCache,\n  ...\n});\n```\n\n----------------------------------------\n\nTITLE: Calling a Cloud Function using REST API\nDESCRIPTION: This curl command shows how to call the 'averageStars' Cloud Function using the REST API. It sends a POST request with the movie name as a parameter in the request body.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/cloudcode/cloud-code.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{ \"movie\": \"The Matrix\" }' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/functions/averageStars\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up File Records with afterDeleteFile\nDESCRIPTION: This example shows how to use the afterDeleteFile trigger to clean up FileObject records when a file is deleted. It queries for the FileObject with the matching filename and deletes it.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/cloudcode/cloud-code.md#2025-04-22_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nParse.Cloud.afterDeleteFile(async (request) => {\n  const { file } = request;\n  const query = new Parse.Query('FileObject');\n  query.equalTo('fileName', file.name());\n  const fileObject = await query.first({ useMasterKey: true });\n  await fileObject.destroy({ useMasterKey: true });\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Default ACLs with Role Access\nDESCRIPTION: Demonstrates how to configure default ACLs that include role-based permissions, useful for establishing baseline security across an application.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/roles.md#2025-04-22_snippet_3\n\nLANGUAGE: objective_c\nCODE:\n```\nPFACL *defaultACL = [PFACL ACL];\n[defaultACL setPublicReadAccess:YES];\n[defaultACL setWriteAccess:YES forRoleWithName:@\"Moderators\"];\n[PFACL setDefaultACL:defaultACL withAccessForCurrentUser:YES];\n```\n\nLANGUAGE: swift\nCODE:\n```\nvar defaultACL = PFACL()\ndefaultACL.hasPublicWriteAccess = true\ndefaultACL.setWriteAccess(true, forRoleWithName: \"Moderators\")\nPFACL.setDefault(defaultACL, withAccessForCurrentUser:true)\n```\n\n----------------------------------------\n\nTITLE: Periodic ParseConfig Fetching Helper in C#\nDESCRIPTION: This snippet defines a helper class that manages periodic fetching of ParseConfig. It ensures that the config is fetched at most once every 12 hours per app runtime, reducing unnecessary network requests.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/config.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Helper\n{\n  private static TimeSpan configRefreshInterval = TimeSpan.FromHours(12);\n  private static DateTime? lastFetchedDate;\n\n  // Fetches the config at most once every 12 hours per app runtime\n  public static void FetchConfigIfNeeded()\n  {\n    if (lastFetchedDate == null ||\n        DateTime.Now - lastFetchedDate > configRefreshInterval) {\n      lastFetchedDate = DateTime.Now;\n      ParseConfig.GetAsync();\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving PFObject from Parse Server in iOS SDK\nDESCRIPTION: Shows how to retrieve a PFObject from Parse Server using its objectId. The example uses a PFQuery to fetch the object asynchronously in both Objective-C and Swift.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/objects.md#2025-04-22_snippet_1\n\nLANGUAGE: objective-c\nCODE:\n```\nPFQuery *query = [PFQuery queryWithClassName:@\"GameScore\"];\n[query getObjectInBackgroundWithId:@\"xWMyZ4YEGZ\" block:^(PFObject *gameScore, NSError *error) {\n    if (!error) {\n        // Success!\n    } else {\n        // Failure!\n    }\n}];\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet query = PFQuery(className:\"GameScore\")\nquery.getObjectInBackground(withId: \"xWMyZEGZ\") { (gameScore, error) in\n    if error == nil {\n        // Success!\n    } else {\n        // Fail!\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Linking Parse Objects Using ObjectId\nDESCRIPTION: Shows how to create relationships between Parse objects using just the ObjectId reference instead of the full object.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/objects.md#2025-04-22_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nmyComment[\"parent\"] = ParseObject.CreateWithoutData(\"Post\", \"1zEcyElZ80\");\n```\n\n----------------------------------------\n\nTITLE: Installing Parse PHP SDK Using Composer\nDESCRIPTION: This snippet demonstrates how to set up the Parse PHP SDK in a project using Composer. Composer is a package manager for PHP that allows specifying dependencies in a composer.json file. Required dependency is 'parse/php-sdk' version 1.4.*. Once the composer.json file is created, running 'composer install' will download the SDK and configure the autoloader, which can then be included in your PHP script.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/installation.md#2025-04-22_snippet_0\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"require\": {\n        \"parse/php-sdk\" : \"1.4.*\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from a Query with LiveQueryClient in JavaScript\nDESCRIPTION: Shows how to unsubscribe from a specific subscription using a LiveQueryClient instance.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/live-queries.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nclient.unsubscribe(subscription); \n```\n\n----------------------------------------\n\nTITLE: Accessing ParseObject Values - Java\nDESCRIPTION: Demonstrates how to access values from a ParseObject using typed getters.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/objects.md#2025-04-22_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nint score = gameScore.getInt(\"score\");\nString playerName = gameScore.getString(\"playerName\");\nboolean cheatMode = gameScore.getBoolean(\"cheatMode\");\n```\n\n----------------------------------------\n\nTITLE: Basic Parse Query with Player Name Filter\nDESCRIPTION: Demonstrates how to query GameScore objects by playerName using both LINQ and method-based approaches.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/queries.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar query = from gameScore in ParseObject.GetQuery(\"GameScore\")\n            where gameScore.Get<string>(\"playerName\") == \"Dan Stemkoski\"\n            select gameScore;\nIEnumerable<ParseObject> results = await query.FindAsync();\n\n// or using LINQ\nvar query = ParseObject.GetQuery(\"GameScore\")\n    .WhereEqualTo(\"playerName\", \"Dan Stemkoski\");\nIEnumerable<ParseObject> results = await query.FindAsync();\n```\n\n----------------------------------------\n\nTITLE: Creating iOS Installation Object via Parse REST API - Python\nDESCRIPTION: Shows how to create an iOS installation object using Python's http.client to POST JSON data to the Parse Server installations endpoint. This script requires the standard library modules 'http.client' and 'json', and correct values for server URL, Application ID, and REST API Key. Key parameters include 'deviceType', the unique device token, and the subscription channels. The script logs the API's JSON-formatted response, which should include the created objectId and timestamp. Works only with Parse-compatible server endpoints.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/push-notifications.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('<span class=\\\"custom-parse-server-url\\\">YOUR.PARSE-SERVER.HERE</span>', 443)\nconnection.connect()\nconnection.request('POST', '<span class=\\\"custom-parse-server-mount\\\">/parse/</span>installations', json.dumps({\n    \"deviceType\": \"ios\",\n    \"deviceToken\": \"0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef\",\n    \"channels\": [\n        \"\"\n    ]\n}), {\n    \"X-Parse-Application-Id\": \"<span class=\\\"custom-parse-server-appid\\\">${APPLICATION_ID}</span>\",\n    \"X-Parse-REST-API-Key\": \"<span class=\\\"custom-parse-server-restapikey\\\">${REST_API_KEY}</span>\",\n    \"Content-Type\": \"application/json\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Implementing Restricted Delete with beforeDelete in Parse JavaScript SDK\nDESCRIPTION: This snippet shows how to use beforeDelete trigger to implement a restricted delete policy. It prevents an Album from being deleted if it still contains photos.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/cloudcode/cloud-code.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nParse.Cloud.beforeDelete(\"Album\", async (request) => {\n  const query = new Parse.Query(\"Photo\");\n  query.equalTo(\"album\", request.object);\n  const count = await query.count({useMasterKey:true})\n  if (count > 0) {\n    throw \"Can't delete album if it still has photos.\";\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Anonymous User Implementation in Parse iOS\nDESCRIPTION: Shows how to create and manage anonymous users, including checking anonymous status and automatic user creation.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/users.md#2025-04-22_snippet_3\n\nLANGUAGE: objective-c\nCODE:\n```\n[PFAnonymousUtils logInWithBlock:^(PFUser *user, NSError *error) {\n    if (error) {\n      NSLog(@\"Anonymous login failed.\");\n    } else {\n      NSLog(@\"Anonymous user logged in.\");\n    }\n}];\n\nif ([PFAnonymousUtils isLinkedWithUser:[PFUser currentUser]]) {\n    [self enableSignUpButton];\n} else {\n    [self enableLogOutButton];\n}\n\n[PFUser enableAutomaticUser];\n[[PFUser currentUser] incrementKey:@\"RunCount\"];\n[[PFUser currentUser] saveInBackground];\n```\n\nLANGUAGE: swift\nCODE:\n```\nPFAnonymousUtils.logInWithBlock {\n  (user: PFUser?, error: NSError?) -> Void in\n  if error != nil || user == nil {\n    print(\"Anonymous login failed.\")\n  } else {\n    print(\"Anonymous user logged in.\")\n  }\n}\n\nif PFAnonymousUtils.isLinkedWithUser(PFUser.currentUser()) {\n  self.enableSignUpButton()\n} else {\n  self.enableLogOutButton()\n}\n\nPFUser.enableAutomaticUser()\nPFUser.currentUser().incrementKey(\"RunCount\")\nPFUser.currentUser().saveInBackground()\n```\n\n----------------------------------------\n\nTITLE: Updating a Parse Object (GameScore) Field via GraphQL Mutation - GraphQL\nDESCRIPTION: Demonstrates how to use the updateGameScore GraphQL mutation to update existing object fields such as 'playerName'. The request must provide the object Relay ID and the fields to be modified in the input. The mutation returns the updated fields, useful for synchronizing application state (e.g., with Apollo Client).\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/objects.md#2025-04-22_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nmutation updateAGameScore {\n  updateGameScore(\n    input: {\n      id: \"R2FtZVNjb3JlOmM3TVpDZEhQY2w=\"\n      fields: { playerName: \"Charles Francois\" }\n    }\n  ) {\n    gameScore {\n      id\n      playerName\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Push Notifications in Active App in Parse iOS SDK\nDESCRIPTION: Shows how to handle push notifications when an app is already running. This example demonstrates extracting data from the notification payload, fetching associated objects, and updating the UI appropriately.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/push-notifications.md#2025-04-22_snippet_10\n\nLANGUAGE: objective-c\nCODE:\n```\n- (void)application:(UIApplication *)application\n  didReceiveRemoteNotification:(NSDictionary *)userInfo  fetchCompletionHandler:(void (^)(UIBackgroundFetchResult))handler {\n  // Create empty photo object\n  NSString *photoId = [userInfo objectForKey:@\"p\"];\n  PFObject *targetPhoto = [PFObject objectWithoutDataWithClassName:@\"Photo\"   objectId:photoId];\n\n  // Fetch photo object\n  [targetPhoto fetchIfNeededInBackgroundWithBlock:^(PFObject *object, NSError *error) {\n    // Show photo view controller\n    if (error) {\n      handler(UIBackgroundFetchResultFailed);\n    } else if ([PFUser currentUser]) {\n      PhotoVC *viewController = [[PhotoVC alloc] initWithPhoto:object];\n      [self.navController pushViewController:viewController animated:YES];\n      handler(UIBackgroundFetchResultNewData);\n    } else {\n      handler(UIBackgroundFetchResultNoData);\n    }\n  }];\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\nfunc application(application: UIApplication,  didReceiveRemoteNotification userInfo: [NSObject : AnyObject],  fetchCompletionHandler completionHandler: (UIBackgroundFetchResult) -> Void) {\n  if let photoId: String = userInfo[\"p\"] as? String {\n    let targetPhoto = PFObject(withoutDataWithClassName: \"Photo\", objectId: photoId)\n    targetPhoto.fetchIfNeededInBackgroundWithBlock { (object: PFObject?, error: NSError?) -> Void in\n      // Show photo view controller\n      if error != nil {\n        completionHandler(UIBackgroundFetchResult.Failed)\n      } else if PFUser.currentUser() != nil {\n        let viewController = PhotoVC(withPhoto: object)\n        self.navController.pushViewController(viewController, animated: true)\n        completionHandler(UIBackgroundFetchResult.NewData)\n      } else {\n        completionHandler(UIBackgroundFetchResult.NoData)\n      }\n    }\n  }\n  handler(UIBackgroundFetchResult.NoData)\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Books by Author in PHP\nDESCRIPTION: This PHP snippet demonstrates how to query for Book objects that contain a specific Author. It uses the equalTo method to filter books and includes the authors in the query results.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/relations.md#2025-04-22_snippet_37\n\nLANGUAGE: php\nCODE:\n```\n// set up our query for the Book object\n$bookQuery = new ParseQuery(\"Book\");\n\n// configure any constraints on your query...\n$bookQuery->equalTo(\"authors\", $author);\n\n// tell the query to fetch all of the Author objects along with the Book\n$bookQuery->includeKey(\"authors\");\n\n// execute the query\n$books = $bookQuery->find();\n```\n\n----------------------------------------\n\nTITLE: Creating Role Hierarchy in Java\nDESCRIPTION: Establishes a parent-child relationship between roles by adding the Administrators role as a child of the Moderators role. This ensures administrators inherit all moderator permissions.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/roles.md#2025-04-22_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nParseRole administrators = /* Your \"Administrators\" role */;\nParseRole moderators = /* Your \"Moderators\" role */;\nmoderators.getRoles().add(administrators);\nmoderators.saveInBackground();\n```\n\n----------------------------------------\n\nTITLE: Adding Users and Roles to a ParseRole in Java\nDESCRIPTION: Demonstrates how to add users and child roles to a newly created ParseRole. This establishes the inheritance relationships for permissions.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/roles.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nParseRole role = new ParseRole(roleName, roleACL);\nfor (ParseUser user : usersToAddToRole) {\n  role.getUsers().add(user)\n}\nfor (ParseRole childRole : rolesToAddToRole) {\n  role.getRoles().add(childRole);\n}\nrole.saveInBackground();\n```\n\n----------------------------------------\n\nTITLE: Logging Out a User with ParseUser in Java\nDESCRIPTION: This code shows how to log out the current user, clearing the user's session. After logging out, getCurrentUser will return null.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/users.md#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nParseUser.logOut();\nParseUser currentUser = ParseUser.getCurrentUser(); // this will now be null\n```\n\n----------------------------------------\n\nTITLE: Creating Role with Relations in Parse Server\nDESCRIPTION: Creates a role with relationships to existing users and other roles. Shows how to add users and child roles during role creation using the AddRelation operation.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/roles.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"name\": \"Moderators\",\n        \"ACL\": {\n          \"*\": {\n            \"read\": true\n          }\n        },\n        \"roles\": {\n          \"__op\": \"AddRelation\",\n          \"objects\": [\n            {\n              \"__type\": \"Pointer\",\n              \"className\": \"_Role\",\n              \"objectId\": \"Ed1nuqPvc\"\n            }\n          ]\n        },\n        \"users\": {\n          \"__op\": \"AddRelation\",\n          \"objects\": [\n            {\n              \"__type\": \"Pointer\",\n              \"className\": \"_User\",\n              \"objectId\": \"8TOXdXf3tz\"\n            }\n          ]\n        }\n      }' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/roles\n```\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nconnection.connect()\nconnection.request('POST', '/parse/roles', json.dumps({\n    \"name\": \"Moderators\",\n    \"ACL\": {\n        \"*\": {\n            \"read\": True\n        }\n    },\n    \"roles\": {\n        \"__op\": \"AddRelation\",\n        \"objects\": [\n            {\n                \"__type\": \"Pointer\",\n                \"className\": \"_Role\",\n                \"objectId\": \"Ed1nuqPvc\"\n            }\n        ]\n    },\n    \"users\": {\n        \"__op\": \"AddRelation\",\n        \"objects\": [\n            {\n                \"__type\": \"Pointer\",\n                \"className\": \"_User\",\n                \"objectId\": \"8TOXdXf3tz\"\n            }\n        ]\n    }\n}), {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\",\n    \"Content-Type\": \"application/json\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Using Comparison Operators in PFQuery and NSPredicate in Swift\nDESCRIPTION: Presents how to restrict results with less than, less than or equal, greater than, or greater than or equal conditions using either PFQuery functions or NSPredicate-based queries in Swift. Needs Parse SDK and fields/values as parameters.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/queries.md#2025-04-22_snippet_21\n\nLANGUAGE: swift\nCODE:\n```\n// Restricts to wins < 50\nquery.whereKey(\"wins\", lessThan: 50)\n// Or with NSPredicate\nlet predicate = NSPredicate(format: \"wins < 50\")\nlet query = PFQuery(className: \"GameScore\", predicate: predicate)\n\n// Restricts to wins <= 50\nquery.whereKey(\"wins\", lessThanOrEqualTo: 50)\n// Or with NSPredicate\nlet predicate = NSPredicate(format: \"wins <= 50\")\nlet query = PFQuery(className: \"GameScore\", predicate: predicate)\n\n// Restricts to wins > 50\nquery.whereKey(\"wins\", greaterThan: 50)\n// Or with NSPredicate\nlet predicate = NSPredicate(format: \"wins > 50\")\nlet query = PFQuery(className: \"GameScore\", predicate: predicate)\n\n// Restricts to wins >= 50\nquery.whereKey(\"wins\", greaterThanOrEqualTo: 50)\n// Or with NSPredicate\nlet predicate = NSPredicate(format: \"wins >= 50\")\nlet query = PFQuery(className: \"GameScore\", predicate: predicate)\n```\n\n----------------------------------------\n\nTITLE: Querying with $in Operator - Parse Server REST API\nDESCRIPTION: Demonstrates querying Parse Server using the $in operator to find scores matching specific values in an array.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/queries.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -G \\\n  --data-urlencode 'where={\"score\":{\"$in\":[1,3,5,7,9]}}' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/classes/GameScore\n```\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\nimport urllib.parse\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nparams = urllib.parse.urlencode({\"where\": json.dumps({\n    \"score\": {\n        \"$in\": [1,3,5,7,9]\n    }\n})})\nconnection.connect()\nconnection.request('GET', '/parse/classes/GameScore?%s' % params, '', {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Working with Parse Data Types in PHP\nDESCRIPTION: Example showing how to work with various data types supported by Parse including strings, numbers, dates, arrays, objects, and geo points.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/objects.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$number = 42;\n$string = \"the number is \" . $number;\n$date = new DateTime();\n$array = [$string, $number];\n$object = [\"number\" => $number, \"string\" => $string];\n$geoPoint = new ParseGeoPoint(37.75, -122.68); // san fran\n\n$bigObject = new ParseObject(\"BigObject\");\n$bigObject->set(\"myNumber\", $number);\n$bigObject->set(\"myString\", $string);\n$bigObject->set(\"myDate\", $date);\n$bigObject->setArray(\"myArray\", $array);\n$bigObject->setAssociativeArray(\"myObject\", $object);\n$bigObject->set(\"myGeoPoint\", $geoPoint);\n$bigObject->set(\"anyKey\", null); // this value can only be saved to an existing key\n$bigObject->save();\n```\n\n----------------------------------------\n\nTITLE: Saving ParseObject Example - Java\nDESCRIPTION: Demonstrates how to create and save a new ParseObject to Parse Server using the saveInBackground method.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/objects.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nParseObject gameScore = new ParseObject(\"GameScore\");\ngameScore.put(\"score\", 1337);\ngameScore.put(\"playerName\", \"Sean Plott\");\ngameScore.put(\"cheatMode\", false);\ngameScore.saveInBackground();\n```\n\n----------------------------------------\n\nTITLE: Creating New Role with ACL in Parse\nDESCRIPTION: Creates a new PFRole with public read access but no write access to ensure the role cannot be altered. Demonstrates basic role creation with security settings.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/roles.md#2025-04-22_snippet_0\n\nLANGUAGE: objective_c\nCODE:\n```\nPFACL *roleACL = [PFACL ACL];\n[roleACL setPublicReadAccess:YES];\nPFRole *role = [PFRole roleWithName:@\"Administrator\" acl:roleACL];\n[role saveInBackground];\n```\n\nLANGUAGE: swift\nCODE:\n```\nvar roleACL = PFACL()\nroleACL.setPublicReadAccess(true)\nvar role = PFRole.roleWithName(\"Administrator\", acl:roleACL)\nrole.saveInBackground()\n```\n\n----------------------------------------\n\nTITLE: Adding Fields and Indexes to a Schema in Parse Server\nDESCRIPTION: This code shows how to add a new field (population) and an index (population_index) to an existing schema class called \"City\" using Parse Server's REST API. It requires application ID and master key authentication.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/schemas.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-Master-Key: ${MASTER_KEY}\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '\n    {\n      \"className\": \"City\",\n      \"fields\": {\n        \"population\": {\n          \"type\": \"Number\"\n        }\n      },\n      \"indexes\": {\n        \"population_index\": {\n          \"population\": 1\n        }\n      }\n    }' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/schemas/City\n```\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nconnection.connect()\nconnection.request('PUT', '/parse/schemas/City', json.dumps({\n    \"className\": \"City\",\n    \"fields\": {\n        \"population\": {\n            \"type\": \"Number\"\n        },\n        \"indexes\": {\n            \"population_index\": {\n                \"population\": 1\n            }\n        }\n    }\n}), {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-Master-Key\": \"${MASTER_KEY}\",\n    \"Content-Type\": \"application/json\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Specifying PFQuery Constraints with NSPredicate in Swift\nDESCRIPTION: This Swift snippet illustrates creating a PFQuery using an NSPredicate to set constraints when querying the Parse backend. Supports key comparisons and compound logic for advanced filtering. Requires Parse Swift SDK and Foundation. Input: NSPredicate string and target class. Output: PFQuery instance set up with predicate constraints. Does not execute the query.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/queries.md#2025-04-22_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nlet predicate = NSPredicate(format: \"playerName = 'Dan Stemkosk'\")\nlet query = PFQuery(className: \"GameScore\", predicate: predicate)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Row and Next Page Views in ParseQueryAdapter for Java\nDESCRIPTION: This snippet demonstrates how to completely override the default row and next page view implementations in ParseQueryAdapter. It creates custom item views with colors defined by ParseObjects and a custom next page view.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/user-interface.md#2025-04-22_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n@Override \npublic View getItemView(ParseObject object, View v, ViewGroup parent) { \n  if (v == null) { \n    v = View.inflate(getContext(), R.layout.adapter_item, null); \n  } \n  v.setBackgroundColor(object.getInt(\"color\")); \n  return v; \n} \n \n@Override \npublic View getNextPageView(View v, ViewGroup parent) { \n  if (v == null) { \n    // R.layout.adapter_next_page contains an ImageView with a custom graphic \n    // and a TextView. \n    v = View.inflate(getContext(), R.layout.adapter_next_page, null); \n  } \n  TextView textView = (TextView) v.findViewById(R.id.nextPageTextViewId); \n  textView.setText(\"Loaded \" + getCount() + \" rows. Get more!\"); \n  return v; \n}\n```\n\n----------------------------------------\n\nTITLE: Facebook Login Integration with Parse in C#\nDESCRIPTION: Demonstrates how to implement Facebook login functionality using Parse, including permission handling.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/users.md#2025-04-22_snippet_11\n\nLANGUAGE: cs\nCODE:\n```\n// Make your browser control visible\ntry\n{\n    ParseUser user = await ParseFacebookUtils.LogInAsync(\n        browser, new[] { \"user_likes\", \"email\" });\n    // The user logged in with Facebook!\n}\ncatch\n{\n    // User cancelled the Facebook login or did not fully authorize.\n}\n// Hide your browser control\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Fields in Parse Queries with Swift\nDESCRIPTION: Swift implementation for restricting returned fields using selectKeys: with an array of key names. This example retrieves only the score and playerName fields from GameScore objects.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/queries.md#2025-04-22_snippet_33\n\nLANGUAGE: swift\nCODE:\n```\nlet query = PFQuery(className:\"GameScore\")\nquery.selectKeys([\"playerName\", \"score\"])\nquery.findObjectsInBackground { (objects: [PFObject]?, error: Error?) in\n    if let error = error {\n        // The query failed\n        print(error.localizedDescription)\n    } else {\n        // objects in results will only contain the playerName and score fields\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Push Notification Channel\nDESCRIPTION: Shows how to subscribe a device to a specific notification channel for targeted push notifications.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/push-notifications.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// When users indicate they are Giants fans, we subscribe them to that channel.\nParsePush.subscribeInBackground(\"Giants\");\n```\n\n----------------------------------------\n\nTITLE: Setting Role-Based Permissions Using ParseRole Object in Java\nDESCRIPTION: Applies write permissions to a wall post for a moderator role by using the ParseRole object directly. This grants all users in the moderators role the ability to modify the post.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/roles.md#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nParseRole moderators = /* Query for some ParseRole */;\nParseObject wallPost = new ParseObject(\"WallPost\");\nParseACL postACL = new ParseACL();\npostACL.setRoleWriteAccess(moderators);\nwallPost.setACL(postACL);\nwallPost.saveInBackground();\n```\n\n----------------------------------------\n\nTITLE: Linking User with Provider in Parse\nDESCRIPTION: Demonstrates how to link a Parse user with a third-party authentication provider using the linkWith() method. The code shows the basic authentication data structure required.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/users.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst myAuthData = {\n  id: '12345678'  // Required field. Used to uniquely identify the linked account.\n};\nconst user = new Parse.User();\nawait user.linkWith('providerName', { authData: myAuthData });\n```\n\n----------------------------------------\n\nTITLE: Retrieving Schema Structure in Parse Server JavaScript SDK\nDESCRIPTION: Example of the JSON structure returned when retrieving a schema, showing default fields, custom fields, class level permissions, and indexes. This structure represents the complete definition of a class in the Parse Server database.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/schema.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  className: 'MyClass',\n  fields: {\n    // Default fields\n    ACL: {type: 'ACL'},\n    createdAt: {type: 'Date'},\n    updatedAt: {type: 'Date'},\n    objectId: {type: 'String'},\n    // Custom fields\n    aNumber: {type: 'Number'},\n    aString: {type: 'String'},\n    aBool: {type: 'Boolean'},\n    aDate: {type: 'Date'},\n    aObject: {type: 'Object'},\n    aArray: {type: 'Array'},\n    aGeoPoint: {type: 'GeoPoint'},\n    aPolygon: {type: 'Polygon'},\n    aFile: {type: 'File'}\n  },\n  classLevelPermissions: {\n    find: {\n      '*': true\n    },\n    create: {\n      '*': true\n    },\n    get: {\n      '*': true\n    },\n    update: {\n      '*': true\n    },\n    addField: {\n      '*': true\n    },\n    delete: {\n      '*': true\n    }\n  },\n  indexes: {\n    indexName: { aString: 1 },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Parse Object Class Definition\nDESCRIPTION: Creates a custom Parse Object class with typed properties and clone functionality.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dart/objects.md#2025-04-22_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass DietPlan extends ParseObject implements ParseCloneable {\n\n  DietPlan() : super(_keyTableName);\n  DietPlan.clone(): this();\n\n  /// Mimic a clone due to Flutter not using reflection\n  @override clone(Map map) => DietPlan.clone()..fromJson(map);\n\n  static const String _keyTableName = 'Diet_Plans';\n  static const String keyName = 'Name';\n  \n  String get name => get<String>(keyName);\n  set name(String name) => set<String>(keyName, name);\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Leave Event in Parse LiveQuery\nDESCRIPTION: Implementation of the Leave event handler that triggers when a ParseObject's new value no longer matches the QueryBuilder criteria. Shows object property access patterns.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dart/queries.md#2025-04-22_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nsubscription.on(LiveQueryEvent.leave, (value) {\n    print('*** LEAVE ***: ${DateTime.now().toString()}\\n $value ');\n    print((value as ParseObject).objectId);\n    print((value as ParseObject).updatedAt);\n    print((value as ParseObject).createdAt);\n    print((value as ParseObject).get('objectId'));\n    print((value as ParseObject).get('updatedAt'));\n    print((value as ParseObject).get('createdAt'));\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Parse Query with WhereEqualTo\nDESCRIPTION: Demonstrates how to create a basic query to retrieve GameScore objects with a specific player name\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/queries.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar query = ParseObject.GetQuery(\"GameScore\")\n    .WhereEqualTo(\"playerName\", \"Dan Stemkoski\");\nquery.FindAsync().ContinueWith(t =>\n{\n    IEnumerable<ParseObject> results = t.Result;\n});\n```\n\n----------------------------------------\n\nTITLE: Updating ParseObjects in C#\nDESCRIPTION: Demonstrates creating and updating a ParseObject with new data, including list operations and counter increments.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/objects.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar gameScore = new ParseObject(\"GameScore\")\n{\n    { \"score\", 1337 },\n    { \"playerName\", \"Sean Plott\" },\n    { \"cheatMode\", false },\n    { \"skills\", new List<string> { \"pwnage\", \"flying\" } },\n};\nawait gameScore.SaveAsync();\n\ngameScore[\"cheatMode\"] = true;\ngameScore[\"score\"] = 1338;\nawait gameScore.SaveAsync();\n```\n\nLANGUAGE: csharp\nCODE:\n```\ngameScore.Increment(\"score\");\nawait gameScore.SaveAsync();\n```\n\nLANGUAGE: csharp\nCODE:\n```\ngameScore.AddRangeUniqueToList(\"skills\", new[] { \"flying\", \"kungfu\" });\nawait gameScore.SaveAsync();\n```\n\n----------------------------------------\n\nTITLE: Handling Parse SDK and Network Errors in User Signup\nDESCRIPTION: This code demonstrates how to handle both SDK logic errors and Parse Cloud network errors during user signup. It uses try-catch for SDK errors and checks task faults for network errors.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/handling-errors.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\ntry\n{\n    user.SignUpAsync().ContinueWith(t => {\n        if (t.IsFaulted) {\n            // Errors from Parse Cloud and network interactions\n            using (IEnumerator<System.Exception> enumerator = t.Exception.InnerExceptions.GetEnumerator()) {\n                if (enumerator.MoveNext()) {\n                    ParseException error = (ParseException) enumerator.Current;\n                    // error.Message will contain an error message\n                    // error.Code will return \"OtherCause\"\n                }\n            }\n        }\n    });\n}\ncatch (InvalidOperationException e)\n{\n    // Error from the SDK logic checks\n    // e.Message will contain the specific error\n    // ex: \"Cannot sign up user with an empty name.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Logging In a User with Parse REST API\nDESCRIPTION: This snippet demonstrates how to log in an existing user using their username and password. It sends a POST request to the login endpoint with the user's credentials.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/users.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -H \"X-Parse-Revocable-Session: 1\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"username\":\"cooldude6\",\"password\":\"p_n7!-e8\"}' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/login\n```\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nconnection.connect()\nconnection.request('POST', '/parse/login', json.dumps({\n    \"username\": \"cooldude6\",\n    \"password\": \"p_n7!-e8\"\n}), {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\",\n    \"X-Parse-Revocable-Session\": \"1\",\n    \"Content-Type\": \"application/json\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Complex Data Types in C#\nDESCRIPTION: Example showing how to store various data types including numbers, strings, dates, lists, and dictionaries in a ParseObject.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/objects.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nint number = 42;\nstring str = \"the number is \" + number;\nDateTime date = DateTime.Now;\nIList<object> list = new List<object> { str, number };\nIDictionary<string, object> dictionary = new Dictionary<string, object>\n{\n    { \"number\", number },\n    { \"string\", str }\n};\n\nvar bigObject = new ParseObject(\"BigObject\");\nbigObject[\"myNumber\"] = number;\nbigObject[\"myString\"] = str;\nbigObject[\"myDate\"] = date;\nbigObject[\"myList\"] = list;\nbigObject[\"myDictionary\"] = dictionary;\nawait bigObject.SaveAsync();\n```\n\n----------------------------------------\n\nTITLE: Rotating File Encryption Keys in Parse Server using JavaScript\nDESCRIPTION: This JavaScript example illustrates how to rotate encryption keys for files in Parse Server. It is recommended to perform this on a development server. The process attempts to update all files to use the new key.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/file-adapters.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n//You probably want to back up your unencrypted files before doing this.\n//This can take awhile depending on how many files and how large they are. It will attempt to rotate the key of all files in your filesSubDirectory\nconst {rotated, notRotated} =  await api.filesAdapter.rotateEncryptionKey();\nconsole.log('Files rotated to newKey: ' + rotated);\nconsole.log('Files that couldn't be rotated to newKey: ' + notRotated);\n```\n\n----------------------------------------\n\nTITLE: Using Atomic Counters with Parse Objects in iOS\nDESCRIPTION: Demonstrates atomic incrementing of numeric fields in Parse objects, which helps avoid conflicts when multiple clients try to update the same counter value.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/objects.md#2025-04-22_snippet_6\n\nLANGUAGE: objective_c\nCODE:\n```\n[gameScore incrementKey:@\"score\"];\n[gameScore saveInBackgroundWithBlock:^(BOOL succeeded, NSError *error) {\n  if (succeeded) {\n    // The score key has been incremented\n  } else {\n    // There was a problem, check error.description\n  }\n}];\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet gameScore = PFObject(className:\"GameScore\")\ngameScore.incrementKey(\"score\")\ngameScore.saveInBackground {\n  (success: Bool, error: Error?) in\n  if (success) {\n    // The score key has been incremented\n  } else {\n    // There was a problem, check error.description\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple ParseObjects with Conditions in PHP\nDESCRIPTION: This code snippet illustrates how to create a `ParseQuery`, add conditions using `equalTo`, and retrieve an array of matching `ParseObject`s with the `find` method. Dependencies include the PHP Parse SDK. It prints the Object ID and player name of each result. The query searches for scores associated with the player name 'Dan Stemkoski'.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/queries.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$query = new ParseQuery(\"GameScore\");\n$query->equalTo(\"playerName\", \"Dan Stemkoski\");\n$results = $query->find();\necho \"Successfully retrieved \" . count($results) . \" scores.\";\n// Do something with the returned ParseObject values\nfor ($i = 0; $i < count($results); $i++) {\n  $object = $results[$i];\n  echo $object->getObjectId() . ' - ' . $object->get('playerName');\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Relations in Objective-C and Swift\nDESCRIPTION: Demonstrates how to query User objects with related Weapon objects using includeKey in both Objective-C and Swift. Shows how to fetch related objects together in a single query.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/relations.md#2025-04-22_snippet_6\n\nLANGUAGE: objective_c\nCODE:\n```\n// set up our query for a User object\nPFQuery *userQuery = [PFUser query];\n\n// configure any constraints on your query...\n// for example, you may want users who are also playing with or against you\n\n// tell the query to fetch all of the Weapon objects along with the user\n// get the \"many\" at the same time that you're getting the \"one\"\n[userQuery includeKey:@\"weaponsList\"];\n\n// execute the query\n[userQuery findObjectsInBackgroundWithBlock:^(NSArray *objects, NSError *error) {\n    // objects contains all of the User objects, and their associated Weapon objects, too\n}];\n```\n\nLANGUAGE: swift\nCODE:\n```\n// set up our query for a User object\nlet userQuery = PFUser.query();\n\n// configure any constraints on your query...\n// for example, you may want users who are also playing with or against you\n\n// tell the query to fetch all of the Weapon objects along with the user\n// get the \"many\" at the same time that you're getting the \"one\"\nuserQuery?.includeKey(\"weaponsList\");\n\n// execute the query\nuserQuery?.findObjectsInBackgroundWithBlock {\n    (objects: [AnyObject]?, error: NSError?) -> Void in\n    // objects contains all of the User objects, and their associated Weapon objects, too\n}\n```\n\n----------------------------------------\n\nTITLE: Using beforeFind with Predefined Classes\nDESCRIPTION: This example demonstrates how to use the beforeFind trigger with predefined classes like Parse.User. Instead of passing a string as the first argument, you pass the class itself.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/cloudcode/cloud-code.md#2025-04-22_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nParse.Cloud.beforeFind(Parse.User, async (request) => {\n    // code here\n})\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Fields in Parse Queries with Objective-C\nDESCRIPTION: Demonstrates how to restrict returned fields using selectKeys: with an NSArray of keys. This example retrieves only the score and playerName fields from GameScore objects, optimizing data transfer.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/queries.md#2025-04-22_snippet_32\n\nLANGUAGE: objective-c\nCODE:\n```\nPFQuery *query = [PFQuery queryWithClassName:@\"GameScore\"];\n[query selectKeys:@[@\"playerName\", @\"score\"]];\n[query findObjectsInBackgroundWithBlock:^(NSArray *results, NSError *error) {\n    // objects in results will only contain the playerName and score fields\n}];\n```\n\n----------------------------------------\n\nTITLE: Parse Query with List Operations\nDESCRIPTION: Shows how to query objects where a list field contains specific values.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/queries.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n// Find objects where the list in listKey contains 2.\nvar query = from obj in ParseObject.GetQuery(\"MyClass\")\n            where obj.Get<IList<int>>(\"listKey\").Contains(2)\n            select obj;\n\n// or using LINQ\n// Find objects where the list in listKey contains 2.\nvar query = ParseObject.GetQuery(\"MyClass\")\n    .WhereEqualTo(\"listKey\", 2);\n```\n\n----------------------------------------\n\nTITLE: Querying ParseRelation Objects\nDESCRIPTION: Examples of querying related objects through ParseRelation, including applying additional constraints to the query.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/objects.md#2025-04-22_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nvar query = relation.Query\n    .WhereGreaterThan(\"createdAt\", DateTime.Now - TimeSpan.FromDays(10));\n    // alternatively, add any other query constraints\nquery.FindAsync().ContinueWith(t =>\n{\n    IEnumerable<ParseObject> relatedObjects = t.Result;\n});\n```\n\n----------------------------------------\n\nTITLE: Counting Objects in Parse PHP\nDESCRIPTION: Shows how to count objects matching a query without retrieving the actual objects.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/queries.md#2025-04-22_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$query = new ParseQuery(\"GameScore\");\n$query->equalTo(\"playerName\", \"Sean Plott\");\n$count = $query->count();\n// The count request succeeded. Show the count\necho \"Sean has played \" . $count . \" games\";\n```\n\n----------------------------------------\n\nTITLE: Sending Push Notifications to Channels using Parse Server REST API\nDESCRIPTION: Demonstrates how to send push notifications to specific channels ('Giants' and 'Mets') using the Parse Server REST API. The code sends game result notifications that will appear as notification center alerts on iOS and system tray notifications on Android.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/push-notifications.md#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"channels\": [\n          \"Giants\",\n          \"Mets\"\n        ],\n        \"data\": {\n          \"alert\": \"The Giants won against the Mets 2-3.\"\n        }\n      }' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/push\n```\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nconnection.connect()\nconnection.request('POST', '/parse/push', json.dumps({\n    \"channels\": [\n        \"Giants\",\n        \"Mets\"\n    ],\n    \"data\": {\n        \"alert\": \"The Giants won against the Mets 2-3.\"\n    }\n}), {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\",\n    \"Content-Type\": \"application/json\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Querying Array Values in Parse in JavaScript\nDESCRIPTION: Demonstrates how to find objects where an array field contains a specific value using the equalTo constraint in Parse.Query.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/queries.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n// Find objects where the array in arrayKey contains 2.\nquery.equalTo(\"arrayKey\", 2);\n```\n\n----------------------------------------\n\nTITLE: Associating ParseFile with ParseObject in PHP\nDESCRIPTION: Demonstrates how to link a saved `ParseFile` object to a `ParseObject`. A new `ParseObject` (`JobApplication`) is created, and the `$file` object is set as the value for the `applicantResumeFile` field before saving the `ParseObject`.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/files.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$jobApplication = new ParseObject(\"JobApplication\");\n$jobApplication->set(\"applicantName\", \"Joe Smith\");\n$jobApplication->set(\"applicantResumeFile\", $file);\n$jobApplication->save();\n```\n\n----------------------------------------\n\nTITLE: Setting Role-Based Access Control with Role Name\nDESCRIPTION: This snippet shows how to assign write permissions to a role for a specific object using just the role name. This approach is more convenient as it avoids having to query for the role object first.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/roles.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst wallPost = new Parse.Object(\"WallPost\");\nconst postACL = new Parse.ACL();\npostACL.setRoleWriteAccess(\"Moderators\", true);\nwallPost.setACL(postACL);\nwallPost.save();\n```\n\n----------------------------------------\n\nTITLE: Creating Trigger Webhook using Python in Parse Server\nDESCRIPTION: Python script to create a trigger webhook in Parse Server. It establishes an HTTPS connection and sends a POST request with the required headers and payload for triggers.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/hooks.md#2025-04-22_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nconnection.connect()\nconnection.request('POST', '/parse/hooks/triggers', json.dumps({\n    \"className\": \"Game\",\n    \"triggerName\": \"beforeSave\",\n    \"url\": \"https://api.example.com/Game/beforeSave\"\n}), {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-Master-Key\": \"${MASTER_KEY}\",\n    \"Content-Type\": \"application/json\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Configuring Secure Authentication with GitHub in Parse Server\nDESCRIPTION: Configures Parse Server to use GitHub for secure authentication, restricting the use of insecure methods. It sets up necessary credentials and disables insecure authentication options.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/third-party-auth.md#2025-04-22_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  appId: 'APP_ID',\n  masterKey: 'MASTER_KEY',\n  serverURL: 'SERVER_URL',\n  databaseURI: 'DATABASE_URI',\n  enableInsecureAuthAdapters: false,\n  auth: {\n    github: {\n      appIds: 'GITHUB_APP_ID',\n      clientId: 'GITHUB_CLIENT_ID',\n      clientSecret: 'GITHUB_CLIENT_SECRET',\n      enableInsecureAuth: false\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking Custom Events with Parse Analytics in C#\nDESCRIPTION: This example shows how to track custom events with additional metadata using Parse Analytics. It demonstrates tracking a 'search' event for an apartment listing feature, including dimensions like price range, source, and day type.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/analytics.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\nvar dimensions = new Dictionary<string, string> {\n  // Define ranges to bucket data points into meaningful segments\n  { \"priceRange\", \"1000-1500\" },\n  // Did the user filter the query?\n  { \"source\", \"craigslist\" },\n  // Do searches happen more often on weekdays or weekends?\n  { \"dayType\", \"weekday\" }\n};\n// Send the dimensions to Parse along with the 'search' event\nParseAnalytics.TrackEventAsync(\"search\", dimensions);\n```\n\n----------------------------------------\n\nTITLE: Finding Objects with Arrays Containing Multiple Values in Parse\nDESCRIPTION: This snippet demonstrates how to find objects where an array field contains all of several values using the whereContainsAll method.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/queries.md#2025-04-22_snippet_18\n\nLANGUAGE: java\nCODE:\n```\n// Find objects where the array in arrayKey contains all of the numbers 2, 3, and 4.\nArrayList<Integer> numbers = new ArrayList<Integer>();\nnumbers.add(2);\nnumbers.add(3);\nnumbers.add(4);\nquery.whereContainsAll(\"arrayKey\", numbers);\n```\n\n----------------------------------------\n\nTITLE: Delete Mutation Response Example for GameScore - JSONC\nDESCRIPTION: Presents a typical JSON response after deleting an object with deleteGameScore. Returns the deleted GameScore and its fields, enabling UI or application logic to confirm or announce successful deletions.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/objects.md#2025-04-22_snippet_8\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"data\": {\n    \"deleteGameScore\": {\n      \"gameScore\": {\n        \"id\": \"R2FtZVNjb3JlOmM3TVpDZEhQY2w=\",\n        \"playerName\": \"Charles Francois\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Targeting Push Notifications by Platform in Parse .NET SDK\nDESCRIPTION: This snippet demonstrates how to send different push notifications to users on different platforms (Android, iOS, Windows 8, and Windows Phone 8). It uses separate ParsePush objects with platform-specific queries and messages.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/push-notifications.md#2025-04-22_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\n// Notification for Android users\nvar androidPush = new ParsePush();\nandroidPush.Alert = \"Your suitcase has been filled with tiny robots!\";\nandroidPush.Query = from installation in ParseInstallation.Query\n                    where installation.Channels.Contains(\"suitcaseOwners\")\n                    where installation.DeviceType == \"android\"\n                    select installation;\nawait androidPush.SendAsync();\n\n// Notification for iOS users\nvar iosPush = new ParsePush();\niosPush.Alert = \"Your suitcase has been filled with tiny apples!\";\niosPush.Query = from installation in ParseInstallation.Query\n                where installation.Channels.Contains(\"suitcaseOwners\")\n                where installation.DeviceType == \"ios\"\n                select installation;\nawait iosPush.SendAsync();\n\n// Notification for Windows 8 users\nvar winPush = new ParsePush();\nwinPush.Alert = \"Your suitcase has been filled with tiny glass!\";\nwinPush.Query = from installation in ParseInstallation.Query\n                where installation.Channels.Contains(\"suitcaseOwners\")\n                where installation.DeviceType == \"winrt\"\n                select installation;\nawait winPush.SendAsync();\n\n// Notification for Windows Phone 8 users\nvar wpPush = new ParsePush();\nwpPush.Alert = \"Your suitcase is very hip; very metro.\";\nwpPush.Query = from installation in ParseInstallation.Query\n               where installation.Channels.Contains(\"suitcaseOwners\")\n               where installation.DeviceType == \"winphone\"\n               select installation;\nawait wpPush.SendAsync();\n```\n\n----------------------------------------\n\nTITLE: Establishing Role Hierarchy with PHP\nDESCRIPTION: This example demonstrates how to establish a parent-child relationship between roles in Parse using PHP. By adding one role to another's list of roles, you ensure hierarchical permission inheritance. Requires Parse PHP SDK and existing roles.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/roles.md#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$administrators = /* Your \"Administrators\" role */;\n$moderators = /* Your \"Moderators\" role */;\n$moderators->getRoles()->add($administrators);\n$moderators->save();\n?>\n```\n\n----------------------------------------\n\nTITLE: Defining a Cloud Job in Parse JavaScript SDK\nDESCRIPTION: This snippet demonstrates how to define a Cloud Job using Parse.Cloud.job(). It shows the structure of a job function, including access to parameters, headers, logging, and status message updates.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/cloudcode/cloud-code.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nParse.Cloud.job(\"myJob\", (request) =>  {\n  // params: passed in the job call\n  // headers: from the request that triggered the job\n  // log: the ParseServer logger passed in the request\n  // message: a function to update the status message of the job object\n  const { params, headers, log, message } = request;\n  message(\"I just started\");\n  return doSomethingVeryLong(request);\n});\n```\n\n----------------------------------------\n\nTITLE: Parse API Request Headers Configuration\nDESCRIPTION: Required headers for authenticating with the Parse GraphQL API, including the Application ID and optionally the Master Key for administrative operations.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/customisation.md#2025-04-22_snippet_13\n\nLANGUAGE: jsonc\nCODE:\n```\n// Header\n{\n  \"X-Parse-Application-Id\": \"APPLICATION_ID\",\n  \"X-Parse-Master-Key\": \"MASTER_KEY\" // (optional)\n}\n```\n\n----------------------------------------\n\nTITLE: Counting Objects with CountAsync in Parse Server using C#\nDESCRIPTION: This snippet demonstrates how to count objects that match a query without retrieving them using the CountAsync method. The example counts how many GameScore objects have a specific playerName.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/queries.md#2025-04-22_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\n// First set up a callback.\nvar query = ParseObject.GetQuery(\"GameScore\")\n    .WhereEqualTo(\"playerName\", \"Sean Plott\");\nquery.CountAsync().ContinueWith(t =>\n{\n    int count = t.Result;\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Arrays with containsAll in Parse in JavaScript\nDESCRIPTION: Shows how to find objects where an array field contains all of the specified values using the containsAll constraint in Parse.Query.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/queries.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// Find objects where the array in arrayKey contains all of the elements 2, 3, and 4.\nquery.containsAll(\"arrayKey\", [2, 3, 4]);\n```\n\n----------------------------------------\n\nTITLE: Setting Request Headers for Parse Server GraphQL - JSONC\nDESCRIPTION: Demonstrates how to include authentication headers (Application ID and optional Master Key) required for Parse Server GraphQL requests. These headers are necessary for all GraphQL API interactions to validate and authorize the client. The fields should be replaced with actual credentials relevant to the application.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/objects.md#2025-04-22_snippet_0\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"X-Parse-Application-Id\": \"APPLICATION_ID\",\n  \"X-Parse-Master-Key\": \"MASTER_KEY\" // (optional)\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Push Notifications with Combined Channel and Query Filtering\nDESCRIPTION: This code shows how to combine channel subscription targeting with additional query parameters. It targets users subscribed to the \"Giants\" channel who have also enabled score updates.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/push-notifications.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst query = new Parse.Query(Parse.Installation);\nquery.equalTo('channels', 'Giants'); // Set our channel\nquery.equalTo('scores', true);\n\nParse.Push.send({\n  where: query,\n  data: {\n    alert: \"Giants scored against the A's! It's now 2-2.\"\n  }\n})\n.then(function() {\n  // Push was successful\n}, function(error) {\n  // Handle error\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Parse Object with Various Data Types in C++\nDESCRIPTION: Demonstrates creating a Parse Object with different data types including numbers, strings, GeoPoints, dates, arrays, and nested objects in C++.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/arduino/objects.md#2025-04-22_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\nParseObjectCreate create;\ncreate.setClassName(\"TestObject\");\ncreate.add(\"number\", 42.0);\ncreate.add(\"foo\", \"bar\");\ncreate.addGeoPoint(\"location\", 40.0, -30.0);\ncreate.addJSONValue(\"dateField\", \"{ \\\"__type\\\": \\\"Date\\\", \\\"iso\\\": \\\"2022-01-01T12:23:45.678Z\\\" }\"); create.addJSONValue(\"arrayField\", \"[ 30, \\\"string\\\" ]\");\ncreate.addJSONValue(\"objectField\", \"{ \\\"number\\\": 30, \\\"string\\\": \\\"baz\\\" }\");\ncreate.addJSONValue(\"emptyField\", \"null\");\ncreate.send();\n```\n\n----------------------------------------\n\nTITLE: Managing Arrays in Parse Objects with Atomic Operations in iOS\nDESCRIPTION: Shows how to add unique items to an array field using atomic operations, which are useful for set-like behavior while avoiding duplicates in the array.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/objects.md#2025-04-22_snippet_7\n\nLANGUAGE: objective_c\nCODE:\n```\n[gameScore addUniqueObjectsFromArray:@[@\"flying\", @\"kungfu\"] forKey:@\"skills\"];\n[gameScore saveInBackground];\n```\n\nLANGUAGE: swift\nCODE:\n```\ngameScore.addUniqueObjects(from: [\"flying\", \"kungfu\"], forKey:\"skills\")\ngameScore.saveInBackground()\n```\n\n----------------------------------------\n\nTITLE: Tracking Push Notification Opens in Android\nDESCRIPTION: Implementation for tracking push notification opens and app launches using ParseAnalytics. This should be added to the Activity's onCreate method or BroadcastReceiver's onReceive method that handles the push open intent.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/push-notifications.md#2025-04-22_snippet_18\n\nLANGUAGE: java\nCODE:\n```\nParseAnalytics.trackAppOpened(getIntent());\n```\n\n----------------------------------------\n\nTITLE: Filtering LiveQuery Creation Events via Related Queries - JavaScript\nDESCRIPTION: Implements advanced filtering in afterLiveQueryEvent to only send creation events if a related object's child with foo equal to 'bart' exists. Utilizes relation queries, async/await, and event suppression. Requires Parse Server 4.4.0+ and is effective at reducing unnecessary network events if certain relational criteria aren't met. The input is a creation event and output is either continued event propagation or suppression.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/cloudcode/cloud-code.md#2025-04-22_snippet_44\n\nLANGUAGE: JavaScript\nCODE:\n```\n```javascript\n// Extend matchesQuery functionality to LiveQuery\nParse.Cloud.afterLiveQueryEvent('MyObject', async (request) => {\n  if (request.event != \"create\") {\n    return;\n  }\n  const query = request.object.relation('children').query();\n  query.equalTo('foo','bart');\n  const first = await query.first();\n  if (!first)  {\n    request.sendEvent = false;\n  }\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Saving Parse Objects Offline with saveEventually in iOS\nDESCRIPTION: Creates a GameScore object and saves it using saveEventually, which persists the operation until network connectivity is available and retries if the app is closed before completion.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/objects.md#2025-04-22_snippet_4\n\nLANGUAGE: objective_c\nCODE:\n```\n// Create the object.\nPFObject *gameScore = [PFObject objectWithClassName:@\"GameScore\"];\ngameScore[@\"score\"] = @1337;\ngameScore[@\"playerName\"] = @\"Sean Plott\";\ngameScore[@\"cheatMode\"] = @NO;\n[gameScore saveEventually];\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet gameScore = PFObject(className:\"GameScore\")\ngameScore[\"score\"] = 1337\ngameScore[\"playerName\"] = \"Sean Plott\"\ngameScore[\"cheatMode\"] = false\ngameScore.saveEventually()\n```\n\n----------------------------------------\n\nTITLE: Launching ParseLoginActivity from an Activity\nDESCRIPTION: This Java code shows how to launch the ParseLoginActivity from your own activity using ParseLoginBuilder and startActivityForResult. After completion, the caller activity receives either RESULT_OK or RESULT_CANCELLED.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/user-interface.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nParseLoginBuilder builder = new ParseLoginBuilder(MyActivity.this);\nstartActivityForResult(builder.build(), 0);\n```\n\n----------------------------------------\n\nTITLE: Using Cloud Code Context with Parse Server in JavaScript\nDESCRIPTION: Introduces passing a `context` dictionary to Cloud Code triggers for ephemeral operations that shouldn't be saved in the database. This example shows how to save an object with context and how to access it within `afterSave` triggers.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/objects.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst TeamMember = Parse.Object.extend(\"TeamMember\");\nconst teamMember = new TeamMember();\nteamMember.set(\"team\", \"A\");\n\nconst context = { notifyTeam: false };\nawait teamMember.save(null, { context: context });\n```\n\nLANGUAGE: javascript\nCODE:\n```\nParse.Cloud.afterSave(\"TeamMember\", async (req) => {\n  const notifyTeam = req.context.notifyTeam;\n  if (notifyTeam) {\n    // Notify team about new member.\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Parse SDK Response with Callback in C++\nDESCRIPTION: Shows how to set up a callback function to handle the response from a GET request. The callback processes the error status, HTTP status, and response body from the Parse API.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/embedded_c/requests.md#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nvoid mySaveCallback(ParseClient client, int error, int httpStatus, const char* httpResponseBody) {\n\tif (error == 0 && httpResponseBody != NULL) {\n\t\t// httpResponseBody holds the response to the request\n\t}\n}\n\nparseSendRequest(client, \"GET\", \"/parse/classes/TestObject/gsMHOY3MAx\", NULL, myCallback);\n```\n\n----------------------------------------\n\nTITLE: Using Progress Callback for File Upload in Parse SDK\nDESCRIPTION: This snippet demonstrates how to use the progress callback when uploading a file using the Parse SDK. The callback provides the current count and total size of the upload, allowing for progress tracking.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dart/files.md#2025-04-22_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nfile.upload(progressCallback: (int count, int total) => print(\"$count of $total\"));\n```\n\n----------------------------------------\n\nTITLE: Pinning Objects in Local Datastore\nDESCRIPTION: Demonstrates how to store a ParseObject in local datastore by pinning it, including setting object properties.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/local-datastore.md#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nParseObject gameScore = new ParseObject(\"GameScore\");\ngameScore.put(\"score\", 1337);\ngameScore.put(\"playerName\", \"Sean Plott\");\ngameScore.put(\"cheatMode\", false);\n\ngameScore.pinInBackground();\n```\n\n----------------------------------------\n\nTITLE: Combining Geo Query with Additional Sorting in Parse JavaScript SDK\nDESCRIPTION: Demonstrates how to combine a geo query with additional sorting criteria, setting the sorted parameter to false for better performance.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/geopoints.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst location = new Parse.GeoPoint(37.708813, -122.526398);\nconst distance = 5;\nconst sorted = false;\n\nconst query = new Parse.Query(PizzaPlaceObject);\nquery.withinKilometers(\"location\", location, distance, sorted);\nquery.descending(\"rating\");\n// Pizza places within 5km sorted by rating\nconst pizzaPlacesInSF = query.find();\n```\n\n----------------------------------------\n\nTITLE: Facebook Login Integration with Parse in Dart\nDESCRIPTION: Demonstrates how to integrate Facebook login with Parse using the flutter_facebook_login package.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dart/users.md#2025-04-22_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> goToFacebookLogin() async {\n    final FacebookLogin facebookLogin = FacebookLogin();\n    final FacebookLoginResult result = await facebookLogin.logInWithReadPermissions(['email']);\n\n    switch (result.status) {\n      case FacebookLoginStatus.loggedIn:\n        final ParseResponse response = await ParseUser.loginWith(\n            'facebook',\n            facebook(result.accessToken.token,\n                result.accessToken.userId,\n                result.accessToken.expires));\n\n        if (response.success) {\n          // User is logged in, test with ParseUser.currentUser()\n        }\n        break;\n      case FacebookLoginStatus.cancelledByUser:\n            // User canceled\n        break;\n      case FacebookLoginStatus.error:\n            // Error\n        break;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Parse.ACL with JavaScript\nDESCRIPTION: This code snippet demonstrates creating a private note object that is only readable and writable by the current user. It requires Parse JavaScript SDK with Parse.User for user authentication and Parse.ACL for permissions.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/users.md#2025-04-22_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst Note = Parse.Object.extend(\"Note\");\nconst privateNote = new Note();\nprivateNote.set(\"content\", \"This note is private!\");\nprivateNote.setACL(new Parse.ACL(Parse.User.current()));\nprivateNote.save();\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Parse Object in JavaScript\nDESCRIPTION: Demonstrates how to create a simple Parse Object with key-value pairs in JavaScript.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/arduino/objects.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntemperature: 175.0, leverDown: true\n```\n\n----------------------------------------\n\nTITLE: Creating Android (FCM) Installation Object via Parse REST API - Bash\nDESCRIPTION: Provides a Bash cURL command for registering an Android device for push notifications via Parse Server using FCM. The command specifies 'deviceType: android', 'pushType: gcm', and a FCM-provided registration token ('deviceToken'). This illustrates the REST API call for proper Android/FCM integration with Parse push. Requires Application ID, REST API Key, target server and proper Push/FCM setup.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/push-notifications.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n  -H \"X-Parse-Application-Id: <span class=\\\"custom-parse-server-appid\\\">${APPLICATION_ID}</span>\" \\\n  -H \"X-Parse-REST-API-Key: <span class=\\\"custom-parse-server-restapikey\\\">${REST_API_KEY}</span>\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"deviceType\": \"android\",\n        \"pushType\": \"gcm\",\n        \"deviceToken\": \"APA91bFMvbrGg4cp3KUV_7dhU1gmwE_...\",\n        \"channels\": [\n          \"\"\n        ]\n      }' \\\n  <span class=\\\"custom-parse-server-protocol\\\">https</span>://<span class=\\\"custom-parse-server-url\\\">YOUR.PARSE-SERVER.HERE</span><span class=\\\"custom-parse-server-mount\\\">/parse/</span>installations\n```\n\n----------------------------------------\n\nTITLE: Batch Update and Delete Operations with Parse REST API (Bash)\nDESCRIPTION: This Bash snippet demonstrates how to perform batch update and delete operations using Parse REST API. It sends multiple commands in a single request to update one object and delete another.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/objects.md#2025-04-22_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"requests\": [\n          {\n            \"method\": \"PUT\",\n            \"path\": \"/parse/classes/GameScore/Ed1nuqPvcm\",\n            \"body\": {\n              \"score\": 999999\n            }\n          },\n          {\n            \"method\": \"DELETE\",\n            \"path\": \"/parse/classes/GameScore/Cpl9lrueY5\"\n          }\n        ]\n      }' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/batch\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Methods in PFObject Subclasses\nDESCRIPTION: Example showing how to implement a custom method in a PFObject subclass that creates and returns a UIImageView displaying a file stored in Parse. The method demonstrates working with PFFileObject and PFImageView for asynchronous image loading.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/objects.md#2025-04-22_snippet_18\n\nLANGUAGE: objective_c\nCODE:\n```\n@dynamic iconFile;\n\n- (UIImageView *)iconView {\n  PFImageView *view = [[PFImageView alloc] initWithImage:kPlaceholderImage];\n  view.file = self.iconFile;\n  [view loadInBackground];\n  \n  return view;\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\n@NSManaged var iconFile: PFFileObject!\n\nfunc iconView() -> UIImageView {\n  let view = PFImageView(imageView: PlaceholderImage)\n  view.file = iconFile\n  view.loadInBackground()\n  \n  return view\n}\n```\n\n----------------------------------------\n\nTITLE: Handling LiveQueryClient Error Event in JavaScript\nDESCRIPTION: Shows how to listen for the 'error' event on a LiveQueryClient instance, which is emitted when a connection error occurs.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/live-queries.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nclient.on('error', (error) => {\n  console.log('connection error');\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Parse Installation in Application onCreate (Java)\nDESCRIPTION: This Java code snippet demonstrates how to initialize the Parse Installation object in a native Android application. It should be placed within the `onCreate` method of your custom `Application` class. Calling `ParseInstallation.getCurrentInstallation().saveInBackground()` registers the current device with the Parse Server, enabling it to receive push notifications.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/push-notifications-android.md#2025-04-22_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n// Native: Application.java\npublic void onCreate() {\n  // ...\n  ParseInstallation.getCurrentInstallation().saveInBackground();\n}\n```\n\n----------------------------------------\n\nTITLE: Saving ParseFile Asynchronously in C#\nDESCRIPTION: Shows how to save a ParseFile to Parse cloud storage using async/await pattern.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/files.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nTask saveTask = file.SaveAsync();\n```\n\n----------------------------------------\n\nTITLE: Using doesNotMatchKey Query in Parse SDK with Swift\nDESCRIPTION: Swift implementation of the whereKey:doesNotMatchKey:inQuery: method to find objects where a key doesn't match a value in another query's result set. This example finds users whose hometown teams have losing records.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/queries.md#2025-04-22_snippet_31\n\nLANGUAGE: swift\nCODE:\n```\nlet teamQuery = PFQuery(className:\"Team\")\nteamQuery.whereKey(\"winPct\", greaterThan:0.5)\nlet losingUserQuery = PFUser.query()\nlosingUserQuery?.whereKey(\"hometown\", doesNotMatchKey:\"city\", in: teamQuery)\nlosingUserQuery?.findObjectsInBackground(block: { (results: [PFObject]?, error: Error?) in\n    if let error = error {\n        // The query failed\n        print(error.localizedDescription)\n    } else {\n        // results will contain users with a hometown team with a losing records\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Parse Relations\nDESCRIPTION: Shows how to add a relation between Parse objects.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dart/queries.md#2025-04-22_snippet_19\n\nLANGUAGE: dart\nCODE:\n```\ndietPlan.addRelation('fruits', [ParseObject(\"Fruits\")..set(\"objectId\", \"XGadzYxnac\")]);\n```\n\n----------------------------------------\n\nTITLE: Validating LiveQuery Connections with beforeConnect\nDESCRIPTION: This example shows how to use the beforeConnect trigger to validate LiveQuery connections. It only allows logged-in users to connect to the LiveQuery server.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/cloudcode/cloud-code.md#2025-04-22_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nParse.Cloud.beforeConnect(request => {\n  if (!request.user) {\n    throw \"Please login before you attempt to connect.\"\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Role-Based Access Control with Parse.Role Object\nDESCRIPTION: This snippet demonstrates how to assign write permissions to a role for a specific object using the Parse.Role object. This approach requires querying for the role object first before applying it to an ACL.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/roles.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst moderators = /* Query for some Parse.Role */;\nconst wallPost = new Parse.Object(\"WallPost\");\nconst postACL = new Parse.ACL();\npostACL.setRoleWriteAccess(moderators, true);\nwallPost.setACL(postACL);\nwallPost.save();\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Parse Object with Read Preferences - Python Example - python\nDESCRIPTION: This Python script retrieves a Parse object from a specified MongoDB replica by appending 'readPreference' and 'includeReadPreference' parameters in the query string. It illustrates control over which replica set member is used for the main and included objects, ensuring flexible database read strategies for consistency and performance. Install http.client and urllib.parse as prerequisites.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/objects.md#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\\nimport json\\nimport urllib.parse\\n\\n\\nconnection = http.client.HTTPSConnection('<span class=\\\"custom-parse-server-url\\\">YOUR.PARSE-SERVER.HERE</span>', 443)\\nparams = urllib.parse.urlencode({\"include\": \"game\", \"readPreference\": \"SECONDARY\", \"includeReadPreference\": \"SECONDARY_PREFERRED\"})\\nconnection.connect()\\nconnection.request('GET', '<span class=\\\"custom-parse-server-mount\\\">/parse/</span>classes/GameScore/Ed1nuqPvcm?%s' % params, '', {\\n    \"X-Parse-Application-Id\": \"<span class=\\\"custom-parse-server-appid\\\">${APPLICATION_ID}</span>\",\\n    \"X-Parse-REST-API-Key\": \"<span class=\\\"custom-parse-server-restapikey\\\">${REST_API_KEY}</span>\"\\n})\\nresult = json.loads(connection.getresponse().read())\\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Using Comparison Operators in PFQuery and NSPredicate in Objective-C\nDESCRIPTION: Displays how to apply numeric comparisons in a Parse query such as less than, less than or equal, greater than, and greater than or equal to a value using both PFQuery and NSPredicate forms. Dependencies are Parse SDK and Foundation. Accepts key and comparison value, and restricts results according to the condition.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/queries.md#2025-04-22_snippet_20\n\nLANGUAGE: objective_c\nCODE:\n```\n// Restricts to wins < 50\n[query whereKey:@\"wins\" lessThan:@50];\n// Or with NSPredicate\nNSPredicate *predicate = [NSPredicate predicateWithFormat:@\"wins < 50\"];\nPFQuery *query = [PFQuery queryWithClassName:@\"GameScore\" predicate:predicate];\n\n// Restricts to wins <= 50\n[query whereKey:@\"wins\" lessThanOrEqualTo:@50];\n// Or with NSPredicate\npredicate = [NSPredicate predicateWithFormat:@\"wins <= 50\"];\nquery = [PFQuery queryWithClassName:@\"GameScore\" predicate:predicate]\n\n// Restricts to wins > 50\n[query whereKey:@\"wins\" greaterThan:@50];\n// Or with NSPredicate\npredicate = [NSPredicate predicateWithFormat:@\"wins > 50\"];\nquery = [PFQuery queryWithClassName:@\"GameScore\" predicate:predicate];\n\n// Restricts to wins >= 50\n[query whereKey:@\"wins\" greaterThanOrEqualTo:@50];\n// Or with NSPredicate\npredicate = [NSPredicate predicateWithFormat:@\"wins >= 50\"];\nquery = [PFQuery queryWithClassName:@\"GameScore\" predicate:predicate];\n```\n\n----------------------------------------\n\nTITLE: Fetching and Storing Remote File as Parse.File in Node.js\nDESCRIPTION: This server-side code fetches an image from a remote URL and stores it as a Parse.File. It uses the request-promise library to fetch the file and demonstrates how to handle binary data.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/files.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst request = require('request-promise');\nconst Parse = require('parse/node');\n\n....\n\nconst options = {\n  uri: 'https://bit.ly/2zD8fgm',\n  resolveWithFullResponse: true,\n  encoding: null, // <-- this is important for binary data like images.\n};\n\nrequest(options)\n  .then((response) => {\n    const data = Array.from(Buffer.from(response.body, 'binary'));\n    const contentType = response.headers['content-type'];\n    const file = new Parse.File('logo', data, contentType);\n    return file.save();\n  })\n  .then((file => console.log(file.url())))\n  .catch(console.error);\n```\n\n----------------------------------------\n\nTITLE: Managing Many-to-Many Relationships with ParseRelation\nDESCRIPTION: Shows how to create and manage many-to-many relationships using ParseRelation, including adding and removing objects from the relation.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/objects.md#2025-04-22_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nvar user = ParseUser.CurrentUser;\nvar relation = user.GetRelation<ParseObject>(\"likes\");\nrelation.Add(post);\nTask saveTask = user.SaveAsync();\n```\n\n----------------------------------------\n\nTITLE: Saving Installation Data in Parse Server\nDESCRIPTION: Shows how to store custom data on an Installation object for push notification preferences. The example demonstrates saving game-related preferences like scores, game results, and injury reports.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/push-notifications.md#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"scores\": true,\n        \"gameResults\": true,\n        \"injuryReports\": true\n      }' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/installations/mrmBZvsErB\n```\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nconnection.connect()\nconnection.request('PUT', '/parse/installations/mrmBZvsErB', json.dumps({\n    \"scores\": True,\n    \"gameResults\": True,\n    \"injuryReports\": True\n}), {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\",\n    \"Content-Type\": \"application/json\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Retrieving ParseObject - Java\nDESCRIPTION: Shows how to retrieve a ParseObject using ParseQuery with an objectId.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/objects.md#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nParseQuery<ParseObject> query = ParseQuery.getQuery(\"GameScore\");\nquery.getInBackground(\"xWMyZ4YEGZ\", new GetCallback<ParseObject>() {\n  public void done(ParseObject object, ParseException e) {\n    if (e == null) {\n      // object will be your game score\n    } else {\n      // something went wrong\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using PFRelation for Many-to-Many Relationships in Parse SDK (Objective-C and Swift)\nDESCRIPTION: Demonstrates how to use PFRelation to model many-to-many relationships, such as a User liking many Posts. This approach scales better than using arrays of PFObjects.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/objects.md#2025-04-22_snippet_12\n\nLANGUAGE: objective-c\nCODE:\n```\nPFUser *user = [PFUser currentUser];\nPFRelation *relation = [user relationForKey:@\"likes\"];\n[relation addObject:post];\n[user saveInBackgroundWithBlock:^(BOOL succeeded, NSError * _Nullable error) {\n    if (succeeded) {\n        // The post has been added to the user's likes relation.\n    } else {\n        // There was a problem, check error.description\n    }\n}];\n```\n\nLANGUAGE: swift\nCODE:\n```\nguard let user = PFUser.current() else { return }\nlet relation = user.relation(forKey: \"likes\")\nrelation.add(post)\nuser.saveInBackground { (succeeded, error) in\n    if (succeeded) {\n        // The post has been added to the user's likes relation.\n    } else {\n        // There was a problem, check error.description\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Books with Included Authors in Java\nDESCRIPTION: This Java snippet demonstrates how to query Book objects and include their related Author objects. It uses the include method to fetch the associated authors along with each book in a single query.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/relations.md#2025-04-22_snippet_29\n\nLANGUAGE: java\nCODE:\n```\n// set up our query for the Book object\nParseQuery bookQuery = ParseQuery.getQuery(\"Book\");\n\n// configure any constraints on your query...\n// tell the query to fetch all of the Author objects along with the Book\nbookQuery.include(\"authors\");\n\n// execute the query\nbookQuery.findInBackground(newFindCallback<ParseObject>() {\n    public void done(List<ParseObject> bookList, ParseException e) {\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Sorting Query Results in Descending Order in Parse Server\nDESCRIPTION: This code shows how to use the 'order' parameter with a negative sign to sort query results in descending order. The example retrieves GameScore objects sorted by the 'score' field in descending order.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/queries.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -G \\\n  --data-urlencode 'order=-score' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/classes/GameScore\n```\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\nimport urllib.parse\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nparams = urllib.parse.urlencode({\"order\": \"-score\"})\nconnection.connect()\nconnection.request('GET', '/parse/classes/GameScore?%s' % params, '', {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Excluding Specific Fields in Parse.Query Results in JavaScript\nDESCRIPTION: Demonstrates how to exclude specific fields from Parse.Query results using the exclude method while retrieving all other fields.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/queries.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst GameScore = Parse.Object.extend(\"GameScore\");\nconst query = new Parse.Query(GameScore);\nquery.exclude(\"playerName\");\nquery.find().then(function(results) {\n  // Now each result will have all fields except `playerName`\n});\n```\n\n----------------------------------------\n\nTITLE: Parse Server API Path Reference - Objects API\nDESCRIPTION: REST API endpoints for performing CRUD operations on Parse objects, including creating, retrieving, updating, querying and deleting objects.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/quick-reference.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n/parse/classes/<className>            POST    Creating Objects\n/parse/classes/<className>/<objectId> GET     Retrieving Objects\n/parse/classes/<className>/<objectId> PUT     Updating Objects\n/parse/classes/<className>            GET     Queries\n/parse/classes/<className>/<objectId> DELETE  Deleting Objects\n```\n\n----------------------------------------\n\nTITLE: Requesting Password Reset in Parse SDK for C#\nDESCRIPTION: Demonstrates how to initiate a password reset for a user by their email address using Parse SDK. This method sends a password reset email to the specified address.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/users.md#2025-04-22_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nTask requestPasswordTask = ParseUser.RequestPasswordResetAsync(\"email@example.com\");\n```\n\n----------------------------------------\n\nTITLE: Batch Operations with Parse REST API (Python)\nDESCRIPTION: This Python snippet shows how to perform batch operations using Parse REST API. It sends multiple commands in a single request to create multiple GameScore objects.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/objects.md#2025-04-22_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nconnection.connect()\nconnection.request('POST', '/parse/batch', json.dumps({\n    \"requests\": [\n        {\n            \"method\": \"POST\",\n            \"path\": \"/parse/classes/GameScore\",\n            \"body\": {\n                \"score\": 1337,\n                \"playerName\": \"Sean Plott\"\n            }\n        },\n        {\n            \"method\": \"POST\",\n            \"path\": \"/parse/classes/GameScore\",\n            \"body\": {\n                \"score\": 1338,\n                \"playerName\": \"ZeroCool\"\n            }\n        }\n    ]\n}), {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\",\n    \"Content-Type\": \"application/json\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Creating Polygon Objects in Parse\nDESCRIPTION: Demonstrates how to create a PFPolygon object with an array of coordinates.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/geopoints.md#2025-04-22_snippet_3\n\nLANGUAGE: objective_c\nCODE:\n```\nNSArray *points = @[@[@0,@0],@[@0,@1],@[@1,@1],@[@1,@0]];\nPFPolygon *polygon = [PFPolygon polygonWithCoordinates:points];\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet points = [[0,0], [0,1], [1,1], [1,0]]\nlet polygon = PFPolygon(coordinates: points)\n```\n\n----------------------------------------\n\nTITLE: Creating Compound Queries with Or Method in Parse Server using C#\nDESCRIPTION: This snippet shows how to create compound queries using the Or method to find objects matching one of several conditions. The example searches for Player objects with either high wins or low wins.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/queries.md#2025-04-22_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nvar lotsOfWins = ParseObject.GetQuery(\"Player\")\n    .WhereGreaterThan(\"wins\", 150);\n\nvar fewWins = ParseObject.GetQuery(\"Player\")\n    .WhereLessThan(\"wins\", 5);\n\nParseQuery<ParseObject> query = lotsOfWins.Or(fewWins);\n// results contains players with lots of wins or only a few wins.\n```\n\n----------------------------------------\n\nTITLE: Creating User Post Associations\nDESCRIPTION: Shows how to create and query posts associated with Parse users.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/users.md#2025-04-22_snippet_15\n\nLANGUAGE: objective_c\nCODE:\n```\nPFUser *user = [PFUser currentUser];\n\n// Make a new post\nPFObject *post = [PFObject objectWithClassName:@\"Post\"];\npost[@\"title\"] = @\"My New Post\";\npost[@\"body\"] = @\"This is some great content.\";\npost[@\"user\"] = user;\n[post save];\n\n// Find all posts by the current user\nPFQuery *query = [PFQuery queryWithClassName:@\"Post\"];\n[query whereKey:@\"user\" equalTo:user];\nNSArray *usersPosts = [query findObjects];\n```\n\nLANGUAGE: swift\nCODE:\n```\nvar user = PFUser.currentUser()\n\n// Make a new post\nvar post = PFObject(className:\"Post\")\npost[\"title\"] = \"My New Post\"\npost[\"body\"] = \"This is some great content.\"\npost[\"user\"] = user\npost.save()\n```\n\n----------------------------------------\n\nTITLE: Associating Parse.File with Parse.Object in JavaScript\nDESCRIPTION: This snippet shows how to associate a Parse.File with a Parse.Object. It creates a new JobApplication object and sets the applicant's resume as a Parse.File.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/files.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst jobApplication = new Parse.Object(\"JobApplication\");\njobApplication.set(\"applicantName\", \"Joe Smith\");\njobApplication.set(\"applicantResumeFile\", parseFile);\njobApplication.save();\n```\n\n----------------------------------------\n\nTITLE: Using Parse Analytics for Error Tracking in JavaScript\nDESCRIPTION: This snippet shows how Parse.Analytics can be used to track errors in a lightweight manner. By recording the error code as a dimension, developers can analyze error rates and frequencies. Requires the Parse JavaScript SDK.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/analytics.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst codeString = '' + error.code;\nParse.Analytics.track('error', { code: codeString });\n```\n\n----------------------------------------\n\nTITLE: Accessing Properties in beforeFind Trigger\nDESCRIPTION: This example demonstrates the properties available in the request object of the beforeFind trigger. It shows how to access the query, user, trigger name, master flag, count flag, logger, and installationId.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/cloudcode/cloud-code.md#2025-04-22_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\n// Properties available\nParse.Cloud.beforeFind('MyObject', (req) => {\n  let query = req.query; // the Parse.Query\n  let user = req.user; // the user\n  let triggerName = req.triggerName; // beforeFind\n  let isMaster = req.master; // if the query is run with masterKey\n  let isCount = req.count; // if the query is a count operation (available on parse-server 2.4.0 or up)\n  let logger = req.log; // the logger\n  let installationId = req.installationId; // The installationId\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Comments by Post Pointer in Parse Server\nDESCRIPTION: This example demonstrates how to retrieve Comment objects that are related to a specific Post using a Pointer query in Parse Server. The query uses the __type parameter to specify a Pointer relation to a Post with a specific objectId.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/queries.md#2025-04-22_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -G \\\n  --data-urlencode 'where={\"post\":{\"__type\":\"Pointer\",\"className\":\"Post\",\"objectId\":\"8TOXdXf3tz\"}}' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/classes/Comment\n```\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\nimport urllib.parse\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nparams = urllib.parse.urlencode({\"where\": json.dumps({\n    \"post\": {\n        \"__type\": \"Pointer\",\n        \"className\": \"Post\",\n        \"objectId\": \"8TOXdXf3tz\"\n    }\n})})\nconnection.connect()\nconnection.request('GET', '/parse/classes/Comment?%s' % params, '', {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Basic ParseObject Usage vs Subclassing\nDESCRIPTION: Comparison between using basic ParseObject with dictionary-style access versus using a subclassed object with proper properties.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/objects.md#2025-04-22_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\n// Using dictionary-initialization syntax:\nvar shield = new ParseObject(\"Armor\")\n{\n  { \"displayName\", \"Wooden Shield\" },\n  { \"fireproof\", false },\n  { \"rupees\", 50 }\n};\n\n// And later:\nDebug.Log(shield.Get<string>(\"displayName\"));\nshield[\"fireproof\"] = true;\nshield[\"rupees\"] = 500;\n```\n\n----------------------------------------\n\nTITLE: Creating Parse.File with Byte Array in JavaScript\nDESCRIPTION: This code shows how to create a Parse.File object using an array of byte values. It specifies the filename and the byte array.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/files.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst bytes = [ 0xBE, 0xEF, 0xCA, 0xFE ];\nconst file = new Parse.File(\"myfile.txt\", bytes);\n```\n\n----------------------------------------\n\nTITLE: Installing and Starting Parse Server with GraphQL\nDESCRIPTION: Command sequence to install dependencies, start MongoDB, and launch Parse Server with GraphQL and Playground enabled. The server will expose a GraphQL endpoint and interactive documentation interface.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/api-doc.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install -g parse-server mongodb-runner\n$ mongodb-runner start\n$ parse-server --appId APPLICATION_ID --masterKey MASTER_KEY --databaseURI mongodb://localhost/test --mountGraphQL --mountPlayground\n```\n\n----------------------------------------\n\nTITLE: Caching Query Results in Local Datastore\nDESCRIPTION: Shows how to cache query results using labels and retrieve cached results from local storage.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/local-datastore.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst GameScore = Parse.Object.extend(\"GameScore\");\nconst query = new Parse.Query(GameScore);\nquery.equalTo(\"playerName\", \"foo\");\nconst results = await query.find();\nawait Parse.Object.unPinAllObjectsWithName('HighScores');\nawait Parse.Object.pinAllWithName('HighScores', results);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst GameScore = Parse.Object.extend(\"GameScore\");\nconst query = new Parse.Query(GameScore);\nquery.equalTo(\"playerName\", \"foo\");\nquery.fromLocalDatastore();\nconst results = await query.find();\n```\n\n----------------------------------------\n\nTITLE: Creating a ParseGeoPoint in Java\nDESCRIPTION: This snippet demonstrates how to create a ParseGeoPoint object with specific latitude and longitude coordinates.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/geopoints.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nParseGeoPoint point = new ParseGeoPoint(40.0, -30.0);\n```\n\n----------------------------------------\n\nTITLE: Periodic Config Refresh and Caching - Parse PFConfig - Objective-C\nDESCRIPTION: Provides a strategy in Objective-C for fetching the remote PFConfig no more than once every 12 hours by tracking the last fetch time. Utilizes a static NSDate pointer and a constant for the refresh interval. Suitable for reducing network requests while ensuring timely updates. Requires Parse SDK; outputs none directly but ensures up-to-date config retrieval as needed.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/config.md#2025-04-22_snippet_4\n\nLANGUAGE: objective_c\nCODE:\n```\n// Fetches the config at most once every 12 hours per app runtime\nconst NSTimeInterval configRefreshInterval = 12.0 * 60.0 * 60.0;\nstatic NSDate *lastFetchedDate;\nif (lastFetchedDate == nil ||\n    [lastFetchedDate timeIntervalSinceNow] * -1.0 > configRefreshInterval) {\n  [PFConfig getConfigInBackgroundWithBlock:nil];\n  lastFetchedDate = [NSDate date];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ParseQueryAdapter with Custom Query in Java\nDESCRIPTION: This snippet demonstrates how to create a ParseQueryAdapter with a custom QueryFactory to display only punk and metal bands with four or more members, ordered by number of records sold.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/user-interface.md#2025-04-22_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nParseQueryAdapter<ParseObject> adapter = \n  new ParseQueryAdapter<ParseObject>(this, new ParseQueryAdapter.QueryFactory<ParseObject>() { \n    public ParseQuery<ParseObject> create() { \n      // Here we can configure a ParseQuery to our heart's desire. \n      ParseQuery query = new ParseQuery(\"Band\"); \n      query.whereContainedIn(\"genre\", Arrays.asList({ \"Punk\", \"Metal\" })); \n      query.whereGreaterThanOrEqualTo(\"memberCount\", 4); \n      query.orderByDescending(\"albumsSoldCount\"); \n      return query; \n    } \n  });\n```\n\n----------------------------------------\n\nTITLE: Adding Constraints to PFRelation Queries in Parse SDK (Objective-C and Swift)\nDESCRIPTION: Demonstrates how to add constraints to a PFRelation query by modifying the PFQuery returned by its query parameter.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/objects.md#2025-04-22_snippet_14\n\nLANGUAGE: objective-c\nCODE:\n```\nPFQuery *query = [relation query];\n[query whereKey:\"category\" equalTo:@\"development\"];\nPFObject *object = [query getFirstObject]; // Query first object found\nif (object) {\n    // Do something with object\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\nvar query = relation.query()\nquery.whereKey(\"category\", equalTo: \"development\") \n\n// Query first object found\nif let object = try? query.getFirstObject() {\n    // Do something with object\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Android (FCM) Installation Object via Parse REST API - Python\nDESCRIPTION: Illustrates using Python to create a Parse installation object for an Android device registered with FCM. Relies on http.client and json libraries, and the Parse installation object's required Android fields: deviceType ('android'), pushType ('gcm'), and deviceToken (FCM registration token). Should be run with proper credentials and Parse Server endpoint configured. The script logs the resulting creation response, including objectId and timestamps.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/push-notifications.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('<span class=\\\"custom-parse-server-url\\\">YOUR.PARSE-SERVER.HERE</span>', 443)\nconnection.connect()\nconnection.request('POST', '<span class=\\\"custom-parse-server-mount\\\">/parse/</span>installations', json.dumps({\n    \"deviceType\": \"android\",\n    \"pushType\": \"gcm\",\n    \"deviceToken\": \"APA91bFMvbrGg4cp3KUV_7dhU1gmwE_...\",\n    \"channels\": [\n        \"\"\n    ]\n}), {\n    \"X-Parse-Application-Id\": \"<span class=\\\"custom-parse-server-appid\\\">${APPLICATION_ID}</span>\",\n    \"X-Parse-REST-API-Key\": \"<span class=\\\"custom-parse-server-restapikey\\\">${REST_API_KEY}</span>\",\n    \"Content-Type\": \"application/json\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Saving Custom Data to ParseInstallation in Android\nDESCRIPTION: Demonstrates how to store custom data on a ParseInstallation object, such as user preferences for different types of push notifications.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/push-notifications.md#2025-04-22_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n// Store app language and version\nParseInstallation installation = ParseInstallation.getCurrentInstallation();\ninstallation.put(\"scores\",true);\ninstallation.put(\"gameResults\",true);\ninstallation.put(\"injuryReports\",true);\ninstallation.saveInBackground();\n```\n\n----------------------------------------\n\nTITLE: Updating Parse Objects in JavaScript\nDESCRIPTION: Shows how to update a `Parse.Object` by setting new data and saving it. Highlights Parse's ability to automatically detect changes and only send modified fields.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/objects.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// Create the object.\nconst GameScore = Parse.Object.extend(\"GameScore\");\nconst gameScore = new GameScore();\n\ngameScore.set(\"score\", 1337);\ngameScore.set(\"playerName\", \"Sean Plott\");\ngameScore.set(\"cheatMode\", false);\ngameScore.set(\"skills\", [\"pwnage\", \"flying\"]);\n\ngameScore.save().then((gameScore) => {\n  // Now let's update it with some new data. In this case, only cheatMode and score\n  // will get sent to the cloud. playerName hasn't changed.\n  gameScore.set(\"cheatMode\", true);\n  gameScore.set(\"score\", 1338);\n  return gameScore.save();\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Images from PFFileObject\nDESCRIPTION: Shows how to retrieve and convert image data from a PFFileObject back to UIImage.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/files.md#2025-04-22_snippet_5\n\nLANGUAGE: objective-c\nCODE:\n```\nPFFileObject *userImageFile = anotherPhoto[@\"imageFile\"];\n[userImageFile getDataInBackgroundWithBlock:^(NSData *imageData, NSError *error) {\n    if (!error) {\n        UIImage *image = [UIImage imageWithData:imageData];\n    }\n}];\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet userImageFile = anotherPhoto[\"imageFile\"] as! PFFileObject\nuserImageFile.getDataInBackground { (imageData: Data?, error: Error?) in\n    if let error = error {\n        print(error.localizedDescription)\n    } else if let imageData = imageData {\n        let image = UIImage(data:imageData)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Users and Roles to a ParseRole in C#\nDESCRIPTION: This code shows how to add users and child roles to a newly created ParseRole using the 'users' and 'roles' relations.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/roles.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar role = new ParseRole(roleName, roleACL);\nforeach (ParseUser user in usersToAddToRole)\n{\n    role.Users.Add(user);\n}\nforeach (ParseRole childRole in rolesToAddToRole)\n{\n    role.Roles.Add(childRole);\n}\nawait role.SaveAsync();\n```\n\n----------------------------------------\n\nTITLE: Relational Queries\nDESCRIPTION: Demonstrates querying related objects and including related data in results\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/queries.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar query = ParseObject.GetQuery(\"Comment\")\n    .OrderByDescending(\"createdAt\")\n    .Limit(10) // Only retrieve the last 10 comments\n    .Include(\"post\"); // Include the post data with each comment\n\nquery.FindAsync().ContinueWith(t =>\n{\n    IEnumerable<ParseObject> comments = t.Result;\n\n    foreach (var comment in comments)\n    {\n        var post = comment.Get<ParseObject>(\"post\");\n        Debug.Log(\"Post title: \" + post[\"title\"]);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Finding Followers - Parse JavaScript\nDESCRIPTION: This JavaScript snippet queries all users following the current user by accessing the Follow table in Parse, using the Parse JavaScript SDK.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/relations.md#2025-04-22_snippet_23\n\nLANGUAGE: js\nCODE:\n```\n// create an entry in the Follow table\nconst query = new Parse.Query(\"Follow\");\nquery.equalTo(\"to\", Parse.User.current());\nconst users = query.find();\n```\n\n----------------------------------------\n\nTITLE: Initializing ParseClient with Custom Server URL in Swift\nDESCRIPTION: This Swift snippet shows how to configure the Parse SDK on iOS, OS X, watchOS, or tvOS by specifying the application ID and custom server URL. It uses a configuration block to set the parameters before initializing Parse with the resulting configuration object. Required dependency: Parse SDK for Swift. Replace 'YOUR_APP_ID' with your actual application ID. Outputs an initialized Parse SDK ready to interact with the specified server endpoint.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/using-parse-sdks.md#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nlet configuration = ParseClientConfiguration {\n    $0.applicationId = \"YOUR_APP_ID\"\n    $0.clientKey = \"\"\n    $0.server = \"http://localhost:1337/parse\"\n}\nParse.initialize(with: configuration)\n```\n\n----------------------------------------\n\nTITLE: Parse ACL User Permissions\nDESCRIPTION: Configures granular user-level read/write permissions using ParseACL.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dart/objects.md#2025-04-22_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nParseUser user = await ParseUser.currentUser() as ParseUser;\nParseACL parseACL = ParseACL();\n// Grant total access to current user\nparseACL.setReadAccess(userId: user.objectId, allowed: true);\nparseACL.setWriteAccess(userId: user.objectId, allowed: true);\n// Grant read access to userId: 'TjRuDjuSAO' \nparseACL.setReadAccess(userId: 'TjRuDjuSAO', allowed: true);\nparseACL.setWriteAccess(userId: 'TjRuDjuSAO', allowed: false);\n\nParseObject parseObject = ParseObject(\"TestAPI\");\n...\nparseObject.setACL(parseACL);\nvar apiResponse = await parseObject.save();\n```\n\n----------------------------------------\n\nTITLE: Setting a Relative Expiration Interval for Scheduled Parse Push Notifications in JavaScript\nDESCRIPTION: Sends a push notification scheduled for a future time (`push_time`) and sets an expiration interval relative to that scheduled time using `expiration_interval`. The `expiration_interval` value (represented by `sixDaysAwayEpoch`, which should ideally be calculated as a duration in seconds) specifies how long Parse should attempt delivery *after* the scheduled `push_time`. The example schedules a push for `oneDayAway` with an expiration duration.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/push-notifications.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst oneDayAway = new Date(...);\nconst sixDaysAwayEpoch = (new Date(...)).getTime();\n\nParse.Push.send({\n  push_time: oneDayAway,\n  expiration_interval: sixDaysAwayEpoch,\n  data: {\n    alert: \"Season tickets on sale until next week!\"\n  }\n})\n.then(function() {\n  // Push was successful\n}, function(error) {\n  // Handle error\n});\n```\n\n----------------------------------------\n\nTITLE: Using Subqueries with whereMatchesKeyInQuery in Parse Android SDK\nDESCRIPTION: This snippet demonstrates how to use whereMatchesKeyInQuery to filter objects based on the results of another query, creating a relational query between two Parse classes.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/queries.md#2025-04-22_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nParseQuery<ParseObject> teamQuery = ParseQuery.getQuery(\"Team\");\nteamQuery.whereGreaterThan(\"winPct\", 0.5);\nParseQuery<ParseUser> userQuery = ParseUser.getQuery();\nuserQuery.whereMatchesKeyInQuery(\"hometown\", \"city\", teamQuery);\nuserQuery.findInBackground(new FindCallback<ParseUser>() {\n  void done(List<ParseUser> results, ParseException e) {\n    // results has the list of users with a hometown team with a winning record\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Role-Based Write Access on a ParseObject in C#\nDESCRIPTION: This snippet illustrates how to grant write access to a specific role (Moderators) for a ParseObject (WallPost) using ParseACL.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/roles.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar moderators = await (from role in ParseRole.Query\n                        where role.Name == \"Moderators\"\n                        select role).FirstAsync();\nvar wallPost = new ParseObject(\"WallPost\");\nvar postACL = new ParseACL();\npostACL.SetRoleWriteAccess(moderators, true);\nwallPost.ACL = postACL;\nawait wallPost.SaveAsync();\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from Push Notification Channel\nDESCRIPTION: Demonstrates how to unsubscribe a device from a specific notification channel.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/push-notifications.md#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// When users indicate they are no longer Giants fans, we unsubscribe them.\nParsePush.unsubscribeInBackground(\"Giants\");\n```\n\n----------------------------------------\n\nTITLE: Performing a Geo Query with ParseQuery in Java\nDESCRIPTION: This snippet demonstrates how to perform a geo query to find the ten closest places to a user's location using ParseQuery.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/geopoints.md#2025-04-22_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nParseGeoPoint userLocation = (ParseGeoPoint) userObject.get(\"location\");\nParseQuery<ParseObject> query = ParseQuery.getQuery(\"PlaceObject\");\nquery.whereNear(\"location\", userLocation);\nquery.setLimit(10);\nquery.findInBackground(new FindCallback<ParseObject>() { ... });\n```\n\n----------------------------------------\n\nTITLE: Linking Objects with Minimal Data in Parse SDK (Objective-C and Swift)\nDESCRIPTION: Demonstrates how to create object relationships by initializing PFObjects with only the class name and objectId. This allows linking objects without fetching full data.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/objects.md#2025-04-22_snippet_10\n\nLANGUAGE: objective-c\nCODE:\n```\nmyComment[@\"post\"] = [PFObject objectWithoutDataWithClassName:@\"Post\" objectId:@\"1zEcyElZ80\"];\n```\n\nLANGUAGE: swift\nCODE:\n```\nmyComment[\"post\"] = PFObject(withoutDataWithClassName: \"Post\", objectId: \"1zEcyElZ80\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Parse Session\nDESCRIPTION: Makes a GET request to fetch the current Session object using the session token. Validates the session token and returns the corresponding session details.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/sessions.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -H \"X-Parse-Session-Token: r:pnktnjyb996sj4p156gjtp4im\" \\\n  https://YOUR.PARSE-SERVER.HERE/parse/sessions/me\n```\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nconnection.connect()\nconnection.request('GET', '/parse/sessions/me', '', {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\",\n    \"X-Parse-Session-Token\": \"r:pnktnjyb996sj4p156gjtp4im\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Combining Channels and Queries for Targeted Push Notifications in Parse PHP SDK\nDESCRIPTION: The snippet demonstrates sending notifications to a specific channel ('Giants') and further filtering on subscriber preferences (e.g., wanting score updates). It combines channel targeting with queries for enhanced segmentation.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/push-notifications.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$query = ParseInstallation::query();\n$query->equalTo(\"channels\", \"Giants\");\n$query->equalTo(\"scores\", true);\n\nParsePush::send(array(\n  \"where\" => $query,\n  \"data\" => array(\n    \"alert\" => \"Giants scored against the A's! It's now 2-2.\"\n  )\n), true);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Parse Config with Fallback\nDESCRIPTION: Demonstrates fetching config with fallback to cached values when network requests fail, ensuring robust config availability.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/config.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nParse.Config.get().then(function(config) {\n  console.log(\"Yay! Config was fetched from the server.\");\n\n  const welcomeMessage = config.get(\"welcomeMessage\");\n  console.log(\"Welcome Message = \" + welcomeMessage);\n}, function(error) {\n  console.log(\"Failed to fetch. Using Cached Config.\");\n\n  const config = Parse.Config.current();\n  let welcomeMessage = config.get(\"welcomeMessage\");\n  if (welcomeMessage === undefined) {\n    welcomeMessage = \"Welcome!\";\n  }\n  console.log(\"Welcome Message = \" + welcomeMessage);\n});\n```\n\n----------------------------------------\n\nTITLE: Using Various Data Types in Parse SDK (Objective-C and Swift)\nDESCRIPTION: Illustrates how to use different data types supported by Parse, including numbers, booleans, strings, dates, arrays, dictionaries, and pointers to other objects.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/objects.md#2025-04-22_snippet_15\n\nLANGUAGE: objective-c\nCODE:\n```\nNSNumber *number = @42;\nNSNumber *bool = @NO;\nNSString *string = [NSString stringWithFormat:@\"the number is %@\", number];\nNSDate *date = [NSDate date];\nNSArray *array = @[string, number];\nNSDictionary *dictionary = @{@\"number\": number, @\"string\": string};\nNSNull *null = [NSNull null];\nPFObject *pointer = [PFObject objectWithoutDataWithClassName:@\"MyClassName\" objectId:@\"xyz\"];\n\nPFObject *bigObject = [PFObject objectWithClassName:@\"BigObject\"];\nbigObject[@\"myNumberKey\"] = number;\nbigObject[@\"myBoolKey\"] = bool;\nbigObject[@\"myStringKey\"] = string;\nbigObject[@\"myDateKey\"] = date;\nbigObject[@\"myArrayKey\"] = array;\nbigObject[@\"myObjectKey\"] = dictionary; // shows up as 'object' in the Data Browser\nbigObject[@\"anyKey\"] = null; // this value can only be saved to an existing key\nbigObject[@\"myPointerKey\"] = pointer; // shows up as Pointer MyClassName in the Data Browser\n[bigObject saveInBackground];\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet number = 42\nlet bool = false\nlet string = \"the number is \\(number)\"\nlet date = NSDate()\nlet array = [string, number]\nlet dictionary = [\"number\": number, \"string\": string]\nlet null = NSNull()\nlet pointer = PFObject(objectWithoutDataWithClassName:\"MyClassName\", objectId: \"xyz\")\n\nvar bigObject = PFObject(className:\"BigObject\")\nbigObject[\"myNumberKey\"] = number\nbigObject[\"myBooleanKey\"] = bool\nbigObject[\"myStringKey\"] = string\nbigObject[\"myDateKey\"] = date\nbigObject[\"myArrayKey\"] = array\nbigObject[\"myObjectKey\"] = dictionary // shows up as 'object' in the Data Browser\nbigObject[\"anyKey\"] = null // this value can only be saved to an existing key\nbigObject[\"myPointerKey\"] = pointer // shows up as Pointer MyClassName in the Data Browser\nbigObject.saveInBackground()\n```\n\n----------------------------------------\n\nTITLE: Creating Parse.File with Base64-encoded String in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a Parse.File object using a base64-encoded string. It specifies the filename and the base64 data.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/files.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst base64 = \"V29ya2luZyBhdCBQYXJzZSBpcyBncmVhdCE=\";\nconst file = new Parse.File(\"myfile.txt\", { base64: base64 });\n```\n\n----------------------------------------\n\nTITLE: Updating a Parse User via REST API in Python\nDESCRIPTION: Uses Python's http.client to make a PUT request to update a specific user's data. Includes the session token in headers and sends a JSON payload with the fields to update.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/users.md#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nconnection.connect()\nconnection.request('PUT', '/parse/users/g7y9tkhB7O', json.dumps({\n    \"phone\": \"415-369-6201\"\n}), {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\",\n    \"X-Parse-Session-Token\": \"r:pnktnjyb996sj4p156gjtp4im\",\n    \"Content-Type\": \"application/json\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Push Notification Channels in C#\nDESCRIPTION: Demonstrates how to subscribe an Installation to a channel for push notifications using Parse SDK in C#. This example shows subscribing to the 'Giants' channel using different methods.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/push-notifications.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// When users indicate they are Giants fans, we subscribe them to that channel.\nvar installation = ParseInstallation.CurrentInstallation;\ninstallation.Channels = new List<string> { \"Giants\" };\ninstallation.SaveAsync();\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar installation = ParseInstallation.CurrentInstallation;\ninstallation.AddUniqueToList(\"channels\", \"Giants\");\ninstallation.SaveAsync();\n```\n\nLANGUAGE: csharp\nCODE:\n```\nParsePush.SubscribeAsync(\"Giants\");\n```\n\n----------------------------------------\n\nTITLE: Handling Invalid Session Token Error in Objective-C\nDESCRIPTION: Implementation of a global error handler in Objective-C that specifically handles invalid session token errors with two suggested options: prompting the user to log out and log back in, or automatically showing the login screen to re-authenticate.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/sessions.md#2025-04-22_snippet_1\n\nLANGUAGE: objective-c\nCODE:\n```\n@interface ParseErrorHandlingController : NSObject\n\n+ (void)handleParseError:(NSError *)error;\n\n@end\n\n@implementation ParseErrorHandlingController\n\n+ (void)handleParseError:(NSError *)error {\n  if (![error.domain isEqualToString:PFParseErrorDomain]) {\n    return;\n  }\n\n  switch (error.code) {\n    case kPFErrorInvalidSessionToken: {\n      [self _handleInvalidSessionTokenError];\n      break;\n    }\n    ... // Other Parse API Errors that you want to explicitly handle.\n  }\n}\n\n+ (void)_handleInvalidSessionTokenError {\n  //--------------------------------------\n  // Option 1: Show a message asking the user to log out and log back in.\n  //--------------------------------------\n  // If the user needs to finish what they were doing, they have the opportunity to do so.\n  //\n  // UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@\"Invalid Session\"\n  //                                                     message:@\"Session is no longer valid, please log out and log in again.\"\n  //                                                    delegate:self\n  //                                           cancelButtonTitle:@\"Not Now\"\n  //                                           otherButtonTitles:@\"OK\"];\n  // [alertView show];\n\n  //--------------------------------------\n  // Option #2: Show login screen so user can re-authenticate.\n  //--------------------------------------\n  // You may want this if the logout button is inaccessible in the UI.\n  //\n  // UIViewController *presentingViewController = [UIApplication sharedApplication].keyWindow.rootViewController;\n  // PFLogInViewController *logInViewController = [[PFLogInViewController alloc] init];\n  // [presentingViewController presentViewController:logInViewController animated:YES completion:nil];\n}\n\n@end\n\n// In all API requests, call the global error handler, e.g.\n[[PFQuery queryWithClassName:@\"Object\"] findInBackgroundWithBlock:^(NSArray *objects, NSError *error) {\n  if (!error) {\n    // Query succeeded - continue your app logic here.\n  } else {\n    // Query failed - handle an error.\n    [ParseErrorHandlingController handleParseError:error];\n  }\n}];\n```\n\n----------------------------------------\n\nTITLE: Retrieving Logs Using ParseLogs in PHP\nDESCRIPTION: This snippet demonstrates how to use ParseLogs in PHP to retrieve info and error logs from the server. The methods shown allow fetching the last 100 logs, or a specific number of logs within a date range and ordered ascending or descending. It requires Parse SDK version 1.4.0 or higher, and the correct masterKey must be set for access.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/logs.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n// get last 100 info logs, sorted in descending order\n$logs = ParseLogs::getInfoLogs();\n\n// get last 100 info logs, sorted in descending order\n$logs = ParseLogs::getErrorLogs();\n\n// logs can be retrieved with further specificity\n// get 10 logs from a date up to a date in ascending order\n$logs = ParseLogs::getInfoLogs(10, $fromDate, $untilDate, 'asc');\n\n// above can be done for 'getErrorLogs' as well\n```\n\n----------------------------------------\n\nTITLE: Querying Within Distance with Parse in JavaScript\nDESCRIPTION: Shows how to query for objects within a specific distance using withinKilometers method. It includes an option to sort results by distance.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/geopoints.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst location = new Parse.GeoPoint(37.708813, -122.526398);\nconst distance = 5;\nconst sorted = true;\n\nconst query = new Parse.Query(PizzaPlaceObject);\nquery.withinKilometers(\"location\", location, distance, sorted);\n// Pizza places within 5km sorted by distance\nconst pizzaPlacesInSF = await query.find();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Objects from Local Datastore\nDESCRIPTION: Shows how to retrieve a specific object from local datastore using Parse Query with fromLocalDatastore() method.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/local-datastore.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst GameScore = Parse.Object.extend(\"GameScore\");\nconst query = new Parse.Query(GameScore);\nquery.fromLocalDatastore();\nconst result = await query.get('xWMyZ4YE');\n```\n\n----------------------------------------\n\nTITLE: Using afterSave Trigger for Post-Save Actions in Parse JavaScript SDK\nDESCRIPTION: This example demonstrates how to use afterSave trigger to perform actions after an object is saved. It increments a comment count on a Post object when a new Comment is saved.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/cloudcode/cloud-code.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nParse.Cloud.afterSave(\"Comment\", (request) => {\n  const query = new Parse.Query(\"Post\");\n  query.get(request.object.get(\"post\").id)\n    .then(function(post) {\n      post.increment(\"comments\");\n      return post.save();\n    })\n    .catch(function(error) {\n      console.error(\"Got an error \" + error.code + \" : \" + error.message);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Calling Cloud Function via REST API - Bash\nDESCRIPTION: This Bash snippet uses curl to invoke a Parse Cloud Function named 'hello' through the REST API. It specifies required headers like Application ID and REST API Key, sets the content type to 'application/json', and sends an empty JSON payload. The endpoint URL follows the standard Parse '/functions/hello' pattern. Requires valid environment variables or replacements for Application ID, REST API Key, server URL, and mount path.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/cloud-code.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n  -H \"X-Parse-Application-Id: <span class=\\\"custom-parse-server-appid\\\">${APPLICATION_ID}</span>\" \\\n  -H \"X-Parse-REST-API-Key: <span class=\\\"custom-parse-server-restapikey\\\">${REST_API_KEY}</span>\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{}' \\\n  <span class=\\\"custom-parse-server-protocol\\\">https</span>://<span class=\\\"custom-parse-server-url\\\">YOUR.PARSE-SERVER.HERE</span><span class=\\\"custom-parse-server-mount\\\">/parse/</span>functions/hello\n```\n\n----------------------------------------\n\nTITLE: Linking Unauthenticated Users in Parse\nDESCRIPTION: Shows how to link an unauthenticated user using masterKey or sessionToken, typically used in cloud code scenarios.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/users.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst myAuthData = {\n  id: xzx5tt123,  // The id key is required in the authData-object. Otherwise Parse Server will throw the Error 252 'This authentication method is unsupported'.\n  access: token\n}\n\nconst user = await Parse.Query(Parse.User).get(userId);\n\nawait user.linkWith(\n  'providerName',\n  { authData: myAuthData },\n  { useMasterKey: true }\n);\n```\n\n----------------------------------------\n\nTITLE: Setting an Absolute Expiration Time for Parse Push Notifications in JavaScript\nDESCRIPTION: Sends a push notification that will expire at a specific future date and time. It uses the `expiration_time` parameter within `Parse.Push.send`, providing a JavaScript `Date` object (`oneWeekAway`). If the notification cannot be delivered by this time, Parse will stop attempting delivery. The target query (`everyoneQuery`) is assumed to select the desired recipients.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/push-notifications.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst oneWeekAway = new Date(...);\n\nParse.Push.send({\n  where: everyoneQuery,\n  expiration_time: oneWeekAway,\n  data: {\n    alert: \"Season tickets on sale until next week!\"\n  }\n})\n.then(function() {\n  // Push was successful\n}, function(error) {\n  // Handle error\n});\n```\n\n----------------------------------------\n\nTITLE: Handling LiveQuery Enter Event in JavaScript\nDESCRIPTION: Demonstrates how to listen for the 'enter' event, which occurs when an object's update causes it to match the query criteria.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/live-queries.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nsubscription.on('enter', (object) => {\n  console.log('object entered');\n});\n```\n\n----------------------------------------\n\nTITLE: Using Local Datastore with PFObject in Parse iOS SDK\nDESCRIPTION: Explains how to use the local datastore feature with PFObject. It covers enabling the local datastore, pinning objects, and retrieving objects from the local datastore in both Objective-C and Swift.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/objects.md#2025-04-22_snippet_3\n\nLANGUAGE: objective-c\nCODE:\n```\nPFObject *gameScore = [PFObject objectWithClassName:@\"GameScore\"];\ngameScore[@\"score\"] = 1337;\ngameScore[@\"playerName\"] = @\"Sean Plott\";\ngameScore[@\"cheatMode\"] = @NO;\n[gameScore pinInBackground];\n\nPFQuery *query = [PFQuery queryWithClassName:@\"GameScore\"];\n[query fromLocalDatastore];\n[[query getObjectInBackgroundWithId:@\"xWMyZ4YEGZ\"] continueWithBlock:^id(BFTask *task) {\n  if (task.error) {\n    // something went wrong;\n    return task;\n  }\n\n  // task.result will be your game score\n  return task;\n}];\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet gameScore = PFObject(className:\"GameScore\")\ngameScore[\"score\"] = 1337\ngameScore[\"playerName\"] = \"Sean Plott\"\ngameScore[\"cheatMode\"] = false\ngameScore.pinInBackground()\n\nlet query = PFQuery(className:\"GameScore\")\nquery.fromLocalDatastore()\nquery.getObjectInBackground(withId: \"xWMyZEGZ\").continueWith { (task: BFTask<PFObject>!) -> Any? in\n    if task.error != nil {\n        // There was an error.\n        return task\n    }\n\n    // task.result will be your game score\n    return task\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Current User with Session Token in ParseUser for Java\nDESCRIPTION: This code demonstrates how to set the current user using a session token with the become method. It's useful when you've authenticated a user on the server side and need to set the user on the client.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/users.md#2025-04-22_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nParseUser.becomeInBackground(\"session-token-here\", new LogInCallback() {\n  public void done(ParseUser user, ParseException e) {\n    if (user != null) {\n      // The current user is now set to user.\n    } else {\n      // The token could not be validated.\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Excluding Set Membership with notContainedIn and NSPredicate in Swift\nDESCRIPTION: Shows how to query in Swift for objects whose value is not in a given list using whereKey:notContainedIn: or a NOT IN NSPredicate. Useful for excluding multiple values. Requires ParseSwift SDK and an array of excluded names.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/queries.md#2025-04-22_snippet_25\n\nLANGUAGE: swift\nCODE:\n```\n// Finds scores from anyone who is neither Jonathan, Dario, nor Shawn\n// Using PFQuery\nlet names = [\"Jonathan Walsh\", \"Dario Wunsch\", \"Shawn Simon\"]\nquery.whereKey(\"playerName\", notContainedIn: names)\n\n// Using NSPredicate\nlet names = [\"Jonathan Walsh\", \"Dario Wunsch\", \"Shawn Simon\"]\nlet predicate = NSPredicate(format: \"NOT (playerName IN %@)\", names)\nlet query = PFQuery(className: \"GameScore\", predicate: predicate)\n```\n\n----------------------------------------\n\nTITLE: Sending Push Notifications to Channels using Parse PHP SDK\nDESCRIPTION: This snippet demonstrates how to send push notifications to subscribers of specified channels ('PHPFans') using the Parse PHP SDK. The code utilizes the ParsePush class to deliver a simple alert notification. No external dependencies are required apart from the Parse SDK.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/push-notifications.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$data = array(\"alert\" => \"Hi!\");\n\nParsePush::send(array(\n  \"channels\" => [\"PHPFans\"],\n  \"data\" => $data\n), true);\n```\n\n----------------------------------------\n\nTITLE: Third Party Authentication in Parse Server GraphQL\nDESCRIPTION: Demonstrates how to authenticate users via third-party providers like Facebook. Includes auth data and optional user fields.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/users.md#2025-04-22_snippet_2\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"X-Parse-Application-Id\": \"APPLICATION_ID\",\n  \"X-Parse-Master-Key\": \"MASTER_KEY\" // (optional)\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\nmutation LoginWithFacebook {\n  logInWith(\n    input: {\n      authData: {\n        facebook: {\n          id: \"user's Facebook id number as a string\"\n          access_token: \"Facebook access token for the user\"\n          expiration_date: \"token expiration date\"\n        }\n      }\n      fields: { email: \"a.new@user.com\" }\n    }\n  ) {\n    viewer {\n      sessionToken\n      user {\n        id\n        email\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"data\": {\n    \"logInWith\": {\n      \"viewer\": {\n        \"sessionToken\": \"r:b0dfad1eeafa4425d9508f1c0a15c3fa\",\n        \"user\": {\n          \"email\": \"a.new@user.com\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Objects - Java\nDESCRIPTION: Shows how to update existing ParseObjects using ParseQuery.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/objects.md#2025-04-22_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nParseQuery<ParseObject> query = ParseQuery.getQuery(\"GameScore\");\n\n// Retrieve the object by id\nquery.getInBackground(\"xWMyZ4YEGZ\", new GetCallback<ParseObject>() {\n  public void done(ParseObject gameScore, ParseException e) {\n    if (e == null) {\n      // Now let's update it with some new data. In this case, only cheatMode and score\n      // will get sent to your Parse Server. playerName hasn't changed.\n      gameScore.put(\"score\", 1338);\n      gameScore.put(\"cheatMode\", true);\n      gameScore.saveInBackground();\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Parse SDK in Dart\nDESCRIPTION: Basic initialization of the Parse SDK in a Flutter application. This sets up the SDK with the application ID and server URL.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/flutter/getting-started.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nawait Parse().initialize(\n    keyApplicationId,\n    keyParseServerUrl,\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Config with Network Fallback and Caching - Parse PFConfig - Swift\nDESCRIPTION: Presents a Swift approach to fetch remote config with Parse, handling errors by falling back to the cached PFConfig. Demonstrates parsing a 'welcomeMessage' value and provides console notifications for fallback scenarios. Relies on the Parse SDK. Inputs: none; Outputs: prints messages about fetch status and displays the welcome message. Proper Parse initialization and parameter setup are required.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/config.md#2025-04-22_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nprint(\"Getting the latest config...\");\nPFConfig.getConfigInBackgroundWithBlock {\n  (var config: PFConfig?, error: NSError?) -> Void in\n  if error == nil {\n    print(\"Yay! Config was fetched from the server.\")\n  } else {\n    print(\"Failed to fetch. Using Cached Config.\")\n    config = PFConfig.currentConfig()\n  }\n\n  var welcomeMessage: NSString? = config?[\"welcomeMessage\"] as? NSString\n  if let welcomeMessage = welcomeMessage {\n    print(\"Welcome Message = \\(welcomeMessage)!\")\n  } else {\n    print(\"Falling back to default message.\")\n    welcomeMessage = \"Welcome!\";\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Querying Nearby Locations with Parse in PHP\nDESCRIPTION: This code snippet retrieves a list of ParseObjects representing places ordered by proximity to a user's location using the 'near' constraint in a ParseQuery. It limits the results to 10 closest locations, demonstrating spatial query capabilities in Parse.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/geopoints.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// User's location\n$userGeoPoint = $userObject->get(\"location\");\n// Create a query for places\n$query = new ParseQuery(\"PlaceObject\");\n// Interested in locations near user.\n$query->near(\"location\", $userGeoPoint);\n// Limit what could be a lot of points.\n$query->limit(10);\n// Final array of objects\n$placesObjects = $query->find();\n```\n\n----------------------------------------\n\nTITLE: Sending Push Notification with Custom Data in Parse PHP\nDESCRIPTION: This example shows how to send a push notification with custom data fields, targeting specific installations based on channels and custom parameters.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/push-notifications.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$query = ParseInstallation::query();\n$query->equalTo('channels', 'Indians');\n$query->equalTo('injuryReports', true);\n\nParsePush::send(array(\n  \"where\" => $query,\n  \"data\" => array(\n    \"action\" => \"com.example.UPDATE_STATUS\"\n    \"alert\" => \"Ricky Vaughn was injured in last night's game!\",\n    \"name\" => \"Vaughn\",\n    \"newsItem\" => \"Man bites dog\"\n  )\n), true);\n```\n\n----------------------------------------\n\nTITLE: Querying with equalTo and containedIn in Objective-C\nDESCRIPTION: Shows how to create an efficient query in Objective-C using equalTo and containedIn constraints that leverage database indexes.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_1\n\nLANGUAGE: objective-c\nCODE:\n```\nPFQuery *query = [PFQuery queryWithClassName:@\"GameScore\"];\n[query whereKey:@\"score\" equalTo:@50];\n[query whereKey:@\"playerName\"\n    containedIn:@[@\"Jonathan Walsh\", @\"Dario Wunsch\", @\"Shawn Simon\"]];\n```\n\n----------------------------------------\n\nTITLE: Querying Parse Users in C#\nDESCRIPTION: Shows how to query Parse users using both LINQ and traditional query approaches, specifically filtering users by gender.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/users.md#2025-04-22_snippet_8\n\nLANGUAGE: cs\nCODE:\n```\nvar women = await (from user in ParseUser.Query\n                   where user.Get<string>(\"gender\") == \"female\"\n                   select user).FindAsync();\n\n// or using LINQ\nvar women = await ParseUser.Query\n    .WhereEqualTo(\"gender\", \"female\")\n    .FindAsync();\n```\n\n----------------------------------------\n\nTITLE: Creating and Modifying Parse Schemas in PHP\nDESCRIPTION: Demonstrates how to instantiate `ParseSchema` for a specific class, retrieve existing schema data, add various field types (String, Number, Boolean, Date, File, GeoPoint, Polygon, Array, Object, Pointer, Relation) using methods like `addString`, `addNumber`, `addPointer`, etc., and persist these changes using `save()` or `update()`. It allows explicit control over class structures without needing to create objects first.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/schema.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// create an instance to manage your class\n$mySchema = new ParseSchema(\"MyClass\");\n\n// gets the current schema data as an associative array, for inspection\n$data = $mySchema->get();\n\n// add any # of fields, without having to create any objects\n$mySchema->addString('string_field');\n$mySchema->addNumber('num_field');\n$mySchema->addBoolean('bool_field');\n$mySchema->addDate('date_field');\n$mySchema->addFile('file_field');\n$mySchema->addGeoPoint('geopoint_field');\n$mySchema->addPolygon('polygon_field');\n$mySchema->addArray('array_field');\n$mySchema->addObject('obj_field');\n$mySchema->addPointer('pointer_field');\n\n// you can even setup pointer/relation fields this way\n$mySchema->addPointer('pointer_field', 'TargetClass');\n$mySchema->addRelation('relation_field', 'TargetClass');\n\n// new types can be added as they are available\n$mySchema->addField('new_field', 'ANewDataType');\n\n// save/update this schema to persist your field changes\n$mySchema->save();\n// or\n$mySchema->update();\n```\n\n----------------------------------------\n\nTITLE: Associating PFFileObject with PFObject\nDESCRIPTION: Example of attaching a PFFileObject to a PFObject as a property and saving it.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/files.md#2025-04-22_snippet_2\n\nLANGUAGE: objective-c\nCODE:\n```\nPFObject *jobApplication = [PFObject objectWithClassName:@\"JobApplication\"]\njobApplication[@\"applicantName\"] = @\"Joe Smith\";\njobApplication[@\"applicantResumeFile\"] = file;\n[jobApplication saveInBackground];\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet jobApplication = PFObject(className:\"JobApplication\")\njobApplication[\"applicantName\"] = \"Joe Smith\"\njobApplication[\"applicantResumeFile\"] = file\njobApplication.saveInBackground()\n```\n\n----------------------------------------\n\nTITLE: Saving Parse Installation Object\nDESCRIPTION: Demonstrates how to save the current installation object to Parse server for push notification targeting.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/push-notifications.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n// Save the current Installation to Parse.\nParseInstallation.getCurrentInstallation().saveInBackground();\n```\n\n----------------------------------------\n\nTITLE: Adding an Author to a Book's Authors Array in JavaScript\nDESCRIPTION: This JavaScript snippet shows how to add an Author object to the 'authors' array of a Book object using Parse. It uses the add method to append the author to the existing array.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/relations.md#2025-04-22_snippet_28\n\nLANGUAGE: js\nCODE:\n```\n// let's say we have an author\nvar author = ...\n\n// and let's also say we have an book\nvar book = ...\n\n// add the author to the authors list for the book\nbook.add(\"authors\", author);\n```\n\n----------------------------------------\n\nTITLE: Creating ParseFile from Local File in PHP\nDESCRIPTION: Shows how to create a `ParseFile` instance using the static `createFromFile` method. It reads the content from a specified local file path and assigns a name for the file in Parse. The filename should include an extension for type handling.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/files.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$localFilePath = \"/tmp/myFile.txt\";\n$file = ParseFile::createFromFile($localFilePath, \"myfile.txt\");\n```\n\n----------------------------------------\n\nTITLE: Counting Objects with Parse SDK\nDESCRIPTION: Demonstrates how to count objects that match a query without retrieving the actual objects. This is useful when you only need the count of matching records rather than the data itself.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/queries.md#2025-04-22_snippet_57\n\nLANGUAGE: objective_c\nCODE:\n```\nPFQuery *query = [PFQuery queryWithClassName:@\"GameScore\"];\n[query whereKey:@\"playername\" equalTo:@\"Sean Plott\"];\n[query countObjectsInBackgroundWithBlock:^(int count, NSError *error) {\n  if (!error) {\n    // The count request succeeded. Log the count\n    NSLog(@\"Sean has played %d games\", count);\n  } else {\n    // The request failed\n  }\n}];\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet query = PFQuery(className:\"GameScore\")\nquery.whereKey(\"playerName\", equalTo:\"Sean Plott\")\nquery.countObjectsInBackground { (count: Int32, error: Error?) in\n    if let error = error {\n        // The request failed\n        print(error.localizedDescription)\n    } else {\n        print(\"Sean has played \\(count) games\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting and Checking a Parse Cloud Job using PHP\nDESCRIPTION: This snippet shows how to start an asynchronous Parse Cloud Job named 'MyCloudJob' using `ParseCloud::startJob`, passing parameters. It then demonstrates retrieving the job's status using the returned job status ID with `ParseCloud::getJobStatus`. The status is returned as a `ParseObject` containing details like the current status ('failed'/'succeeded' upon completion).\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/cloud.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// start job\n$jobStatusId = ParseCloud::startJob('MyCloudJob', array(\"startedBy\" => \"me!\"));\n\n// get job status, a ParseObject!\n$jobStatus = ParseCloud::getJobStatus($jobStatusId);\n$status = $jobStatus->get('status'); // failed / succeeded when done\n```\n\n----------------------------------------\n\nTITLE: Associating ParseFile with ParseObject in C#\nDESCRIPTION: Demonstrates how to attach a ParseFile to a ParseObject as a property and save it to the cloud.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/files.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar jobApplication = new ParseObject(\"JobApplication\");\njobApplication[\"applicantName\"] = \"Joe Smith\";\njobApplication[\"applicantResumeFile\"] = file;\nawait jobApplication.SaveAsync();\n```\n\n----------------------------------------\n\nTITLE: Calling a Cloud Function from PHP\nDESCRIPTION: This code shows how to call the 'averageRatings' Cloud Function using PHP. It passes the movie name as a parameter and receives the result directly.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/cloudcode/cloud-code.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$ratings = ParseCloud::run(\"averageRatings\", [\"movie\" => \"The Matrix\"]);\n// $ratings is 4.5\n```\n\n----------------------------------------\n\nTITLE: Express.js Parse Server with GraphQL Configuration\nDESCRIPTION: Complete Express.js server setup with Parse Server and GraphQL integration.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/getting-started.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// index.js\nconst express = require('express');\nconst { default: ParseServer, ParseGraphQLServer } = require('parse-server');\n\n// Create express app\nconst app = express();\n\n// Create a Parse Server Instance\nconst parseServer = new ParseServer({\n  databaseURI: 'mongodb://localhost:27017/test',\n  appId: 'APPLICATION_ID',\n  masterKey: 'MASTER_KEY',\n  serverURL: 'http://localhost:1337/parse',\n  publicServerURL: 'http://localhost:1337/parse'\n});\n\n// Create the GraphQL Server Instance\nconst parseGraphQLServer = new ParseGraphQLServer(\n  parseServer,\n  {\n    graphQLPath: '/graphql',\n    playgroundPath: '/playground'\n  }\n);\n\n// (Optional) Mounts the REST API\nawait parseServer.start();\napp.use('/parse', parseServer.app);\n// Mounts the GraphQL API using graphQLPath: '/graphql'\nparseGraphQLServer.applyGraphQL(app);\n// (Optional) Mounts the GraphQL Playground - do NOT use in Production\nparseGraphQLServer.applyPlayground(app);\n\n// Start the server\napp.listen(1337, function() {\n  console.log('REST API running on http://localhost:1337/parse');\n  console.log('GraphQL API running on http://localhost:1337/graphql');\n  console.log('GraphQL Playground running on http://localhost:1337/playground');\n});\n```\n\n----------------------------------------\n\nTITLE: Saving a Parse Object in C++\nDESCRIPTION: Shows how to create and save a Parse Object representing temperature data using the C++ SDK.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/arduino/objects.md#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nParseObjectCreate create;\ncreate.setClassName(\"Temperature\");\ncreate.add(\"temperature\", 175.0);\ncreate.add(\"leverDown\", true);\nParseResponse response = create.send();\nif (!response.getErrorCode()) {\n\t// The object has been saved\n} else {\n\t// There was a problem, check response.\n\tgetErrorCode();\n}\nresponse.close(); // Free the resource\n```\n\n----------------------------------------\n\nTITLE: Handling File Upload and Creating Parse.File in JavaScript\nDESCRIPTION: This JavaScript code handles the file selected by the user, creates a Parse.File object from it, and prepares it for upload. It demonstrates how to access the selected file and create a Parse.File with a specific name.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/files.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst fileUploadControl = $(\"#profilePhotoFileUpload\")[0];\nif (fileUploadControl.files.length > 0) {\n  const file = fileUploadControl.files[0];\n  const name = \"photo.jpg\";\n\n  const parseFile = new Parse.File(name, file);\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Received Push Notifications in C#\nDESCRIPTION: This snippet shows how to register for the ParsePushNotificationReceived event to handle push notifications when the app is running. It demonstrates accessing custom data from the notification payload.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/push-notifications.md#2025-04-22_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\nParsePush.ParsePushNotificationReceived += (sender, args) => {\n  var payload = args.Payload;\n  object objectId;\n  if (payload.TryGetValue(\"objectId\", out objectId)) {\n    DisplayRichMessageWithObjectId(objectId as string);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Calling a Cloud Function from iOS in Objective-C\nDESCRIPTION: This code shows how to call the 'averageStars' Cloud Function from an iOS app using Objective-C. It passes the movie name and handles the result in a completion block.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/cloudcode/cloud-code.md#2025-04-22_snippet_2\n\nLANGUAGE: objective-c\nCODE:\n```\n[PFCloud callFunctionInBackground:@\"averageStars\"\n                   withParameters:@{@\"movie\": @\"The Matrix\"}\n                            block:^(NSNumber *ratings, NSError *error) {\n  if (!error) {\n     // ratings is 4.5\n  }\n}];\n```\n\n----------------------------------------\n\nTITLE: Saving Custom Installation Data in Parse iOS SDK\nDESCRIPTION: Shows how to save custom data to an Installation object to enable more targeted push notifications. This example demonstrates saving user preferences for different types of sports notifications.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/push-notifications.md#2025-04-22_snippet_7\n\nLANGUAGE: objective-c\nCODE:\n```\n// Store app language and version\nPFInstallation *installation = [PFInstallation currentInstallation];\n[installation setObject:@YES forKey:@\"scores\"];\n[installation setObject:@YES forKey:@\"gameResults\"];\n[installation setObject:@YES forKey:@\"injuryReports\"];\n[installation saveInBackground];\n```\n\nLANGUAGE: swift\nCODE:\n```\n// Store app language and version\nlet installation = PFInstallation.currentInstallation()\ninstallation[\"scores\"] = true\ninstallation[\"gameResults\"] = true\ninstallation[\"injuryReports\"] = true\ninstallation.saveInBackground()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Related Object in One-to-Many Relationship with Pointers in Parse\nDESCRIPTION: This snippet demonstrates how to retrieve the Parse User who created a specific Game object in a one-to-many relationship using Pointers.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/relations.md#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// say we have a Game object\nParseObject game = ...\n\n// getting the user who created the Game\nParseUser createdBy = game.getUser(\"createdBy\");\n```\n\nLANGUAGE: objective_c\nCODE:\n```\n// say we have a Game object\nPFObject *game = ...\n\n// getting the user who created the Game\nPFUser *createdBy = [game objectForKey@\"createdBy\"];\n```\n\nLANGUAGE: swift\nCODE:\n```\n// say we have a Game object\nlet game = ...\n\n// getting the user who created the Game\nlet createdBy = game[\"createdBy\"]\n```\n\nLANGUAGE: php\nCODE:\n```\n// say we have a Game object\n$game = ...\n\n// getting the user who created the Game\n$user = $game->get(\"createdBy\");\n```\n\nLANGUAGE: cs\nCODE:\n```\n// say we have a Game object\nParseObject game = ...\n\n// getting the user who created the Game\nParseUser user = game[\"createdBy\"];\n```\n\nLANGUAGE: js\nCODE:\n```\n// say we have a Game object\nvar game = ...\n\n// getting the user who created the Game\nvar user = game.get(\"createdBy\");\n```\n\n----------------------------------------\n\nTITLE: Querying Objects in a Polygon with Python\nDESCRIPTION: Makes a GET request using Python to find places within a polygon defined by three or more geographic points using the $geoWithin and $polygon operators. Available in Parse-Server 2.5.0 and later.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/geopoints.md#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\nimport urllib.parse\n\n\nconnection = http.client.HTTPSConnection('api.parse.com', 443)\nparams = urllib.parse.urlencode({\"where\": json.dumps({\n    \"location\": {\n        \"$geoWithin\": {\n            \"$polygon\": [\n                {\n                    \"__type\": \"GeoPoint\",\n                    \"latitude\": 25.774,\n                    \"longitude\": -80.190\n                },\n                {\n                    \"__type\": \"GeoPoint\",\n                    \"latitude\": 18.466,\n                    \"longitude\": -66.118\n                },\n                {\n                    \"__type\": \"GeoPoint\",\n                    \"latitude\": 32.321,\n                    \"longitude\": -64.757\n                }\n            ]\n        }\n    }\n})})\nconnection.connect()\nconnection.request('GET', '/1/classes/PizzaPlaceObject?%s' % params, '', {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Using Contained In and Not Contained In Queries in PHP\nDESCRIPTION: These snippets depict using `containedIn` and `notContainedIn` for querying objects matching or not matching a list of values. This approach efficiently filters query results based on predefined arrays.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/queries.md#2025-04-22_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n// Finds scores from any of Jonathan, Dario, or Shawn\n$query->containedIn(\"playerName\",\n                  [\"Jonathan Walsh\", \"Dario Wunsch\", \"Shawn Simon\"]);\n```\n\nLANGUAGE: PHP\nCODE:\n```\n// Finds scores from anyone who is neither Jonathan, Dario, nor Shawn\n$query->notContainedIn(\"playerName\",\n                     [\"Jonathan Walsh\", \"Dario Wunsch\", \"Shawn Simon\"]);\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Fields with selectKeys in Parse Android Queries\nDESCRIPTION: This snippet shows how to restrict the fields returned by a query using selectKeys, which can improve query performance by returning only the needed fields.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/queries.md#2025-04-22_snippet_15\n\nLANGUAGE: java\nCODE:\n```\nParseQuery<ParseObject> query = ParseQuery.getQuery(\"GameScore\");\nquery.selectKeys(Arrays.asList(\"playerName\", \"score\"));;\nList<ParseObject> results = query.find();\n```\n\n----------------------------------------\n\nTITLE: Setting ACL on Current User in Swift\nDESCRIPTION: This Swift code creates and assigns an Access Control List (ACL) to the current user, ensuring their data can only be accessed by them. It uses optional binding to safely unwrap the current user before setting the ACL.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/security.md#2025-04-22_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nif let user = PFUser.current() {\n    user.ACL = PFACL(user: user)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Parse Object in Dart\nDESCRIPTION: Creates a new Parse Object with properties and saves it to the server.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dart/objects.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvar dietPlan = ParseObject('DietPlan')\n\t..set('Name', 'Ketogenic')\n\t..set('Fat', 65);\n\nawait dietPlan.save();\n```\n\n----------------------------------------\n\nTITLE: Basic ParseLiveList Widget Implementation\nDESCRIPTION: Simple implementation of ParseLiveListWidget that creates a dynamic list using a QueryBuilder.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dart/queries.md#2025-04-22_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nParseLiveListWidget<ParseObject>(\n      query: query,\n    );\n```\n\n----------------------------------------\n\nTITLE: Parse Server Configuration Example\nDESCRIPTION: Example configuration file for Parse Server with basic settings including database connection to PostgreSQL.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/deploying-aws-ubuntu.md#2025-04-22_snippet_18\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"appId\": \"exampleAppId\",\n  \"masterKey\": \"exampleMasterKey\",\n  \"clientKey\": \"exampleClientKey\",\n  \"appName\": \"MyApp\",\n  \"cloud\": \"./cloud/main\",\n  \"databaseURI\": \"postgres://postgres:myStrongPassword@localhost:5432/postgres\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Books by Author in C#\nDESCRIPTION: This C# snippet shows how to query for Book objects that contain a specific Author. It uses the WhereEqualTo method to filter books and includes the authors in the query results using an asynchronous approach.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/relations.md#2025-04-22_snippet_38\n\nLANGUAGE: cs\nCODE:\n```\n// set up our query for the Book object\nvar bookQuery = ParseObject.GetQuery(\"Book\");\n\n// configure any constraints on your query...\nbookQuery = bookQuery.WhereEqualTo(\"authors\", author);\n\n// tell the query to fetch all of the Author objects along with the Book\nbookQuery = bookQuery.Include(\"authors\");\n\n// execute the query\nIEnumerable<ParseObject> books = await bookQuery.FindAsync();\n```\n\n----------------------------------------\n\nTITLE: Finding Multiple Objects with Parse Server GraphQL - GraphQL\nDESCRIPTION: This query fetches multiple 'GameScore' objects using the class-based 'gameScores' query. The result includes pagination information (pageInfo, edges, count) and nested fields for each GameScore. Ideal for retrieving collections and building paginated UIs; be aware of default limits (typically 100) unless parameters like 'first' are used.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/queries.md#2025-04-22_snippet_7\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery getSomeGameScores{\n  gameScores {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    count\n    edges {\n      cursor\n      node {\n        id\n        playerName\n        score\n        cheatMode\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Invalid Session Token Error in Swift\nDESCRIPTION: Implementation of a global error handler in Swift that specifically handles invalid session token errors with two suggested options: prompting the user to log out and log back in, or automatically showing the login screen to re-authenticate.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/sessions.md#2025-04-22_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n// Swift\nclass ParseErrorHandlingController {\n  class func handleParseError(error: NSError) {\n    if error.domain != PFParseErrorDomain {\n      return\n    }\n\n    switch (error.code) {\n    case kPFErrorInvalidSessionToken:\n      handleInvalidSessionTokenError()\n\n    ... // Other Parse API Errors that you want to explicitly handle.\n  }\n\n  private class func handleInvalidSessionTokenError() {\n    //--------------------------------------\n    // Option 1: Show a message asking the user to log out and log back in.\n    //--------------------------------------\n    // If the user needs to finish what they were doing, they have the opportunity to do so.\n    //\n    // let alertView = UIAlertView(\n    //   title: \"Invalid Session\",\n    //   message: \"Session is no longer valid, please log out and log in again.\",\n    //   delegate: nil,\n    //   cancelButtonTitle: \"Not Now\",\n    //   otherButtonTitles: \"OK\"\n    // )\n    // alertView.show()\n\n    //--------------------------------------\n    // Option #2: Show login screen so user can re-authenticate.\n    //--------------------------------------\n    // You may want this if the logout button is inaccessible in the UI.\n    //\n    // let presentingViewController = UIApplication.sharedApplication().keyWindow?.rootViewController\n    // let logInViewController = PFLogInViewController()\n    // presentingViewController?.presentViewController(logInViewController, animated: true, completion: nil)\n  }\n}\n\n// In all API requests, call the global error handler, e.g.\nlet query = PFQuery(className: \"Object\")\nquery.findObjectsInBackgroundWithBlock { (objects: [AnyObject]!, error: NSError!) -> Void in\n  if error == nil {\n    // Query Succeeded - continue your app logic here.\n  } else {\n    // Query Failed - handle an error.\n    ParseErrorHandlingController.handleParseError(error)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Limiting Query Results in Parse JavaScript\nDESCRIPTION: Shows how to limit the number of returned objects to 10 using the limit method in Parse JavaScript SDK. The query will return at most 10 results, which is crucial for reducing data transfer and improving mobile app responsiveness.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_59\n\nLANGUAGE: javascript\nCODE:\n```\nquery.limit(10); // limit to at most 10 results\n```\n\n----------------------------------------\n\nTITLE: Complex Query with Multiple Parameters in Parse Server (Bash and Python)\nDESCRIPTION: Shows how to construct a complex query using multiple parameters including where clause, ordering, limit, skip, and key selection. Demonstrates both cURL and Python implementations.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/queries.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -G \\\n  --data-urlencode 'where={\n   \"playerName\": {\n     \"$nin\": [\n       \"Jonathan Walsh\",\n       \"Dario Wunsch\",\n       \"Shawn Simon\"\n     ]\n   }\n  }' \\\n  --data-urlencode 'order=score,-name' \\\n  --data-urlencode 'limit=200' \\\n  --data-urlencode 'skip=400' \\\n  --data-urlencode 'keys=score,playerName' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/classes/GameScore\n```\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\nimport urllib.parse\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nparams = urllib.parse.urlencode({\"where\": json.dumps({\n    \"playerName\": {\n        \"$nin\": [\n            \"Jonathan Walsh\",\n            \"Dario Wunsch\",\n            \"Shawn Simon\"\n        ]\n    }\n}),\n\"order\": \"score,-name\",\n\"limit\": 200,\n\"skip\": 400,\n\"keys\": \"score,playerName\"})\nconnection.connect()\nconnection.request('GET', '/parse/classes/GameScore?%s' % params, '', {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Targeting Push Notifications by Platform in Parse PHP\nDESCRIPTION: These snippets demonstrate how to target push notifications to specific platforms (Android, iOS, Windows 8, Windows Phone 8) using Parse in PHP.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/push-notifications.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// Notification for Android users\n$queryAndroid = ParseInstallation::query();\n$queryAndroid->equalTo('deviceType', 'android');\n\nParsePush::send(array(\n  \"where\" => $queryAndroid,\n  \"data\" => array(\n    \"alert\" => \"Your suitcase has been filled with tiny robots!\"\n  )\n), true);\n\n// Notification for iOS users\n$queryIOS = ParseInstallation::query();\n$queryIOS->equalTo('deviceType', 'ios');\n\nParsePush::send(array(\n  \"where\" => $queryIOS,\n  \"data\" => array(\n    \"alert\" => \"Your suitcase has been filled with tiny apples!\"\n  )\n), true);\n\n// Notification for Windows 8 users\n$queryWindows = ParseInstallation::query();\n$queryWindows->equalTo('deviceType', 'winrt');\n\nParsePush::send(array(\n  \"where\" => $queryWindows,\n  \"data\" => array(\n    \"alert\" => \"Your suitcase has been filled with tiny surfaces!\"\n  )\n), true);\n\n// Notification for Windows Phone 8 users\n$queryWP8 = ParseInstallation::query();\n$queryWP8->equalTo('deviceType', 'winphone');\n\nParsePush::send(array(\n  \"where\" => $queryWP8,\n  \"data\" => array(\n    \"alert\" => \"Your suitcase is very hip; very metro.\"\n  )\n), true);\n```\n\n----------------------------------------\n\nTITLE: Adding New Schema in Parse Server (Python)\nDESCRIPTION: This Python snippet shows how to add a new schema to Parse Server using the http.client library. It creates a new 'City' class with a 'name' field. Authentication with Application ID and Master Key is required.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/schemas.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nconnection.connect()\nconnection.request('POST', '/parse/schemas/City', json.dumps({\n    \"className\": \"City\",\n    \"fields\": {\n        \"name\": {\n            \"type\": \"String\"\n        }\n    }\n}), {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-Master-Key\": \"${MASTER_KEY}\",\n    \"Content-Type\": \"application/json\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Example: Setting Specific Parse Server URL in PHP\nDESCRIPTION: Provides a concrete example of setting the Parse Server URL to 'https://example.com:1337' with the mount path 'parse' using the `ParseClient::setServerURL` method. This points the SDK to the correct server endpoint.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/setup.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nParseClient::setServerURL('https://example.com:1337','parse');\n```\n\n----------------------------------------\n\nTITLE: GitHub Secure Authentication Payload for Parse Server\nDESCRIPTION: Demonstrates the authentication payload format required by Parse Server for secure GitHub authentication, using an OAuth code.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/third-party-auth.md#2025-04-22_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\nauthData: {\n  \"code\": \"GITHUB_AUTH_CODE\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic Anonymous User Creation in Parse for Java\nDESCRIPTION: This snippet shows how to enable automatic creation of anonymous users at application startup. It ensures ParseUser.getCurrentUser() is never null and increments a run count for the user.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/users.md#2025-04-22_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nParseUser.enableAutomaticUser();\nParseUser.getCurrentUser().increment(\"RunCount\");\nParseUser.getCurrentUser().saveInBackground();\n```\n\n----------------------------------------\n\nTITLE: Parse Config Usage in JavaScript\nDESCRIPTION: Example of retrieving configuration parameters from Parse Config in Cloud Code, including handling of private parameters that require master key access.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/cloudcode/cloud-code-advanced.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = await Parse.Config.get({useMasterKey: true});\nconst privateParam = config.get(\"privateParam\");\n```\n\n----------------------------------------\n\nTITLE: Using Project Pipeline in Parse Aggregate Query\nDESCRIPTION: Shows how to use the project pipeline to select specific fields in the query result, similar to 'keys' or 'select' operations. This example selects only the 'name' field.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/queries.md#2025-04-22_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nconst pipeline = [\n  { $project: { name: 1 } }\n];\nconst query = new Parse.Query(\"User\");\nquery.aggregate(pipeline)\n  .then(function(results) {\n    // results contains only name field\n  })\n  .catch(function(error) {\n    // There was an error.\n  });\n```\n\n----------------------------------------\n\nTITLE: Modeling Relational Data with ParseObjects in PHP\nDESCRIPTION: This snippet describes forming one-to-one and one-to-many relationships between ParseObjects, using `set` operations and stored `objectId` references.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/objects.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// Create the post\n$myPost = new ParseObject(\"Post\");\n$myPost->set(\"title\", \"I'm Hungry\");\n$myPost->set(\"content\", \"Where should we go for lunch?\");\n\n// Create the comment\n$myComment = new ParseObject(\"Comment\");\n$myComment->set(\"content\", \"Let's do Sushirrito.\");\n\n// Add the post as a value in the comment\n$myComment->set(\"parent\", $myPost);\n\n// This will save both myPost and myComment\n$myComment->save();\n\n$post = new ParseObject(\"Post\", \"1zEcyElZ80\");\n\n$myComment->set(\"parent\", $post);\n\n$post = $fetchedComment->get(\"parent\");\n$post->fetch();\n$title = $post->get(\"title\");\n```\n\n----------------------------------------\n\nTITLE: Manual Sync of Local Changes\nDESCRIPTION: Shows how to manually sync pinned objects with Parse server using custom logic.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/local-datastore.md#2025-04-22_snippet_15\n\nLANGUAGE: java\nCODE:\n```\nParseQuery<ParseObject> query = ParseQuery.getQuery(\"GameScore\");\nquery.fromPin(\"MyChanges\");\nquery.findInBackground(new FindCallback<ParseObject>() {\n  public void done(List<ParseObject> scores, ParseException e) {\n    for (ParseObject score in scores) {\n      score.saveInBackground();\n      score.unpinInBackground(\"MyChanges\");\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving ParseFile Content in C#\nDESCRIPTION: Demonstrates how to download and access the content of a ParseFile using its URL property.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/files.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar applicantResumeFile = anotherApplication.Get<ParseFile>(\"applicantResumeFile\");\nvar resumeTextRequest = new WWW(applicantResumeFile.Url.AbsoluteUri);\nyield return resumeTextRequest;\nstring resumeText = resumeTextRequest.text;\n```\n\n----------------------------------------\n\nTITLE: Querying Local Datastore\nDESCRIPTION: Demonstrates how to query objects from the local datastore using PFQuery with the fromLocalDatastore option.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/local-datastore.md#2025-04-22_snippet_2\n\nLANGUAGE: objective-c\nCODE:\n```\nPFQuery *query = [PFQuery queryWithClassName:@\"GameScore\"];\n[query fromLocalDatastore];\n[query whereKey:@\"playerName\" equalTo:@\"Joe Bob\"];\n[[query findObjectsInBackground] continueWithBlock:^id(BFTask *task) {\n  if (task.error) {\n    NSLog(@\"Error: %@\", task.error);\n    return task;\n  }\n\n  NSLog(@\"Retrieved %d\", task.result.count);\n  return task;\n}];\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet query = PFQuery(className: \"GameScore\")\nquery.fromLocalDatastore()\nquery.whereKey(\"playerName\", equalTo: \"Joe Bob\")\nquery.findObjectsInBackground().continueWithBlock {\n    (task: BFTask!) -> AnyObject in\n    if let error = task.error {\n        print(\"Error: \\(error)\")\n        return task\n    }\n\n    print(\"Retrieved \\(task.result.count)\")\n    return task\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AsyncStorage for React Native\nDESCRIPTION: Setup code for configuring AsyncStorage in React Native/Expo environments for Parse SDK.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/getting-started.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n//Get your favorite AsyncStorage handler with import (ES6) or require\nimport { AsyncStorage } from 'react-native'; \n\n//Before using the SDK...\nParse.setAsyncStorage(AsyncStorage);\n```\n\n----------------------------------------\n\nTITLE: Responding to Parse Push Notification Payload in C#\nDESCRIPTION: Demonstrates how to register for the ParsePushNotificationReceived event to handle incoming push notifications and extract data from the payload.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/push-notifications.md#2025-04-22_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\nParsePush.ParsePushNotificationReceived += (sender, args) => {\n  var payload = args.Payload;\n  object objectId;\n  if (payload.TryGetValue(\"objectId\", out objectId)) {\n    DisplayRichMessageWithObjectId(objectId as string);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Using matchesKey Query in Parse SDK with Swift\nDESCRIPTION: Swift implementation of the whereKey:matchesKey:inQuery: method to find objects where a key matches the value of a key in another query's result set. This example finds users whose hometown teams have winning records.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/queries.md#2025-04-22_snippet_29\n\nLANGUAGE: swift\nCODE:\n```\nlet teamQuery = PFQuery(className:\"Team\")\nteamQuery.whereKey(\"winPct\", greaterThan:0.5)\nlet userQuery = PFUser.query()\nuserQuery?.whereKey(\"hometown\", matchesKey: \"city\", in: teamQuery)\nuserQuery?.findObjectsInBackground(block: { (results: [PFObject]?, error: Error?) in\n    if let error = error {\n        // The query failed\n        print(error.localizedDescription)\n    } else {\n        // results will contain users with a hometown team with a winning record\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Sorting Query Results in Ascending Order in Parse Server\nDESCRIPTION: This code demonstrates how to use the 'order' parameter to sort query results in ascending order. The example sorts GameScore objects by the 'score' field in ascending order.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/queries.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -G \\\n  --data-urlencode 'order=score' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/classes/GameScore\n```\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\nimport urllib.parse\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nparams = urllib.parse.urlencode({\"order\": \"score\"})\nconnection.connect()\nconnection.request('GET', '/parse/classes/GameScore?%s' % params, '', {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Calling Cloud Function from C#\nDESCRIPTION: Example of how to call the averageStars Cloud Function from a C# client. The function accepts a movie parameter and returns the average rating.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_81\n\nLANGUAGE: cs\nCODE:\n```\nIDictionary<string, object> dictionary = new Dictionary<string, object>\n{\n    { \"movie\", \"The Matrix\" }\n};\n\nParseCloud.CallFunctionAsync<float>(\"averageStars\", dictionary).ContinueWith(t => {\n  var result = t.Result;\n  // result is 4.5\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching All Schemas in Parse Server (Python)\nDESCRIPTION: This Python snippet shows how to fetch schemas for all classes in a Parse Server application using the http.client library. It requires the Application ID and Master Key for authentication.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/schemas.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nconnection.connect()\nconnection.request('GET', '/parse/schemas', '', {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-Master-Key\": \"${MASTER_KEY}\",\n    \"Content-Type\": \"application/json\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Defining ACL Structure in Parse\nDESCRIPTION: This snippet shows the JSON structure for setting ACLs on Parse objects. The example gives a specific user read/write access while also making the object publicly readable.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/users.md#2025-04-22_snippet_31\n\nLANGUAGE: jsonc\nCODE:\n```\n\"ACL\": {\n  \"3KmCvT7Zsb\": {\n    \"read\": true,\n    \"write\": true\n  },\n  \"*\": {\n    \"read\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Facebook Login Implementation with Parse\nDESCRIPTION: Implementation of Facebook login using ParseFacebookUtils, including handling of new user creation and existing user login scenarios.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/users.md#2025-04-22_snippet_18\n\nLANGUAGE: java\nCODE:\n```\nParseFacebookUtils.logInWithReadPermissionsInBackground(this, permissions, new LogInCallback() {\n  @Override\n  public void done(ParseUser user, ParseException err) {\n    if (user == null) {\n      Log.d(\"MyApp\", \"Uh oh. The user cancelled the Facebook login.\");\n    } else if (user.isNew()) {\n      Log.d(\"MyApp\", \"User signed up and logged in through Facebook!\");\n    } else {\n      Log.d(\"MyApp\", \"User logged in through Facebook!\");\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Complex Local Datastore Query\nDESCRIPTION: Demonstrates a more complex query with conditions and error handling for local datastore.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/local-datastore.md#2025-04-22_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nParseQuery<ParseObject> query = ParseQuery.getQuery(\"GameScore\");\nquery.whereEqualTo(\"playerName\", \"Joe Bob\");\nquery.fromLocalDatastore();\n// If data is protected by Role based ACLs:\nquery.ignoreAcls();\nquery.findInBackground(new FindCallback<ParseObject>() {\n    public void done(List<ParseObject> scoreList,\n                     ParseException e) {\n        if (e == null) {\n            Log.d(\"score\", \"Retrieved \" + scoreList.size());\n        } else {\n            Log.d(\"score\", \"Error: \" + e.getMessage());\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Using the then Method with Parse Promises\nDESCRIPTION: Basic example of using the then method on a Promise, showing how to handle both success and error cases.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/promises.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nobj.save().then(function(obj) {\n  // the object was saved successfully.\n}, function(error) {\n  // the save failed.\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Within Distance Radius - C#\nDESCRIPTION: Performs a radius-based query to find all places within a specified distance from a reference point.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/geopoints.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nParseGeoPoint userGeoPoint = ParseUser.CurrentUser.Get<ParseGeoPoint>(\"location\");\nParseQuery<ParseObject> query = ParseObject.GetQuery(\"PlaceObject\")\n    .WhereWithinDistance(\"location\", userGeoPoint, ParseGeoDistance.FromMiles(5));\nIEnumerable<ParseObject> nearbyLocations = await query.FindAsync();\n// nearbyLocations contains PlaceObjects within 5 miles of the user's location\n```\n\n----------------------------------------\n\nTITLE: Creating iOS Installation Object via Parse REST API - Bash\nDESCRIPTION: Demonstrates how to use cURL to create an installation object for an iOS device on Parse Server. Dependencies include a valid Parse Server endpoint, Application ID, and REST API key. Required parameters: deviceType ('ios'), a 64-character deviceToken, and the channels array. The 'Content-Type' header must be 'application/json', and successful creation returns a 201 status with the new resource's location. The command must be run in an environment with network access to the Parse server.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/push-notifications.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n  -H \"X-Parse-Application-Id: <span class=\\\"custom-parse-server-appid\\\">${APPLICATION_ID}</span>\" \\\n  -H \"X-Parse-REST-API-Key: <span class=\\\"custom-parse-server-restapikey\\\">${REST_API_KEY}</span>\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"deviceType\": \"ios\",\n        \"deviceToken\": \"0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef\",\n        \"channels\": [\n          \"\"\n        ]\n      }' \\\n  <span class=\\\"custom-parse-server-protocol\\\">https</span>://<span class=\\\"custom-parse-server-url\\\">YOUR.PARSE-SERVER.HERE</span><span class=\\\"custom-parse-server-mount\\\">/parse/</span>installations\n```\n\n----------------------------------------\n\nTITLE: Pinning Multiple Objects\nDESCRIPTION: Shows how to pin multiple ParseObjects simultaneously using pinAllInBackground method.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/local-datastore.md#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nParseObject.pinAllInBackground(listOfObjects);\n```\n\n----------------------------------------\n\nTITLE: Extended Error Handling with Connection Check\nDESCRIPTION: Enhanced error handling that includes checking for connection failures to Parse Server\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/handling-errors.md#2025-04-22_snippet_3\n\nLANGUAGE: objective-c\nCODE:\n```\n- (void)callbackForGet:(PFObject *)result error:(NSError *)error {\n    if (result) {\n        NSLog(@\"Everything went fine!\");\n    } else {\n        if ([error code] == kPFErrorObjectNotFound) {\n            NSLog(@\"Uh oh, we couldn't find the object!\");\n        // Now also check for connection errors:\n        } else if ([error code] == kPFErrorConnectionFailed) {\n            NSLog(@\"Uh oh, we couldn't even connect to the Parse Cloud!\");\n        } else if (error) {\n            NSLog(@\"Error: %@\", [error userInfo][@\"error\"]);\n        }\n    }\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\nfunc callbackForGet(result: PFObject?, error: NSError?) -> Void {\n    if let result = result {\n        print(\"Everything went fine!\")\n    } else {\n        if let error = error {\n            if error._code == PFErrorCode.errorObjectNotFound.rawValue {\n                print(\"Uh oh, we couldn't find the object!\")\n                // Now also check for connection errors:\n            } else if error._code == PFErrorCode.errorConnectionFailed.rawValue {\n                print(\"Uh oh, we couldn't even connect to the Parse Cloud!\")\n            } else {\n                let errorString = error._userInfo![\"error\"] as? NSString\n                print(\"Error: \\(errorString)\")\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Cached Results from Local Datastore - Parse SDK Swift\nDESCRIPTION: This Swift example retrieves cached query results from the local datastore by configuring the PFQuery source before asynchronously executing the search. It requires the Parse Swift SDK, and uses continueWithBlock for completion. The query fetches \\\"GameScore\\\" objects sorted by score; on success, results are returned for further local use. Key parameter is the pin state of objects within the local datastore.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/local-datastore.md#2025-04-22_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nlet query = PFQuery(className:\"GameScore\")\nquery.fromLocalDatastore()\nquery.orderByDescending(\"score\")\n\nquery.findObjectsInBackground().continueWithBlock({\n  (task: BFTask!) -> AnyObject! in\n    if task.error != nil {\n        // There was an error.\n        return task\n    }\n\n    // Yay! Cached scores!\n    return task\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing ParseQueryAdapter in Android Activity\nDESCRIPTION: Example showing how to implement a basic ParseQueryAdapter to display data in a ListView, including configuration for text and image display.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/user-interface.md#2025-04-22_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n// Inside an Activity\npublic void onCreate(Bundle savedInstanceState) {\n  super.onCreate(savedInstanceState);\n  // Uses a layout with a ListView (id: \"listview\"), which uses our Adapter.\n  setContentView(R.layout.main);\n\n  ParseQueryAdapter<ParseObject> adapter = new ParseQueryAdapter<ParseObject>(this, \"Instrument\");\n  adapter.setTextKey(\"name\");\n  adapter.setImageKey(\"photo\");\n\n  ListView listView = (ListView) findViewById(R.id.listview);\n  listView.setAdapter(adapter);\n}\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from Channels in Parse iOS SDK\nDESCRIPTION: Shows how to unsubscribe an installation from a channel in Parse. This example demonstrates removing the 'Giants' channel from a user's installation when they are no longer fans.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/push-notifications.md#2025-04-22_snippet_5\n\nLANGUAGE: objective-c\nCODE:\n```\n// When users indicate they are no longer Giants fans, we unsubscribe them.\nPFInstallation *currentInstallation = [PFInstallation currentInstallation];\n[currentInstallation removeObject:@\"Giants\" forKey:@\"channels\"];\n[currentInstallation saveInBackground];\n```\n\nLANGUAGE: swift\nCODE:\n```\n// When users indicate they are Giants fans, we subscribe them to that channel.\nlet currentInstallation = PFInstallation.currentInstallation()\ncurrentInstallation.removeObject(\"Giants\", forKey: \"channels\")\ncurrentInstallation.saveInBackground()\n```\n\n----------------------------------------\n\nTITLE: Chaining Multiple Promises in Parse JavaScript SDK\nDESCRIPTION: Extended example of chaining multiple Promises together to perform a sequence of operations on Parse data without nesting callbacks.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/promises.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst query = new Parse.Query(\"Student\");\nquery.descending(\"gpa\");\nquery.find().then(function(students) {\n  students[0].set(\"valedictorian\", true);\n  return students[0].save();\n\n}).then(function(valedictorian) {\n  return query.find();\n\n}).then(function(students) {\n  students[1].set(\"salutatorian\", true);\n  return students[1].save();\n\n}).then(function(saledictorian) {\n  // Everything is done!\n\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Exact Values - Parse Server REST API\nDESCRIPTION: Demonstrates how to query Parse Server for exact value matches using the where parameter. This example queries for Sean Plott's scores where cheat mode is false.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/queries.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -G \\\n  --data-urlencode 'where={\"playerName\":\"Sean Plott\",\"cheatMode\":false}' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/classes/GameScore\n```\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\nimport urllib.parse\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nparams = urllib.parse.urlencode({\"where\": json.dumps({\n    \"playerName\": \"Sean Plott\",\n    \"cheatMode\": False\n})})\nconnection.connect()\nconnection.request('GET', '/parse/classes/GameScore?%s' % params, '', {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Limiting ParseQuery Results in PHP\nDESCRIPTION: This snippet illustrates how to set a limit on the number of results returned by a `ParseQuery` using the `limit` method. This technique is essential for managing the volume of returned data, with no upper limit enforced by Parse Server.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/queries.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$query->limit(10); // limit to at most 10 results\n```\n\n----------------------------------------\n\nTITLE: Handling Delete Event in Parse LiveQuery\nDESCRIPTION: Implementation of the Delete event handler that triggers when a ParseObject matching the QueryBuilder criteria is deleted. Shows how to access object metadata.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dart/queries.md#2025-04-22_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nsubscription.on(LiveQueryEvent.delete, (value) {\n    print('*** DELETE ***: ${DateTime.now().toString()}\\n $value ');\n    print((value as ParseObject).objectId);\n    print((value as ParseObject).updatedAt);\n    print((value as ParseObject).createdAt);\n    print((value as ParseObject).get('objectId'));\n    print((value as ParseObject).get('updatedAt'));\n    print((value as ParseObject).get('createdAt'));\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Single Object from Local Datastore\nDESCRIPTION: Example of retrieving a specific object from local datastore using getInBackground.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/local-datastore.md#2025-04-22_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nquery.getInBackground(\"xWMyZ4YE\", new GetCallback<ParseObject>() {\n    public void done(ParseObject object, ParseException e) {\n        if (e == null) {\n            // object will be your game score\n        } else {\n            // something went wrong\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Application Class in AndroidManifest.xml\nDESCRIPTION: Registers the custom Application class in the AndroidManifest.xml file, which is required for Parse initialization to work properly.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/getting-started.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n <application\n   android:name=\".App\"\n   ...>\n   ...\n </application>\n```\n\n----------------------------------------\n\nTITLE: Tracking App Opens with Parse Analytics in iOS/OS X\nDESCRIPTION: Implementation of basic app open tracking using PFAnalytics. Shows how to track application launches in both iOS and OS X environments.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/analytics.md#2025-04-22_snippet_0\n\nLANGUAGE: objective_c\nCODE:\n```\n// in iOS\n[PFAnalytics trackAppOpenedWithLaunchOptions:launchOptions];\n\n// in OS X\n[PFAnalytics trackAppOpenedWithLaunchOptions:nil];\n```\n\nLANGUAGE: swift\nCODE:\n```\n// in iOS\nPFAnalytics.trackAppOpened(launchOptions: launchOptions)\n\n// in OS X\nPFAnalytics.trackAppOpenedWithLaunchOptions(nil)\n```\n\n----------------------------------------\n\nTITLE: Querying with equalTo and containedIn in PHP\nDESCRIPTION: Shows how to create an efficient query in PHP using equalTo and containedIn methods that can leverage database indexes for better performance.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$query = new ParseQuery(\"GameScore\");\n\n$query->equalTo(\"score\", 50);\n$query->containedIn(\"playerName\",\n    [\"Jonathan Walsh\", \"Dario Wunsch\", \"Shawn Simon\"]);\n```\n\n----------------------------------------\n\nTITLE: Performing Geo Queries in Parse\nDESCRIPTION: Example of querying for objects near a specific location using Parse's geo query capabilities.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/geopoints.md#2025-04-22_snippet_5\n\nLANGUAGE: objective_c\nCODE:\n```\n// User's location\nPFGeoPoint *userGeoPoint = userObject[@\"location\"];\n// Create a query for places\nPFQuery *query = [PFQuery queryWithClassName:@\"PlaceObject\"];\n// Interested in locations near user.\n[query whereKey:@\"location\" nearGeoPoint:userGeoPoint];\n// Limit what could be a lot of points.\nquery.limit = 10;\n// Final list of objects\nplacesObjects = [query findObjects];\n```\n\nLANGUAGE: swift\nCODE:\n```\n// User's location\nlet userGeoPoint = userObject[\"location\"] as PFGeoPoint\n// Create a query for places\nvar query = PFQuery(className:\"PlaceObject\")\n// Interested in locations near user.\nquery.whereKey(\"location\", nearGeoPoint:userGeoPoint)\n// Limit what could be a lot of points.\nquery.limit = 10\n// Final list of objects\nplacesObjects = query.findObjects()\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from Parse LiveQuery\nDESCRIPTION: Shows how to unsubscribe from a LiveQuery subscription to stop receiving events and close the WebSocket connection.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dart/queries.md#2025-04-22_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nliveQuery.client.unSubscribe(subscription);\n```\n\n----------------------------------------\n\nTITLE: Querying Books with Included Authors in PHP\nDESCRIPTION: This PHP snippet demonstrates how to query Book objects and include their related Author objects. It uses the includeKey method to fetch the associated authors along with each book in a single query.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/relations.md#2025-04-22_snippet_31\n\nLANGUAGE: php\nCODE:\n```\n// set up our query for the Book object\n$bookQuery = new ParseQuery(\"Book\");\n\n// configure any constraints on your query...\n// tell the query to fetch all of the Author objects along with the Book\n$bookQuery->includeKey(\"authors\");\n\n// execute the query\n$books= $bookQuery->find();\n```\n\n----------------------------------------\n\nTITLE: Importing Parse Module\nDESCRIPTION: Import statements for including Parse SDK functionality in source files for both Objective-C and Swift.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/getting-started.md#2025-04-22_snippet_2\n\nLANGUAGE: objective-c\nCODE:\n```\n@import ParseCore;\n```\n\nLANGUAGE: swift\nCODE:\n```\nimport ParseCore\n```\n\n----------------------------------------\n\nTITLE: Creating an S3 Bucket Policy for Parse Server in JSON\nDESCRIPTION: This JSON snippet provides a policy document for AWS S3 to allow required permissions for Parse Server storage. Ensure the bucket name is replaced with the actual S3 bucket name being used.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/file-adapters.md#2025-04-22_snippet_5\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"s3:*\"\n            ],\n            \"Resource\": [\n                \"arn:aws:s3:::BUCKET_NAME\",\n                \"arn:aws:s3:::BUCKET_NAME/*\"\n            ]\n        }\n     ]\n }\n```\n\n----------------------------------------\n\nTITLE: Parse Query with Multiple Constraints\nDESCRIPTION: Example of combining multiple query constraints using both LINQ and method chaining approaches.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/queries.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar query1 = from gameScore in ParseObject.GetQuery(\"GameScore\")\n             where !gameScore.Get<string>(\"playerName\").Equals(\"Michael Yabuti\")\n             where gameScore.Get<int>(\"playerAge\") > 18\n             select gameScore;\n\nvar query2 = from gameScore in ParseObject.GetQuery(\"GameScore\")\n             where !gameScore.Get<string>(\"playerName\").Equals(\"Michael Yabuti\")\n                 && gameScore.Get<int>(\"playerAge\") > 18\n             select gameScore;\n\n// or using LINQ\nvar query = ParseObject.GetQuery(\"GameScore\")\n    .WhereNotEqualTo(\"playerName\", \"Michael Yabuti\")\n    .WhereGreaterThan(\"playerAge\", 18);\n```\n\n----------------------------------------\n\nTITLE: Loading Remote Images with PFImageView in Swift\nDESCRIPTION: Swift implementation showing how to use PFImageView to display a placeholder image and then load a remote image from a PFFileObject stored in Parse Cloud with automatic caching.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/user-interface.md#2025-04-22_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\nlet imageView = PFImageView()\nimageView.image = UIImage(named: \"...\") // placeholder image\nimageView.file = someObject.picture // remote image\n\nimageView.loadInBackground()\n```\n\n----------------------------------------\n\nTITLE: Comparison Queries in PHP\nDESCRIPTION: Using `lessThan`, `lessThanOrEqualTo`, `greaterThan`, and `greaterThanOrEqualTo`, this snippet showcases how to set constraints on sortable fields. These operations refine queries based on comparison criteria.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/queries.md#2025-04-22_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n// Restricts to wins < 50\n$query->lessThan(\"wins\", 50);\n\n// Restricts to wins <= 50\n$query->lessThanOrEqualTo(\"wins\", 50);\n\n// Restricts to wins > 50\n$query->greaterThan(\"wins\", 50);\n\n// Restricts to wins >= 50\n$query->greaterThanOrEqualTo(\"wins\", 50);\n```\n\n----------------------------------------\n\nTITLE: Using GeoBox for Area Queries in Parse\nDESCRIPTION: This snippet demonstrates how to find ParseObjects within a specified rectangular area using 'withinGeoBox' in a ParseQuery. It involves defining southwest and northeast bounds and querying for objects, such as pizza places, within that geographic box.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/geopoints.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$southwestOfSF = new ParseGeoPoint(37.708813, -122.526398);\n$northeastOfSF = new ParseGeoPoint(37.822802, -122.373962);\n\n$query = new ParseQuery(\"PizzaPlaceObject\");\n$query->withinGeoBox(\"location\", $southwestOfSF, $northeastOfSF);\n$pizzaPlacesInSF = $query->find();\n```\n\n----------------------------------------\n\nTITLE: Handling Push Notifications in Xamarin iOS\nDESCRIPTION: Shows implementation of ReceivedRemoteNotification in AppDelegate for Xamarin iOS to handle push notifications using ParsePush.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/push-notifications.md#2025-04-22_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\npublic override void ReceivedRemoteNotification(UIApplication application, NSDictionary userInfo) {\n  base.ReceivedRemoteNotification(application, userInfo);\n\n  // We need this to fire userInfo into ParsePushNotificationReceived.\n  ParsePush.HandlePush(userInfo);\n}\n```\n\n----------------------------------------\n\nTITLE: Scheduling Future Push Notifications with Parse in Android\nDESCRIPTION: Demonstrates how to schedule a push notification to be sent at a future time using ParsePush.setPushTime(). The scheduled time can be up to two weeks in the future.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/push-notifications.md#2025-04-22_snippet_16\n\nLANGUAGE: java\nCODE:\n```\nlong tomorrowTime = ...; // in seconds\n\n// Send push notification with expiration interval\nParsePush push = new ParsePush();\npush.setPushTime(tomorrowTime);\npush.setMessage(\"You previously created a reminder for the game today\");\npush.sendPushInBackground();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Installation Object via Parse REST API - Bash\nDESCRIPTION: Gives an example cURL GET request to obtain the details of an installation object using its objectId through the Parse REST API. Requires valid Application ID, REST API Key, the Parse server endpoint, and the objectId of the installation to retrieve. Returns a JSON description of all the object's fields. This command is essential for verifying the current state of registered devices and their push configuration.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/push-notifications.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\\n  -H \"X-Parse-Application-Id: <span class=\\\"custom-parse-server-appid\\\">${APPLICATION_ID}</span>\" \\\n  -H \"X-Parse-REST-API-Key: <span class=\\\"custom-parse-server-restapikey\\\">${REST_API_KEY}</span>\" \\\n  <span class=\\\"custom-parse-server-protocol\\\">https</span>://<span class=\\\"custom-parse-server-url\\\">YOUR.PARSE-SERVER.HERE</span><span class=\\\"custom-parse-server-mount\\\">/parse/</span>installations/mrmBZvsErB\n```\n\n----------------------------------------\n\nTITLE: Saving ParseObject in C#\nDESCRIPTION: Demonstrates how to create and save a new GameScore object to Parse Server using C#.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/objects.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nParseObject gameScore = new ParseObject(\"GameScore\");\ngameScore[\"score\"] = 1337;\ngameScore[\"playerName\"] = \"Sean Plott\";\nawait gameScore.SaveAsync();\n```\n\n----------------------------------------\n\nTITLE: Using ParseQuery's First Method in PHP\nDESCRIPTION: This example shows how to fetch a single object matching a query condition using the `first` method, which is convenient when only one result is needed. It selects an object from the 'GameScore' class using the 'playerEmail' field.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/queries.md#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$query = new ParseQuery(\"GameScore\");\n$query->equalTo(\"playerEmail\", \"dstemkoski@example.com\");\n$object = $query->first();\n```\n\n----------------------------------------\n\nTITLE: Caching Query Results by Pinning with Labels - Parse SDK Swift\nDESCRIPTION: This Swift snippet shows how to fetch new query results from the network, unpin any previously cached objects labeled \\\"HighScores\\\", and pin the updated results. It leverages the Parse SDK for Swift, asynchronous querying, and completion chaining via continueWithSuccessBlock. Required parameters include the class name (\\\"GameScore\\\"), the ordering key (\\\"score\\\"), and the cache label. Expected behavior is an updated local pin of the most recent scores for caching purposes.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/local-datastore.md#2025-04-22_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nlet query = PFQuery(className:\"GameScore\")\nquery.orderByDescending(\"score\")\n\n// Query for new results from the network\nquery.findObjectsInBackground().continueWithSuccessBlock({\n    (task: BFTask!) -> AnyObject! in\n\n    return PFObject.unpinAllObjectsInBackgroundWithName(\"HighScores\").continueWithSuccessBlock({\n        (ignored: BFTask!) -> AnyObject! in\n\n        // Cache new results\n        let scores = task.result as? NSArray\n        return PFObject.pinAllInBackground(scores as [AnyObject], withName: \"HighScores\")\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Setting ACL on Current User in C#\nDESCRIPTION: This C# code snippet shows how to restrict data access by setting an Access Control List (ACL) on the current Parse user. It creates a new ParseACL instance specific to the current user and assigns it to that user's ACL property.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/security.md#2025-04-22_snippet_4\n\nLANGUAGE: c#\nCODE:\n```\nvar user = ParseUser.CurrentUser;\nuser.ACL = new ParseACL(user);\n```\n\n----------------------------------------\n\nTITLE: Sending Push Notification with Query in Parse .NET SDK\nDESCRIPTION: This code shows how to use a ParseQuery to target a subset of installations for push notifications. It filters installations based on a stored boolean value and sends a push to those that match the criteria.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/push-notifications.md#2025-04-22_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nvar push = new ParsePush();\npush.Query = from installation in ParseInstallation.Query\n             where installation.Get<bool>(\"injuryReports\") == true\n             select installation;\npush.Alert = \"Willie Hayes injured by own pop fly.\";\nawait push.SendAsync();\n```\n\n----------------------------------------\n\nTITLE: ParseLiveList with Lazy Loading and Preloaded Columns\nDESCRIPTION: Advanced implementation showing lazy loading configuration with preloaded columns and pointer field access.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dart/queries.md#2025-04-22_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\nParseLiveListWidget<ParseObject>(\n  query: query,\n  lazyLoading: true,\n  preloadedColumns: [\"test1\", \"sender.username\"],\n  childBuilder:\n      (BuildContext context, ParseLiveListElementSnapshot<ParseObject> snapshot) {\n    if (snapshot.failed) {\n      return const Text('something went wrong!');\n    } else if (snapshot.hasData) {\n      return ListTile(\n        title: Text(\n          snapshot.loadedData.get<String>(\"text\"),\n        ),\n      );\n    } else {\n      return ListTile(\n        title: Text(\n          \"loading comment from: ${snapshot.preLoadedData?.get<ParseObject>(\"sender\")?.get<String>(\"username\")}\",\n        ),\n      );\n    }\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving ParseFile Content in C#\nDESCRIPTION: Shows how to retrieve and download the content of a ParseFile using HttpClient.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/files.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar applicantResumeFile = anotherApplication.Get<ParseFile>(\"applicantResumeFile\");\nstring resumeText = await new HttpClient().GetStringAsync(applicantResumeFile.Url);\n```\n\n----------------------------------------\n\nTITLE: Executing a Cloud Function that returns a ParseObject in Dart\nDESCRIPTION: Demonstrates how to call a Parse Cloud Function that returns a ParseObject and check the response. The example shows how to handle the successful response and access the returned ParseObject's className property.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dart/cloud-code.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nfinal ParseCloudFunction function = ParseCloudFunction('hello');\nfinal ParseResponse result =\n    await function.executeObjectFunction<ParseObject>();\nif (result.success) {\n  if (result.result is ParseObject) {\n    final ParseObject parseObject = result.result;\n    print(parseObject.className);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Linking Existing Parse Users to Facebook with JavaScript\nDESCRIPTION: Demonstrates associating an existing Parse.User account with a Facebook account in JavaScript using Parse.FacebookUtils. Successful linking updates user data to include Facebook credentials.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/users.md#2025-04-22_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nif (!Parse.FacebookUtils.isLinked(user)) {\n  try  {\n    await Parse.FacebookUtils.link(user);\n    alert(\"Woohoo, user logged in with Facebook!\");\n  } catch(error) {}\n    alert(\"User cancelled the Facebook login or ddid not fully authorize.\");\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Password Reset in Parse C#\nDESCRIPTION: Demonstrates how to initiate a password reset flow by sending a reset email to the user's email address.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/users.md#2025-04-22_snippet_7\n\nLANGUAGE: cs\nCODE:\n```\nawait ParseUser.RequestPasswordResetAsync(\"email@example.com\");\n```\n\n----------------------------------------\n\nTITLE: Creating Follow Relationship - Parse Java\nDESCRIPTION: This Java snippet creates an entry in the Parse Follow table, establishing a follow relationship between users. It requires the Parse Java SDK to manage Parse objects.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/relations.md#2025-04-22_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n// suppose we have a user we want to follow\nParseUser otherUser = ...\n\n// create an entry in the Follow table\nParseObject follow = new ParseObject(\"Follow\");\nfollow.put(\"from\", ParseUser.getCurrentUser());\nfollow.put(\"to\", otherUser);\nfollow.put(\"date\", Date());\nfollow.saveInBackground();\n```\n\n----------------------------------------\n\nTITLE: Linking User Account with Facebook in Parse (Python)\nDESCRIPTION: Demonstrates how to link an existing user account with a Facebook account using Parse Server's REST API in Python. It sends a PUT request with the user's Facebook authentication data.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/users.md#2025-04-22_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nconnection.connect()\nconnection.request('PUT', '/parse/users/uMz0YZeAqc', json.dumps({\n    \"authData\": {\n        \"facebook\": {\n            \"id\": \"123456789\",\n            \"access_token\": \"SaMpLeAAibS7Q55FSzcERWIEmzn6rosftAr7pmDME10008bWgyZAmv7mziwfacNOhWkgxDaBf8a2a2FCc9Hbk9wAsqLYZBLR995wxBvSGNoTrEaL\",\n            \"expiration_date\": \"2022-01-01T12:23:45.678Z\"\n        }\n    }\n}), {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\",\n    \"X-Parse-Session-Token\": \"r:samplei3l83eerhnln0ecxgy5\",\n    \"Content-Type\": \"application/json\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Configuring Postgres Connection URL in Parse Server\nDESCRIPTION: Example of a Postgres connection URL with available configuration options. This URL format allows configuration of SSL, connection pooling, timeouts, and other database parameters when connecting Parse Server to a Postgres database.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/database.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npostgres://localhost:5432/db?ssl=boolean&rejectUnauthorized=boolean&ca=/path/to/file&pfx=/path/to/file&cert=/path/to/file&key=/path/to/file&passphrase=string&secureOptions=number&client_encoding=string&application_name=string&fallback_application_name=string&max=number&query_timeout=idleTimeoutMillis=number&poolSize=number&binary=boolean&keepAlive=boolean\n```\n\n----------------------------------------\n\nTITLE: Monitoring ParseFile Upload Progress in C#\nDESCRIPTION: Demonstrates how to track upload progress when saving a ParseFile using the Progress object.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/files.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nbyte[] data = System.Text.Encoding.UTF8.GetBytes(\"Working at Parse is great!\");\nParseFile file = new ParseFile(\"resume.txt\", data);\n\nawait file.SaveAsync(new Progress<ParseUploadProgressEventArgs>(e => {\n    // Check e.Progress to get the progress of the file upload\n}));\n```\n\n----------------------------------------\n\nTITLE: Password Reset in Parse Server GraphQL\nDESCRIPTION: Shows how to trigger a password reset email for a user. Requires configured email adapter in Parse Server.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/users.md#2025-04-22_snippet_5\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"X-Parse-Application-Id\": \"APPLICATION_ID\"\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\nmutation resetPassword {\n  resetPassword(input: { email: \"email@email.email\" }) {\n    ok\n  }\n}\n```\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"data\": {\n    \"resetPassword\": {\n      \"ok\": true,\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Returned Fields in Parse JavaScript\nDESCRIPTION: Shows how to limit which fields are returned from a Parse query using select in the JavaScript SDK. Accepts parameters specifying which fields to fetch (e.g., score, playerName) for efficient data use. Results will only contain these fields.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_69\n\nLANGUAGE: javascript\nCODE:\n```\nvar GameScore = Parse.Object.extend(\"GameScore\");\nvar query = new Parse.Query(GameScore);\nquery.select(\"score\", \"playerName\");\nquery.find().then(function(results) {\n  // each of results will only have the selected fields available.\n});\n```\n\n----------------------------------------\n\nTITLE: Sorting Query Results by Multiple Fields in Parse Server\nDESCRIPTION: This example demonstrates how to sort query results by multiple fields using a comma-separated list with the 'order' parameter. The query sorts GameScore objects by 'score' in ascending order and 'name' in descending order.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/queries.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -G \\\n  --data-urlencode 'order=score,-name' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/classes/GameScore\n```\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\nimport urllib.parse\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nparams = urllib.parse.urlencode({\"order\": \"score, -name\"})\nconnection.connect()\nconnection.request('GET', '/parse/classes/GameScore?%s' % params, '', {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Subscribed Channels in C#\nDESCRIPTION: Shows how to access the currently subscribed channels from the ParseInstallation object.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/push-notifications.md#2025-04-22_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nvar installation = ParseInstallation.CurrentInstallation\nIEnumerable<string> subscribedChannels = installation.Channels;\n```\n\n----------------------------------------\n\nTITLE: Initializing Parse SDK with Custom Network Client in Dart\nDESCRIPTION: Initialization of the Parse SDK using a custom network client (ParseDioClient) for enhanced features like progress callback during file uploads.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/flutter/getting-started.md#2025-04-22_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nawait Parse().initialize(\n  //...\n  clientCreator: ({bool? sendSessionId, SecurityContext? securityContext}) => ParseDioClient(sendSessionId: sendSessionId, securityContext: securityContext),\n);\n```\n\n----------------------------------------\n\nTITLE: Tracking Custom Events with Dimensions in Parse Analytics\nDESCRIPTION: Demonstrates how to track custom events with additional dimension data for segmentation. This example tracks apartment listing searches with price range, source, and day type dimensions.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/analytics.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nMap<String, String> dimensions = new HashMap<String, String>();\n// Define ranges to bucket data points into meaningful segments\ndimensions.put(\"priceRange\", \"1000-1500\");\n// Did the user filter the query?\ndimensions.put(\"source\", \"craigslist\");\n// Do searches happen more often on weekdays or weekends?\ndimensions.put(\"dayType\", \"weekday\");\n// Send the dimensions to Parse along with the 'search' event\nParseAnalytics.trackEvent(\"search\", dimensions);\n```\n\n----------------------------------------\n\nTITLE: Sending Push Notification with Basic Query Filter\nDESCRIPTION: Demonstrates how to send a push notification to installations filtered by a basic query condition (injuryReports=true). Shows implementation in both cURL and Python using the Parse REST API.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/push-notifications.md#2025-04-22_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"where\": {\n          \"injuryReports\": true\n        },\n        \"data\": {\n          \"alert\": \"Willie Hayes injured by own pop fly.\"\n        }\n      }' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/push\n```\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nconnection.connect()\nconnection.request('POST', '/parse/push', json.dumps({\n    \"where\": {\n        \"injuryReports\": True\n    },\n    \"data\": {\n        \"alert\": \"Willie Hayes injured by own pop fly.\"\n    }\n}), {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\",\n    \"Content-Type\": \"application/json\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Using Parse Analytics as a Lightweight Error Tracker\nDESCRIPTION: Shows how to use Parse Analytics as a simple error tracking system. This implementation tracks error occurrences by their error code, allowing monitoring of error rates and frequencies.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/analytics.md#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nMap<String, String> dimensions = new HashMap<String, String>();\ndimensions.put('code', Integer.toString(error.getCode()));\nParseAnalytics.trackEvent('error', dimensions);\n```\n\n----------------------------------------\n\nTITLE: Querying for Parse Users in PHP\nDESCRIPTION: This snippet shows how to create a query for Parse users. It demonstrates filtering users based on a specific criteria, in this case, querying for female users.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/users.md#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$query = ParseUser::query();\n$query->equalTo(\"gender\", \"female\"); \n$results = $query->find();\n```\n\n----------------------------------------\n\nTITLE: Saving a Single Object with Master Key Override - JavaScript\nDESCRIPTION: Demonstrates saving an individual Parse.Object using the master key to bypass class-level and object-level access controls. The save is performed with an options object specifying 'useMasterKey: true'. This is necessary when client roles or ACLs restrict writes but server logic must persist them. Input is an object to save; output is the persisted object.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/cloudcode/cloud-code.md#2025-04-22_snippet_47\n\nLANGUAGE: JavaScript\nCODE:\n```\n```javascript\nobject.save(null, { useMasterKey: true });\n```\n```\n\n----------------------------------------\n\nTITLE: Querying with equalTo and containedIn in Java\nDESCRIPTION: Shows how to create an efficient query in Java using whereEqualTo and whereContainedIn methods that leverage database indexes.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nParseQuery<ParseObject> query = ParseQuery.getQuery(\"GameScore\");\nquery.whereEqualTo(\"score\", 50);\nquery.whereContainedIn(\"playerName\", Arrays.asList(\"Jonathan Walsh\", \"Dario Wunsch\", \"Shawn Simon\"));\n```\n\n----------------------------------------\n\nTITLE: Querying Books with Included Authors in Objective-C and Swift\nDESCRIPTION: This snippet shows how to query Book objects and include their related Author objects in both Objective-C and Swift. It demonstrates the use of includeKey to fetch associated authors with each book in a single query.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/relations.md#2025-04-22_snippet_30\n\nLANGUAGE: objective-c\nCODE:\n```\n// set up our query for the Book object\nPFQuery *bookQuery = [PFQuery queryWithClassName:@\"Book\"];\n\n// configure any constraints on your query...\n// tell the query to fetch all of the Author objects along with the Book\n[bookQuery includeKey:@\"authors\"];\n\n// execute the query\n[bookQuery findObjectsInBackgroundWithBlock:^(NSArray *objects, NSError *error) {\n    // objects is all of the Book objects, and their associated\n    // Author objects, too\n}];\n```\n\nLANGUAGE: swift\nCODE:\n```\n// set up our query for the Book object\nlet bookQuery = PFQuery(className: \"Book\")\n\n// configure any constraints on your query...\n// tell the query to fetch all of the Author objects along with the Book\nbookQuery.includeKey(\"authors\")\n\n// execute the query\nbookQuery.findObjectsInBackgroundWithBlock{\n    (objects: [AnyObject]?, error: NSError?) -> Void in\n    // objects is all of the Book objects, and their associated\n    // Author objects, too\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Parse User via REST API in Bash\nDESCRIPTION: Makes a GET request to retrieve a specific user by ID from the Parse Server. Requires the Application ID and REST API Key for authentication.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/users.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  https://YOUR.PARSE-SERVER.HERE/parse/users/g7y9tkhB7O\n```\n\n----------------------------------------\n\nTITLE: Querying Objects within a Polygon in Java\nDESCRIPTION: This snippet demonstrates how to query for objects that lie within or on a polygon using ParseQuery.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/geopoints.md#2025-04-22_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nParseGeoPoint point = new ParseGeoPoint(0.5, 0.5);\nParseQuery<ParseObject> query = ParseQuery.getQuery(\"PlaceObject\");\nquery.wherePolygonContains(\"location\", point);\n```\n\n----------------------------------------\n\nTITLE: Initializing Parse SDK with Custom Network Client in Dart\nDESCRIPTION: Initialization of the Parse SDK using a custom network client (ParseDioClient) instead of the default ParseHTTPClient. This allows for additional features like progress callbacks for file uploads.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dart/getting-started.md#2025-04-22_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nawait Parse().initialize(\n  //...\n  clientCreator: ({bool? sendSessionId, SecurityContext? securityContext}) => ParseDioClient(sendSessionId: sendSessionId, securityContext: securityContext),\n);\n```\n\n----------------------------------------\n\nTITLE: Using containedIn Constraint in Parse.Query in JavaScript\nDESCRIPTION: Shows how to use the containedIn constraint to find objects where a key's value matches any value in a provided array. This is useful for replacing multiple queries with a single query.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/queries.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// Finds scores from any of Jonathan, Dario, or Shawn\nquery.containedIn(\"playerName\",\n                  [\"Jonathan Walsh\", \"Dario Wunsch\", \"Shawn Simon\"]);\n```\n\n----------------------------------------\n\nTITLE: Checking for Existence of Keys in Parse.Query in JavaScript\nDESCRIPTION: Shows how to use exists and doesNotExist constraints to find objects based on whether a particular key is set or not set.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/queries.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// Finds objects that have the score set\nquery.exists(\"score\");\n\n// Finds objects that don't have the score set\nquery.doesNotExist(\"score\");\n```\n\n----------------------------------------\n\nTITLE: Finding Followers - Parse C#\nDESCRIPTION: An example in C# using the Parse .NET SDK to find users following the current user by querying the Follow table on the 'to' key.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/relations.md#2025-04-22_snippet_22\n\nLANGUAGE: cs\nCODE:\n```\n// create an entry in the Follow table\nvar query = ParseObject.GetQuery(\"Follow\")\n    .WhereEqualTo(\"to\", ParseUser.CurrentUser);\nIEnumerable<ParseObject> results = await query.FindAsync();\n```\n\n----------------------------------------\n\nTITLE: User Login Response Example\nDESCRIPTION: This snippet shows the JSON response structure when a user successfully logs in. It includes user details, timestamps, objectId, and sessionToken.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/users.md#2025-04-22_snippet_3\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"username\": \"cooldude6\",\n  \"phone\": \"415-392-0202\",\n  \"createdAt\": \"2022-01-01T12:23:45.678Z\",\n  \"updatedAt\": \"2022-01-01T12:23:45.678Z\",\n  \"objectId\": \"g7y9tkhB7O\",\n  \"sessionToken\": \"r:pnktnjyb996sj4p156gjtp4im\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Custom Data in Push Notifications with Parse for Android\nDESCRIPTION: Demonstrates how to include custom data in push notifications using JSONObject, including special fields for sound and badge count (which only affect iOS devices).\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/push-notifications.md#2025-04-22_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nJSONObject data = new JSONObject(\"{\\\"alert\\\": \\\"The Mets scored!\\\",\n                                   \\\"badge\\\": \\\"Increment\\\",\n                                   \\\"sound\\\": \\\"cheering.caf\\\"}\");\n\nParsePush push = new ParsePush();\npush.setChannel(\"Mets\");\npush.setData(data);\npush.sendPushInBackground();\n```\n\n----------------------------------------\n\nTITLE: Updating Existing Parse Object\nDESCRIPTION: Updates an existing Parse Object by referencing its objectId and modifying properties.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dart/objects.md#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar dietPlan = ParseObject('DietPlan')\n\t..objectId = 'R5EonpUDWy'\n\t..set('Fat', 70);\n\nawait dietPlan.save();\n```\n\n----------------------------------------\n\nTITLE: Disabling Cascade Save for Nested Parse.Objects (JavaScript)\nDESCRIPTION: Shows how to save a parent Parse.Object that references another object without causing the nested object to be saved or modified, by setting 'cascadeSave' to false in save options. This is important when you reference shared or immutable objects you do not want to update. Dependencies: Parse JavaScript SDK. Context: avoids permission errors or unwanted data modifications.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/objects.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst TeamMember = Parse.Object.extend(\"TeamMember\");\nconst teamMember = new TeamMember();\nteamMember.set('ownerAccount', ownerAccount);   // Suppose `ownerAccount` has been created earlier.\n\nteamMember.save(null, { cascadeSave: false });\n// Will save `teamMember` wihout attempting to save or modify `ownerAccount`\n\n```\n\n----------------------------------------\n\nTITLE: Using Full Text Search in Parse with Objective-C\nDESCRIPTION: Demonstrates how to use full text search capabilities in Parse Server 2.5.0+ with the whereKey:matchesText: method. This example searches for BarbecueSauce objects where the name contains 'bbq'.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/queries.md#2025-04-22_snippet_42\n\nLANGUAGE: objective-c\nCODE:\n```\nPFQuery *query = [PFQuery queryWithClassName:@\"BarbecueSauce\"];\n[query whereKey:@\"name\" matchesText:@\"bbq\"];\n```\n\n----------------------------------------\n\nTITLE: Setting Role Permissions with Query in C#\nDESCRIPTION: Shows how to grant write permissions to a role by first querying for the role object.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/roles.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\nParseRole.Query\n    .WhereEqualTo(\"name\", \"Moderators\")\n    .FirstAsync()\n    .ContinueWith(t =>\n    {\n        var moderators = t.Result;\n        var wallPost = new ParseObject(\"WallPost\");\n        var postACL = new ParseACL();\n        postACL.SetRoleWriteAccess(moderators, true);\n        wallPost.ACL = postACL;\n        return wallPost.SaveAsync();\n    });\n```\n\n----------------------------------------\n\nTITLE: Associating ParseInstallation with ParseUser in C#\nDESCRIPTION: This snippet shows how to create a relationship between a ParseInstallation object and the current ParseUser. This allows targeting push notifications to specific users.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/push-notifications.md#2025-04-22_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\n// Associate the device with a user\nvar installation = ParseInstallation.CurrentInstallation;\ninstallation[\"user\"] = ParseUser.CurrentUser;\ninstallation.SaveAsync();\n```\n\n----------------------------------------\n\nTITLE: Querying Installations with REST API in Python\nDESCRIPTION: Python implementation to retrieve all installation objects from Parse Server. This example uses the Master Key authentication which bypasses ACLs and should only be used in secure environments.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/push-notifications.md#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nconnection.connect()\nconnection.request('GET', '/parse/installations', '', {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-Master-Key\": \"${MASTER_KEY}\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Initializing LiveQueryClient in JavaScript\nDESCRIPTION: Demonstrates how to initialize a LiveQueryClient for advanced usage, allowing connection to multiple LiveQuery servers.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/live-queries.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nlet Parse = require('parse/node');\nlet LiveQueryClient = Parse.LiveQueryClient;\nlet client = new LiveQueryClient({\n  applicationId: '',\n  serverURL: '',\n  javascriptKey: '',\n  masterKey: ''\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Cache Policy with ParseQuery in Java\nDESCRIPTION: This Java snippet demonstrates how to set a cache policy for a ParseQuery using Parse SDK. It tries the network first, then falls back to the cache if the network is unavailable. Dependencies include Parse SDK and a configured Parse server environment. The method uses asynchronous querying with callbacks to handle the results.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/queries.md#2025-04-22_snippet_24\n\nLANGUAGE: Java\nCODE:\n```\nquery.setCachePolicy(ParseQuery.CachePolicy.NETWORK_ELSE_CACHE);\nquery.findInBackground(new FindCallback<ParseObject>() {\n  public void done(List<ParseObject> scoreList, ParseException e) {\n    if (e == null) {\n      // Results were successfully found, looking first on the\n      // network and then on disk.\n    } else {\n      // The network was inaccessible and we have no cached data\n      // for this query.\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Text Search with Sorting by Relevance using cURL\nDESCRIPTION: This snippet shows how to perform a text search query on Parse Server using cURL. It searches for barbecue sauces containing \"Daddy\" and sorts the results by relevance score.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/queries.md#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n# Finds strings that contains \"Daddy\" ordered by relevance\ncurl -X GET \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -G \\\n  --data-urlencode 'where={\"name\":{\"$text\":{\"$search\":{\"$term\":\"Daddy\"}}}}' \\\n  --data-urlencode 'order=\"$score\"' \\\n  --data-urlencode 'key=\"$score\"' \\\n  https://api.parse.com/1/classes/BarbecueSauce\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Constraints and Sorting\nDESCRIPTION: JSON configuration example showing how to limit which fields can be used for filtering and sorting queries on the _User class.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/customisation.md#2025-04-22_snippet_6\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"classConfigs\": [\n    {\n      \"className\": \"_User\",\n      \"type\": {\n         \"constraintFields\": [\"name\", \"age\"],\n          \"sortFields\": [\n            {\n              \"field\": \"createdAt\",\n              \"desc\": true,\n              \"asc\": false\n            },\n            {\n              \"field\": \"age\",\n              \"desc\": true,\n              \"asc\": true\n            }\n          ]\n        }\n      }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Books with Included Authors in C#\nDESCRIPTION: This C# snippet shows how to query Book objects and include their related Author objects. It uses the Include method to fetch the associated authors along with each book in a single asynchronous query.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/relations.md#2025-04-22_snippet_32\n\nLANGUAGE: cs\nCODE:\n```\n// set up our query for the Book object\nvar bookQuery = ParseObject.GetQuery(\"Book\");\n\n// configure any constraints on your query...\n// tell the query to fetch all of the Author objects along with the Book\nbookQuery = bookQuery.Include(\"authors\");\n\n// execute the query\nIEnumerable<ParseObject> books= await bookQuery.FindAsync();\n```\n\n----------------------------------------\n\nTITLE: Parse ACL Implementation\nDESCRIPTION: Sets up access control for Parse Objects using ParseACL with user-specific permissions.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dart/objects.md#2025-04-22_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nParseUser user = await ParseUser.currentUser() as ParseUser;\nParseACL parseACL = ParseACL(owner: user);\n  \nParseObject parseObject = ParseObject(\"TestAPI\");\n...\nparseObject.setACL(parseACL);\nvar apiResponse = await parseObject.save();\n```\n\n----------------------------------------\n\nTITLE: Sending Customized Push Notifications with Platform-Specific Data in JavaScript\nDESCRIPTION: Sends a push notification using `Parse.Push.send` targeting the 'Mets' channel. The notification includes a standard alert message, an iOS badge increment instruction (`Increment`), a custom sound file (`cheering.caf`) for iOS, and a specific title ('Mets Score!') for Android devices. It uses a Promise to handle success or error.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/push-notifications.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nParse.Push.send({\n  channels: [ \"Mets\" ],\n  data: {\n    alert: \"The Mets scored! The game is now tied 1-1.\",\n    badge: \"Increment\",\n    sound: \"cheering.caf\",\n    title: \"Mets Score!\"\n  }\n})\n.then(function() {\n  // Push was successful\n}, function(error) {\n  // Handle error\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Relative Expiration Interval for Push Notifications in C#\nDESCRIPTION: This snippet shows how to set a relative expiration time interval for a push notification using TimeSpan. This is more reliable than absolute dates when device clocks may be inaccurate.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/push-notifications.md#2025-04-22_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\nvar push = new ParsePush();\npush.ExpirationInterval = TimeSpan.FromDays(7);\npush.Alert = \"Season tickets on sale until next week!\";\npush.SendAsync();\n```\n\n----------------------------------------\n\nTITLE: Creating ParseFile from String Data in C#\nDESCRIPTION: Demonstrates how to create a ParseFile object from string data by converting it to bytes. Shows basic file initialization with a filename and content.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/files.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nbyte[] data = System.Text.Encoding.UTF8.GetBytes(\"Working at Parse is great!\");\nParseFile file = new ParseFile(\"resume.txt\", data);\n```\n\n----------------------------------------\n\nTITLE: Using String Prefix Queries in Parse with Objective-C\nDESCRIPTION: Demonstrates how to use string prefix matching in queries using either PFQuery's whereKey:hasPrefix: method or NSPredicate. This example finds BarbecueSauce objects where the name starts with 'Big Daddy'.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/queries.md#2025-04-22_snippet_40\n\nLANGUAGE: objective-c\nCODE:\n```\n// Finds barbecue sauces that start with \"Big Daddy\".\n// Using PFQuery\nPFQuery *query = [PFQuery queryWithClassName:@\"BarbecueSauce\"];\n[query whereKey:@\"name\" hasPrefix:@\"Big Daddy's\"];\n\n// Using NSPredicate\nNSPredicate *pred = [NSPredicate predicateWithFormat:@\"name BEGINSWITH 'Big Daddy\"];\nPFQuery *query = [PFQuery queryWithClassName:@\"BarbecueSauce\" predicate:pred];\n```\n\n----------------------------------------\n\nTITLE: Sending Push with Channel Constraint in Query for Parse .NET SDK\nDESCRIPTION: This code shows an alternative way to target a channel using a query constraint instead of the Channels property. It filters installations based on both a stored boolean value and channel subscription.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/push-notifications.md#2025-04-22_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nvar push = new Parse.Push();\npush.Query = from installation in ParseInstallation.Query\n             where installation.Get<bool>(\"scores\") == true\n             where installation.Channels.Contains(\"Giants\")\n             select installation;\npush.Alert = \"Giants scored against the A's! It's now 2-2.\";\nawait push.SendAsync();\n```\n\n----------------------------------------\n\nTITLE: Querying Parse Data Asynchronously with PFQuery in Swift\nDESCRIPTION: This snippet shows how to use PFQuery in Swift to asynchronously retrieve GameScore objects matching a playerName, using whereKey(equalTo:) and findObjectsInBackground. A completion handler manages errors and processes results. Requires Parse SDK for Swift. Input: none directly, expects 'playerName' in Parse class. Output: prints to console.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/queries.md#2025-04-22_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nlet query = PFQuery(className:\"GameScore\")\nquery.whereKey(\"playerName\", equalTo:\"Sean Plott\")\nquery.findObjectsInBackground { (objects: [PFObject]?, error: Error?) in\n    if let error = error {\n        // Log details of the failure\n        print(error.localizedDescription)\n    } else if let objects = objects {\n        // The find succeeded.\n        print(\"Successfully retrieved \\(objects.count) scores.\")\n        // Do something with the found objects\n        for object in objects {\n            print(object.objectId as Any)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Distinct Queries in PHP\nDESCRIPTION: Demonstrates how to use the `distinct` method to retrieve unique field values from a parse database, streamlining data extraction efforts where unique constraints are required. Requires the MasterKey.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/queries.md#2025-04-22_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\n// finds score that are unique\n$results = $query->distinct('score');\n```\n\nLANGUAGE: PHP\nCODE:\n```\n// can be used with equalTo\n$query = new ParseQuery('TestObject');\n$query->equalTo('name', 'foo');\n$results = $query->distinct('score');\n```\n\n----------------------------------------\n\nTITLE: Registering for Remote Notifications in iOS - Swift\nDESCRIPTION: The Swift equivalent to register an iOS application for remote notifications. This snippet involves setting notification types and registering the app for notifications.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/push-notifications.md#2025-04-22_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nlet userNotificationTypes: UIUserNotificationType = [.Alert, .Badge, .Sound]\n\nlet settings = UIUserNotificationSettings(forTypes: userNotificationTypes, categories: nil)\napplication.registerUserNotificationSettings(settings)\napplication.registerForRemoteNotifications()\n```\n\n----------------------------------------\n\nTITLE: Saving ParseFile and Getting URL in PHP\nDESCRIPTION: Illustrates uploading the previously created `ParseFile` object to the Parse cloud using its `save()` method. After successful saving, the file is assigned a unique URL, which can be retrieved using the `getURL()` method.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/files.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$file->save();\n// The file has been saved to Parse and now has a URL.\n$url = $file->getURL();\n```\n\n----------------------------------------\n\nTITLE: Logging In a User with ParseUser in Java\nDESCRIPTION: This code snippet shows how to log in an existing user using their username and password. It uses the logInInBackground method of ParseUser to asynchronously authenticate the user.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/users.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nParseUser.logInInBackground(\"Jerry\", \"showmethemoney\", new LogInCallback() {\n  public void done(ParseUser user, ParseException e) {\n    if (user != null) {\n      // Hooray! The user is logged in.\n    } else {\n      // Signup failed. Look at the ParseException to see what happened.\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Tracking Files with afterSaveFile Trigger\nDESCRIPTION: This example shows how to use the afterSaveFile trigger to keep track of files stored in your app. It creates a FileObject with information about the saved file and the user who created it.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/cloudcode/cloud-code.md#2025-04-22_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nParse.Cloud.afterSaveFile(async (request) => {\n  const { file, fileSize, user } = request;\n  const fileObject = new Parse.Object('FileObject');\n  fileObject.set('file', file);\n  fileObject.set('fileSize', fileSize);\n  fileObject.set('createdBy', user);\n  const token = { sessionToken: user.getSessionToken() };\n  await fileObject.save(null, token);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Trigger Webhook Payload in Parse Server\nDESCRIPTION: JSON payload structure for creating a trigger webhook in Parse Server. It includes the class name, trigger name, and the URL to be called when the trigger is activated.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/hooks.md#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n{\"className\": x, \"triggerName\": y, \"url\": z}\n```\n\n----------------------------------------\n\nTITLE: Querying Local Datastore in Parse SDK\nDESCRIPTION: Demonstrates how to query objects from the local datastore after enabling it with Parse.enableLocalDatastore. This allows querying against objects stored locally on the device without requiring network connectivity.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/queries.md#2025-04-22_snippet_52\n\nLANGUAGE: objective_c\nCODE:\n```\n[query fromLocalDatastore];\n[[query findObjectsInBackground] continueWithBlock:^id(BFTask *task) {\n  if (!task.error) {\n    // There was an error.\n    return task;\n  }\n\n  // Results were successfully found from the local datastore.\n  return task;\n}];\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet query = PFQuery(className:\"Comment\")\nquery.fromLocalDatastore()\nquery.findObjectsInBackground().continueWith { (task: BFTask<NSArray>) -> Any? in\n    if task.error != nil {\n        // There was an error.\n        return task\n    }\n\n    // Results were successfully found from the local datastore.\n\n    return task\n}\n```\n\n----------------------------------------\n\nTITLE: Storing a ParsePolygon in a ParseObject in Java\nDESCRIPTION: This snippet demonstrates how to store a ParsePolygon in a ParseObject as a regular field.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/geopoints.md#2025-04-22_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nplaceObject.put(\"bounds\", polygon);\n```\n\n----------------------------------------\n\nTITLE: Querying with Boolean constraints in Swift\nDESCRIPTION: Shows a query in Swift using a boolean constraint which is not ideal for indexing since boolean fields have only two possible values.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nquery.whereKey(\"cheatMode\", equalTo: false)\n```\n\n----------------------------------------\n\nTITLE: Saving Parse Config Parameters\nDESCRIPTION: Shows how to save new configuration parameters or update existing ones using the Parse SDK with Master Key in a NodeJS environment.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/config.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nParse.Config.save({\n\twelcomeMesssage : \"Welcome to Parse\",\n\tageOfParse : 3,\n\ttags : [\"parse\",\"sdk\",\"js\"]\n}).then(function(config) {\n  console.log(\"Cool! Config was saved and fetched from the server.\");\n  \n  const welcomeMessage = config.get(\"welcomeMessage\");\n  console.log(\"Welcome Message = \" + welcomeMessage);\n}, function(error) {\n  console.log(\"Failed to save.\");\n  //Try again later\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Real-Time Create Events with Parse LiveQuery in JavaScript\nDESCRIPTION: This code demonstrates how to respond to real-time 'create' events received via a Parse LiveQuery subscription. When an object matching the subscription criteria is created, the provided callback executes, allowing access to fields of the new object. It assumes that 'subscription' is an active Parse LiveQuery subscription instance. Output (console.log) will display the name of the newly created 'People' object.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/live-query.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsubscription.on('create', (people) => {\\n  console.log(people.get('name')); // This should output Mengyan\\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Parse Object with Included Pointer - cURL Example - bash\nDESCRIPTION: This bash example uses cURL to send a GET request with a query parameter (`include=game`), instructing Parse to fetch and return the object pointed to by the 'game' key within the main object. Dependencies: curl and network access. It's intended for cases where parent/child relationships and pointers are used in object structures.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/objects.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\\\\\n  -H \"X-Parse-Application-Id: <span class=\\\"custom-parse-server-appid\\\">${APPLICATION_ID}</span>\" \\\\\\n  -H \"X-Parse-REST-API-Key: <span class=\\\"custom-parse-server-restapikey\\\">${REST_API_KEY}</span>\" \\\\\\n  -G \\\\\\n  --data-urlencode 'include=game' \\\\\\n  <span class=\\\"custom-parse-server-protocol\\\">https</span>://<span class=\\\"custom-parse-server-url\\\">YOUR.PARSE-SERVER.HERE</span><span class=\\\"custom-parse-server-mount\\\">/parse/</span>classes/GameScore/Ed1nuqPvcm\n```\n\n----------------------------------------\n\nTITLE: Configuring Postgres with SSL Options in Parse Server\nDESCRIPTION: Examples of common Postgres connection URL patterns for configuring SSL connections. Shows how to set up SSL with and without certificate verification for secure database connections.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/database.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n* SSL with verification - `postgres://localhost:5432/db?ca=/path/to/file` \n* SSL with no verification - `postgres://localhost:5432/db?ssl=true&rejectUnauthorized=false`\n```\n\n----------------------------------------\n\nTITLE: Using doesNotMatchKeyInQuery for Relational Queries in JavaScript\nDESCRIPTION: Shows how to use doesNotMatchKeyInQuery to find objects where a key's value does not match the value of a key in objects returned by another query. This example finds users whose hometown teams have losing records.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/queries.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst losingUserQuery = new Parse.Query(Parse.User);\nlosingUserQuery.doesNotMatchKeyInQuery(\"hometown\", \"city\", teamQuery);\n// results has the list of users with a hometown team with a losing record\nconst results = await losingUserQuery.find();\n```\n\n----------------------------------------\n\nTITLE: Parse Server API Path Reference - Sessions API\nDESCRIPTION: REST API endpoints for session management including creating, retrieving, updating, querying and deleting sessions.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/quick-reference.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n/parse/sessions             POST   Creating Restricted Sessions\n/parse/sessions/<objectId>  GET    Retrieving Sessions\n/parse/sessions/me          GET    Retrieving Current Session\n/parse/sessions/<objectId>  PUT    Updating Sessions\n/parse/sessions             GET    Querying Sessions\n/parse/sessions/<objectId>  DELETE Deleting Sessions\n/parse/sessions/me          PUT    Pairing with Installation\n```\n\n----------------------------------------\n\nTITLE: Defining a Retrieved Parse Object with Metadata - JSON Example - jsonc\nDESCRIPTION: This snippet expands on the previous schema, demonstrating the form of a Parse object after retrieval from the server. It includes reserved fields like \"createdAt\", \"updatedAt\", and \"objectId\" automatically maintained by Parse. This example simply illustrates the post-save or retrieved state of an object, with all field values provided for reference.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/objects.md#2025-04-22_snippet_1\n\nLANGUAGE: jsonc\nCODE:\n```\n{\\n  \"score\": 1337,\\n  \"playerName\": \"Sean Plott\",\\n  \"cheatMode\": false,\\n  \"createdAt\": \"2022-01-01T12:23:45.678Z\",\\n  \"updatedAt\": \"2022-01-01T12:23:45.678Z\",\\n  \"objectId\": \"Ed1nuqPvcm\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Movies with Review Count in Swift\nDESCRIPTION: An optimized query for fetching movies that already contain their review counts as a field in Swift. This avoids expensive count operations on the Review class.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_92\n\nLANGUAGE: swift\nCODE:\n```\nlet query = PFQuery.queryWithClassName(\"Movie\")\nquery.findObjectsInBackgroundWithBlock {\n  (objects, error) in\n  if !error {\n    // Results include the reviews count field\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Sessions using Parse REST API\nDESCRIPTION: This snippet shows how to delete a Session object using the Parse REST API. It demonstrates logging out a user by calling the logout endpoint with the session token.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/sessions.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -H \"X-Parse-Session-Token: r:pnktnjyb996sj4p156gjtp4im\" \\\n  https://YOUR.PARSE-SERVER.HERE/parse/logout\n```\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nconnection.connect()\nconnection.request('POST', '/parse/logout', '', {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\",\n    \"X-Parse-Session-Token\": \"r:pnktnjyb996sj4p156gjtp4im\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Filtering with startsWith Constraint in Parse PHP\nDESCRIPTION: Demonstrates using the startsWith constraint to efficiently search for Parse objects where a field begins with a specific string. Requires Parse PHP SDK. The key parameter is 'playerName', and the method leverages backend indexes for fast searching, even on large datasets. The query returns objects whose playerName starts with 'Michael'.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_53\n\nLANGUAGE: php\nCODE:\n```\n$query->startsWith(\"playerName\", \"Michael\");\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Mutation in GraphQL Schema\nDESCRIPTION: Extends the GraphQL Mutation type with a custom addToCart mutation that takes an ID parameter and returns a CartItem object. It uses the @resolve directive to connect with a Cloud Code function.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/customisation.md#2025-04-22_snippet_16\n\nLANGUAGE: graphql\nCODE:\n```\n# schema.graphql\nextend type Mutation {\n  addToCart(id: ID!): CartItem! @resolve\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Object with Public Read Access in C#\nDESCRIPTION: Creates a post that can be read by anyone but only edited by its author using ParseACL with public read access but restricted write access.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/users.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nvar publicPost = new ParseObject(\"Post\");\nvar postACL = new ParseACL(ParseUser.CurrentUser)\n{\n    PublicReadAccess = true,\n    PublicWriteAccess = false\n};\npublicPost.ACL = postACL;\nTask saveTask = publicPost.SaveAsync();\n```\n\n----------------------------------------\n\nTITLE: Targeting Push Notifications by Platform using Parse.Query in JavaScript\nDESCRIPTION: Demonstrates how to target push notifications to specific device platforms (Android, iOS, Windows RT, Windows Phone) using the Parse JavaScript SDK. It creates separate `Parse.Query` instances for the `Parse.Installation` class, filtering by the `deviceType` field ('android', 'ios', 'winrt', 'winphone'). Each query is then used in a `Parse.Push.send` call with a platform-specific alert message.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/push-notifications.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Notification for Android users\nconst queryAndroid = new Parse.Query(Parse.Installation);\nqueryAndroid.equalTo('deviceType', 'android');\n\nParse.Push.send({\n  where: queryAndroid,\n  data: {\n    alert: \"Your suitcase has been filled with tiny robots!\"\n  }\n});\n\n// Notification for iOS users\nconst queryIOS = new Parse.Query(Parse.Installation);\nqueryIOS.equalTo('deviceType', 'ios');\n\nParse.Push.send({\n  where: queryIOS,\n  data: {\n    alert: \"Your suitcase has been filled with tiny apples!\"\n  }\n});\n\n// Notification for Windows 8 users\nconst queryWindows = new Parse.Query(Parse.Installation);\nqueryWindows.equalTo('deviceType', 'winrt');\n\nParse.Push.send({\n  where: queryWindows,\n  data: {\n    alert: \"Your suitcase has been filled with tiny glass!\"\n  }\n});\n\n// Notification for Windows Phone 8 users\nconst queryWindowsPhone = new Parse.Query(Parse.Installation);\nqueryWindowsPhone.equalTo('deviceType', 'winphone');\n\nParse.Push.send({\n  where: queryWindowsPhone,\n  data: {\n    alert: \"Your suitcase is very hip; very metro.\"\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Private ParseObject with ACL in C#\nDESCRIPTION: This snippet shows how to create a private Parse object that can only be accessed by the current user. It uses ParseACL to set read and write permissions for the object, limiting access to the authenticated user.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/users.md#2025-04-22_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nvar privateNote = new ParseObject(\"Note\");\nprivateNote[\"content\"] = \"This note is private!\";\nprivateNote.ACL = new ParseACL(ParseUser.CurrentUser);\nawait privateNote.SaveAsync();\n```\n\n----------------------------------------\n\nTITLE: Creating a Parse Object with GeoPoint using Python\nDESCRIPTION: This Python script uses the `http.client` and `json` libraries to create a new object in the 'PlaceObject' class on a Parse Server. It establishes an HTTPS connection, constructs the JSON payload with a GeoPoint for the 'location' field, sets the necessary headers (Application ID, REST API Key, Content-Type), sends a POST request, and prints the server's JSON response. Requires replacing placeholders for Application ID, REST API Key, and Parse Server URL.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/geopoints.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('<span class=\\\"custom-parse-server-url\\\">YOUR.PARSE-SERVER.HERE</span>', 443)\nconnection.connect()\nconnection.request('POST', '<span class=\\\"custom-parse-server-mount\\\">/parse/</span>classes/PlaceObject', json.dumps({\n    \"location\": {\n        \"__type\": \"GeoPoint\",\n        \"latitude\": 40.0,\n        \"longitude\": -30.0\n    }\n}), {\n    \"X-Parse-Application-Id\": \"<span class=\\\"custom-parse-server-appid\\\">${APPLICATION_ID}</span>\",\n    \"X-Parse-REST-API-Key\": \"<span class=\\\"custom-parse-server-restapikey\\\">${REST_API_KEY}</span>\",\n    \"Content-Type\": \"application/json\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Getting Current Location with Parse\nDESCRIPTION: Shows how to fetch the user's current location using Parse's geoPointForCurrentLocationInBackground method.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/geopoints.md#2025-04-22_snippet_2\n\nLANGUAGE: objective_c\nCODE:\n```\n[PFGeoPoint geoPointForCurrentLocationInBackground:^(PFGeoPoint *geoPoint, NSError *error) {\n    if (!error) {\n        // do something with the new geoPoint\n    }\n}];\n```\n\nLANGUAGE: swift\nCODE:\n```\nPFGeoPoint.geoPointForCurrentLocationInBackground {\n  (geoPoint: PFGeoPoint?, error: NSError?) -> Void in\n  if error == nil {\n    // do something with the new geoPoint\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Cloud Code Resolver Function\nDESCRIPTION: Defines a Cloud Code function named 'hello' that will be used as the resolver for the GraphQL hello query. It simply returns a 'Hello, world!' message string.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/customisation.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// main.js\nParse.Cloud.define(\"hello\", () => \"Hello, world!\");\n```\n\n----------------------------------------\n\nTITLE: Logging Out a Parse User\nDESCRIPTION: This snippet shows how to log out the current user using Parse.User.logOut(), which clears the current user cache and requires the user to log in again for authenticated operations.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/users.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nParse.User.logOut().then(() => {\n  const currentUser = Parse.User.current();  // this will now be null\n});\n```\n\n----------------------------------------\n\nTITLE: Illustrating ParseUser Object Security in Parse PHP SDK\nDESCRIPTION: This snippet demonstrates the security policy applied to `ParseUser` objects. It shows that modifications (like setting properties and calling `save()`) are only permitted on `ParseUser` objects obtained through authenticated methods (`logIn`, `signUp`). Attempting to save changes on a `ParseUser` object retrieved via a non-authenticated method (like a query) will result in a `ParseException`, as only the authenticated user can modify their own data. The current user obtained via `ParseUser::getCurrentUser()` is always authenticated.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/users.md#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n```php\n$user = ParseUser::logIn(\"my_username\", \"my_password\");\n$user->set(\"username\", \"my_new_username\");  // attempt to change username\n$user->save();\n// This succeeds, since the user was authenticated on the device\n\n// Get the user from a non-authenticated method\n$query = ParseUser::query();\n$userAgain = $query->get($user->getObjectId());\n$userAgain->set(\"username\", \"another_username\");\n// This will throw a ParseException, since the ParseUser is not authenticated\n$userAgain->save();\n```\n```\n\n----------------------------------------\n\nTITLE: Retrieving Installation ID\nDESCRIPTION: Shows how to retrieve the current installation ID from the Parse client. This ID persists across device reboots.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/embedded_c/push-notifications.md#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nchar* installation_id = parseGetInstallationId(client);\n```\n\n----------------------------------------\n\nTITLE: Creating Compound Queries with OR Operator in Bash\nDESCRIPTION: Bash curl command demonstrating how to create a compound query using the $or operator to find Player objects that match either of two conditions - high wins or low wins.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/queries.md#2025-04-22_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -G \\\n  --data-urlencode 'where={\"$or\":[{\"wins\":{\"$gt\":150}},{\"wins\":{\"$lt\":5}}]}' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/classes/Player\n```\n\n----------------------------------------\n\nTITLE: Linking Parse User with Twitter Account in Android\nDESCRIPTION: Code to associate an existing ParseUser with a Twitter account. This snippet demonstrates how to check if a user is already linked, initiate the linking process, and handle the success callback.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/users.md#2025-04-22_snippet_23\n\nLANGUAGE: java\nCODE:\n```\nif (!ParseTwitterUtils.isLinked(user)) {\n  ParseTwitterUtils.link(user, this, new SaveCallback() {\n    @Override\n    public void done(ParseException ex) {\n      if (ParseTwitterUtils.isLinked(user)) {\n        Log.d(\"MyApp\", \"Woohoo, user logged in with Twitter!\");\n      }\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Calling a Cloud Function from JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to call the 'averageStars' Cloud Function from a JavaScript app. It uses async/await syntax to handle the asynchronous operation.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/cloudcode/cloud-code.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst params =  { movie: \"The Matrix\" };\nconst ratings = await Parse.Cloud.run(\"averageStars\", params);\n// ratings should be 4.5\n```\n\n----------------------------------------\n\nTITLE: Tracking App Launch with Push Notification in iOS\nDESCRIPTION: Code to track when an application is launched via push notification. Includes checks for iOS 7's background push features to avoid double counting app-opens.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/push-notifications.md#2025-04-22_snippet_11\n\nLANGUAGE: objective_c\nCODE:\n```\nif (application.applicationState != UIApplicationStateBackground) {\n  BOOL preBackgroundPush = ![application respondsToSelector:@selector(backgroundRefreshStatus)];\n  BOOL oldPushHandlerOnly = ![self respondsToSelector:@selector(application:didReceiveRemoteNotification:fetchCompletionHandler:)];\n  BOOL noPushPayload = ![launchOptions objectForKey:UIApplicationLaunchOptionsRemoteNotificationKey];\n  if (preBackgroundPush || oldPushHandlerOnly || noPushPayload) {\n    [PFAnalytics trackAppOpenedWithLaunchOptions:launchOptions];\n  }\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\nif application.applicationState != UIApplicationState.Background {\n  let oldPushHandlerOnly = !self.respondsToSelector(Selector(\"application:didReceiveRemoteNotification:fetchCompletionHandler:\"))\n  let noPushPayload: AnyObject? = launchOptions?[UIApplicationLaunchOptionsRemoteNotificationKey]?\n  if oldPushHandlerOnly || noPushPayload != nil {\n    PFAnalytics.trackAppOpenedWithLaunchOptions(launchOptions)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Storing a ParseGeoPoint in a ParseObject in Java\nDESCRIPTION: This code shows how to store a ParseGeoPoint in a ParseObject as a regular field.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/geopoints.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nplaceObject.put(\"location\", point);\n```\n\n----------------------------------------\n\nTITLE: Setting Expiration Time for Parse Push Notifications in Android\nDESCRIPTION: Demonstrates how to set an expiration time for a push notification using a specific UNIX epoch time, after which Parse will stop attempting to deliver the notification.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/push-notifications.md#2025-04-22_snippet_13\n\nLANGUAGE: java\nCODE:\n```\n// Send push notification with expiration date\nParsePush push = new ParsePush();\npush.setExpirationTime(1424841505);\npush.setQuery(everyoneQuery);\npush.setMessage(\"Season tickets on sale until February 25th\");\npush.sendPushInBackground();\n```\n\n----------------------------------------\n\nTITLE: Sending Localized Push Notification using cURL\nDESCRIPTION: This snippet demonstrates how to send a localized push notification using cURL. It includes a default alert for all languages and a French-specific alert.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/push-notifications.md#2025-04-22_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"data\": {\n          \"alert\": \"The default alert for all languages\",\n          \"alert-fr\": \"Une alerte en français\"\n        }\n      }' \\\n  https://api.parse.com/1/push\n```\n\n----------------------------------------\n\nTITLE: Parse Server Response for Successful Authentication\nDESCRIPTION: Shows the structure of a successful authentication response from Parse Server. It includes user details such as username, creation date, object ID, session token, and authentication data.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/users.md#2025-04-22_snippet_25\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"username\": \"Parse\",\n  \"createdAt\": \"2022-01-01T12:23:45.678Z\",\n  \"updatedAt\": \"2022-01-01T12:23:45.678Z\",\n  \"objectId\": \"uMz0YZeAqc\",\n  \"sessionToken\": \"r:samplei3l83eerhnln0ecxgy5\",\n  \"authData\": {\n    \"twitter\": {\n      \"id\": \"12345678\",\n      \"screen_name\": \"ParseIt\",\n      \"consumer_key\": \"SaMpLeId3X7eLjjLgWEw\",\n      \"consumer_secret\": \"SaMpLew55QbMR0vTdtOACfPXa5UdO2THX1JrxZ9s3c\",\n      \"auth_token\": \"12345678-SaMpLeTuo3m2avZxh5cjJmIrAfx4ZYyamdofM7IjU\",\n      \"auth_token_secret\": \"SaMpLeEb13SpRzQ4DAIzutEkCE2LBIm2ZQDsP3WUU\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Push Notification Content with Title in C#\nDESCRIPTION: This snippet shows how to send a push notification with additional data including a title. It uses a Dictionary to package all notification data with specific reserved fields for different platforms.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/push-notifications.md#2025-04-22_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nvar push = new ParsePush();\npush.Channels = new List<string> {\"Mets\"};\npush.Data = new Dictionary<string, object> {\n  {\"title\", \"Score Alert\"}\n  {\"alert\", \"The Mets scored! The game is now tied 1-1!\"},\n};\npush.SendAsync();\n```\n\n----------------------------------------\n\nTITLE: Handling Facebook SSO Activity Result\nDESCRIPTION: Implementation of onActivityResult to handle Facebook Single Sign-On (SSO) callbacks in the Activity class.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/users.md#2025-04-22_snippet_17\n\nLANGUAGE: java\nCODE:\n```\n@Override\nprotected void onActivityResult(int requestCode, int resultCode, Intent data) {\n  super.onActivityResult(requestCode, resultCode, data);\n  ParseFacebookUtils.onActivityResult(requestCode, resultCode, data);\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking Upload Progress with PFFileObject\nDESCRIPTION: Demonstrates monitoring upload progress of a PFFileObject using progress blocks.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/files.md#2025-04-22_snippet_6\n\nLANGUAGE: objective-c\nCODE:\n```\nNSData *data = [@\"Working at Parse is great!\" dataUsingEncoding:NSUTF8StringEncoding];\nPFFileObject *file = [PFFileObject fileObjectWithName:@\"resume.txt\" data:data];\n[file saveInBackgroundWithBlock:^(BOOL succeeded, NSError *error) {\n  // Handle success or failure here ...\n} progressBlock:^(int percentDone) {\n  // Update your progress spinner here. percentDone will be between 0 and 100.\n}];\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet str = \"Working at Parse is great!\"\nlet data = str.data(using: String.Encoding.utf8)\nlet file = PFFileObject(name:\"resume.txt\", data:data!)\nfile?.saveInBackground({ (success: Bool, error: Error?) in\n    // Handle success or failure here ...\n}, progressBlock: { (percentDone: Int32) in\n    // Update your progress spinner here. percentDone will be between 0 and 100.\n})\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response: List of All Cloud Triggers\nDESCRIPTION: Provides an example JSON response structure returned by the `/hooks/triggers` endpoint. The `results` array contains trigger objects, which can be either trigger webhooks (with `className`, `triggerName`, and `url`) or cloud code triggers (with `className` and `triggerName`).\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/hooks.md#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"results\": [\n    { \"className\": \"Scores\", \"triggerName\": \"beforeSave\" },\n    {\n      \"className\": \"Scores\",\n      \"triggerName\": \"beforeSave\",\n      \"url\": \"https://api.example.com/Scores/beforeSave\"\n    },\n    {\n      \"className\": \"Game\",\n      \"triggerName\": \"afterSave\",\n      \"url\": \"https://api.example.com/Game/afterSave\"\n    },\n    { \"className\": \"Tournament\", \"triggerName\": \"beforeDelete\" }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Parse Subclasses\nDESCRIPTION: Demonstrates how to create queries specific to subclasses of PFObject. This allows taking advantage of strongly-typed properties and methods while maintaining the query functionality of Parse.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/queries.md#2025-04-22_snippet_59\n\nLANGUAGE: objective_c\nCODE:\n```\nPFQuery *query = [Armor query];\n[query whereKey:@\"rupees\" lessThanOrEqualTo:[PFUser currentUser][@\"rupees\"]];\n[query findObjectsInBackgroundWithBlock:^(NSArray *objects, NSError *error) {\n  if (!error) {\n    Armor *firstArmor = [objects firstObject];\n    // ...\n  }\n}];\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet query = Armor.query()\nquery.whereKey(\"rupees\", lessThanOrEqualTo: PFUser.current()?[\"rupees\"] as Any)\nquery.findObjectsInBackground { (objects: [PFObject]?, error: Error?) in\n    if let error = error {\n        // The request failed\n        print(error.localizedDescription)\n    } else if let objects = objects as? [Armor], let firstArmor = objects.first {\n       //...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic ParseObject Structure Example\nDESCRIPTION: Example showing basic key-value structure of a ParseObject for a game score.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/objects.md#2025-04-22_snippet_0\n\nLANGUAGE: jsonc\nCODE:\n```\nscore: 1337, playerName: \"Sean Plott\", cheatMode: false\n```\n\n----------------------------------------\n\nTITLE: Stored ParseObject Structure\nDESCRIPTION: Shows the JSON structure of a stored ParseObject including system fields like objectId, createdAt, and updatedAt.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/objects.md#2025-04-22_snippet_2\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"objectId\": \"xWMyZ4YEGZ\",\n  \"score\": 1337,\n  \"playerName\": \"Sean Plott\",\n  \"cheatMode\": false,\n  \"createdAt\":\"2022-01-01T12:23:45.678Z\",\n  \"updatedAt\":\"2022-01-01T12:23:45.678Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New ParseRole with ACL in C#\nDESCRIPTION: This snippet demonstrates how to create a new ParseRole with a specific ACL that allows public read access but no write access, ensuring the role cannot be altered.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/roles.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// By specifying no write privileges for the ACL, we can ensure the role cannot be altered.\nvar roleACL = new ParseACL()\nroleACL.PublicReadAccess = true;\nvar role = new ParseRole(\"Administrator\", roleACL);\nawait role.SaveAsync();\n```\n\n----------------------------------------\n\nTITLE: Closing LiveQuery Connection in JavaScript\nDESCRIPTION: Shows how to close the WebSocket connection to the LiveQuery server and cancel all subscriptions.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/live-queries.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nParse.LiveQuery.close();\n```\n\n----------------------------------------\n\nTITLE: Querying Comments for Posts with Images using PFQuery and NSPredicate in iOS\nDESCRIPTION: This snippet demonstrates how to fetch comments for posts that have images using both PFQuery and NSPredicate methods. It showcases the use of nested queries in Objective-C and Swift.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/queries.md#2025-04-22_snippet_48\n\nLANGUAGE: objective-c\nCODE:\n```\n// Using PFQuery\nPFQuery *innerQuery = [PFQuery queryWithClassName:@\"Post\"];\n[innerQuery whereKeyExists:@\"image\"];\nPFQuery *query = [PFQuery queryWithClassName:@\"Comment\"];\n[query whereKey:@\"post\" matchesQuery:innerQuery];\n[query findObjectsInBackgroundWithBlock:^(NSArray *comments, NSError *error) {\n    // comments now contains the comments for posts with images\n}];\n\n// Using NSPredicate\nNSPredicate *innerPred = [NSPredicate predicateWithFormat:@\"image IN SELF\"];\nPFQuery *innerQuery = [PFQuery queryWithClassName:@\"Post\" predicate:innerPred];\n\nNSPredicate *pred = [NSPredicate predicateWithFormat:@\"post IN %@\", innerQuery];\nPFQuery *query = [PFQuery queryWithClassName:@\"Comment\" predicate:pred];\n\n[query findObjectsInBackgroundWithBlock:^(NSArray *comments, NSError *error) {\n    // comments now contains the comments for posts with images\n}];\n```\n\nLANGUAGE: swift\nCODE:\n```\n// Using PFQuery\nlet innerQuery = PFQuery(className: \"Post\")\ninnerQuery.whereKeyExists(\"image\")\nlet query = PFQuery(className: \"Comment\")\nquery.whereKey(\"post\", matchesQuery: innerQuery)\nquery.findObjectsInBackground { (comments: [PFObject]?, error: Error?) in\n    if let error = error {\n        // The request failed\n        print(error.localizedDescription)\n    } else {\n        // comments now contains the comments for posts with images\n\n    }\n}\n\n// Using NSPredicate\nlet innerPred = NSPredicate(format: \"image IN SELF\")\nlet innerQuery = PFQuery(className: \"Post\", predicate: innerPred)\n\nlet pred = NSPredicate(format: \"post IN %@\", innerQuery)\nlet query = PFQuery(className: \"Comment\", predicate: pred)\n\nquery.findObjectsInBackground { (comments: [PFObject]?, error: Error?) in\n    if let error = error {\n        // The request failed\n        print(error.localizedDescription)\n    } else {\n        // comments now contains the comments for posts with images\n\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing a Custom GraphQL Mutation\nDESCRIPTION: GraphQL mutation that calls the custom addToCart resolver with a Relay-encoded item ID, retrieving the resulting cart item's ID and quantity.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/customisation.md#2025-04-22_snippet_20\n\nLANGUAGE: graphql\nCODE:\n```\nmutation addItemToCart {\n  addToCart(id: \"SXRlbTpEbDVjZmFWclRI\") {\n    id\n    quantity\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Sort Keys to Parse Queries in Android\nDESCRIPTION: This snippet shows how to add additional sort keys to a query using addAscendingOrder and addDescendingOrder, which are applied when previous sort keys have equal values.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/queries.md#2025-04-22_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n// Sorts the results in ascending order by the score field if the previous sort keys are equal.\nquery.addAscendingOrder(\"score\");\n\n// Sorts the results in descending order by the score field if the previous sort keys are equal.\nquery.addDescendingOrder(\"score\");\n```\n\n----------------------------------------\n\nTITLE: Adding File Field to GameScore Class\nDESCRIPTION: GraphQL mutation to add a screenshot field of type File to the GameScore class. Requires application ID and master key authentication.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/files.md#2025-04-22_snippet_0\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"X-Parse-Application-Id\": \"APPLICATION_ID\",\n  \"X-Parse-Master-Key\": \"MASTER_KEY\"\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\nmutation updateGameScoreClass {\n  updateClass(\n    input: {\n      name: \"GameScore\"\n      schemaFields: { addFiles: [{ name: \"screenshot\" }] }\n    }\n  ) {\n    class {\n      name\n    }\n  }\n}\n```\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"data\": {\n    \"updateClass\": {\n      \"class\": {\n        \"name\": \"GameScore\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Comments for Posts without Images using PFQuery and NSPredicate in iOS\nDESCRIPTION: This snippet shows how to fetch comments for posts that don't have images using both PFQuery and NSPredicate methods. It demonstrates the use of negative nested queries in Objective-C and Swift.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/queries.md#2025-04-22_snippet_49\n\nLANGUAGE: objective-c\nCODE:\n```\n// Using PFQuery\nPFQuery *innerQuery = [PFQuery queryWithClassName:@\"Post\"];\n[innerQuery whereKeyExists:@\"image\"];\nPFQuery *query = [PFQuery queryWithClassName:@\"Comment\"];\n[query whereKey:@\"post\" doesNotMatchQuery:innerQuery];\n[query findObjectsInBackgroundWithBlock:^(NSArray *comments, NSError *error) {\n    // comments now contains the comments for posts without images\n}];\n\n// Using NSPredicate\nNSPredicate *innerPred = [NSPredicate predicateWithFormat:@\"image IN SELF\"];\nPFQuery *innerQuery = [PFQuery queryWithClassName:@\"Post\" predicate:innerPred];\n\nNSPredicate *pred = [NSPredicate predicateWithFormat:@\"NOT (post IN %@)\", innerQuery];\nPFQuery *query = [PFQuery queryWithClassName:@\"Comment\" predicate:pred];\n\n[query findObjectsInBackgroundWithBlock:^(NSArray *comments, NSError *error) {\n    // comments now contains the comments for posts without images\n}];\n```\n\nLANGUAGE: swift\nCODE:\n```\n// Using PFQuery\nlet innerQuery = PFQuery(className: \"Post\")\ninnerQuery.whereKeyExists(\"image\")\nlet query = PFQuery(className: \"Comment\")\nquery.whereKey(\"post\", doesNotMatch: innerQuery)\nquery.findObjectsInBackground { (comments: [PFObject]?, error: Error?) in\n    if let error = error {\n        // The request failed\n        print(error.localizedDescription)\n    } else {\n        // comments now contains the comments for posts without images\n\n    }\n}\n\n// Using NSPredicate\nlet innerPred = NSPredicate(format: \"image IN SELF\")\nlet innerQuery = PFQuery(className: \"Post\", predicate: innerPred)\n\nlet pred = NSPredicate(format: \"NOT (post IN %@)\", innerQuery)\nlet query = PFQuery(className: \"Comment\", predicate: pred)\n\nquery.findObjectsInBackground { (comments: [PFObject]?, error: Error?) in\n    if let error = error {\n        // The request failed\n        print(error.localizedDescription)\n    } else {\n        // comments now contains the comments for posts without images\n\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Changing File Name Using beforeSaveFile Trigger\nDESCRIPTION: This example shows how to use the beforeSaveFile trigger to change a file's name before it's saved. It retrieves the file data and creates a new file with a different name.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/cloudcode/cloud-code.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// Changing the file name\nParse.Cloud.beforeSaveFile(async (request) => {\n  const { file } = request;\n  const fileData = await file.getData();\n  const newFile = new Parse.File('a-new-file-name.txt', { base64: fileData });\n  return newFile;\n});\n```\n\n----------------------------------------\n\nTITLE: Excluding Multiple Values with whereNotContainedIn in Parse Queries\nDESCRIPTION: This snippet demonstrates using whereNotContainedIn to match objects where a field does not equal any of the specified values, effectively filtering out a set of values.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/queries.md#2025-04-22_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nString[] names = {\"Jonathan Walsh\", \"Dario Wunsch\", \"Shawn Simon\"};\nquery.whereNotContainedIn(\"playerName\", Arrays.asList(names));\n```\n\n----------------------------------------\n\nTITLE: Geospatial Queries within a Radius in Parse Java\nDESCRIPTION: Demonstrates performing a geospatial query to find places within 10 miles of a location using Parse Java SDK. Uses whereWithinMiles and an asynchronous callback to retrieve results.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_66\n\nLANGUAGE: java\nCODE:\n```\nParseQuery<ParseObject> query = ParseQuery.getQuery(\"Place\");\nquery.whereWithinMiles(\"location\", userGeoPoint, 10.0);\nquery.findInBackground(new FindCallback<ParseObject>() {\n  @Override\n  public void done(List<ParseObject> list, ParseException e) {\n    if (e == null) {\n      // List of places within 10 miles of a user's location\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Finding With Result Ordering Using 'order' Argument - Parse Server GraphQL - GraphQL\nDESCRIPTION: Demonstrates ordering of returned objects using the 'order' argument, sorting by score in ascending order. Combined with a 'where' filter selecting only non-cheating entries. Expects that the requested field (score) is indexable for efficient sorting. Useful for leaderboards or sorted result presentation.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/queries.md#2025-04-22_snippet_11\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery getSomeGameScores {\n  gameScores(\n  \twhere: {\n  \t  cheatMode: { equalTo: false }\n  \t},\n  \torder: score_ASC\n  ) {\n    count\n    edges {\n      cursor\n      node {\n        id\n        playerName\n        score\n        cheatMode\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Expiration Date for Push Notification in Parse .NET SDK\nDESCRIPTION: This snippet demonstrates how to set an expiration date for a push notification. It uses the Expiration property of ParsePush to specify when Parse should stop attempting to send the notification.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/push-notifications.md#2025-04-22_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nvar push = new ParsePush();\npush.Expiration = new DateTime(2015, 8, 14);\npush.Alert = \"Season tickets on sale until August 14th!\";\nawait push.SendAsync();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Subscribed Channels in Parse iOS SDK\nDESCRIPTION: Demonstrates how to retrieve the list of channels an installation is currently subscribed to. This example shows accessing the cached channels property from the current installation object.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/push-notifications.md#2025-04-22_snippet_6\n\nLANGUAGE: objective-c\nCODE:\n```\nNSArray *subscribedChannels = [PFInstallation currentInstallation].channels;\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet subscribedChannels = PFInstallation.currentInstallation().channels\n```\n\n----------------------------------------\n\nTITLE: Fetching Parse Config in C#\nDESCRIPTION: Basic example of asynchronously fetching ParseConfig from the server with error handling.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/config.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nParseConfig.GetAsync().ContinueWith(t =>\n{\n  if (t.isFaulted) {\n    // Something went wrong (e.g. request timed out)\n  } else {\n    ParseConfig config = t.Result;\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Initialize Parse Facebook Integration\nDESCRIPTION: Configuration code for initializing Parse with Facebook integration in the app delegate.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/users.md#2025-04-22_snippet_16\n\nLANGUAGE: objective_c\nCODE:\n```\n// AppDelegate.m\n#import <FBSDKCoreKit/FBSDKCoreKit.h>\n#import <ParseFacebookUtilsV4/PFFacebookUtils.h>\n\n@implementation AppDelegate\n\n- (void)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n  [Parse setApplicationId:@\"parseAppId\" clientKey:@\"parseClientKey\"];\n  [PFFacebookUtils initializeFacebookWithApplicationLaunchOptions:launchOptions];\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\nimport FBSDKCoreKit\nimport Parse\n\n// AppDelegate.swift\nfunc application(application: UIApplicatiofunc application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n  // Initialize Parse.\n  let parseConfig = ParseClientConfiguration {\n      $0.applicationId = \"parseAppId\"\n      $0.clientKey = \"parseClientKey\"\n      $0.server = \"parseServerUrlString\"\n  }\n  Parse.initialize(with: parseConfig)\n  PFFacebookUtils.initializeFacebook(applicationLaunchOptions: launchOptions)\n}\n```\n\n----------------------------------------\n\nTITLE: Skipping Results in Parse.Query for Pagination in JavaScript\nDESCRIPTION: Shows how to skip a number of results in a Parse.Query, which is useful for implementing pagination.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/queries.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nquery.skip(10); // skip the first 10 results\n```\n\n----------------------------------------\n\nTITLE: Counting Objects with Query Constraints in Python\nDESCRIPTION: Python implementation for counting GameScore objects for a specific player without retrieving results. Uses the count parameter with limit=0 to efficiently get only the count value.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/queries.md#2025-04-22_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\nimport urllib.parse\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nparams = urllib.parse.urlencode({\"where\": json.dumps({\n    \"playerName\": \"Jonathan Walsh\"\n}),\n\"count\": 1,\n\"limit\": 0})\nconnection.connect()\nconnection.request('GET', '/parse/classes/GameScore?%s' % params, '', {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Deleting ParseObject and Fields\nDESCRIPTION: Shows how to delete an entire ParseObject or remove specific fields.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/objects.md#2025-04-22_snippet_12\n\nLANGUAGE: cs\nCODE:\n```\nTask deleteTask = myObject.DeleteAsync();\n\n// After this, the playerName field will be empty\nmyObject.Remove(\"playerName\");\n\n// Saves the field deletion to the Parse Cloud\nTask saveTask = myObject.SaveAsync();\n```\n\n----------------------------------------\n\nTITLE: Defining Basic GraphQL Query Resolver in Parse Schema\nDESCRIPTION: Extends the GraphQL Query type with a custom hello resolver that returns a String value.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/customisation.md#2025-04-22_snippet_11\n\nLANGUAGE: graphql\nCODE:\n```\nextend type Query {\n  hello: String! @resolve\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Push Notification Polling Loop\nDESCRIPTION: Implements a custom polling loop for push notifications using socket programming. This approach allows integration with existing application loops.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/embedded_c/push-notifications.md#2025-04-22_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\nparseSetPushCallback(client, myPushCallback);\nparseStartPushService(client);\nint socket = parseGetPushSocket(client);\nwhile(1) {\n\tstruct timeval tv;\n\tfd_set receive, send, error;\n\n\ttv.tv_sec = 10;\n\ttv.tv_usec= 0;\n\tFD_ZERO(&receive);\n\tFD_ZERO(&send);\n\tFD_ZERO(&error);\n\tFD_SET(socket, &error);\n\tFD_SET(socket, &receive);\n\tselect(socket + 1, &receive, &send, &error, &tv);\n\n\t// ...\n\n\tparseProcessNextPushNotification(client);\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Localized Push Notification using Python\nDESCRIPTION: This snippet shows how to send a localized push notification using Python's http.client library. It includes a default alert for all languages and a French-specific alert.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/push-notifications.md#2025-04-22_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('api.parse.com', 443)\nconnection.connect()\nconnection.request('POST', '/1/push', json.dumps({\n    \"data\": {\n        \"alert\": \"The default alert for all languages\",\n        \"alert-fr\": \"Une alerte en français\"\n    }\n}), {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\",\n    \"Content-Type\": \"application/json\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Querying Within a Bounding Box in Parse JavaScript SDK\nDESCRIPTION: Shows how to query for objects within a rectangular bounding box using the withinGeoBox method of Parse.Query.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/geopoints.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst southwestOfSF = new Parse.GeoPoint(37.708813, -122.526398);\nconst northeastOfSF = new Parse.GeoPoint(37.822802, -122.373962);\n\nconst query = new Parse.Query(PizzaPlaceObject);\nquery.withinGeoBox(\"location\", southwestOfSF, northeastOfSF);\nconst pizzaPlacesInSF = await query.find();\n```\n\n----------------------------------------\n\nTITLE: Linking Existing ParseUser with Facebook\nDESCRIPTION: Code to link an existing ParseUser account with Facebook credentials using ParseFacebookUtils.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/users.md#2025-04-22_snippet_19\n\nLANGUAGE: java\nCODE:\n```\nif (!ParseFacebookUtils.isLinked(user)) {\n  ParseFacebookUtils.linkWithReadPermissionsInBackground(user, this, permissions, new SaveCallback() {\n    @Override\n    public void done(ParseException ex) {\n      if (ParseFacebookUtils.isLinked(user)) {\n        Log.d(\"MyApp\", \"Woohoo, user logged in with Facebook!\");\n      }\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Password Reset in Parse\nDESCRIPTION: Initiates password reset flow by sending reset instructions to user's email address.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/users.md#2025-04-22_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nParseUser.requestPasswordResetInBackground(\"myemail@example.com\", new RequestPasswordResetCallback() {\n  public void done(ParseException e) {\n    if (e == null) {\n      // An email was successfully sent with reset instructions.\n    } else {\n      // Something went wrong. Look at the ParseException to see what's up.\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting Fields from Schema in Parse Server JavaScript SDK\nDESCRIPTION: Shows how to remove fields from a schema using the deleteField method followed by save or update to persist the changes. This is useful when restructuring your data model.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/schema.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmySchema.deleteField('stringField');\nmySchema.save();\n// or for an existing schema...\nmySchema.update();\n```\n\n----------------------------------------\n\nTITLE: Setting Role-Based Write Access by Role Name in C#\nDESCRIPTION: This code demonstrates how to set role-based write access on a ParseObject using the role name directly, avoiding the need to query for the role object.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/roles.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar wallPost = new ParseObject(\"WallPost\");\nvar postACL = new ParseACL();\npostACL.SetRoleWriteAccess(\"Moderators\", true);\nwallPost.ACL = postACL;\nawait wallPost.SaveAsync();\n```\n\n----------------------------------------\n\nTITLE: Parse Object Creation HTTP Response - JavaScript Example - javascript\nDESCRIPTION: This JavaScript-like snippet shows an example of the HTTP status and Location header returned after successfully creating an object via the REST API. It illustrates the 201 Created response and how to obtain the newly created Parse object URL for follow-up API calls.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/objects.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nStatus: 201 Created\\nLocation: <span class=\\\"custom-parse-server-protocol\\\">https</span>://<span class=\\\"custom-parse-server-url\\\">YOUR.PARSE-SERVER.HERE</span><span class=\\\"custom-parse-server-mount\\\">/parse/</span>classes/GameScore/Ed1nuqPvcm\n```\n\n----------------------------------------\n\nTITLE: Ordering Query Results in Parse using Objective-C\nDESCRIPTION: Illustrates how to sort results returned from a Parse query, either in ascending or descending order, using orderByAscending and orderByDescending. Requires Parse iOS SDK and a string field representing the sort key. Results are ordered accordingly.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/queries.md#2025-04-22_snippet_16\n\nLANGUAGE: objective_c\nCODE:\n```\n// Sorts the results in ascending order by the score field\n[query orderByAscending:@\"score\"];\n\n// Sorts the results in descending order by the score field\n[query orderByDescending:@\"score\"];\n```\n\n----------------------------------------\n\nTITLE: Efficient Query with StartsWith in Objective-C and Swift\nDESCRIPTION: This snippet shows an efficient way to query for player names using the StartsWith condition in both Objective-C and Swift. This approach is recommended for better performance as it can use an index.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_50\n\nLANGUAGE: objective_c\nCODE:\n```\n[query whereKey:@\"playerName\" hasPrefix:@\"Michael\"];\n```\n\nLANGUAGE: swift\nCODE:\n```\nquery.whereKey(\"playerName\", hasPrefix: \"Michael\")\n```\n\n----------------------------------------\n\nTITLE: Pointer vs Expanded Object Representation in Parse Server\nDESCRIPTION: These examples show the difference between a Pointer reference and a fully expanded object when using the 'include' parameter. A Pointer contains only the objectId, while an expanded object includes all fields.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/queries.md#2025-04-22_snippet_25\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"__type\": \"Pointer\",\n  \"className\": \"Post\",\n  \"objectId\": \"8TOXdXf3tz\"\n}\n```\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"__type\": \"Object\",\n  \"className\": \"Post\",\n  \"objectId\": \"8TOXdXf3tz\",\n  \"createdAt\": \"2022-01-01T12:23:45.678Z\",\n  \"updatedAt\": \"2022-01-01T12:23:45.678Z\",\n  \"otherFields\": \"willAlsoBeIncluded\"\n}\n```\n\n----------------------------------------\n\nTITLE: Targeting Push Notifications Using Related Objects in C#\nDESCRIPTION: This example demonstrates how to send push notifications based on relationships to other objects, specifically targeting users near a geographic location using a geolocation query.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/push-notifications.md#2025-04-22_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\n// Find users in the Seattle metro area\nvar userQuery = ParseUser.Query.WhereWithinDistance(\n    \"location\",\n    marinersStadium,\n    ParseGeoDistance.FromMiles(1));\nvar push= new ParsePush();\npush.Query = ParseInstallation.Query\n             .WhereMatchesQuery(\"user\", userQuery);\npush.Alert = \"Mariners lost? Free conciliatory hotdogs at the Parse concession stand!\";\npush.SendAsync();\n```\n\n----------------------------------------\n\nTITLE: Limiting Query Results in Parse Java\nDESCRIPTION: Demonstrates setting the maximum number of results to 10 in a Parse query using the Java SDK. Utilizes setLimit to reduce data usage and network overhead.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_61\n\nLANGUAGE: java\nCODE:\n```\nquery.setLimit(10); // limit to at most 10 results\n```\n\n----------------------------------------\n\nTITLE: Handling Push Notifications on App Launch in Parse iOS SDK\nDESCRIPTION: Shows how to handle push notifications when an app is launched from a notification. This example demonstrates extracting the notification payload and fetching associated data objects to update the UI.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/push-notifications.md#2025-04-22_snippet_9\n\nLANGUAGE: objective-c\nCODE:\n```\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n  . . .\n  // Extract the notification data\n  NSDictionary *notificationPayload = launchOptions[UIApplicationLaunchOptionsRemoteNotificationKey];\n\n  // Create a pointer to the Photo object\n  NSString *photoId = [notificationPayload objectForKey:@\"p\"];\n  PFObject *targetPhoto = [PFObject objectWithoutDataWithClassName:@\"Photo\"   objectId:photoId];\n\n  // Fetch photo object\n  [targetPhoto fetchIfNeededInBackgroundWithBlock:^(PFObject *object, NSError *error) {\n    // Show photo view controller\n    if (!error) {\n      PhotoVC *viewController = [[PhotoVC alloc] initWithPhoto:object];\n      [self.navController pushViewController:viewController animated:YES];\n    }\n  }];\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\nfunc application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -> Bool {\n  . . .\n  // Extract the notification data\n  if let notificationPayload = launchOptions?[UIApplicationLaunchOptionsRemoteNotificationKey] as? NSDictionary {\n\n      // Create a pointer to the Photo object\n      let photoId = notificationPayload[\"p\"] as? NSString\n      let targetPhoto = PFObject(withoutDataWithClassName: \"Photo\", objectId: photoId)\n\n      // Fetch photo object\n      targetPhoto.fetchIfNeededInBackgroundWithBlock {\n        (object: PFObject?, error:NSError?) -> Void in\n          if error == nil {\n              // Show photo view controller\n              let viewController = PhotoVC(photo: object);\n              self.navController.pushViewController(viewController, animated: true);\n          }\n      }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Cloud Function from Java\nDESCRIPTION: Example of how to call the averageStars Cloud Function from a Java client. The function accepts a movie parameter and returns the average rating.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_80\n\nLANGUAGE: java\nCODE:\n```\nHashMap<String, String> params = new HashMap();\nparams.put(\"movie\", \"The Matrix\");\nParseCloud.callFunctionInBackground(\"averageStars\", params, new FunctionCallback<Float>() {\n  @Override\n  public void done(Float aFloat, ParseException e) {\n    if (e == null) {\n      // ratings is 4.5\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Calling Parse Users REST Endpoint - JavaScript Example - javascript\nDESCRIPTION: This JavaScript snippet provides a template URL for accessing the special Parse users resource using HTTPS. As with class endpoints, it is formatted for documentation/templating purposes only, showing the location for REST API operations related to the _User class. This endpoint is essential for user account management via REST.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/objects.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<span class=\\\"custom-parse-server-protocol\\\">https</span>://<span class=\\\"custom-parse-server-url\\\">YOUR.PARSE-SERVER.HERE</span><span class=\\\"custom-parse-server-mount\\\">/parse/</span>users\n```\n\n----------------------------------------\n\nTITLE: Exists and Does Not Exist Queries in PHP\nDESCRIPTION: Demonstrates the `exists` and `doesNotExist` functions for identifying objects with or without specific key assignments, enhancing query precision based on field presence.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/queries.md#2025-04-22_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n// Finds objects that have the score set\n$query->exists(\"score\");\n\n// Finds objects that don't have the score set\n$query->doesNotExist(\"score\");\n```\n\n----------------------------------------\n\nTITLE: Initializing ParseClient with Custom Server URL in Objective-C\nDESCRIPTION: This Objective-C snippet configures and initializes the Parse SDK for iOS or OS X by providing a configuration block to set the application ID and server URL. The configuration is passed to the Parse initializer to activate the SDK. Dependency: Parse SDK for Objective-C. The application ID must match that of your Parse Server. The resulting context connects the client to the specified endpoint.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/using-parse-sdks.md#2025-04-22_snippet_1\n\nLANGUAGE: objc\nCODE:\n```\n[Parse initializeWithConfiguration:[ParseClientConfiguration configurationWithBlock:^(id<ParseMutableClientConfiguration> configuration) {\n   configuration.applicationId = @\"YOUR_APP_ID\";\n   configuration.clientKey = @\"\";\n   configuration.server = @\"http://localhost:1337/parse\";\n}]];\n```\n\n----------------------------------------\n\nTITLE: Creating Compound Queries with OR Operator in Python\nDESCRIPTION: Python implementation of a compound query using $or operator to find Player objects that have either more than 150 wins or fewer than 5 wins.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/queries.md#2025-04-22_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\nimport urllib.parse\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nparams = urllib.parse.urlencode({\"where\": json.dumps({\n    \"$or\": [\n        {\n            \"wins\": {\n                \"$gt\": 150\n            }\n        },\n        {\n            \"wins\": {\n                \"$lt\": 5\n            }\n        }\n    ]\n})})\nconnection.connect()\nconnection.request('GET', '/parse/classes/Player?%s' % params, '', {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Querying Users in Parse SDK for C#\nDESCRIPTION: Shows how to query for users based on specific criteria using Parse SDK. This example filters users by gender and returns an IEnumerable of ParseUser objects.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/users.md#2025-04-22_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nParseUser.Query\n    .WhereEqualTo(\"gender\", \"female\")\n    .FindAsync().ContinueWith(t =>\n    {\n        IEnumerable<ParseUser> women = t.Result;\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Datastore with Parse Builder\nDESCRIPTION: Alternative method to enable local datastore using Parse.Configuration.Builder during initialization.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/local-datastore.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nParse.initialize(new Parse.Configuration.Builder(context)\n  .server(...)\n  .applicationId(...)\n  .enableLocalDataStore()\n  .build());\n```\n\n----------------------------------------\n\nTITLE: Creating Follow Relationship - Parse Objective-C/Swift\nDESCRIPTION: These snippets detail creating a follow relationship in the Parse Follow table for Objective-C and Swift, requiring the Parse iOS SDK.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/relations.md#2025-04-22_snippet_10\n\nLANGUAGE: objective_c\nCODE:\n```\n// suppose we have a user we want to follow\nPFUser *otherUser = ...\n\n// create an entry in the Follow table\nPFObject *follow = [PFObject objectWithClassName:@\"Follow\"];\n[follow setObject:[PFUser currentUser]  forKey:@\"from\"];\n[follow setObject:otherUser forKey:@\"to\"];\n[follow setObject:[NSDate date] forKey:@\"date\"];\n[follow saveInBackground];\n```\n\nLANGUAGE: swift\nCODE:\n```\n// suppose we have a user we want to follow\nlet otherUser = ...\n\n// create an entry in the Follow table\nlet follow = PFObject(className: \"Follow\")\nfollow.setObject(PFUser.currentUser()!, forKey: \"from\")\nfollow.setObject(otherUser, forKey: \"to\")\nfollow.setObject(NSDate(), forKey: \"date\")\nfollow.saveInBackground()\n```\n\n----------------------------------------\n\nTITLE: Loading Remote Images with PFImageView in Objective-C\nDESCRIPTION: Demonstrates how to use PFImageView to display a placeholder image and then load a remote image from a PFFileObject stored in Parse Cloud. The PFImageView handles caching both in memory and on disk.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/user-interface.md#2025-04-22_snippet_17\n\nLANGUAGE: objective_c\nCODE:\n```\nPFImageView *imageView = [[PFImageView alloc] init];\nimageView.image = [UIImage imageNamed:@\"...\"]; // placeholder image\nimageView.file = (PFFileObject *)someObject[@\"picture\"]; // remote image\n\n[imageView loadInBackground];\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Sort Keys for Ordering in Parse using Objective-C\nDESCRIPTION: Demonstrates how to perform multi-level sorting in PFQuery by adding secondary sort keys with addAscendingOrder and addDescendingOrder methods. Requires Parse SDK and string field names. Orders results by primary then secondary keys.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/queries.md#2025-04-22_snippet_18\n\nLANGUAGE: objective_c\nCODE:\n```\n// Sorts the results in ascending order by the score field if the previous sort keys are equal.\n[query addAscendingOrder:@\"score\"];\n\n// Sorts the results in descending order by the score field if the previous sort keys are equal.\n[query addDescendingOrder:@\"score\"];\n```\n\n----------------------------------------\n\nTITLE: Using Read Preferences in Parse Server Query (Bash)\nDESCRIPTION: This snippet demonstrates how to use read preferences in a Parse Server query using a curl command. It specifies different read preferences for the main query, included pointers, and subqueries.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/queries.md#2025-04-22_snippet_41\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -G \\\n  --data-urlencode 'where={\"post\":{\"$inQuery\":{\"where\":{\"image\":{\"$exists\":true}},\"className\":\"Post\"}}}' \\\n  --data-urlencode 'include=post' \\\n  --data-urlencode 'readPreference=SECONDARY' \\\n  --data-urlencode 'includeReadPreference=SECONDARY_PREFERRED' \\\n  --data-urlencode 'subqueryReadPreference=NEAREST' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/classes/Comment\n```\n\n----------------------------------------\n\nTITLE: Signing Up and Logging In with Twitter in Parse (cURL)\nDESCRIPTION: Demonstrates how to sign up or log in a user with their Twitter account using Parse Server's REST API. It sends a POST request with the user's Twitter authentication data.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/users.md#2025-04-22_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -H \"X-Parse-Revocable-Session: 1\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"authData\": {\n          \"twitter\": {\n            \"id\": \"12345678\",\n            \"screen_name\": \"ParseIt\",\n            \"consumer_key\": \"SaMpLeId3X7eLjjLgWEw\",\n            \"consumer_secret\": \"SaMpLew55QbMR0vTdtOACfPXa5UdO2THX1JrxZ9s3c\",\n            \"auth_token\": \"12345678-SaMpLeTuo3m2avZxh5cjJmIrAfx4ZYyamdofM7IjU\",\n            \"auth_token_secret\": \"SaMpLeEb13SpRzQ4DAIzutEkCE2LBIm2ZQDsP3WUU\"\n          }\n        }\n      }' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/users\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Parse.User Security Policy\nDESCRIPTION: This code illustrates Parse.User security policy by showing that a user object can only be modified if it was obtained through an authenticated method like login, while attempts to modify user data from non-authenticated methods will fail.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/users.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst user = await Parse.User.logIn(\"my_username\", \"my_password\");\nuser.set(\"username\", \"my_new_username\");\nawait user.save();\n// This succeeds, since the user was authenticated on the device\n\n// Get the user from a non-authenticated method\nconst query = new Parse.Query(Parse.User);\nconst userAgain = await query.get(user.objectId);\nuserAgain.set(\"username\", \"another_username\");\nawait userAgain.save().catch(error => {\n  // This will error, since the Parse.User is not authenticated\n});\n```\n\n----------------------------------------\n\nTITLE: Adding an Author to a Book's Authors Array in Java\nDESCRIPTION: This snippet shows how to add an Author object to the 'authors' array of a Book object in Java. It demonstrates the basic operation for creating a Many-to-Many relationship using Parse.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/relations.md#2025-04-22_snippet_24\n\nLANGUAGE: java\nCODE:\n```\n// let's say we have an author\nParseObject author = ...\n\n// and let's also say we have an book\nParseObject book = ...\n\n// add the author to the authors list for the book\nbook.put(\"authors\", author);\n```\n\n----------------------------------------\n\nTITLE: Implementing Session Restriction Check in Parse Cloud beforeSave Handler\nDESCRIPTION: Cloud Code handler that prevents restricted sessions from modifying specific classes. It queries the session object using the user's session token and throws an error if the session is restricted.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/sessions.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nParse.Cloud.beforeSave(\"MyClass\", async request => {\n  const user = request.user;\n  const token = user.getSessionToken(); \n  const query = new Parse.Query(Parse.Session);\n  query.equalTo('sessionToken', token);\n  const session = await q.first({ useMasterKey: true });\n  if (session.get('restricted')) {\n      throw 'write operation not allowed';\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Response from Creating GameScore Class in Parse Server\nDESCRIPTION: This snippet shows the expected response from the Parse Server after creating the 'GameScore' class. It includes the class name and schema fields, including automatically added fields like objectId, updatedAt, createdAt, and ACL.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/classes.md#2025-04-22_snippet_2\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"data\": {\n    \"createClass\": {\n      \"clientMutationId\": \"anFrontId\",\n      \"class\": {\n        \"name\": \"GameScore\",\n        \"schemaFields\": [\n          {\n            \"name\": \"objectId\",\n            \"__typename\": \"SchemaStringField\"\n          },\n          {\n            \"name\": \"updatedAt\",\n            \"__typename\": \"SchemaDateField\"\n          },\n          {\n            \"name\": \"createdAt\",\n            \"__typename\": \"SchemaDateField\"\n          },\n          {\n            \"name\": \"playerName\",\n            \"__typename\": \"SchemaStringField\"\n          },\n          {\n            \"name\": \"score\",\n            \"__typename\": \"SchemaNumberField\"\n          },\n          {\n            \"name\": \"cheatMode\",\n            \"__typename\": \"SchemaBooleanField\"\n          },\n          {\n            \"name\": \"ACL\",\n            \"__typename\": \"SchemaACLField\"\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: iOS 7 Push Notification Handler Implementation\nDESCRIPTION: Implementation of iOS 7-specific push notification handler with completion callback.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/push-notifications.md#2025-04-22_snippet_13\n\nLANGUAGE: objective_c\nCODE:\n```\n- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo fetchCompletionHandler:(void (^)(UIBackgroundFetchResult))completionHandler {\n  if (application.applicationState == UIApplicationStateInactive) {\n    [PFAnalytics trackAppOpenedWithRemoteNotificationPayload:userInfo];\n  }\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\nfunc application(application: UIApplication,  didReceiveRemoteNotification userInfo: [NSObject : AnyObject],  fetchCompletionHandler completionHandler: (UIBackgroundFetchResult) -> Void) {\n  if application.applicationState == .Inactive {\n    PFAnalytics.trackAppOpenedWithRemoteNotificationPayload(userInfo)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Push Notifications in Windows 8 Launch Event\nDESCRIPTION: Shows how to extract JSON payload from push notifications in the Windows 8 OnLaunched event handler.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/push-notifications.md#2025-04-22_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnLaunched(LaunchActivatedEventArgs args) {\n  var json = ParsePush.PushJson(args);\n  object objectId;\n  if (json.TryGetValue(\"objectId\", out objectId)) {\n    DisplayRichMessageWithObjectId(objectId as string);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Fetching ParseConfig in Android\nDESCRIPTION: Demonstrates how to retrieve the ParseConfig object from the server in an Android application. This example shows how to access a specific integer value from the configuration.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/config.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nParseConfig.getInBackground(new ConfigCallback() {\n  @Override\n  public void done(ParseConfig config, ParseException e) {\n    int number = config.getInt(\"winningNumber\");\n    Log.d(\"TAG\", String.format(\"Yay! The number is %d!\", number));\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Role-Based ACL on Objects\nDESCRIPTION: Shows how to assign read/write permissions to objects based on roles, either by using PFRole objects or role names.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/roles.md#2025-04-22_snippet_2\n\nLANGUAGE: objective_c\nCODE:\n```\nPFRole *moderators = /* Query for some PFRole */;\nPFObject *wallPost = [PFObject objectWithClassName:@\"WallPost\"];\nPFACL *postACL = [PFACL ACL];\n[postACL setWriteAccess:YES forRole:moderators];\nwallPost.ACL = postACL;\n[wallPost saveInBackground];\n```\n\nLANGUAGE: swift\nCODE:\n```\nvar moderators = /* Query for some PFRole */\nvar wallPost = PFObject(className: \"WallPost\")\nvar postACL = PFACL()\npostACL.setWriteAccess(true, forRole:moderators)\nwallPost.ACL = postACL\nwallPost.saveInBackground()\n```\n\n----------------------------------------\n\nTITLE: Creating a Parse.Role with ACL\nDESCRIPTION: This snippet demonstrates how to create a new Parse.Role with an ACL that allows public read access but restricts write access. This ensures the role definition cannot be altered by unauthorized users.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/roles.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// By specifying no write privileges for the ACL, we can ensure the role cannot be altered.\nconst roleACL = new Parse.ACL();\nroleACL.setPublicReadAccess(true);\nconst role = new Parse.Role(\"Administrator\", roleACL);\nrole.save();\n```\n\n----------------------------------------\n\nTITLE: Setting Default ACL with Current User Access in Parse iOS SDK\nDESCRIPTION: This code demonstrates how to set a default ACL for all newly created objects, with automatic access for the current user. This allows the application to maintain security settings across user sessions.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/users.md#2025-04-22_snippet_9\n\nLANGUAGE: objective_c\nCODE:\n```\n[PFACL setDefaultACL:defaultACL withAccessForCurrentUser:YES];\n```\n\nLANGUAGE: swift\nCODE:\n```\nPFACL.setDefaultACL(defaultACL, withAccessForCurrentUser:true)\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Parse Object - cURL Example - bash\nDESCRIPTION: This bash/cURL command demonstrates retrieving an existing GameScore object by sending a GET request to the object's instance endpoint. Required headers for authentication are included, and the endpoint must reflect an actual objectId. The response contains the object's complete data including metadata.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/objects.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\\\\\n  -H \"X-Parse-Application-Id: <span class=\\\"custom-parse-server-appid\\\">${APPLICATION_ID}</span>\" \\\\\\n  -H \"X-Parse-REST-API-Key: <span class=\\\"custom-parse-server-restapikey\\\">${REST_API_KEY}</span>\" \\\\\\n  <span class=\\\"custom-parse-server-protocol\\\">https</span>://<span class=\\\"custom-parse-server-url\\\">YOUR.PARSE-SERVER.HERE</span><span class=\\\"custom-parse-server-mount\\\">/parse/</span>classes/GameScore/Ed1nuqPvcm\n```\n\n----------------------------------------\n\nTITLE: Parse Server Query Response Format\nDESCRIPTION: This JSON snippet illustrates the structure of the response returned by a Parse Server query. It contains a 'results' field with an array of objects, each representing a record in the queried class with various fields and metadata.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/queries.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"results\": [\n    {\n      \"playerName\": \"Jang Min Chul\",\n      \"updatedAt\": \"2022-01-01T12:23:45.678Z\",\n      \"cheatMode\": false,\n      \"createdAt\": \"2022-01-01T12:23:45.678Z\",\n      \"objectId\": \"A22v5zRAgd\",\n      \"score\": 80075\n    },\n    {\n      \"playerName\": \"Sean Plott\",\n      \"updatedAt\": \"2022-01-01T12:23:45.678Z\",\n      \"cheatMode\": false,\n      \"createdAt\": \"2022-01-01T12:23:45.678Z\",\n      \"objectId\": \"Ed1nuqPvcm\",\n      \"score\": 73453\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating PFInstallation with Device Token - Swift\nDESCRIPTION: This Swift code snippet updates the PFInstallation object with the deviceToken post-registration for remote notifications. This is necessary to enable push notifications targeting.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/push-notifications.md#2025-04-22_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nfunc application(application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: NSData) {\n  // Store the deviceToken in the current Installation and save it to Parse\n  let installation = PFInstallation.currentInstallation()\n  installation.setDeviceTokenFromData(deviceToken)\n  installation.saveInBackground()\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Parse Config via REST API - Bash\nDESCRIPTION: Illustrates updating Parse Server configuration using bash and curl with a PUT request, requiring the master key for authentication. The command sends a JSON body specifying updated configuration parameters. Prerequisites include curl, Application ID, and Master Key; the API URL and payload may be adapted depending on the parameters to update.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/config.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT \\\n  -H \"X-Parse-Application-Id: <span class=\\\"custom-parse-server-appid\\\">${APPLICATION_ID}</span>\" \\\n  -H \"X-Parse-Master-Key: <span class=\\\"custom-parse-server-masterkey\\\">${MASTER_KEY}</span>\" \\\n  -d \"{\\\"params\\\":{\\\"winningNumber\\\":43}}\"\n  <span class=\\\"custom-parse-server-protocol\\\">https</span>://<span class=\\\"custom-parse-server-url\\\">YOUR.PARSE-SERVER.HERE</span><span class=\\\"custom-parse-server-mount\\\">/parse/</span>config\n```\n\n----------------------------------------\n\nTITLE: Querying for Values in Arrays with Parse Android SDK\nDESCRIPTION: This snippet shows how to query for objects where an array field contains a specific value using whereEqualTo on the array field.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/queries.md#2025-04-22_snippet_17\n\nLANGUAGE: java\nCODE:\n```\n// Find objects where the array in arrayKey contains the number 2.\nquery.whereEqualTo(\"arrayKey\", 2);\n```\n\n----------------------------------------\n\nTITLE: Geospatial Queries within a Radius in Parse C#\nDESCRIPTION: Shows how to search for GameScore objects within a 10-mile distance using the Parse C# SDK. Employs WhereWithinDistance and FromMiles for specifying the radius; results are retrieved asynchronously.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_67\n\nLANGUAGE: cs\nCODE:\n```\nvar results = await ParseObject.GetQuery(\"GameScore\")\n    .WhereWithinDistance(\"location\", userGeoPoint, ParseGeoDistance.FromMiles(10.0))\n    .FindAsync();\n```\n\n----------------------------------------\n\nTITLE: Example JSONC Response for Nested Relational Query - JSONC\nDESCRIPTION: Example JSONC structure returned by a nested relational query. The response shows a country ('Mars') with cities filtered through a nested constraint, delivering cities whose names match the subquery, each inside its own edge structure. Useful for displaying detailed hierarchical data in UIs.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/queries.md#2025-04-22_snippet_16\n\nLANGUAGE: JSONC\nCODE:\n```\n{\n  \"data\": {\n    \"countries\": {\n      \"edges\": [\n        {\n          \"node\": {\n            \"name\": \"Mars\",\n            \"cities\": {\n              \"edges\": [\n                {\n                  \"node\": {\n                    \"name\": \"Alpha\"\n                  }\n                }\n              ]\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Query Constraints\nDESCRIPTION: Demonstrates how to apply multiple constraints to a ParseQuery, which acts as an AND operation requiring all conditions to be met by returned objects.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/arduino/queries.md#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nquery.whereEqualTo(\"leverDown\", true);\nquery.whereEqualTo(\"temperature\", 100.0);\n```\n\n----------------------------------------\n\nTITLE: Creating a GameScore Class using GraphQL Mutation\nDESCRIPTION: This GraphQL mutation creates a new 'GameScore' class with string, number, and boolean fields. It demonstrates how to use the 'createClass' mutation to define a new class schema in Parse Server.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/classes.md#2025-04-22_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nmutation createGameScoreClass {\n  createClass(\n    input: {\n      clientMutationId: \"anFrontId\"\n      name: \"GameScore\"\n      schemaFields: {\n        addStrings: [{ name: \"playerName\" }]\n        addNumbers: [{ name: \"score\" }]\n        addBooleans: [{ name: \"cheatMode\" }]\n      }\n    }\n  ) {\n    clientMutationId\n    class {\n      name\n      schemaFields {\n        name\n        __typename\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving One-to-Many Relationship Data with Arrays in Parse\nDESCRIPTION: This snippet demonstrates how to retrieve the Weapon objects stored in a user's weaponsList using the Array-based one-to-many relationship in Parse.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/relations.md#2025-04-22_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nArrayList<ParseObject> weapons = ParseUser.getCurrentUser().get(\"weaponsList\");\n```\n\nLANGUAGE: objective_c\nCODE:\n```\nNSArray *weapons = [[PFUser currentUser] objectForKey:@\"weaponsList\"];\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet weapons = PFUser.currentUser()?.objectForKey(\"weaponsList\")\n```\n\nLANGUAGE: php\nCODE:\n```\n$weapons = ParseUser::getCurrentUser()->get(\"weaponsList\");\n```\n\nLANGUAGE: cs\nCODE:\n```\nvar weapons = ParseUser.CurrentUser.Get<IList<Object>>(\"weaponsList\");\n```\n\nLANGUAGE: js\nCODE:\n```\nvar weapons = Parse.User.current().get(\"weaponsList\")\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Role with ACL in Parse Server\nDESCRIPTION: Creates a new role named 'Moderators' with read permissions for all users. Demonstrates basic role creation with required name field and ACL configuration.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/roles.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"name\": \"Moderators\",\n        \"ACL\": {\n          \"*\": {\n            \"read\": true\n          }\n        }\n      }' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/roles\n```\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nconnection.connect()\nconnection.request('POST', '/parse/roles', json.dumps({\n    \"name\": \"Moderators\",\n    \"ACL\": {\n        \"*\": {\n            \"read\": True\n        }\n    }\n}), {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\",\n    \"Content-Type\": \"application/json\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Sending Push to Single Channel\nDESCRIPTION: Demonstrates how to send a push notification to all subscribers of a single channel.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/push-notifications.md#2025-04-22_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nParsePush push = new ParsePush();\npush.setChannel(\"Giants\");\npush.setMessage(\"The Giants just scored! It's now 2-2 against the Mets.\");\npush.sendInBackground();\n```\n\n----------------------------------------\n\nTITLE: Querying a Single Object by ID with Parse Server GraphQL - GraphQL\nDESCRIPTION: This GraphQL query retrieves a single GameScore object by its unique ID using the automatically generated 'gameScore' query. The response includes all specified fields, including Score, Player Name, Cheat Mode flag, and ACL structure. Requires valid request headers for authentication; input parameter 'id' is mandatory, and output contains the object data or null if not found.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/queries.md#2025-04-22_snippet_1\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery getAGameScore {\n  gameScore(id: \"R2FtZVNjb3JlOjZtdGlNcmtXNnY=\") {\n    id\n    score\n    playerName\n    score\n    cheatMode\n    ACL {\n      public {\n        read\n        write\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Channels and Queries for Push Targeting in C#\nDESCRIPTION: This snippet shows how to combine channel-based targeting with query-based filtering to send push notifications to users who have subscribed to both a channel and a specific notification type.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/push-notifications.md#2025-04-22_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nvar push = new ParsePush();\npush.Query = ParseInstallation.Query\n             .WhereEqualTo(\"scores\", true);\npush.Channels = new List<string> { \"Giants\" };\npush.Alert = \"Giants scored against the A's! It's now 2-2.\";\npush.SendAsync();\n```\n\n----------------------------------------\n\nTITLE: Parse Config GET Response Body Example - JSON\nDESCRIPTION: Illustrates a sample response body received when fetching Parse Config. This JSON object contains a 'params' field that holds key-value pairs representing current configuration settings. There are no code dependencies or parameters; structure is for reference purposes.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/config.md#2025-04-22_snippet_2\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"params\": {\n    \"welcomeMessage\": \"Welcome to The Internet!\",\n    \"winningNumber\": 42\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Push Notifications with Query Filters in C#\nDESCRIPTION: This code demonstrates sending a push notification to installations that have subscribed to injury reports. It uses a query to filter the target audience based on stored Installation data.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/push-notifications.md#2025-04-22_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nvar push = new ParsePush();\npush.Query = ParseInstallation.Query\n             .WhereEqualTo(\"injuryReports\", true);\npush.Alert = \"Willie Hayes injured by own pop fly.\";\npush.SendAsync();\n```\n\n----------------------------------------\n\nTITLE: Local Parse Object Storage Operations\nDESCRIPTION: Shows how to pin and retrieve Parse Objects for local storage.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dart/objects.md#2025-04-22_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\ndietPlan.pin();\n\nvar dietPlan = DietPlan().fromPin('OBJECT ID OF OBJECT');\n```\n\n----------------------------------------\n\nTITLE: Filtering with Not-Equal Constraints using PFQuery and NSPredicate in Objective-C\nDESCRIPTION: Illustrates how to filter objects in a Parse query such that the provided key does not equal a specified value, either directly via PFQuery or using NSPredicate for complex queries. Dependencies include Parse iOS SDK and Foundation framework. The key parameter is the field to filter, and the value is the one to exclude from results. The expected input is an initialized PFQuery, and output is a query instance that excludes matching records.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/queries.md#2025-04-22_snippet_6\n\nLANGUAGE: objective_c\nCODE:\n```\n// Using PFQuery\n[query whereKey:@\"playerName\" notEqualTo:@\"Michael Yabuti\"];\n\n// Using NSPredicate\nNSPredicate *predicate = [NSPredicate predicateWithFormat:   @\"playerName != 'Michael Yabuti'\"];\nPFQuery *query = [PFQuery queryWithClassName:@\"GameScore\" predicate:predicate];\n```\n\n----------------------------------------\n\nTITLE: Checking if a Polygon Contains a Point in Parse JavaScript SDK\nDESCRIPTION: Demonstrates how to efficiently check if a Parse.Polygon contains a Parse.GeoPoint without querying, using the containsPoint method.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/geopoints.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst points = [[0,0], [0,1], [1,1], [1,0]];\nconst inside = new Parse.GeoPoint(0.5, 0.5);\nconst outside = new Parse.GeoPoint(10, 10);\nconst polygon = new Parse.Polygon(points);\n// Returns True\npolygon.containsPoint(inside);\n// Returns False\npolygon.containsPoint(outside);\n```\n\n----------------------------------------\n\nTITLE: Sending Push Notification to Channel in Parse .NET SDK\nDESCRIPTION: This snippet demonstrates how to send a push notification to all devices subscribed to the \"Giants\" channel using the Parse .NET SDK. It creates a ParsePush object, sets the channel, and sends an alert message.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/push-notifications.md#2025-04-22_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n// Send a notification to all devices subscribed to the \"Giants\" channel.\nvar push = new ParsePush();\npush.Channels = new List<string> {\"Giants\"};\npush.Alert = \"The Giants just scored!\";\nawait push.SendAsync();\n```\n\n----------------------------------------\n\nTITLE: Creating Function Webhook using Python in Parse Server\nDESCRIPTION: Python script to create a function webhook in Parse Server. It establishes an HTTPS connection and sends a POST request with the required headers and payload.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/hooks.md#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nconnection.connect()\nconnection.request('POST', '/parse/hooks/functions', json.dumps({\n    \"functionName\": \"baz\",\n    \"url\": \"https://api.example.com/baz\"\n}), {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-Master-Key\": \"${MASTER_KEY}\",\n    \"Content-Type\": \"application/json\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Initializing Parse Server with LiveQuery Support in JavaScript\nDESCRIPTION: This snippet demonstrates how to configure a Parse Server instance to enable LiveQuery for specific object classes. The 'liveQuery' option is included in the server configuration to specify class names for which LiveQuery should be active. Ensure that the Parse Server package is installed, and replace class names as appropriate for your application. This setting is a prerequisite to enabling real-time features and must be included before starting the server.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/live-query.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet api = new ParseServer({\\n  ...,\\n  liveQuery: {\\n    classNames: ['Test', 'TestAgain']\\n  }\\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Array Values in Parse with Swift\nDESCRIPTION: Swift implementation for querying objects where an array field contains a specific value using either PFQuery or NSPredicate. This example finds objects where the array in 'arrayKey' contains the value 2.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/queries.md#2025-04-22_snippet_37\n\nLANGUAGE: swift\nCODE:\n```\n// Find objects where the array in arrayKey contains 2.\n// Using PFQuery\nquery.whereKey(\"arrayKey\", equalTo: 2)\n\n// Or using NSPredicate\nlet predicate = NSPredicate(format: \"2 IN arrayKey\")\nlet query = PFQuery(className: \"MyClass\", predicate: predicate)\n```\n\n----------------------------------------\n\nTITLE: Incrementing Counter Fields\nDESCRIPTION: Shows how to atomically increment counter fields in a ParseObject.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/objects.md#2025-04-22_snippet_10\n\nLANGUAGE: cs\nCODE:\n```\ngameScore.Increment(\"score\");\nTask saveTask = gameScore.SaveAsync();\n```\n\n----------------------------------------\n\nTITLE: Querying Within a Polygon with ParseGeoPoint in PHP\nDESCRIPTION: This example shows how to use the `withinPolygon` method for geospatial queries, checking if a `ParseGeoPoint` lies within a specified polygon. The snippet requires defining at least three `ParseGeoPoint` objects to form the polygon.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/queries.md#2025-04-22_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n// construct 3 geo points\n$geoPoint1 = new ParseGeoPoint();\n$geoPoint2 = new ParseGeoPoint();\n$geoPoint3 = new ParseGeoPoint();\n\n// restrict to any objects where `myGeoPoint` lies within a polygon made by 3 or more geo points\n$query->withinPolygon(\"myGeoPoint\", [$geoPoint1, $geoPoint2, $geoPoint3]);\n```\n\n----------------------------------------\n\nTITLE: Finding Distinct Field Values with Query Constraints in Bash\nDESCRIPTION: Bash curl command that combines a where clause with distinct query to find unique score values for a specific player. Requires master key and uses the aggregate endpoint.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/queries.md#2025-04-22_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-Master-Key: ${MASTER_KEY}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -G \\\n  --data-urlencode 'where={\"playerName\":\"Sean Plott\"},distinct=score' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/aggregate/GameScore\n```\n\n----------------------------------------\n\nTITLE: Finding Nearest Objects with GeoPoint Using Python\nDESCRIPTION: Makes a GET request using Python to find the 10 closest places to a specified geographic point. The code constructs the query parameters with the $nearSphere operator and handles the HTTP connection.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/geopoints.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\nimport urllib.parse\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nparams = urllib.parse.urlencode({\"limit\": 10, \"where\": json.dumps({\n    \"location\": {\n        \"$nearSphere\": {\n            \"__type\": \"GeoPoint\",\n            \"latitude\": 30.0,\n            \"longitude\": -20.0\n        }\n    }\n})})\nconnection.connect()\nconnection.request('GET', '/parse/classes/PlaceObject?%s' % params, '', {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Calling Cloud Function from JavaScript Client\nDESCRIPTION: Example of how to call the averageStars Cloud Function from a JavaScript client. The function accepts a movie parameter and returns the average rating.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_77\n\nLANGUAGE: javascript\nCODE:\n```\nParse.Cloud.run(\"averageStars\", { \"movie\": \"The Matrix\" }).then(function(ratings) {\n  // ratings is 4.5\n});\n```\n\n----------------------------------------\n\nTITLE: Encoding Date Objects in Parse Server\nDESCRIPTION: Shows the format for encoding Date objects in Parse Server using the __type field and ISO 8601 timestamp format with millisecond precision.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/objects.md#2025-04-22_snippet_31\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"__type\": \"Date\",\n  \"iso\": \"2022-01-01T12:23:45.678Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Aggregate Query with Group in Parse Server (Python)\nDESCRIPTION: This snippet shows how to perform an aggregate query with grouping in Parse Server using Python. It groups objects by objectId, calculates the sum of scores, and includes a distinct parameter for scores.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/queries.md#2025-04-22_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\nimport urllib.parse\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nparams = urllib.parse.urlencode({\"group\": json.dumps({\n    \"objectId\": null,\n    \"total\": {\n        \"$sum\": \"$score\"\n    }\n}),\n\"distinct\": \"score\"})\nconnection.connect()\nconnection.request('GET', '/parse/aggregate/Player?%s' % params, '', {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-Master-Key\": \"${MASTER_KEY}\"\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Implementing Periodic Config Refresh Helper\nDESCRIPTION: Demonstrates how to create a helper method that refreshes the configuration at most once every 12 hours to reduce unnecessary network requests while maintaining relatively up-to-date configuration.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/config.md#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nclass Helper {\n  private static final long configRefreshInterval = 12 * 60 * 60 * 1000;\n  private static long lastFetchedTime;\n\n  // Fetches the config at most once every 12 hours per app runtime\n  public static void refreshConfig() {\n    long currentTime = System.currentTimeMillis();\n    if (currentTime - lastFetchedTime > configRefreshInterval) {\n      lastFetchedTime = currentTime;\n      ParseConfig.getInBackground();\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Remote Config with Completion Block - Parse PFConfig - Objective-C\nDESCRIPTION: Demonstrates how to asynchronously fetch a remote configuration using PFConfig's getConfigInBackgroundWithBlock method in Objective-C. Relies on the Parse iOS SDK (PFConfig class) and uses a completion block to access the config and handle errors. The snippet retrieves a 'winningNumber' parameter and logs its value. Input: none; Output: logs value of 'winningNumber' or error via NSLog. Requires network access and correct Parse SDK setup.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/config.md#2025-04-22_snippet_0\n\nLANGUAGE: objective_c\nCODE:\n```\n[PFConfig getConfigInBackgroundWithBlock:^(PFConfig *config, NSError *error) {\n  NSNumber *number = config[@\"winningNumber\"];\n  NSLog(@\"Yay! The number is %@!\", [number stringValue]);\n}];\n```\n\n----------------------------------------\n\nTITLE: Fetching Remote Config with Completion Block - Parse PFConfig - Swift\nDESCRIPTION: Shows how to fetch the PFConfig object asynchronously in Swift using getConfigInBackgroundWithBlock. Depends on the Parse SDK and expects a 'winningNumber' key in the config. The completion handler retrieves and prints the 'winningNumber', if present. Input: none; Output: prints retrieved number or nil if not available. Proper setup of Parse and network connectivity are required.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/config.md#2025-04-22_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nPFConfig.getConfigInBackgroundWithBlock {\n  (config: PFConfig?, error: NSError?) -> Void in\n  let number = config?[\"winningNumber\"] as? Int\n  print(\"Yay! The number is \\(number)!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Subscribed Channels in C#\nDESCRIPTION: Demonstrates how to retrieve the list of channels an Installation is currently subscribed to using Parse SDK in C#.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/push-notifications.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar installation = ParseInstallation.CurrentInstallation\nIEnumerable<string> subscribedChannels = installation.Channels;\n```\n\n----------------------------------------\n\nTITLE: Expected Response from Custom Mutation\nDESCRIPTION: The expected JSON response from the Parse GraphQL API when executing the addToCart mutation, returning the new or updated cart item with its Relay-encoded ID and quantity.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/customisation.md#2025-04-22_snippet_21\n\nLANGUAGE: jsonc\nCODE:\n```\n// Response\n{\n  \"data\": {\n    \"addToCart\": {\n      \"id\": \"Q2FydEl0ZW06akVVTHlGZnVpQw==\",\n      \"quantity\": 1\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initiating Facebook Login in Windows Phone App\nDESCRIPTION: This code snippet shows how to start the Facebook login process, which will switch to the Facebook app for authentication. The permissions parameter allows specifying what Facebook permissions are requested.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/users.md#2025-04-22_snippet_17\n\nLANGUAGE: cs\nCODE:\n```\nParseFacebookUtils.BeginLogin(permissions);\n```\n\n----------------------------------------\n\nTITLE: Handling LiveQuery Update Events in Dart\nDESCRIPTION: This code shows how to handle LiveQuery update events. It demonstrates accessing the updated ParseObject and its properties after an update occurs.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dart/queries.md#2025-04-22_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nsubscription.on(LiveQueryEvent.update, (value) {\n    print('*** UPDATE ***: ${DateTime.now().toString()}\\n $value ');\n    print((value as ParseObject).objectId);\n    print((value as ParseObject).updatedAt);\n    print((value as ParseObject).createdAt);\n    print((value as ParseObject).get('objectId'));\n    print((value as ParseObject).get('updatedAt'));\n    print((value as ParseObject).get('createdAt'));\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Parse SDK with Custom Server URL in Android (Java)\nDESCRIPTION: This Java code initializes the Parse SDK in an Android environment by building a Parse.Configuration object with a specified application ID and server URL. 'myContext' refers to the Android Context instance required for initialization. Dependency: Parse Android SDK. The application ID and server URL must correspond to your Parse Server's settings.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/using-parse-sdks.md#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nParse.initialize(new Parse.Configuration.Builder(myContext)\n    .applicationId(\"YOUR_APP_ID\")\n    .server(\"http://localhost:1337/parse/\")\n    ...\n    .build()\n);\n```\n\n----------------------------------------\n\nTITLE: Linking and Unlinking Twitter Accounts with Parse Users\nDESCRIPTION: This snippet shows how to link an existing Parse user with a Twitter account and how to unlink them. It demonstrates checking if a user is already linked with Twitter before attempting to link or unlink.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/users.md#2025-04-22_snippet_22\n\nLANGUAGE: objective_c\nCODE:\n```\nif (![PFTwitterUtils isLinkedWithUser:user]) {\n    [PFTwitterUtils linkUser:user block:^(BOOL succeeded, NSError *error) {\n        if ([PFTwitterUtils isLinkedWithUser:user]) {\n          NSLog(@\"Woohoo, user logged in with Twitter!\");\n        }\n    }];\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\nif !PFTwitterUtils.isLinkedWithUser(user) {\n  PFTwitterUtils.linkUser(user, {\n    (succeeded: Bool?, error: NSError?) -> Void in\n    if PFTwitterUtils.isLinkedWithUser(user) {\n      print(\"Woohoo, user logged in with Twitter!\")\n    }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking Search Event with Parse Analytics in PHP\nDESCRIPTION: This snippet demonstrates how to track a search event using Parse Analytics, categorizing events by dimensions such as price range, source, and day type. Prerequisites include Parse SDK for PHP. Inputs include event name and associated dimensions. The method sends event data to Parse's backend for analytics.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/analytics.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n// Define ranges to bucket data points into meaningful segments\n$dimensions = [\n  \"priceRange\" => '1000-1500', \n  \"source\" => 'craigslist', \n  \"dayType\": 'weekday'\n];\n// Send the dimensions to Parse along with the 'search' event\nParseAnalytics::track('search', $dimensions);\n```\n\n----------------------------------------\n\nTITLE: Creating a Private Object with ParseACL in C#\nDESCRIPTION: Creates a private note object that can only be accessed by the currently logged-in user by applying a ParseACL that restricts access to that user.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/users.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar privateNote = new ParseObject(\"Note\");\nprivateNote[\"content\"] = \"This note is private!\";\nprivateNote.ACL = new ParseACL(ParseUser.CurrentUser);\nTask saveTask = privateNote.SaveAsync();\n```\n\n----------------------------------------\n\nTITLE: Deleting a Single Field from an Object with Parse REST API (Bash)\nDESCRIPTION: This Bash snippet demonstrates how to delete a single field from an object using the Delete operation. It sends a PUT request with a JSON payload specifying the field to be deleted.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/objects.md#2025-04-22_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"opponents\":{\"__op\":\"Delete\"}}' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/classes/GameScore/Ed1nuqPvcm\n```\n\n----------------------------------------\n\nTITLE: Calling a Cloud Function from iOS in Swift\nDESCRIPTION: This snippet demonstrates calling the 'averageRatings' Cloud Function from an iOS app using Swift. It passes the movie name and handles the result in a completion handler.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/cloudcode/cloud-code.md#2025-04-22_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nPFCloud.callFunction(inBackground: \"averageRatings\", withParameters: [\"movie\":\"The Matrix\"]) {\n\t(response, error) in\n\tlet ratings = response as? Float\n\t// ratings is 4.5\n}\n```\n\n----------------------------------------\n\nTITLE: Saving PFFileObject\nDESCRIPTION: Shows how to save a PFFileObject to Parse cloud storage.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/files.md#2025-04-22_snippet_1\n\nLANGUAGE: objective-c\nCODE:\n```\n[file saveInBackground];\n```\n\nLANGUAGE: swift\nCODE:\n```\nfile?.saveInBackground()\n```\n\n----------------------------------------\n\nTITLE: Registering for Push Notifications (Duplicate) - Objective-C\nDESCRIPTION: This Objective-C snippet repeats the user notification registration process and remote notification registration for iOS apps. To be used in the app delegate, it ensures that the app is registered with all three notification types. Requires dependencies on UIKit and the app being set to receive remote notifications.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/push-notifications-ios.md#2025-04-22_snippet_4\n\nLANGUAGE: objc\nCODE:\n```\n// Objective-C\\nUIUserNotificationType userNotificationTypes = (UIUserNotificationTypeAlert |\\n                                                UIUserNotificationTypeBadge |\\n                                                UIUserNotificationTypeSound);\\nUIUserNotificationSettings *settings = [UIUserNotificationSettings settingsForTypes:userNotificationTypes\\n                                                                         categories:nil];\\n[application registerUserNotificationSettings:settings];\\n[application registerForRemoteNotifications];\n```\n\n----------------------------------------\n\nTITLE: Selecting Keys in beforeFind Trigger\nDESCRIPTION: This example shows how to force the selection of specific keys in a query using the beforeFind trigger. It modifies the query to select only 'key1' and 'key2'.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/cloudcode/cloud-code.md#2025-04-22_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\n// Selecting keys\nParse.Cloud.beforeFind('MyObject', (req) => {\n  let query = req.query; // the Parse.Query\n  // Force the selection on some keys\n  query.select(['key1', 'key2']);\n});\n```\n\n----------------------------------------\n\nTITLE: Associating Installation with User in Parse iOS SDK\nDESCRIPTION: Demonstrates how to create a relationship between an Installation object and a User object in Parse. This allows sending targeted push notifications to specific users.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/push-notifications.md#2025-04-22_snippet_8\n\nLANGUAGE: objective-c\nCODE:\n```\n// Associate the device with a user\nPFInstallation *installation = [PFInstallation currentInstallation];\ninstallation[@\"user\"] = [PFUser currentUser];\n[installation saveInBackground];\n```\n\nLANGUAGE: swift\nCODE:\n```\n// Associate the device with a user\nlet installation = PFInstallation.currentInstallation()\ninstallation[\"user\"] = PFUser.currentUser()\ninstallation.saveInBackground()\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific Object by ObjectId in Dart\nDESCRIPTION: This code snippet shows how to fetch a specific object from Parse Server using its objectId. It demonstrates error handling and accessing the result.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dart/queries.md#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar dietPlan = await DietPlan().getObject('R5EonpUDWy');\n\nif (dietPlan.success) {\n  print(ApplicationConstants.keyAppName + \": \" + (dietPlan.result as DietPlan).toString());\n} else {\n  print(ApplicationConstants.keyAppName + \": \" + dietPlan.exception.message);\n}\n```\n\n----------------------------------------\n\nTITLE: Full Response of Retrieved Object\nDESCRIPTION: Expected JSON response for retrieving a specific object includes attributes such as 'objectId', 'score', and timestamps 'createdAt' and 'updatedAt'.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/getting-started.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"objectId\": \"2ntvSpRGIK\",\n  \"score\": 123,\n  \"playerName\": \"Sean Plott\",\n  \"cheatMode\": false,\n  \"updatedAt\": \"2022-01-01T12:23:45.678Z\",\n  \"createdAt\": \"2022-01-01T12:23:45.678Z\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Limiting Search Distance with Python\nDESCRIPTION: Makes a GET request using Python to find places within a specific radius (10 miles) of a geographic point by combining $nearSphere with $maxDistanceInMiles.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/geopoints.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\nimport urllib.parse\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nparams = urllib.parse.urlencode({\"where\": json.dumps({\n    \"location\": {\n        \"$nearSphere\": {\n            \"__type\": \"GeoPoint\",\n            \"latitude\": 30.0,\n            \"longitude\": -20.0\n        },\n        \"$maxDistanceInMiles\": 10.0\n    }\n})})\nconnection.connect()\nconnection.request('GET', '/parse/classes/PlaceObject?%s' % params, '', {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Initializing FSAdapter with Encryption in Parse Server\nDESCRIPTION: Sets up a file storage adapter with encryption using the parse-server-fs-adapter. The adapter is configured with an optional files subdirectory and a mandatory encryption key for securing files at rest using AES256-GCM.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/file-adapters.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar FSFilesAdapter = require('@parse/fs-files-adapter');\n\nvar fsAdapter = new FSFilesAdapter({\n  \"filesSubDirectory\": \"my/files/folder\", // optional, defaults to ./files\n  \"encryptionKey\": \"someKey\" //mandatory if you want to encrypt files\n});\n\nvar api = new ParseServer({\n\tappId: 'my_app',\n\tmasterKey: 'master_key',\n\tfilesAdapter: fsAdapter\n})\n```\n\n----------------------------------------\n\nTITLE: Sending Push Notification to Android Devices with Parse Server REST API\nDESCRIPTION: This snippet demonstrates how to send a push notification specifically to Android devices using Parse Server's REST API. It includes the necessary headers and JSON payload for targeting Android devices.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/push-notifications.md#2025-04-22_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"where\": {\n          \"deviceType\": \"android\"\n        },\n        \"data\": {\n          \"alert\": \"Your suitcase has been filled with tiny robots!\"\n        }\n      }' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/push\n```\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nconnection.connect()\nconnection.request('POST', '/parse/push', json.dumps({\n    \"where\": {\n        \"deviceType\": \"android\"\n    },\n    \"data\": {\n        \"alert\": \"Your suitcase has been filled with tiny robots!\"\n    }\n}), {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\",\n    \"Content-Type\": \"application/json\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Running a Cloud Job via REST API in Parse\nDESCRIPTION: This curl command shows how to execute a Cloud Job using the Parse REST API. It requires the application ID and master key for authentication.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/cloudcode/cloud-code.md#2025-04-22_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\ncurl -X POST -H 'X-Parse-Application-Id: appId' -H 'X-Parse-Master-Key: masterKey' https://my-parse-server.com/parse/jobs/myJob\n```\n\n----------------------------------------\n\nTITLE: Associating ParseInstallation with ParseUser in Parse .NET SDK\nDESCRIPTION: This snippet demonstrates how to create a relationship between a ParseInstallation object and the current ParseUser. It stores the current user on the installation object and saves it.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/push-notifications.md#2025-04-22_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\n// Associate the device with a user\nvar installation = ParseInstallation.CurrentInstallation;\ninstallation[\"user\"] = ParseUser.CurrentUser;\nawait installation.SaveAsync();\n```\n\n----------------------------------------\n\nTITLE: Saving User Preferences for Push Notifications in Parse .NET SDK\nDESCRIPTION: This code shows how to store user preferences for different types of push notifications on a ParseInstallation object. It sets boolean flags for various notification categories and saves the installation.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/push-notifications.md#2025-04-22_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n// Store the category of push notifications the user would like to receive.\nvar installation = ParseInstallation.CurrentInstallation;\ninstallation[\"scores\"] = true;\ninstallation[\"gameResults\"] = true;\ninstallation[\"injuryReports\"] = true;\nawait installation.SaveAsync();\n```\n\n----------------------------------------\n\nTITLE: Setting Twitter-like Public Read Access in Parse iOS SDK\nDESCRIPTION: This example shows how to implement a Twitter-like access pattern where content is generally visible to everyone. It sets a default ACL with public read access while ensuring the current user has write access.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/users.md#2025-04-22_snippet_10\n\nLANGUAGE: objective_c\nCODE:\n```\nPFACL *defaultACL = [PFACL ACL];\n[defaultACL setPublicReadAccess:YES];\n[PFACL setDefaultACL:defaultACL withAccessForCurrentUser:YES];\n```\n\nLANGUAGE: swift\nCODE:\n```\nvar defaultACL = PFACL.ACL()\ndefaultACL.setPublicReadAccess(true)\nPFACL.setDefaultACL(defaultACL, withAccessForCurrentUser:true)\n```\n\n----------------------------------------\n\nTITLE: Using String Prefix Queries in Parse with Swift\nDESCRIPTION: Swift implementation for string prefix matching in queries using either PFQuery's whereKey(_:hasPrefix:) method or NSPredicate. This example finds BarbecueSauce objects where the name starts with 'Big Daddy'.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/queries.md#2025-04-22_snippet_41\n\nLANGUAGE: swift\nCODE:\n```\n// Finds barbecue sauces that start with \"Big Daddy\".\n// Using PFQuery\nlet query = PFQuery(className: \"BarbecueSauce\")\nquery.whereKey(\"name\", hasPrefix: \"Big Daddy's\")\n\n// Using NSPredicate\nlet pred = NSPredicate(format: \"name BEGINSWITH 'Big Daddy\")\nlet query = PFQuery(className: \"BarbecueSauce\", predicate: predicate)\n```\n\n----------------------------------------\n\nTITLE: Saving ParseObject Example\nDESCRIPTION: Demonstrates how to create and save a GameScore object to Parse Cloud.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/objects.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\nParseObject gameScore = new ParseObject(\"GameScore\");\ngameScore[\"score\"] = 1337;\ngameScore[\"playerName\"] = \"Sean Plott\";\nTask saveTask = gameScore.SaveAsync();\n```\n\n----------------------------------------\n\nTITLE: Retrieving a ParsePolygon from a ParseObject in Java\nDESCRIPTION: This code shows how to retrieve a ParsePolygon from a ParseObject.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/geopoints.md#2025-04-22_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nplaceObject.getParsePolygon(\"bounds\");\n```\n\n----------------------------------------\n\nTITLE: Retrieving Parse Config Parameters in Dart\nDESCRIPTION: Demonstrates how to fetch configuration parameters from Parse Server using the Parse Config functionality. Returns a map of all config parameters.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dart/config.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvar response = await ParseConfig().getConfigs();\n```\n\n----------------------------------------\n\nTITLE: Querying Follow Table - Parse JavaScript\nDESCRIPTION: A JavaScript snippet that queries the Follow table in Parse to find all users being followed by the current user, using the Parse JavaScript SDK.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/relations.md#2025-04-22_snippet_18\n\nLANGUAGE: js\nCODE:\n```\nconst query = new Parse.Query(\"Follow\");\nquery.equalTo(\"from\", Parse.User.current());\nconst users = await query.find();\n```\n\n----------------------------------------\n\nTITLE: Configuring GCSAdapter with Options for Parse Server\nDESCRIPTION: This code snippet shows the constructor signature for the GCSAdapter with all available options. It includes parameters for project ID, keyfile path, bucket, and an options object that can contain bucket prefix and direct access settings.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/file-adapters.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nnew GCSAdapter(projectId, keyfilePath, bucket, options)\n```\n\n----------------------------------------\n\nTITLE: Updating a Parse User via REST API in Bash\nDESCRIPTION: Makes a PUT request to update a specific user's data. Requires the session token for authentication. Only the specified fields will be updated while others remain unchanged.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/users.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -H \"X-Parse-Session-Token: r:pnktnjyb996sj4p156gjtp4im\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"phone\":\"415-369-6201\"}' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/users/g7y9tkhB7O\n```\n\n----------------------------------------\n\nTITLE: Inefficient notEqualTo User Query in Swift\nDESCRIPTION: Demonstrates another inefficient query pattern in Swift using notEqualTo that should be rewritten for better index utilization.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_20\n\nLANGUAGE: swift\nCODE:\n```\nvar query = PFUser.query()\nquery.whereKey(\"state\", notEqualTo: \"Invited\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Signup Fields in Parse iOS SDK\nDESCRIPTION: Code showing how to configure which fields appear in the PFSignUpViewController by setting the fields property. This example adds an additional field beyond the default username, password, email, and buttons.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/user-interface.md#2025-04-22_snippet_8\n\nLANGUAGE: objective_c\nCODE:\n```\nsignUpController.fields = (PFSignUpFieldsUsernameAndPassword\n                          | PFSignUpFieldsSignUpButton\n                          | PFSignUpFieldsEmail\n                          | PFSignUpFieldsAdditional\n                          | PFSignUpFieldsDismissButton);\n```\n\nLANGUAGE: swift\nCODE:\n```\nsignUpController.fields = [.usernameAndPassword, .signUpButton, .email, .additional, .dismissButton]\n```\n\n----------------------------------------\n\nTITLE: Checking Cache Status in Parse SDK\nDESCRIPTION: Shows how to check if a query result is cached. This allows determining whether data exists in the local cache before executing a network request.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/queries.md#2025-04-22_snippet_54\n\nLANGUAGE: objective_c\nCODE:\n```\nBOOL isInCache = [query hasCachedResult];\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet isInCache = query.hasCachedResult\n```\n\n----------------------------------------\n\nTITLE: Querying Movies with Review Count in C#\nDESCRIPTION: An optimized query for fetching movies that already contain their review counts as a field in C#. This avoids expensive count operations on the Review class.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_94\n\nLANGUAGE: cs\nCODE:\n```\nvar results = await ParseObject.GetQuery(\"Movie\")\n    .FindAsync();\n// Results include the reviews count field\n```\n\n----------------------------------------\n\nTITLE: Complex Data Types Example\nDESCRIPTION: Demonstrates storing various data types including lists and dictionaries in a ParseObject.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/objects.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\nint number = 42;\nstring str = \"the number is \" + number;\nDateTime date = DateTime.Now;\nIList<object> list = new List<object> { str, number };\nIDictionary<string, object> dictionary = new Dictionary<string, object>\n{\n    { \"number\", number },\n    { \"string\", str }\n};\n\nvar bigObject = new ParseObject(\"BigObject\");\nbigObject[\"myNumber\"] = number;\nbigObject[\"myString\"] = str;\nbigObject[\"myDate\"] = date;\nbigObject[\"myList\"] = list;\nbigObject[\"myDictionary\"] = dictionary;\nTask saveTask = bigObject.SaveAsync();\n```\n\n----------------------------------------\n\nTITLE: Querying if a Polygon Contains a GeoPoint in Parse JavaScript SDK\nDESCRIPTION: Shows how to query for Parse.Polygon objects that contain a specific Parse.GeoPoint.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/geopoints.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst p1 = [[0,0], [0,1], [1,1], [1,0]];\nconst p2 = [[0,0], [0,2], [2,2], [2,0]];\nconst p3 = [[10,10], [10,15], [15,15], [15,10], [10,10]];\n\nconst polygon1 = new Parse.Polygon(p1);\nconst polygon2 = new Parse.Polygon(p2);\nconst polygon3 = new Parse.Polygon(p3);\n\nconst point = new Parse.GeoPoint(0.5, 0.5);\nconst query = new Parse.Query(TestObject);\nquery.polygonContains('polygon', point);\n// objects contains polygon1 and polygon2\nconst results = await query.find();\n```\n\n----------------------------------------\n\nTITLE: Example JSONC Response for Single Object Query - JSONC\nDESCRIPTION: Sample response structure for a successful single object fetch. Returns the GameScore object with all requested fields, nested ACL information, and simple boolean flags. The 'data.gameScore' key contains the resulting object or null if not found.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/queries.md#2025-04-22_snippet_2\n\nLANGUAGE: JSONC\nCODE:\n```\n{\n  \"data\": {\n    \"gameScore\": {\n      \"id\": \"R2FtZVNjb3JlOjZtdGlNcmtXNnY=\",\n      \"score\": 1337,\n      \"playerName\": \"Sean Plott\",\n      \"cheatMode\": false,\n      \"ACL\": {\n        \"public\": {\n          \"read\": true,\n          \"write\": true\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSONC: Successful Parse Server Health Response\nDESCRIPTION: Shows an example JSONC structure representing a successful health check response from the Parse Server. A 'status' of 200 (HTTP OK) indicates the server is reachable and responding correctly via the configured URL and mount path. The 'response' field contains the server's reply.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/setup.md#2025-04-22_snippet_5\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"status\"    : 200,\n    \"response\"  : {\n        \"status\" : \"ok\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Local Datastore Retrieval - Java\nDESCRIPTION: Demonstrates how to retrieve objects from local datastore using ParseQuery.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/objects.md#2025-04-22_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nParseQuery<ParseObject> query = ParseQuery.getQuery(\"GameScore\");\nquery.fromLocalDatastore();\nquery.getInBackground(\"xWMyZ4YEGZ\", new GetCallback<ParseObject>() {\n  public void done(ParseObject object, ParseException e) {\n    if (e == null) {\n      // object will be your game score\n    } else {\n      // something went wrong\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Parse with Storage Configuration\nDESCRIPTION: Demonstrates how to specify the storage method when initializing the Parse library using the coreStore parameter. This parameter determines whether to use secure storage (Sembast) or unsecure storage (SharedPreferences).\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dart/storage.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nParse().initialize\n```\n\n----------------------------------------\n\nTITLE: Making Twitter API Calls with Parse SDK\nDESCRIPTION: This snippet shows how to make authenticated requests to the Twitter REST API using Parse SDK. It demonstrates signing HTTP requests with the user's Twitter credentials and handling the response data.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/users.md#2025-04-22_snippet_24\n\nLANGUAGE: objective_c\nCODE:\n```\nNSURL *verify = [NSURL URLWithString:@\"https://api.twitter.com/1.1/account/verify_credentials.json\"];\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:verify];\n[[PFTwitterUtils twitter] signRequest:request];\nNSURLSessionDataTask *task = [[NSURLSession sharedSession] dataTaskWithRequest:request\n                                                             completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  // Check for error\n  // Data will contain the response data\n}];\n[task resume];\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet verify = NSURL(string: \"https://api.twitter.com/1.1/account/verify_credentials.json\")\nvar request = NSMutableURLRequest(URL: verify!)\nPFTwitterUtils.twitter()!.signRequest(request)\nlet task = NSURLSession.sharedSession().dataTaskWithRequest(request) { data, response, error in\n  // Check for error\n  // Data will contain the response data\n}\ntask.resume()\n```\n\n----------------------------------------\n\nTITLE: Linking Parse User with Facebook Account in C#\nDESCRIPTION: Shows how to link an existing Parse user with a Facebook account and how to unlink them.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/users.md#2025-04-22_snippet_12\n\nLANGUAGE: cs\nCODE:\n```\nif (!ParseFacebookUtils.IsLinked(user))\n{\n    // Make your browser control visible\n    try\n    {\n        await ParseFacebookUtils.LinkAsync(user, browser, null);\n        // The user logged in with Facebook!\n    }\n    catch\n    {\n        // User cancelled the Facebook login or did not fully authorize.\n    }\n    // Hide your browser control\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Data Type Retrieval\nDESCRIPTION: Demonstrates retrieving and processing complex data types from a ParseObject.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/objects.md#2025-04-22_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\nParseObject bigObject = t.Result;\nint number = bigObject.Get<int>(\"myNumber\");\nstring str = bigObject.Get<string>(\"myString\");\nDateTime date = bigObject.Get<DateTime>(\"myDate\");\nbyte[] data = bigObject.Get<byte[]>(\"myData\");\nIList<object> list = bigObject.Get<List<object>>(\"myList\");\nIDictionary<string, object> dictionary = bigObject.Get<Dictionary<string, object>>(\"myDictionary\");\nDebug.Log (\"Number: \" + number);\nDebug.Log (\"String: \" + str);\nDebug.Log (\"Date: \" + date);\nstring dataString = System.Text.Encoding.UTF8.GetString(data, 0, data.Length);\nDebug.Log (\"Data: \" + dataString);\nforeach (var item in list) {\n    Debug.Log (\"Item: \" + item.ToString());\n}\nforeach (var key in dictionary.Keys) {\n    Debug.Log (\"Key: \" + key + \" Value: \" + dictionary[key].ToString());\n}\n```\n\n----------------------------------------\n\nTITLE: Querying PFRelation Objects in Parse SDK (Objective-C and Swift)\nDESCRIPTION: Shows how to query objects in a PFRelation. By default, related objects are not downloaded and must be explicitly queried.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/objects.md#2025-04-22_snippet_13\n\nLANGUAGE: objective-c\nCODE:\n```\n[[relation query] findObjectsInBackgroundWithBlock:^(NSArray * _Nullable objects, NSError * _Nullable error) {\n    if (error) {\n        // There was an error\n    } else {\n        // objects has all the Posts the current user liked.\n    }\n}];\n```\n\nLANGUAGE: swift\nCODE:\n```\nrelation.query().findObjectsInBackground { (object, error) in\n    if error == nil {\n        // Success\n    } else {\n        // Failure!\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Single Class Schema in Parse Server (Bash)\nDESCRIPTION: This bash snippet demonstrates how to fetch the schema for a single class in Parse Server using a cURL command. It requires the Application ID and Master Key for authentication.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/schemas.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-Master-Key: ${MASTER_KEY}\" \\\n  -H \"Content-Type: application/json\" \\\n  https://YOUR.PARSE-SERVER.HERE/parse/schemas/Game\n```\n\n----------------------------------------\n\nTITLE: Querying Installations via REST API - curl\nDESCRIPTION: Shows a curl command to verify installation objects are stored on the Parse server after running the app with push notification registration. Requires correct API endpoint, application ID, and master key set in the Parse Server. Outputs the list of installation objects stored on the server, and is limited by access credentials and the server URL provided.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/push-notifications-ios.md#2025-04-22_snippet_6\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X GET \\\\n  -H \\\"X-Parse-Application-Id: YOUR_APP_ID\\\" \\\\n  -H \\\"X-Parse-Master-Key: YOUR_MASTER_KEY\\\" \\\\n  http://your_parse_server:1337/parse/installations\n```\n\n----------------------------------------\n\nTITLE: String Prefix Matching with whereStartsWith in Parse Android Queries\nDESCRIPTION: This snippet shows how to use whereStartsWith to find objects where a string field starts with a particular prefix, which is efficiently indexed for large datasets.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/queries.md#2025-04-22_snippet_19\n\nLANGUAGE: java\nCODE:\n```\n// Finds barbecue sauces that start with 'Big Daddy's'.\nParseQuery<ParseObject> query = ParseQuery.getQuery(\"BarbecueSauce\");\nquery.whereStartsWith(\"name\", \"Big Daddy's\");\n```\n\n----------------------------------------\n\nTITLE: Query Constraints for Weapons in Java\nDESCRIPTION: Shows how to add constraints to Parse queries to find Users with specific Weapons, demonstrating both single object and array-based queries in Java.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/relations.md#2025-04-22_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n// add a constraint to query for whenever a specific Weapon is in an array\nuserQuery.whereEqualTo(\"weaponsList\", scimitar);\n\n// or query using an array of Weapon objects...\nuserQuery.whereEqualTo(\"weaponsList\", arrayOfWeapons);\n```\n\n----------------------------------------\n\nTITLE: Parse Config Update Response Body Example - JSON\nDESCRIPTION: Provides an example JSON response after a successful config update operation via PUT. The 'result' field will be true. No external dependencies, used for illustrating the expected server reply format.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/config.md#2025-04-22_snippet_5\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"result\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Geospatial Queries within a Radius in Parse Objective-C and Swift\nDESCRIPTION: Shows how to use nearGeoPoint with withinMiles in both Objective-C and Swift using Parse iOS SDK. The query returns objects located within 10 miles of a userGeoPoint, with results available asynchronously.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_65\n\nLANGUAGE: objective_c\nCODE:\n```\nPFQuery *query = [PFQuery queryWithClassName:@\"Place\"];\n[query whereKey:@\"location\" nearGeoPoint:userGeoPoint withinMiles:10.0];\n[query findObjectsInBackgroundWithBlock:^(NSArray *places, NSError *error) {\n  if (!error) {\n    // List of objects within 10 miles of a user's location\n  }\n}];\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet query = PFQuery.queryWithClassName(\"Place\")\nquery.whereKey(\"location\", nearGeoPoint: userGeoPoint, withinMiles: 10.0)\nquery.findObjectsInBackgroundWithBlock {\n  (places, error) in\n  if !error {\n    // List of places within 10 miles of a user's location\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: BeforeSave Review Moderation Webhook in Ruby\nDESCRIPTION: Ruby webhook implementation for moderating review content before saving. Truncates comments longer than 140 characters.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/cloudcode/cloud-code-advanced.md#2025-04-22_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nprotect_from_forgery :except => :reviews\n\ndef reviews\n  if request.headers['X-Parse-Webhook-Key'] != @webhook_key\n    return render :json => { :error => \"Request Unauthorized\"}\n  end\n\n  review = params[:object]\n  if params[:triggerName] == \"beforeSave\" && review[\"className\"] == \"Review\"\n    if review[\"comment\"].length > 140\n      review[\"comment\"] = review[\"comment\"].truncate(140)\n      return render :json => { :success => review }\n    end\n    return render :json => { :success => true }\n  end\n\n  return render :json => { :error => \"Unknown trigger\"}\nend\n```\n\n----------------------------------------\n\nTITLE: Example JSONC Response for Node Relay Query - JSONC\nDESCRIPTION: Shows the JSONC structure returned from a node relay GraphQL query. The data contains the Node Relay ID, typename, and all GameScore-specific fields accessed via fragments. Used for generic data handling where object type may vary.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/queries.md#2025-04-22_snippet_4\n\nLANGUAGE: JSONC\nCODE:\n```\n{\n  \"data\": {\n    \"node\": {\n      \"id\": \"R2FtZVNjb3JlOjZtdGlNcmtXNnY=\",\n      \"__typename\": \"GameScore\",\n      \"playerName\": \"Sean Plott\",\n      \"score\": 1337,\n      \"cheatMode\": false\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: String Matching Queries in Parse Server (Bash and Python)\nDESCRIPTION: Illustrates how to perform string matching queries using regex and full-text search capabilities. Includes examples for both cURL and Python implementations.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/queries.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n# Finds barbecue sauces that start with \"Big Daddy\"\ncurl -X GET \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -G \\\n  --data-urlencode 'where={\"name\":{\"$regex\":\"^Big Daddy\"}}' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/classes/BarbecueSauce\n```\n\nLANGUAGE: python\nCODE:\n```\n# Finds barbecue sauces that start with \"Big Daddy\"\nimport http.client\nimport json\nimport urllib.parse\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nparams = urllib.parse.urlencode({\"where\": json.dumps({\n    \"name\": {\n        \"$regex\": \"^Big Daddy\"\n    }\n})})\nconnection.connect()\nconnection.request('GET', '/parse/classes/BarbecueSauce?%s' % params, '', {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Finds strings that contains \"Daddy\"\ncurl -X GET \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -G \\\n  --data-urlencode 'where={\"name\":{\"$text\":{\"$search\":{\"$term\":\"Daddy\"}}}}' \\\n  https://api.parse.com/1/classes/BarbecueSauce\n```\n\n----------------------------------------\n\nTITLE: Including Custom Data in Parse Push Notifications for Android\nDESCRIPTION: Shows how to include custom key-value pairs in the push notification data, which can be used for custom processing when the notification is received.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/push-notifications.md#2025-04-22_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nJSONObject data = new JSONObject(\"{\\\"name\\\": \\\"Vaughn\\\",\n                                   \\\"newsItem\\\": \\\"Man bites dog\\\"}\"));\n\nParsePush push = new ParsePush();\npush.setQuery(injuryReportsQuery);\npush.setChannel(\"Indians\");\npush.setData(data);\npush.sendPushInBackground();\n```\n\n----------------------------------------\n\nTITLE: Querying Follow Table - Parse C#\nDESCRIPTION: This C# example demonstrates querying the Follow table with the Parse .NET SDK to find current user's follow relationships.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/relations.md#2025-04-22_snippet_17\n\nLANGUAGE: cs\nCODE:\n```\n// set up the query on the Follow table\nParseQuery<ParseObject> query = ParseQuery.getQuery(\"Follow\");\nquery = query.WhereEqualTo(\"from\", ParseUser.CurrentUser);\n\n// execute the query\nIEnumerable<ParseObject> results = await query.FindAsync();\n```\n\n----------------------------------------\n\nTITLE: Querying Parse Server for Text Search in Python\nDESCRIPTION: This snippet demonstrates how to perform a text search query on Parse Server using Python. It searches for barbecue sauces containing the term \"Daddy\" in their name field.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/queries.md#2025-04-22_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\nimport urllib.parse\n\n\nconnection = http.client.HTTPSConnection('api.parse.com', 443)\nparams = urllib.parse.urlencode({\"where\": json.dumps({\n    \"name\": {\n        \"$text\": {\n            \"$search\": {\n                \"$term\": \"Daddy\"\n            }\n        }\n    }\n})})\nconnection.connect()\nconnection.request('GET', '/1/classes/BarbecueSauce?%s' % params, '', {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Using Full Text Search with Sorting and Score in Swift\nDESCRIPTION: Swift implementation for advanced full text search with sort by relevance score and retrieving the score value in the results. This feature requires Parse Server 2.5.0+.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/queries.md#2025-04-22_snippet_45\n\nLANGUAGE: swift\nCODE:\n```\nlet query = PFQuery(className: \"BarbecueSauce\")\nquery.whereKey(\"name\", matchesText: \"bbq\")\nquery.order(byAscending: \"$score\")\nquery.selectKeys([\"$score\"])\nquery.findObjectsInBackground { (objects: [PFObject]?, error: Error?) in\n    if let error = error {\n        // The request failed\n        print(error.localizedDescription)\n    } else if let objects = objects {\n        objects.forEach { (object) in\n            print(\"Successfully retrieved \\(String(describing: object[\"$score\"])) weight / rank.\");\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Parse Relations\nDESCRIPTION: Shows how to retrieve a relation instance from a Parse object.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dart/queries.md#2025-04-22_snippet_21\n\nLANGUAGE: dart\nCODE:\n```\nfinal relation = dietPlan.getRelation('fruits');\n```\n\n----------------------------------------\n\nTITLE: Logging Out the Current User with Parse PHP SDK\nDESCRIPTION: This snippet demonstrates how to log out the currently authenticated user. Calling the static `ParseUser::logOut()` method clears the user's session information from the configured storage (defaulting to PHP `$_SESSION`). Subsequent calls to `ParseUser::getCurrentUser()` will return null.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/users.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n```php\nParseUser::logOut();\n\n$currentUser = ParseUser::getCurrentUser();  // this will now be null\n```\n```\n\n----------------------------------------\n\nTITLE: Parse Object Counter Operations\nDESCRIPTION: Demonstrates incrementing and decrementing counter values in Parse Objects.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dart/objects.md#2025-04-22_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nvar response = await dietPlan.increment(\"count\", 1);\n\ndietPlan.setIncrement('count', 1);\ndietPlan.setDecrement('count', 1);\nvar response = dietPlan.save()\n```\n\n----------------------------------------\n\nTITLE: Querying Follow Table - Parse Objective-C/Swift\nDESCRIPTION: These Objective-C and Swift snippets perform a query on the Follow table to identify users that the current user follows, using the Parse iOS SDK.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/relations.md#2025-04-22_snippet_15\n\nLANGUAGE: objective_c\nCODE:\n```\n// set up the query on the Follow table\nPFQuery *query = [PFQuery queryWithClassName:@\"Follow\"];\n[query whereKey:@\"from\" equalTo:[PFUser currentUser]];\n\n// execute the query\n[query findObjectsInBackgroundWithBlock:^(NSArray *objects, NSError *error) {\n  for(PFObject *o in objects) {\n    // o is an entry in the Follow table\n    // to get the user, we get the object with the to key\n    PFUser *otherUser = [o objectForKey@\"to\"];\n\n    // to get the time when we followed this user, get the date key\n    PFObject *when = [o objectForKey@\"date\"];\n  }\n}];\n```\n\nLANGUAGE: swift\nCODE:\n```\n// set up the query on the Follow table\nlet query = PFQuery(className: \"Follow\")\nquery.whereKey(\"from\", equalTo: PFUser.currentUser()!)\n\n// execute the query\nquery.findObjectsInBackgroundWithBlock{\n\t(objects: [AnyObject]?, error: NSError?) -> Void in\n    if let objects = objects {\n        for o in objects {\n            // o is an entry in the Follow table\n            // to get the user, we get the object with the to key\n            let otherUse = o.objectForKey(\"to\") as? PFUser\n\n            // to get the time when we followed this user, get the date key\n            let when = o.objectForKey(\"date\") as? PFObject\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Product Purchase Handler in Parse iOS\nDESCRIPTION: Example showing how to register a handler for product purchases using Parse SDK. The handler is executed when a specific product is purchased.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/in-app-purchases.md#2025-04-22_snippet_0\n\nLANGUAGE: objective-c\nCODE:\n```\n[PFPurchase addObserverForProduct:@\"Pro\" block:^(SKPaymentTransaction *transaction) {\n    // Write business logic that should run once this product is purchased.\n    isPro = YES;\n}];\n```\n\nLANGUAGE: swift\nCODE:\n```\nPFPurchase.addObserverForProduct(\"Pro\") {\n    (transaction: SKPaymentTransaction?) -> Void in\n    // Write business logic that should run once this product is purchased.\n    isPro = YES;\n}\n```\n\n----------------------------------------\n\nTITLE: Performing User Impersonation with Curl in Parse\nDESCRIPTION: This curl command demonstrates how to use the /loginAs endpoint to impersonate a user. It requires the master key and creates a session for the specified user ID without needing their credentials.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/users.md#2025-04-22_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -H \"X-Parse-Master-Key: ${MASTER_KEY}\" \\\n  -H \"X-Parse-Revocable-Session: 1\" \\\n  -G \\\n  --data-urlencode 'userId=abc123' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/loginAs\n```\n\n----------------------------------------\n\nTITLE: Example JSON Structure for a Trigger Webhook\nDESCRIPTION: Illustrates the JSON representation of a trigger webhook, specifying the target `className`, the `triggerName` (e.g., 'beforeSave'), and the `url` where the webhook logic resides. This structure is used in API responses for trigger webhooks.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/hooks.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\"className\": \"score\", \"triggerName\": \"beforeSave\", \"url\": \"https://api.example.com/score/beforeSave\"}\n```\n\n----------------------------------------\n\nTITLE: Customizing Login View Controller\nDESCRIPTION: Example of subclassing PFLogInViewController to customize the logo and background\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/user-interface.md#2025-04-22_snippet_4\n\nLANGUAGE: objective-c\nCODE:\n```\n@interface MyLogInViewController : PFLogInViewController\n\n@end\n\n@implementation MyLogInViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n\n    self.view.backgroundColor = [UIColor darkGrayColor];\n\n    UIImageView *logoView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@\"logo.png\"]];\n    self.logInView.logo = logoView; // logo can be any UIView\n}\n@end\n```\n\nLANGUAGE: swift\nCODE:\n```\nclass MyLogInViewController: PFLogInViewController {\n\n  override func viewDidLoad() {\n    super.viewDidLoad()\n\n    self.view.backgroundColor = .darkGray\n\n\t\tlet logoView = UIImageView(image: UIImage(named:\"logo.png\"))\n\t\tself.logInView?.logo = logoView\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Installation Objects with REST API in bash\nDESCRIPTION: Removes an installation object from Parse Server using a DELETE request. This operation requires Master Key authentication as it's not available through client SDKs.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/push-notifications.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X DELETE \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-Master-Key: ${MASTER_KEY}\" \\\n  https://YOUR.PARSE-SERVER.HERE/parse/installations/mrmBZvsErB\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Session Object Properties in Parse\nDESCRIPTION: This snippet illustrates the structure of a Session object in Parse, showing its special readonly and settable fields. It includes information about session tokens, user associations, creation details, expiration, and installation ID.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/sessions.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `sessionToken` (readonly): String token for authentication on Parse API requests. In the response of `Session` queries, only your current `Session` object will contain a session token.\n* `user`: (readonly) Pointer to the `User` object that this session is for.\n* `createdWith` (readonly): Information about how this session was created (e.g. `{ \"action\": \"login\", \"authProvider\": \"password\"}`).\n    * `action` could have values: `login`, `signup`, `create`, or `upgrade`. The `create` action is when the developer manually creates the session by saving a `Session` object.  The `upgrade` action is when the user is upgraded to revocable session from a legacy session token.\n    * `authProvider` could have values: `password`, `anonymous`, `facebook`, or `twitter`.\n* `expiresAt` (readonly): Approximate UTC date when this `Session` object will be automatically deleted. You can configure session expiration settings (either 1-year inactivity expiration or no expiration) in your app's Parse Dashboard settings page.\n* `installationId` (can be set only once): String referring to the `Installation` where the session is logged in from. For Parse SDKs, this field will be automatically set when users log in or sign up.\n```\n\n----------------------------------------\n\nTITLE: Using Read Preferences in Parse Server Query (Python)\nDESCRIPTION: This snippet shows how to use read preferences in a Parse Server query using Python. It specifies different read preferences for the main query, included pointers, and subqueries.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/queries.md#2025-04-22_snippet_42\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\nimport urllib.parse\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nparams = urllib.parse.urlencode({\"where\": json.dumps({\n    \"post\": {\n        \"$inQuery\": {\n            \"where\": {\n                \"image\": {\n                    \"$exists\": True\n                }\n            },\n            \"className\": \"Post\"\n        }\n    }\n}),\n\"include\": \"post\",\n\"readPreference\": \"SECONDARY\",\n\"includeReadPreference\": \"SECONDARY_PREFERRED\",\n\"subqueryReadPreference\": \"NEAREST\"})\nconnection.connect()\nconnection.request('GET', '/parse/classes/Comment?%s' % params, '', {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Deleting a Trigger Webhook with Existing Cloud Code\nDESCRIPTION: This JSON snippet shows a sample response when deleting a trigger webhook that has an existing cloud code trigger. It returns the class name and trigger name of the existing cloud code trigger.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/hooks.md#2025-04-22_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"className\": \"Tournament\",\n  \"triggerName\": \"beforeDelete\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Metadata and Tags to Parse.File in JavaScript\nDESCRIPTION: This snippet shows how to add metadata and tags to a Parse.File. It demonstrates both initializing a file with metadata and tags, and adding them to an existing file.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/files.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// Init with metadata and tags\nconst metadata = { createdById: 'some-user-id' };\nconst tags = { groupId: 'some-group-id' };\nconst file = new Parse.File('myfile.zzz', fileData, 'image/png', metadata, tags);\n\n// Add metadata and tags\nconst file = new Parse.File('myfile.zzz', fileData, 'image/png');\nfile.addMetadata('createdById', 'some-user-id');\nfile.addTag('groupId', 'some-group-id');\n```\n\n----------------------------------------\n\nTITLE: Using NSPredicate with Parse Query for Existence Check in Swift\nDESCRIPTION: Shows how to create a Parse query using NSPredicate to check if a field exists or not in GameScore objects. This snippet demonstrates both checking for existence and non-existence of the 'score' field.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/queries.md#2025-04-22_snippet_27\n\nLANGUAGE: swift\nCODE:\n```\nlet predicate = NSPredicate(format: \"score IN SELF\")\nlet query = PFQuery(className: \"GameScore\", predicate: predicate)\n\n// Finds objects that don't have the score set\nquery.whereKeyDoesNotExist(\"score\")\n// Or using NSPredicate\nlet predicate = NSPredicate(format: \"NOT (score IN SELF)\")\nlet query = PFQuery(className: \"GameScore\", predicate: predicate)\n```\n\n----------------------------------------\n\nTITLE: Saving Local Changes Eventually to Parse Server - Parse SDK Swift\nDESCRIPTION: This Swift statement uses the Parse SDK to call saveEventually on a PFObject instance (gameScore), ensuring the object is locally pinned until it can be saved remotely. No dependencies are required beyond the Parse Swift SDK. Expected behavior is automatic synchronization as soon as a network connection becomes available. This is a simple, hands-off way to persist local changes.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/local-datastore.md#2025-04-22_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\ngameScore.saveEventually()\n```\n\n----------------------------------------\n\nTITLE: Adding Unique Values to Array Fields in Parse\nDESCRIPTION: Demonstrates using the AddUnique array operation to add elements to an array field only if they don't already exist. This example adds 'flying' and 'kungfu' to the skills array if they aren't already present.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/objects.md#2025-04-22_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"skills\":{\"__op\":\"AddUnique\",\"objects\":[\"flying\",\"kungfu\"]}}' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/classes/GameScore/Ed1nuqPvcm\n```\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nconnection.connect()\nconnection.request('PUT', '/parse/classes/GameScore/Ed1nuqPvcm', json.dumps({\n    \"skills\": {\n        \"__op\": \"AddUnique\",\n        \"objects\": [\n            \"flying\",\n            \"kungfu\"\n        ]\n    }\n}), {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\",\n    \"Content-Type\": \"application/json\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Initializing Twitter Integration in Parse SDK\nDESCRIPTION: This snippet shows how to initialize Twitter integration in a Parse application. It requires setting up the Twitter consumer key and consumer secret in the application initialization code.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/users.md#2025-04-22_snippet_20\n\nLANGUAGE: objective_c\nCODE:\n```\n[PFTwitterUtils initializeWithConsumerKey:@\"YOUR CONSUMER KEY\"\n                           consumerSecret:@\"YOUR CONSUMER SECRET\"];\n```\n\nLANGUAGE: swift\nCODE:\n```\nPFTwitterUtils.initializeWithConsumerKey(\"YOUR CONSUMER KEY\",  consumerSecret:\"YOUR CONSUMER SECRET\")\n```\n\n----------------------------------------\n\nTITLE: Error Tracking with Parse Analytics\nDESCRIPTION: Implementation of basic error tracking using PFAnalytics, demonstrating how to track error codes as custom events.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/analytics.md#2025-04-22_snippet_2\n\nLANGUAGE: objective_c\nCODE:\n```\nNSString *codeString = [NSString stringWithFormat:@\"%d\", [error code]];\n[PFAnalytics trackEvent:@\"error\" dimensions:@{ @\"code\": codeString }];\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet codeString = NSString(format:\"%@\", error.code)\nPFAnalytics.trackEvent(\"error\", dimensions:[\"code\": codeString])\n```\n\n----------------------------------------\n\nTITLE: Query Specific Parse Installation Object using REST API\nDESCRIPTION: REST API query to fetch a specific installation object by objectId with additional targeting criteria. Uses master key authentication and combines objectId with other query constraints. Limited to 1 result.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/push-notifications.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n# Query over installations\ncurl -X GET \\\n-H \"X-Parse-Application-Id: {YOUR_APPLICATION_ID}\" \\\n-H \"X-Parse-Master-Key: {YOUR_MASTER_KEY}\" \\\n-G \\\n--data-urlencode 'limit=1' \\\n--data-urlencode 'where={ \"objectId\": {YOUR_INSTALLATION_OBJECT_ID}, \"city\": \"San Francisco\", \"deviceType\": { \"$in\": [ \"ios\", \"android\", \"winphone\", \"embedded\" ] } }' \\\nhttps://YOUR.PARSE-SERVER.HERE/parse/installations\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Configuration Interface in TypeScript\nDESCRIPTION: TypeScript interface defining the configuration options for Parse Server GraphQL schema customization. Includes settings for enabled/disabled classes, input/output fields, queries, and mutations.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/customisation.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ParseGraphQLConfiguration {\n  enabledForClasses?: Array<string>;\n  disabledForClasses?: Array<string>;\n  classConfigs?: Array<{\n    className: string;\n    type?: {\n      inputFields?: {\n        create?: Array<string>;\n        update?: Array<string>;\n      };\n      outputFields?: Array<string>;\n      constraintFields?: Array<string>;\n      sortFields?: {\n        field: string;\n        asc: boolean;\n        desc: boolean;\n      }[];\n    };\n    query?: {\n      get?: boolean;\n      find?: boolean;\n      getAlias?: String;\n      findAlias?: String;\n    };\n    mutation?: {\n      create?: boolean;\n      update?: boolean;\n      destroy?: boolean;\n      createAlias?: String,\n      updateAlias?: String,\n      destroyAlias?: String,\n    };\n  }>\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Group Permissions with ParseACL in PHP\nDESCRIPTION: This code shows how to create a group message with custom read and write permissions for multiple users. It iterates through a list of users and grants them individual access to the message object.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/users.md#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$groupMessage = new ParseObject(\"Message\");\n$groupACL = new ParseACL();\n\n// userList is an array with the users we are sending this message to.\nfor ($i = 0; $i < count($userList); $i++) {\n  $groupACL->setReadAccess($userList[$i], true);\n  $groupACL->setWriteAccess($userList[$i], true);\n}\n\n$groupMessage->setACL($groupACL);\n$groupMessage->save();\n```\n\n----------------------------------------\n\nTITLE: Finding Distinct Field Values in Bash\nDESCRIPTION: Bash curl command to find distinct values for a specific field (score) in GameScore objects. This query requires the master key and uses the aggregate endpoint.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/queries.md#2025-04-22_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-Master-Key: ${MASTER_KEY}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -G \\\n  --data-urlencode 'distinct=score' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/aggregate/GameScore\n```\n\n----------------------------------------\n\nTITLE: Sending Push Notification to Windows RT Devices with Parse Server REST API\nDESCRIPTION: This snippet illustrates how to send a push notification specifically to Windows RT devices using Parse Server's REST API. It includes the necessary headers and JSON payload for targeting Windows RT devices.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/push-notifications.md#2025-04-22_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"where\": {\n          \"deviceType\": \"winrt\"\n        },\n        \"data\": {\n          \"alert\": \"Your suitcase has been filled with tiny glass!\"\n        }\n      }' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/push\n```\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nconnection.connect()\nconnection.request('POST', '/parse/push', json.dumps({\n    \"where\": {\n        \"deviceType\": \"winrt\"\n    },\n    \"data\": {\n        \"alert\": \"Your suitcase has been filled with tiny glass!\"\n    }\n}), {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\",\n    \"Content-Type\": \"application/json\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Querying with WhereEqualTo and WhereContainedIn in C#\nDESCRIPTION: Demonstrates creating an efficient query in C# using WhereEqualTo and WhereContainedIn methods that can utilize database indexes.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_4\n\nLANGUAGE: cs\nCODE:\n```\nvar names = new[] { \"Jonathan Walsh\", \"Dario Wunsch\", \"Shawn Simon\" };\nvar query = new ParseObject.GetQuery(\"GameScore\")\n    .WhereEqualTo(\"score\", 50)\n    .WhereContainedIn(\"playerName\", names);\n```\n\n----------------------------------------\n\nTITLE: Pinning Objects to Local Datastore\nDESCRIPTION: Examples of how to pin Parse objects to the local datastore for offline storage. Includes both single object and multiple object pinning operations.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/local-datastore.md#2025-04-22_snippet_1\n\nLANGUAGE: objective-c\nCODE:\n```\nPFObject *gameScore = [PFObject objectWithClassName:@\"GameScore\"];\ngameScore[@\"score\"] = @1337;\ngameScore[@\"playerName\"] = @\"Sean Plott\";\ngameScore[@\"cheatMode\"] = @NO;\n[gameScore pinInBackground];\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet gameScore = PFObject(className:\"GameScore\")\ngameScore[\"score\"] = 1337\ngameScore[\"playerName\"] = \"Sean Plott\"\ngameScore[\"cheatMode\"] = false\ngameScore.pinInBackground()\n```\n\n----------------------------------------\n\nTITLE: Creating and Querying User Associations in Parse C#\nDESCRIPTION: Demonstrates how to create associations between Parse users and posts, and how to query posts associated with a specific user.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/users.md#2025-04-22_snippet_9\n\nLANGUAGE: cs\nCODE:\n```\n// Make a new post\nvar post = new ParseObject(\"Post\")\n{\n    { \"title\", \"My New Post\" },\n    { \"body\", \"This is some great content.\" },\n    { \"user\", ParseUser.CurrentUser }\n};\nawait post.SaveAsync();\n\n// Find all posts by the current user\nvar usersPosts = await (from post in ParseObject.GetQuery(\"Post\")\n                        where post.Get<ParseUser>(\"user\") == ParseUser.CurrentUser\n                        select post).FindAsync();\n\n// or using LINQ\n// Make a new post\nvar post = new ParseObject(\"Post\")\n{\n    { \"title\", \"My New Post\" },\n    { \"body\", \"This is some great content.\" },\n    { \"user\", ParseUser.CurrentUser }\n};\nawait post.SaveAsync();\n\n// Find all posts by the current user\nvar usersPosts = await ParseObject.GetQuery(\"Post\")\n    .WhereEqualTo(\"user\", ParseUser.CurrentUser)\n    .FindAsync();\n```\n\n----------------------------------------\n\nTITLE: Cloning Parse Embedded SDK Repository\nDESCRIPTION: Git command to download the Parse embedded SDKs source code from GitHub repository.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/embedded_c/getting-started.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/parse-community/parse-embedded-sdks.git\n```\n\n----------------------------------------\n\nTITLE: Limiting Number of Query Results in Parse using Objective-C\nDESCRIPTION: Shows how to limit the number of results returned by a Parse query to a specified maximum by setting the limit property. Dependency is Parse SDK. Receives an integer specifying maximum results and affects the number of objects returned after execution.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/queries.md#2025-04-22_snippet_10\n\nLANGUAGE: objective_c\nCODE:\n```\nquery.limit = 10; // limit to at most 10 results\n```\n\n----------------------------------------\n\nTITLE: Deleting a Parse Object via GraphQL Mutation - GraphQL\nDESCRIPTION: Illustrates the mutation to delete a GameScore object using its Relay ID. The input specifies the object to delete, and upon successful completion, the deleted object's remaining fields are returned, potentially for client-side confirmation messages.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/objects.md#2025-04-22_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nmutation deleteAGameScore {\n  deleteGameScore(input: { id: \"R2FtZVNjb3JlOmM3TVpDZEhQY2w=\" }) {\n    gameScore {\n      id\n      playerName\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Parse Object Array Operations\nDESCRIPTION: Shows array manipulation operations including add, addUnique, and remove.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dart/objects.md#2025-04-22_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nvar response = await dietPlan.add(\"listKeywords\", [\"a\", \"a\",\"d\"]);\n\nvar response = await dietPlan.addUnique(\"listKeywords\", [\"a\", \"a\",\"d\"]);\n\nvar response = await dietPlan.remove(\"listKeywords\", [\"a\"]);\n```\n\n----------------------------------------\n\nTITLE: Local Datastore Direct Fetch - Java\nDESCRIPTION: Shows how to directly fetch an object from local datastore using its ID.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/objects.md#2025-04-22_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nParseObject object = ParseObject.createWithoutData(\"GameScore\", \"xWMyZ4YEGZ\");\nobject.fetchFromLocalDatastoreInBackground(new GetCallback<ParseObject>() {\n  public void done(ParseObject object, ParseException e) {\n    if (e == null) {\n      // object will be your game score\n    } else {\n      // something went wrong\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using ParseUser Queries with ParseInstallation for Location-Based Push in Android\nDESCRIPTION: Shows how to combine ParseUser queries with ParseInstallation queries to send location-based push notifications to users near a specific location.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/push-notifications.md#2025-04-22_snippet_10\n\nLANGUAGE: java\nCODE:\n```\n// Find users near a given location\nParseQuery userQuery = ParseUser.getQuery();\nuserQuery.whereWithinMiles(\"location\", stadiumLocation, 1.0)\n\n// Find devices associated with these users\nParseQuery pushQuery = ParseInstallation.getQuery();\npushQuery.whereMatchesQuery(\"user\", userQuery);\n\n// Send push notification to query\nParsePush push = new ParsePush();\npush.setQuery(pushQuery); // Set our Installation query\npush.setMessage(\"Free hotdogs at the Parse concession stand!\");\npush.sendInBackground();\n```\n\n----------------------------------------\n\nTITLE: Declaring PFObject Properties in Objective-C and Swift\nDESCRIPTION: Example of declaring primitive property types (BOOL and int) in a PFObject subclass. The properties are dynamically synthesized, allowing automatic conversion between primitive types and NSNumber objects stored in Parse.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/objects.md#2025-04-22_snippet_17\n\nLANGUAGE: objective_c\nCODE:\n```\n@property BOOL fireProof;\n@property int rupees;\n```\n\nLANGUAGE: swift\nCODE:\n```\n@NSManaged var fireProof: Boolean\n@NSManaged var rupees: Int\n```\n\n----------------------------------------\n\nTITLE: Querying for Multiple Values with whereContainedIn in Parse Android SDK\nDESCRIPTION: This snippet shows how to use whereContainedIn to match objects where a field equals any of several values, which is more efficient than using multiple queries.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/queries.md#2025-04-22_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nString[] names = {\"Jonathan Walsh\", \"Dario Wunsch\", \"Shawn Simon\"};\nquery.whereContainedIn(\"playerName\", Arrays.asList(names));\n```\n\n----------------------------------------\n\nTITLE: Counting Results with ParseQuery in PHP\nDESCRIPTION: This snippet shows how to utilize `withCount` to determine the total number of rows satisfying a query and receive a limited set of objects. An important note is that count operations are typically resource-intensive.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/queries.md#2025-04-22_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n$query = new ParseQuery('GameScore');\n$query->withCount();\n$query->limit(25);\n\n$response = $query->find();\n$response['count'] // Returns 200 the total number of objects dispite limit / skip\n$response['results'] // Returns 25 objects\n\n// As of PHP 7.1 you can use Array Destructuring\n['count' => $count, 'results' => $results] = $query->find();\n\n// Use $count and $results\n```\n\n----------------------------------------\n\nTITLE: Executing Health Check Query with Headers in Parse GraphQL\nDESCRIPTION: A complete example of performing a health check query, including the required authentication headers, GraphQL query, and expected response format. The query requires an Application ID and optionally a Master Key for authentication.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/health-check.md#2025-04-22_snippet_0\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"X-Parse-Application-Id\": \"APPLICATION_ID\",\n  \"X-Parse-Master-Key\": \"MASTER_KEY\" // (optional)\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\nquery healthy {\n  health\n}\n```\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"data\": {\n    \"health\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Push Notification Errors in Android\nDESCRIPTION: Code example showing how to implement error handling when sending push notifications using Parse Android SDK. Uses SendCallback to log success or error messages.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/push-notifications.md#2025-04-22_snippet_19\n\nLANGUAGE: java\nCODE:\n```\npush.sendPushInBackground(new SendCallback() {\n  public void done(ParseException e) {\n    if (e == null) {\n      Log.d(\"push\", \"The push campaign has been created.\");\n    } else {\n      Log.d(\"push\", \"Error sending push:\" + e.getMessage());\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting Parse.File using Master Key in JavaScript\nDESCRIPTION: This code demonstrates how to delete a Parse.File that is referenced by an object. It requires the use of the master key for deletion.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/files.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst profilePhoto = profile.get(\"photoFile\");\nawait profilePhoto.destroy({ useMasterKey: true });\n```\n\n----------------------------------------\n\nTITLE: Uploading Images with Python\nDESCRIPTION: This Python code snippet provides an example to upload an image file `myPicture.jpg` to a Parse server. Necessary headers include the application ID, REST API key, and content type, whereas the file is read in binary mode.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/files.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('<span class=\\\"custom-parse-server-url\\\">YOUR.PARSE-SERVER.HERE</span>', 443)\nconnection.connect()\nconnection.request('POST', '<span class=\\\"custom-parse-server-mount\\\">/parse/</span>files/pic.jpg', open('myPicture.jpg', 'rb').read(), {\n    \"X-Parse-Application-Id\": \"<span class=\\\"custom-parse-server-appid\\\">${APPLICATION_ID}</span>\",\n    \"X-Parse-REST-API-Key\": \"<span class=\\\"custom-parse-server-restapikey\\\">${REST_API_KEY}</span>\",\n    \"Content-Type\": \"image/jpeg\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Optimized User Query with ContainedIn in C#\nDESCRIPTION: This snippet demonstrates how to perform an optimized query for users with specific states using the ContainedIn condition in C#.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_27\n\nLANGUAGE: cs\nCODE:\n```\nquery.WhereContainedIn(\"state\", new[] { \"SignedUp\", \"Verified\" });\n```\n\n----------------------------------------\n\nTITLE: Signing Up and Logging In with Twitter in Parse (Python)\nDESCRIPTION: Shows how to sign up or log in a user with their Twitter account using Parse Server's REST API in Python. It sends a POST request with the user's Twitter authentication data.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/users.md#2025-04-22_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nconnection.connect()\nconnection.request('POST', '/parse/users', json.dumps({\n    \"authData\": {\n        \"twitter\": {\n            \"id\": \"12345678\",\n            \"screen_name\": \"ParseIt\",\n            \"consumer_key\": \"SaMpLeId3X7eLjjLgWEw\",\n            \"consumer_secret\": \"SaMpLew55QbMR0vTdtOACfPXa5UdO2THX1JrxZ9s3c\",\n            \"auth_token\": \"12345678-SaMpLeTuo3m2avZxh5cjJmIrAfx4ZYyamdofM7IjU\",\n            \"auth_token_secret\": \"SaMpLeEb13SpRzQ4DAIzutEkCE2LBIm2ZQDsP3WUU\"\n        }\n    }\n}), {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\",\n    \"X-Parse-Revocable-Session\": \"1\",\n    \"Content-Type\": \"application/json\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Deleting a Trigger Webhook\nDESCRIPTION: This JSON snippet shows a sample empty response when deleting a trigger webhook. An empty object indicates a successful deletion.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/hooks.md#2025-04-22_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Enabling Parse Data Sharing in Main App\nDESCRIPTION: Code to enable data sharing in the main application before Parse initialization. Requires setting the application group identifier for shared container access.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/extensions.md#2025-04-22_snippet_0\n\nLANGUAGE: objective_c\nCODE:\n```\n// Enable data sharing in main app.\n[Parse enableDataSharingWithApplicationGroupIdentifier:@\"group.com.parse.parseuidemo\"];\n// Setup Parse\n[Parse setApplicationId:@\"<ParseAppId>\" clientKey:@\"<ClientKey>\"];\n```\n\nLANGUAGE: swift\nCODE:\n```\n// Enable data sharing in main app.\nParse.enableDataSharingWithApplicationGroupIdentifier(\"group.com.parse.parseuidemo\")\n// Setup Parse\nParse.setApplicationId(\"<ParseAppId>\", clientKey: \"<ClientKey>\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination with Skip\nDESCRIPTION: Demonstrates how to skip the first N results in a query, which is useful for implementing pagination in data retrieval.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/arduino/queries.md#2025-04-22_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nquery.setSkip(10);\n```\n\n----------------------------------------\n\nTITLE: Initializing Parse SDK with Secure Storage in Dart\nDESCRIPTION: Initialization of the Parse SDK using CoreStoreSembastImp for secure storage. This is recommended for Flutter web/desktop SDK use.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/flutter/getting-started.md#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nawait Parse().initialize(\n  \tkeyParseApplicationId, \n  \tkeyParseServerUrl,\n        coreStore: await CoreStoreSembastImp.getInstance(\"/data\"));\n```\n\n----------------------------------------\n\nTITLE: ParseObject Subclassing in Parse PHP\nDESCRIPTION: Shows how to create custom subclasses of ParseObject with additional methods and properties.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/queries.md#2025-04-22_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nclass GameScore extends ParseObject\n{\n  public static $parseClassName = \"GameScore\";\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n// Do this once, at the start of your app, before ParseClient::initialize(...);\nGameScore::registerSubclass();\n\n// Create a new instance of that class.\n$gameScore = new GameScore();\n```\n\nLANGUAGE: php\nCODE:\n```\n// A complex subclass of ParseObject\nclass Monster extends ParseObject\n{\n  public static $parseClassName = \"Monster\";\n\n  public function hasSuperHumanStrength() {\n    return this->get(\"strength\") > 18;\n  }\n\n  public static function spawn($strength) {\n    $monster = new Monster();\n    $monster->set(\"strength\", $strength);\n    return $monster;\n  }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n$monster = Monster::spawn(200);\necho monster->strength();  // Displays 200.\necho monster->hasSuperHumanStrength();  // Displays true.\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single Result with getFirstObject in Parse using Swift\nDESCRIPTION: Demonstrates invoking getFirstObjectInBackground on a PFQuery in Swift to retrieve the first matching record asynchronously. Utilizes completion closure for error/result handling. Requires a query constraint and closure, returning an optional object or error.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/queries.md#2025-04-22_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\nlet query = PFQuery(className: \"GameScore\")\nquery.whereKey(\"playerEmail\", equalTo: \"dstemkoski@example.com\")\nquery.getFirstObjectInBackground { (object: PFObject?, error: Error?) in\n    if let error = error {\n        // The query failed\n        print(error.localizedDescription)\n    } else if let object = object {\n        // The query succeeded with a matching result\n        print(object)\n    } else {\n        // The query succeeded but no matching result was found\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Local Datastore in Parse Android SDK\nDESCRIPTION: Shows how to enable local datastore in a Parse Android application by calling Parse.enableLocalDatastore() before initialization.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/local-datastore.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport com.parse.Parse;\nimport android.app.Application;\n\npublic class App extends Application {\n  @Override\n  public void onCreate() {\n    super.onCreate();\n\n    Parse.enableLocalDatastore(this);\n    Parse.initialize(this);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching All Cloud Functions using Parse Hooks API (Bash/Python)\nDESCRIPTION: Shows how to make a GET request to the `/hooks/functions` endpoint using both `curl` (Bash) and Python's `http.client`. Requires `X-Parse-Application-Id` and `X-Parse-Master-Key` headers for authentication. The expected output is a JSON object containing a list of all functions.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/hooks.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\\n  -H \"X-Parse-Application-Id: <span class=\\\"custom-parse-server-appid\\\">${APPLICATION_ID}</span>\" \\\n  -H \"X-Parse-Master-Key: <span class=\\\"custom-parse-server-masterkey\\\">${MASTER_KEY}</span>\" \\\n  -H \"Content-Type: application/json\" \\\n  <span class=\\\"custom-parse-server-protocol\\\">https</span>://<span class=\\\"custom-parse-server-url\\\">YOUR.PARSE-SERVER.HERE</span><span class=\\\"custom-parse-server-mount\\\">/parse/</span>hooks/functions\n```\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('<span class=\\\"custom-parse-server-url\\\">YOUR.PARSE-SERVER.HERE</span>', 443)\nconnection.connect()\nconnection.request('GET', '<span class=\\\"custom-parse-server-mount\\\">/parse/</span>hooks/functions', '', {\n    \"X-Parse-Application-Id\": \"<span class=\\\"custom-parse-server-appid\\\">${APPLICATION_ID}</span>\",\n    \"X-Parse-Master-Key\": \"<span class=\\\"custom-parse-server-masterkey\\\">${MASTER_KEY}</span>\",\n    \"Content-Type\": \"application/json\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Generic Node Query Across Multiple Types - GraphQL\nDESCRIPTION: Utilizing type-specific fragments, this query demonstrates how to fetch a Node (either User or GameScore) by ID, with each fragment returning fields appropriate to the object type. This supports dynamic rendering of multiple types on the frontend, relying on the '__typename' discriminator.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/queries.md#2025-04-22_snippet_5\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery genericGet {\n  node(id: \"X1VzZXI6Q1lMeWJYMjFjcw==\") {\n    id\n    __typename\n    ... on User {\n      id\n      username\n    }\n    ... on GameScore {\n      playerName\n      score\n      cheatMode\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Utilizing Audiences for Push Notification Management in Parse PHP SDK\nDESCRIPTION: The snippet illustrates the use of 'ParseAudience' to manage push notification sends, allowing tracking of usage statistics and targeted sends. It showcases the process of creating, saving, and using audiences in push operations.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/push-notifications.md#2025-04-22_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n$iosQuery = ParseInstallation::getQuery();\n$iosQuery->equalTo(\"deviceType\", \"ios\");\n\n// create & save your audience\n$audience = ParseAudience::createAudience(\n    'MyiOSAudience',\n    $iosQuery\n);\n$audience->save(true);\n\n// send a push using the query in this audience and it's id\n// The 'audience_id' is what allows parse to update 'lastUsed' and 'timesUsed'\n// You could use any audience_id with any query and it will still update that audience\nParsePush::send([\n    'data'          => [\n        'alert' => 'hello ios users!'\n    ],\n    'where'         => $audience->getQuery(),\n    'audience_id'   => $audience->getObjectId()\n], true);\n\n// fetch changes to this audience\n$audience->fetch(true);\n\n// get last & times used for tracking\ntimesUsed = $audience->getTimesUsed();\nlastUsed = $audience->getLastUsed();\n```\n\n----------------------------------------\n\nTITLE: Querying Objects within a Bounding Box in Java\nDESCRIPTION: This code shows how to query for objects within a rectangular bounding box using ParseQuery.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/geopoints.md#2025-04-22_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nParseGeoPoint southwestOfSF = new ParseGeoPoint(37.708813, -122.526398);\nParseGeoPoint northeastOfSF = new ParseGeoPoint(37.822802, -122.373962);\nParseQuery<ParseObject> query = ParseQuery.getQuery(\"PizzaPlaceObject\");\nquery.whereWithinGeoBox(\"location\", southwestOfSF, northeastOfSF);\nquery.findInBackground(new FindCallback<ParseObject>() { ... });\n```\n\n----------------------------------------\n\nTITLE: Initializing ParseClient with Custom Server URL in PHP\nDESCRIPTION: This PHP code demonstrates how to initialize the Parse SDK client with specific application, client, and master keys, and then sets the Parse Server URL and mount path. Dependencies: Parse PHP SDK. The initialize method requires valid key strings, and setServerURL specifies the URL and path separately for proper routing.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/using-parse-sdks.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nParseClient::initialize('YOUR_APP_ID', 'YOUR_CLIENT_KEY', 'YOUR_MASTER_KEY');\nParseClient::setServerURL('http://localhost:1337', 'parse'); // server url & mount path passed separately\n```\n\n----------------------------------------\n\nTITLE: JSON API Response for Retrieving Installation Object - JSONC\nDESCRIPTION: Shows a sample JSON-formatted API response when querying an installation object via the REST API. Provides deviceType, deviceToken, channels, creation (createdAt), update (updatedAt) timestamps, and objectId. Serves as a reference to the structure and keys present in returned installation objects, aiding client parsing and validation logic.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/push-notifications.md#2025-04-22_snippet_8\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"deviceType\": \"ios\",\n  \"deviceToken\": \"0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef\",\n  \"channels\": [\n    \"\"\n  ],\n  \"createdAt\": \"2022-01-01T12:23:45.678Z\",\n  \"updatedAt\": \"2022-01-01T12:23:45.678Z\",\n  \"objectId\": \"mrmBZvsErB\"\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Key Existence with whereKeyExists and whereKeyDoesNotExist in Parse Objective-C\nDESCRIPTION: Demonstrates filtering Parse objects based on whether a field is present or not using whereKeyExists and whereKeyDoesNotExist. NSPredicate alternatives using IN SELF and NOT (IN SELF) are also provided. Input is a field name, and results include/exclude objects based on existence.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/queries.md#2025-04-22_snippet_26\n\nLANGUAGE: objective_c\nCODE:\n```\n// Finds objects that have the score set\n[query whereKeyExists:@\"score\"];\n// Or using NSPredicate\nNSPredicate *predicate = [NSPredicate predicateWithFormat:@\"score IN SELF\"];\nPFQuery *query = [PFQuery queryWithClassName:@\"GameScore\" predicate:predicate];\n\n// Finds objects that don't have the score set\n[query whereKeyDoesNotExist:@\"score\"];\n// Or using NSPredicate\nNSPredicate *predicate = [NSPredicate predicateWithFormat:@\"NOT (score IN SELF)\"];\nPFQuery *query = [PFQuery queryWithClassName:@\"GameScore\" predicate:predicate];\n```\n\n----------------------------------------\n\nTITLE: Using Local Datastore in Parse\nDESCRIPTION: Demonstrates querying against locally stored objects and implementing caching strategies using the local datastore.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/queries.md#2025-04-22_snippet_22\n\nLANGUAGE: java\nCODE:\n```\nquery.fromLocalDatastore();\nquery.findInBackground(new FindCallback<ParseObject>() {\n  public void done(final List<ParseObject> scoreList, ParseException e) {\n    if (e == null) {\n      // Results were successfully found from the local datastore.\n    } else {\n      // There was an error.\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Skipping Query Results for Pagination in Parse using Objective-C\nDESCRIPTION: Shows how to paginate results by skipping a set number of records in Parse using the skip property. Requires Parse SDK and assigns an integer value. Useful for implementing pagination or ignoring initial results.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/queries.md#2025-04-22_snippet_14\n\nLANGUAGE: objective_c\nCODE:\n```\nquery.skip = 10; // skip the first 10 results\n```\n\n----------------------------------------\n\nTITLE: Querying Nearby Locations with WhereNear\nDESCRIPTION: Example of querying for places near a user's location using WhereNear constraint, limiting results to 10 nearest places.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/geopoints.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n// User's location\nvar userGeoPoint = ParseUser.CurrentUser.Get<ParseGeoPoint>(\"location\");\n// Create a query for places\nvar query = ParseObject.GetQuery(\"PlaceObject\");\n//Interested in locations near user.\nquery = query.WhereNear(\"location\", userGeoPoint);\n// Limit what could be a lot of points.\nquery = query.Limit(10);\n// Final list of nearby places\nquery.FindAsync().ContinueWith(t =>\n{\n    IEnumerable<ParseObject> nearbyPlaces = t.Result;\n});\n```\n\n----------------------------------------\n\nTITLE: Finding Distinct Field Values with Query Constraints in Python\nDESCRIPTION: Python implementation for finding distinct score values specifically for a player named Sean Plott. Combines where clause with distinct parameter and requires master key.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/queries.md#2025-04-22_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\nimport urllib.parse\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nparams = urllib.parse.urlencode({\"where\": json.dumps({\n    \"playerName\": \"Sean Plott\"\n}),\n\"distinct\": \"score\"})\nconnection.connect()\nconnection.request('GET', '/parse/aggregate/GameScore?%s' % params, '', {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-Master-Key\": \"${MASTER_KEY}\"\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Managing List Fields\nDESCRIPTION: Example of adding unique items to a list field in a ParseObject.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/objects.md#2025-04-22_snippet_11\n\nLANGUAGE: cs\nCODE:\n```\ngameScore.AddRangeUniqueToList(\"skills\", new[] { \"flying\", \"kungfu\" });\nTask saveTask = gameScore.SaveAsync();\n```\n\n----------------------------------------\n\nTITLE: Targeting Push Notifications by Platform using Parse in Android\nDESCRIPTION: Illustrates how to send different push notifications to users on different platforms (Android, iOS, Windows) by filtering the ParseInstallation query based on deviceType.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/push-notifications.md#2025-04-22_snippet_15\n\nLANGUAGE: java\nCODE:\n```\nParseQuery query = ParseInstallation.getQuery();\nquery.whereEqualTo(\"channels\", \"suitcaseOwners\");\n\n// Notification for Android users\nquery.whereEqualTo(\"deviceType\", \"android\");\nParsePush androidPush = new ParsePush();\nandroidPush.setMessage(\"Your suitcase has been filled with tiny robots!\");\nandroidPush.setQuery(query);\nandroidPush.sendPushInBackground();\n\n// Notification for iOS users\nquery.whereEqualTo(\"deviceType\", \"ios\");\nParsePush iOSPush = new ParsePush();\niOSPush.setMessage(\"Your suitcase has been filled with tiny apples!\");\niOSPush.setQuery(query);\niOSPush.sendPushInBackground();\n\n// Notification for Windows 8 users\nquery.whereEqualTo(\"deviceType\", \"winrt\");\nParsePush winPush = new ParsePush();\nwinPush.setMessage(\"Your suitcase has been filled with tiny glass!\");\nwinPush.setQuery(query);\nwinPush.sendPushInBackground();\n\n// Notification for Windows Phone 8 users\nquery.whereEqualTo(\"deviceType\", \"winphone\");\nParsePush wpPush = new ParsePush();\nwpPush.setMessage(\"Your suitcase is very hip; very metro.\");\nwpPush.setQuery(query);\nwpPush.sendPushInBackground();\n```\n\n----------------------------------------\n\nTITLE: Querying Follow Table - Parse Java\nDESCRIPTION: This Java snippet sets up and executes a query to find users the current user is following by accessing the Parse Follow table.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/relations.md#2025-04-22_snippet_14\n\nLANGUAGE: java\nCODE:\n```\n// set up the query on the Follow table\nParseQuery<ParseObject> query = ParseQuery.getQuery(\"Follow\");\nquery.whereEqualTo(\"from\", ParseUser.getCurrentUser());\n\n// execute the query\nquery.findInBackground(newFindCallback<ParseObject>() {\n    public void done(List<ParseObject> followList, ParseException e) {\n\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Batch Update and Delete Operations with Parse REST API (Python)\nDESCRIPTION: This Python snippet shows how to perform batch update and delete operations using Parse REST API. It sends multiple commands in a single request to update one object and delete another.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/objects.md#2025-04-22_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nconnection.connect()\nconnection.request('POST', '/parse/batch', json.dumps({\n    \"requests\": [\n        {\n            \"method\": \"PUT\",\n            \"path\": \"/parse/classes/GameScore/Ed1nuqPvcm\",\n            \"body\": {\n                \"score\": 999999\n            }\n        },\n        {\n            \"method\": \"DELETE\",\n            \"path\": \"/parse/classes/GameScore/Cpl9lrueY5\"\n        }\n    ]\n}), {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\",\n    \"Content-Type\": \"application/json\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Geospatial Queries within a Radius in Parse JavaScript\nDESCRIPTION: Demonstrates searching for Place objects within a 10-mile radius of a user's location using Parse JavaScript SDK. Relies on withinMiles and requires a userGeoPoint parameter. Returns a Promise that resolves to objects inside the radius.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_64\n\nLANGUAGE: javascript\nCODE:\n```\nvar query = new Parse.Query(PlaceObject);\nquery.withinMiles(\"location\", userGeoPoint, 10.0);\nquery.find().then(function(placesObjects) {\n  // Get a list of objects within 10 miles of a user's location\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Hashtags in Java\nDESCRIPTION: Example of querying posts containing specific hashtags using Parse Java SDK with containsAll constraint.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_100\n\nLANGUAGE: java\nCODE:\n```\nParseQuery<ParseObject> query = ParseQuery.getQuery(\"Post\");\nquery.whereContainsAll(\"hashtags\", Arrays.asList(\"#parse\", \"#ftw\"));\nquery.findInBackground(new FindCallback<ParseObject>() {\n  @Override\n  public void done(List<ParseObject> list, ParseException e) {\n    if (e == null) {\n      // Request succeeded\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Hashtags in Swift\nDESCRIPTION: Example of querying posts containing specific hashtags using Parse Swift SDK with containsAll constraint.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_99\n\nLANGUAGE: swift\nCODE:\n```\nlet query = PFQuery.queryWithClassName(\"Post\")\nquery.whereKey(\"hashtags\", containsAllObjectsInArray: [\"#parse\", \"#ftw\"])\nquery.findObjectsInBackgroundWithBlock {\n  (objects, error) in\n  if !error {\n    // Request succeeded\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Parceling for ParseObject Subclasses - Android SDK Java\nDESCRIPTION: This snippet demonstrates customizing Parcelable support for a ParseObject subclass in Java. By overriding onSaveInstanceState and onRestoreInstanceState, additional stateful fields (e.g., member) can be saved and restored across Activity lifecycle events. Requires the Parse Android SDK and should be implemented if your subclass needs to preserve additional state when parceling.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/objects.md#2025-04-22_snippet_21\n\nLANGUAGE: Java\nCODE:\n```\n// Armor.java\n@ParseClassName(\"Armor\")\npublic class Armor extends ParseObject {\n  private int member;\n\n  @Override\n  protected void onSaveInstanceState(Bundle outState) {\n    outState.putInt(\"member\", member);\n  }\n\n  @Override\n  protected void onRestoreInstanceState(Bundle savedInstanceState) {\n    member = savedInstanceState.getInt(\"member\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Parse Server Features (Global Config & All) using PHP\nDESCRIPTION: Shows how to retrieve specific feature sets, like GlobalConfig permissions using `ParseServerInfo::getGlobalConfigFeatures()`, and how to get all available feature data using `ParseServerInfo::getFeatures()`. Requires Parse Server v2.1.4+ and PHP SDK v1.4.0+. `getGlobalConfigFeatures` returns a JSON-like structure indicating CRUD capabilities for GlobalConfig.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/server-info.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// get various features\n$globalConfigFeatures = ParseServerInfo::getGlobalConfigFeatures();\n/**\n * Returns json of the related features\n * {\n *    \"create\" : true,\n *    \"read\"   : true,\n *    \"update\" : true,\n *    \"delete\" : true\n * }\n */\n\n // you can always get all feature data\n $data = ParseServerInfo::getFeatures();\n```\n\n----------------------------------------\n\nTITLE: Incrementing Counters in Parse Objects\nDESCRIPTION: Demonstrates how to atomically increment a numeric field in Parse using the Increment operation. This example increases the score field by 1 without having to read, modify, and write the value.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/objects.md#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"score\":{\"__op\":\"Increment\",\"amount\":1}}' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/classes/GameScore/Ed1nuqPvcm\n```\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nconnection.connect()\nconnection.request('PUT', '/parse/classes/GameScore/Ed1nuqPvcm', json.dumps({\n    \"score\": {\n        \"__op\": \"Increment\",\n        \"amount\": 1\n    }\n}), {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\",\n    \"Content-Type\": \"application/json\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Role Information in Parse Server\nDESCRIPTION: Demonstrates how to retrieve role information using a GET request. Returns the role's properties including creation date, ACL settings, and name.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/roles.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  https://YOUR.PARSE-SERVER.HERE/parse/roles/mrmBZvsErB\n```\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nconnection.connect()\nconnection.request('GET', '/parse/roles/mrmBZvsErB', '', {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from a LiveQuery in JavaScript\nDESCRIPTION: Demonstrates how to unsubscribe from a LiveQuery subscription to stop receiving events.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/live-queries.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nsubscription.unsubscribe();\n```\n\n----------------------------------------\n\nTITLE: Configuring S3Adapter with Options for Parse Server\nDESCRIPTION: This code snippet shows the constructor signature for the S3Adapter with all available options. It includes parameters for access key, secret key, bucket, and an options object that can contain region, bucket prefix, direct access, base URL, and cache control settings.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/file-adapters.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nnew S3Adapter(accessKey, secretKey, bucket, options)\n```\n\n----------------------------------------\n\nTITLE: Querying Array Values in Parse with Objective-C\nDESCRIPTION: Demonstrates how to query for objects where an array field contains a specific value using either PFQuery or NSPredicate. This example finds objects where the array in 'arrayKey' contains the value 2.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/queries.md#2025-04-22_snippet_36\n\nLANGUAGE: objective-c\nCODE:\n```\n// Find objects where the array in arrayKey contains 2.\n// Using PFQuery\n[query whereKey:@\"arrayKey\" equalTo:@2];\n\n// Or using NSPredicate\nNSPredicate *predicate = [NSPredicate predicateWithFormat:@\"2 IN arrayKey\"];\nPFQuery *query = [PFQuery queryWithClassName:@\"MyClass\" predicate:predicate];\n```\n\n----------------------------------------\n\nTITLE: Pinning Objects with Labels\nDESCRIPTION: Demonstrates how to pin objects with specific labels for grouped storage and management.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/local-datastore.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nawait Parse.Object.pinAllWithName('MyScores', listOfObjects);\n\nawait anotherGameScore.pinWithName('MyScores');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nawait Parse.Object.unPinAllWithName('MyScores', listOfObjects);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nawait Parse.Object.unPinAllObjectsWithName('MyScores');\n```\n\n----------------------------------------\n\nTITLE: Finding Followers - Parse Java\nDESCRIPTION: This Java snippet sets up a Parse query to find users who follow the current user, using the Parse Java SDK.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/relations.md#2025-04-22_snippet_19\n\nLANGUAGE: java\nCODE:\n```\n// set up the query on the Follow table\nParseQuery<ParseObject> query = ParseQuery.getQuery(\"Follow\");\nquery.whereEqualTo(\"to\", ParseUser.getCurrentUser());\n\n// execute the query\nquery.findInBackground(newFindCallback<ParseObject>() {\n    public void done(List<ParseObject> followList, ParseException e) {\n\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Performing Relational Queries in Dart\nDESCRIPTION: This example demonstrates how to perform relational queries using the whereMatchesQuery condition. It finds comments on posts with images by linking two Parse classes.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dart/queries.md#2025-04-22_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nQueryBuilder<ParseObject> queryPost =\n    QueryBuilder<ParseObject>(ParseObject('Post'))\n      ..whereValueExists('image', true);\n\nQueryBuilder<ParseObject> queryComment =\n    QueryBuilder<ParseObject>(ParseObject('Comment'))\n      ..whereMatchesQuery('post', queryPost);\n\nvar apiResponse = await queryComment.query();\n```\n\n----------------------------------------\n\nTITLE: Implementing beforeSave/beforeDelete Webhook Handler in Ruby\nDESCRIPTION: Ruby implementation of a webhook handler for beforeSave and beforeDelete triggers that validates user payment status before allowing Post operations. Includes CSRF protection bypass for webhooks.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/cloudcode/cloud-code-advanced.md#2025-04-22_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nprotect_from_forgery :except => :posts\n\ndef posts\n  if request.headers['X-Parse-Webhook-Key'] != @webhook_key\n    return render :json => { :error => \"Request Unauthorized\"}\n  end\n\n  post = params[:object]\n  if (params[:triggerName] == \"beforeDelete\" || params[:triggerName] == \"beforeSave\") && post[\"className\"] == \"Post\"\n    @user = User.find(post['user'])\n    if !@user.paid_up\n      return render :json => { :error => \"You have outstanding charges on your account. Please update your credit card information before proceeding.\" }\n    end\n\n    return render :json => { :success => true }\n  end\n  return render :json => { :error => \"Unknown trigger\"}\nend\n```\n\n----------------------------------------\n\nTITLE: Sending Customized Push Notification with Parse in PHP\nDESCRIPTION: This snippet demonstrates how to send a customized push notification with Parse, including setting badge count, custom sound, and platform-specific title.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/push-notifications.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nParsePush::send(array(\n  \"channels\" => [ \"Mets\" ],\n  \"data\" => array(\n    \"alert\" => \"The Mets scored! The game is now tied 1-1.\",\n    \"badge\" => \"Increment\",\n    \"sound\" => \"cheering.caf\",\n    \"title\" => \"Mets Score!\"\n  )\n), true);\n```\n\n----------------------------------------\n\nTITLE: Finding Followers - Parse PHP\nDESCRIPTION: Using the Parse PHP SDK, this snippet demonstrates how to query the Follow table for followers by looking up the current user's 'to' entries.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/relations.md#2025-04-22_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n// create an entry in the Follow table\n$query = new ParseQuery(\"Follow\");\n$query->equalTo(\"to\", ParseUser::getCurrentUser());\n$results = $query->find();\n```\n\n----------------------------------------\n\nTITLE: Rendering Parse.File URL in DOM using jQuery\nDESCRIPTION: This code demonstrates how to retrieve a Parse.File's URL and render it in the DOM using jQuery. It's typically used for displaying uploaded images.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/files.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst profilePhoto = profile.get(\"photoFile\");\n$(\"profileImg\")[0].src = profilePhoto.url();\n```\n\n----------------------------------------\n\nTITLE: Performing a Geo Query with Parse in JavaScript\nDESCRIPTION: Demonstrates how to query for objects near a specific location using Parse.Query and the near method. It includes limiting results and handling the returned objects.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/geopoints.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// User's location\nconst userGeoPoint = userObject.get(\"location\");\n// Create a query for places\nconst query = new Parse.Query(PlaceObject);\n// Interested in locations near user.\nquery.near(\"location\", userGeoPoint);\n// Limit what could be a lot of points.\nquery.limit(10);\n// Final list of objects\nconst placesObjects = await query.find();\n```\n\n----------------------------------------\n\nTITLE: Weapon Query Constraints in Objective-C and Swift\nDESCRIPTION: Examples of adding weapon-specific constraints to user queries in both Objective-C and Swift, showing how to query for specific weapons or arrays of weapons.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/relations.md#2025-04-22_snippet_8\n\nLANGUAGE: objective_c\nCODE:\n```\n// add a constraint to query for whenever a specific Weapon is in an array\n[userQuery whereKey:@\"weaponsList\" equalTo:scimitar];\n\n// or query using an array of Weapon objects...\n[userQuery whereKey:@\"weaponsList\" containedIn:arrayOfWeapons];\n```\n\nLANGUAGE: swift\nCODE:\n```\n// add a constraint to query for whenever a specific Weapon is in an array\nuserQuery?.whereKey(\"weaponsList\", equalTo: scimitar);\n\n// or query using an array of Weapon objects...\nuserQuery?.whereKey(\"weaponsList\", containedIn: arrayOfWeapons)\n```\n\n----------------------------------------\n\nTITLE: Creating Function Webhook Payload in Parse Server\nDESCRIPTION: JSON payload structure for creating a function webhook in Parse Server. It includes the function name and the URL to be called when the function is triggered.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/hooks.md#2025-04-22_snippet_12\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"functionName\": \"foo\", \n  \"url\": \"https://api.example.com/foo\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Parse Users\nDESCRIPTION: Demonstrates how to query Parse users with specific criteria using PFUser query.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/users.md#2025-04-22_snippet_14\n\nLANGUAGE: objective_c\nCODE:\n```\nPFQuery *query = [PFUser query];\n[query whereKey:@\"gender\" equalTo:@\"female\"]; // find all the women\nNSArray *girls = [query findObjects];\n```\n\nLANGUAGE: swift\nCODE:\n```\nvar query = PFUser.query()\nquery.whereKey(\"gender\", equalTo:\"female\")\nvar girls = query.findObjects()\n```\n\n----------------------------------------\n\nTITLE: Configuring Backblaze B2 Cloud Storage Adapter for Parse Server\nDESCRIPTION: This code snippet demonstrates the configuration of an S3-compatible adapter for Backblaze B2 Cloud Storage. It includes settings for bucket, base URL, signature version, region, and S3 overrides specific to Backblaze B2.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/file-adapters.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst s3Options = {\n  bucket: \"S3_BUCKET\",\n  baseUrl: \"S3_BASE_URL\", // taken from BackBlaze, normally https://BUCKET.s3.REGION.backblazeb2.com\n  signatureVersion: 'v4',\n  region: 'us-west-000',\n  s3overrides: {\n    endpoint: \"S3_ENDPOINT\", // check backblaze bucket endpoint\n    accessKeyId: \"S3_ACCESS_KEY\",\n    secretAccessKey: \"S3_SECRET_KEY\"\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Parse Dashboard Globally\nDESCRIPTION: Installs Parse Dashboard globally to provide web interface for managing Parse Server.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/deploying-aws-ubuntu.md#2025-04-22_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nsudo npm install -g parse-dashboard\n```\n\n----------------------------------------\n\nTITLE: Implementing ParseObject Subclass\nDESCRIPTION: Shows how to create and register a subclass of ParseObject with proper class attributes and initialization.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/objects.md#2025-04-22_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\n// Armor.cs\nusing Parse;\n\n[ParseClassName(\"Armor\")]\npublic class Armor : ParseObject\n{\n}\n\n// ExtraParseInitialization.cs (attach to your Parse\n// initialization GameObject)\nusing UnityEngine;\nusing Parse;\n\npublic class ExtraParseInitialization : MonoBehaviour\n{\n  void Awake()\n  {\n    ParseObject.RegisterSubclass<Armor>();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying GameScores with GreaterThan in JavaScript\nDESCRIPTION: This snippet demonstrates how to query for GameScores with a score greater than a previously retrieved highScore in JavaScript.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nvar GameScore = Parse.Object.extend(\"GameScore\");\nvar query = new Parse.Query(GameScore);\n// Previously retrieved highScore for Michael Yabuti\nquery.greaterThan(\"score\", highScore);\nquery.find().then(function(results) {\n  // Retrieved scores successfully\n});\n```\n\n----------------------------------------\n\nTITLE: Combining Channel and Data Queries for Push Notifications in Android\nDESCRIPTION: Demonstrates how to combine channel subscriptions with custom data queries to target specific subsets of installations for push notifications.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/push-notifications.md#2025-04-22_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n// Create our Installation query\nParseQuery pushQuery = ParseInstallation.getQuery();\npushQuery.whereEqualTo(\"channels\", \"Giants\"); // Set the channel\npushQuery.whereEqualTo(\"scores\", true);\n\n// Send push notification to query\nParsePush push = new ParsePush();\npush.setQuery(pushQuery);\npush.setMessage(\"Giants scored against the A's! It's now 2-2.\");\npush.sendInBackground();\n```\n\n----------------------------------------\n\nTITLE: Accessing Special Fields\nDESCRIPTION: Shows how to access special system fields of a ParseObject.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/objects.md#2025-04-22_snippet_7\n\nLANGUAGE: cs\nCODE:\n```\nstring objectId = gameScore.ObjectId;\nDateTime? updatedAt = gameScore.UpdatedAt;\nDateTime? createdAt = gameScore.CreatedAt;\nParseACL? parseACL = gameScore.ACL;\n```\n\n----------------------------------------\n\nTITLE: Sending Push Notifications via REST API - curl\nDESCRIPTION: This curl command demonstrates sending push notifications to multiple device types using the Parse Server REST API. Required dependencies are Parse Server running at the specified endpoint and valid app and master keys. The payload includes a target query for devices and a data object specifying notification title and alert text. Inputs include HTTP headers and a JSON body, and the output is a typical HTTP response indicating success or failure.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/push-notifications.md#2025-04-22_snippet_5\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n  -H \"X-Parse-Application-Id: you_app_id\" \\\n  -H \"X-Parse-Master-Key: your_master_key\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"where\": {\n          \"deviceType\": {\n            \"$in\": [\n              \"ios\",\n              \"android\"\n            ]\n          }\n        },\n        \"data\": {\n          \"title\": \"The Shining\",\n          \"alert\": \"All work and no play makes Jack a dull boy.\"\n        }\n      }'\\   http://your_server_address/parse/push\n```\n\n----------------------------------------\n\nTITLE: Creating Follow Relationship - Parse C#\nDESCRIPTION: In this C# snippet, an asynchronous operation creates a follow relationship in Parse, utilizing the Parse .NET SDK.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/relations.md#2025-04-22_snippet_12\n\nLANGUAGE: cs\nCODE:\n```\n// suppose we have a user we want to follow\nParseUser otherUser = ...\n\n// create an entry in the Follow table\nvar follow = new ParseObject(\"Follow\");\nfollow[\"from\"] = ParseUser.CurrentUser;\nfollow[\"to\"] = otherUser;\nfollow[\"date\"] = DateTime.UtcNow;\nawait follow.SaveAsync();\n```\n\n----------------------------------------\n\nTITLE: Using matchesKey Query in Parse iOS SDK\nDESCRIPTION: Demonstrates how to use the whereKey:matchesKey:inQuery: method to find objects where a key matches the value of a key in another query's result set. The example finds users whose hometown teams have winning records.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/queries.md#2025-04-22_snippet_28\n\nLANGUAGE: objective-c\nCODE:\n```\nPFQuery *teamQuery = [PFQuery queryWithClassName:@\"Team\"];\n[teamQuery whereKey:@\"winPct\" greaterThan:@(0.5)];\nPFQuery *userQuery = [PFQuery queryForUser];\n[userQuery whereKey:@\"hometown\" matchesKey:@\"city\" inQuery:teamQuery];\n[userQuery findObjectsInBackgroundWithBlock:^(NSArray *results, NSError *error) {\n    // results will contain users with a hometown team with a winning record\n}];\n```\n\n----------------------------------------\n\nTITLE: Querying Hashtags in PHP\nDESCRIPTION: Example of querying posts containing specific hashtags using Parse PHP SDK with containsAll constraint.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_102\n\nLANGUAGE: php\nCODE:\n```\n$query = new ParseQuery(\"Post\");\n\n$query->containsAll(\"hashtags\", [\"#parse\", \"#ftw\"]);\n\n$posts = $query->find();\n// posts containing all the given hash tags\n```\n\n----------------------------------------\n\nTITLE: Querying Hashtags in C#\nDESCRIPTION: Example of querying posts containing specific hashtags using Parse C# SDK with containsAll constraint.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_101\n\nLANGUAGE: cs\nCODE:\n```\nvar results = await ParseObject.GetQuery(\"Post\")\n    .WhereContainsAll(\"hashtags\", new[] { \"#parse\", \"#ftw\" })\n    .FindAsync();\n```\n\n----------------------------------------\n\nTITLE: Registering ParsePushBroadcastReceiver in AndroidManifest.xml (XML)\nDESCRIPTION: This XML snippet registers the `ParsePushBroadcastReceiver` within the `<application>` tag in the `AndroidManifest.xml` file. This receiver handles intents related to push notifications sent by Parse, such as receiving, opening, or deleting notifications. The `exported=\"false\"` attribute restricts other apps from sending broadcasts to this receiver. The intent filter specifies the Parse push actions it listens for.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/push-notifications-android.md#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<receiver\n    android:name=\"com.parse.ParsePushBroadcastReceiver\"\n    android:exported=\"false\">\n    <intent-filter>\n        <action android:name=\"com.parse.push.intent.RECEIVE\" />\n        <action android:name=\"com.parse.push.intent.DELETE\" />\n        <action android:name=\"com.parse.push.intent.OPEN\" />\n    </intent-filter>\n</receiver>\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Fields to Parse User in Dart\nDESCRIPTION: Illustrates how to add additional custom fields to a Parse user object.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dart/users.md#2025-04-22_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar user = ParseUser(\"TestFlutter\", \"TestPassword123\", \"TestFlutterSDK@gmail.com\")\n            ..set(\"userLocation\", \"FlutterLand\");\n```\n\n----------------------------------------\n\nTITLE: Defining a Cloud Function in JavaScript for Parse Server\nDESCRIPTION: This snippet demonstrates how to define a simple Cloud Function named 'hello' using JavaScript. The function returns the request body, allowing for echo-like functionality.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/arduino/cloud-code.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nParse.Cloud.define(\"hello\", request => {\n\treturn request.body;\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching ParseConfig in C#\nDESCRIPTION: This snippet demonstrates how to asynchronously fetch the ParseConfig object from the server. It uses a try-catch block to handle potential exceptions during the fetch operation.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/config.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nParseConfig config = null;\ntry {\n  config = await ParseConfig.GetAsync();\n} catch (Exception e) {\n  // Something went wrong (e.g. request timed out)\n}\n```\n\n----------------------------------------\n\nTITLE: Limiting Search Distance with Curl\nDESCRIPTION: Makes a GET request to find places within a specific radius (10 miles) of a geographic point using the $maxDistanceInMiles parameter with $nearSphere operator.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/geopoints.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -G \\\n  --data-urlencode 'where={\n        \"location\": {\n          \"$nearSphere\": {\n            \"__type\": \"GeoPoint\",\n            \"latitude\": 30.0,\n            \"longitude\": -20.0\n          },\n          \"$maxDistanceInMiles\": 10.0\n        }\n      }' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/classes/PlaceObject\n```\n\n----------------------------------------\n\nTITLE: Handling Enter Event in Parse LiveQuery\nDESCRIPTION: Implementation of the Enter event handler that triggers when a ParseObject's new value matches the QueryBuilder criteria. Demonstrates how to access object properties and timestamps.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dart/queries.md#2025-04-22_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nsubscription.on(LiveQueryEvent.enter, (value) {\n    print('*** ENTER ***: ${DateTime.now().toString()}\\n $value ');\n    print((value as ParseObject).objectId);\n    print((value as ParseObject).updatedAt);\n    print((value as ParseObject).createdAt);\n    print((value as ParseObject).get('objectId'));\n    print((value as ParseObject).get('updatedAt'));\n    print((value as ParseObject).get('createdAt'));\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Push Adapter in Parse Server (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to configure a custom PushAdapter when initializing a new Parse Server instance. It shows how to pass the custom adapter through the 'push' configuration option.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/push-notifications.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar server = new ParseServer({\n  databaseURI: '...',\n  cloud: '...',\n  appId: '...',\n  masterKey: '...',\n  push: {\n    adapter: your_adapter\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Unpinning Objects from Local Datastore\nDESCRIPTION: Shows how to remove objects from local datastore using unpinInBackground.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/local-datastore.md#2025-04-22_snippet_8\n\nLANGUAGE: java\nCODE:\n```\ngameScore.unpinInBackground();\n```\n\n----------------------------------------\n\nTITLE: Finding Nearest Objects with GeoPoint Using Curl\nDESCRIPTION: Makes a GET request to find the 10 closest places to a specified geographic point using the $nearSphere operator. The query returns objects ordered by proximity to the specified coordinates.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/geopoints.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -G \\\n  --data-urlencode 'limit=10' \\\n  --data-urlencode 'where={\n        \"location\": {\n          \"$nearSphere\": {\n            \"__type\": \"GeoPoint\",\n            \"latitude\": 30.0,\n            \"longitude\": -20.0\n          }\n        }\n      }' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/classes/PlaceObject\n```\n\n----------------------------------------\n\nTITLE: Retrieving ParseFile Data in Background in Java\nDESCRIPTION: Demonstrates how to asynchronously retrieve the data from a ParseFile associated with a ParseObject using getDataInBackground.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/files.md#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nParseFile applicantResume = (ParseFile)anotherApplication.get(\"applicantResumeFile\");\napplicantResume.getDataInBackground(new GetDataCallback() {\n  public void done(byte[] data, ParseException e) {\n    if (e == null) {\n      // data has the bytes for the resume\n    } else {\n      // something went wrong\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Current Logged-In User with Parse PHP SDK\nDESCRIPTION: This snippet shows how to retrieve the currently logged-in user, whose session is typically cached. It calls the static `ParseUser::getCurrentUser()` method, which returns the `ParseUser` object if a user is logged in, or null otherwise. By default, the user session is stored in PHP's `$_SESSION` superglobal; `session_start()` may be required before initializing the Parse SDK to load the session data.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/users.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n```php\n$currentUser = ParseUser::getCurrentUser();\nif ($currentUser) {\n    // do stuff with the user\n} else {\n    // show the signup or login page\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Filtering Parse Query Results with whereNotEqualTo in Android\nDESCRIPTION: This snippet shows how to filter out objects where playerName equals \"Michael Yabuti\" using the whereNotEqualTo constraint method.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/queries.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nquery.whereNotEqualTo(\"playerName\", \"Michael Yabuti\");\n```\n\n----------------------------------------\n\nTITLE: Logging in and Linking Facebook Users with Access Token in Parse SDK\nDESCRIPTION: This snippet demonstrates how to log in or link a Parse user with an existing Facebook access token. It shows two approaches: creating/updating the current user with a Facebook token, or linking an existing Parse user with a Facebook token.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/users.md#2025-04-22_snippet_18\n\nLANGUAGE: objective_c\nCODE:\n```\nFBSDKAccessToken *accessToken = ...; // Use existing access token.\n\n// Log In (create/update currentUser) with FBSDKAccessToken\n[PFFacebookUtils logInInBackgroundWithAccessToken:accessToken\n                                            block:^(PFUser *user, NSError *error) {\n  if (!user) {\n    NSLog(@\"Uh oh. There was an error logging in.\");\n  } else {\n    NSLog(@\"User logged in through Facebook!\");\n  }\n}];\n\n//\n// or\n//\n\n// Link PFUser with FBSDKAccessToken\n[PFFacebookUtils linkUserInBackground:user\n                      withAccessToken:accessToken\n                                block:^(BOOL succeeded, NSError *error) {\n  if (succeeded) {\n    NSLog(@\"Woohoo, the user is linked with Facebook!\");\n  }\n}];\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet accessToken: FBSDKAccessToken = ...; // Use existing access token.\n\n// Log In (create/update currentUser) with FBSDKAccessToken\nPFFacebookUtils.logInInBackgroundWithAccessToken(accessToken, {\n  (user: PFUser?, error: NSError?) -> Void in\n  if user != nil {\n    print(\"User logged in through Facebook!\")\n  } else {\n    print(\"Uh oh. There was an error logging in.\")\n  }\n})\n\n//\n// or\n//\n\n// Link PFUser with FBSDKAccessToken\nPFFacebookUtils.linkUserInBackground(user, withAccessToken: accessToken, {\n  (succeeded: Bool?, error: NSError?) -> Void in\n  if succeeded {\n    print(\"Woohoo, the user is linked with Facebook!\")\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Registering for Push Notifications - Xamarin (C#)\nDESCRIPTION: Provides C# code for Xamarin.iOS applications to register for remote notifications with Parse. Dependencies include Xamarin.iOS, Parse Push SDK, and user notification permissions. This snippet configures the alert, badge, and sound settings, registers for notifications, and includes an event handler for receiving and processing push notification payloads.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/push-notifications-ios.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// Xamarin\\nUIUserNotificationType notificationTypes = (UIUserNotificationType.Alert |\\nUIUserNotificationType.Badge |\\nUIUserNotificationType.Sound);\\nvar settings = UIUserNotificationSettings.GetSettingsForTypes(notificationTypes,\\nnew NSSet(new string[] { }));\\nUIApplication.SharedApplication.RegisterUserNotificationSettings(settings);\\nUIApplication.SharedApplication.RegisterForRemoteNotifications();\\n\\n// Handle Push Notifications\\nParsePush.ParsePushNotificationReceived += (object sender, ParsePushNotificationEventArgs args) => {\\n  // Process Push Notification payload here.\\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving Installation ID with Parse on Arduino\nDESCRIPTION: This code snippet shows how to retrieve the installation ID for an Arduino device using Parse. The installation ID is a unique identifier used for push notifications and is persisted across reboots.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/arduino/push-notifications.md#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nString installationId = Parse.getInstallationId();\n```\n\n----------------------------------------\n\nTITLE: Creating a ParseFile in Java\nDESCRIPTION: Demonstrates how to create a ParseFile object from a byte array, specifying a filename with extension to determine file type.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/files.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nbyte[] data = \"Working at Parse is great!\".getBytes();\nParseFile file = new ParseFile(\"resume.txt\", data);\n```\n\n----------------------------------------\n\nTITLE: Tracking App Open Events with Parse Analytics in C#\nDESCRIPTION: This snippet demonstrates how to track application launch events using Parse Analytics. It should be added to the application's Launching event handler to collect data on when and how often the app is opened.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/analytics.md#2025-04-22_snippet_0\n\nLANGUAGE: cs\nCODE:\n```\nParseAnalytics.TrackAppOpenedAsync();\n```\n\n----------------------------------------\n\nTITLE: Handling LiveQueryClient Close Event in JavaScript\nDESCRIPTION: Demonstrates how to listen for the 'close' event on a LiveQueryClient instance, which is emitted when the connection is closed.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/live-queries.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nclient.on('close', () => {\n  console.log('connection closed');\n});\n```\n\n----------------------------------------\n\nTITLE: Parse ACL Retrieval and Role Assignment\nDESCRIPTION: Shows how to retrieve ACL settings and assign permissions to Parse Roles.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dart/objects.md#2025-04-22_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nParseACL parseACL = parseObject.getACL();\n\nparseACL.setReadAccess(userId: \"role:ROLE_NAME\", allowed: true);\nparseACL.setWriteAccess(userId: \"role:ROLE_NAME\", allowed: true);\n```\n\n----------------------------------------\n\nTITLE: Navigating to Home Directory\nDESCRIPTION: Changes to the user's home directory to set up Parse Server.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/deploying-aws-ubuntu.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncd ~\n```\n\n----------------------------------------\n\nTITLE: Finding With Constraints Using 'where' Argument - Parse Server GraphQL - GraphQL\nDESCRIPTION: Applies filter constraints with the 'where' argument to limit the query to objects that match certain criteria. Here, only GameScore objects with score greater than 158 are fetched. All returned nodes and other pagination fields remain accessible. Make sure to reference valid field names and supported operators for Parse Server GraphQL.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/queries.md#2025-04-22_snippet_9\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery getSomeGameScores {\n  gameScores(where: {\n  \tscore: { greaterThan: 158 }\n  }) {\n    count\n    edges {\n      cursor\n      node {\n        id\n        playerName\n        score\n        cheatMode\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Query Constraints on Channels for Push Notifications in C#\nDESCRIPTION: This code shows an alternative approach to targeting installations by using a query that directly constrains the channels field, combined with other query conditions.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/push-notifications.md#2025-04-22_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nvar push = new ParsePush();\npush.Query = ParseInstallation.Query\n             .WhereEqualTo(\"scores\", true)\n             .WhereContainsAll(\"channels\", new string[] { \"Giants\" });\npush.Alert = \"Giants scored against the A's! It's now 2-2.\";\npush.SendAsync();\n```\n\n----------------------------------------\n\nTITLE: Example GeoPoint Query Results\nDESCRIPTION: Sample response from a GeoPoint query showing two objects ordered by proximity to the query point. Each object includes location data as a GeoPoint along with metadata.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/geopoints.md#2025-04-22_snippet_4\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"results\": [\n    {\n      \"location\": {\n        \"latitude\": 40.0,\n        \"__type\": \"GeoPoint\",\n        \"longitude\": -30.0\n      },\n      \"updatedAt\": \"2022-01-01T12:23:45.678Z\",\n      \"createdAt\": \"2022-01-01T12:23:45.678Z\",\n      \"objectId\": \"iFEPN5Gwoz\"\n    },\n    {\n      \"location\": {\n        \"latitude\": 60.0,\n        \"__type\": \"GeoPoint\",\n        \"longitude\": -20.0\n      },\n      \"updatedAt\": \"2022-01-01T12:23:45.678Z\",\n      \"createdAt\": \"2022-01-01T12:23:45.678Z\",\n      \"objectId\": \"LAyNKSNTHT\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Delegate Methods\nDESCRIPTION: Implementation of delegate methods to handle successful login and cancellation events\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/user-interface.md#2025-04-22_snippet_3\n\nLANGUAGE: objective-c\nCODE:\n```\n- (void)logInViewController:(PFLogInViewController *)controller\n               didLogInUser:(PFUser *)user {\n    [self dismissViewControllerAnimated:YES completion:nil];\n}\n\n- (void)logInViewControllerDidCancelLogIn:(PFLogInViewController *)logInController {\n    [self dismissViewControllerAnimated:YES completion:nil];\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\nfunc logInViewController(controller: PFLogInViewController, didLogInUser user: PFUser!) -> Void {\n\tself.dismiss(animated: true, completion: nil)\n}\n\nfunc logInViewControllerDidCancelLog(in controller: PFLogInViewController) -> Void {\n\tself.dismiss(animated: true, completion: nil)\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking App Opens in Android with Parse Analytics\nDESCRIPTION: Implements basic app-open tracking by adding a single line to the onCreate method of the main Activity. This allows collection of data on when and how often the application is launched.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/analytics.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nParseAnalytics.trackAppOpenedInBackground(getIntent());\n```\n\n----------------------------------------\n\nTITLE: Using Match Pipeline in Parse Aggregate Query\nDESCRIPTION: Demonstrates how to use the match pipeline for filtering results, similar to 'equalTo' operation. This example matches the 'name' field with 'BBQ'.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/queries.md#2025-04-22_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nconst pipeline = [\n  { $match: { name: 'BBQ' } }\n];\nconst query = new Parse.Query(\"User\");\nquery.aggregate(pipeline)\n  .then(function(results) {\n    // results contains name that matches 'BBQ'\n  })\n  .catch(function(error) {\n    // There was an error.\n  });\n```\n\n----------------------------------------\n\nTITLE: Querying with Node Relay and GraphQL Fragments - GraphQL\nDESCRIPTION: This query uses the 'node' GraphQL query to fetch an object by its Relay Node ID, enabling the use of fragments for type-specific fields. The returned result uses '__typename' to identify the object type and returns relevant GameScore fields. Suitable for generic, type-safe front end components that operate over multiple object types.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/queries.md#2025-04-22_snippet_3\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery getGameScoreWithNodeRelay {\n  node(id: \"R2FtZVNjb3JlOjZtdGlNcmtXNnY\") {\n    id\n    __typename\n    ... on GameScore {\n      playerName\n      score\n      cheatMode\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Saving a ParseFile in Background in Java\nDESCRIPTION: Shows how to save a ParseFile to the cloud asynchronously using the saveInBackground method.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/files.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nfile.saveInBackground();\n```\n\n----------------------------------------\n\nTITLE: Efficient Query with StartsWith in Java\nDESCRIPTION: This snippet demonstrates an efficient way to query for player names using the StartsWith condition in Java. This approach is recommended for better performance as it can use an index.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_51\n\nLANGUAGE: java\nCODE:\n```\nquery.whereStartsWith(\"playerName\", \"Michael\");\n```\n\n----------------------------------------\n\nTITLE: Retrieving ParseObjects in C#\nDESCRIPTION: Shows how to retrieve a ParseObject by ID and access its properties using GetAsync and Get<T> methods.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/objects.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nParseQuery<ParseObject> query = ParseObject.GetQuery(\"GameScore\");\nParseObject gameScore = await query.GetAsync(\"xWMyZ4YEGZ\");\n```\n\nLANGUAGE: csharp\nCODE:\n```\nint score = gameScore.Get<int>(\"score\");\nstring playerName = gameScore.Get<string>(\"playerName\");\nbool cheatMode = gameScore.Get<bool>(\"cheatMode\");\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstring objectId = gameScore.ObjectId;\nDateTime? updatedAt = gameScore.UpdatedAt;\nDateTime? createdAt = gameScore.CreatedAt;\nParseACL? acl = gameScore.ACL;\n```\n\n----------------------------------------\n\nTITLE: Querying Objects in a Bounding Box with Curl\nDESCRIPTION: Makes a GET request to find places within a rectangular geographic area defined by two points (southwest and northeast corners) using the $within and $box operators.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/geopoints.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -G \\\n  --data-urlencode 'where={\n        \"location\": {\n          \"$within\": {\n            \"$box\": [\n              {\n                \"__type\": \"GeoPoint\",\n                \"latitude\": 37.71,\n                \"longitude\": -122.53\n              },\n              {\n                \"__type\": \"GeoPoint\",\n                \"latitude\": 30.82,\n                \"longitude\": -122.37\n              }\n            ]\n          }\n        }\n      }' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/classes/PizzaPlaceObject\n```\n\n----------------------------------------\n\nTITLE: Invoking a Cloud Function from C++ in Parse Server\nDESCRIPTION: This code snippet shows how to call the 'hello' Cloud Function from a C++ client. It sets up the function name, adds a parameter, and sends the request using the Parse SDK.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/arduino/cloud-code.md#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nParseCloudFunction cloudFunction;\ncloudFunction.setFunctionName(\"hello\");\ncloudFunction.add(\"value\", \"echo from hello\");\nParseResponse response = cloudFunction.send();\n```\n\n----------------------------------------\n\nTITLE: Limiting Query Results in Parse Objective-C and Swift\nDESCRIPTION: Demonstrates limiting the number of query results to 10 in both Objective-C and Swift using Parse iOS SDK. Assigns the limit value to the query object to control paging and network usage.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_60\n\nLANGUAGE: objective_c\nCODE:\n```\nquery.limit = 10; // limit to at most 10 results\n```\n\nLANGUAGE: swift\nCODE:\n```\nquery.limit = 10 // limit to at most 10 results\n```\n\n----------------------------------------\n\nTITLE: Creating Function Webhook using cURL in Parse Server\nDESCRIPTION: cURL command to create a function webhook in Parse Server. It sends a POST request with the necessary headers and payload to the Parse Server endpoint.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/hooks.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-Master-Key: ${MASTER_KEY}\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"functionName\":\"baz\",\"url\":\"https://api.example.com/baz\"}' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/hooks/functions\n```\n\n----------------------------------------\n\nTITLE: Saving Local Changes with saveEventually\nDESCRIPTION: Demonstrates how to save local changes to Parse server when network becomes available.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/local-datastore.md#2025-04-22_snippet_14\n\nLANGUAGE: java\nCODE:\n```\ngameScore.saveEventually();\n```\n\n----------------------------------------\n\nTITLE: Adding Users to a Role in Parse Server\nDESCRIPTION: This snippet demonstrates how to add two users to the \"Moderators\" role using the AddRelation operator via a PUT request to the Parse Server API.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/roles.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-Master-Key: ${MASTER_KEY}\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"users\": {\n          \"__op\": \"AddRelation\",\n          \"objects\": [\n            {\n              \"__type\": \"Pointer\",\n              \"className\": \"_User\",\n              \"objectId\": \"8TOXdXf3tz\"\n            },\n            {\n              \"__type\": \"Pointer\",\n              \"className\": \"_User\",\n              \"objectId\": \"g7y9tkhB7O\"\n            }\n          ]\n        }\n      }' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/roles/mrmBZvsErB\n```\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nconnection.connect()\nconnection.request('PUT', '/parse/roles/mrmBZvsErB', json.dumps({\n    \"users\": {\n        \"__op\": \"AddRelation\",\n        \"objects\": [\n            {\n                \"__type\": \"Pointer\",\n                \"className\": \"_User\",\n                \"objectId\": \"8TOXdXf3tz\"\n            },\n            {\n                \"__type\": \"Pointer\",\n                \"className\": \"_User\",\n                \"objectId\": \"g7y9tkhB7O\"\n            }\n        ]\n    }\n}), {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-Master-Key\": \"${MASTER_KEY}\",\n    \"Content-Type\": \"application/json\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Querying for Multiple Array Values in Parse with Swift\nDESCRIPTION: Swift implementation for finding objects where an array field contains all elements in a specified set of values. This example finds objects where 'arrayKey' contains all of the values 2, 3, and 4.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/queries.md#2025-04-22_snippet_39\n\nLANGUAGE: swift\nCODE:\n```\n// Find objects where the array in arrayKey contains each of the\n// elements 2, 3, and 4.\nquery.whereKey(\"arrayKey\", containsAllObjectsIn:[2, 3, 4])\n```\n\n----------------------------------------\n\nTITLE: Advanced Customization of Parse Signup View\nDESCRIPTION: Example of further customizing PFSignUpViewController by overriding viewDidLoad to change placeholder text and viewDidLayoutSubviews to modify UI element frames. Demonstrates deeper UI customization possibilities.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/user-interface.md#2025-04-22_snippet_12\n\nLANGUAGE: objective_c\nCODE:\n```\n@interface MySignUpViewController : PFSignUpViewController\n\n@end\n\n@implementation MySignUpViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    self.signUpView.usernameField.placeholder = @\"phone\";\n}\n\n- (void)viewDidLayoutSubviews {\n    [super viewDidLayoutSubviews];\n    self.signUpView.signUpButton.frame = CGRectMake(...); // Set a different frame.\n}\n\n@end\n```\n\nLANGUAGE: swift\nCODE:\n```\nclass MySignUpViewController : PFSignUpViewController {\n\n  override func viewDidLoad() {\n    super.viewDidLoad()\n\n    self.signUpView?.usernameField?.placeholder = \"phone\"\n  }\n\n  override func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n\n    self.signUpView?.signUpButton?.frame = CGRectMake(...) // Set a different frame.\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating User via Session Token (Become) with Parse PHP SDK\nDESCRIPTION: This snippet illustrates how to authenticate a user using a pre-existing, valid session token. The static `ParseUser::become()` method takes the session token as input. If the token is valid, it authenticates the corresponding user and sets them as the current user. A try-catch block handles potential `ParseException` if the token is invalid or expired.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/users.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n```php\ntry {\n  $user = ParseUser::become(\"session-token-here\");\n  // The current user is now set to user.\n} catch (ParseException $ex) {\n  // The token could not be validated.\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Tracking ParseFile Upload Progress in Java\nDESCRIPTION: Shows how to monitor the progress of a ParseFile upload using ProgressCallback, which provides updates on the percentage completed.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/files.md#2025-04-22_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nbyte[] data = \"Working at Parse is great!\".getBytes();\nParseFile file = new ParseFile(\"resume.txt\", data);\n\nfile.saveInBackground(new SaveCallback() {\n  public void done(ParseException e) {\n    // Handle success or failure here ...\n  }\n}, new ProgressCallback() {\n  public void done(Integer percentDone) {\n    // Update your progress spinner here. percentDone will be between 0 and 100.\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Session Storage for Parse PHP SDK\nDESCRIPTION: This snippet shows how to configure a custom storage mechanism for user sessions instead of using the default PHP `$_SESSION`. You need to create a class that implements the `ParseSessionStorageInterface` and then pass an instance of this class to `ParseClient::setStorage()` during the SDK initialization.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/users.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n```php\n    ParseClient::setStorage(new MyStorageClass());\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Parse SDK Dependency in Project build.gradle\nDESCRIPTION: Adds the Parse SDK dependency to the project's build.gradle file. The implementation requires specifying the latest version of the SDK.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/getting-started.md#2025-04-22_snippet_1\n\nLANGUAGE: gradle\nCODE:\n```\ndependencies {\n    implementation \"com.github.parse-community.Parse-SDK-Android:parse:latest.version.here\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example Virtual ACL Created by Pointer Permissions in Parse Server\nDESCRIPTION: This snippet demonstrates the virtual ACL structure created by pointer permissions on an object with 'sender' and 'receiver' fields. It shows read and write permissions for the sender, and read-only permissions for the receiver.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/security.md#2025-04-22_snippet_11\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"<SENDER_USER_ID>\": {\n        \"read\": true,\n        \"write\": true\n    },\n    \"<RECEIVER_USER_ID>\": {\n        \"read\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New ParseRole with ACL in C#\nDESCRIPTION: Creates a new administrator role with public read access but no write access to ensure the role cannot be altered.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/roles.md#2025-04-22_snippet_0\n\nLANGUAGE: cs\nCODE:\n```\n// By specifying no write privileges for the ACL, we can ensure the role cannot be altered.\nvar roleACL = new ParseACL();\nroleACL.PublicReadAccess = true;\nvar role = new ParseRole(\"Administrator\", roleACL);\nTask saveTask = role.SaveAsync();\n```\n\n----------------------------------------\n\nTITLE: Child Relation Query in Parse GraphQL\nDESCRIPTION: GraphQL query demonstrating how to query houses through nested pointer relationships up to country level.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/queries.md#2025-04-22_snippet_21\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  houses(\n    where: {\n      street: {\n        have: {\n          city: {\n            have: {\n              country: {\n                have: {\n                  name: { equalTo: \"France\" }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ) {\n    edges {\n      node {\n        name\n        street {\n          name\n          city {\n            name\n            country {\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Querying Specific Installation Using Parse REST API\nDESCRIPTION: REST API example demonstrating how to query a specific installation by objectId along with additional constraints.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/push-notifications.md#2025-04-22_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n# Query over installations\ncurl -X GET \\\n-H \"X-Parse-Application-Id: {YOUR_APPLICATION_ID}\" \\\n-H \"X-Parse-Master-Key: {YOUR_MASTER_KEY}\" \\\n-G \\\n--data-urlencode 'limit=1' \\\n--data-urlencode 'where={ \"objectId\": {YOUR_INSTALLATION_OBJECT_ID}, \"city\": \"San Francisco\", \"deviceType\": { \"$in\": [ \"ios\", \"android\", \"winphone\", \"embedded\" ] } }' \\\nhttps://YOUR.PARSE-SERVER.HERE/parse/installations\n```\n\n----------------------------------------\n\nTITLE: Querying String Values with StartsWith in C#\nDESCRIPTION: Demonstrates how to use WhereStartsWith or StartsWith LINQ query to find Parse objects with string values starting with a specific prefix. This is efficient for large datasets as it uses indexing.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/queries.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// Finds barbecue sauces that start with \"Big Daddy's\".\nvar query = from sauce in ParseObject.GetQuery(\"BarbecueSauce\")\n            where sauce.Get<string>(\"name\").StartsWith(\"Big Daddy's\")\n            select sauce;\n\n// or using LINQ\n// Finds barbecue sauces that start with \"Big Daddy's\".\nvar query = ParseObject.GetQuery(\"BarbecueSauce\")\n    .WhereStartsWith(\"name\", \"Big Daddy's\");\n```\n\n----------------------------------------\n\nTITLE: Pinning Objects with Labels\nDESCRIPTION: Shows how to pin objects with labels for grouped storage management.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/local-datastore.md#2025-04-22_snippet_10\n\nLANGUAGE: java\nCODE:\n```\n// Add several objects with a label.\nParseObject.pinAllInBackground(\"MyScores\", someGameScores);\n\n// Add another object with the same label.\nanotherGameScore.pinInBackground(\"MyScores\");\n```\n\n----------------------------------------\n\nTITLE: Creating User Associations in Parse SDK for C#\nDESCRIPTION: Demonstrates how to create associations between a ParseUser and other objects, such as blog posts. It shows creating a new post, saving it, and then querying for all posts by the current user.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/users.md#2025-04-22_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\n// Make a new post\nvar post = new ParseObject(\"Post\")\n{\n    { \"title\", \"My New Post\" },\n    { \"body\", \"This is some great content.\" },\n    { \"user\", ParseUser.CurrentUser }\n};\npost.SaveAsync().ContinueWith(t =>\n{\n    // Find all posts by the current user\n    return ParseObject.GetQuery(\"Post\")\n        .WhereEqualTo(\"user\", ParseUser.CurrentUser)\n        .FindAsync();\n}).Unwrap().ContinueWith(t =>\n{\n    IEnumerable<ParseObject> userPosts = t.Result;\n});\n```\n\n----------------------------------------\n\nTITLE: GraphQL Core Concepts Code Examples\nDESCRIPTION: Code demonstration of the three fundamental GraphQL operations - Query, Mutation, and Subscription, shown in markdown format with inline code blocks.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/graphql.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `Query`: Fetch data\n* `Mutation`: Create or update data\n* `Subscription`: Listen for data changes\n```\n\n----------------------------------------\n\nTITLE: Finding Followers - Parse Objective-C/Swift\nDESCRIPTION: Objective-C/Swift snippets for querying followers by accessing the 'to' field in the Parse Follow table using the Parse iOS SDK.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/relations.md#2025-04-22_snippet_20\n\nLANGUAGE: objective_c\nCODE:\n```\n// set up the query on the Follow table\nPFQuery *query = [PFQuery queryWithClassName:@\"Follow\"];\n[query whereKey:@\"to\" equalTo:[PFUser currentUser]];\n\n[query findObjectsInBackgroundWithBlock:^(NSArray *objects, NSError *error) {\n  for(PFObject *o in objects) {\n     // o is an entry in the Follow table\n     // to get the user, we get the object with the from key\n    PFUser *otherUser = [o objectForKey@\"from\"];\n\n    // to get the time the user was followed, get the date key\n    PFObject *when = [o objectForKey@\"date\"];\n  }\n}];\n```\n\nLANGUAGE: swift\nCODE:\n```\n// set up the query on the Follow table\nlet query = PFQuery(className: \"Follow\")\nquery.whereKey(\"to\", equalTo: PFUser.currentUser()!)\n\nquery.findObjectsInBackgroundWithBlock{\n\t(objects: [AnyObject]?, error: NSError?) -> Void in\n    if let objects = objects {\n        for o in objects {\n            // o is an entry in the Follow table\n            // to get the user, we get the object with the to key\n            let otherUse = o.objectForKey(\"to\") as? PFUser\n\n            // to get the time when we followed this user, get the date key\n            let when = o.objectForKey(\"date\") as? PFObject\n        }\n\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from Push Notification Channels in C#\nDESCRIPTION: Shows how to unsubscribe an Installation from a channel for push notifications using Parse SDK in C#. This example demonstrates unsubscribing from the 'Giants' channel.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/push-notifications.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar installation = ParseInstallation.CurrentInstallation;\ninstallation.RemoveAllFromList(\"channels\" new List<string> { \"Giants\" });\ninstallation.SaveAsync();\n```\n\nLANGUAGE: csharp\nCODE:\n```\nParsePush.UnsubscribeAsync(\"Giants\");\n```\n\n----------------------------------------\n\nTITLE: Setting Parse Server URL and Mount Point in PHP\nDESCRIPTION: Configures the remote Parse Server URL and mount point for the SDK after initialization. Replace 'https://my-parse-server.com:port' with your server's specific URL and port, and 'parse' with your server's designated mount path (route prefix).\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/setup.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// Users of Parse Server will need to point ParseClient at their remote URL and Mount Point:\nParseClient::setServerURL('https://my-parse-server.com:port','parse');\n```\n\n----------------------------------------\n\nTITLE: Implementing PFTableViewCell for Remote Images in Swift\nDESCRIPTION: Swift implementation of a UITableView delegate method that uses PFTableViewCell to display cells with remote images stored as PFFileObjects, handling cell reuse and setting placeholder images.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/user-interface.md#2025-04-22_snippet_20\n\nLANGUAGE: swift\nCODE:\n```\nfunc tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {\n\tlet identifier = \"cell\"\n\tvar cell = tableView.dequeueReusableCell(withIdentifier: identifier) as? PFTableViewCell\n\tif cell == nil {\n\t\tcell = PFTableViewCell(style: .default, reuseIdentifier: identifier)\n\t}\n\n\tif let title = object[\"title\"] as? String {\n\t\tcell!.textLabel.text = title\n\t}\n\tif let thumbnail = object[\"thumbnail\"] as? PFFileObject {\n\t\tcell!.imageView?.image = UIImage(named: \"placeholder.jpg\")\n\t\tcell!.imageView.file = thumbnail\n\t}\n\n\treturn cell!\n}\n```\n\n----------------------------------------\n\nTITLE: Express.js Project Setup for Parse GraphQL\nDESCRIPTION: Commands to create a new Express.js project and install Parse Server dependencies.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/getting-started.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ mkdir my-app\n$ cd my-app\n$ npm init\n$ npm install parse-server express --save\n```\n\n----------------------------------------\n\nTITLE: Querying All Parse Users via REST API in Python\nDESCRIPTION: Uses Python's http.client to retrieve all users from the Parse Server. Makes a GET request to the users endpoint with the required authentication headers.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/users.md#2025-04-22_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nconnection.connect()\nconnection.request('GET', '/parse/users', '', {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Adding Child Role Relationship using Python\nDESCRIPTION: Establishes a parent-child relationship between Moderator and Administrator roles using Python's http.client library to make a PUT request to Parse Server.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/roles.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nconnection.connect()\nconnection.request('PUT', '/parse/roles/<ModeratorsRoleObjectId>', json.dumps({\n    \"roles\": {\n        \"__op\": \"AddRelation\",\n        \"objects\": [\n            {\n                \"__type\": \"Pointer\",\n                \"className\": \"_Role\",\n                \"objectId\": \"<AdministratorsRoleObjectId>\"\n            }\n        ]\n    }\n}), {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-Master-Key\": \"${MASTER_KEY}\",\n    \"Content-Type\": \"application/json\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Associating Files with Objects via Curl\nDESCRIPTION: Demonstrates how to associate a file with a Parse object using Curl. Includes the application ID and REST API key as headers. Requires a JSON payload to define the object properties and associated file details.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/files.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n  -H \"X-Parse-Application-Id: <span class=\\\"custom-parse-server-appid\\\">${APPLICATION_ID}</span>\" \\\n  -H \"X-Parse-REST-API-Key: <span class=\\\"custom-parse-server-restapikey\\\">${REST_API_KEY}</span>\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"name\": \"Andrew\",\n        \"picture\": {\n          \"name\": \"...profile.png\",\n          \"url\": \"...profile.png\",\n          \"__type\": \"File\"\n        }\n      }' \\\n  <span class=\\\"custom-parse-server-protocol\\\">https</span>://<span class=\\\"custom-parse-server-url\\\">YOUR.PARSE-SERVER.HERE</span><span class=\\\"custom-parse-server-mount\\\">/parse/</span>classes/PlayerProfile\n```\n\n----------------------------------------\n\nTITLE: Efficient Query with StartsWith in C#\nDESCRIPTION: This snippet shows an efficient way to query for player names using the StartsWith condition in C#. This approach is recommended for better performance as it can use an index.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_52\n\nLANGUAGE: cs\nCODE:\n```\nquery.WhereStartsWith(\"playerName\", \"Michael\")\n```\n\n----------------------------------------\n\nTITLE: Facebook Login Integration\nDESCRIPTION: Demonstrates how to implement Facebook login functionality with Parse user authentication.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/users.md#2025-04-22_snippet_17\n\nLANGUAGE: objective_c\nCODE:\n```\n[PFFacebookUtils logInInBackgroundWithReadPermissions:permissions block:^(PFUser *user, NSError *error) {\n  if (!user) {\n    NSLog(@\"Uh oh. The user cancelled the Facebook login.\");\n  } else if (user.isNew) {\n    NSLog(@\"User signed up and logged in through Facebook!\");\n  } else {\n    NSLog(@\"User logged in through Facebook!\");\n  }\n}];\n```\n\nLANGUAGE: swift\nCODE:\n```\nPFFacebookUtils.logInInBackground(withReadPermissions: permissions) {\n  (user: PFUser?, error: Error?) in\n  if let user = user {\n    if user.isNew {\n      print(\"User signed up and logged in through Facebook!\")\n    } else {\n      print(\"User logged in through Facebook!\")\n    }\n  } else {\n    print(\"Uh oh. The user cancelled the Facebook login.\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a ParseGeoPoint from a ParseObject in Java\nDESCRIPTION: This snippet demonstrates how to retrieve a ParseGeoPoint from a ParseObject.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/geopoints.md#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nplaceObject.getParseGeoPoint(\"location\");\n```\n\n----------------------------------------\n\nTITLE: Querying GameScores with GreaterThan in Java\nDESCRIPTION: This snippet demonstrates how to query for GameScores with a score greater than a previously retrieved highScore in Java.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_31\n\nLANGUAGE: java\nCODE:\n```\nParseQuery<ParseObject> query = ParseQuery.getQuery(\"GameScore\");\n// Previously retrieved highScore for Michael Yabuti\nquery.whereGreaterThan(\"score\", highScore);\nquery.findInBackground(new FindCallback<ParseObject>() {\n  @Override\n  public void done(List<ParseObject> list, ParseException e) {\n    if (e == null) {\n      // Retrieved scores successfully\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering Results in Aggregate Query for Parse Server (Python)\nDESCRIPTION: This snippet shows how to filter results in an aggregate query for Parse Server using Python. It filters objects where the score is greater than 15.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/queries.md#2025-04-22_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\nimport urllib.parse\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nparams = urllib.parse.urlencode({\"match\": json.dumps({\n    \"score\": {\n        \"$gt\": 15\n    }\n})})\nconnection.connect()\nconnection.request('GET', '/parse/aggregate/Player?%s' % params, '', {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-Master-Key\": \"${MASTER_KEY}\"\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Deleting a 'beforeSave' Trigger Webhook using Python\nDESCRIPTION: This snippet demonstrates how to delete a 'beforeSave' trigger webhook for the 'Game' class using Python. It establishes an HTTPS connection and sends a PUT request with the 'Delete' operation.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/hooks.md#2025-04-22_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nconnection.connect()\nconnection.request('PUT', '/parse/hooks/triggers/Game/beforeSave', json.dumps({\n    \"__op\": \"Delete\"\n}), {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-Master-Key\": \"${MASTER_KEY}\",\n    \"Content-Type\": \"application/json\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Ignoring ACLs in Local Query\nDESCRIPTION: Shows how to ignore Role-based ACLs when querying local datastore.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/local-datastore.md#2025-04-22_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nquery.ignoreAcls();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cached Query Results\nDESCRIPTION: Shows how to retrieve previously cached query results from local datastore.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/local-datastore.md#2025-04-22_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nParseQuery<ParseObject> query = ParseQuery.getQuery(\"GameScore\");\nquery.orderByDescending(\"score\");\nquery.fromLocalDatastore();\n\nquery.findInBackground(new FindCallback<ParseObject>() {\n  public void done(List<ParseObject> scores, ParseException e) {\n    // Yay! Cached scores!\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Handling LiveQuery Close Event in JavaScript\nDESCRIPTION: Shows how to listen for the 'close' event, which is emitted when the WebSocket connection to the LiveQuery server is lost.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/live-queries.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nsubscription.on('close', () => {\n  console.log('subscription closed');\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Logo and Background in Parse Signup View\nDESCRIPTION: Example of subclassing PFSignUpViewController to customize the appearance by setting a background color and custom logo. The logo can be any UIView, in this case it's a UIImageView.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/user-interface.md#2025-04-22_snippet_10\n\nLANGUAGE: objective_c\nCODE:\n```\n@interface MySignUpViewController : PFSignUpViewController\n\n@end\n\n@implementation MySignUpViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n\n    self.view.backgroundColor = [UIColor darkGrayColor];\n\n    UIImageView *logoView = [[UIImageView alloc] initWithImage:@\"logo.png\"];\n    self.signUpView.logo = logoView; // logo can be any UIView\n}\n\n@end\n```\n\nLANGUAGE: swift\nCODE:\n```\nclass MySignUpViewController : PFSignUpViewController {\n\n  override func viewDidLoad() {\n    super.viewDidLoad()\n\n    self.view.backgroundColor = .darkGray\n\n\t\tlet logoView = UIImageView(image: UIImage(named: \"logo.png\"))\n\t\tself.signUpView?.logo = logoView // 'logo' can be any UIView\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading Files with Python\nDESCRIPTION: This Python example demonstrates how to upload a text file `hello.txt` to a Parse server using the HTTP client library. The application ID, REST API key, and content type are required headers. The code retrieves and prints a JSON-formatted server response.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/files.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('<span class=\\\"custom-parse-server-url\\\">YOUR.PARSE-SERVER.HERE</span>', 443)\nconnection.connect()\nconnection.request('POST', '<span class=\\\"custom-parse-server-mount\\\">/parse/</span>files/hello.txt', 'Hello, World!', {\n    \"X-Parse-Application-Id\": \"<span class=\\\"custom-parse-server-appid\\\">${APPLICATION_ID}</span>\",\n    \"X-Parse-REST-API-Key\": \"<span class=\\\"custom-parse-server-restapikey\\\">${REST_API_KEY}</span>\",\n    \"Content-Type\": \"text/plain\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Importing Parse SDK in Browser\nDESCRIPTION: Basic import of Parse SDK for browser-based applications using require.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/getting-started.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Parse = require('parse');\n```\n\n----------------------------------------\n\nTITLE: Query Objects Created After a Specific Date with Python\nDESCRIPTION: Shows how to use a Date object in a query filter to retrieve objects created after a specific time using Python's http.client library.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/objects.md#2025-04-22_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\nimport urllib.parse\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nparams = urllib.parse.urlencode({\"where\": json.dumps({\n    \"createdAt\": {\n        \"$gte\": {\n            \"__type\": \"Date\",\n            \"iso\": \"2022-01-01T12:23:45.678Z\"\n        }\n    }\n})})\nconnection.connect()\nconnection.request('GET', '/parse/classes/GameScore?%s' % params, '', {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Parse Platform Error Code Tables and Ranges\nDESCRIPTION: Markdown tables defining various error codes and their meanings, grouped by category. Includes error code ranges for Parse Server (<=4999), reserved range (5000-8999), and custom app errors (9000-9999).\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/errors.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                             | Code | Description                                                   |\n|----------------------------------|------|---------------------------------------------------------------|\n| `UsernameMissing`                 |  200 | The username is missing or empty. |\n| `PasswordMissing`                 |  201 | The password is missing or empty. |\n[...additional table rows omitted for brevity...]\n{: .docs_table}\n```\n\n----------------------------------------\n\nTITLE: Deleting Objects with Parse REST API (Python)\nDESCRIPTION: This Python snippet shows how to delete an object from Parse Cloud using the http.client library. It establishes a connection and sends a DELETE request with the required headers.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/objects.md#2025-04-22_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nconnection.connect()\nconnection.request('DELETE', '/parse/classes/GameScore/Ed1nuqPvcm', '', {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Storing GeoPoint in Parse Object\nDESCRIPTION: Demonstrates how to store a PFGeoPoint in a Parse object as a field.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/geopoints.md#2025-04-22_snippet_1\n\nLANGUAGE: objective_c\nCODE:\n```\nplaceObject[@\"location\"] = point;\n```\n\nLANGUAGE: swift\nCODE:\n```\nplaceObject[\"location\"] = point\n```\n\n----------------------------------------\n\nTITLE: Unpinning Objects by Label\nDESCRIPTION: Demonstrates how to unpin all objects associated with a specific label.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/local-datastore.md#2025-04-22_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nParseObject.unpinAllInBackground(\"MyScores\");\n```\n\n----------------------------------------\n\nTITLE: Initializing Parse LiveQuery in Dart\nDESCRIPTION: This code snippet demonstrates how to initialize Parse LiveQuery by providing the liveQueryUrl parameter during Parse initialization.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dart/queries.md#2025-04-22_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nParse().initialize(\n      keyApplicationId,\n      keyParseServerUrl,\n      clientKey: keyParseClientKey,\n      debug: true,\n      liveQueryUrl: keyLiveQueryUrl,\n      autoSendSessionId: true);\n```\n\n----------------------------------------\n\nTITLE: Removing File Encryption in Parse Server using JavaScript\nDESCRIPTION: This JavaScript example describes removing encryption from files in Parse Server by stopping the use of an encryption key on the file adapter. It requires the `oldKey` to successfully decrypt existing encrypted files.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/file-adapters.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst api = new ParseServer({\n  databaseURI: databaseUri || 'mongodb://localhost:27017/dev',\n  cloud: process.env.PARSE_SERVER_CLOUD || __dirname + '/cloud/main.js',\n  appId: process.env.PARSE_SERVER_APPLICATION_ID || 'myAppId',\n  masterKey: process.env.PARSE_SERVER_MASTER_KEY || '',\n  //No encryptionKey here\n  ...\n});\nawait api.start();\n\n//This can take awhile depending on how many files and how larger they are. It will attempt to rotate the key of all files in your filesSubDirectory\n//It is not recommended to do this on the production server, deploy a development server to complete the process.\nconst {rotated, notRotated} =  await api.filesAdapter.rotateEncryptionKey({oldKey: oldKey});\nconsole.log('Files rotated to unencrypted with noKey: ' + rotated);\nconsole.log('Files that couldn't be rotated to unencrypted with noKey: ' + notRotated);\n```\n\n----------------------------------------\n\nTITLE: Setting Push Notification Expiration Date\nDESCRIPTION: Demonstrates how to set an expiration date for push notifications using ISO 8601 format. This ensures time-sensitive notifications aren't delivered after they become irrelevant.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/push-notifications.md#2025-04-22_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"expiration_time\": \"2015-03-19T22:05:08Z\",\n        \"data\": {\n          \"alert\": \"Season tickets on sale until March 19, 2015\"\n        }\n      }' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/push\n```\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nconnection.connect()\nconnection.request('POST', '/parse/push', json.dumps({\n    \"expiration_time\": \"2015-03-19T22:05:08Z\",\n    \"data\": {\n        \"alert\": \"Season tickets on sale until March 19, 2015\"\n    }\n}), {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\",\n    \"Content-Type\": \"application/json\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Implementing PFQueryTableViewController in Swift\nDESCRIPTION: This Swift code demonstrates subclassing PFQueryTableViewController to display Todo items. It includes initialization, query customization, and cell configuration for Parse objects.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/user-interface.md#2025-04-22_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\nclass SimpleTableViewController: PFQueryTableViewController {\n\n  override init(style: UITableView.Style, className: String?) {\n    super.init(style: style, className: className)\n    parseClassName = \"Todo\"\n    pullToRefreshEnabled = true\n    paginationEnabled = true\n    objectsPerPage = 25\n  }\n\n  required init?(coder aDecoder: NSCoder) {\n    super.init(coder: aDecoder)\n    parseClassName = \"Todo\"\n    pullToRefreshEnabled = true\n    paginationEnabled = true\n    objectsPerPage = 25\n  }\n\n  override func queryForTable() -> PFQuery<PFObject> {\n    let query = PFQuery(className: self.parseClassName!)\n\n    // If no objects are loaded in memory, we look to the cache first to fill the table\n    // and then subsequently do a query against the network.\n    if self.objects!.count == 0 {\n      query.cachePolicy = .cacheThenNetwork\n    }\n\n    query.order(byDescending: \"createdAt\")\n\n    return query\n  }\n\n  func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath, object: PFObject?) -> PFTableViewCell? {\n    let cellIdentifier = \"cell\"\n\n    var cell = tableView.dequeueReusableCell(withIdentifier: cellIdentifier) as? PFTableViewCell\n    if cell == nil {\n      cell = PFTableViewCell(style: .subtitle, reuseIdentifier: cellIdentifier)\n    }\n\n    // Configure the cell to show todo item with a priority at the bottom\n    if let object = object {\n      cell!.textLabel?.text = object[\"text\"] as? String\n      let priority = object[\"priority\"] as? String\n      cell!.detailTextLabel?.text = \"Priority \\(String(describing: priority))\"\n    }\n\n    return cell\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Logging In an Existing User with Parse PHP SDK\nDESCRIPTION: This snippet shows how to authenticate an existing user using their credentials. It calls the static `ParseUser::logIn()` method, passing the username and password. A try-catch block is used to handle potential `ParseException` if the login fails (e.g., incorrect credentials). Upon successful login, the authenticated `ParseUser` object is returned.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/users.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n```php\ntry {\n  $user = ParseUser::logIn(\"myname\", \"mypass\");\n  // Do stuff after successful login.\n} catch (ParseException $error) {\n  // The login failed. Check error to see why.\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Getting Parse Server Version using PHP\nDESCRIPTION: Demonstrates retrieving the version of the connected Parse Server using the `ParseServerInfo::getVersion()` static method. This requires the Parse Server to be version 2.1.4 or higher and the PHP SDK to be version 1.4.0 or higher. The method returns the server version string (e.g., \"2.6.5\").\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/server-info.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// get the current version of the server you are connected to (2.6.5, 2.5.4, etc.)\n$version = ParseServerInfo::getVersion();\n```\n\n----------------------------------------\n\nTITLE: Creating a File\nDESCRIPTION: GraphQL mutation to upload a file and receive file information. Uses GraphQL Upload and requires application authentication.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/files.md#2025-04-22_snippet_1\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"X-Parse-Application-Id\": \"APPLICATION_ID\",\n  \"X-Parse-Master-Key\": \"MASTER_KEY\" // (optional)\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\nmutation createFile($file: Upload!) {\n  createFile(input: { upload: $file }) {\n    fileInfo {\n      name\n      url\n    }\n  }\n}\n```\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"data\": {\n    \"createFile\": {\n      \"fileInfo\": {\n        \"name\": \"6a4d43c3f0512bcb6bf05b6b0e7db47d_file.png\",\n        \"url\": \"http://localhost:1337/graphq/files/APPLICATION_ID/6a4d43c3f0512bcb6bf05b6b0e7db47d_file.png\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Push Notification Status in Parse PHP\nDESCRIPTION: This snippet shows how to retrieve and handle the status of a sent push notification using Parse in PHP, including checking success, failure, and number of pushes sent.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/push-notifications.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$data = array(\"alert\" => \"Hi!\");\n\n$response = ParsePush::send(array(\n  \"channels\" => [\"PHPFans\"],\n  \"data\" => $data\n), true);\n\n// check if a push status id is present\nif(ParsePush::hasStatus($response)) {\n\n    // Retrieve PushStatus object\n    $pushStatus = ParsePush::getStatus($response);\n\n    // get push status string\n    $status = $pushStatus->getPushStatus();\n\n    if($status == \"succeeded\") {\n        // handle a successful push request\n\n    } else if($status == \"running\") {\n        // handle a running push request\n\n    } else {\n        // push request did not succeed\n\n    }\n\n    // get # pushes sent\n    $sent = $pushStatus->getPushesSent();\n\n    // get # pushes failed\n    $failed = $pushStatus->getPushesFailed();\n\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic ParseQuery with whereEqualTo Constraint in Android\nDESCRIPTION: This snippet demonstrates how to create a basic query that retrieves GameScore objects where the playerName equals \"Dan Stemkoski\". It uses findInBackground with a callback to handle the results asynchronously.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/queries.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nParseQuery<ParseObject> query = ParseQuery.getQuery(\"GameScore\");\nquery.whereEqualTo(\"playerName\", \"Dan Stemkoski\");\nquery.findInBackground(new FindCallback<ParseObject>() {\n    public void done(List<ParseObject> scoreList, ParseException e) {\n        if (e == null) {\n            Log.d(\"score\", \"Retrieved \" + scoreList.size() + \" scores\");\n        } else {\n            Log.d(\"score\", \"Error: \" + e.getMessage());\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Saving a Different File from URI with beforeSaveFile\nDESCRIPTION: This example shows how to use the beforeSaveFile trigger to save a file from a URI instead of the original file. It creates a new file with a specified name and URI.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/cloudcode/cloud-code.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n// Saving a different file from uri\nParse.Cloud.beforeSaveFile((request) => {\n  const newFile = new Parse.File('some-file-name.txt', { uri: 'www.somewhere.com/file.txt' });\n  return newFile;\n});\n```\n\n----------------------------------------\n\nTITLE: Optimized User Query with ContainedIn in PHP\nDESCRIPTION: This snippet shows how to perform an optimized query for users with specific states using the ContainedIn condition in PHP.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n$query->containedIn(\"state\", [\"SignedUp\", \"Verified\"]);\n```\n\n----------------------------------------\n\nTITLE: Creating ParseFile from Data in PHP\nDESCRIPTION: Demonstrates creating a `ParseFile` instance using the static `createFromData` method. It takes the file content as a string and a desired filename (including extension) as arguments. This prepares the file object in memory before saving.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/files.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$contents = \"Hello World.\";\n$file = ParseFile::createFromData($contents, \"myfile.txt\");\n```\n\n----------------------------------------\n\nTITLE: Including Multiple Related Objects in PFQuery for iOS\nDESCRIPTION: This snippet shows how to include multiple related objects in a single query using dot notation. It demonstrates including both a post and its author for a comment query in Objective-C and Swift.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/queries.md#2025-04-22_snippet_51\n\nLANGUAGE: objective-c\nCODE:\n```\n[query includeKey:@\"post.author\"];\n```\n\nLANGUAGE: swift\nCODE:\n```\nquery.includeKey(\"post.author\")\n```\n\n----------------------------------------\n\nTITLE: Excluding Set Membership with notContainedIn and NSPredicate in Objective-C\nDESCRIPTION: Illustrates querying for objects whose field does not match any value in the provided array using whereKey:notContainedIn: and an NSPredicate negation. Needs Parse SDK and list of names to exclude. Returns objects not matching those values.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/queries.md#2025-04-22_snippet_24\n\nLANGUAGE: objective_c\nCODE:\n```\n// Finds scores from anyone who is neither Jonathan, Dario, nor Shawn\n// Using PFQuery\nNSArray *names = @[@\"Jonathan Walsh\", @\"Dario Wunsch\", @\"Shawn Simon\"];\n[query whereKey:@\"playerName\" notContainedIn:names];\n\n// Using NSPredicate\nNSArray *names = @[@\"Jonathan Walsh\", @\"Dario Wunsch\", @\"Shawn Simon\"];\nNSPredicate *pred = [NSPredicate predicateWithFormat: @\"NOT (playerName IN %@)\", names];\nPFQuery *query = [PFQuery queryWithClassName:@\"GameScore\" predicate:pred];\n```\n\n----------------------------------------\n\nTITLE: Example JSON Structure for a Cloud Code Function\nDESCRIPTION: Illustrates the JSON representation of a cloud code function, containing only the `functionName`. This simpler structure differentiates it from function webhooks, which also include a URL.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/hooks.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"functionName\": \"foo\"}\n```\n\n----------------------------------------\n\nTITLE: Fetching a Specific Cloud Function by Name (Bash/Python)\nDESCRIPTION: Shows how to make a GET request to the `/hooks/functions/{functionName}` endpoint using `curl` (Bash) and Python's `http.client`. Requires authentication headers (`X-Parse-Application-Id` and `X-Parse-Master-Key`). The response will contain a list of functions matching the specified name.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/hooks.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\\n  -H \"X-Parse-Application-Id: <span class=\\\"custom-parse-server-appid\\\">${APPLICATION_ID}</span>\" \\\n  -H \"X-Parse-Master-Key: <span class=\\\"custom-parse-server-masterkey\\\">${MASTER_KEY}</span>\" \\\n  -H \"Content-Type: application/json\" \\\n  <span class=\\\"custom-parse-server-protocol\\\">https</span>://<span class=\\\"custom-parse-server-url\\\">YOUR.PARSE-SERVER.HERE</span><span class=\\\"custom-parse-server-mount\\\">/parse/</span>hooks/functions/sendMessage\n```\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('<span class=\\\"custom-parse-server-url\\\">YOUR.PARSE-SERVER.HERE</span>', 443)\nconnection.connect()\nconnection.request('GET', '<span class=\\\"custom-parse-server-mount\\\">/parse/</span>hooks/functions/sendMessage', '', {\n    \"X-Parse-Application-Id\": \"<span class=\\\"custom-parse-server-appid\\\">${APPLICATION_ID}</span>\",\n    \"X-Parse-Master-Key\": \"<span class=\\\"custom-parse-server-masterkey\\\">${MASTER_KEY}</span>\",\n    \"Content-Type\": \"application/json\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Manually Syncing Labeled Local Changes with saveInBackground - Parse SDK Objective-C\nDESCRIPTION: This Objective-C snippet fetches \\\"GameScore\\\" objects that were pinned under the label \\\"MyChanges\\\", iterates through them, calls saveInBackground for each to synchronize with the Parse server, and then unpins the object after successful sync. This requires the Parse SDK for Objective-C. Inputs are locally pinned objects with a specific label, and output is a set of unpinned objects after successful network persistence. Useful for managing manual synchronization workflows.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/local-datastore.md#2025-04-22_snippet_9\n\nLANGUAGE: objective_c\nCODE:\n```\nPFQuery *query = [PFQuery queryWithClassName:@\"GameScore\"];\n[query fromPinWithName:@\"MyChanges\"];\n[[query findObjectsInBackground] continueWithBlock:^id(BFTask *task) {\n  NSArray *scores = task.result;\n  for (PFObject *score in scores) {\n    [[score saveInBackground] continueWithSuccessBlock:^id(BFTask *task) {\n      return [score unpinInBackground];\n    }];\n  }\n  return task;\n}];\n```\n\n----------------------------------------\n\nTITLE: Performing Aggregate Query with Group in Parse Server (Bash)\nDESCRIPTION: This snippet demonstrates how to perform an aggregate query with grouping in Parse Server using a curl command. It groups objects by objectId and calculates the sum of scores.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/queries.md#2025-04-22_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-Master-Key: ${MASTER_KEY}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -G \\\n  --data-urlencode 'group={\"objectId\":null,\"total\":{\"$sum\":\"$score\"}}' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/aggregate/Player\n```\n\n----------------------------------------\n\nTITLE: Encoding Pointer References to Other Objects\nDESCRIPTION: Shows the format for encoding Pointer references to other Parse objects using the __type field with className and objectId values.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/objects.md#2025-04-22_snippet_34\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"__type\": \"Pointer\",\n  \"className\": \"GameScore\",\n  \"objectId\": \"Ed1nuqPvc\"\n}\n```\n\n----------------------------------------\n\nTITLE: Subclassing ParseObject in PHP\nDESCRIPTION: Examples of creating custom Parse object subclasses with additional methods and properties.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/objects.md#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nclass GameScore extends ParseObject\n{\n  public static $parseClassName = \"GameScore\";\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n// Do this once, at the start of your app, before ParseClient::initialize(...);\nGameScore::registerSubclass();\n\n// Create a new instance of that class.\n$gameScore = new GameScore();\n```\n\nLANGUAGE: php\nCODE:\n```\n// A complex subclass of ParseObject\nclass Monster extends ParseObject\n{\n  public static $parseClassName = \"Monster\";\n\n  public function hasSuperHumanStrength() {\n    return $this->get(\"strength\") > 18;\n  }\n\n  public static function spawn($strength) {\n    $monster = new Monster();\n    $monster->set(\"strength\", $strength);\n    return $monster;\n  }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n$monster = Monster::spawn(200);\necho monster->strength();  // Displays 200.\necho monster->hasSuperHumanStrength();  // Displays true.\n```\n\nLANGUAGE: php\nCODE:\n```\nclass GameScore extends ParseObject\n{\n  public static $parseClassName = \"GameScore\";\n\n  public function __construct($className = null, $objectId = null, $isPointer = false, $another_param) {\n    parent::__construct(\"GameScore\", $objectId, $isPointer);\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Associating ParseFile with ParseObject in Java\nDESCRIPTION: Illustrates how to attach a ParseFile to a ParseObject, in this case adding a resume file to a job application object.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/files.md#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nParseObject jobApplication = new ParseObject(\"JobApplication\");\njobApplication.put(\"applicantName\", \"Joe Smith\");\njobApplication.put(\"applicantResumeFile\", file);\njobApplication.saveInBackground();\n```\n\n----------------------------------------\n\nTITLE: Querying Parse Data Synchronously with PFQuery and NSPredicate in Swift\nDESCRIPTION: This Swift snippet demonstrates synchronous Parse object retrieval using PFQuery, both with direct constraints and with NSPredicate. Intended for calls in background threads only to avoid UI lockups. The code requires Parse Swift SDK. Inputs: none directly but looks for 'playerName' key. Outputs: Array of PFObject. Not thread-safe for main thread.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/queries.md#2025-04-22_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n// Only use this code if you are already running it in a background\n// thread, or for testing purposes!\n\n// Using PFQuery\nlet query = PFQuery(className: \"GameScore\")\nquery.whereKey(\"playerName\", equalTo: \"Dan Stemkoski\")\nlet scoreArray = query.findObjects()\n\n// Using NSPredicate\nlet predicate = NSPredicate(format:\"playerName = 'Dan Stemkosk'\")\nlet query = PFQuery(className: \"GameScore\", predicate: predicate)\nlet scoreArray = query.findObjects()\n```\n\n----------------------------------------\n\nTITLE: Unlinking File from Object\nDESCRIPTION: GraphQL mutation to unlink a file from a GameScore object by setting the screenshot field to null. The file remains in storage but is removed from the object.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/files.md#2025-04-22_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nmutation updateGameScore($id: ID!) {\n  updateGameScore(input: { id: $id, fields: { screenshot: null } }) {\n    gameScore {\n      screenshot {\n        name\n        url\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: js\nCODE:\n```\n{\n  \"data\": {\n    \"updateGameScore\": {\n      \"gameScore\": {\n        \"screenshot\": null\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Parse.File Contents in Cloud Code\nDESCRIPTION: This Cloud Code snippet shows how to retrieve the contents of a Parse.File using HTTP requests. It's useful for processing file data on the server side.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/files.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nParse.Cloud.httpRequest({ url: profilePhoto.url() }).then(function(response) {\n  // The file contents are in response.buffer.\n});\n```\n\n----------------------------------------\n\nTITLE: Unpinning Objects - Java\nDESCRIPTION: Shows how to remove objects from local datastore.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/objects.md#2025-04-22_snippet_10\n\nLANGUAGE: java\nCODE:\n```\ngameScore.unpinInBackground();\n```\n\n----------------------------------------\n\nTITLE: Local Datastore Storage - Java\nDESCRIPTION: Shows how to store a ParseObject in the local datastore.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/objects.md#2025-04-22_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nParseObject gameScore = new ParseObject(\"GameScore\");\ngameScore.put(\"score\", 1337);\ngameScore.put(\"playerName\", \"Sean Plott\");\ngameScore.put(\"cheatMode\", false);\ngameScore.pinInBackground();\n```\n\n----------------------------------------\n\nTITLE: Fetching Related Objects in Parse SDK (Objective-C and Swift)\nDESCRIPTION: Shows how to fetch related PFObjects that were not initially loaded. This is necessary to access the values of linked objects.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/objects.md#2025-04-22_snippet_11\n\nLANGUAGE: objective-c\nCODE:\n```\nPFObject *post = myComment[@\"post\"];\n[post fetchInBackgroundWithBlock:^(PFObject * _Nullable object, NSError * _Nullable error) {\n    NSString *title = post[@\"title\"];\n    if (title) {  // do something with title }\n}];\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet post = myComment[\"post\"] as! PFObject\npost.fetchIfNeededInBackground { (object, error) in\n    if let title = post[\"title\"] as? String {\n        // do something with your title variable\n    } else if let errorString = error?.localizedDescription {\n        print(errorString)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Session Token in Parse Arduino SDK\nDESCRIPTION: Sets a session token in the Parse Arduino SDK to authenticate requests on behalf of a user. This token must be previously created through a companion app or the REST API and passed to the Arduino device.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/arduino/users.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nParse.setSessionToken(\"r:olqZkbv8fefVFNjWegyIXIggd\");\n```\n\n----------------------------------------\n\nTITLE: Fetching GitHub Files using JavaScript\nDESCRIPTION: Fetches and displays a list of files from a GitHub repository, excluding certain adapter files. This is used for loading authentication adapters from a specific folder.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/third-party-auth.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nasync function fetchGitHubFiles() {\n    const repoOwner = 'parse-community';\n    const repoName = 'parse-server';\n    const branch = 'release';\n    const folderPath = 'src/Adapters/Auth';\n    const apiUrl = `https://api.github.com/repos/${repoOwner}/${repoName}/contents/${folderPath}?ref=${branch}`;\n\n    // List of non-adapter files to exclude\n    const excludeFiles = [\n      'AuthAdapter.js',\n      'httpsRequest.js',\n      'index.js',\n    ];\n\n    try {\n      const response = await fetch(apiUrl);\n      const files = await response.json();\n\n      if (Array.isArray(files)) {\n        const fileListElement = document.getElementById('file-list');\n        fileListElement.innerHTML = '';\n\n        files\n          .filter(file => !excludeFiles.includes(file.name))\n          .sort((a, b) => a.name.toLowerCase().localeCompare(b.name.toLowerCase()))\n          .forEach(file => {\n            const fileLink = document.createElement('a');\n            fileLink.href = file.html_url;\n            fileLink.textContent = file.name;\n            const listItem = document.createElement('li');\n            listItem.appendChild(fileLink);\n            fileListElement.appendChild(listItem);\n          });\n      } else {\n        console.error('Error: ', 'No adapters found.');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  }\n\n  fetchGitHubFiles();\n```\n\n----------------------------------------\n\nTITLE: Querying Movies with Review Count in Objective-C\nDESCRIPTION: An optimized query for fetching movies that already contain their review counts as a field in Objective-C. This avoids expensive count operations on the Review class.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_91\n\nLANGUAGE: objective-c\nCODE:\n```\nPFQuery *query = [PFQuery queryWithClassName:@\"Movie\"];\n[query findObjectsInBackgroundWithBlock:^(NSArray *objects, NSError *error) {\n  if (!error) {\n    // Results include the reviews count field\n  }\n}];\n```\n\n----------------------------------------\n\nTITLE: Setting Role-Based Permissions Using Role Name in Java\nDESCRIPTION: Applies write permissions to a wall post for moderators by specifying the role name directly, avoiding the need to query for the role object first.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/roles.md#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nParseObject wallPost = new ParseObject(\"WallPost\");\nParseACL postACL = new ParseACL();\npostACL.setRoleWriteAccess(\"Moderators\", true);\nwallPost.setACL(postACL);\nwallPost.save();\n```\n\n----------------------------------------\n\nTITLE: Parent Relation Complex Query in Parse GraphQL\nDESCRIPTION: GraphQL query to find countries with cities having >20000 people and streets matching 'rue' regex containing specific houses.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/queries.md#2025-04-22_snippet_18\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  countries(\n    where: {\n      cities: {\n        have: {\n          peoplesNumber: { greaterThan: 20000 }\n          streets: {\n            have: {\n              name: { matchesRegex: \"rue\", options: \"i\" }\n              houses: { have: { name: { equalTo: \"Parse Members\" } } }\n            }\n          }\n        }\n      }\n    }\n  ) {\n    edges {\n      node {\n        name\n        cities {\n          edges {\n            node {\n              name\n              peoplesNumber\n              streets {\n                edges {\n                  node {\n                    name\n                    houses {\n                      edges {\n                        node {\n                          name\n                        }\n                        ... too many brackets here\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Push Notification Channels in bash\nDESCRIPTION: Updates an installation to subscribe to a specific push notification channel named 'Giants'. This example demonstrates channel-based push notification subscription using the REST API.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/push-notifications.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"channels\": [\n          \"Giants\"\n        ]\n      }' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/installations/mrmBZvsErB\n```\n\n----------------------------------------\n\nTITLE: Webhook Request JSON Example\nDESCRIPTION: Example JSON data structure sent to a Parse webhook for a beforeDelete trigger, including user details and object information.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/cloudcode/cloud-code-advanced.md#2025-04-22_snippet_7\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"master\": false,\n  \"user\": {\n    \"createdAt\": \"2015-03-24T20:19:00.542Z\",\n    \"objectId\": \"lValKpphWN\",\n    \"sessionToken\": \"orU3ClA7sqMIN8g4KtmLe7eDM\",\n    \"updatedAt\": \"2015-03-24T20:19:00.542Z\",\n    \"username\": \"Matt\"\n  },\n  \"installationId\": \"b3ab24c6-2282-69fa-eeea-c1b36ea497c2\",\n  \"triggerName\": \"beforeDelete\",\n  \"object\": {\n    \"objectId\": \"jsUd72Sd2l\",\n    \"className\": \"Post\",\n    \"createdAt\": \"2015-03-25T00:00:57.055Z\",\n    \"updatedAt\": \"2015-03-25T00:00:57.055Z\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ParseLoginActivity using ParseLoginBuilder\nDESCRIPTION: Java code example demonstrating how to configure Parse Login UI programmatically using ParseLoginBuilder class.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/user-interface.md#2025-04-22_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nParseLoginBuilder builder = new ParseLoginBuilder(ProfileActivity.this);\nIntent parseLoginIntent = builder.setAppLogo(R.drawable.my_app_logo)\n    .setParseLoginEnabled(true)\n    .setParseLoginButtonText(\"Go\")\n    .setParseSignupButtonText(\"Register\")\n    .setParseLoginHelpText(\"Forgot password?\")\n    .setParseLoginInvalidCredentialsToastText(\"You email and/or password is not correct\")\n    .setParseLoginEmailAsUsername(true)\n    .setParseSignupSubmitButtonText(\"Submit registration\")\n    .setFacebookLoginEnabled(true)\n    .setFacebookLoginButtonText(\"Facebook\")\n    .setFacebookLoginPermissions(Arrays.asList(\"public_profile\", \"user_friends\"))\n    .setTwitterLoginEnabled(true)\n    .setTwitterLoginButtontext(\"Twitter\")\n    .build();\nstartActivityForResult(parseLoginIntent, 0);\n```\n\n----------------------------------------\n\nTITLE: Parent Relation Query Headers in Parse GraphQL\nDESCRIPTION: Authentication headers required for making Parse GraphQL API requests.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/queries.md#2025-04-22_snippet_17\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"X-Parse-Application-Id\": \"APPLICATION_ID\",\n  \"X-Parse-Master-Key\": \"MASTER_KEY\" // (optional)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring File Encryption for GridStoreAdapter in JavaScript\nDESCRIPTION: This JavaScript snippet shows how to configure Parse Server's GridStoreAdapter for file encryption. It uses the AES256-GCM encryption method, relying on Parse Server 4.4.0+. An encryption key must be specified via environment variable, command line, or directly in the server initialization.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/file-adapters.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst api = new ParseServer({\n  databaseURI: databaseUri || 'mongodb://localhost:27017/dev',\n  cloud: process.env.PARSE_SERVER_CLOUD || __dirname + '/cloud/main.js',\n  appId: process.env.PARSE_SERVER_APPLICATION_ID || 'myAppId',\n  masterKey: process.env.PARSE_SERVER_MASTER_KEY || '',\n  encryptionKey: process.env.PARSE_SERVER_ENCRYPTION_KEY, //Add your file key here. Keep it secret\n  ...\n});\nawait api.start();\n```\n\n----------------------------------------\n\nTITLE: Skipping Query Results for Pagination in Parse using Swift\nDESCRIPTION: Demonstrates skipping a specified number of results from a Parse query in Swift using the skip property. Useful for pagination by advancing the dataset window. Requires ParseSwift SDK.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/queries.md#2025-04-22_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\nquery.skip = 10\n```\n\n----------------------------------------\n\nTITLE: Saving Images with PFFileObject\nDESCRIPTION: Demonstrates converting UIImage to NSData and saving it as a PFFileObject.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/files.md#2025-04-22_snippet_4\n\nLANGUAGE: objective-c\nCODE:\n```\nNSData *imageData = UIImagePNGRepresentation(image);\nPFFileObject *imageFile = [PFFileObject fileObjectWithName:@\"image.png\" data:imageData];\n\nPFObject *userPhoto = [PFObject objectWithClassName:@\"UserPhoto\"];\nuserPhoto[@\"imageName\"] = @\"My trip to Hawaii!\";\nuserPhoto[@\"imageFile\"] = imageFile;\n[userPhoto saveInBackground];\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet imageData = UIImagePNGRepresentation(image)\nlet imageFile = PFFileObject(name:\"image.png\", data:imageData)\n\nvar userPhoto = PFObject(className:\"UserPhoto\")\nuserPhoto[\"imageName\"] = \"My trip to Hawaii!\"\nuserPhoto[\"imageFile\"] = imageFile\nuserPhoto.saveInBackground()\n```\n\n----------------------------------------\n\nTITLE: Enabling Encryption on a Parse Server with Existing Unencrypted Files\nDESCRIPTION: Code snippet to rotate encryption keys for existing unencrypted files in Parse Server. This process should be performed on a development server, and it returns information about successfully rotated files and any files that couldn't be rotated.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/file-adapters.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n//You probably want to back up your unencrypted files before doing this.\n//This can take awhile depending on how many files and how large they are. It will attempt to rotate the key of all files in your filesSubDirectory\nconst {rotated, notRotated} =  await api.filesAdapter.rotateEncryptionKey();\nconsole.log('Files rotated to newKey: ' + rotated);\nconsole.log('Files that couldn\\'t be rotated to newKey: ' + notRotated);\n```\n\n----------------------------------------\n\nTITLE: Querying Movies with Review Count in PHP\nDESCRIPTION: An optimized query for fetching movies that already contain their review counts as a field in PHP. This avoids expensive count operations on the Review class.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_95\n\nLANGUAGE: php\nCODE:\n```\n$query = new ParseQuery(\"Movie\");\n\n$results = $query.find();\n// Results include the reviews count field\n```\n\n----------------------------------------\n\nTITLE: Creating Follow Relationship - Parse JavaScript\nDESCRIPTION: The JavaScript snippet creates a follow relationship using the Parse JavaScript SDK, inserting a new record into the Follow table.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/relations.md#2025-04-22_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nvar otherUser = ...\n\n// create an entry in the Follow table\nvar follow = new Parse.Object(\"Follow\");\nfollow.set(\"from\", Parse.User.current());\nfollow.set(\"to\", otherUser);\nfollow.set(\"date\", Date());\nfollow.save();\n```\n\n----------------------------------------\n\nTITLE: Logging In a Parse User with Default POST Method\nDESCRIPTION: This snippet shows how to log in a user using the Parse.User.logIn method with username and password. It uses the default POST HTTP method for authentication.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/users.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst user = await Parse.User.logIn(\"myname\", \"mypass\");\n// Do stuff after successful login.\n```\n\n----------------------------------------\n\nTITLE: Deleting a Single Field from an Object with Parse REST API (Python)\nDESCRIPTION: This Python snippet shows how to delete a single field from an object using the Delete operation. It sends a PUT request with a JSON payload specifying the field to be deleted.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/objects.md#2025-04-22_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nconnection.connect()\nconnection.request('PUT', '/parse/classes/GameScore/Ed1nuqPvcm', json.dumps({\n    \"opponents\": {\n        \"__op\": \"Delete\"\n    }\n}), {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\",\n    \"Content-Type\": \"application/json\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Parse Query with Sorting and Ordering\nDESCRIPTION: Demonstrates sorting query results by multiple fields in different orders.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/queries.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar query = from gameScore in ParseObject.GetQuery(\"GameScore\")\n            orderby gameScore.Get<int>(\"score\") descending, gameScore.Get<string>(\"playerName\")\n            select gameScore;\n\n// or using LINQ\n// Sorts the results in ascending order by score and descending order by playerName\nvar query = ParseObject.GetQuery(\"GameScore\")\n    .OrderBy(\"score\")\n    .ThenByDescending(\"playerName\");\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response: List of All Cloud Functions\nDESCRIPTION: Provides an example JSON response structure returned by the `/hooks/functions` endpoint. The response contains a `results` key, which holds an array of function objects. Each object represents either a function webhook (with `functionName` and `url`) or a cloud code function (with only `functionName`).\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/hooks.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"results\": [\n    { \"functionName\": \"sendMessage\", \"url\": \"https://api.example.com/sendMessage\" },\n    { \"functionName\": \"sendMessage\" },\n    { \"functionName\": \"foo\", \"url\": \"https://api.example.com/foo\" },\n    { \"functionName\": \"bar\" }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Indexes in Parse Server JavaScript SDK\nDESCRIPTION: Demonstrates how to add, delete, and retrieve indexes for efficient query execution. Indexes must be created on existing fields, and the masterKey is required for these operations.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/schema.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// To add an index, the field must exist before you create an index\nmySchema.addString('stringField');\nconst index = {\n  stringField: 1\n};\nmySchema.addIndex('stringFieldIndex', index);\nmySchema.save().then((result) => {\n  // returns schema including index stringFieldIndex and field stringField\n});\n\n// Delete an index\ntestSchema.deleteIndex('indexName');\nmySchema.save().then((result) => {\n  // returns schema without indexName index\n});\n\n// If indexes exist, you can retrieve them\nmySchema.get().then((result) => {\n  // result.indexes\n});\n```\n\n----------------------------------------\n\nTITLE: Update Mutation Response Example for GameScore - JSONC\nDESCRIPTION: Provides the JSON response structure after a successful updateGameScore mutation. The response confirms the operation and presents the latest field values to assist front-ends in maintaining up-to-date displays or caches.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/objects.md#2025-04-22_snippet_4\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"data\": {\n    \"updateGameScore\": {\n      \"gameScore\": {\n        \"id\": \"R2FtZVNjb3JlOmM3TVpDZEhQY2w=\",\n        \"playerName\": \"Charles Francois\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying LiveQuery Event Objects with afterLiveQueryEvent - JavaScript\nDESCRIPTION: Illustrates the afterLiveQueryEvent trigger for mutating the fields of both current and original objects before events reach LiveQuery clients. Requires Parse Server 4.4.0+ and the Parse JavaScript SDK. The function accepts a request object, modifies the 'name' attribute of both the event's new and old versions, and implicitly allows the event to proceed. Useful for data redaction or transformation in subscription pushes.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/cloudcode/cloud-code.md#2025-04-22_snippet_41\n\nLANGUAGE: JavaScript\nCODE:\n```\n```javascript\n// Changing values on object and original\nParse.Cloud.afterLiveQueryEvent('MyObject', request => {\n  const object = request.object;\n  object.set('name', '***');\n\n  const original = request.original;\n  original.set('name', 'yolo');\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Storing ParseGeoPoint in ParseObject\nDESCRIPTION: Shows how to store a ParseGeoPoint object as a field in a ParseObject.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/geopoints.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\nplaceObject[\"location\"] = point;\n```\n\n----------------------------------------\n\nTITLE: Saving ParseFile to Cloud in C#\nDESCRIPTION: Shows how to save a ParseFile object to Parse cloud storage using async/await pattern.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/files.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nawait file.SaveAsync();\n```\n\n----------------------------------------\n\nTITLE: Storing Polygon in Parse Object\nDESCRIPTION: Shows how to store a PFPolygon in a Parse object as a field.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/geopoints.md#2025-04-22_snippet_4\n\nLANGUAGE: objective_c\nCODE:\n```\nplaceObject[@\"bounds\"] = polygon;\n```\n\nLANGUAGE: swift\nCODE:\n```\nplaceObject[\"bounds\"] = polygon\n```\n\n----------------------------------------\n\nTITLE: Fetching Comment Objects with Relational Includes in Python\nDESCRIPTION: Python code for retrieving Comment objects with related Post and Author data. The query orders results by creation date (descending), limits to 10 results, and includes the related post.author relationship.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/queries.md#2025-04-22_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\nimport urllib.parse\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nparams = urllib.parse.urlencode({\"order\": \"-createdAt\", \"limit\": 10, \"include\": \"post.author\"})\nconnection.connect()\nconnection.request('GET', '/parse/classes/Comment?%s' % params, '', {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Querying Installations Using Parse REST API\nDESCRIPTION: REST API example for querying Parse installations with location and device type constraints. Shows how to use the Master Key for authentication and query filtering.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/push-notifications.md#2025-04-22_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n# Query over installations\ncurl -X GET \\\n-H \"X-Parse-Application-Id: {YOUR_APPLICATION_ID}\" \\\n-H \"X-Parse-Master-Key: {YOUR_MASTER_KEY}\" \\\n-G \\\n--data-urlencode 'limit=1000' \\\n--data-urlencode 'where={ \"city\": \"San Francisco\", \"deviceType\": { \"$in\": [ \"ios\", \"android\", \"winphone\", \"embedded\" ] } }' \\\nhttps://YOUR.PARSE-SERVER.HERE/parse/installations\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Push Channels in C#\nDESCRIPTION: Demonstrates three different methods to subscribe a device to push notification channels using ParseInstallation. Shows direct channel assignment, unique channel addition, and simplified subscription using ParsePush.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/push-notifications.md#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// When users indicate they are Giants fans, we subscribe them to that channel.\nvar installation = ParseInstallation.CurrentInstallation;\ninstallation.Channels = new List<string> { \"Giants\" };\nawait installation.SaveAsync();\n```\n\nLANGUAGE: C#\nCODE:\n```\nvar installation = ParseInstallation.CurrentInstallation;\ninstallation.AddUniqueToList(\"channels\", \"Giants\");\nawait installation.SaveAsync();\n```\n\nLANGUAGE: C#\nCODE:\n```\nawait ParsePush.SubscribeAsync(\"Giants\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Mutation Operations\nDESCRIPTION: JSON configuration example showing how to enable/disable create, update, and destroy operations for different classes.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/customisation.md#2025-04-22_snippet_9\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"classConfigs\": [\n    {\n      \"className\": \"_User\",\n      \"mutation\": {\n        \"create\": true,\n        \"update\": true,\n        \"destroy\": true\n      }\n    },\n    {\n      \"className\": \"Review\",\n      \"mutation\": {\n        \"create\": true,\n        \"update\": false,\n        \"destroy\": true\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Specific Classes in GraphQL Schema\nDESCRIPTION: JavaScript configuration example showing how to hide sensitive classes from the GraphQL schema.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/customisation.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"enabledForClasses\": undefined,\n  \"disabledForClasses\": [ \"UserSensitiveData\", \"ProductOrder\", \"Invoice\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Push Notification Expiration Interval\nDESCRIPTION: Shows how to set an expiration interval relative to the push time, allowing notifications to expire after a specified duration from when they're scheduled to be sent.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/push-notifications.md#2025-04-22_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"push_time\": \"2015-03-13T22:05:08Z\",\n        \"expiration_interval\": 518400,\n        \"data\": {\n          \"alert\": \"Season tickets on sale until March 19, 2015\"\n        }\n      }' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/push\n```\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nconnection.connect()\nconnection.request('POST', '/parse/push', json.dumps({\n    \"push_time\": \"2015-03-13T22:05:08Z\",\n    \"expiration_interval\": 518400,\n    \"data\": {\n        \"alert\": \"Season tickets on sale until March 19, 2015\"\n    }\n}), {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\",\n    \"Content-Type\": \"application/json\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Initializing PFLogInViewController\nDESCRIPTION: Shows how to create and present a login view controller modally in both Objective-C and Swift\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/user-interface.md#2025-04-22_snippet_0\n\nLANGUAGE: objective-c\nCODE:\n```\nPFLogInViewController *logInController = [[PFLogInViewController alloc] init];\nlogInController.delegate = self;\n[self presentViewController:logInController animated:YES completion:nil];\n```\n\nLANGUAGE: swift\nCODE:\n```\nvar logInController = PFLogInViewController()\nlogInController.delegate = self\nself.present(logInController, animated:true, completion: nil)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Background Message Handler for Parse Push in Dart\nDESCRIPTION: This code sets up a handler for processing push notifications when the app is in the background. It uses Firebase Cloud Messaging's onBackgroundMessage method.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/flutter/push-notifications.md#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFirebaseMessaging.onBackgroundMessage(onBackgroundMessage);\n```\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> onBackgroundMessage(RemoteMessage message) async => ParsePush.instance.onMessage(message);\n```\n\n----------------------------------------\n\nTITLE: Unlinking Facebook Account from ParseUser in C#\nDESCRIPTION: Shows how to unlink a Facebook account from a ParseUser. This operation removes the association between the ParseUser and the Facebook account.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/users.md#2025-04-22_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\nTask unlinkTask = ParseFacebookUtils.UnlinkAsync(user);\n```\n\n----------------------------------------\n\nTITLE: Counting Objects with Query Constraints in Bash\nDESCRIPTION: Bash curl command to count the number of GameScore objects for a specific player without returning the results. This uses the count parameter with limit=0 to only get the count.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/queries.md#2025-04-22_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -G \\\n  --data-urlencode 'where={\"playerName\":\"Jonathan Walsh\"}' \\\n  --data-urlencode 'count=1' \\\n  --data-urlencode 'limit=0' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/classes/GameScore\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Parse Object - Python Example - python\nDESCRIPTION: This Python script establishes an HTTPS connection to the Parse server and sends a GET request to retrieve an object by objectId. Headers must be set for application authentication; the result is JSON-parsed and printed with all fields. Ensure application ID, REST API key, and endpoint values are correct for the target server.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/objects.md#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\\nimport json\\n\\n\\nconnection = http.client.HTTPSConnection('<span class=\\\"custom-parse-server-url\\\">YOUR.PARSE-SERVER.HERE</span>', 443)\\nconnection.connect()\\nconnection.request('GET', '<span class=\\\"custom-parse-server-mount\\\">/parse/</span>classes/GameScore/Ed1nuqPvcm', '', {\\n    \"X-Parse-Application-Id\": \"<span class=\\\"custom-parse-server-appid\\\">${APPLICATION_ID}</span>\",\\n    \"X-Parse-REST-API-Key\": \"<span class=\\\"custom-parse-server-restapikey\\\">${REST_API_KEY}</span>\"\\n})\\nresult = json.loads(connection.getresponse().read())\\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Removing a Schema in Parse Server\nDESCRIPTION: This code shows how to completely remove a schema class (City) from a Parse Server application. The operation can only succeed if the class has no objects (is empty). Requires application ID and master key authentication.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/schemas.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X DELETE\\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-Master-Key: ${MASTER_KEY}\" \\\n  -H \"Content-Type: application/json\" \\\n  https://YOUR.PARSE-SERVER.HERE/parse/schemas/City\n```\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nconnection.connect()\nconnection.request('PUT', '/parse/schemas/City', \"\", {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-Master-Key\": \"${MASTER_KEY}\",\n    \"Content-Type\": \"application/json\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Querying Parse Relations\nDESCRIPTION: Demonstrates how to query objects that are members of a relation field in a parent object.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dart/queries.md#2025-04-22_snippet_22\n\nLANGUAGE: dart\nCODE:\n```\nQueryBuilder<ParseObject> query =\n    QueryBuilder<ParseObject>(ParseObject('Fruits'))\n      ..whereRelatedTo('fruits', 'DietPlan', DietPlan.objectId);\n```\n\n----------------------------------------\n\nTITLE: Managing Facebook Permissions with Parse SDK\nDESCRIPTION: This snippet shows how to request different types of Facebook permissions using Parse SDK. It demonstrates logging in with read permissions first, then requesting additional publish permissions through linking.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/users.md#2025-04-22_snippet_19\n\nLANGUAGE: objective_c\nCODE:\n```\n// Log In with Read Permissions\n[PFFacebookUtils logInInBackgroundWithReadPermissions:permissions block:^(PFUser *user, NSError *error) {\n  if (!user) {\n    NSLog(@\"Uh oh. The user cancelled the Facebook login.\");\n  } else if (user.isNew) {\n    NSLog(@\"User signed up and logged in through Facebook!\");\n  } else {\n    NSLog(@\"User logged in through Facebook!\");\n  }\n}];\n\n// Request new Publish Permissions\n[PFFacebookUtils linkUserInBackground:[PFUser currentUser]\n                withPublishPermissions:@[ @\"publish_actions\"]\n                                block:^(BOOL succeeded, NSError *error) {\n  if (succeeded) {\n    NSLog(@\"User now has read and publish permissions!\");\n  }\n}];\n```\n\nLANGUAGE: swift\nCODE:\n```\n// Log In with Read Permissions\nPFFacebookUtils.logInInBackgroundWithReadPermissions(permissions, {\n  (user: PFUser?, error: NSError?) -> Void in\n  if let user = user {\n    if user.isNew {\n      print(\"User signed up and logged in through Facebook!\")\n    } else {\n      print(\"User logged in through Facebook!\")\n    }\n  } else {\n    print(\"Uh oh. The user cancelled the Facebook login.\")\n  }\n})\n\n// Request new Publish Permissions\nPFFacebookUtils.linkUserInBackground(user, withPublishPermissions: [\"publish_actions\"], {\n  (succeeded: Bool?, error: NSError?) -> Void in\n  if succeeded {\n    print(\"User now has read and publish permissions!\")\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Parse Local Datastore\nDESCRIPTION: Configuration setup to enable Parse Local Datastore in the application delegate. Shows how to initialize Parse with Local Datastore enabled using ParseClientConfiguration.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/local-datastore.md#2025-04-22_snippet_0\n\nLANGUAGE: objective-c\nCODE:\n```\n@implementation AppDelegate\n\n- (void)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)options {\n    ParseClientConfiguration *configuration = [ParseClientConfiguration configurationWithBlock:^(id<ParseMutableClientConfiguration> configuration) {\n        configuration.applicationId =  @\"parseAppId\";\n        configuration.clientKey = @\"parseClientKey\";\n        configuration.server = @\"parseServerUrlString\";\n        configuration.localDatastoreEnabled = YES;\n    }];\n    [Parse initializeWithConfiguration:configuration];\n}\n\n@end\n```\n\nLANGUAGE: swift\nCODE:\n```\n@UIApplicationMain\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n\n  func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -> Bool {\n        let parseConfig = ParseClientConfiguration {\n            $0.isLocalDatastoreEnabled = true\n            $0.applicationId = parseApplicationId\n            $0.clientKey = parseClientKey\n            $0.server = parseServerUrlString\n        }\n        Parse.initialize(with: parseConfig)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installation Query Response Format in JSONC\nDESCRIPTION: JSON response structure returned when querying installation objects. The response contains a 'results' field with an array of installation objects including device type, token, channels, and timestamps.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/push-notifications.md#2025-04-22_snippet_13\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"results\": [\n    {\n      \"deviceType\": \"ios\",\n      \"deviceToken\": \"0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef\",\n      \"channels\": [\n        \"\"\n      ],\n      \"createdAt\": \"2022-01-01T12:23:45.678Z\",\n      \"updatedAt\": \"2022-01-01T12:23:45.678Z\",\n      \"objectId\": \"mrmBZvsErB\"\n    },\n    {\n      \"deviceType\": \"ios\",\n      \"deviceToken\": \"fedcba9876543210fedcba9876543210fedcba9876543210fedcba9876543210\",\n      \"channels\": [\n        \"\"\n      ],\n      \"createdAt\": \"2022-01-01T12:23:45.678Z\",\n      \"updatedAt\": \"2022-01-01T12:23:45.678Z\",\n      \"objectId\": \"sGlvypFQcO\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Facebook SDK with Parse Authentication Token\nDESCRIPTION: This code demonstrates how to use the Microsoft Facebook SDK to fetch user information after authentication. It uses the AccessToken provided by ParseFacebookUtils to make Graph API requests to Facebook.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/users.md#2025-04-22_snippet_18\n\nLANGUAGE: cs\nCODE:\n```\nvar fb = new FacebookClient();\nfb.AccessToken = ParseFacebookUtils.AccessToken;\nvar me = await fb.GetTaskAsync(\"me\");\n```\n\n----------------------------------------\n\nTITLE: Retrieving ParseFile Content Data in PHP\nDESCRIPTION: Explains how to fetch the raw binary content of a `ParseFile` directly using the `getData()` method. This is useful when the server needs to process the file's data instead of just linking to its URL.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/files.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$contents = $file->getData();\n```\n\n----------------------------------------\n\nTITLE: Executing Basic Temperature Query in Arduino\nDESCRIPTION: Demonstrates how to create a basic ParseQuery to retrieve temperature data with a specific value. The example shows how to set class name, add constraints, send the query, and iterate through results.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/arduino/queries.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nParseQuery query;\nquery.setClassName(\"Temperature\");\nquery.whereEqualTo(\"temperature\", 100.0);\nParseResponse response = query.send();\nint countOfResults = response.count();\nSerial.println(countOfResults);\nwhile(response.nextObject()) {\n\tSerial.println(response.getJSONBody());\n\tSerial.println(response.getDouble(\"temperature\"));\n\tSerial.println(response.getString(\"createdAt\"));\n}\nresponse.close(); // Free the resource\n```\n\n----------------------------------------\n\nTITLE: Regex-Based Filtering in Parse Java\nDESCRIPTION: Shows how to query Parse Server in Java for objects whose playerName fields match an anchored regular expression. Requires Parse Java SDK. This method ensures efficient queries when searching for player names beginning with 'Michael'.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_56\n\nLANGUAGE: java\nCODE:\n```\nquery.whereMatches(\"playerName\", \"^Michael\");\n```\n\n----------------------------------------\n\nTITLE: Rotating Encryption Key in Parse Server FSAdapter\nDESCRIPTION: Implementation for rotating the encryption key of files stored with FSAdapter. This process requires the old encryption key and should be performed on a development server rather than in production.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/file-adapters.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n//This can take awhile depending on how many files and how large they are. It will attempt to rotate the key of all files in your filesSubDirectory\nconst {rotated, notRotated} =  await api.filesAdapter.rotateEncryptionKey({oldKey: oldKey});\nconsole.log('Files rotated to newKey: ' + rotated);\nconsole.log('Files that couldn\\'t be rotated to newKey: ' + notRotated);\n```\n\n----------------------------------------\n\nTITLE: Managing Schema Indexes in Parse with PHP\nDESCRIPTION: Illustrates how to manage database indexes for a Parse schema using PHP. It covers adding an index (`addIndex`) on an existing field, specifying the index key and direction, deleting an index (`deleteIndex`) by name, and retrieving existing indexes via the `get()` method. Requires the `masterKey` to be set during Parse initialization.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/schema.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// To add an index, the field must exist before you create an index\n$schema->addString('field');\n$index = [ 'field' => 1 ];\n$schema->addIndex('index_name', $index);\n$schema->save();\n\n// Delete an index\n$schema->deleteIndex('index_name');\n$schema->save();\n\n// If indexes exist, you can retrieve them\n$result = $schema->get();\n$indexes = $result['indexes'];\n```\n\n----------------------------------------\n\nTITLE: Retrieving Installation Object via Parse REST API - Python\nDESCRIPTION: Demonstrates how to retrieve an installation object by its ID using Python's http.client to send a GET request to the Parse Server. Requires target Parse Server, Application ID, REST API Key, and the objectId of the installation. The script prints the installation object's JSON representation, including all custom and automatically generated fields. Useful for integration tests or admin scripts.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/push-notifications.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('<span class=\\\"custom-parse-server-url\\\">YOUR.PARSE-SERVER.HERE</span>', 443)\nconnection.connect()\nconnection.request('GET', '<span class=\\\"custom-parse-server-mount\\\">/parse/</span>installations/mrmBZvsErB', '', {\n    \"X-Parse-Application-Id\": \"<span class=\\\"custom-parse-server-appid\\\">${APPLICATION_ID}</span>\",\n    \"X-Parse-REST-API-Key\": \"<span class=\\\"custom-parse-server-restapikey\\\">${REST_API_KEY}</span>\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Limiting Query Results in Parse PHP\nDESCRIPTION: Demonstrates limiting Parse query results to a maximum of 10 objects using the PHP SDK. The limit method helps avoid excessive data transfer to clients.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_63\n\nLANGUAGE: php\nCODE:\n```\n$query->limit(10); // limit to at most 10 results\n```\n\n----------------------------------------\n\nTITLE: Creating PFFileObject with String Data\nDESCRIPTION: Demonstrates creating a PFFileObject from string data by converting it to NSData format.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/files.md#2025-04-22_snippet_0\n\nLANGUAGE: objective-c\nCODE:\n```\nNSData *data = [@\"Working at Parse is great!\" dataUsingEncoding:NSUTF8StringEncoding];\nPFFileObject *file = [PFFileObject fileObjectWithName:@\"resume.txt\" data:data];\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet str = \"Working at Parse is great!\"\nlet data = str.data(using: String.Encoding.utf8)\nlet file = PFFileObject(name:\"resume.txt\", data:data!)\n```\n\n----------------------------------------\n\nTITLE: Using Comparison Operators in Queries\nDESCRIPTION: Shows how to use comparison operators like lessThan, greaterThan, and greaterThanOrEqualTo to filter query results for sortable data types.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/arduino/queries.md#2025-04-22_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\n// Restricts to temperatures < 50\nquery.whereLessThan(\"temperature\", 50.0);\n// Restricts to temperatures > 50 query.\nwhereGreaterThan(\"temperature\", 50.0);\n// Restricts to temperatures >= 50 query.\nwhereGreaterThanOrEqualTo(\"temperature\", 50.0);\n```\n\n----------------------------------------\n\nTITLE: Creating and Querying User-Associated Posts in PHP\nDESCRIPTION: This code illustrates how to create a new post associated with the current user and then query for all posts by that user. It demonstrates the ease of creating and querying associations in Parse.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/users.md#2025-04-22_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$user = ParseUser::getCurrentUser()\n\n// Make a new post\n$post = new ParseObject(\"Post\");\n$post->set(\"title\", \"My New Post\");\n$post->set(\"body\", \"This is some great content.\");\n$post->set(\"user\", $user);\n$post->save();\n\n// Find all posts by the current user\n$query = new ParseQuery(\"Post\");\n$query->equalTo(\"user\", $user);\n$userPosts = $query->find();\n// $userPosts contains all of the posts by the current user.\n```\n\n----------------------------------------\n\nTITLE: Rotating the Encryption Key for Specific Files in Parse Server using JavaScript\nDESCRIPTION: This JavaScript snippet details rotating the encryption key for specific files by providing an array of filenames. It operates like a full rotation but targets a subset of files.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/file-adapters.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n//This can take awhile depending on how many files and how large they are. It will attempt to rotate the key of all files in your filesSubDirectory\nconst {rotated, notRotated} =  await api.filesAdapter.rotateEncryptionKey({oldKey: oldKey, fileNames: [\"fileName1.png\",\"fileName2.png\"]});\nconsole.log('Files rotated to newKey: ' + rotated);\nconsole.log('Files that couldn\\'t be rotated to newKey: ' + notRotated);\n```\n\n----------------------------------------\n\nTITLE: Limiting Number of Query Results in Parse using Swift\nDESCRIPTION: Demonstrates setting a maximum number of results for a Parse query in Swift. Requires ParseSwift SDK and takes an int for the desired limit. Limits how many objects the server returns.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/queries.md#2025-04-22_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\nquery.limit = 10 // limit to at most 10 results\n```\n\n----------------------------------------\n\nTITLE: User Response Object Structure in Parse Server\nDESCRIPTION: JSON response format when retrieving a user. Contains user-provided fields (excluding password) and system fields like createdAt, updatedAt, and objectId.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/users.md#2025-04-22_snippet_8\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"username\": \"cooldude6\",\n  \"phone\": \"415-392-0202\",\n  \"createdAt\": \"2022-01-01T12:23:45.678Z\",\n  \"updatedAt\": \"2022-01-01T12:23:45.678Z\",\n  \"objectId\": \"g7y9tkhB7O\"\n}\n```\n\n----------------------------------------\n\nTITLE: Parse ACL Public Access\nDESCRIPTION: Sets up public read/write access permissions using ParseACL.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dart/objects.md#2025-04-22_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nParseACL parseACL = ParseACL();\nparseACL.setPublicReadAccess(allowed: true);\nparseACL.setPublicWriteAccess(allowed: true);\n\nParseObject parseObject = ParseObject(\"TestAPI\");\n...  \nparseObject.setACL(parseACL);\nvar apiResponse = await parseObject.save();\n```\n\n----------------------------------------\n\nTITLE: Querying Books with Included Authors in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to query Book objects and include their related Author objects. It uses the include method to fetch the associated authors along with each book in a single asynchronous query.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/relations.md#2025-04-22_snippet_33\n\nLANGUAGE: js\nCODE:\n```\n// set up our query for the Book object\nconst bookQuery = new Parse.Query(\"Book\");\n\n// configure any constraints on your query...\n// tell the query to fetch all of the Author objects along with the Book\nbookQuery.include(\"authors\");\n\n// execute the query\nconst books = await bookQuery.find();\n```\n\n----------------------------------------\n\nTITLE: Uploading Images with Curl and Bash\nDESCRIPTION: The code snippet shows how to upload an image file `myPicture.jpg` to a Parse server using Curl. The process requires application ID, REST API key, and content type headers.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/files.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n  -H \"X-Parse-Application-Id: <span class=\\\"custom-parse-server-appid\\\">${APPLICATION_ID}</span>\" \\\n  -H \"X-Parse-REST-API-Key: <span class=\\\"custom-parse-server-restapikey\\\">${REST_API_KEY}</span>\" \\\n  -H \"Content-Type: image/jpeg\" \\\n  --data-binary '@myPicture.jpg' \\\n  <span class=\\\"custom-parse-server-protocol\\\">https</span>://<span class=\\\"custom-parse-server-url\\\">YOUR.PARSE-SERVER.HERE</span><span class=\\\"custom-parse-server-mount\\\">/parse/</span>files/pic.jpg\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Parse User in Dart\nDESCRIPTION: Shows how to retrieve the current logged-in Parse user, typically used after initialization.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dart/users.md#2025-04-22_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nuser = ParseUser.currentUser();\n```\n\n----------------------------------------\n\nTITLE: Sending Push Notifications to Channels in C#\nDESCRIPTION: Shows how to send a push notification to all devices subscribed to a specific channel using Parse SDK in C#. This example sends a notification to the 'Giants' channel.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/push-notifications.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n// Send a notification to all devices subscribed to the \"Giants\" channel.\nvar push = new ParsePush();\npush.Channels = new List<string> {\"Giants\"};\npush.Alert = \"The Giants just scored!\";\npush.SendAsync();\n```\n\n----------------------------------------\n\nTITLE: Error Tracking with Parse Analytics in C#\nDESCRIPTION: Implementation of error tracking using Parse Analytics. This code demonstrates how to track error events with error codes as dimensions, providing insights into error rates and frequencies.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/analytics.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar errDimensions = new Dictionary<string, string> {\n  { \"code\", Convert.ToString(error.Code) }\n};\nParseAnalytics.TrackEventAsync(\"error\", errDimensions );\n```\n\n----------------------------------------\n\nTITLE: Deleting a 'beforeSave' Trigger Webhook using cURL\nDESCRIPTION: This snippet shows how to delete a 'beforeSave' trigger webhook for the 'Game' class using cURL. It sends a PUT request with the 'Delete' operation to the Parse Server.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/hooks.md#2025-04-22_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-Master-Key: ${MASTER_KEY}\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{ \"__op\": \"Delete\" }' \\\nhttps://YOUR.PARSE-SERVER.HERE/parse/hooks/triggers/Game/beforeSave\n```\n\n----------------------------------------\n\nTITLE: Constructing mLab MongoDB Connection String (URI)\nDESCRIPTION: Defines the format for a MongoDB connection string used to connect to an mLab database instance. Replace placeholders like 'yourusername', 'yourpassword', 'yourmlabdatabaseaddress.mlab.com', 'yourdatabaseport', and 'yourdatabasename' with your actual mLab credentials and database details obtained after creating the database.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/deploying-glitch-mlab.md#2025-04-22_snippet_0\n\nLANGUAGE: uri\nCODE:\n```\nmongodb://yourusername:yourpassword@yourmlabdatabaseaddress.mlab.com:yourdatabaseport/yourdatabasename\n```\n\n----------------------------------------\n\nTITLE: Purging All Objects from a Parse Schema in PHP\nDESCRIPTION: Demonstrates how to delete all objects within a specific Parse class (schema) using the `purge()` method on a `ParseSchema` instance. This is a destructive and potentially irreversible operation, often used before deleting the class itself.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/schema.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// delete all objects in the schema\n$mySchema->purge();\n```\n\n----------------------------------------\n\nTITLE: Saving ParsePolygon as Parcelable in Java\nDESCRIPTION: This code shows how to save a ParsePolygon as a Parcelable object in an Activity's saved instance state.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/geopoints.md#2025-04-22_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nprivate ParsePolygon polygon;\n\n@Override\nprotected void onSaveInstanceState(Bundle outState) {\n    super.onSaveInstanceState(outState);\n    outState.putParcelable(\"polygon\", polygon);\n}\n\n@Override\nprotected void onCreate(@Nullable Bundle savedInstanceState) {\n  if (savedInstanceState != null) {\n    polygon = (ParsePolygon) savedInstanceState.getParcelable(\"polygon\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Parse Object with Included Pointer - Python Example - python\nDESCRIPTION: This Python example retrieves a Parse object and its pointed-to child object via the 'include' query parameter. The script sets up the HTTPS connection and encodes the include parameter. Response is parsed as JSON and printed with included sub-objects.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/objects.md#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\\nimport json\\nimport urllib.parse\\n\\n\\nconnection = http.client.HTTPSConnection('<span class=\\\"custom-parse-server-url\\\">YOUR.PARSE-SERVER.HERE</span>', 443)\\nparams = urllib.parse.urlencode({\"include\": \"game\"})\\nconnection.connect()\\nconnection.request('GET', '<span class=\\\"custom-parse-server-mount\\\">/parse/</span>classes/GameScore/Ed1nuqPvcm?%s' % params, '', {\\n    \"X-Parse-Application-Id\": \"<span class=\\\"custom-parse-server-appid\\\">${APPLICATION_ID}</span>\",\\n    \"X-Parse-REST-API-Key\": \"<span class=\\\"custom-parse-server-restapikey\\\">${REST_API_KEY}</span>\"\\n})\\nresult = json.loads(connection.getresponse().read())\\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Adding New Parse Config Parameter in Dart\nDESCRIPTION: Shows how to add a new configuration parameter to Parse Config. Takes a key-value pair where the key is the config name and value is the config value.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dart/config.md#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nParseConfig().addConfig('TestConfig', 'testing');\n```\n\n----------------------------------------\n\nTITLE: Querying Hashtags in JavaScript\nDESCRIPTION: Example of querying posts containing specific hashtags using Parse JavaScript SDK with containsAll constraint.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_97\n\nLANGUAGE: javascript\nCODE:\n```\nvar Post = Parse.Object.extend(\"Post\");\nvar query = new Parse.Query(Post);\nquery.containsAll(\"hashtags\", [\"#parse\", \"#ftw\"]);\nquery.find().then(function(results) {\n  // Request succeeded\n}, function(error) {\n  // Request failed\n});\n```\n\n----------------------------------------\n\nTITLE: Sending Push to Multiple Channels\nDESCRIPTION: Shows how to send a push notification to subscribers of multiple channels simultaneously.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/push-notifications.md#2025-04-22_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nLinkedList<String> channels = new LinkedList<String>();\nchannels.add(\"Giants\");\nchannels.add(\"Mets\");\n\nParsePush push = new ParsePush();\npush.setChannels(channels); // Notice we use setChannels not setChannel\npush.setMessage(\"The Giants won against the Mets 2-3.\");\npush.sendInBackground();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Config with Network Fallback and Caching - Parse PFConfig - Objective-C\nDESCRIPTION: Illustrates robust retrieval of remote configuration in Objective-C, handling unreliable network with fallback to cached config using PFConfig. The snippet checks for errors after attempting to fetch from the server and defaults to the last cached config if necessary, populating a welcome message. Dependencies: Parse iOS SDK. Inputs: none; Outputs: console logs indicating whether config was fetched from server or cache, and the welcome message. Assumes PFConfig has 'welcomeMessage' parameter.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/config.md#2025-04-22_snippet_2\n\nLANGUAGE: objective_c\nCODE:\n```\nNSLog(@\"Getting the latest config...\");\n[PFConfig getConfigInBackgroundWithBlock:^(PFConfig *config, NSError *error) {\n  if (!error) {\n    NSLog(@\"Yay! Config was fetched from the server.\");\n  } else {\n    NSLog(@\"Failed to fetch. Using Cached Config.\");\n    config = [PFConfig currentConfig];\n  }\n\n  NSString *welcomeMessage = config[@\"welcomeMessage\"];\n  if (!welcomeMessage) {\n    NSLog(@\"Falling back to default message.\");\n    welcomeMessage = @\"Welcome!\";\n  }\n  NSLog(@\"Welcome Messsage = %@\", welcomeMessage);\n}];\n```\n\n----------------------------------------\n\nTITLE: Starting Push Service\nDESCRIPTION: Sets up the push notification service by registering the callback function and starting the push service loop.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/embedded_c/push-notifications.md#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nparseSetPushCallback(client, myPushCallback);\nparseStartPushService(client);\nparseRunPushLoop(client);\n```\n\n----------------------------------------\n\nTITLE: Loading Remote Images in PFTableViewCell with Swift\nDESCRIPTION: This Swift code shows how to load remote images stored as PFFileObjects in Parse Cloud into PFTableViewCell. It demonstrates setting a placeholder image and assigning the remote file to the cell's imageView.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/user-interface.md#2025-04-22_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\nfunc tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath, object: PFObject?) -> PFTableViewCell? {\n\tlet identifier = \"cell\"\n\n\tvar cell = tableView.dequeueReusableCell(withIdentifier: identifier) as? PFTableViewCell\n\tif cell == nil {\n\t\tcell = PFTableViewCell(style: .default, reuseIdentifier: identifier)\n\t}\n\n\tif let object = object {\n\t\tcell?.textLabel?.text = object[\"title\"] as? String\n\t\tcell?.imageView?.image = UIImage(named: \"placeholder.jpg\")\n\t\tcell?.imageView?.file = object[\"thumbnail\"] as? PFFileObject\n\t}\n\n\treturn cell\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Sessions using Parse REST API\nDESCRIPTION: This snippet demonstrates how to query for Session objects using the Parse REST API. It includes the necessary headers and endpoint for retrieving sessions belonging to the current user.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/sessions.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -H \"X-Parse-Session-Token: r:pnktnjyb996sj4p156gjtp4im\" \\\n  https://YOUR.PARSE-SERVER.HERE/parse/sessions\n```\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nconnection.connect()\nconnection.request('GET', '/parse/sessions', '', {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\",\n    \"X-Parse-Session-Token\": \"r:pnktnjyb996sj4p156gjtp4im\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Filtering Data with Not Equal Constraint\nDESCRIPTION: Shows how to exclude objects with a specific key-value pair from query results using the whereNotEqualTo constraint.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/arduino/queries.md#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nquery.whereNotEqualTo(\"toaster\", \"foo\");\n```\n\n----------------------------------------\n\nTITLE: Handling Global LiveQuery Close Event in JavaScript\nDESCRIPTION: Demonstrates how to listen for the global 'close' event, which is emitted when the WebSocket connection to the LiveQuery server is closed.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/live-queries.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nParse.LiveQuery.on('close', () => {\n  console.log('socket connection closed');\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Insecure Authentication with GitHub in Parse Server\nDESCRIPTION: Configures Parse Server to use GitHub for authentication in an insecure manner, allowing the use of deprecated authentication methods. It includes necessary configuration parameters and enables insecure authentication options.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/third-party-auth.md#2025-04-22_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  appId: 'APP_ID',\n  masterKey: 'MASTER_KEY',\n  serverURL: 'SERVER_URL',\n  databaseURI: 'DATABASE_URI',\n  enableInsecureAuthAdapters: true,\n  auth: {\n    github: {\n      appIds: 'GITHUB_APP_ID',\n      clientId: 'GITHUB_CLIENT_ID',\n      clientSecret: 'GITHUB_CLIENT_SECRET',\n      enableInsecureAuth: true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Returning an Already Saved File with beforeSaveFile\nDESCRIPTION: This example demonstrates how to use the beforeSaveFile trigger to return an already saved file instead of saving a new one. It retrieves an avatar file from the user object.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/cloudcode/cloud-code.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n// Returning an already saved file\nParse.Cloud.beforeSaveFile((request) => {\n  const { user } = request;\n  const avatar = user.get('avatar'); // this is a Parse.File that is already saved to the user object\n  return avatar;\n});\n```\n\n----------------------------------------\n\nTITLE: Handling LiveQuery Error Events\nDESCRIPTION: This example demonstrates how to listen for and handle error events in LiveQuery. It's useful for catching errors thrown by the beforeConnect trigger when a client tries to subscribe.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/cloudcode/cloud-code.md#2025-04-22_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nParse.LiveQuery.on('error', (error) => {\n  console.log(error);\n});\n```\n\n----------------------------------------\n\nTITLE: Validating Session Token / Retrieving Current User in Bash\nDESCRIPTION: Makes a GET request to the /users/me endpoint to validate a session token and retrieve the associated user. Requires the session token in addition to standard authentication headers.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/users.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -H \"X-Parse-Session-Token: r:pnktnjyb996sj4p156gjtp4im\" \\\n  https://YOUR.PARSE-SERVER.HERE/parse/users/me\n```\n\n----------------------------------------\n\nTITLE: Nested Mutation Response Example for Country/City/Company - JSONC\nDESCRIPTION: Displays the response to a successful nested mutation that creates a hierarchy of country, city, and company objects. The returned structure includes all fields and relationships as edges for comprehensive client integration.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/objects.md#2025-04-22_snippet_10\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"data\": {\n    \"createCountry\": {\n      \"country\": {\n        \"name\": \"Mars\",\n        \"cities\": {\n          \"edges\": [\n            {\n              \"node\": {\n                \"name\": \"Alpha\",\n                \"companies\": {\n                  \"edges\": [\n                    {\n                      \"node\": {\n                        \"name\": \"Motors\"\n                      }\n                    }\n                  ]\n                }\n              }\n            }\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Restricting Fields Returned by Query\nDESCRIPTION: Demonstrates how to limit which fields are returned in query results using setKeys, which is useful for optimizing memory usage in constrained Arduino environments.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/arduino/queries.md#2025-04-22_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\nquery.setKeys(\"temperature\");\n```\n\n----------------------------------------\n\nTITLE: Limiting Results in Parse.Query in JavaScript\nDESCRIPTION: Shows how to limit the number of results returned by a Parse.Query using the limit method. By default, results are limited to 100.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/queries.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nquery.limit(10); // limit to at most 10 results\n```\n\n----------------------------------------\n\nTITLE: Monitoring Parse LiveQuery Events with onLiveQueryEvent - JavaScript\nDESCRIPTION: Details usage of the onLiveQueryEvent trigger for logging or monitoring LiveQuery protocol events, such as websocket connections and disconnections. Accepts a comprehensive event object that includes connection, client, session, and error metadata. Available since Parse Server 2.6.2, with additional parameters from version 3.8.0+. This example checks for 'ws_disconnect' event type and can be extended for analytics or alerting.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/cloudcode/cloud-code.md#2025-04-22_snippet_45\n\nLANGUAGE: JavaScript\nCODE:\n```\n```javascript\nParse.Cloud.onLiveQueryEvent(({\n  event,\n  client,\n  sessionToken,\n  useMasterKey,\n  installationId,\n  clients,\n  subscriptions,\n  error\n}) => {\n  if (event !== 'ws_disconnect') {\n    return;\n  }\n  // Do your magic\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Running Parse Server Bootstrap Script\nDESCRIPTION: Executes the Parse Server bootstrap script which helps set up a basic Parse Server.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/deploying-aws-ubuntu.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nsh <(curl -fsSL https://raw.githubusercontent.com/parse-community/parse-server/master/bootstrap.sh)\n```\n\n----------------------------------------\n\nTITLE: Loading Remote Images in PFTableViewCell with Objective-C\nDESCRIPTION: This Objective-C snippet demonstrates how to load remote images stored as PFFileObjects in Parse Cloud into PFTableViewCell. It shows setting a placeholder image and assigning the remote file to the cell's imageView.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/user-interface.md#2025-04-22_snippet_15\n\nLANGUAGE: objective-c\nCODE:\n```\n@implementation SimpleTableViewController\n\n- (UITableViewCell *)tableView:(UITableView *)tableView  cellForRowAtIndexPath:(NSIndexPath *)indexPath object:(PFObject *)object {\n    static NSString *identifier = @\"cell\";\n    PFTableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:identifier];\n    if (!cell) { cell = [[PFTableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:identifier];\n    }\n    cell.textLabel.text = object[@\"title\"];\n\n    PFFileObject *thumbnail = object[@\"thumbnail\"];\n    cell.imageView.image = [UIImage imageNamed:@\"placeholder.jpg\"];\n    cell.imageView.file = thumbnail;\n    return cell;\n}\n@end\n```\n\n----------------------------------------\n\nTITLE: Initializing PFSignUpViewController\nDESCRIPTION: Shows how to create and present a signup view controller modally\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/user-interface.md#2025-04-22_snippet_7\n\nLANGUAGE: objective-c\nCODE:\n```\nPFSignUpViewController *signUpController = [[PFSignUpViewController alloc] init];\nsignUpController.delegate = self;\n[self presentViewController:signUpController animated:YES completion:nil];\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet signUpController = PFSignUpViewController()\nsignUpController.delegate = self\nself.present(signUpController, animated: true, completion: nil)\n```\n\n----------------------------------------\n\nTITLE: Initializing ParseFacebookUtils in Android Application\nDESCRIPTION: Code to initialize ParseFacebookUtils in the Application.onCreate() method. This is required to enable Facebook authentication functionality.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/users.md#2025-04-22_snippet_16\n\nLANGUAGE: java\nCODE:\n```\nParseFacebookUtils.initialize(context);\n```\n\n----------------------------------------\n\nTITLE: User Sign-Up Response Example\nDESCRIPTION: This snippet shows the JSON response structure when a new user is successfully created. It includes the createdAt timestamp, objectId, and sessionToken for the new user.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/users.md#2025-04-22_snippet_1\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"createdAt\": \"2022-01-01T12:23:45.678Z\",\n  \"objectId\": \"g7y9tkhB7O\",\n  \"sessionToken\": \"r:pnktnjyb996sj4p156gjtp4im\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a 'beforeDelete' Trigger Webhook using cURL\nDESCRIPTION: This snippet illustrates how to delete a 'beforeDelete' trigger webhook for the 'Tournament' class using cURL. It sends a PUT request with the 'Delete' operation to the Parse Server.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/hooks.md#2025-04-22_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-Master-Key: ${MASTER_KEY}\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{ \"__op\": \"Delete\" }' \\\nhttps://YOUR.PARSE-SERVER.HERE/parse/hooks/triggers/Tournament/beforeDelete\n```\n\n----------------------------------------\n\nTITLE: Parse Dashboard Configuration Example\nDESCRIPTION: Example configuration file for Parse Dashboard with app information and user credentials.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/deploying-aws-ubuntu.md#2025-04-22_snippet_24\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n\t\"apps\": [{\n\t\t\"serverURL\": \"http://example.com:1337/parse\",\n\t\t\"appId\": \"exampleAppId\",\n\t\t\"masterKey\": \"exampleMasterKey\",\n\t\t\"allowInsecureHTTP\": \"true\",\n\t\t\"appName\": \"MyApp\"\n\t}],\n\t\"users\": [{\n\t\t\"user\": \"admin\",\n\t\t\"pass\": \"password\"\n\t}]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Parcelable for ParseFile in Java\nDESCRIPTION: Demonstrates how to use ParseFile's Parcelable implementation to preserve its state during configuration changes or pass it between components.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/files.md#2025-04-22_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nprivate ParseFile file;\n\n@Override\nprotected void onSaveInstanceState(Bundle outState) {\n    super.onSaveInstanceState(outState);\n    if (!file.isDirty()) {\n      outState.putParcelable(\"file\", file);\n    }\n}\n\n@Override\nprotected void onCreate(@Nullable Bundle savedInstanceState) {\n  if (savedInstanceState != null) {\n    file = (ParseFile) savedInstanceState.getParcelable(\"file\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Fields with 'excludeKeys' Parameter in Parse Server\nDESCRIPTION: This code demonstrates how to exclude specific fields from query results using the 'excludeKeys' parameter. The example retrieves all fields from GameScore objects except for the 'playerName' field.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/queries.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -G \\\n  --data-urlencode 'excludeKeys=playerName' \\\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Parse Object with GeoPoint via REST API (cURL)\nDESCRIPTION: This cURL command demonstrates how to create a new object in the 'PlaceObject' class on a Parse Server using the REST API. It sends a POST request with JSON data that includes a 'location' field configured as a GeoPoint type, specifying latitude and longitude. Requires replacing placeholders for Application ID, REST API Key, and Parse Server URL.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/geopoints.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n  -H \"X-Parse-Application-Id: <span class=\\\"custom-parse-server-appid\\\">${APPLICATION_ID}</span>\" \\\n  -H \"X-Parse-REST-API-Key: <span class=\\\"custom-parse-server-restapikey\\\">${REST_API_KEY}</span>\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"location\": {\n          \"__type\": \"GeoPoint\",\n          \"latitude\": 40.0,\n          \"longitude\": -30.0\n        }\n      }' \\\n  <span class=\\\"custom-parse-server-protocol\\\">https</span>://<span class=\\\"custom-parse-server-url\\\">YOUR.PARSE-SERVER.HERE</span><span class=\\\"custom-parse-server-mount\\\">/parse/</span>classes/PlaceObject\n```\n\n----------------------------------------\n\nTITLE: Parse Server Custom Auth Configuration\nDESCRIPTION: Shows how to configure Parse Server to use a custom authentication module.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/users.md#2025-04-22_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nconst CustomAuth = require('./CustomAuth');\n\nconst api = new ParseServer({\n  ...\n  auth: {\n    myAuth: {\n      module: CustomAuth,\n      option1: 'hello',\n      option2: 'world',\n    }\n  }\n  ...\n});\n...\nawait api.start();\napp.use('/parse', api.app);\n```\n\n----------------------------------------\n\nTITLE: Querying Hashtags in Objective-C\nDESCRIPTION: Example of querying posts containing specific hashtags using Parse Objective-C SDK with containsAll constraint.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_98\n\nLANGUAGE: objective-c\nCODE:\n```\nPFQuery *query = [PFQuery queryWithClassName:@\"Post\"];\n[query whereKey:@\"hashtags\" containsAllObjectsInArray:@[@\"#parse\", @\"#ftw\"]];\n[query findObjectsInBackgroundWithBlock:^(NSArray *objects, NSError *error) {\n  if (!error) {\n    // Request succeeded\n  }\n}];\n```\n\n----------------------------------------\n\nTITLE: Sending POST Request with Parse SDK in C++\nDESCRIPTION: Demonstrates how to save an object with temperature data using the parseSendRequest function. This example sends a POST request to create a new Temperature object in the Parse database.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/embedded_c/requests.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nchar data[] = \"{ \\\"temperature\\\": 165 }\"; parseSendRequest(client, \"POST\", \"/parse/classes/Temperature\", data, NULL);\n```\n\n----------------------------------------\n\nTITLE: Initiating Product Purchase in Parse iOS\nDESCRIPTION: Shows how to initiate a product purchase using Parse SDK, including error handling.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/in-app-purchases.md#2025-04-22_snippet_2\n\nLANGUAGE: objective-c\nCODE:\n```\n[PFPurchase buyProduct:@\"Pro\" block:^(NSError *error) {\n    if (!error) {\n        // Run UI logic that informs user the product has been purchased, such as displaying an alert view.\n    }\n}];\n```\n\nLANGUAGE: swift\nCODE:\n```\nPFPurchase.buyProduct(\"Pro\") {\n    (error: NSError?) -> Void in\n    if error == nil {\n        // Run UI logic that informs user the product has been purchased, such as displaying an alert view.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Push Notifications on Android in Unity\nDESCRIPTION: This code demonstrates a helper method for displaying push notifications on Android within Unity. It uses the ParsePushUnityHelper class to implement default notification display behavior when the app is in background.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/push-notifications.md#2025-04-22_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\nParsePush.ParsePushNotificationReceived += (sender, args) => {\n#if UNITY_ANDROID\n\tAndroidJavaClass parseUnityHelper = new AndroidJavaClass(\"com.parse.ParsePushUnityHelper\");\n\tAndroidJavaClass unityPlayer = new AndroidJavaClass(\"com.unity3d.player.UnityPlayer\");\n\tAndroidJavaObject currentActivity = unityPlayer.GetStatic<AndroidJavaObject>(\"currentActivity\");\n\n\t// Call default behavior.\n\tparseUnityHelper.CallStatic(\"handleParsePushNotificationReceived\", currentActivity, args.StringPayload);\n#endif\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Callbacks for Multi-step Operations in Parse JavaScript SDK\nDESCRIPTION: Example of traditional nested callbacks (pyramid code) for logging in, finding an object, and saving it. Shows the complexity of the callback approach.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/promises.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nParse.User.logIn(\"user\", \"pass\", {\n  success: function(user) {\n    query.find({\n      success: function(results) {\n        results[0].save({ key: value }, {\n          success: function(result) {\n            // the object was saved.\n          }\n        });\n      }\n    });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Parse Users\nDESCRIPTION: Demonstrates how to query for Parse users with specific criteria using ParseQuery.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/users.md#2025-04-22_snippet_14\n\nLANGUAGE: java\nCODE:\n```\nParseQuery<ParseUser> query = ParseUser.getQuery();\nquery.whereEqualTo(\"gender\", \"female\");\nquery.findInBackground(new FindCallback<ParseUser>() {\n  public void done(List<ParseUser> objects, ParseException e) {\n    if (e == null) {\n        // The query was successful.\n    } else {\n        // Something went wrong.\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: AfterSave Comment Counter Webhook in Ruby\nDESCRIPTION: Ruby webhook implementation for tracking comment counts after saving. Updates comment count in external data source.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/cloudcode/cloud-code-advanced.md#2025-04-22_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nprotect_from_forgery :except => :comments\n\ndef comments\n  if request.headers['X-Parse-Webhook-Key'] != @webhook_key\n    return render :nothing => true\n  end\n\n  comment = params[:object]\n  if params[:triggerName] == \"afterSave\" && comment[\"className\"] == \"Comment\"\n    post = comment[\"post\"]\n    @post_model = Post.where(\"id = #{post[\"objectId\"]}\")\n    @post_model.increment(:comments_count, 1)\n    @post_model.save!\n    return render :nothing => true\n  end\n\n  render :nothing => true\nend\n```\n\n----------------------------------------\n\nTITLE: Fetching Non-existent Object\nDESCRIPTION: Example showing how to attempt fetching an object with a non-existent objectId from Parse Server\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/handling-errors.md#2025-04-22_snippet_1\n\nLANGUAGE: objective-c\nCODE:\n```\n- (void)getMyNote {\n    PFQuery *query = [PFQuery queryWithClassName:@\"Note\"];\n    [query getObjectInBackgroundWithId:@\"thisObjectIdDoesntExist\"\n                                target:self\n                              selector:@selector(callbackForGet:error:)];\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\nfunc getMyNote() -> Void {\n    let query = PFQuery(className: \"Note\")\n    query.getObjectInBackgroundWithId(\"thisObjectIdDoesntExist\", target: self, selector: Selector(\"callbackForGet:error:\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Parse Server for Local Development - Shell Script\nDESCRIPTION: This snippet depicts how to start the Parse Server with specific configuration parameters such as app ID, master key, and server URL using the 'npm start' command. Intended for a local development environment, it requires previous cloning and installation steps to be completed. Key parameters include the application ID, master key, and the endpoint for the Parse Server. The output is a running Parse Server instance accessible at the specified URL.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/development.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm start -- --appId APPLICATION_ID --masterKey MASTER_KEY --serverURL http://localhost:1337/parse\n```\n\n----------------------------------------\n\nTITLE: Creating Trigger Webhook using cURL in Parse Server\nDESCRIPTION: cURL command to create a trigger webhook in Parse Server. It sends a POST request with the necessary headers and payload to the Parse Server endpoint for triggers.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/hooks.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-Master-Key: ${MASTER_KEY}\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"className\": \"Game\", \"triggerName\": \"beforeSave\", \"url\": \"https://api.example.com/Game/beforeSave\"}' \\\nhttps://YOUR.PARSE-SERVER.HERE/parse/hooks/triggers\n```\n\n----------------------------------------\n\nTITLE: Example JSONC for Paginated Cursor Query - JSONC\nDESCRIPTION: Shows the typical response after a paginated query with the 'after' argument. Contains only the page of data after the input cursor, properly updating pageInfo fields and returning available edge(s). Always check 'pageInfo' for navigation capabilities.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/queries.md#2025-04-22_snippet_14\n\nLANGUAGE: JSONC\nCODE:\n```\n{\n  \"data\": {\n    \"gameScores\": {\n      \"pageInfo\": {\n        \"hasNextPage\": false,\n        \"hasPreviousPage\": true,\n        \"startCursor\": \"YXJyYXljb25uZWN0aW9uOjI=\",\n        \"endCursor\": \"YXJyYXljb25uZWN0aW9uOjI=\"\n      },\n      \"count\": 3,\n      \"edges\": [\n        {\n          \"cursor\": \"YXJyYXljb25uZWN0aW9uOjI=\",\n          \"node\": {\n            \"id\": \"R2FtZVNjb3JlOjNmWjBoQVJDVU0=\",\n            \"playerName\": \"Steve Jordan\",\n            \"score\": 134,\n            \"cheatMode\": false\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Cached Results from Local Datastore - Parse SDK Objective-C\nDESCRIPTION: This Objective-C snippet demonstrates querying the local datastore for cached objects that were previously pinned. It configures a PFQuery to source results from the local datastore, orders them by descending score, and performs the query asynchronously. Required dependencies include the Parse SDK. The input is any local \\\"GameScore\\\" object pinned to storage; output is the cached result set or an error.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/local-datastore.md#2025-04-22_snippet_5\n\nLANGUAGE: objective_c\nCODE:\n```\nPFQuery *query = [PFQuery queryWithClassName:@\"GameScore\"];\n[query fromLocalDatastore];\n[query orderByDescending:@\"score\"];\n\n[[query findObjectsInBackground] continueWithBlock:^id(BFTask *task) {\n  if (task.error) {\n    // Something went wrong.\n    return task;\n  }\n\n  // Yay! Cached scores!\n  return task;\n}];\n```\n\n----------------------------------------\n\nTITLE: String Value Queries in Parse PHP\nDESCRIPTION: Demonstrates string matching queries using startsWith and endsWith operators for efficient string searches.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/queries.md#2025-04-22_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n// Finds barbecue sauces that start with \"Big Daddy's\".\n$query = new ParseQuery(\"BarbecueSauce\");\n$query->startsWith(\"name\", \"Big Daddy's\");\n```\n\nLANGUAGE: php\nCODE:\n```\n// Finds barbecue sauces that end with \"Sauce\".\n$query = new ParseQuery(\"BarbecueSauce\");\n$query->endsWith(\"name\", \"Sauce\");\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Objects from Parse Server in Dart\nDESCRIPTION: This snippet demonstrates how to retrieve all objects from a specific Parse table using the Dart SDK. It uses the getAll() method and handles the API response.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dart/queries.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvar apiResponse = await ParseObject('ParseTableName').getAll();\n\nif (apiResponse.success){\n  for (var testObject in apiResponse.result) {\n    print(ApplicationConstants.APP_NAME + \": \" + testObject.toString());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Anonymous User with ParseAnonymousUtils in Java\nDESCRIPTION: This snippet illustrates how to create an anonymous user using ParseAnonymousUtils. Anonymous users can be used without requiring a username and password but still have the capabilities of a ParseUser.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/users.md#2025-04-22_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nParseAnonymousUtils.logIn(new LogInCallback() {\n  @Override\n  public void done(ParseUser user, ParseException e) {\n    if (e != null) {\n      Log.d(\"MyApp\", \"Anonymous login failed.\");\n    } else {\n      Log.d(\"MyApp\", \"Anonymous user logged in.\");\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Users and Roles to ParseRole in C#\nDESCRIPTION: Demonstrates how to add users and child roles to a ParseRole using the Users and Roles relations.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/roles.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\nvar role = new ParseRole(roleName, roleACL);\nforeach (ParseUser user in usersToAddToRole)\n{\n    role.Users.Add(user);\n}\nforeach (ParseRole childRole in rolesToAddToRole)\n{\n    role.Roles.Add(childRole);\n}\nTask saveTask = role.SaveAsync();\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from LiveQuery Subscriptions in JavaScript\nDESCRIPTION: This code shows how to cancel a LiveQuery subscription when real-time updates are no longer required. Calling 'unsubscribe()' on the previously created 'subscription' object ensures that the client stops receiving all future events for that query. Proper use of this method helps manage network resources and unneeded subscriptions.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/live-query.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nsubscription.unsubscribe();\n```\n\n----------------------------------------\n\nTITLE: Getting Specific Parse Server Features using PHP\nDESCRIPTION: Illustrates using convenience methods (`getHooksFeatures`, `getCloudCodeFeatures`, etc.) provided by `ParseServerInfo` to retrieve specific feature information, and the generic `get()` method to fetch data for any named feature not covered by a dedicated getter. Requires Parse Server v2.1.4+ and PHP SDK v1.4.0+.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/server-info.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nParseServerInfo::getHooksFeatures();\nParseServerInfo::getCloudCodeFeatures();\nParseServerInfo::getLogsFeatures();\nParseServerInfo::getPushFeatures();\nParseServerInfo::getSchemasFeatures();\n\n// additional features can be obtained manually using 'get'\n$feature = ParseServerInfo::get('new-feature');\n```\n\n----------------------------------------\n\nTITLE: Updating Object Property with Parse REST API\nDESCRIPTION: Makes a PUT request to update a specific field (score) on an existing Parse object. Demonstrates how to update a subset of object data while leaving other fields unchanged.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/objects.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"score\":73453}' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/classes/GameScore/Ed1nuqPvcm\n```\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nconnection.connect()\nconnection.request('PUT', '/parse/classes/GameScore/Ed1nuqPvcm', json.dumps({\n    \"score\": 73453\n}), {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\",\n    \"Content-Type\": \"application/json\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Deleting a Parse Object in C++\nDESCRIPTION: Illustrates how to delete a Parse Object from the cloud using its objectId in C++.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/arduino/objects.md#2025-04-22_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\nParseObjectDelete del;\ndel.setClassName(\"Temperature\");\ndel.setObjectId(\"xWMyZ4YEGZ\");\ndel.send();\n```\n\n----------------------------------------\n\nTITLE: Integrating Facebook with Parse JavaScript SDK\nDESCRIPTION: The HTML snippet showcases how to initialize and configure Facebook login using the Parse.FacebookUtils and the Facebook JavaScript SDK. Essential configuration includes setting Parse.initialize and app SDK parameters.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/users.md#2025-04-22_snippet_15\n\nLANGUAGE: HTML\nCODE:\n```\n<script>\n  // Initialize Parse\n  Parse.initialize(\"$PARSE_APPLICATION_ID\", \"$PARSE_JAVASCRIPT_KEY\");\n  Parse.serverURL = 'http://YOUR_PARSE_SERVER:1337/parse';\n\n  window.fbAsyncInit = function() {\n    Parse.FacebookUtils.init({\n      appId      : '{facebook-app-id}', // Facebook App ID\n      status     : true,  // check Facebook Login status\n      cookie     : true,  // enable cookies to allow Parse to access the session\n      xfbml      : true,  // initialize Facebook social plugins on the page\n      version    : 'v2.3' // point to the latest Facebook Graph API version\n    });\n    // Run code after the Facebook SDK is loaded.\n    // ...\n  };\n\n  // Load Facebook SDK\n  (function(d, s, id){\n    var js, fjs = d.getElementsByTagName(s)[0];\n    if (d.getElementById(id)) {return;}\n    js = d.createElement(s); js.id = id;\n    js.src = \"//connect.facebook.net/en_US/sdk.js\";\n    fjs.parentNode.insertBefore(js, fjs);\n  }(document, 'script', 'facebook-jssdk'));\n</script>\n```\n\n----------------------------------------\n\nTITLE: Tracking ParseFile Upload Progress in C#\nDESCRIPTION: Shows how to monitor file upload progress by using a Progress object with the SaveAsync method.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/files.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nbyte[] data = System.Text.Encoding.UTF8.GetBytes(\"Working at Parse is great!\");\nParseFile file = new ParseFile(\"resume.txt\", data);\n\nTask saveTask = file.SaveAsync(new Progress<ParseUploadProgressEventArgs>(e => {\n    // Check e.Progress to get the progress of the file upload\n}));\n```\n\n----------------------------------------\n\nTITLE: Pairing Session with Installation using Parse REST API\nDESCRIPTION: This snippet demonstrates how to associate a Session with an Installation using the Parse REST API. It's particularly useful for IoT device provisioning, where the session token and installation ID need to be linked.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/sessions.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-Client-Key: ${CLIENT_KEY}\" \\\n  -H \"X-Parse-Session-Token: r:aVrtljyb7E8xKo9256gfvp4n2\" \\\n  -H \"X-Parse-Installation-Id: 2d3777a5-f5fc-4caf-80be-73c766235afb\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{}' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/sessions/me\n```\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nconnection.connect()\nconnection.request('PUT', '/parse/sessions/me', '', {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\",\n    \"X-Parse-Session-Token\": \"r:aVrtljyb7E8xKo9256gfvp4n2\",\n    \"Content-Type\": \"application/json\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Counting Reviews in PHP\nDESCRIPTION: Example of counting reviews for a specific movie using the count method in PHP. This approach can be inefficient for large datasets.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_88\n\nLANGUAGE: php\nCODE:\n```\n$query = new ParseQuery(\"Review\");\n\n// $movieId corresponds to a given movie's id\n$query->equalTo(\"movie\", $movieId);\n\n$count = $query.count();\n```\n\n----------------------------------------\n\nTITLE: Deleting Fields from a Parse Schema in PHP\nDESCRIPTION: Shows how to remove a specific field from a Parse Server schema using the `deleteField` method on a `ParseSchema` instance. The changes must be persisted using either `save()` for a new schema or `update()` for an existing one.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/schema.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$mySchema->deleteField('string_field');\n$mySchema->save():\n// or for an existing schema...\n$mySchema->update():\n```\n\n----------------------------------------\n\nTITLE: Read Preference Configuration in Parse PHP\nDESCRIPTION: Demonstrates how to configure read preferences when using MongoDB replica sets.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/queries.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n$query->readPreference(\n  \"SECONDARY\",\n  \"SECONDARY_PREFERRED\",\n  \"NEAREST\"\n);\n```\n\n----------------------------------------\n\nTITLE: Resending User Verification Email with Parse PHP SDK\nDESCRIPTION: This snippet demonstrates how to resend a verification email to a user. It uses the static `ParseUser::requestVerificationEmail()` method, providing the email address associated with the user account. This is useful if the original email was lost or expired. The verification email will only be sent if the user's email address has not already been verified.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/users.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n```php\nParseUser::requestVerificationEmail('email@example.com');\n```\n```\n\n----------------------------------------\n\nTITLE: Array Operations - Java\nDESCRIPTION: Shows how to perform atomic array operations using addAllUnique.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/objects.md#2025-04-22_snippet_14\n\nLANGUAGE: java\nCODE:\n```\ngameScore.addAllUnique(\"skills\", Arrays.asList(\"flying\", \"kungfu\"));\ngameScore.saveInBackground();\n```\n\n----------------------------------------\n\nTITLE: Custom Authentication Backend Module\nDESCRIPTION: Minimal implementation of a custom authentication module for Parse Server's backend.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/users.md#2025-04-22_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nfunction validateAuthData(authData, options) {\n  return Promise.resolve({})\n}\n\nfunction validateAppId(appIds, authData, options) {\n  return Promise.resolve({});\n}\n\nmodule.exports = {\n  validateAppId,\n  validateAuthData,\n};\n```\n\n----------------------------------------\n\nTITLE: Fetching Latest Data\nDESCRIPTION: Example of fetching the latest data for a ParseObject.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/objects.md#2025-04-22_snippet_8\n\nLANGUAGE: cs\nCODE:\n```\nTask<ParseObject> fetchTask = myObject.FetchAsync();\n```\n\n----------------------------------------\n\nTITLE: Saving Parse Objects with Promises in JavaScript\nDESCRIPTION: Example of using Promises to save a Parse.Object, showing the cleaner alternative to callbacks.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/promises.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nobject.save({ key: value }).then(\n  function(object) {\n    // the object was saved.\n  },\n  function(error) {\n    // saving the object failed.\n  });\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Channels in Parse iOS SDK\nDESCRIPTION: Demonstrates how to subscribe an installation to a channel using the Parse iOS SDK. This example shows adding a user as a Giants fan by adding the 'Giants' channel to their installation object.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/push-notifications.md#2025-04-22_snippet_4\n\nLANGUAGE: objective-c\nCODE:\n```\n// When users indicate they are Giants fans, we subscribe them to that channel.\nPFInstallation *currentInstallation = [PFInstallation currentInstallation];\n[currentInstallation addUniqueObject:@\"Giants\" forKey:@\"channels\"];\n[currentInstallation saveInBackground];\n```\n\nLANGUAGE: swift\nCODE:\n```\n// When users indicate they are Giants fans, we subscribe them to that channel.\nlet currentInstallation = PFInstallation.currentInstallation()\ncurrentInstallation.addUniqueObject(\"Giants\", forKey: \"channels\")\ncurrentInstallation.saveInBackground()\n```\n\n----------------------------------------\n\nTITLE: Deleting a Role in Parse Server using Master Key\nDESCRIPTION: This snippet demonstrates how to delete a role from Parse Server using the master key via a DELETE request to the Parse Server API.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/roles.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X DELETE \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-Master-Key: ${MASTER_KEY}\" \\\n  https://YOUR.PARSE-SERVER.HERE/parse/roles/mrmBZvsErB\n```\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nconnection.connect()\nconnection.request('DELETE', '/parse/roles/mrmBZvsErB', '', {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-Master-Key\": \"${MASTER_KEY}\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Fetching Additional Fields Later with Swift\nDESCRIPTION: Swift implementation for fetching remaining fields for objects initially retrieved with limited fields. The fetchInBackground method loads all fields that weren't initially included in the query results.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/queries.md#2025-04-22_snippet_35\n\nLANGUAGE: swift\nCODE:\n```\n// Use array of PFObjects from earlier query\nvar object = objects?[0] as! PFObject\nobject.fetchInBackground(block: { (object: PFObject?, error: Error?) in\n    if let error = error {\n        // The request failed\n        print(error.localizedDescription)\n    } else {\n        // all fields of the object will now be available here.\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating and Adding New File\nDESCRIPTION: GraphQL mutation to create a new GameScore object with a file upload in a single operation. Uses GraphQL Upload for file handling.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/files.md#2025-04-22_snippet_3\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"X-Parse-Application-Id\": \"APPLICATION_ID\",\n  \"X-Parse-Master-Key\": \"MASTER_KEY\" // (optional)\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\nmutation createGameScore($file: Upload!) {\n  createGameScore(\n    input: { fields: { playerName: \"John\", screenshot: { upload: $file } } }\n  ) {\n    gameScore {\n      screenshot {\n        name\n        url\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"data\": {\n    \"createGameScore\": {\n      \"gameScore\": {\n        \"screenshot\": {\n          \"name\": \"6a4d43c3f0512bcb6bf05b6b0e7db47d_file.png\",\n          \"url\": \"http://localhost:1337/graphq/files/APPLICATION_ID/6a4d43c3f0512bcb6bf05b6b0e7db47d_file.png\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing afterDelete Webhook Handler in Ruby\nDESCRIPTION: Ruby implementation of an afterDelete webhook handler that decrements comment counts in an external SQL database when comments are deleted.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/cloudcode/cloud-code-advanced.md#2025-04-22_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nprotect_from_forgery :except => :comments\n\ndef comments\n  if request.headers['X-Parse-Webhook-Key'] != @webhook_key\n    return render :nothing => true\n  end\n\n  comment = params[:object]\n  if params[:triggerName] == \"afterDelete\" && comment[\"className\"] == \"Comment\"\n    @post_model = Post.where(\"id = #{comment['post']}\")\n    @post_model.decrement(:comments_count, 1)\n    @post_model.save!\n    return render :nothing => true\n  end\n\n  render :nothing => true\nend\n```\n\n----------------------------------------\n\nTITLE: Custom Event Tracking with Dimensions in Parse\nDESCRIPTION: Example of tracking custom search events with dimensional data including price range, source, and day type using PFAnalytics trackEvent method.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/analytics.md#2025-04-22_snippet_1\n\nLANGUAGE: objective_c\nCODE:\n```\nNSDictionary *dimensions = @{\n  // Define ranges to bucket data points into meaningful segments\n  @\"priceRange\": @\"1000-1500\",\n  // Did the user filter the query?\n  @\"source\": @\"craigslist\",\n  // Do searches happen more often on weekdays or weekends?\n  @\"dayType\": @\"weekday\"\n};\n// Send the dimensions to Parse along with the 'search' event\n[PFAnalytics trackEvent:@\"search\" dimensions:dimensions];\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet dimensions = [\n  // Define ranges to bucket data points into meaningful segments\n  \"priceRange\": \"1000-1500\",\n  // Did the user filter the query?\n  \"source\": \"craigslist\",\n  // Do searches happen more often on weekdays or weekends?\n  \"dayType\": \"weekday\"\n]\n// Send the dimensions to Parse along with the 'search' event\nPFAnalytics.trackEvent(\"search\", dimensions:dimensions)\n```\n\n----------------------------------------\n\nTITLE: Changing to Parse Server Directory\nDESCRIPTION: Navigates to the Parse Server directory for setup.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/deploying-aws-ubuntu.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ncd parse-server\n```\n\n----------------------------------------\n\nTITLE: Querying Within Geographic Box - C#\nDESCRIPTION: Queries for objects within a rectangular geographic boundary defined by southwest and northeast coordinates.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/geopoints.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar swOfSF = new ParseGeoPoint(37.708813, -122.526398);\nvar neOfSF = new ParseGeoPoint(37.822802, -122.373962);\nvar query = ParseObject.GetQuery(\"PizzaPlaceObject\")\n    .WhereWithinGeoBox(\"location\", swOfSF, neOfSF);\nvar pizzaPlacesInSF = await query.FindAsync();\n```\n\n----------------------------------------\n\nTITLE: Creating ParseGeoPoint in C#\nDESCRIPTION: Demonstrates how to create a new ParseGeoPoint object with specific latitude and longitude coordinates.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/geopoints.md#2025-04-22_snippet_0\n\nLANGUAGE: cs\nCODE:\n```\nvar point = new ParseGeoPoint(40.0, -30.0);\n```\n\n----------------------------------------\n\nTITLE: Querying with Boolean constraints in JavaScript\nDESCRIPTION: Example of a query using a boolean constraint which may not be efficient for indexing because boolean fields typically have low entropy.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nquery.equalTo(\"cheatMode\", false);\n```\n\n----------------------------------------\n\nTITLE: Creating GeoPoint Objects in Parse\nDESCRIPTION: Shows how to create a PFGeoPoint object with specific latitude and longitude coordinates.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/geopoints.md#2025-04-22_snippet_0\n\nLANGUAGE: objective_c\nCODE:\n```\nPFGeoPoint *point = [PFGeoPoint geoPointWithLatitude:40.0 longitude:-30.0];\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet point = PFGeoPoint(latitude:40.0, longitude:-30.0)\n```\n\n----------------------------------------\n\nTITLE: Handling LiveQuery Create Events in Dart\nDESCRIPTION: This snippet demonstrates how to handle LiveQuery create events. It shows how to access the newly created ParseObject and its properties.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dart/queries.md#2025-04-22_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nsubscription.on(LiveQueryEvent.create, (value) {\n    print('*** CREATE ***: ${DateTime.now().toString()}\\n $value ');\n    print((value as ParseObject).objectId);\n    print((value as ParseObject).updatedAt);\n    print((value as ParseObject).createdAt);\n    print((value as ParseObject).get('objectId'));\n    print((value as ParseObject).get('updatedAt'));\n    print((value as ParseObject).get('createdAt'));\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Operations\nDESCRIPTION: JSON configuration example showing how to enable/disable get and find operations for different classes.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/customisation.md#2025-04-22_snippet_7\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"classConfigs\": [\n    {\n      \"className\": \"_User\",\n      \"query\": {\n        \"get\": true,\n        \"find\": false\n      }\n    },\n    {\n      \"className\": \"Review\",\n      \"query\": {\n        \"get\": false,\n        \"find\": true\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Notification Icon in Android Manifest\nDESCRIPTION: Adds metadata to AndroidManifest.xml to specify a custom push notification icon that follows Android's material design guidelines for flat, monochromatic icons.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/push-notifications.md#2025-04-22_snippet_17\n\nLANGUAGE: xml\nCODE:\n```\n<meta-data android:name=\"com.parse.push.notification_icon\" android:resource=\"@drawable/push_icon\"/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Push Notification Callback\nDESCRIPTION: Defines a callback function that handles incoming push notifications. The function receives the client object, error status, and notification message buffer.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/embedded_c/push-notifications.md#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nvoid myPushCallback(ParseClient client, int error, const char *buffer) {\n\tif (error == 0 && buffer != NULL) {\n\t\tprintf(\"push: '%s'\\n\", buffer);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking Events with Parse Analytics in C++\nDESCRIPTION: This code demonstrates how to track a custom event called 'ButtonPress' using the Parse SDK. It creates a tracking event object, sets the event name, and sends the data to Parse's analytics system.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/arduino/analytics.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nParseTrackEvent trackEvent;\ntrackEvent.setEventName(\"ButtonPress\");\ntrackEvent.send();\n```\n\n----------------------------------------\n\nTITLE: Executing Relative Time Queries in Parse PHP\nDESCRIPTION: Demonstrates how to perform queries using relative time expressions to compare date fields. Supports various time units and combinations for precise temporal queries.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/queries.md#2025-04-22_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n// greater than 2 weeks ago\n$query->greaterThanRelativeTime('createdAt', '2 weeks ago');\n\n// less than 1 day in the future\n$query->lessThanRelativeTime('updatedAt', 'in 1 day');\n\n// can make queries to very specific points in time\n$query->greaterThanOrEqualToRelativeTime('createdAt', '1 year 2 weeks 30 days 2 hours 5 minutes 10 seconds ago');\n\n// can make queries based on right now\n// gets everything updated up to this point in time\n$query->lessThanOrEqualToRelativeTime('updatedAt', 'now');\n\n// shorthand keywords work as well\n$query->greaterThanRelativeTime('date', '1 yr 2 wks 30 d 2 hrs 5 mins 10 secs ago');\n```\n\n----------------------------------------\n\nTITLE: Setting Expiration Interval for Push Notification in Parse .NET SDK\nDESCRIPTION: This code shows how to set an expiration interval for a push notification instead of a specific date. It uses the ExpirationInterval property to specify a TimeSpan after which the notification will expire.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/push-notifications.md#2025-04-22_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\nvar push = new ParsePush();\npush.ExpirationInterval = TimeSpan.FromDays(7);\npush.Alert = \"Season tickets on sale until next week!\";\nawait push.SendAsync();\n```\n\n----------------------------------------\n\nTITLE: Rotating Encryption Keys for Specific Files in Parse Server\nDESCRIPTION: Example showing how to rotate encryption keys for a subset of files specified by an array of filenames. This is useful for retrying rotation on files that previously failed to rotate.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/file-adapters.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n//This can take awhile depending on how many files and how large they are. It will attempt to rotate the key of all files in your filesSubDirectory\nconst {rotated, notRotated} =  await api.filesAdapter.rotateEncryptionKey({oldKey: oldKey, fileNames: [\"fileName1.png\",\"fileName2.png\"]});\nconsole.log('Files rotated to newKey: ' + rotated);\nconsole.log('Files that couldn\\'t be rotated to newKey: ' + notRotated);\n```\n\n----------------------------------------\n\nTITLE: Example JSON Structure for a Function Webhook\nDESCRIPTION: Illustrates the JSON representation of a function webhook, containing the `functionName` and the `url` where the webhook resides. This structure is returned by the Hooks API when dealing with function webhooks.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/hooks.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"functionName\": \"foo\", \"url\": \"https://api.example.com/foo\"}\n```\n\n----------------------------------------\n\nTITLE: Adding Existing File to Object\nDESCRIPTION: GraphQL mutation to link an existing file to a GameScore object. Requires file name and URL information.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/files.md#2025-04-22_snippet_2\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"X-Parse-Application-Id\": \"APPLICATION_ID\",\n  \"X-Parse-Master-Key\": \"MASTER_KEY\" // (optional)\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\nmutation createGameScore {\n  createGameScore(\n    input: {\n      fields: {\n        playerName: \"John\"\n        screenshot: {\n          file: {\n            __type: \"File\"\n            name: \"6a4d43c3f0512bcb6bf05b6b0e7db47d_file.png\"\n            url: \"http://localhost:1337/graphq/files/APPLICATION_ID/6a4d43c3f0512bcb6bf05b6b0e7db47d_file.png\"\n          }\n        }\n      }\n    }\n  ) {\n    gameScore {\n      screenshot {\n        name\n        url\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"data\": {\n    \"createGameScore\": {\n      \"gameScore\": {\n        \"screenshot\": {\n          \"name\": \"6a4d43c3f0512bcb6bf05b6b0e7db47d_file.png\",\n          \"url\": \"http://localhost:1337/graphq/files/APPLICATION_ID/6a4d43c3f0512bcb6bf05b6b0e7db47d_file.png\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server for Parse Docs on Windows\nDESCRIPTION: Command to start webpack and Jekyll for local development on Windows systems. This will build the site and start a local server for preview.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev-win\n```\n\n----------------------------------------\n\nTITLE: Implementing a Cloud Function Webhook in Ruby\nDESCRIPTION: Demonstrates how to create a webhook for a Cloud function in a Ruby on Rails environment. It includes authentication checking and handles different function names.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/cloudcode/cloud-code-advanced.md#2025-04-22_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# We need to disable CSRF protection for webhooks to work. Instead we\n# use the webhook key to prove authenticity. protect_from_forgery :except => :index\n\ndef index\n  # Ensure the request is authorized. You can find this key on your app's settings page\n  # and you should ALWAYS validate it in your request.\n  if request.headers['X-Parse-Webhook-Key'] !== @webhook_key\n    return render :json => { :error => \"Request Unauthorized\"}\n  end\n\n  # Check the function name and return a message if it's correct\n  if params[:functionName] == \"helloWorld\"\n    return render :json => { :success => \"Hello World!\" }\n  end\n\n  # Return an error if it's not the function we expected\n  return render :json => { :error => \"Unknown function\"}\nend\n```\n\n----------------------------------------\n\nTITLE: Storing User Preferences on ParseInstallation in C#\nDESCRIPTION: This snippet demonstrates how to store user preferences for push notification categories on a ParseInstallation object. It saves boolean values for different types of notifications a user might want to receive.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/push-notifications.md#2025-04-22_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n// Store the category of push notifications the user would like to receive.\nvar installation = ParseInstallation.CurrentInstallation;\ninstallation[\"scores\"] = true;\ninstallation[\"gameResults\"] = true;\ninstallation[\"injuryReports\"] = true;\ninstallation.SaveAsync();\n```\n\n----------------------------------------\n\nTITLE: Dumping Local Datastore Contents\nDESCRIPTION: Shows how to dump and inspect the contents of local datastore for testing purposes.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/local-datastore.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst LDS = await Parse.dumpLocalDatastore();\n```\n\n----------------------------------------\n\nTITLE: Adding Child Role Relationship using cURL\nDESCRIPTION: Makes a PUT request to Parse Server to establish a parent-child relationship between Moderator and Administrator roles by adding the Administrators role as a child of the Moderators role.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/roles.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-Master-Key: ${MASTER_KEY}\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"roles\": {\n          \"__op\": \"AddRelation\",\n          \"objects\": [\n            {\n              \"__type\": \"Pointer\",\n              \"className\": \"_Role\",\n              \"objectId\": \"<AdministratorsRoleObjectId>\"\n            }\n          ]\n        }\n      }' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/roles/<ModeratorsRoleObjectId>\n```\n\n----------------------------------------\n\nTITLE: Sending Push Notification to iOS Devices with Parse Server REST API\nDESCRIPTION: This snippet shows how to send a push notification specifically to iOS devices using Parse Server's REST API. It includes the necessary headers and JSON payload for targeting iOS devices.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/push-notifications.md#2025-04-22_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"where\": {\n          \"deviceType\": \"ios\"\n        },\n        \"data\": {\n          \"alert\": \"Your suitcase has been filled with tiny apples!\"\n        }\n      }' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/push\n```\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nconnection.connect()\nconnection.request('POST', '/parse/push', json.dumps({\n    \"where\": {\n        \"deviceType\": \"ios\"\n    },\n    \"data\": {\n        \"alert\": \"Your suitcase has been filled with tiny apples!\"\n    }\n}), {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\",\n    \"Content-Type\": \"application/json\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Extracting Schema Definitions using Parse JavaScript SDK\nDESCRIPTION: Code snippet to retrieve all schema definitions from Parse Server using the Parse JavaScript SDK. This code is executed in the Parse Dashboard's JS Console to export the current database schema structure including CLPs, indexes, and fields.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/defined-schema/how-to-use-on-existing-parse-server.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst schemas = await Parse.Schema.all();\nconsole.log(JSON.stringify(schemas));\n```\n\n----------------------------------------\n\nTITLE: Encoding Many-to-Many Relations in Parse Server\nDESCRIPTION: Shows the format for encoding Relation objects for many-to-many relationships between Parse objects using the __type field and className.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/objects.md#2025-04-22_snippet_35\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"__type\": \"Relation\",\n  \"className\": \"GameScore\"\n}\n```\n\n----------------------------------------\n\nTITLE: Logging In a Parse User with GET Method\nDESCRIPTION: This code demonstrates how to log in a user using the Parse.User.logIn method with the GET HTTP method instead of the default POST method by setting the usePost option to false.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/users.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst user = await Parse.User.logIn(\"myname\", \"mypass\", { usePost: false });\n// Do stuff after successful login.\n```\n\n----------------------------------------\n\nTITLE: Configuring Social Login\nDESCRIPTION: Shows how to enable Facebook and Twitter login options and set Facebook permissions\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/user-interface.md#2025-04-22_snippet_2\n\nLANGUAGE: objective-c\nCODE:\n```\nPFLogInViewController *logInController = [[PFLogInViewController alloc] init];\nlogInController.delegate = self;\nlogInController.facebookPermissions = @[ @\"friends_about_me\" ];\n[self presentViewController:logInController animated:YES completion:nil];\n```\n\nLANGUAGE: swift\nCODE:\n```\nvar logInController = PFLogInViewController()\nlogInController.delegate = self\nlogInController.facebookPermissions = [ \"friends_about_me\" ]\nself.present(logInController, animated:true, completion:nil)\n```\n\n----------------------------------------\n\nTITLE: Facebook Authentication Data Structure for User Linking\nDESCRIPTION: JSON structure for linking a Parse user with Facebook. Requires the Facebook user ID, access token, and expiration date for the authentication data.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/users.md#2025-04-22_snippet_20\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"facebook\": {\n    \"id\": \"user's Facebook id number as a string\",\n    \"access_token\": \"an authorized Facebook access token for the user\",\n    \"expiration_date\": \"token expiration date of the format: yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Parse Server Directory\nDESCRIPTION: Creates a directory for Parse Server files and configurations.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/deploying-aws-ubuntu.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nmkdir parse-server\n```\n\n----------------------------------------\n\nTITLE: Create Mutation Response Example for GameScore - JSONC\nDESCRIPTION: Shows a typical JSON response to a successful createGameScore mutation. The response returns the created object's fields, timestamps, and access permissions. This can be used to validate operation success and update client-side state immediately.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/objects.md#2025-04-22_snippet_2\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"data\": {\n    \"createGameScore\": {\n      \"clientMutationId\": \"anUniqueId\",\n      \"gameScore\": {\n        \"id\": \"R2FtZVNjb3JlOjZtdGlNcmtXNnY=\",\n        \"updatedAt\": \"2022-01-01T12:23:45.678Z\",\n        \"createdAt\": \"2022-01-01T12:23:45.678Z\",\n        \"playerName\": \"Sean Plott\",\n        \"score\": 1337,\n        \"cheatMode\": false,\n        \"ACL\": {\n          \"public\": {\n            \"write\": true,\n            \"read\": true\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Parse Object Creation Response Body - JSON Example - jsonc\nDESCRIPTION: This JSON example demonstrates the server response body after a successful object creation using the Parse REST API. The body contains the object's unique objectId and creation timestamp. These fields are meant for immediate use in client-side tracking or subsequent API operations on the new object.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/objects.md#2025-04-22_snippet_8\n\nLANGUAGE: jsonc\nCODE:\n```\n{\\n  \"createdAt\": \"2022-01-01T12:23:45.678Z\",\\n  \"objectId\": \"Ed1nuqPvcm\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Config with Fallback in C#\nDESCRIPTION: Example showing how to fetch config with fallback to cached version and default values when needed.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/config.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nParseConfig.GetAsync().ContinueWith(t =>\n{\n  ParseConfig config = null;\n  if (t.isFaulted) {\n    Console.WriteLine(\"Failed to fetch. Using Cached Config.\");\n    config = ParseConfig.CurrentConfig;\n  } else {\n    config = t.Result;\n  }\n\n  string welcomeMessage = null;\n  bool result = config.TryGetValue(\"welcomeMessage\", out welcomeMessage);\n  if (!result) {\n    Console.WriteLine(\"Falling back to default message.\");\n    welcomeMessage = \"Welcome!\";\n  }\n\n  Console.WriteLine(String.Format(\"Welcome Messsage From Config = {0}\", welcomeMessage));\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Parse Object - Python Example - python\nDESCRIPTION: This Python code connects to the Parse server via HTTPS and sends a POST request to create a new GameScore object. Dependencies are http.client and json. Key parameters include server URL, required headers, and a JSON-encoded dictionary for the object. Upon success, the response is parsed and printed, containing the new object's ID and creation timestamp.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/objects.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\\nimport json\\n\\n\\nconnection = http.client.HTTPSConnection('<span class=\\\"custom-parse-server-url\\\">YOUR.PARSE-SERVER.HERE</span>', 443)\\nconnection.connect()\\nconnection.request('POST', '<span class=\\\"custom-parse-server-mount\\\">/parse/</span>classes/GameScore', json.dumps({\\n    \"score\": 1337,\\n    \"playerName\": \"Sean Plott\",\\n    \"cheatMode\": False\\n}), {\\n    \"X-Parse-Application-Id\": \"<span class=\\\"custom-parse-server-appid\\\">${APPLICATION_ID}</span>\",\\n    \"X-Parse-REST-API-Key\": \"<span class=\\\"custom-parse-server-restapikey\\\">${REST_API_KEY}</span>\",\\n    \"Content-Type\": \"application/json\"\\n})\\nresults = json.loads(connection.getresponse().read())\\nprint results\n```\n\n----------------------------------------\n\nTITLE: Skipping Results in ParseQuery in PHP\nDESCRIPTION: By using the `skip` method, this snippet demonstrates how to bypass a specified number of query results, beneficial for pagination practices. No constraint on the maximum skip value exists on Parse Server.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/queries.md#2025-04-22_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n$query->skip(10); // skip the first 10 results\n```\n\n----------------------------------------\n\nTITLE: Establishing Role Hierarchy in C#\nDESCRIPTION: Shows how to create a parent-child relationship between roles by adding one role as a child of another.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/roles.md#2025-04-22_snippet_4\n\nLANGUAGE: cs\nCODE:\n```\nParseRole administrators = /* Your \"Administrators\" role */;\nParseRole moderators = /* Your \"Moderators\" role */;\nmoderators.Roles.Add(administrators);\nTask saveTask = moderators.SaveAsync();\n```\n\n----------------------------------------\n\nTITLE: Configuring Login Fields\nDESCRIPTION: Demonstrates how to configure which login fields and buttons appear in the login interface\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/user-interface.md#2025-04-22_snippet_1\n\nLANGUAGE: objective-c\nCODE:\n```\nlogInController.fields = (PFLogInFieldsUsernameAndPassword\n                           | PFLogInFieldsLogInButton\n                           | PFLogInFieldsSignUpButton\n                           | PFLogInFieldsPasswordForgotten\n                           | PFLogInFieldsDismissButton);\n```\n\nLANGUAGE: swift\nCODE:\n```\nlogInController.fields = [PFLogInFields.usernameAndPassword,\n                          PFLogInFields.logInButton,\n                          PFLogInFields.signUpButton,\n                          PFLogInFields.passwordForgotten,\n                          PFLogInFields.dismissButton]\n```\n\n----------------------------------------\n\nTITLE: Decrementing Counters in Parse Objects\nDESCRIPTION: Shows how to atomically decrement a numeric field using the Increment operation with a negative value. This example decreases the score field by 1.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/objects.md#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"score\":{\"__op\":\"Increment\",\"amount\":-1}}' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/classes/GameScore/Ed1nuqPvcm\n```\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nconnection.connect()\nconnection.request('PUT', '/parse/classes/GameScore/Ed1nuqPvcm', json.dumps({\n    \"score\": {\n        \"__op\": \"Increment\",\n        \"amount\": -1\n    }\n}), {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\",\n    \"Content-Type\": \"application/json\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Deleting a 'beforeDelete' Trigger Webhook using Python\nDESCRIPTION: This snippet shows how to delete a 'beforeDelete' trigger webhook for the 'Tournament' class using Python. It establishes an HTTPS connection and sends a PUT request with the 'Delete' operation.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/hooks.md#2025-04-22_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nconnection.connect()\nconnection.request('PUT', '/parse/hooks/triggers/Tournament/beforeDelete', json.dumps({\n    \"__op\": \"Delete\"\n}), {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-Master-Key\": \"${MASTER_KEY}\",\n    \"Content-Type\": \"application/json\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Updating ParseObjects in PHP\nDESCRIPTION: This snippet illustrates fetching existing ParseObjects from Parse Cloud using a ParseQuery, updating fields, and managing changes with save operations.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/objects.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$query = new ParseQuery(\"GameScore\");\ntry {\n  $gameScore = $query->get(\"xWMyZ4YEGZ\");\n  // The object was retrieved successfully.\n} catch (ParseException $ex) {\n  // The object was not retrieved successfully.\n  // error is a ParseException with an error code and message.\n}\n\n$score = $gameScore->get(\"score\");\n$playerName = $gameScore->get(\"playerName\");\n$cheatMode = $gameScore->get(\"cheatMode\");\n$gameScore->fetch();\nif (!$gameScore->isDataAvailable()) {\n  $gameScore->fetch();\n}\n\n// Create the object.\n$gameScore = new ParseObject(\"GameScore\");\n\n$gameScore->set(\"score\", 1337);\n$gameScore->set(\"playerName\", \"Sean Plott\");\n$gameScore->set(\"cheatMode\", false);\n$gameScore->setArray(\"skills\", [\"pwnage\", \"flying\"]);\n\n$gameScore->save();\n// Now let's update it with some new data. In this case, only cheatMode and score\n// will get sent to the cloud. playerName hasn't changed.\n$gameScore->set(\"cheatMode\", true);\n$gameScore->set(\"score\", 1338);\n$gameScore->save();\n```\n\n----------------------------------------\n\nTITLE: Query Objects Created After a Specific Date with cURL\nDESCRIPTION: Demonstrates how to use a Date object in a query filter to retrieve objects created after a specific time using the cURL command line tool.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/objects.md#2025-04-22_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -G \\\n  --data-urlencode 'where={\"createdAt\":{\"$gte\":{\"__type\":\"Date\",\"iso\":\"2022-01-01T12:23:45.678Z\"}}}' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/classes/GameScore\n```\n\n----------------------------------------\n\nTITLE: Using afterDelete with Predefined Classes in Parse JavaScript SDK\nDESCRIPTION: This snippet demonstrates how to use the afterDelete trigger with predefined classes like Parse.User in the Parse JavaScript SDK. Instead of passing a string as the first argument, you pass the class itself.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/cloudcode/cloud-code.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nParse.Cloud.afterDelete(Parse.User, async (request) => {\n    // code here\n})\n```\n\n----------------------------------------\n\nTITLE: Using Comparison Operators in Parse Queries for Android\nDESCRIPTION: This snippet demonstrates how to use comparison operators (less than, less than or equal to, greater than, greater than or equal to) in Parse queries for numeric fields.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/queries.md#2025-04-22_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n// Restricts to wins < 50\nquery.whereLessThan(\"wins\", 50);\n\n// Restricts to wins <= 50\nquery.whereLessThanOrEqualTo(\"wins\", 50);\n\n// Restricts to wins > 50\nquery.whereGreaterThan(\"wins\", 50);\n\n// Restricts to wins >= 50\nquery.whereGreaterThanOrEqualTo(\"wins\", 50);\n```\n\n----------------------------------------\n\nTITLE: Session Token Authentication in Parse Server GraphQL\nDESCRIPTION: Shows how to authenticate operations using a session token and retrieve the associated user information.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/users.md#2025-04-22_snippet_3\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"X-Parse-Application-Id\": \"APPLICATION_ID\",\n  \"X-Parse-Session-Token\": \"r:b0dfad1eeafa4425d9508f1c0a15c3fa\"\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\nquery viewer {\n  viewer {\n    sessionToken\n    user {\n      username\n      email\n    }\n  }\n}\n```\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"data\": {\n    \"viewer\": {\n      \"sessionToken\": \"r:b0dfad1eeafa4425d9508f1c0a15c3fa\",\n      \"user\": {\n        \"username\": \"johndoe\",\n        \"email\": \"john.doe@email.com\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Structure for a Cloud Code Trigger\nDESCRIPTION: Illustrates the JSON representation of a cloud code trigger, containing the target `className` and the `triggerName`. Unlike trigger webhooks, it does not include a URL. Trigger names can be 'beforeSave', 'afterSave', 'beforeDelete', or 'afterDelete'.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/hooks.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\"className\": \"score\", \"triggerName\": \"beforeSave\"}\n```\n\n----------------------------------------\n\nTITLE: Updating Parse Config via REST API - JavaScript (Node.js)\nDESCRIPTION: Uses the Node.js 'request' module to send a PUT request and update configuration parameters in Parse Server. Requires that Parse applicationId, masterKey, and serverURL are set; master key is mandatory for config modification. The snippet constructs the request, sets appropriate headers, and sends the config parameter updates as a JSON body.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/config.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar request = require('request');\nreturn request({\n  method: 'PUT',\n  url: Parse.serverURL + '/config',\n  headers: {\n    'X-Parse-Application-Id': Parse.applicationId,\n    'X-Parse-Master-Key': Parse.masterKey\n  },\n  json: true,\n  body: {\n    params: { winningNumber: 43 }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Registering for Push Notifications (Duplicate) with Event Handler - Xamarin (C#)\nDESCRIPTION: C# code to register user notification settings and remote notifications in Xamarin.iOS along with a push event handler for Parse notifications. Designed for use in the app delegate. The snippet relies on Xamarin.iOS and Parse SDK, and expects app permissions for notifications. Handles both registration and incoming push events.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/push-notifications-ios.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// Xamarin\\nUIUserNotificationType notificationTypes = (UIUserNotificationType.Alert |\\n                                            UIUserNotificationType.Badge |\\n                                            UIUserNotificationType.Sound);\\nvar settings = UIUserNotificationSettings.GetSettingsForTypes(notificationTypes,\\n                                                              new NSSet(new string[] { }));\\nUIApplication.SharedApplication.RegisterUserNotificationSettings(settings);\\nUIApplication.SharedApplication.RegisterForRemoteNotifications();\\n\\n// Handle Push Notifications\\nParsePush.ParsePushNotificationReceived += (object sender, ParsePushNotificationEventArgs args) => {\\n  // Process Push Notification payload here.\\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Restrictive Default ACL in Parse iOS SDK\nDESCRIPTION: This snippet demonstrates how to create a highly restrictive security model where even the current user is denied access. This is useful for applications that log data to Parse without providing user access to that data.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/users.md#2025-04-22_snippet_12\n\nLANGUAGE: objective_c\nCODE:\n```\n[PFACL setDefaultACL:[PFACL ACL] withAccessForCurrentUser:NO];\n```\n\nLANGUAGE: swift\nCODE:\n```\nPFACL.setDefaultACL(PFACL.ACL(), withAccessForCurrentUser:false)\n```\n\n----------------------------------------\n\nTITLE: Inefficient Query with Case-Insensitive Regex in JavaScript\nDESCRIPTION: This snippet demonstrates an inefficient way to query for player names using a case-insensitive regular expression in JavaScript. This approach is not recommended for performance reasons.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nquery.matches(\"playerName\", \"Michael\", \"i\");\n```\n\n----------------------------------------\n\nTITLE: Tracking App Opens with Parse Analytics in C#\nDESCRIPTION: This simple snippet shows how to track app opens with Parse Analytics. This is mentioned as an alternative to tracking push opens which is not supported on Unity.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/push-notifications.md#2025-04-22_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\nParseAnalytics.TrackAppOpenedAsync();\n```\n\n----------------------------------------\n\nTITLE: Sending Push Notification to Windows Phone Devices with Parse Server REST API\nDESCRIPTION: This snippet demonstrates how to send a push notification specifically to Windows Phone devices using Parse Server's REST API. It includes the necessary headers and JSON payload for targeting Windows Phone devices.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/push-notifications.md#2025-04-22_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"where\": {\n          \"deviceType\": \"winphone\"\n        },\n        \"data\": {\n          \"alert\": \"Your suitcase is very hip; very metro.\"\n        }\n      }' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/push\n```\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nconnection.connect()\nconnection.request('POST', '/parse/push', json.dumps({\n    \"where\": {\n        \"deviceType\": \"winphone\"\n    },\n    \"data\": {\n        \"alert\": \"Your suitcase is very hip; very metro.\"\n    }\n}), {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\",\n    \"Content-Type\": \"application/json\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Starting Parse Server in Background\nDESCRIPTION: Starts Parse Server in the background using nohup to keep it running after terminal closes.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/deploying-aws-ubuntu.md#2025-04-22_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nnohup parse-server config.json &\n```\n\n----------------------------------------\n\nTITLE: Displaying Image from ParseFileBase in Flutter\nDESCRIPTION: This snippet demonstrates how to display an image from a ParseFileBase object in a Flutter widget. It uses a FutureBuilder to handle the asynchronous download of the file and displays different image widgets based on the platform (web or mobile).\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dart/files.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nWidget buildImage(ParseFileBase image){\n  return FutureBuilder<ParseFileBase>(\n    future: image.download(),\n    builder: (BuildContext context,\n    AsyncSnapshot<ParseFileBase> snapshot) {\n      if (snapshot.hasData) {\n        if (kIsWeb) {\n          return Image.memory((snapshot.data as ParseWebFile).file);\n        } else {\n          return Image.file((snapshot.data as ParseFile).file);\n        }\n      } else {\n        return CircularProgressIndicator();\n      }\n    },\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Inefficient User Query with NotContainedIn in PHP\nDESCRIPTION: This snippet shows an inefficient way to query for active users using the NotContainedIn condition in PHP. This approach is not recommended for performance reasons.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_38\n\nLANGUAGE: php\nCODE:\n```\n$query = new ParseQuery(\"_User\");\n\n$query->notContainedIn(\"state\", [\"Invited\", \"Blocked\"]);\n```\n\n----------------------------------------\n\nTITLE: Querying ParseObject Subclasses\nDESCRIPTION: Shows how to create and execute queries specifically for ParseObject subclasses using ParseQuery<T>.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/objects.md#2025-04-22_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\nvar query = new ParseQuery<Armor>()\n    .WhereLessThanOrEqualTo(\"rupees\", ((Player)ParseUser.CurrentUser).Rupees);\nquery.FindAsync().ContinueWith(t =>\n{\n    IEnumerable<Armor> result = t.Result;\n});\n```\n\n----------------------------------------\n\nTITLE: Executing a Basic GraphQL Query\nDESCRIPTION: Simple GraphQL query that calls the custom hello resolver to retrieve the greeting message.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/customisation.md#2025-04-22_snippet_14\n\nLANGUAGE: graphql\nCODE:\n```\nquery hello {\n  hello\n}\n```\n\n----------------------------------------\n\nTITLE: Parse.Object Record JSON After Save (Parse Data Browser Example)\nDESCRIPTION: Shows the JSON structure returned by Parse Cloud after saving a new object. It includes default fields like objectId, createdAt, and updatedAt, alongside custom fields. Dependencies: none; this is purely a structural illustration. Data is compatible with JSON and may be used in API responses or as a reference for expected results.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/objects.md#2025-04-22_snippet_8\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"objectId\": \"xWMyZ4YEGZ\",\n  \"score\": 1337,\n  \"playerName\": \"Sean Plott\",\n  \"cheatMode\": false,\n  \"createdAt\":\"2022-01-01T12:23:45.678Z\",\n  \"updatedAt\":\"2022-01-01T12:23:45.678Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a ParseRole with PHP\nDESCRIPTION: This PHP snippet demonstrates how to create a new ParseRole with a specified name and access control list (ACL). It includes a step to ensure public read access and shows how to save the role. Dependencies include Parse PHP SDK and a properly configured Parse server setup.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/roles.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n// By specifying no write privileges for the ACL, we can ensure the role cannot be altered.\n$roleACL = new ParseACL();\n$roleACL->setPublicReadAccess(true);\n$role = ParseRole::createRole(\"Administrator\", $roleACL);\n$role->save();\n?>\n```\n\n----------------------------------------\n\nTITLE: Performing User Impersonation with Python in Parse\nDESCRIPTION: This Python code example shows how to use the /loginAs endpoint to impersonate a user. It makes an HTTPS request with the required headers including the master key to create a session for the specified user.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/users.md#2025-04-22_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\nimport urllib.parse\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nparams = urllib.parse.urlencode({\"userId\": \"abc123\"})\nconnection.connect()\nconnection.request('POST', '/parse/loginAs?%s' % params, '', {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\",\n    \"X-Parse-Master-Key\": \"${MASTER_KEY}\",\n    \"X-Parse-Revocable-Session\": \"1\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Creating a GeoPoint in Parse using PHP\nDESCRIPTION: This code snippet demonstrates how to create a ParseGeoPoint with specific latitude and longitude in PHP. The point is initialized with latitude 40.0 and longitude -30.0. Once created, it can be stored in a ParseObject as a location field.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/geopoints.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$point = new ParseGeoPoint(40.0, -30.0);\n```\n\n----------------------------------------\n\nTITLE: Creating a Parse.GeoPoint in JavaScript\nDESCRIPTION: Demonstrates how to create a Parse.GeoPoint object with specified latitude and longitude coordinates.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/geopoints.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst point = new Parse.GeoPoint({latitude: 40.0, longitude: -30.0});\n```\n\n----------------------------------------\n\nTITLE: Implementing Signup Delegate Methods in Parse iOS SDK\nDESCRIPTION: Implementation of PFSignUpViewController delegate methods to handle successful signup and cancellation events. These methods dismiss the view controller when the user either completes signup or cancels the process.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/user-interface.md#2025-04-22_snippet_9\n\nLANGUAGE: objective_c\nCODE:\n```\n- (void)signUpViewController:(PFSignUpViewController *)signUpController didSignUpUser:(PFUser *)user {\n    [self dismissViewControllerAnimated:YES completion:nil];\n}\n\n- (void)signUpViewControllerDidCancelSignUp:(PFSignUpViewController *)signUpController {\n    [self dismissViewControllerAnimated:YES completion:nil];\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\nfunc signUpViewController(signUpController: PFSignUpViewController, didSignUpUser user: PFUser) -> Void {\n\tself.dismiss(animated: true, completion: nil)\n}\n\nfunc signUpViewControllerDidCancelSignUp(signUpController: PFSignUpViewController) -> Void {\n\tself.dismiss(animated: true, completion: nil)\n}\n```\n\n----------------------------------------\n\nTITLE: Facebook Login with Parse SDK for C#\nDESCRIPTION: Shows how to implement Facebook login using Parse SDK. This method logs in or signs up a user using their Facebook credentials, creating a new ParseUser if necessary.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/users.md#2025-04-22_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nTask<ParseUser> logInTask = ParseFacebookUtils.LogInAsync(userId, accessToken, tokenExpiration);\n```\n\n----------------------------------------\n\nTITLE: Basic ParseObject Structure Example - JavaScript\nDESCRIPTION: Example showing the basic structure of a ParseObject representing a game score with primitive data types.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/objects.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscore: 1337, playerName: \"Sean Plott\", cheatMode: false\n```\n\n----------------------------------------\n\nTITLE: ParseLiveList with Custom Animation Duration\nDESCRIPTION: Shows how to customize the animation duration for ParseLiveList updates.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dart/queries.md#2025-04-22_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nParseLiveListWidget<ParseObject>(\n  query: query,\n  childBuilder: childBuilder,\n  duration: Duration(seconds: 1),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating ParseGeoPoint - C#\nDESCRIPTION: Creates a new ParseGeoPoint object with specified latitude and longitude coordinates and stores it in a Parse object.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/geopoints.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar point = new ParseGeoPoint(40.0, -30.0);\n```\n\nLANGUAGE: csharp\nCODE:\n```\nplaceObject[\"location\"] = point;\n```\n\n----------------------------------------\n\nTITLE: Handling Errors when Fetching Parse Objects\nDESCRIPTION: This code shows how to properly handle errors when fetching Parse objects. It uses the ContinueWith method to check for task faults, which indicate errors during the operation.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/handling-errors.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nParseObject.GetQuery(\"Note\").GetAsync(someObjectId).ContinueWith(t =>\n{\n    if (t.IsFaulted)\n    {\n        // One or more errors occurred.\n    }\n    else\n    {\n        // Everything went fine!\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Navigating to PostgreSQL Configuration Directory\nDESCRIPTION: Changes to the PostgreSQL configuration directory to edit configuration files.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/deploying-aws-ubuntu.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncd /etc/postgresql/14/main/\n```\n\n----------------------------------------\n\nTITLE: Running Parse Dashboard with GraphQL Support\nDESCRIPTION: Command to install and run Parse Dashboard with GraphQL Playground integration.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/getting-started.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install -g parse-dashboard\n$ parse-dashboard --dev --appId APPLICATION_ID --masterKey MASTER_KEY --serverURL \"http://localhost:1337/parse\" --graphQLServerURL \"http://localhost:1337/graphql\" --appName MyAppName\n```\n\n----------------------------------------\n\nTITLE: Adding Maven Repository for Parse SDK in Root build.gradle\nDESCRIPTION: Adds JitPack repository to the project's root build.gradle file to enable downloading the Parse SDK for Android.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/getting-started.md#2025-04-22_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\nallprojects {\n\trepositories {\n\t\t...\n\t\tmaven { url \"https://jitpack.io\" }\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Counting Objects with ParseQuery in Java\nDESCRIPTION: This code snippet counts the number of objects matching a ParseQuery condition using the Parse SDK in Java. It uses asynchronous operation with a callback to handle the count result, dependent on Parse SDK. The snippet showcases how to filter results and log the count asynchronously.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/queries.md#2025-04-22_snippet_26\n\nLANGUAGE: Java\nCODE:\n```\nParseQuery<ParseObject> query = ParseQuery.getQuery(\"GameScore\");\nquery.whereEqualTo(\"playerName\", \"Sean Plott\");\nquery.countInBackground(new CountCallback() {\n  public void done(int count, ParseException e) {\n    if (e == null) {\n      // The count request succeeded. Log the count\n      Log.d(\"score\", \"Sean has played \" + count + \" games\");\n    } else {\n      // The request failed\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination with setSkip in Parse Queries for Android\nDESCRIPTION: This snippet shows how to skip the first N results in a query, which is useful for implementing pagination in conjunction with setLimit.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/queries.md#2025-04-22_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nquery.setSkip(10); // skip the first 10 results\n```\n\n----------------------------------------\n\nTITLE: Checking if Current User is Anonymous in ParseUser for Java\nDESCRIPTION: This code demonstrates how to check if the current user is an anonymous user using ParseAnonymousUtils.isLinked(). It's useful for determining whether to show sign-up or log-out options.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/users.md#2025-04-22_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nif (ParseAnonymousUtils.isLinked(ParseUser.getCurrentUser())) {\n  enableSignUpButton();\n} else {\n  enableLogOutButton();\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling with Nested Callbacks in Parse JavaScript SDK\nDESCRIPTION: Example showing the complexity of error handling when using nested callbacks for multi-step operations.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/promises.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nParse.User.logIn(\"user\", \"pass\", {\n  success: function(user) {\n    query.find({\n      success: function(results) {\n        results[0].save({ key: value }, {\n          success: function(result) {\n            // the object was saved.\n          },\n          error: function(result, error) {\n            // An error occurred.\n          }\n        });\n      },\n      error: function(error) {\n        // An error occurred.\n      }\n    });\n  },\n  error: function(user, error) {\n    // An error occurred.\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Counting Reviews in Swift\nDESCRIPTION: Example of counting reviews for a specific movie using the countObjectsInBackgroundWithBlock method in Swift. This approach can be inefficient for large datasets.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_85\n\nLANGUAGE: swift\nCODE:\n```\nlet query = PFQuery.queryWithClassName(\"Review\")\nquery.whereKey(\"movie\", equalTo: movie)\nquery.countObjectsInBackgroundWithBlock {\n  (number, error) in\n  if !error {\n    // Request succeeded\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Installation Objects with REST API in Python\nDESCRIPTION: Python implementation to delete an installation object from Parse Server. Uses the Master Key for authentication since this operation isn't available in client SDKs.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/push-notifications.md#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nconnection.connect()\nconnection.request('DELETE', '/parse/installations/mrmBZvsErB', '', {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-Master-Key\": \"${MASTER_KEY}\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Verifying Parse Server Startup Log Output (Plaintext)\nDESCRIPTION: Shows the expected log message confirming that the parse-server-example application has successfully started and is running on the specified port (3000 in this case) within the Glitch environment. This message can be found in the Glitch Logs section after deployment.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/deploying-glitch-mlab.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nparse-server-example running on port 3000.\n```\n\n----------------------------------------\n\nTITLE: Demonstrating ParseUser Security Policy in C#\nDESCRIPTION: Illustrates the security policy for ParseUser objects where authenticated users can modify their own data, but unauthenticated access is restricted to read-only operations.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/users.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nParseUser user = null;\nParseUser.LogInAsync(\"my_username\", \"my_password\").ContinueWith(t =>\n{\n    user = t.Result;\n    user.Username = \"my_new_username\"; // attempt to change username\n    return user.SaveAsync();\n}).Unwrap().ContinueWith(t =>\n{\n    if (!t.IsFaulted)\n    {\n        // This succeeds, since this user was authenticated\n        // on the device\n\n        ParseUser.LogOut();\n    }\n}).ContinueWith(t =>\n{\n    // Get the user from a non-authenticated method\n    return ParseUser.Query.GetAsync(user.ObjectId);\n}).Unwrap().ContinueWith(t =>\n{\n    user = t.Result;\n    user.Username = \"another_username\";\n\n    return user.SaveAsync();\n}).Unwrap().ContinueWith(t =>\n{\n    if (t.IsFaulted)\n    {\n        // This will always fail, since the ParseUser is not authenticated\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Performing Actions After Logout with afterLogout\nDESCRIPTION: This example demonstrates how to use the afterLogout trigger to perform actions after a user logs out. It updates the user's online status to false when they log out.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/cloudcode/cloud-code.md#2025-04-22_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nParse.Cloud.afterLogout(async request => {\n  const { object: session }  = request;\n  const user = session.get('user');\n  user.set('isOnline', false);\n  user.save(null,{useMasterKey:true});\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Parse Relations\nDESCRIPTION: Demonstrates how to remove a relation between Parse objects.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dart/queries.md#2025-04-22_snippet_20\n\nLANGUAGE: dart\nCODE:\n```\ndietPlan.removeRelation('fruits', [ParseObject(\"Fruits\")..set(\"objectId\", \"XGadzYxnac\")]);\n```\n\n----------------------------------------\n\nTITLE: Setting Session Token in Parse for Embedded C\nDESCRIPTION: This snippet demonstrates how to set a session token for user authentication in Parse. The token is associated with the current installation if not already associated.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/embedded_c/users.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nchar token[] = \"r:olqZkbv8fefVFNjWegyIXIggd\";\nparseSetSessionToken(client, token);\n```\n\n----------------------------------------\n\nTITLE: Optimized User Query with ContainedIn in Java\nDESCRIPTION: This snippet shows how to perform an optimized query for users with specific states using the ContainedIn condition in Java.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_26\n\nLANGUAGE: java\nCODE:\n```\nquery.whereContainedIn(\"state\", Arrays.asList(\"SignedUp\", \"Verified\"));\n```\n\n----------------------------------------\n\nTITLE: Proper Error Handling for Parse Queries\nDESCRIPTION: Demonstrates the recommended way to handle Parse errors using try-catch blocks and checking specific error codes for appropriate error handling.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/handling-errors.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\ntry\n{\n    await ParseObject.GetQuery(\"Note\").GetAsync(someObjectId);\n    // Everything went fine!\n}\ncatch (ParseException e)\n{\n    if (e.Code == ParseException.ErrorCode.ObjectNotFound)\n    {\n        // Uh oh, we couldn't find the object!\n    }\n    else\n    {\n        // Some other error occurred\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Client (Curl/Stream) in Parse PHP SDK\nDESCRIPTION: Demonstrates how to explicitly set the underlying HTTP client used by the Parse PHP SDK via `ParseClient::setHttpClient`. It shows setting the default `ParseCurlHttpClient` and the alternative `ParseStreamHttpClient`. Note that the Stream client requires the 'allow_url_fopen' directive to be enabled in php.ini.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/setup.md#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// set curl http client (default if none set)\nParseClient::setHttpClient(new ParseCurlHttpClient());\n\n// set stream http client\n// ** requires 'allow_url_fopen' to be enabled in php.ini **\nParseClient::setHttpClient(new ParseStreamHttpClient());\n```\n\n----------------------------------------\n\nTITLE: Regex-Based Filtering in Parse PHP\nDESCRIPTION: Shows how to apply a regular expression constraint in Parse PHP SDK to find all objects with playerName fields beginning with 'Michael'. Uses the matches method, with the recommended use of anchored queries for performance.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_58\n\nLANGUAGE: php\nCODE:\n```\n$query->matches(\"playerName\", \"^Michael\");\n```\n\n----------------------------------------\n\nTITLE: Accessing Special Fields - Java\nDESCRIPTION: Shows how to access special system fields from a ParseObject.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/objects.md#2025-04-22_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nString objectId = gameScore.getObjectId();\nDate updatedAt = gameScore.getUpdatedAt();\nDate createdAt = gameScore.getCreatedAt();\nParseACL acl = gameScore.getACL();\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Parse Object in C++\nDESCRIPTION: Demonstrates how to retrieve a Parse Object using its objectId and access its data in C++.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/arduino/objects.md#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nParseObjectGet get;\nget.setClassName(\"Temperature\");\nget.setObjectId(\"xWMyZ4YEGZ\");\nParseResponse response = get.send();\ndouble temp = response.getDouble(\"temperature\");\nSerial.println(temp);\nresponse.close(); // Free the resource\n```\n\n----------------------------------------\n\nTITLE: Query Result Ordering\nDESCRIPTION: Shows how to sort query results using multiple fields in different orders\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/queries.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar query = ParseObject.GetQuery(\"GameScore\")\n    .OrderBy(\"score\")\n    .ThenByDescending(\"playerName\");\n```\n\n----------------------------------------\n\nTITLE: Setting Alternate CA File for SSL/TLS in Parse PHP SDK\nDESCRIPTION: Explains how to specify a custom Certificate Authority (CA) bundle file for SSL/TLS peer verification using `ParseClient::setCAFile`. This is necessary in environments where the default system CA store is insufficient or unavailable, such as some shared hosting setups. An absolute path to the `.pem` file is required.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/setup.md#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// ** Use an Absolute path for your file! **\n// holds one or more certificates to verify the peer with\nParseClient::setCAFile(__DIR__ . '/certs/cacert.pem');\n```\n\n----------------------------------------\n\nTITLE: Caching Query Results\nDESCRIPTION: Example of caching network query results in local datastore with labels.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/local-datastore.md#2025-04-22_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nParseQuery<ParseObject> query = ParseQuery.getQuery(\"GameScore\");\nquery.orderByDescending(\"score\");\n\n// Query for new results from the network.\nquery.findInBackground(new FindCallback<ParseObject>() {\n  public void done(final List<ParseObject> scores, ParseException e) {\n    // Remove the previously cached results.\n    ParseObject.unpinAllInBackground(\"highScores\", new DeleteCallback() {\n    public void done(ParseException e) {\n      // Cache the new results.\n      ParseObject.pinAllInBackground(\"highScores\", scores);\n    }\n  });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Tracking App Opens in WinRT Applications\nDESCRIPTION: Implementation for tracking app launches from toast notifications in Windows 8 applications using the OnLaunched event handler.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/push-notifications.md#2025-04-22_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\n// Override Application.OnLaunched\nvirtual void OnLaunched(LaunchActivatedEventArgs args) {\n    // 'args' contains arguments that are passed to the app\n    // during its launch activation from a Toast.\n    // More on Toasts: http://msdn.microsoft.com/en-us/library/windows/apps/hh779727.aspx\n    ParseAnalytics.TrackAppOpenedAsync(args);\n}\n```\n\n----------------------------------------\n\nTITLE: Ordering Query Results in Parse using Swift\nDESCRIPTION: Shows how to sort PFQuery results by a specific field in either ascending or descending order in Swift. Utilizes ParseSwift SDK and sort key argument. Adjusts result sequence based on the specified field.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/queries.md#2025-04-22_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\n// Sorts the results in ascending order by the score field\nquery.order(byAscending: \"score\")\n\n// Sorts the results in descending order by the score field\nquery.order(byDescending: \"score\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Digital Ocean Spaces Adapter for Parse Server\nDESCRIPTION: This code snippet demonstrates how to set up an S3-compatible adapter for Digital Ocean Spaces. It includes configuration for bucket name, base URL, region, bucket prefix, and S3 overrides for access key, secret key, and endpoint.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/file-adapters.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst s3Options = {\n  bucket: \"SPACES_BUCKET_NAME\",\n  baseUrl: \"SPACES_BASE_URL\",\n  region: \"SPACES_REGION\",\n  bucketPrefix: \"SPACES_BUCKET_PREFIX\",\n  s3overrides: {\n    accessKeyId: \"SPACES_ACCESS_KEY\",\n    secretAccessKey: \"SPACES_SECRET_KEY\",\n    endpoint: 'SPACES_ENDPOINT'\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Destroying ParseObjects in PHP\nDESCRIPTION: These snippets show how to delete a ParseObject from the Parse Cloud, along with the ability to remove specific fields.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/objects.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$gameScore->destroy();\n\n// After this, the playerName field will be empty\n$gameScore->delete(\"playerName\");\n\n// Saves the field deletion to the Parse Cloud\n$gameScore->save();\n```\n\n----------------------------------------\n\nTITLE: Clearing Badge Count in iOS\nDESCRIPTION: Implementation for clearing the application badge count when the app becomes active.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/push-notifications.md#2025-04-22_snippet_15\n\nLANGUAGE: objective_c\nCODE:\n```\n- (void)applicationDidBecomeActive:(UIApplication *)application {\n  PFInstallation *currentInstallation = [PFInstallation currentInstallation];\n  if (currentInstallation.badge != 0) {\n    currentInstallation.badge = 0;\n    [currentInstallation saveEventually];\n  }\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\nfunc applicationDidBecomeActive(application: UIApplication) {\n  let currentInstallation = PFInstallation.currentInstallation()\n  if currentInstallation.badge != 0 {\n    currentInstallation.badge = 0\n    currentInstallation.saveEventually()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Push Notifications to Channels with JavaScript SDK\nDESCRIPTION: This code demonstrates how to send a push notification to specific channels (\"Giants\" and \"Mets\") using the Parse JavaScript SDK. It includes error handling to manage successful and failed push attempts.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/push-notifications.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nParse.Push.send({\n  channels: [ \"Giants\", \"Mets\" ],\n  data: {\n    alert: \"The Giants won against the Mets 2-3.\"\n  }\n})\n.then(function() {\n  // Push was successful\n}, function(error) {\n  // Handle error\n});\n```\n\n----------------------------------------\n\nTITLE: Twitter Login with Parse SDK\nDESCRIPTION: This snippet demonstrates how to implement Twitter login functionality using Parse SDK. It shows the process of authenticating a user via Twitter and handling the signup or login outcome using blocks.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/users.md#2025-04-22_snippet_21\n\nLANGUAGE: objective_c\nCODE:\n```\n[PFTwitterUtils logInWithBlock:^(PFUser *user, NSError *error) {\n    if (!user) {\n      NSLog(@\"Uh oh. The user cancelled the Twitter login.\");\n      return;\n    } else if (user.isNew) {\n      NSLog(@\"User signed up and logged in with Twitter!\");\n    } else {\n      NSLog(@\"User logged in with Twitter!\");\n    }\n}];\n```\n\nLANGUAGE: swift\nCODE:\n```\nPFTwitterUtils.logInWithBlock {\n  (user: PFUser?, error: NSError?) -> Void in\n  if let user = user {\n    if user.isNew {\n      print(\"User signed up and logged in with Twitter!\")\n    } else {\n      print(\"User logged in with Twitter!\")\n    }\n  } else {\n    print(\"Uh oh. The user cancelled the Twitter login.\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Yarn Package Manager\nDESCRIPTION: Installs Yarn globally, an alternative package manager to npm for NodeJS.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/deploying-aws-ubuntu.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo npm install yarn –g\n```\n\n----------------------------------------\n\nTITLE: Deleting ParseObjects in C#\nDESCRIPTION: Shows how to delete an entire ParseObject or remove specific fields from it.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/objects.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nawait myObject.DeleteAsync();\n```\n\nLANGUAGE: csharp\nCODE:\n```\nmyObject.Remove(\"playerName\");\nawait myObject.SaveAsync();\n```\n\n----------------------------------------\n\nTITLE: Basic Error Handling Callback\nDESCRIPTION: Shows how to handle object not found errors in the callback function\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/handling-errors.md#2025-04-22_snippet_2\n\nLANGUAGE: objective-c\nCODE:\n```\n- (void)callbackForGet:(PFObject *)result error:(NSError *)error {\n    if (result) {\n        NSLog(@\"Everything went fine!\");\n    } else {\n        if ([error code] == kPFErrorObjectNotFound) {\n            NSLog(@\"Uh oh, we couldn't find the object!\");\n        } else if (error) {\n            NSLog(@\"Error: %@\", [error userInfo][@\"error\"]);\n        }\n    }\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\nfunc callbackForGet(result: PFObject?, error: NSError?) -> Void {\n    if let result = result {\n        print(\"Everything went fine!\")\n    } else {\n        if let error = error {\n            if error._code == PFErrorCode.errorObjectNotFound.rawValue {\n                print(\"Uh oh, we couldn't find the object!\")\n            } else {\n                let errorString = error._userInfo![\"error\"] as? NSString\n                print(\"Error: \\(errorString)\")\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Invalid Session Token Error in Java\nDESCRIPTION: Implementation of a global error handler in Java that specifically handles invalid session token errors with two suggested options: prompting the user to log out and log back in using AlertDialog, or automatically showing the login screen to re-authenticate.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/sessions.md#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class ParseErrorHandler {\n  public static void handleParseError(ParseException e) {\n    switch (e.getCode()) {\n      case INVALID_SESSION_TOKEN: handleInvalidSessionToken();\n        break;\n\n      ... // Other Parse API errors that you want to explicitly handle\n    }\n  }\n\n  private static void handleInvalidSessionToken() {\n    //--------------------------------------\n    // Option 1: Show a message asking the user to log out and log back in.\n    //--------------------------------------\n    // If the user needs to finish what they were doing, they have the opportunity to do so.\n    //\n    // new AlertDialog.Builder(getActivity())\n    //   .setMessage(\"Session is no longer valid, please log out and log in again.\")\n    //   .setCancelable(false).setPositiveButton(\"OK\", ...).create().show();\n\n    //--------------------------------------\n    // Option #2: Show login screen so user can re-authenticate.\n    //--------------------------------------\n    // You may want this if the logout button could be inaccessible in the UI.\n    //\n    // startActivityForResult(new ParseLoginBuilder(getActivity()).build(), 0);\n  }\n}\n\n// In all API requests, call the global error handler, e.g.\nquery.findInBackground(new FindCallback<ParseObject>() {\n  public void done(List<ParseObject> results, ParseException e) {\n    if (e == null) {\n      // Query successful, continue other app logic\n    } else {\n      // Query failed\n      ParseErrorHandler.handleParseError(e);\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Requiring Parse SDK Autoloader in PHP Using Git\nDESCRIPTION: This PHP snippet demonstrates how to include the 'autoload.php' file after installing the Parse PHP SDK via Git. Including this file is essential to initialize the SDK classes in your project, allowing you to access its features.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/installation.md#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nrequire 'autoload.php';\n```\n\n----------------------------------------\n\nTITLE: Calling Parse Object Instance Endpoint - JavaScript Example - javascript\nDESCRIPTION: This JavaScript snippet demonstrates how to construct the endpoint URL for performing REST API operations (GET/PUT/DELETE) on a specific Parse object, using its class name and objectId. The URL pattern serves as a template within documentation for how clients should address individual object resources.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/objects.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<span class=\\\"custom-parse-server-protocol\\\">https</span>://<span class=\\\"custom-parse-server-url\\\">YOUR.PARSE-SERVER.HERE</span><span class=\\\"custom-parse-server-mount\\\">/parse/</span>classes/GameScore/Ed1nuqPvcm\n```\n\n----------------------------------------\n\nTITLE: Handling Push Notifications with Parse on Arduino\nDESCRIPTION: This code snippet shows how to handle incoming push notifications in the loop function of an Arduino sketch. It checks for available pushes, retrieves the message content, and processes it. It's important to close the push message after handling.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/arduino/push-notifications.md#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nif (Parse.pushAvailable()) {\n\tParsePush push = Parse.nextPush();\n\t// Print whole JSON body\n\tString message = push.getJSONBody();\n\tSerial.print(\"New push message size: \");\n\tSerial.println(message.length());\n\tSerial.print(\"New push message content: \");\n\tSerial.println(message);\n\t// Do something with the push\n\t// IMPORTANT, close your push message\n\tpush.close();\n}\n```\n\n----------------------------------------\n\nTITLE: Expected Response from Basic Query\nDESCRIPTION: The expected JSON response from the Parse GraphQL API when executing the hello query, returning the 'Hello, world!' message in the data object.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/customisation.md#2025-04-22_snippet_15\n\nLANGUAGE: jsonc\nCODE:\n```\n// Response\n{\n  \"data\": {\n    \"hello\": \"Hello, world!\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Push Notifications with Parse on Arduino\nDESCRIPTION: This snippet demonstrates how to subscribe to push notifications in the setup function of an Arduino sketch using Parse. This is the first step in enabling the device to receive push notifications.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/arduino/push-notifications.md#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nParse.startPushService();\n```\n\n----------------------------------------\n\nTITLE: ParseLiveList with Loading Indicator\nDESCRIPTION: Implementation showing how to add a loading indicator while the ParseLiveList is fetching data.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dart/queries.md#2025-04-22_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nParseLiveListWidget<ParseObject>(\n  query: query,\n  childBuilder: childBuilder,\n  listLoadingElement: Center(\n    child: CircularProgressIndicator(),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Parse Object with Nested Data - JSON Example - jsonc\nDESCRIPTION: This snippet shows a retrieved Parse object containing both primitive and array data, plus required metadata fields. It highlights the possible presence of extra properties (e.g., skills) resulting from storing JSON-encoded arrays. Fields like createdAt, updatedAt, and objectId are always included in server responses.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/objects.md#2025-04-22_snippet_11\n\nLANGUAGE: jsonc\nCODE:\n```\n{\\n  \"score\": 1337,\\n  \"playerName\": \"Sean Plott\",\\n  \"cheatMode\": false,\\n  \"skills\": [\\n    \"pwnage\",\\n    \"flying\"\\n  ],\\n  \"createdAt\": \"2022-01-01T12:23:45.678Z\",\\n  \"updatedAt\": \"2022-01-01T12:23:45.678Z\",\\n  \"objectId\": \"Ed1nuqPvcm\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Push Notification Channels in Python\nDESCRIPTION: Python implementation to update an installation object to subscribe to the 'Giants' push notification channel. Uses the channel-based approach for push notifications which follows a publisher-subscriber model.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/push-notifications.md#2025-04-22_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nconnection.connect()\nconnection.request('PUT', '/parse/installations/mrmBZvsErB', json.dumps({\n    \"channels\": [\n        \"Giants\"\n    ]\n}), {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\",\n    \"Content-Type\": \"application/json\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Optimized User Query with ContainedIn in Objective-C and Swift\nDESCRIPTION: This snippet demonstrates how to perform an optimized query for users with specific states using the ContainedIn condition in both Objective-C and Swift.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_25\n\nLANGUAGE: objective_c\nCODE:\n```\n[query whereKey:@\"state\"\n    containedIn:@[@\"SignedUp\", @\"Verified\"]];\n```\n\nLANGUAGE: swift\nCODE:\n```\nquery.whereKey(\"state\", containedIn: [\"SignedUp\", \"Verified\"])\n```\n\n----------------------------------------\n\nTITLE: Fetching Non-existent Object in Parse\nDESCRIPTION: This snippet demonstrates an attempt to fetch an object with a non-existent ObjectId, which will result in an error from the Parse Cloud.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/handling-errors.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nParseObject.GetQuery(\"Note\").GetAsync(\"thisObjectIdDoesntExist\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Output Fields for Video Class\nDESCRIPTION: JSON configuration example showing how to restrict which fields can be resolved when querying the Video class.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/customisation.md#2025-04-22_snippet_5\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"classConfigs\": [\n    {\n      \"className\": \"Video\",\n      \"type\": {\n        \"outputFields\": [\"name\", \"author\", \"numberOfViews\", \"comments\", \"cdnUrl\"]\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating ParseObject\nDESCRIPTION: Demonstrates creating and updating a ParseObject with new data.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/objects.md#2025-04-22_snippet_9\n\nLANGUAGE: cs\nCODE:\n```\n// Create the object.\nvar gameScore = new ParseObject(\"GameScore\")\n{\n    { \"score\", 1337 },\n    { \"playerName\", \"Sean Plott\" },\n    { \"cheatMode\", false },\n    { \"skills\", new List<string> { \"pwnage\", \"flying\" } },\n};\ngameScore.SaveAsync().ContinueWith(t =>\n{\n    // Now let's update it with some new data.  In this case, only cheatMode\n    // and score will get sent to the cloud.  playerName hasn't changed.\n    gameScore[\"cheatMode\"] = true;\n    gameScore[\"score\"] = 1338;\n    gameScore.SaveAsync();\n});\n```\n\n----------------------------------------\n\nTITLE: Creating File Input in HTML for Parse.File Upload\nDESCRIPTION: This HTML code creates a file input control that allows users to select a file from their local drive for uploading to Parse.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/files.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"file\" id=\"profilePhotoFileUpload\">\n```\n\n----------------------------------------\n\nTITLE: Advanced Login View Customization\nDESCRIPTION: Example of further customizing the login view by modifying placeholder text and button frames\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/user-interface.md#2025-04-22_snippet_6\n\nLANGUAGE: objective-c\nCODE:\n```\n@interface MyLogInViewController : PFLogInViewController\n\n@end\n\n@implementation MyLogInViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    self.logInView.usernameField.placeholder = @\"email\";\n}\n\n- (void)viewDidLayoutSubviews {\n    [super viewDidLayoutSubviews];\n    self.logInView.logInButton.frame = CGRectMake(...); // Set a different frame.\n}\n\n@end\n```\n\nLANGUAGE: swift\nCODE:\n```\nclass MyLogInViewController : PFLogInViewController {\n\n  override func viewDidLoad() {\n    super.viewDidLoad()\n\n    self.logInView.usernameField.placeholder = \"email\"\n  }\n\n  override func viewDidLayoutSubviews() {\n    super.viewDidLayoutSubviews()\n\n    self.logInView.logInButton.frame = CGRectMake(...) // Set a different frame.\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Cloud Function from Swift\nDESCRIPTION: Example of how to call the averageStars Cloud Function from a Swift client. The function accepts a movie parameter and returns the average rating.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_79\n\nLANGUAGE: swift\nCODE:\n```\nPFCloud.callFunctionInBackground(\"averageStars\", withParameters: [\"movie\": \"The Matrix\"]) {\n  (ratings, error) in\n  if !error {\n    // ratings is 4.5\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Parse JavaScript Guide Configuration in YAML\nDESCRIPTION: YAML frontmatter configuration for the Parse JavaScript SDK documentation guide, defining metadata, navigation structure and included content sections.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/js.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: JavaScript Developers Guide | Parse\npermalink: /js/guide/\nlayout: guide\nplatform: js\nlanguage: js\ndisplay_platform: JavaScript\napi_reference: https://parse-community.github.io/Parse-SDK-JS/api\n\nsections:\n- \"js/getting-started.md\"\n- \"js/objects.md\"\n- \"js/queries.md\"\n- \"js/live-queries.md\"\n- \"js/users.md\"\n- \"common/sessions.md\"\n- \"js/roles.md\"\n- \"js/files.md\"\n- \"js/promises.md\"\n- \"js/geopoints.md\"\n- \"js/local-datastore.md\"\n- \"js/push-notifications.md\"\n- \"js/config.md\"\n- \"js/analytics.md\"\n- \"common/data.md\"\n- \"common/relations.md\"\n- \"js/schema.md\"\n- \"js/handling-errors.md\"\n- \"common/security.md\"\n- \"common/performance.md\"\n- \"common/errors.md\"\n```\n\n----------------------------------------\n\nTITLE: Accessing ParseObject Values\nDESCRIPTION: Examples of accessing different data types from a ParseObject.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/objects.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\nint score = gameScore.Get<int>(\"score\");\nstring playerName = gameScore.Get<string>(\"playerName\");\nbool cheatMode = gameScore.Get<bool>(\"cheatMode\");\n```\n\n----------------------------------------\n\nTITLE: Initializing FSAdapter in Node.js/Express for Parse Server\nDESCRIPTION: This code snippet demonstrates how to initialize and configure the FSAdapter for Parse Server in a Node.js/Express environment. It includes setting up the FSAdapter with a custom files subdirectory and configuring ParseServer with app ID, master key, and the FSAdapter instance.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/file-adapters.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar FSFilesAdapter = require('@parse/fs-files-adapter');\n\nvar fsAdapter = new FSFilesAdapter({\n  \"filesSubDirectory\": \"my/files/folder\" // optional, defaults to ./files\n});\n\nvar api = new ParseServer({\n\tappId: 'my_app',\n\tmasterKey: 'master_key',\n\tfilesAdapter: fsAdapter\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Schema with Index in Parse Server (Python)\nDESCRIPTION: This Python snippet shows how to add a new schema with an index to Parse Server using the http.client library. It creates a 'City' class with a 'name' field and an index on that field. Authentication is required.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/schemas.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nconnection.connect()\nconnection.request('POST', '/parse/schemas/City', json.dumps({\n    \"className\": \"City\",\n    \"fields\": {\n        \"name\": {\n            \"type\": \"String\"\n        },\n        \"indexes\": {\n            \"indexName\": {\n                \"name\": 1\n            }\n        }\n    }\n}), {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-Master-Key\": \"${MASTER_KEY}\",\n    \"Content-Type\": \"application/json\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Editing Trigger Webhook URL using PUT Request\nDESCRIPTION: Updates the URL of an existing trigger webhook using PUT method. Requires application ID and master key for authentication. Returns class name, trigger name and updated URL.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/hooks.md#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-Master-Key: ${MASTER_KEY}\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"url\": \"https://api.example.com/Game/_beforeSave\"}' \\\nhttps://YOUR.PARSE-SERVER.HERE/parse/hooks/triggers/Game/beforeSave\n```\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nconnection.connect()\nconnection.request('PUT', '/parse/hooks/triggers/Game/beforeSave', json.dumps({\n    \"url\": \"https://api.example.com/Game/_beforeSave\"\n}), {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-Master-Key\": \"${MASTER_KEY}\",\n    \"Content-Type\": \"application/json\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Twitter Login Implementation with Parse\nDESCRIPTION: Implementation of Twitter login using ParseTwitterUtils, including handling of new user creation and existing user login scenarios.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/users.md#2025-04-22_snippet_22\n\nLANGUAGE: java\nCODE:\n```\nParseTwitterUtils.logIn(this, new LogInCallback() {\n  @Override\n  public void done(ParseUser user, ParseException err) {\n    if (user == null) {\n      Log.d(\"MyApp\", \"Uh oh. The user cancelled the Twitter login.\");\n    } else if (user.isNew()) {\n      Log.d(\"MyApp\", \"User signed up and logged in through Twitter!\");\n    } else {\n      Log.d(\"MyApp\", \"User logged in through Twitter!\");\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response: List of Cloud Functions by Name\nDESCRIPTION: Provides an example JSON response structure returned when fetching functions by name (e.g., `/hooks/functions/sendMessage`). The `results` array contains all functions (webhooks or cloud code) matching the specified name.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/hooks.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"results\": [\n    { \"functionName\": \"sendMessage\", \"url\": \"https://api.example.com/sendMessage\" },\n    { \"functionName\": \"sendMessage\" }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Parse Push Handler in Application OnCreate (C# Xamarin)\nDESCRIPTION: This C# code snippet shows how to set up the push notification handler in a Xamarin.Android application. It should be placed within the `OnCreate` method of your custom `Application` class (inheriting from `Android.App.Application`). It assigns the default handler `ParsePush.DefaultParsePushNotificationReceivedHandler` to the `ParsePushNotificationReceived` event. Ensure you replace the placeholder namespace `parsexamarinpushsample` with your actual project namespace.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/push-notifications-android.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n// Xamarin: Application.cs\n\n// IMPORTANT: Change \"parsexamarinpushsample\" to match your namespace.\n[Application(Name = \"parsexamarinpushsample.ParseApplication\")]\nclass ParseApplication : Application {\n  // ...\n\n  public override void OnCreate() {\n    base.OnCreate();\n\n    // ...\n\n    ParsePush.ParsePushNotificationReceived += ParsePush.DefaultParsePushNotificationReceivedHandler;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Establishing Role Hierarchy in Parse using C#\nDESCRIPTION: This snippet shows how to create a parent-child relationship between two roles (Moderators and Administrators) to establish a role hierarchy in Parse.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/roles.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nParseRole administrators = /* Your \"Administrators\" role */;\nParseRole moderators = /* Your \"Moderators\" role */;\nmoderators.Roles.Add(administrators);\nawait moderators.SaveAsync();\n```\n\n----------------------------------------\n\nTITLE: Querying with Boolean constraints in Objective-C\nDESCRIPTION: Example of a query in Objective-C using a boolean constraint which may not be efficient for indexing due to the low entropy of boolean fields.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_7\n\nLANGUAGE: objective-c\nCODE:\n```\n[query whereKey:@\"cheatMode\" equalTo:@NO];\n```\n\n----------------------------------------\n\nTITLE: Tracking App Opens with Parse Analytics\nDESCRIPTION: Shows how to track app opens triggered by push notifications using ParseAnalytics, which is essential for push analytics features.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/push-notifications.md#2025-04-22_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\nParseAnalytics.TrackAppOpenedAsync(launchArgs);\n```\n\n----------------------------------------\n\nTITLE: Sample APNS Transmission Log - Shell\nDESCRIPTION: This snippet provides an example of log output indicating a successful APNS (Apple Push Notification Service) connection and notification transmission. The log contains an APNS connection message and a notification transmission with a device token. This is a shell/log example for troubleshooting and verification that APNS communication is functioning in Parse Server.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/push-notifications.md#2025-04-22_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nAPNS Connected\nAPNS Notification transmitted to:7a7d2864598e1f65e6e02135245b7daf8ea510514e6376f072dc29d53facaa41\n```\n\n----------------------------------------\n\nTITLE: Save Operation Callback\nDESCRIPTION: Demonstrates how to handle callbacks for save operations using NSNumber result\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/handling-errors.md#2025-04-22_snippet_4\n\nLANGUAGE: objective-c\nCODE:\n```\n- (void)callbackForSave:(NSNumber *)result error:(NSError *)error {\n    if ([result boolValue]) {\n        NSLog(@\"Everything went fine!\");\n    } else {\n        if ([error code] == kPFErrorConnectionFailed) {\n            NSLog(@\"Uh oh, we couldn't even connect to the Parse Cloud!\");\n        } else if (error) {\n            NSLog(@\"Error: %@\", [error userInfo][@\"error\"]);\n        }\n    }\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\nfunc callbackForSave(result: NSNumber?, error: NSError?) -> Void {\n    if result?.boolValue == true {\n        print(\"Everything went fine!\")\n    } else {\n        if let error = error {\n            if error.code == PFErrorCode.ErrorConnectionFailed.rawValue {\n                print(\"Uh oh, we couldn't even connect to the Parse Cloud!\")\n            } else {\n                let errorString = error.userInfo![\"error\"] as? NSString\n                print(\"Error: \\(errorString)\")\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using $relatedTo to Find Users Who Liked a Post\nDESCRIPTION: This example shows how to use the $relatedTo operator to find User objects that are related to a Post through a Relation field. The query retrieves users in the 'likes' relation of a specific Post object.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/queries.md#2025-04-22_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -G \\\n  --data-urlencode 'where={\"$relatedTo\":{\"object\":{\"__type\":\"Pointer\",\"className\":\"Post\",\"objectId\":\"8TOXdXf3tz\"},\"key\":\"likes\"}}' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/users\n```\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\nimport urllib.parse\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nparams = urllib.parse.urlencode({\"where\": json.dumps({\n    \"$relatedTo\": {\n        \"object\": {\n            \"__type\": \"Pointer\",\n            \"className\": \"Post\",\n            \"objectId\": \"8TOXdXf3tz\"\n        },\n        \"key\": \"likes\"\n    }\n})})\nconnection.connect()\nconnection.request('GET', '/parse/users?%s' % params, '', {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Unlinking Facebook from Parse Users in JavaScript\nDESCRIPTION: This snippet shows how to unlink a Facebook account from a Parse.User object, effectively removing Facebook integration using Parse.FacebookUtils.unlink method.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/users.md#2025-04-22_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait Parse.FacebookUtils.unlink(user);\nalert(\"The user is no longer associated with their Facebook account.\");\n```\n\n----------------------------------------\n\nTITLE: User Query Response Structure in Parse Server\nDESCRIPTION: JSON response format when querying users. Contains a results field with an array of user objects, each with their respective fields and metadata.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/users.md#2025-04-22_snippet_17\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"results\": [\n    {\n      \"username\": \"bigglesworth\",\n      \"phone\": \"650-253-0000\",\n      \"createdAt\": \"2022-01-01T12:23:45.678Z\",\n      \"updatedAt\": \"2022-01-01T12:23:45.678Z\",\n      \"objectId\": \"3KmCvT7Zsb\"\n    },\n    {\n      \"username\": \"cooldude6\",\n      \"phone\": \"415-369-6201\",\n      \"createdAt\": \"2022-01-01T12:23:45.678Z\",\n      \"updatedAt\": \"2022-01-01T12:23:45.678Z\",\n      \"objectId\": \"g7y9tkhB7O\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Nearby Locations - C#\nDESCRIPTION: Performs a proximity query to find the 10 closest places to a user's location using WhereNear query constraint.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/geopoints.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// User's location\nvar userGeoPoint = ParseUser.CurrentUser.Get<ParseGeoPoint>(\"location\");\n// Create a query for places\nvar query = ParseObject.GetQuery(\"PlaceObject\");\n//Interested in locations near user.\nquery = query.WhereNear(\"location\", userGeoPoint);\n// Limit what could be a lot of points.\nquery = query.Limit(10);\n// Final list of nearby places\nvar placeObjects = await query.FindAsync();\n```\n\n----------------------------------------\n\nTITLE: Regex-Based Filtering in Parse JavaScript\nDESCRIPTION: Shows how to search for objects in Parse using a regular expression constraint via matches, anchoring the match for efficient queries. Requires Parse JavaScript SDK. The method queries for playerName fields that match the regex '^Michael', with recommended use of other constraints to maintain query performance.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_54\n\nLANGUAGE: javascript\nCODE:\n```\nquery.matches(\"playerName\", \"^Michael\");\n```\n\n----------------------------------------\n\nTITLE: Unlinking User Account from Facebook in Parse (Python)\nDESCRIPTION: Demonstrates how to unlink a user account from Facebook using Parse Server's REST API in Python. It sends a PUT request to set the Facebook authData to null.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/users.md#2025-04-22_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nconnection.connect()\nconnection.request('PUT', '/parse/users/uMz0YZeAqc', json.dumps({\n    \"authData\": {\n        \"facebook\": null\n    }\n}), {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\",\n    \"X-Parse-Session-Token\": \"r:samplei3l83eerhnln0ecxgy5\",\n    \"Content-Type\": \"application/json\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Saving ParseGeoPoint as Parcelable in Java\nDESCRIPTION: This snippet demonstrates how to save a ParseGeoPoint as a Parcelable object in an Activity's saved instance state.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/geopoints.md#2025-04-22_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nprivate ParseGeoPoint point;\n\n@Override\nprotected void onSaveInstanceState(Bundle outState) {\n    super.onSaveInstanceState(outState);\n    outState.putParcelable(\"point\", point);\n}\n\n@Override\nprotected void onCreate(@Nullable Bundle savedInstanceState) {\n  if (savedInstanceState != null) {\n    point = (ParseGeoPoint) savedInstanceState.getParcelable(\"point\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Parse User via REST API in Python\nDESCRIPTION: Uses Python's http.client to make a DELETE request to remove a specific user. Includes the session token header for authentication along with standard Parse API headers.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/users.md#2025-04-22_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nconnection.connect()\nconnection.request('DELETE', '/parse/users/g7y9tkhB7O', '', {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\",\n    \"X-Parse-Session-Token\": \"r:pnktnjyb996sj4p156gjtp4im\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Increment Counter - Java\nDESCRIPTION: Demonstrates atomic increment operation on a numeric field.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/objects.md#2025-04-22_snippet_13\n\nLANGUAGE: java\nCODE:\n```\ngameScore.increment(\"score\");\ngameScore.saveInBackground();\n```\n\n----------------------------------------\n\nTITLE: Setting Expiration Interval for Parse Push Notifications in Android\nDESCRIPTION: Shows how to set an expiration interval for a push notification, which is more reliable than using a specific time due to potential device clock inaccuracies.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/push-notifications.md#2025-04-22_snippet_14\n\nLANGUAGE: java\nCODE:\n```\n// Create time interval\nlong weekInterval = 60*60*24*7; // 1 week\n\n// Send push notification with expiration interval\nParsePush push = new ParsePush();\npush.setExpirationTimeInterval(weekInterval);\npush.setQuery(everyoneQuery);\npush.setMessage(\"Season tickets on sale until next week!\");\npush.sendPushInBackground();\n```\n\n----------------------------------------\n\nTITLE: Internal Config Parameters\nDESCRIPTION: Shows how to save and retrieve internal configuration parameters that are only accessible with master key authentication.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/config.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nawait Parse.Config.save(\n  { welcomeMessage : \"Welcome to Parse\", secretMessage: \"Psst 👀\" },\n  { secretMessage: true }\n);\n\nconst publicConfig = await Parse.Config.get(); // Returns only `welcomeMessage`.\nconst internalConfig = await Parse.Config.get({ useMasterKey: true }); // Returns `welcomeMessage` and `secretMessage`.\n```\n\n----------------------------------------\n\nTITLE: Offline Saving - Java\nDESCRIPTION: Demonstrates how to save objects offline using saveEventually.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/objects.md#2025-04-22_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nParseObject gameScore = new ParseObject(\"GameScore\");\ngameScore.put(\"score\", 1337);\ngameScore.put(\"playerName\", \"Sean Plott\");\ngameScore.put(\"cheatMode\", false);\ngameScore.saveEventually();\n```\n\n----------------------------------------\n\nTITLE: Handling LiveQueryClient Open Event in JavaScript\nDESCRIPTION: Shows how to listen for the 'open' event on a LiveQueryClient instance, which is emitted when the connection is established.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/live-queries.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nclient.on('open', () => {\n  console.log('connection opened');\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Session Token in Parse for Embedded C\nDESCRIPTION: This snippet illustrates how to retrieve the current session token, which can be used for subsequent authenticated requests.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/embedded_c/users.md#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nchar* session_token = parseGetSessionToken(client);\n```\n\n----------------------------------------\n\nTITLE: Custom Event Tracking with Dimensions in Parse Analytics\nDESCRIPTION: Implementation of custom event tracking for apartment search functionality with dimensional data. This example shows how to track search events with additional metadata like price range, source, and day type for detailed analytics segmentation.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/analytics.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar dimensions = new Dictionary<string, string> {\n  // Define ranges to bucket data points into meaningful segments\n  { \"priceRange\", \"1000-1500\" },\n  // Did the user filter the query?\n  { \"source\", \"craigslist\" },\n  // Do searches happen more often on weekdays or weekends?\n  { \"dayType\", \"weekday\" }\n};\n// Send the dimensions to Parse along with the 'search' event\nParseAnalytics.TrackEventAsync(\"search\", dimensions);\n```\n\n----------------------------------------\n\nTITLE: Removing File Encryption in Parse Server\nDESCRIPTION: Demonstrates how to convert encrypted files back to unencrypted state by initializing FSAdapter without an encryption key and running the rotation process with the old key. This should be done on a development server for safety.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/file-adapters.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst api = new ParseServer({\n  databaseURI: databaseUri || 'mongodb://localhost:27017/dev',\n  cloud: process.env.PARSE_SERVER_CLOUD || __dirname + '/cloud/main.js',\n  appId: process.env.PARSE_SERVER_APPLICATION_ID || 'myAppId',\n  masterKey: process.env.PARSE_SERVER_MASTER_KEY || '',\n  filesAdapter: new FSFilesAdapter(), //No encryptionKey supplied\n  ...\n});\nawait api.start();\n\n//This can take awhile depending on how many files and how larger they are. It will attempt to rotate the key of all files in your filesSubDirectory\n//It is not recommended to do this on the production server, deploy a development server to complete the process.\nconst {rotated, notRotated} =  await api.filesAdapter.rotateEncryptionKey({oldKey: oldKey});\nconsole.log('Files rotated to unencrypted with noKey: ' + rotated);\nconsole.log('Files that couldn\\'t be rotated to unencrypted with noKey: ' + notRotated);\n```\n\n----------------------------------------\n\nTITLE: Querying with Range Constraints - Parse Server REST API\nDESCRIPTION: Shows how to query Parse Server using range constraints ($gte and $lte) to find scores between 1000 and 3000.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/queries.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -G \\\n  --data-urlencode 'where={\"score\":{\"$gte\":1000,\"$lte\":3000}}' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/classes/GameScore\n```\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\nimport urllib.parse\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nparams = urllib.parse.urlencode({\"where\": json.dumps({\n    \"score\": {\n        \"$gte\": 1000,\n        \"$lte\": 3000\n    }\n})})\nconnection.connect()\nconnection.request('GET', '/parse/classes/GameScore?%s' % params, '', {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Periodic Config Refresh Helper in C#\nDESCRIPTION: Helper class implementation for managing periodic config refresh with a 12-hour interval.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/config.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Helper\n{\n  private static TimeSpan configRefreshInterval = TimeSpan.FromHours(12);\n  private static DateTime? lastFetchedDate;\n\n  // Fetches the config at most once every 12 hours per app runtime\n  public static void FetchConfigIfNeeded()\n  {\n    if (lastFetchedDate == null ||\n        DateTime.Now - lastFetchedDate > configRefreshInterval) {\n      lastFetchedDate = DateTime.Now;\n      ParseConfig.GetAsync();\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Geotargeted Push Notification in Parse .NET SDK\nDESCRIPTION: This snippet demonstrates how to send a push notification to users near a specific location. It uses a geo query to find users within a certain distance and then targets their installations.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/push-notifications.md#2025-04-22_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\n// Find users in the Seattle metro area\nvar userQuery = ParseUser.Query.WhereWithinDistance(\n    \"location\",\n    marinersStadium,\n    ParseGeoDistance.FromMiles(1));\nvar push= new ParsePush();\npush.Query = from installation in ParseInstallation.Query\n             join user in userQuery on installation[\"user\"] equals user\n             select installation;\npush.Alert = \"Mariners lost? Free conciliatory hotdogs at the Parse concession stand!\";\nawait push.SendAsync();\n```\n\n----------------------------------------\n\nTITLE: Downloading Purchase Assets in Parse iOS\nDESCRIPTION: Example of downloading content assets associated with purchased products using Parse SDK.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/in-app-purchases.md#2025-04-22_snippet_3\n\nLANGUAGE: objective-c\nCODE:\n```\n[PFPurchase addObserverForProduct:@\"Pro\" block:^(SKPaymentTransaction *transaction) {\n    [PFPurchase downloadAssetForTransaction:transaction completion:^(NSString *filePath, NSError *error) {\n        if (!error) {\n            // at this point, the content file is available at filePath.\n        }\n    }];\n}];\n```\n\nLANGUAGE: swift\nCODE:\n```\nPFPurchase.addObserverForProduct(\"Pro\") {\n    (transaction: SKPaymentTransaction?) -> Void in\n    if let transaction = transaction {\n        PFPurchase.downloadAssetForTransaction(transaction) {\n            (filePath: String?, error: NSError?) -> Void in\n            if error == nil {\n                // at this point, the content file is available at filePath.\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Existence of a Field in Parse Queries with whereExists\nDESCRIPTION: This snippet shows how to find objects that have or don't have a particular field set using whereExists and whereDoesNotExist methods.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/queries.md#2025-04-22_snippet_11\n\nLANGUAGE: java\nCODE:\n```\n// Finds objects that have the score set\nquery.whereExists(\"score\");\n\n// Finds objects that don't have the score set\nquery.whereDoesNotExist(\"score\");\n```\n\n----------------------------------------\n\nTITLE: Calling Parse Class REST Endpoint - JavaScript Example - javascript\nDESCRIPTION: This JavaScript snippet (presented as HTML-escaped fragments for documentation) demonstrates the format for constructing the URL to access a Parse class (e.g., `GameScore`) via HTTPS. No code execution is performed; this provides a template for specifying the server root, Parse API mount, and class resource. The endpoint is necessary for all REST API operations involving classes.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/objects.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<span class=\\\"custom-parse-server-protocol\\\">https</span>://<span class=\\\"custom-parse-server-url\\\">YOUR.PARSE-SERVER.HERE</span><span class=\\\"custom-parse-server-mount\\\">/parse/</span>classes/GameScore\n```\n\n----------------------------------------\n\nTITLE: Identifying Session Created via User Impersonation\nDESCRIPTION: This snippet shows the format of the 'createdWith' property in a session object that was created using the user impersonation feature. It indicates the session was created with master key authentication.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/users.md#2025-04-22_snippet_32\n\nLANGUAGE: jsonc\nCODE:\n```\n\"createdWith\": {\n  \"action\": \"login\",\n  \"authProvider\": \"masterkey\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying with Boolean constraints in Java\nDESCRIPTION: Example of a query in Java using a boolean constraint which is suboptimal for indexing due to the low entropy of boolean values.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nquery.whereEqualTo(\"cheatMode\", false);\n```\n\n----------------------------------------\n\nTITLE: Storing ParseFile in ParseObject in C#\nDESCRIPTION: Example of associating a ParseFile with a ParseObject by assigning it as a field value.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/files.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar jobApplication = new ParseObject(\"JobApplication\");\njobApplication[\"applicantName\"] = \"Joe Smith\";\njobApplication[\"applicantResumeFile\"] = file;\nTask saveTask = jobApplication.SaveAsync();\n```\n\n----------------------------------------\n\nTITLE: Registering ParseFirebaseInstanceIdService in AndroidManifest.xml (XML)\nDESCRIPTION: This XML snippet registers the `ParseFirebaseInstanceIdService` within the `<application>` tag in the `AndroidManifest.xml` file. This service handles the generation, rotation, and updating of Firebase registration tokens (Instance IDs), which are essential for targeting devices for push notifications. The intent filter ensures the service responds to Firebase Instance ID events.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/push-notifications-android.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<service\n    android:name=\"com.parse.fcm.ParseFirebaseInstanceIdService\"\n    android:exported=\"true\">\n    <intent-filter>\n        <action android:name=\"com.google.firebase.INSTANCE_ID_EVENT\" />\n    </intent-filter>\n</service>\n```\n\n----------------------------------------\n\nTITLE: No Example Available for REST API in Bash\nDESCRIPTION: Indicates that no REST API example is available for the described operation in Bash.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_74\n\nLANGUAGE: bash\nCODE:\n```\n# No REST API example\n```\n\n----------------------------------------\n\nTITLE: Limiting Query Results\nDESCRIPTION: Shows how to limit the number of results returned by a query. By default, results are limited to 100, but this can be customized.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/arduino/queries.md#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nquery.setLimit(10);\n```\n\n----------------------------------------\n\nTITLE: Handling Facebook Login Redirect in Windows Phone App\nDESCRIPTION: This code is added to the InitializePhoneApplication() method to handle navigation events when the Facebook app returns control to your app after authentication. It processes the login redirect and creates or logs in the Parse user.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/users.md#2025-04-22_snippet_16\n\nLANGUAGE: cs\nCODE:\n```\nRootFrame.Navigating += async (sender, e) =>\n{\n    if (ParseFacebookUtils.IsLogInRedirect(e.Uri))\n    {\n        // This code is called when the Facebook app returns control to your app.\n        // You must provide a landing page URI, which ParseFacebookUtils will\n        // navigate to as it waits for the user to be created or logged into\n        // your Parse app.\n        var user = await ParseFacebookUtils.EndLogInAsync(sender,\n            e, new Uri(\"/LandingPage.xaml\", UriKind.Relative));\n\n            // If you await the return value of this method, you can begin using the\n        // new user once it becomes available or catch any errors.\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Storing Temperature Data in Parse Object (JavaScript)\nDESCRIPTION: Demonstrates how to store temperature and lever state data for a smart toaster using a Parse Object. The example shows key-value pairs for temperature (number) and lever state (boolean).\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/embedded_c/objects.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntemperature: 175.0, leverDown: true\n```\n\n----------------------------------------\n\nTITLE: Calculating Distance Between GeoPoints\nDESCRIPTION: Shows how to calculate the distance between two ParseGeoPoint objects in kilometers.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/geopoints.md#2025-04-22_snippet_4\n\nLANGUAGE: cs\nCODE:\n```\nParseGeoPoint p1 = /* Some location */;\nParseGeoPoint p2 = /* Some other location */;\ndouble distanceInKm = p1.DistanceTo(p2).Kilometers;\n```\n\n----------------------------------------\n\nTITLE: Geospatial Queries within a Radius in Parse PHP\nDESCRIPTION: Demonstrates performing a location-based query in the Parse PHP SDK to find Place objects within a 10-mile radius of a user's point. Uses withinMiles and requires proper ParseQuery, location, and GeoPoint setup.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_68\n\nLANGUAGE: php\nCODE:\n```\n$query = new ParseQuery(\"Place\");\n\n$query->withinMiles(\"location\", $userGeoPoint, 10);\n\n$placeObjects = $query.find();\n// Gets an array of objects within 10 miles of a user's location\n```\n\n----------------------------------------\n\nTITLE: Uploading Files with Curl and Bash\nDESCRIPTION: This code snippet illustrates how to upload a text file `hello.txt` to a Parse server using Curl. Required headers include the X-Parse-Application-Id, X-Parse-REST-API-Key, and Content-Type. The file size limits to 10MB apply.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/files.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n  -H \"X-Parse-Application-Id: <span class=\\\"custom-parse-server-appid\\\">${APPLICATION_ID}</span>\" \\\n  -H \"X-Parse-REST-API-Key: <span class=\\\"custom-parse-server-restapikey\\\">${REST_API_KEY}</span>\" \\\n  -H \"Content-Type: text/plain\" \\\n  -d 'Hello, World!' \\\n  <span class=\\\"custom-parse-server-protocol\\\">https</span>://<span class=\\\"custom-parse-server-url\\\">YOUR.PARSE-SERVER.HERE</span><span class=\\\"custom-parse-server-mount\\\">/parse/</span>files/hello.txt\n```\n\n----------------------------------------\n\nTITLE: Requiring Parse SDK Autoloader in PHP\nDESCRIPTION: This PHP snippet shows how to include the Composer-generated autoloader in a PHP script. This step is necessary to utilize the Parse PHP SDK after installing with Composer. The autoloader initializes the SDK's classes so they can be used within the application.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/installation.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nrequire 'vendor/autoload.php';\n```\n\n----------------------------------------\n\nTITLE: Query Parse Installation Objects using REST API\nDESCRIPTION: REST API query to fetch installation objects with specific targeting criteria. Uses master key authentication and query constraints to filter installations by city and device type. Limited to 1000 results.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/push-notifications.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n# Query over installations\ncurl -X GET \\\n-H \"X-Parse-Application-Id: {YOUR_APPLICATION_ID}\" \\\n-H \"X-Parse-Master-Key: {YOUR_MASTER_KEY}\" \\\n-G \\\n--data-urlencode 'limit=1000' \\\n--data-urlencode 'where={ \"city\": \"San Francisco\", \"deviceType\": { \"$in\": [ \"ios\", \"android\", \"winphone\", \"embedded\" ] } }' \\\nhttps://YOUR.PARSE-SERVER.HERE/parse/installations\n```\n\n----------------------------------------\n\nTITLE: Updating Parse Session\nDESCRIPTION: Makes a PUT request to update a Session object with custom fields. Requires the session's objectId and valid authentication credentials.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/sessions.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -H \"X-Parse-Session-Token: r:pnktnjyb996sj4p156gjtp4im\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"customField\":\"value\"}' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/sessions/Axy98kq1B09\n```\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nconnection.connect()\nconnection.request('POST', '/parse/logout', '', {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\",\n    \"X-Parse-Session-Token\": \"r:pnktnjyb996sj4p156gjtp4im\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Querying GameScores with GreaterThan in C#\nDESCRIPTION: This snippet shows how to query for GameScores with a score greater than a previously retrieved highScore in C#.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_32\n\nLANGUAGE: cs\nCODE:\n```\n// Previously retrieved highScore for Michael Yabuti\nvar results = await ParseObject.GetQuery(\"GameScore\")\n    .WhereGreaterThan(\"score\", highScore)\n    .FindAsync();\n```\n\n----------------------------------------\n\nTITLE: Regex-Based Filtering in Parse C#\nDESCRIPTION: Demonstrates performing regex-based filtering with anchored pattern matching for the playerName field using the Parse C# SDK. The WhereMatches method takes the field key and the regex pattern ('^Michael'), returning objects matching this criteria.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_57\n\nLANGUAGE: cs\nCODE:\n```\nquery.WhereMatches(\"playerName\", \"^Michael\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Markdown Frontmatter for Parse Defined Schema Guide\nDESCRIPTION: This snippet defines the YAML frontmatter for the Defined Schema Guide page. It specifies the title, permalink, layout, platform, language, display platform, and redirect information. It also lists the sections to be included in the guide.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/defined-schema.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Defined Schema Guide | Parse\npermalink: /defined-schema/guide/\nlayout: guide\nplatform: cloudcode\nlanguage: js\ndisplay_platform: Defined Schema\n\nredirect_from:\n  - /defined-schema/\n\nsections:\n  - \"defined-schema/getting-started.md\"\n  - \"defined-schema/how-to-use-on-existing-parse-server.md\"\n  - \"defined-schema/core-classes-fields.md\"\n  - \"defined-schema/fields.md\"\n  - \"defined-schema/indexes.md\"\n  - \"defined-schema/class-level-permissions.md\"\n  - \"defined-schema/options.md\"\n---\n```\n\n----------------------------------------\n\nTITLE: User Logout in Parse Server GraphQL\nDESCRIPTION: Demonstrates how to log out a user using their session token. Invalidates the current session token.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/users.md#2025-04-22_snippet_4\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"X-Parse-Application-Id\": \"APPLICATION_ID\",\n  \"X-Parse-Session-Token\": \"r:b0dfad1eeafa4425d9508f1c0a15c3fa\"\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\nmutation logOut {\n  logOut(input: { clientMutationId: \"logOut\" }) {\n    clientMutationId\n    viewer {\n      user {\n        username\n        email\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"data\": {\n    \"logOut\": {\n      \"clientMutationId\": \"logOut\",\n      \"viewer\": {\n        \"user\": {\n          \"username\": \"johndoe\",\n          \"email\": \"john.doe@email.com\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Parse SDK from Source\nDESCRIPTION: Series of commands to build and install the Parse SDK globally on the device, including configuration and make commands.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/embedded_c/getting-started.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd parse-embedded-sdks\ntouch README\nautoreconf -fi\n./configure --prefix=/usr\nmake\nsudo make install\n```\n\n----------------------------------------\n\nTITLE: Implementing PFTableViewCell for Remote Images in Objective-C\nDESCRIPTION: Demonstrates how to use PFTableViewCell in a UITableView to display cells with remote images stored as PFFileObjects. This implementation shows the tableView:cellForRowAtIndexPath:object: method from a custom UITableViewController.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/user-interface.md#2025-04-22_snippet_19\n\nLANGUAGE: objective_c\nCODE:\n```\n@implementation SimpleTableViewController\n\n- (UITableViewCell *)tableView:(UITableView *)tableView  cellForRowAtIndexPath:(NSIndexPath *)indexPath object:(PFObject *)object {\n    static NSString *identifier = @\"cell\";\n    PFTableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:identifier];\n    if (!cell) { cell = [[PFTableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:identifier];\n    }\n    cell.textLabel.text = object[@\"title\"];\n\n    PFFileObject *thumbnail = object[@\"thumbnail\"];\n    cell.imageView.image = [UIImage imageNamed:@\"placeholder.jpg\"];\n    cell.imageView.file = thumbnail;\n    return cell;\n}\n\n@end\n```\n\n----------------------------------------\n\nTITLE: Initializing ParseTwitterUtils in Android Application\nDESCRIPTION: Code to initialize ParseTwitterUtils with consumer key and secret in the Application.onCreate() method.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/users.md#2025-04-22_snippet_21\n\nLANGUAGE: java\nCODE:\n```\nParseTwitterUtils.initialize(\"YOUR CONSUMER KEY\", \"YOUR CONSUMER SECRET\");\n```\n\n----------------------------------------\n\nTITLE: Deleting Files with Curl\nDESCRIPTION: Illustrates the process for deleting a file on the Parse server using Curl. Requires the application ID and master key headers, and specifies the file name acquired from the upload process.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/files.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X DELETE \\\n  -H \"X-Parse-Application-Id: <span class=\\\"custom-parse-server-appid\\\">${APPLICATION_ID}</span>\" \\\n  -H \"X-Parse-Master-Key: <span class=\\\"custom-parse-server-masterkey\\\">${MASTER_KEY}</span>\" \\\n  <span class=\\\"custom-parse-server-protocol\\\">https</span>://<span class=\\\"custom-parse-server-url\\\">YOUR.PARSE-SERVER.HERE</span><span class=\\\"custom-parse-server-mount\\\">/parse/</span>files/...profile.png\n```\n\n----------------------------------------\n\nTITLE: Using $inQuery to Find Comments on Posts with Images\nDESCRIPTION: This example shows how to use the $inQuery operator to find Comment objects where the related Post has an image field. The query filters for comments where the post field points to Post objects that match a nested query condition.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/queries.md#2025-04-22_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -G \\\n  --data-urlencode 'where={\"post\":{\"$inQuery\":{\"where\":{\"image\":{\"$exists\":true}},\"className\":\"Post\"}}}' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/classes/Comment\n```\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\nimport urllib.parse\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nparams = urllib.parse.urlencode({\"where\": json.dumps({\n    \"post\": {\n        \"$inQuery\": {\n            \"where\": {\n                \"image\": {\n                    \"$exists\": True\n                }\n            },\n            \"className\": \"Post\"\n        }\n    }\n})})\nconnection.connect()\nconnection.request('GET', '/parse/classes/Comment?%s' % params, '', {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Set Membership Constraints with containedIn and NSPredicate in Swift\nDESCRIPTION: Shows how to construct a query in Swift that finds objects with a field equal to any value in a provided array, either with PFQuery or NSPredicate. Input is an array of allowed values and returns objects whose field matches any entry. Uses ParseSwift SDK.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/queries.md#2025-04-22_snippet_23\n\nLANGUAGE: swift\nCODE:\n```\n// Finds scores from any of Jonathan, Dario, or Shawn\n// Using PFQuery\nlet names = [\"Jonathan Walsh\", \"Dario Wunsch\", \"Shawn Simon\"]\nquery.whereKey(\"playerName\", containedIn: names)\n\n// Using NSPredicate\nlet names = [\"Jonathan Walsh\", \"Dario Wunsch\", \"Shawn Simon\"]\nlet predicate = NSPredicate(format: \"playerName IN %@\", names)\nlet query = PFQuery(className: \"GameScore\", predicate: predicate)\n```\n\n----------------------------------------\n\nTITLE: Validating Session Token / Retrieving Current User in Python\nDESCRIPTION: Uses Python's http.client to make a GET request to the /users/me endpoint to validate a session token and retrieve the associated user. Includes all necessary authentication headers.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/users.md#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nconnection.connect()\nconnection.request('GET', '/parse/users/me', '', {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\",\n    \"X-Parse-Session-Token\": \"r:pnktnjyb996sj4p156gjtp4im\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Triggering Background Job via REST API - Bash\nDESCRIPTION: This Bash snippet uses curl to trigger a background job called 'userMigration' on the Parse Server. The request utilizes a POST method with the Master Key for authentication and submits a JSON payload specifying the 'plan' parameter. It is essential to replace placeholders with actual Application ID, Master Key, server URL, and endpoint mount before use.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/cloud-code.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n  -H \"X-Parse-Application-Id: <span class=\\\"custom-parse-server-appid\\\">${APPLICATION_ID}</span>\" \\\n  -H \"X-Parse-Master-Key: <span class=\\\"custom-parse-server-masterkey\\\">${MASTER_KEY}</span>\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"plan\":\"paid\"}' \\\n  <span class=\\\"custom-parse-server-protocol\\\">https</span>://<span class=\\\"custom-parse-server-url\\\">YOUR.PARSE-SERVER.HERE</span><span class=\\\"custom-parse-server-mount\\\">/parse/</span>jobs/userMigration\n```\n\n----------------------------------------\n\nTITLE: Enabling Parse Data Sharing in App Extensions\nDESCRIPTION: Code to enable data sharing in app extensions before Parse initialization. Requires both the application group identifier and the containing application's bundle identifier.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/extensions.md#2025-04-22_snippet_1\n\nLANGUAGE: objective_c\nCODE:\n```\n// Enable data sharing in app extensions.\n[Parse enableDataSharingWithApplicationGroupIdentifier:@\"group.com.parse.parseuidemo\"\n                                 containingApplication:@\"com.parse.parseuidemo\"];\n// Setup Parse\n[Parse setApplicationId:@\"<ParseAppId>\" clientKey:@\"<ClientKey>\"];\n```\n\nLANGUAGE: swift\nCODE:\n```\n// Enable data sharing in app extensions.\nParse.enableDataSharingWithApplicationGroupIdentifier(\"group.com.parse.parseuidemo\",\n                            containingApplicaiton: \"com.parse.parseuidemo\")\n// Setup Parse\nParse.setApplicationId(\"<ParseAppId>\", clientKey: \"<ClientKey>\")\n```\n\n----------------------------------------\n\nTITLE: Enabling Redis-Based Scalability for Parse LiveQuery Server in JavaScript\nDESCRIPTION: This example demonstrates how to configure both the Parse Server and LiveQuery server to use a Redis instance for scalable message brokering. By setting the 'redisURL' option, updates and subscription states are synchronized across multiple server instances, allowing for horizontal scaling in clustered or cloud environments (e.g., Heroku). Prerequisites include a running Redis server on the provided URL, and each live query component instance should point to the same Redis server but not use the same Redis database as the Parse RedisCacheAdapter.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/live-query.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nlet api = new ParseServer({\\n  ...,\\n  liveQuery: {\\n    classNames: ['Test', 'TestAgain'],\\n    redisURL: 'redis://localhost:6379'\\n  }\\n});\\n\\n...\\n\\nlet httpServer = require('http').createServer(app);\\nhttpServer.listen(port);\\nvar parseLiveQueryServer = ParseServer.createLiveQueryServer(httpServer,  {\\n  ...,\\n  redisURL: 'redis://localhost:6379'\\n});\n```\n\n----------------------------------------\n\nTITLE: Inefficient User Query with NotContainedIn in C#\nDESCRIPTION: This snippet demonstrates an inefficient way to query for active users using the NotContainedIn condition in C#. This approach is not recommended for performance reasons.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_37\n\nLANGUAGE: cs\nCODE:\n```\nvar query = ParseUser.Query\n    .WhereNotContainedIn(\"state\", new[] { \"Invited\", \"Blocked\" });\n```\n\n----------------------------------------\n\nTITLE: Multiple Product Registration in App Launch\nDESCRIPTION: Demonstrates registering multiple product handlers at app launch time in the application delegate.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/in-app-purchases.md#2025-04-22_snippet_1\n\nLANGUAGE: objective-c\nCODE:\n```\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    ...\n    [PFPurchase addObserverForProduct:@\"Pro\" block:^(SKPaymentTransaction *transaction) {\n        isPro = YES;\n    }];\n    [PFPurchase addObserverForProduct:@\"VIP\" block:^(SKPaymentTransaction *transaction) {\n        isVip = YES;\n    }];\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\nPFPurchase.addObserverForProduct(\"Pro\") {\n    (transaction: SKPaymentTransaction?) -> Void in\n    isPro = YES;\n}\nPFPurchase.addObserverForProduct(\"VIP\") {\n    (transaction: SKPaymentTransaction?) -> Void in\n    isVip = YES;\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Session Token Error Response in Parse Server\nDESCRIPTION: JSON error response when an invalid session token is provided. Returns error code 209 with a descriptive message.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/users.md#2025-04-22_snippet_11\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"code\": 209,\n  \"error\": \"invalid session token\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example Parse Object JSON Structure\nDESCRIPTION: Illustrates the JSON structure of a saved Parse Object, including automatically generated fields like objectId, createdAt, and updatedAt.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/arduino/objects.md#2025-04-22_snippet_2\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"objectId\": \"xWMyZ4YEGZ\",\n  \"score\": 1337,\n  \"playerName\": \"Sean Plott\",\n  \"cheatMode\": false,\n  \"createdAt\":\"2022-01-01T12:23:45.678Z\",\n  \"updatedAt\":\"2022-01-01T12:23:45.678Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking a Cloud Function from C++ in Parse Client\nDESCRIPTION: This code shows how to call a Cloud Function named 'hello' from a C++ client using parseSendRequest(). It includes a callback function to handle the response.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/embedded_c/cloud-code.md#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nvoid myCloudFunctionCallback(ParseClient client, int error, int httpStatus, const char* httpResponseBody) {\n\tif (error == 0 && httpResponseBody != NULL) {\n\t\t// httpResponseBody holds the Cloud Function response\n\t}\n}\nparseSendRequest(client, \"POST\", \"/parse/functions/hello\", \"{\\\"value\\\":\\\"echo\\\"}\", myCloudFunctionCallback);\n```\n\n----------------------------------------\n\nTITLE: Querying Movies with Review Count in Java\nDESCRIPTION: An optimized query for fetching movies that already contain their review counts as a field in Java. This avoids expensive count operations on the Review class.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_93\n\nLANGUAGE: java\nCODE:\n```\nParseQuery<ParseObject> query = ParseQuery.getQuery(\"Movie\");\nquery.findInBackground(new FindCallback<ParseObject>() {\n  @Override\n  public void done(List<ParseObject> list, ParseException e) {\n    if (e == null) {\n      // Results include the reviews count field\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Installing NodeJS on Ubuntu\nDESCRIPTION: Installs NodeJS which is a prerequisite for running Parse Server.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/deploying-aws-ubuntu.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install nodejs\n```\n\n----------------------------------------\n\nTITLE: Error Tracking with Parse Analytics in PHP\nDESCRIPTION: This snippet illustrates how Parse Analytics can be used to track errors in a PHP application. The code snippet shows how to log an error event by converting an error code to a string. It requires Parse SDK for PHP and involves tracking error frequency and rate via custom events.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/analytics.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$codeString = '' + $error->getCode();\nParseAnalytics::track('error', [\"code\" => codeString]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Input Fields for Review Class\nDESCRIPTION: JSON configuration example showing how to restrict which fields are allowed for create and update operations on the Review class.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/customisation.md#2025-04-22_snippet_4\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"classConfigs\": [\n    {\n      \"className\": \"Review\",\n      \"type\": {\n        \"inputFields\": {\n          \"create\": [\"rating\", \"body\"],\n          \"update\": [\"numberOfLikes\"]\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Linking Parse Server Module and Installing Dependencies - Shell Script\nDESCRIPTION: This snippet shows how to link the cloned Parse Server module into the current project and install all necessary dependencies using npm. It requires Node.js and npm to be installed. The 'npm link' command creates a global symlink to the development version of parse-server, while 'npm install' installs the required npm packages. Parameters include the file paths to the Parse Server source directory.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/development.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm link parse-server path/to/cloned/repo\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Adding Parse Object Properties\nDESCRIPTION: Demonstrates adding and retrieving typed properties to Parse Objects.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dart/objects.md#2025-04-22_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\ndietPlan.set<int>('RandomInt', 8);\nvar randomInt = dietPlan.get<int>('RandomInt');\n```\n\n----------------------------------------\n\nTITLE: Example JSONC for Ordered Find Query - JSONC\nDESCRIPTION: The response reflects the specified ordering, with results sorted by score (ascending). Only objects matching the 'cheatMode: false' condition are included. The structure is identical to previous responses, showing consistent Parse Server response format.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/queries.md#2025-04-22_snippet_12\n\nLANGUAGE: JSONC\nCODE:\n```\n{\n  \"data\": {\n    \"gameScores\": {\n      \"count\": 2,\n      \"edges\": [\n        {\n          \"cursor\": \"YXJyYXljb25uZWN0aW9uOjA=\",\n          \"node\": {\n            \"id\": \"R2FtZVNjb3JlOjNmWjBoQVJDVU0=\",\n            \"playerName\": \"Steve Jordan\",\n            \"score\": 134,\n            \"cheatMode\": false\n          }\n        },\n        {\n          \"cursor\": \"YXJyYXljb25uZWN0aW9uOjE=\",\n          \"node\": {\n            \"id\": \"R2FtZVNjb3JlOjZtdGlNcmtXNnY=\",\n            \"playerName\": \"Sean Plott\",\n            \"score\": 1337,\n            \"cheatMode\": false\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Push Notification with Channel and Score Filter\nDESCRIPTION: Shows how to send a push notification to subscribers of a specific channel (Giants) who have also enabled score updates. Demonstrates filtering by multiple conditions.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/push-notifications.md#2025-04-22_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"where\": {\n          \"channels\": \"Giants\",\n          \"scores\": true\n        },\n        \"data\": {\n          \"alert\": \"The Giants scored a run! The score is now 2-2.\"\n        }\n      }' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/push\n```\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nconnection.connect()\nconnection.request('POST', '/parse/push', json.dumps({\n    \"where\": {\n        \"channels\": \"Giants\",\n        \"scores\": True\n    },\n    \"data\": {\n        \"alert\": \"The Giants scored a run! The score is now 2-2.\"\n    }\n}), {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\",\n    \"Content-Type\": \"application/json\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Fetching Parse Config via REST API - Python\nDESCRIPTION: Shows how to retrieve configuration parameters from a Parse Server using Python's http.client and json modules. The client establishes a secure connection, sends a GET request with required application and API keys, and parses the returned JSON object. Connection parameters including server URL, application ID, and REST API Key must be set; output is a dictionary representing current config params.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/config.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('<span class=\\\"custom-parse-server-url\\\">YOUR.PARSE-SERVER.HERE</span>', 443)\nconnection.connect()\nconnection.request('GET', '<span class=\\\"custom-parse-server-mount\\\">/parse/</span>config', '', {\n    \"X-Parse-Application-Id\": \"<span class=\\\"custom-parse-server-appid\\\">${APPLICATION_ID}</span>\",\n    \"X-Parse-REST-API-Key\": \"<span class=\\\"custom-parse-server-restapikey\\\">${REST_API_KEY}</span>\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Adding ParseLoginActivity to AndroidManifest.xml\nDESCRIPTION: This XML configuration defines the ParseLoginActivity in your app's manifest file. It includes metadata to enable the ParseLogin functionality.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/user-interface.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<activity\n    android:name=\"com.parse.ui.ParseLoginActivity\"\n    android:label=\"@string/app_name\"\n    android:launchMode=\"singleTop\">\n    <meta-data\n        android:name=\"com.parse.ui.ParseLoginActivity.PARSE_LOGIN_ENABLED\"\n        android:value=\"true\"/>\n</activity>\n```\n\n----------------------------------------\n\nTITLE: Deleting Objects with Parse REST API (Bash)\nDESCRIPTION: This snippet demonstrates how to delete an object from Parse Cloud using a DELETE request. It requires the Application ID and REST API Key for authentication.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/objects.md#2025-04-22_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X DELETE \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  https://YOUR.PARSE-SERVER.HERE/parse/classes/GameScore/Ed1nuqPvcm\n```\n\n----------------------------------------\n\nTITLE: Specifying Role-Level Permissions in Parse Server ACL\nDESCRIPTION: This JSON snippet demonstrates how to specify role-level permissions alongside user-level permissions in an ACL object for a Parse Server object.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/roles.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"8TOXdXf3tz\": {\n    \"write\": true\n  },\n  \"role:Members\": {\n    \"read\": true\n  },\n  \"role:Moderators\": {\n    \"write\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Parse Dashboard\nDESCRIPTION: Starts Parse Dashboard to provide a web interface for Parse Server management.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/deploying-aws-ubuntu.md#2025-04-22_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nparse-dashboard\n```\n\n----------------------------------------\n\nTITLE: Creating ParseFile from String Data in C#\nDESCRIPTION: Demonstrates how to create a ParseFile object from string data by converting it to bytes. Shows basic file initialization with a filename.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/files.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nbyte[] data = System.Text.Encoding.UTF8.GetBytes(\"Working at Parse is great!\");\nParseFile file = new ParseFile(\"resume.txt\", data);\n```\n\n----------------------------------------\n\nTITLE: Registering for Push Notifications - Objective-C\nDESCRIPTION: Shows the Objective-C approach for registering an iOS app for remote notifications by configuring notification types and user notification settings. Dependencies include UIKit, an Objective-C iOS project, and appropriate permissions. This should be placed in application:didFinishLaunchingWithOptions:, and sets up the alert, badge, and sound notification types.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/push-notifications-ios.md#2025-04-22_snippet_1\n\nLANGUAGE: objc\nCODE:\n```\n// Objective-C\\nUIUserNotificationType userNotificationTypes = (UIUserNotificationTypeAlert |\\nUIUserNotificationTypeBadge |\\nUIUserNotificationTypeSound);\\nUIUserNotificationSettings *settings = [UIUserNotificationSettings settingsForTypes:userNotificationTypes\\ncategories:nil];\\n[application registerUserNotificationSettings:settings];\\n[application registerForRemoteNotifications];\n```\n\n----------------------------------------\n\nTITLE: Querying All Parse Users via REST API in Bash\nDESCRIPTION: Makes a GET request to retrieve all users from the Parse Server. This basic query returns a list of users without any filtering parameters.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/users.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  https://YOUR.PARSE-SERVER.HERE/parse/users\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response: List of Cloud Triggers by Class/Name\nDESCRIPTION: Provides an example JSON response structure when fetching triggers by class and name (e.g., `/hooks/triggers/Scores/beforeSave`). The `results` array lists all triggers (webhooks or cloud code) matching the criteria.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/hooks.md#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"results\": [\n    { \"className\": \"Scores\", \"triggerName\": \"beforeSave\" },\n    {\n      \"className\": \"Scores\",\n      \"triggerName\": \"beforeSave\",\n      \"url\": \"https://api.example.com/Scores/beforeSave\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Distinct Field Values in Python\nDESCRIPTION: Python implementation to find distinct values for the score field in GameScore objects. Requires the master key and uses the aggregate endpoint.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/queries.md#2025-04-22_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\nimport urllib.parse\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nparams = urllib.parse.urlencode({\"distinct\": \"score\"})\nconnection.connect()\nconnection.request('GET', '/parse/aggregate/GameScore?%s' % params, '', {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-Master-Key\": \"${MASTER_KEY}\"\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Calling Cloud Function from PHP\nDESCRIPTION: Example of how to call the averageStars Cloud Function from a PHP client. The function accepts a movie parameter and returns the average rating.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_82\n\nLANGUAGE: php\nCODE:\n```\n$rating = ParseCloud::run(\"averageStars\", [\"movie\" => \"The Matrix\" ]);\n// rating is 4.5\n```\n\n----------------------------------------\n\nTITLE: Inefficient notEqualTo Query in JavaScript\nDESCRIPTION: Example of an inefficient query using notEqualTo constraint which cannot take advantage of indexes and requires scanning all objects in the class.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar GameScore = Parse.Object.extend(\"GameScore\");\nvar query = new Parse.Query(GameScore);\nquery.notEqualTo(\"playerName\", \"Michael Yabuti\");\nquery.find().then(function(results) {\n  // Retrieved scores successfully\n});\n```\n\n----------------------------------------\n\nTITLE: Unlinking User Account from Facebook in Parse (cURL)\nDESCRIPTION: Shows how to unlink a user account from Facebook using Parse Server's REST API. It sends a PUT request to set the Facebook authData to null.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/users.md#2025-04-22_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -H \"X-Parse-Session-Token: r:samplei3l83eerhnln0ecxgy5\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"authData\": {\n          \"facebook\": null\n        }\n      }' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/users/uMz0YZeAqc\n```\n\n----------------------------------------\n\nTITLE: GitHub Insecure Authentication Payload for Parse Server\nDESCRIPTION: Demonstrates the deprecated insecure authentication payload format required by Parse Server for GitHub authentication, using a user ID and access token.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/third-party-auth.md#2025-04-22_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\nauthData: {\n  \"id\": \"GITHUB_USER_ID\",\n  \"access_token\": \"GITHUB_ACCESS_TOKEN\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying with Boolean constraints in PHP\nDESCRIPTION: Shows a query in PHP using a boolean constraint which provides minimal indexing benefits due to the low entropy of boolean fields.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$query->equalTo(\"cheatMode\", false);\n```\n\n----------------------------------------\n\nTITLE: Inefficient Query with Case-Insensitive Regex in Objective-C and Swift\nDESCRIPTION: This snippet shows an inefficient way to query for player names using a case-insensitive regular expression in both Objective-C and Swift. This approach is not recommended for performance reasons.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_40\n\nLANGUAGE: objective_c\nCODE:\n```\n[query whereKey:@\"playerName\" matchesRegex:@\"Michael\" modifiers:@\"i\"];\n```\n\nLANGUAGE: swift\nCODE:\n```\nquery.whereKey(\"playerName\", matchesRegex: \"Michael\", modifiers: \"i\")\n```\n\n----------------------------------------\n\nTITLE: Tracking App Opens with Parse Analytics in C#\nDESCRIPTION: Basic implementation to track application launch events using Parse Analytics. This code should be added to the application's launch event handler to collect data about when and how frequently the app is opened.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/analytics.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nParseAnalytics.TrackAppOpenedAsync();\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Parse GraphQL Server via CLI\nDESCRIPTION: Basic CLI commands to install dependencies and start Parse Server with GraphQL support.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/getting-started.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install -g parse-server mongodb-runner\n$ mongodb-runner start\n$ parse-server --appId APPLICATION_ID --masterKey MASTER_KEY --databaseURI mongodb://localhost/test --mountGraphQL --mountPlayground\n```\n\n----------------------------------------\n\nTITLE: Querying with Boolean constraints in C#\nDESCRIPTION: Demonstrates a query in C# using a boolean constraint which is not efficient for indexing because boolean fields have only two possible values.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_10\n\nLANGUAGE: cs\nCODE:\n```\nquery.WhereEqualTo(\"cheatMode\", false);\n```\n\n----------------------------------------\n\nTITLE: Clearing Session Token in Parse for Embedded C\nDESCRIPTION: This code shows how to clear the session token, which unauthenticates the device from the current user session.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/embedded_c/users.md#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nparseClearSessionToken(client);\n```\n\n----------------------------------------\n\nTITLE: Setting Expiration Date for Push Notifications in C#\nDESCRIPTION: This code demonstrates how to set an absolute expiration date for a push notification. Parse will stop attempting to deliver the notification after this date has passed.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/push-notifications.md#2025-04-22_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nvar push = new ParsePush();\npush.Expiration = new DateTime(2015, 8, 14);\npush.Alert = \"Season tickets on sale until August 14th!\";\npush.SendAsync();\n```\n\n----------------------------------------\n\nTITLE: Installing Relay Library Dependency\nDESCRIPTION: NPM command to install the graphql-relay library, which is required for handling Relay Node IDs in Cloud Code functions when working with Parse GraphQL.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/customisation.md#2025-04-22_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install graphql-relay --save\n```\n\n----------------------------------------\n\nTITLE: Post-initialization Parse Object Registration\nDESCRIPTION: Registers Parse Object subclasses after SDK initialization.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dart/objects.md#2025-04-22_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nParseCoreData().registerSubClass('Diet_Plans', () => DietPlan());\nParseCoreData().registerUserSubClass((username, password, emailAddress, {client, debug, sessionToken}) => CustomParseUser(username, password, emailAddress));\n```\n\n----------------------------------------\n\nTITLE: Sample FCM Push Notification Request and Response - JSONC\nDESCRIPTION: This snippet provides a sample log output of an FCM (Firebase Cloud Messaging) push notification request and response in JSON format. It includes both the parameters sent in the request and the results received, which are useful for debugging and verifying that the notification has been dispatched successfully. Note this is for logging/troubleshooting and not for direct execution. The input is JSON serializable request/response data and the output illustrates fields like priority, result counts, and message IDs.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/push-notifications.md#2025-04-22_snippet_7\n\nLANGUAGE: jsonc\nCODE:\n```\n// FCM request and response\n{\n  \"request\": {\n    \"params\": {\n      \"priority\": \"normal\",\n      \"data\": {\n        \"time\": \"2022-01-01T12:23:45.678Z\",\n        \"push_id\": \"NTDgWw7kp8\",\n        \"data\": \"{\\\"alert\\\":\\\"All work and no play makes Jack a dull boy.\\\"}\"\n      }\n    }\n  },\n  \"response\": {\n    \"multicast_id\": 5318039027588186000,\n    \"success\": 1,\n    \"failure\": 0,\n    \"canonical_ids\": 0,\n    \"results\": [\n      {\n        \"registration_id\": \"APA91bEdLpZnXT76vpkvkD7uWXEAgfrZgkiH_ybkzXqhaNcRw1KHOY0s9GUKNgneGxe2PqJ5Swk1-Vf852kpHAP0Mhoj5wd1MVXpRsRr_3KTQo_dkNd_5wcQ__yWnWLxbeM3kg_JziJK\",\n        \"message_id\": \"0:1455074519347821%df0f8ea7f9fd7ecd\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Editing Parse Server Configuration\nDESCRIPTION: Opens the Parse Server configuration file for editing to configure server parameters.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/deploying-aws-ubuntu.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nsudo nano -w config.json\n```\n\n----------------------------------------\n\nTITLE: Creating a ParsePolygon in Java\nDESCRIPTION: This code shows how to create a ParsePolygon object with multiple coordinate points.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/geopoints.md#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nList<ParseGeoPoint> points = new ArrayList<ParseGeoPoint>();\npoints.add(new ParseGeoPoint(0,0));\npoints.add(new ParseGeoPoint(0,1));\npoints.add(new ParseGeoPoint(1,1));\npoints.add(new ParseGeoPoint(1,0));\n\nParsePolygon polygon = new ParsePolygon(points);\n```\n\n----------------------------------------\n\nTITLE: Referencing File Objects in Parse Server\nDESCRIPTION: Shows the format for referencing previously uploaded files in Parse Server using the __type field and name of the file.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/objects.md#2025-04-22_snippet_36\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"__type\": \"File\",\n  \"name\": \"...profile.png\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSONC for Filtered Find Query - JSONC\nDESCRIPTION: Represents the response where only one GameScore met the specified 'where' condition. All node and edge structure is retained, but only edges for matching records are returned. Useful for validating filter application and result counts.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/queries.md#2025-04-22_snippet_10\n\nLANGUAGE: JSONC\nCODE:\n```\n{\n  \"data\": {\n    \"gameScores\": {\n      \"count\": 1,\n      \"edges\": [\n        {\n          \"cursor\": \"YXJyYXljb25uZWN0aW9uOjA=\",\n          \"node\": {\n            \"id\": \"R2FtZVNjb3JlOjZtdGlNcmtXNnY=\",\n            \"playerName\": \"Sean Plott\",\n            \"score\": 1337,\n            \"cheatMode\": false\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Limiting Query Results in Parse C#\nDESCRIPTION: Shows how to return at most 10 results by passing the limit to the Limit method in the Parse C# SDK. This is important for client efficiency in mobile scenarios.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_62\n\nLANGUAGE: cs\nCODE:\n```\nquery.Limit(10); // limit to at most 10 results\n```\n\n----------------------------------------\n\nTITLE: Inefficient notEqualTo Query in Java\nDESCRIPTION: Example of an inefficient query in Java using whereNotEqualTo which cannot utilize indexes and requires scanning the entire class.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_15\n\nLANGUAGE: java\nCODE:\n```\nParseQuery<ParseObject> query = ParseQuery.getQuery(\"GameScore\");\nquery.whereNotEqualTo(\"playerName\", \"Michael Yabuti\");\nquery.findInBackground(new FindCallback<ParseObject>() {\n  @Override\n  public void done(List<ParseObject> list, ParseException e) {\n    if ( e == null) {\n      // Retrieved scores successfully\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Inefficient notEqualTo Query in Swift\nDESCRIPTION: Shows an inefficient query in Swift using notEqualTo constraint which cannot take advantage of indexes and requires scanning all objects.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\nlet query = PFQuery.queryWithClassName(\"GameScore\")\nquery.whereKey(\"playerName\", notEqualTo: \"Michael Yabuti\")\nquery.findObjectsInBackgroundWithBlock {\n  (objects, error) in\n  if !error {\n    // Retrieved scores successfully\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Parse Server Environment Variables in .env (Shell)\nDESCRIPTION: Example `.env` file content for configuring the parse-server-example application hosted on Glitch. Key variables like `APP_ID`, `MASTER_KEY`, `DATABASE_URI` (using the mLab connection string), and `SERVER_URL` (using the Glitch project URL) must be set according to your specific mLab database and Glitch project details. The `SECRET` and `MADE_WITH` variables are optional.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/deploying-glitch-mlab.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Environment Config\n\n# store your secrets and config variables in here\n# only invited collaborators will be able to see your .env values\n\n# reference these in your code with process.env.SECRET\n\nSECRET=\nMADE_WITH=\n\n# note: .env is a shell file so there can't be spaces around =\nAPP_ID=myAppId\nMASTER_KEY=your_master_key_here\nDATABASE_URI=your_mlab_database_uri_here\nSERVER_URL=https://project-name.glitch.me/parse\nPARSE_SERVER_LOGS=/tmp\n\n```\n\n----------------------------------------\n\nTITLE: Adding Network Client Permission in macOS Swift\nDESCRIPTION: Code snippet to add network client permission in macOS entitlements files for Parse Flutter SDK to communicate with Parse Server.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/flutter/getting-started.md#2025-04-22_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n<key>com.apple.security.network.client</key>\n<true/>\n```\n\n----------------------------------------\n\nTITLE: Inefficient notEqualTo User Query in Objective-C\nDESCRIPTION: Shows another inefficient query pattern in Objective-C using notEqualTo that should be rewritten to use containedIn for better performance.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_19\n\nLANGUAGE: objective-c\nCODE:\n```\nPFQuery *query = [PFUser query];\n[query whereKey:@\"state\" notEqualTo:@\"Invited\"];\n```\n\n----------------------------------------\n\nTITLE: Limiting Parse Query Results in Android\nDESCRIPTION: This snippet shows how to limit the number of results returned by a ParseQuery using the setLimit method. By default, results are limited to 100, but this can be adjusted.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/queries.md#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nquery.setLimit(10); // limit to at most 10 results\n```\n\n----------------------------------------\n\nTITLE: Setting Installation ID for Arduino with Parse\nDESCRIPTION: This snippet demonstrates how to associate an Arduino device with a pre-generated installation ID using Parse. The installation ID is a unique identifier for the device, used to target push notifications.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/arduino/push-notifications.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n// In this example, we associate this device with a pre-generated installation ID\nParse.setInstallationId(\"ab946c14-757a-4448-8b77-69704b01bb7b\");\n```\n\n----------------------------------------\n\nTITLE: Sending Push to Channel with Query Filter in Parse .NET SDK\nDESCRIPTION: This snippet demonstrates how to combine channel targeting with a query filter. It sends a push to subscribers of the \"Giants\" channel who have also opted in for score updates.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/push-notifications.md#2025-04-22_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nvar push = new ParsePush();\npush.Query = from installation in ParseInstallation.Query\n             where installation.Get<bool>(\"scores\") == true\n             select installation;\npush.Channels = new List<string> { \"Giants\" };\npush.Alert = \"Giants scored against the A's! It's now 2-2.\";\nawait push.SendAsync();\n```\n\n----------------------------------------\n\nTITLE: Inefficient User Query with NotContainedIn in Objective-C and Swift\nDESCRIPTION: This snippet demonstrates an inefficient way to query for active users using the NotContainedIn condition in both Objective-C and Swift. This approach is not recommended for performance reasons.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_35\n\nLANGUAGE: objective_c\nCODE:\n```\nPFQuery *query = [PFUser query];\n[query whereKey:@\"state\" notContainedIn:@[@\"Invited\", @\"Blocked\"]];\n```\n\nLANGUAGE: swift\nCODE:\n```\nvar query = PFUser.query()\nquery.whereKey(\"state\", notContainedIn: [\"Invited\", \"Blocked\"])\n```\n\n----------------------------------------\n\nTITLE: Cloning Parse PHP SDK Using Git\nDESCRIPTION: This command clones the Parse PHP SDK repository from GitHub using Git. After cloning, include the 'autoload.php' file to automatically load Parse SDK classes. This method requires Git to be installed and is suitable for users who prefer managing dependencies via version control.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/installation.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/parse-community/parse-php-sdk.git\n```\n\n----------------------------------------\n\nTITLE: Unlinking Twitter from Parse User in Android\nDESCRIPTION: Code to remove the association between a ParseUser and their Twitter account. This snippet shows how to unlink a Twitter account and handle the callback when the operation completes.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/users.md#2025-04-22_snippet_24\n\nLANGUAGE: java\nCODE:\n```\nParseTwitterUtils.unlinkInBackground(user, new SaveCallback() {\n  @Override\n  public void done(ParseException ex) {\n    if (ex == null) {\n      Log.d(\"MyApp\", \"The user is no longer associated with their Twitter account.\");\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Parse Config via REST API - Bash\nDESCRIPTION: Demonstrates how to fetch the current Parse configuration parameters remotely using the curl command in Bash. Required dependencies are curl and valid Parse Server credentials (Application ID and REST API Key) as HTTP headers. The GET request returns a JSON object containing all current config parameters under the 'params' field. Actual URL and authentication tokens must be supplied by the user.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/config.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\\n  -H \"X-Parse-Application-Id: <span class=\\\"custom-parse-server-appid\\\">${APPLICATION_ID}</span>\" \\\n  -H \"X-Parse-REST-API-Key: <span class=\\\"custom-parse-server-restapikey\\\">${REST_API_KEY}</span>\" \\\n  <span class=\\\"custom-parse-server-protocol\\\">https</span>://<span class=\\\"custom-parse-server-url\\\">YOUR.PARSE-SERVER.HERE</span><span class=\\\"custom-parse-server-mount\\\">/parse/</span>config\n```\n\n----------------------------------------\n\nTITLE: Configuring Mutation Aliases\nDESCRIPTION: JSON configuration example showing how to set custom aliases for mutation operations.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/customisation.md#2025-04-22_snippet_10\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"classConfigs\": [\n    {\n      \"className\": \"Record\",\n      \"mutation\": {\n        \"createAlias\": \"newRecord\",\n        \"updateAlias\": \"changeRecord\",\n        \"destroyAlias\": \"eraseRecord\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Installation Objects with REST API in Python\nDESCRIPTION: Python implementation to update an installation object to subscribe to the 'foo' push channel. Uses the http.client library to send a PUT request to the Parse Server.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/push-notifications.md#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nconnection.connect()\nconnection.request('PUT', '/parse/installations/mrmBZvsErB', json.dumps({\n    \"deviceType\": \"ios\",\n    \"deviceToken\": \"0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef\",\n    \"channels\": [\n        \"\",\n        \"foo\"\n    ]\n}), {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\",\n    \"Content-Type\": \"application/json\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Counting Objects with QueryBuilder in Dart\nDESCRIPTION: This snippet shows how to count objects that match a specific query criteria using the count() method on a QueryBuilder instance.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dart/queries.md#2025-04-22_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nQueryBuilder<ParseObject> queryPlayers =\n    QueryBuilder<ParseObject>(ParseObject('GameScore'))\n      ..whereEqualTo('playerName', 'Jonathan Walsh');\nvar apiResponse = await queryPlayers.count();\nif (apiResponse.success && apiResponse.result != null) {\n  int countGames = apiResponse.count;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Users with NotEqualTo in PHP\nDESCRIPTION: This snippet demonstrates how to query for users whose state is not 'Invited' using the NotEqualTo condition in PHP. However, this approach is not recommended for performance reasons.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n$query = new ParseQuery(\"_User\");\n\n$query->notEqualTo(\"state\", \"Invited\");\n```\n\n----------------------------------------\n\nTITLE: Child Relation Query Headers in Parse GraphQL\nDESCRIPTION: Authentication headers required for making Parse GraphQL API requests in child relation context.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/queries.md#2025-04-22_snippet_20\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"X-Parse-Application-Id\": \"APPLICATION_ID\",\n  \"X-Parse-Master-Key\": \"MASTER_KEY\" // (optional)\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single Result with getFirstObject in Parse using Objective-C\nDESCRIPTION: Illustrates the use of getFirstObjectInBackgroundWithBlock to asynchronously retrieve the first Parse object that matches a query. Involves setting up a PFQuery, applying constraints, and handling the result/error asynchronously. Expects key-value constraint and completion block, returns either an object or an error.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/queries.md#2025-04-22_snippet_12\n\nLANGUAGE: objective_c\nCODE:\n```\nPFQuery *query = [PFQuery queryWithClassName:@\"GameScore\"];\n[query whereKey:@\"playerEmail\" equalTo:@\"dstemkoski@example.com\"];\n[query getFirstObjectInBackgroundWithBlock:^(PFObject *object, NSError *error) {\n  if (!object) {\n    NSLog(@\"The getFirstObject request failed.\");\n  } else {\n    // The find succeeded.\n    NSLog(@\"Successfully retrieved the object.\");\n  }\n}];\n```\n\n----------------------------------------\n\nTITLE: Example JSONC Response for Multiple Object Find - JSONC\nDESCRIPTION: A typical GraphQL response when querying for multiple objects. The 'edges' array contains nodes with full data for each result, and 'pageInfo' supplies cursor-based pagination details. The 'count' key provides a total across all matching records, not just those returned per page.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/queries.md#2025-04-22_snippet_8\n\nLANGUAGE: JSONC\nCODE:\n```\n{\n  \"data\": {\n    \"gameScores\": {\n      \"pageInfo\": {\n        \"hasNextPage\": false,\n        \"hasPreviousPage\": false,\n        \"startCursor\": \"YXJyYXljb25uZWN0aW9uOjA=\",\n        \"endCursor\": \"YXJyYXljb25uZWN0aW9uOjI=\"\n      },\n      \"count\": 3,\n      \"edges\": [\n        {\n          \"cursor\": \"YXJyYXljb25uZWN0aW9uOjA=\",\n          \"node\": {\n            \"id\": \"R2FtZVNjb3JlOjZtdGlNcmtXNnY=\",\n            \"playerName\": \"Sean Plott\",\n            \"score\": 1337,\n            \"cheatMode\": false\n          }\n        },\n        {\n          \"cursor\": \"YXJyYXljb25uZWN0aW9uOjE=\",\n          \"node\": {\n            \"id\": \"R2FtZVNjb3JlOnp2cHdTYXlmYnA=\",\n            \"playerName\": \"John Doe\",\n            \"score\": 13,\n            \"cheatMode\": true\n          }\n        },\n        {\n          \"cursor\": \"YXJyYXljb25uZWN0aW9uOjI=\",\n          \"node\": {\n            \"id\": \"R2FtZVNjb3JlOjNmWjBoQVJDVU0=\",\n            \"playerName\": \"Steve Jordan\",\n            \"score\": 134,\n            \"cheatMode\": false\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating PFInstallation with Device Token - Objective-C\nDESCRIPTION: This Objective-C snippet handles updating the PFInstallation object with the deviceToken after successful registration. The deviceToken is critical for targeting specific devices with push notifications.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/push-notifications.md#2025-04-22_snippet_2\n\nLANGUAGE: objective_c\nCODE:\n```\n- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken {\n  // Store the deviceToken in the current Installation and save it to Parse\n  PFInstallation *currentInstallation = [PFInstallation currentInstallation];\n  [currentInstallation setDeviceTokenFromData:deviceToken];\n  [currentInstallation saveInBackground];\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Parse Object in C++\nDESCRIPTION: Shows how to update an existing Parse Object with a new temperature value in C++.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/arduino/objects.md#2025-04-22_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nParseObjectUpdate update;\nupdate.setClassName(\"Temperature\");\nupdate.setObjectId(\"xWMyZ4YEGZ\");\nupdate.add(\"temperature\", 100);\nupdate.send();\n```\n\n----------------------------------------\n\nTITLE: Querying Product Information in Parse iOS\nDESCRIPTION: Demonstrates how to query product information using PFProduct class in Parse SDK.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/in-app-purchases.md#2025-04-22_snippet_4\n\nLANGUAGE: objective-c\nCODE:\n```\nPFQuery *productQuery = [PFProduct query];\nPFProduct *product = [[productQuery findObjects] lastObject];\nNSLog(@\"%@, %@\", product.productIdentifier, product.title);\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet productQuery = PFProduct.query()\nif let product = productQuery.findObjects.lastObject as? PFProduct {\n  print(product.productIdentifier, product.title)\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Returned Fields in Parse PHP\nDESCRIPTION: Demonstrates field selection in a Query using the Parse PHP SDK. Uses select with an array of desired field names before executing find; returned results contain only those fields for reduced data transfer.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_73\n\nLANGUAGE: php\nCODE:\n```\n$query = new ParseQuery(\"GameScore\");\n\n$query->select([\"score\", \"playerName\"]);\n\n$results = $query->find();\n// each of results will only have the selected fields available.\n```\n\n----------------------------------------\n\nTITLE: Inefficient Query with Contains in Java\nDESCRIPTION: This snippet shows an inefficient way to query for player names using the Contains condition in Java. This approach is not recommended for performance reasons.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_46\n\nLANGUAGE: java\nCODE:\n```\nquery.whereContains(\"playerName\", \"Michael\");\n```\n\n----------------------------------------\n\nTITLE: Unset Mutation Response Example for GameScore - JSONC\nDESCRIPTION: Shows a response from a mutation that has set the 'playerName' field to null, indicating the field is now unset in the Parse database. Useful for confirming mutation effects and handling UI logic related to optional/nullable fields.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/objects.md#2025-04-22_snippet_6\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"data\": {\n    \"updateGameScore\": {\n      \"gameScore\": {\n        \"id\": \"R2FtZVNjb3JlOmM3TVpDZEhQY2w=\",\n        \"playerName\": null\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing All Cached Query Results in Parse SDK\nDESCRIPTION: Shows how to clear all cached query results across the entire application. This is useful when you want to ensure fresh data is fetched for all queries.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/queries.md#2025-04-22_snippet_56\n\nLANGUAGE: objective_c\nCODE:\n```\n[PFQuery clearAllCachedResults];\n```\n\nLANGUAGE: swift\nCODE:\n```\nPFQuery.clearAllCachedResults()\n```\n\n----------------------------------------\n\nTITLE: Initializing ParseClient with Custom Server URL in .NET (C#)\nDESCRIPTION: This C# snippet shows how to configure the Parse SDK in a .NET application using an object initializer for the application ID and server URL. It assumes that the ParseClient and supporting libraries are referenced. The application ID should match that of your Parse Server configuration. Outputs an initialized SDK instance for further operations.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/using-parse-sdks.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nParseClient.initialize(new ParseClient.Configuration {\n    ApplicationId = \"YOUR_APP_ID\",\n    Server = \"http://localhost:1337/parse/\"\n});\n```\n\n----------------------------------------\n\nTITLE: Inefficient Query with Contains in C#\nDESCRIPTION: This snippet demonstrates an inefficient way to query for player names using the Contains condition in C#. This approach is not recommended for performance reasons.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_47\n\nLANGUAGE: cs\nCODE:\n```\nquery.WhereContains(\"playerName\", \"Michael\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Customer Billing Webhook in Ruby\nDESCRIPTION: Ruby webhook implementation for handling customer billing requests. Validates webhook key, processes chargeCustomer function, and enqueues billing jobs.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/cloudcode/cloud-code-advanced.md#2025-04-22_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nprotect_from_forgery :except => :index\n\ndef index\n  if request.headers['X-Parse-Webhook-Key'] !== @webhook_key\n    return render :json => { :error => \"Request Unauthorized\"}\n  end\n\n  if params[:functionName] == \"chargeCustomer\" && params[:master] == true\n    custom_params = params[:params]\n    user_id = custom_params[\"userObjectId\"]\n    Resque.enqueue(BillingJob, user_id)\n    return render :json => { :success => \"User billed!\" }\n  end\n\n  return render :json => { :error => \"Unknown function\"}\nend\n```\n\n----------------------------------------\n\nTITLE: Editing Function Webhook URL using PUT Request\nDESCRIPTION: Updates the URL of an existing function webhook using PUT method. Requires application ID and master key for authentication. Returns function name and updated URL.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/hooks.md#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-Master-Key: ${MASTER_KEY}\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"url\":\"https://api.example.com/_baz\"}' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/hooks/functions/baz\n```\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nconnection.connect()\nconnection.request('PUT', '/parse/hooks/functions/baz', json.dumps({\n    \"url\":\"https://api.example.com/_baz\"\n}), {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-Master-Key\": \"${MASTER_KEY}\",\n    \"Content-Type\": \"application/json\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Handling Push Notifications in Windows Phone 8 Navigation\nDESCRIPTION: Demonstrates how to process push notification data in the OnNavigatedTo event handler for Windows Phone 8 applications.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/push-notifications.md#2025-04-22_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\npublic override void OnNavigatedTo(NavigationEventArgs args) {\n  var json = ParsePush.PushJson(args);\n  object objectId;\n  if (json.TryGetValue(\"objectId\", out objectId)) {\n    DisplayRichMessageWithObjectId(objectId as string);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inefficient Query with Case-Insensitive Regex in PHP\nDESCRIPTION: This snippet demonstrates an inefficient way to query for player names using a case-insensitive regular expression in PHP. This approach is not recommended for performance reasons.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_43\n\nLANGUAGE: php\nCODE:\n```\n$query->matches(\"playerName\", \"Michael\", \"i\");\n```\n\n----------------------------------------\n\nTITLE: Cloning Parse Server Repository Using Git - Shell Script\nDESCRIPTION: This snippet demonstrates how to clone the official Parse Server repository from GitHub using the 'git clone' command in a Unix-like shell. No additional dependencies are required apart from 'git'. The parameter specifies the repository URL, and on execution, it will create a local copy of the repository. The expected output is a folder containing the Parse Server source code.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/development.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/parse-community/parse-server.git\n```\n\n----------------------------------------\n\nTITLE: Tracking Errors with Parse Analytics in C#\nDESCRIPTION: This snippet demonstrates how to use Parse Analytics as a lightweight error tracker. It shows how to track error events with an error code dimension, providing an overview of error rates and frequencies in the application.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/analytics.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\nvar errDimensions = new Dictionary<string, string> {\n  { \"code\", Convert.ToString(error.Code) }\n};\nParseAnalytics.TrackEventAsync(\"error\", errDimensions );\n```\n\n----------------------------------------\n\nTITLE: Querying Objects in Parse Server\nDESCRIPTION: Run a curl GET request to list all game score entries, using 'X-Parse-Application-Id'. The server returns JSON with a 'results' array, containing all objects matching the query.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/getting-started.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\\n  -H \"X-Parse-Application-Id: APPLICATION_ID\" \\\n  http://localhost:1337/parse/classes/GameScore\n\n```\n\n----------------------------------------\n\nTITLE: Inefficient notEqualTo Query in C#\nDESCRIPTION: Demonstrates an inefficient query in C# using WhereNotEqualTo which cannot take advantage of indexes and requires scanning all objects in the class.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_16\n\nLANGUAGE: cs\nCODE:\n```\nvar results = await ParseObject.GetQuery(\"GameScore\")\n    .WhereNotEqualTo(\"playerName\", \"Michael Yabuti\")\n    .FindAsync();\n```\n\n----------------------------------------\n\nTITLE: Basic ParseObject Structure in JavaScript\nDESCRIPTION: Example showing the basic structure of a ParseObject with score, player name and cheat mode properties.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/objects.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscore: 1337, playerName: \"Sean Plott\", cheatMode: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Jekyll Redirect for Parse Server API Documentation\nDESCRIPTION: A YAML frontmatter block that configures a Jekyll page to redirect visitors from the local '/parse-server/api/' path to the official Parse Server API documentation site. The configuration disables sitemap indexing and sets the redirect destination.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/parse-server-api.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: redirected\nsitemap: false\npermalink: /parse-server/api/\nredirect_to:\n  - https://parseplatform.org/parse-server/api\n---\n```\n\n----------------------------------------\n\nTITLE: Switching to PostgreSQL User\nDESCRIPTION: Switches to the postgres user account to perform PostgreSQL administrative tasks.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/deploying-aws-ubuntu.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo su postgres\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Parse Documentation Landing Page\nDESCRIPTION: HTML markup for the Parse documentation landing page, containing information about available documentation resources and setup options. The structure includes container divs with copy blocks and repository row sections.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/index.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"container padding-top-40 padding-bottom-50\" data-nav-waypoint>\n  <div class=\"copy-block\">\n      <h3 class=\"h3 h3--blue margin-bottom-10\">The more you know.</h3>\n      <p class=\"margin-top-10\">We've got comprehensive guides for each platform that should help out with anything you need. You can also take a look at the detailed API references and tutorials for a better idea of how it all comes together.</p>\n  <p class=\"margin-top-10\">You can set up your own <a href=\"https://github.com/parse-community/parse-server\">Parse server</a> and <a href=\"https://github.com/parse-community/parse-dashboard\">dashboard</a> or use a service that hosts Parse for you.</p>\n  </div>\n\n  <div class=\"repoRow\">\n\n  </div><!-- .docs-platforms -->\n</div><!-- end .container -->\n```\n\n----------------------------------------\n\nTITLE: Installing PostgreSQL Server\nDESCRIPTION: Installs PostgreSQL database server which will be used by Parse Server to store data.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/deploying-aws-ubuntu.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get -y install postgresql\n```\n\n----------------------------------------\n\nTITLE: Parent Relation Query Response Example\nDESCRIPTION: Example response showing the nested structure of related data returned from the parent relation query.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/queries.md#2025-04-22_snippet_19\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"data\": {\n    \"countries\": {\n      \"edges\": [\n        {\n          \"node\": {\n            \"name\": \"France\",\n            \"cities\": {\n              \"edges\": [\n                {\n                  \"node\": {\n                    \"name\": \"Toulouse\",\n                    \"peoplesNumber\": 400000,\n                    \"streets\": {\n                      \"edges\": [\n                        {\n                          \"node\": {\n                            \"name\": \"rue jean jaures\",\n                            \"houses\": {\n                              \"edges\": [\n                                {\n                                  \"node\": {\n                                    \"name\": \"Parse Members\"\n                                  }\n                                  ... too many brackets here\n}\n```\n\n----------------------------------------\n\nTITLE: Setting the Parse Server URL for Arduino\nDESCRIPTION: Configures the Parse SDK with the server URL after initialization. This tells the Arduino device where to find the Parse server for all API calls.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/arduino/getting-started.md#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nvoid setup() {\n\tParse.begin(\"${APPLICATION_ID}\", \"${CLIENT_KEY}\");\n\tParse.setServerURL(\"parseapi.back4app.com\");\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving PFFileObject Data\nDESCRIPTION: Shows how to retrieve data from a PFFileObject stored in a PFObject.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/files.md#2025-04-22_snippet_3\n\nLANGUAGE: objective-c\nCODE:\n```\nPFFileObject *applicantResume = anotherApplication[@\"applicantResumeFile\"];\nNSData *resumeData = [applicantResume getData];\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet applicantResume = annotherApplication[\"applicationResumeFile\"] as PFFileObject\nlet resumeData = applicantResume.getData()\n```\n\n----------------------------------------\n\nTITLE: Response Format for Object Updates in Parse\nDESCRIPTION: Shows the JSON response format when updating an object in Parse. The response contains only the updatedAt field with the timestamp of when the update occurred.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/objects.md#2025-04-22_snippet_17\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"updatedAt\": \"2022-01-01T12:23:45.678Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Front Matter for Embedded C Parse Guide\nDESCRIPTION: This YAML front matter defines the metadata and structure for the Embedded C developer's guide page. It specifies the title, permalink, layout, platform information, API reference link, and the sections to be included in the guide.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/embedded_c.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Embedded C Developers Guide | Parse\npermalink: /embedded_c/guide/\nlayout: guide\nplatform: embedded_c\ndisplay_platform: Embedded C\napi_reference: https://parse-community.github.io/parse-embedded-sdks/api\n\nsections:\n- \"embedded_c/getting-started.md\"\n- \"embedded_c/objects.md\"\n- \"embedded_c/requests.md\"\n- \"embedded_c/users.md\"\n- \"embedded_c/push-notifications.md\"\n- \"embedded_c/cloud-code.md\"\n- \"embedded_c/sample-app.md\"\n- \"embedded_c/handling-errors.md\"\n- \"common/errors.md\"\n```\n\n----------------------------------------\n\nTITLE: Editing Parse Dashboard Configuration\nDESCRIPTION: Opens the Parse Dashboard configuration file for editing to set up the admin interface.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/deploying-aws-ubuntu.md#2025-04-22_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nsudo nano -w parse-dashboard-config.json\n```\n\n----------------------------------------\n\nTITLE: Initializing Parse with Application ID and Client Key in Arduino\nDESCRIPTION: Basic initialization of Parse SDK by providing the application ID and client key in the setup function. This configuration associates the Arduino device with a specific Parse application.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/arduino/getting-started.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nvoid setup() {\n\tParse.begin(\"${APPLICATION_ID}\", \"${CLIENT_KEY}\");\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Sizzle CSS Selector Engine Header Comment\nDESCRIPTION: This is the header comment for the Sizzle CSS Selector Engine v2.3.5. It includes version information, the project website (sizzlejs.com), copyright attribution to JS Foundation and other contributors, license information (MIT), and the release date (March 14, 2020).\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/assets/js/bundle.js.LICENSE.txt#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*!\n * Sizzle CSS Selector Engine v2.3.5\n * https://sizzlejs.com/\n *\n * Copyright JS Foundation and other contributors\n * Released under the MIT license\n * https://js.foundation/\n *\n * Date: 2020-03-14\n */\n```\n\n----------------------------------------\n\nTITLE: Adding Schema with Index in Parse Server (Bash)\nDESCRIPTION: This bash snippet demonstrates how to add a new schema with an index to Parse Server using a cURL command. It creates a 'City' class with a 'name' field and an index on that field. Authentication is required.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/schemas.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-Master-Key: ${MASTER_KEY}\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '\n    {\n      \"className\": \"City\",\n      \"fields\": {\n        \"name\": {\n          \"type\": \"String\"\n        }\n      },\n      \"indexes\": {\n        \"indexName\": {\n          \"name\": 1\n        }\n      }\n    }' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/schemas/City\n```\n\n----------------------------------------\n\nTITLE: Setting Headers for Parse Server GraphQL API Request\nDESCRIPTION: This snippet shows the required headers for making a request to the Parse Server GraphQL API. It includes the Application ID and Master Key for authentication.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/classes.md#2025-04-22_snippet_0\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"X-Parse-Application-Id\": \"APPLICATION_ID\",\n  \"X-Parse-Master-Key\": \"MASTER_KEY\"\n}\n```\n\n----------------------------------------\n\nTITLE: Closing LiveQueryClient Connection in JavaScript\nDESCRIPTION: Demonstrates how to close the WebSocket connection and unsubscribe from all subscriptions for a LiveQueryClient instance.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/live-queries.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nclient.close();\n```\n\n----------------------------------------\n\nTITLE: Counting Reviews in Objective-C\nDESCRIPTION: Example of counting reviews for a specific movie using the countObjectsInBackgroundWithBlock: method in Objective-C. This approach can be inefficient for large datasets.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_84\n\nLANGUAGE: objective-c\nCODE:\n```\nPFQuery *query = [PFQuery queryWithClassName:@\"Review\"];\n[query whereKey:@\"movie\" equalTo:movie];\n[query countObjectsInBackgroundWithBlock:^(int number, NSError *error) {\n  if (!error) {\n    // Request succeeded\n  }\n}];\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Frontmatter for Android Push Notifications Tutorial\nDESCRIPTION: This YAML frontmatter defines metadata for an Android push notifications tutorial using Parse. It specifies the title, URL permalink, layout template, target platform, programming language, and the markdown file to include for the tutorial content.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/android-push-tutorial.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Android Push Tutorial | Parse\npermalink: /tutorials/android-push-notifications/\nlayout: guide\nplatform: android\nlanguage: java\ndisplay_platform: Android Push Notifications\n\nsections:\n- \"parse-server/push-notifications-android.md\"\n```\n\n----------------------------------------\n\nTITLE: Verifying Device Installation via Parse Server API (cURL)\nDESCRIPTION: This cURL command allows verification that device installations are being correctly registered on the Parse Server. It sends a GET request to the `/parse/installations` endpoint of your Parse Server instance. You must replace `YOUR_APP_ID`, `YOUR_MASTER_KEY`, and `http://your_parse_server:1337` with your actual Parse Application ID, Master Key, and Server URL respectively. A successful response will list the registered installation objects.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/push-notifications-android.md#2025-04-22_snippet_7\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X GET \\\n  -H \"X-Parse-Application-Id: YOUR_APP_ID\" \\\n  -H \"X-Parse-Master-Key: YOUR_MASTER_KEY\" \\\n  http://your_parse_server:1337/parse/installations\n```\n\n----------------------------------------\n\nTITLE: Invalid Object Query in Parse .NET\nDESCRIPTION: Shows an example of attempting to fetch a non-existent object from Parse Server, which will result in a network error.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/handling-errors.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nawait ParseObject.GetQuery(\"Note\").GetAsync(\"thisObjectIdDoesntExist\");\n```\n\n----------------------------------------\n\nTITLE: Calling Cloud Function from Objective-C\nDESCRIPTION: Example of how to call the averageStars Cloud Function from an Objective-C client. The function accepts a movie parameter and returns the average rating.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_78\n\nLANGUAGE: objective-c\nCODE:\n```\n[PFCloud callFunctionInBackground:@\"averageStars\"\n                  withParameters:@{@\"movie\": @\"The Matrix\"}\n                           block:^(NSNumber *ratings, NSError *error) {\n  if (!error) {\n    // ratings is 4.5\n  }\n}];\n```\n\n----------------------------------------\n\nTITLE: Creating Follow Relationship - Parse PHP\nDESCRIPTION: This PHP snippet demonstrates creating a follow entry using the Parse PHP SDK, involving setting the 'from', 'to', and 'date' fields.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/relations.md#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n// suppose we have a user we want to follow\n$otherUser = ...\n\n// create an entry in the Follow table\n$follow = new ParseObject(\"Follow\");\n$follow->set(\"from\", ParseUser::getCurrentUser());\n$follow->set(\"to\", $otherUser);\n$follow->set(\"date\", new DateTime());\n$follow->save();\n```\n\n----------------------------------------\n\nTITLE: Querying GameScores with GreaterThan in PHP\nDESCRIPTION: This snippet demonstrates how to query for GameScores with a score greater than a previously retrieved highScore in PHP.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_33\n\nLANGUAGE: php\nCODE:\n```\n$query = new ParseQuery(\"GameScore\");\n\n// Previously retrieved highScore for Michael Yabuti\n$query->greaterThan(\"score\", $highScore);\n\n$gameScores = $query->find();\n// Retrieved game scores\n```\n\n----------------------------------------\n\nTITLE: Fetching a Specific Cloud Trigger by Class and Name (Bash/Python)\nDESCRIPTION: Shows how to make a GET request to the `/hooks/triggers/{className}/{triggerName}` endpoint using `curl` (Bash) and Python's `http.client`. Requires authentication headers (`X-Parse-Application-Id` and `X-Parse-Master-Key`). The response contains a list of triggers matching the specified class and trigger name.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/hooks.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\\n  -H \"X-Parse-Application-Id: <span class=\\\"custom-parse-server-appid\\\">${APPLICATION_ID}</span>\" \\\n  -H \"X-Parse-Master-Key: <span class=\\\"custom-parse-server-masterkey\\\">${MASTER_KEY}</span>\" \\\n  -H \"Content-Type: application/json\" \\\n  <span class=\\\"custom-parse-server-protocol\\\">https</span>://<span class=\\\"custom-parse-server-url\\\">YOUR.PARSE-SERVER.HERE</span><span class=\\\"custom-parse-server-mount\\\">/parse/</span>hooks/triggers/Scores/beforeSave\n```\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('<span class=\\\"custom-parse-server-url\\\">YOUR.PARSE-SERVER.HERE</span>', 443)\nconnection.connect()\nconnection.request('GET', '<span class=\\\"custom-parse-server-mount\\\">/parse/</span>hooks/triggers/Scores/beforeSave', '', {\n    \"X-Parse-Application-Id\": \"<span class=\\\"custom-parse-server-appid\\\">${APPLICATION_ID}</span>\",\n    \"X-Parse-Master-Key\": \"<span class=\\\"custom-parse-server-masterkey\\\">${MASTER_KEY}</span>\",\n    \"Content-Type\": \"application/json\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: User Update Response in Parse Server\nDESCRIPTION: JSON response format after successfully updating a user. Contains only the updatedAt field with the timestamp of the update.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/users.md#2025-04-22_snippet_14\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"updatedAt\": \"2022-01-01T12:23:45.678Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using doesNotMatchKey Query in Parse iOS SDK\nDESCRIPTION: Demonstrates how to use the whereKey:doesNotMatchKey:inQuery: method to find objects where a key does not match the value of a key in another query's result set. The example finds users whose hometown teams have losing records.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/queries.md#2025-04-22_snippet_30\n\nLANGUAGE: objective-c\nCODE:\n```\nPFQuery *losingUserQuery = [PFQuery queryForUser];\n[losingUserQuery whereKey:@\"hometown\" doesNotMatchKey:@\"city\" inQuery:teamQuery];\n[losingUserQuery findObjectsInBackgroundWithBlock:^(NSArray *results, NSError *error) {\n    // results will contain users with a hometown team with a losing record\n}];\n```\n\n----------------------------------------\n\nTITLE: Setting PostgreSQL User Password\nDESCRIPTION: Sets a password for the postgres user to secure the database.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/deploying-aws-ubuntu.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nALTER USER postgres password 'myStrongPassword';\n```\n\n----------------------------------------\n\nTITLE: Setting Installation ID in Parse\nDESCRIPTION: Demonstrates how to set a pre-generated installation ID for a Parse client. The installation ID should be a unique UUID for device identification.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/embedded_c/push-notifications.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nchar data[] = \"ab946c14-757a-4448-8b77-69704b01bb7b\";\nparseSetInstallationId(client, data);\n```\n\n----------------------------------------\n\nTITLE: Signing Up a User via REST API in Arduino\nDESCRIPTION: This code snippet demonstrates how to sign up a new user using a REST API call from Arduino. It sends a POST request to the Parse users endpoint with username and password data.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/arduino/other.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nParseResponse response = Parse.sendRequest(\"POST\", \"/parse/users\", \"{\\\"username\\\":\\\"cooldude6\\\",\\\"password\\\":\\\"p_n7!-e8\\\"}\", \"\");\n```\n\n----------------------------------------\n\nTITLE: Updating Installation Objects with REST API in bash\nDESCRIPTION: Updates an existing installation object to subscribe to the 'foo' push channel. This example demonstrates how to send a PUT request to modify an installation's channels.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/push-notifications.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"deviceType\": \"ios\",\n        \"deviceToken\": \"0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef\",\n        \"channels\": [\n          \"\",\n          \"foo\"\n        ]\n      }' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/installations/mrmBZvsErB\n```\n\n----------------------------------------\n\nTITLE: Projecting Fields in Aggregate Query for Parse Server (Bash)\nDESCRIPTION: This snippet demonstrates how to project specific fields in an aggregate query for Parse Server using a curl command. It projects only the 'score' field.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/queries.md#2025-04-22_snippet_37\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-Master-Key: ${MASTER_KEY}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -G \\\n  --data-urlencode 'project={\"score\":1}' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/aggregate/Player\n```\n\n----------------------------------------\n\nTITLE: Adding Network Client Permissions in macOS Swift\nDESCRIPTION: Code snippet to add network client permissions to macOS entitlements files, allowing the Parse Flutter SDK to communicate with Parse Server on macOS applications.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dart/getting-started.md#2025-04-22_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n<key>com.apple.security.network.client</key>\n<true/>\n```\n\n----------------------------------------\n\nTITLE: Installing Parse Server Globally\nDESCRIPTION: Installs Parse Server globally to make it accessible system-wide.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/deploying-aws-ubuntu.md#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nsudo npm install -g parse-server\n```\n\n----------------------------------------\n\nTITLE: Example JSONC: Failed Health Response (Unresolvable Host)\nDESCRIPTION: Shows an example JSONC structure for a failed health check where the server hostname ('__uh__oh__.com') could not be resolved. The 'status' is 0, and 'error' and 'error_message' fields provide details about the connection failure, which might vary based on the HTTP client (Curl/Stream) being used.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/setup.md#2025-04-22_snippet_7\n\nLANGUAGE: jsonc\nCODE:\n```\n// ParseClient::setServerURL('http://__uh__oh__.com', 'parse');\n{\n    \"status\": 0,\n    \"error\": 6,\n    \"error_message\": \"Couldn't resolve host '__uh__oh__.com'\"\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Windows Store Package Security Identifier in C#\nDESCRIPTION: Shows how to retrieve the Package Security Identifier needed for Facebook Single Sign-on integration in Windows Store apps.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/users.md#2025-04-22_snippet_13\n\nLANGUAGE: cs\nCODE:\n```\nWebAuthenticationBroker.GetCurrentApplicationCallbackUri().AbsoluteUri\n```\n\n----------------------------------------\n\nTITLE: Opening LiveQueryClient Connection in JavaScript\nDESCRIPTION: Shows how to open a connection to the LiveQuery server using a LiveQueryClient instance.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/live-queries.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nclient.open();\n```\n\n----------------------------------------\n\nTITLE: Counting Reviews in Java\nDESCRIPTION: Example of counting reviews for a specific movie using the countInBackground method in Java. This approach can be inefficient for large datasets.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_86\n\nLANGUAGE: java\nCODE:\n```\nParseQuery<ParseObject> query = ParseQuery.getQuery(\"Review\");\n// movieId corresponds to a given movie's id\nquery.whereEqualTo(\"movie\", movieId);\nquery.countInBackground(new CountCallback() {\n  @Override\n  public void done(int i, ParseException e) {\n    if ( e == null) {\n      // Request succeeded\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Configuration for Arduino Parse Guide\nDESCRIPTION: This YAML configuration specifies the title, permalink, layout, platform, language, and sections for the Arduino Developers Guide in the Parse documentation. It also includes the API reference link.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/arduino.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Arduino Developers Guide | Parse\npermalink: /arduino/guide/\nlayout: guide\nplatform: arduino\nlanguage: cpp\ndisplay_platform: Arduino\napi_reference: https://parse-community.github.io/Parse-SDK-Arduino/api\n\nsections:\n- \"arduino/getting-started.md\"\n- \"arduino/objects.md\"\n- \"arduino/queries.md\"\n- \"arduino/requests.md\"\n- \"arduino/users.md\"\n- \"arduino/push-notifications.md\"\n- \"arduino/analytics.md\"\n- \"arduino/cloud-code.md\"\n- \"common/errors.md\"\n```\n\n----------------------------------------\n\nTITLE: Editing PostgreSQL Client Authentication File\nDESCRIPTION: Opens the pg_hba.conf file for editing, which controls client authentication.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/deploying-aws-ubuntu.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsudo nano pg_hba.conf\n```\n\n----------------------------------------\n\nTITLE: Inefficient notEqualTo User Query in Java\nDESCRIPTION: Shows another inefficient query pattern in Java using whereNotEqualTo that cannot leverage indexes effectively.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_21\n\nLANGUAGE: java\nCODE:\n```\nParseQuery<ParseUser> query = ParseQuery.getQuery(ParseUser.class);\nquery.whereNotEqualTo(\"state\", \"Invited\");\n```\n\n----------------------------------------\n\nTITLE: Saved ParseObject Structure\nDESCRIPTION: Shows the structure of a saved ParseObject including system fields.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/objects.md#2025-04-22_snippet_2\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"objectId\": \"xWMyZ4YEGZ\",\n  \"score\": 1337,\n  \"playerName\": \"Sean Plott\",\n  \"cheatMode\": false,\n  \"createdAt\":\"2022-01-01T12:23:45.678Z\",\n  \"updatedAt\":\"2022-01-01T12:23:45.678Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Jekyll Frontmatter Configuration for Parse Server Guide\nDESCRIPTION: YAML configuration for a Jekyll-based documentation page for Parse Server. This frontmatter defines the page metadata and includes a list of markdown sections that make up the complete guide.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/parse-server.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Parse Server Guide | Parse\npermalink: /parse-server/guide/\nlayout: guide\nplatform: parse-server\ndisplay_platform: Parse Server\nquickstart: https://github.com/parse-community/Parse-Server#getting-started\n\nsections:\n- \"parse-server/getting-started.md\"\n- \"parse-server/database.md\"\n- \"parse-server/usage.md\"\n- \"parse-server/keys.md\"\n- \"parse-server/using-parse-sdks.md\"\n- \"parse-server/deploying.md\"\n- \"parse-server/push-notifications.md\"\n- \"parse-server/push-notifications-clients.md\"\n- \"parse-server/class-level-permissions.md\"\n- \"common/security.md\"\n- \"common/performance.md\"\n- \"common/errors.md\"\n- \"parse-server/file-adapters.md\"\n- \"parse-server/cache-adapters.md\"\n- \"parse-server/live-query.md\"\n- \"parse-server/third-party-auth.md\"\n- \"parse-server/mongo-read-preference.md\"\n- \"parse-server/development.md\"\n- \"parse-server/best-practice.md\"\n---\n```\n\n----------------------------------------\n\nTITLE: Installing Parse SDK Dependencies on Linux\nDESCRIPTION: Commands to install required system dependencies for Parse SDK including autoconf, automake, libtool, libcurl, and uuid development packages.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/embedded_c/getting-started.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update\nsudo apt-get install autoconf automake libtool\nsudo apt-get install libcurl4-openssl-dev uuid-dev\n```\n\n----------------------------------------\n\nTITLE: Configuring link.xml for Parse Unity SDK Optimization\nDESCRIPTION: This XML configuration ensures that the Parse Unity SDK works correctly with Unity's code optimization pipeline. It preserves necessary types and namespaces from UnityEngine and Parse.Unity assemblies.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/getting-started.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<linker>\n  <assembly fullname=\"UnityEngine\">\n    <type fullname=\"UnityEngine.iOS.NotificationServices\" preserve=\"all\"/>\n    <type fullname=\"UnityEngine.iOS.RemoteNotification\" preserve=\"all\"/>\n    <type fullname=\"UnityEngine.AndroidJavaClass\" preserve=\"all\"/>\n    <type fullname=\"UnityEngine.AndroidJavaObject\" preserve=\"all\"/>\n  </assembly>\n\n  <assembly fullname=\"Parse.Unity\">\n    <namespace fullname=\"Parse\" preserve=\"all\"/>\n    <namespace fullname=\"Parse.Internal\" preserve=\"all\"/>\n  </assembly>\n</linker>\n```\n\n----------------------------------------\n\nTITLE: Tracking App Opens in Windows Phone Applications\nDESCRIPTION: Shows how to track application launches from toast notifications in Windows Phone 8 by setting up event handlers in the App constructor.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/push-notifications.md#2025-04-22_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\nthis.Startup += (sender, args) => {\n  ParseAnalytics.TrackAppOpens(RootFrame);\n};\n```\n\n----------------------------------------\n\nTITLE: Querying Installations with REST API in bash\nDESCRIPTION: Fetches a list of all installation objects using the Master Key. This operation requires higher privileges than regular API keys and should only be used in trusted environments.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/push-notifications.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-Master-Key: ${MASTER_KEY}\" \\\n  https://YOUR.PARSE-SERVER.HERE/parse/installations\n```\n\n----------------------------------------\n\nTITLE: Parse Object Array Operations with Save\nDESCRIPTION: Demonstrates array operations using set methods with subsequent save.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dart/objects.md#2025-04-22_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\ndietPlan.setAdd('listKeywords', ['a','a','d']);\ndietPlan.setAddUnique('listKeywords', ['a','a','d']);\ndietPlan.setRemove('listKeywords', ['a']);\nvar response = dietPlan.save()\n```\n\n----------------------------------------\n\nTITLE: Configuring Jekyll Redirect for Parse .NET SDK API Documentation in YAML\nDESCRIPTION: YAML front matter configuration for a Jekyll redirect page. It sets the page layout to 'redirected', disables sitemap indexing, defines the current permalink, and specifies the destination URL for redirection to the Parse .NET SDK API documentation.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/dotnet-api.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: redirected\nsitemap: false\npermalink: /dotnet/api/\nredirect_to:\n  - https://parse-community.github.io/Parse-SDK-dotNET/api/\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring ParseLoginActivity in AndroidManifest.xml\nDESCRIPTION: Example showing how to configure Parse Login UI options through activity metadata in the Android manifest, including app logo, login settings, and Facebook permissions.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/user-interface.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<activity\n    android:name=\"com.parse.ui.ParseLoginActivity\"\n    android:label=\"@string/my_app_name\"\n    android:launchMode=\"singleTop\">\n    <!-- We reference a drawable resource here, so we must use android:resource -->\n    <meta-data\n        android:name=\"com.parse.ui.ParseLoginActivity.APP_LOGO\"\n        android:resource=\"@drawable/my_app_logo\"/>\n    <!-- For these non-resource options, use android:value -->\n    <meta-data\n        android:name=\"com.parse.ui.ParseLoginActivity.PARSE_LOGIN_ENABLED\"\n        android:value=\"true\"/>\n    <meta-data\n        android:name=\"com.parse.ui.ParseLoginActivity.PARSE_LOGIN_EMAIL_AS_USERNAME\"\n        android:value=\"true\"/>\n    <meta-data\n        android:name=\"com.parse.ui.ParseLoginActivity.PARSE_LOGIN_HELP_TEXT\"\n        android:value=\"@string/password_reset_text\"/>\n    <meta-data\n        android:name=\"com.parse.ui.ParseLoginActivity.MIN_PASSWORD_LENGTH\"\n        android:value=\"8\"/>\n    <meta-data\n        android:name=\"com.parse.ui.ParseLoginActivity.FACEBOOK_LOGIN_ENABLED\"\n        android:value=\"true\"/>\n    <!-- We reference a string-array resource here, so we must use android:resource -->\n    <meta-data\n        android:name=\"com.parse.ui.ParseLoginActivity.FACEBOOK_LOGIN_PERMISSIONS\"\n        android:resource=\"@array/my_facebook_permissions\"/>\n</activity>\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Parse Dart Documentation\nDESCRIPTION: This YAML frontmatter defines the structure and metadata for the Parse Dart SDK documentation. It specifies the title, permalink, layout type, platform identifiers, and documentation sections that make up the guide.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/dart.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Dart Guide | Parse\npermalink: /dart/guide/\nlayout: guide\nplatform: dart\nlanguage: dart\ndisplay_platform: Dart\napi_reference: /dart/api\n\nsections:\n- \"dart/getting-started.md\"\n- \"dart/objects.md\"\n- \"dart/queries.md\"\n- \"dart/cloud-code.md\"\n- \"dart/config.md\"\n- \"dart/files.md\"\n- \"dart/other-features.md\"\n- \"dart/storage.md\"\n- \"dart/users.md\"\n\n---\n```\n\n----------------------------------------\n\nTITLE: Inefficient notEqualTo Query in Objective-C\nDESCRIPTION: Demonstrates an inefficient query in Objective-C using notEqualTo constraint which cannot utilize indexes and requires scanning the entire class.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_13\n\nLANGUAGE: objective-c\nCODE:\n```\nPFQuery *query = [PFQuery queryWithClassName:@\"GameScore\"];\n[query whereKey:@\"playerName\" notEqualTo:@\"Michael Yabuti\"];\n[query findObjectsInBackgroundWithBlock:^(NSArray *objects, NSError *error) {\n  if (!error) {\n    // Retrieved scores successfully\n  }\n}];\n```\n\n----------------------------------------\n\nTITLE: Creating a ParseLoginDispatchActivity Subclass\nDESCRIPTION: This Java code demonstrates subclassing ParseLoginDispatchActivity to create a gate-keeper that automatically launches ParseLoginActivity if no user is logged in, or launches a protected activity if a user is already logged in.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/user-interface.md#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class SampleDispatchActivity extends ParseLoginDispatchActivity {\n  @Override\n  protected Class<?> getTargetClass() {\n    return SampleProfileActivity.class;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Unpinning Multiple Objects\nDESCRIPTION: Demonstrates how to unpin multiple objects simultaneously.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/local-datastore.md#2025-04-22_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nParseObject.unpinAllInBackground(listOfObjects);\n```\n\n----------------------------------------\n\nTITLE: Configuring Jekyll Redirect for Parse Embedded C API\nDESCRIPTION: YAML front matter configuration that sets up a page redirect in Jekyll. Disables sitemap inclusion and redirects /embedded_c/api/ to the Parse Embedded SDKs API documentation.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/embedded_c-api.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: redirected\nsitemap: false\npermalink: /embedded_c/api/\nredirect_to:\n  - https://parse-community.github.io/parse-embedded-sdks/api\n---\n```\n\n----------------------------------------\n\nTITLE: Querying Objects in a Bounding Box with Python\nDESCRIPTION: Makes a GET request using Python to find places within a rectangular area defined by southwest and northeast coordinates using the $within and $box operators.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/geopoints.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\nimport urllib.parse\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nparams = urllib.parse.urlencode({\"where\": json.dumps({\n    \"location\": {\n        \"$within\": {\n            \"$box\": [\n                {\n                    \"__type\": \"GeoPoint\",\n                    \"latitude\": 37.71,\n                    \"longitude\": -122.53\n                },\n                {\n                    \"__type\": \"GeoPoint\",\n                    \"latitude\": 30.82,\n                    \"longitude\": -122.37\n                }\n            ]\n        }\n    }\n})})\nconnection.connect()\nconnection.request('GET', '/parse/classes/PizzaPlaceObject?%s' % params, '', {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Initializing Parse PHP SDK without REST Key\nDESCRIPTION: Initializes the Parse PHP SDK client using the Application ID and Master Key, omitting the REST API Key by passing null. Use this method if your server configuration does not use or require a REST key.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/setup.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nParseClient::initialize( $app_id, null, $master_key );\n```\n\n----------------------------------------\n\nTITLE: Retrieving ParseFile URL from ParseObject in PHP\nDESCRIPTION: Shows how to access a `ParseFile` stored within a `ParseObject`. It retrieves the `ParseFile` object from the `photoFile` field of a `$profile` object, gets its URL using `getURL()`, and embeds it in an HTML `<img>` tag.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/files.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$profilePhoto = $profile->get(\"photoFile\");\necho '<img src=\"' . $profilePhoto->getURL() . '\">';\n```\n\n----------------------------------------\n\nTITLE: Parse Server Error Response Format\nDESCRIPTION: Example of an error response from Parse Server REST API showing the standard error format with code and message for invalid field names.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/quick-reference.md#2025-04-22_snippet_5\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"code\": 105,\n  \"error\": \"invalid field name: bl!ng\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing npm Package Manager\nDESCRIPTION: Installs npm (Node Package Manager) which is needed to install JavaScript packages.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/deploying-aws-ubuntu.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install npm\n```\n\n----------------------------------------\n\nTITLE: Starting Parse Server with npm\nDESCRIPTION: Starts Parse Server using npm script command defined in package.json.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/deploying-aws-ubuntu.md#2025-04-22_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Deleting Files with Python\nDESCRIPTION: Describes how to delete a file on the Parse server using Python. The operation requires application ID and master key headers. The file name used should be from the upload response.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/files.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('<span class=\\\"custom-parse-server-url\\\">YOUR.PARSE-SERVER.HERE</span>', 443)\nconnection.connect()\nconnection.request('DELETE', '<span class=\\\"custom-parse-server-mount\\\">/parse/</span>files/...profile.png', '', {\n    \"X-Parse-Application-Id\": \"<span class=\\\"custom-parse-server-appid\\\">${APPLICATION_ID}</span>\",\n    \"X-Parse-Master-Key\": \"<span class=\\\"custom-parse-server-masterkey\\\">${MASTER_KEY}</span>\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Querying Parse Data Synchronously with PFQuery and NSPredicate in Objective-C\nDESCRIPTION: This snippet displays synchronous Parse queries in Objective-C, suitable only for background threads or testing. It shows both direct constraints using whereKey:equalTo: and query construction via NSPredicate. The resulting array holds the fetched objects. Dependencies: Parse Objective-C SDK and Foundation for NSPredicate. Input: none directly. Output: NSArray of matching PFObjects. Use synchronously with care due to blocking.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/queries.md#2025-04-22_snippet_2\n\nLANGUAGE: objective_c\nCODE:\n```\n// Only use this code if you are already running it in a background\n// thread, or for testing purposes!\n\n// Using PFQuery\nPFQuery *query = [PFQuery queryWithClassName:@\"GameScore\"];\n[query whereKey:@\"playerName\" equalTo:@\"Dan Stemkoski\"];\nNSArray* scoreArray = [query findObjects];\n\n// Using NSPredicate\nNSPredicate *predicate = [NSPredicate predicateWithFormat:@\"playerName = 'Dan Stemkosk'\"];\nPFQuery *query = [PFQuery queryWithClassName:@\"GameScore\" predicate:predicate];\nNSArray* scoreArray = [query findObjects];\n```\n\n----------------------------------------\n\nTITLE: Querying Within Geographic Box\nDESCRIPTION: Demonstrates how to query for objects within a rectangular geographic boundary using WhereWithinGeoBox.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/geopoints.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\nvar swOfSF = new ParseGeoPoint(37.708813, -122.526398);\nvar neOfSF = new ParseGeoPoint(37.822802, -122.373962);\nvar query = ParseObject.GetQuery(\"PizzaPlaceObject\")\n    .WhereWithinGeoBox(\"location\", swOfSF, neOfSF);\nquery.FindAsync().ContinueWith(t =>\n{\n    IEnumerable<ParseObject> pizzaPlacesInSF = t.Result;\n});\n```\n\n----------------------------------------\n\nTITLE: Adding JitPack Repository in Root build.gradle (Gradle)\nDESCRIPTION: This snippet adds the JitPack Maven repository to the `allprojects` block in the root `build.gradle` file. This repository is required to download the Parse FCM Android SDK library, which is hosted on JitPack.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/push-notifications-android.md#2025-04-22_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\nallprojects {\n\trepositories {\n\t\t...\n\t\tmaven { url \"https://jitpack.io\" }\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid SignUp Operation Example in Parse .NET\nDESCRIPTION: Demonstrates a logic error case where SignUpAsync is called without setting required username and password properties, resulting in an InvalidOperationException.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/handling-errors.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar user = new ParseUser();\nawait user.SignUpAsync();\n```\n\n----------------------------------------\n\nTITLE: Defining Page Metadata in YAML for Parse REST API Guide\nDESCRIPTION: This YAML block defines metadata for the Parse REST API guide page, including title, permalink, layout, platform, language, and a list of sections to be included in the guide.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/rest.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: REST API Guide | Parse\npermalink: /rest/guide/\nlayout: guide\nplatform: rest\nlanguage: rest\ndisplay_platform: REST\n\nredirect_from:\n  - /rest/\n\nsections:\n- \"common/server-customize.md\"\n- \"rest/getting-started.md\"\n- \"rest/quick-reference.md\"\n- \"rest/objects.md\"\n- \"rest/queries.md\"\n- \"rest/users.md\"\n- \"rest/sessions.md\"\n- \"rest/roles.md\"\n- \"rest/files.md\"\n- \"rest/geopoints.md\"\n- \"common/data.md\"\n- \"rest/push-notifications.md\"\n- \"rest/config.md\"\n- \"rest/analytics.md\"\n- \"rest/cloud-code.md\"\n- \"rest/schemas.md\"\n- \"rest/hooks.md\"\n- \"common/security.md\"\n- \"common/errors.md\"\n\n---\n```\n\n----------------------------------------\n\nTITLE: Inefficient notEqualTo User Query in C#\nDESCRIPTION: Example of another inefficient query pattern in C# using WhereNotEqualTo that should be rewritten for better performance.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_22\n\nLANGUAGE: cs\nCODE:\n```\nvar query = ParseUser.Query\n    .WhereNotEqualTo(\"state\", \"Invited\");\n```\n\n----------------------------------------\n\nTITLE: Inefficient User Query with NotContainedIn in JavaScript\nDESCRIPTION: This snippet shows an inefficient way to query for active users using the NotContainedIn condition in JavaScript. This approach is not recommended for performance reasons.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nvar query = new Parse.Query(Parse.User);\nquery.notContainedIn(\"state\", [\"Invited\", \"Blocked\"]);\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Parse Object with Read Preferences - cURL Example - bash\nDESCRIPTION: This cURL snippet demonstrates retrieving a Parse object while specifying both object inclusion and MongoDB replica read preferences via query parameters. Parameters such as include, readPreference, and includeReadPreference manage where queries are executed in a MongoDB replica set. This is important for controlling database consistency and performance.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/objects.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\\\\\n  -H \"X-Parse-Application-Id: <span class=\\\"custom-parse-server-appid\\\">${APPLICATION_ID}</span>\" \\\\\\n  -H \"X-Parse-REST-API-Key: <span class=\\\"custom-parse-server-restapikey\\\">${REST_API_KEY}</span>\" \\\\\\n  -G \\\\\\n  --data-urlencode 'include=game' \\\\\\n  --data-urlencode 'readPreference=SECONDARY' \\\\\\n  --data-urlencode 'includeReadPreference=SECONDARY_PREFERRED' \\\\\\n  <span class=\\\"custom-parse-server-protocol\\\">https</span>://<span class=\\\"custom-parse-server-url\\\">YOUR.PARSE-SERVER.HERE</span><span class=\\\"custom-parse-server-mount\\\">/parse/</span>classes/GameScore/Ed1nuqPvcm\n```\n\n----------------------------------------\n\nTITLE: Unlinking Facebook from ParseUser\nDESCRIPTION: Code to remove the Facebook association from a ParseUser account.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/users.md#2025-04-22_snippet_20\n\nLANGUAGE: java\nCODE:\n```\nParseFacebookUtils.unlinkInBackground(user, new SaveCallback() {\n  @Override\n  public void done(ParseException ex) {\n    if (ex == null) {\n      Log.d(\"MyApp\", \"The user is no longer associated with their Facebook account.\");\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Specific Classes in GraphQL Schema\nDESCRIPTION: JSON configuration example showing how to limit GraphQL schema to only expose specific Parse classes.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/customisation.md#2025-04-22_snippet_2\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"enabledForClasses\": [\"_User\", \"Book\", \"Review\", \"Comment\"],\n  \"disabledForClasses\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Using Match Pipeline with Comparison in Parse Aggregate Query\nDESCRIPTION: Shows how to use the match pipeline with comparison operators. This example filters results where the 'score' field is greater than 15.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/queries.md#2025-04-22_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nconst pipeline = [\n  { $match: { score: { $gt: 15 } } }\n];\nconst query = new Parse.Query(\"User\");\nquery.aggregate(pipeline)\n  .then(function(results) {\n    // results contains score greater than 15\n  })\n  .catch(function(error) {\n    // There was an error.\n  });\n```\n\n----------------------------------------\n\nTITLE: Authentication Headers for Mutation Request\nDESCRIPTION: Required headers for authenticating a mutation request to the Parse GraphQL API, including the Application ID and a session token to identify the current user.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/customisation.md#2025-04-22_snippet_19\n\nLANGUAGE: jsonc\nCODE:\n```\n// Header\n{\n  \"X-Parse-Application-Id\": \"APPLICATION_ID\",\n  \"X-Parse-Session-Token\": \"r:b0dfad1eeafa4425d9508f1c0a15c3fa\"\n}\n```\n\n----------------------------------------\n\nTITLE: Editing PostgreSQL Server Configuration File\nDESCRIPTION: Opens the postgresql.conf file for editing to configure network settings.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/deploying-aws-ubuntu.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nsudo nano postgresql.conf\n```\n\n----------------------------------------\n\nTITLE: Inefficient User Query with NotContainedIn in Java\nDESCRIPTION: This snippet shows an inefficient way to query for active users using the NotContainedIn condition in Java. This approach is not recommended for performance reasons.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_36\n\nLANGUAGE: java\nCODE:\n```\nParseQuery<ParseUser> query = ParseQuery.getQuery(ParseUser.class);\nquery.whereNotContainedIn(\"state\", Arrays.asList(\"Invited\", \"Blocked\"));\n```\n\n----------------------------------------\n\nTITLE: Configuring Insecure Connection for Parse on Arduino\nDESCRIPTION: Sets up an insecure connection to the Parse server when SSL is not required or available. This option should only be used when secure connections are not possible.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/arduino/getting-started.md#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nvoid setup() {\n\tParse.begin(\"${APPLICATION_ID}\", \"${CLIENT_KEY}\");\n\tParse.setServerURL(\"parseapi.back4app.com\");\n\tParse.setClientInsecure();\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Inefficient Query with Contains in JavaScript\nDESCRIPTION: This snippet shows an inefficient way to query for player names using the Contains condition in JavaScript. This approach is not recommended for performance reasons.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\nquery.contains(\"playerName\", \"Michael\");\n```\n\n----------------------------------------\n\nTITLE: Initializing Parse Facebook Utils in C#\nDESCRIPTION: Shows how to initialize Parse Facebook integration in the application constructor.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/users.md#2025-04-22_snippet_10\n\nLANGUAGE: cs\nCODE:\n```\npublic App()\n{\n    // App.xaml initialization\n    ParseClient.Initialize(\"Your Application ID\", \"Your .NET Key\");\n    ParseFacebookUtils.Initialize(\"Your Facebook App Id\");\n    // Other initialization\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Subscribed Channels List\nDESCRIPTION: Shows how to retrieve the list of channels that the current device is subscribed to.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/push-notifications.md#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nList<String> subscribedChannels = ParseInstallation.getCurrentInstallation().getList(\"channels\");\n```\n\n----------------------------------------\n\nTITLE: Parse Query with Not Equal Constraint\nDESCRIPTION: Shows how to filter out objects with specific values using not equal comparison.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/queries.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar query = from gameScore in ParseObject.GetQuery(\"GameScore\")\n            where gameScore.Get<string>(\"playerName\") != \"Michael Yabuti\"\n            select gameScore;\n\n// or using LINQ\nvar query = ParseObject.GetQuery(\"GameScore\")\n    .WhereNotEqualTo(\"playerName\", \"Michael Yabuti\");\n```\n\n----------------------------------------\n\nTITLE: Initializing Parse Server\nDESCRIPTION: Basic initialization code for Parse Server with app ID and JavaScript key configuration.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/getting-started.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nParse.initialize(\"YOUR_APP_ID\", \"YOUR_JAVASCRIPT_KEY\");\n//javascriptKey is required only if you have it on server.\n\nParse.serverURL = 'http://YOUR_PARSE_SERVER:1337/parse'\n```\n\n----------------------------------------\n\nTITLE: Inefficient Query with Contains in PHP\nDESCRIPTION: This snippet shows an inefficient way to query for player names using the Contains condition in PHP. This approach is not recommended for performance reasons.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_48\n\nLANGUAGE: php\nCODE:\n```\n$query->contains(\"playerName\", \"Michael\");\n```\n\n----------------------------------------\n\nTITLE: JSON API Response for Installation Creation - JSONC\nDESCRIPTION: Presents a sample API response in JSON format for a newly created installation object, including the creation timestamp ('createdAt') and the unique object ID ('objectId'). This structure indicates what client applications can expect after a successful POST to the installations endpoint. The response is informational and non-executable.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/push-notifications.md#2025-04-22_snippet_3\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"createdAt\": \"2022-01-01T12:23:45.678Z\",\n  \"objectId\": \"mrmBZvsErB\"\n}\n```\n\n----------------------------------------\n\nTITLE: Facebook Single Sign-on Implementation in Parse C#\nDESCRIPTION: Demonstrates how to implement Facebook Single Sign-on functionality in Parse for Windows Store apps.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/users.md#2025-04-22_snippet_14\n\nLANGUAGE: cs\nCODE:\n```\n// Log into Facebook using Single Sign-on\nParseUser user = await ParseFacebookUtils.LogInAsync(permissions);\n\n    // Link the current user to Facebook using Single Sign-on\nawait ParseFacebookUtils.LinkAsync(ParseUser.CurrentUser, permissions);\n```\n\n----------------------------------------\n\nTITLE: Making Authenticated Twitter API Calls with Parse in Android\nDESCRIPTION: Code to make signed HTTP requests to the Twitter REST API using a Twitter-linked ParseUser. This snippet demonstrates how to create and execute an authenticated request using OkHttp and the Twitter singleton from ParseTwitterUtils.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/users.md#2025-04-22_snippet_25\n\nLANGUAGE: java\nCODE:\n```\nOkHttpClient client = new OkHttpClient();\nRequest request = new Request.Builder()\n      .url(\"https://api.twitter.com/1.1/account/verify_credentials.json\")\n      .build();\n\nOkHttpOAuthConsumer consumer = new OkHttpOAuthConsumer(Twitter.getConsumerKey(), Twitter.getConsumerSecret());\nRequest signedRequest = (Request) consumer.sign(request).unwrap();\n// or enqueue\nResponse response = client.newCall(signedRequest).execute();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Authors from a Book Object in Multiple Languages\nDESCRIPTION: These snippets show how to retrieve the list of Author objects from a Book object across different programming languages. They demonstrate accessing the 'authors' array after it has been fetched.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/relations.md#2025-04-22_snippet_34\n\nLANGUAGE: java\nCODE:\n```\nArrayList<ParseObject> authorList = book.getList(\"authors\");\n```\n\nLANGUAGE: objective-c\nCODE:\n```\nNSArray *authorList = [book objectForKey@\"authors\"];\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet authorList = book.objectForKey(\"authors\") as? NSArray\n```\n\nLANGUAGE: php\nCODE:\n```\n$authorList = $book->get(\"authors\");\n```\n\nLANGUAGE: cs\nCODE:\n```\nvar authorList = book.Get<List<ParseObject>>(\"authors\");\n```\n\nLANGUAGE: js\nCODE:\n```\nvar authorList = book.get(\"authors\")\n```\n\n----------------------------------------\n\nTITLE: Querying Follow Table - Parse PHP\nDESCRIPTION: This snippet sets up and executes a PHP query to retrieve users followed by the current user, assuming the use of the Parse PHP SDK.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/relations.md#2025-04-22_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n// set up the query on the Follow table\n$query = new ParseQuery(\"Follow\");\n$query->equalTo(\"from\", ParseUser::getCurrentUser());\n\n// execute the query\n$results = $query->find();\n```\n\n----------------------------------------\n\nTITLE: Unlinking Twitter from a Parse User\nDESCRIPTION: This snippet demonstrates how to unlink a Twitter account from a Parse user. It uses PFTwitterUtils to remove the association between the user and their Twitter account.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/users.md#2025-04-22_snippet_23\n\nLANGUAGE: objective_c\nCODE:\n```\n[PFTwitterUtils unlinkUserInBackground:user block:^(BOOL succeeded, NSError *error) {\n    if (!error && succeeded) {\n      NSLog(@\"The user is no longer associated with their Twitter account.\");\n    }\n}];\n```\n\nLANGUAGE: swift\nCODE:\n```\nPFTwitterUtils.unlinkUserInBackground(user, {\n  (succeeded: Bool?, error: NSError?) -> Void in\n  if error == nil && succeeded {\n    print(\"The user is no longer associated with their Twitter account.\")\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Handling LiveQuery Leave Event in JavaScript\nDESCRIPTION: Shows how to listen for the 'leave' event, which occurs when an object's update causes it to no longer match the query criteria.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/live-queries.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nsubscription.on('leave', (object) => {\n  console.log('object left');\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Read Preference for MongoDB Replica Sets in Parse JavaScript SDK\nDESCRIPTION: Demonstrates how to set read preferences for MongoDB replica sets in Parse queries, allowing control over which replica the data is retrieved from.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/queries.md#2025-04-22_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nquery.readPreference(\n  'SECONDARY',\n  'SECONDARY_PREFERRED',\n  'NEAREST'\n);\n```\n\n----------------------------------------\n\nTITLE: Refreshing ParseObject - Java\nDESCRIPTION: Example of refreshing a ParseObject with latest data from the cloud.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/objects.md#2025-04-22_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nmyObject.fetchInBackground(new GetCallback<ParseObject>() {\n  public void done(ParseObject object, ParseException e) {\n    if (e == null) {\n      // Success!\n    } else {\n      // Failure!\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Inefficient notEqualTo User Query in JavaScript\nDESCRIPTION: Example of another inefficient query pattern using notEqualTo that cannot use indexes effectively and should be rewritten as a containedIn query.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nvar query = new Parse.Query(Parse.User);\nquery.notEqualTo(\"state\", \"Invited\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Linode Object Storage Adapter for Parse Server\nDESCRIPTION: This code snippet shows how to configure an S3-compatible adapter for Linode Object Storage. It includes settings for bucket name, base URL, region, and S3 overrides for access key, secret key, and endpoint specific to Linode.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/file-adapters.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst s3Options = {\n  bucket: \"S3_BUCKET_NAME\",\n  baseUrl: \"S3_BASE_URL\", // https://myBucket.myRegion.linodeobjects.com\n  region: \"S3_REGION\", // possible values: eu-central-1 or us-east-1\n  s3overrides: {\n    accessKeyId: \"S3_ACCESS_KEY\", // bucket access key\n    secretAccessKey: \"S3_SECRET_KEY\", // bucket secret key\n    endpoint: \"S3_ENDPOINT\", // regionName.linodeobjects.com\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Verifying Parse Object Save Response\nDESCRIPTION: Checks the response from a save operation to verify successful object persistence.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dart/objects.md#2025-04-22_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar response = await dietPlan.save();\n\nif (response.success) {\n   dietPlan = response.results.first;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Read Preference for MongoDB Queries in beforeFind\nDESCRIPTION: This example shows how to set read preferences for MongoDB queries in the beforeFind trigger. It sets the main query, subquery, and include read preferences.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/cloudcode/cloud-code.md#2025-04-22_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\n// Setting the read preference for a query\n// -- as of Parse Server 2.5, Mongo Only\nParse.Cloud.beforeFind('MyObject2', (req) => {\n  req.readPreference = 'SECONDARY_PREFERRED';\n  req.subqueryReadPreference = 'SECONDARY';\n  req.includeReadPreference = 'PRIMARY';\n});\n```\n\n----------------------------------------\n\nTITLE: Inefficient Query with Contains in Objective-C and Swift\nDESCRIPTION: This snippet demonstrates an inefficient way to query for player names using the Contains condition in both Objective-C and Swift. This approach is not recommended for performance reasons.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_45\n\nLANGUAGE: objective_c\nCODE:\n```\n[query whereKey:@\"playerName\" containsString:@\"Michael\"];\n```\n\nLANGUAGE: swift\nCODE:\n```\nquery.whereKey(\"playerName\", containsString: \"Michael\")\n```\n\n----------------------------------------\n\nTITLE: Registering for Remote Notifications in iOS - Objective-C\nDESCRIPTION: This snippet demonstrates how to register an iOS application for remote notifications using UIUserNotificationSettings. Ensure your app has the appropriate permissions and configurations in place.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/push-notifications.md#2025-04-22_snippet_0\n\nLANGUAGE: objective_c\nCODE:\n```\nUIUserNotificationType userNotificationTypes = (UIUserNotificationTypeAlert | UIUserNotificationTypeBadge | UIUserNotificationTypeSound);\nUIUserNotificationSettings *settings = [UIUserNotificationSettings settingsForTypes:userNotificationTypes  categories:nil];\n[application registerUserNotificationSettings:settings];\n[application registerForRemoteNotifications];\n```\n\n----------------------------------------\n\nTITLE: Fetching All Cloud Triggers using Parse Hooks API (Bash/Python)\nDESCRIPTION: Shows how to make a GET request to the `/hooks/triggers` endpoint using `curl` (Bash) and Python's `http.client`. Requires authentication headers (`X-Parse-Application-Id` and `X-Parse-Master-Key`). The response is a JSON object containing a list of all defined triggers.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/hooks.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\\n  -H \"X-Parse-Application-Id: <span class=\\\"custom-parse-server-appid\\\">${APPLICATION_ID}</span>\" \\\n  -H \"X-Parse-Master-Key: <span class=\\\"custom-parse-server-masterkey\\\">${MASTER_KEY}</span>\" \\\n  -H \"Content-Type: application/json\" \\\n  <span class=\\\"custom-parse-server-protocol\\\">https</span>://<span class=\\\"custom-parse-server-url\\\">YOUR.PARSE-SERVER.HERE</span><span class=\\\"custom-parse-server-mount\\\">/parse/</span>hooks/triggers\n```\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('<span class=\\\"custom-parse-server-url\\\">YOUR.PARSE-SERVER.HERE</span>', 443)\nconnection.connect()\nconnection.request('GET', '<span class=\\\"custom-parse-server-mount\\\">/parse/</span>hooks/triggers', '', {\n    \"X-Parse-Application-Id\": \"<span class=\\\"custom-parse-server-appid\\\">${APPLICATION_ID}</span>\",\n    \"X-Parse-Master-Key\": \"<span class=\\\"custom-parse-server-masterkey\\\">${MASTER_KEY}</span>\",\n    \"Content-Type\": \"application/json\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Logging Out a ParseUser in C#\nDESCRIPTION: Shows how to log out the current user, which clears the user session from the cache and sets ParseUser.CurrentUser to null.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/users.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nParseUser.LogOut();\nvar currentUser = ParseUser.CurrentUser; // this will now be null\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Parse .NET Guide\nDESCRIPTION: This YAML frontmatter defines metadata and structure for the Parse .NET Developers Guide. It specifies the title, permalink, layout, platform, language, API reference, and sections to be included in the guide.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/dotnet.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: .NET Developers Guide | Parse\npermalink: /dotnet/guide/\nlayout: guide\nplatform: dotnet\nlanguage: cs\ndisplay_platform: .NET\napi_reference: https://parse-community.github.io/Parse-SDK-dotNET/api/\n\nsections:\n- \"dotnet/getting-started.md\"\n- \"dotnet/objects.md\"\n- \"dotnet/queries.md\"\n- \"dotnet/users.md\"\n- \"common/sessions.md\"\n- \"dotnet/roles.md\"\n- \"dotnet/files.md\"\n- \"dotnet/geopoints.md\"\n- \"dotnet/push-notifications.md\"\n- \"dotnet/config.md\"\n- \"dotnet/analytics.md\"\n- \"common/data.md\"\n- \"common/relations.md\"\n- \"dotnet/handling-errors.md\"\n- \"common/security.md\"\n- \"common/performance.md\"\n- \"common/errors.md\"\n\n---\n```\n\n----------------------------------------\n\nTITLE: Registering ParseFirebaseMessagingService in AndroidManifest.xml (XML)\nDESCRIPTION: This XML snippet registers the `ParseFirebaseMessagingService` within the `<application>` tag in the `AndroidManifest.xml` file. This service is responsible for receiving and processing incoming FCM messages when the application is running. The intent filter ensures the service responds to Firebase messaging events.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/push-notifications-android.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<service\n    android:name=\"com.parse.fcm.ParseFirebaseMessagingService\">\n    <intent-filter>\n        <action android:name=\"com.google.firebase.MESSAGING_EVENT\"/>\n    </intent-filter>\n</service>\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Configuration for Parse Flutter Guide\nDESCRIPTION: This YAML configuration specifies the metadata and content structure for the Parse Flutter Guide. It includes the title, permalink, layout, platform, language, and API reference. The 'sections' array lists the Markdown files that make up the guide content.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/flutter.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Flutter Guide | Parse\npermalink: /flutter/guide/\nlayout: guide\nplatform: flutter\nlanguage: dart\ndisplay_platform: Flutter\napi_reference: /flutter/api\n\nsections:\n- \"flutter/getting-started.md\"\n- \"dart/objects.md\"\n- \"dart/queries.md\"\n- \"dart/cloud-code.md\"\n- \"dart/config.md\"\n- \"dart/files.md\"\n- \"flutter/push-notifications.md\"\n- \"dart/other-features.md\"\n- \"dart/storage.md\"\n- \"dart/users.md\"\n```\n\n----------------------------------------\n\nTITLE: Deleting Fields and Indexes from a Schema in Parse Server\nDESCRIPTION: This code demonstrates how to delete an existing field (population) and an index (population_index) from a schema using the special \"__op\": \"Delete\" operation. This requires application ID and master key authentication.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/schemas.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-Master-Key: ${MASTER_KEY}\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '\n    {\n      \"className\": \"City\",\n      \"fields\": {\n        \"population\": {\n          \"__op\": \"Delete\"\n        }\n      },\n      \"indexes\": {\n        \"population_index\": {\n          \"__op\": \"Delete\"\n        }\n      }\n    }' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/schemas/City\n```\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nconnection.connect()\nconnection.request('PUT', '/parse/schemas/City', json.dumps({\n    \"className\": \"City\",\n    \"fields\": {\n        \"population\": {\n            \"__op\": \"Delete\"\n        },\n        \"indexes\": {\n            \"population_index\": {\n                \"__op\" : \"Delete\"\n            }\n        }\n    }\n}), {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-Master-Key\": \"${MASTER_KEY}\",\n    \"Content-Type\": \"application/json\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Accessing PostgreSQL Command Line\nDESCRIPTION: Opens the PostgreSQL interactive terminal (psql) for executing SQL commands.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/deploying-aws-ubuntu.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npsql\n```\n\n----------------------------------------\n\nTITLE: Using first() Method in Parse.Query for Single Result in JavaScript\nDESCRIPTION: Demonstrates using the first() method to retrieve only the first matching object from a Parse.Query, which is more convenient than using find() when only one result is needed.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/queries.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst GameScore = Parse.Object.extend(\"GameScore\");\nconst query = new Parse.Query(GameScore);\nquery.equalTo(\"playerEmail\", \"dstemkoski@example.com\");\nconst object = await query.first();\n```\n\n----------------------------------------\n\nTITLE: Defining Unity Developers Guide Structure in YAML\nDESCRIPTION: This YAML snippet defines the structure and metadata for the Unity Developers Guide. It includes the title, permalink, layout, platform information, and a list of sections that make up the guide.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/unity.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Unity Developers Guide | Parse\npermalink: /unity/guide/\nlayout: guide\nplatform: unity\nlanguage: cs\ndisplay_platform: Unity\napi_reference: https://parse-community.github.io/Parse-SDK-dotNET/api/\n\nsections:\n- \"unity/getting-started.md\"\n- \"unity/objects.md\"\n- \"unity/queries.md\"\n- \"unity/users.md\"\n- \"common/sessions.md\"\n- \"unity/roles.md\"\n- \"unity/files.md\"\n- \"unity/geopoints.md\"\n- \"unity/push-notifications.md\"\n- \"unity/config.md\"\n- \"unity/analytics.md\"\n- \"common/data.md\"\n- \"common/relations.md\"\n- \"unity/handling-errors.md\"\n- \"common/security.md\"\n- \"common/performance.md\"\n- \"common/errors.md\"\n```\n\n----------------------------------------\n\nTITLE: Extended Error Handling with Connection Failure\nDESCRIPTION: Shows how to handle both object not found errors and connection failures when querying Parse Cloud. Demonstrates checking different error codes for specific error scenarios.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/handling-errors.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst query = new Parse.Query(Note);\nquery.get(\"thisObjectIdDoesntExist\")\n.then((results) => {\n  // This function will *not* be called.\n  alert(\"Everything went fine!\");\n}, (error) => {\n  // This will be called.\n  // error is an instance of Parse.Error with details about the error.\n  if (error.code === Parse.Error.OBJECT_NOT_FOUND) {\n    alert(\"Uh oh, we couldn't find the object!\");\n  } else if (error.code === Parse.Error.CONNECTION_FAILED) {\n    alert(\"Uh oh, we couldn't even connect to the Parse Cloud!\");\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Adding New Schema in Parse Server (Bash)\nDESCRIPTION: This bash snippet demonstrates how to add a new schema to Parse Server using a cURL command. It creates a new 'City' class with a 'name' field. Authentication with Application ID and Master Key is required.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/schemas.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-Master-Key: ${MASTER_KEY}\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '\n    {\n      \"className\": \"City\",\n      \"fields\": {\n        \"name\": {\n          \"type\": \"String\"\n        }\n      }\n    }' \\\n  https://YOUR.PARSE-SERVER.HERE/parse/schemas/City\n```\n\n----------------------------------------\n\nTITLE: Fetching Additional Fields Later with Objective-C\nDESCRIPTION: Shows how to fetch remaining fields for objects that were initially retrieved with limited fields using selectKeys. The fetchIfNeededInBackgroundWithBlock method loads all fields of the object.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/queries.md#2025-04-22_snippet_34\n\nLANGUAGE: objective-c\nCODE:\n```\nPFObject *object = (PFObject*)results[0];\n[object fetchIfNeededInBackgroundWithBlock:^(PFObject *object, NSError *error) {\n  // all fields of the object will now be available here.\n}];\n```\n\n----------------------------------------\n\nTITLE: Retrieving Parse Session by ObjectId\nDESCRIPTION: Makes a GET request to fetch a Session object using its objectId. Requires Application ID, REST API key, and a valid session token. Only sessions belonging to the current user can be retrieved.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/sessions.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -H \"X-Parse-Session-Token: r:pnktnjyb996sj4p156gjtp4im\" \\\n  https://YOUR.PARSE-SERVER.HERE/parse/sessions/Axy98kq1B09\n```\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nconnection.connect()\nconnection.request('GET', '/parse/sessions/Axy98kq1B09', '', {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\",\n    \"X-Parse-Session-Token\": \"r:pnktnjyb996sj4p156gjtp4im\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Targeting Devices by User Proximity for Push Notifications in Parse PHP SDK\nDESCRIPTION: This snippet targets devices associated with users near a specified location for sending notifications. It involves creating a location-based user query and matching associated devices with ParseInstallation queries.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/push-notifications.md#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n// Find users near a given location\n$userQuery = ParseUser::query();\n$userQuery->withinMiles(\"location\", $stadiumLocation, 1.0);\n\n// Find devices associated with these users\n$pushQuery = ParseInstallation::query();\n$pushQuery->matchesQuery('user', $userQuery);\n\n// Send push notification to query\nParsePush::send(array(\n  \"where\" => $pushQuery,\n  \"data\" => array(\n    \"alert\" => \"Free hotdogs at the Parse concession stand!\"\n  )\n), true);\n```\n\n----------------------------------------\n\nTITLE: Configuring URI Protocol in WMAppManifest.xml for Windows Phone Single Sign-on\nDESCRIPTION: This XML snippet shows how to configure the WMAppManifest.xml file to handle URIs with a specific protocol for Facebook single sign-on integration. The ProductId must be replaced with your app's product ID.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/users.md#2025-04-22_snippet_15\n\nLANGUAGE: xml\nCODE:\n```\n<Protocol Name=\"msft-{ProductId}\"\n          NavUriFragment=\"encodedLaunchUri=%s\"\n          TaskID=\"_default\" />\n```\n\n----------------------------------------\n\nTITLE: No Example Available for Parse C++ SDK\nDESCRIPTION: Indicates that no C++ SDK code example exists for the given operation. Serves as a stub for environments lacking feature parity.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_75\n\nLANGUAGE: cpp\nCODE:\n```\n// No C++ example\n```\n\n----------------------------------------\n\nTITLE: Starting Parse Dashboard in Background with Options\nDESCRIPTION: Starts Parse Dashboard in the background with development mode and specified configuration file.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/deploying-aws-ubuntu.md#2025-04-22_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\nnohup parse-dashboard --dev --config parse-dashboard-config.json &\n```\n\n----------------------------------------\n\nTITLE: Updating Package Manager on Ubuntu\nDESCRIPTION: Updates the local package manager apt to ensure the latest package information is available.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/deploying-aws-ubuntu.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from Push Channels in C#\nDESCRIPTION: Shows methods for unsubscribing from push notification channels using both ParseInstallation direct manipulation and ParsePush convenience method.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dotnet/push-notifications.md#2025-04-22_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nvar installation = ParseInstallation.CurrentInstallation;\ninstallation.RemoveAllFromList(\"channels\" new List<string> { \"Giants\" });\nawait installation.SaveAsync();\n```\n\nLANGUAGE: C#\nCODE:\n```\n    ParsePush.UnsubscribeAsync(\"Giants\");\n```\n\n----------------------------------------\n\nTITLE: HTTP Response for Successful Installation Creation - JavaScript\nDESCRIPTION: Displays an example HTTP response for a successful installation object creation request. Indicates a 201 Created status and shows the returned Location header with a generated installation object URL. Useful for understanding expected REST API behaviors for Parse installations endpoint. No executable code; for documentation/reference.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/push-notifications.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nStatus: 201 Created\nLocation: <span class=\\\"custom-parse-server-protocol\\\">https</span>://<span class=\\\"custom-parse-server-url\\\">YOUR.PARSE-SERVER.HERE</span><span class=\\\"custom-parse-server-mount\\\">/parse/</span>installations/mrmBZvsErB\n```\n\n----------------------------------------\n\nTITLE: Example JSONC Response for Node Query Across Types - JSONC\nDESCRIPTION: This response reflects the result of submitting a generic node query. The returned node contains the unique Node ID, its type ('User'), and any requested type-specific fields. The structure is consistent for all node-accessible types.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/queries.md#2025-04-22_snippet_6\n\nLANGUAGE: JSONC\nCODE:\n```\n{\n  \"data\": {\n    \"node\": {\n      \"id\": \"X1VzZXI6Q1lMeWJYMjFjcw==\",\n      \"__typename\": \"User\",\n      \"username\": \"johndoe\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Parse SDK via Swift Package Manager\nDESCRIPTION: Package URL for installing Parse SDK through Xcode's Swift Package Manager.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/getting-started.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttps://github.com/parse-community/Parse-SDK-iOS-OSX\n```\n\n----------------------------------------\n\nTITLE: Saving Local Changes Eventually to Parse Server - Parse SDK Objective-C\nDESCRIPTION: This Objective-C line calls saveEventually on a PFObject (gameScore), causing the object to be pinned locally and automatically synced with the Parse server when the network is available. It relies on the Parse SDK for Objective-C. No parameters besides the PFObject itself are used. This method is suitable for low-latency or unreliable connectivity scenarios and requires no output handling.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/local-datastore.md#2025-04-22_snippet_7\n\nLANGUAGE: objective_c\nCODE:\n```\n[gameScore saveEventually];\n```\n\n----------------------------------------\n\nTITLE: Associating Files with Objects using Python\nDESCRIPTION: Shows how to associate a file with a Parse object using Python. Requires the application ID, REST API key and a JSON object containing properties of the Parse object, including file information like `name` and `url`.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/files.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('<span class=\\\"custom-parse-server-url\\\">YOUR.PARSE-SERVER.HERE</span>', 443)\nconnection.connect()\nconnection.request('POST', '<span class=\\\"custom-parse-server-mount\\\">/parse/</span>classes/PlayerProfile', json.dumps({\n    \"name\": \"Andrew\",\n    \"picture\": {\n        \"name\": \"...profile.png\",\n        \"url:\": \"...profile.png\",\n        \"__type\": \"File\"\n    }\n}), {\n    \"X-Parse-Application-Id\": \"<span class=\\\"custom-parse-server-appid\\\">${APPLICATION_ID}</span>\",\n    \"X-Parse-REST-API-Key\": \"<span class=\\\"custom-parse-server-restapikey\\\">${REST_API_KEY}</span>\",\n    \"Content-Type\": \"application/json\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Setting a GeoPoint in a ParseObject\nDESCRIPTION: This snippet shows how to set a created ParseGeoPoint as a field in a ParseObject called 'location'. It demonstrates how to modify a ParseObject to include spatial data.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/geopoints.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$placeObject->set(\"location\", $point);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Validation for Parse Signup\nDESCRIPTION: Implementation of the PFSignUpViewControllerDelegate method to add client-side validation before submitting signup information. This example checks if the password is at least 8 characters long.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/user-interface.md#2025-04-22_snippet_11\n\nLANGUAGE: objective_c\nCODE:\n```\n- (BOOL)signUpViewController:(PFSignUpViewController *)signUpController\n           shouldBeginSignUp:(NSDictionary *)info {\n    NSString *password = info[@\"password\"];\n    return (password.length >= 8); // prevent sign up if password has to be at least 8 characters long\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\nfunc signUpViewController(_ signUpController: PFSignUpViewController,\n\t\t\t\t\t\t\t\t\t\t\t\tshouldBeginSignUp info: [String : String]) -> Bool {\n\tif let password = info[\"password\"] {\n\t\treturn password.utf16.count >= 8\n\t}\n\treturn false\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Retrieved Objects Response\nDESCRIPTION: The JSON response includes a 'results' array that contains each queried object with attributes like 'objectId', 'score', 'playerName', and timestamps. The structure efficiently allows handling multiple entries.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/getting-started.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"results\": [\n    {\n      \"objectId\": \"2ntvSpRGIK\",\n      \"score\": 123,\n      \"playerName\": \"Sean Plott\",\n      \"cheatMode\": false,\n      \"updatedAt\": \"2022-01-01T12:23:45.678Z\",\n      \"createdAt\": \"2022-01-01T12:23:45.678Z\"\n    }\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Querying Objects in a Polygon with Curl\nDESCRIPTION: Makes a GET request to find places within a polygon area defined by at least three geographic points using the $geoWithin and $polygon operators. Available in Parse-Server 2.5.0 and later.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/geopoints.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -G \\\n  --data-urlencode 'where={\n        \"location\": {\n          \"$geoWithin\": {\n            \"$polygon\": [\n              {\n                \"__type\": \"GeoPoint\",\n                \"latitude\": 25.774,\n                \"longitude\": -80.190\n              },\n              {\n                \"__type\": \"GeoPoint\",\n                \"latitude\": 18.466,\n                \"longitude\": -66.118\n              },\n              {\n                \"__type\": \"GeoPoint\",\n                \"latitude\": 32.321,\n                \"longitude\": -64.757\n              }\n            ]\n          }\n        }\n      }' \\\n  https://api.parse.com/1/classes/PizzaPlaceObject\n```\n\n----------------------------------------\n\nTITLE: Custom Authentication Login\nDESCRIPTION: Demonstrates how to log in using a CustomAdapter with authentication data.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/users.md#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst loggedIn = await Parse.User.logInWith('CustomAdapter', { authData: myAuthData});\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Redirect for Flutter API Documentation\nDESCRIPTION: YAML front matter configuration that sets up a page redirect from /flutter/api/ to the official Parse Platform Flutter SDK documentation. Includes layout specification, sitemap exclusion, and redirect target URL.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/flutter-api.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlayout: redirected\nsitemap: false\npermalink: /flutter/api/\nredirect_to:\n- https://parseplatform.org/Parse-SDK-Flutter/flutter/flutter_parse_sdk_flutter/flutter_parse_sdk_flutter-library.html\n```\n\n----------------------------------------\n\nTITLE: Parse Server Authentication Response Success\nDESCRIPTION: Example of successful authentication response from Parse Server showing the user data structure including sessionToken and authData.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/users.md#2025-04-22_snippet_20\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"username\": \"Parse\",\n  \"createdAt\": \"2022-01-01T12:23:45.678Z\",\n  \"updatedAt\": \"2022-01-01T12:23:45.678Z\",\n  \"objectId\": \"uMz0YZeAqc\",\n  \"sessionToken\": \"r:samplei3l83eerhnln0ecxgy5\",\n  \"authData\": {\n    \"providerName\": {\n      \"id\": \"12345678\",\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Front Matter for Dart API Documentation Redirect\nDESCRIPTION: This YAML front matter sets up a redirect from the '/dart/api/' path to the Flutter Parse SDK documentation URL. It includes layout, sitemap, permalink, and redirect_to settings.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/dart-api.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: redirected\nsitemap: false\npermalink: /dart/api/\nredirect_to:\n- https://parseplatform.org/Parse-SDK-Flutter/dart/flutter_parse_sdk/flutter_parse_sdk-library.html\n---\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Saved Object by ID\nDESCRIPTION: Retrieve a specific game score using its objectId in a curl GET request. Set 'X-Parse-Application-Id' and append the objectId to the request URL. The response contains all attributes of the stored object, including 'score', 'playerName', and timestamps.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/getting-started.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\\n  -H \"X-Parse-Application-Id: APPLICATION_ID\" \\\n  http://localhost:1337/parse/classes/GameScore/2ntvSpRGIK\n\n```\n\n----------------------------------------\n\nTITLE: Setting a GeoPoint on a Parse Object in JavaScript\nDESCRIPTION: Shows how to associate a Parse.GeoPoint with a Parse Object by setting it as a field value.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/geopoints.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nplaceObject.set(\"location\", point);\n```\n\n----------------------------------------\n\nTITLE: Limiting Query Results\nDESCRIPTION: Examples of limiting the number of returned results and skipping initial results for pagination\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/queries.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nquery = query.Limit(10); // limit to at most 10 results\n```\n\n----------------------------------------\n\nTITLE: Creating Public Post with Author-Only Edit Rights\nDESCRIPTION: Creates a post that can be read by anyone but only edited by its author using ParseACL permissions.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/users.md#2025-04-22_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nParseObject publicPost = new ParseObject(\"Post\");\nParseACL postACL = new ParseACL(ParseUser.getCurrentUser());\npostACL.setPublicReadAccess(true);\npublicPost.setACL(postACL);\npublicPost.saveInBackground();\n```\n\n----------------------------------------\n\nTITLE: Configuring Jekyll Redirect for Unity API Documentation\nDESCRIPTION: This YAML configuration sets up a redirection from the current Unity API documentation page to the new location on GitHub Pages. It uses Jekyll's front matter to specify the redirect parameters.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/unity-api.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: redirected\nsitemap: false\npermalink: /unity/api/\nredirect_to:\n   - https://parse-community.github.io/Parse-SDK-dotNET/api/\n---\n```\n\n----------------------------------------\n\nTITLE: Email Verification in Parse Server GraphQL\nDESCRIPTION: Demonstrates how to trigger a verification email sending. Used when initial verification email was not received.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/users.md#2025-04-22_snippet_6\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"X-Parse-Application-Id\": \"APPLICATION_ID\"\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\nmutation sendVerificationEmail {\n  sendVerificationEmail(input: { email: \"email@email.email\" }) {\n    ok\n  }\n}\n```\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"data\": {\n    \"sendVerificationEmail\": {\n      \"ok\": true,\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting GraphQL Configuration in JavaScript\nDESCRIPTION: Example showing how to set or update Parse GraphQL configuration using the ParseGraphQLServer class.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/customisation.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst parseGraphQLServer = new ParseGraphQLServer(parseServer, {\n  graphQLPath: parseServerConfig.graphQLPath,\n  playgroundPath: parseServerConfig.playgroundPath\n});\n\nconst config = {\n  // ... ParseGraphQLConfiguration\n};\n\nawait parseGraphQLServer.setGraphQLConfig(config);\n```\n\n----------------------------------------\n\nTITLE: Sending REST API Request for User Signup using Arduino Parse SDK\nDESCRIPTION: This code snippet demonstrates how to send a POST request to create a new user using the Parse REST API through the Arduino SDK. It includes the endpoint, request method, and JSON payload for user creation.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/arduino/requests.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nParseResponse response = Parse.sendRequest(\"POST\", \"/parse/users\", \"{\\\"username\\\":\\\"cooldude6\\\",\\\"password\\\":\\\"p_n7!-e8\\\"}\", \"\");\n```\n\n----------------------------------------\n\nTITLE: Including System Time Library\nDESCRIPTION: Includes the necessary system time library for implementing custom push notification polling.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/embedded_c/push-notifications.md#2025-04-22_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\n#include <sys/time.h>\n```\n\n----------------------------------------\n\nTITLE: Schema Response Format in Parse Server\nDESCRIPTION: This JSON snippet illustrates the format of the response when fetching schemas from Parse Server. It includes class names, field types, and other schema information.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/schemas.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"results\": [\n    {\n      \"className\": \"Game\",\n      \"fields\": {\n        \"ACL\": {\n          \"type\": \"ACL\"\n        },\n        \"createdAt\": {\n          \"type\": \"Date\"\n        },\n        \"objectId\": {\n          \"type\": \"String\"\n        },\n        \"name\": {\n          \"type\": \"String\"\n        },\n        \"score\": {\n          \"type\": \"Number\"\n        },\n        \"updatedAt\": {\n          \"type\": \"Date\"\n        }\n      }\n    },\n    /*...*/\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Local Development of Parse Docs\nDESCRIPTION: Commands to install Jekyll and node packages required for local development of the Parse documentation site. This setup is needed before running the site locally.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbundle install\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Initializing Secure Local Storage with Parse\nDESCRIPTION: Sets up Parse local datastore with secure-ls encryption integration for encrypted local storage. Configures custom local datastore controller methods for data operations.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/local-datastore.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport SecureLS from 'secure-ls';\nconst ls = new SecureLS({ isCompression: false });\n\nParse.enableLocalDatastore();\nParse.setLocalDatastoreController({\n  fromPinWithName: name => ls.get(name),\n  pinWithName: (name, objects) => ls.set(name, JSON.stringify(objects)),\n  unPinWithName: name => ls.remove(name),\n  getAllContents: () => {\n    let data = {};\n    ls.getAllKeys().forEach((key) => {\n      const value = ls.get(key).data;\n      data[key] = value.includes('{') ? JSON.parse(value) : value;\n    })\n    return data;\n  },\n  clear: () => ls.removeAll()\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Updating Parse Objects in iOS\nDESCRIPTION: Retrieves a GameScore object by ID using a PFQuery and updates its fields. Only modified fields are sent to Parse when saving.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/objects.md#2025-04-22_snippet_5\n\nLANGUAGE: objective_c\nCODE:\n```\nPFQuery *query = [PFQuery queryWithClassName:@\"GameScore\"];\n\n// Retrieve the object by id\n[query getObjectInBackgroundWithId:@\"xWMyZ4YEGZ\"\n                             block:^(PFObject *gameScore, NSError *error) {\n    // Now let's update it with some new data. In this case, only cheatMode and score\n    // will get sent to the cloud. playerName hasn't changed.\n    gameScore[@\"cheatMode\"] = @YES;\n    gameScore[@\"score\"] = @1338;\n    [gameScore saveInBackground];\n}];\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet query = PFQuery(className:\"GameScore\")\nquery.getObjectInBackground(withId: \"xWMyZEGZ\") { (gameScore: PFObject?, error: Error?) in\n    if let error = error {\n        print(error.localizedDescription)\n    } else if let gameScore = gameScore {\n        gameScore[\"cheatMode\"] = true\n        gameScore[\"score\"] = 1338\n        gameScore.saveInBackground()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default ACL for Parse Objects\nDESCRIPTION: Sets a default ACL for all newly created Parse objects with public read access.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/users.md#2025-04-22_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nParseACL defaultACL = new ParseACL();\ndefaultACL.setPublicReadAccess(true);\nParseACL.setDefaultACL(defaultACL, true);\n```\n\n----------------------------------------\n\nTITLE: Fetching All Schemas in Parse Server (Bash)\nDESCRIPTION: This snippet demonstrates how to fetch schemas for all classes in a Parse Server application using a cURL command. It requires the Application ID and Master Key for authentication.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/schemas.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-Master-Key: ${MASTER_KEY}\" \\\n  -H \"Content-Type: application/json\" \\\n  https://YOUR.PARSE-SERVER.HERE/parse/schemas\n```\n\n----------------------------------------\n\nTITLE: Parse Server Basic Authentication URL Format\nDESCRIPTION: Example of using basic HTTP authentication format for Parse Server REST API calls. Shows how to include application ID and JavaScript key in the URL.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/quick-reference.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\nhttps://myAppID:javascript-key=myJavaScriptKey@YOUR.PARSE-SERVER.HERE/parse/classes/GameScore/Ed1nuqPvcm\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server for Parse Docs on Linux/OS X\nDESCRIPTION: Command to start webpack and Jekyll for local development on Linux/OS X systems. This will build the site and start a local server for preview.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Sorting Query Results by Field\nDESCRIPTION: Shows how to control the order of query results for sortable types like numbers and strings, demonstrating both ascending and descending sort options.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/arduino/queries.md#2025-04-22_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\n// Sorts the results in ascending order by the temperature field\nquery.orderBy(\"temperature\");\n// Sorts the results in descending order by the temperature field\nquery.orderBy(\"-temperature\");\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Invalid Operation in Parse User Signup\nDESCRIPTION: This snippet shows how calling SignUpAsync without setting required properties leads to an InvalidOperationException.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/handling-errors.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar user = new ParseUser();\nuser.SignUpAsync();\n```\n\n----------------------------------------\n\nTITLE: Initializing Custom Login Controller\nDESCRIPTION: Shows how to instantiate and present a custom login controller with a custom signup controller\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/user-interface.md#2025-04-22_snippet_5\n\nLANGUAGE: objective-c\nCODE:\n```\nMyLogInViewController *logInController = [[MyLogInViewController alloc] init];\nlogInController.signUpController = [[MySignUpViewController alloc] init];\n[self presentViewController:logInController animated:YES completion:nil];\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet logInController = MyLogInViewController()\nlogInController.signUpController = MySignUpViewController()\nself.present(logInController, animated: true, completion: nil)\n```\n\n----------------------------------------\n\nTITLE: OS X Push Notification Tracking Implementation\nDESCRIPTION: Code to track push notification-related app opens in OS X applications.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/push-notifications.md#2025-04-22_snippet_14\n\nLANGUAGE: objective_c\nCODE:\n```\n- (void)applicationDidFinishLaunching:(NSNotification *)notification {\n  [PFAnalytics trackAppOpenedWithRemoteNotificationPayload:[notification userInfo]];\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\nfunc applicationDidFinishLaunching(notification: NSNotification) {\n  PFAnalytics.trackAppOpenedWithRemoteNotificationPayload(notification.userInfo)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Facebook Permissions in strings.xml\nDESCRIPTION: XML configuration for defining Facebook login permissions in the Android resources file.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/user-interface.md#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<resources>\n    <string-array name=\"my_facebook_permissions\">\n        <item>public_profile</item>\n        <item>user_friends</item>\n    </string-array>\n</resources>\n```\n\n----------------------------------------\n\nTITLE: Saved ParseObject Structure - JSONC\nDESCRIPTION: Shows the structure of a saved ParseObject including system fields like objectId, createdAt and updatedAt.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/objects.md#2025-04-22_snippet_2\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"objectId\": \"xWMyZ4YEGZ\",\n  \"score\": 1337,\n  \"playerName\": \"Sean Plott\",\n  \"cheatMode\": false,\n  \"createdAt\":\"2022-01-01T12:23:45.678Z\",\n  \"updatedAt\":\"2022-01-01T12:23:45.678Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Anonymous User Authentication Data Structure in Parse\nDESCRIPTION: Defines the structure of anonymous user authentication data in Parse. It includes a random UUID with lowercase hexadecimal digits as the user's ID.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/users.md#2025-04-22_snippet_22\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"anonymous\": {\n    \"id\": \"random UUID with lowercase hexadecimal digits\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic User Signup Example\nDESCRIPTION: Demonstrates an example that throws NSInternalInconsistencyException due to missing required properties\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/handling-errors.md#2025-04-22_snippet_0\n\nLANGUAGE: objective-c\nCODE:\n```\nPFUser *user = [PFUser user];\n[user signUp];\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet user = PFUser()\nuser.signUp\n```\n\n----------------------------------------\n\nTITLE: Sorting Query Results by Multiple Fields\nDESCRIPTION: Demonstrates how to sort query results by multiple keys using a comma-separated string of field names.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/arduino/queries.md#2025-04-22_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\nquery.orderBy(\"temperature,name\");\n```\n\n----------------------------------------\n\nTITLE: Unset Parse Object Field Using GraphQL Mutation - GraphQL\nDESCRIPTION: Depicts the usage of the updateGameScore mutation setting a field (e.g., 'playerName') to null, which completely unsets that field in the Parse database per GraphQL API spec. The ID is required, and any field set to null will be removed from the object on the server-side. The response returns the updated object with the corresponding field shown as null.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/objects.md#2025-04-22_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nmutation updateAGameScore {\n  updateGameScore(\n    input: { id: \"R2FtZVNjb3JlOmM3TVpDZEhQY2w=\", fields: { playerName: null } }\n  ) {\n    gameScore {\n      id\n      playerName\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Parse Server New User Creation Response\nDESCRIPTION: Example response when a new user is created during authentication, showing the automatically generated username and session token.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/js/users.md#2025-04-22_snippet_21\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"username\": \"iwz8sna7sug28v4eyu7t89fij\",\n  \"createdAt\": \"2022-01-01T12:23:45.678Z\",\n  \"objectId\": \"uMz0YZeAqc\",\n  \"sessionToken\": \"r:samplei3l83eerhnln0ecxgy5\"\n}\n```\n\n----------------------------------------\n\nTITLE: Inefficient Query with Case-Insensitive Regex in C#\nDESCRIPTION: This snippet shows an inefficient way to query for player names using a case-insensitive regular expression in C#. This approach is not recommended for performance reasons.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_42\n\nLANGUAGE: cs\nCODE:\n```\nquery.WhereMatches(\"playerName\", \"Michael\", \"i\")\n```\n\n----------------------------------------\n\nTITLE: Deleting a Parse User via REST API in Bash\nDESCRIPTION: Makes a DELETE request to remove a specific user from Parse Server. Requires a valid session token to authenticate that the request is coming from the user or an authorized admin.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/users.md#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X DELETE \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -H \"X-Parse-Session-Token: r:pnktnjyb996sj4p156gjtp4im\" \\\n  https://YOUR.PARSE-SERVER.HERE/parse/users/g7y9tkhB7O\n```\n\n----------------------------------------\n\nTITLE: Encoding and Decoding ParseObjects in PHP\nDESCRIPTION: Using the PHP SDK version **1.3.0** or later, encode/decode ParseObject instances for flexible data management, allowing transmission and storage of object states.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/objects.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// create an object\n$obj = new ParseObject(\"YourClass\");\n$obj->set('info', 'an encodable object');\n\n// encode this object\n$encoded = $obj->encode();\n\n// save this encoded object somewhere for later use...\n\n// decode to get our object as it was before,\n// unsaved changes included\n$decoded = ParseObject::decode($encoded);\n```\n\n----------------------------------------\n\nTITLE: Twitter Authentication Data Structure in Parse\nDESCRIPTION: Defines the structure of Twitter authentication data used in Parse. It includes the user's Twitter ID, screen name, consumer key and secret, and authentication tokens.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/users.md#2025-04-22_snippet_21\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"twitter\": {\n    \"id\": \"user's Twitter id number as a string\",\n    \"screen_name\": \"user's Twitter screen name\",\n    \"consumer_key\": \"your application's consumer key\",\n    \"consumer_secret\": \"your application's consumer secret\",\n    \"auth_token\": \"an authorized Twitter token for the user with your application\",\n    \"auth_token_secret\": \"the secret associated with the auth_token\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Jekyll Redirect for Parse Android SDK API Documentation\nDESCRIPTION: YAML front matter configuration that sets up a redirect from the current page to the official Parse SDK Android API documentation. It disables sitemap indexing and specifies the permalink and target URL.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/android-api.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: redirected\nsitemap: false\npermalink: /android/api/\nredirect_to:\n  - https://parseplatform.org/Parse-SDK-Android/api/\n---\n```\n\n----------------------------------------\n\nTITLE: Deleting a Role in Parse Server using Session Token\nDESCRIPTION: This snippet shows how to delete a role from Parse Server using a session token for a user with write access to the Role object via a DELETE request to the Parse Server API.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/roles.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X DELETE \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-REST-API-Key: ${REST_API_KEY}\" \\\n  -H \"X-Parse-Session-Token: pnktnjyb996sj4p156gjtp4im\" \\\n  https://YOUR.PARSE-SERVER.HERE/parse/roles/mrmBZvsErB\n```\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nconnection.connect()\nconnection.request('DELETE', '/parse/roles/mrmBZvsErB', '', {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-REST-API-Key\": \"${REST_API_KEY}\",\n    \"X-Parse-Session-Token\": \"pnktnjyb996sj4p156gjtp4im\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Parse Server API Path Reference - Other APIs\nDESCRIPTION: REST API endpoints for Roles, Files, Analytics, Push Notifications and Installations management.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/quick-reference.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n# Roles API\n/parse/roles                POST   Creating Roles\n/parse/roles/<objectId>     GET    Retrieving Roles\n/parse/roles/<objectId>     PUT    Updating Roles\n/parse/roles/<objectId>     DELETE Deleting Roles\n\n# Files API\n/parse/files/<fileName>     POST   Uploading Files\n\n# Analytics API\n/parse/events/AppOpened     POST   App Open Analytics\n/parse/events/<eventName>   POST   Custom Analytics\n\n# Push Notifications API\n/parse/push                 POST   Push Notifications\n\n# Installations API\n/parse/installations            POST   Uploading Installation Data\n/parse/installations/<objectId> GET    Retrieving Installations\n/parse/installations/<objectId> PUT    Updating Installations\n/parse/installations            GET    Querying Installations\n/parse/installations/<objectId> DELETE Deleting Installations\n```\n\n----------------------------------------\n\nTITLE: Deleting Function Webhook using PUT Request\nDESCRIPTION: Deletes an existing function webhook using PUT method with a Delete operation. Requires application ID and master key for authentication. Returns empty object or existing cloud code function details if present.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/rest/hooks.md#2025-04-22_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT \\\n  -H \"X-Parse-Application-Id: ${APPLICATION_ID}\" \\\n  -H \"X-Parse-Master-Key: ${MASTER_KEY}\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"__op\": \"Delete\"}' \\\nhttps://YOUR.PARSE-SERVER.HERE/parse/hooks/functions/foo\n```\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\nimport json\n\nconnection = http.client.HTTPSConnection('YOUR.PARSE-SERVER.HERE', 443)\nconnection.connect()\nconnection.request('PUT', '/parse/hooks/functions/foo', json.dumps({\n    \"__op\": \"Delete\"\n}), {\n    \"X-Parse-Application-Id\": \"${APPLICATION_ID}\",\n    \"X-Parse-Master-Key\": \"${MASTER_KEY}\",\n    \"Content-Type\": \"application/json\"\n})\nresult = json.loads(connection.getresponse().read())\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Custom ParseLiveList with Child Builder\nDESCRIPTION: Advanced implementation of ParseLiveListWidget with custom child builder for list elements, including error and loading states.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/dart/queries.md#2025-04-22_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nParseLiveListWidget<ParseObject>(\n  query: query,\n  reverse: false,\n  childBuilder:\n      (BuildContext context, ParseLiveListElementSnapshot<ParseObject> snapshot) {\n    if (snapshot.failed) {\n      return const Text('something went wrong!');\n    } else if (snapshot.hasData) {\n      return ListTile(\n        title: Text(\n          snapshot.loadedData.get(\"text\"),\n        ),\n      );\n    } else {\n      return const ListTile(\n        leading: CircularProgressIndicator(),\n      );\n    }\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Regex-Based Filtering in Parse Objective-C and Swift\nDESCRIPTION: Illustrates how to use the matchesRegex constraint in Parse for Objective-C and Swift to search for player names that begin with a string. Requires Parse iOS SDK. Anchored, case-sensitive regular expressions are used for efficient searching. Key parameter: playerName, regex pattern: ^Michael.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_55\n\nLANGUAGE: objective_c\nCODE:\n```\n[query whereKey:@\"playerName\" matchesRegex:@\"^Michael\"];\n```\n\nLANGUAGE: swift\nCODE:\n```\nquery.whereKey(\"playerName\", matchesRegex: \"^Michael\")\n```\n\n----------------------------------------\n\nTITLE: Restarting PostgreSQL Server\nDESCRIPTION: Restarts the PostgreSQL server to apply the configuration changes.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/deploying-aws-ubuntu.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nsudo service postgresql restart\n```\n\n----------------------------------------\n\nTITLE: Child Relation Query Response Example\nDESCRIPTION: Example response showing the nested structure of related data returned from the child relation query.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/graphql/queries.md#2025-04-22_snippet_22\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"data\": {\n    \"houses\": {\n      \"edges\": [\n        {\n          \"node\": {\n            \"name\": \"Parse Members\",\n            \"street\": {\n              \"name\": \"rue jean jaures\",\n              \"city\": {\n                \"name\": \"Toulouse\",\n                \"country\": {\n                  \"name\": \"France\"\n                }\n              }\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Additional Fields Later with fetchIfNeededInBackground\nDESCRIPTION: This snippet demonstrates how to fetch additional fields later for objects that were initially retrieved with a limited set of fields using selectKeys.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/android/queries.md#2025-04-22_snippet_16\n\nLANGUAGE: java\nCODE:\n```\nParseObject object = results.get(0);\nobject.fetchIfNeededInBackground(new GetCallback<ParseObject>() {\n  public void done(ParseObject object, ParseException e) {\n    // all fields of the object will now be available here.\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Checking NodeJS Version\nDESCRIPTION: Verifies that NodeJS was installed correctly by displaying the version number.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/deploying-aws-ubuntu.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnode -v\n```\n\n----------------------------------------\n\nTITLE: Counting Reviews in JavaScript\nDESCRIPTION: Example of counting reviews for a specific movie using the count() method in JavaScript. This approach can be inefficient for large datasets.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_83\n\nLANGUAGE: javascript\nCODE:\n```\nvar Review = Parse.Object.extend(\"Review\");\nvar query = new Parse.Query(\"Review\");\nquery.equalTo(\"movie\", movie);\nquery.count().then(function(count) {\n  // Request succeeded\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Parse Client in C++\nDESCRIPTION: Code snippet showing how to initialize Parse client with application ID and client key in C++. These credentials are required to associate the device with a specific Parse application.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/embedded_c/getting-started.md#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nParseClient client = parseInitialize(\"${APPLICATION_ID}\", \"${CLIENT_KEY}\");\n```\n\n----------------------------------------\n\nTITLE: Legacy Postgres Connection URL Format for Parse Server\nDESCRIPTION: Postgres connection URL format for Parse Server 4.2.0 and below, showing the limited configuration options available in older versions compared to current versions.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/parse-server/database.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\npostgres://localhost:5432/db?ssl=boolean&client_encoding=string&application_name=string&fallback_application_name=string&poolSize=number&binary=boolean&keepAlive=boolean\n```\n\n----------------------------------------\n\nTITLE: Counting Reviews in C#\nDESCRIPTION: Example of counting reviews for a specific movie using the CountAsync method in C#. This approach can be inefficient for large datasets.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_87\n\nLANGUAGE: cs\nCODE:\n```\nvar count = await ParseObject.GetQuery(\"Review\")\n// movieId corresponds to a given movie's id\n    .WhereEqualTo(\"movie\", movieId)\n    .CountAsync();\n```\n\n----------------------------------------\n\nTITLE: Setting Role Permissions by Name in C#\nDESCRIPTION: Demonstrates how to set role permissions directly using the role name without querying.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/unity/roles.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\nvar wallPost = new ParseObject(\"WallPost\");\nvar postACL = new ParseACL();\npostACL.SetRoleWriteAccess(\"Moderators\", true);\nwallPost.ACL = postACL;\nTask saveTask = wallPost.SaveAsync();\n```\n\n----------------------------------------\n\nTITLE: Configuring Jekyll Page Redirect for Parse JS API Docs\nDESCRIPTION: YAML front matter configuration that sets up a redirect from a legacy documentation URL to the current Parse JavaScript SDK API documentation location on GitHub Pages.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/js-api.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: redirected\nsitemap: false\npermalink: /js/api/\nredirect_to:\n  - https://parse-community.github.io/Parse-SDK-JS/api\n---\n```\n\n----------------------------------------\n\nTITLE: Example JSONC: Failed Health Response (Incorrect Mount Path)\nDESCRIPTION: Illustrates a failed health check response (HTTP 404 Not Found) typically received when the specified mount path (e.g., 'not-good') is incorrect for the Parse Server URL. The 'response' field may contain HTML or error text from the server, indicating the resource wasn't found.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/php/setup.md#2025-04-22_snippet_6\n\nLANGUAGE: jsonc\nCODE:\n```\n// ParseClient::setServerURL('http://localhost:1337', 'not-good');\n{\n    \"status\": 404,\n    \"response\": \"<!DOCTYPE html>...Cannot GET /not-good/health...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing Cached Query Results in Parse SDK\nDESCRIPTION: Demonstrates how to clear cached results for a specific query. This allows forcing a fresh network request when needed instead of using cached results.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/ios/queries.md#2025-04-22_snippet_55\n\nLANGUAGE: objective_c\nCODE:\n```\n[query clearCachedResult];\n```\n\nLANGUAGE: swift\nCODE:\n```\nquery.clearCachedResult()\n```\n\n----------------------------------------\n\nTITLE: Configuring Jekyll Redirect for Parse PHP SDK Documentation\nDESCRIPTION: This YAML front matter sets up a redirect from the current page to the Parse PHP SDK documentation. It disables sitemap inclusion and specifies the source and target URLs for the redirect.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/php-api.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: redirected\nsitemap: false\npermalink: /php/api/\nredirect_to:\n  - https://parse-community.github.io/parse-php-sdk/\n---\n```\n\n----------------------------------------\n\nTITLE: Inefficient notEqualTo Query in PHP\nDESCRIPTION: Shows an inefficient query in PHP using notEqualTo which cannot utilize indexes and requires scanning the entire class for results.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$query = new ParseQuery(\"GameScore\");\n\n$query->notEqualTo(\"playerName\", \"Michael Yabuti\");\n\n$gameScores = $query->find();\n// Retrieved game scores\n```\n\n----------------------------------------\n\nTITLE: Inefficient Query with Case-Insensitive Regex in Java\nDESCRIPTION: This snippet demonstrates an inefficient way to query for player names using a case-insensitive regular expression in Java. This approach is not recommended for performance reasons.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/performance.md#2025-04-22_snippet_41\n\nLANGUAGE: java\nCODE:\n```\nquery.whereMatches(\"playerName\", \"Michael\", \"i\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Parse Cloud Code Guide Structure Using YAML Front Matter\nDESCRIPTION: This YAML front matter block configures the Parse Cloud Code guide, defining its title, permalink, layout structure, platform designation, language (JavaScript), and the content sections to include in the guide.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/cloudcode.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Cloud Code Guide | Parse\npermalink: /cloudcode/guide/\nlayout: guide\nplatform: cloudcode\nlanguage: js\ndisplay_platform: Cloud Code\n\nsections:\n- \"cloudcode/getting-started.md\"\n- \"cloudcode/cloud-code.md\"\n- \"cloudcode/cloud-code-advanced.md\"\n\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Parse Android Documentation\nDESCRIPTION: YAML frontmatter configuration defining the structure and metadata of the Parse Android documentation guide. Includes section definitions, platform specifications, and navigation settings.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/android.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Android Developers Guide | Parse\npermalink: /android/guide/\nlayout: guide\nplatform: android\nlanguage: java\ndisplay_platform: Android\napi_reference: https://parse-community.github.io/Parse-SDK-Android/api\n\nsections:\n- \"android/getting-started.md\"\n- \"android/objects.md\"\n- \"android/queries.md\"\n- \"android/users.md\"\n- \"common/sessions.md\"\n- \"android/roles.md\"\n- \"android/files.md\"\n- \"android/geopoints.md\"\n- \"android/local-datastore.md\"\n- \"android/push-notifications.md\"\n- \"android/config.md\"\n- \"android/analytics.md\"\n- \"android/user-interface.md\"\n- \"common/data.md\"\n- \"common/relations.md\"\n- \"android/handling-errors.md\"\n- \"common/security.md\"\n- \"common/performance.md\"\n- \"common/errors.md\"\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for iOS Push Notifications Tutorial\nDESCRIPTION: YAML frontmatter configuration for the Parse iOS Push Notifications tutorial page. It specifies the document title, permalink, layout template, platform details, and content sections to include.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/ios-push-tutorial.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: iOS Push Tutorial | Parse\npermalink: /tutorials/ios-push-notifications/\nlayout: guide\nplatform: ios\nlanguage:  objective_c-swift\ndisplay_platform: iOS Push Notifications\n\nsections:\n- \"parse-server/push-notifications-ios.md\"\n\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Jekyll Redirect for Parse iOS SDK API Documentation\nDESCRIPTION: YAML front matter that configures a Jekyll redirect from the '/ios/api/' path to the Parse iOS SDK API documentation at 'http://parseplatform.org/Parse-SDK-iOS-OSX/api'. It also disables the page from being included in the sitemap.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/ios-api.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: redirected\nsitemap: false\npermalink: /ios/api/\nredirect_to:\n  - http://parseplatform.org/Parse-SDK-iOS-OSX/api\n---\n```\n\n----------------------------------------\n\nTITLE: Bash Command for ACL (Incomplete)\nDESCRIPTION: This appears to be an incomplete bash example for setting Access Control Lists in Parse applications using command line tools. The code snippet doesn't contain any actual implementation.\nSOURCE: https://github.com/parse-community/docs/blob/gh-pages/_includes/common/security.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n\n```"
  }
]