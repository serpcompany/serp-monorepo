[
  {
    "owner": "mozman",
    "repo": "ezdxf",
    "content": "TITLE: Creating a Horizontal Linear Dimension in Python using ezdxf\nDESCRIPTION: This snippet demonstrates how to create a horizontal linear dimension in a DXF R2010 document using ezdxf. It sets up the document, adds a line for visualization, creates the dimension entity, and renders it.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/linear_dimension.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport ezdxf\n\n# Create a DXF R2010 document:\n# Use argument setup=True to setup the default dimension styles.\ndoc = ezdxf.new(\"R2010\", setup=True)\n\n# Add new dimension entities to the modelspace:\nmsp = doc.modelspace()\n\n# Add a LINE entity for visualization, not required to create the DIMENSION\n# entity:\nmsp.add_line((0, 0), (3, 0))\n\n# Add a horizontal linear DIMENSION entity:\ndim = msp.add_linear_dim(\n    base=(3, 2),  # location of the dimension line\n    p1=(0, 0),  # 1st measurement point\n    p2=(3, 0),  # 2nd measurement point\n    dimstyle=\"EZDXF\",  # default dimension style\n)\n\n# Necessary second step to create the BLOCK entity with the dimension geometry.\n# Additional processing of the DIMENSION entity could happen between adding\n# the entity and the rendering call.\ndim.render()\ndoc.saveas(\"dim_linear_horiz.dxf\")\n```\n\n----------------------------------------\n\nTITLE: Using dxf2code to Convert DXF Elements to Python Code\nDESCRIPTION: Demonstrates how to use the dxf2code module to convert DXF entities and block definitions to Python source code. The example shows reading a DXF file, converting entities from modelspace and a block definition, merging the generated code, and writing it to a Python file.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/addons/dxf2code.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport ezdxf\nfrom ezdxf.addons.dxf2code import entities_to_code, block_to_code\n\ndoc = ezdxf.readfile('original.dxf')\nmsp = doc.modelspace()\nsource = entities_to_code(msp)\n\n# create source code for a block definition\nblock_source = block_to_code(doc.blocks['MyBlock'])\n\n# merge source code objects\nsource.merge(block_source)\n\nwith open('source.py', mode='wt') as f:\n    f.write(source.import_str())\n    f.write('\\n\\n')\n    f.write(source.code_str())\n    f.write('\\n')\n```\n\n----------------------------------------\n\nTITLE: Selecting Entities Overlapping a Window in Python using ezdxf\nDESCRIPTION: This snippet demonstrates how to select entities whose bounding boxes overlap a rectangular window using the bbox_overlap function from the ezdxf.select module.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/entity_selection.rst#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nwindow = select.Window((150, 105), (280, 240))\nfor entity in select.bbox_overlap(window, msp):\n    print(str(entity))\n```\n\n----------------------------------------\n\nTITLE: Getting Transformation Matrix from INSERT Entities in Python using ezdxf\nDESCRIPTION: Retrieves the transformation matrix from an INSERT entity, which transforms the virtual block entities from block reference coordinate system to the World Coordinate System (WCS).\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tasks/get_entity_content.rst#2025-04-23_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nm = insert.matrix44()\n```\n\n----------------------------------------\n\nTITLE: Exporting DXF Content to Flattened DXF in Python\nDESCRIPTION: This snippet shows how to export DXF content to a flattened DXF format using the ezdxf.addons.drawing.dxf module. It exports the content as DXF primitives and works differently from other backends, rendering directly into a given layout of a DXF document.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/image_export.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom ezdxf.addons.drawing import RenderContext, Frontend\nfrom ezdxf.addons.drawing.dxf import DXFBackend\n\n# Create a new DXF document\nout_doc = ezdxf.new()\nout_msp = out_doc.modelspace()\n\n# Create the DXF backend\nbackend = DXFBackend(out_msp)\n\n# Create the frontend\nfrontend = Frontend(ctx, backend)\n\n# Draw the modelspace\nfrontend.draw_layout(msp)\n\n# Save the DXF document\nout_doc.saveas(\"flattened.dxf\")\n```\n\n----------------------------------------\n\nTITLE: Loading DXF File with Error Handling in Python\nDESCRIPTION: This snippet shows how to load a DXF file using ezdxf, including error handling for I/O errors and invalid DXF structures. It demonstrates proper exception handling and system exit codes.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/getting_data.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport sys\nimport ezdxf\n\ntry:\n    doc = ezdxf.readfile(\"your_dxf_file.dxf\")\nexcept IOError:\n    print(f\"Not a DXF file or a generic I/O error.\")\n    sys.exit(1)\nexcept ezdxf.DXFStructureError:\n    print(f\"Invalid or corrupted DXF file.\")\n    sys.exit(2)\n```\n\n----------------------------------------\n\nTITLE: Creating a New DXF Document with Standard Resources in ezdxf\nDESCRIPTION: This code demonstrates how to create a new DXF document with standard resources like linetypes and text styles pre-loaded. This saves time when you need these common resources.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/usage_for_beginners.rst#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndoc = ezdxf.new(setup=True)\n```\n\n----------------------------------------\n\nTITLE: Checking for DXF Attribute Existence in ezdxf\nDESCRIPTION: This code demonstrates how to check if a specific DXF attribute exists for an entity. This is useful for attributes that don't have default values.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/usage_for_beginners.rst#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nentity.dxf.hasattr(\"true_color\")\n```\n\n----------------------------------------\n\nTITLE: Importing the ezdxf Package in Python\nDESCRIPTION: The first step in using ezdxf is to import the package into your Python script. This makes all the functionality of ezdxf available in your code.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/usage_for_beginners.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport ezdxf\n```\n\n----------------------------------------\n\nTITLE: Creating a New DXF Document with Latest Version in ezdxf\nDESCRIPTION: This code demonstrates how to create a new DXF document with the latest supported DXF version. This is the simplest way to create a new DXF file.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/usage_for_beginners.rst#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndoc = ezdxf.new()\n```\n\n----------------------------------------\n\nTITLE: Creating Line Entity Using Layout Factory Method in Python\nDESCRIPTION: Example showing how to create a DXF line entity using the recommended layout factory method. Creates a new document, gets the modelspace, and adds a line with specified coordinates and color attributes.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tasks/add_dxf_entities.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport ezdxf\n\ndoc = ezdxf.new()\nmsp = doc.modelspace()\nmsp.add_line((0, 0, 0), (3, 0, 0), dxfattribs={\"color\": 2})\n```\n\n----------------------------------------\n\nTITLE: Creating a Line entity in ezdxf\nDESCRIPTION: Creates a Line entity from point (0, 0) to point (10, 10) in the modelspace. The Line entity represents a 3D line with start and end points in the World Coordinate System (WCS).\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/dxf_primitives.rst#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nline = msp.add_line((0, 0), (10, 10), dxfattribs=attribs)\n```\n\n----------------------------------------\n\nTITLE: Storing User Data with UserRecord in ezdxf\nDESCRIPTION: This example demonstrates how to use the UserRecord helper class to store and retrieve custom data in DXF entities. It shows storing data in the extension dictionary and in a named dictionary.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/custom_data.rst#2025-04-23_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nfrom ezdxf.urecord import UserRecord\n\nline = doc.modelspace().add_line((0, 0), (10, 10))\nxdict = line.get_extension_dict()\nwith UserRecord(xdict, 'UserData') as user_data:\n    user_data.data = [\n        {'key': 'value'},\n        [1, 2, 3],\n        'string',\n        3.1415,\n        42,\n        Vec2(1, 2),\n        Vec3(1, 2, 3),\n    ]\n```\n\nLANGUAGE: Python\nCODE:\n```\nxdict = line.get_extension_dict()\nwith UserRecord(xdict, 'UserData') as user_data:\n    for item in user_data.data:\n        print(item)\n```\n\nLANGUAGE: Python\nCODE:\n```\nrootdict = doc.rootdict\nwith UserRecord(rootdict, 'GlobalUserData') as user_data:\n    user_data.data = [\n        {'key': 'value'},\n        [1, 2, 3],\n        'string',\n        3.1415,\n        42,\n        Vec2(1, 2),\n        Vec3(1, 2, 3),\n    ]\n```\n\nLANGUAGE: Python\nCODE:\n```\nrootdict = doc.rootdict\nwith UserRecord(rootdict, 'GlobalUserData') as user_data:\n    for item in user_data.data:\n        print(item)\n```\n\n----------------------------------------\n\nTITLE: Creating and Modifying DXF Document with ezdxf in Python\nDESCRIPTION: This snippet demonstrates how to create a new DXF document, add layers, create entities in the modelspace, and save the document using ezdxf. It shows basic operations like adding lines and text with custom attributes.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport ezdxf\nfrom ezdxf import colors\nfrom ezdxf.enums import TextEntityAlignment\n\n# Create a new DXF document.\ndoc = ezdxf.new(dxfversion=\"R2010\")\n\n# Create new table entries (layers, linetypes, text styles, ...).\ndoc.layers.add(\"TEXTLAYER\", color=colors.RED)\n\n# DXF entities (LINE, TEXT, ...) reside in a layout (modelspace, \n# paperspace layout or block definition).  \nmsp = doc.modelspace()\n\n# Add entities to a layout by factory methods: layout.add_...() \nmsp.add_line((0, 0), (10, 0), dxfattribs={\"color\": colors.YELLOW})\nmsp.add_text(\n    \"Test\", \n    dxfattribs={\n        \"layer\": \"TEXTLAYER\"\n    }).set_placement((0, 0.2), align=TextEntityAlignment.CENTER)\n\n# Save the DXF document.\ndoc.saveas(\"test.dxf\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Block in ezdxf\nDESCRIPTION: This snippet demonstrates how to create a new block in ezdxf, add entities to it, and create a block reference in the modelspace. It creates a simple flag shape using a polyline and adds it as a block.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/blocks.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport ezdxf\nfrom ezdxf.math import Vec3\n\ndoc = ezdxf.new('R2010')\nmsp = doc.modelspace()\n\nflag = doc.blocks.new(name='FLAG')\n\nflag.add_lwpolyline([(0, 0), (0, 5), (4, 3), (0, 3)])\nflag.add_circle((0, 0), .4, dxfattribs={'color': 1})\n\nflag_ref = msp.add_blockref('FLAG', (10, 10))\n\ndoc.saveas('flag.dxf')\n```\n\n----------------------------------------\n\nTITLE: Reading DXF File and Accessing Modelspace in Python\nDESCRIPTION: This snippet demonstrates how to read a DXF file using ezdxf, handle potential errors, and access the modelspace of the document.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/howto/content.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nimport ezdxf\n\ntry:\n    doc = ezdxf.readfile(\"your_dxf_file.dxf\")\nexcept IOError:\n    print(f'Not a DXF file or a generic I/O error.')\n    sys.exit(1)\nexcept ezdxf.DXFStructureError:\n    print(f'Invalid or corrupted DXF file.')\n    sys.exit(2)\nmsp = doc.modelspace()\n```\n\n----------------------------------------\n\nTITLE: Creating Arc Dimension by Center, Radius and Angles in Python with ezdxf\nDESCRIPTION: Creates an arc dimension defined by the center point, radius, and start/end angles. The dimension uses the 'EZ_CURVED' style and demonstrates the two-step process of adding the dimension entity and then rendering it.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/arc_dimension.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport ezdxf\n\n# Use argument setup=True to setup the default dimension styles.\ndoc = ezdxf.new(setup=True)\n\n# Add new entities to the modelspace:\nmsp = doc.modelspace()\n\n# Add an arc DIMENSION defined by the center point, start- and end angles,\n# the measurement text is placed at the default location above the dimension\n# line:\ndim = msp.add_arc_dim_cra(\n    center=(5, 5),  # center point of the angle\n    radius=5,  # distance from center point to the start of the extension lines\n    start_angle=60,  # start angle in degrees\n    end_angle=120,  # end angle in degrees\n    distance=2,  # distance from start of the extension lines to the dimension line\n    dimstyle=\"EZ_CURVED\",  # default angular dimension style\n)\n\n# Necessary second step to create the BLOCK entity with the dimension geometry.\n# Additional processing of the DIMENSION entity could happen between adding\n# the entity and the rendering call.\ndim.render()\ndoc.saveas(\"arc_dimension_cra.dxf\")\n```\n\n----------------------------------------\n\nTITLE: Creating Basic DXF Drawing in Python with ezdxf\nDESCRIPTION: Demonstrates how to create a new DXF R2010 document, add a simple line entity to the modelspace, and save the document. The code shows the basic workflow of creating and saving DXF files.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/simple_drawings.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport ezdxf\n\n# create a new DXF R2010 document\ndoc = ezdxf.new(\"R2010\")\n\n# add new entities to the modelspace\nmsp = doc.modelspace()\n# add a LINE entity\nmsp.add_line((0, 0), (10, 0))\n# save the DXF document\ndoc.saveas(\"line.dxf\")\n```\n\n----------------------------------------\n\nTITLE: Extracting Measurement Text from DIMENSION Geometry Block in Python using ezdxf\nDESCRIPTION: Accesses the actual measurement text displayed by CAD applications by examining TEXT and MTEXT entities within the dimension's associated geometry block.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tasks/get_entity_content.rst#2025-04-23_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nfor dimension in msp.query(\"DIMENSION\"):\n    print(str(dimension))\n    block = dimension.get_geometry_block()\n    if block is None:\n        print(\"Geometry block not found.\")\n        continue\n    for entity in block.query(\"TEXT MTEXT\"):\n        print(f\"{str(entity)}: {entity.dxf.text}\")\n```\n\n----------------------------------------\n\nTITLE: Converting World Coordinate System (WCS) to Object Coordinate System (OCS) in Python\nDESCRIPTION: This function converts a point from World Coordinate System (WCS) to Object Coordinate System (OCS) using the previously calculated Ax, Ay, and Az vectors. It performs a matrix multiplication to transform the coordinates.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/concepts/ocs.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef wcs_to_ocs(point):\n    px, py, pz = Vec3(point)  # point in WCS\n    x = px * Ax.x + py * Ax.y + pz * Ax.z\n    y = px * Ay.x + py * Ay.y + pz * Ay.z\n    z = px * Az.x + py * Az.y + pz * Az.z\n    return Vec3(x, y, z)\n```\n\n----------------------------------------\n\nTITLE: Using Extended EntityQuery Features in Python with ezdxf\nDESCRIPTION: This snippet showcases the extended features of EntityQuery in ezdxf, allowing for more Python-like syntax when querying entities. It demonstrates how to chain conditions using overloaded operators.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/getting_data.rst#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n# The overloaded rational operators return an EntityQuery object and not a bool value!\nlines = msp.query(\"LINES\").layer == \"construction\"\nnot_dashed_lines = lines.linetype != \"DASHED\"\n```\n\n----------------------------------------\n\nTITLE: Adding a Block Reference (INSERT Entity) in ezdxf\nDESCRIPTION: This code shows how to add a block reference (INSERT entity) to the modelspace. The block reference inserts a previously defined block at the specified location.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/usage_for_beginners.rst#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nmsp.add_blockref(\"MyBlock\", (0, 0))\n```\n\n----------------------------------------\n\nTITLE: Creating Line Entity Using Direct Object Instantiation in Python\nDESCRIPTION: Advanced method showing direct instantiation of a Line entity class. Creates a virtual entity and adds it to the modelspace layout. This method bypasses validity checks and requires deep knowledge of ezdxf internals.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tasks/add_dxf_entities.rst#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nimport ezdxf\nfrom ezdxf.entities import Line\n\ndoc = ezdxf.new()\nmsp = doc.modelspace()\nline = Line.new(\n    dxfattribs={\n        \"start\": (0, 0, 0),\n        \"end\": (3, 0, 0),\n        \"color\": 2,\n    }\n)\nmsp.add_entity(line)\n```\n\n----------------------------------------\n\nTITLE: Creating a Circle entity in ezdxf\nDESCRIPTION: Creates a Circle entity with center at (10, 10) and radius of 3 units in the modelspace. The Circle entity is defined in the Object Coordinate System (OCS) with a center point and radius.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/dxf_primitives.rst#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ncircle = msp.add_circle((10, 10), radius=3, dxfattribs=attribs)\n```\n\n----------------------------------------\n\nTITLE: Iterating Over DXF Entities in Modelspace using Python\nDESCRIPTION: This code demonstrates how to iterate over all DXF entities in the modelspace of a document. It includes a helper function to print LINE entity details and shows two methods of iteration: using a for loop and using a query for specific entity types.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/getting_data.rst#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n# helper function\ndef print_entity(e):\n    print(\"LINE on layer: %s\\n\" % e.dxf.layer)\n    print(\"start point: %s\\n\" % e.dxf.start)\n    print(\"end point: %s\\n\" % e.dxf.end)\n\n# iterate over all entities in modelspace\nmsp = doc.modelspace()\nfor e in msp:\n    if e.dxftype() == \"LINE\":\n        print_entity(e)\n\n# entity query for all LINE entities in modelspace\nfor e in msp.query(\"LINE\"):\n    print_entity(e)\n```\n\n----------------------------------------\n\nTITLE: Setting Limits for Linear Dimensions in Python with ezdxf\nDESCRIPTION: This example demonstrates how to set limits for a linear dimension using ezdxf. It specifies upper and lower limits, text height factor, and decimal places, replacing the usual measurement text with the limit values.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/linear_dimension.rst#2025-04-23_snippet_24\n\nLANGUAGE: Python\nCODE:\n```\ndim = msp.add_linear_dim(base=(0, 3), p1=(3, 0), p2=(6.5, 0))\ndim.set_limits(upper=.1, lower=.15, hfactor=.4, dec=2)\ndim.render()\n```\n\n----------------------------------------\n\nTITLE: Rendering 3D Meshes as Polyface, Mesh, and 3DFACE Entities in ezdxf\nDESCRIPTION: This code snippet demonstrates how to create a 3D cube mesh and render it as different entity types in a DXF file using ezdxf. It shows rendering as MESH, POLYFACE, and 3DFACE entities with different colors.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/polyface.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport ezdxf\nfrom ezdxf import colors\nfrom ezdxf.gfxattribs import GfxAttribs\nfrom ezdxf.render import forms\n\ncube = forms.cube().scale_uniform(10).subdivide(2)\nred = GfxAttribs(color=colors.RED)\ngreen = GfxAttribs(color=colors.GREEN)\nblue = GfxAttribs(color=colors.BLUE)\n\ndoc = ezdxf.new()\nmsp = doc.modelspace()\n\n# render as MESH entity\ncube.render_mesh(msp, dxfattribs=red)\ncube.translate(20)\n\n# render as POLYFACE a.k.a. POLYLINE entity\ncube.render_polyface(msp, dxfattribs=green)\ncube.translate(20)\n\n# render as a bunch of 3DFACE entities\ncube.render_3dfaces(msp, dxfattribs=blue)\n\ndoc.saveas(\"meshes.dxf\")\n```\n\n----------------------------------------\n\nTITLE: Creating Hatches with Multiple Boundary Paths in Python using ezdxf\nDESCRIPTION: Demonstrates how to create hatches with multiple boundary paths (islands) using different hatch styles in ezdxf. The code shows the effects of various hatch_style settings on the resulting hatch pattern.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/hatch.rst#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nimport ezdxf\n\ndoc = ezdxf.new('R2010')\nmsp = doc.modelspace()\n\ndef add_rectangle(x: float, y: float, sx: float, sy: float):\n    return [\n        (x, y),\n        (x + sx, y),\n        (x + sx, y + sy),\n        (x, y + sy),\n    ]\n\ndef solid_hatch(paths, hatch_style=0):\n    hatch = msp.add_hatch(color=1, dxfattribs={'hatch_style': hatch_style})\n    boundary = hatch.paths.add_polyline_path(paths[0], is_closed=1)\n    for vertices in paths[1:]:\n        boundary.add_polyline_path(vertices, is_closed=1)\n\noutside = add_rectangle(0, 0, 20, 10)\nhole_1 = add_rectangle(1, 1, 18, 2)\nhole_2 = add_rectangle(1, 3, 18, 2)\nhole_3 = add_rectangle(1, 5, 18, 2)\n\nhatch = solid_hatch([outside])\n\nhatch = solid_hatch([outside, hole_1, hole_2])\n\nhatch = solid_hatch([outside, hole_1, hole_2, hole_3], hatch_style=0)\n\nhatch = solid_hatch([outside, hole_1, hole_2, hole_3], hatch_style=1)\n\ndoc.saveas(\"solid_hatch_islands.dxf\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Point entity in ezdxf\nDESCRIPTION: Creates a Point entity at coordinates (10, 10) in the modelspace. The Point entity marks a specific location in 3D space using the World Coordinate System (WCS).\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/dxf_primitives.rst#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\npoint = msp.add_point((10, 10), dxfattribs=attribs)\n```\n\n----------------------------------------\n\nTITLE: Creating DXF Drawing with Predefined Resources in Python\nDESCRIPTION: Shows how to create a DXF document with predefined resources like linetypes and text styles by using the setup parameter. The example demonstrates adding a line with a DASHED linetype.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/simple_drawings.rst#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport ezdxf\n\ndoc = ezdxf.new(\"R2010\", setup=True)\nmsp = doc.modelspace()\nmsp.add_line((0, 0), (10, 0), dxfattribs={\"linetype\": \"DASHED\"})\n```\n\n----------------------------------------\n\nTITLE: Creating a New DXF Document with Specific Version in ezdxf\nDESCRIPTION: This code shows how to create a new DXF document with a specific DXF version, such as R12. This is useful when you need compatibility with older CAD systems.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/usage_for_beginners.rst#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndoc = ezdxf.new(\"R12\")\n```\n\n----------------------------------------\n\nTITLE: Creating an Ellipse entity in ezdxf\nDESCRIPTION: Creates an Ellipse entity with center at (10, 10), major axis of (5, 0), ratio of 0.5, and spanning from 0 to π radians. The Ellipse is a WCS entity defined by center, major axis vector, ratio, and start/end parameters.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/dxf_primitives.rst#2025-04-23_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nellipse = msp.add_ellipse(\n    (10, 10), major_axis=(5, 0), ratio=0.5, start_param=0, end_param=math.pi, dxfattribs=attribs\n)\n```\n\n----------------------------------------\n\nTITLE: Setting RGB True Color in DXF Entity Using ezdxf\nDESCRIPTION: Demonstrates how to create a DXF document and set true color values for a line entity using RGB values. Shows the usage of the rgb property that accepts a tuple of red, green, and blue values in the range 0-255.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/concepts/true_color.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport ezdxf\n\ndoc = ezdxf.new()\nmsp = doc.modelspace()\nline = msp.add_line((0, 0), (10, 0))\nline.rgb = (255, 128, 32)\n```\n\n----------------------------------------\n\nTITLE: Exporting DXF Content to SVG in Python\nDESCRIPTION: This snippet demonstrates the basic steps to export DXF content to SVG format using the ezdxf.addons.drawing module. It creates a render context, configures the backend and frontend, draws the content, sets up the page layout, and generates the SVG output.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/image_export.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport ezdxf\nfrom ezdxf.addons.drawing import RenderContext, Frontend\nfrom ezdxf.addons.drawing.matplotlib import MatplotlibBackend\nfrom ezdxf.addons.drawing.svg import SVGBackend\nfrom ezdxf.math import Vector\nfrom pathlib import Path\n\n# 1. Create a new document.\ndoc = ezdxf.new()\nmsp = doc.modelspace()\n\n# 2. Add entities to the modelspace.\nfor i in range(10):\n    msp.add_circle(center=(0, 0), radius=i + 1)\n\n# 3. Create the render context.\nctx = RenderContext(doc)\n\n# 4. Create the SVG backend.\nbackend = SVGBackend()\n\n# 5. Create the frontend and configure some properties.\nfrontend = Frontend(ctx, backend)\n\n# 6. Draw the modelspace.\nfrontend.draw_layout(msp)\n\n# 7. Set the page size to A4 and center the content.\npage = backend.page(\"420mm\", \"297mm\", margins=(\"20mm\", \"20mm\"))\n\n# 8. Get the SVG rendering as string.\nsvg = backend.get_svg(page)\n```\n\n----------------------------------------\n\nTITLE: Modifying a SPLINE Entity from an Existing DXF File in Python\nDESCRIPTION: Demonstrates how to read a DXF file, retrieve a spline entity, and append a new fit point to it. This approach works with AutoCAD-generated files.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/spline.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndoc = ezdxf.readfile(\"AutoCAD_generated.dxf\")\n\nmsp = doc.modelspace()\nspline = msp.query(\"SPLINE\").first\n\n# fit_points, control_points, knots and weights are list-like objects:\nspline.fit_points.append((2250, 2500, 0))\n```\n\n----------------------------------------\n\nTITLE: Creating a New Document and Accessing Modelspace in ezdxf\nDESCRIPTION: A common idiom for creating a new DXF document and acquiring the modelspace using the ezdxf library. The modelspace contains the 'real' world representation of drawing subjects and is used to add new entities to the document.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/concepts/modelspace.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport ezdxf\n\ndoc = ezdxf.new()\nmsp = doc.modelspace()\n```\n\n----------------------------------------\n\nTITLE: Creating a Rational Spline with Weighted Control Points in Python\nDESCRIPTION: Creates a rational B-spline by assigning different weights to the control points. Weights adjust the influence of each control point on the curve shape. This example increases the influence of the first control point.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/spline.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nmsp.add_rational_spline(control_points, weights=[3, 1, 1, 1])\n```\n\n----------------------------------------\n\nTITLE: Creating Diameter Dimension with Text Inside\nDESCRIPTION: This snippet demonstrates how to create a diameter dimension with the text placed inside the circle. It uses the EZ_RADIUS_INSIDE dimension style which has settings optimized for interior text placement.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/diameter_dimension.rst#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ndim = msp.add_diameter_dim(\n    center=(0, 0),\n    radius=2.5,\n    angle=45,\n    dimstyle=\"EZ_RADIUS_INSIDE\"\n)\n```\n\n----------------------------------------\n\nTITLE: Calculating Bounding Boxes with Caching in Python using ezdxf\nDESCRIPTION: This snippet demonstrates how to use the ezdxf.bbox module to calculate bounding boxes for DXF entities with caching. It shows the usage of the Cache object and how to calculate extents for the entire modelspace and specific entity types.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/bbox.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom ezdxf import bbox\n\nmsp = doc.modelspace()\ncache = bbox.Cache()\n# get overall bounding box\nfirst_bbox = bbox.extents(msp, cache=cache)\n# bounding box of all LINE entities\nsecond_bbox = bbox.extend(msp.query(\"LINE\"), cache=cache)\n```\n\n----------------------------------------\n\nTITLE: Evaluating Wrapped Block References in ezdxf\nDESCRIPTION: This snippet demonstrates how to evaluate block references that are wrapped in anonymous blocks. It collects all anonymous block references, finds the 'FLAG' references within them, and extracts attribute values.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/blocks.rst#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n# Collect all anonymous block references starting with '*U'\nanonymous_block_refs = modelspace.query('INSERT[name ? \"^\\*U.+\"]')\n\n# Collect the references of the 'FLAG' block\nflag_refs = []\nfor block_ref in anonymous_block_refs:\n    # Get the block layout of the anonymous block\n    block = doc.blocks.get(block_ref.dxf.name)\n    # Find all block references to 'FLAG' in the anonymous block\n    flag_refs.extend(block.query('INSERT[name==\"FLAG\"]'))\n\n# Evaluation example: collect all flag names.\nflag_numbers = [\n    flag.get_attrib_text(\"NAME\")\n    for flag in flag_refs\n    if flag.has_attrib(\"NAME\")\n]\n\nprint(flag_numbers)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating transform module usage in ezdxf\nDESCRIPTION: This example shows how to use the transform module to rotate entities in the modelspace by 90 degrees. It demonstrates both the general transformation method using a rotation matrix and the simplified z_rotate function.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/transform.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport math\n\nimport ezdxf\nfrom ezdxf import transform\n\ndoc = ezdxf.readfile(\"my.dxf\")\nmsp = doc.modelspace()\n\nlog = transform.inplace(msp, m=transform.Matrix44.rotate_z(math.pi/2))\n\n# or more simple\nlog = transform.z_rotate(msp, math.pi/2)\n```\n\n----------------------------------------\n\nTITLE: Advanced Angular Dimension Placement with Calculated Relative Text Location in Python using ezdxf\nDESCRIPTION: This advanced example calculates the relative text location for angular dimensions. It creates multiple dimensions with different center angles, text alignments, and leader options. The user location vector is calculated based on the center angle.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/angular_dimension.rst#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport ezdxf\nfrom ezdxf.math import Vec3\n\ndoc = ezdxf.new(setup=True)\nmsp = doc.modelspace()\nfor dimtad, y, leader in [\n    [0, 0, False],\n    [0, 7, True],\n    [4, 14, True],\n]:\n    for x, center_angle in [\n        (0, 0), (7, 45), (14, 90), (21, 135), (26, 225), (29, 270)\n    ]:\n        dim = msp.add_angular_dim_cra(\n            center=(x, y),\n            radius=3.0,\n            distance=1.0,\n            start_angle=center_angle - 15.0,\n            end_angle=center_angle + 15.0,\n            override={\"dimtad\": dimtad},\n        )\n        # The user location is relative to the center of the dimension line:\n        usr_location = Vec3.from_deg_angle(angle=center_angle, length=2.0)\n        dim.set_location(usr_location, leader=leader, relative=True)\n        dim.render()\n```\n\n----------------------------------------\n\nTITLE: Creating a Rotated Linear Dimension in Python using ezdxf\nDESCRIPTION: This snippet shows how to create a rotated linear dimension with a -30 degree angle. It demonstrates using the 'angle' parameter to control the dimension line orientation.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/linear_dimension.rst#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n# assignment to dim is not necessary, if no additional processing happens\nmsp.add_linear_dim(base=(3, 2), p1=(0, 0), p2=(3, 0), angle=-30).render()\ndoc.saveas(\"dim_linear_rotated.dxf\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Cube Mesh by Directly Accessing Base Data Structures in Python\nDESCRIPTION: This snippet demonstrates how to create a cube mesh by directly defining vertices and faces, then adding it to the modelspace using ezdxf. It sets the subdivision levels and uses the edit_data() context manager to set the mesh data.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/mesh.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport ezdxf\n\n\n# 8 corner vertices\ncube_vertices = [\n    (0, 0, 0),\n    (1, 0, 0),\n    (1, 1, 0),\n    (0, 1, 0),\n    (0, 0, 1),\n    (1, 0, 1),\n    (1, 1, 1),\n    (0, 1, 1),\n]\n\n# 6 cube faces\ncube_faces = [\n    [0, 1, 2, 3],\n    [4, 5, 6, 7],\n    [0, 1, 5, 4],\n    [1, 2, 6, 5],\n    [3, 2, 6, 7],\n    [0, 3, 7, 4]\n]\n\n# MESH requires DXF R2000 or later\ndoc = ezdxf.new(\"R2000\")\nmsp = doc.modelspace()\nmesh = msp.add_mesh()\n# do not subdivide cube, 0 is the default value\nmesh.dxf.subdivision_levels = 0\nwith mesh.edit_data() as mesh_data:\n    mesh_data.vertices = cube_vertices\n    mesh_data.faces = cube_faces\n\ndoc.saveas(\"cube_mesh_1.dxf\")\n```\n\n----------------------------------------\n\nTITLE: Creating an Aligned Linear Dimension in Python using ezdxf\nDESCRIPTION: This example demonstrates creating an aligned linear dimension. The dimension line is parallel to the line defined by p1 and p2, with a specified distance from the base line.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/linear_dimension.rst#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nmsp.add_line((0, 2), (3, 0))\ndim = msp.add_aligned_dim(p1=(0, 2), p2=(3, 0), distance=1)\ndoc.saveas(\"dim_linear_aligned.dxf\")\n```\n\n----------------------------------------\n\nTITLE: Accessing Modelspace in a DXF Document\nDESCRIPTION: This code shows how to get the modelspace of a DXF document, which is the main drawing area representing the \"world\" workspace in CAD applications.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/usage_for_beginners.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nmsp = doc.modelspace()\n```\n\n----------------------------------------\n\nTITLE: Creating Hatch with Edge Path Boundary in Python using ezdxf\nDESCRIPTION: Shows how to create a hatch with a complex edge path boundary using various edge types (line, arc, ellipse, spline) in ezdxf. The code demonstrates the versatility of edge paths for defining intricate hatch boundaries.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/hatch.rst#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nimport ezdxf\nfrom ezdxf.math import Vec3\n\ndoc = ezdxf.new('R2010')\nmsp = doc.modelspace()\n\nhatch = msp.add_hatch(color=1)\n\nwith hatch.edit_boundary() as boundary:\n    edge_path = boundary.add_edge_path()\n    edge_path.add_line((0, 0), (10, 0))\n    edge_path.add_arc(\n        center=(10, 5),\n        radius=5,\n        start_angle=270,\n        end_angle=450,\n    )\n    edge_path.add_ellipse(\n        center=Vec3(5, 10),\n        major_axis=Vec3(2.5, 0),\n        ratio=0.4,\n        start_param=0,\n        end_param=ezdxf.math.tau,\n        ccw=True,\n    )\n    edge_path.add_spline(\n        control_points=[\n            (0, 10),\n            (1, 7),\n            (3, 5),\n            (0, 0)\n        ],\n        degree=3,\n    )\n\nhatch.set_pattern_fill(\n    \"ANSI31\",\n    color=3,\n    scale=0.5,\n    angle=45,\n)\n\ndoc.saveas(\"hatch_edge_path.dxf\")\n```\n\n----------------------------------------\n\nTITLE: Adding a Block Reference in ezdxf\nDESCRIPTION: This snippet demonstrates how to add a block reference to the modelspace. The code creates an INSERT entity that references a block definition with specified location, scaling factors, and rotation angle. Non-uniform scaling is supported by CAD applications, and the rotation angle is specified in degrees.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tasks/add_blockrefs.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nmy_block_ref = msp.add_blockref('BlockName', location, dxfattribs={\n    'xscale': 1.0,\n    'yscale': 1.0,\n    'zscale': 1.0,\n    'rotation': angle,\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Linetype Definitions in ezdxf\nDESCRIPTION: This snippet demonstrates how to create and add custom linetype definitions to an ezdxf document. It defines three dotted linetypes with different spacings and adds them to the document's linetypes collection.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/linetypes.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport ezdxf\nfrom ezdxf.tools.standards import linetypes  # some predefined linetypes\n\ndoc = ezdxf.new()\nmsp = doc.modelspace()\n\nmy_line_types = [\n    (\n        \"DOTTED\",\n        \"Dotted .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .\",\n        [0.2, 0.0, -0.2],\n    ),\n    (\n        \"DOTTEDX2\",\n        \"Dotted (2x) .    .    .    .    .    .    .    . \",\n        [0.4, 0.0, -0.4],\n    ),\n    (\n        \"DOTTED2\",\n        \"Dotted (.5) . . . . . . . . . . . . . . . . . . . \",\n        [0.1, 0.0, -0.1],\n    ),\n]\nfor name, desc, pattern in my_line_types:\n    if name not in doc.linetypes:\n        doc.linetypes.add(\n            name=name,\n            pattern=pattern,\n            description=desc,\n        )\n```\n\n----------------------------------------\n\nTITLE: Creating Diameter Dimension with Outside Horizontal Text\nDESCRIPTION: This example shows how to force horizontal text alignment when the text is placed outside the circle. It overrides the dimtoh parameter to 1 to enable horizontal text orientation outside.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/diameter_dimension.rst#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ndim = msp.add_diameter_dim(\n    center=(0, 0),\n    radius=2.5,\n    angle=45,\n    dimstyle=\"EZ_RADIUS\",\n    override={\"dimtoh\": 1}\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing 3D Bin Packing with ezdxf\nDESCRIPTION: A complete example showing how to use the ezdxf.addons.binpacking module to pack multiple items into different container types and export the result to a DXF file. The code demonstrates defining containers, creating items, packing with a specific strategy, and generating visualization.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/addons/binpacking.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List\nimport ezdxf\nfrom ezdxf import colors\nfrom ezdxf.addons import binpacking as bp\n\nSMALL_ENVELOPE = (\"small-envelope\", 11.5, 6.125, 0.25, 10)\nLARGE_ENVELOPE = (\"large-envelope\", 15.0, 12.0, 0.75, 15)\nSMALL_BOX = (\"small-box\", 8.625, 5.375, 1.625, 70.0)\nMEDIUM_BOX = (\"medium-box\", 11.0, 8.5, 5.5, 70.0)\nMEDIUM_BOX2 = (\"medium-box-2\", 13.625, 11.875, 3.375, 70.0)\nLARGE_BOX = (\"large-box\", 12.0, 12.0, 5.5, 70.0)\nLARGE_BOX2 = (\"large-box-2\", 23.6875, 11.75, 3.0, 70.0)\n\nALL_BINS = [\n    SMALL_ENVELOPE,\n    LARGE_ENVELOPE,\n    SMALL_BOX,\n    MEDIUM_BOX,\n    MEDIUM_BOX2,\n    LARGE_BOX,\n    LARGE_BOX2,\n]\n\n\ndef build_packer():\n    packer = bp.Packer()\n    packer.add_item(\"50g [powder 1]\", 3.9370, 1.9685, 1.9685, 1)\n    packer.add_item(\"50g [powder 2]\", 3.9370, 1.9685, 1.9685, 2)\n    packer.add_item(\"50g [powder 3]\", 3.9370, 1.9685, 1.9685, 3)\n    packer.add_item(\"250g [powder 4]\", 7.8740, 3.9370, 1.9685, 4)\n    packer.add_item(\"250g [powder 5]\", 7.8740, 3.9370, 1.9685, 5)\n    packer.add_item(\"250g [powder 6]\", 7.8740, 3.9370, 1.9685, 6)\n    packer.add_item(\"250g [powder 7]\", 7.8740, 3.9370, 1.9685, 7)\n    packer.add_item(\"250g [powder 8]\", 7.8740, 3.9370, 1.9685, 8)\n    packer.add_item(\"250g [powder 9]\", 7.8740, 3.9370, 1.9685, 9)\n    return packer\n\n\ndef make_doc():\n    doc = ezdxf.new()\n    doc.layers.add(\"FRAME\", color=colors.YELLOW)\n    doc.layers.add(\"ITEMS\")\n    doc.layers.add(\"TEXT\")\n    return doc\n\n\ndef main(filename):\n    bins: List[bp.Bin] = []\n    for box in ALL_BINS:\n        packer = build_packer()\n        packer.add_bin(*box)\n        packer.pack(bp.PickStrategy.BIGGER_FIRST)\n        bins.extend(packer.bins)\n    doc = make_doc()\n    bp.export_dxf(doc.modelspace(), bins, offset=(0, 20, 0))\n    doc.saveas(filename)\n\n\nif __name__ == \"__main__\":\n    main(\"py3dbp_example.dxf\")\n```\n\n----------------------------------------\n\nTITLE: Using MatplotlibBackend to Render DXF to Image\nDESCRIPTION: Full example of using MatplotlibBackend to safely load a DXF file, render it, and save it as a PNG image.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/addons/drawing.rst#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nimport sys\nimport matplotlib.pyplot as plt\nfrom ezdxf import recover\nfrom ezdxf.addons.drawing import RenderContext, Frontend\nfrom ezdxf.addons.drawing.matplotlib import MatplotlibBackend\n\n# Safe loading procedure (requires ezdxf v0.14):\ntry:\n    doc, auditor = recover.readfile('your.dxf')\nexcept IOError:\n    print(f'Not a DXF file or a generic I/O error.')\n    sys.exit(1)\nexcept ezdxf.DXFStructureError:\n    print(f'Invalid or corrupted DXF file.')\n    sys.exit(2)\n\n# The auditor.errors attribute stores severe errors,\n# which may raise exceptions when rendering.\nif not auditor.has_errors:\n    fig = plt.figure()\n    ax = fig.add_axes([0, 0, 1, 1])\n    ctx = RenderContext(doc)\n    out = MatplotlibBackend(ax)\n    Frontend(ctx, out).draw_layout(doc.modelspace(), finalize=True)\n    fig.savefig('your.png', dpi=300)\n```\n\n----------------------------------------\n\nTITLE: Using XRecord Objects with ezdxf\nDESCRIPTION: This snippet demonstrates how to use XRecord objects to store complex custom data in DXF entities. It shows the process of creating an XRecord, adding data, and retrieving it from an entity's extension dictionary.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/custom_data.rst#2025-04-23_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nfrom ezdxf.lldxf.types import dxftag\n\nline = doc.modelspace().add_line((0, 0), (10, 10))\nxdict = line.new_extension_dict()\nxrecord = doc.objects.add_xrecord()\nxrecord.tags = [\n    dxftag(1, 'text1'),\n    dxftag(40, 3.141592),\n    dxftag(90, 256),\n    dxftag(10, (1, 2, 0)),\n    dxftag(330, line.dxf.handle),\n]\nxdict['MYAPP'] = xrecord\n\n# get data back\nxrecord = xdict['MYAPP']\nfor tag in xrecord.tags:\n    print(tag)\n```\n\n----------------------------------------\n\nTITLE: Creating and Aligning TEXT Entities in DXF with ezdxf\nDESCRIPTION: Example demonstrating how to create a simple TEXT entity in a DXF file, set text alignment using the set_placement method, and utilize predefined text styles. The code creates a new DXF document, adds texts with different alignments and styles, and saves the result to a file.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/text.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport ezdxf\nfrom ezdxf.enums import TextEntityAlignment\n\n# The TEXT entity is a DXF primitive and is supported in all DXF versions.\n# The argument setup=True creates standard linetypes and text styles in the\n# new DXF document.\ndoc = ezdxf.new(\"R12\", setup=True)\nmsp = doc.modelspace()\n\n# Use method set_placement() to define the TEXT alignment, because the\n# relations between the DXF attributes 'halign', 'valign', 'insert' and\n# 'align_point' are tricky.\nmsp.add_text(\"A Simple Text\").set_placement(\n    (2, 3),\n    align=TextEntityAlignment.MIDDLE_RIGHT\n)\n\n# Using a predefined text style:\nmsp.add_text(\n    \"Text Style Example: Liberation Serif\",\n    height=0.35,\n    dxfattribs={\"style\": \"LiberationSerif\"}\n).set_placement((2, 6), align=TextEntityAlignment.LEFT)\n\ndoc.saveas(\"simple_text.dxf\")\n```\n\n----------------------------------------\n\nTITLE: Creating an Open Spline from Control Points in Python\nDESCRIPTION: Creates an open (clamped) B-spline directly from control points. A clamped spline starts at the first control point and ends at the last control point. If no knot values are provided, an open uniform knot vector is generated.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/spline.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ncontrol_points = [(0, 0, 0), (1250, 1560, 0), (3130, 610, 0), (2250, 1250, 0)]\nmsp.add_open_spline(control_points)\n```\n\n----------------------------------------\n\nTITLE: Creating Solid Hatch with Polyline Path and Bulge in Python using ezdxf\nDESCRIPTION: Shows how to create a solid hatch with a polyline boundary path that includes bulge values for curved segments in ezdxf. The code creates a hatch entity with a more complex boundary shape.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/hatch.rst#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport ezdxf\n\ndoc = ezdxf.new('R2010')\nmsp = doc.modelspace()\n\nhatch = msp.add_hatch(color=1)\nwith hatch.edit_boundary() as boundary:\n    polyline_path = boundary.add_polyline_path([\n        (0, 0, 0),\n        (10, 0, 0.5),\n        (10, 10, 0),\n        (0, 10, -0.5)\n    ])\n\ndoc.saveas(\"solid_hatch_polyline_path_with_bulge.dxf\")\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Text Linetype Pattern in ezdxf\nDESCRIPTION: This example shows how to create a complex linetype with embedded text. It requires DXF R13 or later and uses a pattern string similar to AutoCAD .lin files to define a gas line with the word 'GAS' repeated along it.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/linetypes.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndoc = ezdxf.new(\"R2018\")  # DXF R13 or later is required\n\ndoc.linetypes.add(\n    name=\"GASLEITUNG2\",\n    # linetype definition string from acad.lin:\n    pattern='A,.5,-.2,[\"GAS\",STANDARD,S=.1,U=0.0,X=-0.1,Y=-.05],-.25',\n    description= \"Gasleitung2 ----GAS----GAS----GAS----GAS----GAS----\",\n    length=1,  # required for complex line types\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Block Attributes from INSERT Entities in Python using ezdxf\nDESCRIPTION: Demonstrates how to get a specific block attribute by tag name from an INSERT entity. Returns None if the attribute doesn't exist.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tasks/get_entity_content.rst#2025-04-23_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\ndiameter = insert.get_attrib('diameter')\nif diameter is not None:\n    print(f\"diameter = {diameter.dxf.text}\")\n```\n\n----------------------------------------\n\nTITLE: Loading a DXF File with Error Handling in Python\nDESCRIPTION: This snippet demonstrates how to safely load a DXF file with proper error handling. It catches IOError for file access issues and DXFStructureError for invalid or corrupted files. The code returns the document and modelspace objects for further processing.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/howto/document.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nimport ezdxf\n\ntry:\n    doc = ezdxf.readfile(\"your_dxf_file.dxf\")\nexcept IOError:\n    print(f\"Not a DXF file or a generic I/O error.\")\n    sys.exit(1)\nexcept ezdxf.DXFStructureError:\n    print(f\"Invalid or corrupted DXF file.\")\n    sys.exit(2)\nmsp = doc.modelspace()\n```\n\n----------------------------------------\n\nTITLE: Creating Associative Hatch in Python using ezdxf\nDESCRIPTION: Demonstrates how to create an associative hatch linked to a base geometry (LWPOLYLINE) in ezdxf. The code creates a hatch that is associated with an LWPOLYLINE entity, which can be useful for CAD applications.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/hatch.rst#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nimport ezdxf\n\ndoc = ezdxf.new('R2010')\nmsp = doc.modelspace()\n\npoints = [(0, 0), (10, 0), (10, 10), (0, 10)]\n# create the polyline\npolyline = msp.add_lwpolyline(points, dxfattribs={'color': 1})\npolyline.close()\n\n# create the hatch\nhatch = msp.add_hatch(color=3)\n\n# add an associative boundary path\nwith hatch.edit_boundary() as boundary:\n    # pass directly the DXF entity\n    boundary.add_polyline_path(polyline)\n\ndoc.saveas(\"assoc_hatch.dxf\")\n```\n\n----------------------------------------\n\nTITLE: Grouping Entities by Attributes using groupby in Python with ezdxf\nDESCRIPTION: This code demonstrates how to use the groupby function to organize entities based on their attributes. It includes examples of grouping by a single attribute (layer) and a custom key function for more complex grouping criteria.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/getting_data.rst#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nfrom ezdxf.groupby import groupby\ngroup = groupby(entities=msp, dxfattrib=\"layer\")\n\ngroup = msp.groupby(dxfattrib=\"layer\")\n\nfor layer, entities in group.items():\n    print(f'Layer \"{layer}\" contains following entities:')\n    for entity in entities:\n        print(f\"    {entity}\")\n    print(\"-\"*40)\n\ndef layer_and_color_key(entity):\n    # return None to exclude entities from the result container\n    if entity.dxf.layer == \"0\":  # exclude entities from default layer \"0\"\n        return None\n    else:\n        return entity.dxf.layer, entity.dxf.color\n\ngroup = msp.groupby(key=layer_and_color_key)\nfor key, entities in group.items():\n    print(f'Grouping criteria \"{key}\" matches following entities:')\n    for entity in entities:\n        print(f\"    {entity}\")\n    print(\"-\"*40)\n```\n\n----------------------------------------\n\nTITLE: Creating Edges from DXF Entities and Finding Chains\nDESCRIPTION: This snippet demonstrates creating edges from DXF entities, finding connected chains, and creating a new LWPOLYLINE from the result.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/edges.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport random\nimport ezdxf\nfrom ezdxf import edgeminer, edgesmith\n\ndoc = ezdxf.new()\ndoc.header[\"$LWDISPLAY\"] = 1\nmsp = doc.modelspace()\n\nlwp = msp.add_lwpolyline(\n    [(0, 0), (5, 0, -0.5), (5, 5), (0, 5)],\n    format=\"xyb\",\n    close=True,\n    dxfattribs={\"layer\": \"SOURCE\", \"color\": 2, \"lineweight\": 30},\n)\n# create lines and arcs from LWPOLYLINE\nentities = lwp.explode()\n\n# 1. create edges from DXF entities\nedges = list(edgesmith.edges_from_entities_2d(entities))\n# 2. search for connected edges\nchain = edgeminer.find_sequential_chain(edges)\n# 3. create a LWPOLYLINE from connected edges\nlwp2 = edgesmith.lwpolyline_from_chain(\n    chain, dxfattribs={\"layer\": \"LWPOLYLINE\", \"color\": 1, \"lineweight\": 30}\n)\nmsp.add_entity(lwp2)\ndoc.saveas(\"result1.dxf\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Page Setup in Paperspace with ezdxf\nDESCRIPTION: This method sets up a paper layout with specific size, margins, units, and other configuration parameters for printing or exporting.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/layouts/layouts.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npage_setup(size=(297, 210), margins=(10, 15, 10, 15), units='mm', offset=(0, 0), rotation=0, scale=16, name='ezdxf', device='DWG to PDF.pc3')\n```\n\n----------------------------------------\n\nTITLE: Creating a Layer Definition in ezdxf\nDESCRIPTION: Demonstrates how to create a new layer definition with custom color and linetype. This snippet initializes a new DXF document with required line types, accesses the modelspace, and adds a layer named 'MyLines' with color 7 and DASHED linetype.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/layers.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport ezdxf\n\ndoc = ezdxf.new(setup=True)  # setup required line types\nmsp = doc.modelspace()\ndoc.layers.add(name=\"MyLines\", color=7, linetype=\"DASHED\")\n```\n\n----------------------------------------\n\nTITLE: Setting Arrow Style for Linear Dimensions in Python with ezdxf\nDESCRIPTION: This example demonstrates how to set a specific arrow style for a linear dimension using ezdxf. It uses the set_arrow method to specify the arrow block and size.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/linear_dimension.rst#2025-04-23_snippet_20\n\nLANGUAGE: Python\nCODE:\n```\ndim = msp.add_linear_dim(base=(3, 2), p1=(3, 0), p2=(6, 0))\ndim.set_arrow(blk=\"OPEN_30\", size=0.25)\ndim.render()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Entities by Query Language in Python using ezdxf\nDESCRIPTION: This code demonstrates how to use ezdxf's query language to retrieve specific entities from a layout. It shows examples of querying for entity types, attributes, and combining multiple conditions.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/getting_data.rst#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nmsp = doc.modelspace()\nlines = msp.query(\"LINE\")\n\nconstruction_lines = lines.query('*[layer==\"construction\"]')\n\nlines = msp.query('LINE[layer==\"construction\"]')\n\nnot_dashed_entities = msp.query('*[layer==\"construction\" and linetype!=\"DASHED\"]')\n```\n\n----------------------------------------\n\nTITLE: Overriding Measurement Text for Linear Dimension in Python using ezdxf\nDESCRIPTION: This snippet shows how to override the measurement text of a linear dimension with custom text using ezdxf. It creates a dimension with a specified base and measurement points, and sets a custom text string.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/linear_dimension.rst#2025-04-23_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nmsp.add_linear_dim(base=(3, 2), p1=(3, 0), p2=(6, 0), text=\">1m\").render()\n```\n\n----------------------------------------\n\nTITLE: Creating Arc Dimension from ConstructionArc in Python with ezdxf\nDESCRIPTION: Creates an arc dimension from a ConstructionArc object, which can be derived from an existing ARC entity. This method demonstrates adding a dimension to an existing arc with a specified distance from the arc.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/arc_dimension.rst#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nimport ezdxf\n\ndoc = ezdxf.new(setup=True)\nmsp = doc.modelspace()\n\narc = msp.add_arc(\n    center=(0, 0),\n    radius=5,\n    start_angle = 60,\n    end_angle = 120,\n)\nmsp.add_arc_dim_arc(\n    arc.construction_tool(),\n    distance=2,\n).render()\n```\n\n----------------------------------------\n\nTITLE: Transforming Coordinates to DXF WCS and Adding to Document\nDESCRIPTION: Transforms GPS track data to DXF World Coordinate System (WCS) and adds it to the document. Handles both cases with and without geo location reference in the DXF file.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/geo.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nif doc.has_geodata:\n    # Transform data from World Mercator (EPSG:3395) into the DXF WCS\n    m = doc.geodata.get_crs_transformation()\n    track.transform(m)\n    # Create a LWPOLYLINE in modelspace\n    msp = doc.modelspace()\n    msp.add_lwpolyline(track.points_as_array())\nelse:\n    # If the DXF file has no GEODATA, you have to use the absolute\n    # coordinates in meters.\n    # Use your own transformation function from EPSG:3395 into\n    # your desired CRS system or stick with the absolute coordinates.\n    # Create a LWPOLYLINE in modelspace\n    msp = doc.modelspace()\n    msp.add_lwpolyline(track.points_as_array())\n```\n\n----------------------------------------\n\nTITLE: Creating Solid Hatch with Ellipse Edge Path in Python using ezdxf\nDESCRIPTION: Illustrates how to create a solid hatch with an elliptical boundary using an edge path in ezdxf. The code demonstrates the flexibility of edge paths for defining complex hatch boundaries.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/hatch.rst#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nimport ezdxf\nfrom ezdxf.math import Vec3\n\ndoc = ezdxf.new('R2010')\nmsp = doc.modelspace()\n\nhatch = msp.add_hatch(color=1)\nwith hatch.edit_boundary() as boundary:\n    edge_path = boundary.add_edge_path()\n    edge_path.add_ellipse(\n        center=Vec3(0, 0),\n        major_axis=Vec3(5, 0),\n        ratio=0.5,\n        start_param=0,\n        end_param=ezdxf.math.tau,\n    )\n\ndoc.saveas(\"solid_hatch_ellipse.dxf\")\n```\n\n----------------------------------------\n\nTITLE: Adding Polyline Leader to MULTILEADER in Python using ezdxf\nDESCRIPTION: This code demonstrates how to add a polyline leader to a MULTILEADER entity. The leader line is defined by a series of vertices in render UCS coordinates.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/mleader.rst#2025-04-23_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nml_builder.add_leader_line(\n    mleader.ConnectionSide.left,\n    [Vec2(-20, 15), Vec2(-10, 15), Vec2(-15, 11), Vec2(-10, 7)],\n)\n```\n\n----------------------------------------\n\nTITLE: Adding XDATA to DXF Entities in Python\nDESCRIPTION: This snippet demonstrates how to add extended data (XDATA) to DXF entities using ezdxf, including creating an APP ID entry and setting XDATA as a list of tuples.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/howto/content.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndoc.appids.new('YOUR_APPID')  # IMPORTANT: create an APP ID entry\n\ncircle = msp.add_circle((10, 10), 100)\ncircle.set_xdata(\n    'YOUR_APPID',\n    [\n        (1000, 'your_web_link.org'),\n        (1002, '{'),\n        (1000, 'some text'),\n        (1002, '{'),\n        (1071, 1),\n        (1002, '}'),\n        (1002, '}')\n    ])\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing DXF Underlays with ezdxf\nDESCRIPTION: Demonstrates how to create underlay definitions and add underlay references to a DXF drawing using ezdxf. Shows creation of PDF underlay definitions, adding multiple underlay instances with different positions and transformations, and querying existing underlay definitions. Requires DXF R2000 format or later.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/underlay.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport ezdxf\n\n\ndoc = ezdxf.new('AC1015')  # underlay requires the DXF R2000 format or later\nmy_underlay_def = doc.add_underlay_def(filename='my_underlay.pdf', name='1')\n# The (PDF)DEFINITION entity is like a block definition, it just defines the underlay\n# 'name' is misleading, because it defines the page/sheet to be displayed\n# PDF: name is the page number to display\n# DGN: name='default' ???\n# DWF: ????\n\nmsp = doc.modelspace()\n# add first underlay\nmsp.add_underlay(my_underlay_def, insert=(2, 1, 0), scale=0.05)\n# The (PDF)UNDERLAY entity is like the INSERT entity, it creates an underlay reference,\n# and there can be multiple references to the same underlay in a drawing.\n\nmsp.add_underlay(my_underlay_def, insert=(4, 5, 0), scale=.5, rotation=30)\n\n# get existing underlay definitions, Important: UNDERLAYDEFs resides in the objects section\npdf_defs = doc.objects.query('PDFDEFINITION')  # get all pdf underlay defs in drawing\n\ndoc.saveas(\"dxf_with_underlay.dxf\")\n```\n\n----------------------------------------\n\nTITLE: Setting Different Upper and Lower Tolerances for Linear Dimensions in Python with ezdxf\nDESCRIPTION: This code snippet shows how to set different upper and lower tolerance values for a linear dimension using ezdxf. It specifies separate values for upper and lower tolerances, along with text height factor, alignment, and decimal places.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/linear_dimension.rst#2025-04-23_snippet_23\n\nLANGUAGE: Python\nCODE:\n```\ndim = msp.add_linear_dim(base=(0, 3), p1=(3, 0), p2=(6.5, 0))\ndim.set_tolerance(upper=.1, lower=.15, hfactor=.4, align=\"middle\", dec=2)\ndim.render()\n```\n\n----------------------------------------\n\nTITLE: Merging Multiple DXF Files in Python with ezdxf\nDESCRIPTION: Code to merge multiple DXF files into a single document. This example creates three source documents with different content and then loads their modelspace content into a target document.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/xref_module.rst#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nimport ezdxf\nfrom ezdxf import xref\n\n# Create three source documents:\nfor i in range(1, 4):\n    doc = ezdxf.new(\"R2010\")\n    msp = doc.modelspace()\n    if i == 1:\n        msp.add_circle((0, 0), radius=1.0)\n    elif i == 2:\n        msp.add_line((-10, 0), (10, 0))\n    else:  # i == 3\n        msp.add_line((0, -10), (0, 10))\n    doc.saveas(f\"source_{i}.dxf\")\n\n# Load all three documents into a target document:\ntarget = ezdxf.new(\"R2010\")\nfor i in range(1, 4):\n    filename = f\"source_{i}.dxf\"\n    try:\n        xref.load_modelspace(target, filename=filename)\n    except OSError as e:\n        print(f\"Can't load {filename}: {str(e)}\")\ntarget.saveas(\"merged.dxf\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Arbitrary Axis Algorithm in Python\nDESCRIPTION: This code snippet demonstrates how to calculate the arbitrary x-axis and y-axis given a normal (extrusion) vector Az using the Arbitrary Axis Algorithm. It uses vector cross products to determine the coordinate system axes.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/concepts/ocs.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nAz = Vec3(entity.dxf.extrusion).normalize()  # normal (extrusion) vector\nif (abs(Az.x) < 1/64.) and (abs(Az.y) < 1/64.):\n     Ax = Vec3(0, 1, 0).cross(Az).normalize()  # the cross-product operator\nelse:\n     Ax = Vec3(0, 0, 1).cross(Az).normalize()  # the cross-product operator\nAy = Az.cross(Ax).normalize()\n```\n\n----------------------------------------\n\nTITLE: Basic CSG Operations with Cube and Cylinder in ezdxf\nDESCRIPTION: Example demonstrating the three basic CSG operations (union, difference, and intersection) between a cube and a cylinder. The result is rendered to DXF modelspace with different colors.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/addons/pycsg.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport ezdxf\nfrom ezdxf.render.forms import cube, cylinder_2p\nfrom ezdxf.addons.pycsg import CSG\n\n# create new DXF document\ndoc = ezdxf.new()\nmsp = doc.modelspace()\n\n# create same geometric primitives as MeshTransformer() objects\ncube1 = cube()\ncylinder1 = cylinder_2p(count=32, base_center=(0, -1, 0), top_center=(0, 1, 0), radius=.25)\n\n# build solid union\nunion = CSG(cube1) + CSG(cylinder1)\n# convert to mesh and render mesh to modelspace\nunion.mesh().render_mesh(msp, dxfattribs={'color': 1})\n\n# build solid difference\ndifference = CSG(cube1) - CSG(cylinder1)\n# convert to mesh, translate mesh and render mesh to modelspace\ndifference.mesh().translate(1.5).render_mesh(msp, dxfattribs={'color': 3})\n\n# build solid intersection\nintersection = CSG(cube1) * CSG(cylinder1)\n# convert to mesh, translate mesh and render mesh to modelspace\nintersection.mesh().translate(2.75).render_mesh(msp, dxfattribs={'color': 5})\n\ndoc.saveas('csg.dxf')\n```\n\n----------------------------------------\n\nTITLE: Creating Radius Dimension with Horizontal Text Inside Circle\nDESCRIPTION: Example demonstrating how to create a radius dimension with horizontal text inside the circle by using the EZ_RADIUS_INSIDE style and setting the dimtih parameter to 1.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/radius_dimension.rst#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\ndim = msp.add_radius_dim(\n    center=(0, 0),\n    radius=2.5,\n    angle=45,\n    dimstyle=\"EZ_RADIUS_INSIDE\",\n    override={\"dimtih\": 1}\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing MTextEditor in Python with ezdxf\nDESCRIPTION: Sets up an MTextEditor object and creates an MText entity from its content.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/mtext.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport ezdxf\nfrom ezdxf.tools.text import MTextEditor\n\ndoc = ezdxf.new(\"R2007\", setup=True)\nmsp = doc.modelspace()\n\nlorem_ipsum = \"\"\"\nLorem ipsum dolor sit amet, consectetur adipiscing elit, ... see prolog code\n\"\"\"\n\n# create a new editor object with an initial text:\neditor = MTextEditor(lorem_ipsum)\n\n# get the MTEXT content string from the editor by the str() function:\nmtext = msp.add_mtext(str(editor), dxfattribs={\"style\": \"OpenSans\"})\n```\n\n----------------------------------------\n\nTITLE: Creating Line Entity Using Factory Function in Python\nDESCRIPTION: Alternative approach using the factory function to create a DXF line entity. Demonstrates creating a virtual entity first and then adding it to the modelspace layout.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tasks/add_dxf_entities.rst#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport ezdxf\nfrom ezdxf.entities import factory\n\ndoc = ezdxf.new()\nmsp = doc.modelspace()\nline = factory.new(\n    \"LINE\",\n    dxfattribs={\n        \"start\": (0, 0, 0),\n        \"end\": (3, 0, 0),\n        \"color\": 2,\n    },\n)\nmsp.add_entity(line)\n```\n\n----------------------------------------\n\nTITLE: Finding All Loops in DXF Elements\nDESCRIPTION: Identifies all possible loops in DXF line entities using a recursive backtracking algorithm. Each loop is assigned a unique color and layer.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/edges.rst#2025-04-23_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nloops = edgeminer.find_all_loops(deposit)\n\n# create a new output document\nout = ezdxf.new()\nmsp = out.modelspace()\ncolor = 1\nfor loop in loops:\n    layer = f\"LOOP_{color}\"\n    polyline = edgesmith.lwpolyline_from_chain(\n        loop, dxfattribs={\"color\": color, \"layer\": layer}\n    )\n    msp.add_entity(polyline)\n    color += 1\nout.saveas(\"loops.dxf\")\n```\n\n----------------------------------------\n\nTITLE: Accessing DXF Attributes in Python\nDESCRIPTION: Demonstrates how to set, get, and delete DXF attributes using the dxf namespace of a DXFEntity object. This snippet shows the basic operations for manipulating entity properties.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfentities/dxfentity.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# set attribute value\nentity.dxf.layer = 'MyLayer'\n\n# get attribute value\nlinetype = entity.dxf.linetype\n\n# delete attribute\ndel entity.dxf.linetype\n```\n\n----------------------------------------\n\nTITLE: Examining Entities of Block References in ezdxf\nDESCRIPTION: This snippet demonstrates how to examine the entities within a block reference without actually exploding it. It uses the virtual_entities method to iterate over the constituent entities and inspect their properties.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/blocks.rst#2025-04-23_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nfor flag_ref in msp.query('INSERT[name==\"FLAG\"]'):\n    for entity in flag_ref.virtual_entities():\n        if entity.dxftype() == \"LWPOLYLINE\":\n            print(f\"Found {str(entity)}.\")\n```\n\n----------------------------------------\n\nTITLE: Creating Diameter Dimension with User-Defined Location Outside\nDESCRIPTION: This snippet shows how to place the dimension text at a user-defined location outside the circle. The location parameter determines both the text position and the angle of the dimension line.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/diameter_dimension.rst#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\ndim = msp.add_diameter_dim(\n    center=(0, 0),\n    radius=2.5,\n    location=(4, 4),\n    dimstyle=\"EZ_RADIUS\"\n)\n```\n\n----------------------------------------\n\nTITLE: Using Attribute Definitions in ezdxf\nDESCRIPTION: This snippet demonstrates how to create attribute definitions for a block, add them to the block definition, and then use these definitions when creating block references. It creates a numbered flag block with attributes for the flag number and country.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/blocks.rst#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nflag_number = doc.blocks.new(name='FLAG2')\n\nflag_number.add_lwpolyline([(0, 0), (0, 5), (4, 3), (0, 3)])\nflag_number.add_circle((0, 0), .4)\n\nflag_number.add_attdef('NAME', (0.5, -0.5), {'height': 0.5, 'style': 'OpenSansCondensed-Light'})\nflag_number.add_attdef('COUNTRY', (0.5, -1.0), {'height': 0.25, 'style': 'OpenSansCondensed-Light'})\n\ndef add_numbered_flag(number, coords, country):\n    values = {\n        'NAME': f'#{number}',\n        'COUNTRY': country\n    }\n    msp.add_auto_blockref('FLAG2', coords, values, dxfattribs={\n        'xscale': 2,\n        'yscale': 2,\n        'layer': 'NUMBERED_FLAGS'\n    })\n\nadd_numbered_flag(1, (10, -10), 'Germany')\nadd_numbered_flag(2, (20, -10), 'Norway')\nadd_numbered_flag(3, (30, -10), 'Finland')\n```\n\n----------------------------------------\n\nTITLE: Creating Spline Leader for MULTILEADER in Python using ezdxf\nDESCRIPTION: This snippet shows how to create a spline leader for a MULTILEADER entity. The leader type is set to splines, and the leader line is defined by control points.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/mleader.rst#2025-04-23_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nml_builder.set_leader_properties(leader_type=mleader.LeaderType.splines)\nml_builder.add_leader_line(\n    mleader.ConnectionSide.left,\n    [Vec2(-20, 15), Vec2(-10, 15), Vec2(-15, 11), Vec2(-10, 7)],\n)\n```\n\n----------------------------------------\n\nTITLE: Customizing Dimension Line Properties in Python using ezdxf\nDESCRIPTION: This code illustrates how to customize dimension line properties such as color, extension, linetype, and lineweight using ezdxf. It creates a linear dimension with specified properties using the override parameter.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/linear_dimension.rst#2025-04-23_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nmsp.add_linear_dim(\n    base=(3, 2),\n    p1=(3, 0),\n    p2=(6, 0),\n    override={\n        \"dimclrd\": 1,  # red\n        \"dimdle\": 0.25,\n        \"dimltype\": \"DASHED2\",\n        \"dimlwd\": 35,  # 0.35mm line weight\n    }\n).render()\n```\n\n----------------------------------------\n\nTITLE: Inspecting Polyface Entities Using MeshBuilder in ezdxf\nDESCRIPTION: This code snippet shows how to inspect Polyface entities in a DXF file using the MeshBuilder class from ezdxf. It demonstrates how to access vertices and faces of a mesh, which is useful for processing or analyzing 3D mesh data.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/polyface.rst#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport ezdxf\nfrom ezdxf.render import MeshBuilder\n\ndef process(mesh):\n    # vertices is a sequence of 3D points\n    vertices = mses.vertices\n    # a face is a sequence of indices into the vertices sequence\n    faces = mesh.faces\n    ...\n\ndoc = ezdxf.readfile(\"meshes.dxf\")\nmsp = doc.modelspace()\nfor polyline in msp.query(\"POLYLINE\"):\n    if polyline.is_poly_face_mesh:\n        mesh = MeshBuilder.from_polyface(polyline)\n        process(mesh)\n```\n\n----------------------------------------\n\nTITLE: Suppressing Extension Lines for Linear Dimensions in Python with ezdxf\nDESCRIPTION: This code example shows how to suppress one or both extension lines in a linear dimension using ezdxf. It sets dimse1 and dimse2 attributes to 1 to suppress the respective extension lines, and also demonstrates changing the arrow style.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/linear_dimension.rst#2025-04-23_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\nmsp.add_linear_dim(\n    base=(3, 2),\n    p1=(3, 0),\n    p2=(6, 0),\n    override={\n        \"dimse1\": 1,  # suppress first extension line\n        \"dimse2\": 1,  # suppress second extension line\n        \"dimblk\": ezdxf.ARROWS.closed_filled,  # arrows just looks better\n    }\n).render()\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple LWPOLYLINE in Python with ezdxf\nDESCRIPTION: Creates a basic LWPOLYLINE with four points in the model space of a DXF R2000 document. The polyline is defined by a list of 2D coordinates and saved to a DXF file.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/lwpolyline.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport ezdxf\n\ndoc = ezdxf.new(\"R2000\")\nmsp = doc.modelspace()\n\npoints = [(0, 0), (3, 0), (6, 3), (6, 6)]\nmsp.add_lwpolyline(points)\n\ndoc.saveas(\"lwpolyline1.dxf\")\n```\n\n----------------------------------------\n\nTITLE: Advanced DXF Recovery with Fallback\nDESCRIPTION: Shows a two-step approach that first attempts fast loading and falls back to recovery mode if needed.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/drawing/recover.rst#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ntry:  # Fast path:\n    doc = ezdxf.readfile(name)\nexcept IOError:\n    print(f'Not a DXF file or a generic I/O error.')\n    sys.exit(1)\n# Catch all DXF errors:\nexcept ezdxf.DXFError:\n    try:  # Slow path including fixing low level structures:\n        doc, auditor = recover.readfile(name)\n    except ezdxf.DXFStructureError:\n        print(f'Invalid or corrupted DXF file: {name}.')\n        sys.exit(2)\n\n    # DXF file can still have unrecoverable errors, but this is maybe\n    # just a problem when saving the recovered DXF file.\n    if auditor.has_errors:\n        print(f'Found unrecoverable errors in DXF file: {name}.')\n        auditor.print_error_report()\n```\n\n----------------------------------------\n\nTITLE: Loading DXF Documents with Structural Flaws in Python\nDESCRIPTION: Example of using the new ezdxf.recover module to load DXF documents with structural issues. This code demonstrates setting a custom unicode decoding error handler.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport ezdxf\n\n# Load a problematic DXF file using the recover module\ndoc = ezdxf.recover.readfile(\n    'problematic.dxf',\n    errors='surrogateescape'  # Use surrogateescape error handler\n)\n```\n\n----------------------------------------\n\nTITLE: Creating and Rendering 3D Meshes with MeshBuilder in Python\nDESCRIPTION: This snippet demonstrates the use of MeshBuilder to create a cube, scale it, subdivide it, and render it as different entity types (MESH, POLYFACE, and 3DFACE) with different colors. It showcases the flexibility of the MeshBuilder class in ezdxf.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/mesh.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport ezdxf\nfrom ezdxf import colors\nfrom ezdxf.gfxattribs import GfxAttribs\nfrom ezdxf.render import forms\n\ncube = forms.cube().scale_uniform(10).subdivide(2)\nred = GfxAttribs(color=colors.RED)\ngreen = GfxAttribs(color=colors.GREEN)\nblue = GfxAttribs(color=colors.BLUE)\n\ndoc = ezdxf.new()\nmsp = doc.modelspace()\n\n# render as MESH entity\ncube.render_mesh(msp, dxfattribs=red)\ncube.translate(20)\n\n# render as POLYFACE a.k.a. POLYLINE entity\ncube.render_polyface(msp, dxfattribs=green)\ncube.translate(20)\n\n# render as a bunch of 3DFACE entities\ncube.render_3dfaces(msp, dxfattribs=blue)\n\ndoc.saveas(\"meshes.dxf\")\n```\n\n----------------------------------------\n\nTITLE: Creating a DXF Document with Standard Linetypes in ezdxf\nDESCRIPTION: This snippet demonstrates how to create a new DXF document with standard linetypes pre-loaded. The 'setup=True' parameter ensures that common linetypes like CONTINUOUS, HIDDEN, CENTER, etc. are automatically created in the document.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/concepts/linetypes.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ndoc = ezdxf.new('R2007', setup=True)\n```\n\n----------------------------------------\n\nTITLE: Setting Extension Line Properties for Linear Dimensions in Python with ezdxf\nDESCRIPTION: This snippet demonstrates how to set various properties for extension lines in a linear dimension using ezdxf. It shows how to set color, lineweight, extension, offset, and linetype for both extension lines.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/linear_dimension.rst#2025-04-23_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\ndim = msp.add_linear_dim(base=(3, 2), p1=(3, 0), p2=(6, 0))\ndim.set_extline_format(color=1, lineweight=35, extension=0.3, offset=0.1)\ndim.set_extline1(linetype=\"DASHED2\")\ndim.set_extline2(linetype=\"CENTER2\")\ndim.render()\n```\n\n----------------------------------------\n\nTITLE: Exporting DXF Content to PDF in Python\nDESCRIPTION: This snippet demonstrates how to export DXF content to PDF format using the ezdxf.addons.drawing.pymupdf module. It follows similar steps to SVG export but uses the PyMuPdfBackend and returns bytes instead of a string.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/image_export.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ezdxf.addons.drawing import pymupdf\n\n# ... (previous steps remain the same)\n\n# 2. Create the PDF backend\nbackend = pymupdf.PyMuPdfBackend()\n\n# ... (steps 3-5 remain the same)\n\n# 6. Get the PDF rendering as bytes\npdf_bytes = backend.get_pdf(page)\n```\n\n----------------------------------------\n\nTITLE: Adding Raster Images to DXF using ezdxf\nDESCRIPTION: Creates a DXF R2000 document and demonstrates how to add raster images using IMAGEDEF and IMAGE entities. Shows how to define an image once and create multiple references with different positions, sizes, and rotations. The example includes saving the document and querying existing image definitions.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/image.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport ezdxf\n\n# The IMAGE entity requires the DXF R2000 format or later.\ndoc = ezdxf.new(\"R2000\")\n\n# The IMAGEDEF entity is like a block definition, it just defines the image.\nmy_image_def = doc.add_image_def(\n    filename=\"mycat.jpg\", size_in_pixel=(640, 360)\n)\n\n\nmsp = doc.modelspace()\n# The IMAGE entity is like the INSERT entity, it's just an image reference,\n# and there can be multiple references to the same picture in a DXF document.\n\n# 1st image reference\nmsp.add_image(\n    insert=(2, 1),\n    size_in_units=(6.4, 3.6),\n    image_def=my_image_def,\n    rotation=0\n)\n# 2nd image reference\nmsp.add_image(\n    insert=(4, 5),\n    size_in_units=(3.2, 1.8),\n    image_def=my_image_def,\n    rotation=30\n)\n\n# Get existing image definitions from the OBJECTS section:\nimage_defs = doc.objects.query(\"IMAGEDEF\")\n\ndoc.saveas(\"dxf_with_cat.dxf\")\n```\n\n----------------------------------------\n\nTITLE: Loading DXF Documents from Unreliable Sources using ezdxf.recover in Python\nDESCRIPTION: This code snippet shows how to load DXF files with potential flaws using the ezdxf.recover module. It includes low-level structure repair and error reporting for unrecoverable errors.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/Load Documents.md#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport sys\nfrom ezdxf import recover\n\nname = \"your.dxf\"\ntry:  # low level structure repair:\n    doc, auditor = recover.readfile(name)\nexcept IOError:\n    print(f\"Not a DXF file or a generic I/O error.\")\n    sys.exit(1)\nexcept ezdxf.DXFStructureError:\n    print(f\"Invalid or corrupted DXF file: {name}\")\n    sys.exit(2)\n\n# DXF file can still have unrecoverable errors, but this is maybe\n# just a problem when saving the recovered DXF file.\nif auditor.has_errors:\n    print(f\"Found unrecoverable errors in DXF file: {name}.\")\n    auditor.print_error_report()\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Diameter Dimension in Python with ezdxf\nDESCRIPTION: This snippet demonstrates how to create a basic diameter dimension in ezdxf. It sets up a document, adds a circle, creates a diameter dimension with a 45-degree angle, and saves the result as a DXF file.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/diameter_dimension.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport ezdxf\n\n# setup=True setups the default dimension styles\ndoc = ezdxf.new(\"R2010\", setup=True)\n\nmsp = doc.modelspace()  # add new dimension entities to the modelspace\nmsp.add_circle((0, 0), radius=3)  # add a CIRCLE entity, not required\n# add default diameter dimension, measurement text is located outside\ndim = msp.add_diameter_dim(\n    center=(0, 0),\n    radius=3,\n    angle=45,\n    dimstyle=\"EZ_RADIUS\"\n)\ndim.render()\ndoc.saveas(\"diameter_dimension.dxf\")\n```\n\n----------------------------------------\n\nTITLE: Adding XRECORD Data to Extension Dictionaries in ezdxf\nDESCRIPTION: Demonstrates how to create an XRECORD entity to store arbitrary data in a DXF entity's extension dictionary. XRECORDs can store various data types through DXF group codes ranging from 1-369, without the size or order limitations of XDATA.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tasks/add_custom_data.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npoint = msp.add_point((10, 10))\nxdict = point.new_extension_dict()\nxrecord = xdict.add_xrecord(\"MyData\")\nxrecord.extend([(1, \"MyText\"), (40, 3.1415)])\n```\n\n----------------------------------------\n\nTITLE: Adding Block Attributes from Templates in ezdxf\nDESCRIPTION: This snippet demonstrates how to add attributes to a block reference using templates defined in the block definition. The add_auto_attribs method takes a dictionary mapping attribute tags to values and automatically creates attributes that inherit properties from the corresponding ATTDEF entities in the block definition.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tasks/add_blockrefs.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nmy_block_ref.add_auto_attrib({\"MY_TAG\": \"VALUE_STR\"})\n```\n\n----------------------------------------\n\nTITLE: Creating a Hatch Pattern with Offset in Python using ezdxf\nDESCRIPTION: This code shows how to create a hatch pattern with dashed lines that have both vertical (1 unit) and horizontal (0.3 units) offsets. This demonstrates how the offset parameter affects the positioning of consecutive hatch lines.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/hatch_pattern.rst#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n# -x-x-x- snip -x-x-x-\nhatch = msp.add_hatch()\nhatch.set_pattern_fill(\n    \"MyPattern\",\n    color=7,\n    angle=0,\n    scale=1.0,\n    style=0,  # normal hatching style\n    pattern_type=0,  # user-defined\n    # the line pattern is a dashed line:  - - - -\n    # the offset is 1 unit vertical and 0.3 units horizontal\n    # [angle in degree, origin as 2d vector, offset as 2d vector, line pattern]\n    definition=[[0, (0, 0), (0.3, 1), [1, -1]]],\n\n)\n# -x-x-x- snip -x-x-x-\n```\n\n----------------------------------------\n\nTITLE: Saving a DXF Document with a New Filename in ezdxf\nDESCRIPTION: This code demonstrates how to save a DXF document with a new filename. This creates a new file while preserving the original.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/usage_for_beginners.rst#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndoc.saveas(\"new_name.dxf\")\n```\n\n----------------------------------------\n\nTITLE: Creating a New Layer in ezdxf\nDESCRIPTION: This code demonstrates how to create a new layer in a DXF document. Layers are used to organize and control the visibility of entities in CAD drawings.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/usage_for_beginners.rst#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nmy_layer = doc.layers.add(\"MyLayer\")\n```\n\n----------------------------------------\n\nTITLE: Creating Angular Dimension by Center, Radius, and Angles\nDESCRIPTION: This example demonstrates creating an angular dimension defined by the center point, radius, and start/end angles. It uses the default 'EZ_CURVED' dimension style.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/angular_dimension.rst#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport ezdxf\n\n# Create a DXF R2010 document:\n# Use argument setup=True to setup the default dimension styles.\ndoc = ezdxf.new(\"R2010\", setup=True)\n\n# Add new entities to the modelspace:\nmsp = doc.modelspace()\n\n# Add an angular DIMENSION defined by the center point, start- and end angles,\n# the measurement text is placed at the default location above the dimension\n# line:\ndim = msp.add_angular_dim_cra(\n    center=(5, 5),  # center point of the angle\n    radius= 7,  # distance from center point to the start of the extension lines\n    start_angle=60,  # start angle in degrees\n    end_angle=120,  # end angle in degrees\n    distance=3,  # distance from start of the extension lines to the dimension line\n    dimstyle=\"EZ_CURVED\",  # default angular dimension style\n)\n\n# Necessary second step to create the BLOCK entity with the dimension geometry.\n# Additional processing of the DIMENSION entity could happen between adding\n# the entity and the rendering call.\ndim.render()\ndoc.saveas(\"angular_dimension_cra.dxf\")\n```\n\n----------------------------------------\n\nTITLE: Selecting Entities Outside a Window in Python using ezdxf\nDESCRIPTION: This code selects entities whose bounding boxes are completely outside a specified rectangular window using the bbox_outside function from the ezdxf.select module.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/entity_selection.rst#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nwindow = select.Window((185, 105), (245, 240))\nfor entity in select.bbox_outside(window, msp):\n    print(str(entity))\n```\n\n----------------------------------------\n\nTITLE: Using Estimated Tangents for Smooth Closed Splines in Python\nDESCRIPTION: Uses the estimate_tangents function to automatically calculate appropriate tangents for a smooth closed spline. This avoids guesswork by interpolating between the first and last estimated tangents.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/spline.rst#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ntangents = estimate_tangents(fit_points)\n# linear interpolation of the first and the last tangent:\nt0 = tangents[0].lerp(tangents[-1], 0.5)\nmsp.add_cad_spline_control_frame(fit_points, tangents=[t0, t0])\n```\n\n----------------------------------------\n\nTITLE: Accessing and Modifying DXF Header Variables\nDESCRIPTION: Shows how to access and modify header variables in a DXF document using dictionary-style access. Header variables control various document properties and settings.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/howto/document.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndoc.header[\"VarName\"] = value\nvalue = doc.header[\"VarName\"]\n```\n\n----------------------------------------\n\nTITLE: Initializing MText Entity in Python with ezdxf\nDESCRIPTION: Sets up a new DXF document and creates an MText entity in the modelspace with a Lorem Ipsum text content.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/mtext.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport ezdxf\n\ndoc = ezdxf.new(\"R2007\", setup=True)\nmsp = doc.modelspace()\n\nlorem_ipsum = \"\"\"\nLorem ipsum dolor sit amet, consectetur adipiscing elit,\nsed do eiusmod tempor incididunt ut labore et dolore magna\naliqua. Ut enim ad minim veniam, quis nostrud exercitation\nullamco laboris nisi ut aliquip ex ea commodo consequat.\nDuis aute irure dolor in reprehenderit in voluptate velit\nesse cillum dolore eu fugiat nulla pariatur. Excepteur sint\noccaecat cupidatat non proident, sunt in culpa qui officia\ndeserunt mollit anim id est laborum.\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Creating Solid Hatch with Polyline Path in Python using ezdxf\nDESCRIPTION: Demonstrates how to create a simple solid hatch with a single polyline boundary path using straight lines in ezdxf. The code creates a hatch entity and adds a polyline path to it.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/hatch.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport ezdxf\n\ndoc = ezdxf.new('R2010')\nmsp = doc.modelspace()\n\nhatch = msp.add_hatch(color=1)\nwith hatch.edit_boundary() as boundary:\n    polyline_path = boundary.add_polyline_path([\n        (0, 0), (10, 0), (10, 10), (0, 10)\n    ])\n\ndoc.saveas(\"solid_hatch_polyline_path.dxf\")\n```\n\n----------------------------------------\n\nTITLE: Creating MTEXT MultiLeader with manual settings in Python\nDESCRIPTION: Shows how to create a MultiLeader entity with MTEXT content manually, setting content, style, alignment, and leader properties.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/mleader.rst#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nbuilder = msp.add_multileader_mtext()\nbuilder.set_content(\n    \"MTEXT content\",\n    style=\"OpenSans\",\n    alignment=TextAlignment.LEFT,\n)\nbuilder.add_leader([(0, 0), (5, 5)])\nbuilder.build((10, 5))\n```\n\n----------------------------------------\n\nTITLE: Using ODA File Converter in Python\nDESCRIPTION: Python code example demonstrating how to load a DWG file, work with it as an ezdxf document, and export it to a different DWG version\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/addons/odafc.rst#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom ezdxf.addons import odafc\n\n# Load a DWG file\ndoc = odafc.readfile('my.dwg')\n\n# Use loaded document like any other ezdxf document\nprint(f'Document loaded as DXF version: {doc.dxfversion}.')\nmsp = doc.modelspace()\n...\n\n# Export document as DWG file for AutoCAD R2018\nodafc.export_dwg(doc, 'my_R2018.dwg', version='R2018')\n```\n\n----------------------------------------\n\nTITLE: Handling 3D Entities and Creating 2D Projections\nDESCRIPTION: This example shows how 3D entities are handled by projecting them onto the xy-plane and creating a hatch from the flattened edges.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/edges.rst#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ndoc = ezdxf.readfile(\"edges_3d.dxf\")\nmsp = doc.modelspace()\n\n# create edges and search index\nedges = list(edgesmith.edges_from_entities_2d(msp))\ndeposit = edgeminer.Deposit(edges)\n# find a chain\nchain = edgeminer.find_simple_chain(deposit, edges[0])\n# add a hatch and add the boundary path\nhatch = msp.add_hatch(color=5)\nboundary_path = edgesmith.polyline_path_from_chain(chain, max_sagitta=0.01)\nhatch.paths.append(boundary_path)\ndoc.saveas(\"flattened_hatch.dxf\")\n```\n\n----------------------------------------\n\nTITLE: Basic DXF Recovery Example\nDESCRIPTION: Demonstrates basic usage of the recover module to load a potentially damaged DXF file with error handling and auditing.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/drawing/recover.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport sys\nimport ezdxf\nfrom ezdxf import recover\n\ntry:\n    doc, auditor = recover.readfile(\"messy.dxf\")\nexcept IOError:\n    print(f'Not a DXF file or a generic I/O error.')\n    sys.exit(1)\nexcept ezdxf.DXFStructureError:\n    print(f'Invalid or corrupted DXF file.')\n    sys.exit(2)\n\n# DXF file can still have unrecoverable errors, but this is maybe just\n# a problem when saving the recovered DXF file.\nif auditor.has_errors:\n    auditor.print_error_report()\n```\n\n----------------------------------------\n\nTITLE: Setting Start and End Tangents for Fit-Point Splines in Python\nDESCRIPTION: Shows how to set the start and end tangent vectors for a spline defined by fit points using DXF attributes.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/spline.rst#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nspline.dxf.start_tangent = (0, 1, 0)\nspline.dxf.end_tangent = (0, 1, 0)\n```\n\n----------------------------------------\n\nTITLE: Setting up DXF document for MultiLeader creation in Python\nDESCRIPTION: Initializes a new DXF document, creates a modelspace layout, and sets up drawing parameters for creating MultiLeader entities.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/mleader.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport ezdxf\n\ndoc = ezdxf.new(\"R2007\")\nmsp = doc.modelspace()\ndoc.styles.new(\"OpenSans\", dxfattribs={\"font\": \"OpenSans-Regular.ttf\"})\n```\n\n----------------------------------------\n\nTITLE: Creating a New Paperspace Layout in ezdxf\nDESCRIPTION: Creates a new paperspace layout in an ezdxf document with a specified name. The layout name must be unique and will be shown as the tab name in CAD applications. While multiple paperspace layouts can be added in all DXF versions, only the active layout is exported for DXF R12.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tasks/add_layouts.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndoc.layouts.new(\"MyLayout\")\n```\n\n----------------------------------------\n\nTITLE: Loading DXF Files from ZIP Archives in Python\nDESCRIPTION: This code demonstrates how to load a DXF file directly from a ZIP archive. You can either specify the filename within the archive or let ezdxf load the first DXF file it finds.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/usage_for_beginners.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndoc = ezdxf.readzip(zipfilename[, filename])\n```\n\n----------------------------------------\n\nTITLE: Querying Block References in ezdxf\nDESCRIPTION: This code snippet shows how to query all block references of a specific block in the modelspace. It uses the query method with a filter to find all INSERT entities with the name 'FLAG'.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/blocks.rst#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfor flag_ref in msp.query('INSERT[name==\"FLAG\"]'):\n    print(str(flag_ref))\n```\n\n----------------------------------------\n\nTITLE: Using AppData with ezdxf\nDESCRIPTION: This snippet demonstrates how to use AppData to store custom data in DXF entities using ezdxf. It shows adding AppData to a LINE entity and retrieving it.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/custom_data.rst#2025-04-23_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\nfrom ezdxf.lldxf.const import ACAD_REACTORS\n\nline = doc.modelspace().add_line((0, 0), (10, 10))\nline.set_appdata('YOUR_UNIQUE_ID', [\n    (300, 'custom text'),\n    (370, 4711),\n    (460, 3.141592),\n])\n\n# Get AppData back:\nappdata = line.get_appdata('YOUR_UNIQUE_ID')\nif appdata:\n    print(f\"LINE({line.dxf.handle}) has {len(appdata)} tags of AppData for AppID 'YOUR_UNIQUE_ID'\")\n    for tag in appdata:\n        print(tag)\n```\n\n----------------------------------------\n\nTITLE: Creating LWPOLYLINE with Curved Segments using Bulge in Python\nDESCRIPTION: Demonstrates how to create a polyline with curved segments by setting bulge values. Bulge defines the ratio of arc height to half segment length, with positive values curving right and negative values curving left.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/lwpolyline.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndoc = ezdxf.new(\"R2000\")\nmsp = doc.modelspace()\n\n# point format = (x, y, [start_width, [end_width, [bulge]]])\n# set start_width, end_width to 0 to be ignored (x, y, 0, 0, bulge).\n\npoints = [(0, 0, 0, .05), (3, 0, .1, .2, -.5), (6, 0, .1, .05), (9, 0)]\nmsp.add_lwpolyline(points)\n\ndoc.saveas(\"lwpolyline5.dxf\")\n```\n\n----------------------------------------\n\nTITLE: Changing Layer States in ezdxf\nDESCRIPTION: Shows how to modify layer states, such as turning a layer off (making entities on that layer invisible) or locking it (making entities on that layer non-editable in CAD applications).\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/layers.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# switch layer off, entities at this layer will not shown in CAD applications/viewers\nmy_lines.off()\n\n# lock layer, entities at this layer are not editable in CAD applications\nmy_lines.lock()\n```\n\n----------------------------------------\n\nTITLE: Accessing DXF Attributes and Handling Errors in Python\nDESCRIPTION: This snippet shows various ways to access DXF attributes of entities, including error handling for missing or unsupported attributes. It demonstrates the use of the 'get' method, attribute existence checks, and support checks.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/getting_data.rst#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ne.dxf.layer  # layer of the entity as string\ne.dxf.color  # color of the entity as integer\n\n# If DXF attribute 'paperspace' does not exist, the entity defaults\n# to modelspace:\np = e.dxf.get(\"paperspace\", 0)\n\nif e.dxf.hasattr(\"paperspace\"):\n    ...\n\nif e.dxf.is_supported(\"paperspace\"):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Adding XDATA to DXF Entities (Python)\nDESCRIPTION: Demonstrates how to add extended data (XDATA) to DXF entities using ezdxf. XDATA allows attaching arbitrary data to entities with size limitations.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/custom_data.rst#2025-04-23_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\ndoc.appids.new('YOUR_UNIQUE_ID')\n\nline = msp.add_line((0, 0), (10, 10))\n\nxdata = [\n    ('YOUR_UNIQUE_ID', [\n        (1000, 'custom text'),\n        (1040, 3.141592),\n        (1070, 42),\n        (1002, '{'),\n        (1000, 'nested container'),\n        (1071, 9999999),\n        (1002, '}'),\n        (1010, (1, 1, 1)),\n    ])\n]\n\nline.xdata = xdata\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Horizontal Line Hatch Pattern in Python using ezdxf\nDESCRIPTION: This snippet demonstrates how to create a basic hatch pattern consisting of horizontal solid lines with a vertical spacing of 0.5 units. It defines a custom hatch pattern, creates a polygon boundary, and applies the pattern to the enclosed area.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/hatch_pattern.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport ezdxf\n\ndoc = ezdxf.new(\"R2010\")\nmsp = doc.modelspace()\nhatch = msp.add_hatch()\nhatch.set_pattern_fill(\n    \"MyPattern\",\n    color=7,\n    angle=0,\n    scale=1.0,\n    style=0,  # normal hatching style\n    pattern_type=0,  # user-defined\n    # pattern definition as list of:\n    # [angle in degree, origin as 2d vector, offset as 2d vector, line pattern]\n    # line pattern is a solid line\n    definition=[[0, (0, 0), (0, 0.5), []]],\n\n)\npoints = [(0, 0), (10, 0), (10, 10), (0, 10)]\nhatch.paths.add_polyline_path(points)\nmsp.add_lwpolyline(points, close=True, dxfattribs={\"color\": 1})\ndoc.saveas(\"user_defined_hatch_pattern.dxf\")\n```\n\n----------------------------------------\n\nTITLE: Adding MText Entity to Layout in Python with ezdxf\nDESCRIPTION: Demonstrates how to add an MText entity to a layout and manipulate its text content.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/mtext.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# store MTEXT entity for additional manipulations\nmtext = msp.add_mtext(lorem_ipsum, dxfattribs={\"style\": \"OpenSans\"})\n\nmtext.text += \"Append additional text to the MTEXT entity.\"\n# even shorter with __iadd__() support:\nmtext += \"Append additional text to the MTEXT entity.\"\n```\n\n----------------------------------------\n\nTITLE: Exploding MTEXT Entities in a DXF File using MTextExplode Add-on\nDESCRIPTION: This example demonstrates how to use the MTextExplode add-on to convert all MTEXT entities in a DXF file into individual TEXT entities. It processes all MTEXT entities in the model space and saves the result to a new file.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/addons/mtxpl.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport ezdxf\nfrom ezdxf.addons import MTextExplode\n\ndoc = ezdxf.readfile(\"mtext.dxf\")\nmsp = doc.modelspace()\nwith MTextExplode(msp) as xpl:\n    for mtext in msp.query(\"MTEXT\"):\n        xpl.explode(mtext)\ndoc.saveas(\"xpl_mtext.dxf\")\n```\n\n----------------------------------------\n\nTITLE: Custom Transformation Using Pyproj in Python\nDESCRIPTION: Implements a custom coordinate transformation function using the pyproj package. Transforms unprojected WGS84 coordinates to 2D World Mercator (EPSG:3395) coordinates and applies it to a GeoProxy object.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/geo.rst#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom pyproj import Transformer\nfrom ezdxf.math import Vec3\n\n# GPS track in WGS84, load_gpx_track() code see above\ngpx_points = list(load_gpx_track('track1.gpx'))\n\n# Create transformation object:\nct = Transformer.from_crs('EPSG:4326', 'EPSG:3395')\n\n# Create GeoProxy() object:\ngeo_proxy = GeoProxy.parse({\n    'type': 'LineString',\n    'coordinates': gpx_points\n})\n\n# Apply a custom transformation function to all coordinates:\ngeo_proxy.apply(lambda v: Vec3(ct.transform(v.x, v.y)))\n```\n\n----------------------------------------\n\nTITLE: Querying Entities by Attributes in ezdxf\nDESCRIPTION: This code shows how to query specific entities from a layout based on their attributes. This example retrieves all LINE entities on a layer named \"MyLayer\".\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/usage_for_beginners.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nlines = msp.query('LINE[layer==\"MyLayer\"]')\n```\n\n----------------------------------------\n\nTITLE: Accessing Text Content from MTEXT Entities in Python using ezdxf\nDESCRIPTION: Demonstrates two equivalent ways to extract text content from MTEXT entities in the modelspace. The content can be accessed via either the text property or the dxf.text attribute.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tasks/get_entity_content.rst#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfor mtext in msp.query(\"MTEXT\"):\n    print(mtext.text)\n    # is the same as:\n    print(mtext.dxf.text)\n```\n\n----------------------------------------\n\nTITLE: STL to DXF Mesh Conversion Example in Python\nDESCRIPTION: Example code showing how to convert an STL file to DXF by importing the mesh and rendering it in the modelspace. Uses the meshex addon to read STL and ezdxf for DXF creation.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/addons/meshex.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport sys\nimport ezdxf\nfrom ezdxf.addons import meshex\n\ntry:\n    mesh = meshex.stl_readfile(\"your.stl\")\nexcept (meshex.ParsingError, IOError) as e:\n    print(str(e))\n    sys.exit(1)\n\ndoc = ezdxf.new()\nmesh.render_mesh(doc.modelspace())\ndoc.saveas(\"your.dxf\")\n```\n\n----------------------------------------\n\nTITLE: Resolving DXF Properties using RenderContext in Python\nDESCRIPTION: This code demonstrates how to use the RenderContext class from the ezdxf.addons.drawing module to resolve graphical properties of DXF entities.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/howto/content.rst#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport ezdxf\nfrom ezdxf.addons.drawing.properties import RenderContext\n\ndoc = ezdxf.new()\ndoc.layers.add(\"LINE\", color=ezdxf.colors.RED)\nmsp = doc.modelspace()\nline = msp.add_line((0, 0), (1, 0), dxfattribs={\"layer\": \"LINE\"})\n\nctx = RenderContext(doc)\nctx.set_current_layout(msp)\nprint(f\"resolved RGB value: {ctx.resolve_color(line)}\")\n```\n\n----------------------------------------\n\nTITLE: Cleaning Invalid SPLINE Data in Python\nDESCRIPTION: Shows how to handle potential issues with spline data by clearing control points, knots, and weights that may be invalid or inconsistent with the fit points.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/spline.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# current control points do not match spline defined by fit points\nspline.control_points = []\n\n# count of knots is not correct:\n# count of knots = count of control points + degree + 1\nspline.knots = []\n\n# same for weights, count of weights == count of control points\nspline.weights = []\n```\n\n----------------------------------------\n\nTITLE: Adding a Line Entity to Modelspace in ezdxf\nDESCRIPTION: This code shows how to add a new LINE entity to the modelspace. It specifies the start and end points of the line and assigns it to a custom layer using the dxfattribs parameter.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/usage_for_beginners.rst#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nmsp = doc.modelspace()\nmsp.add_line((0, 0), (1, 0), dxfattribs={\"layer\": \"MyLayer\"})\n```\n\n----------------------------------------\n\nTITLE: Creating a 1:5 Scale Viewport in Paperspace with ezdxf\nDESCRIPTION: Adds a viewport with a 1:5 scale ratio by setting the view_height 5 times larger than the viewport height. The viewport displays the model content centered at (10, 5) with a view height of 25 units.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/psp_viewports.rst#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\npaperspace.add_viewport(\n    center=(8.5, 2.5),\n    size=(5, 5),\n    view_center_point=(10, 5),\n    view_height=25,\n)\n```\n\n----------------------------------------\n\nTITLE: Setting up a DXF Document for TablePainter\nDESCRIPTION: Initializes a new DXF document with necessary configurations for the TablePainter add-on, including enabling lineweight display and defining text styles for table headers and cells.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/addons/tablepainter.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport ezdxf\nfrom ezdxf.enums import MTextEntityAlignment\nfrom ezdxf.addons import TablePainter\n\ndoc = ezdxf.new(\"R2000\")  # required for lineweight support\ndoc.header[\"$LWDISPLAY\"] = 1  # show lineweights\ndoc.styles.add(\"HEAD\", font=\"OpenSans-ExtraBold.ttf\")\ndoc.styles.add(\"CELL\", font=\"OpenSans-Regular.ttf\")\n```\n\n----------------------------------------\n\nTITLE: Adding Text Style in ezdxf\nDESCRIPTION: Creates a new text style in a DXF document with a specified font file. Text styles define the rendering font for text-based entities.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tasks/add_resources.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndoc.styles.add(\"ARIAL\", font=\"arial.ttf\")\n```\n\n----------------------------------------\n\nTITLE: Accessing Entity DXF Attributes in ezdxf\nDESCRIPTION: This code shows how to access basic DXF attributes of an entity through the dxf namespace. The example retrieves the layer and color attributes of an entity.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/usage_for_beginners.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nlayer = entity.dxf.layer  # default is \"0\"\ncolor = entity.dxf.color  # default is 256 = BYLAYER\n```\n\n----------------------------------------\n\nTITLE: Configuring Fixed Length Extension Lines for Linear Dimensions in Python with ezdxf\nDESCRIPTION: This code snippet shows how to create linear dimensions with fixed length extension lines using ezdxf. It sets the dimfxlon attribute to enable fixed length extension lines and uses dimexe and dimfxl to define the lengths above and below the dimension line.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/linear_dimension.rst#2025-04-23_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\nmsp.add_linear_dim(\n    base=(3, 2),\n    p1=(3, 0),\n    p2=(6, 0),\n    override={\n        \"dimfxlon\": 1,  # fixed length extension lines\n        \"dimexe\": 0.2,  # length above dimension line\n        \"dimfxl\": 0.4,  # length below dimension line\n    }\n).render()\n```\n\n----------------------------------------\n\nTITLE: Using Custom Point Formats for LWPOLYLINE in Python\nDESCRIPTION: Shows how to use custom point formats when creating LWPOLYLINEs. The format parameter defines which values are included in each point tuple and in what order.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/lwpolyline.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nmsp.add_lwpolyline([(0, 0, 0), (10, 0, 1), (20, 0, 0)], format=\"xyb\")\nmsp.add_lwpolyline([(0, 10, 0), (10, 10, .5), (20, 10, 0)], format=\"xyb\")\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Text Styles in DXF with ezdxf\nDESCRIPTION: Shows how to create a new custom text style in a DXF document. This example creates a text style named \"myStandard\" using the OpenSans-Regular font.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/text.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndoc.styles.new(\"myStandard\", dxfattribs={\"font\" : \"OpenSans-Regular.ttf\"})\n```\n\n----------------------------------------\n\nTITLE: CSG Operations with Cube and Sphere in ezdxf\nDESCRIPTION: Example showing CSG operations between a cube and a sphere. This demonstrates using quadrilaterals as body faces to reduce face count, which can help with performance but may still require increased recursion limits.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/addons/pycsg.rst#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport ezdxf\n\nfrom ezdxf.render.forms import sphere, cube\nfrom ezdxf.addons.pycsg import CSG\n\ndoc = ezdxf.new()\ndoc.set_modelspace_vport(6, center=(5, 0))\nmsp = doc.modelspace()\n\ncube1 = cube().translate(-.5, -.5, -.5)\nsphere1 = sphere(count=32, stacks=16, radius=.5, quads=True)\n\nunion = (CSG(cube1) + CSG(sphere1)).mesh()\nunion.render_mesh(msp, dxfattribs={'color': 1})\n\nsubtract = (CSG(cube1) - CSG(sphere1)).mesh().translate(2.5)\nsubtract.render_mesh(msp, dxfattribs={'color': 3})\n\nintersection = (CSG(cube1) * CSG(sphere1)).mesh().translate(4)\nintersection.render_mesh(msp, dxfattribs={'color': 5})\n```\n\n----------------------------------------\n\nTITLE: Exploding Block References in ezdxf\nDESCRIPTION: This code snippet shows how to explode block references, which breaks them down into their constituent entities. It queries for all 'FLAG' block references and explodes each one.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/blocks.rst#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nfor flag_ref in msp.query('INSERT[name==\"FLAG\"]'):\n    flag_ref.explode()\n```\n\n----------------------------------------\n\nTITLE: Importing Entities from Source to Target DXF Drawing using Importer\nDESCRIPTION: Example demonstrating how to use the Importer class to transfer entities from a source DXF drawing to a target DXF drawing. The example shows importing modelspace entities, paperspace layouts, and specific entity types. The finalize() method must be called as the last step to ensure a valid target drawing.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/addons/importer.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport ezdxf\nfrom ezdxf.addons import Importer\n\nsdoc = ezdxf.readfile('original.dxf')\ntdoc = ezdxf.new()\n\nimporter = Importer(sdoc, tdoc)\n\n# import all entities from source modelspace into modelspace of the target drawing\nimporter.import_modelspace()\n\n# import all paperspace layouts from source drawing\nimporter.import_paperspace_layouts()\n\n# import all CIRCLE and LINE entities from source modelspace into an arbitrary target layout.\n# create target layout\ntblock = tdoc.blocks.new('SOURCE_ENTS')\n# query source entities\nents = sdoc.modelspace().query('CIRCLE LINE')\n# import source entities into target block\nimporter.import_entities(ents, tblock)\n\n# This is ALWAYS the last & required step, without finalizing the target drawing is maybe invalid!\n# This step imports all additional required table entries and block definitions.\nimporter.finalize()\n\ntdoc.saveas('imported.dxf')\n```\n\n----------------------------------------\n\nTITLE: Transforming GPS Coordinates to World Mercator Projection\nDESCRIPTION: Transforms GPS coordinates from WGS84 (EPSG:4326) to World Mercator (EPSG:3395) projection. Uses built-in transformation to convert from polar to 2D cartesian coordinates in meters.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/geo.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ntrack.wgs84_to_wm()\n```\n\n----------------------------------------\n\nTITLE: Finding Unused Block Definitions in ezdxf\nDESCRIPTION: Demonstrates how to find unused (unreferenced) block definitions in a DXF document using ezdxf. This feature was added in version 1.3.5 and can help in cleaning up unused blocks.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tasks/get_layouts.rst#2025-04-23_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nfrom ezdxf import blkrefs\n\n...\n\nfor name in blkrefs.find_unreferenced_blocks(doc)\n    block = doc.blocks.get(name)\n```\n\n----------------------------------------\n\nTITLE: Using SVGBackend to Render DXF to SVG\nDESCRIPTION: Example of using SVGBackend to render a DXF file to an SVG format and save it to a file.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/addons/drawing.rst#2025-04-23_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nfrom ezdxf.addons.drawing import Frontend, RenderContext\nfrom ezdxf.addons.drawing import layout, svg\n\ndoc = ezdxf.readfile(\"your.dxf\")\nmsp = doc.modelspace()\nbackend = svg.SVGBackend()\nFrontend(RenderContext(doc), backend).draw_layout(msp)\n\nwith open(\"your.svg\", \"wt\") as fp:\n    fp.write(backend.get_string(layout.Page(0, 0))\n```\n\n----------------------------------------\n\nTITLE: Creating a New Block Definition in ezdxf\nDESCRIPTION: Creates a new block definition in an ezdxf document with a specified name. The block name must be unique, or a DXFValueError will be raised. Block definitions are containers for DXF entities that can be referenced multiple times in a drawing.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tasks/add_layouts.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndoc.blocks.new(\"MyLayout\")\n```\n\n----------------------------------------\n\nTITLE: Creating GeoProxy Object from GPS Data in Python\nDESCRIPTION: Creates a GeoProxy object from GPS track data. Constructs a GeoJSON-like LineString object containing coordinate pairs and passes it to the GeoProxy parser.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/geo.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ezdxf.addons.geo import GeoProxy\n\n# The loaded GPS data has a WSG84 EPSG:4326 projection\n# Create a GeoProxy object from the LineString:\ntrack = GeoProxy.parse({\n    'type': 'LineString',\n    'coordinates': list(load_gpx_track(str(gpx_path)))\n})\n```\n\n----------------------------------------\n\nTITLE: DXF Loading with Audit\nDESCRIPTION: Demonstrates loading a DXF file with minor flaws and performing an audit check.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/drawing/recover.rst#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ntry:\n    doc = ezdxf.readfile(name)\nexcept IOError:\n    print(f'Not a DXF file or a generic I/O error.')\n    sys.exit(1)\nexcept ezdxf.DXFStructureError:\n    print(f'Invalid or corrupted DXF file: {name}.')\n    sys.exit(2)\n\nauditor = doc.audit()\nif auditor.has_errors:\n    auditor.print_error_report()\n```\n\n----------------------------------------\n\nTITLE: Reading Content from ACAD_TABLE Entities in Python using ezdxf\nDESCRIPTION: Uses the read_acad_table_content helper function to extract the content of ACAD_TABLE entities as a list of table rows. Iterates through rows and columns to print each cell's value.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tasks/get_entity_content.rst#2025-04-23_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nfrom ezdxf.entities.acad_table import read_acad_table_content\n\n...\n\nfor acad_table in msp.query(\"ACAD_TABLE\"):\n    content = read_acad_table_content(acad_table)\n    for n, row in enumerate(content):\n        for m, value in enumerate(row):\n            print(f\"cell [{n}, {m}] = '{value}'\")\n```\n\n----------------------------------------\n\nTITLE: Adding Block References with Random Placement in ezdxf\nDESCRIPTION: This code snippet shows how to add multiple block references with random placement, scaling, and rotation to the modelspace. It uses the random module to generate varied positions and transformations for the flag blocks.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/blocks.rst#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport random\n\nfor _ in range(50):\n    x = random.randint(-100, 100)\n    y = random.randint(-100, 100)\n    scale = random.uniform(.5, 2.0)\n    rotation = random.uniform(0, 360)\n    msp.add_blockref('FLAG', (x, y), dxfattribs={\n        'xscale': scale,\n        'yscale': scale,\n        'rotation': rotation,\n        'layer': 'FLAGS'\n    })\n```\n\n----------------------------------------\n\nTITLE: Setting DXF Attributes by Direct Assignment in Python\nDESCRIPTION: Demonstrates how to modify DXF attributes using direct assignment to the dxf namespace. Shows setting layer and color properties of an entity.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tasks/modify_dxf_attributes.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ne.dxf.layer = \"MyLayer\"\ne.dxf.color = 9\n```\n\n----------------------------------------\n\nTITLE: Overriding Dimension Style in Python using ezdxf\nDESCRIPTION: This snippet shows how to override default dimension style settings. It uses the 'override' parameter to change the text justification (dimjust) to left-aligned.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/linear_dimension.rst#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nmsp.add_linear_dim(\n    base=(3, 2), p1=(0, 0), p2=(3, 0), override={\"dimjust\": 1}\n).render()\n```\n\n----------------------------------------\n\nTITLE: Resetting Modelspace Viewport to Entity Extents in Python\nDESCRIPTION: Example of using the zoom module to reset the main CAD viewport of the model space to the extents of its entities. This creates a view that shows all drawing objects in the viewport.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tools/zoom.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport ezdxf\nfrom ezdxf import zoom\n\ndoc = ezdxf.new()\nmsp = doc.modelspace()\n... # add your DXF entities\n\nzoom.extents(msp)\ndoc.saveas(\"your.dxf\")\n```\n\n----------------------------------------\n\nTITLE: Shifting Text from Default Location in Angular Dimensions\nDESCRIPTION: This example shows how to shift the measurement text away from the default location for angular dimensions using the shift_text method.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/angular_dimension.rst#2025-04-23_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\ndim = msp.add_angular_dim_cra(\n    center=(3, 3),\n    radius=3,\n    distance=1,\n    start_angle=60,\n    end_angle=120,\n)\n# shift text from default text location:\ndim.shift_text(0.5, 1.0)\ndim.render()\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Radius Dimension in Python with Ezdxf\nDESCRIPTION: Basic example of creating a radius dimension in Ezdxf. This code creates a circle with radius 3 units and adds a radius dimension at a 45-degree angle using the default EZ_RADIUS dimension style.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/radius_dimension.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport ezdxf\n\n# DXF R2010 drawing, official DXF version name: 'AC1024',\n# setup=True setups the default dimension styles\ndoc = ezdxf.new(\"R2010\", setup=True)\n\nmsp = doc.modelspace()  # add new dimension entities to the modelspace\nmsp.add_circle((0, 0), radius=3)  # add a CIRCLE entity, not required\n# add default radius dimension, measurement text is located outside\ndim = msp.add_radius_dim(\n    center=(0, 0), radius=3, angle=45, dimstyle=\"EZ_RADIUS\"\n)\n# necessary second step, to create the BLOCK entity with the dimension geometry.\ndim.render()\ndoc.saveas(\"radius_dimension.dxf\")\n```\n\n----------------------------------------\n\nTITLE: Customizing Text Placement for Angular Dimensions\nDESCRIPTION: This snippet demonstrates how to customize the vertical placement of measurement text for angular dimensions using the dimtad attribute.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/angular_dimension.rst#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nmsp.add_angular_dim_cra(\n    center=(3, 3),\n    radius=3,\n    distance=1,\n    start_angle=60,\n    end_angle=120,\n    override={\n        \"dimtad\": 1,  # 0=center; 1=above; 4=below;\n    },\n).render()\n```\n\n----------------------------------------\n\nTITLE: Creating Ordinate Dimensions with Global Feature Locations in Python using ezdxf\nDESCRIPTION: This snippet demonstrates how to create x-type and y-type ordinate dimensions using global feature locations in the World Coordinate System (WCS). It includes creating a rectangle and adding dimensions to its corners.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/ordinate_dimension.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport ezdxf\nfrom ezdxf.math import Vec3\nfrom ezdxf.render import forms\n\n# Use argument setup=True to setup the default dimension styles.\ndoc = ezdxf.new(setup=True)\n\n# Add new entities to the modelspace:\nmsp = doc.modelspace()\n# Add a rectangle: width=4, height = 2.5, lower left corner is WCS(x=2, y=3)\norigin = Vec3(2, 3)\nmsp.add_lwpolyline(\n    forms.translate(forms.box(4, 2.5), origin),\n    close=True\n)\n\n# Add an x-type ordinate DIMENSION with global feature locations:\nmsp.add_ordinate_x_dim(\n    # lower left corner\n    feature_location=origin + (0, 0),  # feature location in the WCS\n    offset=(0, -2),  # end of leader, relative to the feature location\n    origin=origin,\n).render()\nmsp.add_ordinate_x_dim(\n    # lower right corner\n    feature_location=origin + (4, 0),  # feature location in the WCS\n    offset=(0, -2),\n    origin=origin,\n).render()\n\n# Add an y-type ordinate DIMENSION with global feature locations:\nmsp.add_ordinate_y_dim(\n    # lower right corner\n    feature_location=origin + (4, 0),  # feature location in the WCS\n    offset=(2, 0),\n    origin=origin,\n).render()\nmsp.add_ordinate_y_dim(\n    # upper right corner\n    feature_location=origin + (4, 2.5),  # feature location in the WCS\n    offset=(2, 0),\n    origin=origin,\n).render()\n\n# Necessary second step to create the BLOCK entity with the dimension geometry.\n# Additional processing of the DIMENSION entity could happen between adding\n# the entity and the rendering call.\ndoc.saveas(\"ord_global_features.dxf\")\n```\n\n----------------------------------------\n\nTITLE: Deleting a Layer Definition in ezdxf\nDESCRIPTION: Shows how to remove a layer definition from the document. This doesn't affect entities referencing the layer, but they will inherit default layer properties instead of the deleted layer's properties.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/layers.rst#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndoc.layers.remove(\"MyLines\")\n```\n\n----------------------------------------\n\nTITLE: Creating an Arc entity from 3 points using ConstructionArc in ezdxf\nDESCRIPTION: Creates an Arc passing through three points using the ConstructionArc helper class, then adds it to the modelspace. This demonstrates how to create an arc from start point (10, 0), end point (0, 0), and passing through point (5, 3).\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/dxf_primitives.rst#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nfrom ezdxf.math import ConstructionArc\n\n# -x-x-x- snip -x-x-x-\n\narc = ConstructionArc.from_3p(\n    start_point=(10, 0), end_point=(0, 0), def_point=(5, 3)\n)\narc.add_to_layout(msp, dxfattribs=attribs)\n```\n\n----------------------------------------\n\nTITLE: Finding Chains in Unordered Edges\nDESCRIPTION: This example shows how to find chains in a set of unordered edges using a spatial search tree (Deposit) for optimization.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/edges.rst#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n# create a new doc\ndoc = ezdxf.new()\ndoc.header[\"$LWDISPLAY\"] = 1\nmsp = doc.modelspace()\n\n# reuse same entities from previous example\nedges = list(edgesmith.edges_from_entities_2d(entities))\n\n# shuffle the ordered edges\nrandom.shuffle(edges)\n\n# a deposit optimizes the search for unordered edges\ndeposit = edgeminer.Deposit(edges)\n\n# start the search at an arbitrary edge\nstart = edges[0]\nchain = edgeminer.find_simple_chain(deposit, start)\nlwp3 = edgesmith.lwpolyline_from_chain(\n    chain, dxfattribs={\"color\": 1, \"lineweight\": 30}\n)\nmsp.add_entity(lwp3)\ndoc.saveas(\"result2.dxf\")\n```\n\n----------------------------------------\n\nTITLE: Building MULTILEADER Entity with Block Content in Python using ezdxf\nDESCRIPTION: This code snippet shows how to build the final MULTILEADER entity using the 'insertion_point' alignment type. The insert point of the build method is set as the base point of the BLOCK.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/mleader.rst#2025-04-23_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nmleader = ml_builder.build(insert=Vec2(5, 2))\n```\n\n----------------------------------------\n\nTITLE: Adding Layer in ezdxf\nDESCRIPTION: Creates a new layer in a DXF document with specified color and linetype properties. Layers are used to control visual properties of associated entities.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tasks/add_resources.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndoc.layers.add(\"MY_NEW_LAYER\", color=1, linetype=\"DASHED\")\n```\n\n----------------------------------------\n\nTITLE: Finding XREF Block Definitions in Python\nDESCRIPTION: Shows how to iterate through block definitions in the BLOCKS section and identify XREFs and XREF overlays\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/xref.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfor block_layout in doc.blocks:\n    block = block_layout.block  # the BLOCK entity\n    if block.is_xref:\n        handle_xref(block_layout)\n    elif block.is_xref_overlay:\n        handle_xref_overlay(block_layout)\n```\n\n----------------------------------------\n\nTITLE: Finding XREF References in Modelspace using Python\nDESCRIPTION: Demonstrates how to find XREF references in modelspace and access their definitions\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/xref.rst#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfor insert in msp.query(\"INSERT\"):\n    if insert.is_xref:\n        handle_xref_reference(insert)\n        # ... or get the XREF definition\n        block_layout = insert.block()\n        if block_layout is not None:\n            handle_xref_definition(block_layout)\n```\n\n----------------------------------------\n\nTITLE: Setting DXF Drawing Units\nDESCRIPTION: Sets the drawing units for a DXF document by modifying the $INSUNITS header variable. This example uses 6 for meters (other common values include 1 for inches). This setting defines the default units for CAD applications opening the file.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/howto/document.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndoc.header[\"$INSUNITS\"] = 6\n```\n\n----------------------------------------\n\nTITLE: Accessing Paperspace Layouts in ezdxf\nDESCRIPTION: Demonstrates how to access paperspace layouts in ezdxf. It shows how to get the active (default) paperspace layout and how to retrieve a specific layout by name.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tasks/get_layouts.rst#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\npsp = doc.paperspace()\n```\n\nLANGUAGE: Python\nCODE:\n```\npsp = doc.paperspace(\"Layout0\")\n```\n\n----------------------------------------\n\nTITLE: Setting Modelspace View to Show All Entities\nDESCRIPTION: Uses the zoom module to set the initial modelspace view to display the extents of all entities. This ensures all content is visible when the DXF file is opened in a CAD application.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/howto/document.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport ezdxf\nfrom ezdxf import zoom\n\ndoc = ezdxf.readfile(\"your.dxf\")\nmsp = doc.modelspace()\nzoom.extents(msp)\n```\n\n----------------------------------------\n\nTITLE: Exporting ACIS data to DXF 3DSOLID entities in Python\nDESCRIPTION: Example of how to create an ACIS body from a mesh and export it as a 3DSOLID entity in a DXF file using the ezdxf.acis.api module.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/acis.rst#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport ezdxf\nfrom ezdxf.render import forms\nfrom ezdxf.acis import api as acis\n\ndoc = ezdxf.new(\"R2000\")\nmsp = doc.modelspace()\n\n# create an ACIS body from a simple cube-mesh\nbody = acis.body_from_mesh(forms.cube())\nsolid3d = msp.add_3dsolid()\nacis.export_dxf(solid3d, [body])\ndoc.saveas(\"cube.dxf\")\n```\n\n----------------------------------------\n\nTITLE: Adding Entities to a Layer in ezdxf\nDESCRIPTION: Shows how to add a line entity to a specific layer. The entity inherits the layer's properties (color and linetype) by using the BYLAYER setting, which is the default behavior.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/layers.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmsp.add_line((0, 0), (10, 0), dxfattribs={\"layer\": \"MyLines\"})\n```\n\n----------------------------------------\n\nTITLE: Editing LWPOLYLINE Points with Context Manager in Python\nDESCRIPTION: Shows how to use the points() context manager to modify a polyline's vertices. The example removes the last two points and adds two new points. The context manager supports custom point formats.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/lwpolyline.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndoc = ezdxf.readfile(\"lwpolyline2.dxf\")\nmsp = doc.modelspace()\n\nline = msp.query(\"LWPOLYLINE\").first\n\nwith line.points(\"xyseb\") as points:\n    # points is a standard Python list\n    # existing points are 5-tuples, but new points can be\n    # set as (x, y, [start_width, [end_width, [bulge]]]) tuple\n    # set start_width, end_width to 0 to be ignored (x, y, 0, 0, bulge).\n\n    # delete last 2 points\n    del points[-2:]\n    # adding two points\n    points.extend([(4, 7), (0, 7)])\n\ndoc.saveas(\"lwpolyline3.dxf\")\n```\n\n----------------------------------------\n\nTITLE: Hiding Viewport Frames by Turning Off the VIEWPORTS Layer in ezdxf\nDESCRIPTION: Creates the VIEWPORTS layer and turns it off to hide the viewport frames. Since viewport entities are placed on this layer by default, turning it off makes the viewport borders invisible.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/psp_viewports.rst#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nvp_layer = doc.layers.add(\"VIEWPORTS\")\nvp_layer.off()\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Layers in ezdxf\nDESCRIPTION: Shows how to iterate through all layers in a document, check if a specific layer exists, and get the total count of layer definitions. The example demonstrates turning off all layers except layer \"0\".\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/layers.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# iteration\nfor layer in doc.layers:\n    if layer.dxf.name != \"0\":\n        layer.off()  # switch all layers off except layer \"0\"\n\n# check for existing layer definition\nif \"MyLines\" in doc.layers:\n    layer = doc.layers.get(\"MyLines\")\n\nlayer_count = len(doc.layers) # total count of layer definitions\n```\n\n----------------------------------------\n\nTITLE: Adding Linetype in ezdxf\nDESCRIPTION: Adds a new linetype definition to a DXF document with a specified pattern. The pattern array defines the rendering pattern for linear graphical entities.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tasks/add_resources.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndoc.linetypes.add(\"DOTTED\", pattern=[0.2, 0.0, -0.2])\n```\n\n----------------------------------------\n\nTITLE: Creating Radius Dimension with Default Text Location Outside\nDESCRIPTION: Example showing how to create a radius dimension with text placed outside the circle using the default EZ_RADIUS style. The dimension line is slanted at a 45-degree angle.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/radius_dimension.rst#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndim = msp.add_radius_dim(\n    center=(0, 0),\n    radius=2.5,\n    angle=45,\n    dimstyle=\"EZ_RADIUS\"\n)\ndim.render()  # always required, but not shown in the following examples\n```\n\n----------------------------------------\n\nTITLE: Changing Text Height with MTextEditor in Python and ezdxf\nDESCRIPTION: Demonstrates how to change text height both absolutely and relatively using MTextEditor.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/mtext.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nattribs = dict(ATTRIBS)\nattribs[\"width\"] = 40.0\neditor = MTextEditor(\"changing text height absolute: default height is 0.7\" + NP)\n# doubling the default height = 1.4\neditor.height(1.4)\neditor.append(\"text height: 1.4\" + NP)\neditor.height(3.5).append(\"text height: 3.5\" + NP)\neditor.height(0.7).append(\"back to default height: 0.7\" + NP)\nmsp.add_mtext(str(editor), attribs)\n```\n\n----------------------------------------\n\nTITLE: Creating Radius Dimension with User-Defined Text Location Outside\nDESCRIPTION: Example showing how to place the radius dimension text at a user-defined location outside the circle. The location parameter overrides the angle parameter and determines the direction of the dimension line.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/radius_dimension.rst#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\ndim = msp.add_radius_dim(\n    center=(0, 0),\n    radius=2.5,\n    location=(4, 4),\n    dimstyle=\"EZ_RADIUS\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating GeoData Entity in ezdxf Modelspace\nDESCRIPTION: This code snippet demonstrates how to create a new GeoData entity in the Modelspace of a DXF drawing using ezdxf. It shows the factory function for instantiating GeoData objects.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfobjects/geodata.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nFactory function         :meth:`ezdxf.layouts.Modelspace.new_geodata`\n```\n\n----------------------------------------\n\nTITLE: Selecting Entities Inside a Window in Python using ezdxf\nDESCRIPTION: This code snippet demonstrates how to use the ezdxf library to select entities from the modelspace of a DXF file that are inside a defined window. It uses the select.Window and select.bbox_inside functions to perform the selection.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tasks/select.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport ezdxf\nfrom ezdxf import select\n\ndoc = ezdxf.readfile(\"your.dxf\")\nmsp = doc.modelspace()\n\n# Define a window for selection\nwindow = select.Window((0, 0), (10, 10))\n\n# Select entities inside the window from modelspace\nselected_entities = select.bbox_inside(window, msp)\n\n# Iterate over selected entities\nfor entity in selected_entities:\n    print(entity)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Predefined Linetypes in ezdxf\nDESCRIPTION: This code shows how to add standard predefined linetypes from the ezdxf.tools.standards module to a document. It checks if each linetype exists before adding it to prevent duplicates.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/linetypes.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfor name, desc, pattern in linetypes():\n    if name not in doc.linetypes:\n        doc.linetypes.add(\n            name=name,\n            pattern= pattern,\n            description=desc,\n        )\n```\n\n----------------------------------------\n\nTITLE: Manipulating Block Reference Attributes in DXF using Python\nDESCRIPTION: This code shows how to iterate over and modify attributes of block references (INSERT entities) in a DXF file using ezdxf.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/howto/content.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nblockrefs = msp.query('INSERT[name==\"Part12\"]')\nif len(blockrefs):\n    entity = blockrefs[0]  # process first entity found\n    for attrib in entity.attribs:\n        if attrib.dxf.tag == \"diameter\":  # identify attribute by tag\n            attrib.dxf.text = \"17mm\"  # change attribute content\n\ndiameter = entity.get_attrib('diameter')\nif diameter is not None:\n    diameter.dxf.text = \"17mm\"\n```\n\n----------------------------------------\n\nTITLE: Adding Leader Lines to Angular Dimensions with Different Text Alignments in Python using ezdxf\nDESCRIPTION: This code snippet shows how to add leader lines to angular dimensions with different text alignments. It uses a loop to create two dimensions with different dimtad values, which control the text alignment relative to the leader line.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/angular_dimension.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfor dimtad, x in [(0, 0), (4, 6)]:\n    dim = msp.add_angular_dim_cra(\n        center=(3 + x, 3),\n        radius=3,\n        distance=1,\n        start_angle=60,\n        end_angle=120,\n        override={\"dimtad\": dimtad}  # \"center\" == 0; \"below\" != 0;\n    )\n    dim.set_location((1, 2), relative=True, leader=True)\n    dim.render()\n```\n\n----------------------------------------\n\nTITLE: Setting Background Fill for Dimension Text in Python using ezdxf\nDESCRIPTION: This code demonstrates how to add a background fill to dimension text using ezdxf. It creates a linear dimension and sets the background fill type and color using the override parameter.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/linear_dimension.rst#2025-04-23_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nmsp.add_linear_dim(\n    base=(3, 2),\n    p1=(3, 0),\n    p2=(6, 0),\n    override={\n        \"dimtfill\": 2,\n        \"dimtfillclr\": 1,\n    }\n).render()\n```\n\n----------------------------------------\n\nTITLE: Moving an Entity to a Different Layer in ezdxf\nDESCRIPTION: Demonstrates how to move an existing entity from one layer to another by changing its layer attribute. This is done by simply assigning a new layer name to the entity's dxf.layer property.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/layers.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nline = msp.add_line((0, 0), (10, 0), dxfattribs={\"layer\": \"MyLines\"})\n# move the entity to layer \"OtherLayer\"\nline.dxf.layer = \"OtherLayer\"\n```\n\n----------------------------------------\n\nTITLE: Accessing DXF Entity Attributes in Python\nDESCRIPTION: Demonstrates how to access DXF entity attributes through the dxf namespace attribute. This snippet shows the basic syntax for retrieving entity properties like layer information.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/concepts/entities.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nprint(entity.dxf.layer)\n```\n\n----------------------------------------\n\nTITLE: Creating LWPOLYLINE with Varying Line Widths in Python\nDESCRIPTION: Creates a polyline with different start and end widths for each segment. Each point can specify the width values for the segment that starts at that point, with the last point's values used for the closing segment if applicable.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/lwpolyline.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndoc = ezdxf.new(\"R2000\")\nmsp = doc.modelspace()\n\n# point format = (x, y, [start_width, [end_width, [bulge]]])\n# set start_width, end_width to 0 to be ignored (x, y, 0, 0, bulge).\n\npoints = [(0, 0, .1, .15), (3, 0, .2, .25), (6, 3, .3, .35), (6, 6)]\nmsp.add_lwpolyline(points)\n\ndoc.saveas(\"lwpolyline4.dxf\")\n```\n\n----------------------------------------\n\nTITLE: Creating Diameter Dimension with User-Defined Location Outside and Horizontal Text\nDESCRIPTION: This example combines a user-defined location outside the circle with forced horizontal text alignment by setting the dimtoh parameter to 1.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/diameter_dimension.rst#2025-04-23_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\ndim = msp.add_diameter_dim(\n    center=(0, 0),\n    radius=2.5,\n    location=(4, 4),\n    dimstyle=\"EZ_RADIUS\",\n    override={\"dimtoh\": 1}\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Stacked Text in MText with Python and ezdxf\nDESCRIPTION: Shows how to create stacked text within an MText entity using special formatting codes.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/mtext.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nmtext.text = \"\\\\A1;\\\\SUpper^ Lower; - \\\\SUpper/ Lower;} - \\\\SUpper# Lower;\"\n```\n\n----------------------------------------\n\nTITLE: Appending Points to an Existing LWPOLYLINE in Python\nDESCRIPTION: Opens an existing DXF file, queries for the first LWPOLYLINE entity, and appends two additional points to it. The modified document is then saved to a new file.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/lwpolyline.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndoc = ezdxf.readfile(\"lwpolyline1.dxf\")\nmsp = doc.modelspace()\n\nline = msp.query(\"LWPOLYLINE\").first\nif line is not None:\n    line.append_points([(8, 7), (10, 7)])\n\ndoc.saveas(\"lwpolyline2.dxf\")\n```\n\n----------------------------------------\n\nTITLE: Querying Text Entities from DXF Database\nDESCRIPTION: Shows how to query specific entity types from the DXF document's entity database. This example retrieves all TEXT entities and prints their content.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/concepts/entities.rst#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfor text in doc.entitydb.query(\"TEXT\"):\n    print(text.dxf.text)\n```\n\n----------------------------------------\n\nTITLE: Transforming DXF WCS Coordinates to CRS\nDESCRIPTION: Transforms DXF World Coordinate System (WCS) coordinates to the target coordinate reference system (CRS) using a transformation matrix. Prepares coordinates for export to GeoJSON.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/geo.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Transform DXF WCS into target CRS\ngeo_proxy.transform(m)\n```\n\n----------------------------------------\n\nTITLE: Creating an Arc entity in ezdxf\nDESCRIPTION: Creates an Arc entity with center at (10, 10), radius of 3 units, and spanning from 30 to 120 degrees. The Arc entity is defined by a center point, radius, and start/end angles in the Object Coordinate System (OCS).\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/dxf_primitives.rst#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\narc = msp.add_arc((10, 10), radius=3, start_angle=30, end_angle=120, dxfattribs=attribs)\n```\n\n----------------------------------------\n\nTITLE: Purging Unreferenced Blocks in ezdxf\nDESCRIPTION: Demonstrates how to find and delete all unused (unreferenced) block definitions in a drawing. This functionality was added in version 1.3.5.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tasks/delete_layouts.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ezdxf import blkrefs\n\n...\n\nfor name in blkrefs.find_unreferenced_blocks(doc)\n    doc.blocks.delete_block(name, safe=False)\n```\n\n----------------------------------------\n\nTITLE: Checking Available Linetypes in ezdxf\nDESCRIPTION: This snippet demonstrates how to work with linetypes using standard Python protocols. It shows how to iterate through linetypes, check if a specific linetype exists, and count the total number of linetypes in a document.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/linetypes.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# iteration\nprint(\"available linetypes:\")\nfor lt in doc.linetypes:\n    print(f\"{lt.dxf.name}: {lt.dxf.description}\")\n\n# check for existing linetype\nif \"DOTTED\" in doc.linetypes:\n    pass\n\ncount = len(doc.linetypes) # total count of linetypes\n```\n\n----------------------------------------\n\nTITLE: Setting Tick Marks for Linear Dimensions in Python with ezdxf\nDESCRIPTION: This code snippet shows how to use tick marks instead of arrows for a linear dimension in ezdxf. It sets the tick size using the set_tick method, which effectively disables arrow blocks.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/linear_dimension.rst#2025-04-23_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\ndim = msp.add_linear_dim(base=(3, 2), p1=(3, 0), p2=(6, 0))\ndim.set_tick(size=0.25)\ndim.render()\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Cell Style for Table Headers\nDESCRIPTION: Defines a new cell style for table headers with specific text properties, background color, and alignment settings.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/addons/tablepainter.rst#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ntable.new_cell_style(\n    \"head\",\n    text_style=\"HEAD\",\n    text_color=ezdxf.colors.BLUE,\n    char_height=0.7,\n    bg_color=ezdxf.colors.LIGHT_GRAY,\n    align=MTextEntityAlignment.MIDDLE_CENTER,\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple DXF Document for XREF Testing in Python\nDESCRIPTION: Function to create a simple DXF file that will be used as an external reference. The function creates a document with a circle and text at a specified insertion point.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/xref_module.rst#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndef make_dxf_xref_document(name: str) -> ezdxf.Document:\n    \"\"\"Create a DXF file for testing XREF.\"\"\"\n    doc = ezdxf.new(\"R2010\", units=units.M)\n    msp = doc.modelspace()\n    msp.add_lwpolyline([(0, 0), (3, 0), (3, 3), (0, 3)], close=True)\n    # The insertion point of the XREF is at (5, 5)\n    msp.add_circle((5, 5), radius=3)\n    msp.add_text(\n        \"X-Reference\",\n        height=0.5,\n        dxfattribs={\"style\": \"OpenSans-Bold\", \"color\": 1},\n    ).set_placement((5, 5), halign=1, valign=1)\n    doc.set_modelspace_vport(height=10, center=(5, 5))\n    doc.saveas(name)\n    return doc\n```\n\n----------------------------------------\n\nTITLE: Calculating Spline Length in DXF using Python\nDESCRIPTION: This snippet shows how to approximate the length of a spline or polyline in a DXF file using the ConstructionPolyline tool from ezdxf.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/howto/content.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport ezdxf\nfrom ezdxf.math import ConstructionPolyline\n\ndoc = ezdxf.new()\nmsp = doc.modelspace()\nfit_points = [(0, 0, 0), (750, 500, 0), (1750, 500, 0), (2250, 1250, 0)]\n\nspline = msp.add_spline(fit_points)\npolyline = ConstructionPolyline(spline.flattening(distance=0.1))\nprint(f\"approximated length = {polyline.length:.2f}\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Smooth Closed Spline with Matching Tangents in Python\nDESCRIPTION: Creates a smooth closed spline by manually setting matching start and end tangents. When the start and end tangents point in the same direction, the curve appears smooth at the closing point.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/spline.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nt0= Vec3(1, -1, 0)  # the length (magnitude) of the tangent is not relevant!\nspline = msp.add_cad_spline_control_frame(fit_points, tangents=[t0, t0])\n```\n\n----------------------------------------\n\nTITLE: Selecting Chained Entities in Python using ezdxf\nDESCRIPTION: This code selects entities that are directly or indirectly connected to each other by overlapping bounding boxes, starting from a specified line entity using the bbox_chained function.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/entity_selection.rst#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n# choose entity for the beginning of the chain:\nline = msp.query(\"LINE\").first\nfor entity in select.bbox_chained(line, msp):\n    print(str(entity))\n```\n\n----------------------------------------\n\nTITLE: Writing DXF File in Python\nDESCRIPTION: This snippet demonstrates how to write a DXF file using the ezdxf library. It includes error handling for file writing operations.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/journals/2023_12_29.md#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ndef write_dxf_file(doc: 'Drawing', filename: str) -> None:\n    \"\"\"Write DXF file.\"\"\"\n    try:\n        doc.saveas(filename)\n    except IOError:\n        raise IOError(f'IOError: can not write file \"{filename}\".')\n    except Exception as e:\n        raise e\n```\n\n----------------------------------------\n\nTITLE: Setting Entity Visibility with the Invisible Attribute\nDESCRIPTION: Demonstrates how to control entity visibility using the invisible attribute which accepts boolean values (0/1). Default value is 0 (visible).\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/common_graphical_attributes.rst#2025-04-23_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nentity.dxf.invisible = 1\n```\n\nLANGUAGE: Python\nCODE:\n```\nis_invisible = bool(entity.dxf.invisible)\n```\n\n----------------------------------------\n\nTITLE: Creating Diameter Dimension with Inside Horizontal Text\nDESCRIPTION: This example shows how to force horizontal text alignment when the text is placed inside the circle. It overrides the dimtih parameter to 1 to enable horizontal text orientation inside.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/diameter_dimension.rst#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\ndim = msp.add_diameter_dim(\n    center=(0, 0),\n    radius=2.5,\n    angle=45,\n    dimstyle=\"EZ_RADIUS_INSIDE\",\n    override={\"dimtih\": 1}\n)\n```\n\n----------------------------------------\n\nTITLE: Drawing Spline Tangents in Python\nDESCRIPTION: Calculates and visualizes the tangent vectors along a spline curve. The code creates a spline, calculates the first derivative at various points along the curve, and draws red lines representing the tangent directions.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/spline.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# additional required imports:\nfrom ezdxf.math import Vec3, estimate_tangents\nimport numpy as np\n\n# snip -x-x-x-\n\nfit_points = Vec3.list(\n    [\n        (0, 0, 0),\n        (1000, 600, 0),\n        (1500, 1200, 0),\n        (500, 1250, 0),\n        (0, 0, 0),\n    ]\n)\nspline = msp.add_spline(fit_points)\n\n# draw the curve tangents as red lines:\nct = spline.construction_tool()\nfor t in np.linspace(0, ct.max_t, 30):\n    point, derivative = ct.derivative(t, 1)\n    msp.add_line(point, point + derivative.normalize(200), dxfattribs={\"color\": 1})\n```\n\n----------------------------------------\n\nTITLE: Using GfxAttribs for Entity Creation in ezdxf\nDESCRIPTION: Shows how to use the GfxAttribs class for adding new entities with graphical attributes, which provides attribute validation and IDE code completion support.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/common_graphical_attributes.rst#2025-04-23_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nimport ezdxf\nfrom ezdxf.gfxattribs import GfxAttribs\n\ndoc = ezdxf.new()\nmsp = doc.modelspace()\n\nline = msp.add_line(\n    (0, 0), (10, 10), dxfattribs=GfxAttribs(layer=\"0\", rgb=(25, 128, 16))\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Spline from Fit Points in Python\nDESCRIPTION: Creates a basic spline curve that passes through specified fit points. The code initializes a DXF document and adds a spline to the modelspace using the add_spline method.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/spline.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndoc = ezdxf.new(\"R2000\")\n\nfit_points = [(0, 0, 0), (750, 500, 0), (1750, 500, 0), (2250, 1250, 0)]\nmsp = doc.modelspace()\nspline = msp.add_spline(fit_points)\n```\n\n----------------------------------------\n\nTITLE: Creating MTEXT MultiLeader with quick_leader method in Python\nDESCRIPTION: Demonstrates how to create MultiLeader entities with MTEXT content using the quick_leader method, specifying target points and leader angles.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/mleader.rst#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nmsp.add_multileader_mtext(\"First Leader\").quick_leader((0, 0), angle=0)\nmsp.add_multileader_mtext(\"Second Leader\").quick_leader((0, 0), angle=90)\nmsp.add_multileader_mtext(\"Third Leader\").quick_leader((0, 0), angle=180)\nmsp.add_multileader_mtext(\"Fourth Leader\").quick_leader((0, 0), angle=270)\n```\n\n----------------------------------------\n\nTITLE: Setting DXF Lineweight Display in Python using ezdxf\nDESCRIPTION: Code snippet demonstrating how to activate on-screen lineweight display by setting the $LWDISPLAY header variable to 1 in a DXF document using ezdxf.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/concepts/lineweights.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# activate on screen lineweight display\ndoc.header[\"$LWDISPLAY\"] = 1\n```\n\n----------------------------------------\n\nTITLE: Setting and Controlling Transparency in DXF Entities\nDESCRIPTION: Explains how to set transparency values using both the property interface and DXF attributes. Transparency values range from 0.0 (opaque) to 1.0 (fully transparent).\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/common_graphical_attributes.rst#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nentity.transparency = 0.5\n```\n\nLANGUAGE: Python\nCODE:\n```\nentity.dxf.transparency = ezdxf.colors.TRANSPARENCY_50\n```\n\nLANGUAGE: Python\nCODE:\n```\nif entity.is_transparency_by_layer:\n    ...\nelif entity.is_transparency_by_block:\n    ...\nelse:\n    ...\n```\n\nLANGUAGE: Python\nCODE:\n```\nfrom ezdxf import colors\n\n...\n\n# set transparency by layer by removing the DXF attribute \"transparency\":\nentity.dxf.discard(\"transparency\")\n\n# set transparency by block:\nentity.dxf.transparency = colors.TRANSPARENCY_BYBLOCK\n\n# there are also some handy constants in the colors module:\n# TRANSPARENCY_10 upto TRANSPARENCY_90 in steps of 10\nentity.dxf.transparency = colors.TRANSPARENCY_30  # set 30% transparency\nentity.dxf.transparency = colors.OPAQUE\n```\n\n----------------------------------------\n\nTITLE: Renaming a Layer in ezdxf\nDESCRIPTION: Demonstrates how to rename a layer using the rename method. The tutorial notes that this operation has limitations since not all layer references throughout the document may be updated.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/layers.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nmy_lines = doc.layers.get(\"MyLines\")\nmy_lines.rename(\"YourLines\")\n```\n\n----------------------------------------\n\nTITLE: Creating Revision Cloud in ezdxf\nDESCRIPTION: Example demonstrating how to create a revision cloud in a DXF document using ezdxf. The code creates a new document, accesses the modelspace, adds a revision cloud entity with specified points and segment length, and saves the result to a DXF file.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tools/revcloud.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport ezdxf\nfrom ezdxf.render import revcloud\n\ndoc = ezdxf.new()\nmsp = doc.modelspace()\nrevcloud.add_entity(msp, [(0, 0), (1, 0), (1, 1), (0, 1)], segment_length=0.1)\ndoc.saveas(\"revcloud.dxf\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Text Content from MLEADER Entities in Python using ezdxf\nDESCRIPTION: Extracts text content from MLEADER (multileader) entities by accessing the mtext attribute in the context object. Prints both the insertion point and the text content if available.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tasks/get_entity_content.rst#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfor mleader in msp.query(\"MLEADER MULTILEADER\"):\n    mtext = mleader.context.mtext\n    if mtext:\n        print(mtext.insert)  # insert location\n        print(mtext.default_content)  # text content\n```\n\n----------------------------------------\n\nTITLE: Accessing Virtual Entities from INSERT Block References in Python using ezdxf\nDESCRIPTION: Retrieves virtual DXF entities from an INSERT (block reference) entity by iterating through the virtual_entities() method. This exposes the actual entities that make up the block.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tasks/get_entity_content.rst#2025-04-23_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nfor insert in msp.query(\"INSERT\"):\n    for entity in insert.virtual_entities():\n        print(str(entity))\n```\n\n----------------------------------------\n\nTITLE: Extracting Block Attributes from MLEADER Entities in Python using ezdxf\nDESCRIPTION: Accesses attribute text content from block references in MLEADER entities by iterating through the block_attribs list. Prints the text content of each attribute.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tasks/get_entity_content.rst#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfor mleader in msp.query(\"MLEADER MULTILEADER\"):\n    for attrib in mleader.block_attribs:\n        print(attrib.text)  # text content of the ATTRIB entity\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Block Definitions in ezdxf\nDESCRIPTION: Shows how to iterate over all block definitions in a DXF document using ezdxf. This can be useful for processing or analyzing all blocks in a file.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tasks/get_layouts.rst#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfor block in doc.blocks:\n    print(block.name)\n```\n\n----------------------------------------\n\nTITLE: Selecting Entities Containing a Point in Python using ezdxf\nDESCRIPTION: This code demonstrates how to select entities where a specified point lies within their bounding box using the bbox_point function from the ezdxf.select module.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/entity_selection.rst#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nfor entity in select.bbox_point((264, 140), msp):\n    print(str(entity))\n```\n\n----------------------------------------\n\nTITLE: Freezing Specific Layers in a Viewport with ezdxf\nDESCRIPTION: Specifies layers to be frozen (hidden) in a specific viewport. The frozen_layers attribute takes a list of layer names that will not be visible in this particular viewport, while remaining visible in other viewports.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/psp_viewports.rst#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nvp.frozen_layers = [\"Layer0\", \"Layer1\"]\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Color Attribute in ezdxf\nDESCRIPTION: Shows how to set and get the color attribute of DXF entities. The color attribute uses ACI (AutoCAD Color Index) values, with a default of 256 (BYLAYER).\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/common_graphical_attributes.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nentity.dxf.color = 1\n```\n\nLANGUAGE: Python\nCODE:\n```\nvalue = entity.dxf.color\n```\n\nLANGUAGE: Python\nCODE:\n```\nentity.dxf.color = ezdxf.colors.RED\n```\n\n----------------------------------------\n\nTITLE: Exploding MTEXT Entities into a Block using MTextExplode Add-on\nDESCRIPTION: This example shows how to explode MTEXT entities into a separate block named 'EXPLODE' instead of directly in the model space. The block is then referenced in the model space at the origin point.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/addons/mtxpl.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport ezdxf\nfrom ezdxf.addons import MTextExplode\n\ndoc = ezdxf.readfile(\"mtext.dxf\")\nmsp = doc.modelspace()\nblk = doc.blocks.new(\"EXPLODE\")\nwith MTextExplode(blk) as xpl:\n    for mtext in msp.query(\"MTEXT\"):\n        xpl.explode(mtext)\nmsp.add_block_ref(\"EXPLODE\", (0, 0))\ndoc.saveas(\"xpl_into_block.dxf\")\n```\n\n----------------------------------------\n\nTITLE: Exporting Matplotlib Figure with Specific Pixel Size in Python\nDESCRIPTION: This code snippet demonstrates how to use the set_pixel_size function to export a Matplotlib figure with a specific pixel size. It sets the size to 1000x600 pixels and saves the figure as a PNG file.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/howto/drawing-addon.rst#2025-04-23_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\n# export image with a size of 1000x600 pixels\nset_pixel_size(fig, (1000, 600))\nfig.savefig(\"box_1000x600.png\")\nplt.close(fig)\n```\n\n----------------------------------------\n\nTITLE: Adding Dimension Style in ezdxf\nDESCRIPTION: Adds a new dimension style to a DXF document. Dimension styles define the initial properties for DIMENSION entities.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tasks/add_resources.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndoc.dimstyles.add(\"EZDXF\")\n```\n\n----------------------------------------\n\nTITLE: Checking Layer States in ezdxf\nDESCRIPTION: Demonstrates methods to check various states of a layer, including whether it's on/off, locked, and how to retrieve its name.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/layers.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nmy_lines.is_off()  # True if layer is off\nmy_lines.is_on()   # True if layer is on\nmy_lines.is_locked()  # True if layer is locked\nlayer_name = my_lines.dxf.name  # get the layer name\n```\n\n----------------------------------------\n\nTITLE: Defining Hatch Class in Python\nDESCRIPTION: This snippet defines the Hatch class, which represents a HATCH entity in ezdxf. It includes various attributes and methods for managing hatch properties, patterns, and boundary paths.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfentities/hatch.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Hatch:\n    def __init__(self):\n        self.dxf = {\n            'pattern_name': '',\n            'solid_fill': 0,\n            'associative': 0,\n            'hatch_style': 0,\n            'pattern_type': 0,\n            'pattern_angle': 0.0,\n            'pattern_scale': 1.0,\n            'pattern_double': 0,\n            'n_seed_points': 0,\n            'elevation': 0.0\n        }\n        self.paths = BoundaryPaths()\n        self.pattern = Pattern()\n        self.gradient = Gradient()\n        self.seeds = []\n\n    @property\n    def has_solid_fill(self):\n        return self.dxf['solid_fill'] == 1\n\n    @property\n    def has_pattern_fill(self):\n        return self.dxf['solid_fill'] == 0\n\n    @property\n    def has_gradient_data(self):\n        return self.gradient is not None\n\n    @property\n    def bgcolor(self):\n        return None  # Implement bgcolor retrieval\n\n    def set_pattern_definition(self, pattern):\n        # Implement pattern definition setting\n        pass\n\n    def set_pattern_scale(self, scale):\n        # Implement pattern scale setting\n        pass\n\n    def set_pattern_angle(self, angle):\n        # Implement pattern angle setting\n        pass\n\n    def set_solid_fill(self, color=None, style=1, rgb=None):\n        # Implement solid fill setting\n        pass\n\n    def set_pattern_fill(self, name, color=7, angle=0, scale=1):\n        # Implement pattern fill setting\n        pass\n\n    def set_gradient(self, color1=None, color2=None, rotation=0, centered=0, one_color=0):\n        # Implement gradient setting\n        pass\n\n    def set_seed_points(self, points):\n        # Implement seed points setting\n        pass\n\n    def transform(self, m):\n        # Implement transformation\n        pass\n\n    def associate(self):\n        # Implement association\n        pass\n\n    def remove_association(self):\n        # Implement association removal\n        pass\n```\n\n----------------------------------------\n\nTITLE: Implementing BlockRecordTable Class in Python\nDESCRIPTION: BlockRecordTable is a subclass of Table that manages a collection of BlockRecord objects. It provides an add method for adding new block records.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tables/tables.rst#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass BlockRecordTable(Table):\n    def add(self): pass\n```\n\n----------------------------------------\n\nTITLE: Selecting Entities Inside a Window in Python using ezdxf\nDESCRIPTION: This snippet demonstrates how to select entities whose bounding boxes are completely within a rectangular window using the ezdxf library. It uses the bbox_inside function from the select module.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/entity_selection.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport ezdxf\nfrom ezdxf import select\n\ndoc = ezdxf.readfile(\"base.dxf\")\nmsp 0 doc.modelspace()\n\nwindow = select.Window((150, 105), (280, 240))\nfor entity in select.bbox_inside(window, msp):\n    print(str(entity))\n```\n\n----------------------------------------\n\nTITLE: Setting Entity Transparency in ezdxf\nDESCRIPTION: Demonstrates how to create a new DXF document, add a line to the modelspace, and set its transparency value. The transparency is set using a float value between 0.0 (opaque) and 1.0 (fully transparent).\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/concepts/transparency.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport ezdxf\n\ndoc = ezdxf.new()\nmsp = doc.modelspace()\nline = msp.add_line((0, 0), (10, 0))\nline.transparency = 0.5\n```\n\n----------------------------------------\n\nTITLE: Extracting Text from TEXT Entities in Python using ezdxf\nDESCRIPTION: Iterates through all TEXT entities in the modelspace and prints their text content using the dxf.text attribute. TEXT entities store their content in a single DXF attribute.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tasks/get_entity_content.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfor text in msp.query(\"TEXT\"):\n    print(text.dxf.text)\n```\n\n----------------------------------------\n\nTITLE: Creating a Cube Mesh by Assembling Single Faces in Python\nDESCRIPTION: This snippet shows how to create a cube mesh by adding individual faces using the edit_data() context manager and the MeshData helper class. It also demonstrates the use of the optimize() method to minimize vertex count.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/mesh.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport ezdxf\n\n\n# 8 corner vertices\np = [\n    (0, 0, 0),\n    (1, 0, 0),\n    (1, 1, 0),\n    (0, 1, 0),\n    (0, 0, 1),\n    (1, 0, 1),\n    (1, 1, 1),\n    (0, 1, 1),\n]\n\n# MESH requires DXF R2000 or later\ndoc = ezdxf.new(\"R2000\")\nmsp = doc.modelspace()\nmesh = msp.add_mesh()\n\nwith mesh.edit_data() as mesh_data:\n    mesh_data.add_face([p[0], p[1], p[2], p[3]])\n    mesh_data.add_face([p[4], p[5], p[6], p[7]])\n    mesh_data.add_face([p[0], p[1], p[5], p[4]])\n    mesh_data.add_face([p[1], p[2], p[6], p[5]])\n    mesh_data.add_face([p[3], p[2], p[6], p[7]])\n    mesh_data.add_face([p[0], p[3], p[7], p[4]])\n    # optional call optimize(): minimizes the vertex count\n    mesh_data.optimize()\n\ndoc.saveas(\"cube_mesh_2.dxf\")\n```\n\n----------------------------------------\n\nTITLE: Selecting LINE Entities from Modelspace in Python\nDESCRIPTION: Demonstrates how to query all LINE entities from the modelspace using the EntityQuery class.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/Release Notes v0.18.x.md#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nlines = msp.query(\"LINE\")\n```\n\n----------------------------------------\n\nTITLE: Modifying HATCH Pattern Origin in DXF using Python\nDESCRIPTION: This code provides functions to change the origin point of HATCH patterns in DXF files using ezdxf.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/howto/content.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom ezdxf.entities import Hatch, Pattern\nfrom ezdxf.math import Vec2\n\ndef shift_pattern_origin(hatch: Hatch, offset: Vec2):\n    if isinstance(hatch.pattern, Pattern):\n        for pattern_line in hatch.pattern.lines:\n            pattern_line.base_point += offset\n\ndef reset_pattern_origin_of_first_pattern_line(hatch: Hatch, origin: Vec2):\n    if isinstance(hatch.pattern, Pattern) and len(hatch.pattern.lines):\n        first_pattern_line = hatch.pattern.lines[0]\n        offset = origin - first_pattern_line.base_point\n        shift_pattern_origin(hatch, offset)\n```\n\n----------------------------------------\n\nTITLE: Basic OpenSCAD Boolean Operation Example\nDESCRIPTION: Demonstrates creating meshes, applying boolean operations using OpenSCAD, and rendering the result in ezdxf.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/addons/openscad.rst#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport ezdxf\nfrom ezdxf.render import forms\nfrom ezdxf.addons import MengerSponge, openscad\n\ndoc = ezdxf.new()\nmsp = doc.modelspace()\n\n# 1. create the meshes:\nsponge = MengerSponge(level=3).mesh()\nsponge.flip_normals()  # important for OpenSCAD\nsphere = forms.sphere(\n    count=32, stacks=16, radius=0.5, quads=True\n).translate(0.25, 0.25, 1)\nsphere.flip_normals()  # important for OpenSCAD\n\n# 2. create the script:\nscript = openscad.boolean_operation(openscad.DIFFERENCE, sponge, sphere)\n\n# 3. execute the script by OpenSCAD:\nresult = openscad.run(script)\n\n# 4. render the MESH entity:\nresult.render_mesh(msp)\n\ndoc.set_modelspace_vport(6, center=(5, 0))\ndoc.saveas(\"OpenSCAD.dxf\")\n```\n\n----------------------------------------\n\nTITLE: Zooming to Specific Objects in DXF Modelspace\nDESCRIPTION: Sets the initial modelspace view to focus on specific objects rather than all entities. This example zooms to show all LINE entities in the modelspace.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/howto/document.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nlines = msp.query(\"LINES\")\nzoom.objects(lines)\n```\n\n----------------------------------------\n\nTITLE: Deleting Entities from a Layout in ezdxf\nDESCRIPTION: This code shows how to safely delete an entity from a layout. The delete_entity method removes the entity from the layout and destroys it completely.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/usage_for_beginners.rst#2025-04-23_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nline = msp.add_line((0, 0), (1, 0))\nmsp.delete_entity(line)\n```\n\n----------------------------------------\n\nTITLE: Selecting Entities Inside a Polygon in Python using ezdxf\nDESCRIPTION: This code demonstrates how to select entities whose bounding boxes lie entirely within a polygon shape using the Polygon selection shape and bbox_inside function from ezdxf.select.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/entity_selection.rst#2025-04-23_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\npolygon = select.Polygon([(110, 168), (110, 107), (316, 107), (316, 243), (236, 243)])\nfor entity in select.bbox_inside(polygon, msp):\n    print(str(entity))\n```\n\n----------------------------------------\n\nTITLE: Overriding Layer Properties in a Specific Viewport with ezdxf\nDESCRIPTION: Demonstrates how to override layer properties for a specific viewport. This example changes the linetype of Layer0 to DASHED only in the specified viewport without affecting its appearance elsewhere.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/psp_viewports.rst#2025-04-23_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nlayer = doc.layers.get(\"Layer0\")\noverride = layer.get_vp_overrides()\noverride.set_linetype(vp.dxf.handle, \"DASHED\")\noverride.commit()\n```\n\n----------------------------------------\n\nTITLE: Enabling Lineweight Display in DXF Viewers\nDESCRIPTION: Enables the display of lineweights in DXF viewers by setting the $LWDISPLAY header variable to 1. By default, lines are shown without lineweights in most DXF viewers.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/howto/document.rst#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndoc.header[\"$LWDISPLAY\"] = 1\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Document Properties (Python)\nDESCRIPTION: Sets custom document properties in the DXF file. This method requires at least DXF R2004 and supports only string values.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/custom_data.rst#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ndoc.header.custom_vars['MyFirstVar'] = 'First Value'\n```\n\n----------------------------------------\n\nTITLE: Creating Bullet Lists in MTextEditor\nDESCRIPTION: Demonstrates how to create bullet lists using indentation and tabulator stops with custom bullet markers.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/mtext.rst#2025-04-23_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nattribs = dict(ATTRIBS)\nattribs[\"char_height\"] = 0.25\nattribs[\"width\"] = 7.5\nbullet = \"•\"\neditor = MTextEditor(\"Bullet List:\" + NP)\neditor.bullet_list(\n    indent=1,\n    bullets=[bullet] * 3,\n    content=[\n        \"First item\",\n        \"Second item\",\n        \" \".join(lorem_ipsum(30)),\n    ])\nmsp.add_mtext(str(editor), attribs)\n```\n\n----------------------------------------\n\nTITLE: Finding and Processing XREF References\nDESCRIPTION: Code to locate and process XREF references in the modelspace by querying INSERT entities. The snippet demonstrates how to check if an insertion is an XREF and access its block definition for further processing.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/howto/content.rst#2025-04-23_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nfor insert in msp.query(\"INSERT\"):\n    if insert.is_xref:\n        handle_xref_reference(insert)\n        # ... or get the XREF definition\n        block_layout = insert.block()\n        if block_layout is not None:\n            block = block_layout.block\n            if block.is_xref:\n                handle_xref(block_layout)\n            elif block.is_xref_overlay:\n                handle_xref_overlay(block_layout)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Custom Document Properties (Python)\nDESCRIPTION: Retrieves the value of a custom document property from the DXF file.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/custom_data.rst#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nvalue = doc.header.custom_vars['MyFirstVar']\n```\n\n----------------------------------------\n\nTITLE: Ellipse Class Structure in Python\nDESCRIPTION: Class definition for the Ellipse entity which inherits from DXFGraphic. The entity represents a 3D elliptical curve defined by center point, major axis vector, and extrusion vector. Supports parameters like ratio, start/end parameters and various geometric operations.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfentities/ellipse.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Ellipse:\n    dxf.center  # Center point (2D/3D Point in WCS)\n    dxf.major_axis  # Endpoint of major axis, relative to center (Vec3)\n    dxf.ratio  # Ratio of minor axis to major axis (float)\n    dxf.start_param  # Start parameter (float)\n    dxf.end_param  # End parameter (float)\n    start_point  # Start point in WCS\n    end_point  # End point in WCS\n    minor_axis  # Minor axis as Vec3 in WCS\n```\n\n----------------------------------------\n\nTITLE: Getting DXF Attributes with Default Values in ezdxf\nDESCRIPTION: This code shows how to retrieve a DXF attribute with a specified default value if the attribute doesn't exist in the entity.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/usage_for_beginners.rst#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nentity.dxf.get(\"true_color\", 0)\n```\n\n----------------------------------------\n\nTITLE: Uprighting Exploded Block References in ezdxf\nDESCRIPTION: This code shows how to explode block references that may include reflections (negative scaling) and then upright the resulting entities to correct inverted extrusion vectors.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/upright.rst#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfor block_ref in msp.query(\"INSERT\"):\n    entities = block_ref.explode()  # -> EntityQuery object\n    upright_all(entities)\n```\n\n----------------------------------------\n\nTITLE: Converting Circle Center from OCS to WCS using ezdxf\nDESCRIPTION: Demonstrates how to convert the center point of a 3D circle from Object Coordinate System (OCS) to World Coordinate System (WCS) using the ezdxf library. This conversion is necessary when working with OCS entities in 3D space.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/concepts/coordinates.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nocs = circle.ocs()\nwcs_center = ocs.to_wcs(circle.dxf.center)\n```\n\n----------------------------------------\n\nTITLE: Accessing Basic DXF Attributes in Python\nDESCRIPTION: Shows how to access basic DXF attributes like layer and color through the dxf namespace attribute of an entity.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tasks/get_dxf_attributes.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ne.dxf.layer  # layer of the entity as string\ne.dxf.color  # color of the entity as integer\n```\n\n----------------------------------------\n\nTITLE: Calculating Modelspace Extents in DXF Files\nDESCRIPTION: Demonstrates how to calculate the extents (bounding box) of all entities in the modelspace using the ezdxf.bbox module. Returns a BoundingBox object that contains the minimum and maximum coordinates.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/howto/document.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport ezdxf\nfrom ezdxf import bbox\n\ndoc = ezdxf.readfile(\"your.dxf\")\nmsp = doc.modelspace()\n\nextents = bbox.extents(msp)\n```\n\n----------------------------------------\n\nTITLE: Importing and Using the HPGL2 Add-on in Python\nDESCRIPTION: This snippet demonstrates how to import the HPGL2 add-on from ezdxf and use it to convert an HPGL2 plot file to DXF format. It shows the basic usage of the to_dxf() function.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/addons/hpgl2.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom ezdxf.addons.hpgl2 import api as hpgl2\n\nwith open(\"hpgl2.plt\", \"rb\") as fp:\n    data = fp.read()\ndoc = hpgl2.to_dxf(data, color_mode=hpgl2.ColorMode.ACI)\ndoc.saveas(\"hpgl2_as.dxf\")\n```\n\n----------------------------------------\n\nTITLE: Setting Up Local Grid in GeoData\nDESCRIPTION: This method sets up a local grid for the GeoData entity. It takes parameters for design point, reference point, north direction, and coordinate reference system (CRS).\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfobjects/geodata.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n.. automethod:: setup_local_grid(*, design_point: UVec, reference_point: UVec, north_direction: UVec = (0, 1), crs: str = EPSG_3395)\n```\n\n----------------------------------------\n\nTITLE: Finding Simple Chains in DXF Elements\nDESCRIPTION: Creates chains from DXF line entities and converts them to colored polylines. Each chain is assigned a different color for visualization.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/edges.rst#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nmsp = doc.modelspace()\nlines = msp.query(\"LINE\")\n\n# create edges and search index\nedges = list(edgesmith.edges_from_entities_2d(lines))\ndeposit = edgeminer.Deposit(edges)\n\n# find chains\nchains = edgeminer.find_all_simple_chains(deposit)\n\n# create a new output document\nout = ezdxf.new()\nmsp = out.modelspace()\ncolor = 1\nfor chain in chains:\n    polyline = edgesmith.lwpolyline_from_chain(\n        chain, dxfattribs={\"color\": color}\n    )\n    msp.add_entity(polyline)\n    color += 1\nout.saveas(\"simple_chains.dxf\")\n```\n\n----------------------------------------\n\nTITLE: Setting Tolerances for Linear Dimensions in Python with ezdxf\nDESCRIPTION: This example demonstrates how to add tolerances to a linear dimension using ezdxf. It sets the same upper and lower tolerance value, specifies the text height factor, alignment, and decimal places.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/linear_dimension.rst#2025-04-23_snippet_22\n\nLANGUAGE: Python\nCODE:\n```\ndim = msp.add_linear_dim(base=(0, 3), p1=(3, 0), p2=(6.5, 0))\ndim.set_tolerance(.1, hfactor=.4, align=\"top\", dec=2)\ndim.render()\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple DXF R12 Drawing with Multiple Entity Types\nDESCRIPTION: Example demonstrating how to create a DXF R12 drawing with various entity types including lines, circles, arcs, solids, points, polylines, and text using the r12writer module.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/addons/r12writer.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom random import random\nfrom ezdxf.addons import r12writer\n\nwith r12writer(\"quick_and_dirty_dxf_r12.dxf\") as dxf:\n    dxf.add_line((0, 0), (17, 23))\n    dxf.add_circle((0, 0), radius=2)\n    dxf.add_arc((0, 0), radius=3, start=0, end=175)\n    dxf.add_solid([(0, 0), (1, 0), (0, 1), (1, 1)])\n    dxf.add_point((1.5, 1.5))\n\n    # 2d polyline, new in v0.12\n    dxf.add_polyline_2d([(5, 5), (7, 3), (7, 6)])\n\n    # 2d polyline with bulge value, new in v0.12\n    dxf.add_polyline_2d([(5, 5), (7, 3, 0.5), (7, 6)], format='xyb')\n\n    # 3d polyline only, changed in v0.12\n    dxf.add_polyline([(4, 3, 2), (8, 5, 0), (2, 4, 9)])\n\n    dxf.add_text(\"test the text entity\", align=\"MIDDLE_CENTER\")\n```\n\n----------------------------------------\n\nTITLE: Creating an Anonymous Block in ezdxf\nDESCRIPTION: Creates an anonymous block definition that won't appear in the insert dialog of CAD applications. This is useful for internal purposes. The block name is generated automatically and should be stored for later reference when creating block references to this block.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tasks/add_layouts.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nmy_block = doc.blocks.new_anonymous_block()\n# store the block name, so you can create block references to this block\nblock_name = my_block.name\n```\n\n----------------------------------------\n\nTITLE: Arc Mirroring and Extrusion Vector Demonstration in ezdxf\nDESCRIPTION: This example demonstrates how arcs behave when mirrored. It creates an arc, makes a copy, mirrors the copy using a transformation matrix, and then shows the effects on the extrusion vector and arc properties.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/upright.rst#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nimport ezdxf\nfrom ezdxf.upright import upright\nfrom ezdxf.math import Matrix44\n\ndoc = ezdxf.new()\nmsp = doc.modelspace()\n\narc = msp.add_arc(\n    (5, 0),\n    radius=5,\n    start_angle=-90,\n    end_angle=90,\n    dxfattribs={\"color\": ezdxf.const.RED},\n)\n# draw lines to the start- and end point of the ARC\nmsp.add_line((0, 0), arc.start_point, dxfattribs={\"color\": ezdxf.const.GREEN})\nmsp.add_line((0, 0), arc.end_point, dxfattribs={\"color\": ezdxf.const.BLUE})\n\n# copy arc\nmirrored_arc = arc.copy()\nmsp.add_entity(mirrored_arc)\n\n# mirror copy\nmirrored_arc.transform(Matrix44.scale(-1, 1, 1))\n\n# This creates an inverted extrusion vector:\nassert mirrored_arc.dxf.extrusion.isclose((0, 0, -1))\n\n# draw lines to the start- and end point of the mirrored ARC\nmsp.add_line((0, 0), mirrored_arc.start_point, dxfattribs={\"color\": ezdxf.const.GREEN})\nmsp.add_line((0, 0), mirrored_arc.end_point, dxfattribs={\"color\": ezdxf.const.BLUE})\n```\n\n----------------------------------------\n\nTITLE: Creating Diameter Dimension with User-Defined Location Inside and Horizontal Text\nDESCRIPTION: This example combines a user-defined location inside the circle with forced horizontal text alignment by setting the dimtih parameter to 1.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/diameter_dimension.rst#2025-04-23_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\ndim = msp.add_diameter_dim(\n    center=(0, 0),\n    radius=2.5,\n    location=(1, 1),\n    dimstyle=\"EZ_RADIUS\",\n    override={\"dimtih\": 1},\n)\n```\n\n----------------------------------------\n\nTITLE: Handling Block Units with Different Scaling in ezdxf\nDESCRIPTION: Shows how to create a block with different units than the modelspace and apply the appropriate scaling factor when inserting the block. The example creates a block in centimeters while the modelspace is in meters.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/concepts/units.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndoc.units = units.M\nmy_block = doc.blocks.new('MYBLOCK')\nmy_block.units = units.CM\nblock_ref = msp.add_block_ref('MYBLOCK')\n# Set uniform scaling for x-, y- and z-axis\nblock_ref.set_scale(0.01)\n```\n\n----------------------------------------\n\nTITLE: Using PyMuPdfBackend to Render DXF to PDF\nDESCRIPTION: Example of using PyMuPdfBackend to render a DXF file to PDF format and save it to a file.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/addons/drawing.rst#2025-04-23_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nimport ezdxf\nfrom ezdxf.addons.drawing import Frontend, RenderContext\nfrom ezdxf.addons.drawing import layout, pymupdf\n\ndoc = ezdxf.readfile(\"your.dxf\")\nmsp = doc.modelspace()\nbackend = pymupdf.PyMuPdfBackend()\nFrontend(RenderContext(doc), backend).draw_layout(msp)\n\nwith open(\"your.pdf\", \"wb\") as fp:\n    fp.write(backend.get_pdf_bytes(layout.Page(0, 0))\n```\n\n----------------------------------------\n\nTITLE: Setting Linetype Scale for DXF Entities\nDESCRIPTION: Shows how to set and get the linetype scale (ltscale) attribute which controls the size of the linetype pattern. Default value is 1.0.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/common_graphical_attributes.rst#2025-04-23_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nentity.dxf.ltscale = 2.0\n```\n\nLANGUAGE: Python\nCODE:\n```\nscale = entity.dxf.ltscale\n```\n\n----------------------------------------\n\nTITLE: Controlling Layer State in ezdxf\nDESCRIPTION: This code demonstrates how to control the state of a layer by turning it off. Other methods include on(), freeze(), and thaw() to manage layer visibility.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/usage_for_beginners.rst#2025-04-23_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nmy_layer.off()\n```\n\n----------------------------------------\n\nTITLE: Adding Leader Lines to MULTILEADER in Python using ezdxf\nDESCRIPTION: This snippet demonstrates how to add leader lines to the left and right side of a BLOCK in a MULTILEADER entity. The leader line vertices are defined in render UCS coordinates.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/mleader.rst#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nml_builder.add_leader_line(\n    mleader.ConnectionSide.left,\n    [Vec2(-20, 0), Vec2(-10, 0)],\n)\nml_builder.add_leader_line(\n    mleader.ConnectionSide.right,\n    [Vec2(20, 0), Vec2(10, 0)],\n)\n```\n\n----------------------------------------\n\nTITLE: Loading and Using Custom Hatch Patterns in Python with ezdxf\nDESCRIPTION: Illustrates how to load custom hatch patterns from a .pat file and apply them to a hatch entity in ezdxf. The code demonstrates parsing a pattern file, creating a hatch with a custom pattern, and applying it to a polyline boundary.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/hatch.rst#2025-04-23_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nfrom ezdxf.tools import pattern\n\nEXAMPLE = \"\"\"; a pattern file\n\n*SOLID, Solid fill\n45, 0,0, 0,.125\n*ANSI31, ANSI Iron, Brick, Stone masonry\n45, 0,0, 0,.125\n*ANSI32, ANSI Steel\n45, 0,0, 0,.375\n45, .176776695,0, 0,.375\n*ANSI33, ANSI Bronze, Brass, Copper\n45, 0,0, 0,.25\n45, .176776695,0, 0,.25, .125,-.0625\n*ANSI34, ANSI Plastic, Rubber\n45, 0,0, 0,.75\n45, .176776695,0, 0,.75\n45, .353553391,0, 0,.75\n45, .530330086,0, 0,.75\n\"\"\"\n\nhatch = msp.add_hatch()\n# load your pattern file from the file system as string:\n# with open(\"pattern_file.pat\", \"rt\") as fp:\n#      EXAMPLE = fp.read()\npatterns = pattern.parse(EXAMPLE)\n\nhatch.set_pattern_fill(\n    \"MyPattern\",\n    color=7,\n    angle=0,  # the overall rotation of the pattern in degrees\n    scale=1.0,  # overall scaling of the pattern\n    style=0,  # normal hatching style\n    pattern_type=0,  # user-defined\n    # pattern name without the preceding asterisk\n    definition=patterns[\"ANSI34\"],  \n)\npoints = [(0, 0), (10, 0), (10, 10), (0, 10)]\nhatch.paths.add_polyline_path(points)\nmsp.add_lwpolyline(points, close=True, dxfattribs={\"color\": 1})\n```\n\n----------------------------------------\n\nTITLE: Initializing DXF Document with Standard Styles\nDESCRIPTION: Demonstrates how to initialize a new DXF document with standard text styles and linetypes by using the setup=True parameter when creating a new document.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/text.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndoc = ezdxf.new('R12', setup=True)\n```\n\n----------------------------------------\n\nTITLE: Creating a 1:1 Scale Viewport in Paperspace with ezdxf\nDESCRIPTION: Adds a viewport to display modelspace content at a 1:1 scale. The viewport is positioned at center point (14.5, 2.5) with a 5x5 size, displaying the model content centered at (12.5, 7.5) with a view height of 5 units.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/psp_viewports.rst#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\npaperspace.add_viewport(\n    center=(14.5, 2.5),\n    size=(5, 5),\n    view_center_point=(12.5, 7.5),\n    view_height=5,\n)\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Font Cache in Python\nDESCRIPTION: Code snippet demonstrating how to rebuild the ezdxf font cache when new fonts are added to the system or to the support directories. This is necessary for ezdxf to recognize newly added fonts.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tools/fonts.rst#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport ezdxf\nfrom ezdxf.fonts import fonts\n\nfonts.build_system_font_cache()\n```\n\n----------------------------------------\n\nTITLE: Setting User-Defined Text Location for Dimensions in Python using ezdxf\nDESCRIPTION: This snippet shows how to set a user-defined location for dimension text. The 'location' parameter specifies the midpoint of the measurement text relative to the origin.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/linear_dimension.rst#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nmsp.add_linear_dim(\n    base=(3, 2), p1=(3, 0), p2=(6, 0), location=(4, 4)\n).render()\n```\n\n----------------------------------------\n\nTITLE: Setting Layer Color in ezdxf\nDESCRIPTION: This code shows how to set the color of a layer using the color property. The color value is a small integer (1-255) representing an AutoCAD Color Index (ACI) value.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/usage_for_beginners.rst#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nmy_layer.color = 1\n```\n\n----------------------------------------\n\nTITLE: Setting $MEASUREMENT Header Variable in ezdxf\nDESCRIPTION: Demonstrates setting the $MEASUREMENT header variable, which controls whether the drawing uses imperial or metric hatch pattern and linetype files. The example sets it to metric (value 1).\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/concepts/units.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndoc.header['$MEASUREMENT'] = 1\n```\n\n----------------------------------------\n\nTITLE: Calculating Modelspace Extents with Cache in Python using ezdxf\nDESCRIPTION: This snippet shows how to calculate the extents of the modelspace using ezdxf.bbox module with a Cache object. It demonstrates that for a single calculation, caching may not provide performance benefits.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/bbox.rst#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom pathlib import Path\nimport ezdxf\nfrom ezdxf import bbox\n\nCADKitSamples = Path(ezdxf.EZDXF_TEST_FILES) / 'CADKitSamples'\n\ndoc = ezdxf.readfile(CADKitSamples / 'A_000217.dxf')\ncache = bbox.Cache()\next = bbox.extents(doc.modelspace(), cache)\n\nprint(cache)\n```\n\n----------------------------------------\n\nTITLE: Creating a TablePainter Instance\nDESCRIPTION: Initializes a new TablePainter object with specified dimensions, including the number of rows and columns, and the width and height of each cell.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/addons/tablepainter.rst#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ntable = TablePainter(\n    insert=(0, 0), nrows=4, ncols=4, cell_width=6.0, cell_height=2.0\n)\n```\n\n----------------------------------------\n\nTITLE: Creating and Using GfxAttribs Objects with ezdxf\nDESCRIPTION: This example demonstrates how to create and use GfxAttribs objects to define DXF entity attributes. It shows initialization, applying attributes to new entities, updating existing entities, and resetting attribute values.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tools/gfxattribs.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport ezdxf\nfrom ezdxf.gfxattribs import GfxAttribs\n\ndoc = ezdxf.new()\nmsp = doc.modelspace()\n\nattribs = GfxAttribs(layer=\"MyLayer\", color=ezdxf.colors.RED)\nline = msp.add_line((0, 0), (1, 0), dxfattribs=attribs)\ncircle = msp.add_circle((0, 0), radius=1.0, dxfattribs=attribs)\n\n# Update DXF attributes of existing entities:\nattribs = GfxAttribs(layer=\"MyLayer2\", color=ezdxf.colors.BLUE)\n\n# Convert GfxAttribs() to dict(), but this method cannot reset\n# attributes to the default values like setting layer to \"0\".\nline.update_dxf_attribs(dict(attribs))\n\n# Using GfxAttribs.asdict(default_values=True), can reset attributes to the\n# default values like setting layer to \"0\", except for true_color and\n# transparency, which do not have default values, their absence is the\n# default value.\ncircle.update_dxf_attribs(attribs.asdict(default_values=True))\n\n# Remove true_color and transparency by assigning None\nattribs.transparency = None  # reset to transparency by layer!\nattribs.rgb = None\n```\n\n----------------------------------------\n\nTITLE: Retrieving XDATA from DXF Entities using ezdxf\nDESCRIPTION: This code demonstrates how to check for and retrieve XDATA from a DXF entity (in this case, a line) for a specific application ID. It prints the number of XDATA tags and their contents.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tasks/get_extended_data.rst#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nmy_app_id = \"MY_APP_1\"\nif line.has_xdata(my_app_id):\n    tags = line.get_xdata(my_app_id)\n    print(f\"{str(line)} has {len(tags)} tags of XDATA for AppID {my_app_id!r}\")\n    for tag in tags:\n        print(tag)\n```\n\n----------------------------------------\n\nTITLE: Creating Splines with Different Control Frame Interpolation Methods in Python\nDESCRIPTION: Demonstrates three different methods for calculating control points from fit points: uniform, chord, and centripetal. Each method produces a different curve shape with the same fit points.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/spline.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nmsp.add_spline_control_frame(fit_points, method='uniform', dxfattribs={'color': 1})\nmsp.add_spline_control_frame(fit_points, method='chord', dxfattribs={'color': 3})\nmsp.add_spline_control_frame(fit_points, method='centripetal', dxfattribs={'color': 5})\n```\n\n----------------------------------------\n\nTITLE: Accessing Arrow Names in Python using ezdxf\nDESCRIPTION: Demonstrates how to access arrow names from the ARROWS object in the ezdxf library. This snippet shows the recommended way to retrieve arrow types for use in CAD drawings.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/render/arrows.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport ezdxf\n\narrow = ezdxf.ARROWS.closed_filled\n```\n\n----------------------------------------\n\nTITLE: Rebuilding the Font Manager Cache in ezdxf\nDESCRIPTION: This code snippet demonstrates how to rebuild the font cache in ezdxf when new fonts are installed or new font directories are added. The rebuild process is necessary to make new fonts available to the ezdxf library.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/howto/fonts.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport ezdxf\nfrom ezdxf.fonts import fonts\n\nfonts.build_system_font_cache()\n```\n\n----------------------------------------\n\nTITLE: Handling RGB Colors for DXF Entities in Python\nDESCRIPTION: This snippet demonstrates how to work with RGB true color values for DXF entities using ezdxf, including conversion between integer and RGB tuple representations.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/howto/content.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ezdxf import colors\n\nentity.dxf.true_color = 0xFF0000\n\nentity.dxf.true_color = colors.rgb2int((0xFF, 0, 0))\nr, g, b = colors.int2rgb(entity.dxf.true_color)\n\nrgb24 = colors.DXF_DEFAULT_COLORS[aci]\nprint(f\"RGB Hex Value: #{rgb24:06X}\")\nr, g, b = colors.int2rgb(rgb24)\nprint(f\"RGB Channel Values: R={r:02X} G={g:02X} b={b:02X}\")\n\nentity.rgb = (0xFF, 0, 0)\n\nr, g, b = entity.rgb\n```\n\n----------------------------------------\n\nTITLE: SolidPython2 Integration Example\nDESCRIPTION: Demonstrates using solidpython2 with ezdxf for creating and manipulating 3D objects.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/addons/openscad.rst#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfrom ezdxf.addons import openscad\nfrom solid2 import cube, scad_render\n\nc1 = cube([10, 20, 10])\nc2 = cube([20, 10, 10])\n\n# dump OpenSCAD script as string:\nscript = scad_render(c1 + c2)\n\n# execute script and load the result as MeshTransformer instance:\nmesh = openscad.run(script)\n```\n\n----------------------------------------\n\nTITLE: Setting Tangents for a Fit-Point Spline in Python\nDESCRIPTION: Shows how to create a spline from fit points and then set the start and end tangents using DXF attributes. This approach also demonstrates how to set the spline as periodic and closed.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/spline.rst#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nspline = msp.add_spline(fit_points)\nspline.dxf.flags = spline.PERIODIC | spline.CLOSED\nspline.dxf.start_tangent = t0\nspline.dxf.end_tangent = t0\n```\n\n----------------------------------------\n\nTITLE: Creating Diameter Dimension with User-Defined Location Inside\nDESCRIPTION: This snippet shows how to place the dimension text at a user-defined location inside the circle. For user-defined locations, it's not necessary to force text inside with dimtix=1.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/diameter_dimension.rst#2025-04-23_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\ndim = msp.add_diameter_dim(\n    center=(0, 0),\n    radius=2.5,\n    location=(1, 1),\n    dimstyle=\"EZ_RADIUS\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting BLOCK Content for MULTILEADER in Python using ezdxf\nDESCRIPTION: This snippet demonstrates how to set the BLOCK content for a MULTILEADER, including scaling and alignment options. The scale factor is set to 2.0, and the alignment is set to center_extents.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/mleader.rst#2025-04-23_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nml_builder.set_content(\n    name=block.name, scale=2.0, alignment=mleader.BlockAlignment.center_extents\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Document Units in ezdxf\nDESCRIPTION: Demonstrates how to set the document/modelspace units using the units property or by modifying the $INSUNITS header variable directly. The example shows setting centimeter as the document unit.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/concepts/units.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport ezdxf\nfrom ezdxf import units\n\ndoc = ezdxf.new()\n# Set centimeter as document/modelspace units\ndoc.units = units.CM\n# which is a shortcut (including validation) for\ndoc.header['$INSUNITS'] = units.CM\n```\n\n----------------------------------------\n\nTITLE: Creating a New Block Definition in ezdxf\nDESCRIPTION: This code demonstrates how to create a new block definition in a DXF document. Blocks allow for reusing graphical elements multiple times in a drawing.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/usage_for_beginners.rst#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nmy_block = doc.blocks.new(\"MyBlock\")\n```\n\n----------------------------------------\n\nTITLE: Accessing Overridden DIMSTYLE Values in DIMENSION Entities\nDESCRIPTION: This code shows how to retrieve overridden DIMSTYLE values from DIMENSION entities using the DimstyleOverride object in ezdxf.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/howto/content.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfor dimension in msp.query('DIMENSION'):\n    dimstyle_override = dimension.override()  # requires v0.12\n    dimtol = dimstyle_override['dimtol']\n    if dimtol:\n        print(f'{str(dimension)} has tolerance values:')\n        dimtp = dimstyle_override['dimtp']\n        dimtm = dimstyle_override['dimtm']\n        print(f'Upper tolerance: {dimtp}')\n        print(f'Lower tolerance: {dimtm}')\n```\n\n----------------------------------------\n\nTITLE: Creating a Combined Hatch Pattern with Multiple Line Types in Python using ezdxf\nDESCRIPTION: This snippet demonstrates how to create a complex hatch pattern by combining two parallel hatch lines with different patterns. It uses one dashed line and one solid line with specific origins to offset them from each other.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/hatch_pattern.rst#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n# -x-x-x- snip -x-x-x-\nhatch = msp.add_hatch()\nhatch.set_pattern_fill(\n    \"MyPattern\",\n    color=7,\n    angle=0,\n    scale=1.0,\n    style=0,  # normal hatching style\n    pattern_type=0,  # user-defined\n    # [angle in degree, origin as 2d vector, offset as 2d vector, line pattern]\n    definition=[\n        [0, (0, 0), (0.3, 1), [1, -1]],  # dashed line\n        [0, (0, 0.5), (0, 1), []],  # solid line\n    ],\n)\n# -x-x-x- snip -x-x-x-\n```\n\n----------------------------------------\n\nTITLE: Retrieving XDATA Tags from a DXF Entity in Python\nDESCRIPTION: This snippet demonstrates how to check if an entity has XDATA with a specific AppID and retrieve those XDATA tags. It shows both the direct approach and the try-except alternative pattern.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/xdata.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nif entity.has_xdata(\"EZDXF\"):\n    tags = entity.get_xdata(\"EZDXF\")\n\n# or use alternatively:\ntry:\n    tags = entity.get_xdata(\"EZDXF\")\nexcept DXFValueError:\n    # XDATA for \"EZDXF\" does not exist\n    ...\n```\n\n----------------------------------------\n\nTITLE: Setting up Page Dimensions in Paperspace with ezdxf\nDESCRIPTION: Configures the paperspace layout with specific size, margins, and unit settings. Defines a paper sheet with dimensions of 24x18 inches and 1-inch margins on all sides.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/psp_viewports.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nlayout.page_setup(size=(24, 18), margins=(1, 1, 1, 1), units=\"inch\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Block Definition by Name in ezdxf\nDESCRIPTION: Demonstrates how to get a specific block definition by its name using ezdxf. It includes error handling for when the block is not found.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tasks/get_layouts.rst#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nblock = doc.blocks.get(\"MyBlock\")\nif block is None:\n    print(\"block not found.\")\n```\n\n----------------------------------------\n\nTITLE: Using ZOOM Extents Command in AutoCAD\nDESCRIPTION: This command sets the current viewport to the extents of the currently selected layout, showing all entities in the layout.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/concepts/extents_limits.rst#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nZOOM extents\n```\n\n----------------------------------------\n\nTITLE: Configuring Frontend for Image Export in Python\nDESCRIPTION: This snippet shows how to configure the frontend for image export using the ezdxf.addons.drawing module. It changes the background color to white and renders all lines in black.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/image_export.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ezdxf.addons.drawing import config\n\n# Create a new configuration and override the background and color policy\ncfg = config.Configuration()\ncfg.background_policy = config.BackgroundPolicy.WHITE\ncfg.color_policy = config.ColorPolicy.BLACK\n\n# Use the configuration when creating the frontend\nfrontend = Frontend(ctx, backend, config=cfg)\n```\n\n----------------------------------------\n\nTITLE: Converting Object Coordinate System (OCS) to World Coordinate System (WCS) in Python\nDESCRIPTION: This code snippet shows how to convert a point from Object Coordinate System (OCS) back to World Coordinate System (WCS). It first calculates the WCS basis vectors and then uses them to transform the OCS coordinates.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/concepts/ocs.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nWx = wcs_to_ocs((1, 0, 0))\nWy = wcs_to_ocs((0, 1, 0))\nWz = wcs_to_ocs((0, 0, 1))\n\ndef ocs_to_wcs(point):\n    px, py, pz = Vec3(point)  # point in OCS\n    x = px * Wx.x + py * Wx.y + pz * Wx.z\n    y = px * Wy.x + py * Wy.y + pz * Wy.z\n    z = px * Wz.x + py * Wz.y + pz * Wz.z\n    return Vec3(x, y, z)\n```\n\n----------------------------------------\n\nTITLE: Defining Circle Class in Python for ezdxf\nDESCRIPTION: This snippet defines the Circle class, which represents a CIRCLE entity in ezdxf. It includes attributes for the center point and radius, as well as methods for manipulating and transforming the circle.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfentities/circle.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Circle:\n    dxf.center = None  # Center point of circle (2D/3D Point in OCS)\n    dxf.radius = None  # Radius of circle (float)\n\n    def vertices(self):\n        # Method implementation\n        pass\n\n    def flattening(self):\n        # Method implementation\n        pass\n\n    def transform(self):\n        # Method implementation\n        pass\n\n    def translate(self):\n        # Method implementation\n        pass\n\n    def to_ellipse(self):\n        # Method implementation\n        pass\n\n    def to_spline(self):\n        # Method implementation\n        pass\n```\n\n----------------------------------------\n\nTITLE: Retrieving DXF Entity Type with dxftype()\nDESCRIPTION: Demonstrates how to get the DXF entity type from a line entity created in modelspace. The dxftype() method returns the uppercase string representation of the entity type as defined in the DXF reference.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tasks/get_entity_type.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ne = msp.add_line((0, 0), (1, 0))\nassert e.dxftype() == \"LINE\"\n```\n\n----------------------------------------\n\nTITLE: Selecting Entities within a Circle in Python using ezdxf\nDESCRIPTION: This snippet shows how to select entities around a circle entity within a specified radius using the Circle selection shape and bbox_overlap function from ezdxf.select.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/entity_selection.rst#2025-04-23_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nentity = msp.query(\"CIRCLE\").first\ncircle = select.Circle(entity.dxf.center, radius=60)\nfor entity in select.bbox_overlap(circle, msp):\n    print(str(entity))\n```\n\n----------------------------------------\n\nTITLE: Analyzing Junctions in Edge Structures\nDESCRIPTION: This snippet demonstrates how to analyze the complexity of edge structures by examining the degree of vertices, particularly junctions.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/edges.rst#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n# load data\ndoc = ezdxf.readfile(\"junctions.dxf\")\n\nprint(deposit.degree_counter())\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Block Attributes in INSERT Entities using ezdxf\nDESCRIPTION: Shows how to iterate over all block attributes in an INSERT entity, printing each attribute's tag and text value.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tasks/get_entity_content.rst#2025-04-23_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nfor attrib in insert.attribs:\n    print(f\"{attrib.dxf.tag} = {attrib.dxf.text}\")\n```\n\n----------------------------------------\n\nTITLE: Property Override in ezdxf Drawing\nDESCRIPTION: Shows how to override properties of DXF entities by creating a custom Frontend class and overriding the override_properties method.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/howto/drawing-addon.rst#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nclass MyFrontend(Frontend):\n    def override_properties(self, entity: DXFGraphic, properties: Properties) -> None:\n        # remove alpha channel from all entities, \"#RRGGBBAA\"\n        properties.color = properties.color[:7]\n\nMyFrontend(ctx, out).draw_layout(msp, finalize=True)\n```\n\n----------------------------------------\n\nTITLE: Storing Data in XDataUserList with ezdxf\nDESCRIPTION: This snippet demonstrates how to store custom data in an XDataUserList named 'AppendedPoints' using the ezdxf library. It shows the process of adding data and retrieving it from an entity.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/custom_data.rst#2025-04-23_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nline.set_xdata('EZDXF', {'DefaultDict': {'key': 'value'}})\nlist1 = XDataUserList('AppendedPoints')\nlist1.append((1, 2, 3))\nline.set_xdata('EZDXF', list1)\n```\n\nLANGUAGE: Python\nCODE:\n```\nxdata = line.get_xdata('EZDXF')\ndefault_dict = xdata.get('DefaultDict')\nappended_points = xdata.get('AppendedPoints')\nif isinstance(appended_points, XDataUserList):\n    print(appended_points[0])\n```\n\n----------------------------------------\n\nTITLE: Exporting DXF Content to PNG in Python\nDESCRIPTION: This snippet shows how to export DXF content to PNG format using the ezdxf.addons.drawing.pymupdf module. It uses the same PyMuPdfBackend as PDF export but calls a different method to get PNG data bytes.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/image_export.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# ... (previous steps remain the same)\n\n# 6. Get the PNG rendering as bytes\npng_bytes = backend.get_pixmap(page, dpi=300, fmt=\"png\")\n```\n\n----------------------------------------\n\nTITLE: Setting BLOCK Attributes for MULTILEADER in Python using ezdxf\nDESCRIPTION: This snippet illustrates how to set attributes for a BLOCK in a MULTILEADER entity. The attributes are addressed by their DXF 'tag' and can have their text content and width factor changed.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/mleader.rst#2025-04-23_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nml_builder.set_attribute(\"ONE\", \"Data1\")\nml_builder.set_attribute(\"TWO\", \"Data2\")\n```\n\n----------------------------------------\n\nTITLE: Simplified DXF Rendering using MatplotlibBackend\nDESCRIPTION: A simplified workflow for rendering DXF to image using the qsave function from the matplotlib module, providing less control but easier implementation.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/addons/drawing.rst#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nfrom ezdxf import recover\nfrom ezdxf.addons.drawing import matplotlib\n\n# Exception handling left out for compactness:\ndoc, auditor = recover.readfile('your.dxf')\nif not auditor.has_errors:\n    matplotlib.qsave(doc.modelspace(), 'your.png')\n```\n\n----------------------------------------\n\nTITLE: Adding a Block Attribute in ezdxf\nDESCRIPTION: This snippet shows how to add a block attribute (ATTRIB entity) to an existing block reference. Block attributes are text annotations with a tag and text value. The code creates an attribute and sets its placement location. Block attributes are a subtype of TEXT entities and inherit their functionality.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tasks/add_blockrefs.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmy_attribute = my_block_ref.add_attrib(\"MY_TAG\", \"VALUE_STR\")\nmy_attribute.set_placement(location)\n```\n\n----------------------------------------\n\nTITLE: Storing Binary Data with BinaryRecord in ezdxf\nDESCRIPTION: This example shows how to use the BinaryRecord helper class to store and retrieve arbitrary binary data in DXF files using ezdxf.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/custom_data.rst#2025-04-23_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nfrom ezdxf.urecord import BinaryRecord\n\nrootdict = doc.rootdict\nwith BinaryRecord(rootdict, 'BinaryData') as binary_data:\n    binary_data.data = b'Binary Data'\n\nprint(rootdict.has_entry('BinaryData'))\n```\n\nLANGUAGE: Python\nCODE:\n```\nrootdict = doc.rootdict\nwith BinaryRecord(rootdict, 'BinaryData') as binary_data:\n    print(binary_data.data)\n\nbinary_record = rootdict.get('BinaryData')\nif binary_record is not None:\n    print(binary_record.dxftype())\n```\n\n----------------------------------------\n\nTITLE: Creating Custom MLEADERSTYLE in Python using ezdxf\nDESCRIPTION: This code demonstrates how to create a custom MLEADERSTYLE by duplicating the 'Standard' style and modifying its properties. In this case, it sets the MTEXT style to 'OpenSans'.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/mleader.rst#2025-04-23_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\nmy_style = doc.mleader_styles.duplicate_entry(\"Standard\", \"MY_STYLE\")\nmy_style.set_mtext_style(\"OpenSans\")\n```\n\n----------------------------------------\n\nTITLE: Set Operations with Edge Collections\nDESCRIPTION: Shows how to perform set operations on edges, specifically subtracting a found loop from the source edges collection.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/edges.rst#2025-04-23_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nedges = list(edgesmith.edges_from_entities_2d(lines))\ndeposit = edgeminer.Deposit(edges)\n\n# returns the first loop found\nfirst_loop = edgeminer.find_loop(deposit)\nedges = list(set(edges) - set(first_loop))\n\n# or use this helper function:\nedges = edgeminer.subtract_edges(edges, first_loop)\n```\n\n----------------------------------------\n\nTITLE: Accessing and Modifying Layer RGB Values in Python\nDESCRIPTION: Example of how to get and set the true color RGB values of a Layer object using the rgb property. This is the recommended method instead of directly accessing the dxf.true_color attribute.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tables/layer_table_entry.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nlayer.rgb = (30, 40, 50)\nr, g, b = layer.rgb\n```\n\n----------------------------------------\n\nTITLE: Deleting Block Definition in ezdxf\nDESCRIPTION: Shows how to safely delete a block definition with error handling for blocks that are in use or are special/anonymous blocks.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tasks/delete_layouts.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    doc.blocks.delete_block(name, safe=True)\nexcept ezdxf.DXFBlockInUseError:\n    print(f\"cannot delete block '{name}'\")\n```\n\n----------------------------------------\n\nTITLE: Rendering a DXF File to PNG Using Command Line\nDESCRIPTION: Command-line example showing how to render a DXF file to a PNG image using the draw_cad.py script.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/addons/drawing.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ ./draw_cad.py <my_file.dxf> --out image.png\n```\n\n----------------------------------------\n\nTITLE: Customizing Text Properties for Linear Dimension in Python using ezdxf\nDESCRIPTION: This snippet illustrates how to customize text properties of a linear dimension using ezdxf. It sets the text style, height, and color of the dimension text using the override parameter.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/linear_dimension.rst#2025-04-23_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nmsp.add_linear_dim(\n    base=(3, 2),\n    p1=(3, 0),\n    p2=(6, 0),\n    override={\n        \"dimtxsty\": \"Standard\",\n        \"dimtxt\": 0.35,\n        \"dimclrt\": 1,\n    }\n).render()\n```\n\n----------------------------------------\n\nTITLE: Accessing Block Content from MLEADER Entities in Python using ezdxf\nDESCRIPTION: Retrieves block reference information from MLEADER entities by accessing the block attribute in the context object. Prints the insertion point if a block is present.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tasks/get_entity_content.rst#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfor mleader in msp.query(\"MLEADER MULTILEADER\"):\n    block = mleader.context.block\n    if block:\n        print(block.insert)  # insert location\n```\n\n----------------------------------------\n\nTITLE: Exporting Modelspace Content to Scale with Matplotlib in Python\nDESCRIPTION: This function exports the modelspace content to a specific paper size and scale using Matplotlib. It sets up the figure, calculates render limits, and saves the output as a PDF file. It's useful for rendering content to a PDF with a specific paper size and scale.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/howto/drawing-addon.rst#2025-04-23_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\ndef export_to_scale(\n    paper_size: tuple[float, float] = (8.5, 11),\n    origin: tuple[float, float] = (0, 0),\n    scale: float = 1,\n    dpi: int = 300,\n):\n    \"\"\"Render the modelspace content with to a specific paper size and scale.\n\n    Args:\n        paper_size: paper size in inches\n        origin: lower left corner of the modelspace area to render\n        scale: render scale, e.g. scale=100 means 1:100, 1m is\n            rendered as 0.01m or 1cm on paper\n        dpi: pixel density on paper as dots per inch\n\n    \"\"\"\n    ctx = RenderContext(doc)\n    fig: plt.Figure = plt.figure(dpi=dpi)\n    ax: plt.Axes = fig.add_axes([0, 0, 1, 1])\n\n    # disable all margins\n    ax.margins(0)\n\n    # get the final render limits in drawing units:\n    min_x, min_y, max_x, max_y = render_limits(\n        origin, paper_size, scale\n    )\n\n    ax.set_xlim(min_x, max_x)\n    ax.set_ylim(min_y, max_y)\n\n    out = MatplotlibBackend(ax)\n    # finalizing invokes auto-scaling by default!\n    Frontend(ctx, out).draw_layout(msp, finalize=False)\n\n    # set output size in inches:\n    fig.set_size_inches(paper_size[0], paper_size[1], forward=True)\n\n    fig.savefig(f\"image_scale_1_{scale}.pdf\", dpi=dpi)\n    plt.close(fig)\n```\n\n----------------------------------------\n\nTITLE: Setting Relative Location for Linear Dimension in Python using ezdxf\nDESCRIPTION: This snippet demonstrates how to set a relative location for a linear dimension with a leader line using the ezdxf library. It creates a dimension, sets its location relative to the center of the dimension line, and renders it.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/linear_dimension.rst#2025-04-23_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\ndim = msp.add_linear_dim(base=(3, 2), p1=(3, 0), p2=(6, 0))\ndim.set_location(location=(-1, 1), leader=True, relative=True)\ndim.render()\n```\n\n----------------------------------------\n\nTITLE: Defining MText Inline Formatting Codes in Python\nDESCRIPTION: This snippet defines constants for MText inline formatting codes used for text styling such as underline, overline, strike-through, and color changes. These codes can be used within the MText content for advanced text formatting.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfentities/mtext.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# MText Inline Codes\nUNDERLINE_START = '\\\\L'\nUNDERLINE_STOP = '\\\\l'\nOVERSTRIKE_START = '\\\\O'\nOVERSTRIKE_STOP = '\\\\o'\nSTRIKE_START = '\\\\K'\nSTRIKE_STOP = '\\\\k'\nNEW_LINE = '\\\\P'\nGROUP_START = '{'\nGROUP_END = '}'\nNBSP = '\\\\~'\n```\n\n----------------------------------------\n\nTITLE: Deleting Paperspace Layout in ezdxf\nDESCRIPTION: Demonstrates how to delete a paperspace layout and handle potential errors. The code checks for non-existent layouts and protected layouts (modelspace or last remaining paperspace).\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tasks/delete_layouts.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nname = \"MyLayout\"\ntry:\n    doc.layouts.delete(name)\nexcept ezdxf.DXFKeyError:\n    print(f\"layout '{name}' not found\")\nexcept ezdxf.DXFValueError:\n    print(f\"layout '{name}' cannot be deleted\")\n    # modelspace or last remaining paperspace layout\n```\n\n----------------------------------------\n\nTITLE: Creating Stacked Text in MTextEditor\nDESCRIPTION: Demonstrates how to create stacked text (fractions) with different styles and formatting options.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/mtext.rst#2025-04-23_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\neditor = MTextEditor(\"Stacked text:\" + NP)\n\nstack = MTextEditor().scale_height(0.6).stack(\"1\", \"2\", \"^\")\neditor.append(\"over: \").group(str(stack)).append(NP)\n\nstack = MTextEditor().scale_height(0.6).stack(\"1\", \"2\", \"/\")\neditor.append(\"fraction: \").group(str(stack)).append(NP)\n\nstack = MTextEditor().scale_height(0.6).stack(\"1\", \"2\", \"#\")\neditor.append(\"slanted: \").group(str(stack)).append(NP)\n\nnumerator = MTextEditor().color(\"red\").append(\"1\")\nstack = MTextEditor().scale_height(0.6).stack(str(numerator), \"2\", \"#\")\neditor.append(\"color red: \").group(str(stack)).append(NP)\n\nmsp.add_mtext(str(editor), attribs)\n```\n\n----------------------------------------\n\nTITLE: Updating Modelspace Extents and Zooming in Python\nDESCRIPTION: Shows how to update the extents of the modelspace and zoom the active viewport to these extents using the appsettings and zoom modules.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/Release Notes v0.18.x.md#2025-04-23_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nimport ezdxf\nfrom ezdxf import zoom, appsettings\n\ndoc = ezdxf.readfile(\"your.dxf\")\nextents = appsettings.update_extents(doc)\n```\n\n----------------------------------------\n\nTITLE: Accessing Layer Objects in ezdxf\nDESCRIPTION: Shows how to retrieve a layer definition object from the layer table. This provides access to the layer's properties and methods for modifying its state.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/layers.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nmy_lines = doc.layers.get('MyLines')\n```\n\n----------------------------------------\n\nTITLE: Bounding Box Calculation with Stable Virtual Entities in Python using ezdxf\nDESCRIPTION: This snippet shows how to create stable virtual entities by disassembling entities first, which can lead to more cache hits. It demonstrates the use of recursive_decompose and compares results with and without UUID for stable virtual entities.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/bbox.rst#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom ezdxf import disassemble\n\nentities = list(disassemble.recursive_decompose(msp))\ncache = bbox.Cache(uuid=False)\n\nbbox.extents(entities, cache)\nprint(cache)\n\nbbox.extents(entities, cache)\nprint(cache)\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Header Variables in ezdxf\nDESCRIPTION: Shows how to store custom integer values in the HEADER section of a DXF file using the $USERI1 variable. Custom integer variables range from $USERI1 to $USERI5, while floating-point values use $USERR1 to $USERR5.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tasks/add_custom_data.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndoc.header[\"$USERI1\"] = 17\n```\n\n----------------------------------------\n\nTITLE: Checking and Setting Spline Closure in Python\nDESCRIPTION: Demonstrates how to check if a spline is closed and how to open or close a spline. A closed spline connects the last point back to the first point.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/spline.rst#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nif spline.closed:\n    # this spline is closed\n    pass\n\n# close spline\nspline.closed = True\n\n# open spline\nspline.closed = False\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Entity Color in DXF using Python\nDESCRIPTION: This code shows how to get and set entity colors using ACI (AutoCAD Color Index) values in ezdxf.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/howto/content.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\naci = entity.dxf.color\n\nlayer = doc.layers.get(entity.dxf.layer)\naci = layer.get_color()\n\nentity.dxf.color = 1\n```\n\n----------------------------------------\n\nTITLE: Converting MESH and POLYFACE Entities using MeshTransformer\nDESCRIPTION: Demonstrates the use of MeshTransformer class to convert MESH and POLYFACE entities from a source file into new DXF entities in the target document.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/addons/iterdxf.rst#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom ezdxf.render import MeshTransformer\n\n# mesh is MESH from a big source file\nt = MeshTransformer.from_mesh(mesh)\n# create a new MESH entity from MeshTransformer\nt.render(msp)\n\n# polyface is POLYFACE from a big source file\nt = MeshTransformer.from_polyface(polyface)\n# create a new POLYMESH entity from MeshTransformer\nt.render_polyface(msp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Arrowheads for MULTILEADER in Python using ezdxf\nDESCRIPTION: This snippet shows how to set the arrowhead properties for a MULTILEADER entity. It specifies the arrow type and size, which will be applied to all leader lines.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/mleader.rst#2025-04-23_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nfrom ezdxf.render import ARROWS\nml_builder.set_arrow_properties(name=ARROWS.closed_blank, size=8.0)\n```\n\n----------------------------------------\n\nTITLE: Exporting Matplotlib Figure with Specific Pixel Density in Python\nDESCRIPTION: This code snippet demonstrates how to use the set_pixel_density function to export a Matplotlib figure with a specific pixel density. It sets 100 pixels per drawing unit and saves the figure as a PNG file.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/howto/drawing-addon.rst#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n# export image with 100 pixels per drawing unit = 500x300 pixels\nset_pixel_density(fig, ax, 100)\nfig.savefig(\"box_500x300.png\")\nplt.close(fig)\n```\n\n----------------------------------------\n\nTITLE: Selecting Entities Crossing a Fence in Python using ezdxf\nDESCRIPTION: This snippet shows how to select entities whose bounding boxes intersect an open polyline (fence) using the bbox_crosses_fence function from the ezdxf.select module.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/entity_selection.rst#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfor entity in select.bbox_crosses_fence([(83, 101), (186, 193), (300, 107)], msp):\n    print(str(entity))\n```\n\n----------------------------------------\n\nTITLE: Generating DXF R12 File with Circles Using r12writer in Python\nDESCRIPTION: This example uses the r12writer add-on to create a simple DXF R12 file containing multiple circles with random positions. It demonstrates how to efficiently write DXF content without in-memory structures.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom random import random\nfrom ezdxf.addons import r12writer\n\nMAX_X_COORD = 1000\nMAX_Y_COORD = 1000\n\nwith r12writer(\"many_circles.dxf\") as doc:\n    for _ in range(100000):\n        doc.add_circle((MAX_X_COORD*random(), MAX_Y_COORD*random()), radius=2)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Default Dimension Text Style in ezdxf\nDESCRIPTION: Demonstrates how to configure the default dimension text style by setting up default styles in a drawing.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/options.rst#2025-04-23_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nimport ezdxf\nfrom ezdxf.tool.standard import setup_drawing\n\ndoc = ezdxf.readfile(\"your.dxf\")\nsetup_drawing(doc)\n```\n\n----------------------------------------\n\nTITLE: Setting Predefined User Variables in DXF Header (Python)\nDESCRIPTION: Sets predefined user variables in the DXF header section. Uses USERI1 for integer and USERR1 for float values.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/custom_data.rst#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndoc.header['$USERI1'] = 4711\ndoc.header['$USERR1'] = 3.1415\n```\n\n----------------------------------------\n\nTITLE: Using DXFBackend to Render a Paperspace Layout into Modelspace\nDESCRIPTION: Example of using DXFBackend to render a paperspace layout into modelspace of a new DXF document.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/addons/drawing.rst#2025-04-23_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nimport ezdxf\nfrom ezdxf.addons.drawing import Frontend, RenderContext\nfrom ezdxf.addons.drawing import layout, dxf\n\ndoc = ezdxf.readfile(\"your.dxf\")\nlayout1 = doc.paperspace(\"Layout1\")\noutput_doc = ezdxf.new()\noutput_msp = output_doc.modelspace()\n\nbackend = dxf.DXFBackend(output_msp)\nFrontend(RenderContext(doc), backend).draw_layout(layout1)\n\noutput_doc.saveas(\"layout1_in_modelspace.dxf\")\n```\n\n----------------------------------------\n\nTITLE: Using PlotterBackend to Render DXF to HPGL/2\nDESCRIPTION: Example of using PlotterBackend to render a DXF papserspace layout to HPGL/2 format and save it to a file.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/addons/drawing.rst#2025-04-23_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nimport ezdxf\nfrom ezdxf.addons.drawing import Frontend, RenderContext\nfrom ezdxf.addons.drawing import layout, hpgl2\n\ndoc = ezdxf.readfile(\"your.dxf\")\npsp = doc.paperspace(\"Layout1\")\nbackend = hpgl2.PlotterBackend()\nFrontend(RenderContext(doc), backend).draw_layout(psp)\npage = layout.Page.from_dxf_layout(psp)\n\nwith open(\"your.plt\", \"wb\") as fp:\n    fp.write(backend.normal_quality(page)\n```\n\n----------------------------------------\n\nTITLE: Saving a DXF Document with the Same Filename in ezdxf\nDESCRIPTION: This code shows how to save changes to a DXF document using the same filename it was loaded with. This overwrites the original file.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/usage_for_beginners.rst#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ndoc.save()\n```\n\n----------------------------------------\n\nTITLE: Accessing LWPOLYLINE Points as Tuples in Python\nDESCRIPTION: Demonstrates how to access individual points of an LWPOLYLINE entity. Each point is returned as a 5-tuple containing x, y, start_width, end_width, and bulge values.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/lwpolyline.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfirst_point = line[0]\nx, y, start_width, end_width, bulge = first_point\n```\n\n----------------------------------------\n\nTITLE: Adding ezdxf Resources to Existing DXF Document\nDESCRIPTION: This snippet shows how to add all ezdxf-specific resources (line types, text styles, dimension styles) to an existing DXF document.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/angular_dimension.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport ezdxf\nfrom ezdxf.tools.standards import setup_drawing\n\ndoc = ezdxf.readfile(\"your.dxf\")\nsetup_drawing(doc, topics=\"all\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Layout Names in ezdxf\nDESCRIPTION: Demonstrates how to get all paperspace and modelspace layout names using ezdxf. The first method returns names in arbitrary order, while the second returns names in the tab-order of CAD applications.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tasks/get_layouts.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nlayout_names = doc.layout_names()\n```\n\nLANGUAGE: Python\nCODE:\n```\nlayout_names = doc.layout_names_in_taborder()\n```\n\n----------------------------------------\n\nTITLE: Creating Ordinate Dimensions with Local Feature Locations in Python using ezdxf\nDESCRIPTION: This snippet shows how to use a render UCS for defining ordinate dimensions with local coordinates. It includes creating a rotated rectangle, setting up a custom dimension style, and adding dimensions with local feature locations.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/ordinate_dimension.rst#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport ezdxf\nfrom ezdxf.math import Vec3, UCS\nfrom ezdxf.render import forms\n\ndoc = ezdxf.new(setup=True)\nmsp = doc.modelspace()\n\n# Create a special DIMSTYLE for \"vertical\" centered measurement text:\ndimstyle = doc.dimstyles.duplicate_entry(\"EZDXF\", \"ORD_CENTER\")\ndimstyle.dxf.dimtad = 0  # \"vertical\" centered measurement text\n\n# Add a rectangle: width=4, height = 2.5, lower left corner is WCS(x=2, y=3),\n# rotated about 30 degrees:\norigin = Vec3(2, 3)\nmsp.add_lwpolyline(\n    forms.translate(forms.rotate(forms.box(4, 2.5), 30), origin),\n    close=True\n)\n\n# Define the rotated local render UCS.\n# The origin is the lower-left corner of the rectangle and the axis are\n# aligned to the rectangle edges:\n# The y-axis \"uy\" is calculated automatically by the right-hand rule.\nucs = UCS(origin, ux=Vec3.from_deg_angle(30), uz=(0, 0, 1))\n\n# Add a x-type ordinate DIMENSION with local feature locations:\n# the origin is now the origin of the UCS, which is (0, 0) the default value of\n# \"origin\" and the feature coordinates are located in the UCS:\nmsp.add_ordinate_x_dim(\n    # lower left corner\n    feature_location=(0, 0),  # feature location in the UCS\n    offset=(0.25, -2),  # # leader with a \"knee\"\n    dimstyle=\"ORD_CENTER\",\n).render(ucs=ucs)  # Important when using a render UCS!\nmsp.add_ordinate_x_dim(\n    # lower right corner\n    feature_location=(4, 0),  # feature location in the UCS\n    offset=(0.25, -2),  # leader with a \"knee\"\n    dimstyle=\"ORD_CENTER\",\n).render(ucs=ucs)  # Important when using a render UCS!\n\n# Add a y-type ordinate DIMENSION with local feature coordinates:\nmsp.add_ordinate_y_dim(\n    # lower right corner\n    feature_location=(4, 0),  # feature location in the UCS\n    offset=(2, 0.25),  # leader with a \"knee\"\n    dimstyle=\"ORD_CENTER\",\n).render(ucs=ucs)  # Important when using a render UCS!\nmsp.add_ordinate_y_dim(\n    # upper right corner\n    feature_location=(4, 2.5),  # feature location in the UCS\n    offset=(2, 0.25),  # leader with a \"knee\"\n    dimstyle=\"ORD_CENTER\",\n).render(ucs=ucs)  # Important when using a render UCS!\ndoc.saveas(\"ord_local_features.dxf\")\n```\n\n----------------------------------------\n\nTITLE: Selecting Entities by Regular Expression in Python\nDESCRIPTION: Shows how to use regular expressions to select entities based on attribute patterns.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/Release Notes v0.18.x.md#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nlines.layer.match(\"^My.*\")\n```\n\n----------------------------------------\n\nTITLE: Appending a Fit Point to an Existing Spline in Python\nDESCRIPTION: Shows how to add a new fit point to an existing spline. The spline.fit_points attribute is a list-like container that allows appending new points.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/spline.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# fit_points, control_points, knots and weights are list-like containers:\nspline.fit_points.append((2250, 2500, 0))\n```\n\n----------------------------------------\n\nTITLE: Generating a DXF R12 Drawing with Many Circles\nDESCRIPTION: Example showing how to efficiently create a DXF file containing a large number of circle entities (1,000,000) with random positions. Demonstrates the performance capabilities of the r12writer module.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/addons/r12writer.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom random import random\nfrom ezdxf.addons import r12writer\n\nMAX_X_COORD = 1000.0\nMAX_Y_COORD = 1000.0\nCIRCLE_COUNT = 1000000\n\nwith r12writer(\"many_circles.dxf\") as dxf:\n    for i in range(CIRCLE_COUNT):\n        dxf.add_circle((MAX_X_COORD*random(), MAX_Y_COORD*random()), radius=2)\n```\n\n----------------------------------------\n\nTITLE: Creating Extension Dictionaries for DXF Entities in ezdxf\nDESCRIPTION: Shows how to create an extension dictionary for a DXF entity. Extension dictionaries serve as key/value storage for attaching custom data to entities, typically containing references to Dictionary and XRecord entities.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tasks/add_custom_data.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npoint = msp.add_point((10, 10))\nxdict = point.new_extension_dict()\n```\n\n----------------------------------------\n\nTITLE: Setting Background Color for MText in Python with ezdxf\nDESCRIPTION: Demonstrates how to set a background color for an MText entity, including scaling the background area.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/mtext.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nmtext.set_bg_color(2, scale=1.5)\n```\n\n----------------------------------------\n\nTITLE: Creating Basic SOLID Entity in Python with ezdxf\nDESCRIPTION: Demonstrates creating a SOLID entity with four vertices in the default order. Due to DXF format quirks, the last two vertices are stored in reverse order, resulting in an unexpected shape.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfentities/solid.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nmsp.add_solid([(0, 0), (10, 0), (10, 10), (0, 10)])\n```\n\n----------------------------------------\n\nTITLE: Custom Transformation Using GDAL in Python\nDESCRIPTION: Implements a custom coordinate transformation function using the GDAL/OSR package. Transforms unprojected WGS84 coordinates to 2D World Mercator (EPSG:3395) coordinates and applies it to a GeoProxy object.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/geo.rst#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom osgeo import osr\nfrom ezdxf.math import Vec3\n\n# GPS track in WGS84, load_gpx_track() code see above\ngpx_points = list(load_gpx_track('track1.gpx'))\n\n# Create source coordinate system:\nsrc_datum = osr.SpatialReference()\nsrc_datum.SetWellKnownGeoCS('WGS84')\n\n# Create target coordinate system:\ntarget_datum = osr.SpatialReference()\ntarget_datum.SetWellKnownGeoCS('EPSG:3395')\n\n# Create transformation object:\nct = osr.CoordinateTransform(src_datum, target_datum)\n\n# Create GeoProxy() object:\ngeo_proxy = GeoProxy.parse({\n    'type': 'LineString',\n    'coordinates': gpx_points\n})\n\n# Apply a custom transformation function to all coordinates:\ngeo_proxy.apply(lambda v: Vec3(ct.TransformPoint(v.x, v.y)))\n```\n\n----------------------------------------\n\nTITLE: Setting Leader Properties for MULTILEADER in Python using ezdxf\nDESCRIPTION: This code demonstrates how to set leader properties such as color, linetype, and lineweight for a MULTILEADER entity. These properties apply to all leader lines in the entity.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/mleader.rst#2025-04-23_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nml_builder.set_leader_properties(\n    color=colors.MAGENTA,\n    linetype=\"DASHEDX2\",\n    lineweight=70,\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Pixel Density for Matplotlib Figure Export in Python\nDESCRIPTION: This function sets the pixel density for a Matplotlib figure and axes. It calculates the figure size in inches based on the desired pixels per drawing unit (ppu) and the current axis limits.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/howto/drawing-addon.rst#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\ndef set_pixel_density(fig: plt.Figure, ax: plt.Axes, ppu: int):\n    \"\"\"Argument `ppu` is pixels per drawing unit.\"\"\"\n    xmin, xmax = ax.get_xlim()\n    width = xmax - xmin\n    ymin, ymax = ax.get_ylim()\n    height = ymax - ymin\n    dpi = fig.dpi\n    width_inch = width * ppu / dpi\n    height_inch = height * ppu / dpi\n    fig.set_size_inches(width_inch, height_inch)\n```\n\n----------------------------------------\n\nTITLE: Working with Linetypes in ezdxf\nDESCRIPTION: Shows how to set and get linetype attributes for DXF entities. Includes caution about ensuring linetype definitions exist in the document.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/common_graphical_attributes.rst#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nentity.dxf.linetype = \"DASHED\"  # linetype DASHED must exist!\n```\n\nLANGUAGE: Python\nCODE:\n```\nname = entity.dxf.linetype\n```\n\nLANGUAGE: Python\nCODE:\n```\ndoc = ezdxf.new(\"R2010\", setup=True)\n```\n\n----------------------------------------\n\nTITLE: Exporting DXF Content to PLT/HPGL2 in Python\nDESCRIPTION: This snippet demonstrates how to export DXF content to PLT/HPGL2 format using the ezdxf.addons.drawing.hpgl2 module. It uses the PlotterBackend which is designed to print on white paper.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/image_export.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom ezdxf.addons.drawing import RenderContext, Frontend\nfrom ezdxf.addons.drawing.hpgl2 import PlotterBackend\n\n# ... (previous steps remain the same)\n\n# 2. Create the PLT/HPGL2 backend\nbackend = PlotterBackend()\n\n# ... (steps 3-5 remain the same)\n\n# 6. Get the HPGL2 rendering as bytes\nplt_bytes = backend.normal_quality(page)\n```\n\n----------------------------------------\n\nTITLE: Defining PdfDefinition Class in Python\nDESCRIPTION: The PdfDefinition class is a subclass of UnderlayDefinition specific for PDF underlay files. It has a DXF type of 'PDFDEFINITION' and can be created using factory functions.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfobjects/underlaydef.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass PdfDefinition(UnderlayDefinition):\n    # PDF underlay file\n```\n\n----------------------------------------\n\nTITLE: Coordinate Transformation in ezdxf Drawing\nDESCRIPTION: Implements coordinate transformation between modelspace and image coordinates using Matrix44 transformations.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/howto/drawing-addon.rst#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ndef get_wcs_to_image_transform(\n    ax: plt.Axes, image_size: tuple[int, int]\n) -> Matrix44:\n    x1, x2 = ax.get_xlim()\n    y1, y2 = ax.get_ylim()\n    data_width, data_height = x2 - x1, y2 - y1\n    image_width, image_height = image_size\n    return (\n        Matrix44.translate(-x1, -y1, 0)\n        @ Matrix44.scale(\n            image_width / data_width, -image_height / data_height, 1.0\n        )\n        @ Matrix44.translate(0, image_height + 1, 0)\n    )\n```\n\n----------------------------------------\n\nTITLE: Creating Angular Dimension by Two Lines\nDESCRIPTION: This example shows how to create an angular dimension for an angle defined by two lines. It sets up geometric parameters and uses the add_angular_dim_2l method.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/angular_dimension.rst#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nimport ezdxf\n\ndoc = ezdxf.new(setup=True)\nmsp = doc.modelspace()\n\n# Setup the geometric parameters for the DIMENSION entity:\nbase = (5.8833, -6.3408)  # location of the dimension line\np1 = (2.0101, -7.5156)  # start point of 1st leg\np2 = (2.7865, -10.4133)  # end point of 1st leg\np3 = (6.7054, -7.5156)  # start point of 2nd leg\np4 = (5.9289, -10.4133)  # end point of 2nd leg\n\n# Draw the lines for visualization, not required to create the\n# DIMENSION entity:\nmsp.add_line(p1, p2)\nmsp.add_line(p3, p4)\n\n# Add an angular DIMENSION defined by two lines, the measurement text is\n# placed at the default location above the dimension line:\ndim = msp.add_angular_dim_2l(\n    base=base,  # defines the location of the dimension line\n    line1=(p1, p2),  # start leg of the angle\n    line2=(p3, p4),  # end leg of the angle\n    dimstyle=\"EZ_CURVED\",  # default angular dimension style\n)\n\n# Necessary second step to create the dimension line geometry:\ndim.render()\ndoc.saveas(\"angular_dimension_2l.dxf\")\n```\n\n----------------------------------------\n\nTITLE: Accessing Layout Manager in Python using ezdxf\nDESCRIPTION: Demonstrates how to access the layout manager from a Drawing object in ezdxf. The layout manager is used to rename a layout from 'Layout1' to 'PlanView'.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/layouts/layout_manager.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndoc.layouts.rename(\"Layout1\", \"PlanView\")\n```\n\n----------------------------------------\n\nTITLE: Getting Measurement Information from DIMENSION Entities in Python using ezdxf\nDESCRIPTION: Extracts dimension type and actual measurement values from DIMENSION entities. The get_measurement() method returns the real measurement determined by definition points.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tasks/get_entity_content.rst#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nfor dimension in msp.query(\"DIMENSION\"):\n    print(str(dimension))\n    print(f\"Dimension Type: {dimension.dimtype}\")\n    print(f\"Measurement: {dimension.get_measurement()}\")\n```\n\n----------------------------------------\n\nTITLE: Changing Viewport View Direction in ezdxf\nDESCRIPTION: Creates a viewport and modifies its view direction by setting the view_target_point and view_direction_vector attributes. This creates an isometric-like view direction from the coordinates (-1, -1, 1).\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/psp_viewports.rst#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nvp = paperspace.add_viewport(\n    center=(16, 10), size=(4, 4), view_center_point=(0, 0), view_height=30\n)\nvp.dxf.view_target_point = (40, 40, 0)\nvp.dxf.view_direction_vector = (-1, -1, 1)\n```\n\n----------------------------------------\n\nTITLE: Working with Default Values for DXF Attributes in Python\nDESCRIPTION: Shows how default values are returned for certain DXF attributes when they don't explicitly exist on an entity.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tasks/get_dxf_attributes.rst#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nassert line.dxf.linetype == \"BYLAYER\"\n```\n\n----------------------------------------\n\nTITLE: Finding XREF Definitions in DXF using Python\nDESCRIPTION: This snippet shows how to locate XREF definitions in the BLOCKS section of a DXF file using ezdxf.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/howto/content.rst#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfor block_layout in doc.blocks:\n```\n\n----------------------------------------\n\nTITLE: Applying Inline Formatting to MText in Python with ezdxf\nDESCRIPTION: Demonstrates how to apply inline formatting to MText content, including color changes.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/mtext.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nmtext.text = \"{\\\\C1;red text} - {\\\\C3;green text} - {\\\\C5;blue text}\"\n```\n\n----------------------------------------\n\nTITLE: Drawing Class Definition in Python\nDESCRIPTION: Core Drawing class definition that serves as the central management structure for DXF documents. Provides access to layouts, tables, sections and document properties.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/drawing/drawing.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Drawing:\n    \"\"\"The Drawing class is the central management structure of a DXF document.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Setting up ezdxf document with common prelude code\nDESCRIPTION: Basic setup code required for all ezdxf examples in this tutorial. This creates a new DXF document, adds a layer called 'ENTITY', gets the modelspace, and sets up common graphical attributes.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/dxf_primitives.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport ezdxf\nfrom ezdxf.gfxattribs import GfxAttribs\n\ndoc = ezdxf.new()\ndoc.layers.new(\"ENTITY\", color=1)\nmsp = doc.modelspace()\nattribs = GfxAttribs(layer=\"ENTITY\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Arrow Properties for Linear Dimensions in Python with ezdxf\nDESCRIPTION: This code snippet shows how to configure various arrow properties for a linear dimension using ezdxf. It sets the tick size to 0 to enable arrows, specifies the arrow size, and sets the arrow block name.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/linear_dimension.rst#2025-04-23_snippet_21\n\nLANGUAGE: Python\nCODE:\n```\nmsp.add_linear_dim(\n    base=(3, 2),\n    p1=(3, 0),\n    p2=(6, 0),\n    override={\n        \"dimtsz\": 0,  # set tick size to 0 to enable arrow usage\n        \"dimasz\": 0.25,  # arrow size in drawing units\n        \"dimblk\": \"OPEN_30\",  # arrow block name\n    }\n).render()\n```\n\n----------------------------------------\n\nTITLE: Setting New XDATA Tags on a DXF Entity in Python\nDESCRIPTION: This code shows how to set new XDATA tags for a specific AppID only if the entity doesn't already have XDATA for that AppID. It demonstrates the conditional approach to prevent overwriting existing data.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/xdata.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nif not entity.has_xdata(\"EZDXF\"):\n    entity.set_xdata(\"EZDXF\", [(1000, \"MyString\")])\n```\n\n----------------------------------------\n\nTITLE: Calculating Unit Conversion Factors in ezdxf\nDESCRIPTION: Demonstrates using the conversion_factor() helper function to calculate the scaling factor between different units and applying it to a block reference. This approach ensures proper scaling when inserting blocks with different units.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/concepts/units.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfactor = units.conversion_factor(doc.units, my_block.units)\n# factor = 100 for 1m is 100cm\n# scaling factor = 1 / factor\nblock_ref.set_scale(1.0/factor)\n```\n\n----------------------------------------\n\nTITLE: Creating Diameter Dimension with Default Text Outside\nDESCRIPTION: This snippet shows how to create a diameter dimension with the default text placement outside the circle. It uses the EZ_RADIUS dimension style which places text vertically above the dimension line.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/diameter_dimension.rst#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndim = msp.add_diameter_dim(\n    center=(0, 0),\n    radius=2.5,\n    angle=45,\n    dimstyle=\"EZ_RADIUS\"\n)\ndim.render()  # always required, but not shown in the following examples\n```\n\n----------------------------------------\n\nTITLE: Loading ACIS data from DXF entities in Python\nDESCRIPTION: Example of how to load ACIS data from 3DSOLID entities in a DXF file using the ezdxf.acis.api module.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/acis.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport ezdxf\nfrom ezdxf.acis import api as acis\n\ndoc = ezdxf.readfile(\"your.dxf\")\nmsp = doc.modelspace()\n\nfor e in msp.query(\"3DSOLID\"):\n    bodies = acis.load_dxf(e)\n    ...\n```\n\n----------------------------------------\n\nTITLE: Accessing and Manipulating Polyline Vertices in Python\nDESCRIPTION: Shows how to directly access the vertices attribute of a Polyline object to delete specific vertices. This demonstrates the basic manipulation of vertices within a polyline entity.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfentities/polyline.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# delete first and second vertex\ndel polyline.vertices[:2]\n```\n\n----------------------------------------\n\nTITLE: Writing ezdxf Configuration to Files\nDESCRIPTION: Shows how to save configuration changes to different types of config files.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/options.rst#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n# write back the default user config file \"ezdxf.ini\" in the\n# user home directory\nezdxf.options.write_home_config()\n\n# write back to the default config file \"ezdxf.ini\" in the\n# current working directory\nezdxf.options.write_file()\n\n# write back to a specific config file\nezdxf.options.write_file(\"my_config.ini\")\n# which has to be loaded manually at startup\nezdxf.options.read_file(\"my_config.ini\")\n```\n\n----------------------------------------\n\nTITLE: Creating Radius Dimension with User-Defined Location and Horizontal Text Inside\nDESCRIPTION: Example showing how to create a radius dimension with text at a user-defined location inside the circle and with horizontal text orientation by setting dimtih to 1.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/radius_dimension.rst#2025-04-23_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\ndim = msp.add_radius_dim(\n    center=(0, 0),\n    radius=2.5,\n    location=(1, 1),\n    dimstyle=\"EZ_RADIUS\",\n    override={\"dimtih\": 1},\n)\n```\n\n----------------------------------------\n\nTITLE: Loading DXF Resources with ezdxf Loader\nDESCRIPTION: Shows how to use the ezdxf.xref.Loader class to import layer definitions, linetypes, text styles, and dimension styles from a source drawing to a target drawing. The loader allows selective import of resources and handles dependency resolution automatically.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/xref_module.rst#2025-04-23_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nimport ezdxf\nfrom ezdxf import xref\n\nsdoc = ezdxf.new(setup=True)\ntdoc = ezdxf.new()\n\n# The default conflict policy is ConflictPolicy.KEEP\nloader = xref.Loader(sdoc, tdoc)\n\n# Load all layers:\nloader.load_layers([layer.dxf.name for layer in sdoc.layers])\n\n# Load specific linetypes:\nloader.load_linetypes([\"CENTER\", \"DASHED\", \"DASHDOT\"])\n\n# Load specific text style:\nloader.load_text_styles([\"OpenSans\", \"LiberationMono\"])\n\n# Load all DIMENSION styles, this command loads also the dependent text styles:\nloader.load_dim_styles([dimstyle.dxf.name for dimstyle in sdoc.dimstyles])\n\n# execute all loading commands:\nloader.execute()\ntdoc.saveas(\"target.dxf\")\n```\n\n----------------------------------------\n\nTITLE: Defining GeoData Class in Python\nDESCRIPTION: This snippet shows the class definition for GeoData in the ezdxf library. It includes various attributes and methods for handling geographic data in DXF files.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfobjects/geodata.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n.. class:: GeoData\n```\n\n----------------------------------------\n\nTITLE: ODA File Converter Usage - Python\nDESCRIPTION: Shows how to use the ODA file converter through ezdxf to convert DXF files to R12 format. The ODA converter typically produces better results than the basic r12export module.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/addons/r12export.rst#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom ezdxf.addons import odafc\n\nodafc.convert(\"any.dxf\", \"r12.dxf\", version=\"R12\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Complex Line Type with Shape in ezdxf\nDESCRIPTION: Shows how to create a complex line type \"GRENZE2\" with embedded shapes using ezdxf. The pattern includes line segments, gaps, and a shape element from a shape file.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/tables/linetype_table.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndwg.linetypes.new('GRENZE2', dxfattribs={\n    'description': 'Grenze eckig ----[]-----[]----[]-----[]----[]--',\n    'length': 1.45,\n    'pattern': 'A,.25,-.1,[132,ltypeshp.shx,x=-.1,s=.1],-.1,1',\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Text Alignment for Dimensions in Python using ezdxf\nDESCRIPTION: This example demonstrates how to set text alignment for a dimension using the set_text_align method. It aligns the text to the left and centers it vertically.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/linear_dimension.rst#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\ndim = msp.add_linear_dim(base=(3, 2), p1=(0, 0), p2=(3, 0))\ndim.set_text_align(halign=\"left\", valign=\"center\")\ndim.render()\n```\n\n----------------------------------------\n\nTITLE: Implementing ViewportTable Class in Python\nDESCRIPTION: ViewportTable manages modelspace viewport configurations. It allows multiple entries with the same name and provides methods for adding, retrieving, and deleting viewport configurations.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tables/tables.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass ViewportTable:\n    def add(self): pass\n    def get_config(self, name: str) -> List[VPort]: pass\n    def delete_config(self): pass\n```\n\n----------------------------------------\n\nTITLE: Shifting Text Location for Linear Dimension in Python using ezdxf\nDESCRIPTION: This code shows how to shift the measurement text of a linear dimension away from its default location using the ezdxf library. It creates a dimension, shifts the text horizontally and vertically, and then renders it.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/linear_dimension.rst#2025-04-23_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\ndim = msp.add_linear_dim(base=(3, 2), p1=(3, 0), p2=(6, 0))\ndim.shift_text(dh=1, dv=1)\ndim.render()\n```\n\n----------------------------------------\n\nTITLE: Creating Arc Dimension by 3 Points in Python with ezdxf\nDESCRIPTION: Creates an arc dimension defined by three points: a base point for the location of the dimension line, a center point, and two points that define the start angle, radius, and end angle of the arc.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/arc_dimension.rst#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport ezdxf\n\ndoc = ezdxf.new(setup=True)\nmsp = doc.modelspace()\n\nmsp.add_arc_dim_3p(\n    base=(0, 7),  # location of the dimension line\n    center=(0, 0),  # center point\n    p1=(2.5, 4.330127018922193),  # 1st point of arc defines start angle and radius\n    p2=(-2.5, 4.330127018922194),  # 2nd point defines the end angle\n).render()\n```\n\n----------------------------------------\n\nTITLE: Documenting Bezier4P Class in Python\nDESCRIPTION: Documentation for the Bezier4P class, which represents a 4-point Bézier curve. It includes methods for curve manipulation, transformation, and point calculation.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/math/core.rst#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: Bezier4P\n\n    .. autoattribute:: control_points\n\n    .. automethod:: reverse\n\n    .. automethod:: transform\n\n    .. automethod:: approximate\n\n    .. automethod:: flattening\n\n    .. automethod:: approximated_length\n\n    .. automethod:: point\n\n    .. automethod:: tangent\n```\n\n----------------------------------------\n\nTITLE: Creating a 3DFACE Entity in Python with ezdxf\nDESCRIPTION: Example showing how to add a 3DFACE entity to a modelspace using ezdxf. The entity is defined by four vertices forming a rectangle with coordinates (0,0), (10,0), (10,10), and (0,10).\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfentities/3dface.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nmsp.add_3dface([(0, 0), (10, 0), (10, 10), (0, 10)])\n```\n\n----------------------------------------\n\nTITLE: DXF Color Override XRECORD Structure\nDESCRIPTION: Shows the structure of an XRECORD entity that stores color override information for specific viewports. The record contains a reference to the VIEWPORT entity and the color override value as a raw color value.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/tables/layer_table.rst#2025-04-23_snippet_5\n\nLANGUAGE: none\nCODE:\n```\n0\nXRECORD\n...         <<< like transparency XRECORD\n102         <<< for each overridden VIEWPORT one entry\n{ADSK_LYR_COLOR_OVERRIDE\n335         <<< handle to VIEWPORT\nAF\n420         <<< color override\n-1023409925 <<< raw color value\n102\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Manipulating B-Splines\nDESCRIPTION: Methods for working with B-splines, including calculating control points from fit points and creating B-spline control frames.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/CHANGELOG.md#2025-04-23_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\nbspline_control_frame()  # calculates B-spline control points from fit points\nadd_spline_control_frame()  # create and add B-spline control frame from fit points\nadd_spline_approx()  # approximate B-spline by a reduced count of control points\n```\n\n----------------------------------------\n\nTITLE: Splitting DXF Files by Entity Type using IterDXF\nDESCRIPTION: Demonstrates how to split a large DXF file into separate files based on entity types (LINE, TEXT, POLYLINE). Uses the iterdxf add-on to process entities one at a time and export them to different files.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/addons/iterdxf.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom ezdxf.addons import iterdxf\n\ndoc = iterdxf.opendxf('big.dxf')\nline_exporter = doc.export('line.dxf')\ntext_exporter = doc.export('text.dxf')\npolyline_exporter = doc.export('polyline.dxf')\ntry:\n    for entity in doc.modelspace():\n        if entity.dxftype() == 'LINE':\n            line_exporter.write(entity)\n        elif entity.dxftype() == 'TEXT':\n            text_exporter.write(entity)\n        elif entity.dxftype() == 'POLYLINE':\n            polyline_exporter.write(entity)\nfinally:\n    line_exporter.close()\n    text_exporter.close()\n    polyline_exporter.close()\n    doc.close()\n```\n\n----------------------------------------\n\nTITLE: Uprighting All Entities in Modelspace in ezdxf\nDESCRIPTION: This snippet demonstrates how to use the upright_all function to convert all supported entities in the modelspace from inverted OCS to WCS aligned OCS. The function can be applied multiple times without adverse effects.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/upright.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport ezdxf\nfrom ezdxf.upright import upright_all\n\ndoc = ezdxf.readfile(\"your.dxf\")\nmsp = doc.modelspace()\nupright_all(msp)\n# doing it again is no problem but also has no further effects\nupright_all(msp)\n```\n\n----------------------------------------\n\nTITLE: Using XDataUserList with DXF Entity Context Manager\nDESCRIPTION: Example showing how to use XDataUserList to store and retrieve list-like data in XDATA. Demonstrates adding different data types and accessing values. The code shows supported data types including strings, floats, integers and Vec3 objects.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/user_xdata.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nwith XDataUserList.entity(entity, name=\"MyList\", appid=\"MYAPP\") as ul:\n    ul.append(\"The value of PI\")  # str \"\\n\" and \"\\r\" are not allowed\n    ul.append(3.141592)  # float\n    ul.append(1) # int\n    ul.append(Vec3(1, 2, 3)) # Vec3\n\n    # invalid data type raises DXFTypeError\n    ul.append((1, 2, 3))  # tuple instead of Vec3\n\n    # retrieve a single value\n    s = ul[0]\n\n    # store whole content into a Python list\n    data = list(ul)\n```\n\n----------------------------------------\n\nTITLE: Checking if DXF Attributes are Supported in Python\nDESCRIPTION: Shows how to check if a specific DXF attribute is supported by an entity type using the is_supported() method.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tasks/get_dxf_attributes.rst#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nline = msp.add_line((0, 0), (1, 0))\nassert line.dxf.is_supported(\"text\") is False\n```\n\n----------------------------------------\n\nTITLE: Accessing Paperspace in a DXF Document\nDESCRIPTION: This code shows how to get a specific paperspace layout by name. Paperspace layouts represent plottable sheets that often contain framing, title blocks, and viewports into the modelspace.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/usage_for_beginners.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\npsp = doc.paperspace(\"Layout1\")\n```\n\n----------------------------------------\n\nTITLE: DXF R13 BLOCK_RECORD Table Structure\nDESCRIPTION: Shows the structure of the BLOCK_RECORD table in DXF R13 format. The BLOCK_RECORD entries are the actual owners of blocks and layouts, containing essential information like handles, names, and associated layout objects.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/block_management.rst#2025-04-23_snippet_2\n\nLANGUAGE: none\nCODE:\n```\n0           <<< start of a SECTION\nSECTION\n2           <<< start of TABLES section\nTABLES\n0           <<< start of a TABLE\nTABLE\n2           <<< start of the BLOCK_RECORD table\nBLOCK_RECORD\n5           <<< handle of the table\n1\n330         <<< owner tag of the table\n0           <<< is always #0\n100         <<< subclass marker\nAcDbSymbolTable\n70          <<< count of table entries, not reliable\n4\n0           <<< start of first BLOCK_RECORD entry\nBLOCK_RECORD\n5           <<< handle of BLOCK_RECORD, in ezdxf often referred to as \"layout key\"\n1F\n330         <<< owner of the BLOCK_RECORD is the BLOCK_RECORD table\n1\n100         <<< subclass marker\nAcDbSymbolTableRecord\n100         <<< subclass marker\nAcDbBlockTableRecord\n2           <<< name of the BLOCK or LAYOUT\n*Model_Space\n340         <<< pointer to the associated LAYOUT object\n4AF\n70          <<< AC1021 (R2007) block insertion units\n0\n280         <<< AC1021 (R2007) block explodability\n1\n281         <<< AC1021 (R2007) block scalability\n0\n\n...         <<< paperspace not shown\n...\n0           <<< next BLOCK_RECORD\nBLOCK_RECORD\n5           <<< handle of BLOCK_RECORD, in ezdxf often referred to as \"layout key\"\n238\n330         <<< owner of the BLOCK_RECORD is the BLOCK_RECORD table\n1\n100         <<< subclass marker\nAcDbSymbolTableRecord\n100         <<< subclass marker\nAcDbBlockTableRecord\n2           <<< name of the BLOCK\nArchTick\n340         <<< pointer to the associated LAYOUT object\n0           <<< #0, because BLOCK doesn't have an associated LAYOUT object\n70          <<< AC1021 (R2007) block insertion units\n0\n280         <<< AC1021 (R2007) block explodability\n1\n281         <<< AC1021 (R2007) block scalability\n0\n0           <<< end of BLOCK_RECORD table\nENDTAB\n0           <<< next TABLE\nTABLE\n...\n0\nENDTAB\n0           <<< end of TABLES section\nENDESC\n```\n\n----------------------------------------\n\nTITLE: Creating Radius Dimension with User-Defined Location and Horizontal Text Outside\nDESCRIPTION: Example showing how to create a radius dimension with text at a user-defined location outside the circle and with horizontal text orientation by setting dimtoh to 1.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/radius_dimension.rst#2025-04-23_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\ndim = msp.add_radius_dim(\n    center=(0, 0),\n    radius=2.5,\n    location=(4, 4),\n    dimstyle=\"EZ_RADIUS\",\n    override={\"dimtoh\": 1}\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Predefined User Variables from DXF Header (Python)\nDESCRIPTION: Retrieves the values of predefined user variables from the DXF header section.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/custom_data.rst#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nuseri1 = doc.header['$USERI1']\nuserr1 = doc.header['$USERR1']\n```\n\n----------------------------------------\n\nTITLE: Setting Text Height in MTextEditor\nDESCRIPTION: Shows how to change text height by scaling factor and calculating absolute heights. Uses editor.scale_height() method to adjust text size.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/mtext.rst#2025-04-23_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\ncurrent_height = attribs[\"char_height\"]\neditor.scale_height(2)\ncurrent_height *= 2\neditor.append(\"text height: 1.4\" + NP)\ndesired_height = 3.5\nfactor = desired_height / current_height\neditor.scale_height(factor).append(\"text height: 3.5\" + NP)\ncurrent_height = desired_height\neditor.scale_height(0.7 / current_height).append(\"back to default height: 0.7\" + NP)\nmsp.add_mtext(str(editor), attribs).set_location(insert=location)\n```\n\n----------------------------------------\n\nTITLE: Creating and Converting a MeshVertexMerger in Python\nDESCRIPTION: Example of creating a MeshVertexMerger object to build a mesh with unique vertices, then converting it to a MeshTransformer to apply transformations. This pattern helps create compact meshes first, then enable transformation capabilities.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/render/mesh.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nmesh = MeshVertexMerger()\n\n# create your mesh\nmesh.add_face(...)\n\n# convert mesh to MeshTransformer object\nreturn MeshTransformer.from_builder(mesh)\n```\n\n----------------------------------------\n\nTITLE: Auditing DXF Files\nDESCRIPTION: Method for checking DXF files for errors, particularly for drawings created by ezdxf.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/CHANGELOG.md#2025-04-23_snippet_24\n\nLANGUAGE: Python\nCODE:\n```\nezdxf.audit()  # DXF error checking for drawings created by ezdxf\n```\n\n----------------------------------------\n\nTITLE: SolidPython2 Polyhedron Creation\nDESCRIPTION: Shows how to convert an ezdxf MeshBuilder object to a solidpython2 polyhedron object.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/addons/openscad.rst#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nfrom ezdxf.render import forms\nfrom solid2 import polyhedron, scad_render\n\n# create an ezdxf MeshBuilder() object\nsphere = forms.sphere()\nsphere.flip_normals()  # required for OpenSCAD\n\n# create a solidpython2 polyhedron() object\nph = polyhedron(\n    points=[v.xyz for v in sphere.vertices],  # convert Vec3 objects to tuples!\n    faces=sphere.faces,  # types are compatible\n)\n\n# create the OpenSCAD script:\nscript = scad_render(ph)\n```\n\n----------------------------------------\n\nTITLE: Setting Dimension Line Format using DimStyleOverride in Python with ezdxf\nDESCRIPTION: This snippet demonstrates an alternative method to set dimension line properties using the DimStyleOverride class in ezdxf. It creates a dimension, sets its line format, and then renders it.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/linear_dimension.rst#2025-04-23_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\ndim = msp.add_linear_dim(base=(3, 2), p1=(3, 0), p2=(6, 0))\ndim.set_dimline_format(\n    color=1, linetype=\"DASHED2\", lineweight=35, extension=0.25\n)\ndim.render()\n```\n\n----------------------------------------\n\nTITLE: ColorDependentPlotStyles Class Definition for CTB Files\nDESCRIPTION: Class for handling color dependent plot style tables (CTB files). Provides methods for managing plot styles, lineweights, and file operations.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/addons/acadctb.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass ColorDependentPlotStyles:\n    description: str\n    scale_factor: float\n    apply_factor: bool\n    custom_lineweight_display_units: int\n    lineweights: array.array\n```\n\n----------------------------------------\n\nTITLE: Creating Angular Dimension by Three Points\nDESCRIPTION: This snippet demonstrates creating an angular dimension defined by three points: a center point and two end points of the angle legs.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/angular_dimension.rst#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nimport ezdxf\n\ndoc = ezdxf.new(setup=True)\nmsp = doc.modelspace()\n\nmsp.add_angular_dim_3p(\n    base=(0, 7),  # location of the dimension line\n    center=(0, 0),  # center point\n    p1=(-3, 5),  # end point of 1st leg = start angle\n    p2=(3, 5),  # end point of 2nd leg = end angle\n).render()\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Shape Linetype Pattern in ezdxf\nDESCRIPTION: This example demonstrates how to create a complex linetype with embedded shapes. It uses a shape index (132) from a shape file (ltypeshp.shx) and defines positioning and scaling parameters for the shape.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/linetypes.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndoc.linetypes.add(\"GRENZE2\",\n    # linetype definition in acad.lin:\n    # A,.25,-.1,[BOX,ltypeshp.shx,x=-.1,s=.1],-.1,1\n    # replacing BOX by shape index 132 (got index from an AutoCAD file),\n    # ezdxf can't get shape index from ltypeshp.shx\n    pattern=\"A,.25,-.1,[132,ltypeshp.shx,x=-.1,s=.1],-.1,1\",\n    description=\"Grenze eckig ----[]-----[]----[]-----[]----[]--\",\n    length= 1.45,  # required for complex line types\n})\n```\n\n----------------------------------------\n\nTITLE: OpenPySCAD Integration Example\nDESCRIPTION: Shows how to integrate openpyscad with ezdxf for creating and manipulating 3D objects.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/addons/openscad.rst#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom ezdxf.addons import openscad\nimport openpyscad as ops\n\nc1 = ops.Cube([10, 20, 10])\nc2 = ops.Cube([20, 10, 10])\n\n# dump OpenSCAD script as string:\nscript = (c1 + c2).dumps()\n\n# execute script and load the result as MeshTransformer instance:\nmesh = openscad.run(script)\n```\n\n----------------------------------------\n\nTITLE: Hiding the UCS Icon in DXF Files\nDESCRIPTION: Controls the visibility of the UCS (User Coordinate System) icon by setting the ucs_icon attribute of the VPort entity. This example hides the icon when setting the modelspace viewport.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/howto/document.rst#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndoc.set_modelspace_vport(10, center=(10, 10), dxfattribs={\"ucs_icon\": 0})\n```\n\n----------------------------------------\n\nTITLE: Defining AutoCAD Viewport Configuration in DXF\nDESCRIPTION: This code snippet defines the complete configuration for an AutoCAD viewport in DXF format. It includes settings for viewport position, size, view properties, UCS configuration, and various display options. The snippet uses group codes and their corresponding values to specify each parameter.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/layout_management.rst#2025-04-23_snippet_2\n\nLANGUAGE: DXF\nCODE:\n```\n{ACAD_XDICTIONARY\n360\n1B5\n102\n}\n330\n58\n100\nAcDbEntity\n67\n1\n8\n0\n100\nAcDbViewport\n10\n5.25\n20\n4.00\n30\n0.0\n40\n23.55\n41\n9.00\n68\n2\n69\n1\n12\n5.25\n22\n4.00\n13\n0.0\n23\n0.0\n14\n0.5\n24\n0.5\n15\n0.5\n25\n0.5\n16\n0.0\n26\n0.0\n36\n1.0\n17\n0.0\n27\n0.0\n37\n0.0\n42\n50.0\n43\n0.0\n44\n0.0\n45\n9.00\n50\n0.0\n51\n0.0\n72\n1000\n90\n819232\n1\n\n281\n0\n71\n1\n74\n0\n110\n0.0\n120\n0.0\n130\n0.0\n111\n1.0\n121\n0.0\n131\n0.0\n112\n0.0\n122\n1.0\n132\n0.0\n79\n0\n146\n0.0\n170\n0\n61\n5\n348\n9F\n292\n1\n282\n1\n141\n0.0\n142\n0.0\n63\n250\n421\n3355443\n```\n\n----------------------------------------\n\nTITLE: DXF Tag Format Example\nDESCRIPTION: Example showing the raw DXF tag format structure with group codes and values for document sections like HEADER.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/drawing/management.rst#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n0\nSECTION\n2\nHEADER\n9\n$ACADVER\n1\nAC1027\n...\n9\n$LIMMIN\n10\n0.0\n20\n0.0\n9\n$LIMMAX\n10\n420.0\n20\n297.0\n9\n$ORTHOMODE\n70\n0\n9\n$REGENMODE\n70\n1\n...\n0\nEOF\n```\n\n----------------------------------------\n\nTITLE: Retrieving Application-Defined Data from DXF Entity\nDESCRIPTION: Shows how to check for and retrieve application-defined data from a DXF entity using has_app_data and get_app_data methods. Returns tags without structure tags.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/appdata.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nif entity.has_app_data(\"YOURAPPID\"):\n    tags = entity.get_app_data(\"YOURAPPID\")\n\n# tags content is [DXFTag(1, 'DataString')]\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Lineweight Attributes\nDESCRIPTION: Demonstrates how to work with lineweight attributes which specify line thickness in millimeters times 100. Includes special values for BYLAYER, BYBLOCK, and DEFAULT.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/common_graphical_attributes.rst#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nentity.dxf.lineweight = 25\n```\n\nLANGUAGE: Python\nCODE:\n```\nlineweight = entity.dxf.lineweight\n```\n\nLANGUAGE: Python\nCODE:\n```\n# activate on screen lineweight display\ndoc.header[\"$LWDISPLAY\"] = 1\n```\n\n----------------------------------------\n\nTITLE: Creating and Applying a Text Style in ezdxf\nDESCRIPTION: This snippet demonstrates how to create a new text style named 'Arial' using the Arial.ttf font, and then apply this style to a text entity in the modelspace.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tables/style_table_entry.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ndoc.styles.add(\"Arial\", font=\"Arial.ttf\")\nmsp = doc.modelspace()\nmsp.add_text(\"my text\", dxfattribs={\"style\": \"Arial\"})\n```\n\n----------------------------------------\n\nTITLE: Using the Browse Command for DXF Structure Analysis\nDESCRIPTION: Example of using the ezdxf browse sub-command to browse the internal structure of a DXF file.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/launcher.rst#2025-04-23_snippet_9\n\nLANGUAGE: Text\nCODE:\n```\nC:\\> ezdxf browse gear.dxf\n```\n\n----------------------------------------\n\nTITLE: Defining PolylinePath Class in Python\nDESCRIPTION: This snippet defines the PolylinePath class, which represents a polyline boundary path for a hatch. It includes attributes and methods for managing polyline vertices and properties.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfentities/hatch.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass PolylinePath:\n    def __init__(self):\n        self.type = BoundaryPathType.POLYLINE\n        self.path_type_flags = 0\n        self.is_closed = True\n        self.vertices = []\n        self.source_boundary_objects = []\n\n    def set_vertices(self, vertices, is_closed=True):\n        # Implement vertex setting\n        pass\n\n    def clear(self):\n        # Implement clearing of vertices\n        pass\n```\n\n----------------------------------------\n\nTITLE: BlockRecord DXF Attributes in Python\nDESCRIPTION: Lists the DXF attributes for the BlockRecord class including owner, name, layout references, explode settings, scaling options, and units configuration. These attributes define the core properties of block records in DXF files.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tables/blockrecord_table_entry.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass BlockRecord:\n    dxf.owner    # Handle to owner (Table)\n    dxf.name     # Name of associated BLOCK\n    dxf.layout   # Handle to associated DXFLayout\n    dxf.explode  # 1 for BLOCK references can be exploded else 0\n    dxf.scale    # 1 for BLOCK references can be scaled else 0\n    dxf.units    # BLOCK insert units\n```\n\n----------------------------------------\n\nTITLE: Counting Block References in ezdxf\nDESCRIPTION: Shows how to count the number of references to a specific block using the blkrefs module in ezdxf. This can be useful for analyzing block usage in a drawing.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tasks/get_layouts.rst#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nfrom ezdxf import blkrefs\n\n...\n\ncounter = blkrefs.BlockReferenceCounter(doc)\n\ncount = counter.by_name(\"MyBlock\")\nprint(f\"MyBlock is referenced {count} times.\n```\n\n----------------------------------------\n\nTITLE: Creating SOLID Entity with Corrected Vertex Order\nDESCRIPTION: Shows how to create a SOLID entity with vertices arranged to produce the expected square shape by manually reversing the last two vertices during creation.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfentities/solid.rst#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nmsp.add_solid([(0, 0), (10, 0), (0, 10), (10, 10)])\n```\n\n----------------------------------------\n\nTITLE: Managing Extension Dictionaries with ezdxf\nDESCRIPTION: This example shows how to manage extension dictionaries (XDICT) for DXF entities using ezdxf. It demonstrates creating an XDICT, adding DictionaryVar objects, and retrieving stored data.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/custom_data.rst#2025-04-23_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nxdict = line.get_extension_dict()\nif xdict is None:\n    # no extension dictionary exists\n    xdict = line.new_extension_dict()\n    # xdict is now a new and empty DXF Dictionary\nelse:\n    # extension dictionary already exists\n    pass\n# xdict is a regular DXF Dictionary\n```\n\nLANGUAGE: Python\nCODE:\n```\nxdict['MyApplication'] = 'MyData'\nxdict['MyApplication2'] = 'MyData2'\n```\n\nLANGUAGE: Python\nCODE:\n```\nmy_data = xdict.get('MyApplication')\nif my_data is not None:\n    print(my_data.value)\n```\n\n----------------------------------------\n\nTITLE: Grouping Entities by Attribute Values in ezdxf\nDESCRIPTION: This code demonstrates how to group entities by a specific attribute. The example groups all LINE entities by their color attribute, then retrieves lines with color value 1.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/usage_for_beginners.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nall_lines_by_color = msp.query(\"LINE\").groupby(\"color\")\nlines_with_color_1 = all_lines_by_color.get(1, [])\n```\n\n----------------------------------------\n\nTITLE: Clip Boundary Management in AutoCAD (C++)\nDESCRIPTION: Demonstrates how to push and pop clip boundaries using AcGiGeometry in AutoCAD. Includes the structure definition for AcGiClipBoundary.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/Proxy Graphic Binary Chunk.md#2025-04-23_snippet_8\n\nLANGUAGE: C++\nCODE:\n```\n<AcGiGeometry::pushClipBoundary (AcGiClipBoundary* pBoundary)>\n```\n\nLANGUAGE: C++\nCODE:\n```\n<AcGiGeometry::popClipBoundary ()>\n```\n\nLANGUAGE: C\nCODE:\n```\nstruct AcGiClipBoundary {\n  // Boundaries\n  AcGeVector3d    m_vNormal;\n  AcGePoint3d     m_ptPoint;\n  AcGePoint2dArray    m_aptPoints;\n\n  // Transforms\n  AcGeMatrix3d    m_xToClipSpace;\n  AcGeMatrix3d    m_xInverseBlockRefXForm;\n\n  // Z clipping\n  Adesk::Boolean    m_bClippingFront;\n  Adesk::Boolean    m_bClippingBack;\n  double        m_dFrontClipZ;\n  double        m_dBackClipZ;\n\n  Adsk::Boolean    m_bDrawBoundary;\n};\n```\n\n----------------------------------------\n\nTITLE: Rotating MULTILEADER Entity in Python using ezdxf\nDESCRIPTION: This code shows how to apply rotation to a MULTILEADER entity. The rotation is specified in degrees and is applied around the render UCS z-axis.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/mleader.rst#2025-04-23_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nml_builder.build(insert=Vec2(5, 2), rotation=30)\n```\n\n----------------------------------------\n\nTITLE: TextSize Class Definition - Python\nDESCRIPTION: Frozen dataclass that returns text measurement results including width, cap height, and total height in drawing units for single-line text.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tools/text_size.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass TextSize:\n    width: float        # text width in drawing units\n    cap_height: float   # font cap-height in drawing units\n    total_height: float # total height including descender in drawing units\n```\n\n----------------------------------------\n\nTITLE: Detaching Block Content as an XREF in Python with ezdxf\nDESCRIPTION: Code to detach a block definition into a separate DXF document as an external reference. This converts an embedded block into an external reference, with options to export as DWG for AutoCAD compatibility.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/xref_module.rst#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n# Create a new document as host file:\nhost_doc = ezdxf.new(\"R2010\", units=units.M)\nmsp = host_doc.modelspace()\n# Add a block definition with some content:\nmake_block(host_doc, \"GEAR\")\n# Add some block references:\nmsp.add_blockref(\"GEAR\", insert=(0, 0))\nmsp.add_blockref(\"GEAR\", insert=(5, 5))\n```\n\n----------------------------------------\n\nTITLE: Setting Angular Units for Dimensions in Python using ezdxf\nDESCRIPTION: This code snippet illustrates how to set different angular units for dimensions using the dimaunit and dimadec attributes. It creates multiple dimensions with various unit settings including decimal degrees, degrees/minutes/seconds, grad, and radians.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/angular_dimension.rst#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nd1 = 15\nd2 = 15.59031944\nfor x, (dimaunit, dimadec) in enumerate(\n    [\n        (0, 4),\n        (1, 7),\n        (2, 4),\n        (3, 4),\n    ]\n):\n    dim = msp.add_angular_dim_cra(\n        center=(x * 4.0, 0.0),\n        radius=3.0,\n        distance=1.0,\n        start_angle=90.0 - d1,\n        end_angle=90.0 + d2,\n        override={\n            \"dimaunit\": dimaunit,\n            \"dimadec\": dimadec,\n        },\n    )\n    dim.render()\n```\n\n----------------------------------------\n\nTITLE: Wipeout Class Definition\nDESCRIPTION: Class declaration for the Wipeout entity with a reference to the set_masking_area method. This class provides functionality for creating masking areas in DXF drawings.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfentities/wipeout.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n.. class:: Wipeout\n\n    .. automethod:: set_masking_area\n```\n\n----------------------------------------\n\nTITLE: Creating a WIPEOUT Entity in Python using ezdxf\nDESCRIPTION: Demonstrates how to create a WIPEOUT entity in a layout using the new Layout.add_wipeout() method in ezdxf.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport ezdxf\n\ndoc = ezdxf.new('R2000')\nmsp = doc.modelspace()\n\n# Create a WIPEOUT entity\nwipeout = msp.add_wipeout([(0, 0), (10, 0), (10, 10), (0, 10)])\n```\n\n----------------------------------------\n\nTITLE: Defining MESH Entity Structure in DXF\nDESCRIPTION: This code snippet demonstrates the DXF structure for a MESH entity representing a cube with a subdivision level of 0. It includes entity headers, vertex coordinates, face definitions, edge connections, and crease values.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/entities/mesh.rst#2025-04-23_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n0\nMESH            <<< DXF type\n5               <<< entity handle\n2F\n330             <<< block record handle of owner layout\n17\n100\nAcDbEntity\n8\n0               <<< layer\n62\n6               <<< color\n100\nAcDbSubDMesh    <<< subclass marker\n71\n2               <<< version\n72\n1               <<< blend crease, 1 is \"on\", 0 is \"off\"\n91\n0               <<< subdivision level is 0\n92\n8               <<< vertex count, 8 cube corners\n10              <<< 1. vertex, x-axis\n0.0\n20              <<< y-axis\n0.0\n30              <<< z-axis\n0.0\n10              <<< 2. vertex\n1.0\n20\n0.0\n30\n0.0\n10              <<< 3. vertex\n1.0\n20\n1.0\n30\n0.0\n10              <<< 4. vertex\n0.0\n20\n1.0\n30\n0.0\n10              <<< 5. vertex\n0.0\n20\n0.0\n30\n1.0\n10              <<< 6. vertex\n1.0\n20\n0.0\n30\n1.0\n10              <<< 7. vertex\n1.0\n20\n1.0\n30\n1.0\n10              <<< 8. vertex\n0.0\n20\n1.0\n30\n1.0\n93              <<< size of face list\n30              <<< size  = count of group code 90 tags = 6 x 5\n90              <<< vertex count of face 1\n4               <<< MESH supports ngons, count = 3, 4, 5, 6 ...\n90\n0       <<< face 1, index of 1. vertex\n90\n3       <<< face 1, index of 2. vertex\n90\n2       <<< face 1, index of 3. vertex\n90\n1       <<< face 1, index of 4. vertex\n90              <<< vertex count of face 2\n4\n90\n4       <<< face 2, index of 1. vertex\n90\n5       <<< face 2, index of 2. vertex\n90\n6       <<< face 2, index of 3. vertex\n90\n7       <<< face 2, index of 4. vertex\n90              <<< vertex count of face 3\n4\n90\n0       <<< face 3, index of 1. vertex\n90\n1       <<< face 3, index of 2. vertex\n90\n5       <<< face 3, index of 3. vertex\n90\n4       <<< face 3, index of 4. vertex\n90              <<< vertex count of face 4\n4\n90\n1       <<< face 4, index of 1. vertex\n90\n2       <<< face 4, index of 2. vertex\n90\n6       <<< face 4, index of 3. vertex\n90\n5       <<< face 4, index of 4. vertex\n90              <<< vertex count of face 5\n4\n90\n3       <<< face 5, index of 1. vertex\n90\n7       <<< face 5, index of 2. vertex\n90\n6       <<< face 5, index of 3. vertex\n90\n2       <<< face 5, index of 4. vertex\n90              <<< vertex count of face 6\n4\n90\n0       <<< face 6, index of 1. vertex\n90\n4       <<< face 6, index of 2. vertex\n90\n7       <<< face 6, index of 3. vertex\n90\n3       <<< face 6, index of 4. vertex\n94              <<< edge count, each edge has exact two group code 90 tags\n4               <<< the real edge count not the group code 90 tags!\n90\n0       <<< edge 1, vertex 1\n90\n1       <<< edge 1, vertex 1\n90\n1       <<< edge 2, vertex 1\n90\n2       <<< edge 2, vertex 2\n90\n2       <<< edge 3, vertex 1\n90\n3       <<< edge 3, vertex 2\n90\n3       <<< edge 4, vertex 1\n90\n0       <<< edge 4, vertex 2\n95              <<< edge crease count, has to match edge count!\n4\n140\n3.0     <<< crease value for edge 1\n140\n3.0     <<< crease value for edge 2\n140\n3.0     <<< crease value for edge 3\n140\n3.0     <<< crease value for edge 4\n90              <<< property overwrite???\n0\n```\n\n----------------------------------------\n\nTITLE: Non-Uniform Scaled INSERT with Clipping\nDESCRIPTION: INSERT entity with non-uniform scaling (0.5,1,1) applied before clipping, showing transformed clipping path coordinates.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/Exploring the transformation behavior of SPATIAL_FILTER.md#2025-04-23_snippet_4\n\nLANGUAGE: dxf\nCODE:\n```\nINSERT(#B9)\n  insert location: (5.0, 5.0, 0.0)\n  rotation: 0\n  scale-x: 0.5\n  scale-y: 1\n  scale-z: 1\n  SPATIAL_FILTER(#C6)\n  clipping-path: (Vec2(5.0, 5.0), Vec2(8.5, 5.0), Vec2(6.75, 12.0))\n```\n\n----------------------------------------\n\nTITLE: Loading DXF Files from Disk in Python\nDESCRIPTION: This code shows how to load a DXF file from disk. The readfile function supports both ASCII and binary DXF documents.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/usage_for_beginners.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndoc = ezdxf.readfile(filename)\n```\n\n----------------------------------------\n\nTITLE: Checking if Optional DXF Attributes Exist in Python\nDESCRIPTION: Demonstrates how to check if an optional DXF attribute exists on an entity using the hasattrib() method.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tasks/get_dxf_attributes.rst#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nassert line.dxf.hasattrib(\"linetype\") is False\n```\n\n----------------------------------------\n\nTITLE: Creating a Hatch Pattern with Different Angles in Python using ezdxf\nDESCRIPTION: This example shows how to create a complex hatch pattern combining lines at different angles. It uses the Vec2 class to calculate an offset vector that maintains a consistent normal distance of 0.7 units between the slanted lines at 45 degrees.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/hatch_pattern.rst#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom ezdxf.math import Vec2\n\n# -x-x-x- snip -x-x-x-\nhatch = msp.add_hatch()\n# offset vector for a normal distance of 0.7 for a 45 deg slanted hatch line\noffset = Vec2.from_deg_angle(45 + 90, length=0.7)\nhatch.set_pattern_fill(\n    \"MyPattern\",\n    color=7,\n    angle=0,\n    scale=1.0,\n    style=0,  # normal hatching style\n    pattern_type=0,  # user-defined\n    # [angle in degree, origin as 2d vector, offset as 2d vector, line pattern]\n    definition=[\n        [0, (0, 0), (0, 1), [1, -1]],  # horizontal dashed line\n        [45, (0, 0), offset, []],  # slanted solid line\n    ],\n)\n# -x-x-x- snip -x-x-x-\n```\n\n----------------------------------------\n\nTITLE: Changing Fonts in MTextEditor\nDESCRIPTION: Demonstrates how to change fonts for MText content using font() method, including handling of different character sets and font fallbacks.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/mtext.rst#2025-04-23_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nattribs = dict(ATTRIBS)\nattribs[\"width\"] = 15.0\neditor = MTextEditor(\"changing fonts:\" + NP)\neditor.append(\"Default: Hello World!\" + NP)\neditor.append(\"SimSun: \")\nsimsun_editor = MTextEditor().font(\"SimSun\").append(\"你好，世界\" + NP)\neditor.group(str(simsun_editor))\neditor.append(\"Times New Roman: \")\neditor.font(\"Times New Roman\").append(\"Привет мир!\" + NP)\neditor.font(\"Does not exist\").append(\"This is the replacement font!\")\nmsp.add_mtext(str(editor), attribs)\n```\n\n----------------------------------------\n\nTITLE: Modifying Layer Properties in ezdxf\nDESCRIPTION: Demonstrates how to change layer properties like linetype and color. The example shows using the color property which preserves the layer's on/off state, rather than directly modifying the DXF attribute.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/layers.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nmy_lines.dxf.linetype = \"DOTTED\"\nmy_lines.color = 13  # preserves on/off state of layer\n```\n\n----------------------------------------\n\nTITLE: DXF R12 STYLE Table Structure\nDESCRIPTION: Documents the structure of the STYLE table in DXF R12 format, showing the tag sequence and properties including style name, flags, text height, width factor, oblique angle, text generation flags, font file name, and big font name references.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/tables/style_table.rst#2025-04-23_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n0           <<< start of table\nTABLE\n2           <<< table type\nSTYLE\n70           <<< count of table entries, AutoCAD ignores this value\n1\n0           <<< first table entry\nSTYLE\n2           <<< text style name\nStandard\n70          <<< flags, see `STYLE`_ reference\n0\n40          <<< fixed text height; 0 if not fixed\n0.0\n41          <<< width factor\n1.0\n50          <<< oblique angle\n0.0\n71          <<< text generation flags; 2=backwards (mirror-x), 4=upside down (mirror-y)\n0\n42          <<< last height used\n2.5\n3           <<< font file name; SHX or TTF file name\ntxt\n4           <<< big font name; SHX file with unicode symbols; empty if none\n\n0           <<< next text style\nSTYLE\n...\n0           <<< end of STYLE table\nENDTAB\n```\n\n----------------------------------------\n\nTITLE: Using MTextEditor to Set Text Colors in Python with ezdxf\nDESCRIPTION: Shows how to use MTextEditor to set text colors using color names, ACI, and RGB values.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/mtext.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# RED: set color by name - red, green, blue, yellow, cyan, magenta, white\neditor.color(\"red\").append(\"RED\" + NP)\n# RED: the color stays the same until the next change\neditor.append(\"also RED\" + NP)\n\n# GREEN: change color by ACI (AutoCAD Color Index)\neditor.aci(3).append(\"GREEN\" + NP)\n\n# BLUE: change color by RGB tuples\neditor.rgb((0, 0, 255)).append(\"BLUE\" + NP)\n\n# add the MTEXT entity to the model space:\nmsp.add_mtext(str(editor), attribs)\n```\n\n----------------------------------------\n\nTITLE: Registering AppID and Adding XDATA to Entities in ezdxf\nDESCRIPTION: Demonstrates how to register an AppID in the AppID table and attach extended data (XDATA) to a DXF entity. The AppID must be registered before it can be used to store XDATA with an entity.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tasks/add_custom_data.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndoc.appids.add(\"YOUR_ID\")\n```\n\nLANGUAGE: python\nCODE:\n```\npoint = msp.add_point((10, 10))\npoint.set_xdata(\"YOUR_ID\", (1040, 3.1415))\n```\n\n----------------------------------------\n\nTITLE: Deleting All Entities From a Layer in ezdxf\nDESCRIPTION: Demonstrates a safe way to delete all graphical entities that reference a specific layer. Uses a trashcan context manager to safely delete entities while iterating through the entities database.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/layers.rst#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nkey_func = doc.layers.key\nlayer_key = key_func(\"MyLines\")\n# The trashcan context-manager is a safe way to delete entities from the\n# entities database while iterating.\nwith doc.entitydb.trashcan() as trash:\n    for entity in doc.entitydb.values():\n        if not entity.dxf.hasattr(\"layer\"):\n            continue\n        if layer_key == key_func(entity.dxf.layer):\n            # safe destruction while iterating\n            trash.add(entity.dxf.handle)\n```\n\n----------------------------------------\n\nTITLE: DXF Layer Viewport Overrides Extension Dictionary Reference\nDESCRIPTION: Shows how a LAYER entity can contain an extension dictionary reference that points to viewport-specific overrides. The extension dictionary contains entries for color, transparency, linetype, and lineweight overrides.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/tables/layer_table.rst#2025-04-23_snippet_2\n\nLANGUAGE: none\nCODE:\n```\n0\nLAYER\n5\n9F\n102         <<< APP data, extension dictionary\n{ACAD_XDICTIONARY\n360         <<< handle to the xdict in the objects section\nB3\n102\n}\n330\n2\n100\nAcDbSymbolTableRecord\n100\nAcDbLayerTableRecord\n2\nLayerA\n...\n```\n\n----------------------------------------\n\nTITLE: Setting Initial View/Zoom for DXF Modelspace\nDESCRIPTION: Sets the initial view and zoom level for the modelspace when the DXF file is opened in a CAD application. This example centers the view at coordinates (10, 10) with a height of 10 units.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/howto/document.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndoc.set_modelspace_vport(height=10, center=(10, 10))\n```\n\n----------------------------------------\n\nTITLE: MTextSize Class Definition - Python\nDESCRIPTION: Frozen dataclass for storing multi-line text (MText) measurements including total dimensions, column information, and column heights in drawing units.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tools/text_size.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass MTextSize:\n    total_width: float      # total width in drawing units\n    total_height: float     # total height in drawing units\n    column_width: float     # single column width\n    gutter_width: float     # space between columns\n    column_heights: tuple   # tuple of column heights\n    column_count: int       # number of columns\n```\n\n----------------------------------------\n\nTITLE: Setting Relative User Location for Angular Dimension in Python using ezdxf\nDESCRIPTION: This snippet demonstrates how to set a relative user location for the measurement text in an angular dimension. It uses the set_location method with the relative parameter set to True.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/angular_dimension.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndim = msp.add_angular_dim_cra(\n    center=(3, 3),\n    radius=3,\n    distance=1,\n    start_angle=60,\n    end_angle=120,\n)\ndim.set_location((1, 2), relative=True)\ndim.render()\n```\n\n----------------------------------------\n\nTITLE: Using get() Method with Default Values in Python\nDESCRIPTION: Demonstrates how to use the get() method of the dxf namespace to retrieve attributes with fallback default values if the attribute doesn't exist.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tasks/get_dxf_attributes.rst#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ne.dxf.get('color', 9)\n```\n\n----------------------------------------\n\nTITLE: Defining BlockData Class Attributes in Python\nDESCRIPTION: Specifies the attributes of the BlockData class, which stores attributes for the Insert entity. Includes properties such as block record handle, extrusion, insertion point, scale, rotation, and color.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfentities/mleader.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass BlockData:\n    block_record_handle: str\n    extrusion: Vec3\n    insert: Vec3\n    scale: Vec3\n    rotation: float\n    color: int\n```\n\n----------------------------------------\n\nTITLE: Flipping Inverted OCS Entities in Python\nDESCRIPTION: Shows how to use the upright module to flip inverted OCS entities and align them with the WCS coordinate system.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/Why are ARC coordinates wrong%3F.md#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom ezdxf import upright\n\nupright.upright(entity)  # or\nupright.upright_all(msp)  # to apply the function to all entities in a collection\n```\n\n----------------------------------------\n\nTITLE: Parsing MLEADER AcDbMLeader Subclass Structure in DXF\nDESCRIPTION: This snippet shows the structure of the AcDbMLeader subclass in the DXF format, which contains additional attribute content and redundant block data including style handle, property flags, block record handle, and attribute definitions.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/entities/mleader.rst#2025-04-23_snippet_2\n\nLANGUAGE: DXF\nCODE:\n```\n100 <ctrl> AcDbMLeader\n270 <int> 2                   <<< dxf.version\n300 <str> CONTEXT_DATA{       <<< start context data\n...\n301 <str> }                   <<< end context data\n340 <hex> #6D                 <<< dxf.style_handle\n90 <int> 6816768              <<< dxf.property_override_flags\n...                           <<< property overrides\n292 <int> 0                   <<< dxf.has_frame_text\n<<< mostly redundant block data:\n344 <hex> #94                 <<< dxf.block_record_handle\n93 <int> -1056964608          <<< dxf.block_color (raw value)\n10 <point> (1.0, 1.0, 1.0)    <<< dxf.block_scale_vector\n43 <float> 0.0                <<< dxf.block_rotation in radians!\n176 <int> 0                   <<< dxf.block_connection_type\n293 <int> 0                   <<< dxf.is_annotative\n<<< REPEAT: (optional)\n94 <int>                      <<< arrow head index?\n345 <hex>                     <<< arrow head handle\n<<< REPEAT: (optional)\n330 <hex> #A3                 <<< ATTDEF handle\n177 <int> 1                   <<< ATTDEF index\n44 <float> 0.0                <<< ATTDEF width\n302 <str> B                   <<< ATTDEF text (reused group code)\n...  common group codes 294, 178, 179, ...\n```\n\n----------------------------------------\n\nTITLE: Documenting average_cluster_radius Function\nDESCRIPTION: References the average_cluster_radius function for auto-documentation, which likely calculates the average radius of clusters in a dataset.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/math/clustering.rst#2025-04-23_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n.. autofunction:: average_cluster_radius\n```\n\n----------------------------------------\n\nTITLE: Loading DXF Files with Structure Errors using Recover Module\nDESCRIPTION: This code shows how to load DXF files that might have structure errors using the ezdxf.recover module. It performs low-level structure repairs and provides an auditor object to report any unrecoverable errors found in the file.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/howto/document.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nfrom ezdxf import recover\n\ntry:  # low level structure repair:\n    doc, auditor = recover.readfile(name)\nexcept IOError:\n    print(f\"Not a DXF file or a generic I/O error.\")\n    sys.exit(1)\nexcept ezdxf.DXFStructureError:\n    print(f\"Invalid or corrupted DXF file: {name}.\")\n    sys.exit(2)\n\n# DXF file can still have unrecoverable errors, but this is maybe\n# just a problem when saving the recovered DXF file.\nif auditor.has_errors:\n    print(f\"Found unrecoverable errors in DXF file: {name}.\")\n    auditor.print_error_report()\n```\n\n----------------------------------------\n\nTITLE: Rendering a Specific Layout from a DXF File\nDESCRIPTION: Command-line example showing how to render a specific layout (other than model space) from a DXF file.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/addons/drawing.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ ./draw_cad.py <my_file.dxf> --layout Layout1 --out image.png\n```\n\n----------------------------------------\n\nTITLE: Querying DXF Entities for Export\nDESCRIPTION: Retrieves all LWPOLYLINE entities from the modelspace of a DXF document for later export as GeoJSON. Uses the query method to filter entities by type.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/geo.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nmsp = doc.modelspace()\nentities = msp.query('LWPOLYLINE')\n```\n\n----------------------------------------\n\nTITLE: Calculating Arc Points in OCS and WCS in Python\nDESCRIPTION: Demonstrates how to calculate points on an arc in OCS coordinates and convert them to WCS coordinates.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/Why are ARC coordinates wrong%3F.md#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nimport math\nfrom ezdxf.math import Vec3\n\nradius = arc.dxf.radius\ncenter = Vec3(arc.dxf.center)  # center.z defines the elevation\nangle = arc.dxf.start_angle  # in degrees\nocs_point = center + Vec3.from_deg_angle(angle, radius)\nocs = arc.ocs()\nwcs_point = ocs.to_wcs(ocs_point)\n```\n\n----------------------------------------\n\nTITLE: Linetype Class Definition and Attributes\nDESCRIPTION: Class definition showing available DXF attributes for the Linetype class including name, owner, description, length and items properties.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tables/linetype_table_entry.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n.. class:: Linetype\n\n    .. attribute:: dxf.name\n\n        Linetype name (str).\n\n    .. attribute:: dxf.owner\n\n        Handle to owner (:class:`~ezdxf.sections.table.Table`).\n\n    .. attribute:: dxf.description\n\n        Linetype description (str).\n\n    .. attribute:: dxf.length\n\n        Total pattern length in drawing units (float).\n\n    .. attribute:: dxf.items\n\n        Number of linetype elements (int).\n```\n\n----------------------------------------\n\nTITLE: Simple Line Type Tag Structure in DXF R2000+\nDESCRIPTION: Details the DXF tag structure for a simple line type in DXF R2000+ format. Shows how the line type name, description, and pattern are encoded.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/tables/linetype_table.rst#2025-04-23_snippet_3\n\nLANGUAGE: none\nCODE:\n```\n0           <<< line type table entry\nLTYPE\n5           <<< handle of line type\n1B1\n330         <<< owner handle, handle of LTYPE table\n5F\n100         <<< subclass marker\nAcDbSymbolTableRecord\n100         <<< subclass marker\nAcDbLinetypeTableRecord\n2           <<< line type name\nCENTER\n70          <<< flags\n0\n3\nCenter ____ _ ____ _ ____ _ ____ _ ____ _ ____\n72          <<< signature tag\n65          <<< ascii code for \"A\"\n73          <<< count of pattern groups starting with a code 49 tag\n4           <<< 4 pattern groups\n40          <<< overall pattern length in drawing units\n2.0\n49          <<< 1. pattern group\n1.25        <<< >0 line, <0 gap, =0 point\n74          <<< type marker\n0           <<< 0 for line group\n49          <<< 2. pattern group\n-0.25\n74\n0\n49          <<< 3. pattern group\n0.25\n74\n0\n49          <<< 4. pattern group\n-0.25\n74\n0\n```\n\n----------------------------------------\n\nTITLE: Setting MTEXT connection types for MultiLeader in Python\nDESCRIPTION: Demonstrates how to set different connection types for MTEXT content in MultiLeader entities using the set_connection_types method.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/mleader.rst#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nbuilder.set_connection_types(\n    left=HorizontalConnection.middle_of_top_line,\n    right=HorizontalConnection.middle_of_bottom_line,\n    top=VerticalConnection.center,\n    bottom=VerticalConnection.center\n)\n```\n\n----------------------------------------\n\nTITLE: Defining MultiLeader Class in Python\nDESCRIPTION: This snippet defines the MultiLeader class, which represents a MULTILEADER entity in DXF. It includes various attributes and methods for manipulating the entity's properties and content.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfentities/mleader.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MultiLeader:\n    def dxf.arrow_head_handle(self):\n        # handle of the arrow head\n        pass\n\n    def dxf.arrow_head_size(self):\n        # arrow head size in drawing units\n        pass\n\n    # ... (other attributes)\n\n    def has_mtext_content(self):\n        # autoproperty\n        pass\n\n    def get_mtext_content(self):\n        # automethod\n        pass\n\n    def set_mtext_content(self):\n        # automethod\n        pass\n\n    # ... (other methods)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Multi-tag Text Structure in DXF\nDESCRIPTION: Shows how text longer than 250 characters is divided across multiple tags in the MTEXT entity. The first chunks appear in tag 3, while the last chunk appears in tag 1 with fewer than 250 characters.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/dxftags.rst#2025-04-23_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n3\n... TwoHundredAndFifty Characters ....\n3\n... TwoHundredAndFifty Characters ....\n1\nless than TwoHundredAndFifty Characters\n```\n\n----------------------------------------\n\nTITLE: Defining Spline Class in Python for ezdxf\nDESCRIPTION: This class represents a spline in the ezdxf library. It includes methods for initialization, subdivision, rendering as fit points, and various types of B-splines and rational B-splines.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/render/curves.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass Spline:\n    def __init__(self):\n        pass\n\n    def subdivide(self):\n        pass\n\n    def render_as_fit_points(self):\n        pass\n\n    def render_open_bspline(self):\n        pass\n\n    def render_uniform_bspline(self):\n        pass\n\n    def render_closed_bspline(self):\n        pass\n\n    def render_open_rbspline(self):\n        pass\n\n    def render_uniform_rbspline(self):\n        pass\n\n    def render_closed_rbspline(self):\n        pass\n```\n\n----------------------------------------\n\nTITLE: Draw Command Help Output\nDESCRIPTION: Shows the help text for the ezdxf draw sub-command, displaying available options for rendering and exporting DXF files.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/launcher.rst#2025-04-23_snippet_6\n\nLANGUAGE: Text\nCODE:\n```\nC:\\> ezdxf draw -h\nusage: ezdxf draw [-h] [--backend {matplotlib,qt,mupdf,custom_svg}] [--formats]\n                  [-l LAYOUT]\n                  [--background {DEFAULT,WHITE,BLACK,PAPERSPACE,MODELSPACE,OFF,CUSTOM}]\n                  [--all-layers-visible] [--all-entities-visible] [-o OUT]\n                  [--dpi DPI] [-f] [-v]\n                  [FILE]\n\npositional arguments:\n  FILE                  DXF file to view or convert\n\noptions:\n  -h, --help            show this help message and exit\n  --backend {matplotlib,qt,mupdf,custom_svg}\n                        choose the backend to use for rendering\n  --formats             show all supported export formats and exit\n  -l LAYOUT, --layout LAYOUT\n                        select the layout to draw, default is \"Model\"\n  --background {DEFAULT,WHITE,BLACK,PAPERSPACE,MODELSPACE,OFF,CUSTOM}\n                        choose the background color to use\n  --all-layers-visible  draw all layers including the ones marked as invisible\n  --all-entities-visible\n                        draw all entities including the ones marked as invisible\n                        (some entities are individually marked as invisible even if\n                        the layer is visible)\n  -o OUT, --out OUT     output filename for export\n  --dpi DPI             target render resolution, default is 300\n  -f, --force           overwrite the destination if it already exists\n  -v, --verbose         give more output\n```\n\n----------------------------------------\n\nTITLE: Defining ACI (AutoCAD Color Index) Enumeration in Python\nDESCRIPTION: Enumerates color options using the AutoCAD Color Index system. Includes special values like BYBLOCK and BYLAYER, as well as specific color options.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/enums.rst#2025-04-23_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nclass ACI:\n    BYBLOCK\n    BYLAYER\n    BYOBJECT\n    RED\n    YELLOW\n    GREEN\n    CYAN\n    BLUE\n    MAGENTA\n    BLACK\n    WHITE\n    GRAY\n    LIGHT_GRAY\n```\n\n----------------------------------------\n\nTITLE: Creating a Complex Line Type with Text in ezdxf\nDESCRIPTION: Shows how to create a complex line type \"GASLEITUNG\" with embedded text using ezdxf. The pattern includes line segments, gaps, and a text element \"GAS\".\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/tables/linetype_table.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndwg.linetypes.add(\"GASLEITUNG\",\n    description=\"Gasleitung2 ----GAS----GAS----GAS----GAS----GAS----GAS--\",\n    length=1,\n    pattern='A,.5,-.2,[\"GAS\",STANDARD,S=.1,U=0.0,X=-0.1,Y=-.05],-.25',\n)\n```\n\n----------------------------------------\n\nTITLE: DXF LAYER Table Structure for DXF R2000+\nDESCRIPTION: Demonstrates the structure of a LAYER table in DXF R2000+ format, showing how the table begins with TABLE and LAYER tags, includes count information, contains multiple LAYER entity entries, and ends with ENDTAB.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/tables/layer_table.rst#2025-04-23_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n0           <<< start of table\nTABLE\n2           <<< name of table \"LAYER\"\nLAYER\n5           <<< handle of the TABLE\n2\n330         <<< owner tag is always \"0\"\n0\n100         <<< subclass marker\nAcDbSymbolTable\n70          <<< count of layers defined in this table, AutoCAD ignores this value\n5\n0           <<< 1. LAYER table entry\nLAYER\n...         <<< LAYER entity tags\n0           <<< 2. LAYER table entry\nLAYER\n...         <<< LAYER entity tags\n0           <<< end of TABLE\nENDTAB\n```\n\n----------------------------------------\n\nTITLE: Removing Linetypes in ezdxf\nDESCRIPTION: This code demonstrates how to remove a linetype from an ezdxf document. Note that this only removes the definition, not references to it, which can create invalid DXF files if the linetype is still in use.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/linetypes.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndoc.layers.remove(\"DASHED\")\n```\n\n----------------------------------------\n\nTITLE: Accessing Extension Dictionaries in DXF Entities using ezdxf\nDESCRIPTION: This snippet shows how to check if a DXF entity (line) has an extension dictionary and how to retrieve it. It iterates through all lines in the modelspace and accesses their extension dictionaries if present.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tasks/get_extended_data.rst#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfor line in msp.query(\"LINE\"):\n    if line.has_extension_dict:\n        # get the extension dictionary\n        xdict = line.get_extension_dict()\n```\n\n----------------------------------------\n\nTITLE: Defining ArrowHeadData Class Attributes in Python\nDESCRIPTION: Defines the attributes of the ArrowHeadData class, including index and handle. These attributes are used to represent arrow head data in a multi-leader object.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfentities/mleader.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass ArrowHeadData:\n    index: int  # arrow head index?\n    handle: str  # handle to arrow head block\n```\n\n----------------------------------------\n\nTITLE: Checking OCS Extrusion Vector in Python\nDESCRIPTION: Demonstrates how to check if an entity uses the default WCS coordinates by comparing its extrusion vector with the Z-axis using the isclose() method.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/Why are ARC coordinates wrong%3F.md#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom ezdxf.math import Z_AXIS\n\nif not Z_AXIS.isclose(arc.dxf.extrusion):\n  # this entity has not WCS coordinates\n  ...\n```\n\n----------------------------------------\n\nTITLE: Complex Line Type SHAPE Tag Structure\nDESCRIPTION: Details the DXF tag structure for a complex line type with shapes in DXF format. Shows how shape properties like shape number, file reference, scaling, rotation, and position are encoded.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/tables/linetype_table.rst#2025-04-23_snippet_7\n\nLANGUAGE: none\nCODE:\n```\n0\nLTYPE\n5\n615\n330\n5F\n100         <<< subclass marker\nAcDbSymbolTableRecord\n100         <<< subclass marker\nAcDbLinetypeTableRecord\n2\nGRENZE2\n70\n0\n3\nGrenze eckig ----[]-----[]----[]-----[]----[]--\n72          <<< signature tag\n65          <<< ascii code for \"A\"\n73          <<< count of pattern groups starting with a code 49 tag\n4           <<< 4 pattern groups\n40          <<< overall pattern length in drawing units\n1.45\n49          <<< 1. pattern group\n0.25        <<< >0 line, <0 gap, =0 point\n74          <<< type marker\n0           <<< 0 for line group\n49          <<< 2. pattern group\n-0.1\n74          <<< type marker\n4           <<< 4 for shape group\n75          <<< shape number in shape-file\n132\n340         <<< handle to shape-file entry \"ltypeshp.shx\"\n616\n46          <<< scaling factor: \"s\" in pattern definition\n0.1\n50          <<< rotation angle: \"r\" and \"u\" in pattern definition\n0.0\n44          <<< shift x units: \"x\" in pattern definition = parallel to line direction\n-0.1\n45          <<< shift y units: \"y\" in pattern definition = normal to line direction\n0.0\n49          <<< 3. pattern group\n-0.1\n74\n0\n49          <<< 4. pattern group\n1.0\n74\n0\n```\n\n----------------------------------------\n\nTITLE: DXF CLASS Entity Structure Example\nDESCRIPTION: Illustrates the structure of a CLASS entity within the CLASSES section of a DXF file. Shows the complete format including section markers, class name, C++ class name, application name, and various flags that define the class behavior.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/sections/classes_section.rst#2025-04-23_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n0\nSECTION\n2           <<< begin CLASSES section\nCLASSES\n0           <<< first CLASS entity\nCLASS\n1           <<< class DXF entity name; THIS ENTRY IS MAYBE NOT UNIQUE\nACDBDICTIONARYWDFLT\n2           <<< C++ class name; always unique\nAcDbDictionaryWithDefault\n3           <<< application name\nObjectDBX Classes\n90          <<< proxy capabilities flags\n0\n91          <<< instance counter for custom class, since DXF version AC1018 (R2004)\n0           <<< no problem if the counter is wrong, AutoCAD doesn't care about\n280         <<< was-a-proxy flag: 1= class was not loaded when this DXF file was created\n0           <<< 0= otherwise\n281         <<< is-an-entity flag: 1= instances reside in the BLOCKS or ENTITIES section\n0           <<< 0= instances may appear only in the OBJECTS section\n0           <<< next CLASS entity\nCLASS\n...\n0           <<< end of CLASSES section\nENDSEC\n```\n\n----------------------------------------\n\nTITLE: Setting Up Standard DXF Elements\nDESCRIPTION: Helper functions for setting up standard DXF elements like line types and text styles in a drawing.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/CHANGELOG.md#2025-04-23_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\nezdxf.setup_linetypes(dwg)  # setup standard line types\nezdxf.setup_styles(dwg)  # setup standard text styles\n```\n\n----------------------------------------\n\nTITLE: Creating Hatches from Connected Edges\nDESCRIPTION: This snippet demonstrates how to create a hatch entity from connected edges found in a set of unordered edges.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/edges.rst#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n# create a new doc\ndoc = ezdxf.new()\ndoc.header[\"$LWDISPLAY\"] = 1\nmsp = doc.modelspace()\n\n# 1. create a HATCH\nhatch = msp.add_hatch(color=2)\n\n# reuse same entities from previous example\nedges = list(edgesmith.edges_from_entities_2d(entities))\n\n# shuffle the ordered edges\nrandom.shuffle(edges)\n\n# a deposit optimizes the search for unordered edges\ndeposit = edgeminer.Deposit(edges)\n\n# start the search at an arbitrary edge\nstart = edges[0]\n\n# 2. find edges\nchain = edgeminer.find_simple_chain(deposit, start)\n\n# 3. create a polyline boundary path from edges\nboundary_path = edgesmith.polyline_path_from_chain(chain)\n\n# 4.add boundary path to HATCH\nhatch.paths.append(boundary_path)\ndoc.saveas(\"hatch1.dxf\")\n```\n\n----------------------------------------\n\nTITLE: Manually Destroying Entities in ezdxf\nDESCRIPTION: This code demonstrates how to manually destroy an entity using its destroy method. The entity remains in containers until they are purged, but won't appear when iterating.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/usage_for_beginners.rst#2025-04-23_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nline.destroy()\n```\n\n----------------------------------------\n\nTITLE: Demonstrating All Available Line Types in DXF R12\nDESCRIPTION: Example showing how to create a DXF file that demonstrates all available line types when using the fixed_tables option. Each line type is drawn with a descriptive text label using the OpenSansCondensed-Light text style.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/addons/r12writer.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport ezdxf\n\nLINETYPES = [\n    'CONTINUOUS', 'CENTER', 'CENTERX2', 'CENTER2',\n    'DASHED', 'DASHEDX2', 'DASHED2', 'PHANTOM', 'PHANTOMX2',\n    'PHANTOM2', 'DASHDOT', 'DASHDOTX2', 'DASHDOT2', 'DOT',\n    'DOTX2', 'DOT2', 'DIVIDE', 'DIVIDEX2', 'DIVIDE2',\n]\n\nwith r12writer('r12_linetypes.dxf', fixed_tables=True) as dxf:\n    for n, ltype in enumerate(LINETYPES):\n        dxf.add_line((0, n), (10, n), linetype=ltype)\n        dxf.add_text(ltype, (0, n+0.1), height=0.25, style='OpenSansCondensed-Light')\n```\n\n----------------------------------------\n\nTITLE: Defining MTextData Class Attributes in Python\nDESCRIPTION: Documents the attributes of the MTextData class, which stores content and attributes of the MTEXT entity. Includes properties such as content, extrusion, style, insertion point, and various text formatting options.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfentities/mleader.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass MTextData:\n    default_content: str\n    extrusion: Vec3\n    style_handle: str\n    insert: Vec3\n    text_direction: Vec3\n    rotation: float\n    width: float\n    defined_height: float\n    line_spacing_factor: float\n    line_spacing_style: int\n    color: int\n    alignment: int\n    flow_direction: int\n    bg_color: int\n    bg_scale_factor: float\n    bg_transparency: float\n    use_window_bg_color: bool\n    has_bg_fill: bool\n    column_type: int\n    use_auto_height: bool\n    column_width: float\n    column_gutter_width: float\n    column_flow_reversed: bool\n    column_sizes: List[float]\n    use_word_break: bool\n```\n\n----------------------------------------\n\nTITLE: DXF HEADER Section Structure Example\nDESCRIPTION: Shows the overall structure of a HEADER section in DXF format, starting with section declaration tags, header variable example ($ACADVER), and ending with the ENDSEC tag.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/sections/header_section.rst#2025-04-23_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n0           <<< Begin HEADER section\nSECTION\n2\nHEADER\n9\n$ACADVER    <<< Header variable items go here\n1\nAC1009\n...\n0\nENDSEC      <<< End HEADER section\n```\n\n----------------------------------------\n\nTITLE: Detaching Block and Converting to DWG in Python with ezdxf\nDESCRIPTION: Example of detaching a block definition and converting it to a DWG file for compatibility with AutoCAD. Uses the odafc addon to export the detached content as a DWG file.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/xref_module.rst#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n# ... create host_doc with block definition \"GEAR\" ...\n\n# Detach the block \"GEAR\" from the host document as a new document:\ndwg_filename = \"gear.dwg\"\ntry:\n    # Specify xref_filename, which will be written into the host document:\n    xref_doc = xref.detach(host_doc, \"GEAR\", xref_filename=dwg_filename)\n    # Export as DWG by the ODA File Converter:\n    odafc.export_dwg(xref_doc, dwg_filename, replace=True)\n    host_doc.saveas(\"gear_host.dxf\")\nexcept (odafc.ODAFCError, xref.XrefError) as e:\n    print(str(e))\n```\n\n----------------------------------------\n\nTITLE: Defining MultiLeader Attributes in Python\nDESCRIPTION: Documents the attributes of the MultiLeader class, including leader points, dogleg vector, and attachment direction. These attributes are used to define the properties of a multi-leader object in CAD drawings.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfentities/mleader.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass MultiLeader:\n    has_dogleg_vector: bool\n    last_leader_point: Vec3  # WCS point\n    dogleg_vector: Vec3  # WCS direction\n    dogleg_length: float  # redundant data\n    index: int  # leader index?\n    attachment_direction: Any  # redundant data\n    breaks: List[Vec3]  # list of break vertices\n```\n\n----------------------------------------\n\nTITLE: Overriding Text Rotation for Angular Dimensions in Python using ezdxf\nDESCRIPTION: This example demonstrates how to override the measurement text rotation for angular dimensions. It sets a fixed text rotation of 90 degrees (vertical text) and uses relative text locations without leaders.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/angular_dimension.rst#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfor x, center_angle in [(7, 45), (14, 90), (21, 135)]:\n    dim = msp.add_angular_dim_cra(\n        center=(x, 0),\n        radius=3.0,\n        distance=1.0,\n        start_angle=center_angle - 15.0,\n        end_angle=center_angle + 15.0,\n        text_rotation=90,  # vertical text\n    )\n    usr_location = Vec3.from_deg_angle(angle=center_angle, length=1.0)\n    dim.set_location(usr_location, leader=False, relative=True)\n    dim.render()\n```\n\n----------------------------------------\n\nTITLE: Defining Image Class Attributes in Python\nDESCRIPTION: This snippet defines the attributes of the Image class in ezdxf, including insertion point, pixel vectors, image size, and various flags for image display and clipping.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfentities/image.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Image:\n    dxf.insert  # Insertion point, lower left corner of the image (3D Point in WCS)\n    dxf.u_pixel  # U-vector of a single pixel as (x, y, z) tuple\n    dxf.v_pixel  # V-vector of a single pixel as (x, y, z) tuple\n    dxf.image_size  # Image size in pixels as (x, y) tuple\n    dxf.image_def_handle  # Handle to the image definition entity\n    dxf.flags  # Flags for image display and clipping\n    dxf.clipping  # Clipping state (0: off, 1: on)\n    dxf.brightness  # Brightness value in the range [0, 100]\n    dxf.contrast  # Contrast value in the range [0, 100]\n    dxf.fade  # Fade value in the range [0, 100]\n    dxf.clipping_boundary_type  # 1: Rectangular, 2: Polygonal\n    dxf.count_boundary_points  # Number of clip boundary vertices\n    dxf.clip_mode  # 0: Outside, 1: Inside (requires DXF R2010 or newer)\n```\n\n----------------------------------------\n\nTITLE: Comparing Data Structures for Fast Access in Cython\nDESCRIPTION: This snippet lists different data structures and methods being considered for optimizing data access speed in the ezdxf project using Cython. It includes Python list of Vec2 objects, array.array, numpy.ndarray, raw C pointers, and typed memoryviews.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/Quest for Fast Internal Memory Access.md#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nlist[Vec2]\narray.array\nnumpy.ndarray\ndouble *data\ndouble[::1]\n```\n\n----------------------------------------\n\nTITLE: Using Custom Configuration with the Drawing Add-on\nDESCRIPTION: Example of creating a custom configuration for the drawing add-on with lineweight scaling set to 2.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/addons/drawing.rst#2025-04-23_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nmy_config = Configuration(lineweight_scaling=2)\n```\n\n----------------------------------------\n\nTITLE: Handling True Color DXF Attribute Directly\nDESCRIPTION: Shows how to work with the true_color DXF attribute directly using conversion functions from the colors module, including safely checking for attribute existence.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/common_graphical_attributes.rst#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nentity.dxf.true_color = ezdxf.colors.rgb2int(255, 128, 16)\n```\n\nLANGUAGE: Python\nCODE:\n```\nif entity.dxf.hasattr(\"true_color\"):\n    r, g, b = ezdxf.colors.int2rgb(entity.dxf.true_color)\n```\n\nLANGUAGE: Python\nCODE:\n```\nr, g, b = ezdxf.colors.int2rgb(entity.dxf.get(\"true_color\", 0)\n```\n\n----------------------------------------\n\nTITLE: Deleting DXF Attributes Using del Operator in Python with ezdxf\nDESCRIPTION: This snippet demonstrates how to delete a DXF attribute from an entity using the 'del' operator. It shows setting a layer attribute and then deleting it, which results in the attribute reverting to its default value.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tasks/delete_dxf_attributes.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nline = msp.add_line((0, 0), (1, 0))\nline.dxf.layer = \"MyLayer\"\ndel line.dxf.layer\n\nassert line.dxf.layer == \"0\"  # the default layer for all entities\n```\n\n----------------------------------------\n\nTITLE: Defining MLineStyleElement Class in Python for ezdxf\nDESCRIPTION: This snippet defines the MLineStyleElement class, which is a named tuple storing properties of a line element in an MLINE entity. It includes attributes for offset, color, and linetype.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfentities/mline.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass MLineStyleElement:\n    offset = None\n    color = None\n    linetype = None\n```\n\n----------------------------------------\n\nTITLE: Extending XRecord Entity with Tags in Python\nDESCRIPTION: Method to add additional tags to an XRecord entity. Can accept a dictionary or any iterable of (group code, value) tuples.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfobjects/xrecord.rst#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ndef extend(self, tags: Union[Dict, Iterable]) -> None:\n    \"\"\"Extend the existing DXF tags by the `tags` iterable.\n\n    Args:\n        tags: DXF tags as dict or iterable of (group code, value) tuples\n\n    \"\"\"\n    append = self.tags.append\n    if isinstance(tags, dict):\n        for code, value in tags.items():\n            if code == 5:\n                continue  # handled by parent class\n            if code == 102:  # illegal tags\n                continue\n            if code == 105:  # illegal tags\n                continue\n            if code < 0 or code > 369:  # just to be sure\n                continue\n            append((int(code), value))\n    else:\n        for code, value in tags:\n            if code == 5:\n                continue  # handled by parent class\n            if code == 102:  # illegal tags\n                continue\n            if code == 105:  # illegal tags\n                continue\n            append((int(code), value))\n```\n\n----------------------------------------\n\nTITLE: DXF DIMSTYLE Table Structure Format\nDESCRIPTION: Defines the hierarchical structure of a DIMSTYLE table entry in DXF R2000+ format, showing required group codes and their purposes including table start, type declaration, handles, and subclass markers.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/tables/dimstyle_table.rst#2025-04-23_snippet_1\n\nLANGUAGE: none\nCODE:\n```\n0           <<< start of table\nTABLE\n2           <<< set table type\nDIMSTYLE\n5           <<< DIMSTYLE table handle\n5F\n330         <<< owner tag, tables has no owner\n0\n100         <<< subclass marker\nAcDbSymbolTable\n70          <<< count of dimension styles defined in this table, AutoCAD ignores this value\n9\n0           <<< 1. DIMSTYLE table entry\nDIMSTYLE\n                <<< DIMSTYLE data tags\n0           <<< 2. DIMSTYLE table entry\nDIMSTYLE\n                <<< DIMSTYLE data tags and so on\n0           <<< end of DIMSTYLE table\nENDTAB\n```\n\n----------------------------------------\n\nTITLE: APPID Table Structure in DXF R12\nDESCRIPTION: Illustrates the structure of the APPID table in DXF R12 format. The table begins with a TABLE entity, contains APPID entries with unique identifiers and flags, and ends with an ENDTAB entity.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/tables/appid_table.rst#2025-04-23_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n0           <<< start of table\nTABLE\n2           <<< table type\nAPPID\n70          <<< count of table entries, AutoCAD ignores this value\n3\n0           <<< 1. table entry\nAPPID\n2           <<< unique application identifier\nACAD\n70          <<< flags, see `APPID`_ reference\n0           <<< in common cases always 0\n0           <<< next table entry\nAPPID\n...\n0           <<< end of APPID table\nENDTAB\n```\n\n----------------------------------------\n\nTITLE: Accessing Block Layouts in a DXF Document\nDESCRIPTION: This code demonstrates how to access a block layout by name. Blocks are reusable components that can be inserted multiple times into layouts and other blocks.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/usage_for_beginners.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nblk = doc.blocks.get(\"NAME\")\n```\n\n----------------------------------------\n\nTITLE: Converting World Mercator to WGS84 Coordinates\nDESCRIPTION: Transforms coordinates from World Mercator (EPSG:3395) projection back to WGS84 (EPSG:4326) geographic coordinates. This is necessary for generating standard GeoJSON which uses WGS84 coordinates.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/geo.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nif epsg == 3395:  # World Mercator\n    # Transform CRS into WGS84\n    geo_proxy.wm_to_wgs84()\n```\n\n----------------------------------------\n\nTITLE: Setting Modelspace Viewport in DXF\nDESCRIPTION: Configures the main viewport of the modelspace by setting height and center coordinates. Used to properly position and scale the view of entities.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/howto/viewer.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ndoc.set_modelspace_vport(height=10, center=(0, 0))\n```\n\n----------------------------------------\n\nTITLE: Converting DXF R12 File to Autodesk Compatible Format\nDESCRIPTION: Demonstrates how to load a DXF R12 file, make it compatible with Autodesk specifications, and save the result. Uses the make_acad_compatible function to enforce R12 naming conventions and restrictions.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/r12strict.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport ezdxf\nfrom ezdxf import r12strict\n\ndoc = ezdxf.readfile(\"r12sloppy.dxf\")\nr12strict.make_acad_compatible(doc)\ndoc.saveas(\"r12strict.dxf\")\n```\n\n----------------------------------------\n\nTITLE: Defining R12Spline Class in Python for ezdxf\nDESCRIPTION: This class represents an R12 spline in the ezdxf library. It includes methods for initialization, rendering, and approximation.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/render/curves.rst#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nclass R12Spline:\n    def __init__(self):\n        pass\n\n    def render(self):\n        pass\n\n    def approximate(self):\n        pass\n```\n\n----------------------------------------\n\nTITLE: Setting $LUNITS Header Variable in ezdxf\nDESCRIPTION: Shows how to set the $LUNITS header variable, which defines how CAD applications display linear values in the GUI. The example sets it to decimal format (value 2).\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/concepts/units.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndoc.header['$LUNITS'] = 2\n```\n\n----------------------------------------\n\nTITLE: OpenPySCAD Polyhedron Creation\nDESCRIPTION: Demonstrates converting an ezdxf MeshBuilder object to an openpyscad Polyhedron object.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/addons/openscad.rst#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom ezdxf.render import forms\nimport openpyscad as ops\n\n# create an ezdxf MeshBuilder() object\nsphere = forms.sphere()\nsphere.flip_normals()  # required for OpenSCAD\n\n# create an openpyscad Polyhedron() object\npolyhedron = ops.Polyhedron(\n    points=[list(p) for p in sphere.vertices],  # convert Vec3 objects to lists!\n    faces=[list(f) for f in sphere.faces],  # convert face tuples to face lists!\n)\n\n# create the OpenSCAD script:\nscript = polyhedron.dumps()\n```\n\n----------------------------------------\n\nTITLE: Defining SpatialFilter Class in Python for ezdxf\nDESCRIPTION: This snippet defines the SpatialFilter class, a subclass of DXFObject, representing the SPATIAL_FILTER object in DXF files. It includes various attributes and properties for managing clipping planes and boundaries.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfobjects/spatial_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass SpatialFilter:\n    dxf.back_clipping_plane_distance\n    dxf.is_clipping_enabled\n    dxf.extrusion\n    dxf.front_clipping_plane_distance\n    dxf.has_back_clipping_plane\n    dxf.has_front_clipping_plane\n    dxf.origin\n    \n    @property\n    def boundary_vertices(self):\n        pass\n    \n    @property\n    def inverse_insert_matrix(self):\n        pass\n    \n    @property\n    def transform_matrix(self):\n        pass\n    \n    def set_boundary_vertices(self):\n        pass\n    \n    def set_inverse_insert_matrix(self):\n        pass\n    \n    def set_transform_matrix(self):\n        pass\n```\n\n----------------------------------------\n\nTITLE: Creating a New MLeaderStyle in Python using ezdxf\nDESCRIPTION: This snippet demonstrates how to create a new MLeaderStyle object using the ezdxf library. It creates a new drawing and adds a new style named 'NewStyle' to the mleader_styles collection.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfobjects/mleaderstyle.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport ezdxf\n\ndoc = ezdxf.new()\nnew_style = doc.mleader_styles.new(\"NewStyle\")\n```\n\n----------------------------------------\n\nTITLE: Defining MLeaderContext Class in Python\nDESCRIPTION: This snippet defines the MLeaderContext class, which represents the context of a MultiLeader entity. It includes various attributes related to the leader's appearance and content.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfentities/mleader.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass MLeaderContext:\n    def leaders(self):\n        # list of LeaderData objects\n        pass\n\n    def scale(self):\n        # redundant data: MultiLeader.dxf.scale\n        pass\n\n    # ... (other attributes)\n```\n\n----------------------------------------\n\nTITLE: Parsing Main VIEWPORT Entity Structure in DXF Format\nDESCRIPTION: The beginning of a main VIEWPORT entity definition for a paperspace layout. This viewport describes how the paperspace layout is displayed by the CAD application. The structure shows the first few lines including the handle and extension dictionary.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/layout_management.rst#2025-04-23_snippet_1\n\nLANGUAGE: none\nCODE:\n```\n0\nVIEWPORT\n5       <<< handle\n1B4\n102     <<< extension dictionary (ignore)\n```\n\n----------------------------------------\n\nTITLE: Disabling Extension Lines Using DimStyleOverride in Python with ezdxf\nDESCRIPTION: This snippet demonstrates how to disable extension lines for a linear dimension using the DimStyleOverride methods in ezdxf. It also shows how to set a specific arrow style for the dimension.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/linear_dimension.rst#2025-04-23_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\ndim = msp.add_linear_dim(base=(3, 2), p1=(3, 0), p2=(6, 0))\ndim.set_arrows(blk=ezdxf.ARROWS.closed_filled)\ndim.set_extline1(disable=True)\ndim.set_extline2(disable=True)\ndim.render()\n```\n\n----------------------------------------\n\nTITLE: Parsing No-Column MTEXT Entity in DXF R2000\nDESCRIPTION: This snippet illustrates the structure of a no-column MTEXT entity in DXF R2000 format. It includes entity attributes and additional XDATA for defined height.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/entities/mtext.rst#2025-04-23_snippet_14\n\nLANGUAGE: Text\nCODE:\n```\n0 <ctrl> MTEXT\n... <snip>\n100 <ctrl> AcDbMText\n10 <point> (-344.497343455795, 276.101821192053, 0.0)   <<< insert location in WCS\n40 <float> 2.5          <<< character height in drawing units\n41 <float> 175.0        <<< reference column width\n71 <int> 1              <<< attachment point\n72 <int> 1              <<< flag text flow direction\n3 <str> Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam...\n... <snip> text content of all three columns\n73 <int> 1              <<< line spacing style\n44 <float> 1.0          <<< line spacing factor\n... <snip>\n1001 <ctrl> ACAD\n1000 <str> ACAD_MTEXT_DEFINED_HEIGHT_BEGIN\n1070 <int> 46           <<< defined column height\n1040 <float> 158.189308131867\n1000 <str> ACAD_MTEXT_DEFINED_HEIGHT_END\n```\n\n----------------------------------------\n\nTITLE: Complex CSG Operation: Menger Sponge vs Sphere\nDESCRIPTION: Advanced CSG example demonstrating a complex operation between a Menger Sponge (level 3) and a sphere. This example shows how to use meshid to manage different mesh objects and how to apply layers for better visualization.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/addons/pycsg.rst#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom ezdxf.render.forms import sphere\nfrom ezdxf.addons import MengerSponge\nfrom ezdxf.addons.pycsg import CSG\n\ndoc = ezdxf.new()\ndoc.layers.new('sponge', dxfattribs={'color': 5})\ndoc.layers.new('sphere', dxfattribs={'color': 6})\n\ndoc.set_modelspace_vport(6, center=(5, 0))\nmsp = doc.modelspace()\n\nsponge1 = MengerSponge(level=3).mesh()\nsphere1 = sphere(count=32, stacks=16, radius=.5, quads=True).translate(.25, .25, 1)\n\nsubtract = (CSG(sponge1, meshid=1) - CSG(sphere1, meshid=2))\n# get mesh result by id\nsubtract.mesh(1).render_mesh(msp, dxfattribs={'layer': 'sponge'})\nsubtract.mesh(2).render_mesh(msp, dxfattribs={'layer': 'sphere'})\n```\n\n----------------------------------------\n\nTITLE: Setting MText Properties in Python with ezdxf\nDESCRIPTION: Shows how to set various properties of an MText entity, including character height and width for text wrapping.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/mtext.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nmtext.dxf.char_height = 0.5\nmtext.dxf.width = 60\n```\n\n----------------------------------------\n\nTITLE: Implementing LayerTable Class in Python\nDESCRIPTION: LayerTable is a subclass of Table that manages a collection of Layer objects. It provides an add method for adding new layers.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tables/tables.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass LayerTable(Table):\n    def add(self): pass\n```\n\n----------------------------------------\n\nTITLE: Circle Through Three Points Generation\nDESCRIPTION: Algorithm for calculating the center coordinates and radius of a circle that passes through three given points. Includes check for collinear points where no finite-radius circle exists.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/src/ezdxf/math/algorithms.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nA = b_0 - a_0;\nB = b_1 - a_1;\nC = c_0 - a_0;\nD = c_1 - a_1;\n\nE = A*(a_0 + b_0) + B*(a_1 + b_1);\nF = C*(a_0 + c_0) + D*(a_1 + c_1);\n\nG = 2.0*(A*(c_1 - b_1)-B*(c_0 - b_0));\n\np_0 = (D*E - B*F) / G;\np_1 = (A*F - C*E) / G;\n```\n\n----------------------------------------\n\nTITLE: Defining PlotSettings Class Attributes in Python\nDESCRIPTION: This snippet defines the attributes of the PlotSettings class, which represents plot settings in a DXF file. It includes various properties such as page setup name, plot configuration, paper size, margins, and plot flags.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfobjects/plotsettings.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass PlotSettings:\n    dxf.page_setup_name = \"\"\n    dxf.plot_configuration_file = \"Adobe PDF\"\n    dxf.paper_size = \"A3\"\n    dxf.plot_view_name = \"\"\n    dxf.left_margin = 7.5  # mm\n    dxf.bottom_margin = 20  # mm\n    dxf.right_margin = 7.5  # mm\n    dxf.top_margin = 20  # mm\n    dxf.paper_width = 420  # mm\n    dxf.paper_height = 297  # mm\n    dxf.plot_origin_x_offset = 0\n    dxf.plot_origin_y_offset = 0\n    dxf.plot_window_x1 = 0\n    dxf.plot_window_y1 = 0\n    dxf.plot_window_x2 = 0\n    dxf.plot_window_y2 = 0\n    dxf.scale_numerator = 1\n    dxf.scale_denominator = 1\n    dxf.plot_layout_flags = 688\n    dxf.plot_paper_units = 0  # 0: inches, 1: millimeters, 2: pixels\n    dxf.plot_rotation = 0  # 0: no rotation, 1: 90 degrees CCW, 2: upside-down, 3: 90 degrees CW\n    dxf.plot_type = 0  # 0: last screen display, 1: drawing extents, 2: drawing limits, 3: view specified, 4: window specified, 5: layout information\n    dxf.current_style_sheet = \"\"\n    dxf.standard_scale_type = 16  # 16: 1:1\n    dxf.shade_plot_mode = 0  # 0: As Displayed, 1: Wireframe, 2: Hidden, 3: Rendered\n    dxf.shade_plot_resolution_level = 2  # 2: Normal\n    dxf.shade_plot_custom_dpi = 300\n    dxf.unit_factor = 1\n    dxf.paper_image_origin_x = 0\n    dxf.paper_image_origin_y = 0\n    dxf.shade_plot_handle = None\n```\n\n----------------------------------------\n\nTITLE: Packed DXF Tags Implementation\nDESCRIPTION: Memory-efficient storage implementations for DXF tags using Python lists and arrays. Includes specialized vertex array handling for coordinate data.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/develop/dxftag_collections.rst#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nclass TagList:\n    def __init__(self, data: Iterable = None):\n        self.values = list(data) if data is not None else []\n\nclass TagArray(TagList):\n    DTYPE = 'type_identifier'\n    def __init__(self, data: Iterable = None):\n        self.values = array.array(self.DTYPE)\n\nclass VertexArray:\n    VERTEX_SIZE = 2  # or 3\n    def __init__(self, data: Iterable = None):\n        self.values = array.array('d')\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Line Type in ezdxf\nDESCRIPTION: Demonstrates how to add a simple line type \"CENTER\" to a drawing using the ezdxf library. The pattern is defined as a sequence of line segments and gaps.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/tables/linetype_table.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndwg.linetypes.add(\"CENTER\",\n    description=\"Center ____ _ ____ _ ____ _ ____ _ ____ _ ____\",\n    pattern=[2.0, 1.25, -0.25, 0.25, -0.25],\n)\n```\n\n----------------------------------------\n\nTITLE: Entity Query String Syntax in ezdxf\nDESCRIPTION: Defines the formal syntax of the query string used in ezdxf. The query string consists of an EntityQuery followed by optional AttribQuery components enclosed in square brackets. The 'i' suffix can be appended to make string comparisons case-insensitive.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tools/query.rst#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nQueryString := EntityQuery \"[\" AttribQuery \"]\" \"i\"?*\n```\n\n----------------------------------------\n\nTITLE: Entity Filtering in ezdxf Drawing\nDESCRIPTION: Demonstrates how to exclude specific DXF entities from rendering using a filter function based on entity properties.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/howto/drawing-addon.rst#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom ezdxf.entities import DXFGraphic\n\ndef my_filter(e: DXFGraphic) -> bool:\n    return e.dxf.color != 2\n\nFrontend(ctx, out).draw_layout(msp, finalize=True, filter_func=my_filter)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating offset_vertices_2d Function in Python\nDESCRIPTION: Example showing how to use the offset_vertices_2d function with a square shape. The function creates an offset of 0.5 units from the original vertices in a closed polygon.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/math/core.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nsource = [(0, 0), (3, 0), (3, 3), (0, 3)]\nresult = list(offset_vertices_2d(source, offset=0.5, closed=True))\n```\n\n----------------------------------------\n\nTITLE: Defining the Solid3d DXF Entity Class\nDESCRIPTION: Class definition for the Solid3d entity type in ezdxf. Inherits from the Body class and represents 3DSOLID objects in DXF drawings. Requires DXF R2000 or later versions and includes a history handle attribute.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfentities/3dsolid.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Solid3d:\\n    # Same attributes and methods as parent class Body\\n    dxf.history_handle  # Handle to history object\n```\n\n----------------------------------------\n\nTITLE: Enabling Lineweight Display in DXF\nDESCRIPTION: Sets the $LWDISPLAY header variable to 1 to enable the display of lineweights in DXF viewers that support this feature.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/howto/viewer.rst#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndoc.header[\"$LWDISPLAY\"] = 1\n```\n\n----------------------------------------\n\nTITLE: Setting or Replacing XDATA Tags on a DXF Entity in Python\nDESCRIPTION: This snippet demonstrates how to set XDATA tags for a specific AppID regardless of whether the entity already has XDATA for that AppID. This will replace any existing XDATA for the specified AppID.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/xdata.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nentity.set_xdata(\"EZDXF\", [(1000, \"MyString\")])\n```\n\n----------------------------------------\n\nTITLE: Defining DwfDefinition Class in Python\nDESCRIPTION: The DwfDefinition class is a subclass of UnderlayDefinition specific for DWF underlay files. It has a DXF type of 'DWFDEFINITION' and can be created using factory functions.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfobjects/underlaydef.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass DwfDefinition(UnderlayDefinition):\n    # DWF underlay file\n```\n\n----------------------------------------\n\nTITLE: Detecting XREF Block Types\nDESCRIPTION: Code to identify and handle different types of XREF blocks (regular XREF and XREF overlay) from a block layout. This snippet checks the block type and calls appropriate handler functions.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/howto/content.rst#2025-04-23_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nblock = block_layout.block  # the BLOCK entity\nif block.is_xref:\n    handle_xref(block_layout)\nelif block.is_xref_overlay:\n    handle_xref_overlay(block_layout)\n```\n\n----------------------------------------\n\nTITLE: Defining UnderlayDefinition Class in Python\nDESCRIPTION: The UnderlayDefinition class is a base class for underlay definitions in ezdxf. It inherits from DXFObject and has attributes for filename and name. The name attribute defines which part of the underlay file to display.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfobjects/underlaydef.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass UnderlayDefinition:\n    dxf.filename: str  # Relative or absolute path to the underlay file\n    dxf.name: str  # Defines which part of the underlay file to display\n```\n\n----------------------------------------\n\nTITLE: Analyzing MULTILEADER BLOCK with Initial Scaling in DXF\nDESCRIPTION: Examines MULTILEADER entities with BLOCK content and initial block scaling at scale 1.0 and 3.0. Shows how the initial block scale vector interacts with the overall scaling factor.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/exploration/scaling_multileader.txt#2025-04-23_snippet_2\n\nLANGUAGE: DXF\nCODE:\n```\nDXF Attributes\n--------------\n\n'arrow_head_size': 4.0,\n'block_scale_vector': Vec3(2.0, 2.0, 2.0),  basic block scaling\n'dogleg_length': 3.0,\n'scale': 1.0,\n\nMLeaderContext\n--------------\n\nscale: 1.0\nbase_point: (149.2, 185.9, 0.0)\nchar_height: 4.0\narrow_head_size: 4.0\nlanding_gap_size: 2.0\n\nBlockData\n---------\n\ninsert: (149.2, 175.9, 0.0)\nscale: (2.0, 2.0, 2.0)\nmatrix: [\n    2.0, 0.0, 0.0, 149.2,\n    0.0, 2.0, 0.0, 175.9,\n    0.0, 0.0, 2.0, 0.0,\n    0.0, 0.0, 0.0, 1.0\n]\n```\n\nLANGUAGE: DXF\nCODE:\n```\nDXF Attributes\n--------------\n\n'arrow_head_size': 4.0,                     not scaled\n'block_scale_vector': Vec3(2.0, 2.0, 2.0),  not scaled\n'dogleg_length': 9.0,                       scaled\n'scale': 3.0,\n\nMLeaderContext\n--------------\n\nscale: 3.0\nbase_point: (155.2, 185.9, 0.0)             insert point in WCS\nchar_height: 12.0                           scaled\narrow_head_size: 12.0                       scaled\nlanding_gap_size: 6.0                       scaled\n\nBlockData\n---------\n\ninsert: (155.2, 155.9, 0.0)                 insert point in WCS\nscale: (6.0, 6.0, 6.0)                      scaled: block_scale_vector * 3\nmatrix: [\n    6.0, 0.0, 0.0, 155.2,\n    0.0, 6.0, 0.0, 155.9,\n    0.0, 0.0, 6.0, 0.0,\n    0.0, 0.0, 0.0, 1.0\n]\n```\n\n----------------------------------------\n\nTITLE: Vec3 Axis Constants in Python\nDESCRIPTION: Defines standard axis vectors in 3D space using the Vec3 class. Includes X_AXIS, Y_AXIS, Z_AXIS unit vectors and NULLVEC zero vector.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/math/core.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nX_AXIS = Vec3(1, 0, 0)\n```\n\nLANGUAGE: python\nCODE:\n```\nY_AXIS = Vec3(0, 1, 0)\n```\n\nLANGUAGE: python\nCODE:\n```\nZ_AXIS = Vec3(0, 0, 1)\n```\n\nLANGUAGE: python\nCODE:\n```\nNULLVEC = Vec3(0, 0, 0)\n```\n\n----------------------------------------\n\nTITLE: Parsing Root DICTIONARY Contents in DXF R2018\nDESCRIPTION: Demonstrates the structure of the root DICTIONARY object in the OBJECTS section of a DXF R2018 file. This dictionary contains entries pointing to other dictionaries that organize various object types like groups, layouts, and styles.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/datamodel.rst#2025-04-23_snippet_1\n\nLANGUAGE: none\nCODE:\n```\n0\nSECTION\n2       <<< start of the OBJECTS section\nOBJECTS\n0       <<< root DICTIONARY has to be the first object in the OBJECTS section\nDICTIONARY\n5       <<< handle\nC\n330     <<< owner tag\n0       <<< always #0, has no owner\n100\nAcDbDictionary\n281     <<< hard owner flag\n1\n3       <<< first entry\nACAD_CIP_PREVIOUS_PRODUCT_INFO\n350     <<< handle to target (pointer)\n78B     <<< points to a XRECORD with product info about the creator application\n3       <<< entry with unknown meaning, if I should guess: something with about colors ...\nACAD_COLOR\n350\n4FB     <<< points to a DICTIONARY\n3       <<< entry with unknown meaning\nACAD_DETAILVIEWSTYLE\n350\n7ED     <<< points to a DICTIONARY\n3       <<< GROUP management, mandatory in all DXF versions\nACAD_GROUP\n350\n4FC     <<< points to a DICTIONARY\n3       <<< LAYOUT management, mandatory if more than the *active* paperspace is used\nACAD_LAYOUT\n350\n4FD     <<< points to a DICTIONARY\n3       <<< MATERIAL management\nACAD_MATERIAL\n350\n4FE     <<< points to a DICTIONARY\n3       <<< MLEADERSTYLE management\nACAD_MLEADERSTYLE\n350\n4FF     <<< points to a DICTIONARY\n3       <<< MLINESTYLE management\nACAD_MLINESTYLE\n350\n500     <<< points to a DICTIONARY\n3       <<< PLOTSETTINGS management\nACAD_PLOTSETTINGS\n350\n501     <<< points to a DICTIONARY\n3       <<< plot style name management\nACAD_PLOTSTYLENAME\n350\n503     <<< points to a ACDBDICTIONARYWDFLT\n3       <<< SCALE management\nACAD_SCALELIST\n350\n504     <<< points to a DICTIONARY\n3       <<< entry with unknown meaning\nACAD_SECTIONVIEWSTYLE\n350\n7EB     <<< points to a DICTIONARY\n3       <<< TABLESTYLE management\nACAD_TABLESTYLE\n350\n505     <<< points to a DICTIONARY\n3       <<< VISUALSTYLE management\nACAD_VISUALSTYLE\n350\n506     <<< points to a DICTIONARY\n3       <<< entry with unknown meaning\nACAD_RECOMPOSE_DATA\n350\n7F3\n3       <<< entry with unknown meaning\nAcDbVariableDictionary\n350\n7AE     <<< points to a DICTIONARY with handles to DICTIONARYVAR objects\n0\nDICTIONARY\n...\n...\n0\nENDSEC\n```\n\n----------------------------------------\n\nTITLE: Overriding DIMSTYLE Values for DIMENSION Entities in Python\nDESCRIPTION: This snippet demonstrates how to override DIMSTYLE values for DIMENSION entities and recreate the graphical representation using ezdxf.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/howto/content.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndimstyle_override = dimension.override()\ndimstyle_override.set_tolerance(0.1)\n\n# delete associated geometry block\ndel doc.blocks[dimension.dxf.geometry]\n\n# recreate geometry block\ndimstyle_override.render()\n```\n\n----------------------------------------\n\nTITLE: Working with True Color Values in RGB Format\nDESCRIPTION: Demonstrates how to set and get true color values using RGB tuples with the rgb property, which is available for DXF R2004 and later versions.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/common_graphical_attributes.rst#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nentity.rgb = (255, 128, 16)\n```\n\nLANGUAGE: Python\nCODE:\n```\nrgb = entity.rgb\nif rgb is not None:\n    r, g, b = rgb\n```\n\n----------------------------------------\n\nTITLE: DimStyle Arc Symbol Constants\nDESCRIPTION: Constants defining arc symbol display options for ArcDimension class, with values controlling symbol placement or disabling.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tables/dimstyle_table_entry.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n=== ====================================================\n0   arc symbol preceding the measurement text\n1   arc symbol above the measurement text\n2   disable arc symbol\n=== ====================================================\n```\n\n----------------------------------------\n\nTITLE: Converting DXF to SVG Using the Draw Command\nDESCRIPTION: Example of using the ezdxf draw sub-command to convert a DXF file to SVG format using the Matplotlib backend.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/launcher.rst#2025-04-23_snippet_4\n\nLANGUAGE: Text\nCODE:\n```\nC:\\> ezdxf draw -o gear.svg gear.dxf\n```\n\n----------------------------------------\n\nTITLE: Implementing DimStyleTable Class in Python\nDESCRIPTION: DimStyleTable is a subclass of Table that manages a collection of DimStyle objects. It provides an add method for adding new dimension styles.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tables/tables.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass DimStyleTable(Table):\n    def add(self): pass\n```\n\n----------------------------------------\n\nTITLE: Installing ezdxf with Drawing Add-on Dependencies\nDESCRIPTION: Command to install ezdxf with additional drawing functionality that includes Matplotlib, PySide6, PyMuPDF, and Pillow packages.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/setup.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip3 install ezdxf[draw]\n```\n\n----------------------------------------\n\nTITLE: Setting Page Size in Inches for Matplotlib Figure in Python\nDESCRIPTION: This code snippet shows how to set the page or image size in inches for a Matplotlib figure using the set_size_inches method. This is useful for rendering content to a specific paper size without worrying about scale.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/howto/drawing-addon.rst#2025-04-23_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nfig.set_size_inches(8, 11)\n```\n\n----------------------------------------\n\nTITLE: Extracting flat polygonal faces from 3DSOLID entities in Python\nDESCRIPTION: Example script to extract all flat polygonal faces as meshes from 3DSOLID entities in a DXF file using the ezdxf.acis.api module.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/acis.rst#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nimport ezdxf\nfrom ezdxf.acis import api as acis\n\n\ndoc = ezdxf.readfile(\"3dsolids.dxf\")\nmsp = doc.modelspace()\n\ndoc_out = ezdxf.new()\nmsp_out = doc_out.modelspace()\n\nfor e in msp.query(\"3DSOLID\"):\n    for body in acis.load_dxf(data):\n        for mesh in acis.mesh_from_body(body):\n            mesh.render_mesh(msp_out)\ndoc_out.saveas(\"meshes.dxf\")\n```\n\n----------------------------------------\n\nTITLE: Defining Background Fill for MTEXT in DXF\nDESCRIPTION: This snippet demonstrates how to define background fill for an MTEXT entity in DXF. It includes group codes for specifying the background color, scaling factor, and transparency.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/entities/mtext.rst#2025-04-23_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n... <snip>\n1 <str> eu feugiat nulla facilisis at vero eros et accumsan et iusto ...\n73 <int> 1\n44 <float> 1.0\n90 <int> 1, b00000001   <<< use a color\n63 <int> 1              <<< ACI color (red)\n45 <float> 1.5          <<< bg scaling factor, relative to the char height\n441 <int> 0             <<< ignored (optional)\n... <snip>\n```\n\n----------------------------------------\n\nTITLE: Creating a Solid with Reversed Vertex Order in ezdxf\nDESCRIPTION: Example demonstrating how to create a properly rendered square by reversing the last two vertices. This addresses the quirky vertex ordering of TRACE entities in DXF files.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfentities/trace.rst#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nmsp.add_solid([(0, 0), (10, 0), (0, 10), (10, 10)])\n```\n\n----------------------------------------\n\nTITLE: Using XDataUserDict with DXF Entity Context Manager\nDESCRIPTION: Example showing how to use XDataUserDict to store and retrieve dictionary-like data in XDATA. Demonstrates storing key-value pairs with different data types and accessing values using dictionary syntax.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/user_xdata.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwith XDataUserDict.entity(entity, name=\"MyDict\", appid=\"MYAPP\") as ud:\n    ud[\"comment\"] = \"The value of PI\"  # str \"\\n\" and \"\\r\" are not allowed\n    ud[\"pi\"] = 3.141592  # float\n    ud[\"number\"] = 1 # int\n    ud[\"vertex\"] = Vec3(1, 2, 3) # Vec3\n\n    # invalid data type raises DXFTypeError\n    ud[\"vertex\"] = (1, 2, 3)  # tuple instead of Vec3\n\n    # retrieve single values\n    s = ud[\"comment\"]\n    pi = ud.get(\"pi\", 3.141592)\n\n    # store whole content into a Python dict\n    data = dict(ud)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Upright Function Effects on Arc Points in ezdxf\nDESCRIPTION: This code extends the previous example by applying the upright function to the mirrored arc and showing how it affects the start and end points. It illustrates that the points get swapped after uprighting.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/upright.rst#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n# This creates an inverted extrusion vector:\nassert mirrored_arc.dxf.extrusion.isclose((0, 0, -1))\n\nstart_point_inv = mirrored_arc.start_point\nend_point_inv = mirrored_arc.end_point\n\nupright(mirrored_arc)\n# OCS is aligned with WCS:\nassert mirrored_arc.dxf.extrusion.isclose((0, 0, 1))\n\n# start- and end points are swapped after applying upright()\nassert mirrored_arc.start_point.isclose(end_point_inv)\nassert mirrored_arc.end_point.isclose(start_point_inv)\n\n# draw lines to the start- and end point of the mirrored ARC\nmsp.add_line((0, 0), mirrored_arc.start_point, dxfattribs={\"color\": ezdxf.const.GREEN})\nmsp.add_line((0, 0), mirrored_arc.end_point, dxfattribs={\"color\": ezdxf.const.BLUE})\n```\n\n----------------------------------------\n\nTITLE: Creating a Solid with Default Vertex Order in ezdxf\nDESCRIPTION: Example showing how to create a solid using the default vertex order. Due to the unusual vertex storage of TRACE entities, the last two vertices are reversed, resulting in a shape that might not match expectations.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfentities/trace.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nmsp.add_solid([(0, 0), (10, 0), (10, 10), (0, 10)])\n```\n\n----------------------------------------\n\nTITLE: Documenting EulerSpiral Class in Python\nDESCRIPTION: Documentation for the EulerSpiral class, which represents an Euler spiral (clothoid). It includes methods for calculating various properties of the spiral and approximating it with other curve types.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/math/core.rst#2025-04-23_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: EulerSpiral\n\n    .. automethod:: radius\n\n    .. automethod:: tangent\n\n    .. automethod:: distance\n\n    .. automethod:: point\n\n    .. automethod:: circle_center\n\n    .. automethod:: approximate\n\n    .. automethod:: bspline\n```\n\n----------------------------------------\n\nTITLE: Redefining the Default Cell Style\nDESCRIPTION: Modifies the default cell style properties to specify the text style, character height, and alignment for regular table cells.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/addons/tablepainter.rst#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n# reset default cell style\ndefault_style = table.get_cell_style(\"default\")\ndefault_style.text_style = \"CELL\"\ndefault_style.char_height = 0.5\ndefault_style.align = MTextEntityAlignment.BOTTOM_LEFT\n```\n\n----------------------------------------\n\nTITLE: Defining LeaderLine Class Attributes in Python\nDESCRIPTION: Specifies the attributes of the LeaderLine class, including vertices, breaks, index, and color. These attributes define the properties of a leader line in a multi-leader object.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfentities/mleader.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass LeaderLine:\n    vertices: List[Vec3]  # list of WCS coordinates\n    breaks: Union[List[Union[int, Vec3]], None]  # mixed list of indices and break coordinates\n    index: int  # leader line index?\n    color: int  # leader line color override\n```\n\n----------------------------------------\n\nTITLE: Setting Background and Foreground Colors in ezdxf Drawing\nDESCRIPTION: Shows how to override default background and foreground colors using LayoutProperties. Colors are specified in hex format '#RRGGBBAA'.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/howto/drawing-addon.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom ezdxf.addons.drawing.properties import LayoutProperties\n\nfig: plt.Figure = plt.figure()\nax: plt.Axes = fig.add_axes((0, 0, 1, 1))\nctx = RenderContext(doc)\n\n# get the modelspace properties\nmsp_properties = LayoutProperties.from_layout(msp)\n\n# set light gray background color and black foreground color\nmsp_properties.set_colors(\"#eaeaea\")\nout = MatplotlibBackend(ax)\n\n# override the layout properties and render the modelspace\nFrontend(ctx, out).draw_layout(\n    msp,\n    finalize=True,\n    layout_properties=msp_properties,\n)\nfig.savefig(\"image.png\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Epsg Code and CRS Transformation Matrix\nDESCRIPTION: Obtains the EPSG code and coordinate reference system (CRS) transformation matrix from a DXF document. This information is used for coordinate transformations between different projection systems.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/geo.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nif doc.has_geodata:\n    # extract target projection from the GEODATA entity\n    epsg = doc.geodata.get_crs_epsg()\n    # the transformation matrix from WCS to CRS\n    m = doc.geodata.get_crs_transformation().inverse()\nelse:\n    # Unknown CRS\n    epsg = -1\n    m = Matrix44.identity()\n```\n\n----------------------------------------\n\nTITLE: Defining LengthUnits Enumeration in Python\nDESCRIPTION: Enumerates length unit formats used in CAD drawings. Includes Scientific, Decimal, Engineering, Architectural, and Fractional options.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/enums.rst#2025-04-23_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nclass LengthUnits:\n    Scientific\n    Decimal\n    Engineering\n    Architectural\n    Fractional\n```\n\n----------------------------------------\n\nTITLE: Executing ezdxf draw command with backend specification in Python\nDESCRIPTION: This command allows users to specify different backends for the 'ezdxf draw' command, including matplotlib, qt, mupdf, and custom_svg. It demonstrates how to use the --backend option to select a specific rendering backend.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/Release Notes v1.2.x.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nezdxf draw --backend {matplotlib,qt,mupdf,custom_svg}\n```\n\n----------------------------------------\n\nTITLE: Adding AppID in ezdxf\nDESCRIPTION: Creates a new AppID entry in the DXF document. AppIDs are required for grouping XDATA sections in DXF entities and must be registered for AutoCAD compatibility.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tasks/add_resources.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndoc.appids.add(\"EZDXF\")\n```\n\n----------------------------------------\n\nTITLE: Defining Insert Class Attributes in Python for ezdxf\nDESCRIPTION: This snippet defines the attributes of the Insert class, which represent various properties of a block reference in a DXF file. It includes attributes for name, insertion point, scaling, rotation, and array insertion properties.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/blocks/insert.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass Insert:\n    dxf.name  # BLOCK name (str)\n    dxf.insert  # Insertion location of the BLOCK base point as (2D/3D Point in OCS)\n    dxf.xscale  # Scale factor for x direction (float)\n    dxf.yscale  # Scale factor for y direction (float)\n    dxf.zscale  # Scale factor for z direction (float)\n    dxf.rotation  # Rotation angle in degrees (float)\n    dxf.row_count  # Count of repeated insertions in row direction, MINSERT entity if > 1 (int)\n    dxf.row_spacing  # Distance between two insert points (MINSERT) in row direction (float)\n    dxf.column_count  # Count of repeated insertions in column direction, MINSERT entity if > 1 (int)\n    dxf.column_spacing  # Distance between two insert points (MINSERT) in column direction (float)\n    attribs  # A list of all attached Attrib entities\n```\n\n----------------------------------------\n\nTITLE: Using XDataUserDict Helper Class (Python)\nDESCRIPTION: Demonstrates the use of XDataUserDict helper class for managing XDATA content in a simple way. It provides a dict-like interface for storing and retrieving data.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/custom_data.rst#2025-04-23_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nfrom ezdxf.math import Vec3\nfrom ezdxf.entities.xdata import XDataUserDict, XDataUserList\n\nline = msp.add_line((0, 0), (10, 10))\nwith XDataUserDict(line, \"MyDictionary\", \"MyAppID\") as xdict:\n    xdict[\"name\"] = \"Line01\"\n    xdict[\"length\"] = 14.142135623730951\n    xdict[\"count\"] = 1\n    xdict[\"center\"] = Vec3(5, 5, 0)\n\n# Getting the data back from an entity:\nxdict = XDataUserDict(line, \"MyDictionary\", \"MyAppID\")\nname = xdict.get(\"name\")\nlength = xdict.get(\"length\")\ncount = xdict.get(\"count\")\ncenter = xdict.get(\"center\")\n```\n\n----------------------------------------\n\nTITLE: Adding ezdxf Resources to an Existing DXF Document\nDESCRIPTION: Adds all ezdxf-specific resources (line types, text styles, and dimension styles) to an existing DXF document using the setup_drawing utility function.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/howto/document.rst#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport ezdxf\nfrom ezdxf.tools.standards import setup_drawing\n\ndoc = ezdxf.readfile(\"your.dxf\")\nsetup_drawing(doc, topics=\"all\")\n```\n\n----------------------------------------\n\nTITLE: Creating Radius Dimension with User-Defined Text Location Inside\nDESCRIPTION: Example showing how to place the radius dimension text at a user-defined location inside the circle. The location coordinates (1, 1) specify where the dimension text should be placed.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/radius_dimension.rst#2025-04-23_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\ndim = msp.add_radius_dim(\n    center=(0, 0),\n    radius=2.5,\n    location=(1, 1),\n    dimstyle=\"EZ_RADIUS\"\n)\n```\n\n----------------------------------------\n\nTITLE: Extension Dictionary Tag Sequence Format in DXF\nDESCRIPTION: Demonstrates the tag sequence for extension dictionaries in DXF, which allow arbitrary database objects to be attached to any DXF object. Shows the required formatting with group codes 102 and 360.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/dxftags.rst#2025-04-23_snippet_1\n\nLANGUAGE: none\nCODE:\n```\n102\n{ACAD_XDICTIONARY\n360\nHard-owner ID/handle to owner dictionary\n102\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MLineStyleElements Class in Python for ezdxf\nDESCRIPTION: This snippet defines the MLineStyleElements class, which manages a list of MLineStyleElement objects. It includes methods for length, indexing, and appending elements.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfentities/mline.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass MLineStyleElements:\n    elements = None\n\n    def __len__(self):\n        pass\n\n    def __getitem__(self):\n        pass\n\n    def append(self):\n        pass\n```\n\n----------------------------------------\n\nTITLE: Creating GeoProxy from DXF Entity\nDESCRIPTION: Creates a GeoProxy object from a DXF entity using the proxy function. This allows for coordinate transformations and conversion to GeoJSON format.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/geo.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom ezdxf.addons.geo import proxy\n\n# Create GeoProxy from DXF entity:\ngeo_proxy = proxy(entity)\n```\n\n----------------------------------------\n\nTITLE: Importing and Using DXF Version Constants in Python\nDESCRIPTION: Shows how to import and use DXF version constants from the ezdxf.lldxf.const module, demonstrating two equivalent ways to access the same constants.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/const.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ezdxf.lldxf.const import DXF12\nimport ezdxf\n\nprint(DXF12)\nprint(ezdxf.const.DXF12)\n```\n\n----------------------------------------\n\nTITLE: Global Constants Definition in EdgeMiner Module\nDESCRIPTION: Defines the global constants used throughout the EdgeMiner module, including gap tolerance for detecting connections, absolute tolerance for calculations, and a timeout value to prevent infinite processing loops.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/edgeminer.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nGAP_TOL = 1e-9\nABS_TOL = 1e-9\nTIMEOUT = 60.0  # in seconds\n```\n\n----------------------------------------\n\nTITLE: Font Specification in MTEXT Format Code\nDESCRIPTION: This snippet shows how to specify a font file and its traits (bold and italic) in MTEXT format codes.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/MText format codes.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n\\fAIGDT|b0|i0;\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Border Frame for Table Headers\nDESCRIPTION: Defines a cell style with red borders and creates a frame around the table header row using this style.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/addons/tablepainter.rst#2025-04-23_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n# new cell style is required\nred_frame = table.new_cell_style(\"red-frame\")\nred_borderline = table.new_border_style(color=ezdxf.colors.RED, lineweight=35)\n# set the red borderline style for all cell borders\nred_frame.set_border_style(red_borderline)\n# create the frame object\ntable.frame(0, 0, 4, style=\"red-frame\")\n```\n\n----------------------------------------\n\nTITLE: Defining MTextBackgroundColor Enumeration in Python\nDESCRIPTION: Enumerates background color options for multi-line text (MText) in CAD drawings. Includes OFF, COLOR, WINDOW, and CANVAS options.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/enums.rst#2025-04-23_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nclass MTextBackgroundColor:\n    OFF\n    COLOR\n    WINDOW\n    CANVAS\n```\n\n----------------------------------------\n\nTITLE: Drawing Page Setup Method Usage\nDESCRIPTION: Example showing usage of the Drawing.page_setup() method for configuring print layouts with paper size specification\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/Release Notes v1.0.x.md#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nDrawing.page_setup()\n```\n\n----------------------------------------\n\nTITLE: Accessing Spline Data Count from DXF Attributes in Python\nDESCRIPTION: Demonstrates how to retrieve the count of fit points, control points, and knots as stored in the DXF attributes of a spline entity.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/spline.rst#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ncount = spline.dxf.n_fit_points\ncount = spline.dxf.n_control_points\ncount = spline.dxf.n_knots\n```\n\n----------------------------------------\n\nTITLE: Defining MTextStroke Enumeration in Python\nDESCRIPTION: Enumerates text stroke options for multi-line text (MText) in CAD drawings. Includes UNDERLINE, STRIKE_THROUGH, and OVERLINE options.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/enums.rst#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nclass MTextStroke:\n    UNDERLINE\n    STRIKE_THROUGH\n    OVERLINE\n```\n\n----------------------------------------\n\nTITLE: Displaying supported output formats for a specific backend in Python\nDESCRIPTION: This command shows how to list the supported output formats for a specified backend using the ezdxf draw command. It uses the --formats flag along with the --backend option to display format information for a particular rendering backend.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/Release Notes v1.2.x.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nezdxf draw --formats --backend <backend-name>\n```\n\n----------------------------------------\n\nTITLE: Documenting ApproxParamT Class in Python\nDESCRIPTION: Documentation for the ApproxParamT class, which is used for approximating parameter t values on a curve. It includes properties and methods for working with approximated curves.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/math/core.rst#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: ApproxParamT(curve, *, max_t: float = 1.0, segments: int = 100)\n\n    .. autoproperty:: max_t\n\n    .. autoproperty:: polyline\n\n    .. automethod:: param_t\n\n    .. automethod:: distance\n```\n\n----------------------------------------\n\nTITLE: Defining AngularUnits Enumeration in Python\nDESCRIPTION: Enumerates angular unit formats used in CAD drawings. Includes DecimalDegrees, DegreesMinutesSeconds, Grad, and Radians options.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/enums.rst#2025-04-23_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nclass AngularUnits:\n    DecimalDegrees\n    DegreesMinutesSeconds\n    Grad\n    Radians\n```\n\n----------------------------------------\n\nTITLE: Setting Up Windows Build Environment for ezdxf\nDESCRIPTION: Commands to create a build directory, setup virtual environment, and activate it on Windows for building ezdxf from source.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/setup.rst#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmkdir build\ncd build\npy -m venv .venv\n.venv/Scripts/activate.bat\n```\n\n----------------------------------------\n\nTITLE: Setting the Logging Level for ezdxf\nDESCRIPTION: Controls the verbosity of ezdxf's logging output by setting the logging level. This example sets it to ERROR, which suppresses WARNING, INFO, and DEBUG messages, showing only severe errors.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/howto/document.rst#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport logging\n\nlogging.getLogger(\"ezdxf\").setLevel(logging.ERROR)\n```\n\n----------------------------------------\n\nTITLE: Customizing Extension Line Properties for Linear Dimension in Python using ezdxf\nDESCRIPTION: This code shows how to customize extension line properties such as color, linetype, lineweight, and offset for a linear dimension using ezdxf. It creates a dimension with specified extension line properties using the override parameter.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/linear_dimension.rst#2025-04-23_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nmsp.add_linear_dim(\n    base=(3, 2),\n    p1=(3, 0),\n    p2=(6, 0),\n    override={\n        \"dimclre\": 1,   # red\n        \"dimltex1\": \"DASHED2\",\n        \"dimltex2\": \"CENTER2\",\n        \"dimlwe\": 35,   # 0.35mm line weight\n        \"dimexe\": 0.3,  # length above dimension line\n        \"dimexo\": 0.1,  # offset from measurement point\n    }\n).render()\n```\n\n----------------------------------------\n\nTITLE: Parsing MLEADER Context Data Structure for Block Content in DXF\nDESCRIPTION: This snippet shows the DXF tag structure for a MULTILEADER entity with Block content created by BricsCAD. It includes block record handle, extrusion vector, location, scale, rotation, color, and a 4x4 transformation matrix.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/entities/mleader.rst#2025-04-23_snippet_1\n\nLANGUAGE: DXF\nCODE:\n```\n300 <str> CONTEXT_DATA{\n40 <float> 1.0\n10 <point> (x, y, z)\n41 <float> 4.0\n140 <float> 4.0\n145 <float> 2.0\n174 <int> 1\n175 <int> 1\n176 <int> 0\n177 <int> 0\n290 <int> 0       <<< has_mtext_content\n296 <int> 1       <<< has_block_content\n<<< START Block content tags\n341 <hex> #94                 <<< dxf.block_record_handle\n14 <point> (0.0, 0.0, 1.0)    <<< Block extrusion vector\n15 <point> (x, y, z)          <<< Block location\n16 <point> (1.0, 1.0, 1.0)    <<< Block scale vector, the x-, y- and z-axis scaling factors\n46 <float> 0.0                <<< Block rotation in radians!\n93 <int> -1056964608          <<< Block color (raw value)\n47 <float> 1.0                <<< start of transformation matrix (16x47)\n47 <float> 0.0\n47 <float> 0.0\n47 <float> 18.427396871473\n47 <float> 0.0\n47 <float> 1.0\n47 <float> 0.0\n47 <float> 0.702618780008\n47 <float> 0.0\n47 <float> 0.0\n47 <float> 1.0\n47 <float> 0.0\n47 <float> 0.0\n47 <float> 0.0\n47 <float> 0.0\n47 <float> 1.0                <<< end of transformation matrix\n<<< END Block content tags\n110 <point> (0.0, 0.0, 0.0)       <<< MLEADER plane origin point\n111 <point> (1.0, 0.0, 0.0)       <<< MLEADER plane x-axis direction\n112 <point> (0.0, 1.0, 0.0)       <<< MLEADER plane y-axis direction\n297 <int> 0                       <<< MLEADER normal reversed\n302 <str> LEADER{\n...\n303 <str> }\n272 <int> 9\n273 <int> 9\n301 <str> }\n```\n\n----------------------------------------\n\nTITLE: Importing Point Rendering Module in Python\nDESCRIPTION: This code snippet shows how to import the point rendering module in ezdxf. The module contains helper functions for rendering Point entities as DXF primitives.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/render/point.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. module:: ezdxf.render.point\n```\n\n----------------------------------------\n\nTITLE: Writing GeoJSON Data to File\nDESCRIPTION: Writes GeoJSON data to a file using the Python json module. Extracts the GeoJSON representation from a GeoProxy object via the __geo_interface__ property.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/geo.rst#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# Write GeoJSON to file\nwith open(str(out_path), 'w') as fp:\n    json.dump(geo_proxy.__geo_interface__, fp, indent=2)\n```\n\n----------------------------------------\n\nTITLE: PlotStyle Class Definition\nDESCRIPTION: Class representing individual plot style entries with properties for pen numbers, colors, line types, and styling options.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/addons/acadctb.rst#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nclass PlotStyle:\n    index: int\n    aci: int\n    description: str\n    physical_pen_number: int\n    virtual_pen_number: int\n    screen: int\n    linetype: bool\n    adaptive_linetype: bool\n    linepattern_size: float\n    lineweight: int\n    end_style: int\n    join_style: int\n    fill_style: int\n    dithering: bool\n    grayscale: bool\n```\n\n----------------------------------------\n\nTITLE: Implementing LinetypeTable Class in Python\nDESCRIPTION: LinetypeTable is a subclass of Table that manages a collection of Linetype objects. It provides an add method for adding new linetypes.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tables/tables.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass LinetypeTable(Table):\n    def add(self): pass\n```\n\n----------------------------------------\n\nTITLE: Accessing HEADER Variables in DXF using ezdxf\nDESCRIPTION: This snippet shows how to retrieve integer and float values from HEADER variables in a DXF document using ezdxf. It accesses the $USERI1 and $USERR1 variables from the document header.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tasks/get_extended_data.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ni1 = doc.header[\"$USERI1\"]  # integer\nr1 = doc.header[\"$USERR1\"]  # float\n```\n\n----------------------------------------\n\nTITLE: Calculating Render Limits for Scaled Drawing in Python\nDESCRIPTION: This function calculates the render limits in drawing units based on the origin, paper size in inches, and desired scale. It's used as part of a process to render content at a specific scale and paper size.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/howto/drawing-addon.rst#2025-04-23_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\ndef render_limits(\n    origin: tuple[float, float],\n    size_in_inches: tuple[float, float],\n    scale: float,\n) -> tuple[float, float, float, float]:\n    \"\"\"Returns the final render limits in drawing units.\n\n    Args:\n         origin: lower left corner of the modelspace area to render\n         size_in_inches: paper size in inches\n         scale: render scale, e.g. scale=100 means 1:100, 1m is\n             rendered as 0.01m or 1cm on paper\n\n    \"\"\"\n    min_x, min_y = origin\n    max_x = min_x + size_in_inches[0] * scale\n    max_y = min_y + size_in_inches[1] * scale\n    return min_x, min_y, max_x, max_y\n```\n\n----------------------------------------\n\nTITLE: Defining Global Constants for Edge Processing in Python\nDESCRIPTION: Constants that define tolerance values for gap detection, length/distance measurements, and angle calculations in both degrees and radians for the EdgeSmith module.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/edgesmith.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nGAP_TOL = 1e-9\nLEN_TOL = 1e-9  # length and distance\nDEG_TOL = 1e-9  # angles in degree\nRAD_TOL = 1e-7  # angles in radians\n```\n\n----------------------------------------\n\nTITLE: Setting Paragraph Properties in MTextEditor\nDESCRIPTION: Shows how to set paragraph properties like indentation and alignment using ParagraphProperties class.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/mtext.rst#2025-04-23_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nfrom ezdxf.tools.text import ParagraphProperties, MTextParagraphAlignment\n\nattribs = dict(ATTRIBS)\nattribs[\"char_height\"] = 0.25\nattribs[\"width\"] = 7.5\neditor = MTextEditor(\"Indent the first line:\" + NP)\nprops = ParagraphProperties(\n    indent=1,\n    align=MTextParagraphAlignment.JUSTIFIED\n)\neditor.paragraph(props)\neditor.append(lorem_ipsum)\nmsp.add_mtext(str(editor), attribs)\n```\n\n----------------------------------------\n\nTITLE: Setting Fixed Length Extension Lines Using DimStyleOverride in Python with ezdxf\nDESCRIPTION: This snippet demonstrates an alternative method to set fixed length extension lines for a linear dimension using the DimStyleOverride method in ezdxf. It uses the set_extline_format method to specify the extension and fixed length values.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/linear_dimension.rst#2025-04-23_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\ndim = msp.add_linear_dim(base=(3, 2), p1=(3, 0), p2=(6, 0))\ndim.set_extline_format(extension=0.2, fixed_length=0.4)\ndim.render()\n```\n\n----------------------------------------\n\nTITLE: Using ezdxf Main Command Help\nDESCRIPTION: Shows the main help output for the ezdxf command line script, displaying available sub-commands and options.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/launcher.rst#2025-04-23_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nC:\\> ezdxf -h\nusage: ezdxf [-h] [-V] [-v] [--config CONFIG] [--log LOG]\n             {pp,audit,draw,view,browse,browse-acis,strip,config} ...\n\nCommand launcher for the Python package \"ezdxf\":\nhttps://pypi.org/project/ezdxf/\n\npositional arguments:\n  {audit,draw,view,browse,strip}\n    audit               audit and repair DXF files\n    draw                draw and convert DXF files by Matplotlib\n    view                view DXF files by the PyQt viewer\n    browse              browse DXF file structure\n    browse-acis         browse ACIS structures in DXF files\n    strip               strip comments from DXF files\n    config              manage config files\n    info                show information and optional stats of DXF files loaded by ezdxf,\n                        this may not represent the original content of the file, use the\n                        browse command to see the original content\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -V, --version         show version and exit\n  -f, --fonts           rebuild system font cache and print all fonts found\n  -v, --verbose         give more output\n  --config CONFIG       path to a config file\n  --log LOG             path to a verbose appending log\n```\n\n----------------------------------------\n\nTITLE: Formatting Vertex Components in MeshVertexCache\nDESCRIPTION: Examples of accessing and setting vertex data in a MeshVertexCache. The cache allows getting and setting vertex locations using (row, col) tuples as keys.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfentities/polyline.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Set vertex location: \ncache[row, col] = (x, y, z)\n\n# Get vertex location: \nx, y, z = cache[row, col]\n```\n\n----------------------------------------\n\nTITLE: Referencing Recorder Class in Python\nDESCRIPTION: This snippet shows how to reference the Recorder class from the ezdxf.addons.drawing.recorder module. The Recorder serves as an intermediate layer to capture drawing commands from the Frontend class.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/image_export.rst#2025-04-23_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nfrom ezdxf.addons.drawing.recorder import Recorder\n```\n\n----------------------------------------\n\nTITLE: LTYPE Table Structure in DXF R2000+\nDESCRIPTION: Shows the tag structure of the LTYPE table in DXF R2000+ format, which includes additional tags compared to R12 such as handles and subclass markers.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/tables/linetype_table.rst#2025-04-23_snippet_1\n\nLANGUAGE: none\nCODE:\n```\n0           <<< start of table\nTABLE\n2           <<< table type\nLTYPE\n5           <<< table handle\n5F\n330         <<< owner tag, tables have no owner\n0\n100         <<< subclass marker\nAcDbSymbolTable\n70          <<< count of table entiries, AutoCAD ignores this value\n9\n0           <<< 1. LTYPE table entry\nLTYPE\n                <<< LTYPE data tags\n0           <<< 2. LTYPE table entry\nLTYPE\n                <<< LTYPE data tags and so on\n0           <<< end of LTYPE table\nENDTAB\n```\n\n----------------------------------------\n\nTITLE: Defining EulerSpiral Class in Python for ezdxf\nDESCRIPTION: This class represents an Euler spiral in the ezdxf library. It includes methods for initialization, rendering as a polyline, and rendering as a spline.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/render/curves.rst#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nclass EulerSpiral:\n    def __init__(self):\n        pass\n\n    def render_polyline(self):\n        pass\n\n    def render_spline(self):\n        pass\n```\n\n----------------------------------------\n\nTITLE: Creating a Gear Mesh Swept Along a Helix in Python\nDESCRIPTION: This advanced example shows how to create a complex mesh by sweeping a gear profile along a helix path. It uses the forms module to create the gear profile and helix, then sweeps the profile along the path to create a 3D mesh, which is rendered as a MESH entity.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/mesh.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport ezdxf\nfrom ezdxf.render import forms\n\ndoc = ezdxf.new()\ndoc.layers.add(\"MESH\", color=ezdxf.colors.YELLOW)\nmsp = doc.modelspace()\n# sweeping a gear-profile\ngear = forms.gear(\n    8, top_width=0.01, bottom_width=0.02, height=0.02, outside_radius=0.1\n)\nhelix = path.helix(radius=2, pitch=1, turns=6)\n# along a helix spine\nsweeping_path = helix.flattening(0.1)\nmesh = forms.sweep(gear, sweeping_path, close=True, caps=True)\n# and render as MESH entity\nmesh.render_mesh(msp, dxfattribs={\"layer\": \"MESH\"})\ndoc.saveas(\"gear_along_helix.dxf\")\n```\n\n----------------------------------------\n\nTITLE: Importing Linear Algebra Module in Python\nDESCRIPTION: This snippet shows how to import the linear algebra module from ezdxf.math. It's used to access the linear algebra functionality provided by the ezdxf library.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/math/linalg.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. module:: ezdxf.math.linalg\n```\n\n----------------------------------------\n\nTITLE: Extended DXF Tags Class\nDESCRIPTION: Enhanced tag structure for DXF R13 and later versions. Handles application data, subclasses, XDATA, and embedded objects with specialized storage and access methods.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/develop/dxftag_collections.rst#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nclass ExtendedTags:\n    def __init__(self, tags: Iterable[DXFTag]=None, legacy=False):\n        self.appdata = []  # Application defined data\n        self.subclasses = []  # Subclasses\n        self.xdata = []  # XDATA\n        self.embedded_objects = []  # embedded objects\n\n```\n\n----------------------------------------\n\nTITLE: Validating Polygons Using Shapely in Python\nDESCRIPTION: Uses the Shapely package to validate polygons created from DXF HATCH entities. Checks if polygons are valid and filters out invalid geometry before further processing.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/geo.rst#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport ezdxf\nfrom ezdxf.addons import geo\nfrom shapely.geometry import shape\n\n# Load DXF document including HATCH entities.\ndoc = ezdxf.readfile('hatch.dxf')\nmsp = doc.modelspace()\n\n# Test a single entity\n# Get the first DXF hatch entity:\nhatch_entity = msp.query('HATCH').first\n\n# Create GeoProxy() object:\nhatch_proxy = geo.proxy(hatch_entity)\n\n# Shapely supports the __geo_interface__\nshapely_polygon = shape(hatch_proxy)\n\nif shapely_polygon.is_valid:\n    ...\nelse:\n    print(f'Invalid Polygon from {str(hatch_entity)}.')\n\n# Remove invalid entities by a filter function\ndef validate(geo_proxy: geo.GeoProxy) -> bool:\n    # Multi-entities are divided into single entities:\n    # e.g. MultiPolygon is verified as multiple single Polygon entities.\n    if geo_proxy.geotype == 'Polygon':\n        return shape(geo_proxy).is_valid\n    return True\n\n# The gfilter() function let only pass compatible DXF entities\nmsp_proxy = geo.GeoProxy.from_dxf_entities(geo.gfilter(msp))\n\n# remove all mappings for which validate() returns False\nmsp_proxy.filter(validate)\n```\n\n----------------------------------------\n\nTITLE: Defining Python Wipeout Module\nDESCRIPTION: Module definition for the Wipeout entity class which is part of ezdxf.entities. The Wipeout entity requires DXF R2000 or later versions and inherits from the Image class.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfentities/wipeout.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. module:: ezdxf.entities\n    :noindex:\n```\n\n----------------------------------------\n\nTITLE: Standard DXF Loading Scenario\nDESCRIPTION: Shows the basic approach for loading DXF files from trusted sources like AutoCAD or BricsCAD.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/drawing/recover.rst#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ntry:\n    doc = ezdxf.readfile(name)\nexcept IOError:\n    print(f'Not a DXF file or a generic I/O error.')\n    sys.exit(1)\nexcept ezdxf.DXFStructureError:\n    print(f'Invalid or corrupted DXF file: {name}.')\n    sys.exit(2)\n```\n\n----------------------------------------\n\nTITLE: DXF Extension Dictionary for Layer Viewport Overrides\nDESCRIPTION: Details the structure of the extension DICTIONARY entity that contains references to viewport-specific overrides for layer attributes. Each override type (transparency, color, linetype, lineweight) is stored as a reference to an XRECORD entity.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/tables/layer_table.rst#2025-04-23_snippet_3\n\nLANGUAGE: none\nCODE:\n```\n0           <<< entity type\nDICTIONARY\n5           <<< handle\nB3\n330         <<< owner handle\n9F          <<< the layer owns this dictionary\n100         <<< subclass marker\nAcDbDictionary\n280         <<< hard owned flag\n1\n281         <<< cloning type\n1           <<< keep existing\n3           <<< transparency override\nADSK_XREC_LAYER_ALPHA_OVR\n360         <<< handle to XRECORD\nE5\n3           <<< color override\nADSK_XREC_LAYER_COLOR_OVR\n360         <<< handle to XRECORD\nB4\n3           <<< linetype override\nADSK_XREC_LAYER_LINETYPE_OVR\n360         <<< handle to XRECORD\nDD\n3           <<< lineweight override\nADSK_XREC_LAYER_LINEWT_OVR\n360         <<< handle to XRECORD\nE2\n```\n\n----------------------------------------\n\nTITLE: Setting $INSUNITS Header Variable in ezdxf\nDESCRIPTION: Shows how to set the $INSUNITS header variable directly, which defines the drawing units for the modelspace. In this example, the units are set to meters (value 6).\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/concepts/units.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndoc.header['$INSUNITS'] = 6\n```\n\n----------------------------------------\n\nTITLE: Basic DXF Tags Class\nDESCRIPTION: Collection class for DXF tags extending the list type. Provides methods for handling basic DXF tag operations including searching, filtering, and manipulation of tags.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/develop/dxftag_collections.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass Tags(list):\n    # Collection of DXFTag as flat list\n    def from_text(text: str) -> Tags\n    def dxftype()\n    def get_handle()\n    def replace_handle()\n    def has_tag()\n    def has_embedded_objects()\n    def get_first_tag(code: int, default=DXFValueError) -> DXFTag\n    def get_first_value(code: int, default=DXFValueError) -> Any\n    def find_all(code: int) -> List[DXFTag]\n    def filter(codes: Iterable[int]) -> Iterable[DXFTag]\n    # Additional methods...\n\n```\n\n----------------------------------------\n\nTITLE: Finding Loop by Pick-Point in DXF\nDESCRIPTION: Implements a pick-point based loop finding algorithm that finds the smallest loop containing a given point. Uses intersection testing and area-based sorting.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/edges.rst#2025-04-23_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\ndoc = ezdxf.readfile(\"junctions.dxf\")\nmsp = doc.modelspace()\nlines = msp.query(\"LINE\")\nedges = list(edgesmith.edges_from_entities_2d(lines))\npick_point = (110, 50)\n\n# 1. find a starting edge near the pick-point\nintersecting_edges = edgesmith.intersecting_edges_2d(edges, pick_point)\nif not len(intersecting_edges):\n    print(\"no intersection found\")\n    return\nhatch = msp.add_hatch(color=2)\n\n# The intersecting edges are sorted by ascending distance to the pick-point\n# take the closest edge as starting edge:\nstart = intersecting_edges[0].edge\n\n# 2. find the best loop candidates\ndeposit = edgeminer.Deposit(edges)\ncandidates = [\n    edgeminer.find_loop_by_edge(deposit, start, clockwise=True),\n    edgeminer.find_loop_by_edge(deposit, start, clockwise=False),\n]\n\n# 3. sort candidates by area\ncandidates.sort(key=edgesmith.loop_area)\nfor loop in candidates:\n    # 4. take the smallest loop which contains the pick-point\n    if edgesmith.is_inside_polygon_2d(loop, pick_point):\n        hatch.paths.append(edgesmith.polyline_path_from_chain(loop))\n        break\nelse:  # for loop ended without break\n    print(\"no loop found\")\n    return\ndoc.saveas(\"find_loop_by_pick_point.dxf\")\n```\n\n----------------------------------------\n\nTITLE: Adding Center Mark to Radius Dimension\nDESCRIPTION: Example showing how to add a center mark to a radius dimension by setting the dimcen parameter to a positive value (0.25). This creates a small cross at the center point of the circle.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/radius_dimension.rst#2025-04-23_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\ndim = msp.add_radius_dim(\n    center=(0, 0),\n    radius=2.5,\n    angle=45,\n    dimstyle=\"EZ_RADIUS\",\n    override={\"dimcen\": 0.25},\n)\n```\n\n----------------------------------------\n\nTITLE: Basic ezdxf Installation with pip\nDESCRIPTION: Command to install the ezdxf package using pip3, which includes the optional C-extensions from PyPI as binary wheels.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/setup.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip3 install ezdxf\n```\n\n----------------------------------------\n\nTITLE: Installing PyQt5 on Ubuntu/Debian Systems\nDESCRIPTION: Command to install the PyQt5 package using the apt package manager on Ubuntu or Debian-based systems. This is the recommended approach instead of installing via pip on these systems.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/setup.rst#2025-04-23_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install python3-pyqt5\n```\n\n----------------------------------------\n\nTITLE: Ray Class Definition for DXF Files in Python\nDESCRIPTION: Ray entity class that represents an infinite construction line in DXF files. The entity starts at a specific point and continues infinitely in a direction specified by a unit vector. Requires AutoCAD DXF version R2000 or later.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfentities/ray.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Ray:\n    dxf.start  # Start point as 3D Point in WCS\n    dxf.unit_vector  # Unit direction vector as 3D Point in WCS\n    \n    def transform(...)  # Transform entity by transformation matrix\n    def translate(...)  # Translate entity by vector\n```\n\n----------------------------------------\n\nTITLE: DXF R2000+ STYLE Table Structure\nDESCRIPTION: Details the structure of the STYLE table in DXF R2000+ format, showing the expanded tag sequence with additional subclass markers, handles, and owner references while maintaining the same style properties as R12.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/tables/style_table.rst#2025-04-23_snippet_1\n\nLANGUAGE: none\nCODE:\n```\n0           <<< start of table\nTABLE\n2           <<< table type\nSTYLE\n5           <<< table handle\n5\n330         <<< owner tag, tables have no owner\n0\n100         <<< subclass marker\nAcDbSymbolTable\n70           <<< count of table entries, AutoCAD ignores this value\n1\n0           <<< first table entry\nSTYLE\n5           <<< handle of text style\n29\n330         <<< owner handle, handle of STYLE table\n5\n100         <<< subclass marker\nAcDbSymbolTableRecord\n100         <<< subclass marker\nAcDbTextStyleTableRecord\n2           <<< text style name\nStandard\n70          <<< flags, see `STYLE`_ reference\n0\n40          <<< fixed text height; 0 if not fixed\n0.0\n41          <<< width factor\n1.0\n50          <<< oblique angle\n0.0\n71          <<< text generation flags; 2=backwards (mirror-x), 4=upside down (mirror-y)\n0\n42          <<< last height used\n2.5\n3           <<< font file name; SHX or TTF file name\ntxt\n4           <<< big font name; SHX file with unicode symbols; empty if none\n\n0           <<< next text style\nSTYLE\n...\n0           <<< end of STYLE table\nENDTAB\n```\n\n----------------------------------------\n\nTITLE: Defining MTextEntityAlignment Enumeration in Python\nDESCRIPTION: Enumerates alignment options for multi-line text entities (MText) in CAD drawings. Provides alignment options for top, middle, and bottom positions combined with left, center, and right alignments.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/enums.rst#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nclass MTextEntityAlignment:\n    TOP_LEFT\n    TOP_CENTER\n    TOP_RIGHT\n    MIDDLE_LEFT\n    MIDDLE_CENTER\n    MIDDLE_RIGHT\n    BOTTOM_LEFT\n    BOTTOM_CENTER\n    BOTTOM_RIGHT\n```\n\n----------------------------------------\n\nTITLE: Referencing Player Class in Python\nDESCRIPTION: This snippet shows how to reference the Player class from the ezdxf.addons.drawing.recorder module. The Player can replay recorded drawing commands on other backend classes and provides additional features like bounding box detection and content transformation.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/image_export.rst#2025-04-23_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nfrom ezdxf.addons.drawing.recorder import Player\n```\n\n----------------------------------------\n\nTITLE: Loading a Custom ezdxf Configuration File\nDESCRIPTION: Shows how to load a custom configuration file in ezdxf.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/options.rst#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nimport ezdxf\n\nezdxf.options.read(\"my_config.ini\")\n```\n\n----------------------------------------\n\nTITLE: Static Columns Structure in DXF R2000\nDESCRIPTION: Shows the structure of static columns in DXF R2000 where column specification is stored in XDATA of the main MTEXT entity with links to additional MTEXT entities for additional columns.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/entities/mtext.rst#2025-04-23_snippet_3\n\nLANGUAGE: Text\nCODE:\n```\n0           <<< flag column auto height\n1070\n76          <<< group code column count\n1070\n3           <<< column count\n1070\n78          <<< group code column flow reversed\n1070\n0           <<< flag column flow reversed\n1070\n48          <<< group code column width\n1040\n50.0        <<< column width in column mode\n1070\n49          <<< group code column gutter\n1040\n12.5        <<< column gutter width\n1000\nACAD_MTEXT_COLUMN_INFO_END\n1000        <<< linked MTEXT entities specification\nACAD_MTEXT_COLUMNS_BEGIN\n1070\n47          <<< group code for column count, incl. the 1st column - this entity\n1070\n3           <<< column count\n1005\n1B4         <<< handle to 2nd column as MTEXT entity\n1005\n1B5         <<< handle to 3rd column as MTEXT entity\n1000\nACAD_MTEXT_COLUMNS_END\n1000\nACAD_MTEXT_DEFINED_HEIGHT_BEGIN\n1070\n46          <<< group code for defined column height\n1040\n150.0       <<< defined column height\n1000\nACAD_MTEXT_DEFINED_HEIGHT_END\n```\n\n----------------------------------------\n\nTITLE: Entity Handle Definition in DXF Files\nDESCRIPTION: Shows the group code format for entity handle definitions in DXF files. Regular entities use group code 5, while DIMSTYLE table entities use group code 105.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/handles.rst#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n(5, ...)\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n(105, ...)\n```\n\n----------------------------------------\n\nTITLE: Defining Random Path Functions in Python for ezdxf\nDESCRIPTION: These functions generate random 2D and 3D paths for testing purposes in the ezdxf library.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/render/curves.rst#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\ndef random_2d_path():\n    pass\n\ndef random_3d_path():\n    pass\n```\n\n----------------------------------------\n\nTITLE: Listing Reactor Management Methods in ezdxf\nDESCRIPTION: This snippet lists the high-level methods provided by the DXFEntity class in ezdxf for managing persistent reactor handles. These methods allow checking for reactors, getting and setting reactors, and appending or discarding reactor handles.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/reactors.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nhas_reactors()\nget_reactors()\nset_reactors()\nappend_reactor_handle()\ndiscard_reactor_handle()\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Minimal DXF R12 File Structure\nDESCRIPTION: Shows the minimal required structure for a DXF R12 file, which only needs the ENTITIES section. This is the simplest possible valid DXF R12 file.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/filestructure.rst#2025-04-23_snippet_1\n\nLANGUAGE: none\nCODE:\n```\n0\nSECTION\n2\nENTITIES\n0\nENDSEC\n0\nEOF\n```\n\n----------------------------------------\n\nTITLE: Importing XClip Module in Python\nDESCRIPTION: This snippet shows how to import the XClip module from ezdxf. The XClip class can be used to set or remove clipping paths for external references or block references.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tools/xclip.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. module:: ezdxf.xclip\n```\n\n----------------------------------------\n\nTITLE: Setting Application-Defined Data in DXF Entity\nDESCRIPTION: Demonstrates how to set application-defined data on a DXF entity using the set_app_data method. The AppID must exist in the AppID table.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/appdata.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nentity.set_app_data(\"YOURAPPID\", [(1, \"DataString\")])\n```\n\n----------------------------------------\n\nTITLE: Opening the CAD Viewer GUI Application\nDESCRIPTION: Command-line example showing how to open the GUI application to view CAD files.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/addons/drawing.rst#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ ./cad_viewer.py\n```\n\n----------------------------------------\n\nTITLE: Interfacing with GDAL/OGR Using GeoJSON in Python\nDESCRIPTION: Demonstrates how to interface between ezdxf's GeoProxy objects and GDAL/OGR by using GeoJSON as an intermediate format. Converts back and forth between the two libraries through JSON serialization.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/geo.rst#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom osgeo import ogr\nfrom ezdxf.addons import geo\nfrom ezdxf.render import random_2d_path\nimport json\n\np = geo.GeoProxy({'type': 'LineString', 'coordinates': list(random_2d_path(20))})\n# Create a GeoJSON string from the __geo_interface__ object by the json\n# module and feed the result into ogr:\nline_string = ogr.CreateGeometryFromJson(json.dumps(p.__geo_interface__))\n\n# Parse the GeoJSON string from ogr by the json module and feed the result\n# into a GeoProxy() object:\np2 = geo.GeoProxy.parse(json.loads(line_string.ExportToJson()))\n```\n\n----------------------------------------\n\nTITLE: Creating Radius Dimension with Horizontal Text Outside\nDESCRIPTION: Example demonstrating how to create a radius dimension with horizontal text outside the circle. This is achieved by setting the dimtoh parameter to 1 in the override dictionary.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/radius_dimension.rst#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ndim = msp.add_radius_dim(\n    center=(0, 0),\n    radius=2.5,\n    angle=45,\n    dimstyle=\"EZ_RADIUS\",\n    override={\"dimtoh\": 1}\n)\n```\n\n----------------------------------------\n\nTITLE: DXF Transparency Override XRECORD Structure\nDESCRIPTION: Shows the structure of an XRECORD entity that stores transparency override information for specific viewports. The record contains a reference to the VIEWPORT entity and the transparency override value.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/tables/layer_table.rst#2025-04-23_snippet_4\n\nLANGUAGE: none\nCODE:\n```\n0           <<< entity type\nXRECORD\n5           <<< handle\nE5\n102         <<< reactors app data\n{ACAD_REACTORS\n330\nB3          <<< extension dictionary\n102\n}\n330         <<< owner tag\nB3          <<< extension dictionary\n100         <<< subclass marker\nAcDbXrecord\n280         <<< cloning flag\n1           <<< keep existing\n102         <<< for each overridden VIEWPORT one entry\n{ADSK_LYR_ALPHA_OVERRIDE\n335         <<< handle to VIEWPORT\nAC\n440         <<< transparency override\n33554661\n102\n}\n```\n\n----------------------------------------\n\nTITLE: Python Package Requirements List\nDESCRIPTION: Comprehensive list of Python package dependencies with minimum version requirements specified where needed. Includes core packages like setuptools and wheel for building, pyparsing for DXF parsing, type checking tools like mypy, test frameworks like pytest, and documentation tools like sphinx.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/requirements-dev.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsetuptools\nwheel\npyparsing>=2.0.1\ntyping_extensions>=4.6.0\nnumpy\nfonttools\npytest\nmypy>=1.11\ncython\nmatplotlib\npyside6\nPillow\nPyMuPDF\nsphinx\nsphinx-rtd-theme\nsphinxcontrib-jquery\n```\n\n----------------------------------------\n\nTITLE: Accessing Modelspace in ezdxf\nDESCRIPTION: Shows how to retrieve the modelspace object from a DXF document using ezdxf. Every DXF document has exactly one modelspace layout.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tasks/get_layouts.rst#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nmsp = doc.modelspace()\n```\n\n----------------------------------------\n\nTITLE: Accessing Actual Spline Data Count in Python\nDESCRIPTION: Shows how to get the count of fit points, control points, and knots from the actual data stored in the spline entity, which may differ from the DXF attributes.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/spline.rst#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ncount = spline.fit_point_count\ncount = spline.control_point_count\ncount = spline.knot_count\n```\n\n----------------------------------------\n\nTITLE: Updating Font Cache in ezdxf (Shell)\nDESCRIPTION: Command to update the font cache in ezdxf. This is necessary when adding or removing fonts, as the cache is not automatically updated.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/Release Notes v1.1.x.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nezdxf --fonts\n```\n\n----------------------------------------\n\nTITLE: Defining Generic Table Class in Python\nDESCRIPTION: The Table class is a generic collection of table entries where entry names are case insensitive. It provides methods for key management, entry checking, length, iteration, creation, retrieval, removal, and duplication.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tables/tables.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Table:\n    # Methods:\n    def key(self): pass\n    def has_entry(self): pass\n    def __contains__(self): pass\n    def __len__(self): pass\n    def __iter__(self): pass\n    def new(self): pass\n    def get(self): pass\n    def remove(self): pass\n    def duplicate_entry(self): pass\n```\n\n----------------------------------------\n\nTITLE: Loading GPX Data with ElementTree in Python\nDESCRIPTION: Uses ElementTree to load GPX (GPS Exchange Format) data from an XML file. Extracts longitude and latitude coordinates from track points for further processing.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/geo.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport xml.etree.ElementTree as ET\nnamespaces = {'gpx': 'http://www.topografix.com/GPX/1/1'}\n\ndef load_gpx_track(filename):\n    tree = ET.parse(filename)\n    root = tree.getroot()\n    for trkpt in root.findall('.//gpx:trkpt', namespaces):\n        yield float(trkpt.attrib['lon']), float(trkpt.attrib['lat'])\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Entity Layout Association in DXF R12\nDESCRIPTION: Shows how entities in the ENTITIES section are associated with layouts using the paper_space tag in DXF R12 format. The value 0 or missing tag indicates modelspace, while 1 indicates paperspace.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/datamodel.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n(67, 0 or 1)\n```\n\n----------------------------------------\n\nTITLE: Defining SortEntities Enumeration in Python\nDESCRIPTION: Enumerates sorting options for entities in CAD drawings. Includes options for different operations like selection, snapping, redrawing, and plotting.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/enums.rst#2025-04-23_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nclass SortEntities:\n    DISABLE\n    SELECTION\n    SNAP\n    REDRAW\n    MSLIDE\n    REGEN\n    PLOT\n    POSTSCRIPT\n```\n\n----------------------------------------\n\nTITLE: Setting $AUNITS Header Variable in ezdxf\nDESCRIPTION: Demonstrates setting the $AUNITS header variable, which defines how CAD applications display angular values in the GUI. The example sets it to decimal degrees (value 0).\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/concepts/units.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndoc.header['$AUNITS'] = 0\n```\n\n----------------------------------------\n\nTITLE: Disabling Matplotlib Font Support - Python\nDESCRIPTION: Configuration code to disable Matplotlib font support to reduce runtime overhead when processing text entities.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/disassemble.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\noptions.use_matplotlib_font_support = False\n```\n\n----------------------------------------\n\nTITLE: Creating a Block Definition for XREF in Python with ezdxf\nDESCRIPTION: Function to create a simple block definition that contains a gear-like shape, which will be used as content for an external reference example.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/xref_module.rst#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\ndef make_block(doc: ezdxf.document.Drawing, name: str) -> None:\n    block = doc.blocks.new(name)\n    # Add 8 \"teeth\" as a regular octagon:\n    radius = 2.0\n    corners = [(radius * cos(n * pi / 4), radius * sin(n * pi / 4)) for n in range(8)]\n    block.add_lwpolyline(corners, close=True)\n    # Add center point:\n    block.add_circle((0, 0), radius=0.25)\n    # Add text:\n    block.add_text(name, height=0.25, dxfattribs={\"color\": 1}).set_pos((0, 0), align=\"CENTER\")\n```\n\n----------------------------------------\n\nTITLE: Extended Data Handles in DXF Files\nDESCRIPTION: Shows the group code format for extended data handles in DXF files. These handles have the same behavior as soft pointers and are translated when merged into different drawings.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/handles.rst#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n(1005, ...)\n```\n\n----------------------------------------\n\nTITLE: Creating Numbered Lists in MTextEditor\nDESCRIPTION: Shows how to create numbered lists with custom numbering using bullet_list() method with custom markers.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/mtext.rst#2025-04-23_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nattribs = dict(ATTRIBS)\nattribs[\"char_height\"] = 0.25\nattribs[\"width\"] = 7.5\neditor = MTextEditor(\"Numbered List:\" + NP)\neditor.bullet_list(\n    indent=1,\n    bullets=[\"1.\", \"2.\", \"3.\"],\n    content=[\n        \"First item\",\n        \"Second item\",\n        \" \".join(lorem_ipsum(30)),\n    ])\nmsp.add_mtext(str(editor), attribs)\n```\n\n----------------------------------------\n\nTITLE: Descending Order Function Reference in Python\nDESCRIPTION: This snippet references the descending function in the ezdxf.reorder module. The function is likely used to sort DXF entities in descending order based on their handles or a custom mapping.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/reorder.rst#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n.. autofunction:: descending\n```\n\n----------------------------------------\n\nTITLE: Enabling Viewport Lock Example\nDESCRIPTION: Example showing how to lock a viewport using the set_flag_state method and the VSF_LOCK_ZOOM constant.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfentities/viewport.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nvp.set_flag_state(ezdxf.const.VSF_LOCK_ZOOM, True)\n```\n\n----------------------------------------\n\nTITLE: Creating Angular Dimension from ConstructionArc\nDESCRIPTION: This example shows how to add an angular dimension to an ARC entity using the ConstructionArc tool.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/angular_dimension.rst#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nimport ezdxf\n\ndoc = ezdxf.new(setup=True)\nmsp = doc.modelspace()\n\narc = msp.add_arc(\n    center=(0, 0),\n    radius=5,\n    start_angle = 60,\n    end_angle = 120,\n)\nmsp.add_angular_dim_arc(\n    arc.construction_tool(),\n    distance=2,\n).render()\n```\n\n----------------------------------------\n\nTITLE: Parsing VIEW Table and Entry in DXF R2000+\nDESCRIPTION: This snippet demonstrates the structure of the VIEW table and a VIEW entry in DXF R2000+ format. It includes additional fields such as handles, owner tags, subclass markers, and R2000+ specific attributes like render mode and UCS association.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/tables/view_table.rst#2025-04-23_snippet_1\n\nLANGUAGE: none\nCODE:\n```\n0       <<< adding the VIEW table head, just for information\nTABLE\n2       <<< table name\nVIEW\n5       <<< handle of table, see owner tag of VIEW table entry\n37C\n330     <<< owner tag of table, always #0\n0\n100     <<< subclass marker\nAcDbSymbolTable\n70      <<< VIEW table (max.) count, not reliable (ignore)\n9\n0       <<< first VIEW table entry\nVIEW\n5       <<< handle\n3EA\n330     <<< owner, the VIEW table is the owner of the VIEW entry\n37C     <<< handle of the VIEW table\n100     <<< subclass marker\nAcDbSymbolTableRecord\n100     <<< subclass marker\nAcDbViewTableRecord\n2       <<< view name, from here all the same as DXF R12\nVIEWNAME\n70\n0\n40\n20.01\n10\n40.36\n20\n15.86\n41\n17.91\n11\n0.0\n21\n0.0\n31\n1.0\n12\n0.0\n22\n0.0\n32\n0.0\n42\n50.0\n43\n0.0\n44\n0.0\n50\n0.0\n71\n0\n281     <<< render mode 0-6 (... too much options)\n0       <<< 0= 2D optimized (classic 2D)\n72      <<< UCS associated (0/1 = no/yes)\n0       <<< 0 = no\n```\n\n----------------------------------------\n\nTITLE: Defining Text Frame XDATA for MTEXT in DXF\nDESCRIPTION: This snippet shows the XDATA structure for defining a text frame in MTEXT entities for DXF versions prior to R2018. It includes flags, scaling factor, and handles to associated LWPOLYLINE entities.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/entities/mtext.rst#2025-04-23_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\n...  <snip>\n1001 <ctrl> ACAD\n1000 <str> ACAD_MTEXT_TEXT_BORDERS_BEGIN\n1070 <int> 80       <<< group code for repeated flags\n1070 <int> 16       <<< repeated group code 90?\n1070 <int> 46       <<< group code for scaling factor, which is fixed?\n1040 <float> 1.5    <<< scaling factor\n1070 <int> 81       <<< group code for repeated flow direction?\n1070 <int> 1        <<< flow direction?\n1070 <int> 5        <<< group code for a handle, multiple entries possible\n1005 <hex> #A8      <<< handle to the LWPOLYLINE text frame\n1070 <int> 5        <<< group code for next handle\n1005 <hex> #A9      <<< next handle\n...\n1000 <str> ACAD_MTEXT_TEXT_BORDERS_END\n```\n\n----------------------------------------\n\nTITLE: Ezdxf Metadata Usage Example\nDESCRIPTION: Python code example demonstrating how to access and manipulate ezdxf metadata in a DXF document.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/drawing/management.rst#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nmetadata = doc.ezdxf_metadata()\n\n# set data\nmetadata[\"MY_CUSTOM_META_DATA\"] = \"a string with max. length of 254\"\n\n# get data, raises a KeyError() if key not exist\nvalue = metadata[\"MY_CUSTOM_META_DATA\"]\n\n# get data, returns an empty string if key not exist\nvalue = metadata.get(\"MY_CUSTOM_META_DATA\")\n\n# delete entry, raises a KeyError() if key not exist\ndel metadata[\"MY_CUSTOM_META_DATA\"]\n\n# discard entry, does not raise a KeyError() if key not exist\nmetadata.discard(\"MY_CUSTOM_META_DATA\")\n```\n\n----------------------------------------\n\nTITLE: Structuring TABLES Section in DXF R13 and Later\nDESCRIPTION: This snippet demonstrates the structure of the TABLES section in DXF R13 and later versions. It shows the section start, table entries, and section end, including handles and subclass markers.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/sections/tables_section.rst#2025-04-23_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n0\nSECTION\n2           <<< begin TABLES section\nTABLES\n0           <<< first TABLE\nTABLE\n2           <<< name of table \"LTYPE\"\nLTYPE\n5           <<< handle of the TABLE\n8\n330         <<< owner handle is always \"0\"\n0\n100         <<< subclass marker\nAcDbSymbolTable\n70          <<< count of table entries\n4           <<< do not rely on this value!\n0           <<< first table entry\nLTYPE\n...\n0           <<< second table entry\nLTYPE\n...\n0           <<< end of TABLE\nENDTAB\n0           <<< next TABLE\nTABLE\n2           <<< name of table \"LAYER\"\nLAYER\n5           <<< handle of the TABLE\n2\n330         <<< owner handle is always \"0\"\n0\n100         <<< subclass marker\nAcDbSymbolTable\n70          <<< count of table entries\n1\n0           <<< first table entry\nLAYER\n...\n0           <<< end of TABLE\nENDTAB\n0           <<< end of SECTION\nENDSEC\n```\n\n----------------------------------------\n\nTITLE: Defining MLine Class in Python for ezdxf\nDESCRIPTION: This snippet defines the MLine class, which represents the MLINE entity in DXF. It includes various attributes and methods for manipulating and querying MLINE properties.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfentities/mline.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MLine:\n    def set_style(self):\n        pass\n\n    def set_scale_factor(self):\n        pass\n\n    def set_justification(self):\n        pass\n\n    def close(self):\n        pass\n\n    def start_location(self):\n        pass\n\n    def get_locations(self):\n        pass\n\n    def extend(self):\n        pass\n\n    def clear(self):\n        pass\n\n    def update_geometry(self):\n        pass\n\n    def generate_geometry(self):\n        pass\n\n    def transform(self):\n        pass\n\n    def virtual_entities(self):\n        pass\n\n    def explode(self):\n        pass\n```\n\n----------------------------------------\n\nTITLE: Implementing TextstyleTable Class in Python\nDESCRIPTION: TextstyleTable is a subclass of Table that manages a collection of Textstyle objects. It provides methods for adding, retrieving, and managing SHX fonts.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tables/tables.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass TextstyleTable(Table):\n    def add(self): pass\n    def add_shx(self): pass\n    def get_shx(self): pass\n    def find_shx(self): pass\n    def discard_shx(self): pass\n```\n\n----------------------------------------\n\nTITLE: Using the View Command for PyQt Visualization\nDESCRIPTION: Example of using the ezdxf view sub-command to view a DXF file using the PyQt backend.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/launcher.rst#2025-04-23_snippet_7\n\nLANGUAGE: Text\nCODE:\n```\nC:\\> ezdxf view gear.dxf\n```\n\n----------------------------------------\n\nTITLE: Implementing ViewTable Class in Python\nDESCRIPTION: ViewTable is a subclass of Table that manages a collection of View objects. It provides an add method for adding new views.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tables/tables.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass ViewTable(Table):\n    def add(self): pass\n```\n\n----------------------------------------\n\nTITLE: Defining MTextLineSpacing Enumeration in Python\nDESCRIPTION: Enumerates line spacing options for multi-line text (MText) in CAD drawings. Includes AT_LEAST and EXACT spacing options.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/enums.rst#2025-04-23_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nclass MTextLineSpacing:\n    AT_LEAST\n    EXACT\n```\n\n----------------------------------------\n\nTITLE: Configuring Support Directories for Stroke Fonts in INI Format\nDESCRIPTION: Example INI configuration for specifying custom directories where ezdxf should search for stroke fonts (.shx, .shp, .lff). All paths are searched recursively and can include system paths and user-specific paths.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tools/fonts.rst#2025-04-23_snippet_0\n\nLANGUAGE: INI\nCODE:\n```\n[core]\nsupport_dirs =\n    \"C:\\Program Files\\Bricsys\\BricsCAD V23 en_US\\Fonts\",\n    ~/shx_fonts,\n    ~/shp_fonts,\n    ~/lff_fonts,\n```\n\n----------------------------------------\n\nTITLE: Modifying Layer Attribute of Selected Entities in Python\nDESCRIPTION: Shows how to change the layer of all selected LINE entities using the new __setitem__() method of EntityQuery.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/Release Notes v0.18.x.md#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nlines[\"layer\"] = \"MyLayer\"\n```\n\n----------------------------------------\n\nTITLE: DXF Layer Entity Tags for DXF R2000+\nDESCRIPTION: Shows the detailed structure of a LAYER entity within the LAYER table, including attributes like layer name, color, linetype, and special flags. Demonstrates how the frozen/thawed state, locked/unlocked state, off state, description, and transparency are stored in various tags.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/tables/layer_table.rst#2025-04-23_snippet_1\n\nLANGUAGE: none\nCODE:\n```\n0           <<< LAYER table entry\nLAYER\n5           <<< handle of LAYER\n10\n330         <<< owner handle, handle of LAYER table\n2\n100         <<< subclass marker\nAcDbSymbolTableRecord\n100         <<< subclass marker\nAcDbLayerTableRecord\n2           <<< layer name\n0           <<< layer \"0\"\n70          <<< flags\n0\n62          <<< color\n7           <<< a negative value switches the layer off\n420         <<< optional true color value\n0\n6           <<< linetype\nContinuous\n290         <<< optional plot flag\n1\n370         <<< lineweight\n-3\n390         <<< handle to plot style\nF\n347         <<< material handle\n47\n348         <<< unknown1\n0\n1001        <<< XDATA section, APPID\nAcAecLayerStandard\n1000        <<< unknown first value, here an empty string\n\n1000        <<< layer description\nThis layer has a description\n1001        <<< APPID\nAcCmTransparency\n1071        <<< layer transparency value\n0\n```\n\n----------------------------------------\n\nTITLE: Importing DXF Entity Reordering Module in Python\nDESCRIPTION: This snippet shows how to import the ezdxf.reorder module. The module provides tools for reordering DXF entities by handle or using a special sort handle mapping.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/reorder.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. module:: ezdxf.reorder\n```\n\n----------------------------------------\n\nTITLE: Defining MText Class Attributes in Python\nDESCRIPTION: This snippet defines various attributes of the MText class, including insertion point, character height, width, attachment point, and flow direction. It also includes constants for different attribute values.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfentities/mtext.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MText:\n    dxf.insert  # Insertion point (3D Point in OCS)\n    dxf.char_height  # Initial text height (float); default=1.0\n    dxf.width  # Reference text width (float)\n    dxf.attachment_point  # Constants for text alignment\n    dxf.flow_direction  # Constants for text flow direction\n```\n\n----------------------------------------\n\nTITLE: Analyzing MULTILEADER BLOCK Scaling in DXF\nDESCRIPTION: Compares MULTILEADER entities with BLOCK content at scale 1.0 and 3.0. Demonstrates how block insertion point, scale, and transformation matrix are affected by scaling.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/exploration/scaling_multileader.txt#2025-04-23_snippet_1\n\nLANGUAGE: DXF\nCODE:\n```\nDXF Attributes\n--------------\n\n'arrow_head_size': 4.0,\n'block_scale_vector': Vec3(1.0, 1.0, 1.0),\n'dogleg_length': 3.0,\n'scale': 1.0,\n\nMLeaderContext\n--------------\n\nscale: 1.0\nbase_point: (149.2, 185.9, 0.0)\nchar_height: 4.0\narrow_head_size: 4.0\nlanding_gap_size: 2.0\n\n\nBlockData\n---------\n\ninsert: (149.2, 180.9, 0.0)\nscale: (1.0, 1.0, 1.0)\nmatrix: [\n    1.0, 0.0, 0.0, 149.2,\n    0.0, 1.0, 0.0, 180.9,\n    0.0, 0.0, 1.0, 0.0,\n    0.0, 0.0, 0.0, 1.0\n]\n```\n\nLANGUAGE: DXF\nCODE:\n```\nDXF Attributes\n--------------\n\n'arrow_head_size': 4.0,                     not scaled\n'block_scale_vector': Vec3(1.0, 1.0, 1.0),  not scaled\n'dogleg_length': 9.0,                       scaled\n'scale': 3.0,\n\nMLeaderContext\n--------------\n\nscale: 3.0\nbase_point: (155.2, 185.9, 0.0)             insert point in WCS\nchar_height: 12.0                           scaled\narrow_head_size: 12.0                       scaled\nlanding_gap_size: 6.0                       scaled\n\nBlockData\n---------\n\ninsert: (155.2, 170.9, 0.0)\nscale: (3.0, 3.0, 3.0)                      scaled\nmatrix: [\n    3.0, 0.0, 0.0, 155.2,\n    0.0, 3.0, 0.0, 170.9,\n    0.0, 0.0, 3.0, 0.0,\n    0.0, 0.0, 0.0, 1.0\n]\n```\n\n----------------------------------------\n\nTITLE: Defining MTextParagraphAlignment Enumeration in Python\nDESCRIPTION: Enumerates paragraph alignment options for multi-line text (MText) in CAD drawings. Includes options like DEFAULT, LEFT, RIGHT, CENTER, JUSTIFIED, and DISTRIBUTED.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/enums.rst#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nclass MTextParagraphAlignment:\n    DEFAULT\n    LEFT\n    RIGHT\n    CENTER\n    JUSTIFIED\n    DISTRIBUTED\n```\n\n----------------------------------------\n\nTITLE: Finding Loop by Edge with Direction Control\nDESCRIPTION: Demonstrates finding loops starting from a specific edge with control over search direction (clockwise or counter-clockwise).\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/edges.rst#2025-04-23_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nedges = list(edgesmith.edges_from_entities_2d(lines))\ndeposit = edgeminer.Deposit(edges)\n\n# choose an edge to start with\nstart = edges[0]\nloop1 = edgeminer.find_loop_by_edge(deposit, start, clockwise=True)\nloop2 = edgeminer.find_loop_by_edge(deposit, start, clockwise=False)\n```\n\n----------------------------------------\n\nTITLE: Documenting k_means Function\nDESCRIPTION: References the k_means function for auto-documentation, which implements the K-means clustering algorithm to partition data into k clusters.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/math/clustering.rst#2025-04-23_snippet_6\n\nLANGUAGE: rst\nCODE:\n```\n.. autofunction:: k_means\n```\n\n----------------------------------------\n\nTITLE: Defining Static Columns for MTEXT in DXF R2000\nDESCRIPTION: This snippet illustrates how to define static columns for an MTEXT entity in DXF R2000. It includes the entity header, main MTEXT data, and the beginning of the XDATA section for column specification.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/entities/mtext.rst#2025-04-23_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\n0\nMTEXT\n5           <<< entity handle\n9D\n102\n{ACAD_XDICTIONARY\n360\n9F\n102\n}\n330         <<< block record handle of owner layout\n1F\n100\nAcDbEntity\n8           <<< layer\n0\n100         <<< begin of MTEXT specific data\nAcDbMText\n10          <<< (10, 20, 30) insert location in WCS\n285.917876152751\n20\n276.101821192053\n30\n0.0\n40          <<< character height in drawing units\n2.5\n41          <<< reference column width, if not in column mode\n62.694...   <<< in column mode: the real column is defined in XDATA (48)\n71          <<< attachment point\n1\n72          <<< text flow direction\n1\n3           <<< begin of text\nLorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam ...\n3\nkimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit ...\n3\nea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ...\n3\nAt vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd ...\n3\nore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio ...\n1           <<< last text line and end of text\neuismod tincidunt ut laoreet dolore magna aliquam erat volutpat.\n73          <<< line spacing style\n1\n44          <<< line spacing factor\n1.0\n1001\nAcadAnnotative\n1000\nAnnotativeData\n1002\n{\n1070\n1\n1070\n0\n1002\n}\n1001        <<< AppID \"ACAD\" contains the column specification\nACAD\n1000\nACAD_MTEXT_COLUMN_INFO_BEGIN\n1070\n75          <<< group code column type\n1070\n1           <<< column type: 0=no column; 1=static columns; 2=dynamic columns\n1070\n79          <<< group code column auto height\n1070\n```\n\n----------------------------------------\n\nTITLE: Converting PyMuPdfBackend Output to Pillow Image\nDESCRIPTION: Example of loading the output of PyMuPdfBackend into the Pillow Image class for further processing or outputting additional image formats.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/addons/drawing.rst#2025-04-23_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nimport io\nfrom PIL import Image\n\n...  # see above\n\n# the ppm format is faster to process than png\nfp = io.BytesIO(backend.get_pixmap_bytes(layout.Page(0, 0), fmt=\"ppm\", dpi=300))\nimage = Image.open(fp, formats=[\"ppm\"])\n```\n\n----------------------------------------\n\nTITLE: DXF R13 BLOCKS Section Structure\nDESCRIPTION: Demonstrates the BLOCKS section structure in DXF R13 format. It highlights the owner tags introduced in R13 that associate entities with BLOCK_RECORD entries, and shows the extended tag structure compared to DXF R12.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/block_management.rst#2025-04-23_snippet_1\n\nLANGUAGE: none\nCODE:\n```\n0           <<< start of a SECTION\nSECTION\n2           <<< start of BLOCKS section\nBLOCKS\n...         <<< modelspace and paperspace block definitions not shown,\n...         <<< see layout management\n0           <<< start of BLOCK definition\nBLOCK\n5           <<< even BLOCK gets a handle now ;)\n23A\n330         <<< owner tag, the owner of a BLOCK is a BLOCK_RECORD in the\n...         BLOCK_RECORD table\n238\n100         <<< subclass marker\nAcDbEntity\n8           <<< layer of the BLOCK definition\n0\n100         <<< subclass marker\nAcDbBlockBegin\n2           <<< BLOCK name\nArchTick\n70          <<< flags\n0\n10          <<< base point, x\n0.0\n20          <<< base point, y\n0.0\n30          <<< base point, z\n0.0\n3           <<< second BLOCK name, same as (2, name)\nArchTick\n1           <<< xref name, if block is an external reference\n                <<< empty string!\n0           <<< start of the first entity of the BLOCK\nLWPOLYLINE\n5\n239\n330         <<< owner tag of LWPOLYLINE\n238         <<< handle of the BLOCK_RECORD!\n100\nAcDbEntity\n8\n0\n6\nByBlock\n62\n0\n100\nAcDbPolyline\n90\n2\n70\n0\n43\n0.15\n10\n-0.5\n20\n-0.5\n10\n0.5\n20\n0.5\n0           <<< ENDBLK entity, marks the end of the BLOCK definition\nENDBLK\n5           <<< handle\n23B\n330         <<< owner tag, same BLOCK_RECORD as for the BLOCK entity\n238\n100         <<< subclass marker\nAcDbEntity\n8           <<< ENDBLK requires the same layer as the BLOCK entity!\n0\n100         <<< subclass marker\nAcDbBlockEnd\n0           <<< start of the next BLOCK\nBLOCK\n...\n0\nENDBLK\n...\n0           <<< end of the BLOCKS section\nENDSEC\n```\n\n----------------------------------------\n\nTITLE: Point in Polygon Testing Implementation\nDESCRIPTION: Ray-crossing method implementation in C for determining if a point lies within a polygon. Returns 1 for interior points, 0 for exterior points. Uses even-odd rule for boundary crossing count.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/src/ezdxf/math/algorithms.md#2025-04-23_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nint pnpoly(int npol, float *xp, float *yp, float x, float y)\n{\n  int i, j, c = 0;\n  for (i = 0, j = npol-1; i < npol; j = i++) {\n    if ((((yp[i]<=y) && (y<yp[j])) ||\n         ((yp[j]<=y) && (y<yp[i]))) &&\n        (x < (xp[j] - xp[i]) * (y - yp[i]) / (yp[j] - yp[i]) + xp[i]))\n\n      c = !c;\n  }\n  return c;\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Julian Day to Datetime using calendardate function in Python\nDESCRIPTION: Shows how to convert the Sun entity's julian_day attribute to a datetime.datetime object using the calendardate utility function from ezdxf.tools.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfobjects/sun.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nuse :func:`~ezdxf.tools.calendardate` to convert :attr:`dxf.julian_day` to\n:class:`datetime.datetime` object.\n```\n\n----------------------------------------\n\nTITLE: Loading DWG Documents using ezdxf with odafc-addon in Python\nDESCRIPTION: This snippet illustrates how to load DWG files using the odafc-addon for ezdxf, which utilizes the ODA File Converter. It includes error handling for I/O errors and ODAFCErrors.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/Load Documents.md#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nimport ezdxf\nfrom ezdxf.addons import odafc\n\ntry:\n\tdoc = odafc.readfile(\"your.dwg\")\nexcept IOError:\n    print(f\"Generic I/O error.\")\n    sys.exit(1)\nexcept odafc.ODAFCError as e:\n    print(f\"Invalid or corrupted DWG file.\")\n    sys.exit(2)\n```\n\n----------------------------------------\n\nTITLE: Defining OLE2 Object Structure in DXF\nDESCRIPTION: This snippet outlines the structure of an OLE2 object embedded in a DXF file. It includes the signature, point coordinates, and other relevant parameters.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/DXF Binary Chunk Interpretation.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nSignature: 0x5580 | kPaperSpace (kPaperSpace = 0x01)\nAcGePoint3d() upLeft\nAcGePoint3d() upRight\nAcGePoint3d() bottomRight\nAcGePoint3d() bottomLeft\nlong extents =0 // always\nlong tilemode (=0, or =1) (r13 compatibility)\nthen the output of COleclientItem::Serialize() method\n```\n\n----------------------------------------\n\nTITLE: Defining Region Class in Python for ezdxf\nDESCRIPTION: This snippet defines the Region class, which inherits from the Body class. It represents a REGION entity in DXF, created by the ACIS geometry kernel. The class has the same attributes and methods as its parent class.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfentities/region.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Region:\n    # Same attributes and methods as parent class Body\n```\n\n----------------------------------------\n\nTITLE: Using B-Spline Construction Methods\nDESCRIPTION: New methods for working with B-splines including creation from arcs/ellipses, interpolation, and transformation operations.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/CHANGELOG.md#2025-04-23_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nBSpline.points()\nBSpline.derivative()\nBSpline.derivatives()\nBSpline.params()\nBSpline.reverse()\nBSpline.from_arc()\nBSpline.from_ellipse()\nBSpline.from_fit_points()\nBSpline.transform()\n```\n\n----------------------------------------\n\nTITLE: Base INSERT with Clipping Path\nDESCRIPTION: Basic INSERT entity at (5,5,0) with SPATIAL_FILTER clipping path. Shows default transformation state with no rotation or scaling.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/Exploring the transformation behavior of SPATIAL_FILTER.md#2025-04-23_snippet_0\n\nLANGUAGE: dxf\nCODE:\n```\nINSERT(#B9)\n  insert location: (5.0, 5.0, 0.0)\n  rotation: 0\n  scale-x: 1\n  scale-y: 1\n  scale-z: 1\n  SPATIAL_FILTER(#C1)\n  clipping-path: (Vec2(5.0, 5.0), Vec2(12.0, 5.0), Vec2(8.5, 12.0))\n```\n\n----------------------------------------\n\nTITLE: LTYPE Table Structure in DXF R12\nDESCRIPTION: Shows the tag structure of the LTYPE table in DXF R12 format. This structure defines how line type definitions are stored in the DXF file.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/tables/linetype_table.rst#2025-04-23_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n0           <<< start of table\nTABLE\n2           <<< table type\nLTYPE\n70          <<< count of table entries, AutoCAD ignores this value\n9\n0           <<< 1. LTYPE table entry\nLTYPE\n                <<< LTYPE data tags\n0           <<< 2. LTYPE table entry\nLTYPE\n                <<< LTYPE data tags and so on\n0           <<< end of LTYPE table\nENDTAB\n```\n\n----------------------------------------\n\nTITLE: Second Linked MTEXT Column Structure in DXF R2000 (#1B5)\nDESCRIPTION: Shows the structure of the second linked MTEXT entity (#1B5) referenced by the main entity, similar to the first linked entity with the same height specification.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/entities/mtext.rst#2025-04-23_snippet_5\n\nLANGUAGE: Text\nCODE:\n```\n0 <ctrl> MTEXT\n5 <hex> #1B5\n... <snip>\n100 <ctrl> AcDbMText\n10 <point> (410.917876152751, 276.101821192053, 0.0)\n40 <float> 2.5\n41 <float> 175.0        <<< invalid reference column width\n... <snip>\n1001 <ctrl> ACAD\n1000 <str> ACAD_MTEXT_DEFINED_HEIGHT_BEGIN\n1070 <int> 46           <<< defined column height\n1040 <float> 150.0\n1000 <str> ACAD_MTEXT_DEFINED_HEIGHT_END\n```\n\n----------------------------------------\n\nTITLE: Defining Bezier Class in Python for ezdxf\nDESCRIPTION: This class represents a Bezier curve in the ezdxf library. It includes methods for starting the curve, appending to it, and rendering.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/render/curves.rst#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nclass Bezier:\n    def start(self):\n        pass\n\n    def append(self):\n        pass\n\n    def render(self):\n        pass\n```\n\n----------------------------------------\n\nTITLE: Loading DXF Patterns in Python\nDESCRIPTION: Example of loading predefined DXF patterns, demonstrating the change from using the PATTERN constant to the new pattern loading method.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/CHANGELOG.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nPATTERN = ezdxf.pattern.load(old_pattern=True)\n```\n\n----------------------------------------\n\nTITLE: Dimension Style Attribute Access in Python\nDESCRIPTION: Provides access to dimension style attributes through dictionary-like interface using dimstyle_attribs property. Contains overridden attributes of dimension as a dict with DimStyle attribute names as keys.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfentities/dimension.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndimstyle_attribs = {}\n```\n\n----------------------------------------\n\nTITLE: Defining Simple Linetype Pattern Structure in Python\nDESCRIPTION: This example shows the structure of simple linetype elements in ezdxf. The pattern consists of a total pattern length and element values, where positive values represent lines, negative values represent gaps, and zero represents dots.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/linetypes.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nelements = [total_pattern_length, elem1, elem2, ...]\n```\n\n----------------------------------------\n\nTITLE: Detecting DXF Version in Python\nDESCRIPTION: This snippet demonstrates how to detect the version of a DXF file using the ezdxf library. It reads the file header and checks for specific version indicators.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/journals/2023_12_29.md#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ndef detect_dxf_version(filename: str) -> str:\n    \"\"\"Detect DXF version.\"\"\"\n    with open(filename, 'rt') as fp:\n        header = [next(fp).strip() for _ in range(6)]\n\n    # AutoCAD R12 release:\n    acad12 = ['  0', 'SECTION', '  2', 'HEADER', '  9', '$ACADVER']\n    if header == acad12:\n        # AutoCAD R12 has no further header, assume R12\n        return 'AC1009'\n    version = header[5].split('.')[-1]  # $ACADVER\n    return version\n```\n\n----------------------------------------\n\nTITLE: Static Columns Structure in DXF R2018\nDESCRIPTION: Illustrates how static columns are handled in DXF R2018, where all column text is contained in a single MTEXT entity with column specification in an embedded object.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/entities/mtext.rst#2025-04-23_snippet_6\n\nLANGUAGE: Text\nCODE:\n```\n0\nMTEXT\n5           <<< entity handle\n9D\n102\n{ACAD_XDICTIONARY\n360\n9F\n102\n}\n330         <<< block record handle of owner layout\n1F\n100\nAcDbEntity\n8           <<< layer\n0\n100\nAcDbMText\n10          <<< (10, 20, 30) insert location in WCS\n285.917876152751\n20\n276.101821192053\n30\n0.0\n40          <<< character height in drawing units\n2.5\n41          <<< reference column width, if not in column mode\n62.694536423841\n46          <<< defined column height\n150.0\n71          <<< attachment point\n1\n72          <<< text flow direction\n1\n3           <<< text content of all three columns\nLorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam n...\n3\nimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit...\n3\na rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lor...\n3\nvero eos et accusam et justo duo dolores et ea rebum. Stet clita ka...\n3\neu feugiat nulla facilisis at vero eros et accumsan et iusto odio s...\n3\nod tincidunt ut laoreet dolore magna aliquam erat volutpat.   \\P\\PU...\n3\ne velit esse molestie consequat, vel illum dolore eu feugiat nulla ...\n3\nobis eleifend option congue nihil imperdiet doming id quod mazim pl...\n3\nm ad minim veniam, quis nostrud exerci tation ullamcorper suscipit ...\n3\nlisis.   \\P\\PAt vero eos et accusam et justo duo dolores et ea rebu...\n3\nt labore et dolore magna aliquyam erat, sed diam voluptua. At vero ...\n3\nlitr, At accusam aliquyam diam diam dolore dolores duo eirmod eos e...\n1\nipsum dolor sit amet, consetetur\n73          <<< line spacing style\n1\n44          <<< line spacing factor\n1.0\n101         <<< column specification as embedded object\nEmbedded Object\n70          <<< ???\n1\n10          <<< (10, 20, 30) text direction vector (local x-axis)\n1.0\n20\n0.0\n30\n0.0\n11          <<< (11, 21, 31) repeated insert location of AcDbMText\n285.917876152751\n21\n276.101821192053\n31\n0.0\n40          <<< repeated reference column width\n62.694536423841\n41          <<< repeated defined column height\n150.0\n42          <<< extents (total) width\n175.0\n43          <<< extents (total) height, max. height if different column heights\n150.0\n71          <<< column type: 0=no column; 1=static columns; 2=dynamic columns\n1\n72          <<< column height count\n3\n44          <<< column width\n50.0\n45          <<< column gutter width\n12.5\n73          <<< flag column auto height\n0\n74          <<< flag reversed column flow\n0\n1001\nAcadAnnotative\n1000\nAnnotativeData\n1002\n{\n1070\n1\n1070\n0\n1002\n}\n```\n\n----------------------------------------\n\nTITLE: Changing and Saving ezdxf Test Files Path\nDESCRIPTION: Example showing how to change the test_files configuration option and save it to a custom config file.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/options.rst#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nimport ezdxf\n\ntest_files = Path(\"~/my-dxf-test-files\").expand_user()\nezdxf.options.set(\n    ezdxf.options.CORE,  # section\n    \"test_files\",  # key\n    \"~/my-dxf-test-files\",  # value\n)\nezdxf.options.write_file(\"my_config.ini\")\n```\n\n----------------------------------------\n\nTITLE: Specifying Sphinx Dependencies for Python Documentation\nDESCRIPTION: This snippet lists the required Python packages and their versions for generating documentation using Sphinx. It includes Sphinx itself (version greater than 4), the Read the Docs theme, and the jQuery extension for Sphinx.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nsphinx>4\nsphinx-rtd-theme>=1\nsphinxcontrib-jquery\n```\n\n----------------------------------------\n\nTITLE: Creating New DXF Drawing with Setup\nDESCRIPTION: Creating a new DXF R12 drawing with initialization of default line types, text styles and dimension styles.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/CHANGELOG.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndwg = ezdxf.new('R12', setup=True)\n```\n\n----------------------------------------\n\nTITLE: Defining DgnDefinition Class in Python\nDESCRIPTION: The DgnDefinition class is a subclass of UnderlayDefinition specific for DGN underlay files. It has a DXF type of 'DGNDEFINITION' and can be created using factory functions.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfobjects/underlaydef.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass DgnDefinition(UnderlayDefinition):\n    # DGN underlay file\n```\n\n----------------------------------------\n\nTITLE: Defining TextEntityAlignment Enumeration in Python\nDESCRIPTION: Enumerates alignment options for text entities in CAD drawings. Includes various positioning options such as LEFT, CENTER, RIGHT, and different vertical alignments.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/enums.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass TextEntityAlignment:\n    LEFT\n    CENTER\n    RIGHT\n    ALIGNED\n    MIDDLE\n    FIT\n    BOTTOM_LEFT\n    BOTTOM_CENTER\n    BOTTOM_RIGHT\n    MIDDLE_LEFT\n    MIDDLE_CENTER\n    MIDDLE_RIGHT\n    TOP_LEFT\n    TOP_CENTER\n    TOP_RIGHT\n```\n\n----------------------------------------\n\nTITLE: Examining VPORT Table Structure in DXF R12 Format\nDESCRIPTION: This code block demonstrates the structure of a VPORT table in DXF R12 format, showing a multi-viewport configuration with three viewports named '*ACTIVE'. It includes viewport coordinates, view parameters, and display settings with detailed annotations.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/tables/vport_table.rst#2025-04-23_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n0       <<< table start\nTABLE\n2       <<< table type\nVPORT\n70      <<< VPORT table (max.) count, not reliable (ignore)\n3\n0       <<< first VPORT entry\nVPORT\n2       <<< VPORT (configuration) name\n*ACTIVE\n70      <<< standard flags, bit-coded\n0\n10      <<< lower-left corner of viewport\n0.45    <<<     x value, virtual coordinates in range [0 - 1]\n20      <<<     group code for y value\n0.0     <<<     y value, virtual coordinates in range [0 - 1]\n11      <<< upper-right corner of viewport\n1.0     <<<     x value, virtual coordinates in range [0 - 1]\n21      <<<     group code for y value\n1.0     <<<     y value, virtual coordinates in range [0 - 1]\n12      <<< view center point (in DCS), ???\n13.71   <<<     x value\n22      <<<     group code for y value\n0.02    <<<     y value\n13      <<< snap base point (in DCS)\n0.0     <<<     x value\n23      <<<     group code for y value\n0.0     <<<     y value\n14      <<< snap spacing X and Y\n1.0     <<<     x value\n24      <<<     group code for y value\n1.0     <<<     y value\n15      <<< grid spacing X and Y\n0.0     <<<     x value\n25      <<<     group code for y value\n0.0     <<<     y value\n16      <<< view direction from target point (in WCS), defines the z-axis of the DCS\n1.0     <<<     x value\n26      <<<     group code for y value\n-1.0    <<<     y value\n36      <<<     group code for z value\n1.0     <<<     z value\n17      <<< view target point (in WCS), defines the origin of the DCS\n0.0     <<<     x value\n27      <<<     group code for y value\n0.0     <<<     y value\n37      <<<     group code for z value\n0.0     <<<     z value\n40      <<< view height\n35.22\n41      <<< viewport aspect ratio\n0.99\n42      <<< lens (focal) length\n50.0    <<< 50mm\n43      <<< front clipping planes, offsets from target point\n0.0\n44      <<< back clipping planes, offsets from target point\n0.0\n50      <<< snap rotation angle\n0.0\n51      <<< view twist angle\n0.0\n71      <<< view mode\n0\n72      <<< circle zoom percent\n1000\n73      <<< fast zoom setting\n1\n74      <<< UCSICON setting\n3\n75      <<< snap on/off\n0\n76      <<< grid on/off\n0\n77      <<< snap style\n0\n78      <<< snap isopair\n0\n0       <<< next VPORT entry\nVPORT\n2       <<< VPORT (configuration) name\n*ACTIVE <<< same as first VPORT entry\n70\n0\n10\n0.0\n20\n0.5\n11\n0.45\n21\n1.0\n12\n8.21\n22\n9.41\n...\n...\n0       <<< next VPORT entry\nVPORT\n2       <<< VPORT (configuration) name\n*ACTIVE <<< same as first VPORT entry\n70\n0\n10\n0.0\n20\n0.0\n11\n0.45\n21\n0.5\n12\n2.01\n22\n-9.33\n...\n...\n0\nENDTAB\n```\n\n----------------------------------------\n\nTITLE: Documenting dbscan Function\nDESCRIPTION: References the dbscan (Density-Based Spatial Clustering of Applications with Noise) function for auto-documentation, a common clustering algorithm.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/math/clustering.rst#2025-04-23_snippet_5\n\nLANGUAGE: rst\nCODE:\n```\n.. autofunction:: dbscan\n```\n\n----------------------------------------\n\nTITLE: Accessing Layouts and Blocks in a Drawing\nDESCRIPTION: Methods for iterating through layouts and blocks in a Drawing object, including chaining all entities across multiple container objects and running queries across all entities.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/CHANGELOG.md#2025-04-23_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nDrawing.layouts_and_blocks()  # iterate over all layouts and block definitions\nDrawing.chain_layouts_and_blocks()  # chain entity spaces of all layouts and blocks\nDrawing.query()  # entity query over all layouts and blocks\nDrawing.groupby()  # groups DXF entities by an attribute or key function\n```\n\n----------------------------------------\n\nTITLE: Scaled and Translated INSERT\nDESCRIPTION: INSERT entity with uniform scaling of 0.5 and translation, showing scaled entity with original clipping path coordinates.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/Exploring the transformation behavior of SPATIAL_FILTER.md#2025-04-23_snippet_3\n\nLANGUAGE: dxf\nCODE:\n```\nINSERT(#CF)\n  insert location: (35.0, 5.0, 0.0)\n  rotation: 0\n  scale-x: 0.5\n  scale-y: 0.5\n  scale-z: 0.5\n  SPATIAL_FILTER(#D2)\n  clipping-path: (Vec2(5.0, 5.0), Vec2(12.0, 5.0), Vec2(8.5, 12.0))\n```\n\n----------------------------------------\n\nTITLE: Defining MTextLineAlignment Enumeration in Python\nDESCRIPTION: Enumerates line alignment options for multi-line text (MText) in CAD drawings. Includes BOTTOM, MIDDLE, and TOP alignment options.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/enums.rst#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nclass MTextLineAlignment:\n    BOTTOM\n    MIDDLE\n    TOP\n```\n\n----------------------------------------\n\nTITLE: Parsing No-Column MTEXT Entity in DXF R2018\nDESCRIPTION: This snippet shows the structure of a no-column MTEXT entity in DXF R2018 format. It includes entity attributes with a defined column height attribute.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/entities/mtext.rst#2025-04-23_snippet_15\n\nLANGUAGE: Text\nCODE:\n```\n0 <ctrl> MTEXT\n... <snip>\n100 <ctrl> AcDbMText\n10 <point> (-334.691900433414, 276.101821192053, 0.0)   <<< insert location in WCS\n40 <float> 2.5                  <<< character height in drawing units\n41 <float> 175.0                <<< reference column width\n46 <float> 158.189308131867     <<< defined column height\n71 <int> 1                      <<< attachment point\n72 <int> 1                      <<< flag text flow direction\n3 <str> Lorem ipsum dolor sit amet, consetetur sadipscing elitr, ...\n... <snip>\n73 <int> 1                      <<< line spacing style\n44 <float> 1.0                  <<< line spacing factor\n1001 <ctrl> AcadAnnotative\n... <snip>\n```\n\n----------------------------------------\n\nTITLE: Defining Point Class with Location and Angle Attributes in Python\nDESCRIPTION: The Point class representing a dimensionless point entity in DXF files. It inherits from DXFGraphic and includes location and angle attributes for positioning and orientation.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfentities/point.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Point:\n    # dxf.location attribute\n    # Location of the point (2D/3D Point in WCS)\n\n    # dxf.angle attribute\n    # Angle in degrees of the x-axis for the UCS in effect when POINT was drawn (float); used when PDMODE is nonzero.\n\n    def transform(self):\n        # Method details not shown\n        pass\n\n    def translate(self):\n        # Method details not shown\n        pass\n\n    def virtual_entities(self):\n        # Method details not shown\n        pass\n```\n\n----------------------------------------\n\nTITLE: Using DXF Unicode Notation Example\nDESCRIPTION: Example of using DXF Unicode notation in table names, referenced in bugfix #782.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\\U+XXXX\n```\n\n----------------------------------------\n\nTITLE: Duplicating an Existing MLeaderStyle in Python using ezdxf\nDESCRIPTION: This snippet shows how to duplicate an existing MLeaderStyle. It creates a new style named 'DuplicatedStyle' by duplicating the 'Standard' style in the mleader_styles collection.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfobjects/mleaderstyle.rst#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nduplicated_style = doc.mleader_styles.duplicate_entry(\"Standard\", \"DuplicatedStyle\")\n```\n\n----------------------------------------\n\nTITLE: Rendering the Table and Saving the DXF File\nDESCRIPTION: Renders the table into the modelspace, adjusts the viewport to properly display the table, and saves the final DXF file.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/addons/tablepainter.rst#2025-04-23_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\n# render the table, shifting the left-bottom of the table to the origin:\ntable.render(doc.modelspace(), insert=(0, table.table_height))\n\nth = table.table_height\ntw = table.table_width\ndoc.set_modelspace_vport(height=th * 1.5, center=(tw/2, th/2))\ndoc.saveas(\"table_tutorial.dxf\")\n```\n\n----------------------------------------\n\nTITLE: View Command Help Output\nDESCRIPTION: Shows the help text for the ezdxf view sub-command, displaying available options for viewing DXF files.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/launcher.rst#2025-04-23_snippet_8\n\nLANGUAGE: Text\nCODE:\n```\nC:\\> ezdxf view -h\nusage: ezdxf view [-h] [-l LAYOUT] [--lwscale LWSCALE] [FILE]\n\npositional arguments:\n  FILE                  DXF file to view\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -l LAYOUT, --layout LAYOUT\n                        select the layout to draw, default is \"Model\"\n  --lwscale LWSCALE     set custom line weight scaling, default is 0 to\n                        disable line weights at all\n```\n\n----------------------------------------\n\nTITLE: Dynamic Column Linked MTEXT in DXF R2000 (#1B6)\nDESCRIPTION: Shows the structure of a linked MTEXT entity (#1B6) in a dynamic column setup with auto-height feature, containing the defined column height in XDATA.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/entities/mtext.rst#2025-04-23_snippet_8\n\nLANGUAGE: Text\nCODE:\n```\n0 <ctrl> MTEXT\n... <snip>\n100 <ctrl> AcDbMText\n10 <point> (-71.214579865783, 276.101821192053, 0.0)\n40 <float> 2.5\n41 <float> 175.0    <<< invalid column width\n... <snip>\n1001 <ctrl> ACAD\n1000 <str> ACAD_MTEXT_DEFINED_HEIGHT_BEGIN\n1070 <int> 46       <<< defined column height\n1040 <float> 158.189308131867\n1000 <str> ACAD_MTEXT_DEFINED_HEIGHT_END\n```\n\n----------------------------------------\n\nTITLE: Modifying ezdxf Options and Saving Configuration\nDESCRIPTION: Demonstrates how to get and set configuration values in ezdxf and save changes to config files.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/options.rst#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n# Set options, value has to ba a str, use \"true\"/\"false\" for boolean values\nezdxf.options.set(section, key, value)\n\n# Get option as string\nvalue = ezdxf.options.get(section, key, default=\"\")\n\n# Special getter for boolean, int and float\nvalue = ezdxf.options.get_bool(section, key, default=False)\nvalue = ezdxf.options.get_int(section, key, default=0)\nvalue = ezdxf.options.get_float(section, key, default=0.0)\n```\n\n----------------------------------------\n\nTITLE: DXF Lineweight Override XRECORD Structure\nDESCRIPTION: Shows the structure of an XRECORD entity that stores lineweight override information for specific viewports. The record contains a reference to the VIEWPORT entity and the lineweight override value.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/tables/layer_table.rst#2025-04-23_snippet_7\n\nLANGUAGE: none\nCODE:\n```\n0\nXRECORD\n...         <<< like transparency XRECORD\n102         <<< for each overridden VIEWPORT one entry\n{ADSK_LYR_LINEWT_OVERRIDE\n335         <<< handle to VIEWPORT\nAC\n91          <<< lineweight override\n13          <<< lineweight value\n102\n}\n```\n\n----------------------------------------\n\nTITLE: Using Page Setup for Layouts\nDESCRIPTION: Method for configuring page setup on layouts, with support varying by DXF version.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/CHANGELOG.md#2025-04-23_snippet_21\n\nLANGUAGE: Python\nCODE:\n```\nLayout.page_setup()  # configure page setup for layouts\n```\n\n----------------------------------------\n\nTITLE: Checking ezdxf Version Information\nDESCRIPTION: Demonstrates the output of the ezdxf -V command showing version information for ezdxf and Python, as well as whether C-extensions are being used.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/launcher.rst#2025-04-23_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\nezdxf 1.1.0b1 from c:\\source\\ezdxf.git\\src\\ezdxf\nPython version: 3.11.2 (tags/v3.11.2:878ead1, Feb  7 2023, 16:38:35) [MSC v.1934 64 bit (AMD64)]\nusing C-extensions: yes\n```\n\n----------------------------------------\n\nTITLE: Defining EndCaps Enumeration in Python\nDESCRIPTION: Enumerates end cap styles for lines or polylines in CAD drawings. Includes NONE, ROUND, ANGLE, and SQUARE options.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/enums.rst#2025-04-23_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\nclass EndCaps:\n    NONE\n    ROUND\n    ANGLE\n    SQUARE\n```\n\n----------------------------------------\n\nTITLE: Dynamic Column Second Linked MTEXT in DXF R2000 (#1B7)\nDESCRIPTION: Shows the structure of a second linked MTEXT entity (#1B7) in a dynamic column setup with auto-height feature, similar to the first linked entity.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/entities/mtext.rst#2025-04-23_snippet_9\n\nLANGUAGE: Text\nCODE:\n```\n0 <ctrl> MTEXT\n... <snip>\n100 <ctrl> AcDbMText\n10 <point> (-8.714579865783, 276.101821192053, 0.0)\n40 <float> 2.5\n41 <float> 175.0    <<< invalid column width\n... <snip>\n1001 <ctrl> ACAD\n1000 <str> ACAD_MTEXT_DEFINED_HEIGHT_BEGIN\n1070 <int> 46       <<< defined column height\n1040 <float> 158.189308131867\n1000 <str> ACAD_MTEXT_DEFINED_HEIGHT_END\n```\n\n----------------------------------------\n\nTITLE: RST Module Documentation for ezdxf Triangulation\nDESCRIPTION: ReStructuredText documentation defining the module reference and function documentation for the triangulation module in ezdxf's math package.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/math/triangulation.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. module:: ezdxf.math.triangulation\n\n.. _math_triangulation:\n\nTriangulation\n=============\n\nTriangulation module: :mod:`ezdxf.math.triangulation`\n\n.. autofunction:: mapbox_earcut_2d\n\n.. autofunction:: mapbox_earcut_3d\n```\n\n----------------------------------------\n\nTITLE: Duplicating Table Entries\nDESCRIPTION: Example of duplicating table entries like styles in a DXF drawing.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/CHANGELOG.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndwg.styles.duplicate_entry('OpenSans', new_name='OpenSansNew')\n```\n\n----------------------------------------\n\nTITLE: INSERT with Offset Block Origin\nDESCRIPTION: INSERT entity with block definition offset of (5,5,0), demonstrating how block origin affects clipping path transformation.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/Exploring the transformation behavior of SPATIAL_FILTER.md#2025-04-23_snippet_5\n\nLANGUAGE: dxf\nCODE:\n```\nINSERT(#36)\n  insert location: (5.0, 5.0, 0.0)\n  rotation: 0\n  scale-x: 1\n  scale-y: 1\n  scale-z: 1\n  SPATIAL_FILTER(#97)\n  clipping-path: (Vec2(5.0, 5.0), Vec2(10.0, 5.0), Vec2(7.5, 10.0))\n```\n\n----------------------------------------\n\nTITLE: XData Class Definition in Python\nDESCRIPTION: Core class definition for managing XDATA in DXF entities. The class provides methods for handling extended data including adding, retrieving, transforming, and managing xlist data. It integrates with the ezdxf library's extended data functionality.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/develop/xdata.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass XData:\n    # Internal management class for XDATA\n    # Methods include:\n    # __contains__\n    # add\n    # get\n    # discard\n    # has_xlist\n    # get_xlist\n    # set_xlist\n    # discard_xlist\n    # replace_xlist\n    # transform(m: Matrix44) -> None\n```\n\n----------------------------------------\n\nTITLE: Parsing Static Columns MTEXT Entity in DXF R2018\nDESCRIPTION: This snippet shows the structure of a static columns MTEXT entity in DXF R2018 format. It includes entity attributes, column specifications, and embedded object data.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/entities/mtext.rst#2025-04-23_snippet_11\n\nLANGUAGE: Text\nCODE:\n```\n0 <ctrl> MTEXT\n5 <hex> #9C                     <<< entity handle\n330 <hex> #1F                   <<< block record handle of owner layout\n100 <ctrl> AcDbEntity\n8 <str> 0                       <<< layer\n100 <ctrl> AcDbMText\n10 <point> (-133.714579865783, 276.101821192053, 0.0)   <<< insert location in WCS\n40 <float> 2.5                  <<< character height in drawing units\n41 <float> 62.694536423841      <<< reference column width, if not in column mode\n46 <float> 158.189308131867     <<< defined column height\n71 <int> 1                      <<< attachment point\n72 <int> 1                      <<< text flow direction\n3 <str> Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam...\n... <snip> text content of all three columns\n73 <int> 1                      <<< line spacing style\n44 <float> 1.0                  <<< line spacing factor\n101 <ctrl> Embedded Object\n70 <int> 1, b00000001           <<< ???\n10 <point> (1.0, 0.0, 0.0)      <<< text direction vector (local x-axis)\n11 <point> (-133.714579865783, 276.101821192053, 0.0)   <<< repeated insert location\n40 <float> 62.694536423841      <<< repeated reference column width\n41 <float> 158.189308131867     <<< repeated defined column height\n42 <float> 175.0                <<< extents (total) width\n43 <float> 158.189308131867     <<< extents (total) height, max. height if different column heights\n71 <int> 2                      <<< column type: 2=dynamic columns\n72 <int> 0                      <<< column height count\n44 <float> 50.0                 <<< column width\n45 <float> 12.5                 <<< column gutter width\n73 <int> 1                      <<< flag column auto height\n74 <int> 0                      <<< flag reversed column flow\n1001 <ctrl> AcadAnnotative\n1000 <str> AnnotativeData\n1002 <str> {\n1070 <int> 1\n1070 <int> 0\n1002 <str> }\n```\n\n----------------------------------------\n\nTITLE: Defining MLineVertex Class in Python for ezdxf\nDESCRIPTION: This snippet defines the MLineVertex class, which represents a vertex in an MLINE entity. It includes attributes for location, direction, and parameterization.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfentities/mline.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass MLineVertex:\n    location = None\n    line_direction = None\n    miter_direction = None\n    line_params = None\n    fill_params = None\n```\n\n----------------------------------------\n\nTITLE: Qt PenJoinStyle Constants\nDESCRIPTION: Qt framework constants for pen join styles used in PySide and PyQt, including SVG-compatible options.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/Line Cap- and Join Styles.md#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nQt.MiterJoin\nQt.BevelJoin\nQt.RoundJoin\nQt.SvgMiterJoin\n```\n\n----------------------------------------\n\nTITLE: Example INI Configuration File Structure for ezdxf\nDESCRIPTION: Shows the structure of an ezdxf configuration file with various settings for the core functionality and browse command.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/options.rst#2025-04-23_snippet_1\n\nLANGUAGE: INI\nCODE:\n```\n[core]\ndefault_dimension_text_style = OpenSansCondensed-Light\ntest_files = D:\\Source\\dxftest\nsupport_dirs =\n    \"C:\\Program Files\\Bricsys\\BricsCAD V23 en_US\\Fonts\",\n    \"~/dir2\",\n    \"~/dir3\",\nload_proxy_graphics = true\nstore_proxy_graphics = true\nlog_unprocessed_tags = false\nfilter_invalid_xdata_group_codes = true\nwrite_fixed_meta_data_for_testing = false\ndisable_c_ext = false\n\n[browse-command]\ntext_editor = \"C:\\Program Files\\Notepad++\\notepad++.exe\" \"{filename}\" -n{num}\n```\n\n----------------------------------------\n\nTITLE: Checking DXF Attribute Support in Python\nDESCRIPTION: Demonstrates how to verify if a DXF attribute is supported by an entity type using the is_supported() method. The example creates a line and checks if it supports the 'text' attribute.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tasks/modify_dxf_attributes.rst#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nline = msp.add_line((0, 0), (1, 0))\nassert line.dxf.is_supported(\"text\") is False\n```\n\n----------------------------------------\n\nTITLE: Defining ACAD_DSTYLE XDATA Parameters for Dimension Extension Lines in AutoCAD DXF\nDESCRIPTION: Shows the structure of XDATA parameters used to control dimension extension lines in AutoCAD. Includes DIMEXT_ENABLED for fixed extension lines and DIMEXT_LENGTH for specifying extension line length. These parameters use group codes that differ from their R2007 counterparts (DIMEXFIX and DIMEXLEN).\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/tables/dimstyle_table.rst#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nACAD_DSTYLE_DIMEXT_ENABLED      <<< extension line fixed\n1070\n383                             <<< group code, which differs from R2007 DIMEXFIX\n1070\n1                               <<< fixed if 1 else 0\n1001\nACAD_DSTYLE_DIMEXT_LENGTH       <<< extension line fixed length\n1070\n378                             <<< group code, which differs from R2007 DIMEXLEN\n1040\n1.33                            <<< length of extension line below dimension line\n```\n\n----------------------------------------\n\nTITLE: Copying and Moving Entities Between Layouts\nDESCRIPTION: Methods for copying and moving DXF entities between layouts, allowing for flexible entity management.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/CHANGELOG.md#2025-04-23_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\nentity.get_layout()  # returns layout in which entity resides or None if unassigned\nentity.copy()  # copy any DXF entity without associated layout\nentity.copy_to_layout(layout)  # copy entity to another layout\nentity.move_to_layout(layout)  # move entity from actual layout to another layout\n```\n\n----------------------------------------\n\nTITLE: Complex Line Type TEXT Tag Structure\nDESCRIPTION: Details the DXF tag structure for a complex line type with text in DXF format. Shows how text properties like font, scaling, rotation, and position are encoded.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/tables/linetype_table.rst#2025-04-23_snippet_5\n\nLANGUAGE: none\nCODE:\n```\n0\nLTYPE\n5\n614\n330\n5F\n100         <<< subclass marker\nAcDbSymbolTableRecord\n100         <<< subclass marker\nAcDbLinetypeTableRecord\n2\nGASLEITUNG\n70\n0\n3\nGasleitung2 ----GAS----GAS----GAS----GAS----GAS----GAS--\n72          <<< signature tag\n65          <<< ascii code for \"A\"\n73          <<< count of pattern groups starting with a code 49 tag\n3           <<< 3 pattern groups\n40          <<< overall pattern length in drawing units\n1\n49          <<< 1. pattern group\n0.5         <<< >0 line, <0 gap, =0 point\n74          <<< type marker\n0           <<< 0 for line group\n49          <<< 2. pattern group\n-0.2\n74          <<< type marker\n2           <<< 2 for text group\n75          <<< shape number in shape-file\n0           <<< always 0 for text group\n340         <<< handle to text style \"STANDARD\"\n11\n46          <<< scaling factor: \"s\" in pattern definition\n0.1\n50          <<< rotation angle: \"r\" and \"u\" in pattern definition\n0.0\n44          <<< shift x units: \"x\" in pattern definition = parallel to line direction\n-0.1\n45          <<< shift y units: \"y\" in pattern definition = normal to line direction\n-0.05\n9           <<< text\nGAS\n49          <<< 3. pattern group\n-0.25\n74\n0\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Font Cache using Command Line\nDESCRIPTION: Shell command to rebuild the font cache using ezdxf launcher. Alternative method to update the font cache through command line interface.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/font cache.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nezdxf --fonts\n```\n\n----------------------------------------\n\nTITLE: Installing Optional Dependencies via pip\nDESCRIPTION: Command to install the optional dependencies Matplotlib and PySide6 using pip. This is recommended for Windows and WSL/Ubuntu environments, while system package managers should be used on Raspberry Pi OS and Manjaro.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/setup.rst#2025-04-23_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\npip3 install matplotlib PySide6\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Development Version from GitHub\nDESCRIPTION: Command to install the latest development version of ezdxf directly from the GitHub repository using pip3.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/setup.rst#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npip3 install git+https://github.com/mozman/ezdxf.git@master\n```\n\n----------------------------------------\n\nTITLE: Structuring TABLES Section in DXF R12 and Prior\nDESCRIPTION: This snippet shows the structure of the TABLES section in DXF R12 and prior versions. It demonstrates a simpler structure without the BLOCK_RECORD table and optional handles, which are only present if the HEADER variable $HANDLING is 1.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/sections/tables_section.rst#2025-04-23_snippet_1\n\nLANGUAGE: none\nCODE:\n```\n0\nSECTION\n2           <<< begin TABLES section\nTABLES\n0           <<< first TABLE\nTABLE\n2           <<< name of table \"LTYPE\"\nLTYPE\n5           <<< optional handle of the TABLE\n8\n70          <<< count of table entries\n4\n0           <<< first table entry\nLTYPE\n...\n0           <<< second table entry\nLTYPE\n...\n0           <<< end of TABLE\nENDTAB\n0           <<< next TABLE\nTABLE\n2           <<< name of table \"LAYER\"\nLAYER\n5           <<< optional handle of the TABLE\n2\n70          <<< count of table entries\n1\n0           <<< first table entry\nLAYER\n...\n0           <<< end of TABLE\nENDTAB\n0           <<< end of SECTION\nENDSEC\n```\n\n----------------------------------------\n\nTITLE: Exploring DXF File Structure using ezdxf Browse Command\nDESCRIPTION: Command line instructions for using the ezdxf DXF structure browser, which provides a graphical interface to explore and navigate DXF files. Requires PySide6 or PyQt5 to be installed.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/howto/document.rst#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n# Call as executable script from the command line:\nezdxf browse FILE\n\n# Call as module on Windows:\npy -m ezdxf browse FILE\n\n# Call as module on Linux/Mac\npython3 -m ezdxf browse FILE\n```\n\n----------------------------------------\n\nTITLE: Displaying Structure of a Typical DXF R12 File\nDESCRIPTION: Shows the standard structure of a DXF R12 file with all required sections and their organization. This includes HEADER, TABLES, BLOCKS, ENTITIES sections and their respective tags.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/filestructure.rst#2025-04-23_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n0           <<< Begin HEADER section, has to be the first section\nSECTION\n2\nHEADER\n                <<< Header variable items go here\n0           <<< End HEADER section\nENDSEC\n0           <<< Begin TABLES section\nSECTION\n2\nTABLES\n0\nTABLE\n2\nVPORT\n70          <<< viewport table maximum item count\n                <<< viewport table items go here\n0\nENDTAB\n0\nTABLE\n2\nAPPID, DIMSTYLE, LTYPE, LAYER, STYLE, UCS, VIEW, or VPORT\n70          <<< Table maximum item count, a not reliable value and ignored by AutoCAD\n                <<< Table items go here\n0\nENDTAB\n0           <<< End TABLES section\nENDSEC\n0           <<< Begin BLOCKS section\nSECTION\n2\nBLOCKS\n                <<< Block definition entities go here\n0           <<< End BLOCKS section\nENDSEC\n0           <<< Begin ENTITIES section\nSECTION\n2\nENTITIES\n                <<< Drawing entities go here\n0           <<< End ENTITIES section\nENDSEC\n0           <<< End of file marker (required)\nEOF\n```\n\n----------------------------------------\n\nTITLE: Using ExampleCls Constructor in Python\nDESCRIPTION: Example showing how to create an instance of ExampleCls using keyword arguments that correspond to instance attributes.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/develop/doc_formatting_guide.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ne = ExampleCls(flag=True)\n```\n\n----------------------------------------\n\nTITLE: Setting Specific Pixel Size for Matplotlib Figure Export in Python\nDESCRIPTION: This function sets a specific pixel size for a Matplotlib figure. It calculates the figure size in inches based on the desired pixel dimensions and the figure's DPI.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/howto/drawing-addon.rst#2025-04-23_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\ndef set_pixel_size(fig: plt.Figure, size: tuple[int, int]):\n    x, y = size\n    fig.set_size_inches(x / fig.dpi, y / fig.dpi)\n```\n\n----------------------------------------\n\nTITLE: Defining Measurement Enumeration in Python\nDESCRIPTION: Enumerates measurement systems used in CAD drawings. Includes Imperial and Metric options.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/enums.rst#2025-04-23_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nclass Measurement:\n    Imperial\n    Metric\n```\n\n----------------------------------------\n\nTITLE: Bounding Box Calculation with Multiple Entity Queries in Python using ezdxf\nDESCRIPTION: This snippet demonstrates how to use caching for multiple entity queries that have overlapping results. It shows the potential for performance improvement when processing the same data multiple times.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/bbox.rst#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ndoc = ezdxf.readfile(CADKitSamples / 'A_000217.dxf.dxf')\nmsp = doc.modelspace()\ncache = bbox.Cache(uuid=False)\n\next = bbox.extents(msp, cache)\nprint(cache)\n\n# process modelspace again\next = bbox.extents(msp, cache)\nprint(cache)\n```\n\n----------------------------------------\n\nTITLE: Command Packet Structure\nDESCRIPTION: Shows the format for command packets including length, opcode, and arguments.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/Proxy Graphic Binary Chunk.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n{Command Packet Length} {Command OPCODE} [{Command Argument} {Command argument} ...]\n```\n\n----------------------------------------\n\nTITLE: Building Process Example\nDESCRIPTION: The typical steps for creating a MultiLeader entity involves creating the entity via factory methods, setting content and properties, adding leader lines, and finalizing with build method.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/render/mleader.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# 1. Create entity by factory method\nlayout.add_multileader_mtext()\nlayout.add_multileader_block()\n\n# 2. Set the content\nbuilder.set_content()\nbuilder.set_attribute()\n\n# 3. Set properties\nbuilder.set_arrow_properties()\nbuilder.set_connection_properties()\nbuilder.set_connection_types()\nbuilder.set_leader_properties()\nbuilder.set_mleader_style()\nbuilder.set_overall_scaling()\n\n# 4. Add leader lines\nbuilder.add_leader_line()\n\n# 5. Finalize\nbuilder.build()\n```\n\n----------------------------------------\n\nTITLE: Application-Defined Codes Format in DXF (Variant 1)\nDESCRIPTION: Demonstrates the first format variant for application-defined codes in DXF R13 and later. Shows how custom application data can be enclosed with specific 102 group code markers.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/dxftags.rst#2025-04-23_snippet_3\n\nLANGUAGE: none\nCODE:\n```\n102\n{YOURAPPID\n...\n102\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Splines with Control Points\nDESCRIPTION: Methods for creating different types of splines by specifying control points, including open, closed, rational, and closed rational splines.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/CHANGELOG.md#2025-04-23_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\nadd_open_spline()\nadd_closed_spline()\nadd_rational_spline()\nadd_closed_rational_spline()\n```\n\n----------------------------------------\n\nTITLE: Dynamic Columns Structure in DXF R2000\nDESCRIPTION: Shows the structure of dynamic columns in DXF R2000 with auto-height feature, where column specification includes flags for dynamic columns and auto height.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/entities/mtext.rst#2025-04-23_snippet_7\n\nLANGUAGE: Text\nCODE:\n```\n0 <ctrl> MTEXT\n5 <hex> #A2                 <<< entity handle\n... <snip>\n330 <hex> #1F               <<< block record handle of owner layout\n100 <ctrl> AcDbEntity\n8 <str> 0                   <<< layer\n100 <ctrl> AcDbMText\n10 <point> (-133.714579865783, 276.101821192053, 0.0)   <<< insert location in WCS\n40 <float> 2.5              <<< character height in drawing units\n41 <float> 62.694536423841  <<< reference column width, if not in column mode\n71 <int> 1                  <<< attachment point\n72 <int> 1                  <<< flag text flow direction\n3 <str> Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed dia...\n... <snip>\n73 <int> 1                  <<< line spacing style\n44 <float> 1.0              <<< line spacing factor\n1001 <ctrl> AcadAnnotative\n... <snip>\n1001 <ctrl> ACAD\n1000 <str> ACAD_MTEXT_COLUMN_INFO_BEGIN\n1070 <int> 75               <<< column type: 2=dynamic columns\n1070 <int> 2\n1070 <int> 79               <<< flag column auto height\n1070 <int> 1\n1070 <int> 76               <<< column count\n1070 <int> 3\n1070 <int> 78               <<< flag column flow reversed\n1070 <int> 0\n1070 <int> 48               <<< column width in column mode\n1040 <float> 50.0\n1070 <int> 49               <<< column gutter width\n1040 <float> 12.5\n1000 <str> ACAD_MTEXT_COLUMN_INFO_END\n1000 <str> ACAD_MTEXT_COLUMNS_BEGIN\n1070 <int> 47               <<< column count\n1070 <int> 3\n1005 <hex> #1B6             <<< handle to 2. column as MTEXT entity\n1005 <hex> #1B7             <<< handle to 3. column as MTEXT entity\n1000 <str> ACAD_MTEXT_COLUMNS_END\n1000 <str> ACAD_MTEXT_DEFINED_HEIGHT_BEGIN\n1070 <int> 46               <<< defined column height\n1040 <float> 158.189308131867\n1000 <str> ACAD_MTEXT_DEFINED_HEIGHT_END\n```\n\n----------------------------------------\n\nTITLE: Basic R12 Export Usage Example - Python\nDESCRIPTION: Demonstrates how to use the r12export module to convert any DXF file to R12 format. Uses ezdxf library to read the source file and r12export addon to save it in R12 format.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/addons/r12export.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport ezdxf\nfrom ezdxf.addons import r12export\n\ndoc = ezdxf.readfile(\"any.dxf\")\nr12export.saveas(doc, \"r12.dxf\")\n```\n\n----------------------------------------\n\nTITLE: Building HTML Documentation with Sphinx\nDESCRIPTION: Commands to navigate to the docs directory and build the HTML documentation using Sphinx. The output will be located in the build/ezdxf/docs/build/html directory.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/setup.rst#2025-04-23_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\ncd docs\nmake html\n```\n\n----------------------------------------\n\nTITLE: Listing Supported File Formats in Matplotlib Backend\nDESCRIPTION: Command-line example showing how to list the supported file formats in the Matplotlib backend for the drawing add-on.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/addons/drawing.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ ./draw_cad.py --supported_formats\n# will list the file formats supported by the matplotlib backend.\n# Many formats are supported including vector graphics formats\n# such as pdf and svg\n```\n\n----------------------------------------\n\nTITLE: Header Interpretation Rules\nDESCRIPTION: Defines the structure for interpreting the binary chunk header including length and command count.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/Proxy Graphic Binary Chunk.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n{Header}\n{int32 / Length of the binary chunk} {int32 / Number of commands}\n```\n\n----------------------------------------\n\nTITLE: Manually Adding HPGL/2 Mode Sequence in Python\nDESCRIPTION: This snippet shows how to manually add the ENTER_HPGL2_MODE sequence to a bytes stream before parsing HPGL/2 commands. This is useful for files that don't contain the escape sequence to enter HPGL/2 mode.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/addons/hpgl2.rst#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ncommands = hpgl2_commands(hpgl2.ENTER_HPGL2_MODE + data)\n```\n\n----------------------------------------\n\nTITLE: Listing Known $DWGCODEPAGE Encodings for DXF and Python\nDESCRIPTION: This table shows the mapping between DXF $DWGCODEPAGE encodings and their corresponding Python encoding names. It covers various language and region-specific encodings.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/fileencoding.rst#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n========= ====== ================\nDXF       Python Name\n========= ====== ================\nANSI_874  cp874  Thai\nANSI_932  cp932  Japanese\nANSI_936  gbk    UnifiedChinese\nANSI_949  cp949  Korean\nANSI_950  cp950  TradChinese\nANSI_1250 cp1250 CentralEurope\nANSI_1251 cp1251 Cyrillic\nANSI_1252 cp1252 WesternEurope\nANSI_1253 cp1253 Greek\nANSI_1254 cp1254 Turkish\nANSI_1255 cp1255 Hebrew\nANSI_1256 cp1256 Arabic\nANSI_1257 cp1257 Baltic\nANSI_1258 cp1258 Vietnam\n========= ====== ================\n```\n\n----------------------------------------\n\nTITLE: Using ZOOM All Command in AutoCAD\nDESCRIPTION: This command zooms to show the drawing limits or extents, whichever is greater.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/concepts/extents_limits.rst#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nZOOM all\n```\n\n----------------------------------------\n\nTITLE: Clearing XRecord Entity Data in Python\nDESCRIPTION: Method to remove all tags from an XRecord entity, leaving only the handle tag (group code 5) intact.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfobjects/xrecord.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ndef clear(self) -> None:\n    \"\"\"Remove all tags, except the handle (group code 5).\"\"\"\n    self.tags = Tags([only_handle_code(self.tags)])\n```\n\n----------------------------------------\n\nTITLE: Building and Installing Python from Source\nDESCRIPTION: Commands to build and install Python from source using make with parallel compilation. The -j option determines how many parallel processes to use based on available CPU cores.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/setup.rst#2025-04-23_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\nmake -j 4\nsudo make install\n```\n\n----------------------------------------\n\nTITLE: NamedPlotStyles Class Definition for STB Files\nDESCRIPTION: Class for handling named plot style tables (STB files). Similar to ColorDependentPlotStyles but with support for named styles.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/addons/acadctb.rst#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nclass NamedPlotStyles:\n    description: str\n    scale_factor: float\n    apply_factor: bool\n    custom_lineweight_display_units: int\n    lineweights: array.array\n```\n\n----------------------------------------\n\nTITLE: Markdown Navigation Structure for EZDXF Documentation\nDESCRIPTION: Hierarchical markdown outline showing the main documentation sections and embedded content for the EZDXF project.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/contents.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [[EZDXF]]\n\t- [[ABOUT]]\n\t- [[RELEASE NOTES]]\n\t- [[CHANGELOG]]\n\t- [[DOCUMENTATION]]\n\t- [[FAQ]]\n\t- [[HOWTO]]\n\t- [[TUTORIALS]]\n\t- [[REFERENCES]]\n\t- [[IDEAS]]\n\t- [[CONTRIBUTORS]]\n- {{embed [[COLLECTIONS]]}}\n```\n\n----------------------------------------\n\nTITLE: Color Change in MTEXT Format Code\nDESCRIPTION: This snippet demonstrates how to change text color using the \\C format code in MTEXT, with examples for different colors.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/MText format codes.md#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n\\C1;\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n\\C2;\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n\\C3;\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n\\C4;\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n\\C5;\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n\\C6;\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n\\C7;\n```\n\n----------------------------------------\n\nTITLE: Importing Required Modules for XREF Operations in Python\nDESCRIPTION: Essential imports for working with external references in ezdxf, including the core ezdxf module, xref module for XREF operations, units module for measurement units, and odafc addon for DWG file operations.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/xref_module.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport os\nimport ezdxf\nfrom ezdxf import xref\nfrom ezdxf import units\n\n# The module ezdxf.addons.odafc is a wrapper for the ODA File Converter:\nfrom ezdxf.addons import odafc\n```\n\n----------------------------------------\n\nTITLE: Installing Build Requirements for Compiling Python from Source\nDESCRIPTION: Commands to update package lists and install the necessary build dependencies for compiling Python from source on Debian-based systems like Raspberry Pi OS.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/setup.rst#2025-04-23_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update\nsudo apt-get upgrade\n\nsudo apt-get install -y make build-essential libssl-dev zlib1g-dev \\\n   libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm \\\n   libncurses5-dev libncursesw5-dev xz-utils tk-dev\n```\n\n----------------------------------------\n\nTITLE: APPID Table Structure in DXF R2000+\nDESCRIPTION: Shows the extended structure of the APPID table in DXF R2000+ format. Includes additional elements like handles, owner tags, and subclass markers not present in R12 format.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/tables/appid_table.rst#2025-04-23_snippet_1\n\nLANGUAGE: none\nCODE:\n```\n0           <<< start of table\nTABLE\n2           <<< table type\nAPPID\n5           <<< table handle\n3\n330         <<< owner tag, tables have no owner\n0\n100         <<< subclass marker\nAcDbSymbolTable\n70          <<< count of table entries, AutoCAD ignores this value\n3\n0           <<< first table entry\nAPPID\n5           <<< handle of appid\n2A\n330         <<< owner handle, handle of APPID table\n3\n100         <<< subclass marker\nAcDbSymbolTableRecord\n100         <<< subclass marker\nAcDbRegAppTableRecord\n2           <<< unique application identifier\nACAD\n70          <<< flags, see `APPID`_ reference\n0           <<< in common cases always 0\n0           <<< next table entry\nAPPID\n...\n0           <<< end of APPID table\nENDTAB\n```\n\n----------------------------------------\n\nTITLE: Configuring DXF R12 Files\nDESCRIPTION: Method for configuring DXF R12 files to be written without handles, which may be required for certain compatibility scenarios.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/CHANGELOG.md#2025-04-23_snippet_23\n\nLANGUAGE: Python\nCODE:\n```\ndwg.header['$HANDLING']=0  # write DXF R12 files without handles (default is 1)\n```\n\n----------------------------------------\n\nTITLE: Linked MTEXT Column Structure in DXF R2000 (#1B4)\nDESCRIPTION: Displays the structure of a linked MTEXT entity (#1B4) referenced by the main MTEXT entity, showing how it contains minimal column information but with an invalid column width value.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/entities/mtext.rst#2025-04-23_snippet_4\n\nLANGUAGE: Text\nCODE:\n```\n0 <ctrl> MTEXT\n... <snip>\n100 <ctrl> AcDbMText\n10 <point> (348.417876152751, 276.101821192053, 0.0)\n40 <float> 2.5\n41 <float> 175.0        <<< invalid reference column width\n... <snip>\n1001 <ctrl> ACAD\n1000 <str> ACAD_MTEXT_DEFINED_HEIGHT_BEGIN\n1070 <int> 46           <<< defined column height\n1040 <float> 150.0\n1000 <str> ACAD_MTEXT_DEFINED_HEIGHT_END\n```\n\n----------------------------------------\n\nTITLE: Setting DXF Attributes Using Set Method in Python\nDESCRIPTION: Shows how to modify DXF attributes using the set() method, which provides an alternative way to assign attribute values.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tasks/modify_dxf_attributes.rst#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ne.dxf.set('color', 9)\n```\n\n----------------------------------------\n\nTITLE: Drawing Paperspace Method Usage\nDESCRIPTION: Example showing usage of the new Drawing.paperspace() method that returns paperspace layouts with correct return-type annotation\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/Release Notes v1.0.x.md#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nDrawing.paperspace()\n```\n\n----------------------------------------\n\nTITLE: Retrieving XDATA from DXF Entities (AutoLISP)\nDESCRIPTION: AutoLISP script for retrieving XDATA from DXF entities in CAD applications.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/custom_data.rst#2025-04-23_snippet_7\n\nLANGUAGE: AutoLISP\nCODE:\n```\n(defun C:SHOWXDATA (/ entity_list xdata_list)\n    (setq entity_list (entget (car (entsel)) '(\"YOUR_UNIQUE_ID\")))\n    (setq xdata_list (assoc -3 entity_list))\n    (car (cdr xdata_list))\n)\n```\n\n----------------------------------------\n\nTITLE: Exploding an INSERT Entity in Python with ezdxf\nDESCRIPTION: Shows how to use the new Insert.explode() method to break down an INSERT entity, including support for MINSERT (multi-insert) entities.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/CHANGELOG.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport ezdxf\n\ndoc = ezdxf.readfile('drawing.dxf')\nmsp = doc.modelspace()\n\n# Find an INSERT entity\ninsert = msp.query('INSERT[name==\"my_block\"]').first\n\n# Explode the INSERT entity\nif insert:\n    exploded_entities = insert.explode()\n    msp.add_entity(exploded_entities)\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenSCAD Path in INI\nDESCRIPTION: Configuration snippet showing the default path setting for OpenSCAD executable on Windows systems.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/addons/openscad.rst#2025-04-23_snippet_0\n\nLANGUAGE: INI\nCODE:\n```\n[openscad-addon]\nwin_exec_path = \"C:\\Program Files\\OpenSCAD\\openscad.exe\"\n```\n\n----------------------------------------\n\nTITLE: Using discard Method to Delete DXF Attributes in Python with ezdxf\nDESCRIPTION: This snippet shows how to use the 'discard' method to delete a DXF attribute. Unlike the 'del' operator, the 'discard' method doesn't raise an exception if the attribute doesn't exist or isn't supported.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tasks/delete_dxf_attributes.rst#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nline.dxf.discard('text')  # doesn't raise an exception\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on Manjaro for Raspberry Pi\nDESCRIPTION: Command to install build requirements and optional packages using pacman on Manjaro Linux.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/setup.rst#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nsudo pacman -S python-pip python-matplotlib python-pyqt5\n```\n\n----------------------------------------\n\nTITLE: Resetting XRecord Entity in Python\nDESCRIPTION: Method to reset an XRecord entity by removing all existing tags and replacing them with new ones. Preserves the entity handle.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfobjects/xrecord.rst#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndef reset(self, tags: Union[Dict, Iterable]) -> None:\n    \"\"\"Reset DXF tags, `tags` can be a dict or any iterable of (group code, value) tuples.\n\n    Group codes have to be in the valid range from 1 to 369 with the following exceptions:\n\n    - group code 5 (handle) is not allowed, handled by parent class\n    - group code 102 (extended data marker) is not allowed\n    - group code 105 (DIMSTYLE) is not allowed\n\n    Args:\n        tags: DXF tags as dict or iterable of (group code, value) tuples\n\n    \"\"\"\n    self.clear()\n    self.extend(tags)\n```\n\n----------------------------------------\n\nTITLE: Cloning ezdxf Repository from GitHub\nDESCRIPTION: Command to clone the ezdxf source code repository from GitHub for building from source.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/setup.rst#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/mozman/ezdxf.git\n```\n\n----------------------------------------\n\nTITLE: HPGL Command Line Usage and Options\nDESCRIPTION: Command line interface help text showing usage pattern and available options for processing HPGL/2 plot files. Includes options for file export, rotation, scaling, merge control, force mode, and color handling.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/launcher.rst#2025-04-23_snippet_14\n\nLANGUAGE: Text\nCODE:\n```\nC:\\> ezdxf hpgl -h\nusage: ezdxf hpgl [-h] [-e FORMAT] [-r {0,90,180,270}] [-x SX] [-y SY] [-m {0,1,2}]\n                      [-f] [--aci] [--map_black_to_white]\n                      [FILE]\n\npositional arguments:\n  FILE                  view and/or convert HPGL/2 plot files, wildcards (*, ?)\n                            supported in command line mode\n\noptions:\n  -h, --help            show this help message and exit\n  -e FORMAT, --export FORMAT\n                            convert HPGL/2 plot file to SVG, PDF or DXF from the\n                            command line (no gui)\n  -r {0,90,180,270}, --rotate {0,90,180,270}\n                            rotate page about 90, 180 or 270 degrees (no gui)\n  -x SX, --scale_x SX   scale page in x-axis direction, use negative values to\n                            mirror page, (no gui)\n  -y SY, --scale_y SY   scale page in y-axis direction, use negative values to\n                            mirror page (no gui)\n  -m {0,1,2}, --merge_control {0,1,2}\n                            provides control over the order of filled polygons, 0=off\n                            (print order), 1=luminance (order by luminance), 2=auto\n                            (default)\n  -f, --force           inserts the mandatory 'enter HPGL/2 mode' escape sequence\n                            into the data stream; use this flag when no HPGL/2 data was\n                            found and you are sure the file is a HPGL/2 plot file\n  --aci                 use pen numbers as ACI colors (DXF only)\n  --map_black_to_white  map black RGB plot colors to white RGB, does not affect ACI\n                            colors (DXF only)\n```\n\n----------------------------------------\n\nTITLE: Defining JoinStyle Enumeration in Python\nDESCRIPTION: Enumerates join styles for connected line segments in CAD drawings. Includes NONE, ROUND, ANGLE, and FLAT options.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/enums.rst#2025-04-23_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\nclass JoinStyle:\n    NONE\n    ROUND\n    ANGLE\n    FLAT\n```\n\n----------------------------------------\n\nTITLE: Declaring Python Package Dependencies for ezdxf\nDESCRIPTION: Specifies the required Python packages and minimum version constraints for the ezdxf library. Includes core dependencies like setuptools, pyparsing, typing_extensions, numpy, and fonttools for DXF file processing capabilities.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsetuptools\npyparsing>=2.0.1\ntyping_extensions>=4.6.0\nnumpy\nfonttools\n```\n\n----------------------------------------\n\nTITLE: Managing INSERT Entity Attributes\nDESCRIPTION: Methods for manipulating ATTRIB entities associated with INSERT entities (block references).\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/CHANGELOG.md#2025-04-23_snippet_20\n\nLANGUAGE: Python\nCODE:\n```\nInsert.delete_attrib(tag)  # delete ATTRIB entities from the INSERT entity\nInsert.delete_all_attribs()  # delete all ATTRIB entities from the INSERT entity\n```\n\n----------------------------------------\n\nTITLE: Exporting DXF Files for Gerber Technology Applications using ezdxf\nDESCRIPTION: Demonstrates how to create and export a DXF file compatible with Gerber Technology applications according to the ASTM-D6673-10 standard. The example shows creating a new R12 DXF document and exporting it with the gerber_D6673 module to ensure compatibility with Gerber's limited DXF parser.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/addons/gerber_D6673.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport ezdxf\nfrom ezdxf.addons import gerber_D6673\n\ndoc = ezdxf.new(\"R12\")  # the export function rejects other DXF versions\nmsp = doc.modelspace()\n\n# Create your content according the ASTM-D6673-10 standard\n# Do not use any linetypes or text styles, the TABLES section will not be exported.\n# The ASTM-D6673-10 standard supports only 7-bit ASCII characters.\n\ngerber_D6673.export_file(doc, \"gerber_file.dxf\")\n```\n\n----------------------------------------\n\nTITLE: Browse Command Config for xed on Linux Mint\nDESCRIPTION: Example configuration in INI format for the browse command to use xed as the text editor on Linux Mint.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/launcher.rst#2025-04-23_snippet_12\n\nLANGUAGE: ini\nCODE:\n```\n[browse-command]\n\ntext_editor = /usr/bin/xed \"{filename}\" +{num}\nicon_size = 32\n```\n\n----------------------------------------\n\nTITLE: Setting Entity Properties in AutoCAD (C++)\nDESCRIPTION: Demonstrates various methods for setting entity properties such as color, layer, linetype, and selection marker using AcGiSubEntityTraits in AutoCAD.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/Proxy Graphic Binary Chunk.md#2025-04-23_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\n<AcGiSubEntityTraits::setColor (const Adesk::UInt16 color)>\n```\n\nLANGUAGE: C++\nCODE:\n```\n<AcGiSubEntityTraits::setLayer (const AcDbObjectId layerId)>\n```\n\nLANGUAGE: C++\nCODE:\n```\n<AcGiSubEntityTraits::setLineType (const AcDbObjectId linetypeId)>\n```\n\nLANGUAGE: C++\nCODE:\n```\n<AcGiSubEntityTraits::setSelectionMarker (const Adesk::Int32 markerId)>\n```\n\nLANGUAGE: C++\nCODE:\n```\n<AcGiSubEntityTraits::setFillType (const AcGiFillType fill)>\n```\n\n----------------------------------------\n\nTITLE: Documenting average_intra_cluster_distance Function\nDESCRIPTION: References the average_intra_cluster_distance function for auto-documentation, which likely calculates the average distance between points within clusters.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/math/clustering.rst#2025-04-23_snippet_4\n\nLANGUAGE: rst\nCODE:\n```\n.. autofunction:: average_intra_cluster_distance\n```\n\n----------------------------------------\n\nTITLE: Python Environment Configuration Output\nDESCRIPTION: Shows the ezdxf version, Python environment details and extension usage information\nSOURCE: https://github.com/mozman/ezdxf/blob/master/profiling/stress-cadkit-cext-on.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nset ezdxf v0.16b0 @ d:\\source\\ezdxf.git\\src\\ezdxf\nPython version: 3.9.1 (tags/v3.9.1:1e5d33e, Dec  7 2020, 17:08:21) [MSC v.1927 64 bit (AMD64)]\nusing C-extensions: yes\nusing Matplotlib: yes\n```\n\n----------------------------------------\n\nTITLE: Using DXF Transformation Methods\nDESCRIPTION: New transformation interface methods added in v0.13 for manipulating DXF entities including translation, scaling, and rotation operations.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/CHANGELOG.md#2025-04-23_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nDXFGraphic.transform(m)\nDXFGraphic.translate(dx, dy, dz)\nDXFGraphic.scale(sx, sy, sz)\nDXFGraphic.scale_uniform(s)\nDXFGraphic.rotate_axis(axis, angle)\nDXFGraphic.rotate_x(angle)\nDXFGraphic.rotate_y(angle)\nDXFGraphic.rotate_z(angle)\n```\n\n----------------------------------------\n\nTITLE: Drawing XLine and Ray in AutoCAD (C++)\nDESCRIPTION: Shows how to draw an XLine (infinite line) and a Ray using AcGiGeometry in AutoCAD. Both methods require two points to define the line or ray.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/Proxy Graphic Binary Chunk.md#2025-04-23_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\n<AcGiGeometry::xline(const AcGePoint3d& oneXlinePoint, const AcGePoint3d&\naDifferentXlinePoint)>\n```\n\nLANGUAGE: C++\nCODE:\n```\n<AcGiGeometry::ray (const AcGePoint3d& raysStartingPoint, const AcGePoint3d&\naDifferentRayPoint)>\n```\n\n----------------------------------------\n\nTITLE: Deleting Layer Attribute from Selected Entities in Python\nDESCRIPTION: Demonstrates how to delete the layer attribute from all selected LINE entities, resetting it to the default value '0'.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/Release Notes v0.18.x.md#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ndel lines[\"layer\"]\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Font Cache using Python Script\nDESCRIPTION: Python script to rebuild the system font cache using ezdxf library. This should be run after installing new fonts to update the cache.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/font cache.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport ezdxf\nfrom ezdxf.fonts import fonts\n\nfonts.build_system_font_cache()\n```\n\n----------------------------------------\n\nTITLE: Parsing Dynamic Columns MTEXT Entity in DXF R2018\nDESCRIPTION: This snippet shows the structure of a dynamic columns MTEXT entity with manual height definition in DXF R2018 format. It includes additional attributes for column specifications.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/entities/mtext.rst#2025-04-23_snippet_13\n\nLANGUAGE: Text\nCODE:\n```\n0 <ctrl> MTEXT\n5 <hex> #9C                     <<< entity handle\n330 <hex> #1F\n100 <ctrl> AcDbEntity\n8 <str> 0                       <<< block record handle of owner layout\n100 <ctrl> AcDbMText\n10 <point> (69.806121185863, 276.101821192053, 0.0)     <<< insert location in WCS\n40 <float> 2.5                  <<< character height in drawing units\n41 <float> 62.694536423841      <<< reference column width, if not in column mode\n46 <float> 0.0                  <<< defined column height\n71 <int> 1                      <<< attachment point\n72 <int> 1                      <<< text flow direction\n3 <str> Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam...\n... <snip> text content of all three columns\n73 <int> 1                      <<< line spacing style\n44 <float> 1.0                  <<< line spacing factor\n101 <ctrl> Embedded Object\n70 <int> 1, b00000001           <<< ???\n10 <point> (1.0, 0.0, 0.0)      <<< text direction vector (local x-axis)\n11 <point> (69.806121185863, 276.101821192053, 0.0)     <<< repeated insert location\n40 <float> 62.694536423841      <<< repeated reference column width\n41 <float> 0.0                  <<< repeated defined column height\n42 <float> 175.0                <<< extents (total) width\n43 <float> 164.802450331126     <<< extents (total) height, max. height if different column heights\n71 <int> 2                      <<< column type: 2=dynamic columns\n72 <int> 3                      <<< column height count\n44 <float> 50.0                 <<< column width\n45 <float> 12.5                 <<< column gutter width\n73 <int> 0                      <<< flag column auto height\n74 <int> 0                      <<< flag reversed column flow\n46 <float> 164.802450331126     <<< column height 1. column\n46 <float> 154.311699779249     <<< column height 2. column\n46 <float> 0.0                  <<< column height 3. column, takes the rest?\n```\n\n----------------------------------------\n\nTITLE: Browse Command Help Output\nDESCRIPTION: Shows the help text for the ezdxf browse sub-command, displaying available options for browsing DXF file structures.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/launcher.rst#2025-04-23_snippet_10\n\nLANGUAGE: Text\nCODE:\n```\nC:\\> ezdxf browse -h\nusage: ezdxf browse [-h] [-l LINE] [-g HANDLE] [FILE]\n\npositional arguments:\n  FILE                  DXF file to browse\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -l LINE, --line LINE  go to line number\n  -g HANDLE, --handle HANDLE\n                        go to entity by HANDLE, HANDLE has to be a hex value without\n                        any prefix like 'fefe'\n```\n\n----------------------------------------\n\nTITLE: Alternative Method to Hide UCS Icons in DXF Viewports\nDESCRIPTION: Turns off UCS icons for all VPort entries in the active viewport configuration by iterating through each viewport and setting the ucs_icon attribute to 0.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/howto/document.rst#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfor vport in doc.viewports.get_config(\"*Active\"):\n    vport.dxf.ucs_icon = 0\n```\n\n----------------------------------------\n\nTITLE: Running Mypy Type Checking on the ezdxf Package\nDESCRIPTION: Command to check the entire ezdxf package with mypy from any location in the file system using the ignore-missing-imports flag.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/develop/index.rst#2025-04-23_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nPS D:\\Source\\ezdxf.git> mypy --ignore-missing-imports -p ezdxf\nSuccess: no issues found in 255 source files\n```\n\n----------------------------------------\n\nTITLE: Defining InsertUnits Enumeration in Python\nDESCRIPTION: Enumerates various units of measurement for inserting objects in CAD drawings. Includes a wide range of units from Unitless to Parsecs.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/enums.rst#2025-04-23_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nclass InsertUnits:\n    Unitless\n    Inches\n    Feet\n    Miles\n    Millimeters\n    Centimeters\n    Meters\n    Kilometers\n    Microinches\n    Mils\n    Yards\n    Angstroms\n    Nanometers\n    Microns\n    Decimeters\n    Decameters\n    Hectometers\n    Gigameters\n    AstronomicalUnits\n    Lightyears\n    Parsecs\n    USSurveyFeet\n    USSurveyInch\n    USSurveyYard\n    USSurveyMile\n```\n\n----------------------------------------\n\nTITLE: Setting Up Ubuntu Build Environment for ezdxf\nDESCRIPTION: Commands to create a build directory, setup virtual environment, and activate it on Ubuntu for building ezdxf.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/setup.rst#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncd ~\nmkdir build\ncd build\npython3 -m venv .venv\nsource .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Text Entity Placement Methods\nDESCRIPTION: Example of new text entity placement and alignment methods replacing deprecated ones.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nText.get_placement()  # replaces get_pos()\nText.set_placement()  # replaces set_pos()\nText.get_align_enum()  # replaces get_align()\nText.set_align_enum()  # replaces set_align()\n```\n\n----------------------------------------\n\nTITLE: Using ezdxf Launcher to Browse ACIS Content in DXF Files\nDESCRIPTION: Shows how to use the new 'browse-acis' command in the ezdxf launcher to analyze and potentially export the SAT or SAB content of ACIS entities within a DXF file.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/Release Notes v0.18.x.md#2025-04-23_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nC:\\> ezdxf browse-acis 3dsolid.dxf\n```\n\n----------------------------------------\n\nTITLE: Analyzing MULTILEADER MTEXT Scaling in DXF\nDESCRIPTION: Compares MULTILEADER entities with MTEXT content at scale 1.0 and 3.0. Shows how various attributes and properties are affected by scaling, including arrow head size, character height, and dogleg length.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/exploration/scaling_multileader.txt#2025-04-23_snippet_0\n\nLANGUAGE: DXF\nCODE:\n```\nDXF Attributes\n--------------\n\n'arrow_head_size': 4.0\n'block_scale_vector': Vec3(1.0, 1.0, 1.0)\n'dogleg_length': 8.0\n'scale': 1.0\n\nMLeaderContext\n--------------\n\nscale: 1.0\nbase_point: (90.996, 154.966, 0.0)\nchar_height: 4.0\narrow_head_size: 4.0\nlanding_gap_size: 2.0\n\nLeaderData\n----------\n\n1. leader line:\n  vertices: [Vec3(176.0, 129.0, 0.0)]\n\nlast_leader_point: (158.0, 154.966, 0.0)\ndogleg_vector: (-1.0, 0.0, 0.0)\ndogleg_length: 8.0\n\nMTextData\n---------\n\ninsert: (148.0, 157.0, 0.0)\nwidth: 20.5\ndefined_height: 0.0\n```\n\nLANGUAGE: DXF\nCODE:\n```\nDXF Attributes\n--------------\n\n'arrow_head_size': 4.0,                     not scaled\n'block_scale_vector': Vec3(1.0, 1.0, 1.0),  not scaled\n'dogleg_length': 24.0,                      scaled\n'scale': 3.0,\n\nMLeaderContext\n--------------\n\nscale: 3.0\nbase_point: (-43.012, 154.966, 0.0)         insert point in WCS\nchar_height: 12.0                           scaled\narrow_head_size: 12.0                       scaled\nlanding_gap_size: 6.0                       scaled\n\nLeaderData\n----------\n\n1. leader line:\n  vertices: [Vec3(176.0, 129.0, 0.0)]       pointing to, in WCS\n\nlast_leader_point: (158.0, 154.966, 0.0)    geometry not changed\ndogleg_vector: (-1.0, 0.0, 0.0)\ndogleg_length: 24.0                         scaled\n\nMTextData\n---------\n\ninsert: (128.0, 161.068, 0.0)               insert point in WCS\nwidth: 20.5                                 not scaled (error in BricsCAD?)\ndefined_height: 0.0\n```\n\n----------------------------------------\n\nTITLE: Application-Defined Codes Format in DXF (Variant 2)\nDESCRIPTION: Shows the second format variant for application-defined codes in DXF, where the closing tag includes the application ID as part of the value rather than using a brace.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/dxftags.rst#2025-04-23_snippet_4\n\nLANGUAGE: none\nCODE:\n```\n102\n{YOURAPPID\n...\n102\nYOURAPPID}\n```\n\n----------------------------------------\n\nTITLE: RST Table of Contents Structure\nDESCRIPTION: ReStructuredText markup defining the documentation structure and table of contents for DXF internals documentation, organized into sections for basic structures, DXF structures, management structures and miscellaneous content.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n\n    fileencoding\n    dxftags\n    handles\n    filestructure\n    datamodel\n```\n\n----------------------------------------\n\nTITLE: Retrieving Custom Document Properties (AutoLISP)\nDESCRIPTION: AutoLISP script for retrieving custom document properties from a DXF file in CAD applications.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/custom_data.rst#2025-04-23_snippet_5\n\nLANGUAGE: AutoLISP\nCODE:\n```\n(defun C:CUSTOMDOCPROPS (/ Info Num Index Custom)\n  (vl-load-com)\n  (setq acadObject (vlax-get-acad-object))\n  (setq acadDocument (vla-get-ActiveDocument acadObject))\n\n  ;;Get the SummaryInfo\n  (setq Info (vlax-get-Property acadDocument 'SummaryInfo))\n  (setq Num (vla-NumCustomInfo Info))\n  (setq Index 0)\n  (repeat Num\n    (vla-getCustomByIndex Info Index 'ID 'Value)\n    (setq Custom (cons (cons ID Value) Custom))\n    (setq Index (1+ Index))\n  )  ;repeat\n\n  (if Custom (reverse Custom))\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Path Objects from Entities in Python\nDESCRIPTION: Shows how to convert linear entities to Path objects for easier manipulation in WCS coordinates.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/Why are ARC coordinates wrong%3F.md#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfrom ezdxf import path\n\np = path.make_path(arc)\n```\n\n----------------------------------------\n\nTITLE: Resetting Modelspace View to WCS in VPort\nDESCRIPTION: Method for resetting the viewport view to World Coordinate System (WCS). This is inferred from the automethod directive in the documentation, though the actual implementation is not shown.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tables/vport_table_entry.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ndef reset_wcs(self):\n    # Implementation not shown in the documentation\n    pass\n```\n\n----------------------------------------\n\nTITLE: Using the Audit Command to Check and Repair DXF Files\nDESCRIPTION: Example of using the ezdxf audit sub-command to check a DXF file for errors and save a recovered version.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/launcher.rst#2025-04-23_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\nC:\\> ezdxf audit -s gear.dxf\n\nauditing file: gear.dxf\nNo errors found.\nSaved recovered file as: gear.rec.dxf\n```\n\n----------------------------------------\n\nTITLE: Rotated and Translated INSERT\nDESCRIPTION: INSERT entity translated and rotated 30 degrees, demonstrating clipping path behavior under rotation.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/Exploring the transformation behavior of SPATIAL_FILTER.md#2025-04-23_snippet_2\n\nLANGUAGE: dxf\nCODE:\n```\nINSERT(#CB)\n  insert location: (27.218911086754, 3.718911086754, 0.0)\n  rotation: 30.0\n  scale-x: 1\n  scale-y: 1\n  scale-z: 1\n  SPATIAL_FILTER(#CE)\n  clipping-path: (Vec2(5.0, 5.0), Vec2(12.0, 5.0), Vec2(8.5, 12.0))\n```\n\n----------------------------------------\n\nTITLE: Defining BODY Entity Module Structure in Python\nDESCRIPTION: Module definition for ezdxf.entities that implements the BODY entity class. The class inherits from DXFGraphic and includes attributes for version control, flags, and ACIS data handling.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfentities/body.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. module:: ezdxf.entities\n    :noindex:\n```\n\n----------------------------------------\n\nTITLE: Text Height Specification in MTEXT Format Code\nDESCRIPTION: This snippet demonstrates how to set text height using the \\H format code in MTEXT.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/MText format codes.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n\\H3x\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n\\H2.500\n```\n\n----------------------------------------\n\nTITLE: Setting Table Header Content\nDESCRIPTION: Populates the table header row (row 0) with text cells using the previously defined 'head' style.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/addons/tablepainter.rst#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfor col in range(4):\n    table.text_cell(0, col, f\"Head[{col}]\", style=\"head\")\n```\n\n----------------------------------------\n\nTITLE: Installing Matplotlib for Text Boundary Support - Python\nDESCRIPTION: Command line instruction for installing Matplotlib package to improve text boundary calculations for TEXT, ATTRIB and ATTDEF entities.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/disassemble.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nC:\\> pip3 install matplotlib\n```\n\n----------------------------------------\n\nTITLE: JSON Compact DXF Tag Format\nDESCRIPTION: Compact JSON representation of DXF tags where each tag is a [group-code, value] pair with optimized vertex representation.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/drawing/management.rst#2025-04-23_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n[\n[0, \"SECTION\"],\n[2, \"HEADER\"],\n[9, \"$ACADVER\"],\n[1, \"AC1027\"],\n...\n[9, \"$LIMMIN\"],\n[10, [0.0,0.0]],\n[9, \"$LIMMAX\"],\n[10, [420.0,297.0]],\n[9, \"$ORTHOMODE\"],\n[70, 0],\n[9, \"$REGENMODE\"],\n[70, 1]\n...\n[0, \"EOF\"]\n]\n```\n\n----------------------------------------\n\nTITLE: Installing Build Requirements on Ubuntu Server for Raspberry Pi\nDESCRIPTION: Command to install essential build tools and Python environment packages on Ubuntu Server for Raspberry Pi.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/setup.rst#2025-04-23_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install build-essential python3-pip python3.9-venv\n```\n\n----------------------------------------\n\nTITLE: Examining VPORT Table Structure in DXF R2000+ Format\nDESCRIPTION: This code block shows the enhanced structure of a VPORT table in DXF R2000+ format, which includes handles, owner tags, and subclass markers in addition to the viewport parameters found in R12. It demonstrates the additional features like UCS settings and extended data.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/tables/vport_table.rst#2025-04-23_snippet_1\n\nLANGUAGE: none\nCODE:\n```\n0       <<< table start\nTABLE\n2       <<< table type\nVPORT\n5       <<< table handle\n151F\n330     <<< owner, table has no owner - always #0\n0\n100     <<< subclass marker\nAcDbSymbolTable\n70      <<< VPORT table (max.) count, not reliable (ignore)\n3\n0       <<< first VPORT entry\nVPORT\n5       <<< entry handle\n158B\n330     <<< owner, VPORT table is owner of VPORT entry\n151F\n100     <<< subclass marker\nAcDbSymbolTableRecord\n100     <<< subclass marker\nAcDbViewportTableRecord\n2       <<< VPORT (configuration) name\n*ACTIVE\n70      <<< standard flags, bit-coded\n0\n10      <<< lower-left corner of viewport\n0.45    <<<     x value, virtual coordinates in range [0 - 1]\n20      <<<     group code for y value\n0.0     <<<     y value, virtual coordinates in range [0 - 1]\n11      <<< upper-right corner of viewport\n1.0     <<<     x value, virtual coordinates in range [0 - 1]\n21      <<<     group code for y value\n1.0     <<<     y value, virtual coordinates in range [0 - 1]\n12      <<< view center point (in DCS)\n13.71   <<<     x value\n22      <<<     group code for y value\n0.38    <<<     y value\n13      <<< snap base point (in DCS)\n0.0     <<<     x value\n23      <<<     group code for y value\n0.0     <<<     y value\n14      <<< snap spacing X and Y\n1.0     <<<     x value\n24      <<<     group code for y value\n1.0     <<<     y value\n15      <<< grid spacing X and Y\n0.0     <<<     x value\n25      <<<     group code for y value\n0.0     <<<     y value\n16      <<< view direction from target point (in WCS)\n1.0     <<<     x value\n26      <<<     group code for y value\n-1.0    <<<     y value\n36      <<<     group code for z value\n1.0     <<<     z value\n17      <<< view target point (in WCS)\n0.0     <<<     x value\n27      <<<     group code for y value\n0.0     <<<     y value\n37      <<<     group code for z value\n0.0     <<<     z value\n40      <<< view height\n35.22\n41      <<< viewport aspect ratio\n0.99\n42      <<< lens (focal) length\n50.0    <<< 50mm\n43      <<< front clipping planes, offsets from target point\n0.0\n44      <<< back clipping planes, offsets from target point\n0.0\n50      <<< snap rotation angle\n0.0\n51      <<< view twist angle\n0.0\n71      <<< view mode\n0\n72      <<< circle zoom percent\n1000\n73      <<< fast zoom setting\n1\n74      <<< UCSICON setting\n3\n75      <<< snap on/off\n0\n76      <<< grid on/off\n0\n77      <<< snap style\n0\n78      <<< snap isopair\n0\n281     <<< render mode 1-6 (... too many options)\n0       <<< 0 = 2D optimized (classic 2D)\n65      <<< Value of UCSVP for this viewport. (0 = UCS will not change when this viewport is activated)\n1       <<< 1 = then viewport stores its own UCS which will become the current UCS whenever the viewport is activated.\n110     <<< UCS origin (3D point)\n0.0     <<<     x value\n120     <<<     group code for y value\n0.0     <<<     y value\n130     <<<     group code for z value\n0.0     <<<     z value\n111     <<< UCS X-axis (3D vector)\n1.0     <<<     x value\n121     <<<     group code for y value\n0.0     <<<     y value\n131     <<<     group code for z value\n0.0     <<<     z value\n112     <<< UCS Y-axis (3D vector)\n0.0     <<<     x value\n122     <<<     group code for y value\n1.0     <<<     y value\n132     <<<     group code for z value\n0.0     <<<     z value\n79      <<< Orthographic type of UCS 0-6 (... too many options)\n0       <<< 0 = UCS is not orthographic\n146     <<< elevation\n0.0\n1001    <<< extended data - undocumented\nACAD_NAV_VCDISPLAY\n1070\n3\n0       <<< next VPORT entry\nVPORT\n5\n158C\n330\n151F\n100\nAcDbSymbolTableRecord\n100\nAcDbViewportTableRecord\n2       <<< VPORT (configuration) name\n*ACTIVE <<< same as first VPORT entry\n70\n0\n10\n0.0\n20\n0.5\n11\n0.45\n21\n1.0\n12\n8.21\n22\n9.72\n...\n...\n0       <<< next VPORT entry\nVPORT\n5\n158D\n330\n151F\n100\nAcDbSymbolTableRecord\n100\nAcDbViewportTableRecord\n2       <<< VPORT (configuration) name\n*ACTIVE <<< same as first VPORT entry\n70\n0\n10\n0.0\n20\n0.0\n11\n0.45\n21\n0.5\n12\n2.01\n22\n-8.97\n...\n...\n0\nENDTAB\n```\n\n----------------------------------------\n\nTITLE: Handling Collinear Shapes with offset_vertices_2d in Python\nDESCRIPTION: Example demonstrating the offset_vertices_2d function applied to a collinear shape (vertical line). This case creates two additional vertices with unexpected placement of the first vertex.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/math/core.rst#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nsource = [(0, 0), (0, 1), (0, 2), (0, 3)]\nresult = list(offset_vertices_2d(source, offset=0.5, closed=True))\n```\n\n----------------------------------------\n\nTITLE: MLEADERSTYLE Properties with Scale 3.0\nDESCRIPTION: MLEADERSTYLE property values when scale is set to 3.0, demonstrating that only the scale value changes while other parameters remain constant.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/exploration/scaling_mleaderstyle.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n'align_space': 4.0,\n'arrow_head_size': 4.0,\n'block_scale_x': 1.0,\n'block_scale_y': 1.0,\n'block_scale_z': 1.0,\n'break_gap_size': 3.75,\n'char_height': 4.0,\n'dogleg_length': 8.0,\n'landing_gap': 2.0,\n'scale': 3.0\n```\n\n----------------------------------------\n\nTITLE: Mypy Configuration for Type Checking\nDESCRIPTION: Required global options for mypy configuration to pass type checking without error messages. Sets Python version to 3.7 and ignores missing imports.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/develop/index.rst#2025-04-23_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[mypy]\npython_version = 3.7\nignore_missing_imports = True\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Table of Contents Configuration\nDESCRIPTION: ReStructuredText directive configuring a table of contents tree with maximum depth of 1 level.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/objects/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n```\n\n----------------------------------------\n\nTITLE: DimStyle Text Vertical Justification Constants\nDESCRIPTION: Constants defining vertical justification options for dimension tolerance text alignment.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tables/dimstyle_table_entry.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n=== ====================================================\n0   Align with bottom line of dimension text\n1   Align vertical centered to dimension text\n2   Align with top line of dimension text\n=== ====================================================\n```\n\n----------------------------------------\n\nTITLE: Example MTEXT Format Code in AutoCAD DXF\nDESCRIPTION: This snippet demonstrates a complex MTEXT format code string, including font specification, text height, and superscript formatting.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/MText format codes.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\\A1;\\fAIGDT|b0|i0;\\H2.5000;\\ln\\fArial|b0|i0;\\H2.5000;68{\\H1.3;\\S+0,8^+0,1;}\n```\n\n----------------------------------------\n\nTITLE: Manipulating Layout Block Properties\nDESCRIPTION: Methods for working with layout blocks, including checking if a block is a layout block and manipulating paper space layouts.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/CHANGELOG.md#2025-04-23_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nBlockLayout.is_layout_block  # True if block is a model space or paper space block\nDrawing.layouts.rename(old_name, new_name)  # rename paper space layouts\n```\n\n----------------------------------------\n\nTITLE: Displaying Available Output Formats for Draw Command\nDESCRIPTION: Shows how to list all supported output formats for the ezdxf draw command using the Matplotlib backend.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/launcher.rst#2025-04-23_snippet_5\n\nLANGUAGE: Text\nCODE:\n```\nC:\\> ezdxf draw --formats\neps: Encapsulated Postscript\njpg: Joint Photographic Experts Group\njpeg: Joint Photographic Experts Group\npdf: Portable Document Format\npgf: PGF code for LaTeX\npng: Portable Network Graphics\nps: Postscript\nraw: Raw RGBA bitmap\nrgba: Raw RGBA bitmap\nsvg: Scalable Vector Graphics\nsvgz: Scalable Vector Graphics\ntif: Tagged Image File Format\ntiff: Tagged Image File Format\n```\n\n----------------------------------------\n\nTITLE: Working with LWPolyline Vertices\nDESCRIPTION: Methods for accessing LWPolyline vertices in different coordinate systems, yielding points as tuples.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/CHANGELOG.md#2025-04-23_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\nLWPolyline.vertices()  # yields all points as (x, y) tuples in OCS\nLWPolyline.vertices_in_wcs()  # yields all points as (x, y, z) tuples in WCS\n```\n\n----------------------------------------\n\nTITLE: Rendering MTextSurrogate in Python for DXF R12\nDESCRIPTION: This method renders the MTextSurrogate object. It is part of the MTextSurrogate class in the ezdxf.addons module, used for handling multi-line text in DXF R12 format.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/addons/mtextsurrogate.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automethod:: render\n```\n\n----------------------------------------\n\nTITLE: Creating a Markdown Link to ezdxf Configuration Documentation\nDESCRIPTION: This snippet demonstrates how to create a Markdown link to the ezdxf configuration file documentation. It uses double square brackets for internal linking and angle brackets for external URL linking.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/config files.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n[[ezdxf]] config files <https://ezdxf.mozman.at/docs/options.html#config-files>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating XDATA Structure for DIMSTYLE Linetype Settings in DXF\nDESCRIPTION: This code snippet shows the structure of XDATA section that defines linetype settings for dimension lines and extension lines prior to DXF R2007. The XDATA groups store handles to LTYPE entries with specific group codes that differ from later R2007 implementations.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/tables/dimstyle_table.rst#2025-04-23_snippet_2\n\nLANGUAGE: none\nCODE:\n```\n1001\nACAD_DSTYLE_DIM_LINETYPE        <<< linetype for dimension line\n1070\n380                             <<< group code, which differs from R2007 DIMDLTYPE\n1005\nFFFF                            <<< handle to LTYPE entry\n1001\nACAD_DSTYLE_DIM_EXT1_LINETYPE   <<< linetype for extension line 1\n1070\n381                             <<< group code, which differs from R2007 DIMLTEX1\n1005\nFFFF                            <<< handle to LTYPE entry\n1001\nACAD_DSTYLE_DIM_EXT2_LINETYPE   <<< linetype for extension line 1\n1070\n382                             <<< group code, which differs from R2007 DIMLTEX2\n1005\nFFFF                            <<< handle to LTYPE entry\n1001\n```\n\n----------------------------------------\n\nTITLE: Checking HPGL/2 Output with HPGL Viewer\nDESCRIPTION: Command-line example showing how to check the HPGL/2 output using the HPGL viewer.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/addons/drawing.rst#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nezdxf hpgl your.plt\n```\n\n----------------------------------------\n\nTITLE: Importing GeoData Module in Python\nDESCRIPTION: This snippet shows how to import the GeoData entity from the ezdxf.entities module. It's a key step for working with geographic data in DXF files using the ezdxf library.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfobjects/geodata.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. module:: ezdxf.entities\n    :noindex:\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on Raspberry Pi OS\nDESCRIPTION: Command to install required packages including Matplotlib and PyQt5 bindings from the Raspberry Pi OS repository.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/setup.rst#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install python3-pip python3-matplotlib python3-pyqt5\n```\n\n----------------------------------------\n\nTITLE: Lenient Decoding Error Handling\nDESCRIPTION: Demonstrates how to ignore decoding errors while loading DXF files and detect their locations.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/drawing/recover.rst#2025-04-23_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\ntry:\n    doc, auditor = recover.readfile(name, errors='ignore')\nexcept IOError:\n    print(f'Not a DXF file or a generic I/O error.')\n    sys.exit(1)\nexcept ezdxf.DXFStructureError:\n    print(f'Invalid or corrupted DXF file: {name}.')\n    sys.exit(2)\nif auditor.has_errors:\n    auditor.print_report()\n```\n\n----------------------------------------\n\nTITLE: Defining EdgePath Class in Python\nDESCRIPTION: This snippet defines the EdgePath class, which represents an edge-based boundary path for a hatch. It includes methods for adding different types of edges and managing path properties.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfentities/hatch.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass EdgePath:\n    def __init__(self):\n        self.type = BoundaryPathType.EDGE\n        self.path_type_flags = 0\n        self.edges = []\n        self.source_boundary_objects = []\n\n    def clear(self):\n        # Implement clearing of edges\n        pass\n\n    def add_line(self, start, end):\n        # Implement line edge addition\n        pass\n\n    def add_arc(self, center, radius, start_angle, end_angle, ccw=True):\n        # Implement arc edge addition\n        pass\n\n    def add_ellipse(self, center, major_axis, ratio, start_angle, end_angle, ccw=True):\n        # Implement ellipse edge addition\n        pass\n\n    def add_spline(self, fit_points=None, control_points=None, knot_values=None, weights=None, degree=3, periodic=False, start_tangent=None, end_tangent=None):\n        # Implement spline edge addition\n        pass\n```\n\n----------------------------------------\n\nTITLE: DXF Table Attributes\nDESCRIPTION: Mapping of DXF tables to their corresponding Drawing object attributes for resource entities\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/develop/pkg-design.rst#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nTable        Attribute\n============ ==========================\nAPPID        Drawing.appids\nBLOCK_RECORD Drawing.block_records\nDIMSTYLE     Drawing.dimstyles\nLAYER        Drawing.layers\nLTYPE        Drawing.linetypes\nSTYLE        Drawing.styles\nUCS          Drawing.ucs\nVIEW         Drawing.views\nVPORT        Drawing.viewports\n```\n\n----------------------------------------\n\nTITLE: Formatting Python Code with Black\nDESCRIPTION: Command to reformat Python code using the Black formatter with the default setting of 88 characters per line.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/develop/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nC:\\> black <python-file>\n```\n\n----------------------------------------\n\nTITLE: Validating Symbol Table Names with snvalid() in AutoLISP for AutoCAD\nDESCRIPTION: The snvalid() function in AutoLISP checks symbol table names for valid characters. It is used for validating names of layers, linetypes, styles, and other symbol tables in AutoCAD. The function ensures that disallowed characters are not present in the names.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/Valid Symbol Names.md#2025-04-23_snippet_0\n\nLANGUAGE: AutoLISP\nCODE:\n```\n(snvalid)\n```\n\n----------------------------------------\n\nTITLE: Embedded Object Example in DXF R2018\nDESCRIPTION: Provides a real-world example of an embedded object in an AutoCAD 2018 DXF file. Shows the encapsulating MTEXT object followed by an embedded object beginning with group code 101.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/dxftags.rst#2025-04-23_snippet_5\n\nLANGUAGE: none\nCODE:\n```\n100       <<< start of encapsulating object\nAcDbMText\n10\n2762.148\n20\n2327.073\n30\n0.0\n40\n2.5\n41\n18.852\n46\n0.0\n71\n1\n72\n5\n1\n{\\fArial|b0|i0|c162|p34;CHANGE;\\P\\P\\PTEXT}\n73\n1\n44\n1.0\n101       <<< start of embedded object\nEmbedded Object\n70\n1\n10\n1.0\n20\n0.0\n30\n0.0\n11\n2762.148\n21\n2327.073\n31\n0.0\n40\n18.852\n41\n0.0\n42\n15.428\n43\n15.043\n71\n2\n72\n1\n44\n18.852\n45\n12.5\n73\n0\n74\n0\n46\n0.0\n```\n\n----------------------------------------\n\nTITLE: Line Segment Intersection Calculation\nDESCRIPTION: Mathematical formulas for finding the intersection point of two 2D line segments AB and CD. Includes conditions for parallel, collinear and non-intersecting segments. Uses parametric equations and vector algebra.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/src/ezdxf/math/algorithms.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nAB=A+r(B-A), r in [0,1]\nCD=C+s(D-C), s in [0,1]\n```\n\n----------------------------------------\n\nTITLE: Defining MLineStyle Class in Python for ezdxf\nDESCRIPTION: This snippet defines the MLineStyle class, which stores style properties for the MLINE entity. It includes various DXF attributes and a method for updating.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfentities/mline.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass MLineStyle:\n    elements = None\n\n    def update_all(self):\n        pass\n```\n\n----------------------------------------\n\nTITLE: Verifying ezdxf Installation\nDESCRIPTION: Command to check if the ezdxf installation was successful by displaying version and configuration information.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/setup.rst#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m ezdxf -V\n```\n\n----------------------------------------\n\nTITLE: Using Custom Filter Functions for Entity Selection in Python\nDESCRIPTION: Demonstrates how to use custom filter functions to create entity selections.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/Release Notes v0.18.x.md#2025-04-23_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nlines.filter(lambda e: ...)\n```\n\n----------------------------------------\n\nTITLE: Referencing Frontend Class in Python\nDESCRIPTION: This code demonstrates how to reference the Frontend class from the ezdxf.addons.drawing.frontend module. The Frontend class issues drawing commands that can be recorded by the Recorder.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/image_export.rst#2025-04-23_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nfrom ezdxf.addons.drawing.frontend import Frontend\n```\n\n----------------------------------------\n\nTITLE: RST Table of Contents for DXF Tables Documentation\nDESCRIPTION: ReStructuredText markup defining a table of contents for DXF table documentation files. Sets maximum depth to 1 and lists all table-related documentation pages.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tables/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   tables\n   layer_table_entry\n   style_table_entry\n   linetype_table_entry\n   dimstyle_table_entry\n   vport_table_entry\n   view_table_entry\n   appid_table_entry\n   ucs_table_entry\n   blockrecord_table_entry\n```\n\n----------------------------------------\n\nTITLE: Creating Radius Dimension with Text Inside Circle\nDESCRIPTION: Example showing how to create a radius dimension with text placed inside the circle using the EZ_RADIUS_INSIDE style. This style forces the dimension text to be displayed inside the circle.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/radius_dimension.rst#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ndim = msp.add_radius_dim(\n    center=(0, 0),\n    radius=2.5,\n    angle=45,\n    dimstyle=\"EZ_RADIUS_INSIDE\"\n)\n```\n\n----------------------------------------\n\nTITLE: DXF Section Structure Table\nDESCRIPTION: Mapping of DXF sections to their corresponding Drawing object attributes\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/develop/pkg-design.rst#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nSection  Attribute\n======== ==========================\nHEADER   Drawing.header\nCLASSES  Drawing.classes\nTABLES   Drawing.tables\nBLOCKS   Drawing.blocks\nENTITIES Drawing.entities\nOBJECTS  Drawing.objects\n```\n\n----------------------------------------\n\nTITLE: Strict Decoding Error Handling\nDESCRIPTION: Shows how to handle DXF files with potential binary data by using strict decoding error checking.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/drawing/recover.rst#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\ntry:\n    doc, auditor = recover.readfile(name, errors='strict')\nexcept IOError:\n    print(f'Not a DXF file or a generic I/O error.')\n    sys.exit(1)\nexcept ezdxf.DXFStructureError:\n    print(f'Invalid or corrupted DXF file: {name}.')\n    sys.exit(2)\nexcept UnicodeDecodeError:\n    print(f'Decoding error in DXF file: {name}.')\n    sys.exit(3)\n```\n\n----------------------------------------\n\nTITLE: Defining AppData Class in Python\nDESCRIPTION: Definition of the AppData class that manages application-defined data in DXF entities. The class includes methods for containing, length checking, adding, getting, setting, and discarding AppData. This implementation is part of the ezdxf.entities.appdata module.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/develop/appdata.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass AppData:\n    \"\"\"Internal management class for Application defined data.\n\n    .. seealso::\n\n        - User reference: :ref:`application_defined_data`\n        - Internals about :ref:`app_data_internals` tags\n    \"\"\"\n\n    def __contains__(self)\n    def __len__(self)\n    def add(self)\n    def get(self)\n    def set(self)\n    def discard(self)\n```\n\n----------------------------------------\n\nTITLE: Defining Helix Class Attributes in Python\nDESCRIPTION: This snippet defines the attributes of the Helix class, which represents a HELIX entity in the ezdxf library. It includes properties such as axis base point, start point, axis vector, radius, turn height, turns, handedness, and constrain.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfentities/helix.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Helix:\n    def __init__(self):\n        self.dxf.axis_base_point = None  # Vec3\n        self.dxf.start_point = None  # Vec3\n        self.dxf.axis_vector = None  # Vec3\n        self.dxf.radius = None  # float\n        self.dxf.turn_height = None  # float\n        self.dxf.turns = None  # float\n        self.dxf.handedness = None  # int\n        self.dxf.constrain = None  # int\n```\n\n----------------------------------------\n\nTITLE: Defining ReStructuredText Table of Contents for DXF Sections\nDESCRIPTION: Creates a table of contents tree for DXF section documentation using ReStructuredText directives. Lists the major sections of a DXF file as child pages with maxdepth of 1.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/sections/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n\n    header_section\n    classes_section\n    tables_section\n    blocks_section\n    entities_section\n    objects_section\n```\n\n----------------------------------------\n\nTITLE: Installing Sphinx Read the Docs Theme in Python\nDESCRIPTION: Command to install the Sphinx theme provided by Read the Docs, which is used for the project documentation.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/develop/doc_formatting_guide.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install sphinx-rtd-theme\n```\n\n----------------------------------------\n\nTITLE: OpenSCAD Boolean Operations Example in Python\nDESCRIPTION: Demonstrates using OpenSCAD to perform boolean subtraction between a Menger sponge and a sphere, then exports the result as a MESH entity in a DXF file. Shows integration between ezdxf's mesh building capabilities and OpenSCAD's boolean operations.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/Release Notes v0.18.x.md#2025-04-23_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nimport ezdxf\nfrom ezdxf.render import forms\nfrom ezdxf.addons import MengerSponge, openscad\n\ndoc = ezdxf.new()\nmsp = doc.modelspace()\n\nsponge = MengerSponge(level=3).mesh()\nsponge.flip_normals()  # important for OpenSCAD\nsphere = forms.sphere(\ncount=32, stacks=16, radius=0.5, quads=True\n).translate(0.25, 0.25, 1)\nsphere.flip_normals()  # important for OpenSCAD\n\nscript = openscad.boolean_operation(openscad.DIFFERENCE, sponge, sphere)\nresult = openscad.run(script)\nresult.render_mesh(msp)\n\ndoc.set_modelspace_vport(6, center=(5, 0))\ndoc.saveas(\"OpenSCAD.dxf\")\n```\n\n----------------------------------------\n\nTITLE: DXF Linetype Override XRECORD Structure\nDESCRIPTION: Shows the structure of an XRECORD entity that stores linetype override information for specific viewports. The record contains a reference to the VIEWPORT entity and a handle to the LINETYPE table entry to use as an override.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/tables/layer_table.rst#2025-04-23_snippet_6\n\nLANGUAGE: none\nCODE:\n```\n0\nXRECORD\n...         <<< like transparency XRECORD\n102         <<< for each overridden VIEWPORT one entry\n{ADSK_LYR_LINETYPE_OVERRIDE\n335         <<< handle to VIEWPORT\nAC\n343         <<< linetype override\nDC          <<< handle to LINETYPE table entry\n102\n}\n```\n\n----------------------------------------\n\nTITLE: Working with DXF Unicode Encoding in Python\nDESCRIPTION: The file introduces two support functions for working with DXF Unicode encoding: ezdxf.has_dxf_unicode for detecting encoded characters and ezdxf.decode_dxf_unicode for decoding them. These functions allow manual handling of the special \\U+xxxx format used in DXF files.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/low_level_tools/dxf_unicode_decoder.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nezdxf.has_dxf_unicode\nezdxf.decode_dxf_unicode\n```\n\n----------------------------------------\n\nTITLE: Declaring BODY Class Structure\nDESCRIPTION: Class declaration showing the structure of the Body class with its attributes and properties including version, flags, uid, and ACIS data handling methods.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfentities/body.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n.. class:: Body\n\n    .. attribute:: dxf.version\n\n        Modeler format version number, default value is 1\n\n    .. attribute:: dxf.flags\n\n        Require DXF R2013.\n\n    .. attribute:: dxf.uid\n\n        Require DXF R2013.\n```\n\n----------------------------------------\n\nTITLE: Installing Build Requirements for Windows\nDESCRIPTION: Commands to install the necessary packages for building and installing ezdxf with C-extensions on Windows.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/setup.rst#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npip3 install setuptools wheel cython\n```\n\n----------------------------------------\n\nTITLE: Creating Build Directory for Python Compilation\nDESCRIPTION: Commands to create and navigate to a build directory in the home folder for downloading and compiling Python from source.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/setup.rst#2025-04-23_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\ncd ~\nmkdir build\ncd build\n```\n\n----------------------------------------\n\nTITLE: Transferring DXF Entities to New Document\nDESCRIPTION: Shows how to transfer simple entities from a source DXF file to a new document using add_foreign_entity method. Works for supported entity types except those with strong dependencies to the original document.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/addons/iterdxf.rst#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nnewdoc = ezdxf.new()\nmsp = newdoc.modelspace()\n# line is an entity from a big source file\nmsp.add_foreign_entity(line)\n# and so on ...\nmsp.add_foreign_entity(lwpolyline)\nmsp.add_foreign_entity(mesh)\nmsp.add_foreign_entity(polyface)\n```\n\n----------------------------------------\n\nTITLE: Managing Blocks in a Drawing\nDESCRIPTION: Methods for deleting blocks in a Drawing object with safety checks to prevent deleting blocks that are still referenced.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/CHANGELOG.md#2025-04-23_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\nDrawing.blocks.delete_block(name, safe=True)  # new parameter safe checks if block is still referenced\nDrawing.blocks.delete_all_blocks(safe=True)  # if safe is True, don't delete referenced blocks\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents in reStructuredText for ezdxf Basic Concepts\nDESCRIPTION: This snippet defines a table of contents (toctree) in reStructuredText format for the Basic Concepts section of the ezdxf documentation. It lists various topics related to DXF and CAD concepts that are covered in this section.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/concepts/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n\n    dxf\n    entities\n    aci\n    true_color\n    transparency\n    layers\n    linetypes\n    lineweights\n    coordinates\n    ocs\n    units\n    modelspace\n    paperspace\n    blocks\n    extents_limits\n    fonts\n```\n\n----------------------------------------\n\nTITLE: Linetype Class Module Declaration\nDESCRIPTION: Module declaration for ezdxf.entities containing the Linetype class definition. The class inherits from DXFEntity and represents a linetype table entry.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tables/linetype_table_entry.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. module:: ezdxf.entities\n    :noindex:\n```\n\n----------------------------------------\n\nTITLE: Defining LeaderData Class in Python\nDESCRIPTION: This snippet defines the LeaderData class, which represents data for a leader line in a MultiLeader entity. It includes attributes for the leader lines and their properties.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfentities/mleader.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass LeaderData:\n    def lines(self):\n        # list of LeaderLine\n        pass\n\n    def has_last_leader_line(self):\n        # unknown meaning\n        pass\n```\n\n----------------------------------------\n\nTITLE: JSON Verbose DXF Tag Format\nDESCRIPTION: Verbose JSON representation of DXF tags with 1:1 mapping of DXF tags where all values are stored as strings.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/drawing/management.rst#2025-04-23_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n[\n[0, \"SECTION\"],\n[2, \"HEADER\"],\n[9, \"$ACADVER\"],\n[1, \"AC1027\"],\n...\n[9, \"$LIMMIN\"],\n[10, \"0.0\"],\n[20, \"0.0\"],\n[9, \"$LIMMAX\"],\n[10, \"420.0\"],\n[20, \"297.0\"],\n[9, \"$ORTHOMODE\"],\n[70, \"0\"],\n[9, \"$REGENMODE\"],\n[70, \"1\"],\n...\n[0, \"EOF\"]\n]\n```\n\n----------------------------------------\n\nTITLE: DXF Group Codes for Clip Boundary Configuration\nDESCRIPTION: Definition of DXF group codes used for configuring the clipping boundary geometry, including coordinate points (10), extrusion vector (210), origin (11), and clipping plane distances (40, 41).\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/SPATIAL_FILTER.md#2025-04-23_snippet_0\n\nLANGUAGE: DXF\nCODE:\n```\n10 - Clipping boundary points in OCS coordinates\n210 - Extrusion vector (typically 0,0,1)\n11 - Origin point (typically 0,0,0)\n40 - Front clipping plane distance\n41 - Back clipping plane distance\n```\n\n----------------------------------------\n\nTITLE: Calling Entity Purge Method in RST Documentation\nDESCRIPTION: Documentation text explaining how to manually remove deleted entities using the purge method on container objects\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/usage_for_beginners.rst#2025-04-23_snippet_24\n\nLANGUAGE: rst\nCODE:\n```\n:func:`purge`\n```\n\n----------------------------------------\n\nTITLE: DXF XCLIPFRAME Header Variable\nDESCRIPTION: Header variable $XCLIPFRAME controls the visibility and plotting of the clipping polygon with three possible states.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/SPATIAL_FILTER.md#2025-04-23_snippet_2\n\nLANGUAGE: DXF\nCODE:\n```\n$XCLIPFRAME\n0 = not displayed, not plotted\n1 = displayed, not plotted\n2 = displayed and plotted\n```\n\n----------------------------------------\n\nTITLE: DXF Clipping Status Codes\nDESCRIPTION: Group code 71 defines the clipping state for block references with values 0 (off) or 1 (on).\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/SPATIAL_FILTER.md#2025-04-23_snippet_1\n\nLANGUAGE: DXF\nCODE:\n```\n71 - Clipping State\n0 = off\n1 = on\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Build Process\nDESCRIPTION: Command to configure the Python build process with optimizations enabled and specifying the installation prefix directory where the interpreter will be installed.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/setup.rst#2025-04-23_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\n./configure --prefix=/opt/python3.9.9 --enable-optimizations\n```\n\n----------------------------------------\n\nTITLE: Extended Font Data XDATA Structure in DXF STYLE\nDESCRIPTION: Shows how additional font information (font family, italic and bold style flags) is stored in the XDATA section of STYLE entities with the ACAD application ID, including flag values for italic and bold styles.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/tables/style_table.rst#2025-04-23_snippet_2\n\nLANGUAGE: none\nCODE:\n```\n0\nSTYLE\n...\n3\nArial.ttf\n4\n\n1001        <<< start of the XDATA section\nACAD        <<< APPID\n1000        <<< font family name\nArial\n1071        <<< style flags, see table below\n50331682\n```\n\n----------------------------------------\n\nTITLE: Fixing PySide6 xcb Issue on Debian\nDESCRIPTION: Command to install the required xcb cursor library to resolve PySide6 launching issues on Debian-based systems.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/setup.rst#2025-04-23_snippet_3\n\nLANGUAGE: Text\nCODE:\n```\nsudo apt-get install libxcb-cursor0\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Environment with System Packages on Raspberry Pi\nDESCRIPTION: Commands to create a virtual environment with access to system site-packages for Raspberry Pi OS.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/setup.rst#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncd ~\nmkdir build\ncd build\npython3 -m venv --system-site-packages .venv\nsource .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Installing Test Dependencies and Running Tests\nDESCRIPTION: Commands to install pytest and run the test suite for ezdxf. This procedure is the same across all operating systems and assumes you're in the build directory with ezdxf installed in a virtual environment.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/setup.rst#2025-04-23_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\npip3 install pytest\npython3 -m pytest tests integration_tests\n```\n\n----------------------------------------\n\nTITLE: Configuring reStructuredText Module Documentation\nDESCRIPTION: RST directives for configuring the documentation module and table of contents for EzdXF add-ons.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/addons/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _add-ons:\n\n.. module:: ezdxf.addons\n\nAdd-ons\n=======\n\n.. toctree::\n    :maxdepth: 1\n\n\n    drawing\n    geo\n    importer\n    dxf2code\n    iterdxf\n    odafc\n    r12export\n    r12writer\n    text2path\n    mtxpl\n    hpgl2\n    pycsg\n    acadctb\n    forms\n    binpacking\n    meshex\n    openscad\n    tablepainter\n    mtextsurrogate\n    gerber_D6673\n```\n\n----------------------------------------\n\nTITLE: Configuring ODA File Converter Paths in INI\nDESCRIPTION: INI configuration example showing how to set the Windows executable path and Unix AppImage path for ODA File Converter\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/addons/odafc.rst#2025-04-23_snippet_0\n\nLANGUAGE: INI\nCODE:\n```\n[odafc-addon]\nwin_exec_path = \"C:\\Program Files\\ODA\\ODAFileConverter\\ODAFileConverter.exe\"\nunix_exec_path = \"/home/<your user name>/Apps/ODAFileConverter_QT5_lnxX64_8.3dll_23.9.AppImage\"\n```\n\n----------------------------------------\n\nTITLE: Defining AttribData Class Attributes in Python\nDESCRIPTION: Specifies the attributes of the AttribData class, including handle, index, width, and text. These attributes represent attribute data associated with a block in a multi-leader object.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfentities/mleader.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass AttribData:\n    handle: str  # handle to Attdef entity in the BLOCK definition\n    index: int  # unknown meaning\n    width: float  # text width factor?\n    text: str  # Attrib content\n```\n\n----------------------------------------\n\nTITLE: Defining MTextFlowDirection Enumeration in Python\nDESCRIPTION: Enumerates text flow direction options for multi-line text (MText) in CAD drawings. Includes LEFT_TO_RIGHT, TOP_TO_BOTTOM, and BY_STYLE options.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/enums.rst#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nclass MTextFlowDirection:\n    LEFT_TO_RIGHT\n    TOP_TO_BOTTOM\n    BY_STYLE\n```\n\n----------------------------------------\n\nTITLE: Command Interpretation Rules\nDESCRIPTION: Shows the format for interpreting command packets including length and opcode.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/Proxy Graphic Binary Chunk.md#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n{Command}\n{int 32 / Command Packet Length} {int 32 / Command OPCODE} [{Command\nArgument} {Command argument} ...]\n\n{Command Argument}\n```\n\n----------------------------------------\n\nTITLE: Referencing Python Script Pattern for DXF Creation\nDESCRIPTION: Pattern used for Python scripts that generate DXF example files using ezdxf library. These scripts help maintain repository size by generating samples on demand rather than storing them.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/examples_dxf/README.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"create_*.py\"\n```\n\n----------------------------------------\n\nTITLE: Handling Recursion Limits in CSG Operations\nDESCRIPTION: Example showing how to increase Python's recursion limit to handle complex CSG operations. This is needed because the implementation uses an unbalanced BSP tree which can cause recursion errors for complex geometries.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/addons/pycsg.rst#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nimport sys\n\nactual_limit = sys.getrecursionlimit()\n# default is 1000, increasing too much may cause a seg fault\nsys.setrecursionlimit(10000)\n\n...  # do the CSG stuff\n\nsys.setrecursionlimit(actual_limit)\n```\n\n----------------------------------------\n\nTITLE: Loading DXF Comments\nDESCRIPTION: Methods for loading DXF comments from either a file or stream using the ezdxf comments module.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/CHANGELOG.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ncomments = ezdxf.comments.from_file(filename)\n# or\ncomments = ezdxf.comments.from_stream(stream)\n```\n\n----------------------------------------\n\nTITLE: Running mypy on ezdxf package\nDESCRIPTION: Command to run mypy type checking on the ezdxf package, ignoring missing imports. This helps ensure type safety throughout the codebase.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmypy --ignore-missing-imports -p ezdxf\n```\n\n----------------------------------------\n\nTITLE: Parsing VIEW Table Entry in DXF R12\nDESCRIPTION: This snippet shows the structure of a VIEW table entry in DXF R12 format. It includes fields for view name, flags, dimensions, center point, direction, target point, lens length, clipping planes, and view mode.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/tables/view_table.rst#2025-04-23_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n0\nVIEW\n2       <<< name of view\nVIEWNAME\n70      <<< flags bit-coded: 1st bit -> (0/1 = modelspace/paperspace)\n0       <<< modelspace\n40      <<< view width in Display Coordinate System (DCS)\n20.01\n10      <<< view center point in DCS\n40.36   <<<     x value\n20      <<<     group code for y value\n15.86   <<<     y value\n41      <<< view height in DCS\n17.91\n11      <<< view direction from target point, 3D vector\n0.0     <<<     x value\n21      <<<     group code for y value\n0.0     <<<     y value\n31      <<<     group code for z value\n1.0     <<<     z value\n12      <<< target point in WCS\n0.0     <<<     x value\n22      <<<     group code for y value\n0.0     <<<     y value\n32      <<<     group code for z value\n0.0     <<<     z value\n42      <<< lens (focal) length\n50.0    <<< 50mm\n43      <<< front clipping plane, offset from target\n0.0\n44      <<< back clipping plane, offset from target\n0.0\n50      <<< twist angle\n0.0\n71      <<< view mode\n0\n```\n\n----------------------------------------\n\nTITLE: Launching HPGL Viewer and Converter GUI (Shell)\nDESCRIPTION: Command to launch the HPGL viewer and converter GUI provided by the hpgl2 add-on in ezdxf. This tool allows viewing and converting HPGL2 plot files.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/Release Notes v1.1.x.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nezdxf hpgl\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable to Disable C-Extensions in Linux\nDESCRIPTION: Command to disable C-Extensions in ezdxf by setting the EZDXF_DISABLE_C_EXT environment variable in Linux.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/setup.rst#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nexport EZDXF_DISABLE_C_EXT=1\n```\n\n----------------------------------------\n\nTITLE: Creating a Virtual Environment with Custom Python\nDESCRIPTION: Commands to create and activate a virtual environment using the custom-built Python interpreter. This example doesn't use system-site-packages since packages may not be available for the custom Python version.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/setup.rst#2025-04-23_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\ncd ~/build\n/opt/python3.9.9/bin/python3 -m venv py39\nsource py39/bin/activate\n```\n\n----------------------------------------\n\nTITLE: RST Table of Contents for DXF Tutorials\nDESCRIPTION: ReStructuredText markup defining the table of contents for DXF tutorials, setting maximum depth to 1 level and listing all available tutorial topics.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n\n    getting_data\n    simple_drawings\n    common_graphical_attributes\n    layers\n    linetypes\n    dxf_primitives\n    entity_selection\n    blocks\n    lwpolyline\n    text\n    mtext\n    spline\n    polyface\n    mesh\n    hatch\n    hatch_pattern\n    image\n    underlay\n    mleader\n    psp_viewports\n    ocs_usage\n    ucs_transform\n    linear_dimension\n    radius_dimension\n    diameter_dimension\n    angular_dimension\n    arc_dimension\n    ordinate_dimension\n    geo\n    custom_data\n    xref_module\n    image_export\n    edges\n```\n\n----------------------------------------\n\nTITLE: Default ODA File Converter Config\nDESCRIPTION: Default INI configuration for ODA File Converter paths on Windows systems\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/addons/odafc.rst#2025-04-23_snippet_2\n\nLANGUAGE: INI\nCODE:\n```\n[odafc-addon]\nwin_exec_path = \"C:\\Program Files\\ODA\\ODAFileConverter\\ODAFileConverter.exe\"\nunix_exec_path =\n```\n\n----------------------------------------\n\nTITLE: Cloning Liberation Fonts Repository\nDESCRIPTION: Command to clone the Liberation Fonts repository from GitHub.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/fonts/liberation-fonts-ttf-2.1.1/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/liberationfonts/liberation-fonts\n```\n\n----------------------------------------\n\nTITLE: Defining ACADProxyEntity Class in Python\nDESCRIPTION: This snippet defines the ACADProxyEntity class, which is a subclass of DXFGraphic. It represents an ACAD_PROXY_ENTITY in DXF files and provides methods for working with proxy entities.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfentities/acad_proxy_entity.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass ACADProxyEntity:\n    def virtual_entities(self):\n        # Method implementation not shown\n        pass\n\n    def explode(self):\n        # Method implementation not shown\n        pass\n```\n\n----------------------------------------\n\nTITLE: DXF R12 BLOCKS Section Structure\nDESCRIPTION: Shows the structure of a BLOCKS section in DXF R12 format. It illustrates how a block definition starts with a BLOCK entity and ends with an ENDBLK entity, with all entities between them being the content of the block.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/block_management.rst#2025-04-23_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n0           <<< start of a SECTION\nSECTION\n2           <<< start of BLOCKS section\nBLOCKS\n...         <<< modelspace and paperspace block definitions not shown,\n...         <<< see layout management\n...\n0           <<< start of a BLOCK definition\nBLOCK\n8           <<< layer\n0\n2           <<< block name\nArchTick\n70          <<< flags\n1\n10          <<< base point, x\n0.0\n20          <<< base point, y\n0.0\n30          <<< base point, z\n0.0\n3           <<< second BLOCK name, same as (2, name)\nArchTick\n1           <<< xref name, if block is an external reference\n                <<< empty string!\n0           <<< start of the first entity of the BLOCK\nLINE\n5\n28E\n8\n0\n62\n0\n10\n500.0\n20\n500.0\n30\n0.0\n11\n500.0\n21\n511.0\n31\n0.0\n0           <<< start of the second entity of the BLOCK\nLINE\n...\n0.0\n0           <<< ENDBLK entity, marks the end of the BLOCK definition\nENDBLK\n5           <<< ENDBLK gets a handle by AutoCAD, but BLOCK didn't\n2F2\n8           <<< as every entity, also ENDBLK requires a layer (same as BLOCK entity!)\n0\n0           <<< start of next BLOCK entity\nBLOCK\n...\n0           <<< end BLOCK entity\nENDBLK\n0           <<< end of BLOCKS section\nENDSEC\n```\n\n----------------------------------------\n\nTITLE: Defining Glossary Terms in reStructuredText\nDESCRIPTION: This code snippet demonstrates how to create a glossary section in reStructuredText format. It includes various terms related to CAD and DXF, providing detailed explanations for each.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/glossary.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. glossary::\n\n    ACI\n        :ref:`ACI`\n\n    ACIS\n        The 3D ACIS Modeler (`ACIS`_) is a geometric modeling kernel developed\n        by `Spatial Corp.`_ ® (formerly `Spatial Technology`) and now part of\n        `Dassault Systems`. All ACIS based DXF entities store their geometry as\n        :term:`SAT` or :term:`SAB` data. These are not open data formats and\n        a license has to be purchased to get access to their SDK, therefore\n        `ezdxf` can not provide any support for creating, processing or transforming\n        of ACIS based DXF entities.\n\n    bulge\n        The :ref:`bulge value` is used to create arc shaped line segments in\n        :class:`~ezdxf.entities.Polyline` and :class:`~ezdxf.entities.LWPolyline`\n        entities.\n\n    CAD\n        Computer-Assisted Drafting or Computer-Aided Design\n\n    CTB\n        Color dependent plot style table (:class:`~ezdxf.acadctb.ColorDependentPlotStyles`)\n\n    DWG\n        Proprietary file format of `AutoCAD`_ ®. Documentation for this format\n        is available from the Open Design Alliance (`ODA`_) at their `Downloads`_\n        section. This documentation is created by reverse engineering therefore\n        not perfect nor complete.\n\n    DXF\n        Drawing eXchange Format is a file format used by `AutoCAD`_ ® to\n        interchange data with other :term:`CAD` applications. `DXF`_ is a\n        trademark of `Autodesk`_ ®. See also :ref:`what is dxf`\n\n    proxy-graphic\n        The proxy-graphic is an internal data format to add a graphical\n        representation to DXF entities which are unknown (custom DXF entities),\n        not documented or very complex so CAD applications can display them\n        without knowledge about the internal structure of these entities.\n\n    raw-color\n        Raw color value as stored in DWG files, this integer value can\n        represent :term:`ACI` values as well as and :term:`true-color` values\n\n    reliable CAD application\n        CAD applications which create valid DXF documents in the meaning and\n        interpretation of `Autodesk`_. See also :ref:`what is dxf`\n\n    SAB\n        ACIS file format (Standard ACIS Binary), binary stored data\n\n    SAT\n        ACIS file format (Standard ACIS Text), data stored as ASCII text\n\n    STB\n        Named plot style table (:class:`~ezdxf.acadctb.NamedPlotStyles`)\n\n    true-color\n        RGB color representation, a combination red, green and blue values to\n        define a color.\n```\n\n----------------------------------------\n\nTITLE: Configuring Support Directories for Stroke Fonts in INI Format\nDESCRIPTION: Example configuration for setting support directories that contain stroke font files (.shx, .shp, .lff) in the ezdxf configuration file. This is necessary because these font files are not included with ezdxf due to copyright or licensing restrictions.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/addons/text2path.rst#2025-04-23_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[core]\nsupport_dirs =\n    \"C:\\Program Files\\Bricsys\\BricsCAD V23 en_US\\Fonts\",\n    ~/shx_fonts,\n    ~/shp_fonts,\n    ~/lff_fonts,\n```\n\n----------------------------------------\n\nTITLE: Extracting Liberation Fonts Archive\nDESCRIPTION: Command for extracting the Liberation Fonts archive file\nSOURCE: https://github.com/mozman/ezdxf/blob/master/fonts/liberation-narrow-fonts-ttf-1.07.6/README.rst#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ tar zxvf liberation-fonts-[VERSION].tar.gz\n```\n\n----------------------------------------\n\nTITLE: Browse Command Config for Windows Notepad++\nDESCRIPTION: Example configuration in INI format for the browse command to use Notepad++ as the text editor on Windows.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/launcher.rst#2025-04-23_snippet_11\n\nLANGUAGE: ini\nCODE:\n```\n[browse-command]\n\ntext_editor = \"C:\\Program Files\\Notepad++\\notepad++.exe\" \"{filename}\" -n{num}\nicon_size = 32\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents in reStructuredText for ezdxf Howto Guide\nDESCRIPTION: This snippet defines a table of contents for the Howto section of ezdxf documentation using reStructuredText syntax. It sets the maximum depth to 2 and lists various topics covered in the guide.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/howto/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :maxdepth: 2\n\n    document\n    viewer\n    content\n    fonts\n    drawing-addon\n```\n\n----------------------------------------\n\nTITLE: Parsing LAYOUT Entity Structure in DXF Format\nDESCRIPTION: Detailed breakdown of the DXF LAYOUT entity format, showing group codes and their meanings. This structure defines a layout's properties including plot settings, limits, extents, and references to associated blocks and viewports.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/layout_management.rst#2025-04-23_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n0\nLAYOUT\n5       <<< handle\n59\n102     <<< extension dictionary (ignore)\n{ACAD_XDICTIONARY\n360\n1C3\n102\n}\n102     <<< reactor (required?)\n{ACAD_REACTORS\n330\n1A      <<< pointer to \"ACAD_LAYOUT\" DICTIONARY (layout management table)\n102\n}\n330     <<< owner handle\n1A      <<< pointer to \"ACAD_LAYOUT\" DICTIONARY (same as reactor pointer)\n100     <<< PLOTSETTINGS\nAcDbPlotSettings\n1       <<< page setup name\n\n2       <<< name of system printer or plot configuration file\nnone_device\n4       <<< paper size, part in braces should follow the schema\n...     (width_x_height_unit) unit is 'Inches' or 'MM'\n...     Letter\\_(8.50_x_11.00_Inches)  the part in front of the braces is\n...     ignored by AutoCAD\n6       <<< plot view name\n\n40      <<< size of unprintable margin on left side of paper in millimeters,\n...     defines also the plot origin-x\n6.35\n41      <<< size of unprintable margin on bottom of paper in millimeters,\n...     defines also the plot origin-y\n6.35\n42      <<< size of unprintable margin on right side of paper in millimeters\n6.35\n43      <<< size of unprintable margin on top of paper in millimeters\n6.35\n44      <<< plot paper size: physical paper width in millimeters\n215.90\n45      <<< plot paper size: physical paper height in millimeters\n279.40\n46      <<< X value of plot origin offset in millimeters, moves the plot origin-x\n0.0\n47      <<< Y value of plot origin offset in millimeters, moves the plot origin-y\n0.0\n48      <<< plot window area: X value of lower-left window corner\n0.0\n49      <<< plot window area: Y value of lower-left window corner\n0.0\n140     <<< plot window area: X value of upper-right window corner\n0.0\n141     <<< plot window area: Y value of upper-right window corner\n0.0\n142     <<< numerator of custom print scale: real world (paper) units, 1.0\n...     for scale 1:50\n1.0\n143     <<< denominator of custom print scale: drawing units, 50.0\n...     for scale 1:50\n1.0\n70      <<< plot layout flags, bit-coded (... too many options)\n688     <<< b1010110000 = UseStandardScale(16)/PlotPlotStyle(32)\n...     PrintLineweights(128)/DrawViewportsFirst(512)\n72      <<< plot paper units (0/1/2 for inches/millimeters/pixels), are\n...     pixels really supported?\n0\n73      <<< plot rotation (0/1/2/3 for 0deg/90deg counter-cw/upside-down/90deg cw)\n1       <<< 90deg clockwise\n74      <<< plot type 0-5 (... too many options)\n5       <<< 5 = layout information\n7       <<< current plot style name, e.g. 'acad.ctb' or 'acadlt.ctb'\n\n75      <<< standard scale type 0-31 (... too many options)\n16      <<< 16 = 1:1, also 16 if user scale type is used\n147     <<< unit conversion factor\n1.0     <<< for plot paper units in mm, else  0.03937... (1/25.4) for inches\n...     as plot paper units\n76      <<< shade plot mode (0/1/2/3 for as displayed/wireframe/hidden/rendered)\n0       <<< as displayed\n77      <<< shade plot resolution level 1-5 (... too many options)\n2       <<< normal\n78      <<< shade plot custom DPI: 100-32767, Only applied when shade plot\n...     resolution level is set to 5 (Custom)\n300\n148     <<< paper image origin: X value\n0.0\n149     <<< paper image origin: Y value\n0.0\n100     <<< LAYOUT settings\nAcDbLayout\n1       <<< layout name\nLayout1\n70      <<< flags bit-coded\n1       <<< 1 = Indicates the PSLTSCALE value for this layout when this\n...     layout is current\n71      <<< Tab order (\"Model\" tab always appears as the first tab\n...     regardless of its tab order)\n1\n10      <<< minimum limits for this layout (defined by LIMMIN while this\n...     layout is current)\n-0.25   <<<     x value, distance of the left paper margin from the plot\n...     origin-x, in plot paper units and by scale (e.g. x50 for 1:50)\n20      <<<     group code for y value\n-0.25   <<<     y value, distance of the bottom paper margin from the plot\n...     origin-y, in plot paper units and by scale (e.g. x50 for 1:50)\n11      <<< maximum limits for this layout (defined by LIMMAX while this\n...     layout is current)\n10.75   <<<     x value, distance of the right paper margin from the plot\n...     origin-x, in plot paper units and by scale (e.g. x50 for 1:50)\n21      <<<     group code for y value\n8.25    <<<     y value, distance of the top paper margin from the plot\n...     origin-y, in plot paper units and by scale (e.g. x50 for 1:50)\n12      <<< insertion base point for this layout (defined by INSBASE while\n...     this layout is current)\n0.0     <<<     x value\n22      <<<     group code for y value\n0.0     <<<     y value\n32      <<<     group code for z value\n0.0     <<<     z value\n14      <<< minimum extents for this layout (defined by EXTMIN while this\n...     layout is current), AutoCAD default is (1e20, 1e20, 1e20)\n1.05    <<<     x value\n24      <<<     group code for y value\n0.80    <<<     y value\n34      <<<     group code for z value\n0.0     <<<     z value\n15      <<< maximum extents for this layout (defined by EXTMAX while this\n...     layout is current), AutoCAD default is (-1e20, -1e20, -1e20)\n9.45    <<<     x value\n25      <<<     group code for y value\n7.20    <<<     y value\n35      <<<     group code for z value\n0.0     <<<     z value\n146     <<< elevation ???\n0.0\n13      <<< UCS origin (3D Point)\n0.0     <<<     x value\n23      <<<     group code for y value\n0.0     <<<     y value\n33      <<<     group code for z value\n0.0     <<<     z value\n16      <<< UCS X-axis (3D vector)\n1.0     <<<     x value\n26      <<<     group code for y value\n0.0     <<<     y value\n36      <<<     group code for z value\n0.0     <<<     z value\n17      <<< UCS Y-axis (3D vector)\n0.0     <<<     x value\n27      <<<     group code for y value\n1.0     <<<     y value\n37      <<<     group code for z value\n0.0     <<<     z value\n76      <<< orthographic type of UCS 0-6 (... too many options)\n0       <<< 0 = UCS is not orthographic ???\n330     <<< ID/handle of required block table record\n58\n331     <<< ID/handle to the viewport that was last active in this layout\n...     when the layout was current\n1B9\n1001    <<< extended data (ignore)\n...\n```\n\n----------------------------------------\n\nTITLE: Documentation Reference Links in RST\nDESCRIPTION: Reference links to documentation sections for basic concepts, tasks, and general reference\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/usage_for_beginners.rst#2025-04-23_snippet_25\n\nLANGUAGE: rst\nCODE:\n```\n:ref:`basic concepts`\n:ref:`tasks`\n:ref:`reference`\n```\n\n----------------------------------------\n\nTITLE: Audit Command Help Output\nDESCRIPTION: Shows the help text for the ezdxf audit sub-command, displaying available options.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/launcher.rst#2025-04-23_snippet_3\n\nLANGUAGE: Text\nCODE:\n```\nC:\\> ezdxf audit -h\nusage: ezdxf audit [-h] [-s] FILE [FILE ...]\n\npositional arguments:\n  FILE        audit DXF files\n\noptional arguments:\n  -h, --help  show this help message and exit\n  -s, --save  save recovered files with extension \".rec.dxf\"\n```\n\n----------------------------------------\n\nTITLE: Dictionary DXF Object Attribute Example\nDESCRIPTION: Example showing the dictionary cloning flag values and their meanings for handling duplicate entries in DXF dictionaries.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfobjects/dictionary.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n=== ==================\n0   not applicable\n1   keep existing\n2   use clone\n3   <xref>$0$<name>\n4   $0$<name>\n5   Unmangle name\n=== ==================\n```\n\n----------------------------------------\n\nTITLE: DXF Dictionary Structure Path\nDESCRIPTION: Shows the hierarchical path of DXF dictionary and entity references leading to an unsupported ACDB_MTEXTATTRIBUTEOBJECTCONTEXTDATA_CLASS entity. The structure demonstrates the relationship between ATTDEF, dictionaries, and context data.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/journals/2023_11_12.md#2025-04-23_snippet_0\n\nLANGUAGE: dxf\nCODE:\n```\nBlock 300 \"circuit_breakerdxf\"\n  ATTDEF(#2F9)\n    DICTIONARY(#2FA)\n      Entry(\"AcDbContextDataManager\", #2FB)\n    DICTIONARY(#2FB)\n      Entry(\"ACDB_ANNOTATIONSCALES\", #2FC)\n    DICTIONARY(#2FC)\n      Entry(\"*A1\", #2FD)\n    ACDB_MTEXTATTRIBUTEOBJECTCONTEXTDATA_CLASS(#2FD)\n```\n\n----------------------------------------\n\nTITLE: OLE Object Interface Reference\nDESCRIPTION: Reference to the OLE Object interface name as mentioned in the Windows OLE technology description.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/Are OLE entities supported.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nOleObject\n```\n\n----------------------------------------\n\nTITLE: Building and Installing ezdxf from Source\nDESCRIPTION: Commands to navigate to the cloned repository directory and install ezdxf from source code.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/setup.rst#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncd ezdxf\npip3 install .\n```\n\n----------------------------------------\n\nTITLE: Documenting Bezier3P Class in Python\nDESCRIPTION: Documentation for the Bezier3P class, which represents a 3-point Bézier curve. It includes methods for curve manipulation, transformation, and point calculation, similar to Bezier4P.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/math/core.rst#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: Bezier3P\n\n    .. autoattribute:: control_points\n\n    .. automethod:: reverse\n\n    .. automethod:: transform\n\n    .. automethod:: approximate\n\n    .. automethod:: flattening\n\n    .. automethod:: approximated_length\n\n    .. automethod:: point\n\n    .. automethod:: tangent\n```\n\n----------------------------------------\n\nTITLE: Persistent Reactors Tag Sequence Format in DXF\nDESCRIPTION: Shows the tag sequence for persistent reactors in DXF, which store object handles of objects registering themselves as reactors on the current object. Uses group codes 102 and 330.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/dxftags.rst#2025-04-23_snippet_2\n\nLANGUAGE: none\nCODE:\n```\n102\n{ACAD_REACTORS\n330\nfirst Soft-pointer ID/handle to owner dictionary\n330\nsecond Soft-pointer ID/handle to owner dictionary\n...\n102\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading Specific Version Archive\nDESCRIPTION: Command to download a specific version of Liberation Fonts using wget.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/fonts/liberation-fonts-ttf-2.1.1/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwget https://github.com/liberationfonts/liberation-fonts/files/2926169/liberation-fonts-2.00.5.tar.gz\n```\n\n----------------------------------------\n\nTITLE: MLEADERSTYLE Properties with Scale 1.0\nDESCRIPTION: Default MLEADERSTYLE property values when scale is set to 1.0. Shows various dimension and spacing parameters.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/exploration/scaling_mleaderstyle.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n'align_space': 4.0,\n'arrow_head_size': 4.0,\n'block_scale_x': 1.0,\n'block_scale_y': 1.0,\n'block_scale_z': 1.0,\n'break_gap_size': 3.75,\n'char_height': 4.0,\n'dogleg_length': 8.0,\n'landing_gap': 2.0,\n'scale': 1.0\n```\n\n----------------------------------------\n\nTITLE: GitHub Issue Template Link\nDESCRIPTION: Template for creating issue reference links in ezdxf repository with placeholder issue number 000.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/templates.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nissue [#000](https://github.com/mozman/ezdxf/issues/000)\n```\n\n----------------------------------------\n\nTITLE: Implementing AppIDTable Class in Python\nDESCRIPTION: AppIDTable is a subclass of Table that manages a collection of AppID objects. It provides an add method for adding new application IDs.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tables/tables.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass AppIDTable(Table):\n    def add(self): pass\n```\n\n----------------------------------------\n\nTITLE: DXF CTB Line Style Constants\nDESCRIPTION: Enumeration constants for line cap and join styles in CTB files, defining various end styles and join methods.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/Line Cap- and Join Styles.md#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nEND_STYLE_BUTT = 0\nEND_STYLE_SQUARE = 1\nEND_STYLE_ROUND = 2\nEND_STYLE_DIAMOND = 3\nEND_STYLE_OBJECT = 4\nJOIN_STYLE_MITER = 0\nJOIN_STYLE_BEVEL = 1\nJOIN_STYLE_ROUND = 2\nJOIN_STYLE_DIAMOND = 3\nJOIN_STYLE_OBJECT = 5\n```\n\n----------------------------------------\n\nTITLE: Dynamic Columns Structure Start in DXF R2018\nDESCRIPTION: Shows the beginning structure of dynamic columns in DXF R2018, displaying header information for the main MTEXT entity.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/entities/mtext.rst#2025-04-23_snippet_10\n\nLANGUAGE: Text\nCODE:\n```\n0 <ctrl> MTEXT\n5 <hex> #A2                     <<< entity handle\n102 <ctrl> {ACAD_XDICTIONARY\n360 <hex> #A3\n102 <ctrl> }\n330 <hex> #1F                   <<< block record handle of owner layout\n100 <ctrl> AcDbEntity\n8 <str> 0                       <<< layer\n100 <ctrl> AcDbMText\n10 <point> (-133.714579865783, 276.101821192053, 0.0)   <<< insert location in WCS\n```\n\n----------------------------------------\n\nTITLE: Installing Sphinx for Documentation Building\nDESCRIPTION: Command to install Sphinx and the ReadTheDocs theme for building the documentation. This is used to generate the HTML documentation for the ezdxf package.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/setup.rst#2025-04-23_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\npip3 install Sphinx sphinx-rtd-theme\n```\n\n----------------------------------------\n\nTITLE: RST External References\nDESCRIPTION: ReStructuredText markup defining external reference links to Autodesk's official DXF documentation resources.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/index.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. _DXF Reference: http://help.autodesk.com/view/OARX/2018/ENU/?guid=GUID-235B22E0-A567-4CF6-92D3-38A2306D73F3\n\n.. _DXF Developer Documentation: http://help.autodesk.com/view/OARX/2018/ENU/\n```\n\n----------------------------------------\n\nTITLE: Initializing ezdxf Document and Modelspace (Python)\nDESCRIPTION: Common prolog for all Python code examples in the tutorial. It creates a new DXF document and gets the modelspace.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/custom_data.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport ezdxf\n\ndoc = ezdxf.new()\nmsp = doc.modelspace()\n```\n\n----------------------------------------\n\nTITLE: Installing Build Requirements for Ubuntu\nDESCRIPTION: Commands to install Cython and wheel in the virtual environment for compiling C-extensions on Ubuntu.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/setup.rst#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\npip3 install cython wheel\n```\n\n----------------------------------------\n\nTITLE: Stacking Fractions in MTEXT Format Code\nDESCRIPTION: These snippets show different ways to create stacked fractions or superscript/subscript text using the \\S format code in MTEXT.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/MText format codes.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n\\SX/Y\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n\\SX^Y\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n\\S1#4\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable to Disable C-Extensions in Windows\nDESCRIPTION: Command to disable C-Extensions in ezdxf by setting the EZDXF_DISABLE_C_EXT environment variable in Windows.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/setup.rst#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nset EZDXF_DISABLE_C_EXT=1\n```\n\n----------------------------------------\n\nTITLE: Using GfxAttribs for DXF Entity Creation in Python\nDESCRIPTION: Demonstrates how to use the GfxAttribs class to create valid attribute dictionaries for DXF entities with IDE auto-completion support.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/Release Notes v0.18.x.md#2025-04-23_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nimport ezdxf\nfrom ezdxf.gfxattribs import GfxAttribs\n\ndoc = ezdxf.new()\nmsp = doc.modelspace()\n\nattribs = GfxAttribs(layer=\"MyLayer\", color=ezdxf.colors.RED)\nline = msp.add_line((0, 0), (1, 0), dxfattribs=attribs)\ncircle = msp.add_circle((0, 0), radius=1.0, dxfattribs=attribs)\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents for DXF Sections in reStructuredText\nDESCRIPTION: A reStructuredText directive that creates a table of contents for DXF file sections documentation. The directive is configured to display a maximum depth of 2 levels and includes links to documentation for header, classes, tables, blocks, entities, and objects sections.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/sections/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredText\nCODE:\n```\n.. toctree::\n    :maxdepth: 2\n\n    header\n    classes\n    tables\n    blocks\n    entities\n    objects\n```\n\n----------------------------------------\n\nTITLE: Building Liberation Fonts from Source\nDESCRIPTION: Commands for building Liberation Fonts from source code\nSOURCE: https://github.com/mozman/ezdxf/blob/master/fonts/liberation-narrow-fonts-ttf-1.07.6/README.rst#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ cd liberation-fonts-[VERSION]\n$ make\n```\n\n----------------------------------------\n\nTITLE: Path Method Replacement Example\nDESCRIPTION: Example of deprecated path methods being replaced by new function calls.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nPath.all_lines_to_curve3  # replaced by path.lines_to_curve3()\nPath.all_lines_to_curve4  # replaced by path.lines_to_curve4()\n```\n\n----------------------------------------\n\nTITLE: Parsing Dynamic Columns MTEXT Entity in DXF R2000\nDESCRIPTION: This snippet demonstrates the structure of a dynamic columns MTEXT entity with manual height definition in DXF R2000 format. It includes the main entity and linked column entities.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/entities/mtext.rst#2025-04-23_snippet_12\n\nLANGUAGE: Text\nCODE:\n```\n0 <ctrl> MTEXT\n5 <hex> #9C                     <<< entity handle\n330 <hex> #1F                   <<< block record handle of owner layout\n100 <ctrl> AcDbEntity\n8 <str> 0                       <<< layer\n100 <ctrl> AcDbMText\n10 <point> (69.806121185863, 276.101821192053, 0.0)     <<< insert location in WCS\n40 <float> 2.5                  <<< character height in drawing units\n41 <float> 62.694536423841      <<< reference column width, if not in column mode\n71 <int> 1                      <<< attachment point\n72 <int> 1                      <<< flag text flow direction\n3 <str> Lorem ipsum dolor sit amet, consetetur sadipscing elitr, ...\n... <snip>\n73 <int> 1                      <<< line spacing style\n44 <float> 1.0                  <<< line spacing factor\n1001 <ctrl> ACAD\n1000 <str> ACAD_MTEXT_COLUMN_INFO_BEGIN\n1070 <int> 75                   <<< column type: 2=dynamic columns\n1070 <int> 2\n1070 <int> 79                   <<< flag column auto height\n1070 <int> 0\n1070 <int> 76                   <<< column count\n1070 <int> 3\n1070 <int> 78                   <<< flag column flow reversed\n1070 <int> 0\n1070 <int> 48                   <<< column width in column mode\n1040 <float> 50.0\n1070 <int> 49                   <<< column gutter width\n1040 <float> 12.5\n1070 <int> 50                   <<< column height count\n1070 <int> 3\n1040 <float> 164.802450331126   <<< column height 1. column\n1040 <float> 154.311699779249   <<< column height 2. column\n1040 <float> 0.0                <<< column height 3. column, takes the rest?\n1000 <str> ACAD_MTEXT_COLUMN_INFO_END\n1000 <str> ACAD_MTEXT_COLUMNS_BEGIN\n1070 <int> 47                   <<< column count\n1070 <int> 3\n1005 <hex> #1B2                 <<< handle to 2. column as MTEXT entity\n1005 <hex> #1B3                 <<< handle to 3. column as MTEXT entity\n1000 <str> ACAD_MTEXT_COLUMNS_END\n```\n\n----------------------------------------\n\nTITLE: Defining the RST Module Path in Sphinx\nDESCRIPTION: Sets the module path for the Sphinx documentation system to reference the clustering module in the ezdxf math package.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/math/clustering.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. module:: ezdxf.math.clustering\n```\n\n----------------------------------------\n\nTITLE: Advanced Entity Properties in AutoCAD (C++)\nDESCRIPTION: Shows how to set advanced entity properties such as true color, lineweight, linetype scale, thickness, and plot style name using AcGiSubEntityTraits in AutoCAD.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/Proxy Graphic Binary Chunk.md#2025-04-23_snippet_7\n\nLANGUAGE: C++\nCODE:\n```\n<AcGiSubEntityTraits::setTrueColor (const AcCmEntityColor& color)>\n```\n\nLANGUAGE: C++\nCODE:\n```\n<AcGiSubEntityTraits::setLineWeight (const AcDb::LineWeight lw)>\n```\n\nLANGUAGE: C++\nCODE:\n```\n<AcGiSubEntityTraits::setLineTypeScale (double dScale)>\n```\n\nLANGUAGE: C++\nCODE:\n```\n<AcGiSubEntityTraits::setThickness (double dThickness)>\n```\n\nLANGUAGE: C++\nCODE:\n```\n<AcGiSubEntityTraits::setPlotStyleName (AcDb::PlotStyleNameType type, const\nAcDbObjectId & id)>\n```\n\n----------------------------------------\n\nTITLE: GitHub Discussion Template Link\nDESCRIPTION: Template for creating discussion reference links in ezdxf repository with placeholder issue number 000.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/templates.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\ndiscussion [#000](https://github.com/mozman/ezdxf/discussions/000)\n```\n\n----------------------------------------\n\nTITLE: Installing C++ Build Tools on Ubuntu\nDESCRIPTION: Command to install the essential build tools and Python development headers on Ubuntu for compiling C-extensions.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/setup.rst#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install build-essential python3.10-dev\n```\n\n----------------------------------------\n\nTITLE: Referencing DXF_TRAILER Constant in QGIS C++ Code\nDESCRIPTION: This code snippet shows the declaration of the DXF_TRAILER string constant in the QGIS source code. It is part of the DXF exporter implementation, which is identified as the source of the entity reference issues.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/Read messed up LAYOUT structure created by QGIS.md#2025-04-23_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nstatic const QString DXF_TRAILER\n```\n\n----------------------------------------\n\nTITLE: Setting EZDXF_DISABLE_C_EXT Environment Variable in Windows\nDESCRIPTION: Command line example showing how to disable the optional C-extensions in ezdxf by setting the EZDXF_DISABLE_C_EXT environment variable to 1 on Windows.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/options.rst#2025-04-23_snippet_7\n\nLANGUAGE: batch\nCODE:\n```\nC:\\> set EZDXF_DISABLE_C_EXT=1\n```\n\n----------------------------------------\n\nTITLE: Implementing UCSTable Class in Python\nDESCRIPTION: UCSTable is a subclass of Table that manages a collection of UCSTableEntry objects. It provides an add method for adding new UCS entries.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tables/tables.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass UCSTable(Table):\n    def add(self): pass\n```\n\n----------------------------------------\n\nTITLE: Creating a Cross-Reference Label in Sphinx\nDESCRIPTION: Defines a reference label for the math clustering section that can be linked to from other parts of the documentation.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/math/clustering.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. _math_clustering:\n```\n\n----------------------------------------\n\nTITLE: Basic Proxy Graphics Binary Structure\nDESCRIPTION: Defines the basic structure of proxy graphics binary chunk output with header and command format.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/Proxy Graphic Binary Chunk.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n{Header}[{Command} [{Command} [{Command} [...]]]]\n```\n\n----------------------------------------\n\nTITLE: Parsing MLEADER Context Data Structure for Text Content in DXF\nDESCRIPTION: This snippet shows the raw DXF tag structure for a MULTILEADER entity with MText content created by BricsCAD. It demonstrates the complex nested structure including content scale, base point, text properties, styling, and leader references.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/entities/mleader.rst#2025-04-23_snippet_0\n\nLANGUAGE: DXF\nCODE:\n```\n300 <str> CONTEXT_DATA{\n40 <float> 1.0    <<< content scale\n10 <point> (x, y, z)      <<< content base point\n41 <float> 4.0    <<< text height\n140 <float> 4.0   <<< arrowhead size\n145 <float> 2.0   <<< landing gap size\n174 <int> 1       <<< doc missing\n175 <int> 1       <<< doc missing\n176 <int> 0       <<< doc missing\n177 <int> 0       <<< doc missing\n290 <int> 1       <<< has_mtext_content\n<<< START MText Content tags:\n304 <str> MTEXT content string\n11 <point> (0.0, 0.0, 1.0)    <<< extrusion vector\n340 <hex> #A0                 <<< text style as handle\n12 <point> (x, y, z)          <<< text location\n13 <point> (1.0, 0.0, 0.0)    <<< text direction\n42 <float> 0.0        <<< text rotation\n43 <float> 0.0        <<< text width\n44 <float> 0.0        <<< text height\n45 <float> 1.0        <<< text line space factor\n170 <int> 1           <<< text line space style\n90 <int> -1056964608  <<< text color (raw value)\n171 <int> 1           <<< text attachment\n172 <int> 1           <<< text flow direction\n91 <int> -939524096   <<< text background color (raw value)\n141 <float> 1.5       <<< text background scale factor\n92 <int> 0            <<< text background transparency\n291 <int> 0           <<< has_text_bg_color\n292 <int> 0           <<< has_text_bg_fill\n173 <int> 0           <<< text column type\n293 <int> 0           <<< use text auto height\n142 <float> 0.0       <<< text column width\n143 <float> 0.0       <<< text column gutter width\n294 <int> 0           <<< text column flow reversed\n144 <float> missing   <<< text column height (optional?)\n295 <int> 0           <<< text use word break\n<<< END MText Content tags:\n296 <int> 0       <<< has_block_content\n<<< START Block content tags\n<<< END Block content tags\n110 <point> (0.0, 0.0, 0.0)       <<< MLEADER plane origin point\n111 <point> (1.0, 0.0, 0.0)       <<< MLEADER plane x-axis direction\n112 <point> (0.0, 1.0, 0.0)       <<< MLEADER plane y-axis direction\n297 <int> 0                       <<< MLEADER normal reversed\n302 <str> LEADER{\n...\n303 <str> }\n302 <str> LEADER{\n...\n303 <str> }\n272 <int> 9       <<< doc missing\n273 <int> 9       <<< doc missing\n301 <str> }\n```\n\n----------------------------------------\n\nTITLE: GitHub Pull Request Template Link\nDESCRIPTION: Template for creating pull request reference links in ezdxf repository with placeholder PR number 000.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/templates.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nPR [#000](https://github.com/mozman/ezdxf/pull/000)\n```\n\n----------------------------------------\n\nTITLE: Setting Raster Variables for IMAGE Support\nDESCRIPTION: Method for configuring raster variables to improve IMAGE entity support in drawings.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/CHANGELOG.md#2025-04-23_snippet_22\n\nLANGUAGE: Python\nCODE:\n```\nDrawing.set_raster_variables(frame, quality, units)  # Set RASTERVARIABLES entity properties\n```\n\n----------------------------------------\n\nTITLE: PySide6 Error Message on Debian Systems\nDESCRIPTION: Error message that may appear when launching PySide6 on Debian-based distributions due to missing xcb plugin.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/setup.rst#2025-04-23_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\nqt.qpa.plugin: Could not load the Qt platform plugin \"xcb\" in \"\" even though it was found.\n...\n```\n\n----------------------------------------\n\nTITLE: Specifying Font Location for Testing in ezdxf Project\nDESCRIPTION: This markdown snippet defines the location of fonts used for testing in the ezdxf project. It emphasizes that only fonts in the ./fonts folder are available, ensuring consistent test results across different environments.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/tests/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nTesting Fonts\n=============\n\nOnly the fonts included in the repository ./fonts folder are available for testing.\nThis guarantees that all tests run on all platforms and github-actions with the same \nfonts.\n\nThe fonts are loaded automatically in conftest.py.\n```\n\n----------------------------------------\n\nTITLE: Illustrating DIMSTYLE Table Structure in DXF R12\nDESCRIPTION: This code snippet demonstrates the structure of the DIMSTYLE table in DXF R12 format. It shows the table start, table type declaration, count of line types, individual DIMSTYLE entries, and table end.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/tables/dimstyle_table.rst#2025-04-23_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n0           <<< start of table\nTABLE\n2           <<< set table type\nDIMSTYLE\n70          <<< count of line types defined in this table, AutoCAD ignores this value\n9\n0           <<< 1. DIMSTYLE table entry\nDIMSTYLE\n                <<< DIMSTYLE data tags\n0           <<< 2. DIMSTYLE table entry\nDIMSTYLE\n                <<< DIMSTYLE data tags and so on\n0           <<< end of DIMSTYLE table\nENDTAB\n```\n\n----------------------------------------\n\nTITLE: Ascending Order Function Reference in Python\nDESCRIPTION: This snippet references the ascending function in the ezdxf.reorder module. The function is likely used to sort DXF entities in ascending order based on their handles or a custom mapping.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/reorder.rst#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n.. autofunction:: ascending\n```\n\n----------------------------------------\n\nTITLE: Drawing Text with AcGiGeometry in AutoCAD (C++)\nDESCRIPTION: Demonstrates two methods for drawing text using AcGiGeometry in AutoCAD. The first method (OPCODE=10) specifies text properties directly, while the second method (OPCODE=11) uses a text style object.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/Proxy Graphic Binary Chunk.md#2025-04-23_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\n<AcGiGeometry::text (const AcGePoint3d& position, const AcGeVector3d& normal,\nconst AcGeVector3d& direction, const double height, const double width, const\ndouble oblique, const char* pMsg)>\n```\n\nLANGUAGE: C++\nCODE:\n```\n<AcGiGeometry::text (const AcGePoint3d& position, const AcGeVector3d& normal,\nconst AcGeVector3d& direction, const char* pMsg, const Adesk::Int32 length,\nconst Adesk::Boolean raw, const AcGiTextStyle& pTextStyle)>\n```\n\n----------------------------------------\n\nTITLE: Defining RST Documentation Structure for Layout Module\nDESCRIPTION: RST documentation setup defining the structure for the ezdxf.layouts module with table of contents including layout_manager and layouts sections.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/layouts/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. module:: ezdxf.layouts\n\n.. toctree::\n   :maxdepth: 2\n\n   layout_manager\n   layouts\n```\n\n----------------------------------------\n\nTITLE: Defining Layer Assignment Function for DXF Entities in Python\nDESCRIPTION: A function that assigns layer properties to DXF entities based on a GeoMapping dictionary. It extracts the layer information from the 'properties' field of the mapping if available and sets the entity's layer accordingly.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/addons/geo.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ndef assign_layers(entity: DXFGraphic, mapping: GeoMapping) -> None:\n    properties = mapping.get(\"properties)\n    if properties is None:\n        return\n    layer = properties.get(\"layer\")\n    if layer:\n        entity.dxf.layer = layer\n```\n\n----------------------------------------\n\nTITLE: Reading DXF File in Python\nDESCRIPTION: This snippet shows how to read a DXF file using the ezdxf library. It handles different DXF versions and potential encoding issues.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/journals/2023_12_29.md#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndef read_dxf_file(filename: str, version: Optional[str] = None, encoding: str = 'cp1252') -> 'Drawing':\n    \"\"\"Read DXF file.\"\"\"\n    try:\n        doc = ezdxf.readfile(filename, encoding=encoding)\n    except IOError:\n        raise FileNotFoundError(f'File \"{filename}\" not found.')\n    except ezdxf.DXFStructureError:\n        # DXF structure error (Invalid or incomplete DXF file):\n        if version and version >= 'AC1015':\n            # try to repair R2000+ (AutoCAD 2000) DXF files\n            doc = ezdxf.recover.readfile(filename)\n        else:\n            # It's not possible to recover pre R2000 DXF files\n            raise\n    return doc\n```\n\n----------------------------------------\n\nTITLE: Browse Command Config for gedit on Linux\nDESCRIPTION: Example configuration in INI format for the browse command to use gedit as the text editor on Linux.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/launcher.rst#2025-04-23_snippet_13\n\nLANGUAGE: ini\nCODE:\n```\n[browse-command]\n\ntext_editor = /usr/bin/gedit +{num} \"{filename}\"\nicon_size = 32\n```\n\n----------------------------------------\n\nTITLE: Importing groupby Function from ezdxf.groupby Module in Python\nDESCRIPTION: This snippet demonstrates how to import the groupby function from the ezdxf.groupby module. The groupby function is likely used for grouping DXF entities based on certain criteria.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tasks/groupby.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. module:: ezdxf.groupby\n```\n\n----------------------------------------\n\nTITLE: Transform Management and Polyline Drawing in AutoCAD (C++)\nDESCRIPTION: Shows operations for managing transforms and drawing polylines with normals using AcGiGeometry and AcGiViewportGeometry in AutoCAD.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/Proxy Graphic Binary Chunk.md#2025-04-23_snippet_9\n\nLANGUAGE: C++\nCODE:\n```\n<AcGiViewportGeometry::polylineEye (const Adesk::UInt32 nbPoints, const\nAcGePoint3d* pPoints)\nAcGiViewportGeometry::polylineDc (const Adesk::UInt32 nbPoints, const\nAcGePoint3d* pPoints)>\n```\n\n----------------------------------------\n\nTITLE: Accessing Measurement Text from DIMENSION Entities in Python using ezdxf\nDESCRIPTION: Retrieves the measurement text from DIMENSION entities as rendered by the CAD application. This shows how the measurement was displayed when the dimension was created.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tasks/get_entity_content.rst#2025-04-23_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nfor dimension in msp.query(\"DIMENSION\"):\n    print(str(dimension))\n    print(f\"Measurement Text: {dimension.dxf.text}\")\n```\n\n----------------------------------------\n\nTITLE: Defining BoundaryPaths Class in Python\nDESCRIPTION: This snippet defines the BoundaryPaths class, which manages the boundary paths of a hatch. It includes methods for adding, modifying, and retrieving different types of boundary paths.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfentities/hatch.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass BoundaryPaths:\n    def __init__(self):\n        self.paths = []\n\n    def external_paths(self):\n        # Implement external paths retrieval\n        pass\n\n    def outermost_paths(self):\n        # Implement outermost paths retrieval\n        pass\n\n    def default_paths(self):\n        # Implement default paths retrieval\n        pass\n\n    def rendering_paths(self):\n        # Implement rendering paths retrieval\n        pass\n\n    def append(self, path):\n        # Implement path appending\n        pass\n\n    def add_polyline_path(self, vertices, is_closed=True, flags=0):\n        # Implement polyline path addition\n        pass\n\n    def add_edge_path(self):\n        # Implement edge path addition\n        pass\n\n    def polyline_to_edge_paths(self):\n        # Implement polyline to edge path conversion\n        pass\n\n    def edge_to_polyline_paths(self):\n        # Implement edge to polyline path conversion\n        pass\n\n    def arc_edges_to_ellipse_edges(self):\n        # Implement arc to ellipse edge conversion\n        pass\n\n    def ellipse_edges_to_spline_edges(self):\n        # Implement ellipse to spline edge conversion\n        pass\n\n    def spline_edges_to_line_edges(self):\n        # Implement spline to line edge conversion\n        pass\n\n    def all_to_spline_edges(self):\n        # Implement conversion of all edges to spline edges\n        pass\n\n    def all_to_line_edges(self):\n        # Implement conversion of all edges to line edges\n        pass\n\n    def clear(self):\n        # Implement clearing of all paths\n        pass\n```\n\n----------------------------------------\n\nTITLE: Downloading and Extracting Python Source Code\nDESCRIPTION: Commands to download and extract the Python 3.9.9 source code from Python.org. The version number can be replaced with any desired Python version.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/setup.rst#2025-04-23_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\nwget https://www.python.org/ftp/python/3.9.9/Python-3.9.9.tgz\ntar -xvzf Python-3.9.9.tgz\ncd Python-3.9.9/\n```\n\n----------------------------------------\n\nTITLE: Qt PenCapStyle Constants\nDESCRIPTION: Qt framework constants for pen cap styles used in PySide and PyQt.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/Line Cap- and Join Styles.md#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nQt.FlatCap\nQt.SquareCap\nQt.RoundCap\n```\n\n----------------------------------------\n\nTITLE: Extracting Font Archive\nDESCRIPTION: Command to extract the Liberation Fonts archive file.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/fonts/liberation-fonts-ttf-2.1.1/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntar zxvf liberation-fonts-[VERSION].tar.gz\n```\n\n----------------------------------------\n\nTITLE: Creating Liberation Fonts Distribution Package\nDESCRIPTION: Command for creating a distribution package of Liberation Fonts\nSOURCE: https://github.com/mozman/ezdxf/blob/master/fonts/liberation-narrow-fonts-ttf-1.07.6/README.rst#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ make dist\n```\n\n----------------------------------------\n\nTITLE: Listing Module Path in Sphinx Documentation\nDESCRIPTION: Specifies the fully qualified import path for the clustering module to help users understand how to import it in their code.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/math/clustering.rst#2025-04-23_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\nClustering module: :mod:`ezdxf.math.clustering`\n```\n\n----------------------------------------\n\nTITLE: Building Liberation Fonts\nDESCRIPTION: Commands to navigate to the font directory and build from source.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/fonts/liberation-fonts-ttf-2.1.1/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd liberation-fonts    or   cd liberation-fonts-[VERSION]\nmake\n```\n\n----------------------------------------\n\nTITLE: Defining External Links in reStructuredText\nDESCRIPTION: This code snippet shows how to define external links in reStructuredText format. It includes links to various CAD-related websites and resources.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/glossary.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. _Autodesk: https://www.autodesk.com/\n\n.. _AutoCAD: https://www.autodesk.com/products/autocad/overview\n\n.. _DXF: https://help.autodesk.com/view/OARX/2018/ENU/?guid=GUID-235B22E0-A567-4CF6-92D3-38A2306D73F3\n\n.. _Spatial Corp.: http://www.spatial.com/products/3d-acis-modeling\n\n.. _ACIS: https://en.wikipedia.org/wiki/ACIS\n\n.. _ODA: https://www.opendesign.com/\n\n.. _downloads: https://www.opendesign.com/guestfiles\n```\n\n----------------------------------------\n\nTITLE: Using ezdxf Launcher to Display DXF File Information\nDESCRIPTION: Demonstrates the usage of the new 'info' command in the ezdxf launcher to show information about a DXF file. This command displays details such as file format, DXF version, encoding, and creation timestamps.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/Release Notes v0.18.x.md#2025-04-23_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nC:\\> ezdxf info gear.dxf\nFilename: \".\\gear.dxf\"\nFormat: ASCII\nRelease: R2013\nDXF Version: AC1027\nCodepage: ANSI_1252\nEncoding: utf-8\nCreated by ezdxf: 0.18b6 @ 2022-07-06T14:21:18.530488+00:00\nWritten by ezdxf: 0.18b6 @ 2022-07-06T14:21:18.530488+00:00\n```\n\n----------------------------------------\n\nTITLE: DXF BLOCKS Section Structure Example\nDESCRIPTION: Demonstrates the basic structure of a BLOCKS section in a DXF file, showing the hierarchy of SECTION, BLOCKS, BLOCK, and ENDBLK entities. Shows how multiple block definitions are organized within the section.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/sections/blocks_section.rst#2025-04-23_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n0           <<< start of a SECTION\nSECTION\n2           <<< start of BLOCKS section\nBLOCKS\n0           <<< start of 1. BLOCK definition\nBLOCK\n...         <<< Block content\n...\n0           <<< end of 1. Block definition\nENDBLK\n0           <<< start of 2. BLOCK definition\nBLOCK\n...         <<< Block content\n...\n0           <<< end of 2. Block definition\nENDBLK\n0           <<< end of BLOCKS section\nENDSEC\n```\n\n----------------------------------------\n\nTITLE: Cloning Liberation Fonts Repository\nDESCRIPTION: Commands for cloning the Liberation Fonts repository using Git, with both anonymous and authenticated access options\nSOURCE: https://github.com/mozman/ezdxf/blob/master/fonts/liberation-narrow-fonts-ttf-1.07.6/README.rst#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git clone https://pagure.io/liberation-fonts.git\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ git clone ssh://git@pagure.io/liberation-fonts.git\n```\n\n----------------------------------------\n\nTITLE: Loading DXF Documents from Reliable Sources using ezdxf in Python\nDESCRIPTION: This snippet demonstrates how to load DXF files from trusted sources like AutoCAD or BricsCAD using the ezdxf library. It includes error handling for I/O errors and DXF structure errors.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/Load Documents.md#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport sys\nimport ezdxf\n\ntry:\n    doc = ezdxf.readfile(\"your.dxf\")\nexcept IOError:\n    print(f\"Not a DXF file or a generic I/O error.\")\n    sys.exit(1)\nexcept ezdxf.DXFStructureError:\n    print(f\"Invalid or corrupted DXF file.\")\n    sys.exit(2)\nmsp = doc.modelspace()\n```\n\n----------------------------------------\n\nTITLE: Setting RGB Colors in DXF Entities\nDESCRIPTION: Demonstrates how to get, set and delete RGB color values for DXF entities using tuples of integers for red, green and blue values.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfentities/dxfgfx.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nentity.rgb = (30, 40, 50)  # set as tuple[int, int, int] or color.RGB\nr, g, b = entity.rgb  # returns tuple[int, int, int] or None\ndel entity.rgb  # discard true color value, no exception if not exist\n```\n\n----------------------------------------\n\nTITLE: Direct Recovery Mode Loading\nDESCRIPTION: Demonstrates using only the recovery mode for loading DXF files from untrusted sources.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/drawing/recover.rst#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\ntry:  # Slow path including fixing low level structures:\n    doc, auditor = recover.readfile(name)\nexcept IOError:\n    print(f'Not a DXF file or a generic I/O error.')\n    sys.exit(1)\nexcept ezdxf.DXFStructureError:\n    print(f'Invalid or corrupted DXF file: {name}.')\n    sys.exit(2)\n\n# DXF file can still have unrecoverable errors, but this is maybe\n# just a problem when saving the recovered DXF file.\nif auditor.has_errors:\n    print(f'Found unrecoverable errors in DXF file: {name}.')\n    auditor.print_error_report()\n```\n\n----------------------------------------\n\nTITLE: DXF File Source URL Reference in Markdown\nDESCRIPTION: Source URL reference for usa.dxf file hosted on 3axis.co\nSOURCE: https://github.com/mozman/ezdxf/blob/master/examples/addons/drawing/data/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nusa.dxf: https://3axis.co/download/lopyjzow/\n```\n\n----------------------------------------\n\nTITLE: Configuring Support Directories for Font Files in INI\nDESCRIPTION: This INI configuration snippet demonstrates how to add support directories for font files in ezdxf. It includes paths to font folders from BricsCAD and Autodesk TrueView installations.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/Recognize New Installed Fonts.md#2025-04-23_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[core]\nsupport_dirs =\n  \"C:\\Program Files\\Bricsys\\BricsCAD V23 en_US\\Fonts\",\t\n  \"C:\\Program Files\\Autodesk\\DWG TrueView 2024 - English\\Fonts\",\n```\n\n----------------------------------------\n\nTITLE: DXF Hatch Pattern Data Structure\nDESCRIPTION: DXF group codes and their meanings for defining hatch pattern data. Includes codes for pattern angle, base point coordinates, offset components, and dash length specifications.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/Hatch pattern and DXF codes.md#2025-04-23_snippet_0\n\nLANGUAGE: dxf\nCODE:\n```\n53 Pattern line angle\n43 Pattern line base point, X component\n44 Pattern line base point, Y component\n45 Pattern line offset, X component\n46 Pattern line offset, Y component\n79 Number of dash length items\n49 Dash length (multiple entries)\n```\n\n----------------------------------------\n\nTITLE: Creating BLOCK content for MultiLeader in Python\nDESCRIPTION: Shows how to create a MultiLeader entity with BLOCK content, including setting up the block and adding attribute definitions.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/mleader.rst#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nblock = create_square_block(doc, \"MyBlock\", 1, \"#00FF00\")\nbuilder = msp.add_multileader_block()\nbuilder.set_content(block.name)\nbuilder.set_attribute(0, \"Value1\")\nbuilder.set_attribute(1, \"Value2\")\n```\n\n----------------------------------------\n\nTITLE: Translated INSERT with Clipping\nDESCRIPTION: INSERT entity translated to (15,5,0) showing how clipping path maintains original coordinates.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/Exploring the transformation behavior of SPATIAL_FILTER.md#2025-04-23_snippet_1\n\nLANGUAGE: dxf\nCODE:\n```\nINSERT(#C7)\n  insert location: (15.0, 5.0, 0.0)\n  rotation: 0\n  scale-x: 1\n  scale-y: 1\n  scale-z: 1\n  SPATIAL_FILTER(#CA)\n  clipping-path: (Vec2(5.0, 5.0), Vec2(12.0, 5.0), Vec2(8.5, 12.0))\n```\n\n----------------------------------------\n\nTITLE: Populating Table Content Cells\nDESCRIPTION: Fills the table content rows with text cells using the default cell style, creating a grid of labeled cells.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/addons/tablepainter.rst#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nfor row in range(1, 4):\n    for col in range(4):\n        # cell style is \"default\"\n        table.text_cell(row, col, f\"Cell[{row}, {col}]\")\n```\n\n----------------------------------------\n\nTITLE: Removing Constant Width Setting from LWPOLYLINE in Python\nDESCRIPTION: Shows how to unset the constant width attribute of a LWPOLYLINE entity to allow individual segment width settings to take effect.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/tutorials/lwpolyline.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# no exception will be raised if const_width is already unset:\ndel line.dxf.const_width\n```\n\n----------------------------------------\n\nTITLE: Defining RST Documentation Tree Structure for DXF Entities\nDESCRIPTION: Sphinx documentation toctree directive that defines the hierarchical structure of DXF entity documentation with a maximum depth of 3 levels.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/dxfinternals/entities/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :maxdepth: 3\n\n    dimension_entity\n    mesh\n    mleader\n    mtext\n```\n\n----------------------------------------\n\nTITLE: Using Descriptors for DXF Attribute Modification in Python\nDESCRIPTION: Shows how to use the new descriptors for basic DXF attributes to simplify attribute selection and modification.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/Release Notes v0.18.x.md#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nlines.layer = \"MyLayer\"\n```\n\n----------------------------------------\n\nTITLE: Combining Entity Queries with Set Operators in Python\nDESCRIPTION: Shows how to combine multiple entity queries using set operators to create complex selections.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/Release Notes v0.18.x.md#2025-04-23_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nresult = (msp.query(\"LINE\").color == 5) | (msp.query(\"CIRCLE\").color == 1)\n```\n\n----------------------------------------\n\nTITLE: Converting OCS to WCS Coordinates in Python\nDESCRIPTION: Example of converting OCS coordinates to WCS coordinates using the ocs() method.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/Why are ARC coordinates wrong%3F.md#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nocs = arc.ocs()\nwcs_center = ocs.to_wcs(arc.dxf.center)  # center.z defines the elevation\n```\n\n----------------------------------------\n\nTITLE: Selecting Entities by Attribute Value in Python\nDESCRIPTION: Demonstrates how to use relational operators to select entities based on attribute values.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/notes/pages/Release Notes v0.18.x.md#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nlines_on_my_layer = lines.layer == \"MyLayer\"\n```\n\n----------------------------------------\n\nTITLE: Using the Global Options Object in ezdxf\nDESCRIPTION: Shows the recommended way to access the global options object in ezdxf to retrieve configuration values.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/docs/source/options.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport ezdxf\n\nvalue = ezdxf.options.attribute\n```\n\n----------------------------------------\n\nTITLE: Creating Distribution Package\nDESCRIPTION: Command for maintainers to create a new distribution package.\nSOURCE: https://github.com/mozman/ezdxf/blob/master/fonts/liberation-fonts-ttf-2.1.1/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmake dist\n```"
  }
]