[
  {
    "owner": "upstash",
    "repo": "ratelimit-js",
    "content": "TITLE: Basic Usage of Upstash Rate Limit in TypeScript\nDESCRIPTION: Demonstrates how to create and use a rate limiter that allows 10 requests per 10 seconds using the sliding window algorithm. Shows initialization, configuration, and handling limit responses.\nSOURCE: https://github.com/upstash/ratelimit-js/blob/main/README.md#2025-04-05_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Ratelimit } from \"@upstash/ratelimit\"; // for deno: see above\nimport { Redis } from \"@upstash/redis\"; // see below for cloudflare and fastly adapters\n\n// Create a new ratelimiter, that allows 10 requests per 10 seconds\nconst ratelimit = new Ratelimit({\n  redis: Redis.fromEnv(),\n  limiter: Ratelimit.slidingWindow(10, \"10 s\"),\n  analytics: true,\n  /**\n   * Optional prefix for the keys used in redis. This is useful if you want to share a redis\n   * instance with other applications and want to avoid key collisions. The default prefix is\n   * \"@upstash/ratelimit\"\n   */\n  prefix: \"@upstash/ratelimit\",\n});\n\n// Use a constant string to limit all requests with a single ratelimit\n// Or use a userID, apiKey or ip address for individual limits.\nconst identifier = \"api\";\nconst { success } = await ratelimit.limit(identifier);\n\nif (!success) {\n  return \"Unable to process at this time\";\n}\ndoExpensiveCalculation();\nreturn \"Here you go!\";\n```\n\n----------------------------------------\n\nTITLE: Implementing API Rate Limiting with Upstash in Nextjs\nDESCRIPTION: This code creates a rate-limited API endpoint in Nextjs using Upstash Ratelimit with Redis. It configures a sliding window rate limiter that allows 10 requests per 10 seconds, and returns appropriate responses based on whether the request is within limits.\nSOURCE: https://github.com/upstash/ratelimit-js/blob/main/examples/nextjs/README.md#2025-04-05_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const runtime = 'nodejs';\n\nexport const dynamic = 'force-dynamic';\n\nimport { waitUntil } from '@vercel/functions';\nimport { Ratelimit } from \"@upstash/ratelimit\";\nimport { Redis } from \"@upstash/redis\";\n\n// Create a new ratelimiter\nconst ratelimit = new Ratelimit({\n  redis: Redis.fromEnv(),\n  limiter: Ratelimit.slidingWindow(10, \"10 s\"),\n  prefix: \"@upstash/ratelimit\",\n  analytics: true\n});\n\nexport async function GET(request: Request) {\n\n  const identifier = \"api\";\n  const { success, limit, remaining, pending } = await ratelimit.limit(identifier);\n  const response = {\n    success: success,\n    limit: limit, \n    remaining: remaining\n  }\n\n  // pending is a promise for handling the analytics submission\n  waitUntil(pending)\n    \n  if (!success) {\n    return new Response(JSON.stringify(response), { status: 429 });\n  }\n  return new Response(JSON.stringify(response));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Rate Limiting in Vercel Edge API with Upstash\nDESCRIPTION: This code creates a Vercel Edge API endpoint with rate limiting using Upstash's Redis and Ratelimit libraries. It configures a sliding window rate limiter that allows 10 requests per 10-second window and returns appropriate responses based on whether the rate limit was exceeded.\nSOURCE: https://github.com/upstash/ratelimit-js/blob/main/examples/vercel-edge/README.md#2025-04-05_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const runtime = 'edge';\n\nexport const dynamic = 'force-dynamic';\n\nimport { waitUntil } from '@vercel/functions';\nimport { Ratelimit } from \"@upstash/ratelimit\";\nimport { Redis } from \"@upstash/redis\";\n\n// Create a new ratelimiter\nconst ratelimit = new Ratelimit({\n  redis: Redis.fromEnv(),\n  limiter: Ratelimit.slidingWindow(10, \"10 s\"),\n  prefix: \"@upstash/ratelimit\",\n  analytics: true\n});\n\nexport async function GET(request: Request) {\n\n  const identifier = \"api\";\n  const { success, limit, remaining, pending } = await ratelimit.limit(identifier);\n  const response = {\n    success: success,\n    limit: limit, \n    remaining: remaining\n  }\n\n  // pending is a promise for handling the analytics submission\n  waitUntil(pending)\n    \n  if (!success) {\n    return new Response(JSON.stringify(response), { status: 429 });\n  }\n  return new Response(JSON.stringify(response));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Upstash Ratelimit in a Remix Route with Redis\nDESCRIPTION: A complete example of integrating @upstash/ratelimit in a Remix route. The code initializes a Redis connection, configures rate limiting parameters, implements a loader function that identifies users by IP address, and renders rate limit information in a React component.\nSOURCE: https://github.com/upstash/ratelimit-js/blob/main/examples/remix/README.md#2025-04-05_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { json } from \"@remix-run/node\";\nimport type { LoaderArgs } from \"@remix-run/node\";\nimport { useLoaderData } from \"@remix-run/react\";\nimport { Ratelimit } from \"@upstash/ratelimit\";\nimport { Redis } from \"@upstash/redis\";\n\nconst ratelimit = new Ratelimit({\n  redis: Redis.fromEnv(),\n  limiter: Ratelimit.fixedWindow(10, \"60 s\"),\n  analytics: true,\n});\n\nexport const loader = async (args: LoaderArgs) => {\n  // getting the ip can be different depending on your hosting provider\n  const ip = args.request.headers.get(\"X-Forwarded-For\") ?? args.request.headers.get(\"x-real-ip\");\n  const identifier = ip ?? \"global\";\n  const { success, limit, remaining, reset } = await ratelimit.limit(identifier);\n  return json(\n    {\n      success,\n      limit,\n      remaining,\n      reset,\n      identifier,\n    },\n    {\n      headers: {\n        \"X-RateLimit-Limit\": limit.toString(),\n        \"X-RateLimit-Remaining\": remaining.toString(),\n        \"X-RateLimit-Reset\": reset.toString(),\n      },\n    },\n  );\n};\n\nexport default function Index() {\n  const ratelimitResponse = useLoaderData<typeof loader>();\n\n  return (\n    <div style={{ fontFamily: \"system-ui, sans-serif\", lineHeight: \"1.4\" }}>\n      <h1>Welcome to @upstash/ratelimit in Remix app</h1>\n      <code>\n        <pre>{JSON.stringify(ratelimitResponse, null, 2)}</pre>\n      </code>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Rate Limiting Middleware in Nextjs with Upstash Redis\nDESCRIPTION: This code snippet demonstrates how to set up rate limiting middleware in a Nextjs project using Upstash Redis. It initializes a Ratelimit instance, checks the rate limit for each request, and redirects to a blocked endpoint if the limit is exceeded. The middleware also sets custom headers to indicate rate limit status.\nSOURCE: https://github.com/upstash/ratelimit-js/blob/main/examples/nextjs-middleware/README.md#2025-04-05_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Ratelimit } from \"@upstash/ratelimit\";\nimport { Redis } from \"@upstash/redis\";\nimport { type NextFetchEvent, type NextRequest, NextResponse } from \"next/server\";\n\nconst ratelimit = new Ratelimit({\n  redis: Redis.fromEnv(),\n  limiter: Ratelimit.fixedWindow(10, \"10s\"),\n  ephemeralCache: new Map(),\n  prefix: \"@upstash/ratelimit\",\n  analytics: true,\n});\n\nexport default async function middleware(\n  request: NextRequest,\n  context: NextFetchEvent,\n): Promise<Response | undefined> {\n  const ip = request.ip ?? \"127.0.0.1\";\n\n  const { success, pending, limit, remaining } = await ratelimit.limit(ip);\n  // we use context.waitUntil since analytics: true.\n  // see https://upstash.com/docs/oss/sdks/ts/ratelimit/gettingstarted#serverless-environments\n  context.waitUntil(pending);\n\n  const res = success\n    ? NextResponse.next()\n    : NextResponse.redirect(new URL(\"/api/blocked\", request.url));\n\n    res.headers.set(\"X-RateLimit-Success\", success.toString());\n    res.headers.set(\"X-RateLimit-Limit\", limit.toString());\n    res.headers.set(\"X-RateLimit-Remaining\", remaining.toString());\n\n  return res;\n}\n\nexport const config = {\n  matcher: \"/api\",\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Rate Limiting in Next.js API Route with Upstash\nDESCRIPTION: API route implementation using Upstash Redis for rate limiting in a Next.js application. The code creates a sliding window rate limiter that allows 10 requests per 10 seconds and returns appropriate responses based on the limit status.\nSOURCE: https://github.com/upstash/ratelimit-js/blob/main/examples/cloudflare-pages/README.md#2025-04-05_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport const runtime = 'edge';\n\nexport const dynamic = 'force-dynamic';\n\nimport { Ratelimit } from \"@upstash/ratelimit\";\nimport { Redis } from \"@upstash/redis\";\n\n// Create a new ratelimiter\nconst ratelimit = new Ratelimit({\n  redis: Redis.fromEnv(),\n  limiter: Ratelimit.slidingWindow(10, \"10 s\"),\n  prefix: \"@upstash/ratelimit\",\n});\n\nexport async function GET(request: Request) {\n\n  const identifier = \"api\";\n  const { success, limit, remaining } = await ratelimit.limit(identifier);\n  const response = {\n    success: success,\n    limit: limit, \n    remaining: remaining\n  }\n    \n  if (!success) {\n    return new Response(JSON.stringify(response), { status: 429 });\n  }\n  return new Response(JSON.stringify(response));\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Upstash Ratelimit with Protection Enabled in TSX\nDESCRIPTION: Creates a Ratelimit instance with protection enabled. This configuration enables deny list functionality that checks identifiers against a deny list managed through the Ratelimit Dashboard. When analytics is enabled, blocked requests are logged and displayed in the dashboard.\nSOURCE: https://github.com/upstash/ratelimit-js/blob/main/examples/enable-protection/README.md#2025-04-05_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst ratelimit = new Ratelimit({\n  redis: Redis.fromEnv(),\n  limiter: Ratelimit.slidingWindow(10, \"10 s\"),\n  prefix: \"@upstash/ratelimit\",\n  analytics: true,\n  enableProtection: true\n});\n```\n\n----------------------------------------\n\nTITLE: Using Ratelimit with Extended Parameters in TSX\nDESCRIPTION: Demonstrates how to call the limit method with additional parameters like IP address, user agent, and country. These parameters are checked against the deny list, and if any matches, the request will be denied. The response includes a reason parameter indicating why a request was rejected.\nSOURCE: https://github.com/upstash/ratelimit-js/blob/main/examples/enable-protection/README.md#2025-04-05_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst { success, limit, remaining, pending, reason } = await ratelimit.limit(\n  identifier, {\n    ip: ipAddress,\n    userAgent: userAgent,\n    country: country\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Upstash Rate Limit via npm\nDESCRIPTION: Command to install the Upstash Rate Limit package using npm package manager.\nSOURCE: https://github.com/upstash/ratelimit-js/blob/main/README.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @upstash/ratelimit\n```\n\n----------------------------------------\n\nTITLE: Importing Upstash Rate Limit in Deno\nDESCRIPTION: Example of importing the Ratelimit class from Upstash Rate Limit package in a Deno environment using Skypack CDN.\nSOURCE: https://github.com/upstash/ratelimit-js/blob/main/README.md#2025-04-05_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Ratelimit } from \"https://cdn.skypack.dev/@upstash/ratelimit@latest\";\n```\n\n----------------------------------------\n\nTITLE: Running Deno Rate Limiting Example\nDESCRIPTION: This command runs the up-to-date Deno rate limiting example. It requires setting environment variables for Upstash Redis REST URL and token, and grants network and environment access permissions.\nSOURCE: https://github.com/upstash/ratelimit-js/blob/main/examples/deno/README.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndeno run --allow-net --allow-env main.ts\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Local Development\nDESCRIPTION: Creates a .dev.vars file in the cloudflare-workers directory to set Upstash Redis credentials for local testing.\nSOURCE: https://github.com/upstash/ratelimit-js/blob/main/examples/cloudflare-workers/README.md#2025-04-05_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n// .dev.vars\nUPSTASH_REDIS_REST_URL=\"****\"\nUPSTASH_REDIS_REST_TOKEN=\"****\"\n```\n\n----------------------------------------\n\nTITLE: Setting Cloudflare Environment Secrets\nDESCRIPTION: Sets the Upstash Redis credentials as secrets in Cloudflare Workers environment using Wrangler CLI.\nSOURCE: https://github.com/upstash/ratelimit-js/blob/main/examples/cloudflare-workers/README.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx wrangler secret put UPSTASH_REDIS_REST_URL\nnpx wrangler secret put UPSTASH_REDIS_REST_TOKEN\n```\n\n----------------------------------------\n\nTITLE: Running Nextjs Ratelimit Example Locally\nDESCRIPTION: Command to start the Nextjs development server after setting up the required Upstash Redis environment variables.\nSOURCE: https://github.com/upstash/ratelimit-js/blob/main/examples/nextjs/README.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Running Vercel Edge API with Rate Limiting Locally\nDESCRIPTION: Command to run the Vercel Edge API application locally after setting up the required Upstash Redis environment variables.\nSOURCE: https://github.com/upstash/ratelimit-js/blob/main/examples/vercel-edge/README.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Running Nextjs Rate Limiting Example Locally\nDESCRIPTION: This bash command shows how to run the Nextjs rate limiting example locally. It requires setting up Upstash Redis environment variables before running the development server.\nSOURCE: https://github.com/upstash/ratelimit-js/blob/main/examples/nextjs-middleware/README.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Running the Project Locally with Wrangler\nDESCRIPTION: Executes the project in local development mode using Wrangler CLI.\nSOURCE: https://github.com/upstash/ratelimit-js/blob/main/examples/cloudflare-workers/README.md#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx wrangler dev\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using different package managers (npm, yarn, or pnpm). The server will run on localhost:3000 with hot-reload capabilities.\nSOURCE: https://github.com/upstash/ratelimit-js/blob/main/examples/with-vercel-kv/README.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using different package managers including npm, yarn, pnpm, and bun.\nSOURCE: https://github.com/upstash/ratelimit-js/blob/main/examples/cloudflare-pages/README.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js Project with Cloudflare C3\nDESCRIPTION: Command to create a new Next.js project using Cloudflare's C3 tool for Cloudflare Pages deployment.\nSOURCE: https://github.com/upstash/ratelimit-js/blob/main/examples/cloudflare-pages/README.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create cloudflare@latest cloudflare-pages -- --framework=next\n```\n\n----------------------------------------\n\nTITLE: Deploying Nextjs Ratelimit Example to Vercel\nDESCRIPTION: Command to deploy the Nextjs application with rate limiting to Vercel after installing the Vercel CLI and setting required environment variables.\nSOURCE: https://github.com/upstash/ratelimit-js/blob/main/examples/nextjs/README.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nvercel deploy\n```\n\n----------------------------------------\n\nTITLE: Deploying Rate-Limited API to Vercel\nDESCRIPTION: Command to deploy the rate-limited API application to Vercel after installing the Vercel CLI and configuring the required Upstash Redis environment variables.\nSOURCE: https://github.com/upstash/ratelimit-js/blob/main/examples/vercel-edge/README.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nvercel deploy\n```\n\n----------------------------------------\n\nTITLE: Deploying Nextjs Rate Limiting Example to Vercel\nDESCRIPTION: This bash command demonstrates how to deploy the Nextjs rate limiting project to Vercel. It requires installing Vercel CLI, setting up Upstash Redis environment variables on Vercel, and then running the deployment command.\nSOURCE: https://github.com/upstash/ratelimit-js/blob/main/examples/nextjs-middleware/README.md#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nvercel deploy\n```\n\n----------------------------------------\n\nTITLE: Deploying to Cloudflare Pages\nDESCRIPTION: Command to deploy the Next.js application to Cloudflare Pages after setting up the required Upstash Redis environment variables in the Cloudflare Dashboard.\nSOURCE: https://github.com/upstash/ratelimit-js/blob/main/examples/cloudflare-pages/README.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run deploy\n```\n\n----------------------------------------\n\nTITLE: Deploying the Project to Cloudflare Workers\nDESCRIPTION: Deploys the project to Cloudflare Workers using Wrangler CLI.\nSOURCE: https://github.com/upstash/ratelimit-js/blob/main/examples/cloudflare-workers/README.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx wrangler deploy\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Upstash Rate Limit\nDESCRIPTION: Instructions for running tests for the Upstash Rate Limit library using pnpm after setting required environment variables for Redis connections.\nSOURCE: https://github.com/upstash/ratelimit-js/blob/main/README.md#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm test\n```"
  }
]