[
  {
    "owner": "mdx-editor",
    "repo": "editor",
    "content": "TITLE: Creating a Dynamic Client-Only MDXEditor for Next.js\nDESCRIPTION: Implements a forwarded ref wrapper for the MDXEditor that dynamically imports the component with SSR disabled, ensuring it only renders on the client-side in Next.js.\nSOURCE: https://github.com/mdx-editor/editor/blob/main/docs/getting-started.md#2025-04-17_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n// ForwardRefEditor.tsx\nimport dynamic from 'next/dynamic'\nimport { forwardRef } from \"react\"\nimport { type MDXEditorMethods, type MDXEditorProps} from '@mdxeditor/editor'\n\n// This is the only place InitializedMDXEditor is imported directly.\nconst Editor = dynamic(() => import('./InitializedMDXEditor'), {\n  // Make sure we turn SSR off\n  ssr: false\n})\n\n// This is what is imported by other components. Pre-initialized with plugins, and ready\n// to accept other props, including a ref.\nexport const ForwardRefEditor = forwardRef<MDXEditorMethods, MDXEditorProps>((props, ref) => <Editor {...props} editorRef={ref} />)\n\n// TS complains without the following line\nForwardRefEditor.displayName = 'ForwardRefEditor'\n```\n\n----------------------------------------\n\nTITLE: Configuring MDXEditor with Multiple Plugins\nDESCRIPTION: Example showing how to configure MDXEditor with multiple plugins to enable various editing capabilities such as headings, lists, quotes, and thematic breaks.\nSOURCE: https://github.com/mdx-editor/editor/blob/main/docs/getting-started.md#2025-04-17_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MDXEditor, headingsPlugin, listsPlugin, quotePlugin, thematicBreakPlugin } from '@mdxeditor/editor'\n\nfunction App() {\n  return <MDXEditor markdown=\"# Hello world\" plugins={[headingsPlugin(), listsPlugin(), quotePlugin(), thematicBreakPlugin()]} />\n}\n```\n\n----------------------------------------\n\nTITLE: Basic MDXEditor Implementation in Create React App\nDESCRIPTION: Simple implementation of MDXEditor in a Create React App project, showing the minimal setup required with style imports and a basic heading plugin.\nSOURCE: https://github.com/mdx-editor/editor/blob/main/docs/getting-started.md#2025-04-17_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport '@mdxeditor/editor/style.css'\nimport { MDXEditor, headingsPlugin } from '@mdxeditor/editor'\n\nfunction App() {\n  return <MDXEditor markdown={'# Hello World'} plugins={[headingsPlugin()]} />\n}\n\nexport default App\n```\n\n----------------------------------------\n\nTITLE: Basic Implementation of MDXEditor React Component\nDESCRIPTION: A simple example showing how to import and use the MDXEditor component with the headings plugin. It demonstrates initializing the editor with markdown content and importing the required CSS styles.\nSOURCE: https://github.com/mdx-editor/editor/blob/main/README.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {MDXEditor, headingsPlugin} from '@mdxeditor/editor';\nimport '@mdxeditor/editor/style.css';\n\nexport default function App() {\n  return <MDXEditor markdown={'# Hello World'} plugins={[headingsPlugin()]} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Using MDXEditor Ref Methods for Content Manipulation\nDESCRIPTION: Example of using ref methods like setMarkdown and getMarkdown to manipulate the editor content programmatically and capturing changes with the onChange callback.\nSOURCE: https://github.com/mdx-editor/editor/blob/main/docs/getting-started.md#2025-04-17_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n// create a ref to the editor component\nconst ref = React.useRef<MDXEditorMethods>(null)\nreturn (\n  <>\n    <button onClick={() => ref.current?.setMarkdown('new markdown')}>Set new markdown</button>\n    <button onClick={() => console.log(ref.current?.getMarkdown())}>Get markdown</button>\n    <MDXEditor ref={ref} markdown=\"hello world\" onChange={console.log} />\n  </>\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring MDXEditor with Toolbar Plugin in React\nDESCRIPTION: This snippet demonstrates how to set up MDXEditor with a toolbar plugin, including undo/redo and text formatting options. It shows the basic structure for adding and customizing toolbar components.\nSOURCE: https://github.com/mdx-editor/editor/blob/main/docs/customizing-toolbar.md#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport '@mdxeditor/editor/style.css'\nimport { MDXEditor, UndoRedo, BoldItalicUnderlineToggles, toolbarPlugin } from '@mdxeditor/editor'\n\nfunction App() {\n  return (\n    <MDXEditor\n      markdown=\"Hello world\"\n      plugins={[\n        toolbarPlugin({\n          toolbarClassName: 'my-classname',\n          toolbarContents: () => (\n            <>\n              <UndoRedo />\n              <BoldItalicUnderlineToggles />\n            </>\n          )\n        })\n      ]}\n    />\n  )\n}\n\nexport default App\n```\n\n----------------------------------------\n\nTITLE: Implementing Front-matter Plugin in MDX Editor with TypeScript/React\nDESCRIPTION: Demonstrates how to initialize MDX Editor with the front-matter plugin and toolbar integration. The example shows both the initial markdown structure with front-matter and the component setup, including the InsertFrontmatter toolbar button for creating new front-matter blocks.\nSOURCE: https://github.com/mdx-editor/editor/blob/main/docs/front-matter.md#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// you can try a markdown without the front-matter,\n// the `InsertFrontmatter` button from the toolbar will create a new block.\n\nconst frontmatterMarkdown = `\n---\nslug: hello-world\n---\n\nthis is a cool markdown\n`\n\nexport function Frontmatter() {\n  return (\n    <MDXEditor\n      markdown={frontmatterMarkdown}\n      plugins={[frontmatterPlugin(), toolbarPlugin({ toolbarContents: () => <InsertFrontmatter /> })]}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Diff/Source Plugin with Toggle in MDX Editor\nDESCRIPTION: Basic implementation of the diff/source plugin that allows users to toggle between rich text and diff/source views. The plugin is configured with a diffMarkdown parameter for comparison and a default viewMode, wrapped in a toolbar component.\nSOURCE: https://github.com/mdx-editor/editor/blob/main/docs/diff-source.md#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<MDXEditor\n  onChange={console.log}\n  markdown={'hello world'}\n  plugins={[\n    // the viewMode parameter lets you switch the editor to diff or source mode.\n    // you can get the diffMarkdown from your backend and pass it here.\n    diffSourcePlugin({ diffMarkdown: 'An older version', viewMode: 'rich-text' }),\n    toolbarPlugin({\n      toolbarContents: () => (\n        <DiffSourceToggleWrapper>\n          <UndoRedo />\n        </DiffSourceToggleWrapper>\n      )\n    })\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Accessing MDXEditor State from React Components\nDESCRIPTION: Shows how to use Gurx hooks in React components to access and modify the editor's state, including viewMode toggling.\nSOURCE: https://github.com/mdx-editor/editor/blob/main/docs/extending-the-editor.md#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport const DiffSourceToggleWrapper: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const viewMode = useCellValue(viewMode$)\n  const changeViewMode = usePublisher(viewMode$)\n\n  return (\n    <>\n      {viewMode === 'rich-text' ? (\n        children\n      ) : viewMode === 'diff' ? (\n        <span className={styles.toolbarTitleMode}>Diff mode</span>\n      ) : (\n        <span className={styles.toolbarTitleMode}>Source mode</span>\n      )}\n\n      <div style={{ marginLeft: 'auto' }}>\n        <SingleChoiceToggleGroup\n          className={styles.diffSourceToggle}\n          value={viewMode}\n          items={[\n            { title: 'Rich text', contents: <RichTextIcon />, value: 'rich-text' },\n            { title: 'Diff mode', contents: <DiffIcon />, value: 'diff' },\n            { title: 'Source', contents: <SourceIcon />, value: 'source' }\n          ]}\n          onChange={(value) => changeViewMode(value || 'rich-text')}\n        />\n      </div>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MDXEditor with Table Plugin in TypeScript React\nDESCRIPTION: This code snippet demonstrates how to set up MDXEditor with the table plugin and a toolbar for inserting tables. It includes a sample markdown string containing a table and the configuration for the MDXEditor component.\nSOURCE: https://github.com/mdx-editor/editor/blob/main/docs/tables.md#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst markdown = `\n| foo | bar |\n| --- | --- |\n| baz | bim |\n`\n//...\n<MDXEditor\n  markdown={markdown}\n  plugins={[\n    tablePlugin(),\n    toolbarPlugin({toolbarContents: () => <InsertTable />})\n  ]\n  }\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring MDXEditor with Code Block and Sandpack Support\nDESCRIPTION: Demonstrates setting up MDXEditor with code block support, including Sandpack and CodeMirror plugins. Includes configuration for default snippet content and React preset settings.\nSOURCE: https://github.com/mdx-editor/editor/blob/main/docs/code-blocks.md#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst defaultSnippetContent = `\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <h1>Hello CodeSandbox</h1>\n      <h2>Start editing to see some magic happen!</h2>\n    </div>\n  );\n}\n`.trim()\n\nconst simpleSandpackConfig: SandpackConfig = {\n  defaultPreset: 'react',\n  presets: [\n    {\n      label: 'React',\n      name: 'react',\n      meta: 'live react',\n      sandpackTemplate: 'react',\n      sandpackTheme: 'light',\n      snippetFileName: '/App.js',\n      snippetLanguage: 'jsx',\n      initialSnippetContent: defaultSnippetContent\n    }\n  ]\n}\n\nfunction App() {\n  return (\n    <MDXEditor\n      markdown=\"hello world\"\n      plugins={[\n        codeBlockPlugin({ defaultCodeBlockLanguage: 'js' }),\n        sandpackPlugin({ sandpackConfig: simpleSandpackConfig }),\n        codeMirrorPlugin({ codeBlockLanguages: { js: 'JavaScript', css: 'CSS' } }),\n        toolbarPlugin({\n          toolbarContents: () => (\n            <ConditionalContents\n              options={[\n                { when: (editor) => editor?.editorType === 'codeblock', contents: () => <ChangeCodeMirrorLanguage /> },\n                { when: (editor) => editor?.editorType === 'sandpack', contents: () => <ShowSandpackInfo /> },\n                {\n                  fallback: () => (\n                    <>\n                      <InsertCodeBlock />\n                      <InsertSandpack />\n                    </>\n                  )\n                }\n              ]}\n            />\n          )\n        })\n      ]}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a GenericDirectiveEditor for Container Directives\nDESCRIPTION: This example shows how to use the bundled GenericDirectiveEditor to handle a custom 'callout' container directive. It defines a DirectiveDescriptor that specifies how the directive should be identified and edited in the MDX editor.\nSOURCE: https://github.com/mdx-editor/editor/blob/main/docs/custom-directive-editors.md#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// markdown with a custom container directive\nconst markdown = `\n:::callout\nyou better watch out!\n::: \n\n`\n\nconst CalloutDirectiveDescriptor: DirectiveDescriptor = {\n  name: 'callout',\n  testNode(node) {\n    return node.name === 'callout'\n  },\n  // set some attribute names to have the editor display a property editor popup.\n  attributes: [],\n  // used by the generic editor to determine whether or not to render a nested editor.\n  hasChildren: true,\n  Editor: GenericDirectiveEditor\n}\n\nexport const CalloutEditor: React.FC = () => {\n  return (\n    <MDXEditor\n      onChange={console.log}\n      markdown={markdown}\n      plugins={[directivesPlugin({ directiveDescriptors: [CalloutDirectiveDescriptor] })]}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Admonitions with MDXEditor in TypeScript/React\nDESCRIPTION: Example implementation of admonitions using MDXEditor component with various directive types (note, tip, info, caution, danger). Shows how to configure the editor with necessary plugins and demonstrates different markdown syntax variations within admonitions.\nSOURCE: https://github.com/mdx-editor/editor/blob/main/docs/admonitions.md#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst admonitionMarkdown = `\n\n:::note\nfoo\n:::\n\n:::tip\nSome **content** with _Markdown_ syntax. Check [this component](https://virtuoso.dev/).\n:::\n\n:::info\nSome **content** with _Markdown_ syntax. \n:::\n\n:::caution\nSome **content** with _Markdown_ syntax.\n:::\n\n:::danger\nSome **content** with _Markdown_ syntax.\n:::\n`\n\nexport const Admonitions: React.FC = () => {\n  return (\n    <MDXEditor\n      onChange={console.log}\n      markdown={admonitionMarkdown}\n      plugins={[\n        directivesPlugin({ directiveDescriptors: [AdmonitionDirectiveDescriptor] }),\n        linkPlugin(),\n        listsPlugin(),\n        headingsPlugin(),\n        codeBlockPlugin(),\n        quotePlugin(),\n        markdownShortcutPlugin()\n      ]}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Markdown Shortcuts Plugin in MDX Editor\nDESCRIPTION: This code demonstrates how to configure the markdown shortcuts plugin in MDX Editor. The plugin must be added to the plugins array after other related plugins like headings, lists, link, and quote plugins to enable proper support for the corresponding markdown blocks.\nSOURCE: https://github.com/mdx-editor/editor/blob/main/docs/markdown-shortcuts.md#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<MDXEditor markdown=\"hello world\" plugins={[headingsPlugin(), listsPlugin(), linkPlugin(), quotePlugin(), markdownShortcutPlugin()]} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Link Autocomplete Suggestions in MDXEditor with TSX\nDESCRIPTION: This example demonstrates how to add autocomplete suggestions to the link dialog plugin. This feature is useful for CMS integrations where you can provide predefined link options to users from your application's available pages.\nSOURCE: https://github.com/mdx-editor/editor/blob/main/docs/links.md#2025-04-17_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<MDXEditor\n  markdown=\"Hello [world](https://virtuoso.dev/)\"\n  plugins={[\n    linkPlugin(),\n    linkDialogPlugin({\n      linkAutocompleteSuggestions: ['https://virtuoso.dev', 'https://mdxeditor.dev']\n    })\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Plugin with URL Autocomplete\nDESCRIPTION: Demonstrates how to set up the image plugin with an upload handler and URL autocomplete suggestions. The example shows configuration of the toolbar with an InsertImage button.\nSOURCE: https://github.com/mdx-editor/editor/blob/main/docs/images.md#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<MDXEditor\n  markdown=\"Hello world\"\n  plugins={[\n    imagePlugin({\n      imageUploadHandler: () => {\n        return Promise.resolve('https://picsum.photos/200/300')\n      },\n      imageAutocompleteSuggestions: ['https://picsum.photos/200/300', 'https://picsum.photos/200']\n    }),\n    toolbarPlugin({ toolbarContents: () => <InsertImage /> })\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Image Resizing Example with HTML Tags\nDESCRIPTION: Demonstrates how to handle images with and without dimensions using both markdown syntax and HTML img tags. Shows how the plugin handles dimension specifications.\nSOURCE: https://github.com/mdx-editor/editor/blob/main/docs/images.md#2025-04-17_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst markdown = `\n\nImage without dimensions:\n\n![](https://picsum.photos/200/300)\n\nImage with dimensions:\n\n<img src=\"https://picsum.photos/200/300\" width=\"100\" height=\"150\" />\n`\n\n<MDXEditor\n  markdown={markdown}\n  plugins={[\n    imagePlugin({ imageUploadHandler })\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Basic MDXEditor Implementation in Vite\nDESCRIPTION: Simple implementation of MDXEditor in a Vite-based React application, demonstrating import statements, basic props, and plugin usage.\nSOURCE: https://github.com/mdx-editor/editor/blob/main/docs/getting-started.md#2025-04-17_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MDXEditor } from '@mdxeditor/editor'\nimport { headingsPlugin } from '@mdxeditor/editor'\n\nimport '@mdxeditor/editor/style.css'\n\nfunction App() {\n  return <MDXEditor markdown=\"# Hello world\" plugins={[headingsPlugin()]} />\n}\n\nexport default App\n```\n\n----------------------------------------\n\nTITLE: Implementing MDXEditor with Next.js App Router (Client Component)\nDESCRIPTION: Creates an initialized MDXEditor component with plugins for use in Next.js App Router. This ensures the editor is properly configured with necessary plugins for client-side rendering.\nSOURCE: https://github.com/mdx-editor/editor/blob/main/docs/getting-started.md#2025-04-17_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n// InitializedMDXEditor.tsx\nimport type { ForwardedRef } from 'react'\nimport {\n  headingsPlugin,\n  listsPlugin,\n  quotePlugin,\n  thematicBreakPlugin,\n  markdownShortcutPlugin,\n  MDXEditor,\n  type MDXEditorMethods,\n  type MDXEditorProps\n} from '@mdxeditor/editor'\n\n// Only import this to the next file\nexport default function InitializedMDXEditor({\n  editorRef,\n  ...props\n}: { editorRef: ForwardedRef<MDXEditorMethods> | null } & MDXEditorProps) {\n  return (\n    <MDXEditor\n      plugins={[\n        // Example Plugin Usage\n        headingsPlugin(),\n        listsPlugin(),\n        quotePlugin(),\n        thematicBreakPlugin(),\n        markdownShortcutPlugin()\n      ]}\n      {...props}\n      ref={editorRef}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Plain Text Code Editor\nDESCRIPTION: Shows how to create a custom code block editor using a plain textarea element. Includes implementation of CodeBlockEditorDescriptor interface.\nSOURCE: https://github.com/mdx-editor/editor/blob/main/docs/code-blocks.md#2025-04-17_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst PlainTextCodeEditorDescriptor: CodeBlockEditorDescriptor = {\n  match: (language, meta) => true,\n  priority: 0,\n  Editor: (props) => {\n    const cb = useCodeBlockEditorContext()\n    return (\n      <div onKeyDown={(e) => e.nativeEvent.stopImmediatePropagation()}>\n        <textarea rows={3} cols={20} defaultValue={props.code} onChange={(e) => cb.setCode(e.target.value)} />\n      </div>\n    )\n  }\n}\n\nconst codeBlocksMarkdown = ''\n\nexport function CodeBlock() {\n  return (\n    <MDXEditor\n      onChange={console.log}\n      markdown={codeBlocksMarkdown}\n      plugins={[codeBlockPlugin({ codeBlockEditorDescriptors: [PlainTextCodeEditorDescriptor] })]}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JSX Component Descriptors and Toolbar Integration\nDESCRIPTION: Demonstrates setting up JSX component descriptors with different kinds of components (text/flow) and creating a toolbar button for inserting JSX elements. Includes implementation of custom editors using NestedLexicalEditor.\nSOURCE: https://github.com/mdx-editor/editor/blob/main/docs/jsx.md#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst jsxComponentDescriptors: JsxComponentDescriptor[] = [\n  {\n    name: 'MyLeaf',\n    kind: 'text', // 'text' for inline, 'flow' for block\n    // the source field is used to construct the import statement at the top of the markdown document.\n    // it won't be actually sourced.\n    source: './external',\n    // Used to construct the property popover of the generic editor\n    props: [\n      { name: 'foo', type: 'string' },\n      { name: 'bar', type: 'string' },\n      { name: 'onClick', type: 'expression' }\n    ],\n    // whether the component has children or not\n    hasChildren: true,\n    Editor: GenericJsxEditor\n  },\n  {\n    name: 'Marker',\n    kind: 'text',\n    source: './external',\n    props: [{ name: 'type', type: 'string' }],\n    hasChildren: false,\n    Editor: () => {\n      return (\n        <div style={{ border: '1px solid red', padding: 8, margin: 8, display: 'inline-block' }}>\n          <NestedLexicalEditor<MdxJsxTextElement>\n            getContent={(node) => node.children}\n            getUpdatedMdastNode={(mdastNode, children: any) => {\n              return { ...mdastNode, children }\n            }}\n          />\n        </div>\n      )\n    }\n  },\n  {\n    name: 'BlockNode',\n    kind: 'flow',\n    source: './external',\n    props: [],\n    hasChildren: true,\n    Editor: GenericJsxEditor\n  }\n]\n\n// a toolbar button that will insert a JSX element into the editor.\nconst InsertMyLeaf = () => {\n  const insertJsx = usePublisher(insertJsx$)\n  return (\n    <Button\n      onClick={() =>\n        insertJsx({\n          name: 'MyLeaf',\n          kind: 'text',\n          props: { foo: 'bar', bar: 'baz', onClick: { type: 'expression', value: '() => console.log(\"Clicked\")' } }\n        })\n      }\n    >\n      Leaf\n    </Button>\n  )\n}\n\nexport const Example = () => {\n  return (\n    <MDXEditor\n      markdown={jsxMarkdown} // the contents of the file  below\n      onChange={console.log}\n      plugins={[\n        jsxPlugin({ jsxComponentDescriptors }),\n        toolbarPlugin({\n          toolbarContents: () => (\n            <>\n              <InsertMyLeaf />\n            </>\n          )\n        })\n      ]}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Link Dialog Popover to MDXEditor with TSX\nDESCRIPTION: This code shows how to implement a floating link editor popover that appears when the cursor is inside a link. The popover allows users to edit or remove links and can be activated via keyboard shortcuts (Ctrl+K/Cmd+K).\nSOURCE: https://github.com/mdx-editor/editor/blob/main/docs/links.md#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<MDXEditor markdown=\"Hello [world](https://virtuoso.dev/)\" plugins={[linkPlugin(), linkDialogPlugin()]} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Fallback Code Editor\nDESCRIPTION: Demonstrates creating a fallback code editor using CodeMirrorEditor for handling unsupported code block types.\nSOURCE: https://github.com/mdx-editor/editor/blob/main/docs/code-blocks.md#2025-04-17_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport function FallbackCodeEditor() {\n  return (\n    <MDXEditor\n      markdown={listWithCode}\n      onChange={(md) => {\n        console.log(md)\n      }}\n      plugins={[\n        listsPlugin(),\n        codeBlockPlugin({\n          codeBlockEditorDescriptors: [{ priority: -10, match: (_) => true, Editor: CodeMirrorEditor }]\n        }),\n        sandpackPlugin({ sandpackConfig: virtuosoSampleSandpackConfig }),\n        codeMirrorPlugin({\n          codeBlockLanguages: { jsx: 'JavaScript (react)', js: 'JavaScript', css: 'CSS', tsx: 'TypeScript (react)' }\n        }),\n        diffSourcePlugin(),\n        toolbarPlugin({\n          toolbarContents: () => (\n            <DiffSourceToggleWrapper>\n              <UndoRedo />\n            </DiffSourceToggleWrapper>\n          )\n        })\n      ]}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Theming in MDXEditor with React\nDESCRIPTION: This TSX snippet shows how to apply a custom theme to the MDXEditor component. It uses the 'dark-theme' and 'dark-editor' classes and includes various plugins for enhanced functionality.\nSOURCE: https://github.com/mdx-editor/editor/blob/main/docs/theming.md#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport function CustomTheming() {\n  return (\n    <MDXEditor \n      className=\"dark-theme dark-editor\" \n      markdown={kitchenSinkMarkdown} \n      plugins={[\n        toolbarPlugin({ toolbarContents: () => <KitchenSinkToolbar /> }),\n        listsPlugin(),\n        quotePlugin(),\n        headingsPlugin(),\n        linkPlugin(),\n        linkDialogPlugin(),\n        imagePlugin(),\n        tablePlugin(),\n        thematicBreakPlugin(),\n        frontmatterPlugin(),\n        codeBlockPlugin({ defaultCodeBlockLanguage: 'txt' }),\n        sandpackPlugin({ sandpackConfig: virtuosoSampleSandpackConfig }),\n        codeMirrorPlugin({ codeBlockLanguages: { js: 'JavaScript', css: 'CSS', txt: 'text', tsx: 'TypeScript' } }),\n        directivesPlugin({ directiveDescriptors: [YoutubeDirectiveDescriptor, AdmonitionDirectiveDescriptor] }),\n        diffSourcePlugin({ viewMode: 'rich-text', diffMarkdown: 'boo' }),\n        markdownShortcutPlugin()\n      ]} \n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Link Support in MDXEditor with TSX\nDESCRIPTION: This snippet demonstrates how to enable basic markdown link support in MDXEditor by importing the linkPlugin and adding it to the plugins array. This allows the editor to properly render and handle markdown link syntax.\nSOURCE: https://github.com/mdx-editor/editor/blob/main/docs/links.md#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { linkPlugin } from '@mdxeditor/editor/plugins/link';\n// ...\n\n<MDXEditor markdown=\"Hello [world](https://virtuoso.dev/)\" plugins={[linkPlugin()]} />\n```\n\n----------------------------------------\n\nTITLE: Customizing MDXEditor Colors with CSS Variables\nDESCRIPTION: This CSS snippet demonstrates how to customize the MDXEditor's color scheme using CSS variables. It imports Radix UI color palettes and overrides the default colors with a dark theme using tomato and mauve colors. It also sets custom fonts and background colors.\nSOURCE: https://github.com/mdx-editor/editor/blob/main/docs/theming.md#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n@import url('@radix-ui/colors/tomato-dark.css');\n@import url('@radix-ui/colors/mauve-dark.css');\n\n.dark-editor {\n  --accentBase: var(--tomato-1);\n  --accentBgSubtle: var(--tomato-2);\n  --accentBg: var(--tomato-3);\n  --accentBgHover: var(--tomato-4);\n  --accentBgActive: var(--tomato-5);\n  --accentLine: var(--tomato-6);\n  --accentBorder: var(--tomato-7);\n  --accentBorderHover: var(--tomato-8);\n  --accentSolid: var(--tomato-9);\n  --accentSolidHover: var(--tomato-10);\n  --accentText: var(--tomato-11);\n  --accentTextContrast: var(--tomato-12);\n\n  --baseBase: var(--mauve-1);\n  --baseBgSubtle: var(--mauve-2);\n  --baseBg: var(--mauve-3);\n  --baseBgHover: var(--mauve-4);\n  --baseBgActive: var(--mauve-5);\n  --baseLine: var(--mauve-6);\n  --baseBorder: var(--mauve-7);\n  --baseBorderHover: var(--mauve-8);\n  --baseSolid: var(--mauve-9);\n  --baseSolidHover: var(--mauve-10);\n  --baseText: var(--mauve-11);\n  --baseTextContrast: var(--mauve-12);\n\n  --admonitionTipBg: var(--cyan4);\n  --admonitionTipBorder: var(--cyan8);\n  \n  --admonitionInfoBg: var(--grass4);\n  --admonitionInfoBorder: var(--grass8);\n\n  --admonitionCautionBg: var(--amber4);\n  --admonitionCautionBorder: var(--amber8);\n\n  --admonitionDangerBg: var(--red4);\n  --admonitionDangerBorder: var(--red8);\n\n  --admonitionNoteBg: var(--mauve-4);\n  --admonitionNoteBorder: var(--mauve-8);\n\n  font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n  --font-mono: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;\n\n  color: var(--baseText);\n  --basePageBg: black;\n  background: var(--basePageBg);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Headings in MDX Editor with TypeScript\nDESCRIPTION: Shows how to enable markdown heading support (H1-H6) using the headingsPlugin. The plugin allows users to create document structure using markdown heading syntax.\nSOURCE: https://github.com/mdx-editor/editor/blob/main/docs/basic-formatting.md#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MDXEditor, headingsPlugin } from '@mdxeditor/editor'\n\n//...\n<MDXEditor markdown=\"# Hello world\" plugins={[headingsPlugin()]} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Lists in MDX Editor with TypeScript\nDESCRIPTION: Shows how to enable ordered, unordered, and checklist functionality with nested list support using the listsPlugin. The example demonstrates both bulleted and numbered list implementations.\nSOURCE: https://github.com/mdx-editor/editor/blob/main/docs/basic-formatting.md#2025-04-17_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { listsPlugin, MDXEditor } from '@mdxeditor/editor'\n\nconst markdown = `\n  * Item 1\n  * Item 2\n  * Item 3\n    * nested item\n\n  1. Item 1\n  2. Item 2\n`\n\n//...\n<MDXEditor markdown={markdown} plugins={[listsPlugin()]} />\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Styles to MDXEditor in TSX\nDESCRIPTION: This TSX snippet demonstrates how to apply the 'prose' CSS class to the MDXEditor component using the contentEditableClassName prop.\nSOURCE: https://github.com/mdx-editor/editor/blob/main/docs/content-styling.md#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<MDXEditor \nmarkdown=\"Hello **world**!\" \ncontentEditableClassName=\"prose\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Localized MDX Editor with i18n Translation Function\nDESCRIPTION: Example showing how to create a localized version of the MDX Editor by implementing a custom translation function that integrates with i18next. The translation function accepts a key, default value, and interpolations as parameters.\nSOURCE: https://github.com/mdx-editor/editor/blob/main/docs/i18n.md#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nfunction LocalizedEditor() {\n  return <MDXEditor translation={(key, defaultValue, interpolations) => { return i18n.t(key, defaultValue, interpolations) }} />\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Image Upload Handler\nDESCRIPTION: Shows implementation of an image upload handler that processes File objects and returns URLs. The handler uses FormData to send images to a server endpoint.\nSOURCE: https://github.com/mdx-editor/editor/blob/main/docs/images.md#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nasync function imageUploadHandler(image: File) {\n  const formData = new FormData()\n  formData.append('image', image)\n  // send the file to your server and return\n  // the URL of the uploaded image in the response\n  const response = await fetch('/uploads/new', {\n    method: 'POST',\n    body: formData\n  })\n  const json = (await response.json()) as { url: string }\n  return json.url\n}\n\n;<MDXEditor markdown=\"Hello world\" plugins={[imagePlugin({ imageUploadHandler })]} />\n```\n\n----------------------------------------\n\nTITLE: Example MDX Content with JSX Components\nDESCRIPTION: Shows example markdown content that uses the configured JSX components, including inline components and block components with nested markdown content.\nSOURCE: https://github.com/mdx-editor/editor/blob/main/docs/jsx.md#2025-04-17_snippet_1\n\nLANGUAGE: md\nCODE:\n```\nimport { MyLeaf, BlockNode } from './external';\n\nA paragraph with inline jsx component <MyLeaf foo=\"bar\" bar=\"baz\" onClick={() => console.log(\"Clicked\")}>Nested _markdown_</MyLeaf> more <Marker type=\"warning\" />.\n\n<BlockNode foo=\"fooValue\">\n Content *foo*\n\nmore Content\n</BlockNode>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Headings Plugin for MDXEditor\nDESCRIPTION: Illustrates the creation of a custom headings plugin for MDXEditor, including state management, keyboard shortcuts, and Markdown conversion visitors.\nSOURCE: https://github.com/mdx-editor/editor/blob/main/docs/extending-the-editor.md#2025-04-17_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport const allowedHeadingLevels$ = Cell<ReadonlyArray<HEADING_LEVEL>>(ALL_HEADING_LEVELS, (r) => {\n  r.pub(createRootEditorSubscription$, (theRootEditor) => {\n    return theRootEditor.registerCommand<KeyboardEvent>(\n      KEY_DOWN_COMMAND,\n      (event) => {\n        // omitted for brevity - see the lexical docs for more info on editor commands.\n      },\n      COMMAND_PRIORITY_LOW\n    )\n  })\n})\n\nexport const headingsPlugin = realmPlugin<{\n  allowedHeadingLevels?: ReadonlyArray<HEADING_LEVEL>\n}>({\n  init(realm) {\n    realm.pubIn({\n      [addActivePlugin$]: 'headings',\n      [addImportVisitor$]: MdastHeadingVisitor,\n      [addLexicalNode$]: HeadingNode,\n      [addExportVisitor$]: LexicalHeadingVisitor\n    })\n  },\n  update(realm, params) {\n    realm.pub(allowedHeadingLevels$, params?.allowedHeadingLevels ?? ALL_HEADING_LEVELS)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Read-Only Diff Mode in MDX Editor\nDESCRIPTION: Implementation of diff mode with the readOnlyDiff flag set to true, which makes only the diff view read-only while allowing edits in other modes. This is useful when you want to show differences but prevent modifications to the comparison view.\nSOURCE: https://github.com/mdx-editor/editor/blob/main/docs/diff-source.md#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<MDXEditor\n  markdown={'hello world'}\n  plugins={[\n    diffSourcePlugin({\n      diffMarkdown: 'An older version',\n      viewMode: 'diff',\n      readOnlyDiff: true\n    })\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using MDXEditor insertMarkdown Method\nDESCRIPTION: Demonstrates how to insert markdown content at the current cursor position in the editor using the insertMarkdown ref method.\nSOURCE: https://github.com/mdx-editor/editor/blob/main/docs/getting-started.md#2025-04-17_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n// create a ref to the editor component\nconst ref = React.useRef<MDXEditorMethods>(null)\nreturn (\n  <>\n    <button onClick={() => ref.current?.insertMarkdown('new markdown to insert')}>Insert new markdown</button>\n    <button onClick={() => console.log(ref.current?.getMarkdown())}>Get markdown</button>\n    <MDXEditor ref={ref} markdown=\"hello world\" onChange={console.log} />\n  </>\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Full Read-Only Mode with Diff in MDX Editor\nDESCRIPTION: Implementation of the MDX Editor with the global readOnly flag set to true, making the entire editor read-only in all modes. This configuration is useful when users should be able to view but not modify the document in any view.\nSOURCE: https://github.com/mdx-editor/editor/blob/main/docs/diff-source.md#2025-04-17_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<MDXEditor\n  markdown={'hello world'}\n  readOnly={true}\n  plugins={[\n    diffSourcePlugin({\n      diffMarkdown: 'An older version',\n      viewMode: 'diff'\n    })\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom YouTube Directive Button to the Toolbar\nDESCRIPTION: This example shows how to create a toolbar button that inserts a YouTube directive into the editor. It uses the directivesPlugin state management system to insert a new directive node when the user provides a valid YouTube URL.\nSOURCE: https://github.com/mdx-editor/editor/blob/main/docs/custom-directive-editors.md#2025-04-17_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst YouTubeButton = () => {\n  // grab the insertDirective action (a.k.a. publisher) from the \n  // state management system of the directivesPlugin\n  const insertDirective = usePublisher(insertDirective$)\n\n  return (\n    <DialogButton\n      tooltipTitle=\"Insert Youtube video\"\n      submitButtonTitle=\"Insert video\"\n      dialogInputPlaceholder=\"Paste the youtube video URL\"\n      buttonContent=\"YT\"\n      onSubmit={(url) => {\n        const videoId = new URL(url).searchParams.get('v')\n        if (videoId) {\n          insertDirective({\n            name: 'youtube',\n            type: 'leafDirective',\n            attributes: { id: videoId },\n            children: []\n          } as LeafDirective)\n        } else {\n          alert('Invalid YouTube URL')\n        }\n      }}\n    />\n  )\n}\n\nexport const Youtube: React.FC = () => {\n  return (\n    <MDXEditor\n      markdown={youtubeMarkdown}\n      plugins={[\n        directivesPlugin({ directiveDescriptors: [YoutubeDirectiveDescriptor] }),\n        toolbarPlugin({\n          toolbarContents: () => {\n            return <YouTubeButton />\n          }\n        })\n      ]}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Quote Support in MDX Editor with TypeScript\nDESCRIPTION: Demonstrates implementation of blockquote functionality using the quotePlugin. This enables users to create quoted text blocks that translate to HTML blockquote elements.\nSOURCE: https://github.com/mdx-editor/editor/blob/main/docs/basic-formatting.md#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { quotePlugin , MDXEditor } from '@mdxeditor/editor'\n\nconst markdown = \"> This is a quote\"\n\n//...\n<MDXEditor markdown={markdown} plugins={[quotePlugin()]} />\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Toolbar Component in React/TypeScript\nDESCRIPTION: Implements a toolbar component that allows users to modify CSS classes of HTML elements within the MDXEditor. The component uses Lexical API to detect and update HTML nodes in the editor state, providing a simple input field for class manipulation.\nSOURCE: https://github.com/mdx-editor/editor/blob/main/docs/html.md#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst HTMLToolbarComponent = () => {\n  const [currentSelection, activeEditor] = useCellValues(currentSelection$, activeEditor$)\n\n  const currentHTMLNode = React.useMemo(() => {\n    return (\n      activeEditor?.getEditorState().read(() => {\n        const selectedNodes = currentSelection?.getNodes() || []\n        if (selectedNodes.length === 1) {\n          return $getNearestNodeOfType(selectedNodes[0], GenericHTMLNode)\n        } else {\n          return null\n        }\n      }) || null\n    )\n  }, [currentSelection, activeEditor])\n\n  return (\n    <>\n      <input\n        disabled={currentHTMLNode === null}\n        value={getCssClass(currentHTMLNode)}\n        onChange={(e) => {\n          activeEditor?.update(\n            () => {\n              const attributesWithoutClass = currentHTMLNode?.getAttributes().filter((attr) => attr.name !== 'class') || []\n              const newClassAttr: MdxJsxAttribute = { type: 'mdxJsxAttribute', name: 'class', value: e.target.value }\n              currentHTMLNode?.updateAttributes([...attributesWithoutClass, newClassAttr])\n            },\n            { discrete: true }\n          )\n          e.target.focus()\n        }}\n      />\n    </>\n  )\n}\n\nfunction getCssClass(node: GenericHTMLNode | null) {\n  return (node?.getAttributes().find((attr) => attr.name === 'class')?.value as string) ?? ''\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Directive Editor with NestedLexicalEditor\nDESCRIPTION: This snippet demonstrates how to implement a custom directive editor by wrapping the NestedLexicalEditor component. It provides more flexibility for styling and behavior than the generic editor, with a red-bordered container for the directive content.\nSOURCE: https://github.com/mdx-editor/editor/blob/main/docs/custom-directive-editors.md#2025-04-17_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst CalloutCustomDirectiveDescriptor: DirectiveDescriptor = {\n  name: 'callout',\n  testNode(node) {\n    return node.name === 'callout'\n  },\n  attributes: [],\n  hasChildren: true,\n  Editor: (props) => {\n    return (\n      <div style={{ border: '1px solid red', padding: 8, margin: 8 }}>\n        <NestedLexicalEditor<ContainerDirective>\n          block\n          getContent={(node) => node.children}\n          getUpdatedMdastNode={(mdastNode, children: any) => {\n            return { ...mdastNode, children }\n          }}\n        />\n      </div>\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Thematic Break Support in MDX Editor with TypeScript\nDESCRIPTION: Demonstrates how to implement thematic breaks (horizontal rules) using the thematicBreakPlugin. This enables users to add horizontal dividers that translate to HR elements in HTML.\nSOURCE: https://github.com/mdx-editor/editor/blob/main/docs/basic-formatting.md#2025-04-17_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { thematicBreakPlugin, MDXEditor } from '@mdxeditor/editor'\n\nconst markdown = `\nHello\n\n---\n\nWorld\n`\n\n//...\n<MDXEditor markdown={markdown} plugins={[thematicBreakPlugin()]} />\n```\n\n----------------------------------------\n\nTITLE: Implementing State Management with Gurx in MDXEditor\nDESCRIPTION: Demonstrates how to use Gurx for state management in MDXEditor, creating cells and signals, and connecting them using the pipe operator.\nSOURCE: https://github.com/mdx-editor/editor/blob/main/docs/extending-the-editor.md#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { realmPlugin, Cell, Signal } from '@mdxeditor/editor'\n\nconst myCell$ = Cell('')\n\nconst mySignal$ = Signal<number>((r) => {\n  r.link(\n    r.pipe(\n      mySignal$,\n      r.o.map((v) => `mySignal has been called ${v} times`)\n    ),\n    myCell$\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Basic MDXEditor Import in React\nDESCRIPTION: Simple import statements for including the MDXEditor component and its required CSS styles in a React project.\nSOURCE: https://github.com/mdx-editor/editor/blob/main/docs/getting-started.md#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MDXEditor } from '@mdxeditor/editor'\nimport '@mdxeditor/editor/style.css'\n```\n\n----------------------------------------\n\nTITLE: Registering Markdown Import/Export Visitors in MDXEditor Core Plugin\nDESCRIPTION: Demonstrates how to register Markdown import and export visitors in the MDXEditor core plugin for processing basic nodes like paragraphs, text, and formatting.\nSOURCE: https://github.com/mdx-editor/editor/blob/main/docs/extending-the-editor.md#2025-04-17_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// core import visitors\nrealm.pub(addImportVisitor$, MdastRootVisitor)\nrealm.pub(addImportVisitor$, MdastParagraphVisitor)\nrealm.pub(addImportVisitor$, MdastTextVisitor)\nrealm.pub(addImportVisitor$, MdastFormattingVisitor)\nrealm.pub(addImportVisitor$, MdastInlineCodeVisitor)\n\n// core export visitors\nrealm.pub(addExportVisitor$, LexicalRootVisitor)\nrealm.pub(addExportVisitor$, LexicalParagraphVisitor)\nrealm.pub(addExportVisitor$, LexicalTextVisitor)\nrealm.pub(addExportVisitor$, LexicalLinebreakVisitor)\n```\n\n----------------------------------------\n\nTITLE: Styling MDXEditor Content with CSS\nDESCRIPTION: This CSS snippet defines styles for the 'prose' class, which can be used to customize the font family and font weight of the editor content.\nSOURCE: https://github.com/mdx-editor/editor/blob/main/docs/content-styling.md#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.prose {\n  font-family: \"Inter\", sans-serif;\n}\n\n.prose strong {\n  font-weight: 600;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring String Property Type JSX Component\nDESCRIPTION: Example of configuring a JSX component descriptor with a string property type that produces quoted attribute values.\nSOURCE: https://github.com/mdx-editor/editor/blob/main/docs/jsx.md#2025-04-17_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst jsxComponentDescriptors: JsxComponentDescriptor[] = [\n  {\n    name: 'MyLeaf',\n    kind: 'text',\n    props: [\n      { name: 'foo', type: 'string' } // Textual property type\n    ],\n    hasChildren: true,\n    Editor: GenericJsxEditor\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Markdown Directive Syntax for YouTube Videos\nDESCRIPTION: This snippet shows the basic syntax for a custom YouTube directive in Markdown. It demonstrates how directives can be used to embed rich content like videos with additional parameters.\nSOURCE: https://github.com/mdx-editor/editor/blob/main/docs/custom-directive-editors.md#2025-04-17_snippet_0\n\nLANGUAGE: md\nCODE:\n```\nThis is the syntax for a custom YouTube directive.\n\n::youtube[Video of a cat in a box]{#01ab2cd3efg}\n```\n\n----------------------------------------\n\nTITLE: Next.js Pages Router Configuration for MDXEditor\nDESCRIPTION: Configuration for Next.js Pages Router to handle ESM dependencies and enable top-level await support, required for proper functioning of MDXEditor.\nSOURCE: https://github.com/mdx-editor/editor/blob/main/docs/getting-started.md#2025-04-17_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  transpilePackages: ['@mdxeditor/editor'],\n  reactStrictMode: true,\n  webpack: (config) => {\n    // this will override the experiments\n    config.experiments = { ...config.experiments, topLevelAwait: true }\n    // this will just update topLevelAwait property of config.experiments\n    // config.experiments.topLevelAwait = true\n    return config\n  }\n}\n\nmodule.exports = nextConfig\n```\n\n----------------------------------------\n\nTITLE: Markdown Code Block Examples\nDESCRIPTION: Examples of different code block types in markdown, including JavaScript, CSS, and React Sandpack blocks.\nSOURCE: https://github.com/mdx-editor/editor/blob/main/docs/code-blocks.md#2025-04-17_snippet_1\n\nLANGUAGE: md\nCODE:\n```\nBlocks of code\n\nJavaScript:\n\n```js\nexport default function App() {\n  return <h1>Hello world from a markdown</h1>\n}\n```\n\nCSS:\n\n```css\nbody {\n  color: red;\n}\n```\n\nReact Sandpack:\n\n```tsx live react\nexport default function App() {\n  return <h1>Hello world from a markdown</h1>\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing a Live Editable React Component\nDESCRIPTION: A live JSX code example that renders a React component with descriptive paragraphs. This example is interactive and updates the markdown when edited.\nSOURCE: https://github.com/mdx-editor/editor/blob/main/docs/live-demo-contents.md#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function App() {\n  return (<div>\n  <p>This is a live React component, that's being previewed in codesandbox. </p>\n  <p>Editing it will update the fenced codeblock in the markdown.</p>\n  </div>)\n}\n```\n\n----------------------------------------\n\nTITLE: Live React Component Demonstration\nDESCRIPTION: This is a live React component that can be edited and previewed in real-time. It demonstrates the capability of MDXEditor to render and update live code examples, which are then reflected in the markdown.\nSOURCE: https://github.com/mdx-editor/editor/blob/main/src/examples/assets/live-demo-contents.md#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function App() {\n  return (<div>\n  <p>This is a live React component, that's being previewed in codesandbox. </p>\n  <p>Editing it will update the fenced codeblock in the markdown.</p>\n  </div>)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Expression Property Type JSX Component\nDESCRIPTION: Example of configuring a JSX component descriptor with an expression property type that produces curly brace-wrapped values.\nSOURCE: https://github.com/mdx-editor/editor/blob/main/docs/jsx.md#2025-04-17_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst jsxComponentDescriptors: JsxComponentDescriptor[] = [\n  {\n    name: 'MyLeaf',\n    kind: 'text',\n    props: [\n      { name: 'foo', type: 'expression' } // Expression property type\n    ],\n    hasChildren: true,\n    Editor: GenericJsxEditor\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Live React Component Example\nDESCRIPTION: Interactive React component example with live preview functionality.\nSOURCE: https://github.com/mdx-editor/editor/blob/main/src/examples/assets/code-blocks.md#2025-04-17_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function App() {\n  return <h1>Hello world from a markdown</h1>\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Basic React Component in TSX\nDESCRIPTION: A simple TSX code example that demonstrates the basic structure of a React component that returns a div with 'Hello world' text.\nSOURCE: https://github.com/mdx-editor/editor/blob/main/docs/live-demo-contents.md#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function App() {\n  return (<div>Hello world</div>)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Flow Chart Diagram with Mermaid Markdown\nDESCRIPTION: This mermaid markdown snippet defines a top-down flow chart that illustrates a chart creation process. The diagram shows the flow from entering a chart definition, previewing it, making a decision to keep or edit it, and finally saving the image and code before returning to preview.\nSOURCE: https://github.com/mdx-editor/editor/blob/main/src/examples/assets/mermaid-code.md#2025-04-17_snippet_0\n\nLANGUAGE: mmd\nCODE:\n```\ngraph TD\n    A[Enter Chart Definition] --> B(Preview)\n    B --> C{decide}\n    C --> D[Keep]\n    C --> E[Edit Definition]\n    E --> B\n    D --> F[Save Image and Code]\n    F --> B\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components\nDESCRIPTION: Imports custom leaf and block node components from external file for use in MDX content.\nSOURCE: https://github.com/mdx-editor/editor/blob/main/src/examples/assets/jsx.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { MyLeaf, BlockNode } from './external';\n```\n\n----------------------------------------\n\nTITLE: Creating a Markdown Table with Syntax, Description, and Profit Columns\nDESCRIPTION: This snippet demonstrates how to create a table in Markdown with three columns. It includes header row alignment, basic text content, and shows how to use italic formatting within a table cell.\nSOURCE: https://github.com/mdx-editor/editor/blob/main/src/examples/assets/table.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Syntax      | Description   | Profit |\n| ----------- | ------------- | ------:|\n| Header      | Title         | 50     |\n| Paragraph   | Text *italic*   | 70     |\n```\n\n----------------------------------------\n\nTITLE: MDX Content with Inline Components\nDESCRIPTION: Demonstrates usage of custom components within MDX content, including inline components with props and markdown formatting.\nSOURCE: https://github.com/mdx-editor/editor/blob/main/src/examples/assets/jsx.md#2025-04-17_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\nA paragraph with inline jsx component <MyLeaf foo=\"fooValue\">Meh more _Leaf_</MyLeaf> more <Marker type=\"warning\" />.\n\n<BlockNode foo=\"fooValue\">\n  Content *foo*\n\nmore Content\n</BlockNode>\n\nsomething more.\n\n<UnknownJsxNode>What</UnknownJsxNode>\n\n<MyLeaf foo=\"fooValue\">Some content</MyLeaf>\n\n<MyLeaf foo=\"fooValue\" />\n```\n\n----------------------------------------\n\nTITLE: Info Admonition with Markdown\nDESCRIPTION: Demonstrates info admonition block with formatted markdown content including bold, italic, inline code and internal links\nSOURCE: https://github.com/mdx-editor/editor/blob/main/src/examples/assets/admonition.md#2025-04-17_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\n:::info\n\nSome **content** with _Markdown_ `syntax`. Check [this `api`](#).\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Caution Admonition with Markdown\nDESCRIPTION: Shows caution admonition with formatted markdown content including bold, italic, inline code and internal links\nSOURCE: https://github.com/mdx-editor/editor/blob/main/src/examples/assets/admonition.md#2025-04-17_snippet_3\n\nLANGUAGE: mdx\nCODE:\n```\n:::caution\n\nSome **content** with _Markdown_ `syntax`. Check [this `api`](#).\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Danger Admonition with Markdown List\nDESCRIPTION: Demonstrates danger admonition with formatted markdown content including bold, italic, inline code, internal links and bullet points\nSOURCE: https://github.com/mdx-editor/editor/blob/main/src/examples/assets/admonition.md#2025-04-17_snippet_4\n\nLANGUAGE: mdx\nCODE:\n```\n:::danger\n\nSome **content** with _Markdown_ `syntax`. Check [this `api`](#).\n\n* some bullet lists\n* more bullets\n* more bullets\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Tip Admonition with Markdown\nDESCRIPTION: Shows tip admonition with formatted markdown content including bold, italic, inline code and links\nSOURCE: https://github.com/mdx-editor/editor/blob/main/src/examples/assets/admonition.md#2025-04-17_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n:::tip\n\nSome **content** with _Markdown_ `syntax`. Check [this `api`](https://google.com/).\n\n:::\n```\n\n----------------------------------------\n\nTITLE: HTML Tag Example in Markdown\nDESCRIPTION: Example of HTML-like formatting that might cause parsing issues in MDX Editor if not properly configured\nSOURCE: https://github.com/mdx-editor/editor/blob/main/docs/error-handling.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nu\n```\n\n----------------------------------------\n\nTITLE: Note Admonition in MDX\nDESCRIPTION: Demonstrates basic note admonition block syntax with simple content\nSOURCE: https://github.com/mdx-editor/editor/blob/main/src/examples/assets/admonition.md#2025-04-17_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n:::note\n\nfoo\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Running MDXEditor Development Server\nDESCRIPTION: Command to start the development server to preview available examples in the browser.\nSOURCE: https://github.com/mdx-editor/editor/blob/main/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm dev\n```\n\n----------------------------------------\n\nTITLE: Adding Inline Images in MDX\nDESCRIPTION: Example showing how to place multiple images inline next to each other. Both images have alt text and are loaded from external URLs without line breaks between them.\nSOURCE: https://github.com/mdx-editor/editor/blob/main/src/examples/assets/image.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n![image](https://picsum.photos/200/300) ![image](https://picsum.photos/200/300)\n```\n\n----------------------------------------\n\nTITLE: Adding Block Image in MDX\nDESCRIPTION: Example of adding a single block image with an alt text. The image is loaded from an external URL and displays as a standalone block element.\nSOURCE: https://github.com/mdx-editor/editor/blob/main/src/examples/assets/image.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n![image](https://picsum.photos/200/300)\n```\n\n----------------------------------------\n\nTITLE: String Property Type JSX Component Output\nDESCRIPTION: Shows the resulting JSX component with string property type rendering.\nSOURCE: https://github.com/mdx-editor/editor/blob/main/docs/jsx.md#2025-04-17_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<MyLeaf foo=\"bar\">Some text...</MyLeaf>\n```\n\n----------------------------------------\n\nTITLE: Expression Property Type JSX Component Output\nDESCRIPTION: Shows the resulting JSX component with expression property type rendering.\nSOURCE: https://github.com/mdx-editor/editor/blob/main/docs/jsx.md#2025-04-17_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<MyLeaf foo={bar}>Some text...</MyLeaf>\n```\n\n----------------------------------------\n\nTITLE: Virtuoso List Component Implementation\nDESCRIPTION: Implementation of a virtualized list using React-Virtuoso, demonstrating efficient rendering of large datasets with custom styling per item.\nSOURCE: https://github.com/mdx-editor/editor/blob/main/src/examples/assets/code-blocks.md#2025-04-17_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Virtuoso } from 'react-virtuoso'\nimport { generateUsers } from './data'\n\nexport default function App() {\n  return (\n    <Virtuoso\n      style={{ height: 400 }}\n      data={generateUsers(100000)}\n      itemContent={(index, user) => (\n        <div\n          style={{\n            backgroundColor: user.bgColor,\n            padding: '1rem 0.5rem',\n          }}\n        >\n          <h4>{user.name}</h4>\n          <div style={{ marginTop: '1rem' }}>{user.description}</div>\n        </div>\n      )}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic React Component in JSX\nDESCRIPTION: Simple React component that renders a hello world message in an h1 tag.\nSOURCE: https://github.com/mdx-editor/editor/blob/main/src/examples/assets/code-blocks.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function App() {\n  return <h1>Hello world from a markdown</h1>\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Simple React Component in TSX\nDESCRIPTION: This code snippet demonstrates a basic React component that renders a 'Hello world' message. It's written in TSX and shows the default export of a functional component.\nSOURCE: https://github.com/mdx-editor/editor/blob/main/src/examples/assets/live-demo-contents.md#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function App() {\n  return (<div>Hello world</div>)\n}\n```\n\n----------------------------------------\n\nTITLE: Live React Hello World Component in TypeScript\nDESCRIPTION: A live-editable TypeScript React component that renders an h1 heading with 'Hello world from a markdown' text. The 'live react' modifier indicates this is meant to be rendered as an interactive example.\nSOURCE: https://github.com/mdx-editor/editor/blob/main/src/examples/assets/kitchen-sink.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function App() {\n  return <h1>Hello world from a markdown</h1>\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering React Hello World Component in JavaScript\nDESCRIPTION: A simple React functional component that returns an h1 heading with 'Hello world from a markdown' text.\nSOURCE: https://github.com/mdx-editor/editor/blob/main/src/examples/assets/kitchen-sink.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function App() {\n  return <h1>Hello world from a markdown</h1>\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering React Hello World Component in TypeScript\nDESCRIPTION: A TypeScript React functional component that renders an h1 heading with 'Hello world from a markdown' text.\nSOURCE: https://github.com/mdx-editor/editor/blob/main/src/examples/assets/kitchen-sink.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function App() {\n  return <h1>Hello world from a markdown</h1>\n}\n```\n\n----------------------------------------\n\nTITLE: Basic CSS Styling\nDESCRIPTION: CSS snippet that sets the text color to red for the body element.\nSOURCE: https://github.com/mdx-editor/editor/blob/main/src/examples/assets/code-blocks.md#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nbody {\n    color: red;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling HTML and Body Elements with CSS\nDESCRIPTION: Basic CSS styling that sets the font-weight property to 400 for both html and body elements.\nSOURCE: https://github.com/mdx-editor/editor/blob/main/src/examples/assets/kitchen-sink.md#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nhtml, body {\n  font-weight: 400;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing MDXEditor via NPM\nDESCRIPTION: Command to install the MDXEditor package in your React project using npm.\nSOURCE: https://github.com/mdx-editor/editor/blob/main/docs/getting-started.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save @mdxeditor/editor\n```"
  }
]