[
  {
    "owner": "postmanlabs",
    "repo": "postman-collection",
    "content": "TITLE: Defining a Simple Collection in JSON\nDESCRIPTION: A basic example of a Collection object with information block and an empty item array. The schema property is required and must be set to the proper URL.\nSOURCE: https://github.com/postmanlabs/postman-collection/blob/develop/docs/concepts.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"information\": {\n        \"name\": \"My Collection\",\n        \"version\": \"v2.0.0\",\n        \"description\": \"This is a demo collection.\",\n        \"schema\": \"https://schema.getpostman.com/json/collection/v2.0.0/\"\n    },\n    \"item\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Loading and Logging a Postman Collection in JavaScript\nDESCRIPTION: This snippet demonstrates how to load a Postman Collection from a JSON file and log its contents to the console. It uses the 'fs' module to read the file and the Postman Collection SDK to create a Collection object.\nSOURCE: https://github.com/postmanlabs/postman-collection/blob/develop/README.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar fs = require('fs'), // needed to read JSON file from disk\n\tCollection = require('postman-collection').Collection,\n\tmyCollection;\n\n// Load a collection to memory from a JSON file on disk (say, sample-collection.json)\nmyCollection = new Collection(JSON.parse(fs.readFileSync('sample-collection.json').toString()));\n\n// log items at root level of the collection\nconsole.log(myCollection.toJSON());\n```\n\n----------------------------------------\n\nTITLE: Creating an Item with Pre-request and Test Scripts in JSON\nDESCRIPTION: An example of an Item with both 'test' and 'prerequest' events. The prerequest script executes before the HTTP request is sent, while the test script runs after receiving the response.\nSOURCE: https://github.com/postmanlabs/postman-collection/blob/develop/docs/concepts.md#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"evented-item\",\n    \"name\": \"Item with Events\",\n    \"description\": \"This is an Item that contains `test and `prerequest` events.\",\n    \"request\": \"http://echo.getpostman.com/get\",\n    \"event\": [\n        {\n            \"listen\": \"prerequest\",\n            \"script\": {\n                \"type\": \"text/javascript\",\n                \"exec\": \"console.log('We are in the pre-request script, the request has not run yet!')\"\n            }\n        },\n        {\n            \"listen\": \"test\",\n            \"script\": {\n                \"type\": \"text/javascript\",\n                \"exec\": \"console.log('We are using the test script now, and the request was already sent!')\"\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Complex POST Request in JSON\nDESCRIPTION: A more elaborate Request object example showing a POST request with headers and a form-urlencoded body. Requests can be specified as strings for simple GET requests or as JSON objects for more complex configurations.\nSOURCE: https://github.com/postmanlabs/postman-collection/blob/develop/docs/concepts.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"description\": \"This is a sample POST request\",\n    \"url\": \"https://echo.getpostman.com/post\",\n    \"method\": \"POST\",\n    \"header\": [\n        {\n            \"key\": \"Content-Type\",\n            \"value\": \"application/json\"\n        },\n        {\n            \"key\": \"Host\",\n            \"value\": \"echo.getpostman.com\"\n        }\n    ],\n    \"body\": {\n        \"mode\": \"urlencoded\",\n        \"urlencoded\": [\n            {\n                \"key\": \"my-body-variable\",\n                \"value\": \"Something Awesome!\"\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Authentication in a Request\nDESCRIPTION: An example of a Request object with Basic Authentication. The SDK supports various authentication types that can be specified in the auth property.\nSOURCE: https://github.com/postmanlabs/postman-collection/blob/develop/docs/concepts.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"url\": \"https://echo.getpostman.com/basic-auth\",\n    \"method\": \"GET\",\n    \"auth\": {\n        \"type\": \"basic\",\n        \"basic\": {\n            \"username\": \"fred\",\n            \"password\": \"hunter2\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Item in JSON\nDESCRIPTION: An example of a basic Item object representing an HTTP GET request with metadata. An Item is the fundamental building block of a collection.\nSOURCE: https://github.com/postmanlabs/postman-collection/blob/develop/docs/concepts.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"my-first-item\",\n    \"name\": \"My First Item\",\n    \"description\": \"This is an Item that contains a single HTTP GET request. It doesn't really do much yet!\",\n    \"request\": \"http://echo.getpostman.com/get\",\n    \"response\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Postman Collection SDK using NPM\nDESCRIPTION: This command installs the Postman Collection SDK and saves it in the project's package.json file.\nSOURCE: https://github.com/postmanlabs/postman-collection/blob/develop/README.md#2025-04-16_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n> npm install postman-collection --save\n```\n\n----------------------------------------\n\nTITLE: Structuring an ItemGroup with Multiple Items in JSON\nDESCRIPTION: An example of an ItemGroup (folder) containing two Item objects. ItemGroups serve as containers for organizing collections, with Collections being a special type of ItemGroup with an information block.\nSOURCE: https://github.com/postmanlabs/postman-collection/blob/develop/docs/concepts.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"my-first-itemgroup\",\n    \"name\": \"First Folder\",\n    \"description\": \"This ItemGroup (Folder) contains two Items.\",\n    \"item\": [\n        {\n            \"id\": \"1\",\n            \"name\": \"Item A\",\n            \"request\": \"http://echo.getpostman.com/get\"\n        },\n        {\n            \"id\": \"2\",\n            \"name\": \"Item B\",\n            \"request\": \"http://echo.getpostman.com/headers\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Mutation Tracking in VariableScope\nDESCRIPTION: Shows how to enable mutation tracking on a Postman VariableScope object. This allows capturing any set/unset/clear operations performed on the environment variables.\nSOURCE: https://github.com/postmanlabs/postman-collection/blob/develop/docs/mutation-tracking.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar VariableScope = require('postman-collection').VariableScope,\n    environment = new VariableScope();\n\n// enables tracking mutations\nenvironment.enableTracking();\n```\n\n----------------------------------------\n\nTITLE: Applying Mutations to Another Object\nDESCRIPTION: Demonstrates how to apply captured mutations from one VariableScope object to another, effectively creating a mirror of the original object's state changes.\nSOURCE: https://github.com/postmanlabs/postman-collection/blob/develop/docs/mutation-tracking.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar environmentCopy = new VariableScope();\n\n// applies the mutations captured on `environment` into `environmentCopy` making it a mirror\nenvironment.mutations.applyOn(environmentCopy);\n```\n\n----------------------------------------\n\nTITLE: Sample Mutation Structure Example\nDESCRIPTION: Demonstrates the structure of a complex mutation format that supports additional instructions beyond simple set/unset operations.\nSOURCE: https://github.com/postmanlabs/postman-collection/blob/develop/docs/mutation-tracking.md#2025-04-16_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n['id', 'addRequest', '#', '1', 'request1']\n   |________|_________|____|________|___________ Mutation Id\n            |_________|____|________|___________ Instruction\n                      |____|________|___________ Delimiter to differentiate from first generation mutations\n                           |________|___________ Key Path\n                                    |___________ Value\n```\n\n----------------------------------------\n\nTITLE: Visualizing Collection Hierarchy with ASCII Diagram\nDESCRIPTION: An ASCII diagram showing the hierarchical relationship between Collection components including ItemGroups, Items, Requests, Responses, Events, and Information blocks.\nSOURCE: https://github.com/postmanlabs/postman-collection/blob/develop/docs/concepts.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n                                              +------------+\n                   +--------------------------+ Collection +------------------------+\n                   |                          +------+-----+                        |\n                   |                                 |                              |\n                   |                                 |                              |\n           +-------v---------+                    +--v---+                    +-----v-----+\n           |ItemGroup(Folder)|         +----------+ Item +------------+       |Information|\n           +-+-----------+---+         |          +---+--+            |       +-----------+\n             |           |             |              |               |\n    +--------v--+    +---v--+     +----v----+    +----v------+    +---v----+\n    | ItemGroup |    | Item |     | Request |    | Responses |    | Events |\n    +-----------+    +------+     +---------+    +-----------+    +--------+\n```"
  }
]