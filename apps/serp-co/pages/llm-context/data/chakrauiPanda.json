[
  {
    "owner": "chakra-ui",
    "repo": "panda",
    "content": "TITLE: Defining an Atomic Slot Recipe (sva) in TypeScript\nDESCRIPTION: This snippet demonstrates how to define an atomic slot recipe for a checkbox component using the sva function. It includes base styles, variants, and default variants for multiple slots.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/slot-recipes.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sva } from '../styled-system/css'\n\nconst checkbox = sva({\n  slots: ['root', 'control', 'label'],\n  base: {\n    root: { display: 'flex', alignItems: 'center', gap: '2' },\n    control: { borderWidth: '1px', borderRadius: 'sm' },\n    label: { marginStart: '2' }\n  },\n  variants: {\n    size: {\n      sm: {\n        control: { width: '8', height: '8' },\n        label: { fontSize: 'sm' }\n      },\n      md: {\n        control: { width: '10', height: '10' },\n        label: { fontSize: 'md' }\n      }\n    }\n  },\n  defaultVariants: {\n    size: 'sm'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Core Tokens in Panda CSS Configuration\nDESCRIPTION: Shows how to define core tokens in the panda.config.ts file under the theme key. Demonstrates setting color and font tokens.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/theming/tokens.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  theme: {\n    // 👇🏻 Define your tokens here\n    extend: {\n      tokens: {\n        colors: {\n          primary: { value: '#0FEE0F' },\n          secondary: { value: '#EE0F0F' }\n        },\n        fonts: {\n          body: { value: 'system-ui, sans-serif' }\n        }\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Recipe Variants as JSX Props\nDESCRIPTION: Example of using recipe variants as JSX props to change component styles with proper type safety.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/style-props.mdx#2025-04-18_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { styled } from '../styled-system/jsx'\nimport { button, type ButtonVariantProps } from '../styled-system/recipes'\n\nconst Button = (props: ButtonVariantProps) => (\n  <button className={button(props)}>Button</button>\n)\n\nconst App = () => <Button variant=\"secondary\">Button</Button>\n```\n\n----------------------------------------\n\nTITLE: Merging CSS Objects with the css Function in Panda CSS\nDESCRIPTION: Demonstrates how to merge multiple style objects together using the css function. The later style objects override properties from earlier ones, as seen when style2's blue background overrides style1's red background.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/merging-styles.md#2025-04-18_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { css } from 'styled-system/css'\n\nconst style1 = {\n  bg: 'red',\n  color: 'white'\n}\n\nconst style2 = {\n  bg: 'blue'\n}\n\nconst className = css(style1, style2) // => 'bg_blue text_white'\n```\n\n----------------------------------------\n\nTITLE: Generated Atomic CSS by Panda\nDESCRIPTION: Shows the resulting CSS generated by Panda at build time, demonstrating how atomic styles are created within the @layer utilities.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/writing-styles.md#2025-04-18_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@layer utilities {\n  .bg_gainsboro {\n    background-color: gainsboro;\n  }\n\n  .rounded_9999px {\n    border-radius: 9999px;\n  }\n\n  .fs_13px {\n    font-size: 13px;\n  }\n\n  .p_10px_15px {\n    padding: 10px 15px;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Compound Variants Recipe\nDESCRIPTION: Advanced button recipe implementation with compound variants and multiple conditions.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/recipes.md#2025-04-18_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { cva } from '../styled-system/css'\n\nconst button = cva({\n  base: {\n    padding: '8px 16px',\n    borderRadius: '4px',\n    fontSize: '16px',\n    fontWeight: 'bold'\n  },\n\n  variants: {\n    size: {\n      small: {\n        fontSize: '14px',\n        padding: '4px 8px'\n      },\n      medium: {\n        fontSize: '16px',\n        padding: '8px 16px'\n      },\n      large: {\n        fontSize: '18px',\n        padding: '12px 24px'\n      }\n    },\n    color: {\n      primary: {\n        backgroundColor: 'blue',\n        color: 'white'\n      },\n      secondary: {\n        backgroundColor: 'gray',\n        color: 'black'\n      }\n    },\n    disabled: {\n      true: {\n        opacity: 0.5,\n        cursor: 'not-allowed'\n      }\n    }\n  },\n\n  compoundVariants: [\n    {\n      size: 'small',\n      color: 'primary',\n      css: {\n        border: '2px solid blue'\n      }\n    },\n    {\n      size: 'large',\n      color: 'secondary',\n      disabled: true,\n      css: {\n        backgroundColor: 'lightgray',\n        color: 'darkgray',\n        border: 'none'\n      }\n    },\n    {\n      size: ['small', 'medium'],\n      color: 'secondary',\n      css: {\n        fontWeight: 'extrabold'\n      }\n    }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Using Container Pattern with Function Syntax\nDESCRIPTION: The Container pattern creates a container with max-width and centered content. This example demonstrates the function approach to create a container with default properties.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/patterns.mdx#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { container } from '../styled-system/patterns'\n\nfunction App() {\n  return (\n    <div className={container()}>\n      <div>First</div>\n      <div>Second</div>\n      <div>Third</div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: CVA (Component Variant API) Implementation\nDESCRIPTION: Shows how to use Component Variant API (CVA) with style merging and variants in Panda UI.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/writing-styles.md#2025-04-18_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport { css, cva } from '../styled-system/css'\n\nconst buttonRecipe = cva({\n  base: { display: 'flex', fontSize: 'lg' },\n  variants: {\n    variant: {\n      primary: { color: 'white', backgroundColor: 'blue.500' }\n    }\n  }\n})\n\nexport const Button = ({ css: cssProp = {}, children }) => {\n  const className = css(\n    buttonRecipe.raw({ variant: 'primary' }),\n    { _hover: { color: 'blue.400' } },\n    cssProp\n  )\n\n  return <button className={className}>{children}</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Merging Style Objects with CSS Function in React\nDESCRIPTION: Example showing how to use the updated `css` function to merge multiple style objects in React components. This approach is recommended over using the `cx` function for style merging.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_28\n\nLANGUAGE: tsx\nCODE:\n```\nimport { css, cx } from '../styled-system/css'\n\nconst App = () => {\n  return (\n    <>\n-      <div className={cx(css({ mx: '3', paddingTop: '4' }), css({ mx: '10', pt: '6' }))}>  \n+      <div className={css({ mx: '3', paddingTop: '4' }, { mx: '10', pt: '6' })}>\n        Will result in `class=\"mx_10 pt_6\"`\n      </div>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Static Expression Example with Variants\nDESCRIPTION: Shows how to use static expressions to generate style variants programmatically.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/guides/dynamic-styling.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { cva } from '.panda/css'\n\nconst getVariants = () => {\n  const spacingTokens = Object.entries({\n    sm: 'token(spacing.1)',\n    md: 'token(spacing.2)'\n  })\n\n  // Generate variants programmatically\n  const variants = spacingTokens.map(([variant, token]) => [\n    variant,\n    { paddingX: token }\n  ])\n  return Object.fromEntries(variants)\n}\n\nconst baseStyle = cva({\n  variants: {\n    variant: getVariants()\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Atomic Styles with Panda CSS in JSX\nDESCRIPTION: Demonstrates how to use the css function from Panda to generate atomic styles. The function accepts a style object and returns a className string.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/writing-styles.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { css } from '../styled-system/css'\n\nconst styles = css({\n  backgroundColor: 'gainsboro',\n  borderRadius: '9999px',\n  fontSize: '13px',\n  padding: '10px 15px'\n})\n\n// Generated className:\n// --> bg_gainsboro rounded_9999px fs_13px p_10px_15px\n\n<div className={styles}>\n  <p>Hello World</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Pseudo Props in Panda CSS\nDESCRIPTION: Shows how to use pseudo props in Panda CSS for creating nested styles, such as hover effects.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/writing-styles.md#2025-04-18_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<div\n  className={css({\n    bg: 'red.400',\n    _hover: {\n      bg: 'orange.400'\n    }\n  })}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Array Syntax for Responsive Styles in Panda CSS (JSX)\nDESCRIPTION: This snippet demonstrates the array syntax for responsive styles in Panda CSS. Each position in the array corresponds to a breakpoint, with undefined values representing breakpoints where no specific style is applied.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/responsive-design.md#2025-04-18_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<span\n  className={css({\n    fontWeight: ['medium', undefined, undefined, 'bold']\n  })}\n>\n  Text\n</span>\n```\n\n----------------------------------------\n\nTITLE: Slot Recipe Variant Props TypeScript Example\nDESCRIPTION: Shows usage of getVariantProps helper for slot recipes API with type definitions and default variants.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport { sva } from '../styled-system/css'\nimport { getVariantProps } from '../styled-system/recipes'\n\nconst button = sva({\n  slots: ['root', 'icon'],\n  // ...\n  variants: {\n    size: {\n      sm: {\n        // ...\n      },\n      md: {\n        // ...\n      },\n    },\n    variant: {\n      primary: {\n        // ...\n      },\n      danger: {\n        // ...\n      }\n    }\n  }\n  defaultVariants: {\n    size: 'md',\n    variant: 'primary',\n  }\n})\n\n// ✅ this will return the computed variants based on the defaultVariants + props passed\nconst buttonProps = button.getVariantProps({ size: \"sm\" })\n//    ^? { size: \"sm\", variant: \"primary\" }\n```\n\n----------------------------------------\n\nTITLE: Setting defaultValues in pattern configurations\nDESCRIPTION: Example of defining a horizontal stack pattern with default values. This allows setting default gap or other properties for patterns.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_59\n\nLANGUAGE: javascript\nCODE:\n```\ndefineConfig({\n  patterns: {\n    hstack: {\n      properties: {\n        justify: { type: 'property', value: 'justifyContent' },\n        gap: { type: 'property', value: 'gap' },\n      },\n      // you can also use a token like '10'\n      defaultValues: { gap: '40px' },\n      transform(props) {\n        const { justify, gap, ...rest } = props\n        return {\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: justify,\n          gap,\n          ...rest,\n        }\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Important Style Declaration\nDESCRIPTION: Shows different ways to apply important styles in Panda UI using both traditional and shorthand syntax.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/writing-styles.md#2025-04-18_snippet_20\n\nLANGUAGE: js\nCODE:\n```\ncss({\n  color: 'red !important'\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Grid Layouts with Grid Pattern\nDESCRIPTION: Shows how to create grid layouts using both function and JSX approaches. Supports configuration of columns, gaps, and child element sizing.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/patterns.mdx#2025-04-18_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nimport { grid } from '../styled-system/patterns'\n\nfunction App() {\n  return (\n    <div className={grid({ columns: 3, gap: '6' })}>\n      <div>First</div>\n      <div>Second</div>\n      <div>Third</div>\n    </div>\n  )\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Grid } from '../styled-system/jsx'\n\nfunction App() {\n  return (\n    <Grid columns={3} gap=\"6\">\n      <div>First</div>\n      <div>Second</div>\n      <div>Third</div>\n    </Grid>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using HStack Pattern with Function Syntax\nDESCRIPTION: The HStack pattern is a wrapper around the stack pattern with direction set to horizontal and elements centered vertically. This example shows the function approach with gap property.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/patterns.mdx#2025-04-18_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { hstack } from '../styled-system/patterns'\n\nfunction App() {\n  return (\n    <div className={hstack({ gap: '6' })}>\n      <div>First</div>\n      <div>Second</div>\n      <div>Third</div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Panda CSS for Next.js App Router\nDESCRIPTION: Panda CSS configuration file content for a Next.js project using App Router, specifying include paths and output directory.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/nextjs.mdx#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from \"@pandacss/dev\"\n\nexport default defineConfig({\n  // Whether to use css reset\n  preflight: true,\n\n  // Where to look for your css declarations\n  include: [\"./src/components/**/*.{ts,tsx,js,jsx}\", \"./src/app/**/*.{ts,tsx,js,jsx}\"],\n\n  // Files to exclude\n  exclude: [],\n\n  // The output directory for your css system\n  outdir: \"styled-system\",\n})\n```\n\n----------------------------------------\n\nTITLE: Converting CSS Object to Class Names with Panda's css Function\nDESCRIPTION: Demonstrates how Panda's css function transforms a CSS-in-JS object syntax to a class name string. This is the core functionality of the styled-system runtime, converting property-value pairs to corresponding atomic class names.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/styled-system.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncss({ color: 'blue.300' }) // => \"text_blue_300\"\n```\n\n----------------------------------------\n\nTITLE: Nested Styles in Panda CSS\nDESCRIPTION: Demonstrates how to use native CSS nesting syntax in Panda CSS, including targeting children and siblings.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/writing-styles.md#2025-04-18_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<div\n  className={css({\n    bg: 'red.400',\n    '&:hover': {\n      bg: 'orange.400'\n    },\n    '& span': {\n      color: 'pink.400'\n    }\n  })}\n/>\n```\n\n----------------------------------------\n\nTITLE: Strict Token Usage in Panda CSS Configuration\nDESCRIPTION: Shows how to use strictTokens and strictPropertyValues in Panda configuration to enforce token usage and valid CSS values.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/writing-styles.md#2025-04-18_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { css } from '../styled-system/css'\n\ncss({ bg: 'red' }) // ❌ Error: \"red\" is not a valid token value\ncss({ fontSize: '123px' }) // ❌ Error: \"123px\" is not a valid token value\n\ncss({ bg: 'red.400' }) // ✅ Valid\ncss({ fontSize: '[123px]' }) // ✅ Valid, since `[123px]` is using the escape-hatch syntax\ncss({ content: 'abc' }) // ✅ Valid, since `content` isn't bound to a config token\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Names and Sizes in PandaCSS\nDESCRIPTION: Configuration setup for defining custom container names and sizes in the PandaCSS theme configuration. Demonstrates how to extend the theme with custom container names and size definitions.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/conditional-styles.md#2025-04-18_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  // ...\n  theme: {\n    extend: {\n      containerNames: ['sidebar', 'content'],\n      containerSizes: {\n        xs: '40em',\n        sm: '60em',\n        md: '80em'\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Container Pattern with JSX Syntax\nDESCRIPTION: The Container pattern creates a container with max-width and centered content. This example demonstrates the JSX approach to create a container with default properties.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/patterns.mdx#2025-04-18_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Container } from '../styled-system/jsx'\n\nfunction App() {\n  return (\n    <Container>\n      <div>First</div>\n      <div>Second</div>\n      <div>Third</div>\n    </Container>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced JSX Recipe Configuration\nDESCRIPTION: Configuration for advanced JSX tracking with recipe definitions and component hints.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/recipes.md#2025-04-18_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineRecipe } from '@pandacss/dev'\n\nconst button = defineRecipe({\n  base: {\n    color: 'red',\n    fontSize: '1.5rem'\n  },\n  variants: {\n    // ...\n  },\n  jsx: ['Button', 'PageButton']\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Panda CSS and Related Dependencies\nDESCRIPTION: Commands to install Panda CSS, PostCSS, and the Gatsby PostCSS plugin. It also initializes Panda CSS in the project.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/gatsby.mdx#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D @pandacss/dev postcss gatsby-plugin-postcss\nnpx panda init --postcss\n```\n\n----------------------------------------\n\nTITLE: Supported Runtime Patterns in Panda CSS\nDESCRIPTION: Demonstrates valid usage patterns including conditional styles, arbitrary values, selectors, and runtime conditions with static CSS configuration.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/guides/dynamic-styling.md#2025-04-18_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n// ✅ Good: Conditional styles\n<styled.div color={{ base: \"red.100\", md: \"red.200\" }} />\n\n// ✅ Good: Arbitrary value\n<styled.div color=\"#121qsd\" />\n\n// ✅ Good: Arbitrary selector\n<styled.div css={{ \"&[data-thing] > span\": { color: \"red.100\" } }} />\n\n// ✅ Good: Runtime value (with config.`staticCss`)\nconst Button = () => {\n  const [color, setColor] = useState('red.300')\n  return <styled.button color={color} />\n}\n\n// ✅ Good: Runtime condition\n<styled.div color={{ base: \"red.100\", md: isHovered ? \"red.200\" : \"red.300\" }} />\n\n// ✅ Good: Referenced value\n<styled.div color={mainColor} />\n```\n\n----------------------------------------\n\nTITLE: Using Panda CSS in React Components\nDESCRIPTION: JSX example demonstrating how to use Panda's utility functions and patterns for styling React components, including horizontal stacks and CSS utility styles.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/README.md#2025-04-18_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { css } from '../styled-system/css'\nimport { stack, vstack, hstack } from '../styled-system/patterns'\n\nfunction Example() {\n  return (\n    <div>\n      <div className={hstack({ gap: '30px', color: 'pink.300' })}>Box 1</div>\n      <div className={css({ fontSize: 'lg', color: 'red.400' })}>Box 2</div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: JSX Component Implementation\nDESCRIPTION: Full example of creating a custom Button component with recipe integration and TypeScript support.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/recipes.md#2025-04-18_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react'\nimport { button, type ButtonVariants } from '../styled-system/recipes'\n\ntype ButtonProps = ButtonVariants & {\n  children: React.ReactNode\n}\n\nconst Button = (props: ButtonProps) => {\n  const { children, size } = props\n  return (\n    <button {...props} className={button({ size })}>\n      {children}\n    </button>\n  )\n}\n\nconst App = () => {\n  return (\n    <div>\n      <Button size=\"lg\">Click me</Button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Recipe-based Implementation in Panda CSS\nDESCRIPTION: Shows the recommended approach using Panda's recipe system (cva) to handle dynamic styling with proper static extraction and type safety.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/guides/dynamic-styling.md#2025-04-18_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState } from 'react'\nimport { cva } from '../styled-system/cva'\n\nconst sectionRecipe = cva({\n  base: { color: 'gray.100' },\n  variants: {\n    type: {\n      primary: { color: 'red.300' },\n      secondary: { color: 'blue.300' },\n      tertiary: { color: 'green.300' }\n    }\n  }\n})\n\nconst Section = () => {\n  const [type, setType] = useState('primary')\n\n  // ✅ Good: This will work as expected\n  return <section className={sectionRecipe({ type })}>✅ With a recipe</section>\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Spacing Tokens in Panda CSS (TypeScript)\nDESCRIPTION: This code example demonstrates how to add custom spacing tokens to the Panda CSS theme. It adds a 'gutter' spacing token with a value of '32px' in the panda.config.ts configuration file.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/customization/theme.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  theme: {\n    extend: {\n      tokens: {\n        spacing: {\n          gutter: { value: '32px' }\n        }\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Float Pattern in React with TypeScript\nDESCRIPTION: Demonstrates usage of float pattern for positioning elements relative to their container using both function and JSX approaches. Requires a parent element with relative positioning.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/patterns.mdx#2025-04-18_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nimport { css } from '../styled-system/css'\nimport { float } from '../styled-system/patterns'\n\nfunction App() {\n  return (\n    <div className={css({ position: 'relative' })}>\n      <div className={float({ placement: 'top-start' })}>3</div>\n    </div>\n  )\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { css } from '../styled-system/css'\nimport { Float } from '../styled-system/jsx'\n\nfunction App() {\n  return (\n    <div className={css({ position: 'relative' })}>\n      <Float placement=\"top-start\">3</Float>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Pattern Integration Example with HStack\nDESCRIPTION: Demonstrates how to integrate Panda UI patterns with style merging using the hstack pattern.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/writing-styles.md#2025-04-18_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport { hstack } from '../styled-system/patterns'\nimport { css } from '../styled-system/css'\n\nexport const Button = ({ css: cssProp = {}, children }) => {\n  const hstackProps = hstack.raw({\n    border: '1px solid',\n    _hover: { color: 'blue.400' }\n  })\n\n  const className = css(hstackProps, cssProp)\n\n  return <button className={className}>{children}</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Hashing Configuration in Panda UI\nDESCRIPTION: Configuration example for enabling className and CSS variable name hashing in Panda UI.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/writing-styles.md#2025-04-18_snippet_18\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  // ...\n  hash: true\n})\n```\n\n----------------------------------------\n\nTITLE: Using Token Function in CSS At-Rules\nDESCRIPTION: Example showing how to use the token() function in media and container queries to reference token values for breakpoints and sizes.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_70\n\nLANGUAGE: typescript\nCODE:\n```\ncss({\n  '@container (min-width: token(sizes.xl))': {\n    color: 'green.300',\n  },\n  '@media (min-width: token(sizes.2xl))': {\n    color: 'red.300',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Default Dark Mode with Light Option\nDESCRIPTION: Example of a dark mode by default with support for light mode using _osLight modifier.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/conditional-styles.md#2025-04-18_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\n<div\n  className={css({\n    bg: 'black',\n    _osLight: { bg: 'white' }\n  })}\n>\n  Hello\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Recipe Static CSS Options Inside Recipe Config\nDESCRIPTION: Example of specifying a recipe's staticCss options directly within the recipe configuration, allowing for more localized control over which variants are pre-generated.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_68\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineRecipe } from '@pandacss/dev'\n\nconst card = defineRecipe({\n  className: 'card',\n  base: { color: 'white' },\n  variants: {\n    size: {\n      small: { fontSize: '14px' },\n      large: { fontSize: '18px' },\n    },\n  },\n  staticCss: [{ size: ['*'] }],\n})\n```\n\n----------------------------------------\n\nTITLE: Interactive State Styling with Hover, Active and Focus\nDESCRIPTION: Styling hover, active, and focus states of a button element using the corresponding _hover, _active modifiers.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/conditional-styles.md#2025-04-18_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<button\n  className={css({\n    bg: 'red.500',\n    _hover: { bg: 'red.700' },\n    _active: { bg: 'red.900' }\n  })}\n>\n  Hover me\n</button>\n```\n\n----------------------------------------\n\nTITLE: Creating Dividers with Divider Pattern\nDESCRIPTION: Shows implementation of horizontal or vertical dividers using both function and JSX approaches. Supports customization of orientation, thickness, and color.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/patterns.mdx#2025-04-18_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\nimport { divider, stack } from '../styled-system/patterns'\n\nfunction App() {\n  return (\n    <div className={stack()}>\n      <button>First</button>\n      <div className={divider({ orientation: 'horizontal' })} />\n      <button>Second</button>\n    </div>\n  )\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Divider, Stack } from '../styled-system/jsx'\n\nfunction App() {\n  return (\n    <Stack>\n      <button>First</button>\n      <Divider orientation=\"horizontal\" />\n      <button>Second</button>\n    </Stack>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Sizing Tokens in Panda CSS (TypeScript)\nDESCRIPTION: This example shows how to add custom sizing tokens to your Panda CSS theme configuration. It demonstrates adding an 'icon' size token with a value of '24px' in the panda.config.ts file.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/customization/theme.mdx#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  theme: {\n    extend: {\n      tokens: {\n        sizes: {\n          icon: { value: '24px' }\n        }\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Patterns with definePattern in TypeScript\nDESCRIPTION: Function for pattern definitions in Panda CSS. It allows creating reusable style patterns with transformation logic applied to input properties.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/customization/config-functions.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { definePattern } from '@pandacss/dev'\n\nconst visuallyHidden = definePattern({\n  transform(props) {\n    return {\n      srOnly: true,\n      ...props\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Static CSS Configuration in JavaScript\nDESCRIPTION: Basic configuration structure for generating static CSS classes in panda.config.js\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/guides/static.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  staticCss: {\n    // the css properties you want to generate\n    css: [],\n    // the recipes you want to generate\n    recipes: {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PandaCSS Hook Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for the PandaCSS hooks system that enables advanced customization of the build pipeline. Hooks allow for configuration modification, content transformation, custom parsing, and CSS content manipulation at various points in the build process.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_69\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface PandaHooks {\n  /**\n   * Called when the config is resolved, after all the presets are loaded and merged.\n   * This is the first hook called, you can use it to tweak the config before the context is created.\n   */\n  'config:resolved': (args: { conf: LoadConfigResult }) => MaybeAsyncReturn\n  /**\n   * Called when the Panda context has been created and the API is ready to be used.\n   */\n  'context:created': (args: { ctx: ApiInterface; logger: LoggerInterface }) => void\n  /**\n   * Called when the config file or one of its dependencies (imports) has changed.\n   */\n  'config:change': (args: { config: UserConfig }) => MaybeAsyncReturn\n  /**\n   * Called after reading the file content but before parsing it.\n   * You can use this hook to transform the file content to a tsx-friendly syntax so that Panda's parser can parse it.\n   * You can also use this hook to parse the file's content on your side using a custom parser, in this case you don't have to return anything.\n   */\n  'parser:before': (args: { filePath: string; content: string }) => string | void\n  /**\n   * Called after the file styles are extracted and processed into the resulting ParserResult object.\n   * You can also use this hook to add your own extraction results from your custom parser to the ParserResult object.\n   */\n  'parser:after': (args: { filePath: string; result: ParserResultInterface | undefined }) => void\n  /**\n   * Called after the codegen is completed\n   */\n  'codegen:done': () => MaybeAsyncReturn\n  /**\n   * Called right before adding the design-system CSS (global, static, preflight, tokens, keyframes) to the final CSS\n   * Called right before writing/injecting the final CSS (styles.css) that contains the design-system CSS and the parser CSS\n   * You can use it to tweak the CSS content before it's written to disk or injected through the postcss plugin.\n   */\n  'cssgen:done': (args: {\n    artifact: 'global' | 'static' | 'reset' | 'tokens' | 'keyframes' | 'styles.css'\n    content: string\n  }) => string | void\n}\n```\n\n----------------------------------------\n\nTITLE: Text Style Composition with Panda CSS\nDESCRIPTION: Illustrates how to apply predefined text styles using the textStyle property, which combines multiple typography properties into a single composition.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/typography.md#2025-04-18_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<h1\n  className={css({\n    textStyle: 'heading/marketing'\n  })}\n>\n  Hello World\n</h1>\n```\n\n----------------------------------------\n\nTITLE: Creating Recipes with defineRecipe in TypeScript\nDESCRIPTION: Function for recipe definitions in Panda CSS. It allows defining reusable style patterns with variants and default configurations for components like buttons.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/customization/config-functions.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineRecipe } from '@pandacss/dev'\n\nexport const buttonRecipe = defineRecipe({\n  className: 'button',\n  description: 'The styles for the Button component',\n  base: {\n    display: 'flex'\n  },\n  variants: {\n    visual: {\n      funky: { bg: 'red.200', color: 'white' },\n      edgy: { border: '1px solid {colors.red.500}' }\n    }\n  },\n  defaultVariants: {\n    visual: 'funky',\n    size: 'sm'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Flex Pattern with JSX Syntax\nDESCRIPTION: The Flex pattern creates a flex container with shortcuts for flex properties. This example demonstrates the JSX approach with direction and alignment properties.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/patterns.mdx#2025-04-18_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Flex } from '../styled-system/jsx'\n\nfunction App() {\n  return (\n    <Flex direction=\"row\" align=\"center\">\n      <div>First</div>\n      <div>Second</div>\n      <div>Third</div>\n    </Flex>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: CVA Example with Raw Method for Style Merging\nDESCRIPTION: Demonstrates using the `cva.raw` method to get the raw style object from a component variant recipe. This allows for merging styles from the recipe with other style objects.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_102\n\nLANGUAGE: tsx\nCODE:\n```\nimport { css, cva } from '../styled-system/css'\n\nconst buttonRecipe = cva({\n  base: { display: 'flex', fontSize: 'lg' },\n  variants: {\n    variant: {\n      primary: { color: 'white', backgroundColor: 'blue.500' },\n    },\n  },\n})\n\nexport const Button = ({ css: cssProp = {}, children }) => {\n  const className = css(\n    // using the button recipe\n    buttonRecipe.raw({ variant: 'primary' }),\n\n    // adding style overrides (internal)\n    { _hover: { color: 'blue.400' } },\n\n    // adding style overrides (external)\n    cssProp,\n  )\n\n  return <button className={className}>{props.children}</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing className and Style Props Approaches in JSX\nDESCRIPTION: This snippet demonstrates the difference between using className with the css function and using style props with styled.button in Panda CSS.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/style-props.mdx#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { css } from '../styled-system/css'\nimport { styled } from '../styled-system/jsx'\n\n// The className approach\nconst Button = ({ children }) => (\n  <button\n    className={css({\n      bg: 'blue.500',\n      color: 'white',\n      py: '2',\n      px: '4',\n      rounded: 'md'\n    })}\n  >\n    {children}\n  </button>\n)\n\n// The style props approach\nconst Button = ({ children }) => (\n  <styled.button bg=\"blue.500\" color=\"white\" py=\"2\" px=\"4\" rounded=\"md\">\n    {children}\n  </styled.button>\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Global Font in Panda CSS Configuration\nDESCRIPTION: Shows how to set global font variables for body and monospace fonts in Panda CSS configuration.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/writing-styles.md#2025-04-18_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  // ...\n  globalCss: {\n    html: {\n      '--global-font-body': 'Inter, sans-serif',\n      '--global-font-mono': 'Mononoki Nerd Font, monospace'\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Merging Styles with CSS Function in JSX\nDESCRIPTION: Demonstrates how to merge multiple style objects using the css function, with style overrides being applied in a predictable way.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/writing-styles.md#2025-04-18_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport { css } from '../styled-system/css'\n\nconst result = css({ mx: '3', paddingTop: '4' }, { mx: '10', pt: '6' })\n//    ^? result = \"mx_10 pt_6\"\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Slot Recipes with SVA\nDESCRIPTION: Example of defining and using a slot recipe with the new `sva` function for styling multi-part components. This allows creating variant-based styles for different parts (slots) of a component.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_33\n\nLANGUAGE: jsx\nCODE:\n```\nimport { sva } from 'styled-system/css'\n\nconst button = sva({\n  slots: ['label', 'icon'],\n  base: {\n    label: { color: 'red', textDecoration: 'underline' },\n  },\n  variants: {\n    rounded: {\n      true: {},\n    },\n    size: {\n      sm: {\n        label: { fontSize: 'sm' },\n        icon: { fontSize: 'sm' },\n      },\n      lg: {\n        label: { fontSize: 'lg' },\n        icon: { fontSize: 'lg', color: 'pink' },\n      },\n    },\n  },\n  defaultVariants: {\n    size: 'sm',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using Nested Tokens in React Component with Panda CSS\nDESCRIPTION: Shows how to use nested tokens, including the DEFAULT value, in a React component using the css function.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/theming/tokens.md#2025-04-18_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { css } from '../styled-system/css'\n\nfunction App() {\n  return (\n    <div\n      className={css({\n        // 👇🏻 This will use the `DEFAULT` value\n        bg: 'bg',\n        // 👇🏻 This will use the `muted` value\n        color: 'bg.muted'\n      })}\n    >\n      Hello World\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Recipe Static CSS Options in Recipe Config\nDESCRIPTION: Example of specifying a recipe's staticCss options directly inside a recipe config. This allows defining which variants should generate static CSS directly in the recipe definition.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_103\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineRecipe } from '@pandacss/dev'\n\nconst card = defineRecipe({\n  className: 'card',\n  base: { color: 'white' },\n  variants: {\n    size: {\n      small: { fontSize: '14px' },\n      large: { fontSize: '18px' },\n    },\n  },\n  staticCss: [{ size: ['*'] }],\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Vite Project with React and TypeScript\nDESCRIPTION: Commands to create a new Vite project using the react-ts template and install dependencies. Provides options for different package managers.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/vite.mdx#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm create vite test-app --template react-ts\ncd test-app\npnpm install\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm create vite@latest test-app -- --template react-ts\ncd test-app\nnpm install\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn create vite test-app --template react-ts\ncd test-app\nyarn\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun create vite test-app --template react-ts\ncd test-app\nbun install\n```\n\n----------------------------------------\n\nTITLE: Using defaultProps Factory Option\nDESCRIPTION: Example of using the defaultProps factory option to set default values for style props and variant properties.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/style-props.mdx#2025-04-18_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport { styled } from '../styled-system/jsx'\nimport { button } from '../styled-system/recipes'\n\nconst Button = styled('button', button, {\n  defaultProps: {\n    variant: 'secondary',\n    px: '10px'\n  }\n})\n\nconst App = () => <Button>Button</Button>\n// => <button class=\"btn btn--variant_secondary px_10px\">Button</button>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Integration for Slot Recipes\nDESCRIPTION: This snippet demonstrates how to use TypeScript with slot recipes, utilizing the RecipeVariantProps type utility to infer variant properties.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/slot-recipes.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sva, type RecipeVariantProps } from '../styled-system/css'\n\nconst checkbox = sva({...})\n\nexport type CheckboxVariants = RecipeVariantProps<typeof checkbox>\n//  => { size?: 'sm' | 'md', isChecked?: boolean }\n```\n\n----------------------------------------\n\nTITLE: Using Box Pattern in JSX for Basic Styling\nDESCRIPTION: The Box pattern provides a simple wrapper without additional styles, equivalent to the `css` function but in JSX form. This example shows how to apply color styling to a Box component.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/patterns.mdx#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Box } from '../styled-system/jsx'\n\nfunction App() {\n  return (\n    <Box color=\"blue.300\">\n      <div>Cool !</div>\n    </Box>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Checkbox Component with Recipe\nDESCRIPTION: Demonstrates how to use the checkbox recipe in a React component by importing and applying the generated styles.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/slot-recipes.md#2025-04-18_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nimport { css } from '../styled-system/css'\nimport { checkbox } from '../styled-system/recipes'\n\nconst Checkbox = () => {\n  const classes = checkbox({ size: 'sm' })\n  return (\n    <label className={classes.root}>\n      <input type=\"checkbox\" className={css({ srOnly: true })} />\n      <div className={classes.control} />\n      <span className={classes.label}>Checkbox Label</span>\n    </label>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Screen Reader-Only Class in JSX with Panda CSS\nDESCRIPTION: This snippet demonstrates how to use the srOnly utility class from Panda CSS to create content that is only accessible to screen readers. The class is applied using the css function within a className prop.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/helpers.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ srOnly: true })}>Accessible only to screen readers</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Global Styles with defineGlobalStyles in TypeScript\nDESCRIPTION: Function for global styles definitions in Panda CSS. It allows creating global CSS styles that apply across your entire application, like base styles for HTML elements.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/customization/config-functions.md#2025-04-18_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineGlobalStyles } from '@pandacss/dev'\n\nconst globalCss = defineGlobalStyles({\n  'html, body': {\n    color: 'gray.900',\n    lineHeight: '1.5'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Panda Configuration in JavaScript\nDESCRIPTION: This snippet shows how to define the basic configuration structure for Panda CSS using the defineConfig function from @pandacss/dev.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/references/config.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  // your configuration options here...\n})\n```\n\n----------------------------------------\n\nTITLE: Button Component with Style Overrides\nDESCRIPTION: Implementation of a Button component that accepts style overrides through a css prop using Panda UI's css function.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/writing-styles.md#2025-04-18_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport { css } from '../styled-system/css'\n\nexport const Button = ({ css: cssProp = {}, children }) => {\n  const className = css(\n    { display: 'flex', alignItems: 'center', color: 'black' },\n    cssProp\n  )\n  return <button className={className}>{children}</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Panda CSS\nDESCRIPTION: JavaScript configuration for Panda CSS, specifying preflight, include paths, exclude paths, and output directory. This sets up the basic configuration for Panda in a project.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/cli.mdx#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  preflight: true,\n  include: ['./src/**/*.{ts,tsx,js,jsx}', './pages/**/*.{ts,tsx,js,jsx}'],\n  exclude: [],\n  outdir: 'styled-system'\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Slot Recipe Features in Panda CSS\nDESCRIPTION: Introduces new slot recipe features for styling composite or multi-part components easily. It includes 'sva' (slot version of cva) and 'defineSlotRecipe' (slot version of defineRecipe). The example shows how to define and use a slot recipe for a button component.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/cli/CHANGELOG.md#2025-04-18_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { sva } from 'styled-system/css'\n\nconst button = sva({\n  slots: ['label', 'icon'],\n  base: {\n    label: { color: 'red', textDecoration: 'underline' },\n  },\n  variants: {\n    rounded: {\n      true: {},\n    },\n    size: {\n      sm: {\n        label: { fontSize: 'sm' },\n        icon: { fontSize: 'sm' },\n      },\n      lg: {\n        label: { fontSize: 'lg' },\n        icon: { fontSize: 'lg', color: 'pink' },\n      },\n    },\n  },\n  defaultVariants: {\n    size: 'sm',\n  },\n})\n\nexport function App() {\n  const btnClass = button({ size: 'lg', rounded: true })\n\n  return (\n    <button>\n      <p class={btnClass.label}> Label</p>\n      <p class={btnClass.icon}> Icon</p>\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Data Loading State Styling\nDESCRIPTION: Styling based on data-loading attribute using _loading modifier to change background color when element is in loading state.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/conditional-styles.md#2025-04-18_snippet_21\n\nLANGUAGE: jsx\nCODE:\n```\n<div\n  data-loading\n  className={css({\n    _loading: { bg: 'gray.500' }\n  })}\n>\n  Hello\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Shorthand Properties in Panda CSS\nDESCRIPTION: Illustrates how to use shorthand properties in Panda CSS to improve development speed and reduce visual density of style declarations.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/writing-styles.md#2025-04-18_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { css } from '../styled-system/css'\n\n// BEFORE - Good\nconst styles = css({\n  backgroundColor: 'gainsboro',\n  borderRadius: '9999px',\n  fontSize: '13px',\n  padding: '10px 15px'\n})\n\n// AFTER - Better\nconst styles = css({\n  bg: 'gainsboro',\n  rounded: '9999px',\n  fontSize: '13px',\n  p: '10px 15px'\n})\n```\n\n----------------------------------------\n\nTITLE: Property Conflict Resolution\nDESCRIPTION: Shows how Panda UI handles conflicts between shorthand and longhand CSS properties.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/writing-styles.md#2025-04-18_snippet_22\n\nLANGUAGE: jsx\nCODE:\n```\nimport { css } from '../styled-system/css'\n\nconst styles = css({\n  paddingTop: '20px'\n  padding: \"10px\",\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Semantic Virtual Colors in Panda CSS Theme\nDESCRIPTION: Shows how to define semantic virtual colors in the Panda CSS theme configuration. This example creates a hierarchical color structure for buttons.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/virtual-color.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst theme = {\n  extend: {\n    semanticTokens: {\n      colors: {\n        button: {\n          dark: {\n            value: 'navy'\n          },\n          light: {\n            DEFAULT: {\n              value: 'skyblue'\n            },\n            accent: {\n              DEFAULT: {\n                value: 'cyan'\n              },\n              secondary: {\n                value: 'blue'\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JSX Tracking for Patterns in Panda CSS\nDESCRIPTION: This snippet shows how to define a pattern with JSX tracking hints. It uses the 'definePattern' function from @pandacss/dev to create a 'scrollable' pattern with JSX hints for tracking usage in components.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/patterns.mdx#2025-04-18_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nimport { definePattern } from '@pandacss/dev'\n\nconst scrollable = definePattern({\n  // ...\n  // Add the jsx hint to track the usage of the pattern in JSX, you can also use a regex to match multiple components\n  jsx: ['Scrollable', 'PageScrollable']\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Recipes with Compound Variants in Panda CSS\nDESCRIPTION: Example showing how to configure a button recipe with compound variants in panda.config.ts that will properly generate the necessary CSS classes at runtime.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/studio/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// panda.config.ts\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  theme: {\n    extend: {\n      recipes: {\n        button: {\n          // ...\n          variants: {\n            size: {\n              sm: {\n                fontSize: 'sm',\n              },\n              // ...\n            },\n          },\n          compoundVariants: [\n            {\n              size: 'sm',\n              css: { color: 'blue.100'},\n            },\n          ],\n        },\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Semantic Tokens in Separate Files with defineSemanticTokens in TypeScript\nDESCRIPTION: Using defineSemanticTokens to create semantic tokens in dedicated files for better organization. This approach separates theme-conditional token definitions for better maintainability.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/customization/config-functions.md#2025-04-18_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineSemanticTokens } from '@pandacss/dev'\n\nexport const colors = defineSemanticTokens.colors({\n  primary: {\n    value: { _light: '{colors.blue.400}', _dark: '{colors.blue.200}' }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: SVA (Slot Variant API) Implementation\nDESCRIPTION: Demonstrates the implementation of Slot Variant API (SVA) with multiple styled slots and variants.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/writing-styles.md#2025-04-18_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport { css, sva } from '../styled-system/css'\n\nconst checkbox = sva({\n  slots: ['root', 'control', 'label'],\n  base: {\n    root: { display: 'flex', alignItems: 'center', gap: '2' },\n    control: { borderWidth: '1px', borderRadius: 'sm' },\n    label: { marginStart: '2' }\n  },\n  variants: {\n    size: {\n      sm: {\n        control: { width: '8', height: '8' },\n        label: { fontSize: 'sm' }\n      },\n      md: {\n        control: { width: '10', height: '10' },\n        label: { fontSize: 'md' }\n      }\n    }\n  },\n  defaultVariants: {\n    size: 'sm'\n  }\n})\n\nexport const Checkbox = ({ rootProps, controlProps, labelProps }) => {\n  const slotStyles = checkbox.raw({ size: 'md' })\n\n  return (\n    <label className={css(slotStyles.root, rootProps)}>\n      <input type=\"checkbox\" className={css({ srOnly: true })} />\n      <div className={css(slotStyles.control, controlProps)} />\n      <span className={css(slotStyles.label, labelProps)}>Checkbox Label</span>\n    </label>\n  )\n}\n\nconst App = () => {\n  return (\n    <Checkbox\n      rootProps={css.raw({ gap: 4 })}\n      controlProps={css.raw({ borderColor: 'yellow.400' })}\n      labelProps={css.raw({ fontSize: 'lg' })}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Styled Components with Slot Targeting in Panda CSS\nDESCRIPTION: This example demonstrates how to create styled components with slot targeting using the 'sva' function, allowing for more specific styling of nested elements.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport { sva } from '../styled-system/css'\n\nconst button = sva({\n  className: 'btn',\n  slots: ['root', 'text'],\n  base: {\n    root: {\n      bg: 'blue.500',\n      _hover: {\n        // v--- 🎯 this will target the `text` slot\n        '& .btn__text': {\n          color: 'white',\n        },\n      },\n    },\n  },\n})\n\nexport const App = () => {\n  const classes = button()\n  return (\n    <div className={classes.root}>\n      <div className={classes.text}>Click me</div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Transition Properties with Panda in JSX\nDESCRIPTION: This snippet demonstrates how to apply various transition properties using Panda's css utility in JSX. It shows examples of setting transition, transition timing function, delay, and duration.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/transitions.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ transition: 'all' })} />\n<div className={css({ transitionTimingFunction: 'linear' })} />\n<div className={css({ transitionDelay: 'fast' })} />\n<div className={css({ transitionDuration: 'faster' })} />\n```\n\n----------------------------------------\n\nTITLE: Migrating from cx to css Function for Style Merging\nDESCRIPTION: Diff showing how to migrate from using cx function to the enhanced css function for merging styles, resulting in more optimized class generation.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_83\n\nLANGUAGE: diff\nCODE:\n```\nimport { css, cx } from '../styled-system/css'\n\nconst App = () => {\n  return (\n    <>\n-      <div className={cx(css({ mx: '3', paddingTop: '4' }), css({ mx: '10', pt: '6' }))}>  \n+      <div className={css({ mx: '3', paddingTop: '4' }, { mx: '10', pt: '6' })}>\n        Will result in `class=\"mx_10 pt_6\"`\n      </div>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a recipe with compound variants in Panda CSS\nDESCRIPTION: Example of defining a button recipe with base styles, size variants, and compound variants that can be overridden when used with the styled factory.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_87\n\nLANGUAGE: ts\nCODE:\n```\nconst button = defineRecipe({\n  className: 'btn',\n  base: { color: 'green', fontSize: '16px' },\n  variants: {\n    size: { small: { fontSize: '14px' } },\n  },\n  compoundVariants: [{ size: 'small', css: { color: 'blue' } }],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Animation Styles in JSX\nDESCRIPTION: Example of defining animation styles using the defineAnimationStyles function. Shows how to create conditional animations based on placement attributes with custom timing and effects.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { defineAnimationStyles } from '@pandacss/dev'\n\nexport const animationStyles = defineAnimationStyles({\n  'slide-fade-in': {\n    value: {\n      transformOrigin: 'var(--transform-origin)',\n      animationDuration: 'fast',\n      '&[data-placement^=top]': {\n        animationName: 'slide-from-top, fade-in',\n      },\n      '&[data-placement^=bottom]': {\n        animationName: 'slide-from-bottom, fade-in',\n      },\n      '&[data-placement^=left]': {\n        animationName: 'slide-from-left, fade-in',\n      },\n      '&[data-placement^=right]': {\n        animationName: 'slide-from-right, fade-in',\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using Design Tokens in Template Literals\nDESCRIPTION: Demonstrates how to reference design tokens in template literals using either the token() function or the curly braces syntax.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/template-literals.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { css } from '../styled-system/css'\n\nconst className = css`\n  font-size: {fontSizes.md};\n  font-weight: token(fontWeights.bold, 700);\n`\n```\n\n----------------------------------------\n\nTITLE: Element Positioning in Panda CSS\nDESCRIPTION: Shows how to position elements using both standard and shorthand position utilities.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/layout.md#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ position: 'absolute' })} />\n<div className={css({ pos: 'absolute' })} /> // shorthand\n```\n\n----------------------------------------\n\nTITLE: Using Media and Container Queries in Template Literals\nDESCRIPTION: Example showing how to implement nested media and container queries within template literals.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/template-literals.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst Demo = styled.div`\n  color: black;\n\n  @media (min-width: 200px) {\n    color: blue;\n  }\n\n  @container (min-width: 200px) {\n    color: red;\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Custom Utility with Color-Mix Function\nDESCRIPTION: Example of using the colorMix function in a custom utility transform to create background colors with opacity.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_111\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  utilities: {\n    background: {\n      shorthand: 'bg',\n      className: 'bg',\n      values: 'colors',\n      transform(value, args) {\n        const mix = args.utils.colorMix(value)\n        // This can happen if the value format is invalid (e.g. `bg: red.300/invalid` or `bg: red.300//10`)\n        if (mix.invalid) return { background: value }\n\n        return {\n          background: mix.value,\n        }\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using Panda CSS in React Component\nDESCRIPTION: Example of using Panda CSS in a React component, demonstrating how to apply styles using the css function.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/vite.mdx#2025-04-18_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { css } from '../styled-system/css';\n\nfunction App() {\n  return (\n    <div className={css({ fontSize: \"2xl\", fontWeight: 'bold' })}>Hello 🐼!</div>\n  )\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Using Custom Utilities in Panda CSS\nDESCRIPTION: Demonstrates how to use a custom utility in a React component with Panda CSS. This example applies a linear gradient background to an element using the previously defined linearGradient utility.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/migration/stitches.md#2025-04-18_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport { css } from '../styled-system/css'\n\nconst buttonClass = css({\n  linearGradient: '19deg, #21D4FD 0%, #B721FF 100%'\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring JSX Extraction in Panda\nDESCRIPTION: Example showing how to customize JSX extraction using parser:before hook to handle specific component properties, particularly useful for library integrations.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/hooks.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  // ...\n  hooks: {\n    'parser:before': ({ configure }) => {\n      configure({\n        // ignore the Select.Content entirely\n        matchTag: tag => tag !== 'Select.Content',\n        // ...or specifically ignore the `position` property\n        matchTagProp: (tag, prop) =>\n          tag === 'Select.Content' && prop !== 'position'\n      })\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Global Font Face in Panda Config\nDESCRIPTION: Shows how to define global font face configurations in the Panda config file, including multiple font sources and weights.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/guides/fonts.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport default defineConfig({\n  globalFontface: {\n    Fira: [\n      {\n        src: 'url(/fonts/fira.woff2) format(\"woff2\")',\n        fontWeight: 400,\n        fontStyle: 'normal',\n        fontDisplay: 'swap'\n      },\n      {\n        src: 'url(/fonts/fira-bold.woff2) format(\"woff2\")',\n        fontWeight: 700,\n        fontStyle: 'normal',\n        fontDisplay: 'swap'\n      }\n    ]\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Panda Config with Recipe\nDESCRIPTION: Configuration setup showing how to add a recipe to Panda's theme configuration.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/recipes.md#2025-04-18_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\nimport { buttonRecipe } from './button.recipe'\n\nexport default defineConfig({\n  //...\n  jsxFramework: 'react',\n  theme: {\n    extend: {\n      recipes: {\n        button: buttonRecipe\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Styling React Components with Panda CSS-in-JS\nDESCRIPTION: This snippet demonstrates how to use Panda's styling engine in a React application. It showcases the use of the css function, patterns like circle and stack, and how to apply styles directly in JSX using className.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/overview/why-panda.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { css } from '../styled-system/css'\nimport { circle, stack } from '../styled-system/patterns'\n\nfunction App() {\n  return (\n    <div\n      className={stack({\n        direction: 'row',\n        p: '4',\n        rounded: 'md',\n        shadow: 'lg',\n        bg: 'white'\n      })}\n    >\n      <div className={circle({ size: '5rem', overflow: 'hidden' })}>\n        <img src=\"https://via.placeholder.com/150\" alt=\"avatar\" />\n      </div>\n      <div className={css({ mt: '4', fontSize: 'xl', fontWeight: 'semibold' })}>\n        John Doe\n      </div>\n      <div className={css({ mt: '2', fontSize: 'sm', color: 'gray.600' })}>\n        john@doe.com\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Token Function in Composite Values\nDESCRIPTION: Shows how to use the token() function in composite CSS values with optional fallback values.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/theming/usage.mdx#2025-04-18_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { css } from '../styled-system/css'\n\nconst className = css({ border: '1px solid token(colors.red.400)' })\n```\n\nLANGUAGE: js\nCODE:\n```\nimport { css } from '../styled-system/css'\n\nconst className = css({ border: '1px solid token(colors.red.400, red)' })\n```\n\n----------------------------------------\n\nTITLE: Text Direction Styling with LTR and RTL\nDESCRIPTION: Styling based on text direction using _ltr and _rtl modifiers to adjust margins according to text flow direction.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/conditional-styles.md#2025-04-18_snippet_20\n\nLANGUAGE: jsx\nCODE:\n```\n<div dir=\"ltr\">\n  <div\n    className={css({\n      _ltr: { ml: '3' },\n      _rtl: { mr: '3' }\n    })}\n  >\n    Hello\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Panda CSS in Preact Component\nDESCRIPTION: Example of using Panda CSS styling in a Preact component with the css utility function.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/preact.mdx#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { h } from 'preact';\nimport { css } from '../../../styled-system/css';\n\nconst Home = () => {\n\treturn (\n\t\t<div class={css({ fontSize: \"2xl\", fontWeight: 'bold', pt: '56px' })}>Hello 🐼!</div>\n\t);\n};\n\nexport default Home;\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Styles in Panda CSS\nDESCRIPTION: Demonstrates how to configure global styles in Panda CSS using the globalCss property in the configuration file.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/writing-styles.md#2025-04-18_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nimport { defineConfig, defineGlobalStyles } from '@pandacss/dev'\n\nconst globalCss = defineGlobalStyles({\n  'html, body': {\n    color: 'gray.900',\n    lineHeight: '1.5'\n  }\n})\n\nexport default defineConfig({\n  // ...\n  globalCss\n})\n```\n\n----------------------------------------\n\nTITLE: Applying Filters with Panda CSS\nDESCRIPTION: Demonstrates applying visual filters to elements using Panda CSS. Multiple filter properties can be combined, including blur, brightness, contrast, and more.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/effects.md#2025-04-18_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ filter: 'auto', blur: 'sm' })} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Panda CSS with Checkbox Recipe\nDESCRIPTION: Shows how to add a checkbox recipe to the Panda CSS configuration file by extending the theme's slotRecipes property.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/slot-recipes.md#2025-04-18_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\nimport { checkboxRecipe } from './checkbox.recipe'\n\nexport default defineConfig({\n  //...\n  jsxFramework: 'react',\n  theme: {\n    extend: {\n      slotRecipes: {\n        checkbox: checkboxRecipe\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Style Props with JSX Elements\nDESCRIPTION: Example of using the styled.button syntax to create a JSX element with style props in Panda CSS.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/style-props.mdx#2025-04-18_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { styled } from '../styled-system/jsx'\n\nconst Button = ({ children }) => (\n  <styled.button bg=\"blue.500\" color=\"white\" py=\"2\" px=\"4\" rounded=\"md\">\n    {children}\n  </styled.button>\n)\n```\n\n----------------------------------------\n\nTITLE: Using token() Function in Media Queries in Panda CSS\nDESCRIPTION: Example demonstrating how to reference tokens with the token() function within media queries or other CSS at-rules. This feature allows using token values in places where direct token references were previously not possible.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_91\n\nLANGUAGE: javascript\nCODE:\n```\nimport { css } from '../styled-system/css'\n\nconst className = css({\n  '@media screen and (min-width: token(sizes.4xl))': {\n    color: 'green.400',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Config with defineConfig in TypeScript\nDESCRIPTION: Function for config definitions in Panda CSS. It allows you to set up your configuration in a type-safe way, including theme settings and file patterns to include.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/customization/config-functions.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  theme: {},\n  include: ['src/**/*.{js,jsx,ts,tsx}']\n})\n```\n\n----------------------------------------\n\nTITLE: Merging cva Recipe with css Styles in Panda CSS\nDESCRIPTION: Demonstrates merging an atomic cva (Component Variant API) recipe with a style object. The raw method on cva returns the resolved style object which can then be merged with additional styles using the css function.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/merging-styles.md#2025-04-18_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { css, cx, cva } from 'styled-system/css'\n\nconst overrideStyles = css.raw({\n  bg: 'red',\n  color: 'white'\n})\n\nconst buttonStyles = cva({\n  base: {\n    bg: 'blue',\n    border: '1px solid black'\n  },\n  variants: {\n    size: {\n      small: { fontSize: '12px' }\n    }\n  }\n})\n\nconst className = css(\n  // returns the resolved style object\n  buttonStyles.raw({ size: 'small' }),\n  // add the override styles\n  overrideStyles\n)\n\n// => 'bg_red border_1px_solid_black color_white font-size_12px'\n```\n\n----------------------------------------\n\nTITLE: Configuring PandaCSS with Custom Presets\nDESCRIPTION: Example of how to specify a preset in your panda.config.js file using the presets option. This allows you to extend or override the default configuration with your own custom preset.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/customization/presets.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  presets: ['@acmecorp/panda-preset']\n})\n```\n\n----------------------------------------\n\nTITLE: Using the Button Component with Style Overrides\nDESCRIPTION: Demonstrates how to use the Button component with style overrides. Custom styles are passed through the `css` prop, which are merged with the component's base styles.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_100\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button, Thingy } from './Button'\n\nexport default function Page() {\n  return (\n    <Button css={{ color: 'pink', _hover: { color: 'red' } }}>\n      will result in `class=\"d_flex items_center text_pink hover:text_red\"`\n    </Button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for Checkbox Props\nDESCRIPTION: Shows how to implement TypeScript types for the checkbox component using the generated CheckboxVariants type.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/slot-recipes.md#2025-04-18_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nimport React from 'react'\nimport type { CheckboxVariants } from '../styled-system/recipes'\n\ntype CheckboxProps = CheckboxVariants & {\n  children: React.ReactNode\n  value?: string\n  onChange?: (value: string) => void\n}\n```\n\n----------------------------------------\n\nTITLE: Using Slot Recipes in React Components\nDESCRIPTION: Example of implementing a slot recipe in a React component, where the button function returns an object with class names for each slot that can be applied to the corresponding parts of the component.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_130\n\nLANGUAGE: jsx\nCODE:\n```\nexport function App() {\n  const btnClass = button({ size: 'lg', rounded: true })\n\n  return (\n    <button>\n      <p class={btnClass.label}> Label</p>\n      <p class={btnClass.icon}> Icon</p>\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Recipe Usage with Animation Styles\nDESCRIPTION: Demonstrates how to use animation styles within a recipe definition for creating animated components.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const popoverSlotRecipe = defineSlotRecipe({\n  slots: anatomy.keys(),\n  base: {\n    content: {\n      _open: {\n        animationStyle: 'scale-fade-in',\n      },\n      _closed: {\n        animationStyle: 'scale-fade-out',\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Container Queries with CQ Pattern\nDESCRIPTION: Shows how to use container queries for responsive styling based on container width using both basic and named approaches.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/patterns.mdx#2025-04-18_snippet_27\n\nLANGUAGE: ts\nCODE:\n```\nimport { cq } from 'styled-system/patterns'\n\nfunction Demo() {\n  return (\n    <nav className={cq()}>\n      <div\n        className={css({\n          fontSize: { base: 'lg', '@/sm': 'md' },\n        })}\n      />\n    </nav>\n  )\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { cq } from 'styled-system/patterns'\n\nfunction Demo() {\n  return (\n    <nav className={cq({ name: 'sidebar' })}>\n      <div\n        className={css({\n          fontSize: { base: 'lg', '@sidebar/sm': 'md' },\n        })}\n      />\n    </nav>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Color Opacity Modifiers in Build-time - TypeScript\nDESCRIPTION: Shows how to use color opacity modifier syntax in the build-time configuration of Panda CSS. This example defines color tokens and semantic tokens using the opacity modifier.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/token-dictionary/CHANGELOG.md#2025-04-18_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  theme: {\n    tokens: {\n      colors: {\n        blue: {\n          300: { value: '#00f' },\n        },\n      },\n    },\n    semanticTokens: {\n      colors: {\n        primary: {\n          value: '{colors.blue.300/70}',\n        },\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using Virtual Colors with Recipes in Panda CSS\nDESCRIPTION: Shows how to use virtual colors with recipes in Panda CSS. This example creates a button component with a customizable color palette.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/virtual-color.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { css, cva, cx } from '../styled-system/css'\n\nconst button = cva({\n  base: {\n    padding: 4\n    // you can also specify a default colorPalette in the `base` recipe key\n    // colorPalette: 'blue',\n    // ^^^^^^^^^^^^^^^^^^^^\n  },\n  variants: {\n    variant: {\n      primary: { color: 'colorPalette.500' }\n    }\n  },\n  defaultVariants: { variant: 'primary' }\n})\n```\n\n----------------------------------------\n\nTITLE: Using JSX Pattern Components\nDESCRIPTION: Example of using built-in pattern components like Stack and Circle to create layouts without repetitive CSS.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/style-props.mdx#2025-04-18_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stack, Circle } from '../styled-system/jsx'\n\nconst App = () => (\n  <Stack gap=\"4\" align=\"flex-start\">\n    <button>Button</button>\n    <Circle size=\"4\" bg=\"red.300\">4</Circle>\n  </Stack>\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Global Styles in Panda CSS\nDESCRIPTION: Demonstrates how to configure global styles in Panda CSS using the defineGlobalStyles function in the configuration file. Styles will be automatically injected in the base cascade layer.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/migration/stitches.md#2025-04-18_snippet_19\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineConfig, defineGlobalStyles } from '@pandacss/dev'\n\nconst globalCss = defineGlobalStyles({\n  '*': { margin: 0, padding: 0 }\n})\n\nexport default defineConfig({\n  // ...\n  globalCss\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Button Component with Panda CSS\nDESCRIPTION: This example demonstrates how to create a Button component using Panda's css function to apply atomic styles. The button uses background color and padding properties from the design system.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/guides/component-library.md#2025-04-18_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { css } from '../styled-system/css'\n\nexport function Button({ children }) {\n  return (\n    <button type=\"button\" className={css({ bg: 'red.300', px: '2', py: '3' })}>\n      {children}\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Panda for Token Generation\nDESCRIPTION: This snippet shows how to configure Panda to generate design tokens. It defines raw and semantic tokens for colors, demonstrating support for light and dark themes.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/overview/why-panda.md#2025-04-18_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineConfig({\n  emitTokensOnly: true,\n  theme: {\n    tokens: {\n      colors: {\n        gray50: { value: '#F9FAFB' },\n        gray100: { value: '#F3F4F6' }\n      }\n    },\n    semanticTokens: {\n      colors: {\n        primary: { value: '{colors.gray50}' },\n        success: {\n          value: { _light: '{colors.green500}', _dark: '{colors.green200}' }\n        }\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Panda Plugin Creation\nDESCRIPTION: Example demonstrating how to create and share hooks as plugins with associated names and hook configurations.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/hooks.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  // ...\n  plugins: [\n    {\n      name: 'token-format',\n      hooks: {\n        'tokens:created': ({ configure }) => {\n          configure({\n            formatTokenName: path => '$' + path.join('-')\n          })\n        }\n      }\n    }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Button Usage Example with Custom Styles\nDESCRIPTION: Example showing how to use the Button component with custom style overrides including hover states.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/writing-styles.md#2025-04-18_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from './Button'\n\nexport default function Page() {\n  return (\n    <Button css={{ color: 'pink', _hover: { color: 'red' } }}>\n      will result in `class=\"d_flex items_center text_pink hover:text_red\"`\n    </Button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Container Queries in React Components\nDESCRIPTION: Example of using container queries in a React component with the default container syntax, demonstrating how to set container type and responsive font sizes.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/conditional-styles.md#2025-04-18_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nimport { css } from '/styled-system/css'\n\nfunction Demo() {\n  return (\n    <nav className={css({ containerType: 'inline-size' })}>\n      <div\n        className={css({\n          fontSize: { '@/sm': 'md' }\n        })}\n      />\n    </nav>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Full Theme Configuration with Variants\nDESCRIPTION: Complete Panda configuration showcasing multiple theme variants with semantic tokens.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/guides/multiple-themes.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  // ...\n  // main theme\n  theme: {\n    extend: {\n      tokens: {\n        colors: {\n          text: { value: 'green' }\n        }\n      },\n      semanticTokens: {\n        colors: {\n          body: {\n            value: {\n              base: '{colors.green.600}',\n              _osDark: '{colors.green.400}'\n            }\n          }\n        }\n      }\n    }\n  },\n  // alternative theme variants\n  themes: {\n    primary: {\n      tokens: {\n        colors: {\n          text: { value: 'red' }\n        }\n      },\n      semanticTokens: {\n        colors: {\n          muted: { value: '{colors.red.200}' },\n          body: {\n            value: {\n              base: '{colors.red.600}',\n              _osDark: '{colors.red.400}'\n            }\n          }\n        }\n      }\n    },\n    secondary: {\n      tokens: {\n        colors: {\n          text: { value: 'blue' }\n        }\n      },\n      semanticTokens: {\n        colors: {\n          muted: { value: '{colors.blue.200}' },\n          body: {\n            value: {\n              base: '{colors.blue.600}',\n              _osDark: '{colors.blue.400}'\n            }\n          }\n        }\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using css.raw for Reusable Style Composition in Panda CSS\nDESCRIPTION: Example showing how to use css.raw to extract reusable style objects that can be composed into larger style objects. This allows for creating modular style definitions that can be reused across different components.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_92\n\nLANGUAGE: typescript\nCODE:\n```\nimport { css } from 'styled-system/css'\n\nconst paragraphSpacingStyle = css.raw({\n  '&:not(:first-child)': { marginBlockEnd: '1em' },\n})\n\nexport const proseCss = css.raw({\n  maxWidth: '800px',\n  '& p': {\n    '&:not(:first-child)': { marginBlockStart: '1em' },\n  },\n  '& h1': paragraphSpacingStyle,\n  '& h2': paragraphSpacingStyle,\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Reusable Styles with defineStyles in TypeScript\nDESCRIPTION: Function for style definitions in Panda CSS. It enables creating reusable style objects that can be composed into recipes and other style definitions, promoting style consistency and reducing duplication.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/customization/config-functions.md#2025-04-18_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineRecipe, defineStyles } from '@pandacss/dev'\n\nconst buttonVisualStyles = defineStyles({\n  borderRadius: 'lg',\n  boxShadow: 'sm'\n})\n\nexport const buttonRecipe = defineRecipe({\n  // ...\n  variants: {\n    visual: {\n      funky: {\n        bg: 'red.200',\n        color: 'white',\n        ...buttonVisualStyles\n      },\n      edgy: {\n        border: '1px solid {colors.red.500}',\n        ...buttonVisualStyles\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Circles with Circle Pattern\nDESCRIPTION: Demonstrates creation of circular elements using both function and JSX approaches. Supports size customization.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/patterns.mdx#2025-04-18_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\nimport { circle } from '../styled-system/patterns'\n\nfunction App() {\n  return <div className={circle({ size: '12', bg: 'red.300' })} />\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Circle } from '../styled-system/jsx'\n\nfunction App() {\n  return <Circle size=\"12\" bg=\"red.300\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Slot Variants with SVA\nDESCRIPTION: Demonstrates how to create slot-based component styling using the sva function for multi-part components, defining styles for different slots and variants.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_60\n\nLANGUAGE: jsx\nCODE:\n```\nimport { sva } from 'styled-system/css'\n\nconst button = sva({\n  slots: ['label', 'icon'],\n  base: {\n    label: { color: 'red', textDecoration: 'underline' },\n  },\n  variants: {\n    rounded: {\n      true: {},\n    },\n    size: {\n      sm: {\n        label: { fontSize: 'sm' },\n        icon: { fontSize: 'sm' },\n      },\n      lg: {\n        label: { fontSize: 'lg' },\n        icon: { fontSize: 'lg', color: 'pink' },\n      },\n    },\n  },\n  defaultVariants: {\n    size: 'sm',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Advanced CSS Nesting with Template Literals\nDESCRIPTION: Demonstrates using CSS nesting syntax with pseudo-elements, pseudo-selectors, and combinators in template literals.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/template-literals.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst Demo = styled.div`\n  color: black;\n\n  &::after {\n    content: '🐼';\n  }\n\n  & + & {\n    background: yellow;\n  }\n\n  &.bordered {\n    border: 1px solid black;\n  }\n\n  .parent & {\n    color: red;\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Using Stack Pattern with JSX Syntax\nDESCRIPTION: The Stack pattern creates a vertical or horizontal stack of elements. This example shows the JSX approach with gap and padding properties specified.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/patterns.mdx#2025-04-18_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Stack } from '../styled-system/jsx'\n\nfunction App() {\n  return (\n    <Stack gap=\"6\" padding=\"4\">\n      <div>First</div>\n      <div>Second</div>\n      <div>Third</div>\n    </Stack>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Tokens with defineTokens in TypeScript\nDESCRIPTION: Function for token definitions in Panda CSS. It enables creating design tokens with type safety for elements like colors, spacing, and other design values.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/customization/config-functions.md#2025-04-18_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineTokens } from '@pandacss/dev'\n\nconst theme = {\n  tokens: defineTokens({\n    colors: {\n      primary: { value: '#ff0000' }\n    }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Button Component with Custom CSS Props\nDESCRIPTION: This code demonstrates a Button component that accepts and applies custom CSS styles. It uses Panda's css function to merge default styles with custom styles passed via props.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/guides/component-library.md#2025-04-18_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport { css } from '@acme-org/styled-system/css'\n\nexport function Button({ children, css: cssProp }) {\n  return (\n    <button\n      type=\"button\"\n      className={css({ bg: 'red.300', px: '2', py: '3' }, cssProp)}\n    >\n      {children}\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Token Function with Fallback Value\nDESCRIPTION: Example showing how to use the token function with a fallback value when referencing design tokens. If the token is not available, the fallback will be used.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/token-dictionary/CHANGELOG.md#2025-04-18_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nconst styles = css({\n  border: '2px solid token(colors.primary, red)',\n})\n```\n\n----------------------------------------\n\nTITLE: State and Interaction Selectors in Panda CSS\nDESCRIPTION: Collection of state-based selectors like hover, focus, disabled, and active states\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/conditional-styles.md#2025-04-18_snippet_30\n\nLANGUAGE: css\nCODE:\n```\n_hover: \"&:is(:hover, [data-hover])\"\n_focus: \"&:is(:focus, [data-focus])\"\n_disabled: \"&:is(:disabled, [disabled], [data-disabled])\"\n_active: \"&:is(:active, [data-active])\"\n```\n\n----------------------------------------\n\nTITLE: Defining Text Styles with defineTextStyles in TypeScript\nDESCRIPTION: Function for text styles definitions in Panda CSS. It allows creating reusable text styles with comprehensive typography settings that can be applied consistently throughout the application.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/customization/config-functions.md#2025-04-18_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineTextStyles } from '@pandacss/dev'\n\nexport const textStyles = defineTextStyles({\n  body: {\n    description: 'The body text style - used in paragraphs',\n    value: {\n      fontFamily: 'Inter',\n      fontWeight: '500',\n      fontSize: '16px',\n      lineHeight: '24',\n      letterSpacing: '0',\n      textDecoration: 'None',\n      textTransform: 'None'\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Targeting a Breakpoint Range with Panda CSS (JSX)\nDESCRIPTION: This example shows how to target a specific range of breakpoints using the \"To\" notation in camelCase format. The mdToXl property applies the bold font weight only at md, lg, and xl breakpoints.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/responsive-design.md#2025-04-18_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<span\n  className={css({\n    fontWeight: { mdToXl: 'bold' }\n  })}\n>\n  Text\n</span>\n```\n\n----------------------------------------\n\nTITLE: Generated CSS Structure\nDESCRIPTION: Shows the generated CSS output for recipes, demonstrating cascade layers and variant-specific styles.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/recipes.md#2025-04-18_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n@layer recipes {\n  @layer base {\n    .button {\n      font-size: var(--font-sizes-lg);\n    }\n  }\n\n  .button--visual-funky {\n    background-color: var(--colors-red-200);\n    color: var(--colors-white);\n  }\n\n  .button--size-lg {\n    padding: var(--space-8);\n    font-size: var(--font-sizes-40px);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Function Signature Change Example in React\nDESCRIPTION: Demonstrates the changes to the `css` function signature, now allowing multiple style objects to be passed and smartly merged, compared to the previous approach using `cx` for combining styles.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_98\n\nLANGUAGE: diff\nCODE:\n```\nimport { css, cx } from '../styled-system/css'\n\nconst App = () => {\n  return (\n    <>\n-      <div className={cx(css({ mx: '3', paddingTop: '4' }), css({ mx: '10', pt: '6' }))}>\n+      <div className={css({ mx: '3', paddingTop: '4' }, { mx: '10', pt: '6' })}>\n        Will result in `class=\"mx_10 pt_6\"`\n      </div>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Parts for Checkbox Recipe\nDESCRIPTION: Demonstrates how to use defineParts to create a parts-based recipe that handles child elements through data attributes.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/slot-recipes.md#2025-04-18_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineParts, definetRecipe } from '@pandacss/dev'\n\nconst parts = defineParts({\n  root: { selector: '& [data-part=\"root\"]' },\n  control: { selector: '& [data-part=\"control\"]' },\n  label: { selector: '& [data-part=\"label\"]' }\n})\n\nexport const checkboxRecipe = defineRecipe({\n  className: 'checkbox',\n  description: 'A checkbox style',\n  base: parts({\n    root: { display: 'flex', alignItems: 'center', gap: '2' },\n    control: { borderWidth: '1px', borderRadius: 'sm' },\n    label: { marginStart: '2' }\n  }),\n  variants: {\n    size: {\n      sm: parts({\n        control: { width: '8', height: '8' },\n        label: { fontSize: 'sm' }\n      }),\n      md: parts({\n        control: { width: '10', height: '10' },\n        label: { fontSize: 'md' }\n      })\n    }\n  },\n  defaultVariants: {\n    size: 'sm'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Escape Hatch Syntax with Important Flag\nDESCRIPTION: Example of using escape hatch syntax with important flags and CSS values that need to bypass token validation when using strictTokens: true.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_66\n\nLANGUAGE: typescript\nCODE:\n```\ncss({\n  borderWidth: '[2px!]',\n  width: '[2px !important]',\n})\n```\n\n----------------------------------------\n\nTITLE: Using Root Semantic Virtual Colors in Panda CSS\nDESCRIPTION: Demonstrates how to use root semantic virtual colors in a React component with Panda CSS. This example applies different color values for normal and hover states.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/virtual-color.md#2025-04-18_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { css } from '../styled-system/css'\n\nexport const App = () => {\n  return (\n    <button\n      className={css({\n        colorPalette: 'button',\n        color: 'colorPalette.light',\n        backgroundColor: 'colorPalette.dark',\n        _hover: {\n          color: 'colorPalette.light.accent',\n          background: 'colorPalette.light.accent.secondary'\n        }\n      })}\n    >\n      Root color palette\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using the codegen:prepare Hook in Panda CSS Configuration\nDESCRIPTION: Demonstrates how to use the 'codegen:prepare' hook which is called before writing codegen files to disk, allowing for customization of the generated files.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_91\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  // ...\n  hooks: {\n    'codegen:prepare': ({ artifacts, changed }) => {\n      // do something with the emitted js/d.ts files\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Theme Tokens in Panda CSS\nDESCRIPTION: Example of defining theme tokens and semantic tokens within the theme configuration. Demonstrates how to create color tokens and reference them in semantic tokens.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/references/config.md#2025-04-18_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"theme\": {\n    \"tokens\": {\n      \"colors\": {\n        \"red\": { \"value\": \"#EE0F0F\" },\n        \"green\": { \"value\": \"#0FEE0F\" }\n      }\n    },\n    \"semanticTokens\": {\n      \"colors\": {\n        \"danger\": { \"value\": \"{colors.red}\" },\n        \"success\": { \"value\": \"{colors.green}\" }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Recipe with Default Variants\nDESCRIPTION: Example of a button recipe with defaultVariants configuration.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/recipes.md#2025-04-18_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { cva } from '../styled-system/css'\n\nconst button = cva({\n  base: {\n    display: 'flex'\n  },\n  variants: {\n    visual: {\n      solid: { bg: 'red.200', color: 'white' },\n      outline: { borderWidth: '1px', borderColor: 'red.200' }\n    },\n    size: {\n      sm: { padding: '4', fontSize: '12px' },\n      lg: { padding: '8', fontSize: '24px' }\n    }\n  },\n  defaultVariants: {\n    visual: 'solid',\n    size: 'lg'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using LinkOverlay Pattern with JSX Syntax\nDESCRIPTION: The LinkOverlay pattern expands a link's clickable area to its nearest parent with relative positioning. This example shows the JSX approach with an image and link.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/patterns.mdx#2025-04-18_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Box, LinkOverlay } from '../styled-system/jsx'\n\nfunction App() {\n  return (\n    <Box pos=\"relative\">\n      <img src=\"https://via.placeholder.com/150\" alt=\"placeholder\" />\n      <LinkOverlay href=\"#\">\n        View more\n      </LinkOverlay>\n    </Box>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Global CSS in Next.js App Router\nDESCRIPTION: TypeScript code for the root layout file in a Next.js App Router project, importing global CSS and setting up font variables.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/nextjs.mdx#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport './globals.css';\nimport type { Metadata } from 'next';\nimport localFont from 'next/font/local';\n\nconst geistSans = localFont({\n  src: './fonts/GeistVF.woff',\n  variable: '--font-geist-sans',\n  weight: '100 900',\n});\nconst geistMono = localFont({\n  src: './fonts/GeistMonoVF.woff',\n  variable: '--font-geist-mono',\n  weight: '100 900',\n});\n\nexport const metadata: Metadata = {\n  title: 'Create Next App',\n  description: 'Generated by create next app',\n};\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <html lang=\"en\">\n        <body className={`${geistSans.variable} ${geistMono.variable}`}>\n        {children}\n        </body>\n    </html>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Slot Recipe in React Component\nDESCRIPTION: Example of using a slot recipe in a React component, applying the generated class names to different parts of the component based on the selected variants.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_34\n\nLANGUAGE: jsx\nCODE:\n```\nexport function App() {\n  const btnClass = button({ size: 'lg', rounded: true })\n\n  return (\n    <button>\n      <p class={btnClass.label}> Label</p>\n      <p class={btnClass.icon}> Icon</p>\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pregenerated Virtual Colors in Panda CSS\nDESCRIPTION: Illustrates how to configure pregenerated virtual colors in the Panda CSS configuration file. This setup allows for runtime color palette changes.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/virtual-color.md#2025-04-18_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nexport default defineConfig({\n  staticCss: {\n    css: [\n      {\n        properties: { colorPalette: ['red', 'blue'] }\n      }\n    ]\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Named Container Queries\nDESCRIPTION: Example of creating named container queries with the cq pattern to target specific container elements.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_92\n\nLANGUAGE: typescript\nCODE:\n```\nimport { cq } from 'styled-system/patterns'\n\nfunction Demo() {\n  return (\n    <nav className={cq({ name: 'sidebar' })}>\n      <div\n        className={css({\n          fontSize: { base: 'lg', '@sidebar/sm': 'md' },\n        })}\n      />\n    </nav>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Layer Styles in Panda CSS\nDESCRIPTION: Shows how to define layer styles using defineLayerStyles function. Creates a container style with background, border, and border color properties.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/theming/layer-styles.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineLayerStyles } from '@pandacss/dev'\n\nconst layerStyles = defineLayerStyles({\n  container: {\n    description: 'container styles',\n    value: {\n      background: 'gray.50',\n      border: '2px solid',\n      borderColor: 'gray.500'\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Color Opacity Usage in PandaCSS\nDESCRIPTION: Demonstrates how to use the color opacity modifier syntax in PandaCSS using the {color}/{opacity} format.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/color-opacity-modifier.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncss({\n  bg: 'red.300/40',\n  color: 'white'\n})\n```\n\n----------------------------------------\n\nTITLE: Example Home Route with Panda CSS\nDESCRIPTION: Example React component using Panda CSS styling.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/react-router.mdx#2025-04-18_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Route } from \"./+types/home\"\nimport { css } from \"styled-system/css\"\n\nexport function meta({}: Route.MetaArgs) {\n  return [\n    { title: \"New React Router App\" },\n    { name: \"description\", content: \"Welcome to React Router!\" },\n  ]\n}\n\nexport default function Home() {\n  return (\n    <div>\n      <h1 className={css({ fontSize: \"2xl\", fontWeight: \"bold\" })}>\n        Welcome to the home page\n      </h1>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Recipe Usage in React\nDESCRIPTION: Demonstrates basic usage of a button recipe in a React component, showing both default and variant usage.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/recipes.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { button } from '../styled-system/recipes'\n\nfunction App() {\n  return (\n    <div>\n      <button className={button()}>Click me</button>\n      <button className={button({ shape: 'circle' })}>Click me</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Slot Recipes with defineSlotRecipe in TypeScript\nDESCRIPTION: Function for slot recipe definitions in Panda CSS. It enables defining styles for components with multiple parts (slots) like checkboxes with root, control, and label elements.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/customization/config-functions.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineSlotRecipe } from '@pandacss/dev'\n\nexport const checkboxRecipe = defineSlotRecipe({\n  className: 'checkbox',\n  description: 'The styles for the Checkbox component',\n  slots: ['root', 'control', 'label'],\n  base: {\n    root: { display: 'flex', alignItems: 'center', gap: '2' },\n    control: { borderWidth: '1px', borderRadius: 'sm' },\n    label: { marginStart: '2' }\n  },\n  variants: {\n    size: {\n      sm: {\n        control: { width: '8', height: '8' },\n        label: { fontSize: 'sm' }\n      },\n      md: {\n        control: { width: '10', height: '10' },\n        label: { fontSize: 'md' }\n      }\n    }\n  },\n  defaultVariants: {\n    size: 'sm'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Merging Config Recipe with css Styles using cx Function\nDESCRIPTION: Demonstrates how to merge a config recipe with atomic styles using the cx function. This works because utilities layer has more precedence than the recipe layer in the CSS cascade, allowing atomic styles to override recipe styles.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/merging-styles.md#2025-04-18_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { css, cx } from 'styled-system/css'\nimport { button } from 'styled-system/recipes'\n\nconst className = cx(\n  // returns the resolved class name: `button button--size-small`\n  button({ size: 'small' }),\n  // add the override styles\n  css({ bg: 'red' }) // => 'bg_red'\n)\n\n// => 'button button--size-small bg_red'\n```\n\n----------------------------------------\n\nTITLE: Defining Theme Variants in Panda CSS\nDESCRIPTION: Example of configuring theme variants with different color schemes. Shows how to create primary and secondary themes with their own token sets and responsive/conditional values.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/references/config.md#2025-04-18_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"themes\": {\n    \"primary\": {\n      \"tokens\": {\n        \"colors\": {\n          \"text\": { \"value\": \"red\" }\n        }\n      },\n      \"semanticTokens\": {\n        \"colors\": {\n          \"muted\": { \"value\": \"{colors.red.200}\" },\n          \"body\": {\n            \"value\": {\n              \"base\": \"{colors.red.600}\",\n              \"_osDark\": \"{colors.red.400}\"\n            }\n          }\n        }\n      }\n    },\n    \"secondary\": {\n      \"tokens\": {\n        \"colors\": {\n          \"text\": { \"value\": \"blue\" }\n        }\n      },\n      \"semanticTokens\": {\n        \"colors\": {\n          \"muted\": { \"value\": \"{colors.blue.200}\" },\n          \"body\": {\n            \"value\": {\n              \"base\": \"{colors.blue.600}\",\n              \"_osDark\": \"{colors.blue.400}\"\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a React Button Component with Style Overrides\nDESCRIPTION: Example of designing a React component that supports style overrides through a css prop, allowing consumers to merge their styles with the component's base styles.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_84\n\nLANGUAGE: tsx\nCODE:\n```\nimport { css } from '../../styled-system/css'\n\nexport const Button = ({ css: cssProp = {}, children }) => {\n  const className = css({ display: 'flex', alignItem: 'center', color: 'black' }, cssProp)\n  return <button className={className}>{children}</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Static CSS for Themes (TypeScript)\nDESCRIPTION: Shows how to configure Panda CSS to pregenerate static CSS for specific themes, which will be included in the CSS output.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// panda.config.ts\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  // ...\n  staticCss: {\n    themes: ['primary', 'secondary'],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Color Mixing Utility Transform\nDESCRIPTION: Demonstrates how to create a utility function for color mixing transformations that can be reused across multiple utility definitions.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { PropertyTransform } from '@pandacss/types'\n\nexport const createColorMixTransform =\n  (prop: string): PropertyTransform =>\n  (value, args) => {\n    const mix = args.utils.colorMix(value)\n    if (mix.invalid) return { [prop]: value }\n\n    const cssVar = '--mix-' + prop\n\n    return {\n      [cssVar]: mix.value,\n      [prop]: `var(${cssVar}, ${mix.color})`,\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Using Flex Pattern with Function Syntax\nDESCRIPTION: The Flex pattern creates a flex container with shortcuts for flex properties. This example demonstrates the function approach with direction and alignment properties.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/patterns.mdx#2025-04-18_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport { flex } from '../styled-system/patterns'\n\nfunction App() {\n  return (\n    <div className={flex({ direction: 'row', align: 'center' })}>\n      <div>First</div>\n      <div>Second</div>\n      <div>Third</div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Button Component with Panda CSS\nDESCRIPTION: Example of a Button component using Panda CSS for styling in a React component.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/storybook.mdx#2025-04-18_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ReactNode } from 'react';\nimport { css } from '../../styled-system/css';\n\nexport interface IButtonProps {\n  children: ReactNode;\n}\n\nexport const Button = ({ children }: IButtonProps) => {\n  return (\n    <button\n      className={css({\n        bg: 'red.300',\n        fontFamily: 'Inter',\n        px: '4',\n        py: '3',\n        borderRadius: 'md',\n        _hover: { bg: 'red.400' },\n      })}\n    >\n      {children}\n    </button>\n  )\n};\n```\n\n----------------------------------------\n\nTITLE: Global CSS Variables Configuration in PandaCSS\nDESCRIPTION: Demonstrates how to define and use type-safe CSS variables and custom CSS properties in PandaCSS configuration.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/config/CHANGELOG.md#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  // ...\n  globalVars: {\n    '--some-color': 'red',\n    '--button-color': {\n      syntax: '<color>',\n      inherits: false,\n      initialValue: 'blue',\n    },\n  },\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { css } from '../styled-system/css'\n\nconst className = css({\n  '--button-color': 'colors.red.300',\n  // ^^^^^^^^^^^^  will be suggested\n\n  backgroundColor: 'var(--button-color)',\n  //                ^^^^^^^^^^^^^^^^^^  will be suggested\n})\n```\n\n----------------------------------------\n\nTITLE: Panda CSS Recipe Configuration Example\nDESCRIPTION: Configuration example showing how to define multiple recipes with variants and JSX integration.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_118\n\nLANGUAGE: typescript\nCODE:\n```\nrecipes: {\n    pinkRecipe: {\n        className: 'pinkRecipe',\n        jsx: ['ComponentWithMultipleRecipes'],\n        base: { color: 'pink.100' },\n        variants: {\n            variant: {\n            small: { fontSize: 'sm' },\n            },\n        },\n    },\n    greenRecipe: {\n        className: 'greenRecipe',\n        jsx: ['ComponentWithMultipleRecipes'],\n        base: { color: 'green.100' },\n        variants: {\n            variant: {\n            small: { fontSize: 'sm' },\n            },\n        },\n    },\n    blueRecipe: {\n        className: 'blueRecipe',\n        jsx: ['ComponentWithMultipleRecipes'],\n        base: { color: 'blue.100' },\n        variants: {\n            variant: {\n            small: { fontSize: 'sm' },\n            },\n        },\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Using HStack Pattern with JSX Syntax\nDESCRIPTION: The HStack pattern is a wrapper around the stack pattern with direction set to horizontal and elements centered vertically. This example shows the JSX approach with gap property.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/patterns.mdx#2025-04-18_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { HStack } from '../styled-system/jsx'\n\nfunction App() {\n  return (\n    <HStack gap=\"6\">\n      <div>First</div>\n      <div>Second</div>\n      <div>Third</div>\n    </HStack>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using hideBelow Breakpoint Utility in Panda CSS\nDESCRIPTION: Example showing the fixed hideBelow breakpoint utility which correctly applies styles below a specified breakpoint using max-width media query.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_98\n\nLANGUAGE: jsx\nCODE:\n```\ncss({ hideBelow: 'lg' })\n// => @media screen and (max-width: 63.9975em) { background: red; }\n```\n\n----------------------------------------\n\nTITLE: Vue Component with Panda CSS Integration\nDESCRIPTION: Example Vue component demonstrating Panda CSS usage with styled components.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/vue.mdx#2025-04-18_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { css } from \"../styled-system/css\";\n</script>\n\n<template>\n  <div :class=\"css({ fontSize: '5xl', fontWeight: 'bold' })\">Hello 🐼!</div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Utility Creation Hook in TypeScript\nDESCRIPTION: This hook is called when the internal classname engine is created and allows customizing the hash function used when config.hash is enabled. It provides control over how class names are generated.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/studio/CHANGELOG.md#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  // ...\n  hooks: {\n    'utility:created': ({ configure }) => {\n      configure({\n        toHash: (paths, toHash) => {\n          const stringConds = paths.join(':')\n          const splitConds = stringConds.split('_')\n          const hashConds = splitConds.map(toHash)\n          return hashConds.join('_')\n        },\n      })\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using Center Pattern with Function Syntax\nDESCRIPTION: The Center pattern centers content within a container. This example shows the function approach with a background color property.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/patterns.mdx#2025-04-18_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport { center } from '../styled-system/patterns'\n\nfunction App() {\n  return (\n    <div className={center({ bg: 'red.200' })}>\n      <Icon />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Recipe Helper Methods Usage\nDESCRIPTION: Demonstrates the usage of recipe helper methods and properties for variant handling.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/recipes.md#2025-04-18_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { cva } from '../styled-system/css'\n\nconst buttonRecipe = cva({\n  base: {\n    color: 'red',\n    fontSize: '1.5rem'\n  },\n  variants: {\n    size: {\n      sm: {\n        fontSize: '1rem'\n      },\n      md: {\n        fontSize: '2rem'\n      }\n    }\n  }\n})\n\nbuttonRecipe.variantKeys\n// => ['size']\n\nbuttonRecipe.variantMap\n// => { size: ['sm', 'md'] }\n\nbuttonRecipe.splitVariantProps({ size: 'sm', onClick() {} })\n// => [{ size: 'sm'}, { onClick() {} }]\n```\n\n----------------------------------------\n\nTITLE: Using VStack Pattern with JSX Syntax\nDESCRIPTION: The VStack pattern is a wrapper around the stack pattern with direction set to vertical and elements centered horizontally. This example shows the JSX approach with gap property.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/patterns.mdx#2025-04-18_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { VStack } from '../styled-system/jsx'\n\nfunction App() {\n  return (\n    <VStack gap=\"6\">\n      <div>First</div>\n      <div>Second</div>\n      <div>Third</div>\n    </VStack>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Panda CSS in React Component\nDESCRIPTION: Example of how to use Panda CSS utilities in a React component. This demonstrates the usage of the 'css' function to apply styles inline.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/cli.mdx#2025-04-18_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { css } from './styled-system/css'\n\nexport function App() {\n  return <div className={css({ bg: 'red.400' })} />\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Hash Function in PandaCSS\nDESCRIPTION: Example showing how to customize the hash function used when config.hash is enabled by implementing the utility:created hook. The hook allows overriding the default toHash function to generate custom class name hashes.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/token-dictionary/CHANGELOG.md#2025-04-18_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  // ...\n  hooks: {\n    'utility:created': ({ configure }) => {\n      configure({\n        toHash: (paths, toHash) => {\n          const stringConds = paths.join(':')\n          const splitConds = stringConds.split('_')\n          const hashConds = splitConds.map(toHash)\n          return hashConds.join('_')\n        },\n      })\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Hover Conditional Style in Panda CSS\nDESCRIPTION: Example of applying a hover condition to a button element using the _hover modifier to change the background color when hovered.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/conditional-styles.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<button\n  className={css({\n    bg: 'red.500',\n    _hover: { bg: 'red.700' }\n  })}\n>\n  Hover me\n</button>\n```\n\n----------------------------------------\n\nTITLE: Merging Style Objects with CSS Function in TypeScript\nDESCRIPTION: Demonstrates the new css function signature that allows passing multiple style objects to be smartly merged. This is preferred over using cx for merging styles.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_110\n\nLANGUAGE: typescript\nCODE:\n```\nimport { css } from '../styled-system/css'\ncss({ mx: '3', paddingTop: '4' }, { mx: '10', pt: '6' }) // => mx_10 pt_6\n```\n\n----------------------------------------\n\nTITLE: Configuring Utility Classes in Panda CSS\nDESCRIPTION: Demonstrates how to define utility classes with custom naming conventions, value transformations, and shorthands. This configuration determines how utility classes are generated and what properties they control.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/node/README.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst defaults = {\n  className: ({ prop, value }) => `${prop}-${esc(value)}`,\n}\n\nconst tt = defineConfig({\n  utilities: [\n    {\n      properties: {\n        display: {\n          className: ({ value }) => `d-${value}`,\n          transform(value) {\n            return { display: value }\n          },\n          values: {\n            fl: 'flex',\n            ib: 'inline-block',\n          },\n        },\n        background: {\n          className: ({ prop, value }) => `bg-${value}`,\n          values: ({ tokens }) => ({\n            ...tokens.colors,\n            inherit: 'inherit',\n          }),\n        },\n        color: {\n          className: ({ prop, value }) => `text-${value}`,\n          values: (tokens) => ({ ...tokens.colors }),\n        },\n        fill: { values: 'colors' },\n        lineClamp: {\n          className: ({ prop, value }) => `clamp-${value}`,\n          values: {\n            '1': {\n              '--line-clamp': '1',\n            },\n          },\n        },\n      },\n      shorthands: {\n        bg: 'background',\n      },\n    },\n\n    {\n      properties: {\n        strokeWidth: {\n          values: { '1': '1px', 2: '2px' },\n        },\n      },\n    },\n\n    {\n      properties: {\n        paddingLeft: { values: 'space', className: 'pl' },\n        paddingRight: { values: 'space', className: 'pr' },\n        paddingX: {\n          className: 'px',\n          values({ theme, map }) {\n            return map(theme.space, (value) => ({\n              paddingLeft: value,\n              paddingRight: value,\n            }))\n          },\n        },\n      },\n      shorthands: {\n        pl: 'paddingLeft',\n        px: 'paddingX',\n      },\n    },\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Using Animation Styles in Slot Recipes with JavaScript\nDESCRIPTION: Example of applying animation styles to components using slot recipes in JavaScript. Demonstrates applying different animations for open and closed states of a popover component.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport const popoverSlotRecipe = defineSlotRecipe({\n  slots: anatomy.keys(),\n  base: {\n    content: {\n      _open: {\n        animationStyle: 'scale-fade-in',\n      },\n      _closed: {\n        animationStyle: 'scale-fade-out',\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Hierarchical Color Palettes in Panda CSS\nDESCRIPTION: Example demonstrating the new deep nested colorPalettes feature for enhanced color management. This allows organizing colors hierarchically in categories, variants, and states for improved organization and flexibility.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_95\n\nLANGUAGE: javascript\nCODE:\n```\nconst theme = {\n  extend: {\n    semanticTokens: {\n      colors: {\n        button: {\n          dark: {\n            value: 'navy',\n          },\n          light: {\n            DEFAULT: {\n              value: 'skyblue',\n            },\n            accent: {\n              DEFAULT: {\n                value: 'cyan',\n              },\n              secondary: {\n                value: 'blue',\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using Style Properties with Panda CSS Function\nDESCRIPTION: Demonstrates the recommended way to consume Panda tokens using the css function with style props.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/theming/usage.mdx#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { css } from '../styled-system/css'\n\nconst App = () => (\n  <div\n    className={css({\n      color: 'green.400',\n      background: 'gray.200'\n    })}\n  />\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring CSS Layers\nDESCRIPTION: CSS configuration for layering in Panda CSS.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/svelte.mdx#2025-04-18_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n@layer reset, base, tokens, recipes, utilities;\n```\n\n----------------------------------------\n\nTITLE: Defining Animation Tokens in JSX\nDESCRIPTION: Demonstrates how to create animation tokens with keyframe animations and timing configurations.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/theming/tokens.md#2025-04-18_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nconst theme = {\n  tokens: {\n    animations: {\n      spin: {\n        value: 'spin 1s linear infinite'\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Components with Style Overrides using CSS Function\nDESCRIPTION: Example of designing a reusable Button component that supports style overrides through a `css` prop, utilizing the enhanced CSS function to merge styles correctly.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_29\n\nLANGUAGE: tsx\nCODE:\n```\nimport { css } from '../../styled-system/css'\n\nexport const Button = ({ css: cssProp = {}, children }) => {\n  const className = css({ display: 'flex', alignItem: 'center', color: 'black' }, cssProp)\n  return <button className={className}>{children}</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Line Clamp Implementation for Text Truncation\nDESCRIPTION: Shows how to implement multi-line text truncation using Panda's lineClamp property. Demonstrates truncating text after a specified number of lines.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/typography.md#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ lineClamp: 2 })}>Some long piece of text</div>\n\n<div className={css({ lineClamp: 2 })}>Truncated text</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Presets in Panda CSS with definePreset and defineConfig\nDESCRIPTION: Example showing how to define multiple presets in Panda CSS and merge them using defineConfig. The code demonstrates the creation of two configuration presets with different token definitions that are combined into a final configuration.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_89\n\nLANGUAGE: typescript\nCODE:\n```\nconst firstConfig = definePreset({\n  theme: {\n    tokens: {\n      colors: {\n        'first-main': { value: 'override' },\n      },\n    },\n    extend: {\n      tokens: {\n        colors: {\n          orange: { value: 'orange' },\n          gray: { value: 'from-first-config' },\n        },\n      },\n    },\n  },\n})\n\nconst secondConfig = definePreset({\n  theme: {\n    tokens: {\n      colors: {\n        pink: { value: 'pink' },\n      },\n    },\n    extend: {\n      tokens: {\n        colors: {\n          blue: { value: 'blue' },\n          gray: { value: 'gray' },\n        },\n      },\n    },\n  },\n})\n\n// Final config\nexport default defineConfig({\n  presets: [firstConfig, secondConfig],\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Component with Factory Recipe\nDESCRIPTION: Example of defining a recipe for a component using the styled factory function with base styles and variants.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/style-props.mdx#2025-04-18_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { styled } from '../styled-system/jsx'\n\nconst Button = styled('button', {\n  base: {\n    py: '2',\n    px: '4',\n    rounded: 'md'\n  },\n  variants: {\n    variant: {\n      primary: {\n        bg: 'blue.500',\n        color: 'white'\n      },\n      secondary: {\n        bg: 'gray.500',\n        color: 'white'\n      }\n    }\n  }\n})\n\nconst App = () => (\n  <Button variant=\"secondary\" mt=\"10px\">\n    Button\n  </Button>\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a Config Slot Recipe\nDESCRIPTION: This snippet demonstrates how to define a config slot recipe using the defineSlotRecipe function, including className, description, slots, base styles, variants, and default variants.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/slot-recipes.md#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineSlotRecipe } from '@pandacss/dev'\n\nexport const checkboxRecipe = defineSlotRecipe({\n  className: 'checkbox',\n  description: 'The styles for the Checkbox component',\n  slots: ['root', 'control', 'label'],\n  base: {\n    root: { display: 'flex', alignItems: 'center', gap: '2' },\n    control: { borderWidth: '1px', borderRadius: 'sm' },\n    label: { marginStart: '2' }\n  },\n  variants: {\n    size: {\n      sm: {\n        control: { width: '8', height: '8' },\n        label: { fontSize: 'sm' }\n      },\n      md: {\n        control: { width: '10', height: '10' },\n        label: { fontSize: 'md' }\n      }\n    }\n  },\n  defaultVariants: {\n    size: 'sm'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Group Hover Condition in React Component\nDESCRIPTION: Shows how to implement the custom groupHover condition in a React component to apply conditional styles based on parent hover state.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/customization/conditions.mdx#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { css } from '../styled-system/css'\n\nfunction App() {\n  return (\n    <div role=\"group\">\n      <span\n        className={css({\n          color: { base: \"blue.400\", _groupHover: \"blue.600\" },\n        })}\n      />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Text Styles in React Components\nDESCRIPTION: Shows how to apply the defined text styles to React components using the css utility function from Panda CSS.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/theming/text-styles.md#2025-04-18_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { css } from '../styled-system/css'\n\nfunction App() {\n  return (\n    <p className={css({ textStyle: 'body' })}>\n      This is a paragraph from Panda with the body text style.\n    </p>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: App Component Importing Design System Button\nDESCRIPTION: This code shows how to import and use a Button component from a design system package in an application, along with importing the required CSS styles.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/guides/component-library.md#2025-04-18_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from '@acme-org/design-system'\nimport './main.css'\n\nexport function App() {\n  return <Button>Click me</Button>\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom BorderX Utility in a Component\nDESCRIPTION: Example of using the custom 'borderX' property in a React component with the css function to generate a className with the appropriate border styling.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/customization/utilities.mdx#2025-04-18_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { css } from '../styled-system/css'\n\nfunction App() {\n  return <div className={css({ borderX: 'sm' })} />\n}\n```\n\n----------------------------------------\n\nTITLE: Using 'all' JSX Style Props in React Components\nDESCRIPTION: Example of using JSX components with the 'all' option enabled, where any CSS property can be passed directly as a prop alongside the css prop.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_116\n\nLANGUAGE: jsx\nCODE:\n```\nimport { styled } from 'styled-system/jsx'\n\nconst Example = () => {\n  // all CSS properties + css prop are allowed\n  return <Box bg=\"red.400\" color=\"white\" css={{...}} />\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Group Hover Condition in Panda Config\nDESCRIPTION: Demonstrates how to create a custom groupHover condition in Panda CSS configuration that applies styles when a parent container with 'group' role is hovered.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/customization/conditions.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  conditions: {\n    extend: {\n      groupHover: \"[role=group]:where(:hover, [data-hover]) &\",\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using LinkOverlay Pattern with Function Syntax\nDESCRIPTION: The LinkOverlay pattern expands a link's clickable area to its nearest parent with relative positioning. This example shows the function approach with an image and link.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/patterns.mdx#2025-04-18_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport { css } from '../styled-system/css'\nimport { linkOverlay } from '../styled-system/patterns'\n\nfunction App() {\n  return (\n    <div className={css({ pos: \"relative\" })}>\n      <img src=\"https://via.placeholder.com/150\" alt=\"placeholder\" />\n      <a href=\"#\" className={linkOverlay()}>\n        View more\n      </a>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Color Tokens in Panda CSS (TypeScript)\nDESCRIPTION: This snippet shows how to add custom color tokens to your Panda CSS theme. It demonstrates adding a 'brand' color with a specific hex value in the panda.config.ts file.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/customization/theme.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  theme: {\n    extend: {\n      tokens: {\n        colors: {\n          brand: { value: '#EA8433' }\n        }\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Queries with Theme Options\nDESCRIPTION: Example of defining containerNames and containerSizes in the theme configuration to support CSS container queries in Panda CSS.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  // ...\n  theme: {\n    extend: {\n      containerNames: ['sidebar', 'content'],\n      containerSizes: {\n        xs: '40em',\n        sm: '60em',\n        md: '80em',\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Server-Side Rendering with NextJS (TypeScript/JSX)\nDESCRIPTION: Example of how to implement server-side rendering of themes in a NextJS application, including layout and page components.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// app/layout.tsx\nimport { Inter } from 'next/font/google'\nimport { cookies } from 'next/headers'\nimport { ThemeName, getTheme } from '../../styled-system/themes'\n\nexport default async function RootLayout({ children }: { children: React.ReactNode }) {\n  const store = cookies()\n  const themeName = store.get('theme')?.value as ThemeName\n  const theme = themeName && (await getTheme(themeName))\n\n  return (\n    <html lang=\"en\" data-panda-theme={themeName ? themeName : undefined}>\n      {themeName && (\n        <head>\n          <style type=\"text/css\" id={theme.id} dangerouslySetInnerHTML={{ __html: theme.css }} />\n        </head>\n      )}\n      <body>{children}</body>\n    </html>\n  )\n}\n\n// app/page.tsx\nimport { getTheme, injectTheme } from '../../styled-system/themes'\n\nexport default function Home() {\n  return (\n    <>\n      <button\n        onClick={async () => {\n          const current = document.documentElement.dataset.pandaTheme\n          const next = current === 'primary' ? 'secondary' : 'primary'\n          const theme = await getTheme(next)\n          setCookie('theme', next, 7)\n          injectTheme(document.documentElement, theme)\n        }}\n      >\n        swap theme\n      </button>\n    </>\n  )\n}\n\n// Set a Cookie\nfunction setCookie(cName: string, cValue: any, expDays: number) {\n  let date = new Date()\n  date.setTime(date.getTime() + expDays * 24 * 60 * 60 * 1000)\n  const expires = 'expires=' + date.toUTCString()\n  document.cookie = cName + '=' + cValue + '; ' + expires + '; path=/'\n}\n```\n\n----------------------------------------\n\nTITLE: Peer and Group Condition Selectors in Panda CSS\nDESCRIPTION: Selectors for handling peer and group-based interactions and states\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/conditional-styles.md#2025-04-18_snippet_32\n\nLANGUAGE: css\nCODE:\n```\n_peerFocus: \".peer:is(:focus, [data-focus]) ~ &\"\n_groupHover: \".group:is(:hover, [data-hover]) &\"\n_groupActive: \".group:is(:active, [data-active]) &\"\n```\n\n----------------------------------------\n\nTITLE: Defining Style Patterns in Panda CSS\nDESCRIPTION: Example of extending built-in styling patterns. Shows how to customize the flex pattern by limiting the available direction values to only row and column.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/references/config.md#2025-04-18_snippet_17\n\nLANGUAGE: js\nCODE:\n```\n{\n  \"patterns\": {\n    extend: {\n      // Extend the default `flex` pattern\n      flex: {\n        properties: {\n          // only allow row and column\n          direction: { type: 'enum', value: ['row', 'column'] },\n        },\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Asynchronous PandaCSS Preset\nDESCRIPTION: Example of an asynchronous preset that fetches data before generating the preset configuration. This is useful when preset values need to be determined dynamically or fetched from an external source.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/customization/presets.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// my-preset.js\nexport default async function myPreset() {\n  const roseColors = await getRoseColors()\n\n  return definePreset({\n    name: 'my-preset',\n    theme: {\n      tokens: {\n        colors: {\n          rose: roseColors\n        }\n      }\n    }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic PandaCSS Preset\nDESCRIPTION: Demonstrates how to define a custom preset with the definePreset function. This example creates a preset that adds custom color tokens, which can then be used throughout your project.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/customization/presets.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// my-preset.js\nimport { definePreset } from '@pandacss/dev'\n\nexport default definePreset({\n  name: 'my-preset',\n  theme: {\n    tokens: {\n      colors: {\n        rose: {\n          50: { value: '#fff1f2' },\n          // ...\n          800: { value: '#9f2233' }\n        }\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring JSX Style Props in Panda CSS with All Props\nDESCRIPTION: Example of using the JSX factory with 'all' style props configuration, allowing direct style properties on the component.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/references/config.md#2025-04-18_snippet_25\n\nLANGUAGE: jsx\nCODE:\n```\n<styled.button marginTop=\"40px\">Click me</styled.button>\n```\n\n----------------------------------------\n\nTITLE: Recipe Generation Configuration\nDESCRIPTION: Configuration for generating component recipes with specific variants and responsive options\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/guides/static.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  staticCss: {\n    recipes: {\n      button: [\n        {\n          size: ['sm', 'md'],\n          responsive: true\n        },\n        { variant: ['*'] }\n      ],\n      // shorthand for all variants\n      tooltip: ['*']\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Peer Selector for Sibling Hover Effect\nDESCRIPTION: Using peer class and _peerHover modifier to style an element based on its sibling element's hover state.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/conditional-styles.md#2025-04-18_snippet_19\n\nLANGUAGE: jsx\nCODE:\n```\n<div>\n  <p className=\"peer\">Hover me</p>\n  <p className={css({ _peerHover: { bg: 'red.500' } })}>I'll change by bg</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Customizing Codegen Output with Preparation Hook\nDESCRIPTION: Hook that allows for manipulation of generated code artifacts before they are written to disk. This provides a way to customize the files produced by codegen.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  // ...\n  hooks: {\n    'codegen:prepare': ({ artifacts, changed }) => {\n      // do something with the emitted js/d.ts files\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Applying Animation Properties with Panda in JSX\nDESCRIPTION: This snippet shows how to apply animation properties using Panda's css utility in JSX. It includes examples of setting animation, animation name, and animation delay.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/transitions.md#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ animation: 'bounce' })} />\n<div className={css({ animationName: 'pulse' })} />\n<div className={css({ animationDelay: 'fast' })} />\n```\n\n----------------------------------------\n\nTITLE: Extending Panda CSS Configuration for Custom Components\nDESCRIPTION: Configuration example for extending the circle pattern to track a custom component. This allows Panda CSS to recognize and apply styling to the CustomCircle component.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/preset-base/CHANGELOG.md#2025-04-18_snippet_23\n\nLANGUAGE: js\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  patterns: {\n    extend: {\n      circle: {\n        jsx: ['CustomCircle'],\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Styles with Pseudo-selectors\nDESCRIPTION: Example of using nested selectors and pseudo-selectors within template literals for styled components.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/template-literals.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst Button = styled.button`\n  color: black;\n\n  &:hover {\n    color: blue;\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Configuring Recipe Patterns with staticCss in Panda CSS\nDESCRIPTION: Example of defining a card recipe and configuring it in the staticCss section of the config. Shows the change in behavior of the [*] wildcard selector, which no longer implicitly adds responsive variants.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nconst card = defineRecipe({\n  className: 'card',\n  base: { color: 'white' },\n  variants: {\n    size: {\n      small: { fontSize: '14px' },\n      large: { fontSize: '18px' },\n    },\n    visual: {\n      primary: { backgroundColor: 'blue' },\n      secondary: { backgroundColor: 'gray' },\n    },\n  },\n})\n\nexport default defineConfig({\n  // ...\n  staticCss: {\n    recipes: {\n      card: ['*'], // this\n\n      // was equivalent to:\n      card: [\n        // notice how `responsive: true` was implicitly added\n        { size: ['*'], responsive: true },\n        { visual: ['*'], responsive: true },\n      ],\n\n      //   will now correctly be equivalent to:\n      card: [{ size: ['*'] }, { visual: ['*'] }],\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Panda CSS for Astro Project\nDESCRIPTION: JavaScript configuration for Panda CSS, specifying content to scan and output directory.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/astro.mdx#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  preflight: true,\n  // define the content to scan 👇🏻\n  include: ['./src/**/*.{ts,tsx,js,jsx,astro}', './pages/**/*.{ts,tsx,js,jsx,astro}'],\n  exclude: [],\n  outdir: 'styled-system'\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Semantic Tokens with defineSemanticTokens in TypeScript\nDESCRIPTION: Function for semantic token definitions in Panda CSS. It enables creating context-aware tokens that can change based on conditions like color mode (light/dark theme).\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/customization/config-functions.md#2025-04-18_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineSemanticTokens } from '@pandacss/dev'\n\nconst theme = {\n  semanticTokens: defineSemanticTokens({\n    colors: {\n      primary: {\n        value: { _light: '{colors.blue.400}', _dark: '{colors.blue.200}' }\n      }\n    }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Breakpoints in Panda CSS (TypeScript)\nDESCRIPTION: This snippet demonstrates how to extend the default breakpoints in Panda CSS by adding a new '3xl' breakpoint. Configuration is done in the panda.config.ts file using the defineConfig function.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/customization/theme.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  theme: {\n    extend: {\n      breakpoints: {\n        '3xl': '1800px'\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Border Radius Utility in Panda CSS\nDESCRIPTION: Example demonstrating how to create a new 'br' utility that applies border radius to elements, connecting it to the radii tokens in the theme.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/extend.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  utilities: {\n    extend: {\n      br: {\n        className: 'rounded', // css({ br: \"sm\" }) => rounded-sm\n        values: 'radii', // connect values to the radii tokens\n        transform(value) {\n          return { borderRadius: value }\n        }\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Button Component with CSS Prop for Style Overrides\nDESCRIPTION: Shows how to create a Button component that supports style overrides using the new `css` prop approach. The component's base styles are defined and merged with any custom styles passed through the `css` prop.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_99\n\nLANGUAGE: tsx\nCODE:\n```\nimport { css } from '../styled-system/css'\n\nexport const Button = ({ css: cssProp = {}, children }) => {\n  const className = css({ display: 'flex', alignItem: 'center', color: 'black' }, cssProp)\n  return <button className={className}>{children}</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Variant Generation with cva in Panda CSS\nDESCRIPTION: Example demonstrating how to use the cva function with dynamic variant generation. This code programmatically creates spacing variants from a predefined set of tokens and properties, which can be used for responsive design.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_93\n\nLANGUAGE: typescript\nCODE:\n```\nimport { cva } from '.panda/css'\n\nconst variants = () => {\n  const spacingTokens = Object.entries({\n    s: 'token(spacing.1)',\n    m: 'token(spacing.2)',\n    l: 'token(spacing.3)',\n  })\n\n  const spacingProps = {\n    px: 'paddingX',\n    py: 'paddingY',\n  }\n\n  // Generate variants programmatically\n  return Object.entries(spacingProps)\n    .map(([name, styleProp]) => {\n      const variants = spacingTokens\n        .map(([variant, token]) => ({ [variant]: { [styleProp]: token } }))\n        .reduce((_agg, kv) => ({ ..._agg, ...kv }))\n\n      return { [name]: variants }\n    })\n    .reduce((_agg, kv) => ({ ..._agg, ...kv }))\n}\n\nconst baseStyle = cva({\n  variants: variants(),\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Recipe with Static CSS Rules\nDESCRIPTION: Example of defining a card recipe with built-in static CSS generation rules\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/guides/static.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineRecipe } from '@pandacss/dev'\n\nconst card = defineRecipe({\n  className: 'card',\n  base: { color: 'white' },\n  variants: {\n    size: {\n      small: { fontSize: '14px' },\n      large: { fontSize: '18px' }\n    }\n  },\n  staticCss: [{ size: ['*'] }]\n})\n```\n\n----------------------------------------\n\nTITLE: Using Updated JSX Property for Custom Component Tracking\nDESCRIPTION: New feature that allows using the 'jsx' property for advanced tracking of custom pattern components, showing a CustomCircle component implementation.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_102\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Circle } from 'styled-system/jsx'\nconst CustomCircle = ({ children, ...props }) => {\n  return <Circle {...props}>{children}</Circle>\n}\n```\n\n----------------------------------------\n\nTITLE: Using Property-Based Modifiers for Responsive Styles in Panda CSS (diff)\nDESCRIPTION: This code diff illustrates a more concise syntax for responsive styles using property-based modifiers. Instead of using separate breakpoint objects, the fontWeight property directly accepts responsive values in a single object.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/responsive-design.md#2025-04-18_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n<span\n  className={css({\n-   fontWeight: 'medium',\n-   lg: { fontWeight: 'bold' }\n+   fontWeight: { base: 'medium', lg: 'bold' }\n  })}\n>\n  Text\n</span>\n```\n\n----------------------------------------\n\nTITLE: Configuring custom import map in Panda CSS\nDESCRIPTION: Example of using the importMap configuration option to specify custom module specifiers, allowing for integration with package.json imports, monorepo packages, or tsconfig path aliases.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_86\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineConfig({\n  outdir: './outdir',\n  importMap: {\n    css: '#panda/styled-system/css',\n    recipes: '#panda/styled-system/recipes',\n    patterns: '#panda/styled-system/patterns',\n    jsx: '#panda/styled-system/jsx',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Conditional Semantic Tokens in Panda CSS\nDESCRIPTION: Shows how to define semantic tokens that change based on conditions like light and dark modes.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/theming/tokens.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  // ...\n  theme: {\n    semanticTokens: {\n      colors: {\n        danger: {\n          value: { base: '{colors.red}', _dark: '{colors.darkred}' }\n        },\n        success: {\n          value: { base: '{colors.green}', _dark: '{colors.darkgreen}' }\n        }\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Raw Method Usage Examples\nDESCRIPTION: Examples of using the new .raw() method for flexible usage and extraction in different contexts.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_66\n\nLANGUAGE: tsx\nCODE:\n```\n<Button rootProps={css.raw({ bg: \"red.400\" })} />\n\n// recipe in storybook\nexport const Funky: Story = {\n  args: button.raw({\n    visual: \"funky\",\n    shape: \"circle\",\n    size: \"sm\",\n  }),\n};\n\n// mixed with pattern\nconst stackProps = {\n  sm: stack.raw({ direction: \"column\" }),\n  md: stack.raw({ direction: \"row\" })\n}\n\nstack(stackProps[props.size])\n```\n\n----------------------------------------\n\nTITLE: Using Raw Method with Recipe in Storybook Args\nDESCRIPTION: Example of using the raw() method with a button recipe to mark Storybook args as valid recipe usage for the CSS extractor.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_123\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Funky: Story = {\n  // mark this as a button recipe usage\n  args: button.raw({\n    visual: 'funky',\n    shape: 'circle',\n    size: 'sm',\n  }),\n}\n```\n\n----------------------------------------\n\nTITLE: Using CSS Function for Style Merging in TypeScript/React\nDESCRIPTION: Example showing how to use the improved CSS function to merge multiple style objects, which is the preferred approach over using the cx function for style merging.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_54\n\nLANGUAGE: tsx\nCODE:\n```\nimport { css, cx } from '../styled-system/css'\n\nconst App = () => {\n  return (\n    <>\n      <div className={css({ mx: '3', paddingTop: '4' }, { mx: '10', pt: '6' })}>\n        Will result in `class=\"mx_10 pt_6\"`\n      </div>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Root Color Palette in React Component\nDESCRIPTION: Shows how to use the root button color palette and its values in a React component using the css utility. Demonstrates accessing different color states and hover effects.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/token-dictionary/CHANGELOG.md#2025-04-18_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { css } from '../styled-system/css'\n\nexport const App = () => {\n  return (\n    <button\n      className={css({\n        colorPalette: 'button',\n        color: 'colorPalette.light',\n        backgroundColor: 'colorPalette.dark',\n        _hover: {\n          color: 'colorPalette.light.accent',\n          background: 'colorPalette.light.accent.secondary',\n        },\n      })}\n    >\n      Root color palette\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Slot Variants with SVA (Slot Variant API)\nDESCRIPTION: Example of using the new sva function to define slot-based variant styling for multi-part components, allowing different parts of a component to have coordinated styling.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_88\n\nLANGUAGE: jsx\nCODE:\n```\nimport { sva } from 'styled-system/css'\n\nconst button = sva({\n  slots: ['label', 'icon'],\n  base: {\n    label: { color: 'red', textDecoration: 'underline' },\n  },\n  variants: {\n    rounded: {\n      true: {},\n    },\n    size: {\n      sm: {\n        label: { fontSize: 'sm' },\n        icon: { fontSize: 'sm' },\n      },\n      lg: {\n        label: { fontSize: 'lg' },\n        icon: { fontSize: 'lg', color: 'pink' },\n      },\n    },\n  },\n  defaultVariants: {\n    size: 'sm',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Global CSS Variables in PandaCSS\nDESCRIPTION: Demonstrates how to define type-safe CSS variables and custom CSS @property declarations using the globalVars config option.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  // ...\n  globalVars: {\n    '--some-color': 'red',\n    '--button-color': {\n      syntax: '<color>',\n      inherits: false,\n      initialValue: 'blue',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Font Family Tokens in Panda CSS (TypeScript)\nDESCRIPTION: This snippet demonstrates how to customize font family tokens in Panda CSS. It adds a 'marketing' font token with 'Inter Variable' as its value in the panda.config.ts configuration file.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/customization/theme.mdx#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  theme: {\n    extend: {\n      tokens: {\n        fonts: {\n          marketing: { value: 'Inter Variable' }\n        }\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using CSS Variables with strictPropertyValues\nDESCRIPTION: Examples of using CSS variables in style props with strictPropertyValues enabled, showing which usages are now allowed.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\ncss({\n  // ❌ was not allowed before when `strictPropertyValues` was enabled\n  display: 'var(--button-color)', // ✅ will now be allowed/suggested\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\ncss({\n  // ✅ will be allowed\n  display: 'var(--xxx)',\n})\n```\n\n----------------------------------------\n\nTITLE: Using the styled Tag for Component Creation\nDESCRIPTION: Example of using the styled tag to create a component with encapsulated styles, similar to styled-components or emotion.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/template-literals.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { styled } from '../styled-system/jsx'\n\n// Create a styled component\nconst Heading = styled.h1`\n  font-size: 16px;\n  font-weight: bold;\n`\n\nfunction Demo() {\n  // Use the styled component\n  return <Heading>This is a title</Heading>\n}\n\n// => <h1 class='font-size_16px font-weight_bold'>This is a title</h1>\n```\n\n----------------------------------------\n\nTITLE: Defining Condition Types and Media Query Breakpoints in Panda CSS\nDESCRIPTION: Defines condition types and various conditions such as color schemes, directions, pseudoclasses, and viewport breakpoints. This enables conditional styling in the Panda CSS framework.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/node/README.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype ConditionType =\n  | 'color-scheme'\n  | 'resolution'\n  | 'writing-mode'\n  | 'pseudo'\n  | 'selector'\n  | 'viewport'\n  | 'interaction-media'\n  | 'reduced-motion'\n  | 'reduced-data'\n  | 'reduced-transparent'\n  | 'contrast'\n\nconst conditions = {\n  dark: {\n    type: 'color-scheme',\n    value: '[data-theme=dark]',\n    colorScheme: 'dark',\n  },\n  darkDimmed: {\n    type: 'color-scheme',\n    value: '[data-theme=dark_dimmed]',\n    colorScheme: 'dark',\n  },\n  ltr: {\n    type: 'dir',\n    value: '[dir=rtl]',\n  },\n  rtl: {\n    type: 'dir',\n    value: '[dir=rtl]',\n  },\n  hover: {\n    type: 'pseudo',\n    value: '&:hover',\n  },\n  focus: {\n    type: 'pseudo',\n    value: '&:focus',\n  },\n  sm: {\n    type: 'viewport',\n    value: '@media (min-width: 480px)',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Config Conditions in Panda\nDESCRIPTION: Demonstrates how to create config conditions with nested at-rules and selectors in Panda. This allows for more complex and specific styling conditions.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defaultConfig({\n  conditions: {\n    extend: {\n      supportHover: ['@media (hover: hover) and (pointer: fine)', '&:hover'],\n    },\n  },\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { css } from '../styled-system/css'\n\ncss({\n  _supportHover: {\n    color: 'red',\n  },\n})\n```\n\nLANGUAGE: css\nCODE:\n```\n@media (hover: hover) and (pointer: fine) {\n  &:hover {\n    color: red;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Fill Color to SVG Elements using Panda CSS in JSX\nDESCRIPTION: This snippet demonstrates how to change the fill color of an SVG element using Panda's css utility function. The fill color is set to 'blue.500' from the colors token category.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/svg.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<svg className={css({ fill: 'blue.500' })} />\n```\n\n----------------------------------------\n\nTITLE: Creating CSS Entry File with Layers\nDESCRIPTION: CSS code defining the layer structure for Panda CSS in the project.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/gatsby.mdx#2025-04-18_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n@layer reset, base, tokens, recipes, utilities;\n```\n\n----------------------------------------\n\nTITLE: Using Styled Components with Panda CSS\nDESCRIPTION: Example showing how to use the styled factory and properly handle compoundVariants in a React component.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/studio/CHANGELOG.md#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// app.tsx\nconst Button = styled('button', button)\n\nconst App = () => {\n  return (\n    // ❌ this would only have the classes `button button--size_sm`\n    // the `text_blue` was missing\n    // ✅ it's now fixed -> `button button--size_sm text_blue`\n    <Button size=\"sm\">Click me</Button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Targeting a Single Breakpoint with Panda CSS (JSX)\nDESCRIPTION: This snippet demonstrates how to target a single breakpoint by adding the \"Only\" suffix to the breakpoint name. The lgOnly property applies the bold font weight exclusively at the lg breakpoint.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/responsive-design.md#2025-04-18_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<span\n  className={css({\n    fontWeight: { lgOnly: 'bold' }\n  })}\n>\n  Text\n</span>\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Color with colorPalette in Panda CSS\nDESCRIPTION: Demonstrates how to create a virtual color using the colorPalette property in Panda CSS. This example shows setting background colors for normal and hover states.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/virtual-color.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { css } from '../styled-system/css'\n\nconst className = css({\n  colorPalette: 'blue',\n  bg: 'colorPalette.100',\n  _hover: {\n    bg: 'colorPalette.200'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Panda CSS Opinionated Preset in Configuration\nDESCRIPTION: This snippet demonstrates how to use the '@pandacss/preset-panda' preset in Panda CSS configuration. This preset provides an opinionated set of tokens for colors, spacing, fonts, etc.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/guides/minimal-setup.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default defineConfig({\n  // ...\n  presets: ['@pandacss/preset-panda']\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Backdrop Filters with Panda CSS\nDESCRIPTION: Shows how to apply backdrop filters to elements using Panda CSS. Backdrop filters affect the area behind an element, creating effects like blur or brightness changes.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/effects.md#2025-04-18_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ backdropFilter: 'auto', backdropBlur: 'sm' })} />\n```\n\n----------------------------------------\n\nTITLE: Using splitCssProps Utility in JSX\nDESCRIPTION: Demonstrates usage of the splitCssProps utility exported from the jsx entrypoint for separating CSS props from other props.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nimport { splitCssProps, styled } from '../styled-system/jsx'\nimport type { HTMLStyledProps } from '../styled-system/types'\n\nfunction SplitComponent({ children, ...props }: HTMLStyledProps<'div'>) {\n  const [cssProps, restProps] = splitCssProps(props)\n  return (\n    <styled.div {...restProps} className={css({ display: 'flex', height: '20', width: '20' }, cssProps)}>\n      {children}\n    </styled.div>\n  )\n}\n\n// Usage\n\nfunction App() {\n  return <SplitComponent margin=\"2\">Click me</SplitComponent>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JSX Style Props in Panda CSS with Minimal Props\nDESCRIPTION: Example of using the JSX factory with 'minimal' style props configuration, allowing only the css prop for styling.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/references/config.md#2025-04-18_snippet_26\n\nLANGUAGE: jsx\nCODE:\n```\n<styled.button css={{ marginTop: '40px' }}>Click me</styled.button>\n```\n\n----------------------------------------\n\nTITLE: Configuring Grid Template Columns in JSX with Panda\nDESCRIPTION: Illustrates how to define grid columns using Panda's gridTemplateColumns property. The example creates three equally-sized columns using the repeat and minmax functions.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/flex-and-grid.md#2025-04-18_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ gridTemplateColumns: 'repeat(3, minmax(0, 1fr))' })} />\n```\n\n----------------------------------------\n\nTITLE: OS Color Scheme Preference Styling\nDESCRIPTION: Styling based on user's OS color scheme preference using _osDark modifier to adjust background color when dark mode is preferred.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/conditional-styles.md#2025-04-18_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\n<div\n  className={css({\n    bg: 'white',\n    _osDark: { bg: 'black' }\n  })}\n>\n  Hello\n</div>\n```\n\n----------------------------------------\n\nTITLE: Style Hashing Example\nDESCRIPTION: Demonstrates how styles are transformed when hashing is enabled in Panda UI.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/writing-styles.md#2025-04-18_snippet_19\n\nLANGUAGE: jsx\nCODE:\n```\nimport { css } from '../styled-system/css'\n\nconst styles = css({\n  display: 'flex',\n  flexDirection: 'row',\n  _hover: {\n    bg: 'red.50'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Styled Components with splitCssProps\nDESCRIPTION: Example of creating a custom component that accepts style props by using the splitCssProps function to separate CSS and non-CSS props.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/style-props.mdx#2025-04-18_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport { splitCssProps, styled } from '../styled-system/jsx'\nimport type { HTMLStyledProps } from '../styled-system/types'\n\nexport function Component(props: HTMLStyledProps<'div'>) {\n  const [cssProps, restProps] = splitCssProps(props)\n  const { css: cssProp, ...styleProps } = cssProps\n\n  const className = css(\n    { display: 'flex', height: '20', width: '20' },\n    styleProps,\n    cssProp\n  )\n\n  return <div {...restProps} className={className} />\n}\n\n// Usage\nfunction App() {\n  return <Component w=\"2\">Click me</Component>\n}\n```\n\n----------------------------------------\n\nTITLE: Using Slot Variant Styles in a Component\nDESCRIPTION: Shows how to apply slot-based styles in a component by using the returned classnames for different parts of the component.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_61\n\nLANGUAGE: jsx\nCODE:\n```\nexport function App() {\n  const btnClass = button({ size: 'lg', rounded: true })\n\n  return (\n    <button>\n      <p class={btnClass.label}> Label</p>\n      <p class={btnClass.icon}> Icon</p>\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Margin to Specific Sides in JSX with Chakra UI and Panda\nDESCRIPTION: Demonstrates how to apply margin to specific sides of an element using properties like 'marginLeft' and 'marginTop', along with their shorthand versions 'ml' and 'mt'.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/spacing.md#2025-04-18_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ marginLeft: '3' })} />\n<div className={css({ ml: '3' })} /> // shorthand\n\n<div className={css({ marginTop: '3' })} />\n<div className={css({ mt: '3' })} /> // shorthand\n```\n\n----------------------------------------\n\nTITLE: Using Token Function in Media Queries\nDESCRIPTION: Example showing how to reference design tokens in media queries or other CSS at-rules using the token() function, allowing design tokens to be used consistently throughout the codebase.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_128\n\nLANGUAGE: js\nCODE:\n```\nimport { css } from '../styled-system/css'\n\nconst className = css({\n  '@media screen and (min-width: token(sizes.4xl))': {\n    color: 'green.400',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Layer Styles with defineLayerStyles in TypeScript\nDESCRIPTION: Function for layer styles definitions in Panda CSS. It allows creating reusable style collections for visual layers like containers or cards with consistent visual properties.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/customization/config-functions.md#2025-04-18_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineLayerStyles } from '@pandacss/dev'\n\nconst layerStyles = defineLayerStyles({\n  container: {\n    description: 'container styles',\n    value: {\n      background: 'gray.50',\n      border: '2px solid',\n      borderColor: 'gray.500'\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Updating staticCss Configuration in TypeScript\nDESCRIPTION: This snippet demonstrates changes to the `staticCss` configuration in the project's config file. It shows how the special `[*]` rule for recipes has been updated to generate more appropriate CSS without implicit responsive settings.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_124\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  // ...\n  staticCss: {\n    recipes: {\n      card: ['*'], // this\n\n      // was equivalent to:\n      card: [\n        // notice how `responsive: true` was implicitly added\n        { size: ['*'], responsive: true },\n        { visual: ['*'], responsive: true },\n      ],\n\n      //   will now correctly be equivalent to:\n      card: [{ size: ['*'] }, { visual: ['*'] }],\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using AspectRatio Pattern with JSX Syntax\nDESCRIPTION: The AspectRatio pattern creates a container with a fixed aspect ratio for media elements. This example shows the JSX approach with a 16:9 ratio for an iframe.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/patterns.mdx#2025-04-18_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AspectRatio } from '../styled-system/jsx'\n\nfunction App() {\n  return (\n    <AspectRatio ratio={16 / 9}>\n      <iframe\n        src=\"https://www.google.com/maps/embed?pb=!1m18!1m1\"\n        title=\"Google map\"\n        frameBorder=\"0\"\n      />\n    </AspectRatio>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Recipe with staticCss Configuration in TypeScript\nDESCRIPTION: Example of defining a card recipe with size and visual variants, demonstrating the updated configuration for staticCss in defineConfig. This shows how the '[*]' pattern behavior has been fixed to avoid generating unnecessary responsive variants.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_70\n\nLANGUAGE: typescript\nCODE:\n```\nconst card = defineRecipe({\n  className: 'card',\n  base: { color: 'white' },\n  variants: {\n    size: {\n      small: { fontSize: '14px' },\n      large: { fontSize: '18px' },\n    },\n    visual: {\n      primary: { backgroundColor: 'blue' },\n      secondary: { backgroundColor: 'gray' },\n    },\n  },\n})\n\nexport default defineConfig({\n  // ...\n  staticCss: {\n    recipes: {\n      card: ['*'], // this\n\n      // was equivalent to:\n      card: [\n        // notice how `responsive: true` was implicitly added\n        { size: ['*'], responsive: true },\n        { visual: ['*'], responsive: true },\n      ],\n\n      //   will now correctly be equivalent to:\n      card: [{ size: ['*'] }, { visual: ['*'] }],\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Renaming Recipe Properties in Panda CSS\nDESCRIPTION: Shows the breaking change in version 0.9.0 where the 'name' property of a config recipe was renamed to 'className' for API consistency and clearer intent expression.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_131\n\nLANGUAGE: diff\nCODE:\n```\nexport const buttonRecipe = defineRecipe({\n-  name: 'button',\n+  className: 'button',\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Global Font Face in Panda CSS Config\nDESCRIPTION: Demonstrates how to define global font faces in the Panda CSS configuration file, including support for multiple font sources and weights.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// pandacss.config.js\nexport default defineConfig({\n  globalFontface: {\n    Roboto: {\n      src: 'url(/fonts/roboto.woff2) format(\"woff2\")',\n      fontWeight: '400',\n      fontStyle: 'normal',\n    },\n  },\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// pandacss.config.js\n\nexport default defineConfig({\n  globalFontface: {\n    Roboto: {\n      // multiple src\n      src: ['url(/fonts/roboto.woff2) format(\"woff2\")', 'url(/fonts/roboto.woff) format(\"woff\")'],\n      fontWeight: '400',\n      fontStyle: 'normal',\n    },\n  },\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// pandacss.config.js\n\nexport default defineConfig({\n  globalFontface: {\n    // multiple font weights\n    Roboto: [\n      {\n        src: 'url(/fonts/roboto.woff2) format(\"woff2\")',\n        fontWeight: '400',\n        fontStyle: 'normal',\n      },\n      {\n        src: 'url(/fonts/roboto-bold.woff2) format(\"woff2\")',\n        fontWeight: '700',\n        fontStyle: 'normal',\n      },\n    ],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Atomic Recipe with cva\nDESCRIPTION: Example showing how to create a basic button recipe using cva with visual and size variants.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/recipes.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { cva } from '../styled-system/css'\n\nconst button = cva({\n  base: {\n    display: 'flex'\n  },\n  variants: {\n    visual: {\n      solid: { bg: 'red.200', color: 'white' },\n      outline: { borderWidth: '1px', borderColor: 'red.200' }\n    },\n    size: {\n      sm: { padding: '4', fontSize: '12px' },\n      lg: { padding: '8', fontSize: '24px' }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring JSX Components for Patterns in Panda CSS\nDESCRIPTION: Configuration example showing how to set up JSX component mappings with dot notation for grid and stack patterns, enabling the usage of these patterns with specific component selectors.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  // ...\n  patterns: {\n    extend: {\n      grid: {\n        jsx: ['Form.Group', 'Grid'],\n      },\n      stack: {\n        jsx: ['Form.Action', 'Stack'],\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Default Values in Pattern Configurations\nDESCRIPTION: Example showing how to set and override defaultValues in pattern configurations, demonstrated with an hstack pattern that has a default gap value of 40px.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\ndefineConfig({\n  patterns: {\n    hstack: {\n      properties: {\n        justify: { type: 'property', value: 'justifyContent' },\n        gap: { type: 'property', value: 'gap' },\n      },\n      // you can also use a token like '10'\n      defaultValues: { gap: '40px' },\n      transform(props) {\n        const { justify, gap, ...rest } = props\n        return {\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: justify,\n          gap,\n          ...rest,\n        }\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using Custom Button Component with Style Overrides\nDESCRIPTION: Example of using the Button component with style overrides passed through the `css` prop, demonstrating the flexibility of the pattern.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_30\n\nLANGUAGE: tsx\nCODE:\n```\nimport { css } from '../../styled-system/css'\nimport { Button, Thingy } from './Button'\n\nexport default function Page() {\n  return (\n    <Button css={{ color: 'pink', _hover: { color: 'red' } }}>\n      will result in `class=\"d_flex items_center text_pink hover:text_red\"`\n    </Button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Default Tokens in Panda CSS Configuration\nDESCRIPTION: This snippet shows how to remove default design tokens in Panda CSS by setting the 'presets' key to an empty array in the configuration. It also demonstrates how to define custom tokens without using the 'extend' key.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/guides/minimal-setup.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default defineConfig({\n  // ...\n  presets: []\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport default defineConfig({\n  // ...\n  theme: {\n    tokens: {\n      colors: {\n        primary: { value: '#ff0000' }\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Nested Color Palette in React Component\nDESCRIPTION: Example of using a deeply nested color palette as the root palette in a React component. This allows for targeting specific palette branches for different UI elements.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/token-dictionary/CHANGELOG.md#2025-04-18_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nimport { css } from '../styled-system/css'\n\nexport const App = () => {\n  return (\n    <button\n      className={css({\n        colorPalette: 'button.light.accent',\n        color: 'colorPalette.secondary',\n      })}\n    >\n      Nested color palette leaf\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Theme Tokens in Panda Config\nDESCRIPTION: Configuration example showing how to override default tokens by extending the theme in panda.config.ts.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/guides/component-library.md#2025-04-18_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  //...\n  presets: ['@acme-org/preset']\n  theme: {\n    extend: {\n      tokens: {\n        colors: { primary: { value: 'blue.500' } }\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Arbitrary Breakpoints with hideFrom Utility in Panda CSS\nDESCRIPTION: Example showing how to use arbitrary breakpoints with the hideFrom utility in Panda CSS, which applies a min-width media query using the specified pixel value.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_44\n\nLANGUAGE: jsx\nCODE:\n```\ncss({ hideFrom: '800px' })\n// => @media screen and (min-width: 800px) { background: red; }\n```\n\n----------------------------------------\n\nTITLE: Defining Semantic Tokens in Panda CSS Configuration\nDESCRIPTION: This snippet shows how to define semantic tokens in the Panda CSS configuration, including color tokens with base and dark mode variants.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  semanticTokens: {\n    colors: {\n      blue: { value: 'blue' },\n      green: {\n        value: {\n          base: 'green',\n          _dark: 'white',\n        },\n      },\n      red: {\n        value: {\n          base: 'red',\n        },\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable Color-mix Transform Function\nDESCRIPTION: Helper function that makes it easier to create property transforms for different CSS properties that need color-mix functionality.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_84\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { PropertyTransform } from '@pandacss/types'\n\nexport const createColorMixTransform =\n  (prop: string): PropertyTransform =>\n  (value, args) => {\n    const mix = args.utils.colorMix(value)\n    if (mix.invalid) return { [prop]: value }\n\n    const cssVar = '--mix-' + prop\n\n    return {\n      [cssVar]: mix.value,\n      [prop]: `var(${cssVar}, ${mix.color})`,\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Utilities with defineUtility\nDESCRIPTION: Demonstrates how to define custom utilities using the `defineUtility` method. This example creates an 'appearance' utility that handles both standard and vendor-prefixed properties.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_104\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineUtility, defineConfig } from '@pandacss/dev'\n\nconst appearance = defineUtility({\n  className: 'appearance',\n  transform(value) {\n    return { appearance: value, WebkitAppearance: value }\n  },\n})\n\nexport default defineConfig({\n  utilities: {\n    appearance,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Panda CSS Hooks Interface in TypeScript\nDESCRIPTION: TypeScript interface defining the available hooks in Panda CSS configuration. Includes hooks for config resolution, context creation, parsing, code generation and CSS generation phases.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/config/CHANGELOG.md#2025-04-18_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface PandaHooks {\n  /**\n   * Called when the config is resolved, after all the presets are loaded and merged.\n   * This is the first hook called, you can use it to tweak the config before the context is created.\n   */\n  'config:resolved': (args: { conf: LoadConfigResult }) => MaybeAsyncReturn\n  /**\n   * Called when the Panda context has been created and the API is ready to be used.\n   */\n  'context:created': (args: { ctx: ApiInterface; logger: LoggerInterface }) => void\n  /**\n   * Called when the config file or one of its dependencies (imports) has changed.\n   */\n  'config:change': (args: { config: UserConfig }) => MaybeAsyncReturn\n  /**\n   * Called after reading the file content but before parsing it.\n   * You can use this hook to transform the file content to a tsx-friendly syntax so that Panda's parser can parse it.\n   * You can also use this hook to parse the file's content on your side using a custom parser, in this case you don't have to return anything.\n   */\n  'parser:before': (args: { filePath: string; content: string }) => string | void\n  /**\n   * Called after the file styles are extracted and processed into the resulting ParserResult object.\n   * You can also use this hook to add your own extraction results from your custom parser to the ParserResult object.\n   */\n  'parser:after': (args: { filePath: string; result: ParserResultInterface | undefined }) => void\n  /**\n   * Called after the codegen is completed\n   */\n  'codegen:done': () => MaybeAsyncReturn\n  /**\n   * Called right before adding the design-system CSS (global, static, preflight, tokens, keyframes) to the final CSS\n   * Called right before writing/injecting the final CSS (styles.css) that contains the design-system CSS and the parser CSS\n   * You can use it to tweak the CSS content before it's written to disk or injected through the postcss plugin.\n   */\n  'cssgen:done': (args: {\n    artifact: 'global' | 'static' | 'reset' | 'tokens' | 'keyframes' | 'styles.css'\n    content: string\n  }) => string | void\n}\n```\n\n----------------------------------------\n\nTITLE: Using Recipe in Component\nDESCRIPTION: Demonstrates how to apply a recipe to a button component using variant properties.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/recipes.md#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { button } from './button'\n\nconst Button = () => {\n  return (\n    <button className={button({ visual: 'solid', size: 'lg' })}>\n      Click Me\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CSS Properties Generation\nDESCRIPTION: Example of generating specific CSS properties with conditions, responsive classes, and custom values\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/guides/static.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  staticCss: {\n    css: [\n      {\n        properties: {\n          margin: ['*'],\n          padding: ['*', '50px', '80px']\n        },\n        responsive: true\n      },\n      {\n        properties: {\n          color: ['*'],\n          backgroundColor: ['green.200', 'red.400']\n        },\n        conditions: ['light', 'dark']\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Visually Hidden Pattern\nDESCRIPTION: Shows how to hide elements visually while keeping them accessible to screen readers.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/patterns.mdx#2025-04-18_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\nimport { visuallyHidden } from '../styled-system/patterns'\n\nexport function Checkbox() {\n  return (\n    <label>\n      <input type=\"checkbox\" className={visuallyHidden()}>\n        I'm hidden\n      </input>\n      <span>Checkbox</span>\n    </label>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Squares with Square Pattern\nDESCRIPTION: Shows implementation of square elements with equal width and height using both function and JSX approaches.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/patterns.mdx#2025-04-18_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\nimport { square } from '../styled-system/patterns'\n\nfunction App() {\n  return <div className={square({ size: '12', bg: 'red.300' })} />\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Square } from '../styled-system/jsx'\n\nfunction App() {\n  return <Square size=\"12\" bg=\"red.300\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Using Color Opacity Modifier Syntax in Panda CSS\nDESCRIPTION: Demonstrates how to use the new color opacity modifier syntax in both runtime usage and build-time configuration. This allows specifying color opacity using the format 'color.shade/opacity'.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { css } from '../styled-system/css'\n\ncss({ bg: '{colors.blue.300/70}' })\n// => @layer utilities {\n//    .bg_token\\(colors\\.blue\\.300\\/70\\) {\n//      background: color-mix(in srgb, var(--colors-blue-300) 70%, transparent);\n//    }\n//  }\n\ncss({ bg: 'token(colors.blue.300/70)' })\n// => @layer utilities {\n//    .bg_token\\(colors\\.blue\\.300\\/70\\) {\n//      background: color-mix(in srgb, var(--colors-blue-300) 70%, transparent);\n//    }\n//  }\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  theme: {\n    tokens: {\n      colors: {\n        blue: {\n          300: { value: '#00f' },\n        },\n      },\n    },\n    semanticTokens: {\n      colors: {\n        primary: {\n          value: '{colors.blue.300/70}',\n        },\n      },\n    },\n  },\n})\n```\n\nLANGUAGE: css\nCODE:\n```\n@layer tokens {\n  :where(:root, :host) {\n    --colors-blue-300: #00f;\n    --colors-primary: color-mix(in srgb, var(--colors-blue-300) 70%, transparent);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Animation Styles in Panda CSS\nDESCRIPTION: Demonstrates how to define animation styles using defineAnimationStyles from @pandacss/dev. Shows implementation of slide-fade-in animations with different placement variations.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/theming/animation-styles.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineAnimationStyles } from '@pandacss/dev'\n\nexport const animationStyles = defineAnimationStyles({\n  'slide-fade-in': {\n    value: {\n      transformOrigin: 'var(--transform-origin)',\n      animationDuration: 'fast',\n      '&[data-placement^=top]': {\n        animationName: 'slide-from-top, fade-in'\n      },\n      '&[data-placement^=bottom]': {\n        animationName: 'slide-from-bottom, fade-in'\n      },\n      '&[data-placement^=left]': {\n        animationName: 'slide-from-left, fade-in'\n      },\n      '&[data-placement^=right]': {\n        animationName: 'slide-from-right, fade-in'\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Panda Syntax and CSS Processing in JSON\nDESCRIPTION: This snippet shows how to configure syntax preferences and CSS processing options in Panda.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/references/config.md#2025-04-18_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"syntax\": \"template-literal\",\n  \"lightningcss\": true,\n  \"browserslist\": [\"last 2 versions\", \"not dead\", \"not < 2%\"],\n  \"polyfill\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Style Merging in React Components with css Prop\nDESCRIPTION: Shows how to implement style merging in a React component by exposing a css prop and merging it with local styles. This approach enables component consumers to override styles while maintaining base component styling.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/merging-styles.md#2025-04-18_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst cardStyles = css.raw({\n  bg: 'red',\n  color: 'white'\n})\n\nfunction Card({ title, description, css: cssProp }) {\n  return (\n    // merge the `cardStyles` with the `cssProp` passed in\n    <div className={css(cardStyles, cssProp)}>\n      <h1>{title}</h1>\n      <p>{description}</p>\n    </div>\n  )\n}\n\n// usage\nfunction Demo() {\n  return (\n    <Card\n      title=\"Hello World\"\n      description=\"This is a card component\"\n      css={{ bg: 'blue' }}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Background Colors in Panda CSS\nDESCRIPTION: Examples of applying background colors using Panda CSS utility classes, including support for alpha transparency.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/background.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ bg: 'red.200' })} />\n<div className={css({ bg: 'blue.200/30' })} /> // with alpha\n```\n\n----------------------------------------\n\nTITLE: Applying Debug Class in JSX with Panda CSS\nDESCRIPTION: This example shows how to use the debug utility class from Panda CSS to apply debugging outlines to elements. The class is applied using the css function within a className prop, which is useful for visual inspection during development.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/helpers.md#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ debug: true })}>Debugging outline applied</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Token Name Prefixing in Panda\nDESCRIPTION: Example showing how to use the tokens:created hook to prefix token names with '$' character, useful when migrating from other CSS-in-JS libraries.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/hooks.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  // ...\n  hooks: {\n    'tokens:created': ({ configure }) => {\n      configure({\n        formatTokenName: path => '$' + path.join('-')\n      })\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Applying Scroll Padding with Panda CSS in JSX\nDESCRIPTION: This snippet shows how to set scroll padding inside scroll containers using Panda CSS. It uses the 'scrollPaddingY' property to set block padding.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/interactivity.md#2025-04-18_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ scrollPaddingY: '2' })}>\n  Scrollbar Container with block padding\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Slot Recipes with SVA\nDESCRIPTION: Shows how to define slot recipes using sva for styling multi-part components with base styles and variants. Includes configuration for different slots with their own style properties.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/shared/CHANGELOG.md#2025-04-18_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport { sva } from 'styled-system/css'\n\nconst button = sva({\n  slots: ['label', 'icon'],\n  base: {\n    label: { color: 'red', textDecoration: 'underline' },\n  },\n  variants: {\n    rounded: {\n      true: {},\n    },\n    size: {\n      sm: {\n        label: { fontSize: 'sm' },\n        icon: { fontSize: 'sm' },\n      },\n      lg: {\n        label: { fontSize: 'lg' },\n        icon: { fontSize: 'lg', color: 'pink' },\n      },\n    },\n  },\n  defaultVariants: {\n    size: 'sm',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Default Values in Pattern Configurations\nDESCRIPTION: Example of defining a horizontal stack pattern with default gap value, showing how to use the new defaultValues configuration option.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_114\n\nLANGUAGE: javascript\nCODE:\n```\ndefineConfig({\n  patterns: {\n    hstack: {\n      properties: {\n        justify: { type: 'property', value: 'justifyContent' },\n        gap: { type: 'property', value: 'gap' },\n      },\n      // you can also use a token like '10'\n      defaultValues: { gap: '40px' },\n      transform(props) {\n        const { justify, gap, ...rest } = props\n        return {\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: justify,\n          gap,\n          ...rest,\n        }\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Variant Styles with Panda CVA Function in React\nDESCRIPTION: Demonstrates how to create variant styles using the Panda cva function in React, which is used instead of the css function for variant styles.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/migration/stitches.md#2025-04-18_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { cva } from '../styled-system/css'\n\n// definition\nconst styles = cva({\n  base: {\n    border: 'solid 1px red',\n    backgroundColor: 'transparent'\n  },\n  variants: {\n    variant: {\n      // ...\n    }\n  }\n})\n\n// usage\n<button className={styles({ variant: 'primary' })} />\n```\n\n----------------------------------------\n\nTITLE: Configuring CSS Layers for Panda CSS\nDESCRIPTION: CSS configuration defining layers for reset, base, tokens, recipes, and utilities.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/nuxt.mdx#2025-04-18_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n@layer reset, base, tokens, recipes, utilities;\n```\n\n----------------------------------------\n\nTITLE: Defining Semantic Tokens in Panda CSS Configuration\nDESCRIPTION: Demonstrates how to define semantic tokens that reference existing tokens using the {} syntax.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/theming/tokens.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  theme: {\n    tokens: {\n      colors: {\n        red: { value: '#EE0F0F' },\n        green: { value: '#0FEE0F' }\n      }\n    },\n    semanticTokens: {\n      colors: {\n        danger: { value: '{colors.red}' },\n        success: { value: '{colors.green}' }\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Spacing Utilities with Negative Margins\nDESCRIPTION: Example of using the new spaceX utility to apply negative margins between elements in a flex container.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\n<div className={flex({ spaceX: '-1' })}>\n  <div className={circle({ size: '5', bg: 'red' })} />\n  <div className={circle({ size: '5', bg: 'pink' })} />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating a Component with Style Overrides using CSS Function\nDESCRIPTION: Demonstrates how to create a Button component that supports style overrides by accepting and merging a css prop with base styles.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_55\n\nLANGUAGE: tsx\nCODE:\n```\nimport { css } from '../../styled-system/css'\n\nexport const Button = ({ css: cssProp = {}, children }) => {\n  const className = css({ display: 'flex', alignItem: 'center', color: 'black' }, cssProp)\n  return <button className={className}>{children}</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Panda with Class Prefix\nDESCRIPTION: This configuration shows how to set up Panda CSS with a prefix option to avoid class name conflicts when using the static CSS approach. The prefix 'acme' will be applied to all generated class names.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/guides/component-library.md#2025-04-18_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  //...\n  prefix: 'acme'\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable Color Mix Transform Function\nDESCRIPTION: A utility function that creates a property transform for any CSS property to use with the colorMix feature. This makes it easy to add color-mix support to multiple properties.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { PropertyTransform } from '@pandacss/types'\n\nexport const createColorMixTransform =\n  (prop: string): PropertyTransform =>\n  (value, args) => {\n    const mix = args.utils.colorMix(value)\n    if (mix.invalid) return { [prop]: value }\n\n    const cssVar = '--mix-' + prop\n\n    return {\n      [cssVar]: mix.value,\n      [prop]: `var(${cssVar}, ${mix.color})`,\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Removing Pattern from Base Presets in Panda CSS\nDESCRIPTION: Example showing how to remove a specific pattern from the default base preset while keeping other patterns, using object destructuring and eject option.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/extend.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport pandaBasePreset from '@pandacss/preset-base'\n\n// omitting stack here\nconst { stack, ...pandaBasePresetPatterns } = pandaBasePreset.patterns\n\nexport default defineConfig({\n  presets: ['@pandacss/preset-panda'], // 👈 we still want the tokens, breakpoints and textStyles from this preset\n\n  // ⚠️ we need to eject to prevent the `@pandacss/preset-base` from being resolved\n  // https://panda-css.com/docs/customization/presets#which-panda-presets-will-be-included-\n  eject: true,\n  patterns: {\n    extend: {\n      ...pandaBasePresetPatterns\n      // your customizations here\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Flex Direction in JSX with Panda\nDESCRIPTION: Shows how to set the flex direction using Panda's flexDir shorthand property. The example demonstrates setting the direction to 'column'.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/flex-and-grid.md#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ flexDir: 'column' })} />\n```\n\n----------------------------------------\n\nTITLE: Placeholder Styling for Input Elements\nDESCRIPTION: Styling the placeholder text of an input using the _placeholder modifier to change placeholder color.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/conditional-styles.md#2025-04-18_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n<input\n  placeholder=\"Enter your name\"\n  className={css({\n    _placeholder: { color: 'gray.500' }\n  })}\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Fractional Height in JSX\nDESCRIPTION: Shows how to set fractional heights using both standard and shorthand properties.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/sizing.md#2025-04-18_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ height: '1/2' })} />\n<div className={css({ h: '1/2' })} /> // shorthand\n```\n\n----------------------------------------\n\nTITLE: Defining Global Font Faces in Panda CSS\nDESCRIPTION: Example of defining global font face configurations. Shows how to set up Inter and Roboto fonts with their source paths and styling properties.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/references/config.md#2025-04-18_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"globalFontface\": {\n    \"Inter\": {\n      \"src\": \"url(/fonts/inter.woff2) format('woff2')\",\n      \"fontWeight\": \"400\",\n      \"fontStyle\": \"normal\"\n    },\n    \"Roboto\": {\n      \"src\": \"url(/fonts/roboto.woff2) format('woff2')\",\n      \"fontWeight\": \"400\",\n      \"fontStyle\": \"normal\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Composed Component with Tracked Pattern in React\nDESCRIPTION: This TypeScript React snippet demonstrates creating a new 'PageScrollable' component that uses the 'Scrollable' component. Panda CSS will track the usage of the 'scrollable' pattern in this composed component.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/patterns.mdx#2025-04-18_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nconst PageScrollable = (props: ButtonProps) => {\n  const { children, size } = props\n  return (\n    <Scrollable {...props} size={size}>\n      {children}\n    </Scrollable>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: App Component Using Design System Button with Custom Styles\nDESCRIPTION: This example shows how to use a Button component from a design system while applying custom CSS styles to it. It imports both the component and the css function from the styled-system package.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/guides/component-library.md#2025-04-18_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from '@acme-org/design-system'\nimport { css } from '@acme-org/styled-system/css'\n\nexport function App() {\n  return <Button css={{ color: 'white' }}>Click me</Button>\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Variant Props with StyledVariantProps in Chakra UI Panda (TSX)\nDESCRIPTION: This example shows how to use the StyledVariantProps type to extract variants from a styled component. It defines a Button component with variants and then extracts its variant props type.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/style-props.mdx#2025-04-18_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport { styled } from '../styled-system/jsx'\nimport type { StyledVariantProps } from '../styled-system/jsx'\n\nconst Button = styled('button', {\n  base: { color: 'black' },\n  variants: {\n    state: {\n      error: { color: 'red' },\n      success: { color: 'green' }\n    }\n  }\n})\n\ntype ButtonVariantProps = StyledVariantProps<typeof Button>\n//   ^ { state?: 'error' | 'success' | undefined }\n```\n\n----------------------------------------\n\nTITLE: Configuring Outline Width in Panda CSS\nDESCRIPTION: Shows different ways to set outline width using both pixel values and token references. Includes both outlineWidth and ringWidth (shorthand) properties.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/outline.md#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ outlineWidth: '4' })} />\n<div className={css({ outlineWidth: '2px' })} />\n<div className={css({ ringWidth: '2px' })} /> // shorthand\n```\n\n----------------------------------------\n\nTITLE: Applying Border Radius to Specific Corners in Panda CSS (JSX)\nDESCRIPTION: Demonstrates how to apply border radius to a specific corner of an element using Panda CSS. It shows both the full property name and shorthand syntax for the top-left corner.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/border.md#2025-04-18_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ borderTopLeftRadius: 'md' })} />\n<div className={css({ roundedTopLeft: 'md' })} /> // shorthand\n```\n\n----------------------------------------\n\nTITLE: Vue Styled Factory with Class Merging\nDESCRIPTION: Example of using the styled factory in Vue with proper class merging, ensuring that both styled system classes and custom classes are applied to the component.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_72\n\nLANGUAGE: javascript\nCODE:\n```\n<script setup>\nimport { styled } from '../styled-system/jsx'\n\nconst StyledButton = styled('button', {\n  base: {\n    bgColor: 'red.300',\n  },\n})\n</script>\n<template>\n  <StyledButton id=\"test\" class=\"test\">\n    <slot></slot>\n  </StyledButton>\n</template>\n```\n\n----------------------------------------\n\nTITLE: SolidJS Component with Panda CSS\nDESCRIPTION: Example SolidJS component implementation using Panda CSS styling with the css utility function.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/solidjs.mdx#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Component } from 'solid-js';\nimport { css } from '../styled-system/css';\n\nconst App: Component = () => {\n  return (\n    <div class={css({ fontSize: \"2xl\", fontWeight: 'bold' })}>Hello 🐼!</div>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Simplified Utility Definition with createColorMixTransform\nDESCRIPTION: Example of using the createColorMixTransform helper to create a background utility with color mixing support.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_113\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  utilities: {\n    background: {\n      shorthand: \"bg\",\n      className: \"bg\",\n      values: \"colors\",\n      transform: createColorMixTransform(\"background\"),\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Panda CSS with Semantic Tokens and DEFAULT Values\nDESCRIPTION: Shows how to set up semantic tokens with DEFAULT values and references to other tokens. Includes a fix for a 'missing token' warning when using DEFAULT in token paths.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/config/CHANGELOG.md#2025-04-18_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  validation: 'error',\n  theme: {\n    semanticTokens: {\n      colors: {\n        primary: {\n          DEFAULT: { value: '#ff3333' },\n          lighter: { value: '#ff6666' },\n        },\n        background: { value: '{colors.primary}' },\n        background2: { value: '{colors.primary.lighter}' },\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using Patterns with Raw Function for Style Merging\nDESCRIPTION: Example of using the pattern.raw function to get raw styles from a pattern and merge them with additional styles for a component.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_57\n\nLANGUAGE: tsx\nCODE:\n```\nimport { hstack } from '../../styled-system/patterns'\nimport { css, cva } from '../../styled-system/css'\n\nexport const Button = ({ css: cssProp = {}, children }) => {\n  // using the flex pattern\n  const hstackProps = hstack.raw({\n    border: '1px solid',\n    _hover: { color: 'blue.400' },\n  })\n\n  // merging the styles\n  const className = css(hstackProps, cssProp)\n\n  return <button className={className}>{children}</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Border Width to Specific Sides in Panda CSS (JSX)\nDESCRIPTION: Demonstrates how to apply border width to specific sides of an element using Panda CSS. It shows examples for top and left borders with 1-pixel width.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/border.md#2025-04-18_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ borderTopWidth: '1px' })} />\n<div className={css({ borderLeftWidth: '1px' })} />\n```\n\n----------------------------------------\n\nTITLE: Configuring PostCSS for Panda CSS in Angular\nDESCRIPTION: This snippet shows how to create and configure the postcss.config.json file to integrate Panda CSS with Angular's PostCSS setup.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/angular.mdx#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": {\n    \"@pandacss/dev/postcss\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Class Name Hashing in Panda CSS\nDESCRIPTION: Configure your panda.config.ts to enable class name hashing for shorter, more efficient class names.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/template-literals.md#2025-04-18_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// panda.config.ts\n\nexport default defineConfig({\n  // ...\n  hash: true // optional\n})\n```\n\n----------------------------------------\n\nTITLE: Applying Translate Y Transform in Panda (JSX)\nDESCRIPTION: Illustrates setting a translateY transform value on a div element using Panda's css utility. Includes both standard and shorthand syntax.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/transforms.md#2025-04-18_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ translateY: '-40%' })} />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ y: '4rem' })} />\n```\n\n----------------------------------------\n\nTITLE: Using Wrap Pattern with Function Syntax\nDESCRIPTION: The Wrap pattern adds space between elements and wraps them automatically if there isn't enough space. This example demonstrates the function approach with gap property.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/patterns.mdx#2025-04-18_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { wrap } from '../styled-system/patterns'\n\nfunction App() {\n  return (\n    <div className={wrap({ gap: '6' })}>\n      <div>First</div>\n      <div>Second</div>\n      <div>Third</div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using AspectRatio Pattern with Function Syntax\nDESCRIPTION: The AspectRatio pattern creates a container with a fixed aspect ratio for media elements. This example shows the function approach with a 16:9 ratio for an iframe.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/patterns.mdx#2025-04-18_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { aspectRatio } from '../styled-system/patterns'\n\nfunction App() {\n  return (\n    <div className={aspectRatio({ ratio: 16 / 9 })}>\n      <iframe\n        src=\"https://www.google.com/maps/embed?pb=!1m18!1m1\"\n        title=\"Google map\"\n        frameBorder=\"0\"\n      />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Server-Side Rendering with Themes in Next.js\nDESCRIPTION: Example of implementing themes with server-side rendering in a Next.js application, including root layout configuration and client-side theme switching.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/token-dictionary/CHANGELOG.md#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// app/layout.tsx\nimport { Inter } from 'next/font/google'\nimport { cookies } from 'next/headers'\nimport { ThemeName, getTheme } from '../../styled-system/themes'\n\nexport default async function RootLayout({ children }: { children: React.ReactNode }) {\n  const store = cookies()\n  const themeName = store.get('theme')?.value as ThemeName\n  const theme = themeName && (await getTheme(themeName))\n\n  return (\n    <html lang=\"en\" data-panda-theme={themeName ? themeName : undefined}>\n      {themeName && (\n        <head>\n          <style type=\"text/css\" id={theme.id} dangerouslySetInnerHTML={{ __html: theme.css }} />\n        </head>\n      )}\n      <body>{children}</body>\n    </html>\n  )\n}\n\n// app/page.tsx\nimport { getTheme, injectTheme } from '../../styled-system/themes'\n\nexport default function Home() {\n  return (\n    <>\n      <button\n        onClick={async () => {\n          const current = document.documentElement.dataset.pandaTheme\n          const next = current === 'primary' ? 'secondary' : 'primary'\n          const theme = await getTheme(next)\n          setCookie('theme', next, 7)\n          injectTheme(document.documentElement, theme)\n        }}\n      >\n        swap theme\n      </button>\n    </>\n  )\n}\n\n// Set a Cookie\nfunction setCookie(cName: string, cValue: any, expDays: number) {\n  let date = new Date()\n  date.setTime(date.getTime() + expDays * 24 * 60 * 60 * 1000)\n  const expires = 'expires=' + date.toUTCString()\n  document.cookie = cName + '=' + cValue + '; ' + expires + '; path=/'\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Compound Outline Properties in Panda CSS\nDESCRIPTION: Demonstrates how to set multiple outline properties (width, style, color) using both the outline and ring shorthand properties. Uses the css utility function to apply styles.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/outline.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ outline: '2px solid blue.500' })} />\n<div className={css({ ring: '2px solid blue.500' })} /> // shorthand\n```\n\n----------------------------------------\n\nTITLE: Virtual Colors with Different Color Modes in Panda CSS\nDESCRIPTION: Illustrates using virtual colors with different color modes in Panda CSS. This example creates a button component with light and dark mode variations.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/virtual-color.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { css, cva, cx } from '../styled-system/css'\n\nconst someButton = cva({\n  base: { padding: 4 },\n  variants: {\n    variant: {\n      primary: {\n        bg: { base: 'colorPalette.500', _dark: 'colorPalette.200' },\n        color: { base: 'white', _dark: 'gray.900' }\n      }\n    }\n  },\n  defaultVariants: { variant: 'primary' }\n})\n\nexport const App = () => {\n  return (\n    <>\n      <div className=\"light\">\n        <button className={cx(css({ colorPalette: 'blue' }), someButton())}>\n          Click me\n        </button>\n        <button className={cx(css({ colorPalette: 'green' }), someButton())}>\n          Click me\n        </button>\n        <button className={cx(css({ colorPalette: 'red' }), someButton())}>\n          Click me\n        </button>\n      </div>\n      <div className=\"dark\">\n        <button className={cx(css({ colorPalette: 'blue' }), someButton())}>\n          Click me\n        </button>\n        <button className={cx(css({ colorPalette: 'green' }), someButton())}>\n          Click me\n        </button>\n        <button className={cx(css({ colorPalette: 'red' }), someButton())}>\n          Click me\n        </button>\n      </div>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Compound Variants to an Atomic Slot Recipe\nDESCRIPTION: This snippet demonstrates how to add compound variants to a slot recipe, allowing for style overrides based on combinations of variants.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/slot-recipes.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sva } from '../styled-system/css'\nconst checkbox = sva({\n  slots: ['root', 'control', 'label'],\n  base: {...},\n  variants: {\n    size: {\n      sm: {...},\n      md: {...}\n    },\n    isChecked: {\n      true: { control: {}, label: {} }\n    }\n  },\n  compoundVariants: [\n    {\n      size: 'sm',\n      isChecked: true,\n      css: {\n        control: { borderColor: 'green.500' }\n      }\n    }\n  ],\n  defaultVariants: {...}\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring SVA with Custom Class Names in React/TSX\nDESCRIPTION: Example showing how to use the new className option in sva configuration to target slots in the DOM with custom class names.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_31\n\nLANGUAGE: tsx\nCODE:\n```\nimport { sva } from '../styled-system/css'\n\nconst button = sva({\n  className: 'btn',\n  slots: ['root', 'text'],\n  base: {\n    root: {\n      bg: 'blue.500',\n      _hover: {\n        '& .btn__text': {\n          color: 'white',\n        },\n      },\n    },\n  },\n})\n\nexport const App = () => {\n  const classes = button()\n  return (\n    <div className={classes.root}>\n      <div className={classes.text}>Click me</div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Global Variables in Panda Config\nDESCRIPTION: Demonstrates how to use globalVars in the Panda config to define font variables.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/guides/fonts.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport default defineConfig({\n  globalVars: {\n    '--font-fira-code': 'Fira Code Variable, monospace'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Style Merging with Raw Function\nDESCRIPTION: Shows how to use the .raw function to get atomic style objects that can be merged using the css function for atomic recipes.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/recipes.md#2025-04-18_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nbutton.raw({ size: \"md\" })\n```\n\n----------------------------------------\n\nTITLE: Global CSS Variables Configuration\nDESCRIPTION: Configuration example for defining global CSS variables and custom CSS @property definitions in Panda UI.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/writing-styles.md#2025-04-18_snippet_23\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  // ...\n  globalVars: {\n    '--popper-reference-width': '4px',\n    '--button-color': {\n      syntax: '<color>',\n      inherits: false,\n      initialValue: 'blue'\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Slot Recipes in Components\nDESCRIPTION: Demonstrates the implementation of slot recipes in a React component, showing how to apply different styles to multiple parts of a button component.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/shared/CHANGELOG.md#2025-04-18_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nexport function App() {\n  const btnClass = button({ size: 'lg', rounded: true })\n\n  return (\n    <button>\n      <p class={btnClass.label}> Label</p>\n      <p class={btnClass.icon}> Icon</p>\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: SVA Pattern Example with Slots\nDESCRIPTION: Demonstration of styled variant array (sva) usage with slots for card component styling.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/parser/CHANGELOG.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sva } from '../styled-system/css'\nimport { slots } from './slots'\n\nconst card = sva({\n  slots,\n  base: {\n    root: {\n      p: '6',\n      m: '4', \n      w: 'md',\n      boxShadow: 'md',\n      borderRadius: 'md',\n      _dark: { bg: '#262626', color: 'white' },\n    },\n    content: {\n      textStyle: 'lg',\n    },\n    title: {\n      textStyle: 'xl',\n      fontWeight: 'semibold',\n      pb: '2',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Panda Template Literal Syntax\nDESCRIPTION: Example of styling a button using Panda with template literals.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/migration/styled-components.md#2025-04-18_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { styled } from '../styled-system/jsx'\n\nconst Button = styled.button`\n  background-color: #fff;\n  border: 1px solid #000;\n  color: #000;\n  padding: 0.5rem 1rem;\n`\n```\n\n----------------------------------------\n\nTITLE: Using Enhanced CSS Function for Style Merging in React\nDESCRIPTION: Example of the new css function signature that allows passing multiple style objects that will be smartly merged. This approach should be preferred for merging styles over the cx function.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_82\n\nLANGUAGE: tsx\nCODE:\n```\nimport { css } from '../styled-system/css'\ncss({ mx: '3', paddingTop: '4' }, { mx: '10', pt: '6' }) // => mx_10 pt_6\n```\n\n----------------------------------------\n\nTITLE: Animation Styles Definition in PandaCSS\nDESCRIPTION: Example showing how to define and use animation styles in PandaCSS, including support for different placements and animation properties.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineAnimationStyles } from '@pandacss/dev'\n\nexport const animationStyles = defineAnimationStyles({\n  'slide-fade-in': {\n    value: {\n      transformOrigin: 'var(--transform-origin)',\n      animationDuration: 'fast',\n      '&[data-placement^=top]': {\n        animationName: 'slide-from-top, fade-in',\n      },\n      '&[data-placement^=bottom]': {\n        animationName: 'slide-from-bottom, fade-in',\n      },\n      '&[data-placement^=left]': {\n        animationName: 'slide-from-left, fade-in',\n      },\n      '&[data-placement^=right]': {\n        animationName: 'slide-from-right, fade-in',\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Static CSS Generation in Panda CSS\nDESCRIPTION: Example of configuring static CSS utility classes generation. Demonstrates how to generate margin/padding utilities with responsive variants and color utilities with light/dark conditions.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/references/config.md#2025-04-18_snippet_18\n\nLANGUAGE: js\nCODE:\n```\n{\n  \"staticCss\": {\n    css: [\n      {\n        properties: {\n          margin: ['*'],\n          padding: ['*', '50px', '80px'],\n        },\n        responsive: true,\n      },\n      {\n        properties: {\n          color: ['*'],\n          backgroundColor: ['green.200', 'red.400'],\n        },\n        conditions: ['light', 'dark'],\n      },\n    ],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Panda Layers in JSON\nDESCRIPTION: This snippet demonstrates how to customize cascade layers for generated CSS in Panda configuration.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/references/config.md#2025-04-18_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"layers\": {\n    \"utilities\": \"panda_utilities\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using splitCssProps Utility from JSX Entrypoint\nDESCRIPTION: Example showing how to use the newly added splitCssProps utility exported from the {outdir}/jsx entrypoint to separate CSS properties from other component props.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\nimport { splitCssProps, styled } from '../styled-system/jsx'\nimport type { HTMLStyledProps } from '../styled-system/types'\n\nfunction SplitComponent({ children, ...props }: HTMLStyledProps<'div'>) {\n  const [cssProps, restProps] = splitCssProps(props)\n  return (\n    <styled.div {...restProps} className={css({ display: 'flex', height: '20', width: '20' }, cssProps)}>\n      {children}\n    </styled.div>\n  )\n}\n\n// Usage\n\nfunction App() {\n  return <SplitComponent margin=\"2\">Click me</SplitComponent>\n}\n```\n\n----------------------------------------\n\nTITLE: Using Token Reference Syntax in JSX Styles\nDESCRIPTION: Shows how to use token reference syntax when authoring styles object in JSX, which resolves to CSS variables.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_60\n\nLANGUAGE: jsx\nCODE:\n```\nimport { css } from '../styled-system/css'\n\nconst styles = css({\n  border: '2px solid {colors.primary}',\n})\n```\n\n----------------------------------------\n\nTITLE: Using named container queries\nDESCRIPTION: Example of using named container queries with the cq pattern, allowing for more specific targeting of containers.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_64\n\nLANGUAGE: typescript\nCODE:\n```\nimport { cq } from 'styled-system/patterns'\n\nfunction Demo() {\n  return (\n    <nav className={cq({ name: 'sidebar' })}>\n      <div\n        className={css({\n          fontSize: { base: 'lg', '@sidebar/sm': 'md' },\n        })}\n      />\n    </nav>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Container Query Pattern\nDESCRIPTION: Demonstrates using the new 'cq' pattern from @pandacss/preset-base to simplify container query implementation.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_91\n\nLANGUAGE: typescript\nCODE:\n```\nimport { cq } from 'styled-system/patterns'\n\nfunction Demo() {\n  return (\n    <nav className={cq()}>\n      <div\n        className={css({\n          fontSize: { base: 'lg', '@/sm': 'md' },\n        })}\n      />\n    </nav>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Responsive Button Size Configuration Example\nDESCRIPTION: Demonstrates how to configure responsive button sizes using config recipes in Panda CSS. Shows the syntax for applying different sizes at different breakpoints.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/recipes.md#2025-04-18_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nbutton({ size: { base: 'sm', md: 'lg' } })\n```\n\n----------------------------------------\n\nTITLE: Implementing Styled System in Components\nDESCRIPTION: Example of using the styled-system css function to style a button component with background color and padding.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/guides/component-library.md#2025-04-18_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nimport { css } from '@acme-org/styled-system/css'\n\nexport function Button({ children }) {\n  return (\n    <button type=\"button\" className={css({ bg: 'red.300', px: '2', py: '3' })}>\n      {children}\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using HTMLStyledProps for Style Props in Chakra UI Panda (TSX)\nDESCRIPTION: This snippet demonstrates how to use the HTMLStyledProps type to get the types of an element including style props. It's used to define the props for a styled button component.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/style-props.mdx#2025-04-18_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport { styled } from '../styled-system/jsx'\nimport type { HTMLStyledProps } from '../styled-system/jsx'\n\ntype ButtonProps = HTMLStyledProps<'button'>\n\nconst Button = (props: ButtonProps) => {\n  return <styled.button {...props}>\n}\n```\n\n----------------------------------------\n\nTITLE: Button Component Using External Styled System\nDESCRIPTION: This code shows how to create a Button component that imports styling utilities from an external styled-system package rather than a local one. This approach allows for better sharing of styling code.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/guides/component-library.md#2025-04-18_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { css } from '@acme-org/styled-system/css'\n\nexport function Button({ children }) {\n  return (\n    <button type=\"button\" className={css({ bg: 'red.300', px: '2', py: '3' })}>\n      {children}\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Utilities from a Preset in Panda CSS\nDESCRIPTION: Example showing how to extend and override specific parts of a utility coming from a preset while keeping other configurations.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/extend.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  presets: ['@acme/my-preset']\n  utilities: {\n    extend: {\n      br: {\n        className: 'br' // css({ br: \"sm\" }) => br-sm\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Divide Color in Panda (JSX)\nDESCRIPTION: This snippet illustrates how to use the divideColor property in Panda to set the color of dividers. The color is specified using Panda's color tokens.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/divide.md#2025-04-18_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ divideColor: 'red.200' })} />\n```\n\n----------------------------------------\n\nTITLE: Button Component with Pattern Raw Function\nDESCRIPTION: Example of creating a Button component using the pattern's raw function to get style objects that can be merged with other styles, enabling flexible component styling.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_31\n\nLANGUAGE: tsx\nCODE:\n```\nimport { hstack } from '../../styled-system/patterns'\nimport { css, cva } from '../../styled-system/css'\n\nexport const Button = ({ css: cssProp = {}, children }) => {\n  // using the flex pattern\n  const hstackProps = hstack.raw({\n    border: '1px solid',\n    _hover: { color: 'blue.400' },\n  })\n\n  // merging the styles\n  const className = css(hstackProps, cssProp)\n\n  return <button className={className}>{children}</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Using Container Query Pattern in Panda CSS\nDESCRIPTION: Demonstrates the use of the cq pattern in Panda CSS for easier implementation of container queries. This pattern simplifies the process of creating container-based responsive designs.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/preset-base/CHANGELOG.md#2025-04-18_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { cq } from 'styled-system/patterns'\n\nfunction Demo() {\n  return (\n    <nav className={cq()}>\n      <div\n        className={css({\n          fontSize: { base: 'lg', '@/sm': 'md' },\n        })}\n      />\n    </nav>\n  )\n}\n\nfunction NamedDemo() {\n  return (\n    <nav className={cq({ name: 'sidebar' })}>\n      <div\n        className={css({\n          fontSize: { base: 'lg', '@sidebar/sm': 'md' },\n        })}\n      />\n    </nav>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Slot Recipe for Tabs Component\nDESCRIPTION: Example of defining a slot recipe for a tabs component with various slots like root, list, trigger, content, and indicator.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  // ...\n  theme: {\n    extend: {\n      slotRecipes: {\n        tabs: {\n          className: 'tabs',\n          slots: ['root', 'list', 'trigger', 'content', 'indicator'],\n          base: {\n            root: {\n              display: 'flex',\n              // ...\n            },\n          },\n        },\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using Container Queries in Panda CSS Styles\nDESCRIPTION: Shows how to use container queries in Panda CSS styles using the @<container-name>/<container-size> syntax. This allows for responsive styling based on container sizes rather than viewport sizes.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/preset-base/CHANGELOG.md#2025-04-18_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { css } from '/styled-system/css'\n\nfunction Demo() {\n  return (\n    <nav className={css({ containerType: 'inline-size' })}>\n      <div\n        className={css({\n          fontSize: { '@/sm': 'md' },\n        })}\n      />\n    </nav>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Scrollable Pattern Configuration in JavaScript\nDESCRIPTION: Configuration example for creating a custom 'Scrollable' pattern with direction and scrollbar visibility options. Includes pattern properties, default values, and CSS transform function.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/customization/patterns.mdx#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  patterns: {\n    extend: {\n      scrollable: {\n        description: 'A container that allows for scrolling',\n        defaultValues: {\n          direction: 'vertical',\n          hideScrollbar: true\n        },\n        properties: {\n          // The direction of the scroll\n          direction: { type: 'enum', value: ['horizontal', 'vertical'] },\n          // Whether to hide the scrollbar\n          hideScrollbar: { type: 'boolean' }\n        },\n        // disallow the `overflow` property (in TypeScript)\n        blocklist: ['overflow'],\n        transform(props) {\n          const { direction, hideScrollbar, ...rest } = props\n          return {\n            overflow: 'auto',\n            height: direction === 'horizontal' ? '100%' : 'auto',\n            width: direction === 'vertical' ? '100%' : 'auto',\n            scrollbarWidth: hideScrollbar ? 'none' : 'auto',\n            WebkitOverflowScrolling: 'touch',\n            '&::-webkit-scrollbar': {\n              display: hideScrollbar ? 'none' : 'auto'\n            },\n            ...rest\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Color Opacity with CSS color-mix in Panda CSS\nDESCRIPTION: Example showing how to use the new color-mix CSS function with opacity values in Panda CSS using the {color}/{opacity} syntax. This generates CSS that uses the color-mix function for browser support.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\ncss({\n  bg: 'red.300/40',\n  color: 'white',\n})\n```\n\n----------------------------------------\n\nTITLE: Composing Styled Elements in JSX\nDESCRIPTION: Example showing how to compose two styled elements together with proper style merging. The ExtendedBox component inherits styles from Box while overriding the background color.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_75\n\nLANGUAGE: jsx\nCODE:\n```\nconst Box = styled('div', {\n  base: {\n    background: 'red.light',\n    color: 'white',\n  },\n})\n\nconst ExtendedBox = styled(Box, {\n  base: { background: 'red.dark' },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Global CSS Variables with strictPropertyValues\nDESCRIPTION: Example of defining global CSS variables with the strictPropertyValues option enabled, allowing custom CSS variables to be used in style props.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  // ...\n  strictPropertyValues: true,\n  globalVars: {\n    extend: {\n      '--some-color': 'red',\n      '--button-color': {\n        syntax: '<color>',\n        inherits: false,\n        initialValue: 'blue',\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using CVA (Component Variant API) with Raw Function\nDESCRIPTION: Demonstrates using the cva.raw function to get styles from a component recipe and merge them with additional styles and external overrides.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_58\n\nLANGUAGE: tsx\nCODE:\n```\nimport { css, cva } from '../../styled-system/css'\n\nconst buttonRecipe = cva({\n  base: { display: 'flex', fontSize: 'lg' },\n  variants: {\n    variant: {\n      primary: { color: 'white', backgroundColor: 'blue.500' },\n    },\n  },\n})\n\nexport const Button = ({ css: cssProp = {}, children }) => {\n  const className = css(\n    // using the button recipe\n    buttonRecipe.raw({ variant: 'primary' }),\n\n    // adding style overrides (internal)\n    { _hover: { color: 'blue.400' } },\n\n    // adding style overrides (external)\n    cssProp,\n  )\n\n  return <button className={className}>{props.children}</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Styled Components with Panda in React\nDESCRIPTION: Demonstrates how to create styled components with Panda, showing the difference in structure compared to Stitches, particularly the use of the base key for base styles.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/migration/stitches.md#2025-04-18_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { styled } from '../styled-system/jsx'\n\nconst Button = styled('button', {\n  // base styles\n  base: {\n    backgroundColor: 'gainsboro',\n    borderRadius: '9999px'\n  },\n  variants: {\n    // variant styles\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Nuxt Project with npx\nDESCRIPTION: Command to create a new Nuxt project using npx.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/nuxt.mdx#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi@latest init test-app\n```\n\n----------------------------------------\n\nTITLE: Setting Stroke Color for SVG Elements with Panda CSS in JSX\nDESCRIPTION: This example shows how to change the stroke color of an SVG element using Panda's css utility function. The stroke color is set to 'blue.500' from the colors token category.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/svg.md#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<svg className={css({ stroke: 'blue.500' })} />\n```\n\n----------------------------------------\n\nTITLE: Extending CSS Utilities in Panda CSS\nDESCRIPTION: Example of extending the default CSS utilities with custom utilities. Shows how to create a borderX utility with custom transform function that references token values.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/references/config.md#2025-04-18_snippet_16\n\nLANGUAGE: js\nCODE:\n```\n{\n  \"utilities\": {\n    extend: {\n      borderX: {\n        values: ['1px', '2px', '4px'],\n        shorthand: 'bx', // `bx` or `borderX` can be used\n        transform(value, token) {\n          return {\n            borderInlineWidth: value,\n            borderColor: token('colors.red.200'), // read the css variable for red.200\n          }\n        },\n      },\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Panda CSS\nDESCRIPTION: Configuration for Panda CSS including file paths, output directory, and import mapping.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/ember.mdx#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from \"@pandacss/dev\";\n\nexport default defineConfig({\n  preflight: true,\n  include: [\"./app/**/*.{js,ts,gjs,gts}\"],\n  exclude: [],\n  theme: {\n    extend: {},\n  },\n  outdir: \"app/styled-system\",\n  importMap: \"test-app/styled-system\",\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Default Utilities in Panda CSS Configuration\nDESCRIPTION: This snippet demonstrates how to remove all default utilities in Panda CSS by using the 'eject: true' property. It also shows how to define custom utilities and map them to specific token categories.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/guides/minimal-setup.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default defineConfig({\n  // ...\n  eject: true,\n  utilities: {\n    color: {\n      values: 'colors'\n    }\n  },\n  theme: {\n    tokens: {\n      colors: {\n        primary: { value: '#ff0000' }\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Factory Function to Style Existing Components\nDESCRIPTION: Example of using the styled factory function to apply style props to an existing component from a library.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/style-props.mdx#2025-04-18_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { styled } from '../styled-system/jsx'\nimport { Button } from 'component-library'\n\nconst StyledButton = styled(Button)\n\nconst App = () => (\n  <StyledButton bg=\"blue.500\" color=\"white\" py=\"2\" px=\"4\" rounded=\"md\">\n    Button\n  </StyledButton>\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Style Context for Compound Components\nDESCRIPTION: This code creates a shared context for styles in compound components, enabling the use of slot recipes with more complex component structures.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/slot-recipes.md#2025-04-18_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\nimport { createContext, forwardRef, useContext } from 'react'\n\nexport const createStyleContext = recipe => {\n  const StyleContext = createContext(null)\n\n  const withProvider = (Component, part) => {\n    const Comp = forwardRef((props, ref) => {\n      const [variantProps, rest] = recipe.splitVariantProps(props)\n      const styles = recipe(variantProps)\n      return (\n        <StyleContext.Provider value={styles}>\n          <Component ref={ref} className={styles?.[part ?? '']} {...rest} />\n        </StyleContext.Provider>\n      )\n    })\n    Comp.displayName = Component.displayName || Component.name\n    return Comp\n  }\n\n  const withContext = (Component, part) => {\n    if (!part) return Component\n\n    const Comp = forwardRef((props, ref) => {\n      const styles = useContext(StyleContext)\n      return <Component ref={ref} className={styles?.[part ?? '']} {...props} />\n    })\n    Comp.displayName = Component.displayName || Component.name\n    return Comp\n  }\n\n  return { withProvider, withContext }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Accent Color with Panda CSS in JSX\nDESCRIPTION: This snippet demonstrates how to set the accent color of an element using Panda CSS utility class. It uses the 'accentColor' property with a color token.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/interactivity.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ accentColor: 'blue.500' })}>Accent color applied</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Utilities with defineUtility in TypeScript\nDESCRIPTION: Function for utility definitions in Panda CSS. It enables creating custom utility functions that generate styles based on design tokens or other values.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/customization/config-functions.md#2025-04-18_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineUtility } from '@pandacss/dev'\n\nexport const br = defineUtility({\n  className: 'rounded',\n  values: 'radii',\n  transform(value) {\n    return { borderRadius: value }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Keyframes with defineKeyframes in TypeScript\nDESCRIPTION: Function for keyframes definitions in Panda CSS. It allows creating animation keyframes that can be used in your style system with proper TypeScript support.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/customization/config-functions.md#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineKeyframes } from '@pandacss/dev'\n\nexport const keyframes = defineKeyframes({\n  fadeIn: {\n    '0%': { opacity: '0' },\n    '100%': { opacity: '1' }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Display Property in Panda (JSX)\nDESCRIPTION: Demonstrates how to set the display property of an element using Panda's css function. This example sets the display to 'flex'.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/display.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ display: 'flex' })} />\n```\n\n----------------------------------------\n\nTITLE: Pattern Example with Raw Method for Style Merging\nDESCRIPTION: Shows how to use the `hstack.raw` method to get the raw style object from a pattern. This allows for merging styles with other style objects using the `css` function.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_101\n\nLANGUAGE: tsx\nCODE:\n```\nimport { hstack } from '../styled-system/patterns'\nimport { css, cva } from '../styled-system/css'\n\nexport const Button = ({ css: cssProp = {}, children }) => {\n  // using the flex pattern\n  const hstackProps = hstack.raw({\n    border: '1px solid',\n    _hover: { color: 'blue.400' },\n  })\n\n  // merging the styles\n  const className = css(hstackProps, cssProp)\n\n  return <button className={className}>{children}</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Font Property Usage in Panda CSS\nDESCRIPTION: Demonstrates how to apply font family styling using Panda's css utility function with the fontFamily property.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/typography.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ fontFamily: 'mono' })} />\n```\n\n----------------------------------------\n\nTITLE: Setting Horizontal Border Spacing in Panda CSS\nDESCRIPTION: Shows how to control the horizontal border spacing between table cells using Panda's css utility. The borderSpacingX property applies spacing only in the horizontal direction.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/tables.md#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<table className={css({ borderSpacingX: '2' })} />\n```\n\n----------------------------------------\n\nTITLE: Using Animation Styles in React Components\nDESCRIPTION: Example of implementing animation styles in a React component using the css utility from Panda CSS.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/theming/animation-styles.md#2025-04-18_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { css } from '../styled-system/css'\n\nfunction App() {\n  return (\n    <div className={css({ animationStyle: 'slide-fade-in' })}>\n      This is an element with slide-fade-in animation style.\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Style Props with css.raw in React Components\nDESCRIPTION: Demonstrates how to use a custom prop name (other than css) for component styling by utilizing the css.raw function. This ensures Panda correctly extracts the style object when using prop names other than the default css.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/merging-styles.md#2025-04-18_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nconst cardStyles = css.raw({\n  bg: 'red',\n  color: 'white'\n})\n\nfunction Card({ title, description, style }) {\n  return (\n    // merge the `cardStyles` with the `style` passed in\n    <div className={css(cardStyles, style)}>\n      <h1>{title}</h1>\n      <p>{description}</p>\n    </div>\n  )\n}\n\n// usage\nfunction Demo() {\n  return (\n    <Card\n      title=\"Hello World\"\n      description=\"This is a card component\"\n      // use `css.raw(...)` to ensure Panda extracts the style object\n      style={css.raw({ bg: 'blue' })}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Pattern-Specific Props in Chakra UI Panda (TSX)\nDESCRIPTION: This snippet illustrates how to import and use pattern-specific prop types provided by Panda. It uses the StackProps type as an example for the Stack component.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/style-props.mdx#2025-04-18_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Stack } from '../styled-system/jsx'\nimport type { StackProps } from '../styled-system/jsx'\n```\n\n----------------------------------------\n\nTITLE: Using the Visually Hidden Pattern for Accessibility\nDESCRIPTION: Shows how to use the visuallyHidden pattern to hide content visually while keeping it accessible to screen readers, which is important for accessibility.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_109\n\nLANGUAGE: tsx\nCODE:\n```\nimport { css } from '../styled-system/css'\nimport { visuallyHidden } from '../styled-system/patterns'\n\nexport function Checkbox() {\n  return (\n    <label>\n      <input type=\"checkbox\" class={visuallyHidden()}>\n        I'm hidden\n      </input>\n      <span>Checkbox</span>\n    </label>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using the container query pattern\nDESCRIPTION: Example of using the 'cq' pattern from the @pandacss/preset-base to simplify container query usage.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_63\n\nLANGUAGE: typescript\nCODE:\n```\nimport { cq } from 'styled-system/patterns'\n\nfunction Demo() {\n  return (\n    <nav className={cq()}>\n      <div\n        className={css({\n          fontSize: { base: 'lg', '@/sm': 'md' },\n        })}\n      />\n    </nav>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Slot Recipe in a React Component\nDESCRIPTION: This snippet shows how to use the defined slot recipe in a React component. It applies the button styles to label and icon elements within a button, specifying size and rounded variants.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/shared/CHANGELOG.md#2025-04-18_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nexport function App() {\n  const btnClass = button({ size: 'lg', rounded: true })\n\n  return (\n    <button>\n      <p class={btnClass.label}> Label</p>\n      <p class={btnClass.icon}> Icon</p>\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Escape Hatch Syntax with Property-Based Conditionals\nDESCRIPTION: Example of using escape hatch syntax with [xxx] in property-based conditionals. This demonstrates how to bypass token validation in strict token mode for nested conditional styles.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_65\n\nLANGUAGE: typescript\nCODE:\n```\ncss({\n  bg: '[#3B00B9]', // ✅ was okay\n  _dark: {\n    // ✅ was okay\n    color: '[#3B00B9]',\n  },\n\n  // ❌ Not okay, will be fixed in this patch\n  color: {\n    _dark: '[#3B00B9]',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using an Atomic Slot Recipe in a React Component\nDESCRIPTION: This example shows how to use the previously defined checkbox slot recipe in a React component. It applies the generated classes to the appropriate elements.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/slot-recipes.md#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { css } from '../styled-system/css'\nimport { checkbox } from './checkbox.recipe'\n\nconst Checkbox = () => {\n  const classes = checkbox({ size: 'sm' })\n  return (\n    <label className={classes.root}>\n      <input type=\"checkbox\" className={css({ srOnly: true })} />\n      <div className={classes.control} />\n      <span className={classes.label}>Checkbox Label</span>\n    </label>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Container Query Pattern\nDESCRIPTION: Example of using the new cq pattern from the Panda CSS preset for easier container query setup and use.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_119\n\nLANGUAGE: typescript\nCODE:\n```\nimport { cq } from 'styled-system/patterns'\n\nfunction Demo() {\n  return (\n    <nav className={cq()}>\n      <div\n        className={css({\n          fontSize: { base: 'lg', '@/sm': 'md' },\n        })}\n      />\n    </nav>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using CVA.raw with Style Merging in Button Component\nDESCRIPTION: Example of using the cva (Component Variant API) raw method to generate style objects from variants that can be merged with other styles, showing the layered approach to style composition.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_87\n\nLANGUAGE: tsx\nCODE:\n```\nimport { css, cva } from '../../styled-system/css'\n\nconst buttonRecipe = cva({\n  base: { display: 'flex', fontSize: 'lg' },\n  variants: {\n    variant: {\n      primary: { color: 'white', backgroundColor: 'blue.500' },\n    },\n  },\n})\n\nexport const Button = ({ css: cssProp = {}, children }) => {\n  const className = css(\n    // using the button recipe\n    buttonRecipe.raw({ variant: 'primary' }),\n\n    // adding style overrides (internal)\n    { _hover: { color: 'blue.400' } },\n\n    // adding style overrides (external)\n    cssProp,\n  )\n\n  return <button className={className}>{props.children}</button>\n}\n```\n\n----------------------------------------\n\nTITLE: PostCSS Configuration with Cascade Layers Polyfill\nDESCRIPTION: Example configuration for PostCSS that includes Panda CSS and a polyfill for CSS cascade layers to support older browsers.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/cascade-layers.md#2025-04-18_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  plugins: ['@pandacss/dev/postcss', '@csstools/postcss-cascade-layers']\n}\n```\n\n----------------------------------------\n\nTITLE: ARIA Expanded State Styling\nDESCRIPTION: Styling based on aria-expanded attribute using _expanded modifier to change background color when element is expanded.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/conditional-styles.md#2025-04-18_snippet_24\n\nLANGUAGE: jsx\nCODE:\n```\n<div\n  aria-expanded=\"true\"\n  className={css({\n    _expanded: { bg: 'gray.500' }\n  })}\n>\n  Hello\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using the Raw Method for Flexible Styling in React\nDESCRIPTION: Examples of using the new .raw method for flexible usage and extraction of styles, showing how it can be used with buttons, recipes in Storybook, and mixed with patterns.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_90\n\nLANGUAGE: tsx\nCODE:\n```\n<Button rootProps={css.raw({ bg: \"red.400\" })} />\n\n// recipe in storybook\nexport const Funky: Story = {\n\targs: button.raw({\n\t\tvisual: \"funky\",\n\t\tshape: \"circle\",\n\t\tsize: \"sm\",\n\t}),\n};\n\n// mixed with pattern\nconst stackProps = {\n  sm: stack.raw({ direction: \"column\" }),\n  md: stack.raw({ direction: \"row\" })\n}\n\nstack(stackProps[props.size]))\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Style Ordering in TypeScript\nDESCRIPTION: Example of how styles are ordered and merged after the update. Longhand and shorthand properties are now sorted deterministically to prevent conflicts.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/node/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncss({\n  padding: '1px',\n  paddingTop: '3px',\n  paddingBottom: '4px',\n})\n```\n\n----------------------------------------\n\nTITLE: Nested Condition with Focus and Hover\nDESCRIPTION: Example of applying multiple nested conditions to a button element, changing background color when both focused and hovered.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/conditional-styles.md#2025-04-18_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<button\n  className={css({\n    bg: { base: 'red.500', _hover: { _focus: 'red.700' } }\n  })}\n>\n  Hover me\n</button>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Scrollable Pattern in React Component\nDESCRIPTION: Example of importing and using the custom scrollable pattern in a React component with specific configuration options.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/customization/patterns.mdx#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { scrollable } from '../styled-system/patterns'\n\nconst App = () => {\n  return (\n    <div className={scrollable({ direction: 'vertical', hideScrollbar: true })}>\n      <div>Scrollable content</div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Default Dark Mode Condition\nDESCRIPTION: Example of extending built-in conditions to customize the dark mode selector in Panda CSS configuration.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/customization/conditions.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  conditions: {\n    extend: {\n      // Extend the default `dark` condition\n      dark: '.dark &, [data-theme=\"dark\"] &',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Aspect Ratio Tokens in Panda Config\nDESCRIPTION: Example of defining aspect ratio tokens in the Panda CSS configuration. These tokens can be used to set predefined aspect ratios for elements in the application.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/token-dictionary/CHANGELOG.md#2025-04-18_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nexport default defineConfig({\n  // ...\n  theme: {\n    extend: {\n      // add aspect ratio tokens\n      tokens: {\n        aspectRatios: {\n          '1:1': '1',\n          '16:9': '16/9',\n        },\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Panda CSS with Color Opacity Modifiers\nDESCRIPTION: Demonstrates how to use color opacity modifiers in config tokens and semanticTokens, fixing a false positive validation issue. Includes setting up conditions, theme tokens, and semantic tokens.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/config/CHANGELOG.md#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  validation: 'warn',\n  conditions: {\n    light: '.light &',\n    dark: '.dark &',\n  },\n  theme: {\n    tokens: {\n      colors: {\n        blue: { 500: { value: 'blue' } },\n        green: { 500: { value: 'green' } },\n      },\n      opacity: {\n        half: { value: 0.5 },\n      },\n    },\n    semanticTokens: {\n      colors: {\n        secondary: {\n          value: {\n            base: 'red',\n            _light: '{colors.blue.500/32}',\n            _dark: '{colors.green.500/half}',\n          },\n        },\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom BorderX Utility with Mapped Values\nDESCRIPTION: Example of defining a 'borderX' utility with mapped values (small, medium) that correspond to specific pixel values. The transform function applies both width and color to the top border.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/customization/utilities.mdx#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  utilities: {\n    extend: {\n      borderX: {\n        values: { small: '2px', medium: '5px' },\n        shorthand: 'bx',\n        transform(value, { token }) {\n          return {\n            borderTopWidth: value,\n            borderTopColor: token('colors.gray.400')\n          }\n        }\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Layer Styles in React Components\nDESCRIPTION: Shows how to apply layer styles to React components using the css utility function with the layerStyle property.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/theming/layer-styles.md#2025-04-18_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { css } from '../styled-system/css'\n\nfunction App() {\n  return (\n    <div className={css({ layerStyle: 'container' })}>\n      This is inside a container style\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Themes in PandaCSS\nDESCRIPTION: Demonstrates theme configuration with token overrides and semantic tokens for multiple theme variants.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  // ...\n  theme: {\n    extend: {\n      tokens: {\n        colors: {\n          text: { value: 'blue' },\n        },\n      },\n      semanticTokens: {\n        colors: {\n          body: {\n            value: {\n              base: '{colors.blue.600}',\n              _osDark: '{colors.blue.400}',\n            },\n          },\n        },\n      },\n    },\n  },\n  themes: {\n    primary: {\n      tokens: {\n        colors: {\n          text: { value: 'red' },\n        },\n      },\n      semanticTokens: {\n        colors: {\n          muted: { value: '{colors.red.200}' },\n          body: {\n            value: {\n              base: '{colors.red.600}',\n              _osDark: '{colors.red.400}',\n            },\n          },\n        },\n      },\n    },\n    secondary: {\n      tokens: {\n        colors: {\n          text: { value: 'blue' },\n        },\n      },\n      semanticTokens: {\n        colors: {\n          muted: { value: '{colors.blue.200}' },\n          body: {\n            value: {\n              base: '{colors.blue.600}',\n              _osDark: '{colors.blue.400}',\n            },\n          },\n        },\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using getVariantProps Helper with CVA in Panda CSS\nDESCRIPTION: Example demonstrating the usage of the getVariantProps helper function for working with component variant APIs (cva) and recipes to compute final variant values based on defaults and props.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/studio/CHANGELOG.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { cva } from '../styled-system/css'\nimport { getVariantProps } from '../styled-system/recipes'\n\nconst button = cva({\n    // ...\n  variants: {\n    size: {\n      sm: {\n        fontSize: 'sm',\n      },\n      md: {\n        fontSize: 'md',\n      },\n    },\n    variant: {\n      primary: {\n        backgroundColor: 'blue.500',\n      },\n      danger: {\n        backgroundColor: 'red.500',\n      }\n    }\n  },\n  defaultVariants: {\n    size: 'md',\n    variant: 'primary',\n  }\n})\n\n// ✅ this will return the computed variants based on the defaultVariants + props passed\nconst buttonProps = button.getVariantProps({ size: \"sm\" })\n//    ^? { size: \"sm\", variant: \"primary\" }\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Deprecation Message for Recipes in PandaCSS\nDESCRIPTION: Demonstrates how to provide a custom deprecation message for recipes by setting the 'deprecated' property to a string. The example shows adding a version-related deprecation message for a recipe named 'btn'.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/customization/deprecations.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  theme: {\n    recipes: {\n      btn: {\n        deprecated: 'will be removed in v2.0'\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Custom Fonts in React Components\nDESCRIPTION: Demonstrates how to use custom fonts in React components using Panda's css function.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/guides/fonts.md#2025-04-18_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport { css } from '../styled-system/css'\n\nfunction Page() {\n  return (\n    <div>\n      <h1 className={css({ fontFamily: 'mona' })}>Mona Sans</h1>\n      <code className={css({ fontFamily: 'fira' })}>Fira Code</code>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Truncate Utility with Boolean Value\nDESCRIPTION: Example of defining a 'truncate' utility that accepts a boolean value. When true, it applies CSS properties for text truncation with ellipsis.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/customization/utilities.mdx#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  utilities: {\n    extend: {\n      truncate: {\n        className: 'truncate',\n        values: { type: 'boolean' },\n        transform(value) {\n          if (!value) return {}\n          return {\n            overflow: 'hidden',\n            textOverflow: 'ellipsis',\n            whiteSpace: 'nowrap'\n          }\n        }\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Themes in Panda CSS\nDESCRIPTION: Configuration example showing how to define a main theme and alternative theme variants in Panda CSS using the `config.themes` feature.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/token-dictionary/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// panda.config.ts\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  // ...\n  // main theme\n  theme: {\n    extend: {\n      tokens: {\n        colors: {\n          text: { value: 'blue' },\n        },\n      },\n      semanticTokens: {\n        colors: {\n          body: {\n            value: {\n              base: '{colors.blue.600}',\n              _osDark: '{colors.blue.400}',\n            },\n          },\n        },\n      },\n    },\n  },\n  // alternative theme variants\n  themes: {\n    primary: {\n      tokens: {\n        colors: {\n          text: { value: 'red' },\n        },\n      },\n      semanticTokens: {\n        colors: {\n          muted: { value: '{colors.red.200}' },\n          body: {\n            value: {\n              base: '{colors.red.600}',\n              _osDark: '{colors.red.400}',\n            },\n          },\n        },\n      },\n    },\n    secondary: {\n      tokens: {\n        colors: {\n          text: { value: 'blue' },\n        },\n      },\n      semanticTokens: {\n        colors: {\n          muted: { value: '{colors.blue.200}' },\n          body: {\n            value: {\n              base: '{colors.blue.600}',\n              _osDark: '{colors.blue.400}',\n            },\n          },\n        },\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Hash Function with utility:created Hook\nDESCRIPTION: Demonstrates how to override the default toHash function using the utility:created hook when config.hash is set to true.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  // ...\n  hooks: {\n    'utility:created': ({ configure }) => {\n      configure({\n        toHash: (paths, toHash) => {\n          const stringConds = paths.join(':')\n          const splitConds = stringConds.split('_')\n          const hashConds = splitConds.map(toHash)\n          return hashConds.join('_')\n        },\n      })\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Injecting Theme Styles in Panda CSS\nDESCRIPTION: Example of how to inject theme styles into the DOM using the `injectTheme` function from Panda CSS.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/token-dictionary/CHANGELOG.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { injectTheme } from '../styled-system/themes'\n\nconst theme = await getTheme('red')\ninjectTheme(document.documentElement, theme) // this returns the injected style element\n```\n\n----------------------------------------\n\nTITLE: Creating Background Gradients with Panda CSS\nDESCRIPTION: Demonstrates how to create directional background gradients using color stops and gradient properties.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/background.md#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<div\n  className={css({\n    bgGradient: 'to-r',\n    gradientFrom: 'red.200',\n    gradientTo: 'blue.200'\n  })}\n/>\n```\n\n----------------------------------------\n\nTITLE: Targeting Components in Panda CSS\nDESCRIPTION: Demonstrates how to target components in Panda CSS using native CSS selectors instead of component references. This approach is required due to Panda's static nature.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/migration/stitches.md#2025-04-18_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nimport { css } from '../styled-system/css'\n\nconst Icon = () => (\n  <svg className=\"right-arrow\" ... />\n);\n\n\nconst buttonClass = css({\n  \"& .right-arrow\": {\n    marginLeft: '5px'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Tokens in Conditions\nDESCRIPTION: Demonstrates how to use design tokens within condition definitions for media queries and data attributes.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/customization/conditions.mdx#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  conditions: {\n    extend: {\n      mq: '@media (min-width: token(sizes.4xl))',\n      size2: '&[data-size=token(spacing.2)]'\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Cursor Tokens in Panda Config\nDESCRIPTION: This snippet demonstrates how to define cursor tokens in the Panda configuration file. It shows how to create custom cursor types for interactive components, which can be used in styles or recipes.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// panda.config.ts\nexport default defineConfig({\n  theme: {\n    extend: {\n      tokens: {\n        cursor: {\n          button: { value: 'pointer' },\n          checkbox: { value: 'default' },\n        },\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Merging sva Recipe with css Styles in Panda CSS\nDESCRIPTION: Shows how to merge a slot-based sva (Slotted Variant API) recipe with a style object. The raw method returns the resolved style objects for all slots, which can then be individually merged with other styles.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/merging-styles.md#2025-04-18_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { css, sva } from 'styled-system/css'\n\nconst overrideStyles = css.raw({\n  bg: 'red',\n  color: 'white'\n})\n\nconst buttonStyles = sva({\n  slots: ['root']\n  base: {\n    root: {\n      bg: 'blue',\n      border: '1px solid black'\n    }\n  },\n  variants: {\n    size: {\n      root: {\n        small: { fontSize: '12px' }\n      }\n    }\n  }\n})\n\n// returns the resolved style object for all slots\nconst { root } = buttonStyles.raw({ size: 'small' })\n\nconst className = css(\n  root,\n  // add the override styles\n  overrideStyles\n)\n\n// => 'bg_red border_1px_solid_black color_white font-size_12px'\n```\n\n----------------------------------------\n\nTITLE: Arbitrary Values Escape Hatch with strictTokens\nDESCRIPTION: Example of using the escape hatch syntax ([value]) to bypass token validation when config.strictTokens is enabled. This allows using arbitrary values while maintaining type safety.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_67\n\nLANGUAGE: typescript\nCODE:\n```\nimport { css } from '../styled-system/css'\n\ncss({\n  // @ts-expect-error TS will throw when using from strictTokens: true\n  color: '#fff',\n  // @ts-expect-error TS will throw when using from strictTokens: true\n  width: '100px',\n\n  // ✅ but this is now allowed:\n  bgColor: '[rgb(51 155 240)]',\n  fontSize: '[12px]',\n})\n```\n\n----------------------------------------\n\nTITLE: Applying Padding to Specific Sides in JSX with Chakra UI and Panda\nDESCRIPTION: Shows how to apply padding to specific sides of an element using properties like 'paddingLeft' and 'paddingTop', along with their shorthand versions 'pl' and 'pt'.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/spacing.md#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ paddingLeft: '3' })} />\n<div className={css({ pl: '3' })} /> // shorthand\n\n<div className={css({ paddingTop: '3' })} />\n<div className={css({ pt: '3' })} /> // shorthand\n```\n\n----------------------------------------\n\nTITLE: Using Color-mix Opacity Syntax in Panda CSS\nDESCRIPTION: Demonstrates how to use the color-mix function with the {color}/{opacity} syntax to apply transparent color backgrounds.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_81\n\nLANGUAGE: typescript\nCODE:\n```\ncss({\n  bg: 'red.300/40',\n  color: 'white',\n})\n```\n\n----------------------------------------\n\nTITLE: Named Container Queries\nDESCRIPTION: Example of using named container queries, which allows targeting specific containers by name in responsive styling.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_120\n\nLANGUAGE: typescript\nCODE:\n```\nimport { cq } from 'styled-system/patterns'\n\nfunction Demo() {\n  return (\n    <nav className={cq({ name: 'sidebar' })}>\n      <div\n        className={css({\n          fontSize: { base: 'lg', '@sidebar/sm': 'md' },\n        })}\n      />\n    </nav>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Border Color in Panda CSS (JSX)\nDESCRIPTION: Demonstrates how to apply border color to all sides of an element using Panda CSS. It shows setting the border color to a 'primary' color token.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/border.md#2025-04-18_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ borderColor: 'primary' })} />\n```\n\n----------------------------------------\n\nTITLE: Extended Theme Token Definition with Light/Dark Modes\nDESCRIPTION: Defines semantic color tokens with light and dark mode variations for each theme.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/guides/multiple-themes.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst theme = {\n  // ...\n  semanticTokens: {\n    colors: {\n      text: {\n        value: {\n          _pinkTheme: { base: '{colors.pink.500}', _dark: '{colors.pink.300}' },\n          _blueTheme: { base: '{colors.blue.500}', _dark: '{colors.blue.300}' }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Strict Token Behavior in TypeScript\nDESCRIPTION: Examples showing how the strictTokens and strictPropertyValues config options affect type checking for CSS properties in Panda CSS.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\n// config.strictTokens = true\ncss({ display: 'flex' }) // OK, didn't throw\ncss({ display: 'block' }) // OK, didn't throw\ncss({ display: 'abc' }) // ✅ will not throw there is no config token for 'abc'\n```\n\n----------------------------------------\n\nTITLE: Recipe Definition with Updated Class Name Property\nDESCRIPTION: Example showing the updated recipe configuration with className property replacing the name property.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_63\n\nLANGUAGE: typescript\nCODE:\n```\nexport const buttonRecipe = defineRecipe({\n  className: 'button',\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Generated CSS for color-mix utility\nDESCRIPTION: The CSS output generated when using the color-mix function with opacity. It creates a CSS variable for the mixed color and applies it with a fallback.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_55\n\nLANGUAGE: css\nCODE:\n```\n@layer utilities {\n  .bg_red\\.300\\/40 {\n    --mix-background: color-mix(in srgb, var(--colors-red-300) 40%, transparent);\n    background: var(--mix-background, var(--colors-red-300));\n  }\n\n  .text_white {\n    color: var(--colors-white);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Style-Override-Friendly Components with CSS Function in TSX\nDESCRIPTION: Demonstrates how to design a component that supports style overrides using the css prop and the new css function merging behavior.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_112\n\nLANGUAGE: tsx\nCODE:\n```\nimport { css } from '../../styled-system/css'\n\nexport const Button = ({ css: cssProp = {}, children }) => {\n  const className = css({ display: 'flex', alignItem: 'center', color: 'black' }, cssProp)\n  return <button className={className}>{children}</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Border Radius Utility in Panda CSS Configuration\nDESCRIPTION: Example of defining a custom 'br' utility that applies border radius to an element. The utility maps to radii tokens and transforms the value into a borderRadius CSS property.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/customization/utilities.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  utilities: {\n    extend: {\n      br: {\n        className: 'rounded', // css({ br: \"sm\" }) => rounded-sm\n        values: 'radii', // connect values to the radii tokens\n        transform(value) {\n          return { borderRadius: value }\n        }\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Applying Logical Margin Properties in JSX with Chakra UI and Panda\nDESCRIPTION: Illustrates the use of logical margin properties 'marginStart' and 'marginEnd', which apply margin based on text direction, along with their shorthand versions 'ms' and 'me'.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/spacing.md#2025-04-18_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ marginStart: '8' })} />\n<div className={css({ ms: '8' })} /> // shorthand\n\n<div className={css({ marginEnd: '8' })} />\n<div className={css({ me: '8' })} /> // shorthand\n```\n\n----------------------------------------\n\nTITLE: Defining Animation Styles in Panda CSS\nDESCRIPTION: Example of defining animation styles using the defineAnimationStyles function from @pandacss/dev. This demonstrates how to create reusable animation styles for different placements.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/preset-panda/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { defineAnimationStyles } from '@pandacss/dev'\n\nexport const animationStyles = defineAnimationStyles({\n  'slide-fade-in': {\n    value: {\n      transformOrigin: 'var(--transform-origin)',\n      animationDuration: 'fast',\n      '&[data-placement^=top]': {\n        animationName: 'slide-from-top, fade-in',\n      },\n      '&[data-placement^=bottom]': {\n        animationName: 'slide-from-bottom, fade-in',\n      },\n      '&[data-placement^=left]': {\n        animationName: 'slide-from-left, fade-in',\n      },\n      '&[data-placement^=right]': {\n        animationName: 'slide-from-right, fade-in',\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing CSS Layers in Panda Configuration\nDESCRIPTION: Shows how to customize the CSS layers in the Panda configuration, allowing you to rename default layers to match your project's needs.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_105\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  layers: {\n    utilities: 'panda_utilities',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Themes in PandaCSS\nDESCRIPTION: Demonstrates how to define multiple themes with token overrides in PandaCSS configuration. Shows setup of main theme and alternative theme variants with color token customization.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/config/CHANGELOG.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// panda.config.ts\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  // ...\n  // main theme\n  theme: {\n    extend: {\n      tokens: {\n        colors: {\n          text: { value: 'blue' },\n        },\n      },\n      semanticTokens: {\n        colors: {\n          body: {\n            value: {\n              base: '{colors.blue.600}',\n              _osDark: '{colors.blue.400}',\n            },\n          },\n        },\n      },\n    },\n  },\n  // alternative theme variants\n  themes: {\n    primary: {\n      tokens: {\n        colors: {\n          text: { value: 'red' },\n        },\n      },\n      semanticTokens: {\n        colors: {\n          muted: { value: '{colors.red.200}' },\n          body: {\n            value: {\n              base: '{colors.red.600}',\n              _osDark: '{colors.red.400}',\n            },\n          },\n        },\n      },\n    },\n    secondary: {\n      tokens: {\n        colors: {\n          text: { value: 'blue' },\n        },\n      },\n      semanticTokens: {\n        colors: {\n          muted: { value: '{colors.blue.200}' },\n          body: {\n            value: {\n              base: '{colors.blue.600}',\n              _osDark: '{colors.blue.400}',\n            },\n          },\n        },\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: NextJS Theme Implementation\nDESCRIPTION: Complete example of theme implementation in a NextJS application with SSR support and client-side theme switching.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inter } from 'next/font/google'\nimport { cookies } from 'next/headers'\nimport { ThemeName, getTheme } from '../../styled-system/themes'\n\nexport default async function RootLayout({ children }: { children: React.ReactNode }) {\n  const store = cookies()\n  const themeName = store.get('theme')?.value as ThemeName\n  const theme = themeName && (await getTheme(themeName))\n\n  return (\n    <html lang=\"en\" data-panda-theme={themeName ? themeName : undefined}>\n      {themeName && (\n        <head>\n          <style type=\"text/css\" id={theme.id} dangerouslySetInnerHTML={{ __html: theme.css }} />\n        </head>\n      )}\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Container Queries in Styling\nDESCRIPTION: Example of using container queries in component styling with the @/<container-size> syntax for responsive container-based styling.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_117\n\nLANGUAGE: typescript\nCODE:\n```\nimport { css } from '/styled-system/css'\n\nfunction Demo() {\n  return (\n    <nav className={css({ containerType: 'inline-size' })}>\n      <div\n        className={css({\n          fontSize: { '@/sm': 'md' },\n        })}\n      />\n    </nav>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Array Syntax for Responsive Design in Panda CSS\nDESCRIPTION: Example showing how to use the array syntax for responsive styling in Panda CSS. This approach allows defining different style values for different breakpoints in a compact array format.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_94\n\nLANGUAGE: typescript\nCODE:\n```\nconst className = css({\n  color: ['black', undefined, 'orange', 'red'],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring JSX Tracking for Custom Components\nDESCRIPTION: Shows how to configure pattern JSX tracking for custom components. This example demonstrates tracking a custom Circle component using the jsx property in the Panda CSS configuration.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/preset-base/CHANGELOG.md#2025-04-18_snippet_22\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Circle } from 'styled-system/jsx'\nconst CustomCircle = ({ children, ...props }) => {\n  return <Circle {...props}>{children}</Circle>\n}\n```\n\n----------------------------------------\n\nTITLE: Using color-mix with opacity in Panda CSS\nDESCRIPTION: Example of using the color-mix CSS function to apply colors with opacity using the {color}/{opacity} syntax. This generates CSS that mixes colors with transparency.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_54\n\nLANGUAGE: typescript\nCODE:\n```\ncss({\n  bg: 'red.300/40',\n  color: 'white',\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Panda CSS\nDESCRIPTION: Setting up Panda CSS configuration with appropriate include paths.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/redwood.mdx#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  preflight: true,\n  include: ['./src/**/*.{js,jsx,ts,tsx}'],\n  exclude: [],\n  outdir: 'styled-system'\n})\n```\n\n----------------------------------------\n\nTITLE: CSS Variable Management in Panda\nDESCRIPTION: Implementation showing how to transform generated CSS using the cssgen:done hook to remove unused CSS variables and keyframes.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/hooks.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\nimport { removeUnusedCssVars } from './remove-unused-css-vars'\nimport { removeUnusedKeyframes } from './remove-unused-keyframes'\n\nexport default defineConfig({\n  // ...\n  hooks: {\n    'cssgen:done': ({ artifact, content }) => {\n      if (artifact === 'styles.css') {\n        return removeUnusedCssVars(removeUnusedKeyframes(content))\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Token Files with Panda CSS\nDESCRIPTION: Demonstrates how to generate CSS variables, TypeScript definitions, and JavaScript files from a token dictionary. This is used for creating the necessary files for consuming design tokens in projects.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/node/README.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { generateCssVar, generateDts, generateJs } from '@pandacss/generator'\nimport { createTokenMap } from '@pandacss/token-dictionary'\n\nconst conf = new Conf()\n\nconst dict = createTokenMap(config)\n\nconst cssVars = generateCssVar(dict, { root: ':root' })\nconst dts = generateDts(dict)\nconst files = generateJs(dict, { formats: ['esm', 'cjs'] })\n```\n\n----------------------------------------\n\nTITLE: Generated CSS for Color-mix Opacity\nDESCRIPTION: Shows the CSS output generated by the color-mix utility, which creates a variable with color-mix function and provides a fallback for browser compatibility.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_82\n\nLANGUAGE: css\nCODE:\n```\n@layer utilities {\n  .bg_red\\.300\\/40 {\n    --mix-background: color-mix(in srgb, var(--colors-red-300) 40%, transparent);\n    background: var(--mix-background, var(--colors-red-300));\n  }\n\n  .text_white {\n    color: var(--colors-white);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding Elements below Breakpoint in Panda (JSX)\nDESCRIPTION: Illustrates the use of the 'hideBelow' property to hide an element below a specific breakpoint. This example hides the element below the 'md' breakpoint.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/display.md#2025-04-18_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ display: 'flex', hideBelow: 'md' })} />\n```\n\n----------------------------------------\n\nTITLE: Using Wrap Pattern with JSX Syntax\nDESCRIPTION: The Wrap pattern adds space between elements and wraps them automatically if there isn't enough space. This example demonstrates the JSX approach with gap property.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/patterns.mdx#2025-04-18_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Wrap } from '../styled-system/jsx'\n\nfunction App() {\n  return (\n    <Wrap gap=\"6\">\n      <div>First</div>\n      <div>Second</div>\n      <div>Third</div>\n    </Wrap>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Property-Based Conditional Style with Base Value\nDESCRIPTION: More concise syntax for applying conditional styles directly to a property using the base key for default value and _hover for the hover state.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/conditional-styles.md#2025-04-18_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n<button\n  className={css({\n-   bg: 'red.500',\n-   _hover: { bg: 'red.700' }\n+   bg: { base: 'red.500', _hover: 'red.700' }\n  })}\n>\n  Hover me\n</button>\n```\n\n----------------------------------------\n\nTITLE: Using Color-Mix Utility in Panda CSS\nDESCRIPTION: Example of using the new color-mix utility to apply colors with opacity in Panda CSS, demonstrating the {color}/{opacity} syntax.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_109\n\nLANGUAGE: typescript\nCODE:\n```\ncss({\n  bg: 'red.300/40',\n  color: 'white',\n})\n```\n\n----------------------------------------\n\nTITLE: Applying Horizontal and Vertical Margin in JSX with Chakra UI and Panda\nDESCRIPTION: Shows how to apply margin on horizontal and vertical axes using 'marginX' and 'marginY' properties, along with their shorthand versions 'mx' and 'my'.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/spacing.md#2025-04-18_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ marginX: '8' })} />\n<div className={css({ mx: '8' })} /> // shorthand\n\n<div className={css({ marginY: '8' })} />\n<div className={css({ my: '8' })} /> // shorthand\n```\n\n----------------------------------------\n\nTITLE: Generated CSS for Color-Mix Utility\nDESCRIPTION: Example of the CSS generated when using the color-mix function with opacity adjustments. Shows how fallbacks are automatically included for browser compatibility.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/fixture/CHANGELOG.md#2025-04-18_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n@layer utilities {\n  .bg_red\\.300\\/40 {\n    --mix-background: color-mix(in srgb, var(--colors-red-300) 40%, transparent);\n    background: var(--mix-background, var(--colors-red-300));\n  }\n\n  .text_white {\n    color: var(--colors-white);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Tokens in Media Queries with Token Function\nDESCRIPTION: Shows how to use the token() function within media queries and other CSS at-rules.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/theming/usage.mdx#2025-04-18_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { css } from '../styled-system/css'\n\nconst className = css({\n  '@media screen and (min-width: token(sizes.4xl))': {\n    color: 'green.400'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Container Queries in Panda CSS Styles\nDESCRIPTION: Example of using container queries in styles by referencing container names and sizes with the @<container-name>/<container-size> syntax.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nimport { css } from '/styled-system/css'\n\nfunction Demo() {\n  return (\n    <nav className={css({ containerType: 'inline-size' })}>\n      <div\n        className={css({\n          fontSize: { '@/sm': 'md' },\n        })}\n      />\n    </nav>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Generation for Specific Types\nDESCRIPTION: Example showing how to generate CSS for specific types like static styles with custom output file location.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/references/cli.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npanda cssgen \"static\" --outfile dist/static.css\n```\n\n----------------------------------------\n\nTITLE: Using Tokens with Style Attribute in React\nDESCRIPTION: Shows how to use tokens directly in React style attributes for dynamic styling.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/theming/usage.mdx#2025-04-18_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { token } from '../styled-system/tokens'\n\nfunction App() {\n  return (\n    <div\n      style={{\n        background: token('colors.blue.200')\n      }}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Theme Contract Definition in PandaCSS\nDESCRIPTION: Shows how to create and enforce a theme contract to ensure consistent theme structure across implementations.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/config/CHANGELOG.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineThemeContract } from '@pandacss/dev'\n\nconst defineTheme = defineThemeContract({\n  tokens: {\n    colors: {\n      red: { value: '' }, // theme implementations must have a red color\n    },\n  },\n})\n\ndefineTheme({\n  selector: '.theme-secondary',\n  tokens: {\n    colors: {\n      // ^^^^   Property 'red' is missing in type '{}' but required in type '{ red: { value: string; }; }'\n      //\n      // fixed with\n      // red: { value: 'red' },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom BorderX Utility with Enum Values\nDESCRIPTION: Example of defining a 'borderX' utility with a specific set of values and a shorthand alias. The transform function applies both the border width and a specific color.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/customization/utilities.mdx#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  utilities: {\n    extend: {\n      borderX: {\n        values: ['1px', '2px', '4px'],\n        shorthand: 'bx', // `bx` or `borderX` can be used\n        transform(value, { token }) {\n          return {\n            borderInlineWidth: value,\n            borderColor: token('colors.red.200') // read the css variable for red.200\n          }\n        }\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Utility Transform with colorMix\nDESCRIPTION: Example showing how to implement a custom utility transform function that uses the colorMix utility. This can be used in Panda CSS configuration to create custom color utilities with opacity support.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  utilities: {\n    background: {\n      shorthand: 'bg',\n      className: 'bg',\n      values: 'colors',\n      transform(value, args) {\n        const mix = args.utils.colorMix(value)\n        // This can happen if the value format is invalid (e.g. `bg: red.300/invalid` or `bg: red.300//10`)\n        if (mix.invalid) return { background: value }\n\n        return {\n          background: mix.value,\n        }\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Caret Color with Panda CSS in JSX\nDESCRIPTION: This example shows how to set the color of the text cursor (caret) in an input element using Panda CSS. It uses the 'caretColor' property with a color token.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/interactivity.md#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<input className={css({ caretColor: 'red.400' })} />\n```\n\n----------------------------------------\n\nTITLE: Creating a styled component with data attribute option\nDESCRIPTION: Example of using the styled factory with the dataAttr option to add a data-recipe attribute to the element, useful for testing and debugging.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_83\n\nLANGUAGE: jsx\nCODE:\n```\nimport { styled } from '../styled-system/jsx'\nimport { button } from '../styled-system/recipes'\n\nconst Button = styled('button', button, { dataAttr: true })\n\nconst App = () => (\n  <Button variant=\"secondary\" mt=\"10px\">\n    Button\n  </Button>\n)\n// Will render something like <button data-recipe=\"button\" class=\"btn btn--variant_purple mt_10px\">Button</button>\n```\n\n----------------------------------------\n\nTITLE: Before Pseudo Element Content\nDESCRIPTION: Styling the ::before pseudo element of a div using the _before modifier and adding emoji content.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/conditional-styles.md#2025-04-18_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<div\n  className={css({\n    _before: { content: '\"👋\"' }\n  })}\n>\n  Hello\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Global CSS Variables in Styles\nDESCRIPTION: Shows how to use defined global CSS variables within style definitions with proper type suggestions.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nimport { css } from '../styled-system/css'\n\nconst className = css({\n  '--button-color': 'colors.red.300',\n  backgroundColor: 'var(--button-color)',\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Opacity Tokens in JavaScript\nDESCRIPTION: Shows how to define opacity tokens with numeric values between 0 and 1, used for controlling element transparency.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/theming/tokens.md#2025-04-18_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nconst theme = {\n  tokens: {\n    opacity: {\n      50: { value: 0.5 }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated CSS for Themes (CSS)\nDESCRIPTION: Example of the CSS output generated for themes, including root variables and theme-specific overrides using data attributes.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_12\n\nLANGUAGE: css\nCODE:\n```\n@layer tokens {\n  :where(:root, :host) {\n    --colors-text: blue;\n    --colors-body: var(--colors-blue-600);\n  }\n\n  [data-panda-theme='primary'] {\n    --colors-text: red;\n    --colors-muted: var(--colors-red-200);\n    --colors-body: var(--colors-red-600);\n  }\n\n  @media (prefers-color-scheme: dark) {\n    :where(:root, :host) {\n      --colors-body: var(--colors-blue-400);\n    }\n\n    [data-panda-theme='primary'] {\n      --colors-body: var(--colors-red-400);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Watch Mode Support in PandaCSS Codegen\nDESCRIPTION: Shows how to use the new watch mode feature in the PandaCSS codegen command using the --watch or -w flag for continuous code generation.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_67\n\nLANGUAGE: bash\nCODE:\n```\npanda codegen --watch\n```\n\n----------------------------------------\n\nTITLE: Example HomePage Component with Panda CSS\nDESCRIPTION: Example implementation of Panda CSS styling in a Redwood HomePage component.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/redwood.mdx#2025-04-18_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { css } from 'styled-system/css'\nimport { stack } from 'styled-system/patterns'\nimport { Link, routes } from '@redwoodjs/router'\nimport { MetaTags } from '@redwoodjs/web'\n\nconst HomePage = () => {\n  return (\n    <>\n      <MetaTags title=\"Home\" description=\"Home page\" />\n\n      <div\n        className={stack({\n          bg: { base: 'red.300', _hover: 'red.500' },\n          py: '12',\n          px: '8'\n        })}\n      >\n        <h1 className={css({ fontSize: '4xl', fontWeight: 'bold' })}>\n          HomePage\n        </h1>\n        <p>Hello World</p>\n      </div>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable Color-Mix Transform Function\nDESCRIPTION: Helper function to create property transforms that use the colorMix utility, making it easier to apply the same pattern to multiple CSS properties.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_112\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { PropertyTransform } from '@pandacss/types'\n\nexport const createColorMixTransform =\n  (prop: string): PropertyTransform =>\n  (value, args) => {\n    const mix = args.utils.colorMix(value)\n    if (mix.invalid) return { [prop]: value }\n\n    const cssVar = '--mix-' + prop\n\n    return {\n      [cssVar]: mix.value,\n      [prop]: `var(${cssVar}, ${mix.color})`,\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating a Storybook Story for the Button Component\nDESCRIPTION: Example of a Storybook story file for the Button component, demonstrating how to use Panda CSS in Storybook.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/storybook.mdx#2025-04-18_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/react';\nimport { css } from '../../styled-system/css';\n\nimport { Button } from './Button';\n\nconst meta = {\n  title: 'Example/Button',\n  component: Button,\n  tags: ['autodocs'],\n  decorators: [\n    (Story) => (\n      <div className={css({ m: 10 })}>\n        <Story />\n      </div>\n    ),\n  ],\n} satisfies Meta<typeof Button>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Default: Story = {\n  args: {\n    children: 'Hello 🐼!',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using Data Attributes with Styled Button Component\nDESCRIPTION: Example showing how to use the dataAttr option to add data-recipe attributes for debugging purposes.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_51\n\nLANGUAGE: jsx\nCODE:\n```\nimport { styled } from '../styled-system/jsx'\nimport { button } from '../styled-system/recipes'\n\nconst Button = styled('button', button, { dataAttr: true })\n\nconst App = () => (\n  <Button variant=\"secondary\" mt=\"10px\">\n    Button\n  </Button>\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Mix Blend Mode with Panda CSS\nDESCRIPTION: Example of applying blend modes to elements using Panda CSS. The mixBlendMode property controls how an element's content blends with its background.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/effects.md#2025-04-18_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ mixBlendMode: 'multiply' })} />\n```\n\n----------------------------------------\n\nTITLE: Using Button Component with CSS Style Overrides\nDESCRIPTION: Shows how to use a component that accepts style overrides through a css prop to customize its appearance.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_56\n\nLANGUAGE: tsx\nCODE:\n```\nimport { css } from '../../styled-system/css'\nimport { Button, Thingy } from './Button'\n\nexport default function Page() {\n  return (\n    <Button css={{ color: 'pink', _hover: { color: 'red' } }}>\n      will result in `class=\"d_flex items_center text_pink hover:text_red\"`\n    </Button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Background Image and Position in Panda CSS\nDESCRIPTION: Example of applying background image and controlling its position using Panda CSS utilities.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/background.md#2025-04-18_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<div\n  className={css({\n    bgImage: 'url(/images/bg.jpg)',\n    bgPosition: 'center'\n  })}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Theme Conditions in Panda CSS\nDESCRIPTION: Defines conditions for theme and color mode selectors in Panda configuration.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/guides/multiple-themes.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  conditions: {\n    light: '[data-color-mode=light] &',\n    dark: '[data-color-mode=dark] &',\n    pinkTheme: '[data-theme=pink] &',\n    blueTheme: '[data-theme=blue] &'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Auto Scale Transform in Panda (JSX)\nDESCRIPTION: Demonstrates how to apply an auto scale transform to a div element using Panda's css utility.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/transforms.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ scale: 'auto' })} />\n```\n\n----------------------------------------\n\nTITLE: Targeting Slots in Atomic Slot Recipes\nDESCRIPTION: This example shows how to target specific slots within a slot recipe using the className property, allowing for more complex styling scenarios.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/slot-recipes.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sva } from '../styled-system/css'\n\nconst button = sva({\n  className: 'btn',\n  slots: ['root', 'text'],\n  base: {\n    root: {\n      bg: 'blue.500',\n      _hover: {\n        '& .btn__text': {\n          color: 'white'\n        }\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Deprecating Tokens, Utilities, Patterns and Recipes in Panda CSS\nDESCRIPTION: Example showing how to deprecate tokens, utilities, patterns and config recipes by setting the deprecated property. Custom migration messages can be provided to guide users to preferred alternatives.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndefineConfig({\n  utilities: {\n    ta: {\n      deprecated: true,\n      transform(value) {\n        return { textAlign: value }\n      },\n    },\n  },\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\ndefineConfig({\n  theme: {\n    tokens: {\n      spacing: {\n        lg: { value: '8px', deprecated: 'use `8` instead' },\n      },\n    },\n  },\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\ndefineConfig({\n  patterns: {\n    customStack: {\n      deprecated: true,\n    },\n  },\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\ndefineConfig({\n  theme: {\n    recipes: {\n      btn: {\n        deprecated: 'will be removed in v2.0',\n      },\n    },\n  },\n})\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rules\": {\n    \"no-deprecated\": \"warn\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Logical Properties for Border Radius in Panda CSS (JSX)\nDESCRIPTION: Illustrates the use of logical properties for border radius in Panda CSS. It shows how to apply border radius to the start of an element, which adapts based on the document's writing mode.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/border.md#2025-04-18_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ borderStartRadius: 'md' })} />\n<div className={css({ roundedStart: 'md' })} /> // shorthand\n```\n\n----------------------------------------\n\nTITLE: Enhancing CX Function for Smart Style Merging\nDESCRIPTION: Improves the cx function to intelligently merge and deduplicate styles passed to it, ensuring the most specific styles take precedence in the final output.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/shared/CHANGELOG.md#2025-04-18_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<h1 className={cx(css({ mx: '3', paddingTop: '4' }), css({ mx: '10', pt: '6' }))}>Will result in \"mx_10 pt_6\"</h1>\n```\n\n----------------------------------------\n\nTITLE: Using VStack Pattern with Function Syntax\nDESCRIPTION: The VStack pattern is a wrapper around the stack pattern with direction set to vertical and elements centered horizontally. This example shows the function approach with gap property.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/patterns.mdx#2025-04-18_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { vstack } from '../styled-system/patterns'\n\nfunction App() {\n  return (\n    <div className={vstack({ gap: '6' })}>\n      <div>First</div>\n      <div>Second</div>\n      <div>Third</div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Animation Styles in Slot Recipes\nDESCRIPTION: Shows how to use animation styles within slot recipes for conditional animations based on component states.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/theming/animation-styles.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport const popoverSlotRecipe = defineSlotRecipe({\n  slots: anatomy.keys(),\n  base: {\n    content: {\n      _open: {\n        animationStyle: 'scale-fade-in'\n      },\n      _closed: {\n        animationStyle: 'scale-fade-out'\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring globalVars for CSS Variables in Panda CSS\nDESCRIPTION: Example of using the globalVars config option to define type-safe CSS variables and custom CSS @property. This allows defining global CSS variables that will be available across all utilities.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/fixture/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  // ...\n  globalVars: {\n    '--some-color': 'red',\n    '--button-color': {\n      syntax: '<color>',\n      inherits: false,\n      initialValue: 'blue',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using the Container Query Pattern in Panda CSS\nDESCRIPTION: Example of using the new 'cq' pattern from @pandacss/preset-base to create container queries more easily.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nimport { cq } from 'styled-system/patterns'\n\nfunction Demo() {\n  return (\n    <nav className={cq()}>\n      <div\n        className={css({\n          fontSize: { base: 'lg', '@/sm': 'md' },\n        })}\n      />\n    </nav>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Semantic Tokens with Color Opacity in Panda CSS\nDESCRIPTION: This configuration example shows how to set up semantic tokens with color opacity modifiers, including light and dark mode variants.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  conditions: {\n    light: '.light &',\n    dark: '.dark &',\n  },\n  theme: {\n    tokens: {\n      colors: {\n        blue: { 500: { value: 'blue' } },\n        green: { 500: { value: 'green' } },\n      },\n      opacity: {\n        half: { value: 0.5 },\n      },\n    },\n    semanticTokens: {\n      colors: {\n        secondary: {\n          value: {\n            base: 'red',\n            _light: '{colors.blue.500/32}',\n            _dark: '{colors.green.500/half}',\n          },\n        },\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Z-Index Tokens in JSX\nDESCRIPTION: Illustrates how to set up z-index tokens for controlling element stacking order in layouts.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/theming/tokens.md#2025-04-18_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nconst theme = {\n  tokens: {\n    zIndex: {\n      modal: { value: 1000 }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Flex Basis Property in JSX with Panda\nDESCRIPTION: Demonstrates how to set the initial main size of a flex item using Panda's flexBasis utility. The example shows setting the basis to '1/2' which allocates half of the available space.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/flex-and-grid.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ basis: '1/2' })} />\n```\n\n----------------------------------------\n\nTITLE: Styled component with default props in Panda CSS\nDESCRIPTION: Example of using the defaultProps option in the styled factory to set default prop values, allowing for local overrides of recipe defaults without creating wrapper components.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_84\n\nLANGUAGE: jsx\nCODE:\n```\nimport { styled } from '../styled-system/jsx'\nimport { button } from '../styled-system/recipes'\n\nconst Button = styled('button', button, {\n  defaultProps: {\n    variant: 'secondary',\n    px: '10px',\n  },\n})\n\nconst App = () => <Button>Button</Button>\n// Will render something like <button class=\"btn btn--variant_secondary px_10px\">Button</button>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Recipe Implementation\nDESCRIPTION: Example showing TypeScript integration with recipe variants and styled components.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/recipes.md#2025-04-18_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { styled } from '../styled-system/jsx'\nimport { cva, type RecipeVariantProps } from '../styled-system/css'\n\nconst buttonStyle = cva({\n  base: {\n    color: 'red',\n    textAlign: 'center'\n  },\n  variants: {\n    size: {\n      small: {\n        fontSize: '1rem'\n      },\n      large: {\n        fontSize: '2rem'\n      }\n    }\n  }\n})\n\nexport type ButtonVariants = RecipeVariantProps<typeof buttonStyle>\n\nexport const Button = styled('button', buttonStyle)\n```\n\n----------------------------------------\n\nTITLE: Configuring Panda to Use Build Info File\nDESCRIPTION: This configuration for Panda CSS includes a build info file from the design system package. This allows Panda to generate CSS classes without needing to parse the source code of the design system.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/guides/component-library.md#2025-04-18_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  //...\n  include: [\n    './node_modules/@acme-org/design-system/dist/panda.buildinfo.json',\n    './src/**/*.{ts,tsx}'\n  ],\n  importMap: '@acme-org/styled-system',\n  outdir: 'styled-system'\n})\n```\n\n----------------------------------------\n\nTITLE: Fixing Semantic Token Color Opacity Modifiers in Panda CSS\nDESCRIPTION: Example showing how to use color opacity modifiers with semantic tokens in Panda CSS, demonstrating the syntax for both direct values and token references.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/token-dictionary/CHANGELOG.md#2025-04-18_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  conditions: {\n    light: '.light &',\n    dark: '.dark &',\n  },\n  theme: {\n    tokens: {\n      colors: {\n        blue: { 500: { value: 'blue' } },\n        green: { 500: { value: 'green' } },\n      },\n      opacity: {\n        half: { value: 0.5 },\n      },\n    },\n    semanticTokens: {\n      colors: {\n        secondary: {\n          value: {\n            base: 'red',\n            _light: '{colors.blue.500/32}', // <-- wasn't working as expected\n            _dark: '{colors.green.500/half}',\n          },\n        },\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Patterns with Default Values\nDESCRIPTION: Shows how to define a new hstack pattern with default values, in this case setting a default gap value of 40px.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\ndefineConfig({\n  patterns: {\n    hstack: {\n      properties: {\n        justify: { type: 'property', value: 'justifyContent' },\n        gap: { type: 'property', value: 'gap' },\n      },\n      // you can also use a token like '10'\n      defaultValues: { gap: '40px' },\n      transform(props) {\n        const { justify, gap, ...rest } = props\n        return {\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: justify,\n          gap,\n          ...rest,\n        }\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Arbitrary Selectors with Data State and Child Elements\nDESCRIPTION: Using arbitrary selectors with the css function to style elements based on data attributes and child element selection.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/conditional-styles.md#2025-04-18_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { css } from '../styled-system/css'\n\nconst App = () => {\n  return (\n    <div\n      className={css({\n        '&[data-state=closed]': { color: 'red.300' },\n        '& > *': { margin: '2' }\n      })}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Recipe with defineRecipe and staticCss Properties in TypeScript\nDESCRIPTION: Example of defining a card recipe with size and visual variants, showing how the [*] rule in staticCss configuration works differently after the patch.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nconst card = defineRecipe({\n  className: 'card',\n  base: { color: 'white' },\n  variants: {\n    size: {\n      small: { fontSize: '14px' },\n      large: { fontSize: '18px' },\n    },\n    visual: {\n      primary: { backgroundColor: 'blue' },\n      secondary: { backgroundColor: 'gray' },\n    },\n  },\n})\n\nexport default defineConfig({\n  // ...\n  staticCss: {\n    recipes: {\n      card: ['*'], // this\n\n      // was equivalent to:\n      card: [\n        // notice how `responsive: true` was implicitly added\n        { size: ['*'], responsive: true },\n        { visual: ['*'], responsive: true },\n      ],\n\n      //   will now correctly be equivalent to:\n      card: [{ size: ['*'] }, { visual: ['*'] }],\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable Color-Mix Transform Function\nDESCRIPTION: Helper function to create property transforms that use color-mix. This function makes it easier to apply the same color-mix transform logic across multiple CSS properties.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/fixture/CHANGELOG.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { PropertyTransform } from '@pandacss/types'\n\nexport const createColorMixTransform =\n  (prop: string): PropertyTransform =>\n  (value, args) => {\n    const mix = args.utils.colorMix(value)\n    if (mix.invalid) return { [prop]: value }\n\n    const cssVar = '--mix-' + prop\n\n    return {\n      [cssVar]: mix.value,\n      [prop]: `var(${cssVar}, ${mix.color})`,\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Generated CSS Output for Color Opacity Modifiers - CSS\nDESCRIPTION: Displays the resulting CSS output when using color opacity modifiers in Panda CSS. It shows how the color-mix function is used to implement the opacity effect.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/token-dictionary/CHANGELOG.md#2025-04-18_snippet_13\n\nLANGUAGE: css\nCODE:\n```\n@layer tokens {\n  :where(:root, :host) {\n    --colors-blue-300: #00f;\n    --colors-primary: color-mix(in srgb, var(--colors-blue-300) 70%, transparent);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Named Container Queries in Panda CSS\nDESCRIPTION: Example of using named container queries with the 'cq' pattern, specifying a container name that can be referenced in style queries.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nimport { cq } from 'styled-system/patterns'\n\nfunction Demo() {\n  return (\n    <nav className={cq({ name: 'sidebar' })}>\n      <div\n        className={css({\n          fontSize: { base: 'lg', '@sidebar/sm': 'md' },\n        })}\n      />\n    </nav>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Theme Token Definition\nDESCRIPTION: Defines semantic color tokens for pink and blue themes.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/guides/multiple-themes.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst theme = {\n  // ...\n  semanticTokens: {\n    colors: {\n      text: {\n        value: {\n          _pinkTheme: '{colors.pink.500}',\n          _blueTheme: '{colors.blue.500}'\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Utility Configuration Shorthand Without className in JavaScript\nDESCRIPTION: This snippet demonstrates a bug fix for utility configuration where shorthands without 'className' were returning incorrect CSS. The example shows the configuration of a 'coloredBorder' utility with shorthand 'cb' that transforms color values into border styles.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nutilities: {\n  extend: {\n    coloredBorder: {\n      shorthand: 'cb', // no classname, returns incorrect css\n      values: ['red', 'green', 'blue'],\n      transform(value) {\n        return {\n          border: `1px solid ${value}`,\n        };\n      },\n    },\n  },\n},\n```\n\n----------------------------------------\n\nTITLE: Creating Theme Contracts in Panda CSS\nDESCRIPTION: Example of creating a theme contract to ensure all themes have the same structure using the `defineThemeContract` function.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/token-dictionary/CHANGELOG.md#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineThemeContract } from '@pandacss/dev'\n\nconst defineTheme = defineThemeContract({\n  tokens: {\n    colors: {\n      red: { value: '' }, // theme implementations must have a red color\n    },\n  },\n})\n\ndefineTheme({\n  selector: '.theme-secondary',\n  tokens: {\n    colors: {\n      // ^^^^   Property 'red' is missing in type '{}' but required in type '{ red: { value: string; }; }'\n      //\n      // fixed with\n      // red: { value: 'red' },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Mixed Conditions with Nested Rules\nDESCRIPTION: Shows how to create conditions that combine media queries and selectors under a single condition name.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/customization/conditions.mdx#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  conditions: {\n    extend: {\n      supportHover: ['@media (hover: hover) and (pointer: fine)', '&:hover']\n    }\n  }\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { css } from '../styled-system/css'\n\ncss({\n  _supportHover: {\n    color: 'red'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Token References in Media Queries\nDESCRIPTION: Example of using token references with curly braces in media queries, which will be resolved to the actual token values.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_93\n\nLANGUAGE: typescript\nCODE:\n```\ncss({\n  // ✅ this is fine now, will resolve to something like\n  // `@container (min-width: 56em)`\n  '@container (min-width: {sizes.4xl})': {\n    color: 'green',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using Pattern Raw Method for Style Merging in TSX\nDESCRIPTION: Demonstrates using the new pattern.raw method to generate style objects that can be merged with the css function for flexible styling.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_114\n\nLANGUAGE: tsx\nCODE:\n```\nimport { hstack } from '../../styled-system/patterns'\nimport { css, cva } from '../../styled-system/css'\n\nexport const Button = ({ css: cssProp = {}, children }) => {\n  // using the flex pattern\n  const hstackProps = hstack.raw({\n    border: '1px solid',\n    _hover: { color: 'blue.400' },\n  })\n\n  // merging the styles\n  const className = css(hstackProps, cssProp)\n\n  return <button className={className}>{children}</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Using Pattern.raw with Style Merging in Button Component\nDESCRIPTION: Example of using the hstack pattern's raw method to generate style objects that can be merged with other styles, demonstrating the flexibility of the raw API for patterns.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_86\n\nLANGUAGE: tsx\nCODE:\n```\nimport { hstack } from '../../styled-system/patterns'\nimport { css, cva } from '../../styled-system/css'\n\nexport const Button = ({ css: cssProp = {}, children }) => {\n  // using the flex pattern\n  const hstackProps = hstack.raw({\n    border: '1px solid',\n    _hover: { color: 'blue.400' },\n  })\n\n  // merging the styles\n  const className = css(hstackProps, cssProp)\n\n  return <button className={className}>{children}</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Using hideBelow Breakpoint Utility in Panda CSS\nDESCRIPTION: Example of using the hideBelow utility with a named breakpoint to hide content below a specific viewport width. The resulting CSS uses a max-width media query.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_126\n\nLANGUAGE: jsx\nCODE:\n```\ncss({ hideBelow: 'lg' })\n// => @media screen and (max-width: 63.9975em) { background: red; }\n```\n\n----------------------------------------\n\nTITLE: Pregenerating Themes in Panda CSS Configuration\nDESCRIPTION: Shows how to specify which themes to pregenerate in the CSS output using the staticCss.themes configuration option.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/cli/CHANGELOG.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// panda.config.ts\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  // ...\n  staticCss: {\n    themes: ['primary', 'secondary'],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring JSX Style Props with 'minimal' Option in Panda CSS\nDESCRIPTION: Configuration example for using 'minimal' option in jsxStyleProps, which restricts style props to only the css prop, reducing bundle size by approximately 45%.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_117\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  jsxStyleProps: 'minimal',\n})\n```\n\n----------------------------------------\n\nTITLE: Using codegen:prepare Hook in Panda CSS Configuration\nDESCRIPTION: This snippet demonstrates how to use the codegen:prepare hook in Panda CSS configuration. This hook is called before writing codegen files to disk, allowing for customization of the generated files.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/token-dictionary/CHANGELOG.md#2025-04-18_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  // ...\n  hooks: {\n    'codegen:prepare': ({ artifacts, changed }) => {\n      // do something with the emitted js/d.ts files\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Responsive Variants Implementation\nDESCRIPTION: Shows how to implement responsive variants in a button recipe based on breakpoints.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/recipes.md#2025-04-18_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport { button } from '../styled-system/recipes'\n\nfunction App() {\n  return (\n    <div>\n      <button className={button({ size: { base: 'sm', md: 'lg' } })}>\n        Click me\n      </button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Pseudo-element Selectors in Panda CSS\nDESCRIPTION: Pseudo-element selectors for targeting specific parts of elements like before, after, and first-letter\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/conditional-styles.md#2025-04-18_snippet_31\n\nLANGUAGE: css\nCODE:\n```\n_before: \"&::before\"\n_after: \"&::after\"\n_firstLetter: \"&::first-letter\"\n_selection: \"&::selection\"\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Tokens with Stitches\nDESCRIPTION: Shows how to define and use tokens in Stitches, demonstrating the configuration in createStitches and usage in styles.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/migration/stitches.md#2025-04-18_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport { createStitches } from '@stitches/react'\n\nconst { styled, css } = createStitches({\n  theme: {\n    colors: {\n      gray100: 'hsl(206,22%,99%)',\n      gray200: 'hsl(206,12%,97%)'\n    }\n  },\n  space: {},\n  fonts: {}\n})\n\n// usage\nconst styles = css({\n  backgroundColor: '$gray100'\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring ImportMap Shortcut in JSON for Panda CSS\nDESCRIPTION: Example of using the shortcut for the config.importMap option. This allows customizing the base import path while keeping default entrypoints using a simple string rather than a full object.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_101\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"importMap\": \"@scope/styled-system\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generated CSS Output for Color Opacity\nDESCRIPTION: Shows the generated CSS output when using the color opacity modifier, including the color-mix function and fallback values.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/color-opacity-modifier.md#2025-04-18_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@layer utilities {\n  .bg_red\\.300\\/40 {\n    --mix-background: color-mix(\n      in srgb,\n      var(--colors-red-300) 40%,\n      transparent\n    );\n    background: var(--mix-background, var(--colors-red-300));\n  }\n\n  .text_white {\n    color: var(--colors-white);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Group Selector for Parent Hover Effect\nDESCRIPTION: Using group class and _groupHover modifier to style a child element based on the parent element's hover state.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/conditional-styles.md#2025-04-18_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"group\">\n  <p className={css({ _groupHover: { bg: 'red.500' } })}>Hover me</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Animation Styles in Panda Config\nDESCRIPTION: Shows how to update the Panda CSS configuration file to include custom animation styles by extending the theme configuration.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/theming/animation-styles.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\nimport { animationStyles } from './animation-styles'\n\nexport default defineConfig({\n  theme: {\n    extend: {\n      animationStyles\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using CSS Variables in Panda CSS Utilities\nDESCRIPTION: Example of using globalVars in CSS utilities. Variables defined in globalVars will be available as values for utilities and can be referenced with var() syntax.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/fixture/CHANGELOG.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { css } from '../styled-system/css'\n\nconst className = css({\n  '--button-color': 'colors.red.300',\n  // ^^^^^^^^^^^^  will be suggested\n\n  backgroundColor: 'var(--button-color)',\n  //                ^^^^^^^^^^^^^^^^^^  will be suggested\n})\n```\n\n----------------------------------------\n\nTITLE: NextJS Theme Implementation with SSR\nDESCRIPTION: Example of server-side rendering theme implementation in NextJS, including layout configuration and theme switching functionality.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/config/CHANGELOG.md#2025-04-18_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// app/layout.tsx\nimport { Inter } from 'next/font/google'\nimport { cookies } from 'next/headers'\nimport { ThemeName, getTheme } from '../../styled-system/themes'\n\nexport default async function RootLayout({ children }: { children: React.ReactNode }) {\n  const store = cookies()\n  const themeName = store.get('theme')?.value as ThemeName\n  const theme = themeName && (await getTheme(themeName))\n\n  return (\n    <html lang=\"en\" data-panda-theme={themeName ? themeName : undefined}>\n      {themeName && (\n        <head>\n          <style type=\"text/css\" id={theme.id} dangerouslySetInnerHTML={{ __html: theme.css }} />\n        </head>\n      )}\n      <body>{children}</body>\n    </html>\n  )\n}\n\n// app/page.tsx\nimport { getTheme, injectTheme } from '../../styled-system/themes'\n\nexport default function Home() {\n  return (\n    <>\n      <button\n        onClick={async () => {\n          const current = document.documentElement.dataset.pandaTheme\n          const next = current === 'primary' ? 'secondary' : 'primary'\n          const theme = await getTheme(next)\n          setCookie('theme', next, 7)\n          injectTheme(document.documentElement, theme)\n        }}\n      >\n        swap theme\n      </button>\n    </>\n  )\n}\n\n// Set a Cookie\nfunction setCookie(cName: string, cValue: any, expDays: number) {\n  let date = new Date()\n  date.setTime(date.getTime() + expDays * 24 * 60 * 60 * 1000)\n  const expires = 'expires=' + date.toUTCString()\n  document.cookie = cName + '=' + cValue + '; ' + expires + '; path=/'\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Pattern Default Values in Panda Configuration\nDESCRIPTION: Example of how to override default values in Panda by using the extend pattern in the configuration. This demonstrates setting a custom gap value for the stack pattern.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\ndefineConfig({\n  patterns: {\n    extend: {\n      stack: {\n        defaultValues: { gap: '20px' },\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining and Configuring Recipe Patterns in PandaCSS\nDESCRIPTION: Example showing how to define a card recipe with variants and configure its staticCss options in the PandaCSS configuration. The snippet demonstrates the fix for the special `[*]` rule which now correctly generates styles without applying responsive variants by default.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\nconst card = defineRecipe({\n  className: 'card',\n  base: { color: 'white' },\n  variants: {\n    size: {\n      small: { fontSize: '14px' },\n      large: { fontSize: '18px' },\n    },\n    visual: {\n      primary: { backgroundColor: 'blue' },\n      secondary: { backgroundColor: 'gray' },\n    },\n  },\n})\n\nexport default defineConfig({\n  // ...\n  staticCss: {\n    recipes: {\n      card: ['*'], // this\n\n      // was equivalent to:\n      card: [\n        // notice how `responsive: true` was implicitly added\n        { size: ['*'], responsive: true },\n        { visual: ['*'], responsive: true },\n      ],\n\n      //   will now correctly be equivalent to:\n      card: [{ size: ['*'] }, { visual: ['*'] }],\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Recipe with Inline staticCss Configuration in TypeScript\nDESCRIPTION: Demonstrates how to specify a recipe's staticCss options directly within the recipe definition, providing a more modular approach to static CSS configuration.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineRecipe } from '@pandacss/dev'\n\nconst card = defineRecipe({\n  className: 'card',\n  base: { color: 'white' },\n  variants: {\n    size: {\n      small: { fontSize: '14px' },\n      large: { fontSize: '18px' },\n    },\n  },\n  staticCss: [{ size: ['*'] }],\n})\n```\n\n----------------------------------------\n\nTITLE: Hiding Scrollbar with Panda CSS in JSX\nDESCRIPTION: This snippet illustrates how to hide the scrollbar of an element using Panda CSS. It uses the 'scrollbar' property with the 'hidden' value.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/interactivity.md#2025-04-18_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ scrollbar: 'hidden' })}>Scrollbar hidden</div>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Config.strictTokens Behavior in TypeScript\nDESCRIPTION: Shows how the config.strictTokens option behaves differently in v0.19.0 versus the current version for properties without config tokens.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_58\n\nLANGUAGE: typescript\nCODE:\n```\n// config.strictTokens = true\ncss({ display: 'flex' }) // OK, didn't throw\ncss({ display: 'block' }) // OK, didn't throw\ncss({ display: 'abc' }) // ❌ would throw since 'abc' is not part of predefined values of 'display' even thought there is no config token for 'abc'\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// config.strictTokens = true\ncss({ display: 'flex' }) // OK, didn't throw\ncss({ display: 'block' }) // OK, didn't throw\ncss({ display: 'abc' }) // ✅ will not throw there is no config token for 'abc'\n```\n\n----------------------------------------\n\nTITLE: Correct Order for Mixing Conditions and Pseudo Elements\nDESCRIPTION: Example showing the correct order (condition before pseudo element) and incorrect order for styling combinations of conditions and pseudo elements.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/conditional-styles.md#2025-04-18_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\ncss({\n  // This works ✅\n  _dark: { _backdrop: { color: 'red' } }\n  // This doesn't work ❌\n  _backdrop: { _dark: { color: 'red' } }\n})\n```\n\n----------------------------------------\n\nTITLE: Default Container Sizes in Panda Preset\nDESCRIPTION: The default container sizes provided by the @pandacss/preset-panda preset, from extra small to 8XL.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_88\n\nLANGUAGE: typescript\nCODE:\n```\nexport const containerSizes = {\n  xs: '320px',\n  sm: '384px',\n  md: '448px',\n  lg: '512px',\n  xl: '576px',\n  '2xl': '672px',\n  '3xl': '768px',\n  '4xl': '896px',\n  '5xl': '1024px',\n  '6xl': '1152px',\n  '7xl': '1280px',\n  '8xl': '1440px',\n}\n```\n\n----------------------------------------\n\nTITLE: Generate CSS for Specific Files with Glob Pattern\nDESCRIPTION: Shows how to use the `panda cssgen` command with a glob pattern to extract CSS only from specific files in your project, with an optional output file.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_110\n\nLANGUAGE: sh\nCODE:\n```\npanda cssgen app/ecommerce/**/*.tsx -o ecommerce.css\n```\n\n----------------------------------------\n\nTITLE: Implementing Plugins in Panda CSS\nDESCRIPTION: Example of defining a plugin for Panda CSS that formats token names. Demonstrates using the hooks system to customize token generation.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/references/config.md#2025-04-18_snippet_31\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  // ...\n  plugins: [\n    {\n      name: 'token-format',\n      hooks: {\n        'tokens:created': ({ configure }) => {\n          configure({\n            formatTokenName: path => '$' + path.join('-')\n          })\n        }\n      }\n    }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Using Patterns with JSX Components\nDESCRIPTION: Demonstrates how to use patterns as JSX components with custom configuration and element rendering.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/patterns.mdx#2025-04-18_snippet_28\n\nLANGUAGE: tsx\nCODE:\n```\nimport { VStack, Center } from '../styled-system/jsx'\n\nfunction App() {\n  return (\n    <VStack gap=\"6\" mt=\"4\">\n      <div>First</div>\n      <div>Second</div>\n      <div>Third</div>\n      <Center>4</Center>\n    </VStack>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Tokens with Panda\nDESCRIPTION: Demonstrates how to define and use tokens in Panda, showing the differences in configuration and usage compared to Stitches.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/migration/stitches.md#2025-04-18_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  theme: {\n    tokens: {\n      colors: {\n        gray100: { value: 'hsl(206,22%,99%)' },\n        gray200: { value: 'hsl(206,12%,97%)' }\n      },\n      spacing: {},\n      fonts: {}\n    },\n    semanticTokens: {\n      // ...\n    }\n  }\n})\n\n// usage\nimport { css } from '../styled-system/css'\n\nconst styles = css({\n  backgroundColor: 'gray100'\n})\n```\n\n----------------------------------------\n\nTITLE: Global CSS Variables Configuration\nDESCRIPTION: Example of defining type-safe CSS variables and custom CSS properties in Panda CSS configuration.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  // ...\n  globalVars: {\n    '--some-color': 'red',\n    '--button-color': {\n      syntax: '<color>',\n      inherits: false,\n      initialValue: 'blue',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Even and Odd Row Styling in Tables\nDESCRIPTION: Styling even and odd rows in a table using the _even and _odd modifiers for alternating background colors.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/conditional-styles.md#2025-04-18_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<table>\n  <tbody>\n    {items.map(item => (\n      <tr\n        key={item}\n        className={css({\n          _even: { bg: 'gray.100' },\n          _odd: { bg: 'white' }\n        })}\n      >\n        <td>{item}</td>\n      </tr>\n    ))}\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Creating Atomic Slot Recipes with sva\nDESCRIPTION: Demonstrates how to use the `sva` function to create atomic slot recipes, which allow styling of composite components with multiple parts or slots.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_112\n\nLANGUAGE: jsx\nCODE:\n```\nimport { sva } from 'styled-system/css'\n\nconst button = sva({\n  slots: ['label', 'icon'],\n  base: {\n    label: { color: 'red', textDecoration: 'underline' },\n  },\n  variants: {\n    rounded: {\n      true: {},\n    },\n    size: {\n      sm: {\n        label: { fontSize: 'sm' },\n        icon: { fontSize: 'sm' },\n      },\n      lg: {\n        label: { fontSize: 'lg' },\n        icon: { fontSize: 'lg', color: 'pink' },\n      },\n    },\n  },\n  defaultVariants: {\n    size: 'sm',\n  },\n})\n\nexport function App() {\n  const btnClass = button({ size: 'lg', rounded: true })\n\n  return (\n    <button>\n      <p class={btnClass.label}> Label</p>\n      <p class={btnClass.icon}> Icon</p>\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Horizontal Divide in Panda (JSX)\nDESCRIPTION: This snippet demonstrates how to use the divideX property in Panda to apply a horizontal divide to elements. The divideX property sets the width of the horizontal divider.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/divide.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ divideX: '2px' })} />\n```\n\n----------------------------------------\n\nTITLE: Using Slot-based Styling with SVA in React Components\nDESCRIPTION: Example of using slot-based styling in a React component, where different parts of the component receive their own classNames from a slot recipe.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_89\n\nLANGUAGE: jsx\nCODE:\n```\nexport function App() {\n  const btnClass = button({ size: 'lg', rounded: true })\n\n  return (\n    <button>\n      <p class={btnClass.label}> Label</p>\n      <p class={btnClass.icon}> Icon</p>\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Styled Factory Composition in Panda CSS\nDESCRIPTION: Example showing how to compose nested styled components with correct class overriding where each level overrides the styles from the previous level.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/studio/CHANGELOG.md#2025-04-18_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { styled } from '../styled-system/jsx'\n\nconst BasicBox = styled('div', { base: { fontSize: '10px' } })\nconst ExtendedBox1 = styled(BasicBox, { base: { fontSize: '20px' } })\nconst ExtendedBox2 = styled(ExtendedBox1, { base: { fontSize: '30px' } })\n\nexport const App = () => {\n  return (\n    <>\n      {/* ✅ fs_10px */}\n      <BasicBox>text1</BasicBox>\n      {/* ✅ fs_20px */}\n      <ExtendedBox1>text2</ExtendedBox1>\n      {/* BEFORE: ❌ fs_10px fs_30px */}\n      {/* NOW: ✅ fs_30px */}\n      <ExtendedBox2>text3</ExtendedBox2>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Config Recipe Compound Variants in Styled Components\nDESCRIPTION: Example demonstrating how to override compound variant styles within the styled JSX factory, allowing for better style customization.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/studio/CHANGELOG.md#2025-04-18_snippet_16\n\nLANGUAGE: ts\nCODE:\n```\nconst button = defineRecipe({\n  className: 'btn',\n  base: { color: 'green', fontSize: '16px' },\n  variants: {\n    size: { small: { fontSize: '14px' } },\n  },\n  compoundVariants: [{ size: 'small', css: { color: 'blue' } }],\n})\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { styled } from '../styled-system/jsx'\nimport { button } from '../styled-system/recipes'\n\nconst Button = styled('button', button)\n\nfunction App() {\n  return (\n    <>\n      <Button size=\"small\" color=\"red.100\">\n        Click me\n      </Button>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Circle Component Implementation\nDESCRIPTION: Example of creating a custom Circle component with children prop support.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_76\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Circle } from 'styled-system/jsx'\nconst CustomCircle = ({ children, ...props }) => {\n  return <Circle {...props}>{children}</Circle>\n}\n```\n\n----------------------------------------\n\nTITLE: Using hideFrom with Arbitrary Breakpoint in Panda CSS\nDESCRIPTION: Example of using the hideFrom utility with an arbitrary pixel value as a breakpoint rather than a named breakpoint. The resulting CSS uses a min-width media query.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_127\n\nLANGUAGE: jsx\nCODE:\n```\ncss({ hideFrom: '800px' })\n// => @media screen and (min-width: 800px) { background: red; }\n```\n\n----------------------------------------\n\nTITLE: Fixing hideBelow Breakpoint Media Query in JSX\nDESCRIPTION: Demonstrates fix for hideBelow breakpoints to be inclusive of specified breakpoints, showing media query generation with max-width.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_72\n\nLANGUAGE: jsx\nCODE:\n```\ncss({ hideBelow: 'lg' })\n// => @media screen and (max-width: 63.9975em) { background: red; }\n```\n\n----------------------------------------\n\nTITLE: Using Bleed Pattern for Full-Width Elements\nDESCRIPTION: Demonstrates how to create full-width elements by negating parent container padding using both function and JSX approaches.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/patterns.mdx#2025-04-18_snippet_26\n\nLANGUAGE: tsx\nCODE:\n```\nimport { css } from '../styled-system/css'\nimport { bleed } from '../styled-system/patterns'\n\nexport function Page() {\n  return (\n    <div className={css({ px: '6' })}>\n      <div className={bleed({ inline: '6' })}>Welcome</div>\n    </div>\n  )\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { css } from '../styled-system/css'\nimport { Bleed } from '../styled-system/jsx'\n\nexport function Page() {\n  return (\n    <div className={css({ px: '6' })}>\n      <Bleed inline=\"6\">Welcome</div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming Pattern 'jsx' Property to 'jsxName' (Breaking Change)\nDESCRIPTION: Breaking change in version 0.9.0 that renames the 'jsx' property of a pattern to 'jsxName' to improve API clarity and consistency.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_46\n\nLANGUAGE: diff\nCODE:\n```\nconst hstack = definePattern({\n-  jsx: 'HStack',\n+  jsxName: 'HStack',\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Generated CSS for Checkbox Recipe\nDESCRIPTION: Shows the CSS output generated by Panda for the checkbox recipe, including base styles and variants organized in cascade layers.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/slot-recipes.md#2025-04-18_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n@layer recipes {\n  @layer base {\n    .checkbox__root {\n      display: flex;\n      align-items: center;\n      gap: var(--space-2);\n    }\n\n    .checkbox__control {\n      border-width: var(--border-widths-1px);\n      border-radius: var(--radii-sm);\n    }\n\n    .checkbox__label {\n      margin-start: var(--space-2);\n    }\n  }\n\n  .checkbox__control--size-sm {\n    width: var(--space-8);\n    height: var(--space-8);\n  }\n\n  .checkbox__label--size-sm {\n    font-size: var(--font-sizes-sm);\n  }\n\n  .checkbox__control--size-md {\n    width: var(--space-10);\n    height: var(--space-10);\n  }\n\n  .checkbox__label--size-md {\n    font-size: var(--font-sizes-md);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Next.js Theme Integration Example\nDESCRIPTION: Example of integrating theme support in a Next.js application with SSR and client-side theme switching.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n// app/layout.tsx\nimport { Inter } from 'next/font/google'\nimport { cookies } from 'next/headers'\nimport { ThemeName, getTheme } from '../../styled-system/themes'\n\nexport default async function RootLayout({ children }: { children: React.ReactNode }) {\n  const store = cookies()\n  const themeName = store.get('theme')?.value as ThemeName\n  const theme = themeName && (await getTheme(themeName))\n\n  return (\n    <html lang=\"en\" data-panda-theme={themeName ? themeName : undefined}>\n      {themeName && (\n        <head>\n          <style type=\"text/css\" id={theme.id} dangerouslySetInnerHTML={{ __html: theme.css }} />\n        </head>\n      )}\n      <body>{children}</body>\n    </html>\n  )\n}\n\n// app/page.tsx\nimport { getTheme, injectTheme } from '../../styled-system/themes'\n\nexport default function Home() {\n  return (\n    <>\n      <button\n        onClick={async () => {\n          const current = document.documentElement.dataset.pandaTheme\n          const next = current === 'primary' ? 'secondary' : 'primary'\n          const theme = await getTheme(next)\n          setCookie('theme', next, 7)\n          injectTheme(document.documentElement, theme)\n        }}\n      >\n        swap theme\n      </button>\n    </>\n  )\n}\n\n// Set a Cookie\nfunction setCookie(cName: string, cValue: any, expDays: number) {\n  let date = new Date()\n  date.setTime(date.getTime() + expDays * 24 * 60 * 60 * 1000)\n  const expires = 'expires=' + date.toUTCString()\n  document.cookie = cName + '=' + cValue + '; ' + expires + '; path=/'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Compound Components with Style Context\nDESCRIPTION: This example shows how to use the previously created style context to create compound components that are connected to a slot recipe.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/slot-recipes.md#2025-04-18_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createStyleContext } from './style-context'\nimport { checkbox } from './checkbox.recipe'\n\nconst { withProvider, withContext } = createStyleContext(checkbox)\n\nconst Root = withProvider('label', 'root')\nconst Control = withContext('div', 'control')\nconst Label = withContext('span', 'label')\n\nconst Checkbox = { Root, Control, Label }\n```\n\n----------------------------------------\n\nTITLE: Configuring Panda File Watching in JSON\nDESCRIPTION: This snippet shows how to configure file watching and include/exclude patterns for Panda.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/references/config.md#2025-04-18_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"include\": [\"./src/**/*.{js,jsx,ts,tsx}\", \"./pages/**/*.{js,jsx,ts,tsx}\"],\n  \"exclude\": [],\n  \"watch\": false,\n  \"poll\": false\n}\n```\n\n----------------------------------------\n\nTITLE: SVA Usage with Non-Statically Extractable Slots\nDESCRIPTION: Example showing how SVA (styled variant array) component styling now works even when slots are not statically extractable. This is useful when importing slots from external packages like Ark UI.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_64\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sva } from '../styled-system/css'\nimport { slots } from './slots'\n\nconst card = sva({\n  slots, // ❌ did NOT work -> ✅ will now work as expected\n  base: {\n    root: {\n      p: '6',\n      m: '4',\n      w: 'md',\n      boxShadow: 'md',\n      borderRadius: 'md',\n      _dark: { bg: '#262626', color: 'white' },\n    },\n    content: {\n      textStyle: 'lg',\n    },\n    title: {\n      textStyle: 'xl',\n      fontWeight: 'semibold',\n      pb: '2',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Global Placeholder Color in Panda CSS\nDESCRIPTION: Demonstrates how to set a global placeholder color for all input elements using Panda CSS configuration.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/writing-styles.md#2025-04-18_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  // ...\n  globalCss: {\n    html: {\n      '--global-color-placeholder': 'red'\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Atomic Styles with Panda CSS Function in React\nDESCRIPTION: Shows how to create atomic styles using the Panda css function in React, which is different from Stitches as it's only used for atomic styles.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/migration/stitches.md#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { css } from '../styled-system/css'\n\n// definition\nconst styles = css({\n  border: 'solid 1px red',\n  backgroundColor: 'transparent'\n})\n\n// usage\n<button className={styles} />\n```\n\n----------------------------------------\n\nTITLE: Using Tokens with Emotion\nDESCRIPTION: Shows how to integrate tokens with Emotion styled components.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/theming/usage.mdx#2025-04-18_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport styled from '@emotion/styled'\n\nconst Button = styled.button`\n  background: ${token('colors.blue.200')};\n`\n```\n\n----------------------------------------\n\nTITLE: Pattern Definition with Updated JSX Name Property\nDESCRIPTION: Example showing the updated pattern configuration with jsxName property replacing the jsx property.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_64\n\nLANGUAGE: typescript\nCODE:\n```\nconst hstack = definePattern({\n  jsxName: 'HStack',\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Panda Config with Custom Font Tokens\nDESCRIPTION: Shows how to extend the Panda configuration to include custom font tokens.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/guides/fonts.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport default defineConfig({\n  theme: {\n    extend: {\n      tokens: {\n        fonts: {\n          fira: { value: 'var(--font-fira-code), Menlo, monospace' },\n          mona: { value: 'var(--font-mona-sans), sans-serif' }\n        }\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Applying Color Mix Transform to a Background Utility\nDESCRIPTION: Shows how to apply the createColorMixTransform function to create a background utility that supports color mixing.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  utilities: {\n    background: {\n      shorthand: 'bg',\n      className: 'bg',\n      values: 'colors',\n      transform: createColorMixTransform('background'),\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Panda CSS\nDESCRIPTION: Configuration file for Panda CSS defining include/exclude paths and output directory.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/react-router.mdx#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from \"@pandacss/dev\"\n\nexport default defineConfig({\n preflight: true,\n include: [\"./app/**/{**,.client,.server}/**/*.{js,jsx,ts,tsx}\"],\n exclude: [],\n outdir: \"styled-system\",\n})\n```\n\n----------------------------------------\n\nTITLE: Theme JSON Structure (JSON)\nDESCRIPTION: Example of the JSON structure for a theme, including metadata and CSS content.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"primary\",\n  \"id\": \"panda-themes-primary\",\n  \"dataAttr\": \"primary\",\n  \"css\": \"[data-panda-theme=primary] { ... }\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Color Mode Selectors and Adding New Utilities in Panda CSS\nDESCRIPTION: This code block describes changes to color mode selectors, updates to divideX and divideY utilities, and the addition of new spacing and gradient utilities in the Panda CSS preset base package.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/preset-base/CHANGELOG.md#2025-04-18_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n- bcfb5c5: ### Fixed\n\n  - Fix className collisions between utilities by using unique class names per property in the default preset.\n\n  ### Changed\n\n  - **Color Mode Selectors**: Changed the default selectors for `_light` and `_dark` to target parent elements. This\n    ensures consistent behavior with using these conditions to style pseudo elements (like `::before` and `::after`).\n\n  ```diff\n  const conditions = {\n  -  _dark: '&.dark, .dark &',\n  +  _dark: '.dark &',\n  -  _light: '&.light, .light &',\n  +  _light: '.light &',\n  }\n  ```\n\n  - Changed `divideX` and `divideY` now maps to the `borderWidths` token group.\n\n  ### Added\n\n  - **Spacing Utilities**: Add new `spaceX` and `spaceY` utilities for applying margin between elements. Especially\n    useful when applying negative margin to child elements.\n\n  ```tsx\n  <div className={flex({ spaceX: '-1' })}>\n    <div className={circle({ size: '5', bg: 'red' })} />\n    <div className={circle({ size: '5', bg: 'pink' })} />\n  </div>\n  ```\n\n  - Added new `_starting` condition to support the new `@starting-style` at-rule.\n    [Learn more here](https://developer.mozilla.org/en-US/docs/Web/CSS/@starting-style)\n  - **Gradient Position**: Add new `gradientFromPosition` and `gradientToPosition` utilities for controlling the\n    position of the gradient color stops.\n\n  ```tsx\n  <div\n    className={css({\n      bgGradient: 'to-r',\n      // from\n      gradientFrom: 'red',\n      gradientFromPosition: 'top left',\n      // to\n      gradientTo: 'blue',\n      gradientToPosition: 'bottom right',\n    })}\n  />\n  ```\n```\n\n----------------------------------------\n\nTITLE: Defining Global Font Face in Panda Config\nDESCRIPTION: This code snippet demonstrates how to define global font faces in the Panda configuration file. It shows various ways to specify font sources, weights, and styles for custom fonts.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// pandacss.config.js\nexport default defineConfig({\n  globalFontface: {\n    Roboto: {\n      src: 'url(/fonts/roboto.woff2) format(\"woff2\")',\n      fontWeight: '400',\n      fontStyle: 'normal',\n    },\n  },\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// pandacss.config.js\n\nexport default defineConfig({\n  globalFontface: {\n    Roboto: {\n      // multiple src\n      src: ['url(/fonts/roboto.woff2) format(\"woff2\")', 'url(/fonts/roboto.woff) format(\"woff\")'],\n      fontWeight: '400',\n      fontStyle: 'normal',\n    },\n  },\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// pandacss.config.js\n\nexport default defineConfig({\n  globalFontface: {\n    // multiple font weights\n    Roboto: [\n      {\n        src: 'url(/fonts/roboto.woff2) format(\"woff2\")',\n        fontWeight: '400',\n        fontStyle: 'normal',\n      },\n      {\n        src: 'url(/fonts/roboto-bold.woff2) format(\"woff2\")',\n        fontWeight: '700',\n        fontStyle: 'normal',\n      },\n    ],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using Root Color Palette in React Component with Panda CSS\nDESCRIPTION: Example showing how to use the root color palette and its values directly in a React component with Panda CSS. This demonstrates accessing different levels of the color palette hierarchy in component styling.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_96\n\nLANGUAGE: typescript\nCODE:\n```\nimport { css } from '../styled-system/css'\n\nexport const App = () => {\n  return (\n    <button\n      className={css({\n        colorPalette: 'button',\n        color: 'colorPalette.light',\n        backgroundColor: 'colorPalette.dark',\n        _hover: {\n          color: 'colorPalette.light.accent',\n          background: 'colorPalette.light.accent.secondary',\n        },\n      })}\n    >\n      Root color palette\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Height in JSX\nDESCRIPTION: Shows how to set maximum height using both 'maxHeight' and shorthand 'maxH' properties.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/sizing.md#2025-04-18_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ maxHeight: '5' })} />\n<div className={css({ maxH: '5' })} /> // shorthand\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Strict Token Type Safety in TypeScript\nDESCRIPTION: Example showing how the config.strictTokens type-safety has been improved to allow CSS predefined values while throwing errors for invalid values.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\n// config.strictTokens = true\ncss({ display: 'flex' }) // OK, didn't throw\ncss({ display: 'block' }) // OK, didn't throw\ncss({ display: 'abc' }) // ❌ didn't throw even though 'abc' is not a valid value for 'display'\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// config.strictTokens = true\ncss({ display: 'flex' }) // OK, didn't throw\ncss({ display: 'block' }) // OK, didn't throw\ncss({ display: 'abc' }) // ✅ will throw since 'abc' is not a valid value for 'display'\n```\n\n----------------------------------------\n\nTITLE: Styled Element Composition in React\nDESCRIPTION: Example of composing styled elements in React components where styles are correctly merged. This demonstrates how to extend a styled component by inheriting its base styles while overriding specific properties.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/node/CHANGELOG.md#2025-04-18_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nconst Box = styled('div', {\n  base: {\n    background: 'red.light',\n    color: 'white',\n  },\n})\n\nconst ExtendedBox = styled(Box, {\n  base: { background: 'red.dark' },\n})\n\n// <ExtendedBox> will have a background of `red.dark` and a color of `white`\n```\n\n----------------------------------------\n\nTITLE: Vue Styled Factory with Class Merging\nDESCRIPTION: Example of class merging in Vue styled factory. This fix ensures that the class attribute correctly merges with component classes when using the styled factory in Vue.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_105\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { styled } from '../styled-system/jsx'\n\nconst StyledButton = styled('button', {\n  base: {\n    bgColor: 'red.300',\n  },\n})\n</script>\n<template>\n  <StyledButton id=\"test\" class=\"test\">\n    <slot></slot>\n  </StyledButton>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Panda CSS Package.json Configuration\nDESCRIPTION: Shows the package.json structure for a Panda CSS project, including exports and type versions configuration. This enables proper module resolution for the generated files.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/node/README.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"dot-panda\",\n  \"description\": \"...\",\n  \"exports\": {\n    \"./tokens\": {\n      \"import\": \"./generated/tokens/index.mjs\"\n    },\n    \"./css\": {\n      \"import\": \"./generated/css/index.mjs\"\n    }\n  },\n  \"typeVersions\": {\n    \"*\": {\n      \"tokens\": [\"./generated/tokens\"],\n      \"css\": [\"./generated/css\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Stack Pattern with Function Syntax\nDESCRIPTION: The Stack pattern creates a vertical or horizontal stack of elements. This example shows the function approach with gap and padding properties specified.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/patterns.mdx#2025-04-18_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { stack } from '../styled-system/patterns'\n\nfunction App() {\n  return (\n    <div className={stack({ gap: '6', padding: '4' })}>\n      <div>First</div>\n      <div>Second</div>\n      <div>Third</div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing strictTokens Behavior Before and After Update in TypeScript\nDESCRIPTION: This code snippet demonstrates the difference in behavior of `config.strictTokens` between version 0.19.0 and the current version. In v0.19.0, all display property values were strictly checked even without config tokens, while the new version is more lenient for properties without config tokens.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_95\n\nLANGUAGE: typescript\nCODE:\n```\n// config.strictTokens = true\ncss({ display: 'flex' }) // OK, didn't throw\ncss({ display: 'block' }) // OK, didn't throw\ncss({ display: 'abc' }) // ❌ would throw since 'abc' is not part of predefined values of 'display' even thought there is no config token for 'abc'\n```\n\n----------------------------------------\n\nTITLE: Configuring List Style Image Token in Panda\nDESCRIPTION: Configuration setup in panda.config.ts for defining a custom SVG asset token that can be used as a list marker. Shows how to define an asset token named 'star' with an SVG value.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/list.mdx#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst theme = {\n  tokens: {\n    assets: {\n      star: {\n        value: { type: 'svg', value: '<svg>...</svg>' }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking Custom Pattern Components with jsx Property\nDESCRIPTION: Example of a custom component that extends a Panda CSS pattern component, which can be tracked using the jsx property in the configuration.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_120\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Circle } from 'styled-system/jsx'\n\nconst CustomCircle = ({ children, ...props }) => {\n  return <Circle {...props}>{children}</Circle>\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Border Color to Specific Sides in Panda CSS (JSX)\nDESCRIPTION: Shows how to apply border color to specific sides of an element using Panda CSS. It demonstrates setting the primary color for top and left borders.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/border.md#2025-04-18_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ borderTopColor: 'primary' })} />\n<div className={css({ borderLeftColor: 'primary' })} />\n```\n\n----------------------------------------\n\nTITLE: Using 'minimal' JSX Style Props in React Components\nDESCRIPTION: Example of using JSX components with the 'minimal' option enabled, where only the css prop can be used for styling, improving bundle size optimization.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_118\n\nLANGUAGE: jsx\nCODE:\n```\nimport { styled } from 'styled-system/jsx'\n\nconst Example = () => {\n  // only the `css` prop is allowed\n  return <Box css={{ bg: 'red.400', color: 'white' }} />\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Utility with CSS Function in JSX\nDESCRIPTION: Example of using the custom 'br' property in a React component with the css function to generate a className with the appropriate border radius.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/customization/utilities.mdx#2025-04-18_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { css } from '../styled-system/css'\n\nfunction App() {\n  return <div className={css({ br: 'sm' })} />\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Config Conditions in Panda CSS\nDESCRIPTION: Shows how to create config conditions with nested at-rules and selectors in Panda CSS. This allows for more complex conditional styling.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defaultConfig({\n  conditions: {\n    extend: {\n      supportHover: ['@media (hover: hover) and (pointer: fine)', '&:hover'],\n    },\n  },\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { css } from '../styled-system/css'\n\ncss({\n  _supportHover: {\n    color: 'red',\n  },\n})\n```\n\nLANGUAGE: css\nCODE:\n```\n@media (hover: hover) and (pointer: fine) {\n  &:hover {\n    color: red;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Bleed Pattern in React Component\nDESCRIPTION: Demonstrates the usage of the bleed pattern to negate padding applied to a parent container. The example shows applying an inline bleed to match the parent's padding.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/preset-base/CHANGELOG.md#2025-04-18_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nimport { css } from '../styled-system/css'\nimport { bleed } from '../styled-system/patterns'\n\nexport function Page() {\n  return (\n    <div class={css({ px: '6' })}>\n      <div class={bleed({ inline: '6' })}>Welcome</div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Layer Styles in Panda Config\nDESCRIPTION: Demonstrates how to integrate layer styles into the Panda CSS configuration file by extending the theme with defined layer styles.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/theming/layer-styles.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\nimport { layerStyles } from './layer-styles'\n\nexport default defineConfig({\n  theme: {\n    extend: {\n      layerStyles\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Panda CSS in Next.js Component\nDESCRIPTION: Example of using Panda CSS in a Next.js component, demonstrating how to apply styles using the css function.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/nextjs.mdx#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { css } from '../../styled-system/css';\n\nexport default function Home() {\n  return (\n    <div className={css({ fontSize: \"2xl\", fontWeight: 'bold' })}>Hello 🐼!</div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Config Conditions in Panda CSS\nDESCRIPTION: Demonstrates how to create config conditions with nested at-rules and selectors for hover support, showing both configuration and usage.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_78\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defaultConfig({\n  conditions: {\n    extend: {\n      supportHover: ['@media (hover: hover) and (pointer: fine)', '&:hover'],\n    },\n  },\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { css } from '../styled-system/css'\n\ncss({\n  _supportHover: {\n    color: 'red',\n  },\n})\n```\n\nLANGUAGE: css\nCODE:\n```\n@media (hover: hover) and (pointer: fine) {\n  &:hover {\n    color: red;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Static CSS from Presets\nDESCRIPTION: Example of extending static CSS definitions from presets, allowing for sharable, pre-generated styles across projects with the ability to customize which variants are generated.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_71\n\nLANGUAGE: javascript\nCODE:\n```\nconst presetWithStaticCss = definePreset({\n  staticCss: {\n    recipes: {\n      // generate all button styles and variants\n      button: ['*'],\n    },\n  },\n})\n\nexport default defineConfig({\n  presets: [presetWithStaticCss],\n  staticCss: {\n    extend: {\n      recipes: {\n        // extend and pre-generate all sizes for card\n        card: [{ size: ['small', 'medium', 'large'] }],\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Panda CSS with strictTokens and Extended Theme\nDESCRIPTION: Example configuration for Panda CSS using strictTokens and extending the theme with custom colors. This snippet demonstrates how to set up the config file and use the css function with the new strictTokens behavior.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/is-valid-prop/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// panda.config.ts\n\nexport default defineConfig({\n  // ...\n  strictTokens: true,\n  theme: {\n    extend: {\n      colors: {\n        primary: { value: 'blue' },\n      },\n      // borderWidths: {}, // ⚠️ nothing defined here\n    },\n  },\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// app.tsx\ncss({\n  // ❌ before this PR, TS would throw an error as you are supposed to only use Tokens\n  // even thought you don't have any `borderWidths` tokens defined !\n\n  // ✅ after this PR, TS will not throw an error anymore as you don't have any `borderWidths` tokens\n  // if you add one, this will error again (as it's supposed to)\n  borderWidths: '123px',\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Tokens Hook in PandaCSS\nDESCRIPTION: Example showing how to use the new 'tokens:created' hook for customizing token name formatting. This hook is called when the token engine is created and allows adding custom format token names and variables.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/studio/CHANGELOG.md#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  // ...\n  hooks: {\n    'tokens:created': ({ configure }) => {\n      configure({\n        formatTokenName: (path) => '\n      })\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Applying Spacing Utilities in React with Panda CSS (TSX)\nDESCRIPTION: Demonstrates the usage of new spaceX utility for applying margin between elements, particularly useful for negative margins on child elements.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<div className={flex({ spaceX: '-1' })}>\n  <div className={circle({ size: '5', bg: 'red' })} />\n  <div className={circle({ size: '5', bg: 'pink' })} />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using codegen:prepare Hook to Modify Generated Files\nDESCRIPTION: Shows how to use the codegen:prepare hook to modify the generated code files before they are written to disk.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  // ...\n  hooks: {\n    'codegen:prepare': ({ artifacts, changed }) => {\n      // do something with the emitted js/d.ts files\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Panda CSS Extraction Command\nDESCRIPTION: Examples of running the main Panda command to generate CSS, including scanning specific files or folders using glob patterns.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/references/cli.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm panda\n# You can also scan a specific file or folder\n# using the optional glob argument\npnpm panda src/components/Button.tsx\npnpm panda \"./src/components/**\"\n```\n\n----------------------------------------\n\nTITLE: Color Mix Transform Helper Function\nDESCRIPTION: Utility function to create property transforms for color mixing, used internally by PandaCSS.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/color-opacity-modifier.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { PropertyTransform } from '@pandacss/types'\nexport const createColorMixTransform =\n  (prop: string): PropertyTransform =>\n  (value, args) => {\n    const mix = args.utils.colorMix(value)\n    if (mix.invalid) return { [prop]: value }\n    const cssVar = '--mix-' + prop\n    return {\n      [cssVar]: mix.value,\n      [prop]: `var(${cssVar}, ${mix.color})`\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Simplified Utility Transform Using Helper Function\nDESCRIPTION: Example of using the createColorMixTransform helper function to create a background utility with color-mix support.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_85\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  utilities: {\n    background: {\n      shorthand: \"bg\",\n      className: \"bg\",\n      values: \"colors\",\n      transform: createColorMixTransform(\"background\"),\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Property Value Strictness in Panda CSS\nDESCRIPTION: Example of configuring the strictPropertyValues option, which when enabled only allows valid CSS values for properties that have a predefined list of values.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/references/config.md#2025-04-18_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"strictPropertyValues\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PostCSS for Panda CSS\nDESCRIPTION: PostCSS configuration file content to enable Panda CSS plugin in a Next.js project.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/nextjs.mdx#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: {\n    '@pandacss/dev/postcss': {},\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Built-in Flex Pattern in TypeScript\nDESCRIPTION: Configuration example showing how to extend the default flex pattern with custom properties and JSX component mapping.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/customization/patterns.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  patterns: {\n    extend: {\n      // Extend the default `flex` pattern\n      flex: {\n        properties: {\n          // only allow row and column\n          direction: { type: \"enum\", value: [\"row\", \"column\"] },\n          jsx: ['Flex', 'CustomFlex'] // 👈 match the `CustomFlex` component to this pattern\n        },\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Panda CSS with No JSX Style Props\nDESCRIPTION: Example of styling without JSX factory components when jsxStyleProps is set to 'none', requiring the use of className and css function.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/references/config.md#2025-04-18_snippet_27\n\nLANGUAGE: jsx\nCODE:\n```\n<button className={css({ marginTop: '40px' })}>Click me</button>\n```\n\n----------------------------------------\n\nTITLE: Configuring strictTokens Mode in Panda CSS\nDESCRIPTION: Example showing how to configure strictTokens mode which enforces the use of design tokens for properties that have token categories defined, while allowing arbitrary values for properties without defined tokens.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/studio/CHANGELOG.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// panda.config.ts\n\nexport default defineConfig({\n  // ...\n  strictTokens: true,\n  theme: {\n    extend: {\n      colors: {\n        primary: { value: 'blue' },\n      },\n      // borderWidths: {}, // ⚠️ nothing defined here\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using the Bleed Pattern for Layout in React\nDESCRIPTION: Demonstrates the use of the bleed pattern, which negates padding applied to a parent container, allowing child elements to extend beyond their parent's padding.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_108\n\nLANGUAGE: tsx\nCODE:\n```\nimport { css } from '../styled-system/css'\nimport { bleed } from '../styled-system/patterns'\n\nexport function Page() {\n  return (\n    <div class={css({ px: '6' })}>\n      <div class={bleed({ inline: '6' })}>Welcome</div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using CSS Generator with Outfile Flag in Bash\nDESCRIPTION: Example showing how to use the panda cssgen command with the --outfile flag to generate CSS into a specific file\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/node/CHANGELOG.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npanda cssgen --outfile dist/styles.css\n```\n\n----------------------------------------\n\nTITLE: Sample AST JSON Output from Panda Debug\nDESCRIPTION: An example of the Abstract Syntax Tree (AST) JSON output generated by the 'panda debug' command. This output shows the structure and properties of the extracted styles.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/guides/debugging.mdx#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"name\": \"css\",\n    \"type\": \"object\",\n    \"data\": [\n      {\n        \"transitionProperty\": \"all\",\n        \"opacity\": \"0.5\",\n        \"border\": \"1px solid\",\n        \"borderColor\": \"black\",\n        \"color\": \"gray.600\",\n        \"_hover\": {\n          \"color\": \"gray.900\"\n        },\n        \"rounded\": \"md\",\n        \"p\": \"1.5\",\n        \"_dark\": {\n          \"borderColor\": \"rgba(255, 255, 255, 0.1)\",\n          \"color\": \"gray.400\",\n          \"_hover\": {\n            \"color\": \"gray.50\"\n          }\n        }\n      }\n    ],\n    \"kind\": \"CallExpression\",\n    \"line\": 13,\n    \"column\": 9\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Using Color Mix Utility in CSS-in-JS\nDESCRIPTION: Illustrates how to use the color-mix CSS function in Panda CSS utilities for changing color opacity. This example sets a background color with 40% opacity.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/fixture/CHANGELOG.md#2025-04-18_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ncss({\n  bg: 'red.300/40',\n  color: 'white',\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Hash Function in Panda\nDESCRIPTION: Implementation of a custom hash function using the utility:created hook to modify how classnames are hashed when hash configuration is enabled.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/hooks.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  // ...\n  hash: true,\n  hooks: {\n    'utility:created': ({ configure }) => {\n      configure({\n        toHash: (paths, toHash) => {\n          const stringConds = paths.join(':')\n          const splitConds = stringConds.split('_')\n          const hashConds = splitConds.map(toHash)\n          return hashConds.join('_')\n        }\n      })\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Renaming Pattern JSX Properties in Panda CSS\nDESCRIPTION: Shows the breaking change in version 0.9.0 where the 'jsx' property of a pattern was renamed to 'jsxName' for better clarity and consistency.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_132\n\nLANGUAGE: diff\nCODE:\n```\nconst hstack = definePattern({\n-  jsx: 'HStack',\n+  jsxName: 'HStack',\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring CSS Layers\nDESCRIPTION: Adds CSS layers to the main CSS file for proper styling order.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/storybook.mdx#2025-04-18_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n@layer reset, base, tokens, recipes, utilities;\n```\n\n----------------------------------------\n\nTITLE: Using Custom Utility with Styled JSX Components\nDESCRIPTION: Example of using the custom 'br' property directly as a prop on a styled JSX component, which will apply the appropriate border radius styling.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/customization/utilities.mdx#2025-04-18_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { styled } from '../styled-system/jsx'\n\nfunction App() {\n  return <styled.div br=\"sm\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Logical Properties Positioning in Panda CSS\nDESCRIPTION: Shows how to use logical properties for positioning that respects writing mode (LTR/RTL), using insetStart property.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/layout.md#2025-04-18_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ position: 'absolute', insetStart: '0' })} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Token Strictness in Panda CSS\nDESCRIPTION: Example of configuring the strictTokens option, which when enabled only allows token values and prevents custom or raw CSS values for properties with config tokens.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/references/config.md#2025-04-18_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"strictTokens\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Container Query Theme Configuration\nDESCRIPTION: Defining container names and sizes in the theme configuration to support CSS container queries in Panda CSS.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_115\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  // ...\n  theme: {\n    extend: {\n      containerNames: ['sidebar', 'content'],\n      containerSizes: {\n        xs: '40em',\n        sm: '60em',\n        md: '80em',\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Names and Sizes for Container Queries\nDESCRIPTION: Shows how to configure container names and sizes in the theme configuration for use with CSS container queries.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  // ...\n  theme: {\n    extend: {\n      containerNames: ['sidebar', 'content'],\n      containerSizes: {\n        xs: '40em',\n        sm: '60em',\n        md: '80em',\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Supporting Styled Element Composition\nDESCRIPTION: Improves support for composing styled elements together, ensuring proper style merging when one styled element extends another. Includes examples of supported and unsupported composition patterns.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/shared/CHANGELOG.md#2025-04-18_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst Box = styled('div', {\n  base: {\n    background: 'red.light',\n    color: 'white',\n  },\n})\n\nconst ExtendedBox = styled(Box, {\n  base: { background: 'red.dark' },\n})\n\n// <ExtendedBox> will have a background of `red.dark` and a color of `white`\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { button } from '../styled-system/recipes'\n\nconst Button = styled('div', button)\n\n// ❌ This will throw an error\nconst ExtendedButton = styled(Button, {\n  base: { background: 'red.dark' },\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Support for Native CSS Nesting in Template Literal Mode\nDESCRIPTION: Updates the CSS template literal mode to support native CSS nesting without requiring the '&' character for nested selectors. Internally, this still converts selectors like 'p' to '& p', but generates expected CSS output.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/shared/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Before:\ncss`\n  & p {\n    color: red;\n  }\n`\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// After:\ncss`\n  p {\n    color: red;\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Creating a reusable colorMix transform function\nDESCRIPTION: A utility function that creates property transforms for any CSS property that needs to support color mixing with opacity.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_57\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { PropertyTransform } from '@pandacss/types'\n\nexport const createColorMixTransform =\n  (prop: string): PropertyTransform =>\n  (value, args) => {\n    const mix = args.utils.colorMix(value)\n    if (mix.invalid) return { [prop]: value }\n\n    const cssVar = '--mix-' + prop\n\n    return {\n      [cssVar]: mix.value,\n      [prop]: `var(${cssVar}, ${mix.color})`,\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Updating Color Mode Selectors in CSS-in-JS (diff)\nDESCRIPTION: Changes the default selectors for _light and _dark conditions to target parent elements, ensuring consistent behavior with pseudo elements.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\nconst conditions = {\n-  _dark: '&.dark, .dark &',\n+  _dark: '.dark &',\n-  _light: '&.light, .light &',\n+  _light: '.light &',\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Styled Factory Options\nDESCRIPTION: Shows how to use the styled factory's third argument to configure data attributes, default props, and prop forwarding behavior.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_78\n\nLANGUAGE: typescript\nCODE:\n```\nconst Button = styled('button', button, { dataAttr: true })\n\nconst Button = styled('button', button, {\n  defaultProps: {\n    variant: 'secondary',\n    px: '10px',\n  },\n})\n\nconst StyledMotion = styled(\n  motion.div,\n  {},\n  {\n    shouldForwardProp: (prop, variantKeys) =>\n      isValidMotionProp(prop) || (!variantKeys.includes(prop) && !isCssProperty(prop)),\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Dynamic Theme Import and Injection (TypeScript)\nDESCRIPTION: Demonstrates how to dynamically import a theme and inject its styles into the DOM using the styled-system/themes utilities.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getTheme } from '../styled-system/themes'\n\nconst theme = await getTheme('red')\n//    ^? {\n//     name: \"red\";\n//     id: string;\n//     css: string;\n// }\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { injectTheme } from '../styled-system/themes'\n\nconst theme = await getTheme('red')\ninjectTheme(document.documentElement, theme) // this returns the injected style element\n```\n\n----------------------------------------\n\nTITLE: Media Query Conditions in Panda CSS\nDESCRIPTION: Media query conditions for handling different viewport scenarios and user preferences\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/conditional-styles.md#2025-04-18_snippet_33\n\nLANGUAGE: css\nCODE:\n```\n_motionReduce: \"@media (prefers-reduced-motion: reduce)\"\n_dark: \"&.dark, .dark &\"\n_portrait: \"@media (orientation: portrait)\"\n_highContrast: \"@media (forced-colors: active)\"\n```\n\n----------------------------------------\n\nTITLE: Comparing Token Reference Syntax vs Token Function\nDESCRIPTION: Example showing the different approaches for referencing tokens in CSS: the token reference syntax with curly braces and the token function syntax. The token function allows setting fallback values.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/token-dictionary/CHANGELOG.md#2025-04-18_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nconst styles = css({\n  // token reference syntax\n  border: '2px solid {colors.primary}',\n  // token function syntax\n  border: '2px solid token(colors.primary)',\n})\n```\n\n----------------------------------------\n\nTITLE: Generated CSS for Transition Utility\nDESCRIPTION: The CSS output generated by the transition utility, showing the default timing function and duration that are automatically applied when specifying a transition property.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/preset-base/CHANGELOG.md#2025-04-18_snippet_21\n\nLANGUAGE: css\nCODE:\n```\n.transition_background {\n  transition-property: background, background-color;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  transition-duration: 150ms;\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Theme Colors in Panda CSS\nDESCRIPTION: Example of extending the default theme by adding a custom primary color without replacing other default colors.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/extend.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  theme: {\n    extend: {\n      colors: {\n        primary: { value: '#ff0000' }\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Semantic Tokens with Color Opacity\nDESCRIPTION: Example of configuring semantic tokens with color opacity modifiers in dark mode, which previously caused issues.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  theme: {\n    extend: {\n      tokens: {\n        colors: {\n          black: { value: 'black' },\n          white: { value: 'white' },\n        },\n      },\n      semanticTokens: {\n        colors: {\n          fg: {\n            value: {\n              base: '{colors.black/87}',\n              _dark: '{colors.white}', // <- this was causing a weird issue\n            },\n          },\n        },\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradient Position in React with Panda CSS (TSX)\nDESCRIPTION: Shows how to use the new gradientFromPosition and gradientToPosition utilities to control the position of gradient color stops.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<div\n  className={css({\n    bgGradient: 'to-r',\n    // from\n    gradientFrom: 'red',\n    gradientFromPosition: 'top left',\n    // to\n    gradientTo: 'blue',\n    gradientToPosition: 'bottom right',\n  })}\n/>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Config.strictTokens Behavior in TypeScript\nDESCRIPTION: Shows how the config.strictTokens option affects type checking for CSS properties with and without config tokens. Compares behavior in v0.19.0 versus the new version.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_70\n\nLANGUAGE: typescript\nCODE:\n```\n// config.strictTokens = true\ncss({ display: 'flex' }) // OK, didn't throw\ncss({ display: 'block' }) // OK, didn't throw\ncss({ display: 'abc' }) // ❌ would throw since 'abc' is not part of predefined values of 'display' even thought there is no config token for 'abc'\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// config.strictTokens = true\ncss({ display: 'flex' }) // OK, didn't throw\ncss({ display: 'block' }) // OK, didn't throw\ncss({ display: 'abc' }) // ✅ will not throw there is no config token for 'abc'\n```\n\n----------------------------------------\n\nTITLE: Customizing Keyframes in Panda CSS (TypeScript)\nDESCRIPTION: This example demonstrates how to define custom animation keyframes in Panda CSS. It adds 'fadein' and 'fadeout' keyframe animations by specifying opacity changes in the panda.config.ts configuration file.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/customization/theme.mdx#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  theme: {\n    extend: {\n      keyframes: {\n        fadein: {\n          '0%': { opacity: '0' },\n          '100%': { opacity: '1' }\n        },\n        fadeout: {\n          '0%': { opacity: '1' },\n          '100%': { opacity: '0' }\n        }\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using the --minimal flag with panda cssgen\nDESCRIPTION: Demonstrates how to use the newly added '--minimal' flag with the 'panda cssgen' command to skip generating CSS for theme tokens, preflight, keyframes, static and global CSS. This is useful for generating CSS only for specific components or pages.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/node/CHANGELOG.md#2025-04-18_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npanda cssgen \"src/**/pages/*.css\" --minimal --outfile dist/pages.css\n```\n\n----------------------------------------\n\nTITLE: Fixing scrollbarGutter Property in Panda CSS\nDESCRIPTION: This snippet describes a fix for the scrollbarGutter property in the Panda CSS preset base package, clarifying its valid values.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/preset-base/CHANGELOG.md#2025-04-18_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- af9715a: Fix issue where `scrollbarGutter` property incorrectly referenced spacing tokens. The only valid values are\n  `auto`, `stable`, and `both-edges`.\n```\n\n----------------------------------------\n\nTITLE: Defining a Panda Preset in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a Panda preset in your library code. It defines a preset with custom theme tokens, specifically a primary color that references 'blue.500'.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/guides/component-library.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { definePreset } from '@pandacss/dev'\n\nexport const acmePreset = definePreset({\n  theme: {\n    extend: {\n      tokens: {\n        colors: { primary: { value: 'blue.500' } }\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: React component with responsive array syntax using Panda CSS\nDESCRIPTION: Example of using the array syntax for responsive design in Panda CSS, showing how conditional styles are applied using the array notation for different breakpoints.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_82\n\nLANGUAGE: ts\nCODE:\n```\nfunction App() {\n  return <Box py={[2, verticallyCondensed ? 2 : 3, 4]} />\n}\n```\n\n----------------------------------------\n\nTITLE: Using the minimal flag with Panda CSS generator\nDESCRIPTION: Example of using the new `--minimal` flag with the Panda CSS generator to generate only CSS related to specific files, allowing for page-specific CSS splitting.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_80\n\nLANGUAGE: bash\nCODE:\n```\npanda cssgen \"src/**/pages/*.css\" --minimal --outfile dist/pages.css\n```\n\n----------------------------------------\n\nTITLE: Data Active State Styling\nDESCRIPTION: Styling based on data-active attribute using _active modifier to change background color when element is in active state.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/conditional-styles.md#2025-04-18_snippet_22\n\nLANGUAGE: jsx\nCODE:\n```\n<div\n  data-active\n  className={css({\n    _active: { bg: 'gray.500' }\n  })}\n>\n  Hello\n</div>\n```\n\n----------------------------------------\n\nTITLE: Customizing Panda Studio Settings\nDESCRIPTION: Example of customizing the Panda Design System Studio interface with a custom title and logo.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/references/config.md#2025-04-18_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"studio\": {\n    \"logo\": \"🐼\",\n    \"title\": \"Panda\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: First Child Selection in List Items\nDESCRIPTION: Styling the first element in a list using the _first modifier in a map function.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/conditional-styles.md#2025-04-18_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<ul>\n  {items.map(item => (\n    <li key={item} className={css({ _first: { color: 'red.500' } })}>\n      {item}\n    </li>\n  ))}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Applying Horizontal and Vertical Padding in JSX with Chakra UI and Panda\nDESCRIPTION: Illustrates how to apply padding on horizontal and vertical axes using 'paddingX' and 'paddingY' properties, along with their shorthand versions 'px' and 'py'.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/spacing.md#2025-04-18_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ paddingX: '8' })} />\n<div className={css({ px: '8' })} /> // shorthand\n\n<div className={css({ paddingY: '8' })} />\n<div className={css({ py: '8' })} /> // shorthand\n```\n\n----------------------------------------\n\nTITLE: Using Tokens with Styled Components\nDESCRIPTION: Demonstrates token usage within Styled Components library.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/theming/usage.mdx#2025-04-18_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport styled from 'styled-components'\n\nconst Button = styled.button`\n  background: ${token('colors.blue.200')};\n`\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom JSX Extraction in Panda CSS\nDESCRIPTION: Shows how to configure custom JSX extraction using matchTag and matchTagProp functions. This is useful for ignoring specific components or properties during CSS extraction.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  // ...\n  hooks: {\n    'parser:before': ({ configure }) => {\n      configure({\n        // ignore the Select.Content entirely\n        matchTag: (tag) => tag !== 'Select.Content',\n        // ...or specifically ignore the `position` property\n        matchTagProp: (tag, prop) => tag === 'Select.Content' && prop !== 'position',\n      })\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Styles with Breakpoints in Panda CSS (JSX)\nDESCRIPTION: This example demonstrates how to change the font weight of text on large screens using the lg breakpoint in Panda CSS. It applies medium font weight by default and bold font weight at the lg breakpoint and above.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/responsive-design.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<span\n  className={css({\n    fontWeight: 'medium',\n    lg: { fontWeight: 'bold' }\n  })}\n>\n  Text\n</span>\n```\n\n----------------------------------------\n\nTITLE: Installing Panda CSS CLI with Package Managers\nDESCRIPTION: Commands to install Panda CSS CLI using different package managers (pnpm, npm, yarn, bun). Each command installs the dev dependency and initializes Panda.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/cli.mdx#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install -D @pandacss/dev\npnpm panda init\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D @pandacss/dev\nnpx panda init\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D @pandacss/dev\nyarn panda init\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add -D @pandacss/dev\nbun panda init\n```\n\n----------------------------------------\n\nTITLE: Loading Custom Fonts in Next.js\nDESCRIPTION: Demonstrates how to load a local 'Mona Sans' font and a Google Font 'Fira Code' in a Next.js project using the next/font module.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/guides/fonts.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Fira_Code } from 'next/font/google'\nimport localFont from 'next/font/local'\n\nexport const MonaSans = localFont({\n  src: '../fonts/Mona-Sans.woff2',\n  display: 'swap',\n  variable: '--font-mona-sans'\n})\n\nexport const FiraCode = Fira_Code({\n  weight: ['400', '500', '700'],\n  display: 'swap',\n  subsets: ['latin'],\n  variable: '--font-fira-code'\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Easing Tokens in JSX\nDESCRIPTION: Demonstrates how to define easing tokens using both string and array values for cubic bezier functions, typically used in transition-timing-function properties.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/theming/tokens.md#2025-04-18_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nconst theme = {\n  tokens: {\n    easings: {\n      // string value\n      easeIn: { value: 'cubic-bezier(0.4, 0, 0.2, 1)' },\n      // array value\n      easeOut: { value: [0.4, 0, 0.2, 1] }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Visually Hidden Pattern in React Component\nDESCRIPTION: Demonstrates the visually hidden pattern for hiding content visually while keeping it accessible to screen readers. This example shows implementation with a checkbox.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/preset-base/CHANGELOG.md#2025-04-18_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nimport { css } from '../styled-system/css'\nimport { visuallyHidden } from '../styled-system/patterns'\n\nexport function Checkbox() {\n  return (\n    <label>\n      <input type=\"checkbox\" class={visuallyHidden()}>\n        I'm hidde\n      </input>\n      <span>Checkbox</span>\n    </label>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Panda Hooks Interface Definition\nDESCRIPTION: TypeScript interface defining all available hooks in Panda, including their arguments and return types.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/hooks.md#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface PandaHooks {\n  'config:resolved': (\n    args: ConfigResolvedHookArgs\n  ) => MaybeAsyncReturn<void | ConfigResolvedHookArgs['config']>\n  'tokens:created': (args: TokenCreatedHookArgs) => MaybeAsyncReturn\n  'utility:created': (args: UtilityCreatedHookArgs) => MaybeAsyncReturn\n  'context:created': (args: ContextCreatedHookArgs) => void\n  'config:change': (args: ConfigChangeHookArgs) => MaybeAsyncReturn\n  'parser:before': (args: ParserResultBeforeHookArgs) => string | void\n  'parser:after': (args: ParserResultAfterHookArgs) => void\n  'codegen:prepare': (\n    args: CodegenPrepareHookArgs\n  ) => MaybeAsyncReturn<Artifact[]>\n  'codegen:done': (args: CodegenDoneHookArgs) => MaybeAsyncReturn\n  'cssgen:done': (args: CssgenDoneHookArgs) => string | void\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Utility Transform for Color Mixing\nDESCRIPTION: Shows how to create a custom utility transform function for color mixing in Panda CSS configuration. This example creates a background utility that uses the colorMix function.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/fixture/CHANGELOG.md#2025-04-18_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  utilities: {\n    background: {\n      shorthand: 'bg',\n      className: 'bg',\n      values: 'colors',\n      transform(value, args) {\n        const mix = args.utils.colorMix(value)\n        // This can happen if the value format is invalid (e.g. `bg: red.300/invalid` or `bg: red.300//10`)\n        if (mix.invalid) return { background: value }\n\n        return {\n          background: mix.value,\n        }\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using Center Pattern with JSX Syntax\nDESCRIPTION: The Center pattern centers content within a container. This example shows the JSX approach with a background color property.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/patterns.mdx#2025-04-18_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Center } from '../styled-system/jsx'\n\nfunction App() {\n  return (\n    <Center bg=\"red.200\">\n      <div>First</div>\n      <div>Second</div>\n      <div>Third</div>\n    </Center>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing flexBasis Property in Panda CSS\nDESCRIPTION: This snippet describes a fix for the flexBasis property in the Panda CSS preset base package, changing it to use sizing tokens instead of spacing tokens.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/preset-base/CHANGELOG.md#2025-04-18_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n- b7ed157: fix: use sizing tokens for flexBasis instead of spacing tokens\n```\n\n----------------------------------------\n\nTITLE: Setting Up Panda CSS Package and Project Configuration\nDESCRIPTION: Illustrates how to set up a Panda CSS package, update TypeScript configuration, and update .gitignore. This helps with proper integration into a project.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/node/README.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { definePackage, writePackage } from '@pandacss/generators'\n\nconst pkg = setupPackage({\n  name: 'dot-panda',\n  description: '...',\n  dir: 'generated',\n  exports: ['tokens', 'css'],\n})\n\nwritePackage(pkg)\n\nupdateTsConfig({\n  compilerOptions: {\n    paths: {\n      'design-system': ['./.panda'],\n    },\n  },\n})\n\nupdateGitIgnore({ comment: '# Panda', path: '.@pandacss/dev' })\n```\n\n----------------------------------------\n\nTITLE: Simplified Utility Configuration\nDESCRIPTION: Shows how to use the createColorMixTransform helper function to create a simplified utility configuration.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/color-opacity-modifier.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  utilities: {\n    background: {\n      shorthand: \"bg\",\n      className: \"bg\",\n      values: \"colors\",\n      transform: createColorMixTransform(\"background\"),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: PandaCSS Config with Custom Component Tracking\nDESCRIPTION: Configuration setup showing how to track custom components using the jsx property in the patterns configuration.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_77\n\nLANGUAGE: js\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  patterns: {\n    extend: {\n      circle: {\n        jsx: ['CustomCircle'],\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Cascade Layers Definition\nDESCRIPTION: CSS cascade layers configuration required for Panda projects.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/migration/styled-components.md#2025-04-18_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@layer reset, base, tokens, recipes, utilities;\n```\n\n----------------------------------------\n\nTITLE: Creating Presets with definePreset in TypeScript\nDESCRIPTION: Function for preset definitions in Panda CSS. It enables creating shareable configuration presets that can extend the default theme with custom tokens and settings.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/customization/config-functions.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { definePreset } from '@pandacss/dev'\n\nexport const pandaPreset = definePreset({\n  theme: {\n    extend: {\n      tokens: {\n        colors: { primary: { value: 'blue.500' } }\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Panda CSS in a Gatsby Component\nDESCRIPTION: TypeScript React code demonstrating how to use Panda CSS in a Gatsby page component.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/gatsby.mdx#2025-04-18_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React from \"react\"\nimport type { HeadFC, PageProps } from \"gatsby\"\nimport { css } from \"../../styled-system/css\"\n\nconst IndexPage: React.FC<PageProps> = () => {\n  return (\n    <div className={css({ fontSize: \"2xl\", fontWeight: 'bold' })}>Hello 🐼!</div>\n  )\n}\n\nexport default IndexPage\n\nexport const Head: HeadFC = () => <title>Home Page</title>\n```\n\n----------------------------------------\n\nTITLE: Using Property-Based Conditionals with Escape-Hatch Syntax in TypeScript\nDESCRIPTION: Example of using property-based conditionals with the escape-hatch syntax when strictTokens is enabled. This patch fixes typing issues when using [xxx] escape-hatch syntax with property-based conditionals.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_98\n\nLANGUAGE: typescript\nCODE:\n```\ncss({\n  bg: '[#3B00B9]', // ✅ was okay\n  _dark: {\n    // ✅ was okay\n    color: '[#3B00B9]',\n  },\n\n  // ❌ Not okay, will be fixed in this patch\n  color: {\n    _dark: '[#3B00B9]',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Semantic Shadow Tokens in TypeScript\nDESCRIPTION: Example of configuring semantic tokens for composite shadow properties in the Panda CSS configuration file. Shows how to define shadow tokens with references to spacing and color tokens.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// panda.config.ts\n\nexport default defineConfig({\n  theme: {\n    tokens: {\n      // ...\n      shadows: {\n        sm: {\n          value: {\n            offsetX: '{spacing.3}',\n            offsetY: '{spacing.3}',\n            blur: '1rem',\n            spread: '{spacing.3}',\n            color: '{colors.red}',\n          },\n        },\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Generating specific CSS type with panda cssgen\nDESCRIPTION: Shows how to use the 'panda cssgen' command with a specific CSS type parameter to generate only a particular type of CSS (preflight, tokens, static, global, or keyframes). This feature only works when passing an '--outfile' option.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/node/CHANGELOG.md#2025-04-18_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npanda cssgen \"static\" --outfile dist/static.css\n```\n\n----------------------------------------\n\nTITLE: Disabling Shorthand Props in Panda CSS\nDESCRIPTION: Configuration example showing how to disable shorthand props in Panda CSS, introduced in version 0.4.0.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_134\n\nLANGUAGE: js\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  // ...\n  shorthands: false,\n})\n```\n\n----------------------------------------\n\nTITLE: Fixing Global CSS Selector Order Regression\nDESCRIPTION: This example shows a regression with globalCss selector order introduced in v0.26.2. It demonstrates the incorrect CSS generation and the correct implementation that was restored.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_123\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    globalCss: {\n        html: {\n          \".aaa\": {\n            color: \"red.100\",\n            \"& .bbb\": {\n              color: \"red.200\",\n              \"& .ccc\": {\n                color: \"red.300\"\n              }\n            }\n          }\n        },\n    }\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n.aaa html {\n  color: var(--colors-red-100);\n}\n\n.aaa html .bbb {\n  color: var(--colors-red-200);\n}\n\n.aaa html .bbb .ccc {\n  color: var(--colors-red-300);\n}\n```\n\nLANGUAGE: css\nCODE:\n```\nhtml .aaa {\n  color: var(--colors-red-100);\n}\n\nhtml .aaa .bbb {\n  color: var(--colors-red-200);\n}\n\nhtml .aaa .bbb .ccc {\n  color: var(--colors-red-300);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Parts with defineParts in TypeScript\nDESCRIPTION: Function for creating parts definitions in Panda CSS. It enables a component to have multiple parts without needing to split class name bindings, which pairs well with libraries like ZagJs and Ark-UI.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/customization/config-functions.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineParts, definetRecipe } from '@pandacss/dev'\n\nconst parts = defineParts({\n  root: { selector: '& [data-part=\"root\"]' },\n  control: { selector: '& [data-part=\"control\"]' },\n  label: { selector: '& [data-part=\"label\"]' }\n})\n\nexport const checkboxRecipe = defineRecipe({\n  className: 'checkbox',\n  description: 'A checkbox style',\n  base: parts({\n    root: { display: 'flex', alignItems: 'center', gap: '2' },\n    control: { borderWidth: '1px', borderRadius: 'sm' },\n    label: { marginStart: '2' }\n  }),\n  variants: {\n    size: {\n      sm: parts({\n        control: { width: '8', height: '8' },\n        label: { fontSize: 'sm' }\n      }),\n      md: parts({\n        control: { width: '10', height: '10' },\n        label: { fontSize: 'md' }\n      })\n    }\n  },\n  defaultVariants: {\n    size: 'sm'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: TypeScript Error Example: Missing Recipe Exports\nDESCRIPTION: Example of TypeScript errors that occur when recipe interfaces aren't properly exported from the generated recipes directory, showing import errors.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_108\n\nLANGUAGE: typescript\nCODE:\n```\nsrc/ui/avatar.tsx (16:318) \"AvatarRecipe\" is not exported by \"styled-system/recipes/index.d.ts\", imported by \"src/ui/avatar.tsx\".\nsrc/ui/card.tsx (2:164) \"CardRecipe\" is not exported by \"styled-system/recipes/index.d.ts\", imported by \"src/ui/card.tsx\".\nsrc/ui/checkbox.tsx (19:310) \"CheckboxRecipe\" is not exported by \"styled-system/recipes/index.d.ts\", imported by \"src/ui/checkbox.tsx\".\n```\n\n----------------------------------------\n\nTITLE: Installing Panda CSS and Initializing Configuration\nDESCRIPTION: Commands to install Panda CSS and create the panda.config.ts file using pnpm.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/nuxt.mdx#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm install -D @pandacss/dev\npnpm panda init\n```\n\n----------------------------------------\n\nTITLE: Setting Box Shadow with Panda CSS\nDESCRIPTION: Shows how to apply box shadows to elements using Panda's shadow tokens. The example uses the 'lg' shadow token value.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/effects.md#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ boxShadow: 'lg' })} />\n```\n\n----------------------------------------\n\nTITLE: Running Panda Codegen Command\nDESCRIPTION: Commands to generate the pattern JavaScript code after defining custom utilities in the Panda configuration file using different package managers.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/customization/utilities.mdx#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm panda codegen\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm panda codegen\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn panda codegen\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun panda codegen\n```\n\n----------------------------------------\n\nTITLE: Installing Panda CSS and initializing configuration\nDESCRIPTION: This snippet demonstrates how to install Panda CSS and create the initial configuration file using different package managers (pnpm, npm, yarn, bun).\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/angular.mdx#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install -D @pandacss/dev\npnpm panda init\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D @pandacss/dev\nnpx panda init\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D @pandacss/dev\nyarn panda init\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add -D @pandacss/dev\nbun panda init\n```\n\n----------------------------------------\n\nTITLE: Applying Vertical Divide in Panda (JSX)\nDESCRIPTION: This example shows the usage of the divideY property in Panda to apply a vertical divide to elements. The divideY property sets the height of the vertical divider.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/divide.md#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ divideY: '2px' })} />\n```\n\n----------------------------------------\n\nTITLE: Simplified utility transform using colorMix helper\nDESCRIPTION: Example of using the createColorMixTransform helper to create a background utility transform with less code.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_58\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  utilities: {\n    background: {\n      shorthand: \"bg\",\n      className: \"bg\",\n      values: \"colors\",\n      transform: createColorMixTransform(\"background\"),\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Tokens with Default Values in Panda CSS\nDESCRIPTION: Demonstrates how to create a hierarchy of tokens using nesting and the DEFAULT key for default values.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/theming/tokens.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  // ...\n  theme: {\n    semanticTokens: {\n      colors: {\n        bg: {\n          DEFAULT: { value: '{colors.gray.100}' },\n          muted: { value: '{colors.gray.100}' }\n        }\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Logical Properties for Border Color in Panda CSS (JSX)\nDESCRIPTION: Illustrates the use of logical properties for border color in Panda CSS. It shows how to apply a specific color to the inline-start border, which adapts based on the document's writing mode.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/border.md#2025-04-18_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ borderInlineStartColor: 'red.500' })} />\n```\n\n----------------------------------------\n\nTITLE: Default Container Sizes in PandaCSS Preset\nDESCRIPTION: Default container size configurations provided by the @pandacss/preset-panda preset, showing predefined size breakpoints from xs to 8xl.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/conditional-styles.md#2025-04-18_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nexport const containerSizes = {\n  xs: '320px',\n  sm: '384px',\n  md: '448px',\n  lg: '512px',\n  xl: '576px',\n  '2xl': '672px',\n  '3xl': '768px',\n  '4xl': '896px',\n  '5xl': '1024px',\n  '6xl': '1152px',\n  '7xl': '1280px',\n  '8xl': '1440px'\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Panda Hooks in TypeScript\nDESCRIPTION: This snippet shows the structure of the PandaHooks interface, which defines various hooks that can be used to customize Panda's behavior at different stages of processing.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface PandaHooks {\n  'config:resolved': (args: { conf: LoadConfigResult }) => MaybeAsyncReturn\n  'context:created': (args: { ctx: ApiInterface; logger: LoggerInterface }) => void\n  'config:change': (args: { config: UserConfig }) => MaybeAsyncReturn\n  'parser:before': (args: { filePath: string; content: string }) => string | void\n  'parser:after': (args: { filePath: string; result: ParserResultInterface | undefined }) => void\n  'codegen:done': () => MaybeAsyncReturn\n  'cssgen:done': (args: {\n    artifact: 'global' | 'static' | 'reset' | 'tokens' | 'keyframes' | 'styles.css'\n    content: string\n  }) => string | void\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Tokens in Separate Files with defineTokens in TypeScript\nDESCRIPTION: Using defineTokens to create tokens in dedicated files for better organization. This approach allows for modular token definitions that can be imported into the main theme configuration.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/customization/config-functions.md#2025-04-18_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineTokens } from '@pandacss/dev'\n\nexport const colors = defineTokens.colors({\n  primary: { value: '#ff0000' }\n})\n```\n\n----------------------------------------\n\nTITLE: Data Orientation Styling\nDESCRIPTION: Styling based on data-orientation attribute using _horizontal and _vertical modifiers to apply different backgrounds based on orientation.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/conditional-styles.md#2025-04-18_snippet_23\n\nLANGUAGE: jsx\nCODE:\n```\n<div\n  data-orientation=\"horizontal\"\n  className={css({\n    _horizontal: { bg: 'red.500' },\n    _vertical: { bg: 'blue.500' }\n  })}\n>\n  Hello\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Panda-generated CSS Variables\nDESCRIPTION: This snippet demonstrates how to use the CSS variables generated by Panda in a CSS file. It shows importing the generated tokens and applying them to a class.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/overview/why-panda.md#2025-04-18_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n@import '../styled-system/tokens/index.css';\n\n.card {\n  background-color: var(--colors-gray50);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CSS Layers for Panda CSS\nDESCRIPTION: CSS configuration to define layers for Panda CSS in the project's index.css file.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/astro.mdx#2025-04-18_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n@layer reset, base, tokens, recipes, utilities;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Array Values in JSX Factory CSS Property\nDESCRIPTION: This snippet shows how to use array values in the special 'css' property for the JSX factory and JSX patterns, allowing easier merging of styles from multiple sources.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/parser/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Stack, styled } from '../styled-system/jsx'\n\nconst HeroSection = (props) => {\n  return (\n    <Stack css={[{ color: 'blue.300', padding: '4' }, props.css]}>\n      <styled.div css={[{ fontSize: '2xl' }, props.hero]}>Hero Section</styled.div>\n    </Stack>\n  )\n}\n\nconst App = () => {\n  return (\n    <>\n      <HeroSection css={{ backgroundColor: 'yellow.300' }} hero={css.raw({ fontSize: '4xl', color: 'red.300' })} />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring strictTokens Behavior (TypeScript)\nDESCRIPTION: Demonstrates the updated behavior of strictTokens, which now correctly restricts only properties with defined token values.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// panda.config.ts\n\nexport default defineConfig({\n  // ...\n  strictTokens: true,\n  theme: {\n    extend: {\n      colors: {\n        primary: { value: 'blue' },\n      },\n      // borderWidths: {}, // ⚠️ nothing defined here\n    },\n  },\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// app.tsx\ncss({\n  // ❌ before this PR, TS would throw an error as you are supposed to only use Tokens\n  // even thought you don't have any `borderWidths` tokens defined !\n\n  // ✅ after this PR, TS will not throw an error anymore as you don't have any `borderWidths` tokens\n  // if you add one, this will error again (as it's supposed to)\n  borderWidths: '123px',\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Color Utility with Color Mix in TypeScript\nDESCRIPTION: Demonstrates how to create a utility transform function for background color that uses the color-mix CSS function. This allows for color opacity adjustments using the {color}/{opacity} syntax.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/preset-base/CHANGELOG.md#2025-04-18_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  utilities: {\n    background: {\n      shorthand: \"bg\",\n      className: \"bg\",\n      values: \"colors\",\n      transform(value, args) {\n        const mix = args.utils.colorMix(value)\n        // This can happen if the value format is invalid (e.g. `bg: red.300/invalid` or `bg: red.300//10`)\n        if (mix.invalid) return { background: value }\n\n        return {\n          background: mix.value,\n        }\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Preset in PandaCSS Configuration\nDESCRIPTION: Shows how to import and use a custom preset in your panda.config.ts file. This configuration merges your custom preset with the default PandaCSS configuration.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/customization/presets.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// panda.config.ts\nimport { defineConfig } from '@pandacss/dev'\nimport myPreset from './my-preset'\n\nexport default defineConfig({\n  presets: [myPreset]\n})\n```\n\n----------------------------------------\n\nTITLE: TypeScript Integration Example\nDESCRIPTION: Demonstrates TypeScript integration with recipe variants and component props.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/recipes.md#2025-04-18_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react'\nimport type { ButtonVariants } from '../styled-system/recipes'\n\ntype ButtonProps = ButtonVariants & {\n  children: React.ReactNode\n}\n```\n\n----------------------------------------\n\nTITLE: Updated Token Path Syntax in PandaCSS\nDESCRIPTION: Demonstrates the changes in token path syntax for CSS and token variables, showing the difference between old and new formats.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_68\n\nLANGUAGE: diff\nCODE:\n```\n- css({ boxShadow: '10px 10px 10px {colors.$primary}' })\n+ css({ boxShadow: '10px 10px 10px {$colors-primary}' })\n\n- token.var('colors.$primary')\n+ token.var('$colors-black')\n```\n\n----------------------------------------\n\nTITLE: Generating specific CSS type with Panda CLI\nDESCRIPTION: Example of using Panda CSS generator to create CSS for only a specific type (static, preflight, tokens, etc.) and output it to a dedicated file.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_81\n\nLANGUAGE: bash\nCODE:\n```\npanda cssgen \"static\" --outfile dist/static.css\n```\n\n----------------------------------------\n\nTITLE: Installing Panda CSS in Next.js\nDESCRIPTION: Commands to install Panda CSS dependency and initialize it with PostCSS support. The example uses pnpm, but alternatives for npm, yarn, and bun are provided.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/nextjs.mdx#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install -D @pandacss/dev\npnpm panda init --postcss\n```\n\n----------------------------------------\n\nTITLE: Setting Global Border Color in Panda CSS\nDESCRIPTION: Shows how to set a global border color for all elements using Panda CSS configuration.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/writing-styles.md#2025-04-18_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  // ...\n  globalCss: {\n    html: {\n      '--global-color-border': 'colors.gray.400'\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Logfile in Panda CSS CLI Commands\nDESCRIPTION: Shows how to use the '--logfile' flag with Panda CLI commands to stream logs to a specified file for debugging purposes.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_92\n\nLANGUAGE: shell\nCODE:\n```\npanda --logfile ./logs/panda.log\n```\n\n----------------------------------------\n\nTITLE: Installing Styled System Package\nDESCRIPTION: Command to install the @acme-org/styled-system package using pnpm package manager.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/guides/component-library.md#2025-04-18_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @acme-org/styled-system\n```\n\n----------------------------------------\n\nTITLE: Using the JSX Factory in React Components\nDESCRIPTION: Example showing how to use the configured JSX factory in a React component with style properties.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/references/config.md#2025-04-18_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\n<panda.button marginTop=\"40px\">Click me</panda.button>\n```\n\n----------------------------------------\n\nTITLE: Using Panda CSS in a Qwik component\nDESCRIPTION: Example of using Panda CSS in a Qwik component. It demonstrates importing necessary modules and applying CSS styles using the css function.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/qwik.mdx#2025-04-18_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$, Slot } from '@builder.io/qwik'\nimport { routeLoader$ } from '@builder.io/qwik-city'\nimport { css } from 'styled-system/css'\n\nexport const useServerTimeLoader = routeLoader$(() => {\n  return {\n    date: new Date().toISOString(),\n  }\n})\n\nexport default component$(() => {\n  return (\n    <div class={css({ p: '10', bg: 'gray.900', h: 'dvh' })}>\n       <Slot />\n    </div>\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Static CSS for All Recipes in JavaScript\nDESCRIPTION: Demonstrates how to generate static CSS for all recipes and their variants using the defineConfig function.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_59\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  // ...\n  staticCss: {\n    recipes: '*', // ✅ will generate the staticCss for all recipes\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Updating package.json for Panda CSS\nDESCRIPTION: Changes to be made in package.json to add a prepare script for Panda CSS codegen.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/nextjs.mdx#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n+    \"prepare\": \"panda codegen\",\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"next start\",\n    \"lint\": \"next lint\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Token Management and Retrieval in Panda CSS\nDESCRIPTION: Defines a token structure and functions to retrieve token values and CSS variables. This provides a way to access design tokens programmatically.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/node/README.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst tokens = {\n  'colors.red.400': { value: '...', variable: '...' },\n}\n\nconst tokenMap = {\n  colors: [{ group: 'red', key: 'red.400', value: '...' }],\n  fonts: [],\n}\n\nfunction getToken(path) {\n  const { value } = tokens[path] || {}\n  return value\n}\n\nfunction getTokenVar(path) {\n  const { variable } = tokens[path] || {}\n  return variable\n}\n```\n\n----------------------------------------\n\nTITLE: Using Core Tokens in React Component with Panda CSS\nDESCRIPTION: Demonstrates how to use defined tokens in a React component using the css function from Panda CSS.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/theming/tokens.md#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { css } from '../styled-system/css'\n\nfunction App() {\n  return (\n    <p\n      className={css({\n        color: 'primary',\n        fontFamily: 'body'\n      })}\n    >\n      Hello World\n    </p>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Component Tracking with jsx Property\nDESCRIPTION: Configuration example for tracking custom components that extend Panda CSS pattern components using the jsx property in the patterns configuration.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_121\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  patterns: {\n    extend: {\n      circle: {\n        jsx: ['CustomCircle'],\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Applying Border Radius to Specific Sides in Panda CSS (JSX)\nDESCRIPTION: Shows how to apply border radius to specific sides of an element using Panda CSS. It demonstrates both full property names and shorthand syntax for top and left border radius.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/border.md#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ borderTopRadius: 'md' })} />\n<div className={css({ roundedTop: 'md' })} /> // shorthand\n\n<div className={css({ borderLeftRadius: 'md' })} />\n<div className={css({ roundedLeft: 'md' })} /> // shorthand\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Component Tracking with 'jsx' Property\nDESCRIPTION: Configuration example for tracking custom components using the updated 'jsx' property in Panda CSS config, allowing the system to recognize custom wrapper components.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  patterns: {\n    extend: {\n      circle: {\n        jsx: ['CustomCircle'],\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Targeting Components in Stitches\nDESCRIPTION: Shows how to target a React component in styles using Stitches by leveraging the toString() method on components. This approach enables direct component targeting in styles.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/migration/stitches.md#2025-04-18_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nimport { css } from '@stitches/react'\n\nconst Icon = () => (\n  <svg className=\"right-arrow\" ... />\n);\n\n// add a `toString` method\nIcon.toString = () => '.right-arrow';\n\nconst buttonClass = css({\n  [`& ${Icon}`]: {\n    marginLeft: '5px'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Import Sources in React Component\nDESCRIPTION: Demonstration of importing CSS utilities from multiple styled-system sources that have been configured in the importMap.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { css } from '@acme/css'\nimport { css as uiCss } from '@ui-lib/styled-system/css'\nimport { css as appCss } from '@ui-lib/styled-system/css'\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Animations with Panda\nDESCRIPTION: Demonstrates how to define and use keyframe animations in Panda, showing the differences in configuration and usage compared to Stitches.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/migration/stitches.md#2025-04-18_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  theme: {\n    extend: {\n      keyframes: {\n        scaleUp: {\n          '0%': { transform: 'scale(1)' },\n          '100%': { transform: 'scale(1.5)' }\n        }\n      }\n    }\n  }\n})\n\n// usage\nimport { css } from '../styled-system/css'\n\nconst style = css({\n  '&:hover': {\n    animation: 'scaleUp 200ms'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Themes in Panda CSS\nDESCRIPTION: Demonstrates how to define multiple themes with token overrides in the Panda CSS configuration file. It shows the main theme and two alternative theme variants.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/cli/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// panda.config.ts\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  // ...\n  // main theme\n  theme: {\n    extend: {\n      tokens: {\n        colors: {\n          text: { value: 'blue' },\n        },\n      },\n      semanticTokens: {\n        colors: {\n          body: {\n            value: {\n              base: '{colors.blue.600}',\n              _osDark: '{colors.blue.400}',\n            },\n          },\n        },\n      },\n    },\n  },\n  // alternative theme variants\n  themes: {\n    primary: {\n      tokens: {\n        colors: {\n          text: { value: 'red' },\n        },\n      },\n      semanticTokens: {\n        colors: {\n          muted: { value: '{colors.red.200}' },\n          body: {\n            value: {\n              base: '{colors.red.600}',\n              _osDark: '{colors.red.400}',\n            },\n          },\n        },\n      },\n    },\n    secondary: {\n      tokens: {\n        colors: {\n          text: { value: 'blue' },\n        },\n      },\n      semanticTokens: {\n        colors: {\n          muted: { value: '{colors.blue.200}' },\n          body: {\n            value: {\n              base: '{colors.blue.600}',\n              _osDark: '{colors.blue.400}',\n            },\n          },\n        },\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using Panda CSS with Prefix in TSX\nDESCRIPTION: This snippet shows how to use Panda CSS with a configured prefix in a React component.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/references/config.md#2025-04-18_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { css } from '../styled-system/css'\n\nconst App = () => {\n  return <div className={css({ color: 'blue.500' })} />\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JSX Style Props in Panda CSS\nDESCRIPTION: Configuration options for controlling style props in JSX components. Allows setting different levels of style prop support.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_62\n\nLANGUAGE: typescript\nCODE:\n```\nconfig.jsxStyleProps: {\n  // When set to 'all', all style props are allowed\n  // When set to 'minimal', only the `css` prop is allowed\n  // When set to 'none', no style props are allowed\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Fractional Width in JSX\nDESCRIPTION: Shows how to set fractional widths using both standard and shorthand properties. Supports various fractions from thirds to twelfths.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/sizing.md#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ width: '1/2' })} />\n<div className={css({ w: '1/2' })} /> // shorthand\n\n<div className={css({ width: '1/3' })} />\n<div className={css({ w: '1/3' })} /> // shorthand\n```\n\n----------------------------------------\n\nTITLE: Configuring JSX Extraction in Panda\nDESCRIPTION: Shows how to customize JSX extraction in Panda using 'matchTag' and 'matchTagProp' functions. This is useful for handling libraries with properties that look like CSS but should be ignored.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  // ...\n  hooks: {\n    'parser:before': ({ configure }) => {\n      configure({\n        // ignore the Select.Content entirely\n        matchTag: (tag) => tag !== 'Select.Content',\n        // ...or specifically ignore the `position` property\n        matchTagProp: (tag, prop) => tag === 'Select.Content' && prop !== 'position',\n      })\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Styled Element Composition\nDESCRIPTION: Example showing how to compose two styled elements together and how the styles are merged correctly.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\nconst Box = styled('div', {\n  base: {\n    background: 'red.light',\n    color: 'white',\n  },\n})\n\nconst ExtendedBox = styled(Box, {\n  base: { background: 'red.dark' },\n})\n\n// <ExtendedBox> will have a background of `red.dark` and a color of `white`\n```\n\n----------------------------------------\n\nTITLE: Defining Text Styles in Panda CSS\nDESCRIPTION: Shows how to define text styles using the defineTextStyles function from Panda CSS. Creates a body text style with specific typography properties like font family, weight, size, and other text-related CSS properties.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/theming/text-styles.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineTextStyles } from '@pandacss/dev'\n\nexport const textStyles = defineTextStyles({\n  body: {\n    description: 'The body text style - used in paragraphs',\n    value: {\n      fontFamily: 'Inter',\n      fontWeight: '500',\n      fontSize: '16px',\n      lineHeight: '24px',\n      letterSpacing: '0',\n      textDecoration: 'None',\n      textTransform: 'None'\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: SplitCssProps Utility Component Example\nDESCRIPTION: Example of using the splitCssProps utility to separate CSS properties from other props\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_79\n\nLANGUAGE: tsx\nCODE:\n```\nimport { splitCssProps, styled } from '../styled-system/jsx'\nimport type { HTMLStyledProps } from '../styled-system/types'\n\nfunction SplitComponent({ children, ...props }: HTMLStyledProps<'div'>) {\n  const [cssProps, restProps] = splitCssProps(props)\n  return (\n    <styled.div {...restProps} className={css({ display: 'flex', height: '20', width: '20' }, cssProps)}>\n      {children}\n    </styled.div>\n  )\n}\n\n// Usage\n\nfunction App() {\n  return <SplitComponent margin=\"2\">Click me</SplitComponent>\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Variant Props with TypeScript\nDESCRIPTION: Demonstrates how to extract variant props from styled components using the StyledVariantProps type utility.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_76\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StyledVariantProps } from '../styled-system/jsx'\n\nconst Button = styled('button', {\n  base: { color: 'black' },\n  variants: {\n    state: {\n      error: { color: 'red' },\n      success: { color: 'green' },\n    },\n  },\n})\n\ntype ButtonVariantProps = StyledVariantProps<typeof Button>\n```\n\n----------------------------------------\n\nTITLE: Configuring Cursor Tokens in JavaScript\nDESCRIPTION: Demonstrates how to define cursor tokens for different interaction states and custom cursors.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/theming/tokens.md#2025-04-18_snippet_15\n\nLANGUAGE: js\nCODE:\n```\nconst theme = {\n  tokens: {\n    cursor: {\n      click: { value: 'pointer' },\n      disabled: { value: 'not-allowed' },\n      // custom value\n      custom: { value: 'url(cursor.svg), auto' }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using tokens:created Hook for Custom Token Formatting\nDESCRIPTION: Shows how to use the tokens:created hook to customize token name formatting, which is useful when migrating from other CSS-in-JS libraries like Stitches.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  // ...\n  hooks: {\n    'tokens:created': ({ configure }) => {\n      configure({\n        formatTokenName: (path) => '$' + path.join('-'),\n      })\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Example Panda CSS Usage\nDESCRIPTION: Sample route component demonstrating Panda CSS styling implementation\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/remix.mdx#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { MetaFunction } from \"@remix-run/node\";\nimport { css } from \"styled-system/css\";\n\nexport const meta: MetaFunction = () => {\n  return [\n    { title: \"New Remix App\" },\n    { name: \"description\", content: \"Welcome to Remix!\" },\n  ];\n};\n\nexport default function Index() {\n  return (\n    <div className={css({ fontSize: \"2xl\", fontWeight: 'bold' })}>Hello 🐼!</div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Theme Definitions in Panda CSS\nDESCRIPTION: Example showing how to define main theme and alternative theme variants in Panda CSS configuration. Demonstrates setting up tokens, semantic tokens and theme variations.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// panda.config.ts\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  // ...\n  // main theme\n  theme: {\n    extend: {\n      tokens: {\n        colors: {\n          text: { value: 'blue' },\n        },\n      },\n      semanticTokens: {\n        colors: {\n          body: {\n            value: {\n              base: '{colors.blue.600}',\n              _osDark: '{colors.blue.400}',\n            },\n          },\n        },\n      },\n    },\n  },\n  // alternative theme variants\n  themes: {\n    primary: {\n      tokens: {\n        colors: {\n          text: { value: 'red' },\n        },\n      },\n      semanticTokens: {\n        colors: {\n          muted: { value: '{colors.red.200}' },\n          body: {\n            value: {\n              base: '{colors.red.600}',\n              _osDark: '{colors.red.400}',\n            },\n          },\n        },\n      },\n    },\n    secondary: {\n      tokens: {\n        colors: {\n          text: { value: 'blue' },\n        },\n      },\n      semanticTokens: {\n        colors: {\n          muted: { value: '{colors.blue.200}' },\n          body: {\n            value: {\n              base: '{colors.blue.600}',\n              _osDark: '{colors.blue.400}',\n            },\n          },\n        },\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Aspect Ratio Tokens in Panda Config\nDESCRIPTION: Example of adding aspect ratio tokens to the Panda CSS configuration. This demonstrates how to extend the theme with custom aspect ratio values.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/preset-panda/CHANGELOG.md#2025-04-18_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nexport default defineConfig({\n  // ...\n  theme: {\n    extend: {\n      // add aspect ratio tokens\n      tokens: {\n        aspectRatios: {\n          '1:1': '1',\n          '16:9': '16/9',\n        },\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring JSX Framework Support in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure the jsxFramework option to enable extracting JSX components in Panda. Setting it to any string will enable JSX extraction without generating artifacts.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n// Example configuration\n{\n  jsxFramework: \"custom\" // Set to any string to enable JSX extraction\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Border Radius in Panda CSS (JSX)\nDESCRIPTION: Demonstrates how to apply border radius to all sides of an element using Panda CSS utilities. It shows both the standard and shorthand syntax for applying medium border radius.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/border.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ borderRadius: 'md' })} />\n<div className={css({ rounded: 'md' })} /> // shorthand\n```\n\n----------------------------------------\n\nTITLE: Configuring Pattern Default Values in TypeScript\nDESCRIPTION: This example demonstrates how to define a new 'hstack' pattern with default values and custom properties in the Panda configuration.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\ndefineConfig({\n  patterns: {\n    hstack: {\n      properties: {\n        justify: { type: 'property', value: 'justifyContent' },\n        gap: { type: 'property', value: 'gap' },\n      },\n      defaultValues: { gap: '40px' },\n      transform(props) {\n        const { justify, gap, ...rest } = props\n        return {\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: justify,\n          gap,\n          ...rest,\n        }\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Panda CSS Configuration\nDESCRIPTION: Configuration file setup for Panda CSS including content paths and output directory settings.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/vue.mdx#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from \"@pandacss/dev\"\n\nexport default defineConfig({\n preflight: true,\n\n include: ['./src/**/*.{js,jsx,ts,tsx,vue}'],\n\n exclude: [],\n\n outdir: \"styled-system\",\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring logfile Option in PostCSS Plugin\nDESCRIPTION: Demonstrates how to configure the logfile option in the Panda PostCSS plugin to stream logs to a specified file for debugging.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: {\n    '@pandacss/dev/postcss': {\n      logfile: './logs/panda.log',\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Importing Themes in Panda CSS\nDESCRIPTION: Example of how to dynamically import a theme using its name in Panda CSS using the `getTheme` function from the styled-system/themes entrypoint.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/token-dictionary/CHANGELOG.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getTheme } from '../styled-system/themes'\n\nconst theme = await getTheme('red')\n//    ^? {\n//     name: \"red\";\n//     id: string;\n//     css: string;\n// }\n```\n\n----------------------------------------\n\nTITLE: Deprecating a Pattern in PandaCSS Configuration\nDESCRIPTION: Shows how to mark a pattern as deprecated by setting the 'deprecated' property to true in the pattern definition. The example demonstrates deprecating a pattern named 'customStack'.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/customization/deprecations.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  patterns: {\n    customStack: {\n      deprecated: true\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Corrected CSS Generation from GlobalCss Selector Fix\nDESCRIPTION: Example showing the correctly generated CSS output after fixing the regression in globalCss selector ordering. This represents the expected output after the patch.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_69\n\nLANGUAGE: css\nCODE:\n```\nhtml .aaa {\n  color: var(--colors-red-100);\n}\n\nhtml .aaa .bbb {\n  color: var(--colors-red-200);\n}\n\nhtml .aaa .bbb .ccc {\n  color: var(--colors-red-300);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Cursor Tokens in React Component\nDESCRIPTION: This example shows how to use the defined cursor tokens in a React component. It applies the 'button' cursor token to a button element using the css function.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<button className={css({ cursor: 'button' })}>Click me</button>\n```\n\n----------------------------------------\n\nTITLE: Generated CSS for Pregenerated Themes\nDESCRIPTION: Example of the CSS output generated for pregenerated themes, including root variables and theme-specific overrides.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/cli/CHANGELOG.md#2025-04-18_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@layer tokens {\n  :where(:root, :host) {\n    --colors-text: blue;\n    --colors-body: var(--colors-blue-600);\n  }\n\n  [data-panda-theme='primary'] {\n    --colors-text: red;\n    --colors-muted: var(--colors-red-200);\n    --colors-body: var(--colors-red-600);\n  }\n\n  @media (prefers-color-scheme: dark) {\n    :where(:root, :host) {\n      --colors-body: var(--colors-blue-400);\n    }\n\n    [data-panda-theme='primary'] {\n      --colors-body: var(--colors-red-400);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies Option in Panda Config (TypeScript)\nDESCRIPTION: Demonstrates how to set the 'dependencies' option in panda.config.ts to specify files that should trigger a context reload on change. This can be used as a workaround for edge cases where file changes are not automatically detected.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/node/CHANGELOG.md#2025-04-18_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  // ...\n  dependencies: ['path/to/files/**.ts'],\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Config Transformations with utils in config:resolved Hook\nDESCRIPTION: Demonstrates how to use the utils functions in the config:resolved hook to easily apply transformations after all presets have been merged, such as removing specific patterns from a preset.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  // ...\n  hooks: {\n    'config:resolved': ({ config, utils }) => {\n      return utils.omit(config, ['patterns.stack'])\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Panda CSS for Angular project structure\nDESCRIPTION: This snippet shows how to configure the panda.config.ts file to include Angular component paths and set the output directory for the CSS system.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/angular.mdx#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from \"@pandacss/dev\"\n\nexport default defineConfig({\n preflight: true,\n include: ['./src/**/*.{js,jsx,ts,tsx}'],\n exclude: [],\n outdir: \"styled-system\",\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Panda Separator in JSON\nDESCRIPTION: This snippet shows how to set the separator for generated CSS classes in Panda configuration.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/references/config.md#2025-04-18_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"separator\": \"_\"\n}\n```\n\n----------------------------------------\n\nTITLE: Fixed Grid Pattern Token Interpretation in JSX\nDESCRIPTION: Example showing the corrected behavior where minChildWidth is now properly interpreted as a token value in the grid pattern.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/studio/CHANGELOG.md#2025-04-18_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n<div className={grid({ minChildWidth: '80px', gap: 8 })} />\n// ✅ grid-template-columns: repeat(auto-fit, minmax(80px, 1fr))\n\n<div className={grid({ minChildWidth: '20', gap: 8 })} />\n// ✅ grid-template-columns: repeat(auto-fit, minmax(var(--sizes-20, 20), 1fr))\n//                                                  ^^^^^^^^^^^^^^^^^^^\n```\n\n----------------------------------------\n\nTITLE: Fixing Utility Configuration with Shorthand in Panda CSS\nDESCRIPTION: Example showing how to properly configure a utility with a shorthand in Panda CSS. This demonstrates how to set up colored borders with shorthand syntax that was previously generating incorrect CSS.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\nutilities: {\n  extend: {\n    coloredBorder: {\n      shorthand: 'cb', // no classname, returns incorrect css\n      values: ['red', 'green', 'blue'],\n      transform(value) {\n        return {\n          border: `1px solid ${value}`,\n        };\n      },\n    },\n  },\n},\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration Update\nDESCRIPTION: TSConfig update to include styled-system directory for proper IDE autocomplete.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/preact.mdx#2025-04-18_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"include\":  [\"src\", \"styled-system\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Static CSS Generation for Recipes in TypeScript\nDESCRIPTION: Demonstrates how to configure static CSS generation for recipes using the config.staticCss option. Shows the difference between the old and new behavior of the [*] rule.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_72\n\nLANGUAGE: typescript\nCODE:\n```\nconst card = defineRecipe({\n  className: 'card',\n  base: { color: 'white' },\n  variants: {\n    size: {\n      small: { fontSize: '14px' },\n      large: { fontSize: '18px' },\n    },\n    visual: {\n      primary: { backgroundColor: 'blue' },\n      secondary: { backgroundColor: 'gray' },\n    },\n  },\n})\n\nexport default defineConfig({\n  // ...\n  staticCss: {\n    recipes: {\n      card: ['*'], // this\n\n      // was equivalent to:\n      card: [\n        // notice how `responsive: true` was implicitly added\n        { size: ['*'], responsive: true },\n        { visual: ['*'], responsive: true },\n      ],\n\n      //   will now correctly be equivalent to:\n      card: [{ size: ['*'] }, { visual: ['*'] }],\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using Styled Factory with Default Props\nDESCRIPTION: Example showing how to use the styled factory with defaultProps to set default variant values and style props without creating wrapper components.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/studio/CHANGELOG.md#2025-04-18_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nimport { styled } from '../styled-system/jsx'\nimport { button } from '../styled-system/recipes'\n\nconst Button = styled('button', button, {\n  defaultProps: {\n    variant: 'secondary',\n    px: '10px',\n  },\n})\n\nconst App = () => <Button>Button</Button>\n// Will render something like <button class=\"btn btn--variant_secondary px_10px\">Button</button>\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Color Palettes in Theme Configuration\nDESCRIPTION: Example of defining deeply nested color palettes in the theme configuration. This structure allows for organizing colors into categories, variants, and states.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/token-dictionary/CHANGELOG.md#2025-04-18_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nconst theme = {\n  extend: {\n    semanticTokens: {\n      colors: {\n        button: {\n          dark: {\n            value: 'navy',\n          },\n          light: {\n            DEFAULT: {\n              value: 'skyblue',\n            },\n            accent: {\n              DEFAULT: {\n                value: 'cyan',\n              },\n              secondary: {\n                value: 'blue',\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum Height in JSX\nDESCRIPTION: Demonstrates setting minimum height using both 'minHeight' and shorthand 'minH' properties.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/sizing.md#2025-04-18_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ minHeight: '5' })} />\n<div className={css({ minH: '5' })} /> // shorthand\n```\n\n----------------------------------------\n\nTITLE: Using Style-Override-Friendly Components in TSX\nDESCRIPTION: Shows how to use a component designed with style override support, applying custom styles that will be correctly merged.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_113\n\nLANGUAGE: tsx\nCODE:\n```\nimport { css } from '../../styled-system/css'\nimport { Button, Thingy } from './Button'\n\nexport default function Page() {\n  return (\n    <Button css={{ color: 'pink', _hover: { color: 'red' } }}>\n      will result in `class=\"d_flex items_center text_pink hover:text_red\"`\n    </Button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Tokens in Media Queries with Reference Syntax\nDESCRIPTION: Demonstrates using token reference syntax in media queries using curly braces notation.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/theming/usage.mdx#2025-04-18_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { css } from '../styled-system/css'\n\nconst className = css({\n  '@media screen and (min-width: {sizes.4xl})': {\n    color: 'green.400'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Container Query Theme Configuration\nDESCRIPTION: Example of defining container names and sizes in theme configuration for improved CSS container query support.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_87\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  // ...\n  theme: {\n    extend: {\n      containerNames: ['sidebar', 'content'],\n      containerSizes: {\n        xs: '40em',\n        sm: '60em',\n        md: '80em',\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Panda with Template Literal Syntax\nDESCRIPTION: Command to initialize a Panda project with template literal syntax for React applications.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/migration/styled-components.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npanda init -p --syntax template-literal --jsx-framework react\n```\n\n----------------------------------------\n\nTITLE: Defining Gradient Tokens in Panda Theme\nDESCRIPTION: Configuration example showing how to define gradient tokens in the theme, including both string and composite value formats.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/background.md#2025-04-18_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nconst theme = {\n  tokens: {\n    gradients: {\n      // string value\n      simple: { value: 'linear-gradient(to right, red, blue)' },\n      // composite value\n      primary: {\n        value: {\n          type: 'linear',\n          placement: 'to right',\n          stops: ['red', 'blue']\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Conditions in Panda CSS Config\nDESCRIPTION: Demonstrates how to create config conditions with nested at-rules and selectors, allowing for more complex conditional styling.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/config/CHANGELOG.md#2025-04-18_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defaultConfig({\n  conditions: {\n    extend: {\n      supportHover: ['@media (hover: hover) and (pointer: fine)', '&:hover'],\n    },\n  },\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { css } from '../styled-system/css'\n\ncss({\n  _supportHover: {\n    color: 'red',\n  },\n})\n```\n\nLANGUAGE: css\nCODE:\n```\n@media (hover: hover) and (pointer: fine) {\n  &:hover {\n    color: red;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting JSX Factory Name in Panda CSS\nDESCRIPTION: Example of defining the JSX factory name that will be used for generated elements. Includes an example of how it would be used in code.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/references/config.md#2025-04-18_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsxFactory\": \"panda\"\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Opacity with Panda CSS\nDESCRIPTION: Demonstrates how to set opacity on an element using Panda CSS utility. The opacity property accepts values between 0 and 1.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/effects.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ opacity: 0.5 })} />\n```\n\n----------------------------------------\n\nTITLE: Setting Grid Template Rows in JSX with Panda\nDESCRIPTION: Shows how to define grid rows using Panda's gridTemplateRows property. The example creates three equally-sized rows using the repeat and minmax functions.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/flex-and-grid.md#2025-04-18_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ gridTemplateRows: 'repeat(3, minmax(0, 1fr))' })} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Panda with Import Map\nDESCRIPTION: This configuration sets up Panda CSS with an importMap option pointing to the styled-system package. This tells Panda which imports should be treated as part of the styled-system.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/guides/component-library.md#2025-04-18_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  //...\n  importMap: '@acme-org/styled-system',\n  outdir: 'styled-system'\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum Width in JSX\nDESCRIPTION: Shows how to set minimum width using both 'minWidth' and shorthand 'minW' properties.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/sizing.md#2025-04-18_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ minWidth: '5' })} />\n<div className={css({ minW: '5' })} /> // shorthand\n```\n\n----------------------------------------\n\nTITLE: Setting Relative Height in JSX\nDESCRIPTION: Demonstrates using modern relative height values (dvh, svh, lvh) with both standard and shorthand properties.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/sizing.md#2025-04-18_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ height: 'dvh' })} />\n<div className={css({ h: 'dvh' })} /> // shorthand\n```\n\n----------------------------------------\n\nTITLE: Generated CSS for Semantic Token Color Opacity in Panda CSS\nDESCRIPTION: Example of the CSS generated for semantic tokens with color opacity modifiers in Panda CSS, showing how color-mix is used to implement opacity.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/token-dictionary/CHANGELOG.md#2025-04-18_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n@layer tokens {\n  :where(:root, :host) {\n    --colors-blue-500: blue;\n    --colors-green-500: green;\n    --opacity-half: 0.5;\n    --colors-secondary: red;\n  }\n\n  .light {\n    --colors-secondary: color-mix(in srgb, var(--colors-blue-500) 32%, transparent);\n  }\n\n  .dark {\n    --colors-secondary: color-mix(in srgb, var(--colors-green-500) 50%, transparent);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up CSS Layers\nDESCRIPTION: CSS layer configuration for proper cascade layering in Panda CSS.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/preact.mdx#2025-04-18_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n@layer reset, base, tokens, recipes, utilities;\n```\n\n----------------------------------------\n\nTITLE: Defining a Pattern with Default Values in Configuration\nDESCRIPTION: Configuration example for creating a horizontal stack pattern (hstack) with custom properties and default values. This demonstrates how to define layout patterns with predefined behaviors.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\ndefineConfig({\n  patterns: {\n    hstack: {\n      properties: {\n        justify: { type: 'property', value: 'justifyContent' },\n        gap: { type: 'property', value: 'gap' },\n      },\n      // you can also use a token like '10'\n      defaultValues: { gap: '40px' },\n      transform(props) {\n        const { justify, gap, ...rest } = props\n        return {\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: justify,\n          gap,\n          ...rest,\n        }\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using Panda CSS in Svelte Component\nDESCRIPTION: Example of using Panda CSS in a Svelte component file.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/svelte.mdx#2025-04-18_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<script>\n\timport { css } from 'styled-system/css';\n</script>\n\n<div\n\tclass={css({\n\t\tfontSize: '2xl',\n\t\tfontWeight: 'bold'\n\t})}\n>\n\tHello 🐼!\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite with Panda CSS\nDESCRIPTION: Vite configuration file showing PostCSS setup with Panda CSS.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/react-router.mdx#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { reactRouter } from \"@react-router/dev/vite\";\nimport autoprefixer from \"autoprefixer\";\nimport pandacss from \"@pandacss/dev/postcss\";\nimport { defineConfig } from \"vite\";\nimport tsconfigPaths from \"vite-tsconfig-paths\";\n\nexport default defineConfig({\n  css: {\n    postcss: {\n      plugins: [pandacss, autoprefixer],\n    },\n  },\n  plugins: [reactRouter(), tsconfigPaths()],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Powerful Configuration Hooks in Panda CSS\nDESCRIPTION: Comprehensive TypeScript interface definition for Panda hooks that allow customizing behavior at various stages of processing. These hooks enable advanced customization of config resolution, parsing, code generation, and CSS output.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface PandaHooks {\n  /**\n   * Called when the config is resolved, after all the presets are loaded and merged.\n   * This is the first hook called, you can use it to tweak the config before the context is created.\n   */\n  'config:resolved': (args: { conf: LoadConfigResult }) => MaybeAsyncReturn\n  /**\n   * Called when the Panda context has been created and the API is ready to be used.\n   */\n  'context:created': (args: { ctx: ApiInterface; logger: LoggerInterface }) => void\n  /**\n   * Called when the config file or one of its dependencies (imports) has changed.\n   */\n  'config:change': (args: { config: UserConfig }) => MaybeAsyncReturn\n  /**\n   * Called after reading the file content but before parsing it.\n   * You can use this hook to transform the file content to a tsx-friendly syntax so that Panda's parser can parse it.\n   * You can also use this hook to parse the file's content on your side using a custom parser, in this case you don't have to return anything.\n   */\n  'parser:before': (args: { filePath: string; content: string }) => string | void\n  /**\n   * Called after the file styles are extracted and processed into the resulting ParserResult object.\n   * You can also use this hook to add your own extraction results from your custom parser to the ParserResult object.\n   */\n  'parser:after': (args: { filePath: string; result: ParserResultInterface | undefined }) => void\n  /**\n   * Called after the codegen is completed\n   */\n  'codegen:done': () => MaybeAsyncReturn\n  /**\n   * Called right before adding the design-system CSS (global, static, preflight, tokens, keyframes) to the final CSS\n   * Called right before writing/injecting the final CSS (styles.css) that contains the design-system CSS and the parser CSS\n   * You can use it to tweak the CSS content before it's written to disk or injected through the postcss plugin.\n   */\n  'cssgen:done': (args: {\n    artifact: 'global' | 'static' | 'reset' | 'tokens' | 'keyframes' | 'styles.css'\n    content: string\n  }) => string | void\n}\n```\n\n----------------------------------------\n\nTITLE: Top/Left Positioning in Panda CSS\nDESCRIPTION: Demonstrates absolute positioning using top and left properties, which can reference the spacing token category.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/layout.md#2025-04-18_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ position: 'absolute', top: '0', left: '0' })} />\n```\n\n----------------------------------------\n\nTITLE: Creating a Theme Contract in Panda CSS\nDESCRIPTION: Shows how to create a theme contract to ensure all themes have the same structure, using the defineThemeContract function.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/cli/CHANGELOG.md#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineThemeContract } from '@pandacss/dev'\n\nconst defineTheme = defineThemeContract({\n  tokens: {\n    colors: {\n      red: { value: '' }, // theme implementations must have a red color\n    },\n  },\n})\n\ndefineTheme({\n  selector: '.theme-secondary',\n  tokens: {\n    colors: {\n      // ^^^^   Property 'red' is missing in type '{}' but required in type '{ red: { value: string; }; }'\n      //\n      // fixed with\n      // red: { value: 'red' },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Fixing Base Property in CSS Function for JSX\nDESCRIPTION: Demonstrates a fix for the 'base' property within the css function in JSX, which previously didn't work.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_62\n\nLANGUAGE: jsx\nCODE:\n```\ncss({\n  // This didn't work, but now it does\n  base: { color: 'blue' },\n})\n```\n\n----------------------------------------\n\nTITLE: Smart Class Merging with cx Function\nDESCRIPTION: Demonstrates the improved `cx` function that now merges and deduplicates styles, resulting in more optimized class names.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_107\n\nLANGUAGE: tsx\nCODE:\n```\nimport { css, cx } from '../styled-system/css'\n\nexport function Page() {\n  return (\n    <div class={cx(css({ mx: '3', paddingTop: '4' }), css({ mx: '10', pt: '6' }))}>Will result in \"mx_10 pt_6\"</div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Generated CSS for container queries\nDESCRIPTION: The CSS output generated for container queries, showing the container type declaration and the media query for the specified container size.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_62\n\nLANGUAGE: css\nCODE:\n```\n.cq-type_inline-size {\n  container-type: inline-size;\n}\n\n@container (min-width: 60em) {\n  .\\@\\/sm\\:fs_md {\n    container-type: inline-size;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Nested Semantic Virtual Colors in Panda CSS\nDESCRIPTION: Shows how to use nested semantic virtual colors in a React component with Panda CSS. This example uses a deeply nested color palette property.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/virtual-color.md#2025-04-18_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { css } from '../styled-system/css'\n\nexport const App = () => {\n  return (\n    <button\n      className={css({\n        colorPalette: 'button.light.accent',\n        color: 'colorPalette.secondary'\n      })}\n    >\n      Nested color palette leaf\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Deep Nested Color Palettes in JavaScript\nDESCRIPTION: Demonstrates how to define hierarchical color palettes using semantic tokens. The example shows organizing button colors into categories with variants and states.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/token-dictionary/CHANGELOG.md#2025-04-18_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst theme = {\n  extend: {\n    semanticTokens: {\n      colors: {\n        button: {\n          dark: {\n            value: 'navy',\n          },\n          light: {\n            DEFAULT: {\n              value: 'skyblue',\n            },\n            accent: {\n              DEFAULT: {\n                value: 'cyan',\n              },\n              secondary: {\n                value: 'blue',\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Width in JSX\nDESCRIPTION: Demonstrates setting maximum width using both 'maxWidth' and shorthand 'maxW' properties.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/sizing.md#2025-04-18_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ maxWidth: '5' })} />\n<div className={css({ maxW: '5' })} /> // shorthand\n```\n\n----------------------------------------\n\nTITLE: Using Panda CSS with JSX components\nDESCRIPTION: Shows how to use Panda's styled function with JSX components, allowing developers to apply styled system properties to React components.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/qwik-ts/public/robots.txt#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { styled } from \"../styled-system/jsx\"\n\n// You can also style components\nconst Card = styled('div', {\n  base: {\n    rounded: 'xl',\n    borderWidth: '1px',\n    p: '6',\n    // ...\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Cursor Utility Configuration in Panda CSS\nDESCRIPTION: This snippet shows the addition of a cursor utility configuration to the Panda CSS preset base package.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/preset-base/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- 00aa868: Add cursor utility config\n```\n\n----------------------------------------\n\nTITLE: Creating Page Links in Markdown Using Relative File Paths\nDESCRIPTION: Example showing how to create links in Markdown using relative file paths. This approach references pages by their file path.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/docusaurus-ts/docs/tutorial-basics/markdown-features.mdx#2025-04-18_snippet_2\n\nLANGUAGE: md\nCODE:\n```\nLet's see how to [Create a page](./create-a-page.md).\n```\n\n----------------------------------------\n\nTITLE: Setting Table Border Spacing in Panda CSS\nDESCRIPTION: Demonstrates how to control the overall border spacing between table cells using Panda's css utility. The spacing value is set using the borderSpacing token from the spacing category.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/tables.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<table className={css({ borderSpacing: '2' })} />\n```\n\n----------------------------------------\n\nTITLE: Setting Aspect Ratio in Panda CSS\nDESCRIPTION: Demonstrates how to set an element's aspect ratio using Panda's aspectRatio utility. References the aspectRatios token category.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/layout.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ aspectRatio: 'square' })} />\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Recipe ClassName in Panda CSS Configuration\nDESCRIPTION: Example showing how to define a button recipe with an optional className property in Panda CSS configuration. The className parameter which was previously mandatory is now optional, with a fallback to the recipe's name.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@pandacss/core'\n\nexport default defineConfig({\n  recipes: {\n    button: {\n      className: 'button', // 👈 was mandatory, is now optional\n      variants: {\n        size: {\n          sm: { padding: '2', borderRadius: 'sm' },\n          md: { padding: '4', borderRadius: 'md' },\n        },\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Deprecating a Utility in PandaCSS Configuration\nDESCRIPTION: Shows how to mark a utility as deprecated by setting the 'deprecated' property to true in the utility object. The example demonstrates deprecating a 'ta' utility that transforms values to text alignment properties.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/customization/deprecations.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  utilities: {\n    ta: {\n      deprecated: true,\n      transform(value) {\n        return { textAlign: value }\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring App to Use a Panda Preset\nDESCRIPTION: This code shows how to import and configure a custom Panda preset in an application's panda.config.ts file. It includes both the custom preset and the default Panda presets.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/guides/component-library.md#2025-04-18_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { acmePreset } from '@acme-org/panda-preset'\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  //...\n  presets: ['@pandacss/dev/presets', acmePreset]\n})\n```\n\n----------------------------------------\n\nTITLE: Device Orientation Styling\nDESCRIPTION: Styling based on device orientation using _portrait modifier to adjust padding when device is in portrait mode.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/conditional-styles.md#2025-04-18_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\n<div\n  className={css({\n    pb: '4',\n    _portrait: { pb: '8' }\n  })}\n>\n  Hello\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring JSX Framework in Panda CSS\nDESCRIPTION: Example of specifying the JSX framework to be used with Panda CSS. This determines how the JSX elements are generated for different frameworks.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/references/config.md#2025-04-18_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsxFramework\": \"react\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Basic Height in JSX\nDESCRIPTION: Demonstrates setting element height using both 'height' and shorthand 'h' properties.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/sizing.md#2025-04-18_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ height: '5' })} />\n<div className={css({ h: '5' })} /> // shorthand\n```\n\n----------------------------------------\n\nTITLE: Custom Prop Forwarding with Framer Motion\nDESCRIPTION: Example of using shouldForwardProp to customize which props are forwarded to Framer Motion components.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_53\n\nLANGUAGE: jsx\nCODE:\n```\nimport { styled } from '../styled-system/jsx'\nimport { button } from '../styled-system/recipes'\nimport { isCssProperty } from '../styled-system/jsx'\nimport { motion, isValidMotionProp } from 'framer-motion'\n\nconst StyledMotion = styled(\n  motion.div,\n  {},\n  {\n    shouldForwardProp: (prop, variantKeys) =>\n      isValidMotionProp(prop) || (!variantKeys.includes(prop) && !isCssProperty(prop)),\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable Color Mix Transform in TypeScript\nDESCRIPTION: Shows how to create a reusable function for generating color mix transforms that can be applied to different CSS properties. This simplifies the creation of color utilities with opacity support.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/preset-base/CHANGELOG.md#2025-04-18_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { PropertyTransform } from '@pandacss/types'\n\nexport const createColorMixTransform =\n  (prop: string): PropertyTransform =>\n  (value, args) => {\n    const mix = args.utils.colorMix(value)\n    if (mix.invalid) return { [prop]: value }\n\n    const cssVar = '--mix-' + prop\n\n    return {\n      [cssVar]: mix.value,\n      [prop]: `var(${cssVar}, ${mix.color})`,\n    }\n  }\n\nexport default defineConfig({\n  utilities: {\n    background: {\n      shorthand: \"bg\",\n      className: \"bg\",\n      values: \"colors\",\n      transform: createColorMixTransform(\"background\"),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: CSS Layer Declaration Example\nDESCRIPTION: Example of how Panda CSS defines the cascade layer order at the beginning of the generated CSS file to establish the priority of styles.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/cascade-layers.md#2025-04-18_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n@layer reset, base, tokens, recipes, utilities;\n```\n\n----------------------------------------\n\nTITLE: Recipe Pattern Configuration Example\nDESCRIPTION: Example showing how to configure card recipe patterns in static CSS with variants for size and visual styling.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/parser/CHANGELOG.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst card = defineRecipe({\n  className: 'card',\n  base: { color: 'white' },\n  variants: {\n    size: {\n      small: { fontSize: '14px' },\n      large: { fontSize: '18px' },\n    },\n    visual: {\n      primary: { backgroundColor: 'blue' },\n      secondary: { backgroundColor: 'gray' },\n    },\n  },\n})\n\nexport default defineConfig({\n  // ...\n  staticCss: {\n    recipes: {\n      card: ['*'], // this will generate non-responsive variants\n      card: [{ size: ['*'] }, { visual: ['*'] }], // explicit configuration\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring CSS Entry Point with Layers\nDESCRIPTION: CSS code to be added to the entry CSS file, defining the order of CSS layers for Panda CSS.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/vite.mdx#2025-04-18_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n@layer reset, base, tokens, recipes, utilities;\n```\n\n----------------------------------------\n\nTITLE: Defining Grid Layout Utilities in TypeScript\nDESCRIPTION: This code snippet shows the previous default values for grid layout utilities that were removed to prevent interference with native CSS values. It defines utility classes for grid template columns, grid template rows, grid column, and grid row.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst utilities = {\n  gridTemplateColumns: {\n    className: 'grid-tc',\n    group: 'Grid Layout',\n    values: {\n      '1': 'repeat(1, minmax(0, 1fr))',\n      '2': 'repeat(2, minmax(0, 1fr))',\n      '3': 'repeat(3, minmax(0, 1fr))',\n      '4': 'repeat(4, minmax(0, 1fr))',\n      '5': 'repeat(5, minmax(0, 1fr))',\n      '6': 'repeat(6, minmax(0, 1fr))',\n      '7': 'repeat(7, minmax(0, 1fr))',\n      '8': 'repeat(8, minmax(0, 1fr))',\n      '9': 'repeat(9, minmax(0, 1fr))',\n      '10': 'repeat(10, minmax(0, 1fr))',\n      '11': 'repeat(11, minmax(0, 1fr))',\n      '12': 'repeat(12, minmax(0, 1fr))',\n    },\n  },\n  gridTemplateRows: {\n    className: 'grid-tr',\n    group: 'Grid Layout',\n    values: {\n      '1': 'repeat(1, minmax(0, 1fr))',\n      '2': 'repeat(2, minmax(0, 1fr))',\n      '3': 'repeat(3, minmax(0, 1fr))',\n      '4': 'repeat(4, minmax(0, 1fr))',\n      '5': 'repeat(5, minmax(0, 1fr))',\n      '6': 'repeat(6, minmax(0, 1fr))',\n      '7': 'repeat(7, minmax(0, 1fr))',\n      '8': 'repeat(8, minmax(0, 1fr))',\n      '9': 'repeat(9, minmax(0, 1fr))',\n      '10': 'repeat(10, minmax(0, 1fr))',\n      '11': 'repeat(11, minmax(0, 1fr))',\n      '12': 'repeat(12, minmax(0, 1fr))',\n    },\n  },\n  gridColumn: {\n    className: 'grid-c',\n    group: 'Grid Layout',\n    values: {\n      full: '1 / -1',\n      '1': 'span 1 / span 1',\n      '2': 'span 2 / span 2',\n      '3': 'span 3 / span 3',\n      '4': 'span 4 / span 4',\n      '5': 'span 5 / span 5',\n      '6': 'span 6 / span 6',\n      '7': 'span 7 / span 7',\n      '8': 'span 8 / span 8',\n      '9': 'span 9 / span 9',\n      '10': 'span 10 / span 10',\n      '11': 'span 11 / span 11',\n      '12': 'span 12 / span 12',\n    },\n  },\n  gridRow: {\n    className: 'grid-r',\n    group: 'Grid Layout',\n    values: {\n      full: '1 / -1',\n      '1': 'span 1 / span 1',\n      '2': 'span 2 / span 2',\n      '3': 'span 3 / span 3',\n      '4': 'span 4 / span 4',\n      '5': 'span 5 / span 5',\n      '6': 'span 6 / span 6',\n      '7': 'span 7 / span 7',\n      '8': 'span 8 / span 8',\n      '9': 'span 9 / span 9',\n      '10': 'span 10 / span 10',\n      '11': 'span 11 / span 11',\n      '12': 'span 12 / span 12',\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Using CSS Styles with Stitches in React\nDESCRIPTION: Demonstrates how to define and use CSS styles, including variants, using the Stitches css function in React.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/migration/stitches.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { css } from '@stitches/react'\n\n// definition\nconst styles = css({\n  border: 'solid 1px red',\n  backgroundColor: 'transparent',\n\n  variants: {\n    variant: {\n      // ...\n    }\n  }\n})\n\n// usage\n<button className={styles({ variant: 'primary' })} />\n```\n\n----------------------------------------\n\nTITLE: Unsupported Runtime Patterns in Panda CSS\nDESCRIPTION: Shows patterns that should be avoided due to limitations in static analysis, including dynamic props and external references.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/guides/dynamic-styling.md#2025-04-18_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n// ❌ Avoid: Runtime value (without config.`staticCss`)\nconst Button = () => {\n  const [color, setColor] = useState('red.300')\n  return <styled.button color={color} />\n}\n\n// ❌ Avoid: Referenced value (not statically analyzable or from another file)\n<styled.div color={getColor()} />\n<styled.div color={colors[getColorName()]} />\n<styled.div color={colors[colorFromAnotherFile]} />\n\nconst CustomCircle = (props) => {\n  const { circleSize = '3' } = props\n  return (\n    <Circle\n      // ❌ Avoid: Panda can't determine the value of circleSize at build-time\n      size={circleSize}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Panda CSS Config Dependencies\nDESCRIPTION: Demonstrates how to explicitly specify config-related files that should trigger a context reload on change, useful for edge cases where automatic tracking misses some files.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/config/CHANGELOG.md#2025-04-18_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  // ...\n  dependencies: ['path/to/files/**.ts'],\n})\n```\n\n----------------------------------------\n\nTITLE: CSS Tokens Layer Example\nDESCRIPTION: Example of the CSS output for the tokens layer in Panda CSS which contains CSS variables for design tokens and semantic tokens.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/cascade-layers.md#2025-04-18_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n@layer tokens {\n  :root {\n    --color-primary: #000;\n    --color-secondary: #fff;\n    --color-tertiary: #ccc;\n    --shadow-sm: 0 0 0 1px rgba(0, 0, 0, 0.05);\n  }\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Using Pregenerated Virtual Colors in a React Component\nDESCRIPTION: Demonstrates using pregenerated virtual colors in a React component with Panda CSS. This example includes a color selector and a button that updates its color based on the selection.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/virtual-color.md#2025-04-18_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { css } from '../styled-system/css'\n\nfunction ButtonShowcase() {\n  const [colorPalette, setColorPalette] = useState('red')\n  return (\n    <div>\n      <select\n        value={colorPalette}\n        onChange={e => setColorPalette(e.currentTarget.value)}\n      >\n        <option value=\"red\">Red</option>\n        <option value=\"blue\">Blue</option>\n      </select>\n\n      <button\n        className={css({\n          bg: 'colorPalette.50',\n          color: 'colorPalette.500',\n          colorPalette\n        })}\n      >\n        Click me\n      </button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Translate X Transform in Panda (JSX)\nDESCRIPTION: Shows how to set a specific translateX transform value on a div element using Panda's css utility. Includes both standard and shorthand syntax.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/transforms.md#2025-04-18_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ translateX: '50%' })} />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ x: '20px' })} />\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Deprecation Message for Tokens in PandaCSS\nDESCRIPTION: Shows how to provide a custom deprecation message for tokens by setting the 'deprecated' property to a string. The example demonstrates adding a migration message for a color token named 'primary'.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/customization/deprecations.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  theme: {\n    tokens: {\n      colors: {\n        primary: { value: 'blue.500', deprecated: 'use `blue.600` instead' }\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Panda CSS with Package Managers\nDESCRIPTION: Commands to install Panda CSS and initialize configuration with PostCSS support.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/react-router.mdx#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install -D @pandacss/dev\npnpm panda init --postcss\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D @pandacss/dev\nnpx panda init --postcss\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D @pandacss/dev\nyarn panda init --postcss\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add -D @pandacss/dev\nbun panda init --postcss\n```\n\n----------------------------------------\n\nTITLE: Adding CSS Layers\nDESCRIPTION: Setting up CSS layers in the project's main CSS file.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/redwood.mdx#2025-04-18_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n@layer reset, base, tokens, recipes, utilities;\n```\n\n----------------------------------------\n\nTITLE: Configuring Panda CLI Logging in Shell\nDESCRIPTION: Command line usage for enabling file logging in Panda CSS commands. Uses the --logfile flag to specify the log file location.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/studio/CHANGELOG.md#2025-04-18_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\npanda --logfile ./logs/panda.log\n```\n\n----------------------------------------\n\nTITLE: Fixing Utility Configuration Shorthand in Panda CSS\nDESCRIPTION: Example showing a utility configuration issue where shorthand without className returns incorrect CSS when using the shorthand version. This was fixed in patch e463ce0e.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_66\n\nLANGUAGE: javascript\nCODE:\n```\nutilities: {\n  extend: {\n    coloredBorder: {\n      shorthand: 'cb', // no classname, returns incorrect css\n      values: ['red', 'green', 'blue'],\n      transform(value) {\n        return {\n          border: `1px solid ${value}`,\n        };\n      },\n    },\n  },\n},\n```\n\n----------------------------------------\n\nTITLE: Using Logical Properties for Border Width in Panda CSS (JSX)\nDESCRIPTION: Illustrates the use of logical properties for border width in Panda CSS. It shows how to apply border width to the start of an element, which adapts based on the document's writing mode.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/border.md#2025-04-18_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ borderStartWidth: '1px' })} />\n```\n\n----------------------------------------\n\nTITLE: Generating JSX Runtime with Panda CLI\nDESCRIPTION: Commands to generate the JSX runtime for your framework after configuring the jsxFramework property.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/style-props.mdx#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm panda codegen --clean\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm panda codegen --clean\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn panda codegen --clean\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun panda codegen --clean\n```\n\n----------------------------------------\n\nTITLE: Generated CSS for Container Queries\nDESCRIPTION: The resulting CSS output generated from the container query implementation, showing the container type definition and media query breakpoint.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/conditional-styles.md#2025-04-18_snippet_28\n\nLANGUAGE: css\nCODE:\n```\n.cq-type_inline-size {\n  container-type: inline-size;\n}\n\n@container (min-width: 60em) {\n  .\\@\\/sm:fs_md {\n    container-type: inline-size;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Element-Level CSS Reset in Panda\nDESCRIPTION: Demonstrates how to configure element-level CSS reset using the 'preflight.level' option in Panda config. This allows for more flexible application of CSS resets to specific elements or parent containers.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  preflight: {\n    scope: '.my-scope',\n    level: 'element', // 'element' | 'parent (default)'\n  },\n  // ...\n})\n```\n\nLANGUAGE: css\nCODE:\n```\nbutton.my-scope {\n}\n\nimg.my-scope {\n}\n```\n\n----------------------------------------\n\nTITLE: Using Token References with Curly Braces in Media Queries\nDESCRIPTION: Example of using token references with curly braces syntax in media queries, which will resolve to the corresponding token value.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\ncss({\n  // ✅ this is fine now, will resolve to something like\n  // `@container (min-width: 56em)`\n  '@container (min-width: {sizes.4xl})': {\n    color: 'green',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Breakpoints in Panda CSS Configuration (JavaScript)\nDESCRIPTION: This example shows how to customize breakpoints in the Panda CSS configuration file. It defines custom breakpoints within the theme.extend object of the configuration, maintaining the standard sm, md, lg, xl, and 2xl naming convention.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/responsive-design.md#2025-04-18_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  // ...\n  theme: {\n    extend: {\n      breakpoints: {\n        sm: '640px',\n        md: '768px',\n        lg: '1024px',\n        xl: '1280px',\n        '2xl': '1536px'\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using hideBelow Breakpoint in Panda CSS\nDESCRIPTION: Example showing how the hideBelow breakpoint functionality works in Panda CSS, which makes elements hidden below the specified breakpoint by applying a max-width media query.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_43\n\nLANGUAGE: jsx\nCODE:\n```\ncss({ hideBelow: 'lg' })\n// => @media screen and (max-width: 63.9975em) { background: red; }\n```\n\n----------------------------------------\n\nTITLE: Using Styled Factory with Data Attributes\nDESCRIPTION: Example showing how to use the styled factory with the dataAttr option to add data-recipe attributes for testing and debugging purposes.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/studio/CHANGELOG.md#2025-04-18_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport { styled } from '../styled-system/jsx'\nimport { button } from '../styled-system/recipes'\n\nconst Button = styled('button', button, { dataAttr: true })\n\nconst App = () => (\n  <Button variant=\"secondary\" mt=\"10px\">\n    Button\n  </Button>\n)\n// Will render something like <button data-recipe=\"button\" class=\"btn btn--variant_purple mt_10px\">Button</button>\n```\n\n----------------------------------------\n\nTITLE: Configuring JSX Style Props with 'all' Option in Panda CSS\nDESCRIPTION: Configuration example for using 'all' option in jsxStyleProps, which allows all CSS properties to be used as JSX style props, providing maximum flexibility but largest bundle size.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_115\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  jsxStyleProps: 'all',\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Component JSX Tracking in Panda CSS\nDESCRIPTION: Demonstrates the new feature in version 0.9.0 for tracking custom pattern components using the updated 'jsx' property in the configuration.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_133\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Circle } from 'styled-system/jsx'\nconst CustomCircle = ({ children, ...props }) => {\n  return <Circle {...props}>{children}</Circle>\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  patterns: {\n    extend: {\n      circle: {\n        jsx: ['CustomCircle'],\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Grid Item Pattern\nDESCRIPTION: Demonstrates how to style individual grid items using both function and JSX approaches. Supports configuration of column and row spans and positioning.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/patterns.mdx#2025-04-18_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nimport { grid, gridItem } from '../styled-system/patterns'\n\nfunction App() {\n  return (\n    <div className={grid({ columns: 3, gap: '6' })}>\n      <div className={gridItem({ colSpan: 2 })}>First</div>\n      <div>Second</div>\n      <div>Third</div>\n    </div>\n  )\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Grid, GridItem } from '../styled-system/jsx'\n\nfunction App() {\n  return (\n    <Grid columns={3} gap=\"6\">\n      <GridItem colSpan={2}>First</GridItem>\n      <GridItem>Second</GridItem>\n      <GridItem>Third</GridItem>\n    </Grid>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Remix Watch Configuration\nDESCRIPTION: Remix config update to watch Panda config changes\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/remix.mdx#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  watchPaths: [\"panda.config.ts\"],\n};\n```\n\n----------------------------------------\n\nTITLE: Removing linkBox Pattern in Panda CSS\nDESCRIPTION: This code block describes the removal of the linkBox pattern in favor of using position: relative when using the linkOverlay pattern in the Panda CSS preset base package.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/preset-base/CHANGELOG.md#2025-04-18_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n- df2546a: **BREAKING 💥**\n\n  Remove `linkBox` pattern in favor of using adding `position: relative` when using the `linkOverlay` pattern.\n\n  **Before**\n\n  ```jsx\n  import { linkBox, linkOverlay } from 'styled-system/patterns'\n\n  const App = () => {\n    return (\n      <div className={linkBox()}>\n        <img src=\"https://via.placeholder.com/150\" alt=\"placeholder\" />\n        <a href=\"#\" className={linkOverlay()}>\n          Link\n        </a>\n      </div>\n    )\n  }\n  ```\n\n  **After**\n\n  ```jsx\n  import { css } from 'styled-system/css'\n  import { linkOverlay } from 'styled-system/patterns'\n\n  const App = () => {\n    return (\n      <div className={css({ pos: 'relative' })}>\n        <img src=\"https://via.placeholder.com/150\" alt=\"placeholder\" />\n        <a href=\"#\" className={linkOverlay()}>\n          Link\n        </a>\n      </div>\n    )\n  }\n  ```\n```\n\n----------------------------------------\n\nTITLE: Static CSS Configuration in Panda\nDESCRIPTION: Shows how to configure static CSS generation in Panda config file for pre-generating styles.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/guides/dynamic-styling.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  staticCss: {\n    css: [\n      {\n        properties: {\n          // ✅ Good: Pre-generate the styles for the color\n          color: ['red.300']\n        }\n      }\n    ]\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Vertical Border Spacing in Panda CSS\nDESCRIPTION: Illustrates how to control the vertical border spacing between table cells using Panda's css utility. The borderSpacingY property applies spacing only in the vertical direction.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/tables.md#2025-04-18_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<table className={css({ borderSpacingY: '2' })} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Import Map in Panda Config\nDESCRIPTION: Configuration setup for Panda CSS to recognize the styled-system imports by setting the importMap in panda.config.ts.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/guides/component-library.md#2025-04-18_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  //...\n  importMap: '@acme-org/styled-system'\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Static Theme CSS in PandaCSS\nDESCRIPTION: Shows how to configure static CSS generation for specific themes and the resulting CSS output with theme variables.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/config/CHANGELOG.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// panda.config.ts\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  // ...\n  staticCss: {\n    themes: ['primary', 'secondary'],\n  },\n})\n```\n\nLANGUAGE: css\nCODE:\n```\n@layer tokens {\n  :where(:root, :host) {\n    --colors-text: blue;\n    --colors-body: var(--colors-blue-600);\n  }\n\n  [data-panda-theme='primary'] {\n    --colors-text: red;\n    --colors-muted: var(--colors-red-200);\n    --colors-body: var(--colors-red-600);\n  }\n\n  @media (prefers-color-scheme: dark) {\n    :where(:root, :host) {\n      --colors-body: var(--colors-blue-400);\n    }\n\n    [data-panda-theme='primary'] {\n      --colors-body: var(--colors-red-400);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Slot Recipes with SVA in Panda CSS\nDESCRIPTION: Example of defining a slot recipe using the sva function, which enables styling for multi-part components with slots, variants, and default variant settings.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_129\n\nLANGUAGE: jsx\nCODE:\n```\nimport { sva } from 'styled-system/css'\n\nconst button = sva({\n  slots: ['label', 'icon'],\n  base: {\n    label: { color: 'red', textDecoration: 'underline' },\n  },\n  variants: {\n    rounded: {\n      true: {},\n    },\n    size: {\n      sm: {\n        label: { fontSize: 'sm' },\n        icon: { fontSize: 'sm' },\n      },\n      lg: {\n        label: { fontSize: 'lg' },\n        icon: { fontSize: 'lg', color: 'pink' },\n      },\n    },\n  },\n  defaultVariants: {\n    size: 'sm',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Generated CSS Variables from Panda Tokens\nDESCRIPTION: This snippet shows the CSS output generated by Panda's token system. It includes CSS variables for colors and demonstrates theme-specific variable assignments.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/overview/why-panda.md#2025-04-18_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n:root {\n  --colors-gray50: #f9fafb;\n  --colors-gray100: #f3f4f6;\n  --colors-primary: var(--colors-gray50);\n  --colors-success: var(--colors-green500);\n}\n\n[data-theme='dark'] {\n  --colors-primary: var(--colors-gray50);\n  --colors-success: var(--colors-green200);\n}\n```\n\n----------------------------------------\n\nTITLE: Generate Static CSS for All Recipes\nDESCRIPTION: Configuration to generate static CSS for all recipes and their variants\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/guides/static.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  // ...\n  staticCss: {\n    recipes: '*'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Panda Output Options in JSON\nDESCRIPTION: This snippet demonstrates how to set output file extensions and type consistency options in Panda configuration.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/references/config.md#2025-04-18_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"outExtension\": \"mjs\",\n  \"forceConsistentTypeExtension\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Pattern Configuration Example\nDESCRIPTION: Example showing how to define a pattern configuration with proper TypeScript constraints.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_116\n\nLANGUAGE: typescript\nCODE:\n```\ndefinePattern<T extends PatternProperties>(config: PatternConfig<T>): PatternConfig\n```\n\n----------------------------------------\n\nTITLE: Using Animation Styles in Slot Recipes\nDESCRIPTION: Example of using defined animation styles within a slot recipe. This shows how to apply animation styles to specific states of a component.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/preset-panda/CHANGELOG.md#2025-04-18_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nexport const popoverSlotRecipe = defineSlotRecipe({\n  slots: anatomy.keys(),\n  base: {\n    content: {\n      _open: {\n        animationStyle: 'scale-fade-in',\n      },\n      _closed: {\n        animationStyle: 'scale-fade-out',\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: At-Rules with Media, Container, and Support Queries\nDESCRIPTION: Example of using at-rules (@media, @container, @supports) with the css function to apply conditional styles based on different viewport conditions.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/conditional-styles.md#2025-04-18_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { css } from '../styled-system/css'\n\nconst App = () => {\n  return (\n    <div className={css({ display: 'flex', containerType: 'size' })}>\n      <div\n        className={css({\n          '@media (min-width: 768px)': {\n            color: 'red.300'\n          },\n          '@container (min-width: 10px)': {\n            color: 'green.300'\n          },\n          '@supports (display: flex)': {\n            fontSize: '3xl',\n            color: 'blue.300'\n          }\n        })}\n      />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Utilities in Stitches\nDESCRIPTION: Demonstrates how to create custom utilities in Stitches using the utils key in the createStitches method. This example shows how to define a linearGradient utility for background images.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/migration/stitches.md#2025-04-18_snippet_15\n\nLANGUAGE: ts\nCODE:\n```\nimport { createStitches, type PropertyValue } from '@stitches/react'\n\nconst { styled, css } = createStitches({\n  utils: {\n    linearGradient: (value: PropertyValue<'backgroundImage'>) => ({\n      backgroundImage: `linear-gradient(${value})`\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Transition Utility Usage in React Component\nDESCRIPTION: Shows the improved transition utility that now provides default timing function and duration. This allows adding transitions with just a single property.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/preset-base/CHANGELOG.md#2025-04-18_snippet_20\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ transition: 'background' })}>Content</div>\n```\n\n----------------------------------------\n\nTITLE: Generated CSS for Container Queries\nDESCRIPTION: The CSS output generated for container queries, showing the container-type declaration and the container query media rule.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_118\n\nLANGUAGE: css\nCODE:\n```\n.cq-type_inline-size {\n  container-type: inline-size;\n}\n\n@container (min-width: 60em) {\n  .\\@\\/sm\\:fs_md {\n    container-type: inline-size;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Prop Forwarding with Styled Factory\nDESCRIPTION: Example showing how to use the shouldForwardProp option with styled factory to customize which props are forwarded to the underlying element.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/studio/CHANGELOG.md#2025-04-18_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nimport { styled } from '../styled-system/jsx'\nimport { button } from '../styled-system/recipes'\nimport { isCssProperty } from '../styled-system/jsx'\nimport { motion, isValidMotionProp } from 'framer-motion'\n\nconst StyledMotion = styled(\n  motion.div,\n  {},\n  {\n    shouldForwardProp: (prop, variantKeys) =>\n      isValidMotionProp(prop) || (!variantKeys.includes(prop) && !isCssProperty(prop)),\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Asset Token Type Definition in TypeScript\nDESCRIPTION: Type definitions for asset tokens that can represent URLs or SVG strings.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/theming/tokens.md#2025-04-18_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\ntype CompositeAsset = { type: 'url' | 'svg'; value: string }\ntype Asset = string | CompositeAsset\n```\n\n----------------------------------------\n\nTITLE: Configuring JSX Property for Custom Component Tracking\nDESCRIPTION: Configuration example showing how to use the 'jsx' property in the Panda config to track custom components like CustomCircle.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_103\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  patterns: {\n    extend: {\n      circle: {\n        jsx: ['CustomCircle'],\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Classname Concatenation Example\nDESCRIPTION: Shows how to use the cx function for joining classnames in Panda UI components.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/writing-styles.md#2025-04-18_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\nimport { css, cx } from '../styled-system/css'\n\nconst styles = css({\n  borderWidth: '1px',\n  borderRadius: '8px',\n  paddingX: '12px',\n  paddingY: '24px'\n})\n\nconst Card = ({ className, ...props }) => {\n  const rootClassName = cx('group', styles, className)\n  return <div className={rootClassName} {...props} />\n}\n```\n\n----------------------------------------\n\nTITLE: Building with External Dependencies\nDESCRIPTION: This bash command shows how to build a library with tsup while marking the styled-system package as external. This ensures that the runtime code is imported only once, avoiding duplication.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/guides/component-library.md#2025-04-18_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ntsup src/index.tsx --external @acme-org/styled-system\n```\n\n----------------------------------------\n\nTITLE: Fixing Token Names Starting with '0' in Panda CSS\nDESCRIPTION: Shows how to properly configure and use token names that start with '0', preventing parsing issues where numbers are incorrectly interpreted.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_79\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  theme: {\n    tokens: {\n      spacing: {\n        '025': {\n          value: '0.125rem',\n        },\n      },\n    },\n  },\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\ncss({ margin: '025' })\n```\n\n----------------------------------------\n\nTITLE: Configuring Aspect Ratio Tokens in Panda\nDESCRIPTION: Example of how to define custom aspect ratio tokens in Panda CSS configuration. Shows how to extend the theme with custom aspect ratio definitions.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_57\n\nLANGUAGE: javascript\nCODE:\n```\nexport default defineConfig({\n  // ...\n  theme: {\n    extend: {\n      // add aspect ratio tokens\n      tokens: {\n        aspectRatios: {\n          '1:1': '1',\n          '16:9': '16/9',\n        },\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Deprecating a Token in PandaCSS Configuration\nDESCRIPTION: Demonstrates how to mark a token as deprecated by setting the 'deprecated' property to true in the token object. The example shows deprecating a spacing token named 'lg'.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/customization/deprecations.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  theme: {\n    tokens: {\n      spacing: {\n        lg: { value: '8px', deprecated: true }\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Fixing Spread Operator in Styled Variant Arrays with Panda CSS\nDESCRIPTION: Example demonstrating a fixed issue where spreading an identifier in a styled variant array (sva) slots array would prevent expected CSS from being generated. The fix ensures that spreading elements in slot arrays works correctly.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sva } from 'styled-system/css'\nconst parts = ['positioner', 'content']\n\nconst card = sva({\n  slots: [...parts], // <- spreading here was causing the below CSS not to be generated, it's now fixed ✅\n  base: {\n    root: {\n      p: '6',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Merging Styles with Smart cx Function\nDESCRIPTION: Demonstrates how the cx function intelligently merges and deduplicates styles passed to it, combining multiple style definitions into a single optimized className.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/shared/CHANGELOG.md#2025-04-18_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<h1 className={cx(css({ mx: '3', paddingTop: '4' }), css({ mx: '10', pt: '6' }))}>Will result in \"mx_10 pt_6\"</h1>\n```\n\n----------------------------------------\n\nTITLE: Configuring Aspect Ratio Tokens in Panda CSS\nDESCRIPTION: Shows how to define custom aspect ratio tokens in the Panda CSS configuration. These tokens can be used to set predefined aspect ratios for elements in the styles.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/preset-base/CHANGELOG.md#2025-04-18_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nexport default defineConfig({\n  // ...\n  theme: {\n    extend: {\n      // add aspect ratio tokens\n      tokens: {\n        aspectRatios: {\n          '1:1': '1',\n          '16:9': '16/9',\n        },\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting TypeScript Configuration\nDESCRIPTION: Additional TypeScript configuration for IDE autocomplete support.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/redwood.mdx#2025-04-18_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ...\n  \"include\":  [\"src\", \"styled-system\"]\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Reset Layer Example\nDESCRIPTION: Example of the CSS output for the reset layer in Panda CSS which handles resetting default browser styles when preflight option is enabled.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/cascade-layers.md#2025-04-18_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n@layer reset {\n  * {\n    box-sizing: border-box;\n    margin: 0;\n    padding: 0;\n  }\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: GlobalCss Selector Order Regression Fix in Panda CSS\nDESCRIPTION: Example showing a regression in globalCss selector order introduced in v0.26.2 and how it was fixed in patch 77cab9fe. The issue affected nested selector ordering in the generated CSS.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_67\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    globalCss: {\n        html: {\n          \".aaa\": {\n            color: \"red.100\",\n            \"& .bbb\": {\n              color: \"red.200\",\n              \"& .ccc\": {\n                color: \"red.300\"\n              }\n            }\n          }\n        },\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating package.json Scripts for Panda CSS\nDESCRIPTION: JSON diff showing the addition of a 'prepare' script to run Panda CSS codegen before each build.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/nuxt.mdx#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n+    \"prepare\": \"panda codegen\",\n    \"build\": \"nuxt build\",\n    \"dev\": \"nuxt dev\",\n    \"generate\": \"nuxt generate\",\n    \"preview\": \"nuxt preview\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Hash Function Configuration in PandaCSS\nDESCRIPTION: Example of using the 'utility:created' hook to override the default hash function when config.hash is set to true.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_106\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  // ...\n  hooks: {\n    'utility:created': ({ configure }) => {\n      configure({\n        toHash: (paths, toHash) => {\n          const stringConds = paths.join(':')\n          const splitConds = stringConds.split('_')\n          const hashConds = splitConds.map(toHash)\n          return hashConds.join('_')\n        },\n      })\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Static CSS in Main Config for Panda CSS\nDESCRIPTION: The equivalent configuration for recipe static CSS in the main config file. This shows how to define which recipe variants should generate static CSS from the config.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_104\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  // ...\n  staticCss: {\n    recipes: {\n      card: {\n        size: ['*'],\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using the logfile Flag with Panda CLI\nDESCRIPTION: Shows how to use the --logfile flag with Panda CLI commands to stream logs to a specified file for debugging issues during the build process.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_41\n\nLANGUAGE: shell\nCODE:\n```\npanda --logfile ./logs/panda.log\n```\n\n----------------------------------------\n\nTITLE: Configuring Panda CSS with Text Styles\nDESCRIPTION: Demonstrates how to update the Panda CSS configuration file to include custom text styles by extending the theme configuration.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/theming/text-styles.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\nimport { textStyles } from './text-styles'\n\nexport default defineConfig({\n  theme: {\n    extend: {\n      textStyles\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a New Svelte Project using create-svelte\nDESCRIPTION: Commands for initializing a new Svelte project using create-svelte, either in the current directory or in a specified folder.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/svelte/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# create a new project in the current directory\nnpm create svelte@latest\n\n# create a new project in my-app\nnpm create svelte@latest my-app\n```\n\n----------------------------------------\n\nTITLE: Setting up CSS layers for Panda CSS in Angular\nDESCRIPTION: This snippet demonstrates how to set up CSS layers in the src/index.css file, which should be imported in the root component of the Angular project.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/angular.mdx#2025-04-18_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n@layer reset, base, tokens, recipes, utilities;\n```\n\n----------------------------------------\n\nTITLE: Implementing Panda CSS in Ember Component\nDESCRIPTION: Example of using Panda CSS in an Ember component with TypeScript and Handlebars templates.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/ember.mdx#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport Component from '@glimmer/component';\nimport { css } from 'test-app/styled-system/css';\n\nexport default class HelloPanda extends Component {\n  style = css({ fontSize: '5xl', fontWeight: 'bold' });\n}\n```\n\nLANGUAGE: handlebars\nCODE:\n```\n<div class={{this.style}}>Hello 🐼!</div>\n```\n\nLANGUAGE: handlebars\nCODE:\n```\n{{page-title \"TestApp\"}}\n\n<h2 id=\"title\">Welcome to Ember</h2>\n\n<HelloPanda />\n\n{{outlet}}\n```\n\n----------------------------------------\n\nTITLE: Using Color Opacity Modifiers in Runtime CSS - TypeScript\nDESCRIPTION: Demonstrates how to use the color opacity modifier syntax in runtime CSS generation with Panda CSS. This snippet shows the usage of '{colors.blue.300/70}' and 'token(colors.blue.300/70)' in the css function.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/token-dictionary/CHANGELOG.md#2025-04-18_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { css } from '../styled-system/css'\n\ncss({ bg: '{colors.blue.300/70}' })\n// => @layer utilities {\n//    .bg_token\\(colors\\.blue\\.300\\/70\\) {\n//      background: color-mix(in srgb, var(--colors-blue-300) 70%, transparent);\n//    }\n//  }\n\ncss({ bg: 'token(colors.blue.300/70)' })\n// => @layer utilities {\n//    .bg_token\\(colors\\.blue\\.300\\/70\\) {\n//      background: color-mix(in srgb, var(--colors-blue-300) 70%, transparent);\n//    }\n//  }\n```\n\n----------------------------------------\n\nTITLE: Modifying Panda Configuration\nDESCRIPTION: Example demonstrating how to use the config:resolved hook to remove specific patterns from the configuration using utility functions.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/hooks.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  // ...\n  hooks: {\n    'config:resolved': ({ config, utils }) => {\n      return utils.omit(config, ['patterns.stack'])\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Comparing Token Reference Syntax vs Token Function in CSS\nDESCRIPTION: Compares the token reference syntax with the token function syntax for resolving CSS variables in styles.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_61\n\nLANGUAGE: jsx\nCODE:\n```\nconst styles = css({\n  // token reference syntax\n  border: '2px solid {colors.primary}',\n  // token function syntax\n  border: '2px solid token(colors.primary)',\n})\n```\n\nLANGUAGE: jsx\nCODE:\n```\nconst styles = css({\n  border: '2px solid token(colors.primary, red)',\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring codegen:prepare Hook in Panda CSS\nDESCRIPTION: This code demonstrates how to use the `codegen:prepare` hook to modify codegen files before they're written to disk. The hook receives artifacts and changed files as parameters.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/token-dictionary/CHANGELOG.md#2025-04-18_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  // ...\n  hooks: {\n    'codegen:prepare': ({ artifacts, changed }) => {\n      // do something with the emitted js/d.ts files\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using Nested Color Palette in React Component\nDESCRIPTION: Demonstrates how to use deeply nested color palette properties as root color palettes in a React component.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/token-dictionary/CHANGELOG.md#2025-04-18_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { css } from '../styled-system/css'\n\nexport const App = () => {\n  return (\n    <button\n      className={css({\n        colorPalette: 'button.light.accent',\n        color: 'colorPalette.secondary',\n      })}\n    >\n      Nested color palette leaf\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Scroll Snap Strictness with Panda CSS in JSX\nDESCRIPTION: This example illustrates how to configure scroll snap strictness using Panda CSS. It uses the 'scrollSnapStrictness' property with the 'proximity' value.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/interactivity.md#2025-04-18_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ scrollSnapStrictness: 'proximity' })}>\n  Scroll container with proximity scroll snap\n</div>\n```\n\n----------------------------------------\n\nTITLE: Theme Usage in JSX Components\nDESCRIPTION: Demonstrates how to use theme tokens in React components with data attributes.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/guides/multiple-themes.md#2025-04-18_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<html data-theme=\"pink\" data-color-mode=\"dark\">\n  <body>\n    <h1 className={css({ color: 'text' })}>Hello World</h1>\n  </body>\n</html>\n\n// use pink and light mode theme\n<html data-theme=\"pink\">\n  <body>\n    <h1 className={css({ color: 'text' })}>Hello World</h1>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring Divide Style in Panda (JSX)\nDESCRIPTION: This example demonstrates the use of the divideStyle property in Panda to set the style of dividers. The style is set to 'dashed' in this case.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/divide.md#2025-04-18_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ divideStyle: 'dashed' })} />\n```\n\n----------------------------------------\n\nTITLE: Marking Storybook Args for Style Generation\nDESCRIPTION: Example of how to wrap Storybook args with the .raw() marker to ensure proper style generation.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/storybook.mdx#2025-04-18_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from '@storybook/react';\nimport { button } from '../../styled-system/recipes';\n\nexport const Funky: Story = {\n  // mark this as a button recipe usage\n  args: button.raw({\n    visual: 'funky',\n    shape: 'circle',\n    size: 'sm'\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Motion Preference Styling\nDESCRIPTION: Styling based on user's motion preference using _motionReduce and _motionSafe modifiers to adjust transitions.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/conditional-styles.md#2025-04-18_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n<div\n  className={css({\n    _motionReduce: { transition: 'none' },\n    _motionSafe: { transition: 'all 0.3s' }\n  })}\n>\n  Hello\n</div>\n```\n\n----------------------------------------\n\nTITLE: Token Structure Example\nDESCRIPTION: Illustrates the structure of generated token objects including values and CSS variables.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/theming/usage.mdx#2025-04-18_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nconst tokens = {\n  // ...\n  'colors.blue.200': {\n    value: '#bfdbfe',\n    variable: 'var(--colors-blue-200)'\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Panda CSS Content Paths\nDESCRIPTION: JavaScript configuration for Panda CSS, specifying include paths for Vue components and output directory.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/nuxt.mdx#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from \"@pandacss/dev\"\n\nexport default defineConfig({\n preflight: true,\n\n include: [\"./app.vue\", \"./components/**/*.{js,jsx,ts,tsx,vue}\", \"./pages/**/*.{js,jsx,ts,tsx,vue}\"],\n\n exclude: [],\n\n outdir: \"styled-system\",\n})\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration Update\nDESCRIPTION: TSConfig updates to include the styled-system directory for proper IDE autocomplete support.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/solidjs.mdx#2025-04-18_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"include\":  [\"src\", \"styled-system\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Recipe Report Format Comparison in Version 0.51.1\nDESCRIPTION: A comparison of the old and new formats for the recipe analysis report. The new design simplifies the 'JSX' and 'Function' columns to be more concise and improves readability of the variant usage data.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/reporter/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n**BEFORE**\n\n```sh\n╔════════════════════════╤══════════════════════╤═════════╤═══════╤════════════╤═══════════════════╤══════════╗\n║ Recipe                 │ Variant Combinations │ Usage % │ JSX % │ Function % │ Most Used         │ Found in ║\n╟────────────────────────┼──────────────────────┼─────────┼───────┼────────────┼───────────────────┼──────────╢\n║ someRecipe (1 variant) │ 1 / 1                │ 100%    │ 100%  │ 0%         │ size.small        │ 1 file   ║\n╟────────────────────────┼──────────────────────┼─────────┼───────┼────────────┼───────────────────┼──────────╢\n║ button (4 variants)    │ 7 / 9                │ 77.78%  │ 63%   │ 38%        │ size.md, size.sm, │ 2 files  ║\n║                        │                      │         │       │            │ state.focused,    │          ║\n║                        │                      │         │       │            │ variant.danger,   │          ║\n║                        │                      │         │       │            │ variant.primary   │          ║\n╚════════════════════════╧══════════════════════╧═════════╧═══════╧════════════╧═══════════════════╧══════════╝\n```\n\n**AFTER**\n\n```sh\n╔════════════════════════╤════════════════╤═══════════════════╤═══════════════════╤══════════╤═══════════╗\n║ Recipe                 │ Variant values │ Usage %           │ Most used         │ Found in │ Used as   ║\n╟────────────────────────┼────────────────┼───────────────────┼───────────────────┼──────────┼───────────╢\n║ someRecipe (1 variant) │ 1 value        │ 100% (1 value)    │ size.small        │ 1 file   │ jsx: 100% ║\n║                        │                │                   │                   │          │ fn: 0%    ║\n╟────────────────────────┼────────────────┼───────────────────┼───────────────────┼──────────┼───────────╢\n║ button (4 variants)    │ 9 values       │ 77.78% (7 values) │ size.md, size.sm, │ 2 files  │ jsx: 63%  ║\n║                        │                │                   │ state.focused,    │          │ fn: 38%   ║\n║                        │                │                   │ variant.danger,   │          │           ║\n║                        │                │                   │ variant.primary   │          │           ║\n╚════════════════════════╧════════════════╧═══════════════════╧═══════════════════╧══════════╧═══════════╝\n```\n```\n\n----------------------------------------\n\nTITLE: Disabling Shorthand Props in Panda CSS\nDESCRIPTION: Feature in version 0.4.0 that adds support for disabling shorthand props by setting 'shorthands' to false in the Panda CSS configuration.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  // ...\n  shorthands: false,\n})\n```\n\n----------------------------------------\n\nTITLE: Renaming Config Recipe Properties in PandaCSS 0.9.0\nDESCRIPTION: Breaking change that renames the 'name' property to 'className' in config recipes for better API consistency and clarity of intent.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_100\n\nLANGUAGE: diff\nCODE:\n```\nexport const buttonRecipe = defineRecipe({\n-  name: 'button',\n+  className: 'button',\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Duration Tokens in JSX\nDESCRIPTION: Shows how to define duration tokens for animation timing, used in transition-duration and animation-duration properties.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/theming/tokens.md#2025-04-18_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nconst theme = {\n  tokens: {\n    durations: {\n      fast: { value: '100ms' }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating SolidJS Project with Package Managers\nDESCRIPTION: Commands to create a new SolidJS project using different package managers (pnpm, npm, yarn, bun) with the typescript template.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/solidjs.mdx#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm dlx degit solidjs/templates/ts test-app\ncd test-app\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Defining Slot Recipes in Panda Configuration\nDESCRIPTION: Shows how to use the `defineSlotRecipe` function to define slot recipes in the Panda configuration, creating reusable multi-part component styles.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_113\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineConfig, defineSlotRecipe } from '@pandacss/dev'\n\nexport default defineConfig({\n  theme: {\n    slotRecipes: {\n      button: defineSlotRecipe({\n        className: 'button',\n        slots: ['label', 'icon'],\n        base: {\n          label: { color: 'red', textDecoration: 'underline' },\n        },\n        variants: {\n          rounded: {\n            true: {},\n          },\n          size: {\n            sm: {\n              label: { fontSize: 'sm' },\n              icon: { fontSize: 'sm' },\n            },\n            lg: {\n              label: { fontSize: 'lg' },\n              icon: { fontSize: 'lg', color: 'pink' },\n            },\n          },\n        },\n        defaultVariants: {\n          size: 'sm',\n        },\n      }),\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Specifying Config Dependencies for Change Tracking\nDESCRIPTION: Shows how to explicitly specify config-related files that should trigger a context reload when changed, useful for edge cases where automatic tracking misses some dependencies.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  // ...\n  dependencies: ['path/to/files/**.ts'],\n})\n```\n\n----------------------------------------\n\nTITLE: Supporting Arrays in SystemStyleObject with CSS Function\nDESCRIPTION: Enhances the css function to accept arrays of SystemStyleObject, useful when creating custom styled components that need to benefit from array property support.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/shared/CHANGELOG.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { css } from 'styled-system/css'\nimport type { HTMLStyledProps } from 'styled-system/types'\n\ntype ButtonProps = HTMLStyledProps<'button'>\n\nexport const Button = ({ css: cssProp = {}, children }: ButtonProps) => {\n-  const className = css(...(Array.isArray(cssProp) ? cssProp : [cssProp]))\n+  const className = css(cssProp)\n  return <button className={className}>{children}</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Interactive Init Command for Panda CLI\nDESCRIPTION: Shows how to run the Panda CLI init command in interactive mode, which guides users through the setup process with an interactive interface.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_103\n\nLANGUAGE: sh\nCODE:\n```\npanda init -i\n```\n\n----------------------------------------\n\nTITLE: Theme JSON Structure in Panda CSS\nDESCRIPTION: Example of the JSON structure for a theme in Panda CSS, showing the theme's name, ID, data attribute, and CSS.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/token-dictionary/CHANGELOG.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"primary\",\n  \"id\": \"panda-themes-primary\",\n  \"dataAttr\": \"primary\",\n  \"css\": \"[data-panda-theme=primary] { ... }\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging for Panda CSS CLI Commands\nDESCRIPTION: Shows how to use the '--logfile' flag with Panda CSS CLI commands to stream logs to a specified file. This is useful for debugging build process issues.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/fixture/CHANGELOG.md#2025-04-18_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\npanda --logfile ./logs/panda.log\n```\n\n----------------------------------------\n\nTITLE: Comparing strictTokens Type-Safety Behavior Before and After Fix\nDESCRIPTION: Example demonstrating how the config.strictTokens type-safety has been improved to allow CSS predefined values while preventing invalid values for CSS properties.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\n// config.strictTokens = true\ncss({ display: 'flex' }) // OK, didn't throw\ncss({ display: 'block' }) // OK, didn't throw\ncss({ display: 'abc' }) // ❌ didn't throw even though 'abc' is not a valid value for 'display'\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// config.strictTokens = true\ncss({ display: 'flex' }) // OK, didn't throw\ncss({ display: 'block' }) // OK, didn't throw\ncss({ display: 'abc' }) // ✅ will throw since 'abc' is not a valid value for 'display'\n```\n\n----------------------------------------\n\nTITLE: Configuring Panda Prefix in JSON\nDESCRIPTION: This snippet demonstrates how to set a namespace prefix for generated CSS classes and variables in Panda configuration.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/references/config.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"prefix\": \"panda\"\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Stroke Width of SVG Elements using Panda CSS in JSX\nDESCRIPTION: This code snippet illustrates how to change the stroke width of an SVG element using Panda's css utility function. The stroke width is set to '1px', which corresponds to the borderWidths token category.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/svg.md#2025-04-18_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<svg className={css({ strokeWidth: '1px' })} />\n```\n\n----------------------------------------\n\nTITLE: Setting Scroll Margin with Panda CSS in JSX\nDESCRIPTION: This example demonstrates how to set scroll margins around scroll containers using Panda CSS. It uses the 'scrollMarginX' property to set inline padding.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/interactivity.md#2025-04-18_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ scrollMarginX: '2' })}>\n  Scrollbar Container with Inline padding\n</div>\n```\n\n----------------------------------------\n\nTITLE: Adding Arbitrary Value Escape Hatch for strictTokens Mode\nDESCRIPTION: Implements an escape hatch for arbitrary values when using strictTokens configuration. Using square brackets around a value (e.g., [123px]) allows bypassing the token validation system.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/shared/CHANGELOG.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { css } from '../styled-system/css'\n\ncss({\n  // @ts-expect-error TS will throw when using from strictTokens: true\n  color: '#fff',\n  // @ts-expect-error TS will throw when using from strictTokens: true\n  width: '100px',\n\n  // ✅ but this is now allowed:\n  bgColor: '[rgb(51 155 240)]',\n  fontSize: '[12px]',\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Log Level in Panda CSS\nDESCRIPTION: Example of configuring the log level for the built-in logger in Panda CSS.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/references/config.md#2025-04-18_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"logLevel\": \"info\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Props in Styled Components\nDESCRIPTION: Demonstration of using defaultProps to set default variants and styles for a button component.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_52\n\nLANGUAGE: jsx\nCODE:\n```\nimport { styled } from '../styled-system/jsx'\nimport { button } from '../styled-system/recipes'\n\nconst Button = styled('button', button, {\n  defaultProps: {\n    variant: 'secondary',\n    px: '10px',\n  },\n})\n\nconst App = () => <Button>Button</Button>\n```\n\n----------------------------------------\n\nTITLE: Analyzing Tokens and Recipe Variants with Panda CLI\nDESCRIPTION: Command line example for analyzing token and recipe variant usage in a Panda CSS project. Used to get insights about token usage patterns and design system adoption.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npanda analyze --scope=<token|recipe>\n```\n\n----------------------------------------\n\nTITLE: High Contrast Preference Styling\nDESCRIPTION: Styling based on user's color contrast preference using _highContrast modifier to adjust background for accessibility.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/conditional-styles.md#2025-04-18_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\n<div\n  className={css({\n    bg: 'white',\n    _highContrast: { bg: 'black' }\n  })}\n>\n  Hello\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring and Using Responsive Styles with Stitches\nDESCRIPTION: Shows how to configure breakpoints and use responsive styles with Stitches, using the createStitches method and @<breakpoint> syntax.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/migration/stitches.md#2025-04-18_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { createStitches } from '@stitches/react'\n\n// configure\nconst { styled, css } = createStitches({\n  media: {\n    bp1: '(min-width: 640px)',\n    bp2: '(min-width: 768px)'\n  }\n})\n\n// usage\nconst styles = css({\n  backgroundColor: 'gainsboro',\n  '@bp1': {\n    backgroundColor: 'tomato'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Package.json Scripts\nDESCRIPTION: Adding prepare script for Panda CSS codegen.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/redwood.mdx#2025-04-18_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n{\n  \"scripts\": {\n+    \"prepare\": \"panda codegen\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tokens Created Hook Example in Panda CSS\nDESCRIPTION: Example of using the tokens:created hook to customize token names and variables. Useful when migrating from other CSS-in-JS libraries like Stitches.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/fixture/CHANGELOG.md#2025-04-18_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  // ...\n  hooks: {\n    'tokens:created': ({ configure }) => {\n      configure({\n        formatTokenName: (path) => '\n      })\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Panda CSS Hooks Configuration Interface\nDESCRIPTION: Comprehensive hooks interface for Panda CSS, allowing customization at various stages of the build process. Includes hooks for config resolution, context creation, parsing, and CSS generation.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/fixture/CHANGELOG.md#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface PandaHooks {\n  /**\n   * Called when the config is resolved, after all the presets are loaded and merged.\n   * This is the first hook called, you can use it to tweak the config before the context is created.\n   */\n  'config:resolved': (args: { conf: LoadConfigResult }) => MaybeAsyncReturn\n  /**\n   * Called when the Panda context has been created and the API is ready to be used.\n   */\n  'context:created': (args: { ctx: ApiInterface; logger: LoggerInterface }) => void\n  /**\n   * Called when the config file or one of its dependencies (imports) has changed.\n   */\n  'config:change': (args: { config: UserConfig }) => MaybeAsyncReturn\n  /**\n   * Called after reading the file content but before parsing it.\n   * You can use this hook to transform the file content to a tsx-friendly syntax so that Panda's parser can parse it.\n   * You can also use this hook to parse the file's content on your side using a custom parser, in this case you don't have to return anything.\n   */\n  'parser:before': (args: { filePath: string; content: string }) => string | void\n  /**\n   * Called after the file styles are extracted and processed into the resulting ParserResult object.\n   * You can also use this hook to add your own extraction results from your custom parser to the ParserResult object.\n   */\n  'parser:after': (args: { filePath: string; result: ParserResultInterface | undefined }) => void\n  /**\n   * Called after the codegen is completed\n   */\n  'codegen:done': () => MaybeAsyncReturn\n  /**\n   * Called right before adding the design-system CSS (global, static, preflight, tokens, keyframes) to the final CSS\n   * Called right before writing/injecting the final CSS (styles.css) that contains the design-system CSS and the parser CSS\n   * You can use it to tweak the CSS content before it's written to disk or injected through the postcss plugin.\n   */\n  'cssgen:done': (args: {\n    artifact: 'global' | 'static' | 'reset' | 'tokens' | 'keyframes' | 'styles.css'\n    content: string\n  }) => string | void\n}\n```\n\n----------------------------------------\n\nTITLE: Vue Project Configuration Options\nDESCRIPTION: Example of the CLI prompts and configuration options when setting up a new Vue project.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/vue.mdx#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nVue.js - The Progressive JavaScript Framework\n\n✔ Project name: … test-app\n✔ Add TypeScript? … Yes\n✔ Add JSX Support? … Yes\n✔ Add Vue Router for Single Page Application development? … No / Yes\n✔ Add Pinia for state management? … No / Yes\n✔ Add Vitest for Unit Testing? … No / Yes\n✔ Add an End-to-End Testing Solution? › No\n✔ Add ESLint for code quality? … No / Yes\n✔ Add Prettier for code formatting? … No / Yes\n```\n\n----------------------------------------\n\nTITLE: Defining Panda Hooks Interface (TypeScript)\nDESCRIPTION: Defines the PandaHooks interface with various lifecycle hooks for configuration, parsing, and code generation. These hooks allow for customization and extension of Panda's behavior at different stages of processing.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/node/CHANGELOG.md#2025-04-18_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface PandaHooks {\n  /**\n   * Called when the config is resolved, after all the presets are loaded and merged.\n   * This is the first hook called, you can use it to tweak the config before the context is created.\n   */\n  'config:resolved': (args: { conf: LoadConfigResult }) => MaybeAsyncReturn\n  /**\n   * Called when the Panda context has been created and the API is ready to be used.\n   */\n  'context:created': (args: { ctx: ApiInterface; logger: LoggerInterface }) => void\n  /**\n   * Called when the config file or one of its dependencies (imports) has changed.\n   */\n  'config:change': (args: { config: UserConfig }) => MaybeAsyncReturn\n  /**\n   * Called after reading the file content but before parsing it.\n   * You can use this hook to transform the file content to a tsx-friendly syntax so that Panda's parser can parse it.\n   * You can also use this hook to parse the file's content on your side using a custom parser, in this case you don't have to return anything.\n   */\n  'parser:before': (args: { filePath: string; content: string }) => string | void\n  /**\n   * Called after the file styles are extracted and processed into the resulting ParserResult object.\n   * You can also use this hook to add your own extraction results from your custom parser to the ParserResult object.\n   */\n  'parser:after': (args: { filePath: string; result: ParserResultInterface | undefined }) => void\n  /**\n   * Called after the codegen is completed\n   */\n  'codegen:done': () => MaybeAsyncReturn\n  /**\n   * Called right before adding the design-system CSS (global, static, preflight, tokens, keyframes) to the final CSS\n   * Called right before writing/injecting the final CSS (styles.css) that contains the design-system CSS and the parser CSS\n   * You can use it to tweak the CSS content before it's written to disk or injected through the postcss plugin.\n   */\n  'cssgen:done': (args: {\n    artifact: 'global' | 'static' | 'reset' | 'tokens' | 'keyframes' | 'styles.css'\n    content: string\n  }) => string | void\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Panda CSS Configuration with extend Keyword\nDESCRIPTION: Basic Panda CSS configuration file structure after running 'panda init' command, showing the extend object ready for customization in the theme section.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/extend.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  // ...\n\n  // Useful for theme customization\n  theme: {\n    extend: {} // 👈 it's already there! perfect, now you just need to add your customizations in this object\n  }\n\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Panda CSS\nDESCRIPTION: Commands to install Panda CSS and initialize configuration with PostCSS support\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/remix.mdx#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install -D @pandacss/dev\npnpm panda init --postcss\n```\n\n----------------------------------------\n\nTITLE: GlobalCSS Selector Order Regression Example in Panda\nDESCRIPTION: Demonstration of a globalCSS configuration and how it was incorrectly generating CSS selectors. Shows the issue where selector order was improperly handled in earlier versions.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_53\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    globalCss: {\n        html: {\n          \".aaa\": {\n            color: \"red.100\",\n            \"& .bbb\": {\n              color: \"red.200\",\n              \"& .ccc\": {\n                color: \"red.300\"\n              }\n            }\n          }\n        },\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the css Function with Template Literals\nDESCRIPTION: Example of using the css function to create atomic class names from template literals that can be applied to React elements.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/template-literals.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { css } from '../styled-system/css'\n\nconst className = css`\n  font-size: 16px;\n  font-weight: bold;\n`\n\nfunction Heading() {\n  return <h1 className={className}>This is a title</h1>\n}\n\n// => <h1 className='font-size_16px font-weight_bold'></h1>\n```\n\n----------------------------------------\n\nTITLE: Using Codegen Prepare Hook in PandaCSS\nDESCRIPTION: Example of using the 'codegen:prepare' hook to modify generated code files before they are written to disk.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_107\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  // ...\n  hooks: {\n    'codegen:prepare': ({ artifacts, changed }) => {\n      // do something with the emitted js/d.ts files\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Theme Contract (TypeScript)\nDESCRIPTION: Shows how to create a theme contract to ensure consistent structure across multiple themes using defineThemeContract.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineThemeContract } from '@pandacss/dev'\n\nconst defineTheme = defineThemeContract({\n  tokens: {\n    colors: {\n      red: { value: '' }, // theme implementations must have a red color\n    },\n  },\n})\n\ndefineTheme({\n  selector: '.theme-secondary',\n  tokens: {\n    colors: {\n      // ^^^^   Property 'red' is missing in type '{}' but required in type '{ red: { value: string; }; }'\n      //\n      // fixed with\n      // red: { value: 'red' },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Renaming Config Recipe Properties\nDESCRIPTION: Breaking change that renames the 'name' property to 'className' in config recipes for better API consistency and clarity of intent.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_74\n\nLANGUAGE: diff\nCODE:\n```\nexport const buttonRecipe = defineRecipe({\n-  name: 'button',\n+  className: 'button',\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Using Panda CSS Base Preset in Configuration\nDESCRIPTION: This snippet shows how to use the '@pandacss/preset-base' preset in Panda CSS configuration. This preset provides a set of unopinionated utilities for mapping CSS properties to values.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/guides/minimal-setup.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default defineConfig({\n  // ...\n  presets: ['@pandacss/preset-base']\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a Slot Recipe with sva in Chakra UI Panda\nDESCRIPTION: This snippet demonstrates how to define a slot recipe using the sva function. It creates a button component with label and icon slots, specifying base styles and variants for different sizes and rounded states.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/shared/CHANGELOG.md#2025-04-18_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { sva } from 'styled-system/css'\n\nconst button = sva({\n  slots: ['label', 'icon'],\n  base: {\n    label: { color: 'red', textDecoration: 'underline' },\n  },\n  variants: {\n    rounded: {\n      true: {},\n    },\n    size: {\n      sm: {\n        label: { fontSize: 'sm' },\n        icon: { fontSize: 'sm' },\n      },\n      lg: {\n        label: { fontSize: 'lg' },\n        icon: { fontSize: 'lg', color: 'pink' },\n      },\n    },\n  },\n  defaultVariants: {\n    size: 'sm',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Dynamically Importing and Injecting Themes in Panda CSS\nDESCRIPTION: Demonstrates how to dynamically import a theme and inject its styles into the DOM using the styled-system/themes entrypoint.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/cli/CHANGELOG.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getTheme } from '../styled-system/themes'\n\nconst theme = await getTheme('red')\n//    ^? {\n//     name: \"red\";\n//     id: string;\n//     css: string;\n// }\n\nimport { injectTheme } from '../styled-system/themes'\n\nconst theme = await getTheme('red')\ninjectTheme(document.documentElement, theme) // this returns the injected style element\n```\n\n----------------------------------------\n\nTITLE: Generated CSS for Color-Mix Utility\nDESCRIPTION: CSS output generated by the color-mix utility, showing how it uses the color-mix function with fallback support for browsers that don't support it.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_110\n\nLANGUAGE: css\nCODE:\n```\n@layer utilities {\n  .bg_red\\.300\\/40 {\n    --mix-background: color-mix(in srgb, var(--colors-red-300) 40%, transparent);\n    background: var(--mix-background, var(--colors-red-300));\n  }\n\n  .text_white {\n    color: var(--colors-white);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Style Properties in TypeScript\nDESCRIPTION: This code shows how CSS properties are sorted and merged in a deterministic order to prevent conflicts. Longhand properties take precedence over shorthand properties.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\ncss({\n  padding: '1px',\n  paddingTop: '3px',\n  paddingBottom: '4px',\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Component Style Merging with CSS Function in TSX\nDESCRIPTION: Shows how to update existing code to use the new css function for merging styles instead of cx. This results in more efficient class generation.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_111\n\nLANGUAGE: tsx\nCODE:\n```\nimport { css, cx } from '../styled-system/css'\n\nconst App = () => {\n  return (\n    <>\n-      <div className={cx(css({ mx: '3', paddingTop: '4' }), css({ mx: '10', pt: '6' }))}>\n+      <div className={css({ mx: '3', paddingTop: '4' }, { mx: '10', pt: '6' })}>\n        Will result in `class=\"mx_10 pt_6\"`\n      </div>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Nested Color Palette in React Component with Panda CSS\nDESCRIPTION: Example demonstrating how to use a deeply nested property as a root color palette in a React component. This shows the flexibility of the color palette system allowing any level to be used as a base.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_97\n\nLANGUAGE: typescript\nCODE:\n```\nimport { css } from '../styled-system/css'\n\nexport const App = () => {\n  return (\n    <button\n      className={css({\n        colorPalette: 'button.light.accent',\n        color: 'colorPalette.secondary',\n      })}\n    >\n      Nested color palette leaf\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Padding to All Sides in JSX with Chakra UI and Panda\nDESCRIPTION: Demonstrates how to apply padding to all sides of an element using the 'padding' property or its shorthand 'p' in Chakra UI with Panda.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/spacing.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ padding: '4' })} />\n<div className={css({ p: '4' })} /> // shorthand\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Utilities in Panda CSS\nDESCRIPTION: Shows how to define custom utilities in Panda CSS using the utilities.extend configuration in panda.config.ts. This example creates a linearGradient utility with property mapping, custom class name, and value transformation.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/migration/stitches.md#2025-04-18_snippet_16\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  utilities: {\n    extend: {\n      linearGradient: {\n        // (optional): the css property this maps to (to inherit the types from)\n        property: 'backgroundImage',\n        // (optional): the className to generate\n        className: 'bg_gradient',\n        // (optional): the shorthand name to use in the css\n        shorthand: 'gradient',\n        // (required): maps the value to the raw css object\n        transform: value => ({\n          backgroundImage: `linear-gradient(${value})`\n        })\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: JSX Factory Array CSS Values Example\nDESCRIPTION: Demonstrates the support for array values in the special css property for JSX factory and patterns, allowing easier merging of styles from multiple sources.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Stack, styled } from '../styled-system/jsx'\n\nconst HeroSection = (props) => {\n  return (\n    <Stack css={[{ color: 'blue.300', padding: '4' }, props.css]}>\n      <styled.div css={[{ fontSize: '2xl' }, props.hero]}>Hero Section</styled.div>\n    </Stack>\n  )\n}\n\nconst App = () => {\n  return (\n    <>\n      <HeroSection css={{ backgroundColor: 'yellow.300' }} hero={css.raw({ fontSize: '4xl', color: 'red.300' })} />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Arbitrary Breakpoint Usage Example\nDESCRIPTION: Demonstrates using arbitrary breakpoint values with hideFrom utility\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_78\n\nLANGUAGE: jsx\nCODE:\n```\ncss({ hideFrom: '800px' })\n// => @media screen and (min-width: 800px) { background: red; }\n```\n\n----------------------------------------\n\nTITLE: Package.json Script Updates for Panda CSS\nDESCRIPTION: Required changes to package.json scripts section to integrate Panda CSS build process.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/vue.mdx#2025-04-18_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n{\n  \"scripts\": {\n+    \"prepare\": \"panda codegen\",\n    \"dev\": \"vite\",\n    \"build\": \"run-p type-check build-only\",\n    \"preview\": \"vite preview\",\n    \"build-only\": \"vite build\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding compound variant styles in a styled component\nDESCRIPTION: Example of using a styled component that overrides compound variant styles by setting properties directly on the component instance.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_88\n\nLANGUAGE: tsx\nCODE:\n```\nimport { styled } from '../styled-system/jsx'\nimport { button } from '../styled-system/recipes'\n\nconst Button = styled('button', button)\n\nfunction App() {\n  return (\n    <>\n      <Button size=\"small\" color=\"red.100\">\n        Click me\n      </Button>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Recipe Configuration in TypeScript\nDESCRIPTION: Example showing how to define a card recipe with size and visual variants using defineRecipe and how to reference it in the Panda CSS configuration.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_96\n\nLANGUAGE: typescript\nCODE:\n```\nconst card = defineRecipe({\n  className: 'card',\n  base: { color: 'white' },\n  variants: {\n    size: {\n      small: { fontSize: '14px' },\n      large: { fontSize: '18px' },\n    },\n    visual: {\n      primary: { backgroundColor: 'blue' },\n      secondary: { backgroundColor: 'gray' },\n    },\n  },\n})\n\nexport default defineConfig({\n  // ...\n  staticCss: {\n    recipes: {\n      card: ['*'], // this\n\n      // was equivalent to:\n      card: [\n        // notice how `responsive: true` was implicitly added\n        { size: ['*'], responsive: true },\n        { visual: ['*'], responsive: true },\n      ],\n\n      //   will now correctly be equivalent to:\n      card: [{ size: ['*'] }, { visual: ['*'] }],\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Panda CSS with Package Managers\nDESCRIPTION: Commands to install Panda CSS and its dependencies using different package managers (pnpm, npm, yarn, bun).\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/postcss.mdx#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install -D @pandacss/dev postcss\npnpm panda init -p\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D @pandacss/dev postcss\nnpx panda init -p\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D @pandacss/dev postcss\nyarn panda init -p\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add -D @pandacss/dev postcss\nbun panda init -p\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Commands to enter the project directory and install dependencies using different package managers.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/svelte.mdx#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd test-app\npnpm install\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd test-app\nnpm install\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd test-app\nyarn\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd test-app\nbun install\n```\n\n----------------------------------------\n\nTITLE: Config Recipe Definition\nDESCRIPTION: Example of defining a config recipe with className, description, and variants.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/recipes.md#2025-04-18_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { defineRecipe } from '@pandacss/dev'\n\nexport const buttonRecipe = defineRecipe({\n  className: 'button',\n  description: 'The styles for the Button component',\n  base: {\n    display: 'flex'\n  },\n  variants: {\n    visual: {\n      funky: { bg: 'red.200', color: 'white' },\n      edgy: { border: '1px solid {colors.red.500}' }\n    },\n    size: {\n      sm: { padding: '4', fontSize: '12px' },\n      lg: { padding: '8', fontSize: '40px' }\n    },\n    shape: {\n      square: { borderRadius: '0' },\n      circle: { borderRadius: 'full' }\n    }\n  },\n  defaultVariants: {\n    visual: 'funky',\n    size: 'sm',\n    shape: 'circle'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Panda CSS Content Paths\nDESCRIPTION: Updates the panda.config.ts file to include Storybook component paths in the 'include' section.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/storybook.mdx#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from \"@pandacss/dev\"\nexport default defineConfig({\n preflight: true,\n include: [\n  \"./src/**/*.{js,jsx,ts,tsx}\",\n  \"./pages/**/*.{js,jsx,ts,tsx}\",\n  \"./stories/**/*.{js,jsx,ts,tsx}\",\n ],\n exclude: [],\n outdir: \"styled-system\",\n})\n```\n\n----------------------------------------\n\nTITLE: Smart Class Name Merging with CX Function\nDESCRIPTION: Example showing how the cx function intelligently merges and deduplicates styles when multiple style objects are passed.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_59\n\nLANGUAGE: tsx\nCODE:\n```\n<h1 className={cx(css({ mx: '3', paddingTop: '4' }), css({ mx: '10', pt: '6' }))}>Will result in \"mx_10 pt_6\"</h1>\n```\n\n----------------------------------------\n\nTITLE: Creating Token Aliases with Panda\nDESCRIPTION: Demonstrates how to create token aliases in Panda using CSS variables, showing the difference in approach compared to Stitches.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/migration/stitches.md#2025-04-18_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\nimport { styled } from '../styled-system/jsx'\n\nconst Button = styled('button', {\n  base: {\n    '--shadowColor': 'colors.pink500',\n    boxShadow: '0 0 0 15px var(--shadowColor)'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Panda CSS Autocomplete\nDESCRIPTION: Update to tsconfig.json to include the styled-system directory for better IDE autocomplete support with Panda CSS.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/nextjs.mdx#2025-04-18_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ...\n  \"include\":  [\"src\", \"styled-system\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Recipe Interface Export Error Example\nDESCRIPTION: Example of TypeScript error when recipe interfaces are not properly exported from the recipes index file\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_80\n\nLANGUAGE: typescript\nCODE:\n```\nsrc/ui/avatar.tsx (16:318) \"AvatarRecipe\" is not exported by \"styled-system/recipes/index.d.ts\", imported by \"src/ui/avatar.tsx\".\nsrc/ui/card.tsx (2:164) \"CardRecipe\" is not exported by \"styled-system/recipes/index.d.ts\", imported by \"src/ui/card.tsx\".\nsrc/ui/checkbox.tsx (19:310) \"CheckboxRecipe\" is not exported by \"styled-system/recipes/index.d.ts\", imported by \"src/ui/checkbox.tsx\".\n```\n\n----------------------------------------\n\nTITLE: Using Panda CSS in an Angular component\nDESCRIPTION: This snippet shows how to use Panda CSS in an Angular component (src/app.component.ts). It demonstrates importing the css function from the generated styled-system and applying styles to a div element.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/angular.mdx#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component } from '@angular/core';\nimport { css } from '../styled-system/css';\n\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  template: `\n    <div [class]=\"redBg\"></div>\n  `,\n})\nexport class App {\n  redBg = css({ bg: 'red.400' });\n}\n```\n\n----------------------------------------\n\nTITLE: Updating package.json scripts for Panda CSS integration\nDESCRIPTION: This snippet demonstrates how to update the scripts section in package.json to include the Panda CSS codegen command, ensuring it runs before each build.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/angular.mdx#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"prepare\": \"panda codegen\",\n    \"ng\": \"ng\",\n    \"start\": \"ng serve\",\n    \"build\": \"ng build\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding New Conditions to Panda CSS\nDESCRIPTION: This code block lists new conditions added to the Panda CSS preset base package, including their corresponding CSS selectors.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/preset-base/CHANGELOG.md#2025-04-18_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- bb37d2b: Add support for new conditions\n\n  - `current` -> `&:is([aria-current=true], [data-current])`\n  - `today` -> `&[data-today]`\n  - `unavailable` -> `&[data-unavailable]`\n  - `rangeStart` -> `&[data-range-start]`\n  - `rangeEnd` -> `&[data-range-end]`\n  - `now` -> `&[data-now]`\n  - `topmost` -> `&[data-topmost]`\n  - `icon` -> `& :where(svg)`\n  - `complete` -> `&[data-complete]`\n  - `incomplete` -> `&[data-incomplete]`\n  - `dragging` -> `&[data-dragging]`\n  - `grabbed` -> `&[data-grabbed]`\n  - `underValue` -> `&[data-state=under-value]`\n  - `overValue` -> `&[data-state=over-value]`\n  - `atValue` -> `&[data-state=at-value]`\n  - `hidden` -> `&:is([hidden], [data-hidden])`\n```\n\n----------------------------------------\n\nTITLE: Running CLI Helper Command in TypeScript\nDESCRIPTION: Command to display the helper information for the CLI tool using Bun runtime.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/codegen/README.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nbun cli.ts -h\n```\n\n----------------------------------------\n\nTITLE: Hiding Elements from Breakpoint in Panda (JSX)\nDESCRIPTION: Shows how to use the 'hideFrom' property to hide an element from a specific breakpoint and above. In this case, the element is hidden from the 'md' breakpoint.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/display.md#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ display: 'flex', hideFrom: 'md' })} />\n```\n\n----------------------------------------\n\nTITLE: Arbitrary Value Escape-Hatch with strictTokens in TypeScript\nDESCRIPTION: Example of using the escape-hatch for arbitrary values when using config.strictTokens. By prefixing with [ and suffixing with ], values bypass token validation even when strictTokens is true.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_100\n\nLANGUAGE: typescript\nCODE:\n```\nimport { css } from '../styled-system/css'\n\ncss({\n  // @ts-expect-error TS will throw when using from strictTokens: true\n  color: '#fff',\n  // @ts-expect-error TS will throw when using from strictTokens: true\n  width: '100px',\n\n  // ✅ but this is now allowed:\n  bgColor: '[rgb(51 155 240)]',\n  fontSize: '[12px]',\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Panda Hash in JSON\nDESCRIPTION: This snippet demonstrates how to enable hashing for generated class names and CSS variables in Panda configuration.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/references/config.md#2025-04-18_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hash\": true\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hash\": { \"cssVar\": true, \"className\": false }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hash\": { \"cssVar\": false, \"className\": true }\n}\n```\n\n----------------------------------------\n\nTITLE: Main Config with Recipe Static CSS\nDESCRIPTION: Alternative configuration approach defining static CSS rules in the main config file\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/guides/static.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  // ...\n  staticCss: {\n    recipes: {\n      card: {\n        size: ['*']\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Dark Mode in Storybook\nDESCRIPTION: Instructions for setting up dark mode in Storybook using the @storybook/addon-themes package.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/storybook.mdx#2025-04-18_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { withThemeByClassName } from '@storybook/addon-themes';\nimport type { Preview, ReactRenderer } from '@storybook/react';\n\nconst preview: Preview = {\n  // ...\n  decorators: [\n    withThemeByClassName<ReactRenderer>({\n      themes: {\n        light: '',\n        dark: 'dark',\n      },\n      defaultTheme: 'light',\n    }),\n  ],\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Using the Button Component with Style Overrides\nDESCRIPTION: Example of using the Button component with the css prop to override styles, demonstrating how styles are merged between component defaults and consumer preferences.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_85\n\nLANGUAGE: tsx\nCODE:\n```\nimport { css } from '../../styled-system/css'\nimport { Button, Thingy } from './Button'\n\nexport default function Page() {\n  return (\n    <Button css={{ color: 'pink', _hover: { color: 'red' } }}>\n      will result in `class=\"d_flex items_center text_pink hover:text_red\"`\n    </Button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using an Asynchronous Preset in PandaCSS Configuration\nDESCRIPTION: Demonstrates how to use an asynchronous preset function in your panda.config.ts file by invoking the function when providing it to the presets array.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/customization/presets.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// panda.config.ts\nimport { defineConfig } from '@pandacss/dev'\nimport myPreset from './my-preset'\n\nexport default defineConfig({\n  presets: [myPreset()]\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Outline Color in Panda CSS\nDESCRIPTION: Examples of setting outline color using semantic color tokens. Demonstrates both outlineColor and ringColor (shorthand) properties.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/outline.md#2025-04-18_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ outlineColor: 'blue.500' })} />\n<div className={css({ ringColor: 'blue.500' })} /> // shorthand\n```\n\n----------------------------------------\n\nTITLE: Unifying Token Path Syntax in Panda Config\nDESCRIPTION: Shows how to use the 'formatTokenName' hook to unify token path syntax in Panda configuration. This allows for consistent token referencing across different contexts.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  hooks: {\n    'tokens:created': ({ configure }) => {\n      configure({\n        formatTokenName: (path: string[]) => '$' + path.join('-'),\n      })\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Generated CSS Output with color-mix Function\nDESCRIPTION: The CSS output generated when using the color opacity syntax. It creates a CSS variable for the mixed color and provides a fallback for browsers that don't support color-mix.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_25\n\nLANGUAGE: css\nCODE:\n```\n@layer utilities {\n  .bg_red\\.300\\/40 {\n    --mix-background: color-mix(in srgb, var(--colors-red-300) 40%, transparent);\n    background: var(--mix-background, var(--colors-red-300));\n  }\n\n  .text_white {\n    color: var(--colors-white);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated CSS Variables Example\nDESCRIPTION: Example of the CSS output generated for CSS custom properties with the configured root selector.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/theming/tokens.md#2025-04-18_snippet_17\n\nLANGUAGE: css\nCODE:\n```\n:where(:root, :host) {\n  --colors-primary: #0fee0f;\n  --colors-secondary: #ee0f0f;\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration\nDESCRIPTION: TSConfig update to enable autocomplete for Panda CSS.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/postcss.mdx#2025-04-18_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"include\":  [\"src\", \"styled-system\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Styled Factory Composition Example\nDESCRIPTION: Example demonstrating fixed nested styled factory composition with proper font size inheritance.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_35\n\nLANGUAGE: tsx\nCODE:\n```\nimport { styled } from '../styled-system/jsx'\n\nconst BasicBox = styled('div', { base: { fontSize: '10px' } })\nconst ExtendedBox1 = styled(BasicBox, { base: { fontSize: '20px' } })\nconst ExtendedBox2 = styled(ExtendedBox1, { base: { fontSize: '30px' } })\n\nexport const App = () => {\n  return (\n    <>\n      {/* ✅ fs_10px */}\n      <BasicBox>text1</BasicBox>\n      {/* ✅ fs_20px */}\n      <ExtendedBox1>text2</ExtendedBox1>\n      {/* BEFORE: ❌ fs_10px fs_30px */}\n      {/* NOW: ✅ fs_30px */}\n      <ExtendedBox2>text3</ExtendedBox2>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using css.raw for Style Objects in Different Files\nDESCRIPTION: Shows how to use css.raw to preserve style objects when they are not in the same file as the component. The css.raw function acts as an identity function that signals to the compiler that the value is a style object.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/merging-styles.md#2025-04-18_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// style.js\nimport { css } from 'styled-system/css'\n\nexport const style1 = css.raw({\n  bg: 'red',\n  color: 'white'\n})\n\n// component.js\nimport { css } from 'styled-system/css'\nimport { style1 } from './style.js'\n\nconst style2 = css.raw({\n  bg: 'blue'\n})\n\nconst className = css(style1, style2) // => 'bg_blue text_white'\n```\n\n----------------------------------------\n\nTITLE: CSS Layer Configuration\nDESCRIPTION: CSS file defining the layer order for Panda CSS.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/react-router.mdx#2025-04-18_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n@layer reset, base, tokens, recipes, utilities;\n```\n\n----------------------------------------\n\nTITLE: Configuring Validation Strictness in Panda CSS\nDESCRIPTION: Example of setting the validation strictness level, which determines how configuration validation errors are handled.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/references/config.md#2025-04-18_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"validation\": \"error\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring tsconfig.json for Panda CSS\nDESCRIPTION: Example of how to update tsconfig.json to include the 'styled-system' directory. This helps with IDE autocomplete for Panda CSS imports.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/cli.mdx#2025-04-18_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ...\n  \"include\":  [\"src\", \"styled-system\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating package.json for Next.js Cache Clearing\nDESCRIPTION: Modification to the package.json dev script to clear Next.js cache before starting the development server.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/nextjs.mdx#2025-04-18_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n-    \"dev\": \"next dev\",\n+    \"dev\": \"rm -rf .next && next dev\",\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Error Example: Missing ComponentProps Type\nDESCRIPTION: Example of a TypeScript error that occurs when the ComponentProps type isn't properly exported from the JSX types file.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_109\n\nLANGUAGE: typescript\nCODE:\n```\n\"ComponentProps\" is not exported by \"styled-system/types/jsx.d.ts\", imported by \"src/ui/form-control.tsx\".\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definition for Strictable Props\nDESCRIPTION: Type definition listing CSS properties that can be strictly typed with the strictPropertyValues configuration option. Includes layout, positioning, and visual formatting properties.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\ntype StrictableProps =\n  | 'alignContent'\n  | 'alignItems'\n  | 'alignSelf'\n  | 'all'\n  | 'animationComposition'\n  | 'animationDirection'\n  | 'animationFillMode'\n  | 'appearance'\n  | 'backfaceVisibility'\n  | 'backgroundAttachment'\n  | 'backgroundClip'\n  | 'borderCollapse'\n  | 'border'\n  | 'borderBlock'\n  | 'borderBlockEnd'\n  | 'borderBlockStart'\n  | 'borderBottom'\n  | 'borderInline'\n  | 'borderInlineEnd'\n  | 'borderInlineStart'\n  | 'borderLeft'\n  | 'borderRight'\n  | 'borderTop'\n  | 'borderBlockEndStyle'\n  | 'borderBlockStartStyle'\n  | 'borderBlockStyle'\n  | 'borderBottomStyle'\n  | 'borderInlineEndStyle'\n  | 'borderInlineStartStyle'\n  | 'borderInlineStyle'\n  | 'borderLeftStyle'\n  | 'borderRightStyle'\n  | 'borderTopStyle'\n  | 'boxDecorationBreak'\n  | 'boxSizing'\n  | 'breakAfter'\n  | 'breakBefore'\n  | 'breakInside'\n  | 'captionSide'\n  | 'clear'\n  | 'columnFill'\n  | 'columnRuleStyle'\n  | 'contentVisibility'\n  | 'direction'\n  | 'display'\n  | 'emptyCells'\n  | 'flexDirection'\n  | 'flexWrap'\n  | 'float'\n  | 'fontKerning'\n  | 'forcedColorAdjust'\n  | 'isolation'\n  | 'lineBreak'\n  | 'mixBlendMode'\n  | 'objectFit'\n  | 'outlineStyle'\n  | 'overflow'\n  | 'overflowX'\n  | 'overflowY'\n  | 'overflowBlock'\n  | 'overflowInline'\n  | 'overflowWrap'\n  | 'pointerEvents'\n  | 'position'\n  | 'resize'\n  | 'scrollBehavior'\n  | 'touchAction'\n  | 'transformBox'\n  | 'transformStyle'\n  | 'userSelect'\n  | 'visibility'\n  | 'wordBreak'\n  | 'writingMode'\n```\n\n----------------------------------------\n\nTITLE: CSS Variable Root Configuration in JavaScript\nDESCRIPTION: Shows how to configure the CSS variable root selector in Panda CSS configuration.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/theming/tokens.md#2025-04-18_snippet_16\n\nLANGUAGE: js\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  cssVarRoot: ':where(:root, :host)'\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Panda Import Map in JSON\nDESCRIPTION: This snippet demonstrates how to customize import paths for the generated output directory in Panda configuration.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/references/config.md#2025-04-18_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"importMap\": {\n    \"css\": \"@acme/styled-system\",\n    \"recipes\": \"@acme/styled-system\",\n    \"patterns\": \"@acme/styled-system\",\n    \"jsx\": \"@acme/styled-system\"\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"importMap\": \"@scope/styled-system\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradient Positions in CSS\nDESCRIPTION: Example of using the new gradientFromPosition and gradientToPosition utilities to control the position of gradient color stops.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\n<div\n  className={css({\n    bgGradient: 'to-r',\n    // from\n    gradientFrom: 'red',\n    gradientFromPosition: 'top left',\n    // to\n    gradientTo: 'blue',\n    gradientToPosition: 'bottom right',\n  })}\n/>\n```\n\n----------------------------------------\n\nTITLE: Type Safety in Panda CSS\nDESCRIPTION: Demonstrates type safety features in Panda CSS, showing autocomplete for color values in TypeScript.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/writing-styles.md#2025-04-18_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { css } from '../styled-system/css'\n\n//                       ⤵ you'll get autocomplete for colors\nconst styles = css({ bg: '|' })\n```\n\n----------------------------------------\n\nTITLE: Using PANDA_DEBUG Environment Variable\nDESCRIPTION: Example of using the PANDA_DEBUG environment variable to show debug logs when running Panda CLI commands. This can help in checking if specific files are being processed or if functions/components have been extracted.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/guides/debugging.mdx#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nPANDA_DEBUG=* pnpm panda\n```\n\n----------------------------------------\n\nTITLE: Setting Aspect Ratio Tokens in JavaScript\nDESCRIPTION: Shows how to define aspect ratio tokens for controlling element proportions.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/theming/tokens.md#2025-04-18_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nconst theme = {\n  tokens: {\n    aspectRatios: {\n      '1:1': { value: '1 / 1' },\n      '16:9': { value: '16 / 9' }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Wildcard for StaticCSS Recipe Generation\nDESCRIPTION: Feature update that allows using wildcards to generate all variants of a recipe in staticCss configuration, showing both the old and new syntax.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_104\n\nLANGUAGE: typescript\nCODE:\n```\n// before:\nstaticCss: {\n  recipes: {\n    button: [{ size: ['*'], shape: ['*'] }]\n  }\n}\n\n// now:\nstaticCss: {\n  recipes: {\n    button: ['*']\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Storybook Integration Example\nDESCRIPTION: Shows how to integrate recipes with Storybook for component documentation.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/recipes.md#2025-04-18_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button, buttonRecipe } from './components/button'\n\nexport default {\n  title: 'Button',\n  component: Button,\n  argTypes: {\n    size: {\n      control: {\n        type: 'select',\n        options: buttonRecipe.variantMap.size\n      }\n    }\n  }\n}\n\nexport const Demo = {\n  render: args => <Button {...args}>Click me</Button>\n}\n```\n\n----------------------------------------\n\nTITLE: Array CSS Values in JSX Components\nDESCRIPTION: Demonstrates the new support for array values in special CSS property for JSX factory and patterns.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Stack, styled } from '../styled-system/jsx'\n\nconst HeroSection = (props) => {\n  return (\n    <Stack css={[{ color: 'blue.300', padding: '4' }, props.css]}>\n      <styled.div css={[{ fontSize: '2xl' }, props.hero]}>Hero Section</styled.div>\n    </Stack>\n  )\n}\n\nconst App = () => {\n  return (\n    <>\n      <HeroSection css={{ backgroundColor: 'yellow.300' }} hero={css.raw({ fontSize: '4xl', color: 'red.300' })} />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Panda CSS with Plugins and Hooks\nDESCRIPTION: Shows how to use definePlugin for type-safe plugin configuration and demonstrates the usage of config hooks for transforming the final configuration.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/config/CHANGELOG.md#2025-04-18_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  // ...\n  hooks: {\n    'config:resolved': ({ config, utils }) => {\n      return utils.omit(config, ['patterns.stack'])\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Applying Logical Padding Properties in JSX with Chakra UI and Panda\nDESCRIPTION: Demonstrates the use of logical padding properties 'paddingStart' and 'paddingEnd', which apply padding based on text direction, along with their shorthand versions 'ps' and 'pe'.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/spacing.md#2025-04-18_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ paddingStart: '8' })} />\n<div className={css({ ps: '8' })} /> // shorthand\n\n<div className={css({ paddingEnd: '8' })} />\n<div className={css({ pe: '8' })} /> // shorthand\n```\n\n----------------------------------------\n\nTITLE: Defining Strictable CSS Properties in TypeScript\nDESCRIPTION: A type definition listing CSS properties that can be enforced with strict value checking using the strictPropertyValues configuration option.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\ntype StrictableProps =\n  | 'alignContent'\n  | 'alignItems'\n  | 'alignSelf'\n  | 'all'\n  | 'animationComposition'\n  | 'animationDirection'\n  | 'animationFillMode'\n  | 'appearance'\n  | 'backfaceVisibility'\n  | 'backgroundAttachment'\n  | 'backgroundClip'\n  | 'borderCollapse'\n  | 'border'\n  | 'borderBlock'\n  | 'borderBlockEnd'\n  | 'borderBlockStart'\n  | 'borderBottom'\n  | 'borderInline'\n  | 'borderInlineEnd'\n  | 'borderInlineStart'\n  | 'borderLeft'\n  | 'borderRight'\n  | 'borderTop'\n  | 'borderBlockEndStyle'\n  | 'borderBlockStartStyle'\n  | 'borderBlockStyle'\n  | 'borderBottomStyle'\n  | 'borderInlineEndStyle'\n  | 'borderInlineStartStyle'\n  | 'borderInlineStyle'\n  | 'borderLeftStyle'\n  | 'borderRightStyle'\n  | 'borderTopStyle'\n  | 'boxDecorationBreak'\n  | 'boxSizing'\n  | 'breakAfter'\n  | 'breakBefore'\n  | 'breakInside'\n  | 'captionSide'\n  | 'clear'\n  | 'columnFill'\n  | 'columnRuleStyle'\n  | 'contentVisibility'\n  | 'direction'\n  | 'display'\n  | 'emptyCells'\n  | 'flexDirection'\n  | 'flexWrap'\n  | 'float'\n  | 'fontKerning'\n  | 'forcedColorAdjust'\n  | 'isolation'\n  | 'lineBreak'\n  | 'mixBlendMode'\n  | 'objectFit'\n  | 'outlineStyle'\n  | 'overflow'\n  | 'overflowX'\n  | 'overflowY'\n  | 'overflowBlock'\n  | 'overflowInline'\n  | 'overflowWrap'\n  | 'pointerEvents'\n  | 'position'\n  | 'resize'\n  | 'scrollBehavior'\n  | 'touchAction'\n  | 'transformBox'\n  | 'transformStyle'\n  | 'userSelect'\n  | 'visibility'\n  | 'wordBreak'\n  | 'writingMode'\n```\n\n----------------------------------------\n\nTITLE: Color-Mix Utility Usage in Panda CSS\nDESCRIPTION: Example of using the color-mix function for opacity adjustments with the {color}/{opacity} syntax. This generates CSS using the color-mix() function with fallbacks for browser compatibility.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/fixture/CHANGELOG.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ncss({\n  bg: 'red.300/40',\n  color: 'white',\n})\n```\n\n----------------------------------------\n\nTITLE: Comparing CSS Output Before and After staticCss Changes\nDESCRIPTION: A diff showing the reduction in generated CSS after fixing the [*] rule behavior. The change removes unnecessary responsive variants of recipe classes, resulting in significantly smaller CSS output.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_25\n\nLANGUAGE: diff\nCODE:\n```\n@layer recipes {\n  .card--size_small {\n    font-size: 14px;\n  }\n\n  .card--size_large {\n    font-size: 18px;\n  }\n\n  .card--visual_primary {\n    background-color: blue;\n  }\n\n  .card--visual_secondary {\n    background-color: gray;\n  }\n\n  @layer _base {\n    .card {\n      color: var(--colors-white);\n    }\n  }\n\n-  @media screen and (min-width: 40em) {\n-    -.sm\\:card--size_small {\n-      -font-size: 14px;\n-    -}\n-    -.sm\\:card--size_large {\n-      -font-size: 18px;\n-    -}\n-    -.sm\\:card--visual_primary {\n-      -background-color: blue;\n-    -}\n-    -.sm\\:card--visual_secondary {\n-      -background-color: gray;\n-    -}\n-  }\n\n-  @media screen and (min-width: 48em) {\n-    -.md\\:card--size_small {\n-      -font-size: 14px;\n-    -}\n-    -.md\\:card--size_large {\n-      -font-size: 18px;\n-    -}\n-    -.md\\:card--visual_primary {\n-      -background-color: blue;\n-    -}\n-    -.md\\:card--visual_secondary {\n-      -background-color: gray;\n-    -}\n-  }\n\n-  @media screen and (min-width: 64em) {\n-    -.lg\\:card--size_small {\n-      -font-size: 14px;\n-    -}\n-    -.lg\\:card--size_large {\n-      -font-size: 18px;\n-    -}\n-    -.lg\\:card--visual_primary {\n-      -background-color: blue;\n-    -}\n-    -.lg\\:card--visual_secondary {\n-      -background-color: gray;\n-    -}\n-  }\n\n-  @media screen and (min-width: 80em) {\n-    -.xl\\:card--size_small {\n-      -font-size: 14px;\n-    -}\n-    -.xl\\:card--size_large {\n-      -font-size: 18px;\n-    -}\n-    -.xl\\:card--visual_primary {\n-      -background-color: blue;\n-    -}\n-    -.xl\\:card--visual_secondary {\n-      -background-color: gray;\n-    -}\n-  }\n\n-  @media screen and (min-width: 96em) {\n-    -.\\32xl\\:card--size_small {\n-      -font-size: 14px;\n-    -}\n-    -.\\32xl\\:card--size_large {\n-      -font-size: 18px;\n-    -}\n-    -.\\32xl\\:card--visual_primary {\n-      -background-color: blue;\n-    -}\n-    -.\\32xl\\:card--visual_secondary {\n-      -background-color: gray;\n-    -}\n-  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and configuring Panda CSS for Qwik using npm\nDESCRIPTION: Command to install and configure Panda CSS for a Qwik project using npm.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/qwik.mdx#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run qwik add pandacss\n```\n\n----------------------------------------\n\nTITLE: React Router Root Component Setup\nDESCRIPTION: Root component configuration importing and using Panda CSS styles.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/react-router.mdx#2025-04-18_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  isRouteErrorResponse,\n  Links,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n} from \"react-router\";\n\nimport type { Route } from \"./+types/root\";\nimport stylesheet from \"./app.css?url\";\n\nexport const links: LinksFunction = () => [\n  // ...\n  { rel: \"stylesheet\", href: stylesheet },\n];\n\nexport function Layout({ children }: { children: React.ReactNode }) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        {children}\n        <ScrollRestoration />\n        <Scripts />\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Themes with Panda using Semantic Tokens\nDESCRIPTION: Demonstrates how to define themes in Panda using semantic tokens, showing the difference in approach compared to Stitches.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/migration/stitches.md#2025-04-18_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  theme: {\n    semanticTokens: {\n      colors: {\n        gray100: {\n          value: { base: 'hsl(206,22%,99%)', _dark: 'hsl(206,8%,12%)' }\n        },\n        gray200: {\n          value: { base: 'hsl(206,12%,97%)', _dark: 'hsl(206,7%,14%)' }\n        }\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Panda CSS Entry File\nDESCRIPTION: JSX code showing how to import the Panda CSS entry file in your application.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/README.md#2025-04-18_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport 'path/to/entry.css'\n```\n\n----------------------------------------\n\nTITLE: Generating Styled-System Directories for Nuxt App\nDESCRIPTION: These commands navigate to the nuxt-app package directory and generate the styled-system files using Panda CSS.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/component-lib/nuxt-lib-source/README.md#2025-04-18_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd packages/nuxt-app\npnpm css\n```\n\n----------------------------------------\n\nTITLE: Configuring Styled Factory Options Interface in TypeScript\nDESCRIPTION: Interface definition for styled factory options including dataAttr, defaultProps and shouldForwardProp configuration.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\ninterface FactoryOptions<TProps extends Dict> {\n  dataAttr?: boolean\n  defaultProps?: TProps\n  shouldForwardProp?(prop: string, variantKeys: string[]): boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Panda Config and PostCSS\nDESCRIPTION: Command to scaffold the Panda configuration and PostCSS setup using the CLI.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx panda init -p\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Query theme options\nDESCRIPTION: Configuration for CSS container queries in Panda CSS, defining container names and sizes to be used in styles.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_60\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  // ...\n  theme: {\n    extend: {\n      containerNames: ['sidebar', 'content'],\n      containerSizes: {\n        xs: '40em',\n        sm: '60em',\n        md: '80em',\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Cloning the Panda CSS Repository in Shell\nDESCRIPTION: Commands for forking and cloning the Panda CSS repository locally. This is the first step for contributing to the project, requiring Git and a GitHub account.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CONTRIBUTING.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/<your_github_username>/panda.git\ncd panda\n```\n\n----------------------------------------\n\nTITLE: Adding Font Variables to HTML in Next.js App Router\nDESCRIPTION: Shows how to add font variables to the HTML document using the App Router in Next.js.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/guides/fonts.md#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { FiraCode, MonaSans } from '../styles/font'\n\nexport default function Layout(props) {\n  const { children } = props\n  return (\n    <html className={`${MonaSans.variable} ${FiraCode.variable}`}>\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Fix Component Color Conditional Example in TSX\nDESCRIPTION: Example showing how color values should be extracted from conditional expressions with default values in component props\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/extractor/CHANGELOG.md#2025-04-18_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst CompB = ({ disabled = false }: { disabled: boolean }) => {\n  return <div className={css({ color: disabled ? 'blue' : 'yellow' })}>Component B is disabled</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Using shouldForwardProp Factory Option with Framer Motion\nDESCRIPTION: Example of using the shouldForwardProp option to integrate with Framer Motion by customizing which props are forwarded.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/style-props.mdx#2025-04-18_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport { styled } from '../styled-system/jsx'\nimport { button } from '../styled-system/recipes'\nimport { motion, isValidMotionProp } from 'framer-motion'\n\nconst StyledMotion = styled(\n  motion.div,\n  {},\n  {\n    shouldForwardProp: (prop, variantKeys) =>\n      isValidMotionProp(prop) ||\n      (!variantKeys.includes(prop) && !isCssProperty(prop))\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Creating CSS Variables for Fontsource Fonts\nDESCRIPTION: Shows how to create CSS variables for using Fontsource fonts in the project.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/guides/fonts.md#2025-04-18_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n:root {\n  --font-fira-code: 'Fira Code Variable', monospace;\n}\n```\n\n----------------------------------------\n\nTITLE: Using the styled API to create a styled component in Panda CSS\nDESCRIPTION: Demonstrates how to create a simple Button component using Panda's styled API. It shows basic styling with CSS properties and responsive design patterns.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/qwik-ts/public/robots.txt#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { styled } from \"../styled-system/jsx\"\n\nconst Button = styled('button', {\n  base: {\n    display: 'flex',\n    fontWeight: 'bold',\n    px: '4',\n    py: '2',\n    rounded: 'md',\n    bg: 'blue.500',\n    color: 'white',\n    _hover: {\n      bg: 'blue.600',\n    },\n  },\n  variants: {\n    size: {\n      sm: {\n        fontSize: 'sm',\n        px: '3',\n        py: '1',\n      },\n      md: {\n        fontSize: 'md',\n        px: '4',\n        py: '2',\n      },\n      lg: {\n        fontSize: 'lg',\n        px: '5',\n        py: '3',\n      },\n    },\n  },\n  defaultVariants: {\n    size: 'md',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a new Qwik project using bun\nDESCRIPTION: Command to create a new Qwik project using the typescript template with bun.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/qwik.mdx#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbun create qwik@latest\n```\n\n----------------------------------------\n\nTITLE: Custom Utility Transform Configuration\nDESCRIPTION: Shows how to configure a custom utility transform function using the colorMix utility in PandaCSS config.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/color-opacity-modifier.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  utilities: {\n    background: {\n      shorthand: 'bg',\n      className: 'bg',\n      values: 'colors',\n      transform(value, args) {\n        const mix = args.utils.colorMix(value)\n        // This can happen if the value format is invalid (e.g. `bg: red.300/invalid` or `bg: red.300//10`)\n        if (mix.invalid) return { background: value }\n\n        return {\n          background: mix.value\n        }\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Panda Theme Configuration\nDESCRIPTION: Defining theme tokens in Panda using the configuration file.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/migration/styled-components.md#2025-04-18_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  theme: {\n    extend: {\n      tokens: {\n        colors: {\n          primary: { value: 'blue' },\n          secondary: { value: 'red' }\n        }\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Import Maps in Panda CSS\nDESCRIPTION: Example of configuring multiple import sources in Panda CSS, allowing usage of multiple styled-system implementations simultaneously from different libraries.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  importMap: ['@acme/styled-system', '@ui-lib/styled-system', 'styled-system'],\n})\n```\n\n----------------------------------------\n\nTITLE: Changed Color Mode Selectors in Panda CSS\nDESCRIPTION: Diff showing changes to the default selectors for light and dark mode conditions, now targeting parent elements for more consistent behavior with pseudo elements.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_18\n\nLANGUAGE: diff\nCODE:\n```\nconst conditions = {\n-  _dark: '&.dark, .dark &',\n+  _dark: '.dark &',\n-  _light: '&.light, .light &',\n+  _light: '.light &',\n}\n```\n\n----------------------------------------\n\nTITLE: Using 'jsx' Property for Advanced Custom Component Tracking\nDESCRIPTION: Feature in version 0.9.0 that updates the 'jsx' property to track custom pattern components, allowing for better component recognition in the styling system.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_47\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Circle } from 'styled-system/jsx'\nconst CustomCircle = ({ children, ...props }) => {\n  return <Circle {...props}>{children}</Circle>\n}\n```\n\n----------------------------------------\n\nTITLE: StrictableProps Type Definition in TypeScript\nDESCRIPTION: This code snippet defines the TypeScript type `StrictableProps` which lists all CSS properties that can be strictly checked by the new `config.strictPropertyValues` option. This includes properties like alignContent, display, position, and many others.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_97\n\nLANGUAGE: typescript\nCODE:\n```\ntype StrictableProps =\n  | 'alignContent'\n  | 'alignItems'\n  | 'alignSelf'\n  | 'all'\n  | 'animationComposition'\n  | 'animationDirection'\n  | 'animationFillMode'\n  | 'appearance'\n  | 'backfaceVisibility'\n  | 'backgroundAttachment'\n  | 'backgroundClip'\n  | 'borderCollapse'\n  | 'border'\n  | 'borderBlock'\n  | 'borderBlockEnd'\n  | 'borderBlockStart'\n  | 'borderBottom'\n  | 'borderInline'\n  | 'borderInlineEnd'\n  | 'borderInlineStart'\n  | 'borderLeft'\n  | 'borderRight'\n  | 'borderTop'\n  | 'borderBlockEndStyle'\n  | 'borderBlockStartStyle'\n  | 'borderBlockStyle'\n  | 'borderBottomStyle'\n  | 'borderInlineEndStyle'\n  | 'borderInlineStartStyle'\n  | 'borderInlineStyle'\n  | 'borderLeftStyle'\n  | 'borderRightStyle'\n  | 'borderTopStyle'\n  | 'boxDecorationBreak'\n  | 'boxSizing'\n  | 'breakAfter'\n  | 'breakBefore'\n  | 'breakInside'\n  | 'captionSide'\n  | 'clear'\n  | 'columnFill'\n  | 'columnRuleStyle'\n  | 'contentVisibility'\n  | 'direction'\n  | 'display'\n  | 'emptyCells'\n  | 'flexDirection'\n  | 'flexWrap'\n  | 'float'\n  | 'fontKerning'\n  | 'forcedColorAdjust'\n  | 'isolation'\n  | 'lineBreak'\n  | 'mixBlendMode'\n  | 'objectFit'\n  | 'outlineStyle'\n  | 'overflow'\n  | 'overflowX'\n  | 'overflowY'\n  | 'overflowBlock'\n  | 'overflowInline'\n  | 'overflowWrap'\n  | 'pointerEvents'\n  | 'position'\n  | 'resize'\n  | 'scrollBehavior'\n  | 'touchAction'\n  | 'transformBox'\n  | 'transformStyle'\n  | 'userSelect'\n  | 'visibility'\n  | 'wordBreak'\n  | 'writingMode'\n```\n\n----------------------------------------\n\nTITLE: Configuring Panda to Include Library Source Files\nDESCRIPTION: This configuration for Panda CSS includes source files from both the design system package and the application. This allows Panda to process styles from both locations.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/guides/component-library.md#2025-04-18_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  //...\n  include: ['../@acme-org/design-system/src/**/*.tsx', './src/**/*.{ts,tsx}'],\n  importMap: '@acme-org/styled-system',\n  outdir: 'styled-system'\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Scale X Transform in Panda (JSX)\nDESCRIPTION: Shows how to set a specific scaleX transform value on a div element using Panda's css utility.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/transforms.md#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ scaleX: '1.3' })} />\n```\n\n----------------------------------------\n\nTITLE: Adding Description to Tokens in Panda CSS Configuration\nDESCRIPTION: Shows how to add an optional description to tokens, which will be used in the autogenerated token documentation.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/theming/tokens.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  theme: {\n    tokens: {\n      colors: {\n        danger: {\n          value: '#EE0F0F',\n          description: 'Color for errors'\n        }\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Generated CSS for Container Queries\nDESCRIPTION: The CSS output generated when using container queries in Panda CSS. This shows how the container type and media query are transformed into CSS.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_32\n\nLANGUAGE: css\nCODE:\n```\n.cq-type_inline-size {\n  container-type: inline-size;\n}\n\n@container (min-width: 60em) {\n  .\\@\\/sm\\:fs_md {\n    container-type: inline-size;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Output Difference After staticCss Rule Change\nDESCRIPTION: Diff showing the reduction in generated CSS after fixing the [*] rule behavior. The patch removes unnecessary responsive variants, significantly reducing CSS output size.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_41\n\nLANGUAGE: diff\nCODE:\n```\n@layer recipes {\n  .card--size_small {\n    font-size: 14px;\n  }\n\n  .card--size_large {\n    font-size: 18px;\n  }\n\n  .card--visual_primary {\n    background-color: blue;\n  }\n\n  .card--visual_secondary {\n    background-color: gray;\n  }\n\n  @layer _base {\n    .card {\n      color: var(--colors-white);\n    }\n  }\n\n-  @media screen and (min-width: 40em) {\n-    -.sm\\:card--size_small {\n-      -font-size: 14px;\n-    -}\n-    -.sm\\:card--size_large {\n-      -font-size: 18px;\n-    -}\n-    -.sm\\:card--visual_primary {\n-      -background-color: blue;\n-    -}\n-    -.sm\\:card--visual_secondary {\n-      -background-color: gray;\n-    -}\n-  }\n\n-  @media screen and (min-width: 48em) {\n-    -.md\\:card--size_small {\n-      -font-size: 14px;\n-    -}\n-    -.md\\:card--size_large {\n-      -font-size: 18px;\n-    -}\n-    -.md\\:card--visual_primary {\n-      -background-color: blue;\n-    -}\n-    -.md\\:card--visual_secondary {\n-      -background-color: gray;\n-    -}\n-  }\n\n-  @media screen and (min-width: 64em) {\n-    -.lg\\:card--size_small {\n-      -font-size: 14px;\n-    -}\n-    -.lg\\:card--size_large {\n-      -font-size: 18px;\n-    -}\n-    -.lg\\:card--visual_primary {\n-      -background-color: blue;\n-    -}\n-    -.lg\\:card--visual_secondary {\n-      -background-color: gray;\n-    -}\n-  }\n\n-  @media screen and (min-width: 80em) {\n-    -.xl\\:card--size_small {\n-      -font-size: 14px;\n-    -}\n-    -.xl\\:card--size_large {\n-      -font-size: 18px;\n-    -}\n-    -.xl\\:card--visual_primary {\n-      -background-color: blue;\n-    -}\n-    -.xl\\:card--visual_secondary {\n-      -background-color: gray;\n-    -}\n-  }\n\n-  @media screen and (min-width: 96em) {\n-    -.\\32xl\\:card--size_small {\n-      -font-size: 14px;\n-    -}\n-    -.\\32xl\\:card--size_large {\n-      -font-size: 18px;\n-    -}\n-    -.\\32xl\\:card--visual_primary {\n-      -background-color: blue;\n-    -}\n-    -.\\32xl\\:card--visual_secondary {\n-      -background-color: gray;\n-    -}\n-  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Panda CSS and Initializing Configuration\nDESCRIPTION: Commands for installing Panda CSS and creating the initial configuration file using different package managers.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/astro.mdx#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install -D @pandacss/dev\npnpm panda init --postcss\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D @pandacss/dev\nnpx panda init --postcss\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D @pandacss/dev\nyarn panda init --postcss\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add -D @pandacss/dev\nbun panda init --postcss\n```\n\n----------------------------------------\n\nTITLE: Default Container Sizes in Panda Preset\nDESCRIPTION: The default container sizes defined in the @pandacss/preset-panda preset, showing the range of preset container breakpoints.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_116\n\nLANGUAGE: typescript\nCODE:\n```\nexport const containerSizes = {\n  xs: '320px',\n  sm: '384px',\n  md: '448px',\n  lg: '512px',\n  xl: '576px',\n  '2xl': '672px',\n  '3xl': '768px',\n  '4xl': '896px',\n  '5xl': '1024px',\n  '6xl': '1152px',\n  '7xl': '1280px',\n  '8xl': '1440px',\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Property-Based Conditionals with Escape-Hatch Syntax\nDESCRIPTION: Example showing the fixed typing issue with config.strictTokens when using [xxx] escape-hatch syntax with property-based conditionals.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_73\n\nLANGUAGE: typescript\nCODE:\n```\ncss({\n  bg: '[#3B00B9]', // ✅ was okay\n  _dark: {\n    // ✅ was okay\n    color: '[#3B00B9]',\n  },\n\n  // ❌ Not okay, will be fixed in this patch\n  color: {\n    _dark: '[#3B00B9]',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Logfile Option to PandaCSS Commands\nDESCRIPTION: Examples showing how to add a logfile option to PandaCSS commands and the PostCSS plugin for better debugging.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_108\n\nLANGUAGE: typescript\nCODE:\n```\n// CLI usage\npanda --logfile ./logs/panda.log\n\n// PostCSS configuration\nmodule.exports = {\n  plugins: {\n    '@pandacss/dev/postcss': {\n      logfile: './logs/panda.log',\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JSX Framework in Panda Config\nDESCRIPTION: This code sets the jsxFramework property in the Panda configuration file to enable JSX style props extraction for React.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/style-props.mdx#2025-04-18_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  // ...\n  jsxFramework: 'react'\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Panda CSS\nDESCRIPTION: JavaScript configuration for Panda CSS, specifying include paths and output directory.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/svelte.mdx#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from \"@pandacss/dev\"\n\nexport default defineConfig({\n // Whether to use css reset\n preflight: true,\n\n // Where to look for your css declarations\n include: ['./src/**/*.{js,ts,svelte}'],\n\n // Files to exclude\n exclude: [],\n\n // The output directory for your css system\n outdir: \"styled-system\",\n})\n```\n\n----------------------------------------\n\nTITLE: Semantic Token Configuration Example\nDESCRIPTION: Example of defining semantic tokens with conditional values in Panda CSS configuration.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_33\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineConfig({\n  semanticTokens: {\n    colors: {\n      blue: { value: 'blue' },\n      green: {\n        value: {\n          base: 'green',\n          _dark: 'white',\n        },\n      },\n      red: {\n        value: {\n          base: 'red',\n        },\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Token Names in Panda CSS\nDESCRIPTION: Demonstrates how to configure token names, particularly for tokens starting with '0', and how to use them in CSS generation.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  theme: {\n    tokens: {\n      spacing: {\n        '025': {\n          value: '0.125rem',\n        },\n      },\n    },\n  },\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\ncss({ margin: '025' })\n```\n\n----------------------------------------\n\nTITLE: Creating a new Angular project using CLI\nDESCRIPTION: This snippet shows how to create a new Angular project using the official scaffolding tool. It includes the command to run and the questions to answer during the setup process.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/angular.mdx#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nng new test-app\n```\n\nLANGUAGE: bash\nCODE:\n```\n? Which stylesheet format would you like to use? CSS\n? Do you want to enable Server-Side Rendering (SSR) and Static Site Generation (SSG/Prerendering)? No\n```\n\n----------------------------------------\n\nTITLE: Correct CSS Output Example for GlobalCSS Selectors\nDESCRIPTION: Shows the correct CSS output that should be generated for nested selectors in globalCSS after the fix. This represents the expected behavior.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_55\n\nLANGUAGE: css\nCODE:\n```\nhtml .aaa {\n  color: var(--colors-red-100);\n}\n\nhtml .aaa .bbb {\n  color: var(--colors-red-200);\n}\n\nhtml .aaa .bbb .ccc {\n  color: var(--colors-red-300);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Template Literals in Panda CSS\nDESCRIPTION: Set up your panda.config.ts file to use template literal syntax by setting the syntax option to 'template-literal' and optionally specifying the JSX framework.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/template-literals.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// panda.config.ts\nexport default defineConfig({\n  // ...\n  syntax: 'template-literal', // required\n  jsxFramework: 'react' // optional\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Import Maps in Panda CSS (TypeScript)\nDESCRIPTION: Demonstrates how to configure multiple importMap entries or multiple single import entrypoints, allowing the use of multiple styled-system sources in an application.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  importMap: ['@acme/styled-system', '@ui-lib/styled-system', 'styled-system'],\n})\n```\n\n----------------------------------------\n\nTITLE: TypeScript Integration Example\nDESCRIPTION: Demonstrates how to use TypeScript with Panda UI's SystemStyleObject type for style typing.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/writing-styles.md#2025-04-18_snippet_21\n\nLANGUAGE: ts\nCODE:\n```\nimport { css } from '../styled-system/css'\nimport type { SystemStyleObject } from '../styled-system/types'\n\nconst styles: SystemStyleObject = {\n  color: 'red'\n}\n```\n\n----------------------------------------\n\nTITLE: Using Config-Defined Slot Recipes in JSX\nDESCRIPTION: Demonstrates how to use slot recipes that have been defined in the configuration within JSX components, applying the generated class names to the appropriate parts.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_114\n\nLANGUAGE: jsx\nCODE:\n```\nimport { button } from 'styled-system/recipes'\n\nexport function App() {\n  const btnClass = button({ size: 'lg', rounded: true })\n\n  return (\n    <button>\n      <p class={btnClass.label}> Label</p>\n      <p class={btnClass.icon}> Icon</p>\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Custom utility transform with colorMix function\nDESCRIPTION: Example of using the colorMix utility function in a custom transform for a background utility. This allows for processing opacity values in color tokens.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_56\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  utilities: {\n    background: {\n      shorthand: 'bg',\n      className: 'bg',\n      values: 'colors',\n      transform(value, args) {\n        const mix = args.utils.colorMix(value)\n        // This can happen if the value format is invalid (e.g. `bg: red.300/invalid` or `bg: red.300//10`)\n        if (mix.invalid) return { background: value }\n\n        return {\n          background: mix.value,\n        }\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Fixing GlobalCss Selector Order Regression in TypeScript\nDESCRIPTION: This snippet demonstrates a fix for a regression in globalCss selector order introduced in v0.26.2. It shows how nested selectors within the globalCss configuration should be properly generated in the resulting CSS output.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    globalCss: {\n        html: {\n          \".aaa\": {\n            color: \"red.100\",\n            \"& .bbb\": {\n              color: \"red.200\",\n              \"& .ccc\": {\n                color: \"red.300\"\n              }\n            }\n          }\n        },\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Plugins with definePlugin in TypeScript\nDESCRIPTION: Function for plugin definitions in Panda CSS. It allows creating plugins that can hook into different parts of the build process and customize behavior, like modifying token formatting.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/customization/config-functions.md#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { definePlugin } from '@pandacss/dev'\n\nexport const plugin = definePlugin({\n  name: 'token-format',\n  hooks: {\n    'tokens:created': ({ configure }) => {\n      configure({\n        formatTokenName: path => '$' + path.join('-')\n      })\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Utility Creation Hook Configuration\nDESCRIPTION: Configuration example showing how to customize the hash function used when config.hash is enabled using the utility:created hook\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/node/CHANGELOG.md#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  // ...\n  hooks: {\n    'utility:created': ({ configure }) => {\n      configure({\n        toHash: (paths, toHash) => {\n          const stringConds = paths.join(':')\n          const splitConds = stringConds.split('_')\n          const hashConds = splitConds.map(toHash)\n          return hashConds.join('_')\n        },\n      })\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Demonstrating StrictTokens Display Property Validation - Before\nDESCRIPTION: Example showing how strictTokens validation worked before the update, where invalid display values were not properly caught\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_73\n\nLANGUAGE: typescript\nCODE:\n```\n// config.strictTokens = true\ncss({ display: 'flex' }) // OK, didn't throw\ncss({ display: 'block' }) // OK, didn't throw\ncss({ display: 'abc' }) // ❌ didn't throw even though 'abc' is not a valid value for 'display'\n```\n\n----------------------------------------\n\nTITLE: Generated Atomic CSS Example\nDESCRIPTION: This shows the resulting atomic CSS classes generated by Panda CSS from the template literal styles.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/template-literals.md#2025-04-18_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.font-size_16px {\n  font-size: 16px;\n}\n\n.font-weight_bold {\n  font-weight: bold;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EmberCLI Build with PostCSS\nDESCRIPTION: Configuration for ember-cli-build.js to enable PostCSS processing of CSS files.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/ember.mdx#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\n\nconst EmberApp = require('ember-cli/lib/broccoli/ember-app');\n\nmodule.exports = function (defaults) {\n  const app = new EmberApp(defaults, {\n    // Add options here\n  });\n\n  const { Webpack } = require('@embroider/webpack');\n  return require('@embroider/compat').compatBuild(app, Webpack, {\n    packagerOptions: {\n      webpackConfig: {\n        module: {\n          rules: [\n            {\n              test: /\\.css$/i,\n              use: ['postcss-loader'],\n            },\n          ],\n        },\n      },\n    },\n    // other options...\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Asset Tokens in JavaScript\nDESCRIPTION: Example of defining asset tokens for both URL and SVG type assets, commonly used in background-image properties.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/theming/tokens.md#2025-04-18_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nconst theme = {\n  tokens: {\n    assets: {\n      logo: {\n        value: { type: 'url', value: '/static/logo.png' }\n      },\n      checkmark: {\n        value: { type: 'svg', value: '<svg>...</svg>' }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pre-generating Recipe Styles for Storybook\nDESCRIPTION: Updates the Panda CSS configuration to pre-generate all recipe styles for Storybook usage.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/storybook.mdx#2025-04-18_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from \"@pandacss/dev\"\n\nexport default defineConfig({\n  // ...\n  staticCss: {\n    recipes: '*'\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Font Size Tokens in Panda CSS (TypeScript)\nDESCRIPTION: This code shows how to add custom font size tokens to your Panda CSS theme. It adds a 'big' font size with a value of '80px' through the panda.config.ts configuration file.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/customization/theme.mdx#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  theme: {\n    extend: {\n      tokens: {\n        fontSizes: {\n          big: { value: '80px' }\n        }\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Fixing Global CSS Selector Order in TypeScript\nDESCRIPTION: Fix for regression in global CSS selector order handling. Shows the transformation from incorrect to correct CSS generation for nested selectors.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_95\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    globalCss: {\n        html: {\n          \".aaa\": {\n            color: \"red.100\",\n            \"& .bbb\": {\n              color: \"red.200\",\n              \"& .ccc\": {\n                color: \"red.300\"\n              }\n            }\n          }\n        },\n    }\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n.aaa html {\n  color: var(--colors-red-100);\n}\n\n.aaa html .bbb {\n  color: var(--colors-red-200);\n}\n\n.aaa html .bbb .ccc {\n  color: var(--colors-red-300);\n}\n```\n\nLANGUAGE: css\nCODE:\n```\nhtml .aaa {\n  color: var(--colors-red-100);\n}\n\nhtml .aaa .bbb {\n  color: var(--colors-red-200);\n}\n\nhtml .aaa .bbb .ccc {\n  color: var(--colors-red-300);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Panda File System Options in JSON\nDESCRIPTION: This snippet shows various file system related configuration options for Panda, including gitignore, current working directory, and output directory settings.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/references/config.md#2025-04-18_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"gitignore\": true,\n  \"cwd\": \"src\",\n  \"clean\": false,\n  \"outdir\": \"styled-system\"\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the Nuxt Application\nDESCRIPTION: These commands navigate to the nuxt-app package directory and start the Nuxt.js development server.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/component-lib/nuxt-lib-source/README.md#2025-04-18_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncd packages/nuxt-app\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Running Panda Debug Command in Various Package Managers\nDESCRIPTION: Examples of how to run the 'panda debug' command using different package managers (pnpm, npm, yarn, bun). This command helps debug the app by showing processed files, generated styles, and final configuration.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/guides/debugging.mdx#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm panda debug\n# You can also debug a specific file or folder\n# using the optional glob argument\npnpm panda debug src/components/Button.tsx\npnpm panda debug \"./src/components/**\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx panda debug\n# # You can also debug a specific file or folder\n# using the optional glob argument\nnpx panda debug src/components/Button.tsx\nnpx panda debug \"./src/components/**\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn panda debug\n# # You can also debug a specific file or folder\n# using the optional glob argument\nyarn panda debug src/components/Button.tsx\nyarn panda debug \"./src/components/**\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun panda debug\n# # You can also debug a specific file or folder\n# using the optional glob argument\nbun panda debug src/components/Button.tsx\nbun panda debug \"./src/components/**\"\n```\n\n----------------------------------------\n\nTITLE: Panda CSS Configuration\nDESCRIPTION: Configuration file for Panda CSS defining paths and output settings\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/remix.mdx#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from \"@pandacss/dev\"\n\nexport default defineConfig({\n preflight: true,\n include: [\"./app/routes/**/*.{ts,tsx,js,jsx}\", \"./app/components/**/*.{ts,tsx,js,jsx}\"],\n exclude: [],\n outdir: \"styled-system\",\n})\n```\n\n----------------------------------------\n\nTITLE: Using container queries in styles\nDESCRIPTION: Example of using container queries in styles with the @/<container-size> syntax. This applies styles when the container matches the specified size.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_61\n\nLANGUAGE: typescript\nCODE:\n```\nimport { css } from '/styled-system/css'\n\nfunction Demo() {\n  return (\n    <nav className={css({ containerType: 'inline-size' })}>\n      <div\n        className={css({\n          fontSize: { '@/sm': 'md' },\n        })}\n      />\n    </nav>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Theme CSS Output\nDESCRIPTION: Example of the CSS output generated for theme configurations including dark mode support.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_29\n\nLANGUAGE: css\nCODE:\n```\n@layer tokens {\n  :where(:root, :host) {\n    --colors-text: blue;\n    --colors-body: var(--colors-blue-600);\n  }\n\n  [data-panda-theme='primary'] {\n    --colors-text: red;\n    --colors-muted: var(--colors-red-200);\n    --colors-body: var(--colors-red-600);\n  }\n\n  @media (prefers-color-scheme: dark) {\n    :where(:root, :host) {\n      --colors-body: var(--colors-blue-400);\n    }\n\n    [data-panda-theme='primary'] {\n      --colors-body: var(--colors-red-400);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Reference Syntax in Composite Values\nDESCRIPTION: Demonstrates the token reference syntax for composite CSS values using curly braces notation.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/theming/usage.mdx#2025-04-18_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { css } from '../styled-system/css'\n\nconst className = css({ border: '1px solid {colors.red.400}' })\n```\n\n----------------------------------------\n\nTITLE: Fixed SVA Slots Spreading in TypeScript\nDESCRIPTION: Example showing the fix for spreading identifiers in SVA slots array that previously prevented CSS generation.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sva } from 'styled-system/css'\nconst parts = ['positioner', 'content']\n\nconst card = sva({\n  slots: [...parts], // <- spreading here was causing the below CSS not to be generated, it's now fixed ✅\n  base: {\n    root: {\n      p: '6',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: PostCSS Plugin Configuration with Logfile Option\nDESCRIPTION: Example configuration showing how to enable logging to a file using the logfile option in the postcss plugin\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/postcss/CHANGELOG.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: {\n    '@pandacss/dev/postcss': {\n      logfile: './logs/panda.log',\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: File Input Button Styling\nDESCRIPTION: Styling the file input button using the _file modifier to adjust background color, padding, and margin.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/conditional-styles.md#2025-04-18_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n<input\n  type=\"file\"\n  className={css({\n    _file: { bg: 'gray.500', px: '4', py: '2', marginEnd: '3' }\n  })}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using CLI Flags for Panda CSS Commands\nDESCRIPTION: Demonstrates the usage of various CLI flags for Panda CSS commands. It includes examples of using the '--watch' flag for codegen, '--config' flag for specifying config path, and '--outfile' flag for cssgen command.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/cli/CHANGELOG.md#2025-04-18_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npanda codegen --watch\npanda init --config ./pandacss.config.js\npanda cssgen --outfile dist/styles.css\n```\n\n----------------------------------------\n\nTITLE: Using Container Queries in Styling\nDESCRIPTION: Example of using container queries in component styling with the @/<container-size> syntax.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_89\n\nLANGUAGE: typescript\nCODE:\n```\nimport { css } from '/styled-system/css'\n\nfunction Demo() {\n  return (\n    <nav className={css({ containerType: 'inline-size' })}>\n      <div\n        className={css({\n          fontSize: { '@/sm': 'md' },\n        })}\n      />\n    </nav>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Button Component with CVA Raw Function\nDESCRIPTION: Example of creating a Button component using the CVA (Component Variant API) raw function to get style objects that can be merged with other styles, enabling component variants with style overrides.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_32\n\nLANGUAGE: tsx\nCODE:\n```\nimport { css, cva } from '../../styled-system/css'\n\nconst buttonRecipe = cva({\n  base: { display: 'flex', fontSize: 'lg' },\n  variants: {\n    variant: {\n      primary: { color: 'white', backgroundColor: 'blue.500' },\n    },\n  },\n})\n\nexport const Button = ({ css: cssProp = {}, children }) => {\n  const className = css(\n    // using the button recipe\n    buttonRecipe.raw({ variant: 'primary' }),\n\n    // adding style overrides (internal)\n    { _hover: { color: 'blue.400' } },\n\n    // adding style overrides (external)\n    cssProp,\n  )\n\n  return <button className={className}>{props.children}</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring and Using Responsive Styles with Panda\nDESCRIPTION: Demonstrates how to configure breakpoints and use responsive styles with Panda, showing the differences in configuration and usage compared to Stitches.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/migration/stitches.md#2025-04-18_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  theme: {\n    extend: {\n      breakpoints: {\n        bp1: '640px',\n        bp2: '768px'\n      }\n    }\n  }\n})\n\n// usage\nimport { css } from '../styled-system/css'\n\nconst styles = css({\n  bg: 'gainsboro',\n  bp1: { bg: 'tomato' },\n  // or\n  margin: { base: '10px', bp1: '20px' }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable Color Mix Transform Function\nDESCRIPTION: Demonstrates how to create a reusable function for generating color mix utility transforms. This function can be used to easily create transforms for different CSS properties.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/fixture/CHANGELOG.md#2025-04-18_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { PropertyTransform } from '@pandacss/types'\n\nexport const createColorMixTransform =\n  (prop: string): PropertyTransform =>\n  (value, args) => {\n    const mix = args.utils.colorMix(value)\n    if (mix.invalid) return { [prop]: value }\n\n    const cssVar = '--mix-' + prop\n\n    return {\n      [cssVar]: mix.value,\n      [prop]: `var(${cssVar}, ${mix.color})`,\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Incorrect CSS Output from GlobalCss Regression in CSS\nDESCRIPTION: This CSS snippet shows the incorrect output generated by the globalCss regression in v0.26.2, where the selector order was reversed, resulting in '.aaa html' instead of the correct 'html .aaa'.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_38\n\nLANGUAGE: css\nCODE:\n```\n.aaa html {\n  color: var(--colors-red-100);\n}\n\n.aaa html .bbb {\n  color: var(--colors-red-200);\n}\n\n.aaa html .bbb .ccc {\n  color: var(--colors-red-300);\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Import Alias Parsing with Raw Function in Recipes\nDESCRIPTION: Example of a recipe import with an alias that previously wasn't properly parsed, but has been fixed. This shows how the button recipe is imported from a module and used with the .raw() method.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_63\n\nLANGUAGE: typescript\nCODE:\n```\n// button.stories.ts\nimport { button as buttonRecipe } from '@ui/styled-system/recipes'\n\nexport const Primary: Story = {\n  // ❌ this wouldn't be parsed as a recipe because of the alias + .raw()\n  //  -> ✅ it's now fixed\n  args: buttonRecipe.raw({\n    color: 'primary',\n  }),\n}\n```\n\n----------------------------------------\n\nTITLE: Package.json Script Configuration\nDESCRIPTION: Updated package.json configuration to include Panda CSS build scripts and development commands.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/solidjs.mdx#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"prepare\": \"panda codegen\",\n    \"dev\": \"vite\",\n    \"build\": \"tsc && vite build\",\n    \"lint\": \"eslint src --ext ts,tsx --report-unused-disable-directives --max-warnings 0\",\n    \"preview\": \"vite preview\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Default Breakpoints Configuration in Panda CSS (TypeScript)\nDESCRIPTION: This snippet shows the default breakpoint values provided by Panda CSS. It defines five standard breakpoints (sm, md, lg, xl, 2xl) with their corresponding pixel values.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/responsive-design.md#2025-04-18_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nconst breakpoints = {\n  sm: '640px',\n  md: '768px',\n  lg: '1024px',\n  xl: '1280px',\n  '2xl': '1536px'\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Hash Function for Utility Classes\nDESCRIPTION: Hook configuration that allows overriding the default hashing function when config.hash is set to true. This enables custom class name generation.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  // ...\n  hooks: {\n    'utility:created': ({ configure }) => {\n      configure({\n        toHash: (paths, toHash) => {\n          const stringConds = paths.join(':')\n          const splitConds = stringConds.split('_')\n          const hashConds = splitConds.map(toHash)\n          return hashConds.join('_')\n        },\n      })\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Removing Utility from a Preset in Panda CSS\nDESCRIPTION: Example demonstrating how to remove a specific utility from a preset while keeping other utilities using object destructuring.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/extend.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\nimport myPreset from '@acme/my-preset'\n\nconst { br, ...utilities } = myPreset.utilities\n\nexport default defineConfig({\n  presets: ['@acme/my-preset']\n  utilities: {\n    extend: {\n      ...utilities, // 👈 we still want the other utilities from this preset\n      // your customizations here\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using a Slot Recipe with Namespace Imports\nDESCRIPTION: Example of using a tabs slot recipe with namespace imports like Tabs.Root, Tabs.List, etc. which previously had matching issues that have been fixed.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nconst App = () => {\n  return (\n    // ❌ this was not matched to the `tabs` slot recipe\n    // ✅ fixed with this PR\n    <Tabs.Root defaultValue=\"button\">\n      <Tabs.List>\n        <Tabs.Trigger value=\"button\">Button</Tabs.Trigger>\n        <Tabs.Trigger value=\"radio\">Radio Group</Tabs.Trigger>\n        <Tabs.Trigger value=\"slider\">Slider</Tabs.Trigger>\n        <Tabs.Indicator />\n      </Tabs.List>\n    </Tabs.Root>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CSS Layers for Panda CSS\nDESCRIPTION: CSS content to be added to the globals.css file, defining the order of CSS layers for Panda CSS.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/nextjs.mdx#2025-04-18_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n@layer reset, base, tokens, recipes, utilities;\n```\n\n----------------------------------------\n\nTITLE: SplitCssProps Utility Usage Example in React\nDESCRIPTION: Example of using the splitCssProps utility to separate styling props from other HTML attributes. This utility helps when composing components that need to handle both styling props and standard HTML attributes.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_106\n\nLANGUAGE: typescript\nCODE:\n```\nimport { splitCssProps, styled } from '../styled-system/jsx'\nimport type { HTMLStyledProps } from '../styled-system/types'\n\nfunction SplitComponent({ children, ...props }: HTMLStyledProps<'div'>) {\n  const [cssProps, restProps] = splitCssProps(props)\n  return (\n    <styled.div {...restProps} className={css({ display: 'flex', height: '20', width: '20' }, cssProps)}>\n      {children}\n    </styled.div>\n  )\n}\n\n// Usage\n\nfunction App() {\n  return <SplitComponent margin=\"2\">Click me</SplitComponent>\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Output Diff Showing Optimized Generation\nDESCRIPTION: Diff showing the reduced CSS output after the fix to the '[*]' rule. The update removes unnecessary media query blocks that were previously generated for each breakpoint, resulting in much smaller CSS output.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_71\n\nLANGUAGE: diff\nCODE:\n```\n@layer recipes {\n  .card--size_small {\n    font-size: 14px;\n  }\n\n  .card--size_large {\n    font-size: 18px;\n  }\n\n  .card--visual_primary {\n    background-color: blue;\n  }\n\n  .card--visual_secondary {\n    background-color: gray;\n  }\n\n  @layer _base {\n    .card {\n      color: var(--colors-white);\n    }\n  }\n\n-  @media screen and (min-width: 40em) {\n-    -.sm\\:card--size_small {\n-      -font-size: 14px;\n-    -}\n-    -.sm\\:card--size_large {\n-      -font-size: 18px;\n-    -}\n-    -.sm\\:card--visual_primary {\n-      -background-color: blue;\n-    -}\n-    -.sm\\:card--visual_secondary {\n-      -background-color: gray;\n-    -}\n-  }\n\n-  @media screen and (min-width: 48em) {\n-    -.md\\:card--size_small {\n-      -font-size: 14px;\n-    -}\n-    -.md\\:card--size_large {\n-      -font-size: 18px;\n-    -}\n-    -.md\\:card--visual_primary {\n-      -background-color: blue;\n-    -}\n-    -.md\\:card--visual_secondary {\n-      -background-color: gray;\n-    -}\n-  }\n\n-  @media screen and (min-width: 64em) {\n-    -.lg\\:card--size_small {\n-      -font-size: 14px;\n-    -}\n-    -.lg\\:card--size_large {\n-      -font-size: 18px;\n-    -}\n-    -.lg\\:card--visual_primary {\n-      -background-color: blue;\n-    -}\n-    -.lg\\:card--visual_secondary {\n-      -background-color: gray;\n-    -}\n-  }\n\n-  @media screen and (min-width: 80em) {\n-    -.xl\\:card--size_small {\n-      -font-size: 14px;\n-    -}\n-    -.xl\\:card--size_large {\n-      -font-size: 18px;\n-    -}\n-    -.xl\\:card--visual_primary {\n-      -background-color: blue;\n-    -}\n-    -.xl\\:card--visual_secondary {\n-      -background-color: gray;\n-    -}\n-  }\n\n-  @media screen and (min-width: 96em) {\n-    -.\\32xl\\:card--size_small {\n-      -font-size: 14px;\n-    -}\n-    -.\\32xl\\:card--size_large {\n-      -font-size: 18px;\n-    -}\n-    -.\\32xl\\:card--visual_primary {\n-      -background-color: blue;\n-    -}\n-    -.\\32xl\\:card--visual_secondary {\n-      -background-color: gray;\n-    -}\n-  }\n}\n```\n\n----------------------------------------\n\nTITLE: Limitation with Mixed Styled Composition\nDESCRIPTION: Example showing an unsupported case of mixed styled composition where a styled element created from a config recipe cannot be extended using inline styles. This demonstrates a documented limitation in the styling system.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/node/CHANGELOG.md#2025-04-18_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport { button } from '../styled-system/recipes'\n\nconst Button = styled('div', button)\n\n// ❌ This will throw an error\nconst ExtendedButton = styled(Button, {\n  base: { background: 'red.dark' },\n})\n```\n\n----------------------------------------\n\nTITLE: LinkOverlay Pattern Migration Example\nDESCRIPTION: Shows migration from linkBox pattern to using position:relative with linkOverlay pattern after breaking change.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport { css } from 'styled-system/css'\nimport { linkOverlay } from 'styled-system/patterns'\n\nconst App = () => {\n  return (\n    <div className={css({ pos: 'relative' })}>\n      <img src=\"https://via.placeholder.com/150\" alt=\"placeholder\" />\n      <a href=\"#\" className={linkOverlay()}>\n        Link\n      </a>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Generated Panda CSS in React\nDESCRIPTION: Example of how to import the generated Panda CSS file in a React component. This step is crucial for applying the generated styles to your application.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/cli.mdx#2025-04-18_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport './styled-system/styles.css'\n\nexport function App() {\n  return <div>Page</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Factory Recipe Parsing (TypeScript)\nDESCRIPTION: This patch fixes the parsing of factory recipes with property access and object syntax in styled components.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/parser/CHANGELOG.md#2025-04-18_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst Input = styled.input({\n  base: {\n    color: 'blue.100',\n    bg: 'blue.900',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Panda CSS for HMR Triggering\nDESCRIPTION: Updates the Panda CSS configuration to manually specify files that should trigger a rebuild for HMR.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/storybook.mdx#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from \"@pandacss/dev\"\n\nexport default defineConfig({\n  // ...\n  dependencies: ['path/to/files/**.ts'],\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Codegen Preparation Hook in TypeScript\nDESCRIPTION: This hook is executed before writing codegen files to disk, allowing modification of the generated files. It provides access to artifacts and changed files.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/studio/CHANGELOG.md#2025-04-18_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  // ...\n  hooks: {\n    'codegen:prepare': ({ artifacts, changed }) => {\n      // do something with the emitted js/d.ts files\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Applying Custom List Style Image in JSX\nDESCRIPTION: Example of using the custom list style image token in a JSX component by applying it through the css utility with the listStyleImage property.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/list.mdx#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ listStyleImage: 'star' })} />\n```\n\n----------------------------------------\n\nTITLE: Using dataAttr Factory Option\nDESCRIPTION: Example of using the dataAttr factory option to add a data-recipe attribute to the component for testing and debugging.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/style-props.mdx#2025-04-18_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { styled } from '../styled-system/jsx'\nimport { button } from '../styled-system/recipes'\n\nconst Button = styled('button', button, { dataAttr: true })\n\nconst App = () => (\n  <Button variant=\"secondary\">\n    Button\n  </Button>\n)\n// => <button data-recipe=\"button\" class=\"btn btn--variant_purple\">Button</button>\n```\n\n----------------------------------------\n\nTITLE: Invalid CSS Structure Example\nDESCRIPTION: Example of the invalid CSS structure that's generated when pseudo elements and conditions are ordered incorrectly.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/conditional-styles.md#2025-04-18_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n&::backdrop {\n  &.dark,\n  .dark & {\n    color: red;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Panda Preflight in JSON\nDESCRIPTION: This snippet shows how to enable CSS reset styles (preflight) in Panda configuration, with an option to scope the reset to a specific part of the application.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/references/config.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"preflight\": true\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"preflight\": { \"scope\": \".extension\" }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"preflight\": { \"scope\": \".extension\", \"level\": \"element\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Escape-Hatch Syntax with Important Declarations in TypeScript\nDESCRIPTION: Example of using the escape-hatch syntax with !important declarations. This patch fixes CSS generation issues when using [xxx] escape-hatch syntax with ! or !important.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_99\n\nLANGUAGE: typescript\nCODE:\n```\ncss({\n  borderWidth: '[2px!]',\n  width: '[2px !important]',\n})\n```\n\n----------------------------------------\n\nTITLE: Applying Border Width in Panda CSS (JSX)\nDESCRIPTION: Shows how to apply border width to all sides of an element using Panda CSS. It demonstrates setting a 1-pixel border width.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/border.md#2025-04-18_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ borderWidth: '1px' })} />\n```\n\n----------------------------------------\n\nTITLE: Installing Panda CSS in SolidJS\nDESCRIPTION: Commands to install and initialize Panda CSS with PostCSS support using different package managers.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/solidjs.mdx#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install -D @pandacss/dev\npnpm panda init --postcss\n```\n\n----------------------------------------\n\nTITLE: Updating Vite Configuration\nDESCRIPTION: JavaScript configuration for Vite, allowing imports from the 'styled-system' directory.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/svelte.mdx#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { sveltekit } from '@sveltejs/kit/vite'\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  plugins: [sveltekit()],\n  server: {\n    fs: {\n      allow: ['styled-system'],\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: CSS Import with Cascade Layers for Design System\nDESCRIPTION: This CSS snippet demonstrates how to properly import design system styles with cascade layers. It defines the layer order and imports the external CSS file from the design system package.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/guides/component-library.md#2025-04-18_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n@layer reset, base, tokens, recipes, utilities;\n@import url('@acme-org/design-system/dist/styles.css');\n\n/* Your own styles here */\n```\n\n----------------------------------------\n\nTITLE: CSS Output Diff for Recipe Pattern Changes\nDESCRIPTION: A diff showing the CSS output changes after fixing the `[*]` rule in recipe configurations. The updated code removes unnecessary responsive media query blocks that were previously generated for each breakpoint.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_43\n\nLANGUAGE: diff\nCODE:\n```\n@layer recipes {\n  .card--size_small {\n    font-size: 14px;\n  }\n\n  .card--size_large {\n    font-size: 18px;\n  }\n\n  .card--visual_primary {\n    background-color: blue;\n  }\n\n  .card--visual_secondary {\n    background-color: gray;\n  }\n\n  @layer _base {\n    .card {\n      color: var(--colors-white);\n    }\n  }\n\n-  @media screen and (min-width: 40em) {\n-    -.sm\\:card--size_small {\n-      -font-size: 14px;\n-    -}\n-    -.sm\\:card--size_large {\n-      -font-size: 18px;\n-    -}\n-    -.sm\\:card--visual_primary {\n-      -background-color: blue;\n-    -}\n-    -.sm\\:card--visual_secondary {\n-      -background-color: gray;\n-    -}\n-  }\n\n-  @media screen and (min-width: 48em) {\n-    -.md\\:card--size_small {\n-      -font-size: 14px;\n-    -}\n-    -.md\\:card--size_large {\n-      -font-size: 18px;\n-    -}\n-    -.md\\:card--visual_primary {\n-      -background-color: blue;\n-    -}\n-    -.md\\:card--visual_secondary {\n-      -background-color: gray;\n-    -}\n-  }\n\n-  @media screen and (min-width: 64em) {\n-    -.lg\\:card--size_small {\n-      -font-size: 14px;\n-    -}\n-    -.lg\\:card--size_large {\n-      -font-size: 18px;\n-    -}\n-    -.lg\\:card--visual_primary {\n-      -background-color: blue;\n-    -}\n-    -.lg\\:card--visual_secondary {\n-      -background-color: gray;\n-    -}\n-  }\n\n-  @media screen and (min-width: 80em) {\n-    -.xl\\:card--size_small {\n-      -font-size: 14px;\n-    -}\n-    -.xl\\:card--size_large {\n-      -font-size: 18px;\n-    -}\n-    -.xl\\:card--visual_primary {\n-      -background-color: blue;\n-    -}\n-    -.xl\\:card--visual_secondary {\n-      -background-color: gray;\n-    -}\n-  }\n\n-  @media screen and (min-width: 96em) {\n-    -.\\32xl\\:card--size_small {\n-      -font-size: 14px;\n-    -}\n-    -.\\32xl\\:card--size_large {\n-      -font-size: 18px;\n-    -}\n-    -.\\32xl\\:card--visual_primary {\n-      -background-color: blue;\n-    -}\n-    -.\\32xl\\:card--visual_secondary {\n-      -background-color: gray;\n-    -}\n-  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating package.json Scripts for Panda CSS\nDESCRIPTION: Diff showing the addition of a 'prepare' script in package.json to run Panda CSS codegen before each build.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/vite.mdx#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n+    \"prepare\": \"panda codegen\",\n    \"dev\": \"vite\",\n    \"build\": \"tsc && vite build\",\n    \"lint\": \"eslint src --ext ts,tsx --report-unused-disable-directives --max-warnings 0\",\n    \"preview\": \"vite preview\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Remix Root Configuration\nDESCRIPTION: Root component setup for Remix with Panda CSS integration\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/remix.mdx#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { LinksFunction } from \"@remix-run/node\";\nimport {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n} from \"@remix-run/react\";\n\nimport styles from \"./index.css?url\"\n\nexport const links: LinksFunction = () => [\n  { rel: \"stylesheet\", href: styles },\n];\n\nexport default function App() {\n  return (\n    <html lang=\"en\">\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        <Outlet />\n        <ScrollRestoration />\n        <Scripts />\n        <LiveReload />\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Package.json Scripts\nDESCRIPTION: Package.json diff showing the addition of the prepare script for Panda CSS codegen.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/react-router.mdx#2025-04-18_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n{\n  \"scripts\": {\n+    \"prepare\": \"panda codegen\",\n    \"build\": \"cross-env NODE_ENV=production react-router build\",\n    \"dev\": \"react-router dev\",\n    \"start\": \"cross-env NODE_ENV=production react-router-serve ./build/server/index.js\",\n    \"typecheck\": \"react-router typegen && tsc\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Base Layer Example\nDESCRIPTION: Example of the CSS output for the base layer in Panda CSS which contains global styles defined in the globalStyles configuration.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/cascade-layers.md#2025-04-18_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@layer base {\n  a {\n    color: #000;\n    text-decoration: none;\n  }\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Adjusting Outline Offset in Panda CSS\nDESCRIPTION: Shows how to control the space between an element and its outline using outlineOffset and ringOffset (shorthand) properties.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/outline.md#2025-04-18_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ outlineOffset: '4' })} />\n<div className={css({ ringOffset: '4' })} /> // shorthand\n```\n\n----------------------------------------\n\nTITLE: Generating Styled-System Directories for CSS Library\nDESCRIPTION: These commands navigate to the css-lib package directory and generate the styled-system files using Panda CSS.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/component-lib/nuxt-lib-source/README.md#2025-04-18_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd packages/css-lib\npnpm css\n```\n\n----------------------------------------\n\nTITLE: Comparing Old and New Preset Merging Behavior in Panda CSS\nDESCRIPTION: A diff showing the changes in how Panda CSS merges presets. The new behavior has right presets overriding left presets, which is demonstrated by changes in token values and structure.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_90\n\nLANGUAGE: diff\nCODE:\n```\n{\n  \"theme\": {\n    \"tokens\": {\n      \"colors\": {\n        \"blue\": {\n          \"value\": \"blue\"\n        },\n-        \"first-main\": {\n-          \"value\": \"override\"\n-        },\n        \"gray\": {\n-          \"value\": \"from-first-config\"\n+          \"value\": \"gray\"\n        },\n        \"orange\": {\n          \"value\": \"orange\"\n        },\n+        \"pink\": {\n+            \"value\": \"pink\",\n+        },\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Watch Mode in Panda CSS Codegen Command\nDESCRIPTION: Command to run Panda codegen in watch mode using the --watch or -w flag, which automatically regenerates code when changes are detected.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\npanda codegen --watch\n```\n\n----------------------------------------\n\nTITLE: Custom Utility with Color-Mix Transform in Panda CSS\nDESCRIPTION: Example of creating a custom utility that uses the colorMix function. The utility receives utils.colorMix to handle the color opacity syntax.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/fixture/CHANGELOG.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  utilities: {\n    background: {\n      shorthand: 'bg',\n      className: 'bg',\n      values: 'colors',\n      transform(value, args) {\n        const mix = args.utils.colorMix(value)\n        // This can happen if the value format is invalid (e.g. `bg: red.300/invalid` or `bg: red.300//10`)\n        if (mix.invalid) return { background: value }\n\n        return {\n          background: mix.value,\n        }\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Fixing Nested Output Directory Imports (JavaScript)\nDESCRIPTION: This patch addresses an issue with import matching when using nested output directories and base URLs.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/parser/CHANGELOG.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n78ed6ed4: Fix issue where using a nested outdir like `src/styled-system` with a baseUrl like `./src` would result on\nparser NOT matching imports like `import { container } from \"styled-system/patterns\";` cause it would expect the full\npath `src/styled-system`\n```\n\n----------------------------------------\n\nTITLE: Using Gradient Tokens in Panda CSS\nDESCRIPTION: Examples of applying predefined gradient tokens using bgGradient property.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/background.md#2025-04-18_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<div\n  className={css({\n    bgGradient: \"simple\",\n  })}\n/>\n\n<div\n  className={css({\n    bgGradient: \"primary\",\n  })}\n/>\n```\n\n----------------------------------------\n\nTITLE: Running Panda with CPU Profiling\nDESCRIPTION: Executes Panda with CPU profiling enabled, generating a CPU profile file that can be analyzed with tools like Speedscope.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/references/cli.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm panda --cpu-prof\n```\n\n----------------------------------------\n\nTITLE: Configuring PostCSS Plugin\nDESCRIPTION: PostCSS configuration to allow processing of CSS files in the .embroider folder.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/ember.mdx#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: {\n    '@pandacss/dev/postcss': {\n      allow: [/node_modules\\/.embroider/]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Template Literal Syntax (JavaScript)\nDESCRIPTION: This code snippet shows how to enable template literal syntax in the Panda configuration file for a pure CSS approach to writing styles.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/parser/CHANGELOG.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// panda.config.ts\nexport default defineConfig({\n  //...\n  syntax: 'template-literal',\n})\n```\n\n----------------------------------------\n\nTITLE: Using CVA Raw Method for Style Merging in TSX\nDESCRIPTION: Shows how to use the new cva.raw method to generate style objects from a recipe that can be merged with other styles using the css function.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_115\n\nLANGUAGE: tsx\nCODE:\n```\nimport { css, cva } from '../../styled-system/css'\n\nconst buttonRecipe = cva({\n  base: { display: 'flex', fontSize: 'lg' },\n  variants: {\n    variant: {\n      primary: { color: 'white', backgroundColor: 'blue.500' },\n    },\n  },\n})\n\nexport const Button = ({ css: cssProp = {}, children }) => {\n  const className = css(\n    // using the button recipe\n    buttonRecipe.raw({ variant: 'primary' }),\n\n    // adding style overrides (internal)\n    { _hover: { color: 'blue.400' } },\n\n    // adding style overrides (external)\n    cssProp,\n  )\n\n  return <button className={className}>{props.children}</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Static Theme Generation Configuration\nDESCRIPTION: Shows how to configure static CSS generation for specific themes.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  // ...\n  staticCss: {\n    themes: ['primary', 'secondary'],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Panda Object Syntax\nDESCRIPTION: Example of styling a button using Panda with object syntax and base styles.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/migration/styled-components.md#2025-04-18_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { styled } from '../styled-system/jsx'\n\nconst Button = styled('button', {\n  base: {\n    backgroundColor: '#fff',\n    border: '1px solid #000',\n    color: '#000',\n    padding: '0.5rem 1rem'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Styled Components Theme Configuration\nDESCRIPTION: Setting up theme tokens in Styled Components using ThemeProvider.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/migration/styled-components.md#2025-04-18_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ThemeProvider } from 'styled-components'\n\nconst theme = {\n  colors: {\n    primary: 'blue',\n    secondary: 'red'\n  }\n}\n\nconst App = () => (\n  <ThemeProvider theme={theme}>\n    <Button>Button</Button>\n  </ThemeProvider>\n)\n```\n\n----------------------------------------\n\nTITLE: ComponentProps Export Error Example\nDESCRIPTION: Example of TypeScript error when ComponentProps type is not properly exported from the JSX types file\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_81\n\nLANGUAGE: typescript\nCODE:\n```\n\"ComponentProps\" is not exported by \"styled-system/types/jsx.d.ts\", imported by \"src/ui/form-control.tsx\".\n```\n\n----------------------------------------\n\nTITLE: Basic Panda CSS Usage Example\nDESCRIPTION: Example of using Panda CSS utilities in a React component.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/postcss.mdx#2025-04-18_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { css } from './styled-system/css'\n\nexport function App() {\n  return <div className={css({ bg: 'red.400' })} />\n}\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting TypeScript Config in Svelte\nDESCRIPTION: JavaScript configuration to include 'styled-system' directory in TypeScript config for Svelte.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/svelte.mdx#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport adapter from '@sveltejs/adapter-auto';\nimport { vitePreprocess } from '@sveltejs/vite-plugin-svelte';\n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n  // ...\n  kit: {\n    // ...\n     typescript: {\n      config: (config) => {\n        config.include.push(\"../styled-system\");\n        return config;\n      },\n    }\n  }\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Using Token Reference Syntax in CSS Styles\nDESCRIPTION: Example of using the token reference syntax in style objects to reference design tokens. This allows for direct reference of tokens using the {token.path} syntax.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/token-dictionary/CHANGELOG.md#2025-04-18_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nimport { css } from '../styled-system/css'\n\nconst styles = css({\n  border: '2px solid {colors.primary}',\n})\n```\n\n----------------------------------------\n\nTITLE: Correct CSS Output for GlobalCss in CSS\nDESCRIPTION: This CSS snippet shows the correct output for the globalCss configuration after the fix, properly maintaining the selector order with 'html .aaa' instead of '.aaa html'.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_39\n\nLANGUAGE: css\nCODE:\n```\nhtml .aaa {\n  color: var(--colors-red-100);\n}\n\nhtml .aaa .bbb {\n  color: var(--colors-red-200);\n}\n\nhtml .aaa .bbb .ccc {\n  color: var(--colors-red-300);\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Package.json Scripts\nDESCRIPTION: Configuration update for package.json to include Panda CSS build scripts.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/preact.mdx#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"prepare\": \"panda codegen\",\n    \"build\": \"cross-env NODE_OPTIONS=--openssl-legacy-provider preact build\",\n    \"serve\": \"sirv build --cors --single\",\n    \"dev\": \"cross-env NODE_OPTIONS=--openssl-legacy-provider preact watch\",\n    \"lint\": \"eslint src\",\n    \"test\": \"jest\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Theme Generation in Panda CSS\nDESCRIPTION: Example showing how to specify which themes should be included in the static CSS output using the `staticCss.themes` configuration.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/token-dictionary/CHANGELOG.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// panda.config.ts\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  // ...\n  staticCss: {\n    themes: ['primary', 'secondary'],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using Panda CSS in Astro Component\nDESCRIPTION: Example of using Panda CSS utilities in an Astro component file.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/astro.mdx#2025-04-18_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n---\nimport { css } from '../../styled-system/css';\n---\n<div class={css({ fontSize: \"2xl\", fontWeight: 'bold' })}>Hello !</div>\n```\n\n----------------------------------------\n\nTITLE: Renaming Recipe 'name' Property to 'className' (Breaking Change)\nDESCRIPTION: Breaking change in version 0.9.0 that renames the 'name' property of a config recipe to 'className' for API consistency and clearer intent expression.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_45\n\nLANGUAGE: diff\nCODE:\n```\nexport const buttonRecipe = defineRecipe({\n-  name: 'button',\n+  className: 'button',\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive React Components with MDX\nDESCRIPTION: Example of using MDX to create an interactive React component inside Markdown. This Highlight component changes text background color and responds to clicks with an alert.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/docusaurus-ts/docs/tutorial-basics/markdown-features.mdx#2025-04-18_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nexport const Highlight = ({children, color}) => (\n  <span\n    style={{\n      backgroundColor: color,\n      borderRadius: '20px',\n      color: '#fff',\n      padding: '10px',\n      cursor: 'pointer',\n    }}\n    onClick={() => {\n      alert(`You clicked the color ${color} with label ${children}`)\n    }}>\n    {children}\n  </span>\n);\n\nThis is <Highlight color=\"#25c2a0\">Docusaurus green</Highlight> !\n\nThis is <Highlight color=\"#1877F2\">Facebook blue</Highlight> !\n```\n\n----------------------------------------\n\nTITLE: Loading Custom Fonts with Vanilla CSS\nDESCRIPTION: Demonstrates how to use the @font-face CSS property to load custom fonts in a project.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/guides/fonts.md#2025-04-18_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n@font-face {\n  font-family: 'Mona Sans';\n  src: url('../fonts/Mona-Sans.woff2') format('woff2');\n  font-weight: 400;\n  font-style: normal;\n  font-display: swap;\n}\n\n:root {\n  --font-mona-sans: 'Mona Sans', sans-serif;\n}\n```\n\n----------------------------------------\n\nTITLE: Default Aspect Ratio Tokens in Base Preset\nDESCRIPTION: Example of the default aspect ratio tokens provided in the base preset of Panda CSS. This shows the predefined aspect ratio values available out of the box.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/preset-panda/CHANGELOG.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"square\": { \"value\": \"1 / 1\" },\n  \"landscape\": { \"value\": \"4 / 3\" },\n  \"portrait\": { \"value\": \"3 / 4\" },\n  \"wide\": { \"value\": \"16 / 9\" },\n  \"ultrawide\": { \"value\": \"18 / 5\" },\n  \"golden\": { \"value\": \"1.618 / 1\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML Output for JSX Factory Example\nDESCRIPTION: This snippet shows the expected HTML output after rendering the JSX factory example with merged styles.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/parser/CHANGELOG.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"d_flex flex_column gap_10px text_blue.300 p_4 bg_yellow.300\">\n  <div class=\"fs_4xl text_red.300\">Hero Section</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating StrictTokens Display Property Validation - After\nDESCRIPTION: Example showing improved strictTokens validation where invalid display values are now properly caught and throw errors\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_74\n\nLANGUAGE: typescript\nCODE:\n```\n// config.strictTokens = true\ncss({ display: 'flex' }) // OK, didn't throw\ncss({ display: 'block' }) // OK, didn't throw\ncss({ display: 'abc' }) // ✅ will throw since 'abc' is not a valid value for 'display'\n```\n\n----------------------------------------\n\nTITLE: Updating package.json Scripts for Panda CSS\nDESCRIPTION: Modification to package.json to include a 'prepare' script for Panda CSS codegen.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/astro.mdx#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n+   \"prepare\": \"panda codegen\",\n    \"dev\": \"astro dev\",\n    \"start\": \"astro start\",\n    \"build\": \"astro build\",\n    \"preview\": \"astro preview\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Error Logging Enhancement Configuration\nDESCRIPTION: Flag configuration for enabling logging to file in PandaCSS commands and PostCSS plugin. Includes command line and PostCSS plugin configuration examples.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/logger/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npanda --logfile ./logs/panda.log\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: {\n    '@pandacss/dev/postcss': {\n      logfile: './logs/panda.log',\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using Mixed Styled Composition (Limitation Example)\nDESCRIPTION: Example showing the limitation with mixed styled composition between CVA/inline CVA and config recipes.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\nimport { button } from '../styled-system/recipes'\n\nconst Button = styled('div', button)\n\n// ❌ This will throw an error\nconst ExtendedButton = styled(Button, {\n  base: { background: 'red.dark' },\n})\n```\n\n----------------------------------------\n\nTITLE: Grid Pattern MinChildWidth Token Usage - Before\nDESCRIPTION: Shows how the grid pattern previously handled minChildWidth values without proper token interpretation\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_75\n\nLANGUAGE: tsx\nCODE:\n```\n<div className={grid({ minChildWidth: '80px', gap: 8 })} />\n// ✅ grid-template-columns: repeat(auto-fit, minmax(80px, 1fr))\n\n<div className={grid({ minChildWidth: '20', gap: 8 })} />\n// ❌ grid-template-columns: repeat(auto-fit, minmax(20, 1fr))\n//                                                  ^^^\n```\n\n----------------------------------------\n\nTITLE: CSS Diff Showing Reduced Output from [*] Rule Change\nDESCRIPTION: A diff showing the reduction in generated CSS after fixing the [*] rule implementation. The update removes unnecessary responsive variants for each breakpoint, resulting in much less CSS output.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_97\n\nLANGUAGE: diff\nCODE:\n```\n@layer recipes {\n  .card--size_small {\n    font-size: 14px;\n  }\n\n  .card--size_large {\n    font-size: 18px;\n  }\n\n  .card--visual_primary {\n    background-color: blue;\n  }\n\n  .card--visual_secondary {\n    background-color: gray;\n  }\n\n  @layer _base {\n    .card {\n      color: var(--colors-white);\n    }\n  }\n\n-  @media screen and (min-width: 40em) {\n-    -.sm\\:card--size_small {\n-      -font-size: 14px;\n-    -}\n-    -.sm\\:card--size_large {\n-      -font-size: 18px;\n-    -}\n-    -.sm\\:card--visual_primary {\n-      -background-color: blue;\n-    -}\n-    -.sm\\:card--visual_secondary {\n-      -background-color: gray;\n-    -}\n-  }\n\n-  @media screen and (min-width: 48em) {\n-    -.md\\:card--size_small {\n-      -font-size: 14px;\n-    -}\n-    -.md\\:card--size_large {\n-      -font-size: 18px;\n-    -}\n-    -.md\\:card--visual_primary {\n-      -background-color: blue;\n-    -}\n-    -.md\\:card--visual_secondary {\n-      -background-color: gray;\n-    -}\n-  }\n\n-  @media screen and (min-width: 64em) {\n-    -.lg\\:card--size_small {\n-      -font-size: 14px;\n-    -}\n-    -.lg\\:card--size_large {\n-      -font-size: 18px;\n-    -}\n-    -.lg\\:card--visual_primary {\n-      -background-color: blue;\n-    -}\n-    -.lg\\:card--visual_secondary {\n-      -background-color: gray;\n-    -}\n-  }\n\n-  @media screen and (min-width: 80em) {\n-    -.xl\\:card--size_small {\n-      -font-size: 14px;\n-    -}\n-    -.xl\\:card--size_large {\n-      -font-size: 18px;\n-    -}\n-    -.xl\\:card--visual_primary {\n-      -background-color: blue;\n-    -}\n-    -.xl\\:card--visual_secondary {\n-      -background-color: gray;\n-    -}\n-  }\n\n-  @media screen and (min-width: 96em) {\n-    -.\\32xl\\:card--size_small {\n-      -font-size: 14px;\n-    -}\n-    -.\\32xl\\:card--size_large {\n-      -font-size: 18px;\n-    -}\n-    -.\\32xl\\:card--visual_primary {\n-      -background-color: blue;\n-    -}\n-    -.\\32xl\\:card--visual_secondary {\n-      -background-color: gray;\n-    -}\n-  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixed Grid Pattern with Token Value Support in React\nDESCRIPTION: Shows the improved implementation of the grid pattern, where minChildWidth now correctly uses token values with the proper CSS variable reference.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/preset-base/CHANGELOG.md#2025-04-18_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={grid({ minChildWidth: '80px', gap: 8 })} />\n// ✅ grid-template-columns: repeat(auto-fit, minmax(80px, 1fr))\n\n<div className={grid({ minChildWidth: '20', gap: 8 })} />\n// ✅ grid-template-columns: repeat(auto-fit, minmax(var(--sizes-20, 20), 1fr))\n//                                                  ^^^^^^^^^^^^^^^^^^^\n```\n\n----------------------------------------\n\nTITLE: Supporting Arbitrary Breakpoints in JSX hideFrom Utility\nDESCRIPTION: Shows support for arbitrary breakpoint values in hideFrom utility, demonstrating media query generation with min-width.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_73\n\nLANGUAGE: jsx\nCODE:\n```\ncss({ hideFrom: '800px' })\n// => @media screen and (min-width: 800px) { background: red; }\n```\n\n----------------------------------------\n\nTITLE: Configuring Hash Function Hook in Panda CSS\nDESCRIPTION: Example showing how to configure the toHash function used when config.hash is set to true using the utility:created hook.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/fixture/CHANGELOG.md#2025-04-18_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  // ...\n  hooks: {\n    'utility:created': ({ configure }) => {\n      configure({\n        toHash: (paths, toHash) => {\n          const stringConds = paths.join(':')\n          const splitConds = stringConds.split('_')\n          const hashConds = splitConds.map(toHash)\n          return hashConds.join('_')\n        },\n      })\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring PostCSS with Polyfills for Panda CSS\nDESCRIPTION: Demonstrates how to set up a PostCSS configuration file (postcss.config.js) with plugins for Panda CSS, autoprefixer, and CSS Cascade Layers support.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/overview/browser-support.md#2025-04-18_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    '@pandacss/dev/postcss',\n    'autoprefixer',\n    '@csstools/postcss-cascade-layers'\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Modified CSS Layer Declaration with Custom Layer Names\nDESCRIPTION: Shows the diff of how to update the global CSS layer declaration when using custom layer names in the Panda configuration.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_106\n\nLANGUAGE: diff\nCODE:\n```\n- @layer reset, base, tokens, recipes, utilities;\n+ @layer reset, base, tokens, recipes, panda_utilities;\n```\n\n----------------------------------------\n\nTITLE: Installing Panda CSS and Initializing Configuration\nDESCRIPTION: Commands to install Panda CSS and create the initial configuration file. Provides options for different package managers.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/vite.mdx#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install -D @pandacss/dev\npnpm panda init --postcss\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D @pandacss/dev\nnpx panda init --postcss\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D @pandacss/dev\nyarn panda init --postcss\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add -D @pandacss/dev\nbun panda init --postcss\n```\n\n----------------------------------------\n\nTITLE: Multiple CSS Import Aliases in Panda CSS\nDESCRIPTION: Demonstrates the ability to use multiple aliases for the same CSS import identifier, allowing for flexible CSS generation across different import references.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_80\n\nLANGUAGE: typescript\nCODE:\n```\nimport { css } from '../styled-system/css'\nimport { css as css2 } from '../styled-system/css'\n\ncss({ display: 'flex' })\ncss2({ flexDirection: 'column' }) // this wasn't working before, now it does\n```\n\n----------------------------------------\n\nTITLE: Version Update Details for Panda CSS\nDESCRIPTION: Changelog entry documenting the addition of granular config change detection support and codegen experience improvements.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/node/CHANGELOG.md#2025-04-18_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- 24ee49a5: - Add support for granular config change detection\n  - Improve the `codegen` experience by only rewriting files affecteds by a config change\n- Updated dependencies [e4fdc64a]\n- Updated dependencies [24ee49a5]\n- Updated dependencies [4ba982f3]\n- Updated dependencies [904aec7b]\n  - @pandacss/generator@0.20.0\n  - @pandacss/config@0.20.0\n  - @pandacss/parser@0.20.0\n  - @pandacss/types@0.20.0\n  - @pandacss/core@0.20.0\n  - @pandacss/token-dictionary@0.20.0\n  - @pandacss/error@0.20.0\n  - @pandacss/extractor@0.20.0\n  - @pandacss/is-valid-prop@0.20.0\n  - @pandacss/logger@0.20.0\n  - @pandacss/shared@0.20.0\n```\n\n----------------------------------------\n\nTITLE: Token Output Diff for Semantic Colors in Panda CSS\nDESCRIPTION: This diff shows the changes in how semantic color tokens are output, with some values now using raw color values instead of CSS variables.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_16\n\nLANGUAGE: diff\nCODE:\n```\nconst tokens = {\n    \"colors.blue\": {\n-     \"value\": \"var(--colors-blue)\",\n+     \"value\": \"blue\",\n      \"variable\": \"var(--colors-blue)\"\n    },\n    \"colors.green\": {\n      \"value\": \"var(--colors-green)\",\n      \"variable\": \"var(--colors-green)\"\n    },\n    \"colors.red\": {\n-     \"value\": \"var(--colors-red)\",\n+     \"value\": \"red\",\n      \"variable\": \"var(--colors-red)\"\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming Pattern JSX Property\nDESCRIPTION: Breaking change that renames the 'jsx' property to 'jsxName' in pattern definitions.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_75\n\nLANGUAGE: diff\nCODE:\n```\nconst hstack = definePattern({\n-  jsx: 'HStack',\n+  jsxName: 'HStack',\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Building Library and Generating Static CSS\nDESCRIPTION: These bash commands demonstrate how to build a component library with tsup and then generate a static CSS file using Panda's cssgen command with a specified output file.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/guides/component-library.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# build the library code\ntsup src/index.tsx\n\n# generate the static CSS file\npanda cssgen --outfile dist/styles.css\n```\n\n----------------------------------------\n\nTITLE: Applying Margin to All Sides in JSX with Chakra UI and Panda\nDESCRIPTION: Shows how to apply margin to all sides of an element using the 'margin' property or its shorthand 'm' in Chakra UI with Panda.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/spacing.md#2025-04-18_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ margin: '5' })} />\n<div className={css({ m: '5' })} /> // shorthand\n```\n\n----------------------------------------\n\nTITLE: Configuring Codegen Prepare Hook in TypeScript\nDESCRIPTION: Demonstrates how to use the 'codegen:prepare' hook to modify generated files before they are written to disk. This hook receives the artifacts and changed files as parameters.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/fixture/CHANGELOG.md#2025-04-18_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  // ...\n  hooks: {\n    'codegen:prepare': ({ artifacts, changed }) => {\n      // do something with the emitted js/d.ts files\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring tsconfig.json for Panda CSS autocomplete\nDESCRIPTION: JSON configuration to include the styled-system directory in tsconfig.json for enabling Panda CSS import autocomplete in the IDE.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/qwik.mdx#2025-04-18_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ...\n  \"include\":  [\"src\", \"styled-system\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Panda CSS and Initializing Configuration\nDESCRIPTION: Commands to install Panda CSS and create the initial configuration file using different package managers.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/storybook.mdx#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install -D @pandacss/dev\npnpm panda init --postcss\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D @pandacss/dev\nnpx panda init --postcss\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D @pandacss/dev\nyarn panda init --postcss\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add -D @pandacss/dev\nbun panda init --postcss\n```\n\n----------------------------------------\n\nTITLE: Updating Svelte Configuration\nDESCRIPTION: JavaScript configuration for Svelte, including PostCSS preprocessing and Panda CSS alias.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/svelte.mdx#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport adapter from '@sveltejs/adapter-auto';\nimport { vitePreprocess } from '@sveltejs/vite-plugin-svelte';\n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n\t// Consult https://kit.svelte.dev/docs/integrations#preprocessors\n\t// for more information about preprocessors\n\tpreprocess: [\n\t\tvitePreprocess()\n\t],\n\n\tkit: {\n\t\t// adapter-auto only supports some environments, see https://kit.svelte.dev/docs/adapter-auto for a list.\n\t\t// If your environment is not supported or you settled on a specific environment, switch out the adapter.\n\t\t// See https://kit.svelte.dev/docs/adapters for more information about adapters.\n\t\tadapter: adapter(),\n\t\talias: {\n\t\t\t'styled-system': './styled-system/*'\n\t\t}\n\t}\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Updating Test Snapshots in TypeScript\nDESCRIPTION: Command to update all test snapshots using the CLI tool with Bun runtime. This can be used with the -u or --update flag.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/codegen/README.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nbun cli.ts test -u\n```\n\n----------------------------------------\n\nTITLE: Setting Up CSS Layers in Entry File\nDESCRIPTION: CSS code defining the layer order for Panda's styling system, which should be included in your entry CSS file.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/README.md#2025-04-18_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@layer reset, base, tokens, recipes, utilities;\n```\n\n----------------------------------------\n\nTITLE: Panda CSS Configuration\nDESCRIPTION: Configuration file for Panda CSS defining include/exclude paths and output directory settings.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/solidjs.mdx#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from \"@pandacss/dev\"\n\nexport default defineConfig({\n preflight: true,\n include: [\"./src/**/*.{js,jsx,ts,tsx}\", \"./pages/**/*.{js,jsx,ts,tsx}\"],\n exclude: [],\n outdir: \"styled-system\",\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Panda Build Info File\nDESCRIPTION: This bash command generates a Panda build info file, which contains information about the static extraction result without including the source code. This file can be used by Panda to generate CSS classes.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/guides/component-library.md#2025-04-18_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\npanda ship --outfile dist/panda.buildinfo.json\n```\n\n----------------------------------------\n\nTITLE: Updating PostCSS Config for Troubleshooting\nDESCRIPTION: Updates the PostCSS configuration to resolve issues with finding the Panda CSS plugin.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/storybook.mdx#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: [require('@pandacss/dev/postcss')],\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming Pattern JSX Property in PandaCSS 0.9.0\nDESCRIPTION: Breaking change that renames the 'jsx' property to 'jsxName' in pattern definitions for better API consistency.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_101\n\nLANGUAGE: diff\nCODE:\n```\nconst hstack = definePattern({\n-  jsx: 'HStack',\n+  jsxName: 'HStack',\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Linking to Panda CSS Component Library Documentation in Markdown\nDESCRIPTION: This snippet provides a Markdown link to the official Panda CSS documentation on using it as a component library. It's a reference for developers working with Chakra UI and Panda CSS integration.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/component-lib/README.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n  * https://panda-css.com/docs/guides/component-library\n```\n\n----------------------------------------\n\nTITLE: Using Token References with Curly Braces in Media Queries\nDESCRIPTION: Example of using token references with curly braces in media queries, allowing for use of design tokens in container queries.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_121\n\nLANGUAGE: typescript\nCODE:\n```\ncss({\n  // ✅ this is fine now, will resolve to something like\n  // `@container (min-width: 56em)`\n  '@container (min-width: {sizes.4xl})': {\n    color: 'green',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Ensuring Unique Classnames and Adding Border Radius Token in Panda CSS\nDESCRIPTION: This code block describes changes to ensure unique classnames across utilities and the addition of a new border radius token in the Panda CSS preset base package.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/preset-base/CHANGELOG.md#2025-04-18_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n- e157dd1: - Ensure classnames are unique across utilities to prevent potential clash\n  - Add support for `4xl` border radius token\n```\n\n----------------------------------------\n\nTITLE: Customizing Hash Function for Utility Classes\nDESCRIPTION: Hook implementation for customizing the hash function used when config.hash is set to true, allowing for custom class name generation strategies.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_51\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  // ...\n  hooks: {\n    'utility:created': ({ configure }) => {\n      configure({\n        toHash: (paths, toHash) => {\n          const stringConds = paths.join(':')\n          const splitConds = stringConds.split('_')\n          const hashConds = splitConds.map(toHash)\n          return hashConds.join('_')\n        },\n      })\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Panda Design Token Options in JSON\nDESCRIPTION: This snippet demonstrates various design token related configuration options for Panda, including shorthands, CSS variable root, conditions, and global CSS.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/references/config.md#2025-04-18_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"shorthands\": true,\n  \"cssVarRoot\": \":where(:host, :root)\",\n  \"conditions\": { \"hover\": \"&:hover\" },\n  \"globalCss\": {\n    \"html, body\": {\n      \"margin\": 0,\n      \"padding\": 0\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Target for Chakra UI Panda\nDESCRIPTION: Updates the TypeScript compiler options to target ES6 instead of ES5 to resolve codegen compatibility issues. This configuration change is necessary because const transformations to ES5 are not supported in the codegen process.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/nextjs.mdx#2025-04-18_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"target\": \"es6\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated CSS Output for Style Ordering\nDESCRIPTION: The resulting CSS output after applying the new deterministic ordering of longhand and shorthand properties. Shows how padding properties are organized in utility classes.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/node/CHANGELOG.md#2025-04-18_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@layer utilities {\n  .p_1px {\n    padding: 1px;\n  }\n\n  .pt_3px {\n    padding-top: 3px;\n  }\n\n  .pb_4px {\n    padding-bottom: 4px;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating package.json Scripts for Panda CSS\nDESCRIPTION: Adds a 'prepare' script to the package.json file to run Panda CSS CLI codegen before each build.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/storybook.mdx#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"prepare\": \"panda codegen\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Codegen Prepare Hook for File Processing\nDESCRIPTION: Hook implementation for modifying generated code files before they are written to disk, enabling custom post-processing of the output files.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_52\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  // ...\n  hooks: {\n    'codegen:prepare': ({ artifacts, changed }) => {\n      // do something with the emitted js/d.ts files\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Starting Gatsby Development Server\nDESCRIPTION: Command to start the Gatsby development server after setting up Panda CSS.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/gatsby.mdx#2025-04-18_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm run develop\n```\n\n----------------------------------------\n\nTITLE: CSS Recipes Layer Example\nDESCRIPTION: Example of the CSS output for the recipes layer in Panda CSS which contains component styles created within the configuration.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/cascade-layers.md#2025-04-18_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@layer recipes {\n  .button {\n    /* ... */\n  }\n\n  .button--variant-primary {\n    /* ... */\n  }\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Utility Configuration Shorthand Without className\nDESCRIPTION: This example demonstrates an issue in utility configuration where a shorthand without 'className' returns incorrect CSS. The code shows the problematic configuration pattern.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_122\n\nLANGUAGE: javascript\nCODE:\n```\nutilities: {\n  extend: {\n    coloredBorder: {\n      shorthand: 'cb', // no classname, returns incorrect css\n      values: ['red', 'green', 'blue'],\n      transform(value) {\n        return {\n          border: `1px solid ${value}`,\n        };\n      },\n    },\n  },\n},\n```\n\n----------------------------------------\n\nTITLE: Setting Basic Width in JSX with Chakra UI\nDESCRIPTION: Demonstrates how to set basic width using both full 'width' property and shorthand 'w' property.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/sizing.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ width: '5' })} />\n<div className={css({ w: '5' })} /> // shorthand\n```\n\n----------------------------------------\n\nTITLE: Adding Font Variables to HTML in Next.js Pages Router\nDESCRIPTION: Demonstrates how to add font variables to the HTML document using the Pages Router in Next.js.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/guides/fonts.md#2025-04-18_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { FiraCode, MonaSans } from '../styles/font'\n\nexport default function App({ Component, pageProps }) {\n  return (\n    <>\n      <style jsx global>\n        {`\n          :root {\n            --font-mona-sans: ${MonaSans.style.fontFamily};\n            --font-fira-code: ${FiraCode.style.fontFamily};\n          }\n        `}\n      </style>\n      <Component {...pageProps} />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: PostCSS Build Process\nDESCRIPTION: Examples of running PostCSS build process using CLI and JS API.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/postcss.mdx#2025-04-18_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npostcss -o output.css index.css\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst postcss = require(\"postcss\");\nconst fs = require(\"fs\");\n\nfs.readFile(\"index.css\", (err, css) => {\n  postcss()\n    .process(css, { from: \"index.css\", to: \"output.css\" })\n    .then((result) => {\n      console.log(result.css);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Importing CSS in Astro Page\nDESCRIPTION: Astro page code to import the index.css file containing Panda CSS configurations.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/astro.mdx#2025-04-18_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n---\nimport '../index.css';\n---\n```\n\n----------------------------------------\n\nTITLE: Creating a Markdown Blog Post in Docusaurus\nDESCRIPTION: This code snippet demonstrates how to create a basic blog post in Docusaurus using markdown. It shows the frontmatter structure with fields for slug, title, authors (including their names, titles, URLs, and images), and tags. The example also includes the post content body.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/docusaurus-ts/docs/tutorial-basics/create-a-blog-post.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nslug: greetings\ntitle: Greetings!\nauthors:\n  - name: Joel Marcey\n    title: Co-creator of Docusaurus 1\n    url: https://github.com/JoelMarcey\n    image_url: https://github.com/JoelMarcey.png\n  - name: Sébastien Lorber\n    title: Docusaurus maintainer\n    url: https://sebastienlorber.com\n    image_url: https://github.com/slorber.png\ntags: [greetings]\n---\n\nCongratulations, you have made your first post!\n\nFeel free to play around and edit this post as much as you like.\n```\n\n----------------------------------------\n\nTITLE: Updating package.json scripts for Panda CSS\nDESCRIPTION: A diff showing how to update the package.json scripts to include the 'prepare' script for Panda codegen. This ensures Panda output is regenerated after each dependency installation.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/cli.mdx#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n+    \"prepare\": \"panda codegen\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Styles in Svelte Layout\nDESCRIPTION: Svelte component for importing global styles in the layout file.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/svelte.mdx#2025-04-18_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  import '../app.css'\n</script>\n\n<slot />\n```\n\n----------------------------------------\n\nTITLE: Starting the development server using npm\nDESCRIPTION: Command to start the development server for a Qwik project using npm.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/qwik.mdx#2025-04-18_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: CSS Layer Configuration\nDESCRIPTION: CSS layer declaration for organizing styles in the correct order of precedence.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/solidjs.mdx#2025-04-18_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n@layer reset, base, tokens, recipes, utilities;\n```\n\n----------------------------------------\n\nTITLE: Using the CSS function for dynamic styling in Panda\nDESCRIPTION: Demonstrates how to use Panda's CSS function to create dynamic styles. This approach is useful for creating responsive designs and applying conditional styling.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/qwik-ts/public/robots.txt#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { css } from \"../styled-system/css\"\n\nfunction App() {\n  return (\n    <div\n      className={css({\n        container: \"lg\",\n        mx: \"auto\",\n        py: \"8\",\n        px: {\n          base: \"4\",\n          md: \"8\",\n        },\n      })}\n    >\n      {/* ... */}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Recipe Report Format Before Redesign in Shell\nDESCRIPTION: Example of the previous format used for the recipe report in the command line before the redesign. Shows the tabular format with columns for Recipe, Variant Combinations, Usage percentage, JSX percentage, Function percentage, Most Used variants, and Found in count.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n╔════════════════════════╤══════════════════════╤═════════╤═══════╤════════════╤═══════════════════╤══════════╗\n║ Recipe                 │ Variant Combinations │ Usage % │ JSX % │ Function % │ Most Used         │ Found in ║\n╟────────────────────────┼──────────────────────┼─────────┼───────┼────────────┼───────────────────┼──────────╢\n║ someRecipe (1 variant) │ 1 / 1                │ 100%    │ 100%  │ 0%         │ size.small        │ 1 file   ║\n╟────────────────────────┼──────────────────────┼─────────┼───────┼────────────┼───────────────────┼──────────╢\n║ button (4 variants)    │ 7 / 9                │ 77.78%  │ 63%   │ 38%        │ size.md, size.sm, │ 2 files  ║\n║                        │                      │         │       │            │ state.focused,    │          ║\n║                        │                      │         │       │            │ variant.danger,   │          ║\n║                        │                      │         │       │            │ variant.primary   │          ║\n╚════════════════════════╧══════════════════════╧═════════╧═══════╧════════════╧═══════════════════╧══════════╝\n```\n\n----------------------------------------\n\nTITLE: Panda CSS Main Configuration\nDESCRIPTION: Main configuration file for Panda CSS defining includes, excludes, and output directory.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/postcss.mdx#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  preflight: true,\n  include: ['./src/**/*.{ts,tsx,js,jsx}', './pages/**/*.{ts,tsx,js,jsx}'],\n  exclude: [],\n  outdir: 'styled-system'\n})\n```\n\n----------------------------------------\n\nTITLE: Theme JSON Structure in Panda CSS\nDESCRIPTION: Illustrates the structure of the JSON file generated for each theme, containing theme metadata and CSS.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/cli/CHANGELOG.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"primary\",\n  \"id\": \"panda-themes-primary\",\n  \"dataAttr\": \"primary\",\n  \"css\": \"[data-panda-theme=primary] { ... }\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Patterns with Default Values in Panda CSS\nDESCRIPTION: Example showing how to create a 'hstack' pattern with default gap value in Panda CSS configuration.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_94\n\nLANGUAGE: javascript\nCODE:\n```\ndefineConfig({\n  patterns: {\n    hstack: {\n      properties: {\n        justify: { type: 'property', value: 'justifyContent' },\n        gap: { type: 'property', value: 'gap' },\n      },\n      // you can also use a token like '10'\n      defaultValues: { gap: '40px' },\n      transform(props) {\n        const { justify, gap, ...rest } = props\n        return {\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: justify,\n          gap,\n          ...rest,\n        }\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Named Container Queries in React Components\nDESCRIPTION: Example of using named container queries in a React component, showing how to set container names and use them with responsive properties.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/conditional-styles.md#2025-04-18_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nimport { cq } from 'styled-system/patterns'\n\nfunction Demo() {\n  return (\n    <nav className={cq({ name: 'sidebar' })}>\n      <div\n        className={css({\n          fontSize: { base: 'lg', '@sidebar/sm': 'md' }\n        })}\n      />\n    </nav>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Moving Configuration Files\nDESCRIPTION: Command to move Panda configuration files to the Redwood config folder.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/redwood.mdx#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmv panda.config.ts postcss.config.js config/\n```\n\n----------------------------------------\n\nTITLE: Configuring JSX Pattern Options with Dot Notation\nDESCRIPTION: This snippet demonstrates how to configure JSX pattern options using dot notation in the Panda CSS configuration file.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/parser/CHANGELOG.md#2025-04-18_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  // ...\n  patterns: {\n    extend: {\n      grid: {\n        jsx: ['Form.Group', 'Grid'],\n      },\n      stack: {\n        jsx: ['Form.Action', 'Stack'],\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration for IDE Support\nDESCRIPTION: TSConfig update to include styled-system directory for better IDE support and autocomplete.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/ember.mdx#2025-04-18_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"include\":  [\"app/styled-system\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Panda CSS Autocomplete\nDESCRIPTION: JSON configuration to include the styled-system directory in tsconfig.json for better IDE autocomplete support.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/gatsby.mdx#2025-04-18_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ...\n  \"include\":  [\"src\", \"styled-system\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Using CSS Important Flag with Escape-Hatch Syntax\nDESCRIPTION: Demonstrates the fixed CSS generation issue with config.strictTokens when using [xxx] escape-hatch syntax with ! or !important.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_74\n\nLANGUAGE: typescript\nCODE:\n```\ncss({\n  borderWidth: '[2px!]',\n  width: '[2px !important]',\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a New Gatsby Project with CLI\nDESCRIPTION: Commands to create a new Gatsby project using the Gatsby CLI. It guides through the process of setting up a new project with TypeScript.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/gatsby.mdx#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm init gatsby\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd test-app\n```\n\n----------------------------------------\n\nTITLE: CSS Layer Configuration\nDESCRIPTION: CSS layer configuration for Panda CSS integration.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/vue.mdx#2025-04-18_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n@layer reset, base, tokens, recipes, utilities;\n```\n\n----------------------------------------\n\nTITLE: Installing Styled System Package\nDESCRIPTION: A simple bash command to install the styled-system package in an application using pnpm package manager.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/guides/component-library.md#2025-04-18_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @acme-org/styled-system\n```\n\n----------------------------------------\n\nTITLE: Configuring Panda Presets in JSON\nDESCRIPTION: This snippet demonstrates how to set up presets for Panda CSS configuration, including the default presets @pandacss/preset-base and @pandacss/preset-panda.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/references/config.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [\"@pandacss/preset-base\", \"@pandacss/preset-panda\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Fontsource Package\nDESCRIPTION: Command to install a Fontsource package for integrating fonts into a web application.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/guides/fonts.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @fontsource-variable/fira-code\n```\n\n----------------------------------------\n\nTITLE: Panda Hooks Interface TypeScript Definition\nDESCRIPTION: TypeScript interface for Panda hooks that allow customization of the build process. Defines various lifecycle hooks that can be used to transform config, parser behavior, and CSS generation.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_56\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface PandaHooks {\n  /**\n   * Called when the config is resolved, after all the presets are loaded and merged.\n   * This is the first hook called, you can use it to tweak the config before the context is created.\n   */\n  'config:resolved': (args: { conf: LoadConfigResult }) => MaybeAsyncReturn\n  /**\n   * Called when the Panda context has been created and the API is ready to be used.\n   */\n  'context:created': (args: { ctx: ApiInterface; logger: LoggerInterface }) => void\n  /**\n   * Called when the config file or one of its dependencies (imports) has changed.\n   */\n  'config:change': (args: { config: UserConfig }) => MaybeAsyncReturn\n  /**\n   * Called after reading the file content but before parsing it.\n   * You can use this hook to transform the file content to a tsx-friendly syntax so that Panda's parser can parse it.\n   * You can also use this hook to parse the file's content on your side using a custom parser, in this case you don't have to return anything.\n   */\n  'parser:before': (args: { filePath: string; content: string }) => string | void\n  /**\n   * Called after the file styles are extracted and processed into the resulting ParserResult object.\n   * You can also use this hook to add your own extraction results from your custom parser to the ParserResult object.\n   */\n  'parser:after': (args: { filePath: string; result: ParserResultInterface | undefined }) => void\n  /**\n   * Called after the codegen is completed\n   */\n  'codegen:done': () => MaybeAsyncReturn\n  /**\n   * Called right before adding the design-system CSS (global, static, preflight, tokens, keyframes) to the final CSS\n   * Called right before writing/injecting the final CSS (styles.css) that contains the design-system CSS and the parser CSS\n   * You can use it to tweak the CSS content before it's written to disk or injected through the postcss plugin.\n   */\n  'cssgen:done': (args: {\n    artifact: 'global' | 'static' | 'reset' | 'tokens' | 'keyframes' | 'styles.css'\n    content: string\n  }) => string | void\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Front Matter in Markdown Documents\nDESCRIPTION: Example of how to add front matter metadata to a Markdown document in Docusaurus. Front matter contains document metadata like ID, title, description, and custom URL path.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/docusaurus-ts/docs/tutorial-basics/markdown-features.mdx#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n---\nid: my-doc-id\ntitle: My document title\ndescription: My document description\nslug: /my-custom-url\n---\n\n## Markdown heading\n\nMarkdown text with [links](./hello.md)\n```\n\n----------------------------------------\n\nTITLE: Updating package.json Scripts for Panda CSS\nDESCRIPTION: JSON diff showing the addition of a 'prepare' script in package.json to run Panda CSS codegen before each build.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/gatsby.mdx#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n+    \"prepare\": \"panda codegen\",\n    \"develop\": \"gatsby develop\",\n    \"start\": \"gatsby develop\",\n    \"build\": \"gatsby build\",\n    \"serve\": \"gatsby serve\",\n    \"clean\": \"gatsby clean\",\n    \"typecheck\": \"tsc --noEmit\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Minimal CSS Generation with Custom Path\nDESCRIPTION: Command demonstrating how to generate minimal CSS output for specific page files, excluding theme tokens and other global styles.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/references/cli.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npanda cssgen \"src/**/pages/*.css\" --minimal --outfile dist/pages.css\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Styled-System Sources with Panda CSS (TypeScript)\nDESCRIPTION: Shows how to import and use CSS utilities from multiple styled-system sources after configuring multiple import maps.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nimport { css } from '@acme/css'\nimport { css as uiCss } from '@ui-lib/styled-system/css'\nimport { css as appCss } from '@ui-lib/styled-system/css'\n```\n\n----------------------------------------\n\nTITLE: Installing Panda CSS Dependencies\nDESCRIPTION: Commands to install Panda CSS and initialize configuration files.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/redwood.mdx#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd web\nyarn add -D @pandacss/dev postcss postcss-loader\nyarn panda init --postcss\n```\n\n----------------------------------------\n\nTITLE: Simplified Recipe Static CSS Generation in Panda CSS\nDESCRIPTION: Shows the improved syntax for generating all variants of a recipe in static CSS, introduced in version 0.5.1, using the wildcard operator.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_135\n\nLANGUAGE: js\nCODE:\n```\nstaticCss: {\n  recipes: {\n    button: ['*']\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Layer Configuration\nDESCRIPTION: CSS file defining the layer order for Panda CSS\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/remix.mdx#2025-04-18_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n@layer reset, base, tokens, recipes, utilities;\n```\n\n----------------------------------------\n\nTITLE: Hashed CSS Class Names Example\nDESCRIPTION: Comparison of regular atomic class names versus hashed class names when the hash option is enabled.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/template-literals.md#2025-04-18_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n.adfg5r {\n  font-size: 16px;\n}\n\n.bsdf35 {\n  font-weight: bold;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating PostCSS Configuration for Astro\nDESCRIPTION: Modification to PostCSS configuration file to properly integrate Panda CSS with Astro.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/astro.mdx#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n-  plugins: {\n-   '@pandacss/dev/postcss': {}\n-  }\n+  plugins: [require('@pandacss/dev/postcss')()]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating TypeScript Configuration\nDESCRIPTION: Adding styled-system paths to TypeScript configuration.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/redwood.mdx#2025-04-18_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n   // ...\n  \"compilerOptions\": {\n    \"paths\": {\n      // ...\n      \"styled-system/*\": [\"./styled-system/*\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cursor Token Configuration\nDESCRIPTION: Example of defining cursor tokens in PandaCSS configuration for consistent cursor styling across components.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// panda.config.ts\nexport default defineConfig({\n  theme: {\n    extend: {\n      tokens: {\n        cursor: {\n          button: { value: 'pointer' },\n          checkbox: { value: 'default' },\n        },\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Fixing Utility Configuration Shorthand in JavaScript\nDESCRIPTION: Fix for utility configuration where shorthand without className property returns incorrect CSS when using the shorthand version.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_94\n\nLANGUAGE: javascript\nCODE:\n```\nutilities: {\n  extend: {\n    coloredBorder: {\n      shorthand: 'cb', // no classname, returns incorrect css\n      values: ['red', 'green', 'blue'],\n      transform(value) {\n        return {\n          border: `1px solid ${value}`,\n        };\n      },\n    },\n  },\n},\n```\n\n----------------------------------------\n\nTITLE: Using TypeScript with JsxStyleProps\nDESCRIPTION: Example of using JsxStyleProps type to get type safety for style props in custom components.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/style-props.mdx#2025-04-18_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport { styled } from '../styled-system/jsx'\nimport type { JsxStyleProps } from '../styled-system/types'\n\ninterface ButtonProps {\n  color?: JsxStyleProps['color']\n}\n\nconst Button = (props: ButtonProps) => {\n  return <styled.button {...props}>\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect CSS Output Example for GlobalCSS Selectors\nDESCRIPTION: Shows the incorrect CSS output that was being generated for nested selectors in globalCSS. This represents the regression introduced in v0.26.2.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_54\n\nLANGUAGE: css\nCODE:\n```\n.aaa html {\n  color: var(--colors-red-100);\n}\n\n.aaa html .bbb {\n  color: var(--colors-red-200);\n}\n\n.aaa html .bbb .ccc {\n  color: var(--colors-red-300);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up CSS Layers\nDESCRIPTION: CSS configuration file defining the layer order for the styling system.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/ember.mdx#2025-04-18_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n@layer reset, base, tokens, recipes, utilities;\n```\n\n----------------------------------------\n\nTITLE: Using Panda Ship Command\nDESCRIPTION: Examples of using the 'panda ship' command to extract results from files. Shows different ways to target specific files or directories using glob patterns.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/references/cli.md#2025-04-18_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm panda ship\n# You can also analyze a specific file or folder\n# using the optional glob argument\npnpm panda ship src/components/Button.tsx\npnpm panda ship \"./src/components/**\"\n```\n\n----------------------------------------\n\nTITLE: Theme JSON Structure\nDESCRIPTION: JSON structure example for theme definition including name, ID, data attribute and CSS.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"primary\",\n  \"id\": \"panda-themes-primary\",\n  \"dataAttr\": \"primary\",\n  \"css\": \"[data-panda-theme=primary] { ... }\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Browserlist for Panda CSS Support\nDESCRIPTION: Specifies the minimum browser versions and criteria for Panda CSS support, including market share, recency, and specific browser versions.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/overview/browser-support.md#2025-04-18_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n>= 1%\nlast 1 major version\nnot dead\nChrome >= 99\nEdge >= 99\nFirefox >= 97\niOS >= 15.4\nSafari >= 15.4\nAndroid >= 115\nOpera >= 73\n```\n\n----------------------------------------\n\nTITLE: Configuring Nuxt for Panda CSS Integration\nDESCRIPTION: JavaScript configuration for Nuxt, including alias setup, global CSS import, and PostCSS plugin configuration for Panda CSS.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/nuxt.mdx#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createResolver } from '@nuxt/kit'\nconst { resolve } = createResolver(import.meta.url)\n\nexport default defineNuxtConfig({\n  alias: {\n    'styled-system': resolve('./styled-system')\n  },\n\n  css: [\n    '@/assets/css/global.css',\n  ],\n\n  postcss: {\n    plugins: {\n      '@pandacss/dev/postcss': {},\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Installing and configuring Panda CSS for Qwik using pnpm\nDESCRIPTION: Command to install and configure Panda CSS for a Qwik project using pnpm.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/qwik.mdx#2025-04-18_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm qwik add pandacss\n```\n\n----------------------------------------\n\nTITLE: Running Panda CSS CLI\nDESCRIPTION: Commands to run the Panda CSS CLI tool using different package managers. Includes options for running once or in watch mode.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/cli.mdx#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Run it once\npnpm panda\n\n# Run it in watch mode\npnpm panda --watch\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Run it once\nnpx panda\n\n# Run it in watch mode\nnpx panda --watch\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Run it once\nyarn panda\n\n# Run it in watch mode\nyarn panda --watch\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Run it once\nbun panda\n\n# Run it in watch mode\nbun panda --watch\n```\n\n----------------------------------------\n\nTITLE: Styled Components Object Syntax\nDESCRIPTION: Example of styling a button using Styled Components with object syntax.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/migration/styled-components.md#2025-04-18_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport styled from 'styled-components'\n\nconst Button = styled.button({\n  backgroundColor: '#fff',\n  border: '1px solid #000',\n  color: '#000',\n  padding: '0.5rem 1rem'\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Remix with Package Managers\nDESCRIPTION: Commands to create a new Remix project using different package managers\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/remix.mdx#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm dlx create-remix@latest\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration\nDESCRIPTION: TSConfig updates for Panda CSS integration\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/remix.mdx#2025-04-18_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"include\":  [\"src\", \"styled-system\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Gatsby Development Server\nDESCRIPTION: Commands to navigate into your new Gatsby site directory and start the development server. This will make your site available at http://localhost:8000.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/gatsby-ts/README.md#2025-04-18_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd my-gatsby-site/\nnpm run develop\n```\n\n----------------------------------------\n\nTITLE: Installing Panda CSS Dependencies\nDESCRIPTION: Commands to install Panda CSS and its peer dependencies including postcss-loader.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/ember.mdx#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install -D @pandacss/dev postcss postcss-loader\npnpm panda init --postcss\n```\n\n----------------------------------------\n\nTITLE: Package.json Script Updates\nDESCRIPTION: Modified package.json scripts to include Panda CSS codegen in the build process\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/remix.mdx#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"prepare\": \"panda codegen\",\n    \"build\": \"remix build\",\n    \"dev\": \"remix dev\",\n    \"start\": \"remix-serve build\",\n    \"typecheck\": \"tsc\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Major Breaking Change - Version 0.51.0\nDESCRIPTION: Fixed Next.js build failures due to TypeScript version mismatch by setting TS version to 5.6.2\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/config/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Minor Changes\n\n- d68ad1f: **[BREAKING]**: Fix issue where Next.js build might fail intermittently due to version mismatch between\n  internal `ts-morph` and userland `typescript`.\n\n  > The current version of TS supported is `5.6.2`\n```\n\n----------------------------------------\n\nTITLE: Configuring Panda CSS\nDESCRIPTION: Configuration file for Panda CSS defining include paths and output directory.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/preact.mdx#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from \"@pandacss/dev\"\n\nexport default defineConfig({\n preflight: true,\n // Where to look for your css declarations\n include: [\"./src/**/*.{js,jsx,ts,tsx}\", \"./pages/**/*.{js,jsx,ts,tsx}\"],\n exclude: [],\n outdir: \"styled-system\",\n})\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server\nDESCRIPTION: Commands to run the Next.js development server using either npm or yarn package managers. This allows developers to start working on their project locally.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/next-js-app/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Incorrect CSS Generation from GlobalCss Selector Issue\nDESCRIPTION: Example showing the incorrectly generated CSS output that resulted from the regression in globalCss selector ordering introduced in v0.26.2.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_68\n\nLANGUAGE: css\nCODE:\n```\n.aaa html {\n  color: var(--colors-red-100);\n}\n\n.aaa html .bbb {\n  color: var(--colors-red-200);\n}\n\n.aaa html .bbb .ccc {\n  color: var(--colors-red-300);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Panda CSS Dependencies\nDESCRIPTION: Commands to install Panda CSS and initialize its configuration with PostCSS support.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/preact.mdx#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D @pandacss/dev\nnpx panda init --postcss\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D @pandacss/dev\nyarn panda init --postcss\n```\n\n----------------------------------------\n\nTITLE: Configuring JSX Pattern Recognition with Dot Notation\nDESCRIPTION: Fixes an issue where pattern JSX options with dot notation didn't work correctly. This allows developers to specify component paths using dot notation for proper pattern matching.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/shared/CHANGELOG.md#2025-04-18_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  // ...\n  patterns: {\n    extend: {\n      grid: {\n        jsx: ['Form.Group', 'Grid'],\n      },\n      stack: {\n        jsx: ['Form.Action', 'Stack'],\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: CSS Media Query Hide Below Example\nDESCRIPTION: Example of using hideBelow utility to create media queries\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_77\n\nLANGUAGE: jsx\nCODE:\n```\ncss({ hideBelow: 'lg' })\n// => @media screen and (max-width: 63.9975em) { background: red; }\n```\n\n----------------------------------------\n\nTITLE: Setting Default Values in Pattern Configurations\nDESCRIPTION: Example of defining a new hstack pattern with default gap value, demonstrating how to set and override defaultValues in pattern configurations.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_86\n\nLANGUAGE: javascript\nCODE:\n```\ndefineConfig({\n  patterns: {\n    hstack: {\n      properties: {\n        justify: { type: 'property', value: 'justifyContent' },\n        gap: { type: 'property', value: 'gap' },\n      },\n      // you can also use a token like '10'\n      defaultValues: { gap: '40px' },\n      transform(props) {\n        const { justify, gap, ...rest } = props\n        return {\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: justify,\n          gap,\n          ...rest,\n        }\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js App with CLI\nDESCRIPTION: Command to create a new Next.js application using the official Create Next App CLI. The example uses pnpm, but alternatives for npm, yarn, and bun are provided.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/nextjs.mdx#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm dlx create-next-app@latest --use-pnpm\n```\n\n----------------------------------------\n\nTITLE: Updating PostCSS Configuration\nDESCRIPTION: Modification of PostCSS config to use the Panda configuration file.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/redwood.mdx#2025-04-18_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n+ const path = require('path')\n\nmodule.exports = {\n  plugins: {\n    \"@pandacss/dev/postcss\": {\n+      configPath: path.resolve(__dirname, 'panda.config.ts'),\n   },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Global Styles in Stitches\nDESCRIPTION: Shows how to create and apply global styles in Stitches using the globalCss function. This example resets margin and padding for all elements.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/migration/stitches.md#2025-04-18_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nimport { globalCss } from '@stitches/react'\n\nconst globalStyles = globalCss({\n  '*': { margin: 0, padding: 0 }\n})\n\n// then in your app\nglobalStyles()\n```\n\n----------------------------------------\n\nTITLE: Styled Components Template Literal Syntax\nDESCRIPTION: Example of styling a button using Styled Components with template literals.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/migration/styled-components.md#2025-04-18_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport styled from 'styled-components'\n\nconst Button = styled.button`\n  background-color: #fff;\n  border: 1px solid #000;\n  color: #000;\n  padding: 0.5rem 1rem;\n`\n```\n\n----------------------------------------\n\nTITLE: Configuring Panda CSS Content Paths\nDESCRIPTION: JavaScript configuration for Panda CSS, specifying paths to include for CSS declarations and output directory.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/vite.mdx#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from \"@pandacss/dev\"\n\nexport default defineConfig({\n preflight: true,\n\n include: [\"./src/**/*.{js,jsx,ts,tsx}\", \"./pages/**/*.{js,jsx,ts,tsx}\"],\n\n exclude: [],\n\n outdir: \"styled-system\",\n})\n```\n\n----------------------------------------\n\nTITLE: Setting up Panda CSS configuration\nDESCRIPTION: Creates a basic configuration file for Panda CSS, which is needed to define settings and prepare the framework for use in a project.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/qwik-ts/public/robots.txt#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nnpx panda init\n```\n\n----------------------------------------\n\nTITLE: Fixing TypeScript Error in Recipes with exactOptionalPropertyTypes\nDESCRIPTION: Example showing an issue that was fixed regarding TypeScript errors in recipes when exactOptionalPropertyTypes is set.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\n// This code relates to a fix mentioned in the changelog\n// The issue was that TypeScript would show errors in recipes when exactOptionalPropertyTypes was set\n// See: https://github.com/chakra-ui/panda/issues/1688\n```\n\n----------------------------------------\n\nTITLE: Configuring Server-Side Rendering for Styled Components in React\nDESCRIPTION: This code snippet demonstrates how to set up server-side rendering for Styled Components in a React application. It uses the ServerStyleSheet class to collect styles and render them on the server.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/migration/styled-components.md#2025-04-18_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { renderToString } from 'react-dom/server'\nimport { ServerStyleSheet } from 'styled-components'\n\nconst sheet = new ServerStyleSheet()\ntry {\n  const html = renderToString(sheet.collectStyles(<YourApp />))\n  const styleTags = sheet.getStyleTags() // or sheet.getStyleElement();\n} catch (error) {\n  // handle error\n  console.error(error)\n} finally {\n  sheet.seal()\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and configuring Panda CSS for Qwik using bun\nDESCRIPTION: Command to install and configure Panda CSS for a Qwik project using bun.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/qwik.mdx#2025-04-18_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nbun qwik add pandacss\n```\n\n----------------------------------------\n\nTITLE: TypeScript Error Example: Missing Type References\nDESCRIPTION: Example of TypeScript errors that occur when types aren't properly exported from the generated output directory, showing reference path errors.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_107\n\nLANGUAGE: typescript\nCODE:\n```\nsrc/components/Checkbox/index.tsx(8,7): error TS2742: The inferred type of 'Root' cannot be named without a reference to '../../../node_modules/@acmeorg/styled-system/types/system-types'. This is likely not portable. A type annotation is necessary.\nsrc/components/Checkbox/index.tsx(8,7): error TS2742: The inferred type of 'Root' cannot be named without a reference to '../../../node_modules/@acmeorg/styled-system/types/csstype'. This is likely not portable. A type annotation is necessary.\nsrc/components/Checkbox/index.tsx(8,7): error TS2742: The inferred type of 'Root' cannot be named without a reference to '../../../node_modules/@acmeorg/styled-system/types/conditions'. This is likely not portable. A type annotation is necessary.\n```\n\n----------------------------------------\n\nTITLE: Adding a Version Dropdown to Docusaurus Navigation\nDESCRIPTION: Configuration code to add a version dropdown menu to the navigation bar, allowing users to switch between different documentation versions.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/docusaurus-ts/docs/tutorial-extras/manage-docs-versions.md#2025-04-18_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  themeConfig: {\n    navbar: {\n      items: [\n        // highlight-start\n        {\n          type: 'docsVersionDropdown',\n        },\n        // highlight-end\n      ],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Debug Output JSON Structure Example\nDESCRIPTION: Example of the simplified JSON debug output structure after removing stack traces\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/node/CHANGELOG.md#2025-04-18_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"css\": [\n    {\n      \"type\": \"object\",\n      \"name\": \"css\",\n      \"box\": {\n        \"type\": \"map\",\n        \"value\": {},\n        \"node\": \"CallExpression\",\n        \"line\": 15,\n        \"column\": 27\n      },\n      \"data\": [\n        {\n          \"alignItems\": \"center\",\n          \"backgroundColor\": \"white\",\n          \"border\": \"1px solid black\",\n          \"borderRadius\": \"8px\",\n          \"display\": \"flex\",\n          \"gap\": \"16px\",\n          \"p\": \"8px\",\n          \"pr\": \"16px\"\n        }\n      ]\n    }\n  ]}\n```\n\n----------------------------------------\n\nTITLE: Using CSS Generator CLI with Minimal Flag\nDESCRIPTION: Example of using the panda cssgen CLI command with the --minimal flag to generate targeted CSS output.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_77\n\nLANGUAGE: bash\nCODE:\n```\npanda cssgen \"src/**/pages/*.css\" --minimal --outfile dist/pages.css\n```\n\n----------------------------------------\n\nTITLE: Extracting Variant Props from Styled Components\nDESCRIPTION: Example showing how to use the StyledVariantProps type to extract variants from styled components.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StyledVariantProps } from '../styled-system/jsx'\n\nconst Button = styled('button', {\n  base: { color: 'black' },\n  variants: {\n    state: {\n      error: { color: 'red' },\n      success: { color: 'green' },\n    },\n  },\n})\n\ntype ButtonVariantProps = StyledVariantProps<typeof Button>\n//   ^ { state?: 'error' | 'success' | undefined }\n```\n\n----------------------------------------\n\nTITLE: Token Output Changes\nDESCRIPTION: Diff showing changes in token output format for semantic tokens without conditions.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_34\n\nLANGUAGE: diff\nCODE:\n```\nconst tokens = {\n    \"colors.blue\": {\n-     \"value\": \"var(--colors-blue)\",\n+     \"value\": \"blue\",\n      \"variable\": \"var(--colors-blue)\"\n    },\n    \"colors.green\": {\n      \"value\": \"var(--colors-green)\",\n      \"variable\": \"var(--colors-green)\"\n    },\n    \"colors.red\": {\n-     \"value\": \"var(--colors-red)\",\n+     \"value\": \"red\",\n      \"variable\": \"var(--colors-red)\"\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring LightningCSS in Panda Config\nDESCRIPTION: Example of using the new lightningcss configuration option in defineConfig. This allows users to enable lightningcss instead of postcss for better performance in CSS generation.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/token-dictionary/CHANGELOG.md#2025-04-18_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nexport default defineConfig({\n  // ...\n  lightningcss: true, // Enable lightningcss instead of postcss\n  browserslist: ['> 0.5%, last 2 versions, Firefox ESR, not dead'] // Configure browserslist for lightningcss\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a New Svelte Project\nDESCRIPTION: Commands to create a new Svelte project using different package managers.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/svelte.mdx#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm create svelte@latest test-app\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm create svelte@latest test-app\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn create svelte@latest test-app\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun create svelte@latest test-app\n```\n\n----------------------------------------\n\nTITLE: Running Remix in Development Mode\nDESCRIPTION: Command to start the Remix application in development mode, which enables automatic rebuilding of assets when files change.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/remix/README.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Server-Side Rendering Configuration for Stitches\nDESCRIPTION: Shows how to configure server-side rendering with Stitches in a Next.js application by using getCssText and injecting styles into the document head.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/migration/stitches.md#2025-04-18_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\n// stitches.config.ts\nimport { createStitches } from '@stitches/react'\nexport const { getCssText } = createStitches()\n\n// _document.tsx\nexport default class Document extends NextDocument {\n  render() {\n    return (\n      <Html lang=\"en\">\n        <Head>\n          <style\n            id=\"stitches\"\n            dangerouslySetInnerHTML={{ __html: getCssText() }}\n          />\n        </Head>\n        <body>\n          <Main />\n          <NextScript />\n        </body>\n      </Html>\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing CSS in Storybook Config\nDESCRIPTION: Updates the Storybook preview configuration to import the main CSS file.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/storybook.mdx#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"../src/index.css\";\n\nimport type { Preview } from \"@storybook/react\";\n\nconst preview: Preview = {\n  parameters: {\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/,\n      },\n    },\n  },\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Using Panda CSS in a Vue Component\nDESCRIPTION: Example Vue component demonstrating the usage of Panda CSS for styling.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/nuxt.mdx#2025-04-18_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<script setup lang=\"ts\">\nimport { css } from \"styled-system/css\";\n</script>\n\n<template>\n  <div :class=\"css({ fontSize: '5xl', fontWeight: 'bold' })\">Hello 🐼!</div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Displaying Recipe Report Format After Redesign in Shell\nDESCRIPTION: Example of the redesigned recipe report format in the command line. Shows a more readable and concise tabular format with improved column headers and display of usage statistics.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n╔════════════════════════╤════════════════╤═══════════════════╤═══════════════════╤══════════╤═══════════╗\n║ Recipe                 │ Variant values │ Usage %           │ Most used         │ Found in │ Used as   ║\n╟────────────────────────┼────────────────┼───────────────────┼───────────────────┼──────────┼───────────╢\n║ someRecipe (1 variant) │ 1 value        │ 100% (1 value)    │ size.small        │ 1 file   │ jsx: 100% ║\n║                        │                │                   │                   │          │ fn: 0%    ║\n╟────────────────────────┼────────────────┼───────────────────┼───────────────────┼──────────┼───────────╢\n║ button (4 variants)    │ 9 values       │ 77.78% (7 values) │ size.md, size.sm, │ 2 files  │ jsx: 63%  ║\n║                        │                │                   │ state.focused,    │          │ fn: 38%   ║\n║                        │                │                   │ variant.danger,   │          │           ║\n║                        │                │                   │ variant.primary   │          │           ║\n╚════════════════════════╧════════════════╧═══════════════════╧═══════════════════╧══════════╧═══════════╝\n```\n\n----------------------------------------\n\nTITLE: Using Raw Method for Extractor Hints in React Components\nDESCRIPTION: Example of using the new raw() method to hint the CSS extractor about valid CSS objects, useful in scenarios like Storybook args or custom React props.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_122\n\nLANGUAGE: tsx\nCODE:\n```\n// mark the object as valid css for the extractor\n<Button rootProps={css.raw({ bg: 'red.400' })} />\n```\n\n----------------------------------------\n\nTITLE: Custom Component Tracking Configuration\nDESCRIPTION: Configuration for tracking custom components using the jsx property in patterns configuration.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_65\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Circle } from 'styled-system/jsx'\nconst CustomCircle = ({ children, ...props }) => {\n  return <Circle {...props}>{children}</Circle>\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  patterns: {\n    extend: {\n      circle: {\n        jsx: ['CustomCircle'],\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration Update\nDESCRIPTION: TSConfig update to include styled-system directory for better IDE support.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/react-router.mdx#2025-04-18_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"include\":  [\"app\", \"styled-system\"]\n}\n```\n\n----------------------------------------\n\nTITLE: PostCSS Plugin Configuration with Allow Option\nDESCRIPTION: Example configuration for @pandacss/dev/postcss plugin showing how to use the allow option to opt-out of node_modules exclusion for specific paths\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/postcss/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: {\n    '@pandacss/dev/postcss': {\n      allow: [/node_modules\\/.embroider/],\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Generated CSS Output\nDESCRIPTION: Example of the atomic CSS classes generated by Panda for the button recipe.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/recipes.md#2025-04-18_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@layer utilities {\n  .d_flex {\n    display: flex;\n  }\n\n  .bg_red_200 {\n    background-color: #fed7d7;\n  }\n\n  .color_white {\n    color: #fff;\n  }\n\n  .border_width_1px {\n    border-width: 1px;\n  }\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PostCSS for Panda\nDESCRIPTION: PostCSS configuration to enable the Panda plugin.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/postcss.mdx#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: {\n    '@pandacss/dev/postcss': {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Qwik Project for Production\nDESCRIPTION: Command to generate the production build, which creates client and server modules and runs a TypeScript type check on the source code.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/qwik-ts/README.md#2025-04-18_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npnpm build # or `yarn build`\n```\n\n----------------------------------------\n\nTITLE: Using the outfile flag with PandaCSS CLI in Bash\nDESCRIPTION: This snippet demonstrates how to use the newly added '--outfile' flag with the 'cssgen' command to specify a custom output file path for generated CSS.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/node/CHANGELOG.md#2025-04-18_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\npanda cssgen --outfile dist/styles.css\n```\n\n----------------------------------------\n\nTITLE: Configuring Gatsby PostCSS Plugin\nDESCRIPTION: TypeScript code for configuring the Gatsby PostCSS plugin in the gatsby-config.ts file.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/gatsby.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { GatsbyConfig } from \"gatsby\"\n\nconst config: GatsbyConfig = {\n  siteMetadata: {\n    title: `My Gatsby Site`,\n    siteUrl: `https://www.yourdomain.tld`,\n  },\n  graphqlTypegen: true,\n  plugins: [`gatsby-plugin-postcss`],\n}\n\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Creating Vue Project with Package Managers\nDESCRIPTION: Commands to create a new Vue project using different package managers via the official scaffolding tool.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/vue.mdx#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm create vue@latest\n```\n\n----------------------------------------\n\nTITLE: Installing and configuring Panda CSS for Qwik using yarn\nDESCRIPTION: Command to install and configure Panda CSS for a Qwik project using yarn.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/qwik.mdx#2025-04-18_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarn qwik add pandacss\n```\n\n----------------------------------------\n\nTITLE: Adding Locale Dropdown to Navbar\nDESCRIPTION: This JavaScript snippet modifies the docusaurus.config.js file to add a locale dropdown to the navbar. This allows users to switch between different language versions of the site.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/docusaurus-ts/docs/tutorial-extras/translate-your-site.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  themeConfig: {\n    navbar: {\n      items: [\n        // highlight-start\n        {\n          type: 'localeDropdown',\n        },\n        // highlight-end\n      ],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Starting a Docusaurus Development Server in Bash\nDESCRIPTION: These commands navigate to the newly created Docusaurus project directory and start the development server. The server builds the website locally and makes it available at http://localhost:3000/ with automatic reloading when files are changed.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/docusaurus-ts/docs/intro.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd my-website\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Creating a Documentation Version in Docusaurus\nDESCRIPTION: Command to create version 1.0 of your documentation. This copies the docs folder into versioned_docs/version-1.0 and creates a versions.json file.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/docusaurus-ts/docs/tutorial-extras/manage-docs-versions.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run docusaurus docs:version 1.0\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Document in Docusaurus with Markdown\nDESCRIPTION: Shows how to create a simple Markdown document for Docusaurus. This example demonstrates the basic structure of a Docusaurus document file with a heading and formatted text.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/docusaurus-ts/docs/tutorial-basics/create-a-document.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Hello\n\nThis is my **first Docusaurus document**!\n```\n\n----------------------------------------\n\nTITLE: TypeScript Export Error Example\nDESCRIPTION: Example of TypeScript error when types are not properly exported from the outdir's type declaration files\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_79\n\nLANGUAGE: typescript\nCODE:\n```\nsrc/components/Checkbox/index.tsx(8,7): error TS2742: The inferred type of 'Root' cannot be named without a reference to '../../../node_modules/@acmeorg/styled-system/types/system-types'. This is likely not portable. A type annotation is necessary.\nsrc/components/Checkbox/index.tsx(8,7): error TS2742: The inferred type of 'Root' cannot be named without a reference to '../../../node_modules/@acmeorg/styled-system/types/csstype'. This is likely not portable. A type annotation is necessary.\nsrc/components/Checkbox/index.tsx(8,7): error TS2742: The inferred type of 'Root' cannot be named without a reference to '../../../node_modules/@acmeorg/styled-system/types/conditions'. This is likely not portable. A type annotation is necessary.\n```\n\n----------------------------------------\n\nTITLE: Updating Group Invalid Condition in Panda CSS\nDESCRIPTION: This snippet indicates an update to the groupInvalid condition implementation in the Panda CSS preset base package.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/preset-base/CHANGELOG.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- 01d72ad: - Update `groupInvalid` condition according to other group selector implementations\n```\n\n----------------------------------------\n\nTITLE: Creating a new Qwik project using pnpm\nDESCRIPTION: Command to create a new Qwik project using the typescript template with pnpm.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/qwik.mdx#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm create qwik@latest\n```\n\n----------------------------------------\n\nTITLE: Running Qwik Preview Server\nDESCRIPTION: Command to create a production build and start a local preview server for testing the production build locally.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/qwik-ts/README.md#2025-04-18_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npnpm preview # or `yarn preview`\n```\n\n----------------------------------------\n\nTITLE: Installing Panda CSS via npm\nDESCRIPTION: Shows how to install the Panda CSS package using npm. This is the first step in setting up Panda in a project.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/qwik-ts/public/robots.txt#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @pandacss/dev -D\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook with Vite\nDESCRIPTION: JavaScript configuration for Storybook with Vite, allowing imports from the 'styled-system' directory.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/svelte.mdx#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig, mergeConfig } from 'vite';\n\n/** @type { import('@storybook/sveltekit').StorybookConfig } */\n\nconst config = {\n  // other Storybook config...\n  viteFinal: async (config) => {\n    return mergeConfig(\n      config,\n      defineConfig({\n        server: {\n          fs: {\n            allow: ['styled-system']\n          }\n        }\n      })\n    );\n  }\n};\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Building Localized Docusaurus Site\nDESCRIPTION: These bash commands demonstrate how to build the Docusaurus site for a specific locale (French) or for all configured locales. This generates static files for deployment.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/docusaurus-ts/docs/tutorial-extras/translate-your-site.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build -- --locale fr\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies in Nuxt 3 with Different Package Managers\nDESCRIPTION: Commands for installing project dependencies using three different package managers: Yarn, npm, and pnpm.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/nuxt/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# yarn\nyarn install\n\n# npm\nnpm install\n\n# pnpm\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Markdown Blog Post Frontmatter\nDESCRIPTION: YAML frontmatter defining blog post metadata including slug, title, authors and tags.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/docusaurus-ts/blog/2021-08-26-welcome/index.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nslug: welcome\ntitle: Welcome\nauthors: [slorber, yangshun]\ntags: [facebook, hello, docusaurus]\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring PostCSS Plugin Allow Option\nDESCRIPTION: Configuration example for allowing PostCSS to parse CSS files in specific node_modules paths.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_32\n\nLANGUAGE: js\nCODE:\n```\n//postcss.config.cjs\n\nmodule.exports = {\n  plugins: {\n    '@pandacss/dev/postcss': {\n      allow: [/node_modules\\/.embroider/],\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Shorthand Props in PandaCSS\nDESCRIPTION: Configuration example showing how to disable shorthand props in the PandaCSS configuration.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_105\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  // ...\n  shorthands: false,\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Preact Project with TypeScript\nDESCRIPTION: Commands to create a new Preact project using the TypeScript template via preact-cli.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/preact.mdx#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx preact-cli create typescript test-app\ncd test-app\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx preact-cli create typescript test-app --yarn\ncd test-app\n```\n\n----------------------------------------\n\nTITLE: Configuring Panda CSS Content Paths\nDESCRIPTION: JavaScript configuration for Panda CSS, specifying which files to include for CSS declarations.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/gatsby.mdx#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from \"@pandacss/dev\"\n\nexport default defineConfig({\n preflight: true,\n // Where to look for your css declarations\n include: [\"./src/pages/*.{js,jsx,ts,tsx}\", \"./src/components/**/*.{js,jsx,ts,tsx}\"],\n exclude: [],\n outdir: \"styled-system\",\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Panda with Object Syntax\nDESCRIPTION: Command to initialize a Panda project with object syntax for React applications.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/migration/styled-components.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npanda init -p --jsx-framework react\n```\n\n----------------------------------------\n\nTITLE: Incorrect Runtime Reference Implementation in Panda CSS\nDESCRIPTION: Demonstrates an anti-pattern where color values are referenced from an object at runtime, which won't be properly extracted by Panda's static analysis.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/guides/dynamic-styling.md#2025-04-18_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState } from 'react'\nimport { css } from '../styled-system/css'\n\nconst colorByType = {\n  primary: 'red.300',\n  secondary: 'blue.300',\n  tertiary: 'green.300'\n}\n\nconst Section = () => {\n  const [type, setType] = useState('primary')\n\n  // ❌ Avoid: since only \"gray.100\" is statically extractable here\n  // This will not work as expected, the color CSS won't be generated\n  return (\n    <section className={css({ color: colorByType[type] ?? 'gray.100' })}>\n      ❌ Will not be extracted\n    </section>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Positioned Component with Default Props\nDESCRIPTION: React component example showing how identifier default values are resolved from parameters\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/extractor/CHANGELOG.md#2025-04-18_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Positioned: React.FC<PositionedProps> = ({ children, position = 'absolute', inset = 0, ...rest }) => (\n  <styled.div position={position} inset={inset} {...rest}>\n    {children}\n  </styled.div>\n)\n```\n\n----------------------------------------\n\nTITLE: Deprecating a Recipe in PandaCSS Configuration\nDESCRIPTION: Demonstrates how to mark a recipe as deprecated by setting the 'deprecated' property to true in the recipe definition. The example shows deprecating a recipe named 'btn'.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/customization/deprecations.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  theme: {\n    recipes: {\n      btn: {\n        deprecated: true\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Page Links in Markdown Using URL Paths\nDESCRIPTION: Example showing how to create links in Markdown using URL paths. This approach references pages by their URL path.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/docusaurus-ts/docs/tutorial-basics/markdown-features.mdx#2025-04-18_snippet_1\n\nLANGUAGE: md\nCODE:\n```\nLet's see how to [Create a page](/create-a-page).\n```\n\n----------------------------------------\n\nTITLE: Restricting JSX Property Extraction (JavaScript)\nDESCRIPTION: This patch prevents all JSX properties from being extracted if none are provided, relying on the isStyleProp function instead.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/parser/CHANGELOG.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\na3d760ce: Do not allow all JSX properties to be extracted if none provided, rely on the `isStyleProp` fn instead\n```\n\n----------------------------------------\n\nTITLE: Creating Admonitions in Markdown\nDESCRIPTION: Example of using Docusaurus's special syntax for creating admonitions (callouts). Shows both tip and danger admonition types with custom content.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/docusaurus-ts/docs/tutorial-basics/markdown-features.mdx#2025-04-18_snippet_7\n\nLANGUAGE: md\nCODE:\n```\n:::tip My tip\n\nUse this awesome feature option\n\n:::\n\n:::danger Take care\n\nThis action is dangerous\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Using Array Values in CSS Property with Panda CSS JSX Factory\nDESCRIPTION: Example showing how to use array values in the special css property for JSX factory and patterns, making it easier to merge styles from multiple sources like component and prop styles.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Stack, styled } from '../styled-system/jsx'\n\nconst HeroSection = (props) => {\n  return (\n    <Stack css={[{ color: 'blue.300', padding: '4' }, props.css]}>\n      <styled.div css={[{ fontSize: '2xl' }, props.hero]}>Hero Section</styled.div>\n    </Stack>\n  )\n}\n\nconst App = () => {\n  return (\n    <>\n      <HeroSection css={{ backgroundColor: 'yellow.300' }} hero={css.raw({ fontSize: '4xl', color: 'red.300' })} />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Document Sidebar with Markdown Metadata\nDESCRIPTION: Demonstrates how to add frontmatter metadata to a Markdown document to customize its sidebar appearance. The example shows how to set a custom sidebar label and position.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/docusaurus-ts/docs/tutorial-basics/create-a-document.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\nsidebar_label: 'Hi!'\nsidebar_position: 3\n---\n\n# Hello\n\nThis is my **first Docusaurus document**!\n```\n\n----------------------------------------\n\nTITLE: Using curly brace token references in media queries\nDESCRIPTION: Example of using token references with curly braces in container queries, which resolves to the specified token value.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_65\n\nLANGUAGE: typescript\nCODE:\n```\ncss({\n  // ✅ this is fine now, will resolve to something like\n  // `@container (min-width: 56em)`\n  '@container (min-width: {sizes.4xl})': {\n    color: 'green',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Displaying Astro Project Directory Structure\nDESCRIPTION: Illustrates the standard directory structure of an Astro project, showing the organization of public assets, components, layouts, and pages directories.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/astro/README.md#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n/\n├── public/\n│   └── favicon.svg\n├── src/\n│   ├── components/\n│   │   └── Card.astro\n│   ├── layouts/\n│   │   └── Layout.astro\n│   └── pages/\n│       └── index.astro\n└── package.json\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Directory Structure in Qwik City\nDESCRIPTION: Shows the basic directory structure of a Qwik City project, highlighting the public directory for static assets and the src directory containing components and routes.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/qwik-ts/README.md#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n├── public/\n│   └── ...\n└── src/\n    ├── components/\n    │   └── ...\n    └── routes/\n        └── ...\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server\nDESCRIPTION: Command to start a local development server that opens a browser window automatically. Changes to the website content are reflected live without requiring server restart.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/docusaurus-ts/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn start\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging for Panda CSS PostCSS Plugin\nDESCRIPTION: Demonstrates how to configure logging for the Panda CSS PostCSS plugin by specifying a logfile option in the plugin configuration.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/fixture/CHANGELOG.md#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: {\n    '@pandacss/dev/postcss': {\n      logfile: './logs/panda.log',\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Grid Pattern MinChildWidth Token Usage - After\nDESCRIPTION: Demonstrates improved grid pattern handling with proper token value interpretation for minChildWidth\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_76\n\nLANGUAGE: tsx\nCODE:\n```\n<div className={grid({ minChildWidth: '80px', gap: 8 })} />\n// ✅ grid-template-columns: repeat(auto-fit, minmax(80px, 1fr))\n\n<div className={grid({ minChildWidth: '20', gap: 8 })} />\n// ✅ grid-template-columns: repeat(auto-fit, minmax(var(--sizes-20, 20), 1fr))\n//                                                  ^^^^^^^^^^^^^^^^^^^\n```\n\n----------------------------------------\n\nTITLE: Defining StrictableProps Type in TypeScript\nDESCRIPTION: Defines a type containing an exhaustive list of CSS properties that the new config.strictPropertyValues option will be applied to.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_71\n\nLANGUAGE: typescript\nCODE:\n```\ntype StrictableProps =\n  | 'alignContent'\n  | 'alignItems'\n  | 'alignSelf'\n  | 'all'\n  | 'animationComposition'\n  | 'animationDirection'\n  | 'animationFillMode'\n  | 'appearance'\n  | 'backfaceVisibility'\n  | 'backgroundAttachment'\n  | 'backgroundClip'\n  | 'borderCollapse'\n  | 'border'\n  | 'borderBlock'\n  | 'borderBlockEnd'\n  | 'borderBlockStart'\n  | 'borderBottom'\n  | 'borderInline'\n  | 'borderInlineEnd'\n  | 'borderInlineStart'\n  | 'borderLeft'\n  | 'borderRight'\n  | 'borderTop'\n  | 'borderBlockEndStyle'\n  | 'borderBlockStartStyle'\n  | 'borderBlockStyle'\n  | 'borderBottomStyle'\n  | 'borderInlineEndStyle'\n  | 'borderInlineStartStyle'\n  | 'borderInlineStyle'\n  | 'borderLeftStyle'\n  | 'borderRightStyle'\n  | 'borderTopStyle'\n  | 'boxDecorationBreak'\n  | 'boxSizing'\n  | 'breakAfter'\n  | 'breakBefore'\n  | 'breakInside'\n  | 'captionSide'\n  | 'clear'\n  | 'columnFill'\n  | 'columnRuleStyle'\n  | 'contentVisibility'\n  | 'direction'\n  | 'display'\n  | 'emptyCells'\n  | 'flexDirection'\n  | 'flexWrap'\n  | 'float'\n  | 'fontKerning'\n  | 'forcedColorAdjust'\n  | 'isolation'\n  | 'lineBreak'\n  | 'mixBlendMode'\n  | 'objectFit'\n  | 'outlineStyle'\n  | 'overflow'\n  | 'overflowX'\n  | 'overflowY'\n  | 'overflowBlock'\n  | 'overflowInline'\n  | 'overflowWrap'\n  | 'pointerEvents'\n  | 'position'\n  | 'resize'\n  | 'scrollBehavior'\n  | 'touchAction'\n  | 'transformBox'\n  | 'transformStyle'\n  | 'userSelect'\n  | 'visibility'\n  | 'wordBreak'\n  | 'writingMode'\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Queries in Panda CSS\nDESCRIPTION: Demonstrates how to configure container queries in Panda CSS by defining container names and sizes in the theme configuration. This enables the use of container query syntax in styles.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/preset-base/CHANGELOG.md#2025-04-18_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  // ...\n  theme: {\n    extend: {\n      containerNames: ['sidebar', 'content'],\n      containerSizes: {\n        xs: '40em',\n        sm: '60em',\n        md: '80em',\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Example Component with JSX Attribute Fix - TypeScript/React\nDESCRIPTION: Example showing the fix for static extraction with JSX attributes containing JSX nodes. Both Flex and Stack components now properly extract style props.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/extractor/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst Component = () => {\n  return (\n    <>\n      <Flex icon={<svg className=\"icon\" />} ml=\"2\" />\n      <Stack ml=\"4\" icon={<div className=\"icon\" />} />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Running Panda Codegen Command\nDESCRIPTION: Execute the codegen command to generate the necessary functions for template literals after configuring your project.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/template-literals.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npanda codegen --clean\n```\n\n----------------------------------------\n\nTITLE: Improved JSON debug output format in JSON\nDESCRIPTION: This shows the improved format of the JSON debug output with removed stack information. The cleaner format is easier to read and focuses on the essential styling information.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/node/CHANGELOG.md#2025-04-18_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"css\": [\n    {\n      \"type\": \"object\",\n      \"name\": \"css\",\n      \"box\": {\n        \"type\": \"map\",\n        \"value\": {},\n        \"node\": \"CallExpression\",\n        \"line\": 15,\n        \"column\": 27\n      },\n      \"data\": [\n        {\n          \"alignItems\": \"center\",\n          \"backgroundColor\": \"white\",\n          \"border\": \"1px solid black\",\n          \"borderRadius\": \"8px\",\n          \"display\": \"flex\",\n          \"gap\": \"16px\",\n          \"p\": \"8px\",\n          \"pr\": \"16px\"\n        }\n      ]\n    }\n  ],\n  \"cva\": [],\n  \"recipe\": {\n    \"checkboxRoot\": [\n      {\n        \"type\": \"recipe\",\n        \"name\": \"checkboxRoot\",\n        \"box\": {\n          \"type\": \"map\",\n          \"value\": {},\n          \"node\": \"CallExpression\",\n          \"line\": 38,\n          \"column\": 47\n        },\n        \"data\": [\n          {}\n        ]\n      }\n    ],\n```\n\n----------------------------------------\n\nTITLE: Building a Preset with tsup\nDESCRIPTION: A simple bash command to build the Panda preset TypeScript file using tsup bundler.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/guides/component-library.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm tsup src/index.ts\n```\n\n----------------------------------------\n\nTITLE: Adding Grid Pattern with minChildWidth as Token Value in React\nDESCRIPTION: Example of using the grid pattern with minChildWidth property, which now correctly interprets token values. This shows the before and after behavior for both px values and token values.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/preset-base/CHANGELOG.md#2025-04-18_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={grid({ minChildWidth: '80px', gap: 8 })} />\n// ✅ grid-template-columns: repeat(auto-fit, minmax(80px, 1fr))\n\n<div className={grid({ minChildWidth: '20', gap: 8 })} />\n// ❌ grid-template-columns: repeat(auto-fit, minmax(20, 1fr))\n//                                                  ^^^\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Format - Markdown\nDESCRIPTION: Standardized format used for documenting version changes and dependency updates in the changelog\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/preset-open-props/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [version]\n\n### Patch Changes\n\n- [commit hash] [change description]\n- Updated dependencies [commit hash]\n  - @pandacss/types@[version]\n```\n\n----------------------------------------\n\nTITLE: Generated HTML Output Example\nDESCRIPTION: Shows the resulting HTML output with applied CSS classes from the JSX factory example.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"d_flex flex_column gap_10px text_blue.300 p_4 bg_yellow.300\">\n  <div class=\"fs_4xl text_red.300\">Hero Section</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Panda CSS Autocomplete\nDESCRIPTION: TypeScript configuration to include the styled-system directory for improved IDE autocomplete support.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/astro.mdx#2025-04-18_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ...\n  \"include\":  [\"src\", \"styled-system\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Remix in Production Mode\nDESCRIPTION: Command to start the Remix application in production mode after it has been built, serving optimized assets.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/remix/README.md#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Enum Declaration Value Extraction - TypeScript\nDESCRIPTION: Example demonstrating the extraction of identifier values from an EnumDeclaration member in TypeScript.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/extractor/CHANGELOG.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nenum Color {\n  Red = 'red.400',\n  Blue = 'blue.400',\n}\n\nconst className = css({ color: Color.Red, backgroundColor: Color['Blue'] })\n```\n\n----------------------------------------\n\nTITLE: Creating Directory for Translated Content\nDESCRIPTION: This bash command creates a directory structure for storing the French translation of the intro.md file. It then copies the original English file to the new French directory for translation.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/docusaurus-ts/docs/tutorial-extras/translate-your-site.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p i18n/fr/docusaurus-plugin-content-docs/current/\n\ncp docs/intro.md i18n/fr/docusaurus-plugin-content-docs/current/intro.md\n```\n\n----------------------------------------\n\nTITLE: Creating Basic React Component Page\nDESCRIPTION: Example of creating a simple React component page with Layout wrapper that renders a heading and paragraph. The file should be placed in src/pages/my-react-page.js to be accessible at /my-react-page route.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/docusaurus-ts/docs/tutorial-basics/create-a-page.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport Layout from '@theme/Layout';\n\nexport default function MyReactPage() {\n  return (\n    <Layout>\n      <h1>My React page</h1>\n      <p>This is a React page</p>\n    </Layout>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Building a Svelte Project for Production\nDESCRIPTION: Command to create a production-optimized build of a Svelte application.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/svelte/README.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Building Static Website Content\nDESCRIPTION: Command to generate static website content in the 'build' directory. The resulting files can be deployed to any static content hosting service.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/docusaurus-ts/README.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn build\n```\n\n----------------------------------------\n\nTITLE: Starting the development server using pnpm\nDESCRIPTION: Command to start the development server for a Qwik project using pnpm.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/qwik.mdx#2025-04-18_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Testing Specific Scenario in TypeScript\nDESCRIPTION: Command to run tests for a specific scenario using the CLI tool with Bun runtime.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/codegen/README.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nbun cli.ts test {scenario}\n```\n\n----------------------------------------\n\nTITLE: Updated strictTokens Behavior in TypeScript\nDESCRIPTION: This code snippet shows the current behavior of `config.strictTokens`, which no longer enforces strict checking on properties that don't have config tokens. The display property now accepts arbitrary values when there is no config token for the property.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_96\n\nLANGUAGE: typescript\nCODE:\n```\n// config.strictTokens = true\ncss({ display: 'flex' }) // OK, didn't throw\ncss({ display: 'block' }) // OK, didn't throw\ncss({ display: 'abc' }) // ✅ will not throw there is no config token for 'abc'\n```\n\n----------------------------------------\n\nTITLE: Using CLI Syntax Option (Shell)\nDESCRIPTION: This command demonstrates how to use the --syntax option with the Panda CLI to specify the syntax type when initializing a project.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/parser/CHANGELOG.md#2025-04-18_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\npanda init -p --syntax template-literal\n```\n\n----------------------------------------\n\nTITLE: Starting Storybook Server\nDESCRIPTION: Commands to start the Storybook server using different package managers.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/storybook.mdx#2025-04-18_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npnpm storybook\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run storybook\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn storybook\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun storybook\n```\n\n----------------------------------------\n\nTITLE: Configuring Logfile for Panda CSS Commands\nDESCRIPTION: Example showing how to use the --logfile flag with Panda CSS commands and how to configure the logfile option in the PostCSS plugin for debugging purposes.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\n// CLI usage\n// panda --logfile ./logs/panda.log\n\n// PostCSS configuration\nmodule.exports = {\n  plugins: {\n    '@pandacss/dev/postcss': {\n      logfile: './logs/panda.log',\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies in Nuxt Project\nDESCRIPTION: Commands to enter the newly created directory and install dependencies using pnpm.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/nuxt.mdx#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd test-app\npnpm install\n```\n\n----------------------------------------\n\nTITLE: CSS Layer Configuration\nDESCRIPTION: Root CSS configuration defining the layer order for Panda CSS.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/postcss.mdx#2025-04-18_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n@layer reset, base, tokens, recipes, utilities;\n```\n\n----------------------------------------\n\nTITLE: Fixing float and animationName Properties in Panda CSS\nDESCRIPTION: This snippet describes fixes for the float and animationName properties in the Panda CSS preset base package.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/preset-base/CHANGELOG.md#2025-04-18_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n- 2116abe: Fix issue where `float` property did not allow inherited values (auto, initial, none, etc.)\n- c3e797e: Fix issue where `animationName` property was not connected to `theme.keyframes`, as a result, no\n  autocompletion was available.\n```\n\n----------------------------------------\n\nTITLE: Adding Images Using Relative Paths in Markdown\nDESCRIPTION: Example showing how to add images in Markdown using relative paths. This approach is useful for colocating images with the Markdown files that use them.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/docusaurus-ts/docs/tutorial-basics/markdown-features.mdx#2025-04-18_snippet_4\n\nLANGUAGE: md\nCODE:\n```\n![Docusaurus logo](./img/docusaurus.png)\n```\n\n----------------------------------------\n\nTITLE: Running Tests for All Scenarios in TypeScript\nDESCRIPTION: Command to run tests for all scenarios using the CLI tool with Bun runtime.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/codegen/README.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nbun cli.ts test\n```\n\n----------------------------------------\n\nTITLE: Creating Styled Components with Stitches in React\nDESCRIPTION: Shows how to create styled components with both regular and variant styles using the Stitches styled function in React.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/migration/stitches.md#2025-04-18_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { styled } from '@stitches/react'\n\nconst Button = styled('button', {\n  // base styles\n  backgroundColor: 'gainsboro',\n  borderRadius: '9999px',\n\n  variants: {\n    // variant styles\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using HTML Comment for Blog Post Truncation\nDESCRIPTION: HTML comment syntax used to limit blog post content in list view. The truncate comment indicates where the post preview should end.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/docusaurus-ts/blog/2019-05-29-long-blog-post.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- truncate -->\n```\n\n----------------------------------------\n\nTITLE: Using Root Color Palette in React Component\nDESCRIPTION: Example of using a root color palette and its values in a React component with the css function. Shows accessing properties at different levels of the palette.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/token-dictionary/CHANGELOG.md#2025-04-18_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nimport { css } from '../styled-system/css'\n\nexport const App = () => {\n  return (\n    <button\n      className={css({\n        colorPalette: 'button',\n        color: 'colorPalette.light',\n        backgroundColor: 'colorPalette.dark',\n        _hover: {\n          color: 'colorPalette.light.accent',\n          background: 'colorPalette.light.accent.secondary',\n        },\n      })}\n    >\n      Root color palette\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown Content for a Simple Page\nDESCRIPTION: This snippet shows the basic structure of Markdown content, including a main heading and a paragraph of text explaining the purpose of the example.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/docusaurus-ts/src/pages/markdown-page.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# Markdown page example\n\nYou don't need React to write simple standalone pages.\n```\n\n----------------------------------------\n\nTITLE: Using Arbitrary Values with strictTokens in Panda CSS\nDESCRIPTION: Example showing how strictTokens mode allows arbitrary values for properties that don't have tokens defined in their category, while still enforcing token usage for categories with defined tokens.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/studio/CHANGELOG.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// app.tsx\ncss({\n  // ❌ before this PR, TS would throw an error as you are supposed to only use Tokens\n  // even thought you don't have any `borderWidths` tokens defined !\n\n  // ✅ after this PR, TS will not throw an error anymore as you don't have any `borderWidths` tokens\n  // if you add one, this will error again (as it's supposed to)\n  borderWidths: '123px',\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Panda CSS with NPM\nDESCRIPTION: Command to install the latest version of Panda CSS as a development dependency using npm.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -D @pandacss/dev\n```\n\n----------------------------------------\n\nTITLE: Creating a new Qwik project using yarn\nDESCRIPTION: Command to create a new Qwik project using the typescript template with yarn.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/qwik.mdx#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn create qwik\n```\n\n----------------------------------------\n\nTITLE: Invalid Property Renaming Example in TypeScript\nDESCRIPTION: This example demonstrates incorrect property renaming at runtime which Panda cannot detect due to its static nature.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/concepts/style-props.mdx#2025-04-18_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Circle, CircleProps } from '../styled-system/jsx'\n\ntype Props = {\n  circleSize?: CircleProps['size']\n}\n\nconst CustomCircle = (props: Props) => {\n  const { circleSize = '3' } = props\n  return (\n    <Circle\n      // ❌ Avoid: Panda can't know that you're mapping `circleSize` to `size`\n      size={circleSize}\n    />\n  )\n}\n\n// ...\n\nconst App = () => {\n  return (\n    // In this case, you should keep the `size` naming\n    <CustomCircle circleSize=\"4\" />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Panda CSS\nDESCRIPTION: Commands to install Panda CSS and initialize it with PostCSS using different package managers.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/svelte.mdx#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm install -D @pandacss/dev\npnpm panda init --postcss\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D @pandacss/dev\nnpx panda init --postcss\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D @pandacss/dev\nyarn panda init --postcss\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add -D @pandacss/dev\nbun panda init --postcss\n```\n\n----------------------------------------\n\nTITLE: Starting the development server using yarn\nDESCRIPTION: Command to start the development server for a Qwik project using yarn.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/qwik.mdx#2025-04-18_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Explicitly Configuring Docusaurus Sidebar with JavaScript\nDESCRIPTION: Shows how to explicitly define a sidebar structure in the sidebars.js file. This approach gives more control over the sidebar organization compared to the automatic generation from the docs folder.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/docusaurus-ts/docs/tutorial-basics/create-a-document.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  tutorialSidebar: [\n    'intro',\n    // highlight-next-line\n    'hello',\n    {\n      type: 'category',\n      label: 'Tutorial',\n      items: ['tutorial-basics/create-a-document'],\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring i18n in Docusaurus\nDESCRIPTION: This snippet shows how to modify the docusaurus.config.js file to add support for the French locale. It sets the default locale to English and includes both English and French as available locales.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/docusaurus-ts/docs/tutorial-extras/translate-your-site.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  i18n: {\n    defaultLocale: 'en',\n    locales: ['en', 'fr'],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Theme Functions with JavaScript\nDESCRIPTION: Example showing how to import and use the getTheme function from Panda CSS. This code demonstrates the issue where dynamic theme imports caused Vite build errors.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getTheme } from 'styled-system/themes'\n\ngetTheme('default')\n// -> The above dynamic import cannot be analyzed by Vite.\n```\n\n----------------------------------------\n\nTITLE: Importing CSS Entry File in Gatsby\nDESCRIPTION: TypeScript code to import the main CSS file in the Gatsby browser file.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/gatsby.mdx#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport './src/styles/index.css'\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server\nDESCRIPTION: Command to start the development server after setting up Panda CSS in your project.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/README.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Starting Nuxt Development Server with pnpm\nDESCRIPTION: Command to start the Nuxt development server using pnpm.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/nuxt.mdx#2025-04-18_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Starting Localized Docusaurus Site\nDESCRIPTION: This command starts the Docusaurus site in development mode, specifically for the French locale. It allows viewing and testing the translated content.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/docusaurus-ts/docs/tutorial-extras/translate-your-site.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start -- --locale fr\n```\n\n----------------------------------------\n\nTITLE: Deploying Website Without SSH\nDESCRIPTION: Command to deploy the website using GitHub username authentication. This builds the website and pushes it to the 'gh-pages' branch for GitHub Pages hosting.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/docusaurus-ts/README.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ GIT_USER=<Your GitHub username> yarn deploy\n```\n\n----------------------------------------\n\nTITLE: Testing a Docusaurus Production Build Locally\nDESCRIPTION: This command serves the built static files locally to test the production build before deployment.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/docusaurus-ts/docs/tutorial-basics/deploy-your-site.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run serve\n```\n\n----------------------------------------\n\nTITLE: Configuring Logfile in PostCSS Plugin\nDESCRIPTION: Demonstrates how to configure the logfile option in the Panda CSS PostCSS plugin to stream logs for debugging.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_93\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: {\n    '@pandacss/dev/postcss': {\n      logfile: './logs/panda.log',\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JSX Style Props with 'none' Option in Panda CSS\nDESCRIPTION: Configuration example for using 'none' option in jsxStyleProps, which disables all JSX style props, providing maximum bundle size reduction of approximately 48%.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_119\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  jsxStyleProps: 'none',\n})\n```\n\n----------------------------------------\n\nTITLE: Custom prop forwarding with Framer Motion in Panda CSS\nDESCRIPTION: Example of using the shouldForwardProp option to customize which props are forwarded to the underlying element, particularly useful when integrating with libraries like Framer Motion.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_85\n\nLANGUAGE: jsx\nCODE:\n```\nimport { styled } from '../styled-system/jsx'\nimport { button } from '../styled-system/recipes'\nimport { isCssProperty } from '../styled-system/jsx'\nimport { motion, isValidMotionProp } from 'framer-motion'\n\nconst StyledMotion = styled(\n  motion.div,\n  {},\n  {\n    shouldForwardProp: (prop, variantKeys) =>\n      isValidMotionProp(prop) || (!variantKeys.includes(prop) && !isCssProperty(prop)),\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Server-Side Rendering with Themes in Next.js\nDESCRIPTION: Provides an example of how to implement server-side rendering with themes in a Next.js application, including layout and page components.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/cli/CHANGELOG.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// app/layout.tsx\nimport { Inter } from 'next/font/google'\nimport { cookies } from 'next/headers'\nimport { ThemeName, getTheme } from '../../styled-system/themes'\n\nexport default async function RootLayout({ children }: { children: React.ReactNode }) {\n  const store = cookies()\n  const themeName = store.get('theme')?.value as ThemeName\n  const theme = themeName && (await getTheme(themeName))\n\n  return (\n    <html lang=\"en\" data-panda-theme={themeName ? themeName : undefined}>\n      {themeName && (\n        <head>\n          <style type=\"text/css\" id={theme.id} dangerouslySetInnerHTML={{ __html: theme.css }} />\n        </head>\n      )}\n      <body>{children}</body>\n    </html>\n  )\n}\n\n// app/page.tsx\nimport { getTheme, injectTheme } from '../../styled-system/themes'\n\nexport default function Home() {\n  return (\n    <>\n      <button\n        onClick={async () => {\n          const current = document.documentElement.dataset.pandaTheme\n          const next = current === 'primary' ? 'secondary' : 'primary'\n          const theme = await getTheme(next)\n          setCookie('theme', next, 7)\n          injectTheme(document.documentElement, theme)\n        }}\n      >\n        swap theme\n      </button>\n    </>\n  )\n}\n\n// Set a Cookie\nfunction setCookie(cName: string, cValue: any, expDays: number) {\n  let date = new Date()\n  date.setTime(date.getTime() + expDays * 24 * 60 * 60 * 1000)\n  const expires = 'expires=' + date.toUTCString()\n  document.cookie = cName + '=' + cValue + '; ' + expires + '; path=/'\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Specific Scenario in TypeScript\nDESCRIPTION: Command to generate a specific scenario using the CLI tool with Bun runtime.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/codegen/README.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nbun cli.ts codegen {scenario}\n```\n\n----------------------------------------\n\nTITLE: Adding Integrations to Qwik Project\nDESCRIPTION: Command to add additional integrations to a Qwik project, such as Cloudflare, Netlify, Express server, or Static Site Generator.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/qwik-ts/README.md#2025-04-18_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm qwik add # or `yarn qwik add`\n```\n\n----------------------------------------\n\nTITLE: CPU Profiling with Panda CLI\nDESCRIPTION: Command to generate CPU profile data for performance analysis, creating a cpuprofile file that can be analyzed with tools like Speedscope.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/references/cli.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm panda --cpu-prof\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Animations with Stitches\nDESCRIPTION: Shows how to define and use keyframe animations in Stitches using the keyframes method.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/migration/stitches.md#2025-04-18_snippet_13\n\nLANGUAGE: ts\nCODE:\n```\nimport { keyframes, styled } from '@stitches/react'\n\nconst scaleUp = keyframes({\n  '0%': { transform: 'scale(1)' },\n  '100%': { transform: 'scale(1.5)' }\n})\n\n// usage\nconst Button = styled('button', {\n  '&:hover': {\n    animation: `${scaleUp} 200ms`\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Starting Astro Development Server with Panda CSS\nDESCRIPTION: Commands to start the Astro development server with Panda CSS integration using different package managers.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/astro.mdx#2025-04-18_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Deploying Website Using SSH\nDESCRIPTION: Command to deploy the website using SSH authentication. This builds the website and deploys it in a single step.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/docusaurus-ts/README.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ USE_SSH=true yarn deploy\n```\n\n----------------------------------------\n\nTITLE: Creating a New Gatsby TypeScript Site\nDESCRIPTION: Command to create a new Gatsby site using the minimal TypeScript starter. This uses the Gatsby CLI to initialize a project with TypeScript support.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/gatsby-ts/README.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# create a new Gatsby site using the minimal TypeScript starter\nnpm init gatsby -- -ts\n```\n\n----------------------------------------\n\nTITLE: Configuring PostCSS Plugin Logging in JavaScript\nDESCRIPTION: PostCSS plugin configuration for Panda CSS that enables file logging. Specifies the log file location through the plugin options.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/studio/CHANGELOG.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: {\n    '@pandacss/dev/postcss': {\n      logfile: './logs/panda.log',\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Theme Contract Definition\nDESCRIPTION: Example of creating a theme contract to enforce consistent theme structure.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineThemeContract } from '@pandacss/dev'\n\nconst defineTheme = defineThemeContract({\n  tokens: {\n    colors: {\n      red: { value: '' }, // theme implementations must have a red color\n    },\n  },\n})\n\ndefineTheme({\n  selector: '.theme-secondary',\n  tokens: {\n    colors: {\n      // ^^^^   Property 'red' is missing in type '{}' but required in type '{ red: { value: string; }; }'\n      //\n      // fixed with\n      // red: { value: 'red' },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using Arbitrary Breakpoints with hideFrom Utility in Panda CSS\nDESCRIPTION: Example demonstrating support for arbitrary breakpoint values in the hideFrom utility using a min-width media query.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_99\n\nLANGUAGE: jsx\nCODE:\n```\ncss({ hideFrom: '800px' })\n// => @media screen and (min-width: 800px) { background: red; }\n```\n\n----------------------------------------\n\nTITLE: Blog Post File Naming Examples\nDESCRIPTION: Examples of valid blog post file naming conventions in Docusaurus showing date-based naming pattern.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/docusaurus-ts/blog/2021-08-26-welcome/index.md#2025-04-18_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n- `2019-05-30-welcome.md`\n- `2019-05-30-welcome/index.md`\n```\n\n----------------------------------------\n\nTITLE: Installing React Router with Package Managers\nDESCRIPTION: Commands to create a new React Router project using different package managers.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/react-router.mdx#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm dlx create-react-router@latest\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-react-router@latest\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn dlx create-react-router@latest\n```\n\nLANGUAGE: bash\nCODE:\n```\nbunx create-react-router@latest\n```\n\n----------------------------------------\n\nTITLE: Configuring Logfile in PostCSS Plugin\nDESCRIPTION: This code shows how to configure the `logfile` option in the PostCSS plugin configuration. The logs will be streamed to the specified file for debugging purposes.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/token-dictionary/CHANGELOG.md#2025-04-18_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: {\n    '@pandacss/dev/postcss': {\n      logfile: './logs/panda.log',\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Syntax-Highlighted Code Blocks in Markdown\nDESCRIPTION: Example of creating a code block in Markdown with syntax highlighting, language specification, and a title. The fenced code block uses JSX highlighting.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/docusaurus-ts/docs/tutorial-basics/markdown-features.mdx#2025-04-18_snippet_5\n\nLANGUAGE: md\nCODE:\n```\n```jsx title=\"src/components/HelloDocusaurus.js\"\nfunction HelloDocusaurus() {\n  return <h1>Hello, Docusaurus!</h1>;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: React Component with Multiple Recipe Usage Example\nDESCRIPTION: Example showing how to use multiple recipes on a single React component using className and cx utility.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_117\n\nLANGUAGE: tsx\nCODE:\n```\nconst ComponentWithMultipleRecipes = ({ variant }) => {\n  return (\n    <button className={cx(pinkRecipe({ variant }), greenRecipe({ variant }), blueRecipe({ variant }))}>Hello</button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a new Qwik project using npm\nDESCRIPTION: Command to create a new Qwik project using the typescript template with npm.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/qwik.mdx#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create qwik@latest\n```\n\n----------------------------------------\n\nTITLE: Updating PostCSS Config for Vite Builder\nDESCRIPTION: Modifies the PostCSS configuration file to use the array syntax for plugins instead of the object syntax when using Storybook with Vite builder.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/storybook.mdx#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: [require('@pandacss/dev/postcss')()]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Auto Translate Transform in Panda (JSX)\nDESCRIPTION: Demonstrates applying an auto translate transform to a div element using Panda's css utility.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/transforms.md#2025-04-18_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ translate: 'auto' })} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Themes in Panda CSS (TypeScript)\nDESCRIPTION: Demonstrates how to configure multiple themes in the Panda CSS configuration file, including token overrides and semantic tokens for different color schemes.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// panda.config.ts\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  // ...\n  // main theme\n  theme: {\n    extend: {\n      tokens: {\n        colors: {\n          text: { value: 'blue' },\n        },\n      },\n      semanticTokens: {\n        colors: {\n          body: {\n            value: {\n              base: '{colors.blue.600}',\n              _osDark: '{colors.blue.400}',\n            },\n          },\n        },\n      },\n    },\n  },\n  // alternative theme variants\n  themes: {\n    primary: {\n      tokens: {\n        colors: {\n          text: { value: 'red' },\n        },\n      },\n      semanticTokens: {\n        colors: {\n          muted: { value: '{colors.red.200}' },\n          body: {\n            value: {\n              base: '{colors.red.600}',\n              _osDark: '{colors.red.400}',\n            },\n          },\n        },\n      },\n    },\n    secondary: {\n      tokens: {\n        colors: {\n          text: { value: 'blue' },\n        },\n      },\n      semanticTokens: {\n        colors: {\n          muted: { value: '{colors.blue.200}' },\n          body: {\n            value: {\n              base: '{colors.blue.600}',\n              _osDark: '{colors.blue.400}',\n            },\n          },\n        },\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Example React Component in JSX\nDESCRIPTION: A simple React functional component that returns a heading element. This example demonstrates JSX syntax highlighting in code blocks.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/docusaurus-ts/docs/tutorial-basics/markdown-features.mdx#2025-04-18_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nfunction HelloDocusaurus() {\n  return <h1>Hello, Docusaurus!</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Breaking Change - Version 0.42.0\nDESCRIPTION: Removed emitPackage config option in favor of using importMap for absolute paths, particularly useful for component libraries\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/config/CHANGELOG.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Minor Changes\n\n- f00ff88: BREAKING: Remove `emitPackage` config option,\n\n  tldr: use `importMap` instead for absolute paths (e.g can be used for component libraries)\n\n  `emitPackage` is deprecated, it's known for causing several issues:\n\n  - bundlers sometimes eagerly cache the `node_modules`, leading to `panda codegen` updates to the `styled-system` not\n    visible in the browser\n  - auto-imports are not suggested in your IDE.\n  - in some IDE the typings are not always reflected properly\n```\n\n----------------------------------------\n\nTITLE: Starting the development server using bun\nDESCRIPTION: Command to start the development server for a Qwik project using bun.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/qwik.mdx#2025-04-18_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nbun dev\n```\n\n----------------------------------------\n\nTITLE: CSS Generation Diff for Recipe Changes\nDESCRIPTION: This diff shows the changes in the generated CSS resulting from the updated `staticCss` configuration. It removes unnecessary responsive classes for different breakpoints, significantly reducing the output CSS size.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_125\n\nLANGUAGE: diff\nCODE:\n```\n@layer recipes {\n  .card--size_small {\n    font-size: 14px;\n  }\n\n  .card--size_large {\n    font-size: 18px;\n  }\n\n  .card--visual_primary {\n    background-color: blue;\n  }\n\n  .card--visual_secondary {\n    background-color: gray;\n  }\n\n  @layer _base {\n    .card {\n      color: var(--colors-white);\n    }\n  }\n\n-  @media screen and (min-width: 40em) {\n-    -.sm\\:card--size_small {\n-      -font-size: 14px;\n-    -}\n-    -.sm\\:card--size_large {\n-      -font-size: 18px;\n-    -}\n-    -.sm\\:card--visual_primary {\n-      -background-color: blue;\n-    -}\n-    -.sm\\:card--visual_secondary {\n-      -background-color: gray;\n-    -}\n-  }\n\n-  @media screen and (min-width: 48em) {\n-    -.md\\:card--size_small {\n-      -font-size: 14px;\n-    -}\n-    -.md\\:card--size_large {\n-      -font-size: 18px;\n-    -}\n-    -.md\\:card--visual_primary {\n-      -background-color: blue;\n-    -}\n-    -.md\\:card--visual_secondary {\n-      -background-color: gray;\n-    -}\n-  }\n\n-  @media screen and (min-width: 64em) {\n-    -.lg\\:card--size_small {\n-      -font-size: 14px;\n-    -}\n-    -.lg\\:card--size_large {\n-      -font-size: 18px;\n-    -}\n-    -.lg\\:card--visual_primary {\n-      -background-color: blue;\n-    -}\n-    -.lg\\:card--visual_secondary {\n-      -background-color: gray;\n-    -}\n-  }\n\n-  @media screen and (min-width: 80em) {\n-    -.xl\\:card--size_small {\n-      -font-size: 14px;\n-    -}\n-    -.xl\\:card--size_large {\n-      -font-size: 18px;\n-    -}\n-    -.xl\\:card--visual_primary {\n-      -background-color: blue;\n-    -}\n-    -.xl\\:card--visual_secondary {\n-      -background-color: gray;\n-    -}\n-  }\n\n-  @media screen and (min-width: 96em) {\n-    -.\\32xl\\:card--size_small {\n-      -font-size: 14px;\n-    -}\n-    -.\\32xl\\:card--size_large {\n-      -font-size: 18px;\n-    -}\n-    -.\\32xl\\:card--visual_primary {\n-      -background-color: blue;\n-    -}\n-    -.\\32xl\\:card--visual_secondary {\n-      -background-color: gray;\n-    -}\n-  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated CSS for Container Queries\nDESCRIPTION: The CSS output generated for container queries, showing the container type and media query rules.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_90\n\nLANGUAGE: css\nCODE:\n```\n.cq-type_inline-size {\n  container-type: inline-size;\n}\n\n@container (min-width: 60em) {\n  .\\@\\/sm\\:fs_md {\n    container-type: inline-size;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Simplified Utility Transform with createColorMixTransform\nDESCRIPTION: An example of using the createColorMixTransform helper function to create a background utility with color-mix support in a more concise way.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  utilities: {\n    background: {\n      shorthand: \"bg\",\n      className: \"bg\",\n      values: \"colors\",\n      transform: createColorMixTransform(\"background\"),\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Changelog Format Template in Markdown\nDESCRIPTION: Template structure for adding new releases to the CHANGELOG.md file following the Keep a Changelog format. Shows the standard sections for documenting Fixed, Added, and Changed items.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/release-process.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [VERSION] - <DATE>\n\n### Fixed\n\n### Added\n\n### Changed\n```\n\n----------------------------------------\n\nTITLE: Blog Post Frontmatter Configuration\nDESCRIPTION: YAML frontmatter defining metadata for the blog post including slug, title, authors and tags.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/docusaurus-ts/blog/2019-05-29-long-blog-post.md#2025-04-18_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\nslug: long-blog-post\ntitle: Long Blog Post\nauthors: endi\ntags: [hello, docusaurus]\n---\n```\n\n----------------------------------------\n\nTITLE: Using '*' Wildcard for Recipe Variants in staticCss\nDESCRIPTION: Feature in version 0.5.1 that allows using wildcard notation to generate all variants of a recipe in staticCss configuration, simplifying the static CSS generation setup.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\n// before:\nstaticCss: {\n  recipes: {\n    button: [{ size: ['*'], shape: ['*'] }]\n  }\n}\n\n// now:\nstaticCss: {\n  recipes: {\n    button: ['*']\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Utility with Color-mix Transform Function\nDESCRIPTION: Example of creating a custom utility that uses the provided colorMix function from the utils object to transform color values with opacity.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_83\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  utilities: {\n    background: {\n      shorthand: 'bg',\n      className: 'bg',\n      values: 'colors',\n      transform(value, args) {\n        const mix = args.utils.colorMix(value)\n        // This can happen if the value format is invalid (e.g. `bg: red.300/invalid` or `bg: red.300//10`)\n        if (mix.invalid) return { background: value }\n\n        return {\n          background: mix.value,\n        }\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Markdown Version Changelog\nDESCRIPTION: Changelog showing version updates for Panda CSS packages and their dependencies across multiple versions from 0.7.0 to 0.15.4. Includes patch changes, minor updates, and dependency version increments.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/node/CHANGELOG.md#2025-04-18_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies [abd7c47a]\n- Updated dependencies [bf0e6a30]\n- Updated dependencies [69699ba4]\n- Updated dependencies [3a04a927]\n  - @pandacss/config@0.15.4\n  - @pandacss/generator@0.15.4\n  - @pandacss/parser@0.15.4\n  - @pandacss/extractor@0.15.4\n  - @pandacss/types@0.15.4\n  - @pandacss/core@0.15.4\n  - @pandacss/error@0.15.4\n  - @pandacss/is-valid-prop@0.15.4\n  - @pandacss/logger@0.15.4\n  - @pandacss/shared@0.15.4\n  - @pandacss/token-dictionary@0.15.4\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Command to install project dependencies using npm, pnpm, or yarn package managers. This is the initial setup step after cloning the repository.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/solid-ts/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install # or pnpm install or yarn install\n```\n\n----------------------------------------\n\nTITLE: Array Syntax with Runtime Conditions - TypeScript/React\nDESCRIPTION: Example showing the fix for static extraction of Array Syntax when used with runtime conditions in responsive design.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/extractor/CHANGELOG.md#2025-04-18_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction App() {\n  return <Box py={[2, verticallyCondensed ? 2 : 3, 4]} />\n}\n```\n\n----------------------------------------\n\nTITLE: Package.json for Styled System Package\nDESCRIPTION: This JSON configuration shows the structure of a package.json file for a styled-system package. It includes dependencies and exports configuration for various entry points in the package.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/guides/component-library.md#2025-04-18_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"@acme-org/styled-system\",\n  \"version\": \"1.0.0\",\n  \"devDependencies\": {\n    \"@pandacss/dev\": \"^0.27.3\"\n  },\n  \"exports\": {\n    \"./css\": {\n      \"types\": \"./css/index.d.ts\",\n      \"require\": \"./css/index.mjs\",\n      \"import\": \"./css/index.mjs\"\n    },\n    \"./tokens\": {\n      \"types\": \"./tokens/index.d.ts\",\n      \"require\": \"./tokens/index.mjs\",\n      \"import\": \"./tokens/index.mjs\"\n    },\n    \"./types\": {\n      \"types\": \"./types/index.d.ts\",\n      \"require\": \"./types/index.mjs\",\n      \"import\": \"./types/index.mjs\"\n    },\n    \"./patterns\": {\n      \"types\": \"./patterns/index.d.ts\",\n      \"require\": \"./patterns/index.mjs\",\n      \"import\": \"./patterns/index.mjs\"\n    },\n    \"./recipes\": {\n      \"types\": \"./recipes/index.d.ts\",\n      \"require\": \"./recipes/index.mjs\",\n      \"import\": \"./recipes/index.mjs\"\n    },\n    \"./jsx\": {\n      \"types\": \"./jsx/index.d.ts\",\n      \"require\": \"./jsx/index.mjs\",\n      \"import\": \"./jsx/index.mjs\"\n    },\n    \"./styles.css\": \"./styles.css\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Ember Project with CLI\nDESCRIPTION: Commands to create a new Ember project using different package managers with embroider build system and TypeScript support.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/ember.mdx#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm dlx ember-cli@latest new test-app --embroider --no-welcome --typescript --pnpm\n```\n\n----------------------------------------\n\nTITLE: Static Theme Generation Configuration\nDESCRIPTION: Configuration for pre-generating specific theme variants in the CSS output.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// panda.config.ts\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  // ...\n  staticCss: {\n    themes: ['primary', 'secondary'],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Manually Including Default PandaCSS Presets\nDESCRIPTION: Shows how to manually include the default PandaCSS preset along with your custom presets. This is necessary when you've specified the presets option, as the default preset is no longer automatically included.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/customization/presets.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport pandaPreset from '@pandacss/preset-panda'\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  // ...\n  presets: [pandaPreset, myCustomPreset]\n})\n```\n\n----------------------------------------\n\nTITLE: Generated Theme CSS Output\nDESCRIPTION: Example of the CSS output generated for themes including root variables and theme-specific overrides.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n@layer tokens {\n  :where(:root, :host) {\n    --colors-text: blue;\n    --colors-body: var(--colors-blue-600);\n  }\n\n  [data-panda-theme='primary'] {\n    --colors-text: red;\n    --colors-muted: var(--colors-red-200);\n    --colors-body: var(--colors-red-600);\n  }\n\n  @media (prefers-color-scheme: dark) {\n    :where(:root, :host) {\n      --colors-body: var(--colors-blue-400);\n    }\n\n    [data-panda-theme='primary'] {\n      --colors-body: var(--colors-red-400);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Default Aspect Ratio Tokens in Base Preset\nDESCRIPTION: JSON structure showing the default aspect ratio tokens provided in the @pandacss/preset-base. These predefined tokens offer common aspect ratios like square, landscape, portrait, etc.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/token-dictionary/CHANGELOG.md#2025-04-18_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"square\": { \"value\": \"1 / 1\" },\n  \"landscape\": { \"value\": \"4 / 3\" },\n  \"portrait\": { \"value\": \"3 / 4\" },\n  \"wide\": { \"value\": \"16 / 9\" },\n  \"ultrawide\": { \"value\": \"18 / 5\" },\n  \"golden\": { \"value\": \"1.618 / 1\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Using CLI Logfile Flag in Panda CSS\nDESCRIPTION: This command shows how to use the `--logfile` flag with Panda CLI commands to stream logs to a file. This is useful for debugging issues that occur during the build process.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/token-dictionary/CHANGELOG.md#2025-04-18_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\npanda --logfile ./logs/panda.log\n```\n\n----------------------------------------\n\nTITLE: Generated CSS for Multiple Themes in Panda CSS\nDESCRIPTION: Example of the CSS generated by Panda CSS when multiple themes are configured, showing how themes are applied using data attributes and CSS variables.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/token-dictionary/CHANGELOG.md#2025-04-18_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@layer tokens {\n  :where(:root, :host) {\n    --colors-text: blue;\n    --colors-body: var(--colors-blue-600);\n  }\n\n  [data-panda-theme='primary'] {\n    --colors-text: red;\n    --colors-muted: var(--colors-red-200);\n    --colors-body: var(--colors-red-600);\n  }\n\n  @media (prefers-color-scheme: dark) {\n    :where(:root, :host) {\n      --colors-body: var(--colors-blue-400);\n    }\n\n    [data-panda-theme='primary'] {\n      --colors-body: var(--colors-red-400);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Static CSS in Main Config\nDESCRIPTION: Example of defining static CSS generation options in the main Panda configuration file, specifying which recipe variants should be pre-generated.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_69\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  // ...\n  staticCss: {\n    recipes: {\n      card: {\n        size: ['*'],\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Equivalent Full ImportMap Configuration in JSON for Panda CSS\nDESCRIPTION: The equivalent full configuration for importMap showing all entrypoints. This demonstrates the expanded format of the importMap shortcut shown in the previous example.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_102\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"importMap\": {\n    \"css\": \"@scope/styled-system/css\",\n    \"recipes\": \"@scope/styled-system/recipes\",\n    \"patterns\": \"@scope/styled-system/patterns\",\n    \"jsx\": \"@scope/styled-system/jsx\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Hash Function in Panda CSS\nDESCRIPTION: This snippet shows how to override the default toHash function used when config.hash is set to true in Panda CSS. It uses the utility:created hook to configure a custom hashing function.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/token-dictionary/CHANGELOG.md#2025-04-18_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  // ...\n  hooks: {\n    'utility:created': ({ configure }) => {\n      configure({\n        toHash: (paths, toHash) => {\n          const stringConds = paths.join(':')\n          const splitConds = stringConds.split('_')\n          const hashConds = splitConds.map(toHash)\n          return hashConds.join('_')\n        },\n      })\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring with Conflicting Token Values\nDESCRIPTION: Example of a configuration where a preset defines a token that conflicts with user-defined tokens, which previously caused merging issues.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nconst userConfig = defineConfig({\n  presets: [\n    {\n      theme: {\n        extend: {\n          tokens: {\n            colors: {\n              black: { value: 'black' },\n            },\n          },\n        },\n      },\n    },\n  ],\n  theme: {\n    tokens: {\n      extend: {\n        colors: {\n          black: {\n            0: { value: 'black' },\n            10: { value: 'black/10' },\n            20: { value: 'black/20' },\n            30: { value: 'black/30' },\n          },\n        },\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using either npm or yarn package managers.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/next-js-pages/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Fixing Grid Pattern Token Interpretation in JSX\nDESCRIPTION: Example showing the fix for an issue where minChildWidth wasn't interpreted as a token value in the grid pattern from @pandacss/preset-base.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/studio/CHANGELOG.md#2025-04-18_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<div className={grid({ minChildWidth: '80px', gap: 8 })} />\n// ✅ grid-template-columns: repeat(auto-fit, minmax(80px, 1fr))\n\n<div className={grid({ minChildWidth: '20', gap: 8 })} />\n// ❌ grid-template-columns: repeat(auto-fit, minmax(20, 1fr))\n//                                                  ^^^\n```\n\n----------------------------------------\n\nTITLE: Starting the Nuxt 3 Development Server\nDESCRIPTION: Command to start the Nuxt 3 development server which will be available at http://localhost:3000.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/nuxt/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Using Reusable Color Mix Transform in Configuration\nDESCRIPTION: Shows how to use the reusable color mix transform function in a Panda CSS configuration. This example creates a background utility using the createColorMixTransform function.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/fixture/CHANGELOG.md#2025-04-18_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  utilities: {\n    background: {\n      shorthand: \"bg\",\n      className: \"bg\",\n      values: \"colors\",\n      transform: createColorMixTransform(\"background\"),\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Default Utility Values for Grid Properties in Panda CSS\nDESCRIPTION: This code block describes the removal of default utility values for grid-related properties in the Panda CSS preset base package to prevent interference with native CSS values.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/preset-base/CHANGELOG.md#2025-04-18_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n- cff19aa: [Breaking] Remove default utility values for `gridTemplateColumns`, `gridTemplateRows`, `gridColumn` and\n  `gridRow` to prevent interference with native css values.\n\n  For example `1` or `2` is a valid native value for `gridColumn` or `gridRow`, and should not be overridden by the\n  utility.\n\n  Find the previous default values below, you can add them back to your config if you need them.\n\n  ```ts\n  const utilities = {\n    gridTemplateColumns: {\n      className: 'grid-tc',\n      group: 'Grid Layout',\n      values: {\n        '1': 'repeat(1, minmax(0, 1fr))',\n        '2': 'repeat(2, minmax(0, 1fr))',\n        '3': 'repeat(3, minmax(0, 1fr))',\n        '4': 'repeat(4, minmax(0, 1fr))',\n        '5': 'repeat(5, minmax(0, 1fr))',\n        '6': 'repeat(6, minmax(0, 1fr))',\n        '7': 'repeat(7, minmax(0, 1fr))',\n        '8': 'repeat(8, minmax(0, 1fr))',\n        '9': 'repeat(9, minmax(0, 1fr))',\n        '10': 'repeat(10, minmax(0, 1fr))',\n        '11': 'repeat(11, minmax(0, 1fr))',\n        '12': 'repeat(12, minmax(0, 1fr))',\n      },\n    },\n    gridTemplateRows: {\n      className: 'grid-tr',\n      group: 'Grid Layout',\n      values: {\n        '1': 'repeat(1, minmax(0, 1fr))',\n        '2': 'repeat(2, minmax(0, 1fr))',\n        '3': 'repeat(3, minmax(0, 1fr))',\n        '4': 'repeat(4, minmax(0, 1fr))',\n        '5': 'repeat(5, minmax(0, 1fr))',\n        '6': 'repeat(6, minmax(0, 1fr))',\n        '7': 'repeat(7, minmax(0, 1fr))',\n        '8': 'repeat(8, minmax(0, 1fr))',\n        '9': 'repeat(9, minmax(0, 1fr))',\n        '10': 'repeat(10, minmax(0, 1fr))',\n        '11': 'repeat(11, minmax(0, 1fr))',\n        '12': 'repeat(12, minmax(0, 1fr))',\n      },\n    },\n    gridColumn: {\n      className: 'grid-c',\n      group: 'Grid Layout',\n      values: {\n        full: '1 / -1',\n        '1': 'span 1 / span 1',\n        '2': 'span 2 / span 2',\n        '3': 'span 3 / span 3',\n        '4': 'span 4 / span 4',\n        '5': 'span 5 / span 5',\n        '6': 'span 6 / span 6',\n        '7': 'span 7 / span 7',\n        '8': 'span 8 / span 8',\n        '9': 'span 9 / span 9',\n        '10': 'span 10 / span 10',\n        '11': 'span 11 / span 11',\n        '12': 'span 12 / span 12',\n      },\n    },\n    gridRow: {\n      className: 'grid-r',\n      group: 'Grid Layout',\n      values: {\n        full: '1 / -1',\n        '1': 'span 1 / span 1',\n        '2': 'span 2 / span 2',\n        '3': 'span 3 / span 3',\n        '4': 'span 4 / span 4',\n        '5': 'span 5 / span 5',\n        '6': 'span 6 / span 6',\n        '7': 'span 7 / span 7',\n        '8': 'span 8 / span 8',\n        '9': 'span 9 / span 9',\n        '10': 'span 10 / span 10',\n        '11': 'span 11 / span 11',\n        '12': 'span 12 / span 12',\n      },\n    },\n  }\n  ```\n```\n\n----------------------------------------\n\nTITLE: Starting Qwik Development Server\nDESCRIPTION: Command to start the Vite development server for Qwik, which performs server-side rendering during development.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/qwik-ts/README.md#2025-04-18_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm start # or `yarn start`\n```\n\n----------------------------------------\n\nTITLE: Using token() Function for Runtime Values\nDESCRIPTION: Demonstrates the proper way to handle runtime values using token() function and CSS custom properties.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/guides/dynamic-styling.md#2025-04-18_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState } from 'react'\nimport { css } from '../styled-system/css'\nimport { token } from '../styled-system/tokens'\n\nconst Component = props => {\n  return (\n    <div\n      className={css({\n        // ✅ Good: Store the value in a CSS custom property\n        color: 'var(--color)'\n      })}\n      style={{\n        // ✅ Good: Handle the runtime value in the style attribute\n        '--color': token(`colors.${props.color}`)\n      }}\n    >\n      Dynamic color with runtime value\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Applying Themes with Stitches\nDESCRIPTION: Shows how to create and apply themes in Stitches using the createTheme function.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/migration/stitches.md#2025-04-18_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createStitches } from '@stitches/react'\n\nconst { createTheme } = createStitches({})\n\n// create theme\nconst darkTheme = createTheme({\n  colors: {\n    gray100: 'hsl(206,8%,12%)',\n    gray200: 'hsl(206,7%,14%)'\n  }\n})\n\n// apply theme\n<div className={darkTheme}>\n  <div>Content nested in dark theme.</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Building Remix for Production\nDESCRIPTION: Command to build the Remix application for production deployment, which optimizes assets and prepares the app for serving.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/remix/README.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Applying Scale Y Transform in Panda (JSX)\nDESCRIPTION: Illustrates setting a scaleY transform value on a div element using Panda's css utility.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/utilities/transforms.md#2025-04-18_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ scaleY: '0.4' })} />\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Panda CSS Autocomplete\nDESCRIPTION: JSON configuration to include the styled-system directory in tsconfig.json for better IDE autocomplete support.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/vite.mdx#2025-04-18_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ...\n  \"include\":  [\"src\", \"styled-system\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Button with React in MDX\nDESCRIPTION: This snippet demonstrates how to create an interactive button using React within an MDX blog post. It uses an inline onClick event handler to display an alert when the button is clicked.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/docusaurus-ts/blog/2021-08-01-mdx-blog-post.mdx#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<button onClick={() => alert('button clicked!')}>Click me!</button>\n```\n\n----------------------------------------\n\nTITLE: Generating a New Docusaurus Site with Classic Template in Bash\nDESCRIPTION: This command initializes a new Docusaurus documentation site using the classic template. It creates a new directory called 'my-website' and installs all necessary dependencies required to run Docusaurus.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/docusaurus-ts/docs/intro.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm init docusaurus@latest my-website classic\n```\n\n----------------------------------------\n\nTITLE: Using the Reusable Color-Mix Transform\nDESCRIPTION: Example of using the createColorMixTransform helper to create a background utility that supports color-mix. Simplifies the implementation of utilities with color-mix support.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/fixture/CHANGELOG.md#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  utilities: {\n    background: {\n      shorthand: \"bg\",\n      className: \"bg\",\n      values: \"colors\",\n      transform: createColorMixTransform(\"background\"),\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Raw CSS Function Usage - TypeScript\nDESCRIPTION: Example showing how to use the css.raw function as an identity function for style composition.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/extractor/CHANGELOG.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { css } from 'styled-system/css'\n\nconst paragraphSpacingStyle = css.raw({\n  '&:not(:first-child)': { marginBlockEnd: '1em' },\n})\n\nexport const proseCss = css.raw({\n  maxWidth: '800px',\n  '& p': {\n    '&:not(:first-child)': { marginBlockStart: '1em' },\n  },\n  '& h1': paragraphSpacingStyle,\n  '& h2': paragraphSpacingStyle,\n})\n```\n\n----------------------------------------\n\nTITLE: Extracting JSX Styled Factory with Namespace Imports (TypeScript/JSX)\nDESCRIPTION: Shows how to use namespace imports with the JSX styled factory, which is now correctly extracted by Panda CSS.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as pandaJsx from '../styled-system/jsx'\n\n// ✅ this will work now\npandaJsx.styled('div', { base: { color: 'red' } })\nconst App = () => <pandaJsx.styled.span color=\"blue\">Hello</pandaJsx.styled.span>\n```\n\n----------------------------------------\n\nTITLE: Updating package.json Scripts\nDESCRIPTION: Diff showing the addition of the 'prepare' script in package.json for Panda CSS codegen.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/svelte.mdx#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n+    \"prepare\": \"panda codegen\",\n    \"dev\": \"vite dev\",\n\t\t\"build\": \"vite build\",\n\t\t\"preview\": \"vite preview\",\n\t\t\"check\": \"svelte-kit sync && svelte-check --tsconfig ./tsconfig.json\",\n\t\t\"check:watch\": \"svelte-kit sync && svelte-check --tsconfig ./tsconfig.json --watch\",\n\t\t\"lint\": \"prettier --plugin-search-dir . --check . && eslint .\",\n\t\t\"format\": \"prettier --plugin-search-dir . --write .\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Redwood Project with TypeScript\nDESCRIPTION: Command to create a new Redwood.js project using the TypeScript template.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/redwood.mdx#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn create redwood-app app\n```\n\n----------------------------------------\n\nTITLE: Codegen Preparation Hook Example\nDESCRIPTION: Hook configuration example for modifying codegen files before they are written to disk\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/node/CHANGELOG.md#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  // ...\n  hooks: {\n    'codegen:prepare': ({ artifacts, changed }) => {\n      // do something with the emitted js/d.ts files\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Markdown Page\nDESCRIPTION: Example of creating a simple Markdown page with a heading and text content. The file should be placed in src/pages/my-markdown-page.md to be accessible at /my-markdown-page route.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/docusaurus-ts/docs/tutorial-basics/create-a-page.md#2025-04-18_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n# My Markdown page\n\nThis is a Markdown page\n```\n\n----------------------------------------\n\nTITLE: Runtime Values Example in TSX\nDESCRIPTION: Demonstrates an incorrect approach of using runtime state values directly in Panda CSS.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/guides/dynamic-styling.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState } from 'react'\nimport { css } from '../styled-system/css'\n\nconst App = () => {\n  const [color, setColor] = useState('red.300')\n\n  return (\n    <div\n      className={css({\n        // ❌ Avoid: Panda can't determine the value of color at build-time\n        color\n      })}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Svelte Parsing in TypeScript (JavaScript)\nDESCRIPTION: This patch fixes Svelte parsing when using TypeScript, <script context=module>, or multiple <script> tags.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/parser/CHANGELOG.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n09ebaf2e: Fix svelte parsing when using Typescript or `<script context=module>` or multiple `<script>`s\n```\n\n----------------------------------------\n\nTITLE: Starting a Svelte Development Server\nDESCRIPTION: Commands for starting a development server after project creation and dependency installation, with options to automatically open in a browser.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/svelte/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n\n# or start the server and open the app in a new browser tab\nnpm run dev -- --open\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry - Version Updates\nDESCRIPTION: Documents version changes and dependency updates for Panda CSS packages, including fixes for Vue template style detection and new animation utility additions.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/studio/CHANGELOG.md#2025-04-18_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- 577dcb9d: Fix issue where Panda does not detect styles after nested template in vue\n- Updated dependencies [d0fbc7cc]\n  - @pandacss/config@0.13.1\n  - @pandacss/node@0.13.1\n  - @pandacss/logger@0.13.1\n  - @pandacss/shared@0.13.1\n  - @pandacss/token-dictionary@0.13.1\n  - @pandacss/types@0.13.1\n\n## 0.13.0\n\n### Patch Changes\n\n- @pandacss/node@0.13.0\n- @pandacss/config@0.13.0\n- @pandacss/logger@0.13.0\n- @pandacss/shared@0.13.0\n- @pandacss/token-dictionary@0.13.0\n- @pandacss/types@0.13.0\n```\n\n----------------------------------------\n\nTITLE: CSS Generator Hook for Processing Final CSS\nDESCRIPTION: Demonstrates how to use the `generator:css` hook to process the final CSS content before it's written to the file system, useful for post-processing or analysis.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/CHANGELOG.md#2025-04-18_snippet_111\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  hooks: {\n    'generator:css'(file, content) {\n      if (file === 'styles.css') {\n        // do something with the final css content\n      }\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Operation Token Evaluation in React\nDESCRIPTION: Example showing how arithmetic operations in component props are evaluated and extracted\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/extractor/CHANGELOG.md#2025-04-18_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<AspectRatio ratio={1 / 2} asterisk={1 * 5} exp={1 ** 4} minus={5 - 1} />\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook using Package Managers\nDESCRIPTION: Commands to install Storybook using different package managers like pnpm, npm, yarn, and bun.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/storybook.mdx#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm dlx storybook@latest init\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx storybook@latest init\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn dlx storybook@latest init\n```\n\nLANGUAGE: bash\nCODE:\n```\nbunx storybook@latest init\n```\n\n----------------------------------------\n\nTITLE: Package.json Script Update\nDESCRIPTION: Adding prepare script to package.json for automatic codegen after dependency installation.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/installation/postcss.mdx#2025-04-18_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n{\n  \"scripts\": {\n+    \"prepare\": \"panda codegen\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building a Docusaurus Site for Production\nDESCRIPTION: This command builds the Docusaurus site for production, generating static files in the build folder.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/docusaurus-ts/docs/tutorial-basics/deploy-your-site.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Fixing Negative Semantic Token Generation in Panda CSS\nDESCRIPTION: Example of configuring tokens and semantic tokens in Panda CSS with proper negative value generation for spacing tokens.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/token-dictionary/CHANGELOG.md#2025-04-18_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@pandacss/dev'\n\nexport default defineConfig({\n  tokens: {\n    spacing: {\n      1: { value: '1rem' },\n    },\n  },\n  semanticTokens: {\n    spacing: {\n      lg: { value: '{spacing.1}' },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: TypeScript Error Stack Trace\nDESCRIPTION: Stack trace showing TypeError when Stitches styled.withConfig was misinterpreted as a panda function\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/extractor/CHANGELOG.md#2025-04-18_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nTypeError: Cannot read properties of undefined (reading 'startsWith')\n    at /panda/packages/shared/dist/index.js:433:16\n    at get (/panda/packages/shared/dist/index.js:116:20)\n    at Utility.setClassName (/panda/packages/core/dist/index.js:1682:66)\n    at inner (/panda/packages/core/dist/index.js:1705:14)\n    at Utility.getOrCreateClassName (/panda/packages/core/dist/index.js:1709:12)\n    at AtomicRule.transform (/panda/packages/core/dist/index.js:1729:23)\n    at /panda/packages/core/dist/index.js:323:32\n    at inner (/panda/packages/shared/dist/index.js:219:12)\n    at walkObject (/panda/packages/shared/dist/index.js:221:10)\n    at AtomicRule.process (/panda/packages/core/dist/index.js:317:35)\n```\n\n----------------------------------------\n\nTITLE: Building a Nuxt 3 Application for Production\nDESCRIPTION: Command to build the Nuxt 3 application for production deployment.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/nuxt/README.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Previous verbose JSON debug output format in JSON\nDESCRIPTION: This shows the previous format of the JSON debug output which included verbose stack information. This format contained more noise and was harder to read during debugging.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/node/CHANGELOG.md#2025-04-18_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"type\": \"map\",\n    \"value\": {\n      \"padding\": {\n        \"type\": \"literal\",\n        \"value\": \"25px\",\n        \"node\": \"StringLiteral\",\n        \"stack\": [\n          \"CallExpression\",\n          \"ObjectLiteralExpression\",\n          \"PropertyAssignment\",\n          \"Identifier\",\n          \"Identifier\",\n          \"VariableDeclaration\",\n          \"StringLiteral\"\n        ],\n        \"line\": 10,\n        \"column\": 20\n      },\n      \"fontSize\": {\n        \"type\": \"literal\",\n        \"value\": \"2xl\",\n        \"node\": \"StringLiteral\",\n        \"stack\": [\n          \"CallExpression\",\n          \"ObjectLiteralExpression\",\n          \"PropertyAssignment\",\n          \"ConditionalExpression\"\n        ],\n        \"line\": 11,\n        \"column\": 67\n      }\n    },\n    \"node\": \"CallExpression\",\n    \"stack\": [\n      \"CallExpression\",\n      \"ObjectLiteralExpression\"\n    ],\n    \"line\": 11,\n    \"column\": 21\n  },\n```\n\n----------------------------------------\n\nTITLE: CSS Serialization Error Example (CSS)\nDESCRIPTION: This code snippet demonstrates a CSS serialization error that occurs when non-styling JSX props are incorrectly extracted.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/parser/CHANGELOG.md#2025-04-18_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n🐼 info [cli] Writing /Users/astahmer/dev/reproductions/remix-panda/styled-system/debug/app__routes___index.css\n🐼 error [serializer:css] Failed to serialize CSS: CssSyntaxError: <css input>:28:19: Missed semicolon\n\n  26 |     }\n  27 |     .src_https\\:\\/\\/akmweb\\.viztatech\\.com\\/web\\/svnres\\/file\\/50_e4bb32c9ea75c5de397f2dc17a3cf186\\.jpg {\n> 28 |         src: https://akmweb.viztatech.com/web/svnres/file/50_e4bb32c9ea75c5de397f2dc17a3cf186.jpg\n     |                   ^\n  29 |     }\n  30 | }\n```\n\n----------------------------------------\n\nTITLE: Performance Profiling with CPU Profiler\nDESCRIPTION: Command to generate a CPU profile for performance analysis of Panda processes. This creates a cpuprofile file that can be opened in tools like Speedscope for detailed performance examination.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/guides/debugging.mdx#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm panda --cpu-prof\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with pnpm\nDESCRIPTION: This command installs all necessary packages for the project using pnpm package manager.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/component-lib/nuxt-lib-source/README.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Using Namespaced Imports for Panda CSS Utilities (TypeScript)\nDESCRIPTION: Demonstrates how to use namespaced imports for various Panda CSS utilities, which are now correctly extracted.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/core/CHANGELOG.md#2025-04-18_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as p from 'styled-system/patterns'\nimport * as recipes from 'styled-system/recipes'\nimport * as panda from 'styled-system/css'\n\n// this will now be extracted\np.stack({ mt: '40px' })\n\nrecipes.cardStyle({ rounded: true })\n\npanda.css({ color: 'red' })\npanda.cva({ base: { color: 'blue' } })\npanda.sva({ base: { root: { color: 'green' } } })\n```\n\n----------------------------------------\n\nTITLE: Generating All Scenarios in TypeScript\nDESCRIPTION: Command to generate all scenarios in the 'outdir' using the CLI tool with Bun runtime.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/codegen/README.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nbun cli.ts codegen\n```\n\n----------------------------------------\n\nTITLE: Creating Token Aliases with Stitches\nDESCRIPTION: Shows how to create locally scoped token aliases in Stitches using the $$ prefix.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/website/pages/docs/migration/stitches.md#2025-04-18_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nimport { styled } from '@stitches/react'\n\nconst Button = styled('button', {\n  $$shadowColor: '$colors$pink500',\n  boxShadow: '0 0 0 15px $$shadowColor'\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Images Using Absolute Paths in Markdown\nDESCRIPTION: Example showing how to add images in Markdown using absolute paths that reference the static directory. This is useful for globally accessible images.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/docusaurus-ts/docs/tutorial-basics/markdown-features.mdx#2025-04-18_snippet_3\n\nLANGUAGE: md\nCODE:\n```\n![Docusaurus logo](/img/docusaurus.png)\n```\n\n----------------------------------------\n\nTITLE: Previewing a Nuxt 3 Production Build Locally\nDESCRIPTION: Command to locally preview the production build of a Nuxt 3 application before deployment.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/nuxt/README.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run preview\n```\n\n----------------------------------------\n\nTITLE: Installing Website Dependencies with Yarn\nDESCRIPTION: Command to install the website's dependencies using Yarn package manager. This is the first step before working with the Docusaurus website.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/docusaurus-ts/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn\n```\n\n----------------------------------------\n\nTITLE: Configuring PostCSS Plugin with Custom Config Path in JavaScript\nDESCRIPTION: Example showing how to configure the PostCSS plugin for PandaCSS with a custom configuration path. This allows specifying the location of the Panda CSS configuration file.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/postcss/CHANGELOG.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    require('@pandacss/postcss')({\n      configPath: './path/to/panda.config.js',\n    }),\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Dependency Update in Markdown\nDESCRIPTION: Markdown formatted changelog entry that records an update to @pandacss/types dependency to version 0.3.0, referenced by commit 6d81ee9e.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/preset-atlaskit/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies [6d81ee9e]\n  - @pandacss/types@0.3.0\n```\n\n----------------------------------------\n\nTITLE: Cursor Token Usage Example\nDESCRIPTION: Shows how to apply cursor tokens in component styling using the css utility.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/packages/generator/CHANGELOG.md#2025-04-18_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<button className={css({ cursor: 'button' })}>Click me</button>\n```\n\n----------------------------------------\n\nTITLE: Defining Markdown Frontmatter for Page Metadata\nDESCRIPTION: This snippet demonstrates the use of YAML frontmatter in a Markdown file to define metadata for the page, specifically the title.\nSOURCE: https://github.com/chakra-ui/panda/blob/main/sandbox/docusaurus-ts/src/pages/markdown-page.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Markdown page example\n---\n```"
  }
]