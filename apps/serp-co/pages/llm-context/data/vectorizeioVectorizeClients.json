[
  {
    "owner": "vectorize-io",
    "repo": "vectorize-clients",
    "content": "TITLE: Basic Vectorize Client Usage in Python\nDESCRIPTION: Example of initializing the client with an API token and retrieving pipelines from the Vectorize API.\nSOURCE: https://github.com/vectorize-io/vectorize-clients/blob/main/src/python/README.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport vectorize_client as v\n\nTOKEN = '<your-token>'\nORG = '<your-org-id>'\n\nwith v.ApiClient(v.Configuration(access_token=TOKEN)) as api:\n    pipelines = v.PipelinesApi(api)\n    response = pipelines.get_pipelines(ORG)\n    print(\"Found\" + str(len(response.data)) + \" pipelines\")\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Vectorize Client in TypeScript\nDESCRIPTION: Example of how to import, configure, and use the Vectorize client in a TypeScript project. It demonstrates creating a ConnectorsApi instance with an access token and fetching pipelines for an organization.\nSOURCE: https://github.com/vectorize-io/vectorize-clients/blob/main/src/ts/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration, PipelinesApi} from \"@vectorize-io/vectorize-client\";\nconst connectorsApi = new ConnectorsApi(new Configuration({\n        accessToken: \"token\",\n    }));\nconst pipelines = connectorsApi.getPipelines({\n    organization: \"your-org\"\n})\nconsole.log(pipelines)\n```\n\n----------------------------------------\n\nTITLE: Listing Pipelines with Vectorize Python Client\nDESCRIPTION: This code example shows how to use the Vectorize Python client to authenticate and list all pipelines for a given organization. It requires an access token and organization ID.\nSOURCE: https://github.com/vectorize-io/vectorize-clients/blob/main/scripts/python_README.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport vectorize_client as v\n\nTOKEN = '<your-token>'\nORG = '<your-org-id>'\n\nwith v.ApiClient(v.Configuration(access_token=TOKEN)) as api:\n    pipelines = v.PipelinesApi(api)\n    response = pipelines.get_pipelines(ORG)\n    print(\"Found\" + str(len(response.data)) + \" pipelines\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Vectorize API Client and Listing Pipelines\nDESCRIPTION: Sets up the Vectorize API client and retrieves a list of pipelines for the authenticated organization.\nSOURCE: https://github.com/vectorize-io/vectorize-clients/blob/main/src/examples/notebooks/vectorize.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport vectorize_client as v\n\n\napi = v.ApiClient(v.Configuration(access_token=token, host=\"https://api.vectorize.io/v1\"))\npipelines = v.PipelinesApi(api)\n\nresponse = pipelines.get_pipelines(org)\nfor pipeline in response.data:\n    print(\"Pipeline: \" + pipeline.name)\n```\n\n----------------------------------------\n\nTITLE: Listing Pipelines with Vectorize TypeScript Client\nDESCRIPTION: TypeScript code snippet demonstrating how to initialize the Vectorize client and list all pipelines for a given organization. It imports necessary classes, configures the client with an access token, and makes an API call to retrieve pipelines.\nSOURCE: https://github.com/vectorize-io/vectorize-clients/blob/main/scripts/ts_README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration, PipelinesApi} from \"@vectorize-io/vectorize-client\";\nconst connectorsApi = new ConnectorsApi(new Configuration({\n        accessToken: \"token\",\n    }));\nconst pipelines = connectorsApi.getPipelines({\n    organization: \"your-org\"\n})\nconsole.log(pipelines)\n```\n\n----------------------------------------\n\nTITLE: Performing Data Extraction with Vectorize API in Python\nDESCRIPTION: Complete example of extracting data from a file using the Vectorize API, including handling asynchronous results with polling.\nSOURCE: https://github.com/vectorize-io/vectorize-clients/blob/main/src/python/README.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport vectorize_client as v\nimport time, logging\n\nTOKEN = os.environ['VECTORIZE_TOKEN']\nORG = os.environ['VECTORIZE_ORG']\nFILE = os.environ['FILE']\n\nwith v.ApiClient(v.Configuration(access_token=TOKEN)) as api:\n    with open(FILE, 'rb') as file:\n        data = file.read()\n        extraction_id = v.ExtractionApi(api).start_extraction(ORG, data).extraction_id\n        print(f\"Extraction started with id {extraction_id}\")\n        while True:\n            extraction = v.ExtractionApi(api).get_extraction_result(ORG, extraction_id)\n            if extraction.ready:\n                extracted_data = extraction.data\n                if extracted_data.success:\n                    print(extracted_data)\n                    break\n                else:\n                    raise Exception(extracted_data.error)\n            print(\"Waiting for extraction to complete...\")\n            time.sleep(1)\n```\n\n----------------------------------------\n\nTITLE: Creating Pipeline Configuration\nDESCRIPTION: Creates a pipeline configuration using the Vectorize API, specifying source, destination, and AI platform settings.\nSOURCE: https://github.com/vectorize-io/vectorize-clients/blob/main/src/examples/notebooks/vectorize.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nresponse = pipelines.create_pipeline(org, v.PipelineConfigurationSchema(\n    source_connectors=[v.SourceConnectorSchema(id=source_connector_id, type=\"FILE_UPLOAD\", config={})],\n    destination_connector=v.DestinationConnectorSchema(id=builtin_vector_db, type=\"VECTORIZE\", config={}),\n    ai_platform=v.AIPlatformSchema(id=builtin_ai_platform, type=\"VECTORIZE\", config={\n        \"chunkSize\": 600,\n        \"chunkingStrategy\": \"FIXED\",\n        \"embeddingModel\": \"VECTORIZE_OPEN_AI_TEXT_EMBEDDING_3_LARGE\",\n    }),\n    pipeline_name=\"My Pipeline From API\",\n    schedule=v.ScheduleSchema(type=\"manual\")\n))\npipeline_id = response.data.id\npipeline_id\n```\n\n----------------------------------------\n\nTITLE: Starting Deep Research on Pipeline\nDESCRIPTION: Initiates a deep research query on the pipeline using the Vectorize API.\nSOURCE: https://github.com/vectorize-io/vectorize-clients/blob/main/src/examples/notebooks/vectorize.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\npipelines_api = v.PipelinesApi(api)\nresponse = pipelines.start_deep_research(org, pipeline_id, v.StartDeepResearchRequest(\n        # make sure to include a relevant prompt here\n        query=\"Generate a report on Apple RSE 2024\",\n        # optionally enable additional search on the web\n        web_search=False,\n))\nresearch_id = response.research_id\n```\n\n----------------------------------------\n\nTITLE: Uploading File for Text Extraction\nDESCRIPTION: Uploads a file to Vectorize for text extraction using the Files API and urllib3.\nSOURCE: https://github.com/vectorize-io/vectorize-clients/blob/main/src/examples/notebooks/vectorize.ipynb#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport urllib3, os\n\nfiles_api = v.FilesApi(api)\n\nfile_path=\"apple.pdf\"\n\nstart_file_upload_response = files_api.start_file_upload(org, start_file_upload_request=v.StartFileUploadRequest(\n    content_type=content_type,\n    name=\"My file.pdf\",\n))\n\nhttp = urllib3.PoolManager()\n\nwith open(file_path, \"rb\") as f:\n    response = http.request(\"PUT\", start_file_upload_response.upload_url, body=f, headers={\"Content-Type\": \"application/pdf\", \"Content-Length\": str(os.path.getsize(file_path))})\n    if response.status != 200:\n        print(\"Upload failed: \", response.data)\n    else:\n        print(\"Upload successful\")\n\nextraction_api = v.ExtractionApi(api)\n\nresponse = extraction_api.start_extraction(org, start_extraction_request=v.StartExtractionRequest(\n        file_id=start_file_upload_response.file_id\n))\nextraction_id = response.extraction_id\n```\n\n----------------------------------------\n\nTITLE: Polling for Deep Research Results\nDESCRIPTION: Continuously polls the Vectorize API for deep research results until they are ready.\nSOURCE: https://github.com/vectorize-io/vectorize-clients/blob/main/src/examples/notebooks/vectorize.ipynb#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nwhile True:\n    response = pipelines.get_deep_research_result(org, pipeline_id, research_id)\n    if response.ready:\n        if response.data.success:\n            print(response.data.markdown)\n        else:\n            print(\"Deep Research failed: \", response.data.error)\n        break\n    print(\"not ready\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Documents from Pipeline\nDESCRIPTION: Retrieves documents from the created pipeline based on a specific question, using the Vectorize API.\nSOURCE: https://github.com/vectorize-io/vectorize-clients/blob/main/src/examples/notebooks/vectorize.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\npipelines = v.PipelinesApi(api)\nresponse = pipelines.retrieve_documents(org, pipeline_id, v.RetrieveDocumentsRequest(\n    question=\"Apple RSU activity\",\n    num_results=5,\n))\nprint(response)\nfor doc in response.documents:\n  print(str(doc.relevancy) +\" - \" + doc.text)\n```\n\n----------------------------------------\n\nTITLE: Polling for Text Extraction Results\nDESCRIPTION: Continuously polls the Vectorize API for text extraction results until they are ready.\nSOURCE: https://github.com/vectorize-io/vectorize-clients/blob/main/src/examples/notebooks/vectorize.ipynb#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nwhile True:\n    response = extraction_api.get_extraction_result(org, extraction_id)\n    if response.ready:\n        if response.data.success:\n            print(response.data.text)\n        else:\n            print(\"Extraction failed: \", response.data.error)\n        break\n    print(\"not ready\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving AI Platform and Vector Database Connectors\nDESCRIPTION: Retrieves built-in AI platform and vector database connectors from Vectorize.\nSOURCE: https://github.com/vectorize-io/vectorize-clients/blob/main/src/examples/notebooks/vectorize.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nai_platforms = connectors_api.get_ai_platform_connectors(org)\nbuiltin_ai_platform = [c.id for c in ai_platforms.ai_platform_connectors if c.type == \"VECTORIZE\"][0]\n\nvector_databases = connectors_api.get_destination_connectors(org)\nbuiltin_vector_db = [c.id for c in vector_databases.destination_connectors if c.type == \"VECTORIZE\"][0]\n```\n\n----------------------------------------\n\nTITLE: Creating Source Connector for File Upload\nDESCRIPTION: Creates a source connector for file uploads using the Vectorize API.\nSOURCE: https://github.com/vectorize-io/vectorize-clients/blob/main/src/examples/notebooks/vectorize.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nconnectors_api = v.ConnectorsApi(api)\nresponse = connectors_api.create_source_connector(org, [{\n        \"type\": \"FILE_UPLOAD\",\n        \"name\": \"From API\"\n    }])\nsource_connector_id = response.connectors[0].id\nsource_connector_id\n```\n\n----------------------------------------\n\nTITLE: Uploading File to Source Connector\nDESCRIPTION: Uploads a file to the created source connector using the Vectorize API and urllib3.\nSOURCE: https://github.com/vectorize-io/vectorize-clients/blob/main/src/examples/notebooks/vectorize.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport urllib3, json, os, mimetypes\nhttp = urllib3.PoolManager()\nfile_path = \"apple.pdf\"\ncontent_type, _ = mimetypes.guess_type(file_path)\n\nuploads_api = v.UploadsApi(api)\n\nmetadata = {\"created-from-api\": True}\n\nupload_response = uploads_api.start_file_upload_to_connector(\n        org, source_connector_id, v.StartFileUploadToConnectorRequest(\n            name=file_path.split(\"/\")[-1],\n            content_type=content_type,\n            # add additional metadata that will be stored along with each chunk in the vector database\n            metadata=json.dumps(metadata))\n)\n\nwith open(file_path, \"rb\") as f:\n    response = http.request(\"PUT\", upload_response.upload_url, body=f, headers={\"Content-Type\": content_type, \"Content-Length\": str(os.path.getsize(file_path))})\nif response.status != 200:\n    print(\"Upload failed: \", response.data)\nelse:\n    print(\"Upload successful\")\n```\n\n----------------------------------------\n\nTITLE: Loading Vectorize Credentials from Environment Variables in Python\nDESCRIPTION: Reading the API token and organization ID from environment variables in Python code.\nSOURCE: https://github.com/vectorize-io/vectorize-clients/blob/main/src/python/README.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport os\nTOKEN = os.environ['VECTORIZE_TOKEN']\nORG = os.environ['VECTORIZE_ORG']\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Vectorize API\nDESCRIPTION: Prompts the user for Vectorize Organization ID and Token, using getpass for secure token input.\nSOURCE: https://github.com/vectorize-io/vectorize-clients/blob/main/src/examples/notebooks/vectorize.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport getpass\norg=input(\"Vectorize Organization ID:\")\ntoken=getpass.getpass(\"Vectorize Token:\")\n```\n\n----------------------------------------\n\nTITLE: Setting Vectorize Credentials as Environment Variables\nDESCRIPTION: Shell commands to export API token and organization ID as environment variables for easier access in code.\nSOURCE: https://github.com/vectorize-io/vectorize-clients/blob/main/src/python/README.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nexport VECTORIZE_TOKEN=<your-token>\nexport VECTORIZE_ORG=<your-org-id>\n```\n\n----------------------------------------\n\nTITLE: Installing Vectorize Client Package in Python\nDESCRIPTION: Instructions for installing the vectorize-client package using pip package manager.\nSOURCE: https://github.com/vectorize-io/vectorize-clients/blob/main/src/python/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install vectorize-client\n```\n\n----------------------------------------\n\nTITLE: Installing Vectorize Client via pip\nDESCRIPTION: This snippet shows how to install the Vectorize client using pip, the Python package installer.\nSOURCE: https://github.com/vectorize-io/vectorize-clients/blob/main/scripts/python_README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install vectorize-client\n```\n\n----------------------------------------\n\nTITLE: Installing Vectorize Client using npm\nDESCRIPTION: Command to install the Vectorize client package using npm. This is a prerequisite step before using the API client in your TypeScript project.\nSOURCE: https://github.com/vectorize-io/vectorize-clients/blob/main/src/ts/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @vectorize-io/vectorize-client\n```\n\n----------------------------------------\n\nTITLE: Installing Vectorize Client via NPM\nDESCRIPTION: Command to install the Vectorize client package using npm. This is a prerequisite for using the client in a Node.js project.\nSOURCE: https://github.com/vectorize-io/vectorize-clients/blob/main/scripts/ts_README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @vectorize-io/vectorize-client\n```\n\n----------------------------------------\n\nTITLE: Installing Vectorize Python Client\nDESCRIPTION: Installs or upgrades the vectorize-client package using pip.\nSOURCE: https://github.com/vectorize-io/vectorize-clients/blob/main/src/examples/notebooks/vectorize.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install vectorize-client --upgrade\n```\n\n----------------------------------------\n\nTITLE: Importing Vectorize Client Package in Python\nDESCRIPTION: Basic import statement to use the vectorize-client package in Python code.\nSOURCE: https://github.com/vectorize-io/vectorize-clients/blob/main/src/python/README.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport vectorize_client\n```\n\n----------------------------------------\n\nTITLE: Importing Vectorize Client in Python\nDESCRIPTION: This snippet demonstrates how to import the Vectorize client package in a Python script.\nSOURCE: https://github.com/vectorize-io/vectorize-clients/blob/main/scripts/python_README.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport vectorize_client\n```\n\n----------------------------------------\n\nTITLE: Generating Vectorize API Clients\nDESCRIPTION: Commands to install dependencies and generate API clients for TypeScript and Python using the OpenAPI specification.\nSOURCE: https://github.com/vectorize-io/vectorize-clients/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n\nnpm run generate:ts\nnpm run generate:python\n```\n\n----------------------------------------\n\nTITLE: Releasing Vectorize API Clients\nDESCRIPTION: Commands to install dependencies and release the TypeScript and Python API clients to their respective package repositories.\nSOURCE: https://github.com/vectorize-io/vectorize-clients/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n\nnpm run release:ts\nnpm run release:python\n```\n\n----------------------------------------\n\nTITLE: Setting File Path for Data Extraction in Vectorize\nDESCRIPTION: Shell command to set the file path to be used for extraction as an environment variable.\nSOURCE: https://github.com/vectorize-io/vectorize-clients/blob/main/src/python/README.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nexport FILE=<path-to-file>\n```\n\n----------------------------------------\n\nTITLE: Downloading Sample PDF File\nDESCRIPTION: Downloads a sample PDF file (Apple's financial statements) using wget.\nSOURCE: https://github.com/vectorize-io/vectorize-clients/blob/main/src/examples/notebooks/vectorize.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n!wget -O apple.pdf https://www.apple.com/newsroom/pdfs/fy2024-q1/FY24_Q1_Consolidated_Financial_Statements.pdf \n```"
  }
]