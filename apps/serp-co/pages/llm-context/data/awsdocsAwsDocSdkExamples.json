[
  {
    "owner": "awsdocs",
    "repo": "aws-doc-sdk-examples",
    "content": "TITLE: Spring Boot Form Template with Thymeleaf\nDESCRIPTION: HTML template using Thymeleaf for form submission in Spring Boot. It includes Bootstrap styling and fields for ID, title, name, and body content.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_first_project/README.md#2025-04-09_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE HTML>\n   <html xmlns:th=\"https://www.thymeleaf.org\">\n   <head>\n     <title>Getting started: Spring Boot and the DynamoDB Enhanced Client</title>\n     <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n     <link rel=\"stylesheet\" th:href=\"|https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css|\"/>\n   </head>\n   <body>\n    <div class=\"container\">\n    <h1>Your first AWS MVC web application</h1>\n    <p>You can submit data to an Amazon DynamoDB table by using the DynamoDB Enhanced Client. A mobile notification is sent, alerting a user that a new submission occurred.</p>\n    <form action=\"#\" th:action=\"@{/greeting}\" th:object=\"${greeting}\" method=\"post\">\n     <div class=\"form-group\">\n        <p>Id: <input type=\"text\"  class=\"form-control\" th:field=\"*{id}\" /></p>\n        </div>\n\n        <div class=\"form-group\">\n            <p>Title: <input type=\"text\" class=\"form-control\" th:field=\"*{title}\" /></p>\n        </div>\n\n        <div class=\"form-group\">\n            <p>Name: <input type=\"text\" class=\"form-control\" th:field=\"*{name}\" /></p>\n        </div>\n\n        <div class=\"form-group\">\n            <p>Body: <input type=\"text\" class=\"form-control\" th:field=\"*{body}\"/></p>\n        </div>\n\n        <p><input type=\"submit\" value=\"Submit\" /> <input type=\"reset\" value=\"Reset\" /></p>\n    </form>\n   </div>\n   </body>\n  </html>\n```\n\n----------------------------------------\n\nTITLE: Image Processing and Download Functions (JavaScript)\nDESCRIPTION: JavaScript file that handles image processing requests and downloads. It includes ProcessImages() which sends a POST request to the /report endpoint with an email address parameter, and DownloadImage() which handles image downloads by redirecting to the appropriate endpoint with the selected photo key parameter.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_photo_analyzer_app/README.md#2025-04-09_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n$(function() {\n\n    $(\"#bar\").hide()\n\n\n   } );\n\n  function ProcessImages() {\n\n    //Post the values to the controller\n    $(\"#bar\").show()\n    var email =  $('#email').val();\n\n    $.ajax('/report', {\n        type: 'POST',  // http method\n        data: 'email=' + email ,  // data to submit\n        success: function (data, status, xhr) {\n\n            $(\"#bar\").hide()\n             alert(data) ;\n        },\n        error: function (jqXhr, textStatus, errorMessage) {\n            $('p').append('Error' + errorMessage);\n        }\n    });\n    }\n\n    function DownloadImage(){\n\n     //Post the values to the controller\n     var photo =  $('#photo').val();\n     window.location=\"../downloadphoto?photoKey=\" + photo ;\n    }\n```\n\n----------------------------------------\n\nTITLE: Spring Boot Photo Analysis Application Structure\nDESCRIPTION: The main Java classes required for the photo analysis application. The application is organized into packages and includes classes for AWS service interactions, models, and controllers.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_photo_analyzer_async/README.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\ncom.example.photo\n    ├── AnalyzePhotos.java     // Handles Rekognition API integration\n    ├── BucketItem.java      // S3 bucket information model\n    ├── PhotoApplication.java // Spring Boot main class\n    ├── PhotoController.java  // HTTP request handler\n    ├── SendMessages.java     // SES email functionality\n    ├── S3Service.java       // S3 operations handler\n    ├── WorkItem.java        // Rekognition data model\n    └── WriteExcel.java      // Report generation utility\n```\n\n----------------------------------------\n\nTITLE: Implementing Email Sending with AWS SES in Java\nDESCRIPTION: Java class that sends email messages with attachments using Amazon SES. Handles MIME message creation, attachment handling, and raw email sending through AWS SDK.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/video_analyzer_application/README.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.photo;\n\nimport org.apache.commons.io.IOUtils;\nimport software.amazon.awssdk.auth.credentials.EnvironmentVariableCredentialsProvider;\nimport software.amazon.awssdk.regions.Region;\nimport software.amazon.awssdk.services.ses.SesClient;\n// [Additional imports...]\n\n@Component\npublic class SendMessages {\n    private String sender = \"<enter email address>\";\n    private String subject = \"Analyzed Video report\";\n    private String bodyText = \"Hello,\\r\\n\" + \"Please see the attached file for the analyzed video report.\";\n    private String bodyHTML = \"<html>\" + \"<head></head>\" + \"<body>\" + \"<h1>Hello!</h1>\"\n            + \"<p>Please see the attached file for the report that analyzed a video in the Amazon S3 bucket.</p>\" + \"</body>\" + \"</html>\";\n\n    // [Method implementations...]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an IAM User in C++\nDESCRIPTION: Code excerpt showing how to create an IAM user using the AWS SDK for C++.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/iam/README.md#2025-04-09_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\n// From create_user.cpp line 40\n```\n\n----------------------------------------\n\nTITLE: Modifying DB Instance using Amazon RDS in Java\nDESCRIPTION: This code snippet shows how to modify a DB instance using Amazon RDS with AWS SDK for Java 2.x. It uses the ModifyDBInstance operation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/rds/README.md#2025-04-09_snippet_11\n\nLANGUAGE: Java\nCODE:\n```\nsrc/main/java/com/example/rds/ModifyDBInstance.java#L6\n```\n\n----------------------------------------\n\nTITLE: Implementing AWS Lambda Handler for S3 Asset Tagging in Java\nDESCRIPTION: This Java class implements the RequestHandler interface for an AWS Lambda function. It tags or deletes tags from S3 objects based on an input flag, using Amazon Rekognition for image analysis and Amazon S3 for object manipulation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_lambda_tag_assets/README.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage com.aws.tags;\n\nimport com.amazonaws.services.lambda.runtime.Context;\nimport com.amazonaws.services.lambda.runtime.RequestHandler;\nimport com.amazonaws.services.lambda.runtime.LambdaLogger;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\npublic class Handler implements RequestHandler<Map<String,String>, String> {\n\n@Override\npublic String handleRequest(Map<String, String> event, Context context) {\n    LambdaLogger logger = context.getLogger();\n    String delFag = event.get(\"flag\");\n    logger.log(\"FLAG IS: \" + delFag);\n    S3Service s3Service = new S3Service();\n    AnalyzePhotos photos = new AnalyzePhotos();\n\n    String bucketName = \"<Enter your bucket name>\";\n    List<String> myKeys = s3Service.listBucketObjects(bucketName);\n    if (delFag.compareTo(\"true\") == 0) {\n\n        // Create a List to store the data.\n        List<ArrayList<WorkItem>> myList = new ArrayList<>();\n\n        // Loop through each element in the List and tag the assets.\n        for (String key : myKeys) {\n\n            byte[] keyData = s3Service.getObjectBytes(bucketName, key);\n\n            // Analyze the photo and return a list where each element is a WorkItem.\n            ArrayList<WorkItem> item = photos.detectLabels(keyData, key);\n            myList.add(item);\n        }\n\n        s3Service.tagAssets(myList, bucketName);\n        logger.log(\"All Assets in the bucket are tagged!\");\n\n    } else {\n\n        // Delete all object tags.\n        for (String key : myKeys) {\n            s3Service.deleteTagFromObject(bucketName, key);\n            logger.log(\"All Assets in the bucket are deleted!\");\n        }\n     }\n    return delFag;\n  }\n }\n```\n\n----------------------------------------\n\nTITLE: Running the Amazon S3 conditional requests scenario with Python\nDESCRIPTION: Command to execute the S3 conditional requests demonstration scenario from the command line. This runs the scenario.py script that demonstrates creating test buckets and objects, performing conditional reads and writes, and cleaning up resources.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/s3/scenarios/conditional_requests/README.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython scenario.py\n```\n\n----------------------------------------\n\nTITLE: Implementing PhotoController for Image Processing and S3 Operations in Java\nDESCRIPTION: This Java class implements a Spring Controller for handling image-related operations. It includes methods for uploading images to S3, listing images, generating analysis reports, and downloading images. The class depends on S3Service, AnalyzePhotos, WriteExcel, and SendMessages components.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_photo_analyzer_app/README.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.photo;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseBody;\nimport org.springframework.web.servlet.ModelAndView;\nimport org.springframework.web.multipart.MultipartFile;\nimport org.springframework.web.servlet.view.RedirectView;\nimport java.io.ByteArrayInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.ArrayList;\nimport java.util.List;\n\n@Controller\npublic class PhotoController {\n    // Change to your Bucket Name\n    private final String bucketName = \"<Enter your Amazon S3 bucket name>\";\n\n    private final S3Service s3Service;\n    private final AnalyzePhotos photos;\n\n    private final  WriteExcel excel;\n\n    private final SendMessages sendMessage;\n\n    @Autowired\n    PhotoController(\n        S3Service s3Service,\n        AnalyzePhotos photos,\n        WriteExcel excel,\n        SendMessages sendMessage\n    ) {\n        this.s3Service = s3Service;\n        this.photos = photos;\n        this.excel = excel;\n        this.sendMessage = sendMessage;\n    }\n\n    @GetMapping(\"/\")\n    public String root() {\n        return \"index\";\n    }\n\n    @GetMapping(\"/process\")\n    public String process() {\n        return \"process\";\n    }\n\n    @GetMapping(\"/photo\")\n    public String photo() {\n        return \"upload\";\n    }\n\n    @RequestMapping(value = \"/getimages\", method = RequestMethod.GET)\n    @ResponseBody\n    String getImages(HttpServletRequest request, HttpServletResponse response) {\n    return s3Service.ListAllObjects(bucketName);\n    }\n\n    // Generates a report that analyzes photos in a given bucket.\n    @RequestMapping(value = \"/report\", method = RequestMethod.POST)\n    @ResponseBody\n    String report(HttpServletRequest request, HttpServletResponse response) {\n        // Get a list of key names in the given bucket.\n        String email = request.getParameter(\"email\");\n        ArrayList<String> myKeys = s3Service.ListBucketObjects(bucketName);\n       ArrayList<List> myList = new ArrayList<>();\n       for (String myKey : myKeys) {\n            byte[] keyData = s3Service.getObjectBytes(bucketName, myKey);\n            ArrayList<WorkItem> item = photos.DetectLabels(keyData, myKey);\n            myList.add(item);\n        }\n\n       // Now we have a list of WorkItems describing the photos in the S3 bucket.\n       InputStream excelData = excel.exportExcel(myList);\n       try {\n           // Email the report.\n           sendMessage.sendReport(excelData, email);\n\n       } catch (Exception e) {\n           e.printStackTrace();\n       }\n        return \"The photos have been analyzed and the report is sent\";\n    }\n\n    // Upload a video to analyze.\n    @RequestMapping(value = \"/upload\", method = RequestMethod.POST)\n    @ResponseBody\n    public ModelAndView singleFileUpload(@RequestParam(\"file\") MultipartFile file) {\n        try {\n            // Put the file into the bucket.\n            byte[] bytes = file.getBytes();\n            String name =  file.getOriginalFilename() ;\n            s3Service.putObject(bytes, bucketName, name);\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return new ModelAndView(new RedirectView(\"photo\"));\n    }\n\n    // This controller method downloads the given image from the Amazon S3 bucket.\n    @RequestMapping(value = \"/downloadphoto\", method = RequestMethod.GET)\n    void buildDynamicReportDownload(HttpServletRequest request, HttpServletResponse response) {\n        try {\n            String photoKey = request.getParameter(\"photoKey\");\n            byte[] photoBytes = s3Service.getObjectBytes(bucketName, photoKey) ;\n            InputStream is = new ByteArrayInputStream(photoBytes);\n\n            // Define the required information here.\n            response.setContentType(\"image/png\");\n            response.setHeader(\"Content-disposition\", \"attachment; filename=\"+photoKey);\n            org.apache.commons.io.IOUtils.copy(is, response.getOutputStream());\n            response.flushBuffer();\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Population Class for DynamoDB Data Mapping in Java\nDESCRIPTION: This class is used for data mapping with the Amazon DynamoDB Java API Enhanced Client. It includes annotations for DynamoDB and getter/setter methods for various population data fields.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/Creating_etl_workflow/README.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npackage com.etl.example;\n\nimport software.amazon.awssdk.enhanced.dynamodb.mapper.annotations.DynamoDbBean;\nimport software.amazon.awssdk.enhanced.dynamodb.mapper.annotations.DynamoDbPartitionKey;\n\n@DynamoDbBean\npublic class Population {\n\n public String id;\n public String code;\n public String pop2010;\n public String pop2011;\n public String pop2012;\n public String pop2013;\n public String pop2014;\n public String pop2015;\n public String pop2016;\n public String pop2017;\n public String pop2018;\n public String pop2019;\n\n\n public void setId(String name) {\n    this.id = name;\n }\n\n @DynamoDbPartitionKey\n public String getId() {\n    return this.id ;\n}\n\n\npublic void set2019(String num) {\n    this.pop2019 = num;\n}\n\npublic String get2019() {\n    return this.pop2019;\n}\n\npublic void set2018(String num) {\n    this.pop2018 = num;\n}\n\npublic String get2018() {\n    return this.pop2018;\n}\n\n\npublic void set2017(String num) {\n    this.pop2017 = num;\n}\n\npublic String get2017() {\n    return this.pop2017;\n}\n\n\npublic void set2016(String num) {\n    this.pop2016 = num;\n}\n\npublic String get2016() {\n    return this.pop2016;\n}\n\npublic void set2015(String num) {\n    this.pop2015 = num;\n}\n\npublic String get2015() {\n    return this.pop2015;\n}\n\n\npublic void set2014(String num) {\n    this.pop2014 = num;\n}\n\npublic String get2014() {\n    return this.pop2014;\n}\n\n\npublic void set2013(String num) {\n    this.pop2013 = num;\n}\n\npublic String get2013() {\n    return this.pop2013;\n}\n\n\npublic void set2012(String num) {\n    this.pop2012 = num;\n}\n\npublic String get2012() {\n    return this.pop2012;\n}\n\npublic void set2011(String num) {\n    this.pop2011 = num;\n}\n\npublic String get2011() {\n    return this.pop2011;\n}\n\n\npublic void set2010(String num) {\n    this.pop2010 = num;\n}\n\npublic String get2010() {\n    return this.pop2010;\n}\n\npublic void setCode(String code) {\n    this.code = code;\n}\n\npublic String getCode() {\n    return this.code;\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Listing DynamoDB Tables in C++\nDESCRIPTION: This code snippet demonstrates how to list DynamoDB tables using the AWS SDK for C++. It's part of the 'Hello DynamoDB' example that introduces basic DynamoDB operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/dynamodb/README.md#2025-04-09_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Hello DynamoDB (ListTables)\n```\n\n----------------------------------------\n\nTITLE: Downloading an Object from S3 in Java\nDESCRIPTION: Code example that demonstrates how to download an object from an S3 bucket using the GetObject operation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/s3/README.md#2025-04-09_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\n- [GetObject](src/main/java/com/example/s3/scenario/S3Actions.java#L151)\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Layout for AWS Photo Analyzer Navigation (HTML)\nDESCRIPTION: This HTML code defines the layout for the AWS Photo Analyzer application's navigation menu. It includes links to the home page, photo upload page, and photo analysis page.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_photo_analyzer_async/README.md#2025-04-09_snippet_14\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html>\n     <html xmlns:th=\"http://www.thymeleaf.org\">\n     <head th:fragment=\"site-head\">\n      <meta charset=\"UTF-8\" />\n      <link rel=\"icon\" href=\"../public/images/favicon.ico\" th:href=\"@{/images/favicon.ico}\" />\n      <script th:src=\"|https://code.jquery.com/jquery-1.12.4.min.js|\"></script>\n      <meta th:include=\"this :: head\" th:remove=\"tag\"/>\n     </head>\n     <body>\n      <!-- th:hef calls a controller method - which returns the view -->\n      <header th:fragment=\"site-header\">\n       <a href=\"#\" style=\"color: white\" th:href=\"@{/}\">Home</a>\n       <a href=\"#\" style=\"color: white\" th:href=\"@{/photo}\">Upload Photos</a>\n       <a href=\"#\"  style=\"color: white\" th:href=\"@{/process}\">Analyze Photos</a>\n      </header>\n     </html>\n```\n\n----------------------------------------\n\nTITLE: Deleting a DynamoDB Table in Java\nDESCRIPTION: This code snippet illustrates how to delete an entire table from DynamoDB using the AWS SDK for Java 2.x. It shows the process of removing a table and all its data from the database.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/dynamodb/README.md#2025-04-09_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\nsrc/main/java/com/example/dynamodb/DeleteTable.java#L6\n```\n\n----------------------------------------\n\nTITLE: Managing Bucket Replication in S3 in Java\nDESCRIPTION: Code example that demonstrates how to set up and get replication configurations for S3 buckets.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/s3/README.md#2025-04-09_snippet_15\n\nLANGUAGE: Java\nCODE:\n```\n- [PutBucketReplication](src/main/java/com/example/s3/replication/BucketReplication.java#L152)\n- [GetBucketReplication](src/main/java/com/example/s3/replication/BucketReplication.java#L220)\n```\n\n----------------------------------------\n\nTITLE: Creating a Presigned URL for S3 Directory Buckets in Java\nDESCRIPTION: Example scenario that demonstrates how to generate a presigned URL for retrieving objects from S3 Directory Buckets. This allows temporary access to objects without requiring AWS credentials.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/s3/src/main/java/com/example/s3/directorybucket/README.md#2025-04-09_snippet_25\n\nLANGUAGE: Java\nCODE:\n```\nGeneratePresignedGetURLForDirectoryBucket\n```\n\n----------------------------------------\n\nTITLE: Implementing AWS Rekognition Photo Analysis in Java\nDESCRIPTION: AnalyzePhotos class that uses RekognitionAsyncClient to detect labels in images. Uses CompletableFuture for asynchronous processing and AtomicReference for thread-safe data handling. Requires AWS credentials through environment variables.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_photo_analyzer_async/README.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.photo;\n\nimport software.amazon.awssdk.auth.credentials.EnvironmentVariableCredentialsProvider;\nimport software.amazon.awssdk.core.SdkBytes;\nimport software.amazon.awssdk.regions.Region;\nimport software.amazon.awssdk.services.rekognition.RekognitionAsyncClient;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.atomic.AtomicReference;\nimport org.springframework.stereotype.Component;\nimport software.amazon.awssdk.services.rekognition.model.DetectLabelsRequest;\nimport software.amazon.awssdk.services.rekognition.model.DetectLabelsResponse;\nimport software.amazon.awssdk.services.rekognition.model.Image;\nimport software.amazon.awssdk.services.rekognition.model.Label;\nimport software.amazon.awssdk.services.rekognition.model.RekognitionException;\n\n@Component\npublic class AnalyzePhotos {\n    public ArrayList<WorkItem> DetectLabels(byte[] bytes, String key) {\n        RekognitionAsyncClient rekAsyncClient = RekognitionAsyncClient.builder()\n                .credentialsProvider(EnvironmentVariableCredentialsProvider.create())\n                .region(Region.US_EAST_2)\n                .build();\n        try {\n            final AtomicReference<ArrayList<WorkItem>> reference = new AtomicReference<>();\n            SdkBytes sourceBytes = SdkBytes.fromByteArray(bytes);\n\n            // Create an Image object for the source image.\n            Image souImage = Image.builder()\n                    .bytes(sourceBytes)\n                    .build();\n\n            DetectLabelsRequest detectLabelsRequest = DetectLabelsRequest.builder()\n                    .image(souImage)\n                    .maxLabels(10)\n                    .build();\n\n            CompletableFuture<DetectLabelsResponse> futureGet = rekAsyncClient.detectLabels(detectLabelsRequest);\n            futureGet.whenComplete((resp, err) -> {\n             try {\n                if (resp != null) {\n                    List<Label> labels =  resp.labels();\n                    System.out.println(\"Detected labels for the given photo\");\n                    ArrayList<WorkItem> list = new ArrayList<>();\n                    WorkItem item ;\n                    for (Label label: labels) {\n                        item = new WorkItem();\n                        item.setKey(key); // identifies the photo.\n                        item.setConfidence(label.confidence().toString());\n                        item.setName(label.name());\n                        list.add(item);\n                    }\n                    reference.set(list);\n\n                } else {\n                    err.printStackTrace();\n                }\n\n            } finally {\n                // Only close the client when you are completely done with it.\n                rekAsyncClient.close();\n            }\n          });\n          futureGet.join();\n\n          // Use the AtomicReference object to return the ArrayList<WorkItem> collection.\n          return reference.get();\n\n        } catch (RekognitionException e) {\n            System.out.println(e.getMessage());\n            System.exit(1);\n        }\n        return null ;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Conversing with Amazon Nova Model Asynchronously in Java\nDESCRIPTION: Shows how to implement asynchronous conversation with the Amazon Nova text model using Amazon Bedrock Runtime. The implementation can be found in the specified file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/bedrock-runtime/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nsrc/main/java/com/example/bedrockruntime/models/amazon/nova/text/ConverseAsync.java#L6\n```\n\n----------------------------------------\n\nTITLE: Defining DynamoDB Bean Class for Student Data in Java\nDESCRIPTION: The StudentData class uses the DynamoDB Enhanced client annotations to map Java objects to DynamoDB items. It defines properties for student information including ID, name, email, mobile number, and date with appropriate getters, setters, and the partition key annotation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/workflow_multiple_channels/README.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage com.example;\n\nimport software.amazon.awssdk.enhanced.dynamodb.mapper.annotations.DynamoDbBean;\nimport software.amazon.awssdk.enhanced.dynamodb.mapper.annotations.DynamoDbPartitionKey;\nimport java.time.Instant;\n\n@DynamoDbBean\npublic class StudentData {\n    private String id;\n\n    private String firstName;\n\n    private String email;\n    private String mobileNumber ;\n\n    private Instant date;\n\n    public Instant getDate() {\n        return this.date;\n    }\n\n    public void setDate(Instant date) {\n        this.date = date;\n    }\n    @DynamoDbPartitionKey\n    public String getId() {\n        return this.id;\n    }\n\n    public void setId(String id) {\n      this.id = id;\n    }\n\n    public void setMobileNumber(String mobileNumber) {\n        this.mobileNumber = mobileNumber;\n    }\n\n    public String getMobileNumber() {\n        return this.mobileNumber;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }\n\n    public String getEmail() {\n        return this.email;\n    }\n\n    public void setFirstName(String firstName) {\n        this.firstName = firstName;\n    }\n\n    public String getFirstName() {\n        return this.firstName;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Bucket Policy for S3 Directory Buckets in Java\nDESCRIPTION: Example code for applying a bucket policy to an S3 Directory Bucket using AWS SDK for Java 2.x.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/s3/src/main/java/com/example/s3/directorybucket/README.md#2025-04-09_snippet_21\n\nLANGUAGE: Java\nCODE:\n```\nPutBucketPolicy\n```\n\n----------------------------------------\n\nTITLE: Basic SQS Operations in Java\nDESCRIPTION: Collection of core Amazon SQS operations including creating queues, sending/receiving messages, and queue management. Examples cover ListQueues, CreateQueue, DeleteMessage, GetQueueUrl, ReceiveMessage, SendMessage, SendMessageBatch, and SetQueueAttributes operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/sqs/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\n// File references:\n// - src/main/java/com/example/sqs/HelloSQS.java\n// - src/main/java/com/example/sqs/SQSExample.java\n// - src/main/java/com/example/sqs/DeleteQueue.java\n// - src/main/java/com/example/sqs/SendMessages.java\n// - src/main/java/com/example/sqs/SSEncryptionExample.java\n```\n\n----------------------------------------\n\nTITLE: Defining Step Functions State Machine in JSON\nDESCRIPTION: Amazon States Language document that defines a three-step workflow for processing support tickets. The workflow includes steps for opening a case, assigning it, and sending email notifications. Each step is implemented as a Lambda function.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_workflows_stepfunctions/README.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\"Comment\": \"A simple AWS Step Functions state machine that automates a call center support session.\",\n\"StartAt\": \"Open Case\",\n\"States\": {\n\"Open Case\": {\n\"Type\": \"Task\",\n\"Resource\": \"arn:aws:lambda:REGION:ACCOUNT_ID:function:FUNCTION_NAME\",\n\"Next\": \"Assign Case\"\n  },\n \"Assign Case\": {\n \"Type\": \"Task\",\n \"Resource\": \"arn:aws:lambda:REGION:ACCOUNT_ID:function:FUNCTION_NAME\",\n \"Next\": \"Send Email\"\n },\n \"Send Email\": {\n \"Type\": \"Task\",\n \"Resource\": \"arn:aws:lambda:REGION:ACCOUNT_ID:function:FUNCTION_NAME\",\n \"End\": true\n  }\n  }\n```\n\n----------------------------------------\n\nTITLE: Executing a Statement in Amazon Redshift using Java\nDESCRIPTION: This code snippet illustrates how to execute a statement in Amazon Redshift using the AWS SDK for Java 2.x. It demonstrates the use of the ExecuteStatement operation to run SQL queries or commands on a Redshift cluster.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/redshift/README.md#2025-04-09_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\nRedshiftActions.java#L218\n```\n\n----------------------------------------\n\nTITLE: Implementing AWS Lambda Handler for Sentiment Analysis\nDESCRIPTION: Java class that implements RequestHandler interface to analyze text sentiment using AWS Comprehend service. It receives text input through a Map object and returns sentiment analysis results as a JSONObject.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_fsa_app/README.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.fsa.handlers;\n\nimport com.amazonaws.services.lambda.runtime.Context;\nimport com.amazonaws.services.lambda.runtime.RequestHandler;\nimport com.example.fsa.services.DetectSentimentService;\nimport org.json.simple.JSONObject;\nimport java.util.Map;\n\npublic class AnalyzeSentimentHandler implements RequestHandler<Map<String, Object>, JSONObject> {\n\n    @Override\n    public JSONObject handleRequest(Map<String, Object> requestObject, Context context) {\n        String sourceText = (String) requestObject.get(\"source_text\");\n        context.getLogger().log(\"Extracted text: \" +sourceText);\n        DetectSentimentService detectSentimentService = new DetectSentimentService();\n        JSONObject jsonOb = detectSentimentService.detectSentiments(sourceText);\n        context.getLogger().log(\"JSON: \" + jsonOb.toJSONString());\n        return jsonOb;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying DynamoDB Students Table with XML Output in Java\nDESCRIPTION: A Java class that queries student records from a DynamoDB table based on a date filter and converts the results to XML format. It uses the DynamoDB Enhanced Client for database operations and standard Java XML libraries for XML processing. The class includes security features like secure XML processing and transformer configuration.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/workflow_multiple_channels/README.md#2025-04-09_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npackage com.example;\n\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\nimport software.amazon.awssdk.enhanced.dynamodb.DynamoDbEnhancedClient;\nimport software.amazon.awssdk.enhanced.dynamodb.DynamoDbTable;\nimport software.amazon.awssdk.enhanced.dynamodb.Expression;\nimport software.amazon.awssdk.enhanced.dynamodb.TableSchema;\nimport software.amazon.awssdk.enhanced.dynamodb.model.ScanEnhancedRequest;\nimport software.amazon.awssdk.regions.Region;\nimport software.amazon.awssdk.services.dynamodb.DynamoDbClient;\nimport software.amazon.awssdk.services.dynamodb.model.AttributeValue;\nimport javax.xml.XMLConstants;\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.ParserConfigurationException;\nimport javax.xml.transform.Transformer;\nimport javax.xml.transform.TransformerConfigurationException;\nimport javax.xml.transform.TransformerException;\nimport javax.xml.transform.TransformerFactory;\nimport javax.xml.transform.dom.DOMSource;\nimport javax.xml.transform.stream.StreamResult;\nimport java.io.StringWriter;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class GetStudents {\n\n    private DynamoDbClient getDynamoDBClient() {\n        Region region = Region.US_WEST_2;\n        return DynamoDbClient.builder()\n            .region(region)\n            .build();\n    }\n\n    public String getStudentsData(String date) {\n        DynamoDbClient ddbClient = getDynamoDBClient();\n        DynamoDbEnhancedClient enhancedClient = DynamoDbEnhancedClient.builder()\n            .dynamoDbClient(ddbClient)\n            .build();\n\n        DynamoDbTable<StudentData> table = enhancedClient.table(\"Students\", TableSchema.fromBean(StudentData.class));\n        AttributeValue attr = AttributeValue.builder()\n            .s(date)\n            .build();\n\n        Map<String, AttributeValue> myMap = new HashMap<>();\n        myMap.put(\":val1\",attr);\n\n        Map<String, String> myExMap = new HashMap<>();\n        myExMap.put(\"#mydate\", \"date\");\n\n        // Set the Expression so only active items are queried from the Work table.\n        Expression expression = Expression.builder()\n            .expressionValues(myMap)\n            .expressionNames(myExMap)\n            .expression(\"#mydate = :val1\")\n            .build();\n\n        ScanEnhancedRequest enhancedRequest = ScanEnhancedRequest.builder()\n            .filterExpression(expression)\n            .limit(15)\n            .build();\n\n        List<Student> studentList = new ArrayList<>();\n        for (StudentData singleStudent : table.scan(enhancedRequest).items()) {\n            Student student = new Student();\n            student.setFirstName(singleStudent.getFirstName());\n            student.setMobileNumber(singleStudent.getMobileNumber());\n            student.setEmail(singleStudent.getEmail());\n\n            // Push the Student object to the list.\n            studentList.add(student);\n        }\n        return convertToString(toXml(studentList));\n    }\n\n    // Convert the list to XML.\n    private Document toXml(List<Student> itemList) {\n        try {\n            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n            factory.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n            DocumentBuilder builder = factory.newDocumentBuilder();\n            Document doc = builder.newDocument();\n\n            // Start building the XML.\n            Element root = doc.createElement( \"Students\" );\n            doc.appendChild( root );\n\n            // Loop through the list.\n            for (Student myStudent: itemList) {\n                Element item = doc.createElement( \"Student\" );\n                root.appendChild( item );\n\n                // Set Name.\n                Element name = doc.createElement( \"Name\" );\n                name.appendChild( doc.createTextNode(myStudent.getFirstName()) );\n                item.appendChild( name );\n\n                // Set Mobile.\n                Element mobile = doc.createElement( \"Mobile\" );\n                mobile.appendChild( doc.createTextNode(myStudent.getMobileNumber()) );\n                item.appendChild( mobile );\n\n                // Set Email.\n                Element email = doc.createElement( \"Email\" );\n                email.appendChild( doc.createTextNode(myStudent.getEmail() ) );\n                item.appendChild( email );\n            }\n\n         return doc;\n        } catch(ParserConfigurationException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n\n    private String convertToString(Document xmlDocument) {\n        try {\n            TransformerFactory transformerFactory = getSecureTransformerFactory();\n            Transformer transformer = transformerFactory.newTransformer();\n            StreamResult result = new StreamResult(new StringWriter());\n            DOMSource source = new DOMSource(xmlDocument);\n            transformer.transform(source, result);\n            return result.getWriter().toString();\n\n        } catch(TransformerException ex) {\n            ex.printStackTrace();\n        }\n        return null;\n    }\n\n    private TransformerFactory getSecureTransformerFactory() {\n        TransformerFactory transformerFactory = TransformerFactory.newInstance();\n        try {\n            transformerFactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\n        } catch (TransformerConfigurationException e) {\n            e.printStackTrace();\n        }\n        return transformerFactory;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting IAM Account Alias in Java\nDESCRIPTION: This snippet demonstrates how to delete an IAM account alias using the AWS SDK for Java 2.x.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/iam/README.md#2025-04-09_snippet_9\n\nLANGUAGE: Java\nCODE:\n```\nsrc/main/java/com/example/iam/DeleteAccountAlias.java#L6\n```\n\n----------------------------------------\n\nTITLE: Implementing Spring Boot Application with AWS Services in Kotlin\nDESCRIPTION: This code defines a Spring Boot application with REST endpoints for managing work items in DynamoDB and sending reports via SES. It includes CRUD operations for items and a method to send email reports.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/itemtracker_dynamodb/README.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\npackage com.aws.rest\n\nimport kotlinx.coroutines.runBlocking\nimport org.springframework.beans.factory.annotation.Autowired\nimport org.springframework.boot.autoconfigure.SpringBootApplication\nimport org.springframework.boot.runApplication\nimport org.springframework.http.HttpStatus\nimport org.springframework.web.bind.annotation.CrossOrigin\nimport org.springframework.web.bind.annotation.GetMapping\nimport org.springframework.web.bind.annotation.PathVariable\nimport org.springframework.web.bind.annotation.PostMapping\nimport org.springframework.web.bind.annotation.PutMapping\nimport org.springframework.web.bind.annotation.RequestBody\nimport org.springframework.web.bind.annotation.RequestParam\nimport org.springframework.web.bind.annotation.ResponseStatus\nimport org.springframework.web.bind.annotation.RestController\nimport java.io.IOException\n\n@SpringBootApplication\nopen class App\n\nfun main(args: Array<String>) {\n    runApplication<App>(*args)\n}\n\n@CrossOrigin(origins = [\"*\"])\n@RestController\nclass MessageResource {\n\n    @Autowired\n    private lateinit var dbService: DynamoDBService\n\n    @Autowired\n    private lateinit var sendMsg: SendMessage\n\n    // Add a new item to the Amazon DynamoDB database.\n    @PostMapping(\"api/items\")\n    fun addItems(@RequestBody payLoad: Map<String, Any>): String = runBlocking {\n        val nameVal = \"user\"\n        val guideVal = payLoad.get(\"guide\").toString()\n        val descriptionVal = payLoad.get(\"description\").toString()\n        val statusVal = payLoad.get(\"status\").toString()\n\n        // Create a Work Item object.\n        val myWork = WorkItem()\n        myWork.guide = guideVal\n        myWork.description = descriptionVal\n        myWork.status = statusVal\n        myWork.name = nameVal\n        val id = dbService.putItemInTable(myWork)\n        return@runBlocking \"Item $id added successfully!\"\n    }\n\n    // Retrieve items.\n    @GetMapping(\"api/items\")\n    fun getItems(@RequestParam(required = false) archived: String?): MutableList<WorkItem> = runBlocking {\n        val list: MutableList<WorkItem>\n        if (archived == \"false\") {\n            list = dbService.getOpenItems(false)\n        } else if (archived == \"true\") {\n            list = dbService.getOpenItems(true)\n        } else {\n            list = dbService.getAllItems()\n        }\n        return@runBlocking list\n    }\n\n    // Flip an item from Active to Archive.\n    @PutMapping(\"api/items/{id}:archive\")\n    @ResponseStatus(value = HttpStatus.NO_CONTENT)\n    fun modUser(@PathVariable id: String) = runBlocking {\n        dbService.archiveItemEC(id)\n        return@runBlocking\n    }\n\n    @PostMapping(\"api/items:report\")\n    @ResponseStatus(value = HttpStatus.NO_CONTENT)\n    fun sendReport(@RequestBody body: Map<String, String>) = runBlocking {\n        val email = body.get(\"email\")\n        val xml = dbService.getOpenReport(false)\n        try {\n            if (email != null) {\n                sendMsg.send(email, xml)\n            }\n        } catch (e: IOException) {\n            e.stackTrace\n        }\n        return@runBlocking\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Amazon Lex ChatBot Web Interface with HTML, CSS, and JavaScript\nDESCRIPTION: A complete web interface template for interacting with an Amazon Lex chatbot. Includes styled chat bubbles, input handling, and AJAX communication with a backend server. Features a responsive design with scrollable chat history and real-time message updates.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_lex_chatbot/README.md#2025-04-09_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n    <html xmlns:th=\"https://www.thymeleaf.org\">\n\n    <head>\n     <title>Amazon Lex - Sample Application (BookTrip)</title>\n      <script th:src=\"|https://code.jquery.com/jquery-1.12.4.min.js|\"></script>\n     <style language=\"text/css\">\n        input#wisdom {\n            padding: 4px;\n            font-size: 1em;\n            width: 400px\n        }\n\n        input::placeholder {\n            color: #ccc;\n            font-style: italic;\n        }\n\n        p.userRequest {\n            margin: 4px;\n            padding: 4px 10px 4px 10px;\n            border-radius: 4px;\n            min-width: 50%;\n            max-width: 85%;\n            float: left;\n            background-color: #7d7;\n        }\n\n        p.lexResponse {\n            margin: 4px;\n            padding: 4px 10px 4px 10px;\n            border-radius: 4px;\n            text-align: right;\n            min-width: 50%;\n            max-width: 85%;\n            float: right;\n            background-color: #bbf;\n            font-style: italic;\n        }\n\n        p.lexError {\n            margin: 4px;\n            padding: 4px 10px 4px 10px;\n            border-radius: 4px;\n            text-align: right;\n            min-width: 50%;\n            max-width: 85%;\n            float: right;\n            background-color: #f77;\n        }\n        </style>\n       </head>\n\n      <body>\n      <h1 style=\"text-align:  left\">Amazon Lex - BookTrip</h1>\n      <p style=\"width: 400px\">\n      This multiple language chatbot shows you how easy it is to incorporate\n      <a href=\"https://aws.amazon.com/lex/\" title=\"Amazon Lex (product)\" target=\"_new\">Amazon Lex</a> into your web apps.  Try it out.\n     </p>\n     <div id=\"conversation\" style=\"width: 400px; height: 400px; border: 1px solid #ccc; background-color: #eee; padding: 4px; overflow: scroll\"></div>\n     <input type=\"text\" id=\"wisdom\" size=\"80\" value=\"I need a hotel room\">\n     <br>\n     <button onclick=\"pushChat()\">Send Text</button>\n\n    <script type=\"text/javascript\">\n\n     var g_text = \"\";\n    // set the focus to the input box\n     document.getElementById(\"wisdom\").focus();\n\n     function pushChat() {\n\n        // if there is text to be sent...\n        var wisdomText = document.getElementById('wisdom');\n        if (wisdomText && wisdomText.value && wisdomText.value.trim().length > 0) {\n\n            // disable input to show we're sending it\n            var wisdom = wisdomText.value.trim();\n            wisdomText.value = '...';\n            wisdomText.locked = true;\n            handletext(wisdom);\n        }\n      }\n\n     function showRequest() {\n            var conversationDiv = document.getElementById('conversation');\n            var requestPara = document.createElement(\"P\");\n            requestPara.className = 'userRequest';\n            requestPara.appendChild(document.createTextNode(g_text));\n            conversationDiv.appendChild(requestPara);\n            conversationDiv.scrollTop = conversationDiv.scrollHeight;\n        }\n\n        function showResponse(lexResponse) {\n\n            var conversationDiv = document.getElementById('conversation');\n            var responsePara = document.createElement(\"P\");\n            responsePara.className = 'lexResponse';\n\n\n           var lexTextResponse = lexResponse;\n           responsePara.appendChild(document.createTextNode(lexTextResponse));\n           responsePara.appendChild(document.createElement('br'));\n           conversationDiv.appendChild(responsePara);\n           conversationDiv.scrollTop = conversationDiv.scrollHeight;\n        }\n\n        function handletext(text) {\n\n            g_text = text\n            $.ajax('/text', {\n                type: 'POST',\n                data: 'text=' + text,\n                success: function (data, status, xhr) {\n\n                   showRequest();\n                   showResponse(data);\n\n                    // re-enable input\n                    var wisdomText = document.getElementById('wisdom');\n                    wisdomText.value = '';\n                    wisdomText.locked = false;\n                },\n                error: function (jqXhr, textStatus, errorMessage) {\n                    $('p').append('Error' + errorMessage);\n                }\n            });\n        }\n\n     </script>\n     </body>\n     </html>\n```\n\n----------------------------------------\n\nTITLE: Getting a Parameter from AWS Systems Manager using Rust\nDESCRIPTION: Demonstrates how to retrieve a parameter value from the AWS Systems Manager Parameter Store. References a function in the ../ec2/src/ssm.rs file at line 28.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/ssm/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Rust\nCODE:\n```\n// Sample reference to GetParameter function at ../ec2/src/ssm.rs#L28\n```\n\n----------------------------------------\n\nTITLE: Creating an EC2 Launch Template for Auto Scaling\nDESCRIPTION: Demonstrates how to create a launch template that defines instance configuration for Auto Scaling groups. This template specifies parameters like the AMI, instance type, and security settings.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/EC2/README.md#2025-04-09_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\n// CreateLaunchTemplate\n```\n\n----------------------------------------\n\nTITLE: Listing DynamoDB Tables in C#\nDESCRIPTION: This code snippet demonstrates how to list DynamoDB tables using the AWS SDK for .NET. It's part of the 'Hello DynamoDB' example, which serves as an introduction to working with DynamoDB.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/dynamodb/README.md#2025-04-09_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nscenarios/DynamoDB_Basics/DynamoDB_Actions/HelloDynamoDB.cs#L4\n```\n\n----------------------------------------\n\nTITLE: Copying S3 Objects in JavaScript\nDESCRIPTION: This code snippet shows how to copy an object from one S3 bucket to another using the CopyObject operation in the AWS SDK for JavaScript (v3).\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/s3/README.md#2025-04-09_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n- [CopyObject](actions/copy-object.js#L4)\n```\n\n----------------------------------------\n\nTITLE: Copying Objects in S3 in Java\nDESCRIPTION: Code example that demonstrates how to copy an object from one location to another within S3 using the CopyObject operation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/s3/README.md#2025-04-09_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\n- [CopyObject](src/main/java/com/example/s3/scenario/S3Actions.java#L212)\n```\n\n----------------------------------------\n\nTITLE: Implementing REST Controller for Amazon Redshift Work Item Operations\nDESCRIPTION: A Spring REST controller that handles HTTP requests for work item CRUD operations. It includes endpoints for retrieving items (filtered by archive status), archiving items, and adding new items. The controller uses cross-origin resource sharing to accept requests from different domains.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/CreatingSpringRedshiftRest/README.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage com.aws.rest;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.web.bind.annotation.CrossOrigin;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.PutMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\nimport java.time.LocalDateTime;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.UUID;\nimport java.util.stream.Collectors;\nimport java.util.stream.StreamSupport;\n\n@ComponentScan(basePackages = {\"com.aws.rest\"})\n@CrossOrigin(origins = \"*\")\n@RestController\n@RequestMapping(\"api/items\")\npublic class MainController {\n    private final WorkItemRepository repository;\n\n    @Autowired\n    MainController(\n        WorkItemRepository repository\n    ) {\n        this.repository = repository;\n    }\n\n    @GetMapping(\"\" )\n    public List<WorkItem> getItems(@RequestParam(required=false) String archived) {\n        Iterable<WorkItem> result;\n        if (archived != null && archived.compareTo(\"false\")==0)\n           result = repository.getData(\"0\");\n        else if (archived != null && archived.compareTo(\"true\")==0)\n            result = repository.getData(\"1\");\n        else\n            result = repository.getData(\"\");\n\n        return StreamSupport.stream(result.spliterator(), false)\n            .collect(Collectors.toUnmodifiableList());\n    }\n\n    @PutMapping(\"{id}:archive\")\n    public String modUser(@PathVariable String id) {\n        repository.flipItemArchive(id);\n        return id +\" was archived\";\n    }\n\n    @PostMapping(\"\")\n    public String addItem(@RequestBody Map<String, String> payload) {\n        String name = payload.get(\"name\");\n        String guide = payload.get(\"guide\");\n        String description = payload.get(\"description\");\n\n        WorkItem item = new WorkItem();\n        String workId = UUID.randomUUID().toString();\n        String date = LocalDateTime.now().toString();\n        item.setId(workId);\n        item.setGuide(guide);\n        item.setDescription(description);\n        item.setName(name);\n        item.setDate(date);\n        item.setStatus(WorkItemRepository.active);\n        return repository.injectNewSubmission(item);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: FIFO Topic and Queue Management\nDESCRIPTION: Examples demonstrating creation and management of FIFO topics and queues, including publishing messages and handling event notifications. Shows integration between SNS and SQS for message processing.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/sqs/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\n// File references:\n// - src/main/java/com/example/sns/PriceUpdateExample.java\n// - src/main/java/com/example/s3/ProcessS3EventNotification.java\n// - src/main/java/com/example/sns/SNSWorkflow.java\n```\n\n----------------------------------------\n\nTITLE: RedshiftService Class Implementation in Kotlin\nDESCRIPTION: A comprehensive service class that provides database operations for work items using AWS Redshift Data Client. Includes functionality for inserting new submissions, querying data with different filters, and managing work item archives. Uses SqlParameter for safe SQL parameter handling and includes data type conversion utilities.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/creating_redshift_application/README.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\npackage com.aws.rest\n\nimport aws.sdk.kotlin.services.redshiftdata.RedshiftDataClient\nimport aws.sdk.kotlin.services.redshiftdata.model.DescribeStatementRequest\nimport aws.sdk.kotlin.services.redshiftdata.model.ExecuteStatementRequest\nimport aws.sdk.kotlin.services.redshiftdata.model.Field\nimport aws.sdk.kotlin.services.redshiftdata.model.GetStatementResultRequest\nimport aws.sdk.kotlin.services.redshiftdata.model.SqlParameter\nimport kotlinx.coroutines.delay\nimport org.springframework.stereotype.Component\nimport org.w3c.dom.Document\nimport java.io.StringWriter\nimport java.sql.Date\nimport java.text.SimpleDateFormat\nimport java.time.LocalDateTime\nimport java.time.format.DateTimeFormatter\nimport java.util.UUID\nimport javax.xml.parsers.DocumentBuilderFactory\nimport javax.xml.parsers.ParserConfigurationException\nimport javax.xml.transform.TransformerException\nimport javax.xml.transform.TransformerFactory\nimport javax.xml.transform.dom.DOMSource\nimport javax.xml.transform.stream.StreamResult\nimport kotlin.collections.ArrayList\n\n@Component\nclass RedshiftService {\n    // Update these values to reflect your environment.\n    private val databaseVal = \"dev\"\n    private val dbUserVal = \"awsuser\"\n    private val clusterId = \"redshift-cluster-1\"\n\n    fun param(nameVal: String, valueVal: Boolean): SqlParameter {\n        val myPar = SqlParameter {\n            name = nameVal\n            value = valueVal.toString()\n        }\n        return myPar\n    }\n\n    fun param2(nameVal: String, valueVal: String): SqlParameter {\n        val myPar = SqlParameter {\n            name = nameVal\n            value = valueVal\n        }\n        return myPar\n    }\n\n    // Inject a new submission.\n    suspend fun injestNewSubmission(item: WorkItem): String {\n        val name = item.name\n        val guide = item.guide\n        val description = item.description\n        val status = item.status\n        val arc = \"0\"\n\n        // Generate the work item ID.\n        val uuid = UUID.randomUUID()\n        val workId = uuid.toString()\n\n        // Date conversion.\n        SimpleDateFormat(\"yyyy-MM-dd\")\n        val dtf = DateTimeFormatter.ofPattern(\"yyyy/MM/dd HH:mm:ss\")\n        val now = LocalDateTime.now()\n        val sDate1 = dtf.format(now)\n        val date1 = SimpleDateFormat(\"yyyy/MM/dd\").parse(sDate1)\n        val sqlDate = Date(date1.time)\n\n        // Inject an item into the database.\n        val sqlStatement =\n            \"INSERT INTO work (idwork, username, date, description, guide, status, archive) VALUES\" +\n                \"(:idwork, :username, :date, :description, :guide, :status, :arch);\"\n\n        val parametersVal = listOf(\n            param2(\"arch\", arc),\n            param2(\"username\", name.toString()),\n            param2(\"status\", status.toString()),\n            param2(\"date\", sqlDate.toString()),\n            param2(\"description\", description.toString()),\n            param2(\"guide\", guide.toString()),\n            param2(\"idwork\", workId)\n        )\n\n        val statementRequest = ExecuteStatementRequest {\n            clusterIdentifier = clusterId\n            database = databaseVal\n            dbUser = dbUserVal\n            sql = sqlStatement\n            parameters = parametersVal\n        }\n\n        RedshiftDataClient { region = \"us-west-2\" }.use { redshiftDataClient ->\n            redshiftDataClient.executeStatement(statementRequest)\n            return workId\n        }\n    }\n\n    // Return items from the work table.\n    suspend fun getData(status: String): MutableList<WorkItem> {\n        val isArc: Boolean\n        val statementRequest: ExecuteStatementRequest\n        val sqlStatement: String\n        if (status.compareTo(\"true\") == 0) {\n            sqlStatement = \"SELECT idwork, date, description, guide, status, username, archive FROM work WHERE archive = :arch ;\"\n            isArc = true\n            val parametersVal = listOf(param(\"arch\", isArc))\n            statementRequest = ExecuteStatementRequest {\n                this.clusterIdentifier = clusterId\n                this.database = databaseVal\n                this.dbUser = dbUserVal\n                this.parameters = parametersVal\n                sql = sqlStatement\n            }\n        } else if (status.compareTo(\"false\") == 0) {\n            sqlStatement = \"SELECT idwork, date, description, guide, status, username, archive FROM work WHERE archive = :arch ;\"\n            isArc = false\n            val parametersVal = listOf(param(\"arch\", isArc))\n            statementRequest = ExecuteStatementRequest {\n                this.clusterIdentifier = clusterId\n                this.database = databaseVal\n                this.dbUser = dbUserVal\n                this.parameters = parametersVal\n                sql = sqlStatement\n            }\n        } else {\n            sqlStatement = \"SELECT idwork, date, description, guide, status, username, archive FROM work ;\"\n            statementRequest = ExecuteStatementRequest {\n                this.clusterIdentifier = clusterId\n                this.database = databaseVal\n                this.dbUser = dbUserVal\n                sql = sqlStatement\n            }\n        }\n\n        val id = performSQLStatement(statementRequest)\n        println(\"The identifier of the statement is $id\")\n        checkStatement(id)\n        return getResults(id)\n    }\n\n    // Return items from the work table used for an email report.\n    suspend fun getDataXML(): String? {\n        val sqlStatement = \"SELECT idwork, date, description, guide, status, username, archive \" +\n            \"FROM work WHERE archive = :arch ;\"\n        val isArc = false\n        val parametersVal = listOf(param(\"arch\", isArc))\n        val statementRequest = ExecuteStatementRequest {\n            this.clusterIdentifier = clusterId\n            this.database = databaseVal\n            this.dbUser = dbUserVal\n            this.parameters = parametersVal\n            sql = sqlStatement\n        }\n        val id = performSQLStatement(statementRequest)\n        println(\"The identifier of the statement is $id\")\n        checkStatement(id)\n        return getResultsXML(id)\n    }\n\n    // Returns items from the Amazon Redshift table using the redshiftDataClient.\n    suspend fun getResults(statementId: String?): MutableList<WorkItem> {\n        val resultRequest = GetStatementResultRequest {\n            id = statementId\n        }\n\n        return RedshiftDataClient { region = \"us-west-2\" }.use { redshiftDataClient ->\n            val response = redshiftDataClient.getStatementResult(resultRequest)\n            response.records.map { fields ->\n                WorkItem().apply {\n                    fields.forEachIndexed { index, field ->\n                        val value = parseValue(field)\n                        when (index) {\n                            0 -> id = value\n                            1 -> date = value\n                            2 -> description = value\n                            3 -> guide = value\n                            4 -> status = value\n                            5 -> name = value\n                            6 -> archived = parseBooleanValue(field) != \"false\"\n                        }\n                    }\n                }\n            }.toMutableList() ?: mutableListOf()\n        }\n    }\n\n    // Returns open items within XML.\n    suspend fun getResultsXML(statementId: String?): String? {\n        val resultRequest = GetStatementResultRequest {\n            id = statementId\n        }\n\n        return RedshiftDataClient { region = \"us-west-2\" }.use { redshiftDataClient ->\n            val response = redshiftDataClient.getStatementResult(resultRequest)\n            response.records?.map { list ->\n                WorkItem().apply {\n                    list.forEachIndexed { index, field ->\n                        when (index) {\n                            0 -> id = parseValue(field)\n                            1 -> date = parseValue(field)\n                            2 -> description = parseValue(field)\n                            3 -> guide = parseValue(field)\n                            4 -> status = parseValue(field)\n                            5 -> name = parseValue(field)\n                        }\n                    }\n                }\n            }?.let { toXml(it) }?.let { convertToString(it) }\n        }\n    }\n    // Update the work table.\n    suspend fun flipItemArchive(id: String) {\n        val arc = \"1\"\n        // Specify the SQL statement to query data.\n        val sqlStatement = \"update work set archive = (:arch) where idwork =(:id);\"\n        val parametersVal = listOf(\n            param2(\"arch\", arc),\n            param2(\"id\", id)\n        )\n        val statementRequest = ExecuteStatementRequest {\n            clusterIdentifier = clusterId\n            database = databaseVal\n            dbUser = dbUserVal\n            sql = sqlStatement\n            parameters = parametersVal\n        }\n\n        RedshiftDataClient { region = \"us-west-2\" }.use { redshiftDataClient ->\n            redshiftDataClient.executeStatement(statementRequest)\n        }\n    }\n\n    // Convert Work item data into XML.\n\n```\n\n----------------------------------------\n\nTITLE: Running Amazon S3 Getting Started Scenario with Python\nDESCRIPTION: Command to execute the basic S3 scenario example that demonstrates creating a bucket, uploading/downloading objects, copying objects to subfolders, listing objects, and cleaning up resources.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/s3/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython s3_basics/scenario_getting_started.py\n```\n\n----------------------------------------\n\nTITLE: Enabling KMS Key with Java SDK\nDESCRIPTION: This code snippet demonstrates how to enable a KMS key using the AWS SDK for Java 2.x. It uses the EnableKey operation to allow the specified KMS key to be used in cryptographic operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/kms/README.md#2025-04-09_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\nKMSActions.java#L165\n```\n\n----------------------------------------\n\nTITLE: Listing Required Python Dependencies for DAX Development\nDESCRIPTION: A requirements file listing the necessary Python packages for working with Amazon DynamoDB Accelerator (DAX). It includes the DAX client library, AWS SDK for Python (boto3), and testing utilities like pytest and requests.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/dynamodb/requirements.txt#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\namazon-dax-client>=1.1.7\nboto3>=1.26.79\npytest>=7.2.1\nrequests>=2.28.2\n```\n\n----------------------------------------\n\nTITLE: Implementing Spring Boot Application with AWS Services in Kotlin\nDESCRIPTION: This code snippet defines a Spring Boot application with REST endpoints for managing items and sending reports. It uses Amazon Redshift for data storage and Amazon SES for sending emails. The application supports operations like adding items, retrieving items, archiving items, and sending reports.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/creating_redshift_application/README.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.aws.rest\n\nimport kotlinx.coroutines.runBlocking\nimport org.springframework.beans.factory.annotation.Autowired\nimport org.springframework.boot.autoconfigure.SpringBootApplication\nimport org.springframework.boot.runApplication\nimport org.springframework.http.HttpStatus\nimport org.springframework.web.bind.annotation.CrossOrigin\nimport org.springframework.web.bind.annotation.GetMapping\nimport org.springframework.web.bind.annotation.PathVariable\nimport org.springframework.web.bind.annotation.PostMapping\nimport org.springframework.web.bind.annotation.PutMapping\nimport org.springframework.web.bind.annotation.RequestBody\nimport org.springframework.web.bind.annotation.RequestParam\nimport org.springframework.web.bind.annotation.ResponseStatus\nimport org.springframework.web.bind.annotation.RestController\nimport java.io.IOException\n\n@SpringBootApplication\nopen class App\n\nfun main(args: Array<String>) {\n    runApplication<App>(*args)\n}\n\n@CrossOrigin(origins = [\"*\"])\n@RestController\nclass MessageResource {\n\n    @Autowired\n    private lateinit var redshiftService: RedshiftService\n\n    @Autowired\n    private lateinit var sendMsg: SendMessage\n\n    // Add a new item.\n    @PostMapping(\"api/items\")\n    fun addItems(@RequestBody payLoad: Map<String, Any>): String = runBlocking {\n        val nameVal = \"user\"\n        val guideVal = payLoad.get(\"guide\").toString()\n        val descriptionVal = payLoad.get(\"description\").toString()\n        val statusVal = payLoad.get(\"status\").toString()\n\n        // Create a Work Item object.\n        val myWork = WorkItem()\n        myWork.guide = guideVal\n        myWork.description = descriptionVal\n        myWork.status = statusVal\n        myWork.name = nameVal\n        val id = redshiftService.injestNewSubmission(myWork)\n        return@runBlocking \"Item $id added successfully!\"\n    }\n\n    // Retrieve items.\n    @GetMapping(\"api/items\")\n    fun getItems(@RequestParam(required = false) archived: String?): MutableList<WorkItem> = runBlocking {\n        val list: MutableList<WorkItem>\n        if (archived != null) {\n            list = redshiftService.getData(archived)\n        } else {\n            list = redshiftService.getData(\"\")\n        }\n        return@runBlocking list\n    }\n\n    // Flip an item from Active to Archive.\n    @PutMapping(\"api/items/{id}:archive\")\n    @ResponseStatus(value = HttpStatus.NO_CONTENT)\n    fun modUser(@PathVariable id: String) = runBlocking {\n        redshiftService.flipItemArchive(id)\n        return@runBlocking\n    }\n\n    // Send a report through Amazon SES.\n    @PostMapping(\"api/items:report\")\n    @ResponseStatus(value = HttpStatus.NO_CONTENT)\n    fun sendReport(@RequestBody body: Map<String, String>) = runBlocking {\n        val email = body.get(\"email\")\n        val xml = redshiftService.getDataXML()\n        try {\n            if (email != null && xml != null) {\n                sendMsg.send(email, xml)\n            }\n        } catch (e: IOException) {\n            e.stackTrace\n        }\n        return@runBlocking\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Software Token in Amazon Cognito Identity Provider with C#\nDESCRIPTION: This code snippet shows how to verify a software token in Amazon Cognito Identity Provider using C#. It's implemented in the CognitoWrapper class and utilizes the VerifySoftwareTokenAsync method.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Cognito/README.md#2025-04-09_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nVerifySoftwareToken(Actions/CognitoWrapper.cs#L111)\n```\n\n----------------------------------------\n\nTITLE: Implementing AWS Rekognition Image Analysis Service\nDESCRIPTION: Java class that uses AWS Rekognition to detect labels in images stored in S3. Processes images and returns a list of detected labels with confidence scores. Handles Rekognition service exceptions and includes S3 object reference handling.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/pam_source_files/README.md#2025-04-09_snippet_8\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.photo.services;\n\nimport com.example.photo.PhotoApplicationResources;\nimport com.example.photo.LabelCount;\nimport software.amazon.awssdk.services.rekognition.RekognitionClient;\nimport software.amazon.awssdk.services.rekognition.model.Image;\nimport software.amazon.awssdk.services.rekognition.model.DetectLabelsRequest;\nimport software.amazon.awssdk.services.rekognition.model.DetectLabelsResponse;\nimport software.amazon.awssdk.services.rekognition.model.Label;\nimport software.amazon.awssdk.services.rekognition.model.RekognitionException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport software.amazon.awssdk.services.rekognition.model.S3Object;\n\npublic class AnalyzePhotos {\n    public ArrayList<LabelCount> detectLabels(String bucketName, String key) {\n        RekognitionClient rekClient = RekognitionClient.builder()\n                .region(PhotoApplicationResources.REGION)\n                .build();\n        try {\n            S3Object s3Object = S3Object.builder()\n                    .bucket(bucketName)\n                    .name(key)\n                    .build();\n\n            Image souImage = Image.builder()\n                    .s3Object(s3Object)\n                    .build();\n\n            DetectLabelsRequest detectLabelsRequest = DetectLabelsRequest.builder()\n                    .image(souImage)\n                    .maxLabels(10)\n                    .build();\n\n            DetectLabelsResponse labelsResponse = rekClient.detectLabels(detectLabelsRequest);\n            List<Label> labels = labelsResponse.labels();\n            System.out.println(\"Detected labels for the given photo\");\n            ArrayList<LabelCount> list = new ArrayList<>();\n            LabelCount item;\n            for (Label label : labels) {\n                item = new LabelCount();\n                item.setKey(key); // identifies the photo\n                item.setName(label.name());\n                list.add(item);\n            }\n            return list;\n\n        } catch (RekognitionException e) {\n            System.out.println(e.getMessage());\n            System.exit(1);\n        }\n        return null;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Managing a Resilient Service in Java\nDESCRIPTION: This example demonstrates how to create a load-balanced web service that returns recommendations and handles failures. It uses Amazon EC2, Auto Scaling, Elastic Load Balancing, DynamoDB, and Systems Manager.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/iam/README.md#2025-04-09_snippet_18\n\nLANGUAGE: Java\nCODE:\n```\n../../usecases/resilient_service/src/main/java/com/example/resilient/Main.java\n```\n\n----------------------------------------\n\nTITLE: Extracting Text from Images using Amazon Textract in Python\nDESCRIPTION: This function connects to S3 and Textract, retrieves an image from S3, displays it, and uses Textract's DetectDocumentText API to extract text from the image. It returns a list of text lines found in the document.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/cross_service/textract_comprehend_notebook/TextractAndComprehendNotebook.ipynb#2025-04-09_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef process_text_detection(bucket, document, access_code, secret_code, region):\n    # Get the document from Amazon S3\n    s3_connection = boto3.resource(\"s3\")\n\n    # Connect to Amazon Textract to detect text in the document\n    client = boto3.client(\n        \"textract\",\n        region_name=region,\n        aws_access_key_id=access_code,\n        aws_secret_access_key=secret_code,\n    )\n\n    # Get the response from Amazon S3\n    s3_object = s3_connection.Object(bucket, document)\n    s3_response = s3_object.get()\n\n    # open binary stream using an in-memory bytes buffer\n    stream = io.BytesIO(s3_response[\"Body\"].read())\n\n    # load stream into image\n    image = Image.open(stream)\n\n    # Display the image\n    display(image)\n\n    # process using Amazon S3 object\n    response = client.detect_document_text(\n        Document={\"S3Object\": {\"Bucket\": bucket, \"Name\": document}}\n    )\n\n    # Get the text blocks\n    blocks = response[\"Blocks\"]\n\n    # List to store image lines in document\n    line_list = []\n\n    # Create image showing bounding box/polygon around the detected lines/text\n    for block in blocks:\n        if block[\"BlockType\"] == \"LINE\":\n            line_list.append(block[\"Text\"])\n\n    return line_list\n```\n\n----------------------------------------\n\nTITLE: Running EC2 Instances in Rust\nDESCRIPTION: This code snippet demonstrates how to run EC2 instances using the AWS SDK for Rust. It's a fundamental operation for launching new EC2 instances.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/ec2/README.md#2025-04-09_snippet_4\n\nLANGUAGE: Rust\nCODE:\n```\nsrc/ec2.rs#L233\n```\n\n----------------------------------------\n\nTITLE: Creating a MediaStore Container in Java\nDESCRIPTION: Demonstrates how to create a new container in AWS Elemental MediaStore using the AWS SDK for Java 2.x. This operation is essential for setting up storage for media assets.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/mediastore/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nCreateContainer\n```\n\n----------------------------------------\n\nTITLE: Implementing PPEHandler for Processing Images and Detecting PPE in Java\nDESCRIPTION: The PPEHandler class handles the main logic for processing images from an S3 bucket, detecting PPE using Amazon Rekognition, persisting data to DynamoDB, and sending email notifications. It implements the RequestHandler interface for AWS Lambda.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_lambda_ppe/README.md#2025-04-09_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\npackage com.example.ppe;\n\nimport com.amazonaws.services.lambda.runtime.Context;\nimport com.amazonaws.services.lambda.runtime.RequestHandler;\nimport com.amazonaws.services.lambda.runtime.LambdaLogger;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.ArrayList;\nimport java.util.Set;\nimport java.util.HashSet;\n\npublic class PPEHandler implements RequestHandler<Map<String,String>, String> {\n\n@Override\npublic String handleRequest(Map<String, String> event, Context context) {\n    LambdaLogger logger = context.getLogger();\n    String bucketName = event.get(\"bucketName\");\n    logger.log(\"Bucket name is: \" + bucketName);\n\n    S3Service s3Service = new S3Service() ;\n    DynamoDBService ddb = new DynamoDBService();\n    AnalyzePhotos photos = new AnalyzePhotos();\n    SendEmail email = new SendEmail();\n\n    List<String> items = s3Service.listBucketObjects(bucketName);\n    List<ArrayList<GearItem>> myList = new ArrayList<>();\n    for (String item : items) {\n\n        byte[] keyData = s3Service.getObjectBytes(bucketName, item);\n\n        // Analyze the photo and return a list where each element is a GearItem.\n        ArrayList<GearItem> gearItem = photos.detectLabels(keyData, item);\n\n        // Only add a list with items\n        if (gearItem != null)\n            myList.add(gearItem);\n    }\n\n    ddb.persistItem(myList);\n\n    // Create a new list with only unique keys to email.\n    Set<String> unqiueKeys = createUniqueList(myList);\n    email.sendMsg(unqiueKeys);\n    logger.log(\"Updated the DynamoDB table with PPE data\");\n    return bucketName;\n}\n\n// Create a list of unique keys.\nprivate static Set<String> createUniqueList(List<ArrayList<GearItem>> gearList) {\n\n\n    List<String> keys = new ArrayList<>();\n\n    // Persist the data into a DynamoDB table.\n    for (Object o : gearList) {\n\n        //Need to get the WorkItem from each list.\n        List innerList = (List) o;\n\n        for (Object value : innerList) {\n            GearItem gearItem = (GearItem) value;\n            keys.add(gearItem.getKey());\n        }\n    }\n\n    // Create list without duplicates.\n    Set<String> uniqueKeys = new HashSet<String>(keys);\n    return uniqueKeys;\n  }\n }\n```\n\n----------------------------------------\n\nTITLE: Building a Resilient Service with IAM and Other AWS Services in C#\nDESCRIPTION: An advanced scenario that demonstrates building a resilient, load-balanced web service using IAM, EC2, Auto Scaling, Elastic Load Balancing, DynamoDB, and Systems Manager. It showcases complex interactions between multiple AWS services.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/IAM/README.md#2025-04-09_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n../cross-service/ResilientService/ResilientServiceWorkflow/ResilientServiceWorkflow.cs\n```\n\n----------------------------------------\n\nTITLE: Listing Required Python Dependencies for DAX Development\nDESCRIPTION: A requirements file listing the necessary Python packages for working with Amazon DynamoDB Accelerator (DAX). It includes the DAX client library, AWS SDK for Python (boto3), and testing utilities like pytest and requests.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/dynamodb/requirements.txt#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\namazon-dax-client>=1.1.7\nboto3>=1.26.79\npytest>=7.2.1\nrequests>=2.28.2\n```\n\n----------------------------------------\n\nTITLE: Initiating Multipart Upload in Rust\nDESCRIPTION: This code snippet demonstrates how to initiate a multipart upload in Amazon S3 using the AWS SDK for Rust. It's the first step in the multipart upload process for large files.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/s3/README.md#2025-04-09_snippet_4\n\nLANGUAGE: Rust\nCODE:\n```\nCreateMultipartUpload\n```\n\n----------------------------------------\n\nTITLE: Implementing DynamoDB-Enhanced Work Class with Annotations\nDESCRIPTION: A Java class that represents a Work item with DynamoDB Enhanced Client annotations. This class uses @DynamoDbBean, @DynamoDbPartitionKey, and @DynamoDbSortKey annotations to define how the object maps to a DynamoDB table structure, enabling seamless integration with the AWS SDK for Java v2's Enhanced Client.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_dynamodb_web_app/README.md#2025-04-09_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\npackage com.aws.rest;\n\nimport software.amazon.awssdk.enhanced.dynamodb.mapper.annotations.DynamoDbSortKey;\nimport software.amazon.awssdk.enhanced.dynamodb.mapper.annotations.DynamoDbBean;\nimport software.amazon.awssdk.enhanced.dynamodb.mapper.annotations.DynamoDbPartitionKey;\n\n@DynamoDbBean\npublic class Work {\n    private String id;\n    private String date;\n    private String description ;\n    private String guide;\n    private String username ;\n    private String status ;\n    private int archive ;\n\n    @DynamoDbPartitionKey\n    public String getId() {\n        return this.id;\n    };\n\n    public void setId(String id) {\n        this.id = id;\n    }\n\n    @DynamoDbSortKey\n    public String getName() {\n        return this.username;\n    }\n\n    public void setArchive(int archive) {\n        this.archive = archive;\n    }\n\n    public int getArchive() {\n        return this.archive;\n    }\n\n    public void setStatus(String status) {\n        this.status = status;\n    }\n\n    public String getStatus() {\n        return this.status;\n    }\n\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    public String getUsername() {\n        return this.username;\n    }\n\n    public void setGuide(String guide) {\n        this.guide = guide;\n    }\n\n    public String getGuide() {\n        return this.guide;\n    }\n\n    public String getDate() {\n        return this.date;\n    }\n\n    public void setDate(String date) {\n        this.date = date;\n    }\n\n    public String getDescription() {\n        return description;\n    }\n\n    public void setDescription(String description) {\n        this.description = description;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Putting an Item into DynamoDB in Swift\nDESCRIPTION: Shows how to add a new item to a DynamoDB table. This operation creates a new item or replaces an existing item with the same primary key.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/swift/example_code/dynamodb/README.md#2025-04-09_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nPutItem(basics/MovieList/MovieTable.swift#L269)\n```\n\n----------------------------------------\n\nTITLE: Running S3 Directory Buckets Basic Example in Python\nDESCRIPTION: This command runs the basic example script for S3 Directory Buckets, which demonstrates various operations including VPC setup, bucket creation, and object manipulation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/s3-directory-buckets/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython s3_express_getting_started.py\n```\n\n----------------------------------------\n\nTITLE: Implementing DynamoDBService in Kotlin for Amazon DynamoDB Operations\nDESCRIPTION: This class provides methods for interacting with a DynamoDB 'Work' table, including operations to archive items, retrieve filtered items, get all items, generate reports, and add new items. It utilizes the AWS SDK for Kotlin's DynamoDbClient to execute database operations and demonstrates filter expressions for querying specific records.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/itemtracker_dynamodb/README.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.aws.rest\nimport aws.sdk.kotlin.services.dynamodb.DynamoDbClient\nimport aws.sdk.kotlin.services.dynamodb.model.AttributeAction\nimport aws.sdk.kotlin.services.dynamodb.model.AttributeValue\nimport aws.sdk.kotlin.services.dynamodb.model.AttributeValueUpdate\nimport aws.sdk.kotlin.services.dynamodb.model.PutItemRequest\nimport aws.sdk.kotlin.services.dynamodb.model.ScanRequest\nimport aws.sdk.kotlin.services.dynamodb.model.UpdateItemRequest\nimport org.springframework.stereotype.Component\nimport org.w3c.dom.Document\nimport java.io.StringWriter\nimport java.text.SimpleDateFormat\nimport java.util.Calendar\nimport java.util.UUID\nimport javax.xml.parsers.DocumentBuilderFactory\nimport javax.xml.parsers.ParserConfigurationException\nimport javax.xml.transform.TransformerException\nimport javax.xml.transform.TransformerFactory\nimport javax.xml.transform.dom.DOMSource\nimport javax.xml.transform.stream.StreamResult\nimport kotlin.collections.HashMap\n\n/*\nBefore running this code example, create a DynamoDB table named Work with a primary key named id.\n*/\n@Component\nclass DynamoDBService {\n\n    // Archive an item.\n    suspend fun archiveItemEC(id: String) {\n        val tableNameVal = \"Work\"\n        val itemKey = mutableMapOf<String, AttributeValue>()\n        itemKey[\"id\"] = AttributeValue.S(id)\n\n        val updatedValues = mutableMapOf<String, AttributeValueUpdate>()\n        updatedValues[\"archive\"] = AttributeValueUpdate {\n            value = AttributeValue.N(\"1\")\n            action = AttributeAction.Put\n        }\n\n        val request = UpdateItemRequest {\n            tableName = tableNameVal\n            key = itemKey\n            attributeUpdates = updatedValues\n        }\n\n        DynamoDbClient { region = \"us-east-1\" }.use { dynamoDBClient ->\n            dynamoDBClient.updateItem(request)\n        }\n    }\n\n    // Get items from the DynamoDB table.\n    suspend fun getOpenItems(myArc: Boolean): MutableList<WorkItem> {\n        val tableNameVal = \"Work\"\n        val myList = mutableListOf<WorkItem>()\n        val myMap = HashMap<String, String>()\n        myMap.put(\"#archive2\", \"archive\")\n        val myExMap = mutableMapOf<String, AttributeValue>()\n        if (myArc) {\n            myExMap.put(\":val\", AttributeValue.N(\"1\"))\n        } else {\n            myExMap.put(\":val\", AttributeValue.N(\"0\"))\n        }\n\n        val scanRequest = ScanRequest {\n            expressionAttributeNames = myMap\n            expressionAttributeValues = myExMap\n            tableName = tableNameVal\n            filterExpression = \"#archive2 = :val\"\n        }\n\n        DynamoDbClient { region = \"us-east-1\" }.use { dynamoDBClient ->\n            val response = dynamoDBClient.scan(scanRequest)\n            for (item in response.items!!) {\n                val keys = item.keys\n                val myItem = WorkItem()\n\n                for (key in keys) {\n                    when (key) {\n                        \"date\" -> {\n                            myItem.date = splitMyString(item[key].toString())\n                        }\n\n                        \"status\" -> {\n                            myItem.status = splitMyString(item[key].toString())\n                        }\n\n                        \"username\" -> {\n                            myItem.name = \"user\"\n                        }\n\n                        \"archive\" -> {\n                            myItem.arc = splitMyString(item[key].toString())\n                        }\n\n                        \"description\" -> {\n                            myItem.description = splitMyString(item[key].toString())\n                        }\n                        \"id\" -> {\n                            myItem.id = splitMyString(item[key].toString())\n                        }\n                        else -> {\n                            myItem.guide = splitMyString(item[key].toString())\n                            myList.add(myItem)\n                        }\n                    }\n                }\n            }\n            return myList\n        }\n    }\n\n    // Get items from the DynamoDB table.\n    suspend fun getAllItems(): MutableList<WorkItem> {\n        val tableNameVal = \"Work\"\n        val myList = mutableListOf<WorkItem>()\n        val scanRequest = ScanRequest {\n           tableName = tableNameVal\n       }\n\n        DynamoDbClient { region = \"us-east-1\" }.use { dynamoDBClient ->\n            val response = dynamoDBClient.scan(scanRequest)\n            for (item in response.items!!) {\n                val keys = item.keys\n                val myItem = WorkItem()\n\n                for (key in keys) {\n                    when (key) {\n                        \"date\" -> {\n                            myItem.date = splitMyString(item[key].toString())\n                        }\n\n                        \"status\" -> {\n                            myItem.status = splitMyString(item[key].toString())\n                        }\n\n                        \"username\" -> {\n                            myItem.name = \"user\"\n                        }\n\n                        \"archive\" -> {\n                            myItem.arc = splitMyString(item[key].toString())\n                        }\n\n                        \"description\" -> {\n                            myItem.description = splitMyString(item[key].toString())\n                        }\n                        \"id\" -> {\n                            myItem.id = splitMyString(item[key].toString())\n                        }\n                        else -> {\n                            myItem.guide = splitMyString(item[key].toString())\n                            myList.add(myItem)\n                        }\n                    }\n                }\n            }\n            return myList\n        }\n    }\n\n\n\n    // Get items to go into the email report.\n    suspend fun getOpenReport(myArc: Boolean): String? {\n        val tableNameVal = \"Work\"\n        val myList = mutableListOf<WorkItem>()\n        val myMap = HashMap<String, String>()\n        myMap.put(\"#archive2\", \"archive\")\n        val myExMap = mutableMapOf<String, AttributeValue>()\n        if (myArc) {\n            myExMap.put(\":val\", AttributeValue.N(\"1\"))\n        } else {\n            myExMap.put(\":val\", AttributeValue.N(\"0\"))\n        }\n\n        val scanRequest = ScanRequest {\n            expressionAttributeNames = myMap\n            expressionAttributeValues = myExMap\n            tableName = tableNameVal\n            filterExpression = \"#archive2 = :val\"\n        }\n\n        DynamoDbClient { region = \"us-east-1\" }.use { dynamoDBClient ->\n            val response = dynamoDBClient.scan(scanRequest)\n            for (item in response.items!!) {\n                val keys = item.keys\n                val myItem = WorkItem()\n\n                for (key in keys) {\n                    when (key) {\n                        \"date\" -> {\n                            myItem.date = splitMyString(item[key].toString())\n                        }\n\n                        \"status\" -> {\n                            myItem.status = splitMyString(item[key].toString())\n                        }\n\n                        \"username\" -> {\n                            myItem.name = \"user\"\n                        }\n\n                        \"archive\" -> {\n                            myItem.arc = splitMyString(item[key].toString())\n                        }\n\n                        \"description\" -> {\n                            myItem.description = splitMyString(item[key].toString())\n                        }\n                        \"id\" -> {\n                            myItem.id = splitMyString(item[key].toString())\n                        }\n                        else -> {\n                            myItem.guide = splitMyString(item[key].toString())\n                            myList.add(myItem)\n                        }\n                    }\n                }\n            }\n            return toXml(myList)?.let { convertToString(it) }\n        }\n    }\n\n    // Put an item into a DynamoDB table.\n    suspend fun putItemInTable(itemOb: WorkItem): String {\n        val tableNameVal = \"Work\"\n\n        // Get all the values to store in the DynamoDB table.\n        val myGuid = UUID.randomUUID().toString()\n        val user = itemOb.name\n        val desc = itemOb.description\n        val status = itemOb.status\n        val guide = itemOb.guide\n\n        val date = Calendar.getInstance().time\n        val formatter = SimpleDateFormat.getDateTimeInstance()\n        val formatedDate = formatter.format(date)\n\n        // Add the data to the DynamoDB table.\n        val itemValues = mutableMapOf<String, AttributeValue>()\n        itemValues[\"id\"] = AttributeValue.S(myGuid)\n        itemValues[\"username\"] = AttributeValue.S(user.toString())\n        itemValues[\"archive\"] = AttributeValue.N(\"0\")\n        itemValues[\"date\"] = AttributeValue.S(formatedDate)\n        itemValues[\"description\"] = AttributeValue.S(desc.toString())\n        itemValues[\"guide\"] = AttributeValue.S(guide.toString())\n        itemValues[\"status\"] = AttributeValue.S(status.toString())\n\n        val request = PutItemRequest {\n            tableName = tableNameVal\n            item = itemValues\n        }\n\n        DynamoDbClient { region = \"us-east-1\" }.use { dynamoDBClient ->\n            dynamoDBClient.putItem(request)\n            return myGuid\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PhotoApp Spring Boot Application in Kotlin with AWS S3 Integration\nDESCRIPTION: A complete Spring Boot application that manages photos using AWS S3 and recognition services. It provides endpoints for uploading, downloading, and analyzing photos stored in an S3 bucket, with functionality to generate Excel reports based on image analysis results.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/creating_photo_analyzer_app/README.md#2025-04-09_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\n    package com.aws.photo\n\n    import kotlinx.coroutines.runBlocking\n    import org.springframework.beans.factory.annotation.Autowired\n    import org.springframework.boot.autoconfigure.SpringBootApplication\n    import org.springframework.boot.runApplication\n    import org.springframework.stereotype.Controller\n    import org.springframework.web.bind.annotation.*\n    import org.springframework.web.multipart.MultipartFile\n    import org.springframework.web.servlet.ModelAndView\n    import org.springframework.web.servlet.view.RedirectView\n    import java.io.ByteArrayInputStream\n    import java.io.IOException\n    import java.io.InputStream\n    import javax.servlet.http.HttpServletRequest\n    import javax.servlet.http.HttpServletResponse\n\n    @SpringBootApplication\n    class PhotoApp\n\n    fun main(args: Array<String>) {\n     runApplication<PhotoApp>(*args)\n     }\n\n    @Controller\n    class MessageResource {\n\n     // Change to your Bucket Name.\n     private val bucketName = \"<BUCKETNAME>\"\n\n     @Autowired\n     var s3Service: S3Service? = null\n\n     @Autowired\n     var recService: AnalyzePhotos? = null\n\n     @Autowired\n     var excel: WriteExcel? = null\n\n     @GetMapping(\"/process\")\n     fun process(): String? {\n        return \"process\"\n     }\n\n     @GetMapping(\"/photo\")\n     fun photo(): String? {\n        return \"upload\"\n     }\n\n     @GetMapping(\"/\")\n     fun root(): String? {\n        return \"index\"\n     }\n\n     @RequestMapping(value = [\"/getimages\"], method = [RequestMethod.GET])\n     @ResponseBody\n     fun getImages(request: HttpServletRequest?, response: HttpServletResponse?): String? = runBlocking{\n        return@runBlocking s3Service?.ListAllObjects(bucketName)\n     }\n\n     // Generates a report that analyzes photos in a given bucket.\n     @RequestMapping(value = [\"/report\"], method = [RequestMethod.GET])\n     @ResponseBody\n     fun report(request: HttpServletRequest, response: HttpServletResponse) = runBlocking {\n\n        // Get a list of key names in the given bucket.\n        val myKeys = s3Service?.listBucketObjects(bucketName)\n\n        // loop through each element in the List.\n        val myList = mutableListOf<List<*>>()\n        val len = myKeys?.size\n        for (z in 0 until len!!) {\n            val key = myKeys?.get(z) as String\n            val keyData = s3Service?.getObjectBytes(bucketName, key)\n\n            //Analyze the photo.\n            val item = recService?.DetectLabels(keyData, key)\n            if (item != null) {\n                myList.add(item)\n            }\n          }\n\n        // Now we have a list of WorkItems describing the photos in the S3 bucket.\n        val excelData = excel?.exportExcel(myList)\n        try {\n\n            // Download the report.\n            val reportName  = \"ExcelReport.xls\"\n            response.contentType  = \"application/vnd.ms-excel\"\n            response.setHeader(\"Content-disposition\", \"attachment; filename=$reportName\")\n            org.apache.commons.io.IOUtils.copy(excelData, response?.outputStream)\n            response.flushBuffer()\n\n        } catch (e: Exception) {\n            e.printStackTrace()\n         }\n       }\n\n     // Downloads the given image from the Amazon S3 bucket.\n     @RequestMapping(value = [\"/downloadphoto\"], method = [RequestMethod.GET])\n     fun fileDownload(request: HttpServletRequest, response: HttpServletResponse)  = runBlocking {\n        try {\n            val photoKey = request.getParameter(\"photoKey\")\n            val photoBytes: ByteArray? = s3Service?.getObjectBytes(bucketName, photoKey)\n            val `is`: InputStream = ByteArrayInputStream(photoBytes)\n\n            // Define the required information here.\n            response.contentType = \"image/png\"\n            response.setHeader(\"Content-disposition\", \"attachment; filename=$photoKey\")\n            org.apache.commons.io.IOUtils.copy(`is`, response.outputStream)\n            response.flushBuffer()\n        \n        } catch (e: Exception) {\n            e.printStackTrace()\n        }\n      }\n\n     // Upload a photo to an Amazon S3 bucket.\n     @RequestMapping(value = [\"/upload\"], method = [RequestMethod.POST])\n     @ResponseBody\n     fun singleFileUpload(@RequestParam(\"file\") file: MultipartFile): ModelAndView? = runBlocking {\n        try {\n            val bytes = file.bytes\n            val name = file.originalFilename\n\n            // Put the file into the bucket.\n            s3Service?.putObject(bytes, bucketName, name)\n        } catch (e: IOException) {\n            e.printStackTrace()\n        }\n        return@runBlocking ModelAndView(RedirectView(\"photo\"))\n       }\n     }\n```\n\n----------------------------------------\n\nTITLE: Describing a SageMaker Pipeline Execution in Java\nDESCRIPTION: This code snippet shows how to describe a SageMaker pipeline execution using the AWS SDK for Java 2.x. It's used to monitor the status of pipeline executions in the workflow example.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/sagemaker/README.md#2025-04-09_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nDescribePipelineExecution\n```\n\n----------------------------------------\n\nTITLE: Invoking Lambda Function in Java\nDESCRIPTION: This code snippet shows how to invoke a Lambda function using the AWS SDK for Java 2.x. It's part of the Lambda scenario where the function is called with different parameters.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/lambda/README.md#2025-04-09_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nInvoke\n```\n\n----------------------------------------\n\nTITLE: Implementing Second Lambda Function for Multi-Channel Notifications in Java\nDESCRIPTION: The ChannelHandler class implements the RequestHandler interface as the second step in the workflow. It receives XML data from the first step and uses the SendNotifications class to send messages through both text (SMS) and email channels, handling relevant exceptions.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/workflow_multiple_channels/README.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npackage com.example;\n\nimport com.amazonaws.services.lambda.runtime.Context;\nimport com.amazonaws.services.lambda.runtime.RequestHandler;\nimport com.amazonaws.services.lambda.runtime.LambdaLogger;\nimport org.jdom2.JDOMException;\nimport javax.mail.MessagingException;\nimport java.io.IOException;\n\npublic class ChannelHandler implements RequestHandler<String, String> {\n    @Override\n    public String handleRequest(String event, Context context) {\n        LambdaLogger logger = context.getLogger();\n        String xml = event;\n        int num =0;\n        SendNotifications sn = new SendNotifications();\n        try {\n           sn.handleTextMessage(xml);\n           num = sn.handleEmailMessage(xml);\n           logger.log(\"The workflow sent \"+num +\" email messages\");\n        } catch (JDOMException | IOException | MessagingException e) {\n            e.printStackTrace();\n        }\n        return \"The workflow sent \"+num +\" email messages\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing S3Service Class with S3AsyncClient in Java\nDESCRIPTION: A comprehensive Java class that handles asynchronous Amazon S3 operations including object retrieval, listing bucket contents, and object upload. Uses S3AsyncClient for non-blocking operations and includes methods for XML generation of bucket contents. Dependencies include AWS SDK for Java and Spring framework.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_photo_analyzer_async/README.md#2025-04-09_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.photo;\n\nimport org.springframework.stereotype.Component;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\nimport software.amazon.awssdk.auth.credentials.EnvironmentVariableCredentialsProvider;\nimport software.amazon.awssdk.core.ResponseBytes;\nimport software.amazon.awssdk.core.async.AsyncRequestBody;\nimport software.amazon.awssdk.core.async.AsyncResponseTransformer;\nimport software.amazon.awssdk.regions.Region;\nimport software.amazon.awssdk.services.s3.S3AsyncClient;\nimport software.amazon.awssdk.services.s3.model.GetObjectRequest;\nimport software.amazon.awssdk.services.s3.model.GetObjectResponse;\nimport software.amazon.awssdk.services.s3.model.ListObjectsRequest;\nimport software.amazon.awssdk.services.s3.model.ListObjectsResponse;\nimport software.amazon.awssdk.services.s3.model.PutObjectRequest;\nimport software.amazon.awssdk.services.s3.model.PutObjectResponse;\nimport software.amazon.awssdk.services.s3.model.S3Exception;\nimport software.amazon.awssdk.services.s3.model.S3Object;\nimport javax.xml.XMLConstants;\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.ParserConfigurationException;\nimport javax.xml.transform.Transformer;\nimport javax.xml.transform.TransformerConfigurationException;\nimport javax.xml.transform.TransformerException;\nimport javax.xml.transform.TransformerFactory;\nimport javax.xml.transform.dom.DOMSource;\nimport javax.xml.transform.stream.StreamResult;\nimport java.io.StringWriter;\nimport java.time.Instant;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.atomic.AtomicReference;\n\n@Component\npublic class S3Service {\n    S3AsyncClient s3AsyncClient;\n    private S3AsyncClient getClient() {\n        return S3AsyncClient.builder()\n                .credentialsProvider(EnvironmentVariableCredentialsProvider.create())\n                .region(Region.US_WEST_2)\n                .build();\n    }\n\n    public byte[] getObjectBytes (String bucketName, String keyName) {\n        s3AsyncClient = getClient();\n        final AtomicReference<byte[]> reference = new AtomicReference<>();\n        try {\n            GetObjectRequest objectRequest = GetObjectRequest.builder()\n                    .bucket(bucketName)\n                    .key(keyName)\n                    .build();\n\n            // Get the Object from the Amazon S3 bucket using the Amazon S3 Async Client.\n            final CompletableFuture<ResponseBytes<GetObjectResponse>>[] futureGet = new CompletableFuture[]{\n                s3AsyncClient.getObject(objectRequest,\n                    AsyncResponseTransformer.toBytes())};\n\n            futureGet[0].whenComplete((resp, err) -> {\n                try {\n                    if (resp != null) {\n                        //  Set the AtomicReference object.\n                         reference.set(resp.asByteArray());\n\n                    } else {\n                        err.printStackTrace();\n                    }\n                } finally {\n                    // Only close the client when you are completely done with it.\n                    s3AsyncClient.close();\n                }\n            });\n            futureGet[0].join();\n\n            // Read the AtomicReference object and return the byte[] value.\n            return reference.get();\n\n        } catch (S3Exception e) {\n            System.err.println(e.awsErrorDetails().errorMessage());\n            System.exit(1);\n        }\n        return null;\n    }\n\n    // Returns the names of all images in the given bucket.\n    public List<String> ListBucketObjects(String bucketName) {\n        s3AsyncClient = getClient();\n        final AtomicReference<List<String>> reference = new AtomicReference<>();\n        try {\n            ListObjectsRequest listObjects = ListObjectsRequest\n                    .builder()\n                    .bucket(bucketName)\n                    .build();\n\n            CompletableFuture<ListObjectsResponse> futureGet  = s3AsyncClient.listObjects(listObjects);\n            futureGet.whenComplete((resp, err) -> {\n                try {\n                    List<String> keys = new ArrayList<>();\n                    String keyName ;\n                    if (resp != null) {\n                        List<S3Object> objects = resp.contents();\n                        for (S3Object myValue : objects) {\n                            keyName = myValue.key();\n                            keys.add(keyName);\n                        }\n\n                        //  Set the AtomicReference object.\n                        reference.set(keys) ;\n                    } else {\n                        err.printStackTrace();\n                    }\n                } finally {\n                    // Only close the client when you are completely done with it.\n                    s3AsyncClient.close();\n                }\n            });\n            futureGet.join();\n\n            // Read the AtomicReference object.\n            return reference.get();\n\n        } catch (S3Exception e) {\n            System.err.println(e.awsErrorDetails().errorMessage());\n            System.exit(1);\n        }\n        return null ;\n    }\n\n    // Places an image into a S3 bucket.\n    public void putObject(byte[] data, String bucketName, String objectKey) {\n        s3AsyncClient = getClient();\n        try {\n            PutObjectRequest objectRequest =  PutObjectRequest.builder()\n                    .bucket(bucketName)\n                    .key(objectKey)\n                    .build();\n\n            // Put the object into the bucket.\n            CompletableFuture<PutObjectResponse> future = s3AsyncClient.putObject(objectRequest,\n                    AsyncRequestBody.fromBytes(data));\n            future.whenComplete((resp, err) -> {\n                try {\n                    if (resp != null) {\n                        System.out.println(\"Object uploaded. Details: \" + resp);\n                    } else {\n                        // Handle error\n                        err.printStackTrace();\n                    }\n                } finally {\n                    // Only close the client when you are completely done with it\n                    s3AsyncClient.close();\n                }\n            });\n            future.join();\n\n        } catch (S3Exception e) {\n            System.err.println(e.getMessage());\n            System.exit(1);\n        }\n    }\n\n    // Returns the names of all images and data within XML.\n    public String ListAllObjects(String bucketName) {\n        s3AsyncClient = getClient();\n        final AtomicReference<List<BucketItem>> reference = new AtomicReference<>();\n        List<BucketItem> bucketItems = new ArrayList<>();\n        try {\n            ListObjectsRequest listObjects = ListObjectsRequest\n                    .builder()\n                    .bucket(bucketName)\n                    .build();\n\n            CompletableFuture<ListObjectsResponse> future = s3AsyncClient.listObjects(listObjects);\n            future.whenComplete((resp, err) -> {\n                try {\n                    if (resp != null) {\n                        BucketItem myItem ;\n                        long sizeLg;\n                        Instant DateIn;\n                        List<S3Object> objects = resp.contents();\n                        for (S3Object myValue: objects) {\n                            myItem = new BucketItem();\n                            myItem.setKey(myValue.key());\n                            myItem.setOwner(myValue.owner().displayName());\n                            sizeLg = myValue.size() / 1024 ;\n                            myItem.setSize(String.valueOf(sizeLg));\n                            DateIn = myValue.lastModified();\n                            myItem.setDate(String.valueOf(DateIn));\n\n                            // Push the items to the list.\n                            bucketItems.add(myItem);\n                        }\n                        reference.set(bucketItems) ;\n\n                    } else {\n                        err.printStackTrace();\n                    }\n                } finally {\n                    // Only close the client when you are completely done with it.\n                    s3AsyncClient.close();\n                }\n            });\n            future.join();\n            return convertToString(toXml(reference.get()));\n\n        } catch (S3Exception e) {\n            System.err.println(e.awsErrorDetails().errorMessage());\n            System.exit(1);\n        }\n        return null ;\n    }\n\n    // Convert items into XML to pass back to the view.\n    private Document toXml(List<BucketItem> itemList) {\n        try {\n            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n            factory.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n            DocumentBuilder builder = factory.newDocumentBuilder();\n            Document doc = builder.newDocument();\n\n            // Start building the XML.\n            Element root = doc.createElement( \"Items\" );\n            doc.appendChild( root );\n\n            // Iterate through the collection.\n            for (BucketItem myItem : itemList) {\n                Element item = doc.createElement(\"Item\");\n                root.appendChild(item);\n\n                // Set Key.\n                Element id = doc.createElement(\"Key\");\n                id.appendChild(doc.createTextNode(myItem.getKey()));\n                item.appendChild(id);\n\n                // Set Owner.\n                Element name = doc.createElement(\"Owner\");\n```\n\n----------------------------------------\n\nTITLE: Creating an S3 Bucket in .NET\nDESCRIPTION: Creates a new Amazon S3 bucket using the AWS SDK for .NET. This method is part of the S3Bucket class and handles the creation of a new bucket with the specified name.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/S3/README.md#2025-04-09_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic async Task<bool> CreateBucketAsync(string bucketName)\n{\n    try\n    {\n        var request = new CreateBucketRequest\n        {\n            BucketName = bucketName,\n            UseClientRegion = true\n        };\n\n        var response = await _s3Client.CreateBucketAsync(request);\n        return response.HttpStatusCode == System.Net.HttpStatusCode.OK;\n    }\n    catch (AmazonS3Exception ex)\n    {\n        Console.WriteLine($\"Error creating bucket: '{ex.Message}'\\n\");\n        return false;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete AWS Glue ETL Scenario in Java\nDESCRIPTION: A comprehensive example that demonstrates the entire AWS Glue workflow including creating crawlers, discovering data, transforming it, and cleanup.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/glue/README.md#2025-04-09_snippet_12\n\nLANGUAGE: Java\nCODE:\n```\nsrc/main/java/com/example/glue/scenario/GlueScenario.java\n```\n\n----------------------------------------\n\nTITLE: Implementing WorkItemRepository Class for AWS RDS Data Client in Kotlin\nDESCRIPTION: This code defines the WorkItemRepository class, which includes methods for database operations using the AWS RDS Data Client. It requires ARN values for Secrets Manager and Amazon Aurora Serverless database to be specified. The class provides functionality for archiving items, retrieving items, injecting new submissions, and generating reports.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/serverless_rds/README.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.example.demo\n\nimport aws.sdk.kotlin.services.rdsdata.RdsDataClient\nimport aws.sdk.kotlin.services.rdsdata.model.ExecuteStatementRequest\nimport aws.sdk.kotlin.services.rdsdata.model.Field\nimport aws.sdk.kotlin.services.rdsdata.model.SqlParameter\nimport org.springframework.stereotype.Component\nimport org.w3c.dom.Document\nimport java.io.StringWriter\nimport java.sql.Date\nimport java.text.SimpleDateFormat\nimport java.time.LocalDateTime\nimport java.time.format.DateTimeFormatter\nimport java.util.UUID\nimport javax.xml.parsers.DocumentBuilderFactory\nimport javax.xml.parsers.ParserConfigurationException\nimport javax.xml.transform.TransformerException\nimport javax.xml.transform.TransformerFactory\nimport javax.xml.transform.dom.DOMSource\nimport javax.xml.transform.stream.StreamResult\n\n@Component\nclass WorkItemRepository {\n    private val secretArnVal = \"<Enter value>\"\n    private val resourceArnVal = \"<Enter value>\"\n\n    fun param(nameVal: String, valueVal: String): SqlParameter {\n        val myPar = SqlParameter {\n            name = nameVal\n            value = Field.StringValue(valueVal)\n        }\n        return myPar\n    }\n\n    // Archive the specific item.\n    suspend fun flipItemArchive(id: String): String {\n        val sqlStatement: String\n        val arc = \"1\"\n\n        // Specify the SQL statement to query data.\n        sqlStatement = \"update work set archive = (:arch) where idwork =(:id);\"\n        val parametersVal = listOf(\n            param(\"arch\", arc),\n            param(\"id\", id)\n        )\n        val sqlRequest = ExecuteStatementRequest {\n            secretArn = secretArnVal\n            sql = sqlStatement\n            database = \"jobs\"\n            resourceArn = resourceArnVal\n            parameters = parametersVal\n        }\n\n        RdsDataClient { region = \"us-east-1\" }.use { rdsDataClient ->\n            rdsDataClient.executeStatement(sqlRequest)\n        }\n        return id\n    }\n\n    // Get items from the database.\n    suspend fun getItemsDataSQL(statusVal: String): MutableList<WorkItem> {\n        val records = mutableListOf<WorkItem>()\n        val sqlStatement: String\n        val sqlRequest: ExecuteStatementRequest\n        val isArc: String\n        if (statusVal.compareTo(\"true\") == 0) {\n            sqlStatement = \"SELECT idwork, date, description, guide, status, username, archive \" +\n                \"FROM work WHERE archive = :arch ;\"\n            isArc = \"1\"\n            val parametersVal = listOf(param(\"arch\", isArc))\n            sqlRequest = ExecuteStatementRequest {\n                secretArn = secretArnVal\n                sql = sqlStatement\n                database = \"jobs\"\n                resourceArn = resourceArnVal\n                parameters = parametersVal\n            }\n        } else if (statusVal.compareTo(\"false\") == 0) {\n            sqlStatement = \"SELECT idwork, date, description, guide, status, username, archive \" +\n                \"FROM work WHERE archive = :arch ;\"\n            isArc = \"0\"\n            val parametersVal = listOf(param(\"arch\", isArc))\n\n            sqlRequest = ExecuteStatementRequest {\n                secretArn = secretArnVal\n                sql = sqlStatement\n                database = \"jobs\"\n                resourceArn = resourceArnVal\n                parameters = parametersVal\n            }\n        } else {\n            sqlStatement = \"SELECT idwork, date, description, guide, status, username, archive FROM work ;\"\n            sqlRequest = ExecuteStatementRequest {\n                secretArn = secretArnVal\n                sql = sqlStatement\n                database = \"jobs\"\n                resourceArn = resourceArnVal\n            }\n        }\n\n        RdsDataClient { region = \"us-east-1\" }.use { rdsDataClient ->\n            val response = rdsDataClient.executeStatement(sqlRequest)\n            val dataList: List<List<Field>>? = response.records\n\n            // Process records using Kotlin collection operations.\n            dataList?.forEach { record ->\n                val workItem = WorkItem().apply {\n                    id = record[0].toString().substringAfter(\"=\").substringBefore(')')\n                    date = record[1].toString().substringAfter(\"=\").substringBefore(')')\n                    description = record[2].toString().substringAfter(\"=\").substringBefore(')')\n                    guide = record[3].toString().substringAfter(\"=\").substringBefore(')')\n                    status = record[4].toString().substringAfter(\"=\").substringBefore(')')\n                    name = record[5].toString().substringAfter(\"=\").substringBefore(')')\n                    archived = record[6].toString().substringAfter(\"=\").substringBefore(')').toBoolean()\n                }\n\n                records.add(workItem)\n            }\n        }\n        return records\n    }\n\n    // Inject a new submission.\n    suspend fun injestNewSubmission(item: WorkItem): String {\n        val arc = \"0\"\n        val name = item.name.toString()\n        val guide = item.guide.toString()\n        val description = item.description.toString()\n        val status = item.status.toString()\n\n        // Generate the work item ID.\n        val uuid = UUID.randomUUID()\n        val workId = uuid.toString()\n\n        // Date conversion.\n        val dtf = DateTimeFormatter.ofPattern(\"yyyy/MM/dd HH:mm:ss\")\n        val now = LocalDateTime.now()\n        val sDate1 = dtf.format(now)\n        val date1 = SimpleDateFormat(\"yyyy/MM/dd\").parse(sDate1)\n        val sqlDate = Date(date1.time)\n\n        // Inject an item into the database.\n        val sqlStatement =\n            \"INSERT INTO work (idwork, username, date, description, guide, status, archive) VALUES\" +\n                \"(:idwork, :username, :date, :description, :guide, :status, :arch);\"\n\n        val parametersVal = listOf(\n            param(\"arch\", arc),\n            param(\"username\", name),\n            param(\"status\", status),\n            param(\"date\", sqlDate.toString()),\n            param(\"description\", description),\n            param(\"guide\", guide),\n            param(\"idwork\", workId)\n        )\n\n        val sqlRequest = ExecuteStatementRequest {\n            secretArn = secretArnVal\n            sql = sqlStatement\n            database = \"jobs\"\n            resourceArn = resourceArnVal\n            parameters = parametersVal\n        }\n\n        RdsDataClient { region = \"us-east-1\" }.use { rdsDataClient ->\n            rdsDataClient.executeStatement(sqlRequest)\n        }\n\n        return workId\n    }\n\n    // Get Items data for the content that is sent using Amazon SES.\n    suspend fun getItemsDataSQLReport(arch: String): String? {\n        val records = mutableListOf<WorkItem>()\n\n        val sqlStatement = \"SELECT idwork, date, description, guide, status, username, archive FROM work WHERE archive = :arch ;\"\n        val parametersVal = listOf(param(\"arch\", arch))\n        val sqlRequest = ExecuteStatementRequest {\n            secretArn = secretArnVal\n            sql = sqlStatement\n            database = \"jobs\"\n            resourceArn = resourceArnVal\n            parameters = parametersVal\n        }\n\n        RdsDataClient { region = \"us-east-1\" }.use { rdsDataClient ->\n            val response = rdsDataClient.executeStatement(sqlRequest)\n            val dataList: List<List<Field>>? = response.records\n\n            // Process records using Kotlin collection operations.\n            dataList?.forEach { record ->\n                val workItem = WorkItem().apply {\n                    id = record[0].toString().substringAfter(\"=\").substringBefore(')')\n                    date = record[1].toString().substringAfter(\"=\").substringBefore(')')\n                    description = record[2].toString().substringAfter(\"=\").substringBefore(')')\n                    guide = record[3].toString().substringAfter(\"=\").substringBefore(')')\n                    status = record[4].toString().substringAfter(\"=\").substringBefore(')')\n                    name = record[5].toString().substringAfter(\"=\").substringBefore(')')\n                    archived = record[6].toString().substringAfter(\"=\").substringBefore(')').toBoolean()\n                }\n\n                records.add(workItem)\n            }\n        }\n        return convertToString(toXml(records))\n    }\n\n\n    // Convert Work data into XML to use in the report.\n    fun toXml(itemList: List<WorkItem>): Document? {\n        try {\n            val factory = DocumentBuilderFactory.newInstance()\n            val builder = factory.newDocumentBuilder()\n            val doc = builder.newDocument()\n            val root = doc.createElement(\"Items\")\n            doc.appendChild(root)\n\n            // Get the elements from the collection.\n            val custCount = itemList.size\n\n            // Iterate through the collection.\n            for (index in 0 until custCount) {\n                // Get the WorkItem object from the collection.\n                val myItem = itemList[index]\n                val item = doc.createElement(\"Item\")\n                root.appendChild(item)\n\n                // Set Id.\n                val id = doc.createElement(\"Id\")\n                id.appendChild(doc.createTextNode(myItem.id))\n                item.appendChild(id)\n\n                // Set Name.\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Report Generation REST Controller in Java Spring\nDESCRIPTION: ReportController class that handles report generation and delivery through email. Uses WriteExcel utility for report generation and includes SendMessages functionality for email delivery. Implements a single PUT endpoint for report generation and sending.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/Creating_Spring_RDS_Rest/README.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npackage com.aws.rest;\n\nimport jxl.write.WriteException;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.CrossOrigin;\nimport org.springframework.web.bind.annotation.PutMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.Map;\n\n\n@CrossOrigin(origins = \"*\")\n@RestController\n@RequestMapping(\"api/items:report\")\npublic class ReportController {\n\n    private final WorkItemRepository repository;\n\n    private final WriteExcel writeExcel;\n\n    private final WriteExcel.SendMessages sm;\n    @Autowired()\n    ReportController(\n        WorkItemRepository repository,\n        WriteExcel writeExcel,\n        WriteExcel.SendMessages sm\n    ) {\n        this.repository = repository;\n        this.writeExcel = writeExcel;\n        this.sm = sm;\n    }\n\n    @PutMapping(\"\")\n    public String sendReport(@RequestBody Map<String, String> body) {\n        var list = repository.findAllWithStatus(WorkItemRepository.active);\n        try {\n            InputStream is = writeExcel.write(list);\n            sm.sendReport(is, body.get(\"email\"));\n            return \"Report generated & sent\";\n        } catch (IOException | WriteException e) {\n            e.printStackTrace();\n        }\n        return \"Failed to generate report\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing S3 Buckets in .NET\nDESCRIPTION: Lists all Amazon S3 buckets for the authenticated user using the AWS SDK for .NET. This method demonstrates how to retrieve and display bucket information.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/S3/README.md#2025-04-09_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic static async Task Main()\n{\n    var s3Client = new AmazonS3Client();\n    var response = await s3Client.ListBucketsAsync();\n    Console.WriteLine($\"Number of buckets: {response.Buckets.Count}\");\n    foreach (var bucket in response.Buckets)\n    {\n        Console.WriteLine($\"Bucket name: {bucket.BucketName}, created on {bucket.CreationDate}\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking a Lambda Function in Go\nDESCRIPTION: This code snippet demonstrates how to invoke a Lambda function using the AWS SDK for Go V2. It's one of the essential operations for working with Lambda.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/gov2/lambda/README.md#2025-04-09_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nInvoke\n```\n\n----------------------------------------\n\nTITLE: Invoking Multiple Foundation Models on Amazon Bedrock in Go\nDESCRIPTION: A scenario that demonstrates how to prepare and send prompts to various large language models on Amazon Bedrock. This allows for comparing outputs across different model providers and architectures.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/gov2/bedrock-runtime/README.md#2025-04-09_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nscenarios/scenario_invoke_models.go\n```\n\n----------------------------------------\n\nTITLE: Conversing with AI21 Labs Jurassic-2 model in C#\nDESCRIPTION: Demonstrates how to initiate a conversation with the AI21 Labs Jurassic-2 model using Amazon Bedrock Runtime.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv4/Bedrock-runtime/README.md#2025-04-09_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nModels/Ai21LabsJurassic2/Converse/Converse.cs#L4\n```\n\n----------------------------------------\n\nTITLE: Implementing WorkItemRepository Class for Amazon Redshift Operations\nDESCRIPTION: A comprehensive Java class that provides database operations for work items using Amazon Redshift Data API. It includes methods for executing SQL statements, handling database connections, and managing work item data with proper parameter sanitization. Requires database name, user, and cluster ID configuration.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/CreatingSpringRedshiftRest/README.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage com.aws.rest;\n\nimport org.springframework.stereotype.Component;\nimport software.amazon.awssdk.auth.credentials.ProfileCredentialsProvider;\nimport software.amazon.awssdk.regions.Region;\nimport software.amazon.awssdk.services.redshiftdata.RedshiftDataClient;\nimport software.amazon.awssdk.services.redshiftdata.model.DescribeStatementRequest;\nimport software.amazon.awssdk.services.redshiftdata.model.DescribeStatementResponse;\nimport software.amazon.awssdk.services.redshiftdata.model.ExecuteStatementRequest;\nimport software.amazon.awssdk.services.redshiftdata.model.ExecuteStatementResponse;\nimport software.amazon.awssdk.services.redshiftdata.model.GetStatementResultRequest;\nimport software.amazon.awssdk.services.redshiftdata.model.GetStatementResultResponse;\nimport software.amazon.awssdk.services.redshiftdata.model.RedshiftDataException;\nimport software.amazon.awssdk.services.redshiftdata.model.SqlParameter;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.UUID;\nimport java.util.stream.Collectors;\n\n@Component\npublic class WorkItemRepository {\n    static final String active = \"0\";\n    static final String username = \"user\";\n\n    // Specify the database name, the database user, and the cluster Id value.\n    private static final String database = \"dev\";\n    private static final String dbUser =\"awsuser\";\n    private static final String clusterId = \"redshift-cluster-1\";\n\n    RedshiftDataClient getClient() {\n        Region region = Region.US_WEST_2;\n        return RedshiftDataClient.builder()\n            .region(region)\n            .credentialsProvider(ProfileCredentialsProvider.create())\n            .build();\n    }\n\n    // Return items from the work table.\n    public List<WorkItem> getData(String arch) {\n        String sqlStatement;\n        List<SqlParameter> parameters;\n\n        // Get all records from the Amazon Redshift table.\n        if (arch.compareTo(\"\") == 0) {\n            sqlStatement = \"SELECT idwork, date, description, guide, status, username, archive FROM work\";\n            ExecuteStatementResponse response = executeAll(sqlStatement);\n            String id = response.id();\n            System.out.println(\"The identifier of the statement is \"+id);\n            checkStatement(id);\n            return getResults(id);\n        } else {\n            sqlStatement = \"SELECT idwork, date, description, guide, status, username, archive \" +\n                \"FROM work WHERE username = :username and archive = :arch ;\";\n\n            parameters = List.of(\n                param(\"username\", username),\n                param(\"arch\", arch)\n            );\n            ExecuteStatementResponse response = execute(sqlStatement,parameters);\n            String id = response.id();\n            System.out.println(\"The identifier of the statement is \"+id);\n            checkStatement(id);\n            return getResults(id);\n        }\n    }\n\n    List<WorkItem> getResults(String statementId) {\n        try {\n            GetStatementResultRequest resultRequest = GetStatementResultRequest.builder()\n                .id(statementId)\n                .build();\n\n            GetStatementResultResponse response = getClient().getStatementResult(resultRequest);\n            return response\n                .records()\n                .stream()\n                .map(WorkItem::from)\n                .collect(Collectors.toUnmodifiableList());\n\n        } catch (RedshiftDataException e) {\n            System.err.println(e.getMessage());\n            System.exit(1);\n        }\n        return null;\n    }\n\n    // Update the work table.\n    void flipItemArchive(String sqlStatement, List<SqlParameter> parameters ) {\n        try {\n            ExecuteStatementRequest statementRequest = ExecuteStatementRequest.builder()\n                .clusterIdentifier(clusterId)\n                .database(database)\n                .dbUser(dbUser)\n                .sql(sqlStatement)\n                .parameters(parameters)\n                .build();\n\n            getClient().executeStatement(statementRequest);\n\n        } catch (RedshiftDataException e) {\n            System.err.println(e.getMessage());\n            System.exit(1);\n        }\n    }\n\n    void checkStatement(String sqlId ) {\n        try {\n            DescribeStatementRequest statementRequest = DescribeStatementRequest.builder()\n                .id(sqlId)\n                .build() ;\n\n            // Wait until the sql statement processing is finished.\n            String status;\n            while (true) {\n                DescribeStatementResponse response = getClient().describeStatement(statementRequest);\n                status = response.statusAsString();\n                System.out.println(\"...\"+status);\n\n                if (status.compareTo(\"FINISHED\") == 0) {\n                    break;\n                }\n                Thread.sleep(500);\n            }\n            System.out.println(\"The statement is finished!\");\n\n        } catch (RedshiftDataException | InterruptedException e) {\n            System.err.println(e.getMessage());\n            System.exit(1);\n        }\n    }\n\n    ExecuteStatementResponse execute(String sqlStatement, List<SqlParameter> parameters) {\n        ExecuteStatementRequest sqlRequest = ExecuteStatementRequest.builder()\n            .clusterIdentifier(clusterId)\n            .database(database)\n            .dbUser(dbUser)\n            .sql(sqlStatement)\n            .parameters(parameters)\n            .build();\n        return getClient().executeStatement(sqlRequest);\n    }\n\n    ExecuteStatementResponse executeAll(String sqlStatement) {\n        ExecuteStatementRequest sqlRequest = ExecuteStatementRequest.builder()\n            .clusterIdentifier(clusterId)\n            .database(database)\n            .dbUser(dbUser)\n            .sql(sqlStatement)\n            .build();\n        return getClient().executeStatement(sqlRequest);\n    }\n\n    SqlParameter param(String name, String value) {\n        return SqlParameter.builder().name(name).value(value).build();\n    }\n\n    // Update the work table.\n    public void flipItemArchive(String id ) {\n        String arc = \"1\";\n        String sqlStatement = \"update work set archive = :arc where idwork =:id \";\n        List<SqlParameter> parameters = List.of(\n            param(\"arc\", arc),\n            param(\"id\", id)\n        );\n\n        flipItemArchive(sqlStatement,parameters);\n    }\n\n    public String injectNewSubmission(WorkItem item) {\n        try {\n            String name = item.getName();\n            String guide = item.getGuide();\n            String description = item.getDescription();\n            String status = item.getStatus();\n            String archived = \"0\";\n            UUID uuid = UUID.randomUUID();\n            String workId = uuid.toString();\n\n            DateTimeFormatter dtf = DateTimeFormatter.ofPattern(\"yyyy/MM/dd HH:mm:ss\");\n            LocalDateTime now = LocalDateTime.now();\n            String sDate1 = dtf.format(now);\n            Date date1 = new SimpleDateFormat(\"yyyy/MM/dd\").parse(sDate1);\n            java.sql.Date sqlDate = new java.sql.Date(date1.getTime());\n\n            String sql = \"INSERT INTO work (idwork, username, date, description, guide, status, archive) VALUES\" +\n                \"(:idwork, :username, :date, :description, :guide, :status, :archive);\";\n            List<SqlParameter> paremeters = List.of(\n                param(\"idwork\", workId),\n                param(\"username\", name),\n                param(\"date\", sqlDate.toString()),\n                param(\"description\", description),\n                param(\"guide\", guide),\n                param(\"status\", status),\n                param(\"archive\", archived)\n            );\n\n            ExecuteStatementResponse result = execute(sql, paremeters);\n            System.out.println(result.toString());\n            return workId;\n        } catch (ParseException e) {\n            e.printStackTrace();\n        }\n        return \"\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring React Frontend Base URL for AWS API Integration\nDESCRIPTION: Configuration JSON for React frontend that specifies the base URL for API endpoints. Points to the local Spring REST API server running on port 8080.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/Creating_Spring_RDS_Rest/README.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"BASE_URL\": \"http://localhost:8080/api\"\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching a Thing Principal in AWS IoT using Kotlin\nDESCRIPTION: This code snippet shows how to attach a principal (certificate) to an AWS IoT Thing using the AttachThingPrincipal operation in the AWS SDK for Kotlin.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/iot/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nAttachThingPrincipal\n```\n\n----------------------------------------\n\nTITLE: List SES Templates using Java\nDESCRIPTION: Demonstrates listing email templates in Amazon SES v2 using AWS SDK for Java 2.x. Located in src/main/java/com/example/sesv2/ListTemplates.java.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/ses/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\ncom.example.sesv2.ListTemplates.java#L6\n```\n\n----------------------------------------\n\nTITLE: Successful Response for CreateContactList in Amazon SES\nDESCRIPTION: This snippet shows the HTTP response for a successful CreateContactList operation. The response has a 200 status code with an empty body, indicating the contact list was created successfully.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/sesv2_weekly_mailer/content/10_CreateContactList.md#2025-04-09_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\n```\n\n----------------------------------------\n\nTITLE: Activating Virtual Environment on Windows\nDESCRIPTION: Command to activate the Python virtual environment on Windows systems\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/bedrock-runtime/cross-model-scenarios/tool_use_demo/README.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n.\\.venv\\Scripts\\activate\n```\n\n----------------------------------------\n\nTITLE: Python Package Dependencies for AWS Document Processing\nDESCRIPTION: List of required Python packages for document processing with AWS, including unstructured data handling, AWS SDK (boto3), language chain models, and the Anthropic AI platform.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/bedrock-runtime/models/anthropic_claude/scenarios/claude3_chatbot_demo/requirements.txt#2025-04-09_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nunstructured\nboto3\nlangchain\nunstructured[pdf]\nlangchain-community\npytz\nanthropic\n```\n\n----------------------------------------\n\nTITLE: Running DynamoDB Scenario with Go CLI\nDESCRIPTION: Command to run DynamoDB scenarios using the Go command line runner. This allows listing and executing available scenarios with help documentation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/gov2/dynamodb/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo run ./cmd -h\n```\n\n----------------------------------------\n\nTITLE: Listing Objects in Amazon S3 using SDK for SAP ABAP\nDESCRIPTION: This code snippet shows how to list objects in a bucket in Amazon S3 using the SDK for SAP ABAP, specifically using the ListObjectsV2 operation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/sap-abap/services/s3/README.md#2025-04-09_snippet_6\n\nLANGUAGE: ABAP\nCODE:\n```\nzcl_aws1_s3_actions.clas.abap#L191\n```\n\n----------------------------------------\n\nTITLE: Basic Amazon S3 Operations in Kotlin\nDESCRIPTION: Demonstrates fundamental S3 operations including creating a bucket, uploading files, downloading objects, copying objects to subfolders, listing bucket contents, and cleanup operations. Uses AWS SDK for Kotlin to interact with S3.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/s3/README.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n// Code reference: src/main/kotlin/com/kotlin/s3/S3Operations.kt\n```\n\n----------------------------------------\n\nTITLE: Uploading Objects to S3 Directory Buckets in Java\nDESCRIPTION: Example code for uploading an object to an S3 Directory Bucket using AWS SDK for Java 2.x.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/s3/src/main/java/com/example/s3/directorybucket/README.md#2025-04-09_snippet_22\n\nLANGUAGE: Java\nCODE:\n```\nPutObject\n```\n\n----------------------------------------\n\nTITLE: Streaming conversation with Anthropic Claude model in C#\nDESCRIPTION: Shows how to stream a conversation with the Anthropic Claude model using Amazon Bedrock Runtime.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv4/Bedrock-runtime/README.md#2025-04-09_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nModels/AnthropicClaude/ConverseStream/ConverseStream.cs#L4\n```\n\n----------------------------------------\n\nTITLE: Running the Lambda Basics Example\nDESCRIPTION: Command to execute the basic Lambda example which demonstrates creating, invoking, updating, and deleting Lambda functions.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/lambda/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython lambda_handler_basic.py\n```\n\n----------------------------------------\n\nTITLE: Streaming Conversation with Mistral AI Model in Java\nDESCRIPTION: Demonstrates how to implement a streaming conversation with the Mistral AI model using Amazon Bedrock Runtime. The code is located in the specified file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/bedrock-runtime/README.md#2025-04-09_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nsrc/main/java/com/example/bedrockruntime/models/mistral/ConverseStream.java#L6\n```\n\n----------------------------------------\n\nTITLE: List SES Templates using Java\nDESCRIPTION: Demonstrates listing email templates in Amazon SES v2 using AWS SDK for Java 2.x. Located in src/main/java/com/example/sesv2/ListTemplates.java.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/ses/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\ncom.example.sesv2.ListTemplates.java#L6\n```\n\n----------------------------------------\n\nTITLE: Creating Layout Template with Thymeleaf for Amazon SNS Application\nDESCRIPTION: HTML template defining the layout and navigation for the application. It uses Thymeleaf fragments to provide a consistent header across multiple pages with links to Home and Manage Subscriptions.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_sns_sample_app/README.md#2025-04-09_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n      <html xmlns:th=\"http://www.thymeleaf.org\">\n     <head th:fragment=\"site-head\">\n     <meta charset=\"UTF-8\" />\n     <link rel=\"icon\" href=\"../public/img/favicon.ico\" th:href=\"@{/img/favicon.ico}\" />\n     <script th:src=\"|https://code.jquery.com/jquery-1.12.4.min.js|\"></script>\n     <meta th:include=\"this :: head\" th:remove=\"tag\"/>\n    </head>\n    <header th:fragment=\"site-header\">\n     <a href=\"#\" style=\"color: white\" th:href=\"@{/}\">Home</a>\n     <a href=\"#\" style=\"color: white\" th:href=\"@{/subscribe}\">Manage Subscriptions</a>\n     </header>\n    </html>\n```\n\n----------------------------------------\n\nTITLE: Implementing Image Analysis with Amazon Rekognition in Kotlin\nDESCRIPTION: The AnalyzePhotos class uses the Amazon Rekognition Kotlin API to detect labels in images. It creates a list of WorkItem objects that store the analysis results including the label name and confidence level for each detected feature in the image.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/creating_photo_analyzer_app/README.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.aws.photo\n\nimport aws.sdk.kotlin.services.rekognition.RekognitionClient\nimport aws.sdk.kotlin.services.rekognition.model.DetectLabelsRequest\nimport aws.sdk.kotlin.services.rekognition.model.Image\nimport org.springframework.stereotype.Component\n\n@Component\nclass AnalyzePhotos {\n\nsuspend fun DetectLabels(bytesVal: ByteArray?, key: String?): MutableList<WorkItem>? {\n\n    // Create an Image object for the source image.\n    val souImage = Image {\n        bytes = bytesVal\n    }\n\n    val detectLabelsRequest = DetectLabelsRequest {\n        image = souImage\n        maxLabels = 10\n    }\n\n    RekognitionClient { region = \"us-west-2\" }.use { rekClient ->\n        val response = rekClient.detectLabels(detectLabelsRequest)\n\n        // Write the results to a WorkItem instance.\n        val list = mutableListOf<WorkItem>()\n        println(\"Detected labels for the given photo\")\n        response.labels?.forEach { label ->\n            val item = WorkItem()\n            item.key = key // identifies the photo.\n            item.confidence = label.confidence.toString()\n            item.name = label.name\n            list.add(item)\n        }\n        return list\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Excel Report Generation in Java\nDESCRIPTION: Java class that handles creation of Excel reports with photo analysis data. Uses JXL library to generate workbooks with photo metadata including labels and confidence scores. Includes methods for formatting, layout and content population.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_photo_analyzer_async/README.md#2025-04-09_snippet_10\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.photo;\n\nimport jxl.CellView;\nimport jxl.Workbook;\nimport jxl.WorkbookSettings;\nimport jxl.format.UnderlineStyle;\nimport jxl.write.Label;\nimport jxl.write.WritableCellFormat;\nimport jxl.write.WritableFont;\nimport jxl.write.WritableSheet;\nimport jxl.write.WritableWorkbook;\nimport jxl.write.WriteException;\nimport org.springframework.stereotype.Component;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.List;\nimport java.util.Locale;\n\n@Component\npublic class WriteExcel {\n    private WritableCellFormat timesBoldUnderline;\n    private WritableCellFormat times;\n\n    // Returns an InputStream that represents the Excel Report.\n    public InputStream exportExcel(List<List<WorkItem>> list) {\n        try {\n            return write(list);\n        } catch (WriteException | IOException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n\n    // Generates the report and returns an inputstream.\n    public InputStream write(List<List<WorkItem>> list) throws IOException, WriteException {\n        ByteArrayOutputStream os = new ByteArrayOutputStream();\n        WorkbookSettings wbSettings = new WorkbookSettings();\n        wbSettings.setLocale(new Locale(\"en\", \"EN\"));\n        WritableWorkbook workbook = Workbook.createWorkbook(os, wbSettings);\n\n        int size = list.size();\n        for (int i = 0; i < size; i++) {\n            // Get the WorkItem from each list.\n            List<WorkItem> innerList = list.get(i);\n            workbook.createSheet(\"Sheet \" + (i + 1), i);\n            WritableSheet excelSheet = workbook.getSheet(i);\n            createLabel(excelSheet);\n            createContent(excelSheet, innerList);\n        }\n\n        // Close the workbook.\n        workbook.write();\n        workbook.close();\n\n        // Get an InputStream that represents the Report.\n        byte[] myBytes = os.toByteArray();\n        return new ByteArrayInputStream(myBytes);\n    }\n\n    // Create Headings in the Excel spreadsheet.\n    private void createLabel(WritableSheet sheet) throws WriteException {\n        // Create a times font.\n        WritableFont times10pt = new WritableFont(WritableFont.TIMES, 10);\n        // Define the cell format.\n        times = new WritableCellFormat(times10pt);\n        // Let's automatically wrap the cells.\n        times.setWrap(true);\n\n        // Create a bold font with underlines.\n        WritableFont times10ptBoldUnderline = new WritableFont(WritableFont.TIMES, 10, WritableFont.BOLD, false,\n            UnderlineStyle.SINGLE);\n        timesBoldUnderline = new WritableCellFormat(times10ptBoldUnderline);\n\n        // Let's automatically wrap the cells.\n        timesBoldUnderline.setWrap(true);\n\n        CellView cv = new CellView();\n        cv.setFormat(times);\n        cv.setFormat(timesBoldUnderline);\n        cv.setAutosize(true);\n\n        // Write a few headers.\n        addCaption(sheet, 0, 0, \"Photo\");\n        addCaption(sheet, 1, 0, \"Label\");\n        addCaption(sheet, 2, 0, \"Confidence\");\n    }\n\n    // Write the WorkItem Data to the Excel Report.\n    private void createContent(WritableSheet sheet, List<WorkItem> list) throws WriteException {\n        int size = list.size();\n        for (int i = 0; i < size; i++) {\n            WorkItem wi = list.get(i);\n            String key = wi.getKey();\n            String label = wi.getName();\n            String confidence = wi.getConfidence();\n\n            // First column.\n            addLabel(sheet, 0, i + 1, key);\n\n            // Second column.\n            addLabel(sheet, 1, i + 1, label);\n\n            // Third column.\n            addLabel(sheet, 2, i + 1, confidence);\n        }\n    }\n\n    private void addCaption(WritableSheet sheet, int column, int row, String s) throws WriteException {\n        Label label = new Label(column, row, s, timesBoldUnderline);\n        int cc = countString(s);\n        sheet.setColumnView(column, cc);\n        sheet.addCell(label);\n    }\n\n    private void addLabel(WritableSheet sheet, int column, int row, String s) throws WriteException {\n        Label label = new Label(column, row, s, times);\n        int cc = countString(s);\n        if (cc > 200) {\n            sheet.setColumnView(column, 150);\n        } else {\n            sheet.setColumnView(column, cc + 6);\n        }\n        sheet.addCell(label);\n    }\n\n    private int countString(String ss) {\n        int count = 0;\n        for (int i = 0; i < ss.length(); i++) {\n            if (ss.charAt(i) != ' ') {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying DynamoDB in Swift\nDESCRIPTION: Demonstrates how to query a DynamoDB table to find items based on specific criteria. The example shows how to find movies released in a given year.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/swift/example_code/dynamodb/README.md#2025-04-09_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nQuery(basics/MovieList/MovieTable.swift#L363)\n```\n\n----------------------------------------\n\nTITLE: Invoking Mistral AI model with response streaming in C#\nDESCRIPTION: Shows how to invoke the Mistral AI model with response streaming using Amazon Bedrock Runtime.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv4/Bedrock-runtime/README.md#2025-04-09_snippet_25\n\nLANGUAGE: C#\nCODE:\n```\nModels/Mistral/InvokeModelWithResponseStream/InvokeModelWithResponseStream.cs#L4\n```\n\n----------------------------------------\n\nTITLE: Implementing Amazon SES Email Sender with Attachment Support\nDESCRIPTION: A Java class that handles sending emails with attachments using Amazon SES. It supports HTML and plain text email content, handles Excel attachments, and uses AWS SDK for Java for SES integration. Requires AWS credentials and a validated email address.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_photo_analyzer_app/README.md#2025-04-09_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.photo;\n\nimport org.apache.commons.io.IOUtils;\nimport software.amazon.awssdk.auth.credentials.EnvironmentVariableCredentialsProvider;\nimport software.amazon.awssdk.regions.Region;\nimport software.amazon.awssdk.services.ses.SesClient;\nimport javax.activation.DataHandler;\nimport javax.activation.DataSource;\nimport javax.mail.Message;\nimport javax.mail.MessagingException;\nimport javax.mail.Session;\nimport javax.mail.internet.InternetAddress;\nimport javax.mail.internet.MimeMessage;\nimport javax.mail.internet.MimeMultipart;\nimport javax.mail.internet.MimeBodyPart;\nimport javax.mail.util.ByteArrayDataSource;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.nio.ByteBuffer;\nimport java.util.Properties;\nimport software.amazon.awssdk.core.SdkBytes;\nimport software.amazon.awssdk.services.ses.model.SendRawEmailRequest;\nimport software.amazon.awssdk.services.ses.model.RawMessage;\nimport software.amazon.awssdk.services.ses.model.SesException;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class SendMessages {\n\n    public void sendReport(InputStream is, String emailAddress ) throws IOException {\n        byte[] fileContent = IOUtils.toByteArray(is);\n        try {\n            send(fileContent,emailAddress);\n        } catch (MessagingException e) {\n            e.getStackTrace();\n        }\n    }\n\n    public void send(byte[] attachment, String emailAddress) throws MessagingException, IOException {\n        MimeMessage message = null;\n        Session session = Session.getDefaultInstance(new Properties());\n        message = new MimeMessage(session);\n        String subject = \"Analyzed photos report\";\n        message.setSubject(subject, \"UTF-8\");\n        String sender = \"scmacdon@amazon.com\";\n        message.setFrom(new InternetAddress(sender));\n        message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(emailAddress));\n\n        // Create a multipart/alternative child container.\n        MimeMultipart msgBody = new MimeMultipart(\"alternative\");\n\n        // Create a wrapper for the HTML and text parts.\n        MimeBodyPart wrap = new MimeBodyPart();\n\n        // Define the text part.\n        MimeBodyPart textPart = new MimeBodyPart();\n        // The email body for recipients with non-HTML email clients.\n        String bodyText = \"Hello,\\r\\n\" + \"Please see the attached file for the analyzed photos report.\";\n        textPart.setContent(bodyText, \"text/plain; charset=UTF-8\");\n\n        // Define the HTML part.\n        MimeBodyPart htmlPart = new MimeBodyPart();\n        // The HTML body of the email.\n        String bodyHTML = \"<html>\" + \"<head></head>\" + \"<body>\" + \"<h1>Hello!</h1>\"\n            + \"<p>Please see the attached file for the report that analyzed photos in the S3 bucket.</p>\" + \"</body>\" + \"</html>\";\n        htmlPart.setContent(bodyHTML, \"text/html; charset=UTF-8\");\n\n        // Add the text and HTML parts to the child container.\n        msgBody.addBodyPart(textPart);\n        msgBody.addBodyPart(htmlPart);\n\n        // Add the child container to the wrapper object.\n        wrap.setContent(msgBody);\n\n        // Create a multipart/mixed parent container.\n        MimeMultipart msg = new MimeMultipart(\"mixed\");\n\n        // Add the parent container to the message.\n        message.setContent(msg);\n\n        // Add the multipart/alternative part to the message.\n        msg.addBodyPart(wrap);\n\n        // Define the attachment\n        MimeBodyPart att = new MimeBodyPart();\n        DataSource fds = new ByteArrayDataSource(attachment, \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\");\n        att.setDataHandler(new DataHandler(fds));\n        String reportName = \"PhotoReport.xls\";\n        att.setFileName(reportName);\n\n        // Add the attachment to the message.\n        msg.addBodyPart(att);\n\n        // Try to send the email.\n        try {\n            System.out.println(\"Attempting to send an email through Amazon SES \" + \"using the AWS SDK for Java...\");\n            SesClient client = SesClient.builder()\n                    .credentialsProvider(EnvironmentVariableCredentialsProvider.create())\n                    .region(Region.US_WEST_2)\n                    .build();\n\n            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n            message.writeTo(outputStream);\n\n            ByteBuffer buf = ByteBuffer.wrap(outputStream.toByteArray());\n            byte[] arr = new byte[buf.remaining()];\n            buf.get(arr);\n\n            SdkBytes data = SdkBytes.fromByteArray(arr);\n            RawMessage rawMessage = RawMessage.builder()\n                    .data(data)\n                    .build();\n\n            SendRawEmailRequest rawEmailRequest = SendRawEmailRequest.builder()\n                    .rawMessage(rawMessage)\n                    .build();\n\n            client.sendRawEmail(rawEmailRequest);\n\n        } catch (SesException e) {\n            System.err.println(e.awsErrorDetails().errorMessage());\n            System.exit(1);\n        }\n        System.out.println(\"Email sent with attachment\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Lambda Function Details in Java\nDESCRIPTION: This code snippet demonstrates how to get details of a Lambda function using the AWS SDK for Java 2.x. It's used in the Lambda scenario to verify function creation and updates.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/lambda/README.md#2025-04-09_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nGetFunction\n```\n\n----------------------------------------\n\nTITLE: Implementing AWS SES and SNS Notification Handler in Java\nDESCRIPTION: SendNotifications class that processes XML student data and sends notifications via Amazon SES (email) and SNS (SMS). Includes methods for handling both email and text message notifications with proper AWS client configuration.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/workflow_multiple_channels/README.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npackage com.example;\n\nimport org.jdom2.Document;\nimport org.jdom2.JDOMException;\nimport org.jdom2.input.SAXBuilder;\nimport org.xml.sax.InputSource;\nimport software.amazon.awssdk.regions.Region;\nimport software.amazon.awssdk.services.ses.model.Body;\nimport software.amazon.awssdk.services.ses.model.Content;\nimport software.amazon.awssdk.services.ses.model.Destination;\nimport software.amazon.awssdk.services.ses.model.SendEmailRequest;\nimport software.amazon.awssdk.services.sns.SnsClient;\nimport software.amazon.awssdk.services.sns.model.PublishRequest;\nimport software.amazon.awssdk.services.sns.model.SnsException;\nimport software.amazon.awssdk.services.ses.SesClient;\nimport software.amazon.awssdk.services.ses.model.SesException;\nimport javax.mail.MessagingException;\nimport java.util.List;\nimport java.io.IOException;\nimport java.io.StringReader;\n\npublic class SendNotifications {\n    public int handleEmailMessage(String myDom) throws JDOMException, IOException, MessagingException {\n        String myEmail;\n        String name ;\n        SesClient client = SesClient.builder()\n                .region(Region.US_WEST_2)\n                .build();\n\n        SAXBuilder builder = new SAXBuilder();\n        builder.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n        Document jdomDocument = builder.build(new InputSource(new StringReader(myDom)));\n        org.jdom2.Element root = jdomDocument.getRootElement();\n\n        // Get the list of children elements.\n        int countStudents = 0;\n        List<org.jdom2.Element> students = root.getChildren(\"Student\");\n        for (org.jdom2.Element element : students) {\n            myEmail = element.getChildText(\"Email\");\n            name = element.getChildText(\"Name\");\n            sendEmail(client, myEmail, name);\n            countStudents++;\n        }\n        client.close();\n        return countStudents;\n    }\n\n    public void handleTextMessage(String myDom) throws JDOMException, IOException{\n        String mobileNum;\n        String name ;\n        SnsClient snsClient = SnsClient.builder()\n                .region(Region.US_EAST_1)\n                .build();\n\n        SAXBuilder builder = new SAXBuilder();\n        builder.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n        Document jdomDocument = builder.build(new InputSource(new StringReader(myDom)));\n        org.jdom2.Element root = jdomDocument.getRootElement();\n\n        // get the list of children agent elements.\n        List<org.jdom2.Element> students = root.getChildren(\"Student\");\n        for (org.jdom2.Element element : students) {\n            mobileNum = element.getChildText(\"Mobile\");\n            name = element.getChildText(\"Name\");\n            publishTextSMS(snsClient, mobileNum, name);\n        }\n        snsClient.close();\n    }\n\n    private void publishTextSMS(SnsClient snsClient, String phoneNumber, String name) {\n        String message = \"Please be advised that \"+name + \" was marked absent from school today.\";\n        try {\n            PublishRequest request = PublishRequest.builder()\n                    .message(message)\n                    .phoneNumber(phoneNumber)\n                    .build();\n\n            snsClient.publish(request);\n\n        } catch (SnsException e) {\n            System.err.println(e.awsErrorDetails().errorMessage());\n            System.exit(1);\n        }\n    }\n\n    public void sendEmail(SesClient client, String recipient, String name) {\n             // The HTML body of the email.\n            String bodyHTML = \"<html>\" + \"<head></head>\" + \"<body>\" + \"<h1>Hello!</h1>\"\n                    + \"<p>Please be advised that \"+name +\" was marked absent from school today.</p>\" + \"</body>\" + \"</html>\";\n\n            String sender = \"<Enter your email address>\";\n            String subject = \"School Attendance\";\n\n            Destination destination = Destination.builder()\n                    .toAddresses(recipient)\n                    .build();\n\n            Content content = Content.builder()\n                    .data(bodyHTML)\n                    .build();\n\n            Content sub = Content.builder()\n                    .data(subject)\n                    .build();\n\n            Body body = Body.builder()\n                    .html(content)\n                    .build();\n\n            software.amazon.awssdk.services.ses.model.Message msg = software.amazon.awssdk.services.ses.model.Message.builder()\n                    .subject(sub)\n                    .body(body)\n                    .build();\n\n            SendEmailRequest emailRequest = SendEmailRequest.builder()\n                    .destination(destination)\n                    .message(msg)\n                    .source(sender)\n                    .build();\n\n            try {\n                System.out.println(\"Attempting to send an email through Amazon SES \" + \"using the AWS SDK for Java...\");\n                client.sendEmail(emailRequest);\n\n            } catch (SesException e) {\n                System.err.println(e.awsErrorDetails().errorMessage());\n                System.exit(1);\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Scanning DynamoDB Items in Java\nDESCRIPTION: This code snippet shows how to perform a scan operation on a DynamoDB table using the AWS SDK for Java 2.x. It demonstrates how to retrieve multiple items from the table based on specified criteria.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/dynamodb/README.md#2025-04-09_snippet_10\n\nLANGUAGE: Java\nCODE:\n```\nsrc/main/java/com/example/dynamodb/DynamoDBScanItems.java#L6\n```\n\n----------------------------------------\n\nTITLE: Initializing Spring Boot Application for AWS Tracker\nDESCRIPTION: This Java class serves as the entry point for the Spring Boot application. It defines the AWS region and initializes the Spring application context.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/Creating_rds_item_tracker/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npackage com.aws.rest;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport software.amazon.awssdk.regions.Region;\n\n@SpringBootApplication\npublic class App {\n    public static final Region region = Region.US_EAST_1;\n\n    public static void main(String[] args) {\n        SpringApplication.run(App.class, args);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Amazon SES Email Sender in Java\nDESCRIPTION: A Java class that uses Amazon SES API to send email messages with both plain text and HTML content. The class includes functionality to create MIME messages, handle attachments, and send raw emails through Amazon SES. Requires verified email addresses for sending.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_workflows_stepfunctions/README.md#2025-04-09_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npackage example;\n\nimport software.amazon.awssdk.regions.Region;\nimport software.amazon.awssdk.services.ses.SesClient;\nimport javax.mail.Message;\nimport javax.mail.MessagingException;\nimport javax.mail.Session;\nimport javax.mail.internet.AddressException;\nimport javax.mail.internet.InternetAddress;\nimport javax.mail.internet.MimeMessage;\nimport javax.mail.internet.MimeMultipart;\nimport javax.mail.internet.MimeBodyPart;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.nio.ByteBuffer;\nimport java.util.Properties;\nimport software.amazon.awssdk.core.SdkBytes;\nimport software.amazon.awssdk.services.ses.model.SendRawEmailRequest;\nimport software.amazon.awssdk.services.ses.model.RawMessage;\nimport software.amazon.awssdk.services.ses.model.SesException;\n\npublic class SendMessage {\n\n public void sendMessage(String email) throws IOException {\n\n //Sender\n String sender = \"SPECIFY an email address\" ; // REPLACE WITH AN EMAIL ADDRESSS\n\n String subject = \"New Case\";\n\n // The email body for recipients with non-HTML email clients.\n String bodyText = \"Hello,\\r\\n\" + \"You are assigned a new case\";\n\n // The HTML body of the email.\n String bodyHTML = \"<html>\" + \"<head></head>\" + \"<body>\" + \"<h1>Hello!</h1>\"\n         + \"<p>Please check the database for new ticket assigned to you.</p>\" + \"</body>\" + \"</html>\";\n\n Region region = Region.US_WEST_2;\n SesClient client = SesClient.builder()\n         .region(region)\n         .build();\n\n try {\n     send(client, sender,email, subject,bodyText,bodyHTML);\n\n } catch (IOException | MessagingException e) {\n     e.getStackTrace();\n }\n}\n\npublic static void send(SesClient client,\n                         String sender,\n                         String recipient,\n                         String subject,\n                         String bodyText,\n                         String bodyHTML\n) throws AddressException, MessagingException, IOException {\n\n     Session session = Session.getDefaultInstance(new Properties());\n\n     // Create a new MimeMessage object.\n     MimeMessage message = new MimeMessage(session);\n\n     // Add subject, from and to lines.\n     message.setSubject(subject, \"UTF-8\");\n     message.setFrom(new InternetAddress(sender));\n     message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(recipient));\n\n     // Create a multipart/alternative child container.\n     MimeMultipart msgBody = new MimeMultipart(\"alternative\");\n\n     // Create a wrapper for the HTML and text parts.\n     MimeBodyPart wrap = new MimeBodyPart();\n\n     // Define the text part.\n     MimeBodyPart textPart = new MimeBodyPart();\n     textPart.setContent(bodyText, \"text/plain; charset=UTF-8\");\n\n     // Define the HTML part.\n     MimeBodyPart htmlPart = new MimeBodyPart();\n     htmlPart.setContent(bodyHTML, \"text/html; charset=UTF-8\");\n\n     // Add the text and HTML parts to the child container.\n     msgBody.addBodyPart(textPart);\n     msgBody.addBodyPart(htmlPart);\n\n     // Add the child container to the wrapper object.\n     wrap.setContent(msgBody);\n\n     // Create a multipart/mixed parent container.\n     MimeMultipart msg = new MimeMultipart(\"mixed\");\n\n     // Add the parent container to the message.\n     message.setContent(msg);\n\n     // Add the multipart/alternative part to the message.\n     msg.addBodyPart(wrap);\n\n     try {\n         System.out.println(\"Attempting to send an email through Amazon SES \" + \"using the AWS SDK for Java...\");\n\n         ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n         message.writeTo(outputStream);\n\n         ByteBuffer buf = ByteBuffer.wrap(outputStream.toByteArray());\n\n         byte[] arr = new byte[buf.remaining()];\n         buf.get(arr);\n\n         SdkBytes data = SdkBytes.fromByteArray(arr);\n\n         RawMessage rawMessage = RawMessage.builder()\n                 .data(data)\n                 .build();\n\n         SendRawEmailRequest rawEmailRequest = SendRawEmailRequest.builder()\n                 .rawMessage(rawMessage)\n                 .build();\n\n         client.sendRawEmail(rawEmailRequest);\n\n       } catch (SesException e) {\n         System.err.println(e.awsErrorDetails().errorMessage());\n         System.exit(1);\n       }\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating a Schedule Group with EventBridge Scheduler in C#\nDESCRIPTION: This snippet shows how to create a schedule group using the AWS SDK for .NET with Amazon EventBridge Scheduler. It includes error handling and returns the ARN of the created schedule group.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/EventBridge Scheduler/README.md#2025-04-09_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic async Task<string> CreateScheduleGroup(string groupName)\n{\n    var request = new CreateScheduleGroupRequest\n    {\n        Name = groupName\n    };\n\n    try\n    {\n        var response = await _schedulerClient.CreateScheduleGroupAsync(request);\n        return response.ScheduleGroupArn;\n    }\n    catch (Amazon.Scheduler.Model.ConflictException)\n    {\n        Console.WriteLine($\"A schedule group named {groupName} already exists.\");\n    }\n    catch (Amazon.Scheduler.Model.ValidationException ex)\n    {\n        Console.WriteLine($\"Couldn't create schedule group {groupName}. {ex.Message}\");\n    }\n\n    return \"\";\n}\n```\n\n----------------------------------------\n\nTITLE: Creating DynamoDB Table in Go\nDESCRIPTION: Creates a new DynamoDB table with Year (integer) and Title (string) attributes. Requires table name as input parameter.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/dynamodb/README.md#2025-04-09_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ngo run CreateTable.go -t TABLE\n```\n\n----------------------------------------\n\nTITLE: Implementing GetHandler Lambda Function for Label Retrieval in Kotlin\nDESCRIPTION: Kotlin implementation of the GetHandler class that serves as the handler for the LabelsFn Lambda function. It handles API Gateway requests to retrieve label data from DynamoDB and returns the results as a JSON response with proper CORS headers.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/creating_pam/README.md#2025-04-09_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.example.photo.handlers\n\nimport com.amazonaws.services.lambda.runtime.Context\nimport com.amazonaws.services.lambda.runtime.RequestHandler\nimport com.amazonaws.services.lambda.runtime.events.APIGatewayProxyRequestEvent\nimport com.amazonaws.services.lambda.runtime.events.APIGatewayProxyResponseEvent\nimport com.example.photo.WorkCount\nimport com.example.photo.services.DynamoDBService\nimport com.google.gson.Gson\nimport kotlinx.coroutines.runBlocking\nimport java.util.TreeMap\n\nclass GetHandler : RequestHandler<APIGatewayProxyRequestEvent?, APIGatewayProxyResponseEvent?> {\n    val CORS_HEADER_MAP: Map<String, String> = java.util.Map.of(\n        \"Access-Control-Allow-Origin\", \"*\"\n    )\n\n    fun toJson(src: Any?): String? {\n        val gson = Gson()\n        return gson.toJson(src)\n    }\n\n    override fun handleRequest(input: APIGatewayProxyRequestEvent?, context: Context): APIGatewayProxyResponseEvent = runBlocking {\n        context.getLogger().log(\"In Labels handler\")\n        val dbService = DynamoDBService()\n        val map: Map<String, WorkCount> = dbService.scanPhotoTable()\n        context.getLogger().log(\"Retrieved photos: \" + map.size)\n        val data: MutableMap<String, Map<String, WorkCount>> = TreeMap()\n        data[\"labels\"] = map\n        return@runBlocking makeResponse(data)\n    }\n\n    fun makeResponse(src: Any?): APIGatewayProxyResponseEvent {\n        return APIGatewayProxyResponseEvent()\n            .withStatusCode(200)\n            .withHeaders(CORS_HEADER_MAP)\n            .withBody(toJson(src))\n            .withIsBase64Encoded(false)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing S3Service Class for AWS S3 Operations in Java\nDESCRIPTION: A comprehensive Spring component class that provides methods for interacting with Amazon S3 buckets. It includes functionality for retrieving objects as byte arrays, listing bucket contents, uploading objects, and converting bucket data to XML format. Uses AWS SDK v2 for Java and includes secure XML processing implementations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_photo_analyzer_app/README.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.photo;\n\nimport org.springframework.stereotype.Component;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\nimport software.amazon.awssdk.auth.credentials.EnvironmentVariableCredentialsProvider;\nimport software.amazon.awssdk.core.ResponseBytes;\nimport software.amazon.awssdk.core.sync.RequestBody;\nimport software.amazon.awssdk.regions.Region;\nimport software.amazon.awssdk.services.s3.S3Client;\nimport software.amazon.awssdk.services.s3.model.*;\nimport javax.xml.XMLConstants;\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.ParserConfigurationException;\nimport javax.xml.transform.Transformer;\nimport javax.xml.transform.TransformerConfigurationException;\nimport javax.xml.transform.TransformerException;\nimport javax.xml.transform.TransformerFactory;\nimport javax.xml.transform.dom.DOMSource;\nimport javax.xml.transform.stream.StreamResult;\nimport java.io.StringWriter;\nimport java.time.Instant;\nimport java.util.ArrayList;\nimport java.util.List;\n\n@Component\npublic class S3Service {\n\n    S3Client s3 ;\n\n    // Create the S3Client object.\n    private S3Client getClient() {\n        return S3Client.builder()\n                .credentialsProvider(EnvironmentVariableCredentialsProvider.create())\n                .region(Region.US_WEST_2)\n                .build();\n    }\n\n    // Get the byte[] from this Amazon S3 object.\n    public byte[] getObjectBytes (String bucketName, String keyName) {\n        s3 = getClient();\n        try {\n            GetObjectRequest objectRequest = GetObjectRequest\n                    .builder()\n                    .key(keyName)\n                    .bucket(bucketName)\n                    .build();\n\n            ResponseBytes<GetObjectResponse> objectBytes = s3.getObjectAsBytes(objectRequest);\n            return objectBytes.asByteArray();\n\n        } catch (S3Exception e) {\n            System.err.println(e.awsErrorDetails().errorMessage());\n            System.exit(1);\n        }\n        return null;\n    }\n\n    // Returns the names of all images and data within an XML document.\n    public String ListAllObjects(String bucketName) {\n        s3 = getClient();\n        long sizeLg;\n        Instant DateIn;\n        BucketItem myItem ;\n\n        List<BucketItem> bucketItems = new ArrayList<>();\n        try {\n            ListObjectsRequest listObjects = ListObjectsRequest\n                    .builder()\n                    .bucket(bucketName)\n                    .build();\n\n            ListObjectsResponse res = s3.listObjects(listObjects);\n            List<S3Object> objects = res.contents();\n\n            for (S3Object myValue : objects) {\n                myItem = new BucketItem();\n                myItem.setKey(myValue.key());\n                myItem.setOwner(myValue.owner().displayName());\n                sizeLg = myValue.size() / 1024;\n                myItem.setSize(String.valueOf(sizeLg));\n                DateIn = myValue.lastModified();\n                myItem.setDate(String.valueOf(DateIn));\n\n                // Push the items to the list.\n                bucketItems.add(myItem);\n            }\n\n            return convertToString(toXml(bucketItems));\n\n        } catch (S3Exception e) {\n            System.err.println(e.awsErrorDetails().errorMessage());\n            System.exit(1);\n        }\n        return null ;\n    }\n\n    // Returns the names of all images in the given bucket.\n    public ArrayList<String> ListBucketObjects(String bucketName) {\n        s3 = getClient();\n        String keyName ;\n        ArrayList<String> keys = new ArrayList<String>();\n        try {\n            ListObjectsRequest listObjects = ListObjectsRequest\n                    .builder()\n                    .bucket(bucketName)\n                    .build();\n\n            ListObjectsResponse res = s3.listObjects(listObjects);\n            List<S3Object> objects = res.contents();\n            for (S3Object myValue : objects) {\n                keyName = myValue.key();\n                keys.add(keyName);\n            }\n            return keys;\n\n        } catch (S3Exception e) {\n            System.err.println(e.awsErrorDetails().errorMessage());\n            System.exit(1);\n        }\n        return null ;\n    }\n\n\n    // Places an image into a S3 bucket.\n    public void putObject(byte[] data, String bucketName, String objectKey) {\n        s3 = getClient();\n        try {\n            s3.putObject(PutObjectRequest.builder()\n                .bucket(bucketName)\n                    .key(objectKey)\n                    .build(),\n                RequestBody.fromBytes(data));\n\n        } catch (S3Exception e) {\n            System.err.println(e.getMessage());\n            System.exit(1);\n        }\n    }\n\n    // Convert items into XML to pass back to the view.\n    private Document toXml(List<BucketItem> itemList) {\n        try {\n            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n            factory.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n            DocumentBuilder builder = factory.newDocumentBuilder();\n            Document doc = builder.newDocument();\n\n            // Start building the XML.\n            Element root = doc.createElement( \"Items\" );\n            doc.appendChild( root );\n\n            // Iterate through the collection.\n            for (BucketItem myItem : itemList) {\n                // Get the WorkItem object from the collection.\n                Element item = doc.createElement(\"Item\");\n                root.appendChild(item);\n\n                // Set Key.\n                Element id = doc.createElement(\"Key\");\n                id.appendChild(doc.createTextNode(myItem.getKey()));\n                item.appendChild(id);\n\n                // Set Owner.\n                Element name = doc.createElement(\"Owner\");\n                name.appendChild(doc.createTextNode(myItem.getOwner()));\n                item.appendChild(name);\n\n                // Set Date.\n                Element date = doc.createElement(\"Date\");\n                date.appendChild(doc.createTextNode(myItem.getDate()));\n                item.appendChild(date);\n\n                // Set Size.\n                Element desc = doc.createElement(\"Size\");\n                desc.appendChild(doc.createTextNode(myItem.getSize()));\n                item.appendChild(desc);\n            }\n\n            return doc;\n        } catch(ParserConfigurationException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n\n    private String convertToString(Document xml) {\n        try {\n            TransformerFactory transformerFactory = getSecureTransformerFactory();\n            Transformer transformer = transformerFactory.newTransformer();\n            StreamResult result = new StreamResult(new StringWriter());\n            DOMSource source = new DOMSource(xml);\n            transformer.transform(source, result);\n            return result.getWriter().toString();\n\n        } catch(TransformerException ex) {\n            ex.printStackTrace();\n        }\n        return null;\n    }\n\n    private static TransformerFactory getSecureTransformerFactory() {\n        TransformerFactory transformerFactory = TransformerFactory.newInstance();\n        try {\n            transformerFactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\n        } catch (TransformerConfigurationException e) {\n            e.printStackTrace();\n        }\n        return transformerFactory;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: WorkItem Class Definition with RedshiftData Field Mapping\nDESCRIPTION: A Java class that defines a WorkItem entity with properties like id, name, guide, date, description, status, and archived. It includes a static 'from' method that constructs a WorkItem instance from a list of RedshiftData Field objects, along with getter and setter methods for all properties.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/CreatingSpringRedshiftRest/README.md#2025-04-09_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\npackage com.aws.rest;\n\nimport software.amazon.awssdk.services.redshiftdata.model.Field;\n\nimport java.util.List;\n\npublic class WorkItem {\n    private String id;\n    private String name;\n    private String guide;\n    private String date;\n    private String description;\n    private String status;\n    private boolean archived ;\n\n    public static WorkItem from(List<Field> fields) {\n        var item = new WorkItem();\n        for (int i = 0; i <= 6; i++) {\n            String value=\"\";\n            boolean val = false;\n            value = fields.get(i).stringValue();\n            if (i == 6)\n                val = fields.get(i).booleanValue();\n\n            switch (i) {\n                case 0:\n                    item.setId(value);\n                    break;\n                case 1:\n                    item.setDate(value);\n                    break;\n                case 2:\n                    item.setDescription(value);\n                    break;\n                case 3:\n                    item.setGuide(value);\n                    break;\n                case 4:\n                    item.setStatus(value);\n                    break;\n                case 5:\n                    item.setName(value);\n                    break;\n                case 6:\n                    item.setArchived(val);\n                    break;\n            }\n        }\n        return item;\n    }\n\n    public boolean getArchived() {\n        return this.archived;\n    }\n\n    public void setArchived(boolean archived) {\n        this.archived = archived;\n    }\n\n    public void setId(String id) {\n        this.id = id;\n    }\n\n    public String getId() {\n        return this.id;\n    }\n\n    public void setStatus(String status) {\n        this.status = status;\n    }\n\n    public String getStatus() {\n        return this.status;\n    }\n\n    public void setDescription(String description) {\n        this.description = description;\n    }\n\n    public String getDescription() {\n        return this.description;\n    }\n\n\n    public void setDate(String date) {\n        this.date = date;\n    }\n\n    public String getDate() {\n        return this.date;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getName() {\n        return this.name;\n    }\n\n    public void setGuide(String guide) {\n        this.guide = guide;\n    }\n\n    public String getGuide() {\n        return this.guide;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for Amazon Kinesis Examples in Python\nDESCRIPTION: This command installs the necessary packages for running the Amazon Kinesis examples using pip in a virtual environment.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/kinesis/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: AWS Location Service Setup and Resource Management\nDESCRIPTION: Multi-step implementation guide for AWS Location Service covering creation of maps, API keys, geofences, trackers, route calculators, and location search functionality. Includes error handling for service quotas, access permissions, resource conflicts, and validation issues.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/basics/location/SPECIFICATION.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n// Example method calls based on documentation\n\n// 1. Create map\ncreateMap();\n\n// 2. Create API key\ncreateKey();\n\n// 3. Create geofence collection\ncreateGeofenceCollection();\n\n// 4. Store geofence\nputGeofence();\n\n// 5. Create tracker\ncreateTracker();\n\n// 6. Update device position\ngetDevicePosition();\n\n// 7. Get device position\ngetMatchingJob();\n\n// 8. Create route calculator\ncreateRouteCalculator();\n\n// 9. Calculate route\ncalculateRoute();\n\n// 10. Geocoding operations\nreverseGeocode();\nsearchText();\nsearchNearby();\n```\n\n----------------------------------------\n\nTITLE: Building Hello DynamoDB C++ Project with CMake\nDESCRIPTION: Commands to build the Hello DynamoDB project using CMake build system. Creates a build directory, navigates into it, and builds the project which produces a 'hello_dynamodb' executable.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/dynamodb/hello_dynamodb/README.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmkdir build \ncd build\ncmake --build ..\n```\n\n----------------------------------------\n\nTITLE: Getting S3 Bucket Website Configuration in JavaScript\nDESCRIPTION: This code snippet shows how to retrieve the website configuration of an S3 bucket using the GetBucketWebsite operation in the AWS SDK for JavaScript (v3).\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/s3/README.md#2025-04-09_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\n- [GetBucketWebsite](actions/get-bucket-website.js#L4)\n```\n\n----------------------------------------\n\nTITLE: Defining WorkItem Data Class for Photo Application in Kotlin\nDESCRIPTION: A simple Kotlin data class that represents a work item with key, name, and confidence properties. This class is likely used to store information about objects or operations in the photo application.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/creating_photo_analyzer_app/README.md#2025-04-09_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.aws.photo\n\nclass WorkItem {\n\n var key: String? = null\n var name: String? = null\n var confidence: String? = null\n }\n```\n\n----------------------------------------\n\nTITLE: Creating an Amazon SQS Queue in C#\nDESCRIPTION: Shows how to create a new Amazon SQS queue using the AWS SDK for .NET. This operation is part of the SQSWrapper class that encapsulates common SQS operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/SQS/README.md#2025-04-09_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nCreateQueue\n```\n\n----------------------------------------\n\nTITLE: Creating an Amazon S3 Bucket using AWS SDK for Swift\nDESCRIPTION: This code snippet demonstrates how to create a new bucket in Amazon S3 using the AWS SDK for Swift.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/swift/example_code/s3/README.md#2025-04-09_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\nbasics/Sources/ServiceHandler/ServiceHandler.swift#L56\n```\n\n----------------------------------------\n\nTITLE: Conversing with Anthropic Claude model in C#\nDESCRIPTION: Demonstrates how to initiate a conversation with the Anthropic Claude model using Amazon Bedrock Runtime.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv4/Bedrock-runtime/README.md#2025-04-09_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nModels/AnthropicClaude/Converse/Converse.cs#L4\n```\n\n----------------------------------------\n\nTITLE: Generating Excel Reports and Sending Emails with Amazon SES in Java\nDESCRIPTION: The WriteExcel class dynamically creates Excel reports from work item data using the JXL library. It includes an embedded SendMessages class that leverages Amazon SES to email the generated reports. The implementation handles Excel formatting, content generation, and email composition with attachments.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/Creating_rds_item_tracker/README.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npackage com.aws.rest;\n\nimport jxl.CellView;\nimport jxl.Workbook;\nimport jxl.WorkbookSettings;\nimport jxl.format.UnderlineStyle;\nimport jxl.write.Label;\nimport jxl.write.WritableCellFormat;\nimport jxl.write.WritableFont;\nimport jxl.write.WritableSheet;\nimport jxl.write.WritableWorkbook;\nimport jxl.write.WriteException;\nimport org.apache.commons.io.IOUtils;\nimport org.springframework.stereotype.Component;\nimport software.amazon.awssdk.core.SdkBytes;\nimport software.amazon.awssdk.regions.Region;\nimport software.amazon.awssdk.services.ses.SesClient;\nimport software.amazon.awssdk.services.ses.model.RawMessage;\nimport software.amazon.awssdk.services.ses.model.SendRawEmailRequest;\nimport software.amazon.awssdk.services.ses.model.SesException;\nimport javax.activation.DataHandler;\nimport javax.activation.DataSource;\nimport javax.mail.Message;\nimport javax.mail.MessagingException;\nimport javax.mail.Session;\nimport javax.mail.internet.InternetAddress;\nimport javax.mail.internet.MimeBodyPart;\nimport javax.mail.internet.MimeMessage;\nimport javax.mail.internet.MimeMultipart;\nimport javax.mail.util.ByteArrayDataSource;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.nio.ByteBuffer;\nimport java.util.Locale;\nimport java.util.Properties;\n\n@Component\npublic class WriteExcel {\n    static WritableCellFormat times ;\n    static WritableCellFormat timesBoldUnderline;\n\n    static {\n        try {\n            WritableFont times10pt = new WritableFont(WritableFont.TIMES, 10);\n            times = new WritableCellFormat(times10pt);\n            times.setWrap(true);\n\n            WritableFont times10ptBoldUnderline = new WritableFont(WritableFont.TIMES, 10, WritableFont.BOLD, false, UnderlineStyle.SINGLE);\n            timesBoldUnderline = new WritableCellFormat(times10ptBoldUnderline);\n            timesBoldUnderline.setWrap(true);\n        } catch (WriteException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public InputStream write(Iterable<WorkItem> items) throws IOException, WriteException {\n        ByteArrayOutputStream os = new ByteArrayOutputStream();\n        WorkbookSettings wbSettings = new WorkbookSettings();\n        wbSettings.setLocale(new Locale(\"en\", \"US\"));\n\n        WritableWorkbook workbook = Workbook.createWorkbook(os, wbSettings);\n        workbook.createSheet(\"Work Item Report\", 0);\n        WritableSheet excelSheet = workbook.getSheet(0);\n\n        addLabels(excelSheet);\n        fillContent(excelSheet, items);\n\n        workbook.write();\n        workbook.close();\n\n        return new ByteArrayInputStream(os.toByteArray());\n    }\n\n    private void addLabels(WritableSheet sheet) throws WriteException {\n        CellView cv = new CellView();\n        cv.setFormat(timesBoldUnderline);\n        cv.setAutosize(true);\n\n        addCaption(sheet, 0, 0, \"Writer\");\n        addCaption(sheet, 1, 0, \"Date\");\n        addCaption(sheet, 2, 0, \"Guide\");\n        addCaption(sheet, 3, 0, \"Description\");\n        addCaption(sheet, 4, 0, \"Status\");\n    }\n\n    private void addCaption(WritableSheet sheet, int column, int row, String s) throws WriteException {\n        Label label = new Label(column, row, s, timesBoldUnderline);\n        int cc = s.length();\n        sheet.setColumnView(column, cc);\n        sheet.addCell(label);\n    }\n\n    private void addField(WritableSheet sheet, int column, int row, String s) throws WriteException {\n        Label label = new Label(column, row, s, timesBoldUnderline);\n        int cc = s.length();\n        cc = cc > 200 ? 150 : cc + 6;\n        sheet.setColumnView(column, cc);\n        sheet.addCell(label);\n    }\n\n    private void fillContent(WritableSheet sheet, Iterable<WorkItem> items) throws WriteException {\n        int row = 2;\n        for (WorkItem item : items) {\n            addField(sheet, 0, row, item.getName());\n            addField(sheet, 1, row, item.getDate());\n            addField(sheet, 2, row, item.getGuide());\n            addField(sheet, 3, row, item.getDescription());\n            addField(sheet, 4, row, item.getStatus());\n            row += 1;\n        }\n    }\n\n    @Component\n    public static class SendMessages {\n        private static String sender = \"<Enter value>\";\n        private static String subject = \"Weekly AWS Status Report\";\n        private static String bodyText = \"Hello,\\r\\n\\r\\nPlease see the attached file for a weekly update.\";\n        private static String bodyHTML = \"<!DOCTYPE html><html lang=\\\"en-US\\\"><body><h1>Hello!</h1><p>Please see the attached file for a weekly update.</p></body></html>\";\n        private static String attachmentName = \"WorkReport.xls\";\n\n        public void sendReport(InputStream is, String emailAddress) throws IOException {\n            byte[] fileContent = IOUtils.toByteArray(is);\n\n            try {\n                send(makeEmail(fileContent, emailAddress));\n            } catch (MessagingException e) {\n                e.printStackTrace();\n            }\n        }\n\n        public void send(MimeMessage message) throws MessagingException, IOException {\n            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n            message.writeTo(outputStream);\n            ByteBuffer buf = ByteBuffer.wrap(outputStream.toByteArray());\n            byte[] arr = new byte[buf.remaining()];\n            buf.get(arr);\n            SdkBytes data = SdkBytes.fromByteArray(arr);\n            RawMessage rawMessage = RawMessage.builder().data(data).build();\n            SendRawEmailRequest rawEmailRequest = SendRawEmailRequest.builder().rawMessage(rawMessage).build();\n\n            try {\n                System.out.println(\"Attempting to send an email through Amazon SES...\");\n                SesClient client = SesClient.builder().region(Region.US_WEST_2).build();\n                client.sendRawEmail(rawEmailRequest);\n            } catch (SesException e) {\n                e.printStackTrace();\n            }\n        }\n\n        private MimeMessage makeEmail(byte[] attachment, String emailAddress) throws MessagingException {\n            Session session = Session.getDefaultInstance(new Properties());\n            MimeMessage message = new MimeMessage(session);\n\n            message.setSubject(subject, \"UTF-8\");\n            message.setFrom(new InternetAddress(sender));\n            message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(emailAddress));\n\n            MimeBodyPart textPart = new MimeBodyPart();\n            textPart.setContent(bodyText, \"text/plain; charset=UTF-8\");\n\n            MimeBodyPart htmlPart = new MimeBodyPart();\n            htmlPart.setContent(bodyHTML, \"text/html; charset=UTF-8\");\n\n            MimeMultipart msgBody = new MimeMultipart(\"alternative\");\n            msgBody.addBodyPart(textPart);\n            msgBody.addBodyPart(htmlPart);\n\n            MimeBodyPart wrap = new MimeBodyPart();\n            wrap.setContent(msgBody);\n\n            MimeMultipart msg = new MimeMultipart(\"mixed\");\n            msg.addBodyPart(wrap);\n\n            MimeBodyPart att = new MimeBodyPart();\n            DataSource fds = new ByteArrayDataSource(attachment, \"application/vnc.openxmlformats-officedocument.spreadsheetml.sheet\");\n            att.setDataHandler(new DataHandler(fds));\n            att.setFileName(attachmentName);\n\n            msg.addBodyPart(att);\n            message.setContent(msg);\n            return message;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Restoring a Table in Amazon Keyspaces using Kotlin\nDESCRIPTION: This code snippet demonstrates how to restore a table to a specific point in time in Amazon Keyspaces using the AWS SDK for Kotlin. It's part of the single actions examples.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/keyspaces/README.md#2025-04-09_snippet_9\n\nLANGUAGE: Kotlin\nCODE:\n```\nsrc/main/kotlin/com/example/keyspace/ScenarioKeyspaces.kt#L306\n```\n\n----------------------------------------\n\nTITLE: Creating a Tags Model Class for S3 Video Metadata\nDESCRIPTION: The Tags class serves as a model to store video metadata retrieved from Amazon S3 object tags. It contains properties for video name and description with corresponding getters and setters.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/create_spring_stream_app/README.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage com.example;\n\npublic class Tags {\n\n private String name;\n private String description;\n\n public String getDesc() {\n    return this.description ;\n }\n\n public void setDesc(String description){\n    this.description = description;\n }\n\n public String getName() {\n    return this.name ;\n }\n\n public void setName(String name){\n    this.name = name;\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Lambda Function Details in Go\nDESCRIPTION: This code snippet shows how to retrieve details of a Lambda function using the AWS SDK for Go V2. It's part of the basic Lambda operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/gov2/lambda/README.md#2025-04-09_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nGetFunction\n```\n\n----------------------------------------\n\nTITLE: Detailed Foundation Models List Implementation in .NET\nDESCRIPTION: Specific implementation for listing foundation models in Amazon Bedrock, demonstrating how to make the ListFoundationModels API call using the AWS SDK for .NET.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Bedrock/README.md#2025-04-09_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nActions/HelloBedrock.cs#L29\n```\n\n----------------------------------------\n\nTITLE: HTTP POST Request to Create Item\nDESCRIPTION: REST endpoint to create a new work item with specified details including name, guide, description, and status.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/cross_service/aurora_item_tracker/README.md#2025-04-09_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nPOST http://localhost:8080/api/items\n{\"name\":\"Me\",\n \"guide\":\"python\",\n \"description\":\"Show how to add an item\",\n \"status\":\"In progress\",\n \"archived\":false}\n```\n\n----------------------------------------\n\nTITLE: Sending an Email with Amazon SES v2 API in C#\nDESCRIPTION: This code demonstrates how to send an email using the Amazon SES v2 API. It's part of the SESv2Wrapper class and requires the AmazonSimpleEmailServiceV2Client.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/SESv2/README.md#2025-04-09_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\npublic async Task<bool> SendEmail(string sender, string recipient, string subject, string body)\n{\n    var sendEmailRequest = new SendEmailRequest\n    {\n        FromEmailAddress = sender,\n        Destination = new Destination\n        {\n            ToAddresses = new List<string> { recipient }\n        },\n        Content = new EmailContent\n        {\n            Simple = new Message\n            {\n                Subject = new Content { Data = subject },\n                Body = new Body { Text = new Content { Data = body } }\n            }\n        }\n    };\n\n    try\n    {\n        var response = await _sesv2Client.SendEmailAsync(sendEmailRequest);\n        Console.WriteLine($\"Email sent: {response.HttpStatusCode == System.Net.HttpStatusCode.OK}\");\n        return response.HttpStatusCode == System.Net.HttpStatusCode.OK;\n    }\n    catch (Exception ex)\n    {\n        Console.WriteLine($\"SendEmail failed: {ex.Message}\");\n        return false;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: AWS Lambda Handler for Polly Text-to-Speech Synthesis\nDESCRIPTION: Implements a Lambda RequestHandler that converts text to speech using Amazon Polly and stores the resulting MP3 in S3. Takes translated text as input, synthesizes audio using Polly service, and uploads to specified S3 bucket.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_fsa_app/README.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.fsa.handlers;\n\nimport com.amazonaws.services.lambda.runtime.Context;\nimport com.amazonaws.services.lambda.runtime.RequestHandler;\nimport com.example.fsa.services.PollyService;\nimport com.example.fsa.services.S3Service;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.Map;\n\npublic class SynthesizeAudioHandler implements RequestHandler<Map<String, Object>, String> {\n    @Override\n    public String handleRequest(Map<String, Object> requestObject, Context context) {\n        S3Service s3Service = new S3Service();\n        PollyService pollyService = new PollyService();\n        String translatedText = (String) requestObject.get(\"translated_text\");\n        String bucket = (String) requestObject.get(\"bucket\");\n        String key = (String) requestObject.get(\"object\");\n        key = key + \".mp3\";\n        context.getLogger().log(\"*** Translated Text: \" +translatedText +\" and new key is \"+key);\n        try {\n            InputStream is = pollyService.synthesize(translatedText);\n            String audioFile = s3Service.putAudio(is, bucket, key);\n            context.getLogger().log(\"You have successfully added the \" +audioFile +\"  in \"+bucket);\n            return audioFile ;\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Spring Boot Video Application Entry Point\nDESCRIPTION: Main Spring Boot application class that serves as the entry point for the video processing application.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/video_analyzer_application/README.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.video;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class VideoApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(VideoApplication.class, args);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating IAM Role in Java\nDESCRIPTION: This snippet shows how to create an IAM role using the AWS SDK for Java 2.x.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/iam/README.md#2025-04-09_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nsrc/main/java/com/example/iam/CreateRole.java#L6\n```\n\n----------------------------------------\n\nTITLE: Implementing AWS SES v2 Newsletter System in Rust\nDESCRIPTION: A comprehensive implementation of an email newsletter system using AWS SES v2. The code handles email verification, contact list management, template creation, and automated sending of welcome emails and newsletters. It includes functionality for managing subscribers and sending templated content.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/sesv2_weekly_mailer/content/62a_newsletter.rs.md#2025-04-09_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse anyhow::{anyhow, Result};\nuse aws_sdk_sesv2::{\\n    types::{\\n        Body, Contact, Content, Destination, EmailContent, EmailTemplateContent,\\n        ListManagementOptions, Message, Template,\\n    },\\n    Client,\\n};\nuse std::io::{BufRead, Write};\nuse tracing::info;\n\nconst CONTACT_LIST_NAME: &str = \"weekly-coupons-newsletter\";\nconst TEMPLATE_NAME: &str = \"weekly-coupons\";\nconst TEMPLATE_HTML: &str = include_str!(\"../resources/newsletter/coupon-newsletter.html\");\nconst TEMPLATE_TEXT: &str = include_str!(\"../resources/newsletter/coupon-newsletter.txt\");\nconst WELCOME_HTML: &str = include_str!(\"../resources/newsletter/welcome.html\");\nconst WELCOME_TXT: &str = include_str!(\"../resources/newsletter/welcome.txt\");\nconst COUPONS: &str = include_str!(\"../resources/newsletter/sample_coupons.json\");\n\npub struct SESWorkflow<'a> {\n    client: Client,\n    stdin: &'a mut dyn BufRead,\n    stdout: &'a mut dyn Write,\n    verified_email: String,\n}\n\nimpl<'a> SESWorkflow<'a> {\n    pub fn new(client: Client, stdin: &'a mut dyn BufRead, stdout: &'a mut dyn Write) -> Self {\n        Self {\n            client,\n            stdin,\n            stdout,\n            verified_email: \"\".into(),\n        }\n    }\n\n    pub async fn prepare_application(&mut self) -> Result<()> {\n        writeln!(self.stdout, \"Enter the verified email address to use: \")?\n        self.stdout.flush().unwrap();\n        let mut verified_email = String::new();\n        self.stdin.read_line(&mut verified_email).unwrap();\n        self.verified_email = verified_email.trim().to_string();\n\n        match self\n            .client\n            .create_email_identity()\n            .email_identity(self.verified_email.clone())\n            .send()\n            .await\n        {\n            Ok(_) => writeln!(self.stdout, \"Email identity created successfully.\")?,\n            Err(e) => {\n                if e.as_service_error().unwrap().is_already_exists_exception() {\n                    writeln!(\n                        self.stdout,\n                        \"Email identity already exists, skipping creation.\"\n                    )?\n                } else {\n                    return Err(anyhow!(\"Error creating email identity: {}\", e));\n                }\n            }\n        }\n\n        match self\n            .client\n            .create_contact_list()\n            .contact_list_name(CONTACT_LIST_NAME)\n            .send()\n            .await\n        {\n            Ok(_) => writeln!(self.stdout, \"Contact list created successfully.\")?,\n            Err(e) => {\n                if e.as_service_error().unwrap().is_already_exists_exception() {\n                    writeln!(\n                        self.stdout,\n                        \"Contact list already exists, skipping creation.\"\n                    )?\n                } else {\n                    return Err(anyhow!(\"Error creating contact list: {}\", e));\n                }\n            }\n        }\n\n        let template_content = EmailTemplateContent::builder()\n            .subject(\"Weekly Coupons Newsletter\")\n            .html(TEMPLATE_HTML)\n            .text(TEMPLATE_TEXT)\n            .build();\n\n        match self\n            .client\n            .create_email_template()\n            .template_name(TEMPLATE_NAME)\n            .template_content(template_content)\n            .send()\n            .await\n        {\n            Ok(_) => writeln!(self.stdout, \"Email template created successfully.\")?,\n            Err(e) => {\n                if e.as_service_error().unwrap().is_already_exists_exception() {\n                    writeln!(\n                        self.stdout,\n                        \"Email template already exists, skipping creation.\"\n                    )?\n                } else {\n                    return Err(anyhow!(\"Error creating email template: {}\", e));\n                }\n            }\n        }\n\n        Ok(())\n    }\n\n    pub async fn gather_subscriber_emails(&mut self) -> Result<()> {\n        writeln!(\n            self.stdout,\n            \"Enter a base email address for subscribing (e.g., user@example.com): \"\n        )?\n        self.stdout.flush().unwrap();\n        let mut base_email = String::new();\n        self.stdin.read_line(&mut base_email).unwrap();\n        let base_email = base_email.trim().to_string();\n\n        let (user_email, user_domain) = base_email.split_once('@').unwrap();\n        let mut emails = Vec::with_capacity(3);\n        for i in 1..=3 {\n            let email = format!(\"+{}ses-weekly-newsletter-{}@{}\", user_email, i, user_domain);\n            emails.push(email);\n        }\n\n        for email in emails {\n            match self\n                .client\n                .create_contact()\n                .contact_list_name(CONTACT_LIST_NAME)\n                .email_address(email.clone())\n                .send()\n                .await\n            {\n                Ok(_) => writeln!(self.stdout, \"Contact created for {}\", email)?,\n                Err(e) => {\n                    if e.as_service_error().unwrap().is_already_exists_exception() {\n                        writeln!(\n                            self.stdout,\n                            \"Contact already exists for {}, skipping creation.\",\n                            email\n                        )?\n                    } else {\n                        return Err(anyhow!(\"Error creating contact for {}: {}\", email, e));\n                    }\n                }\n            }\n\n            let email_content = EmailContent::builder()\n                .simple(\n                    Message::builder()\n                        .subject(\n                            Content::builder()\n                                .data(\"Welcome to the Weekly Coupons Newsletter\")\n                                .build()?,\n                        )\n                        .body(\n                            Body::builder()\n                                .html(Content::builder().data(WELCOME_HTML).build()?)\n                                .text(Content::builder().data(WELCOME_TXT).build()?)\n                                .build(),\n                        )\n                        .build(),\n                )\n                .build();\n\n            match self\n                .client\n                .send_email()\n                .from_email_address(self.verified_email.clone())\n                .destination(Destination::builder().to_addresses(email.clone()).build())\n                .content(email_content)\n                .send()\n                .await\n            {\n                Ok(output) => {\n                    if let Some(message_id) = output.message_id {\n                        writeln!(\n                            self.stdout,\n                            \"Welcome email sent to {} with message ID {}\",\n                            email, message_id\n                        )?\n                    } else {\n                        writeln!(self.stdout, \"Welcome email sent to {}\", email)?\n                    }\n                }\n                Err(e) => return Err(anyhow!(\"Error sending welcome email to {}: {}\", email, e)),\n            }\n        }\n\n        Ok(())\n    }\n\n    pub async fn send_coupon_newsletter(&mut self) -> Result<()> {\n        let contacts: Vec<Contact> = match self\n            .client\n            .list_contacts()\n            .contact_list_name(CONTACT_LIST_NAME)\n            .send()\n            .await\n        {\n            Ok(list_contacts_output) => {\n                list_contacts_output.contacts.unwrap().into_iter().collect()\n            }\n            Err(e) => {\n                return Err(anyhow!(\n                    \"Error retrieving contact list {}: {}\",\n                    CONTACT_LIST_NAME,\n                    e\n                ))\n            }\n        };\n\n        for email in contacts {\n            let email = email.email_address.unwrap();\n            let email_content = EmailContent::builder()\n                .template(\n                    Template::builder()\n                        .template_name(TEMPLATE_NAME)\n                        .template_data(COUPONS)\n                        .build(),\n                )\n                .build();\n\n            match self\n                .client\n                .send_email()\n                .from_email_address(self.verified_email.clone())\n                .destination(Destination::builder().to_addresses(email.clone()).build())\n                .content(email_content)\n                .list_management_options(\n                    ListManagementOptions::builder()\n                        .contact_list_name(CONTACT_LIST_NAME)\n                        .build()?,\n                )\n                .send()\n                .await\n            {\n                Ok(output) => {\n                    if let Some(message_id) = output.message_id {\n```\n\n----------------------------------------\n\nTITLE: Listing Foundation Models using Amazon Bedrock SDK in Kotlin\nDESCRIPTION: Code example demonstrating how to list available foundation models in Amazon Bedrock. Note that access to models must be requested before usage, otherwise an error will be returned.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/bedrock/README.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nsrc/main/kotlin/com/example/bedrock/ListFoundationModels.kt#L24\n```\n\n----------------------------------------\n\nTITLE: CloudWatch Service Actions Implementation\nDESCRIPTION: Comprehensive implementation of CloudWatch service actions including alarm management, anomaly detection, dashboard operations, and metric handling.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/cloudwatch/README.md#2025-04-09_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nsrc/main/java/com/example/cloudwatch/scenario/CloudWatchActions.java\n```\n\n----------------------------------------\n\nTITLE: Implementing HomeController for Photo Analysis in ASP.NET Core\nDESCRIPTION: This C# code defines the HomeController class for handling HTTP requests in the photo analysis application. It includes methods for listing bucket objects, generating reports, and sending emails using AWS services.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/cross-service/PhotoAnalyzerApp/README.md#2025-04-09_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.Logging;\nusing PhotoAnalyzerApp.Models;\n\nnamespace PhotoAnalyzerApp.Controllers\n{\n    public class HomeController : Controller\n    {\n        private readonly ILogger<HomeController> _logger;\n        private string bucketName = \"<Enter your bucket name>\";\n\n        [HttpGet]\n        public async Task<ActionResult> GetObjects()\n        {\n           var awsService = new AWSService();\n           var xml = await awsService.ListBucketObjects(bucketName);\n           return Content(xml);\n        }\n\n        [HttpPost]\n        public async Task<ActionResult> GetReport(string email)\n        {\n            var myemail = email;\n            var awsService = new AWSService();\n            List<List<WorkItem>> myList = new List<List<WorkItem>>();\n            var myNameList = await awsService.ListBucketNames(bucketName);\n            foreach (var obName in myNameList)\n            {\n                List<WorkItem> labelList = await awsService.DetectLabels(bucketName, obName);\n                myList.Add(labelList);\n            }\n\n            // Now we have a list of WorkItems describing the photos in the S3 bucket.\n            var xmlReport = awsService.GenerateXMLFromList(myList);\n            awsService.SendMessage(xmlReport, myemail);\n            return Content(\"Report was sent with \" + myList.Count() + \" items.\");\n        }\n\n        public HomeController(ILogger<HomeController> logger)\n        {\n            _logger = logger;\n        }\n\n        public IActionResult Index()\n        {\n            return View();\n        }\n\n        public IActionResult Process()\n        {\n            return View();\n        }\n\n        public IActionResult Privacy()\n        {\n            return View();\n        }\n\n        [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]\n        public IActionResult Error()\n        {\n            return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Support Case in Java\nDESCRIPTION: Demonstrates how to create a new support case using the AWS Support API. It includes specifying the service, category, and severity level for the case.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/support/README.md#2025-04-09_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nCreateCaseResponse createCaseResponse = supportClient.createCase(\n    CreateCaseRequest.builder()\n        .serviceCode(seviceCode)\n        .categoryCode(categoryCode)\n        .severityCode(severityLevel)\n        .communicationBody(caseBody)\n        .subject(subject)\n        .language(language)\n        .issueType(issueType)\n        .build()\n);\n```\n\n----------------------------------------\n\nTITLE: Deleting S3 Buckets in JavaScript\nDESCRIPTION: This code snippet shows how to delete an S3 bucket using the DeleteBucket operation in the AWS SDK for JavaScript (v3).\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/s3/README.md#2025-04-09_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n- [DeleteBucket](actions/delete-bucket.js#L4)\n```\n\n----------------------------------------\n\nTITLE: Setting Bucket Versioning in S3 in Java\nDESCRIPTION: Code example that demonstrates how to enable versioning for an S3 bucket using the PutBucketVersioning operation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/s3/README.md#2025-04-09_snippet_16\n\nLANGUAGE: Java\nCODE:\n```\n- [PutBucketVersioning](src/main/java/com/example/s3/replication/BucketReplication.java#L130)\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Packages\nDESCRIPTION: Install the necessary Python packages for running the Auto Scaling examples using pip in a virtual environment.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/auto-scaling/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Packages\nDESCRIPTION: Command to install the required Python packages for these examples using pip in a virtual environment.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/cognito/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Creating Video Upload Form with Thymeleaf for AWS Video Streaming App\nDESCRIPTION: The upload.html file provides a form for users to upload MP4 videos to an Amazon S3 bucket. It includes fields for video description and file selection, using multipart/form-data encoding for file upload.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/create_spring_stream_app/README.md#2025-04-09_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html xmlns:th=\"http://www.thymeleaf.org\">\n<head lang=\"en\">\n    <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\" integrity=\"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\" crossorigin=\"anonymous\">\n    <script th:src=\"|https://code.jquery.com/jquery-1.12.4.min.js|\"></script>\n    <link rel=\"stylesheet\" href=\"../public/css/styles.css\" th:href=\"@{/css/styles.css}\" />\n    <link rel=\"icon\" href=\"../public/images/favicon.ico\" th:href=\"@{/images/favicon.ico}\" />\n    <title>Spring Framework</title>\n    </head>\n    <body>\n    <header th:replace=\"layout :: site-header\"></header>\n\n  \n    <div class=\"container\">\n        <h2>Video Stream over HTTP App</h2>\n        <p>Upload a MP4 video to an Amazon S3 bucket</p>\n\n        <form method=\"POST\" onsubmit=\"myFunction()\" action=\"/fileupload\" enctype=\"multipart/form-data\">\n            Video Description:<input type=\"text\" name=\"description\" required><br>\n            <input type=\"file\" name=\"file\" /><br/><br/>\n            <input type=\"submit\" value=\"Submit\" />\n        </form>\n    </div>\n    </body>\n    </html>\n```\n\n----------------------------------------\n\nTITLE: Batch Writing Items to DynamoDB in Swift\nDESCRIPTION: Demonstrates how to write multiple items to a DynamoDB table in a single batch operation, which is more efficient than writing items individually.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/swift/example_code/dynamodb/README.md#2025-04-09_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nBatchWriteItem(basics/MovieList/MovieTable.swift#L206)\n```\n\n----------------------------------------\n\nTITLE: Configuring Target Sources, Includes, and Definitions\nDESCRIPTION: Sets up the target with source files, include directories, and compile definitions. Adds conditional compilation for CURL availability.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/s3/tests/CMakeLists.txt#2025-04-09_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(\n        ${CURRENT_TARGET}\n        PUBLIC\n        ${GTEST_SOURCE}\n        test_main.cpp\n        S3_GTests.cpp\n)\n\ntarget_include_directories(\n        ${CURRENT_TARGET}\n        PUBLIC\n        ${CMAKE_CURRENT_SOURCE_DIR}/..\n        ${CURL_INCLUDE_DIRS}\n)\n\ntarget_compile_definitions(\n        ${CURRENT_TARGET}\n        PUBLIC\n        EXCLUDE_MAIN_FUNCTION\n        SRC_DIR=\"${CMAKE_CURRENT_SOURCE_DIR}\"\n)\n\nif (CURL_FOUND)\n    target_compile_definitions(${CURRENT_TARGET}\n            PUBLIC\n            HAS_CURL=1)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Describing a DynamoDB Table in Java\nDESCRIPTION: This code snippet demonstrates how to retrieve information about a DynamoDB table using the AWS SDK for Java 2.x. It shows how to get details such as the table's schema, throughput, and other properties.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/dynamodb/README.md#2025-04-09_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nsrc/main/java/com/example/dynamodb/DescribeTable.java#L6\n```\n\n----------------------------------------\n\nTITLE: Retrieving S3 Objects in PHP\nDESCRIPTION: Code that demonstrates how to download an object from an S3 bucket using the AWS SDK for PHP. This is a fundamental operation for working with stored data in S3.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/php/example_code/s3/README.md#2025-04-09_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nGetObject\n```\n\n----------------------------------------\n\nTITLE: Building Resilient EC2 Services\nDESCRIPTION: Demonstrates how to create a fault-tolerant web service using EC2 Auto Scaling groups, Elastic Load Balancing, and DynamoDB. Includes implementation of health checks and failure handling mechanisms.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/ec2/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nusecases/resilient_service/src/main/java/com/example/resilient/Main.java\n```\n\n----------------------------------------\n\nTITLE: Creating KMS Key with Java SDK\nDESCRIPTION: This code snippet shows how to create a new KMS key using the AWS SDK for Java 2.x. It uses the CreateKey operation to generate a new symmetric or asymmetric KMS key.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/kms/README.md#2025-04-09_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nKMSActions.java#L112\n```\n\n----------------------------------------\n\nTITLE: Installing Frontend Dependencies with npm\nDESCRIPTION: This command installs the required frontend dependencies listed in the package.json file, including React, React-Bootstrap, and jQuery.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/cross_service/photo_analyzer/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Running EC2 Basics Scenario in Python\nDESCRIPTION: Executes the EC2 basics scenario script, which demonstrates creating and managing EC2 instances and related resources.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/ec2/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython scenario_get_started_instances.py\n```\n\n----------------------------------------\n\nTITLE: SESv2Workflow Class for Managing Coupon Newsletter in Python\nDESCRIPTION: A class that manages the SES v2 Coupon Newsletter Workflow. It includes methods for preparing the application, gathering subscriber emails, sending newsletters, monitoring, and cleaning up resources.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/sesv2_weekly_mailer/content/63a_newsletter.py.md#2025-04-09_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nclass SESv2Workflow:\n    \"\"\"\n    A class to manage the SES v2 Coupon Newsletter Workflow.\n    \"\"\"\n\n    def __init__(self, ses_client, sleep=True):\n        self.ses_client = ses_client\n        self.sleep = sleep\n\n    def prepare_application(self):\n        \"\"\"Prepares the application by creating an email identity and a contact list.\"\"\"\n        # Implementation details...\n\n    def gather_subscriber_email_addresses(self):\n        \"\"\"Gathers subscriber email addresses and sends a welcome email to each subscriber.\"\"\"\n        # Implementation details...\n\n    def send_coupon_newsletter(self):\n        \"\"\"Sends the coupon newsletter to the subscribers.\"\"\"\n        # Implementation details...\n\n    def monitor_and_review(self):\n        \"\"\"Provides instructions for monitoring sending activity in the AWS console.\"\"\"\n        # Implementation details...\n\n    def clean_up(self):\n        \"\"\"Cleans up the resources created during the workflow.\"\"\"\n        # Implementation details...\n```\n\n----------------------------------------\n\nTITLE: Initializing Spring Boot Application for AWS SNS\nDESCRIPTION: Main Spring Boot application class that serves as the entry point for the SNS publish/subscribe web application.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_sns_sample_app/README.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage com.spring.sns;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class SubApplication {\n\npublic static void main(String[] args) {\n   SpringApplication.run(SubApplication.class, args);\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Conversations with Anthropic Claude in Go\nDESCRIPTION: Shows how to use the Converse function with Anthropic Claude models to maintain context in multi-turn conversations. This enables more interactive and contextually aware AI interactions.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/gov2/bedrock-runtime/README.md#2025-04-09_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nconverse.go#L7\n```\n\n----------------------------------------\n\nTITLE: Deleting CloudFormation Stack\nDESCRIPTION: Command to delete the CloudFormation stack and all associated AWS resources when the example is no longer needed.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/cross-services/textract-react/README.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\naws cloudformation delete-stack --stack-name <stack-name>\n```\n\n----------------------------------------\n\nTITLE: Running Example with Options\nDESCRIPTION: Command to execute a script with command line options, using util.parseArgs for option configuration\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/cognito-identity-provider/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnode ./scenarios/<fileName> --option1 --option2\n```\n\n----------------------------------------\n\nTITLE: Updating IAM User in Java\nDESCRIPTION: This snippet demonstrates how to update an IAM user using the AWS SDK for Java 2.x.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/iam/README.md#2025-04-09_snippet_17\n\nLANGUAGE: Java\nCODE:\n```\nsrc/main/java/com/example/iam/UpdateUser.java#L6\n```\n\n----------------------------------------\n\nTITLE: Invoking Stable Diffusion foundation model with PHP\nDESCRIPTION: This code snippet demonstrates how to invoke the Stable Diffusion foundation model using Amazon Bedrock Runtime with the AWS SDK for PHP. It formats the request with parameters specific to this image generation model.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/php/example_code/bedrock-runtime/README.md#2025-04-09_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nInvokeModel(BedrockRuntimeService.php#L96)\n```\n\n----------------------------------------\n\nTITLE: Get Asset Property Value in AWS IoT SiteWise using Java\nDESCRIPTION: Shows how to retrieve the current value of an asset property in AWS IoT SiteWise.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/iotsitewise/README.md#2025-04-09_snippet_13\n\nLANGUAGE: Java\nCODE:\n```\nGetAssetPropertyValue\n```\n\n----------------------------------------\n\nTITLE: Running Lambda Scenario Command Prompt in JavaScript\nDESCRIPTION: Instructions for navigating to the project directory and running the interactive command prompt for the Lambda scenario. The command prompt allows users to explore various Lambda operations using the AWS SDK for JavaScript.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/lambda/scenarios/basic/README.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. From a command prompt, change directories to `root`.\n2. Run `node index.js`.\n3. Type `help` and press `Enter` to see a list of commands.\n```\n\n----------------------------------------\n\nTITLE: Generating Excel Reports and Sending Emails with Java\nDESCRIPTION: This Java class creates Excel reports from work items and sends them via email using Amazon SES. It uses the JExcel API for Excel generation and the AWS SDK for Java to interact with Amazon SES.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_dynamodb_web_app/README.md#2025-04-09_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npackage com.aws.rest;\n\nimport jxl.CellView;\nimport jxl.Workbook;\nimport jxl.WorkbookSettings;\nimport jxl.format.UnderlineStyle;\nimport jxl.write.Label;\nimport jxl.write.WritableCellFormat;\nimport jxl.write.WritableFont;\nimport jxl.write.WritableSheet;\nimport jxl.write.WritableWorkbook;\nimport jxl.write.WriteException;\nimport org.apache.commons.io.IOUtils;\nimport org.springframework.stereotype.Component;\nimport software.amazon.awssdk.core.SdkBytes;\nimport software.amazon.awssdk.regions.Region;\nimport software.amazon.awssdk.services.ses.SesClient;\nimport software.amazon.awssdk.services.ses.model.RawMessage;\nimport software.amazon.awssdk.services.ses.model.SendRawEmailRequest;\nimport software.amazon.awssdk.services.ses.model.SesException;\nimport javax.activation.DataHandler;\nimport javax.activation.DataSource;\nimport javax.mail.Message;\nimport javax.mail.MessagingException;\nimport javax.mail.Session;\nimport javax.mail.internet.InternetAddress;\nimport javax.mail.internet.MimeBodyPart;\nimport javax.mail.internet.MimeMessage;\nimport javax.mail.internet.MimeMultipart;\nimport javax.mail.util.ByteArrayDataSource;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.nio.ByteBuffer;\nimport java.util.Locale;\nimport java.util.Properties;\n\n@Component\npublic class WriteExcel {\n    static WritableCellFormat times ;\n    static WritableCellFormat timesBoldUnderline;\n\n    static {\n        try {\n            WritableFont times10pt = new WritableFont(WritableFont.TIMES, 10);\n            times = new WritableCellFormat(times10pt);\n            times.setWrap(true);\n\n            WritableFont times10ptBoldUnderline = new WritableFont(WritableFont.TIMES, 10, WritableFont.BOLD, false, UnderlineStyle.SINGLE);\n            timesBoldUnderline = new WritableCellFormat(times10ptBoldUnderline);\n            timesBoldUnderline.setWrap(true);\n        } catch (WriteException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public InputStream write(Iterable<WorkItem> items) throws IOException, WriteException {\n        ByteArrayOutputStream os = new ByteArrayOutputStream();\n        WorkbookSettings wbSettings = new WorkbookSettings();\n        wbSettings.setLocale(new Locale(\"en\", \"US\"));\n\n        WritableWorkbook workbook = Workbook.createWorkbook(os, wbSettings);\n        workbook.createSheet(\"Work Item Report\", 0);\n        WritableSheet excelSheet = workbook.getSheet(0);\n\n        addLabels(excelSheet);\n        fillContent(excelSheet, items);\n\n        workbook.write();\n        workbook.close();\n\n        return new ByteArrayInputStream(os.toByteArray());\n    }\n\n    private void addLabels(WritableSheet sheet) throws WriteException {\n        CellView cv = new CellView();\n        cv.setFormat(timesBoldUnderline);\n        cv.setAutosize(true);\n\n        addCaption(sheet, 0, 0, \"Writer\");\n        addCaption(sheet, 1, 0, \"Date\");\n        addCaption(sheet, 2, 0, \"Guide\");\n        addCaption(sheet, 3, 0, \"Description\");\n        addCaption(sheet, 4, 0, \"Status\");\n    }\n\n    private void addCaption(WritableSheet sheet, int column, int row, String s) throws WriteException {\n        Label label = new Label(column, row, s, timesBoldUnderline);\n        int cc = s.length();\n        sheet.setColumnView(column, cc);\n        sheet.addCell(label);\n    }\n\n    private void addField(WritableSheet sheet, int column, int row, String s) throws WriteException {\n        Label label = new Label(column, row, s, timesBoldUnderline);\n        int cc = s.length();\n        cc = cc > 200 ? 150 : cc + 6;\n        sheet.setColumnView(column, cc);\n        sheet.addCell(label);\n    }\n\n    private void fillContent(WritableSheet sheet, Iterable<WorkItem> items) throws WriteException {\n        int row = 2;\n        for (WorkItem item : items) {\n            addField(sheet, 0, row, item.getName());\n            addField(sheet, 1, row, item.getDate());\n            addField(sheet, 2, row, item.getGuide());\n            addField(sheet, 3, row, item.getDescription());\n            addField(sheet, 4, row, item.getStatus());\n            row += 1;\n        }\n    }\n\n    @Component\n    public static class SendMessages {\n        private static String sender = \"scmacdon@amazon.com\";\n        private static String subject = \"Weekly AWS Status Report\";\n        private static String bodyText = \"Hello,\\r\\n\\r\\nPlease see the attached file for a weekly update.\";\n        private static String bodyHTML = \"<!DOCTYPE html><html lang=\\\"en-US\\\"><body><h1>Hello!</h1><p>Please see the attached file for a weekly update.</p></body></html>\";\n        private static String attachmentName = \"WorkReport.xls\";\n\n        public void sendReport(InputStream is, String emailAddress) throws IOException {\n            byte[] fileContent = IOUtils.toByteArray(is);\n\n            try {\n                send(makeEmail(fileContent, emailAddress));\n            } catch (MessagingException e) {\n                e.printStackTrace();\n            }\n        }\n\n        public void send(MimeMessage message) throws MessagingException, IOException {\n            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n            message.writeTo(outputStream);\n            ByteBuffer buf = ByteBuffer.wrap(outputStream.toByteArray());\n            byte[] arr = new byte[buf.remaining()];\n            buf.get(arr);\n            SdkBytes data = SdkBytes.fromByteArray(arr);\n            RawMessage rawMessage = RawMessage.builder().data(data).build();\n            SendRawEmailRequest rawEmailRequest = SendRawEmailRequest.builder().rawMessage(rawMessage).build();\n\n            try {\n                System.out.println(\"Attempting to send an email through Amazon SES...\");\n                SesClient client = SesClient.builder().region(Region.US_WEST_2).build();\n                client.sendRawEmail(rawEmailRequest);\n            } catch (SesException e) {\n                e.printStackTrace();\n            }\n        }\n\n        private MimeMessage makeEmail(byte[] attachment, String emailAddress) throws MessagingException {\n            Session session = Session.getDefaultInstance(new Properties());\n            MimeMessage message = new MimeMessage(session);\n\n            message.setSubject(subject, \"UTF-8\");\n            message.setFrom(new InternetAddress(sender));\n            message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(emailAddress));\n\n            MimeBodyPart textPart = new MimeBodyPart();\n            textPart.setContent(bodyText, \"text/plain; charset=UTF-8\");\n\n            MimeBodyPart htmlPart = new MimeBodyPart();\n            htmlPart.setContent(bodyHTML, \"text/html; charset=UTF-8\");\n\n            MimeMultipart msgBody = new MimeMultipart(\"alternative\");\n            msgBody.addBodyPart(textPart);\n            msgBody.addBodyPart(htmlPart);\n\n            MimeBodyPart wrap = new MimeBodyPart();\n            wrap.setContent(msgBody);\n\n            MimeMultipart msg = new MimeMultipart(\"mixed\");\n            msg.addBodyPart(wrap);\n\n            MimeBodyPart att = new MimeBodyPart();\n            DataSource fds = new ByteArrayDataSource(attachment, \"application/vnc.openxmlformats-officedocument.spreadsheetml.sheet\");\n            att.setDataHandler(new DataHandler(fds));\n            att.setFileName(attachmentName);\n\n            msg.addBodyPart(att);\n            message.setContent(msg);\n            return message;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Excel Report Generation with JExcel in Java\nDESCRIPTION: The WriteExcel class generates Excel reports from video analysis data. It utilizes the JExcel library to create formatted Excel workbooks with data about facial characteristics detected in videos. The class provides methods to create cell formats, write headers, and populate content from a list of FaceItems objects.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/video_analyzer_application/README.md#2025-04-09_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.video;\n\nimport jxl.CellView;\nimport jxl.Workbook;\nimport jxl.WorkbookSettings;\nimport jxl.format.UnderlineStyle;\nimport jxl.write.Label;\nimport jxl.write.Number;\nimport jxl.write.WritableCellFormat;\nimport jxl.write.WritableFont;\nimport jxl.write.WritableSheet;\nimport jxl.write.WritableWorkbook;\nimport jxl.write.WriteException;\nimport org.springframework.stereotype.Component;\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.Locale;\n\n@Component\npublic class WriteExcel {\n\nprivate WritableCellFormat timesBoldUnderline;\nprivate WritableCellFormat times;\n\n// Returns an InputStream that represents the Excel Report\npublic java.io.InputStream exportExcel( List<FaceItems> list) {\n\n    try {\n        java.io.InputStream is = write(list);\n        return is ;\n    } catch(WriteException | IOException e) {\n        e.printStackTrace();\n    }\n    return null;\n}\n\n// Generates the report and returns an inputstream\npublic java.io.InputStream write( List<FaceItems> list) throws IOException, WriteException {\n    java.io.OutputStream os = new java.io.ByteArrayOutputStream() ;\n    WorkbookSettings wbSettings = new WorkbookSettings();\n\n    wbSettings.setLocale(new Locale(\"en\", \"EN\"));\n\n    // Create a Workbook - pass the OutputStream\n    WritableWorkbook workbook = Workbook.createWorkbook(os, wbSettings);\n\n    //Need to get the WorkItem from each list\n    workbook.createSheet(\"Video Analyzer Sheet\", 0);\n    WritableSheet excelSheet = workbook.getSheet(0);\n    createLabel(excelSheet);\n    createContent(excelSheet, list);\n\n    // Close the workbook\n    workbook.write();\n    workbook.close();\n\n    // Get an inputStram that represents the Report\n    java.io.ByteArrayOutputStream stream = new java.io.ByteArrayOutputStream();\n    stream = (java.io.ByteArrayOutputStream)os;\n    byte[] myBytes = stream.toByteArray();\n    java.io.InputStream is = new java.io.ByteArrayInputStream(myBytes) ;\n\n    return is ;\n  }\n\n // Create Headings in the Excel spreadsheet\n private void createLabel(WritableSheet sheet)\n        throws WriteException {\n    // Create a times font\n    WritableFont times10pt = new WritableFont(WritableFont.TIMES, 10);\n    // Define the cell format\n    times = new WritableCellFormat(times10pt);\n    // Lets automatically wrap the cells\n    times.setWrap(true);\n\n    // create create a bold font with unterlines\n    WritableFont times10ptBoldUnderline = new WritableFont(WritableFont.TIMES, 10, WritableFont.BOLD, false,\n            UnderlineStyle.SINGLE);\n    timesBoldUnderline = new WritableCellFormat(times10ptBoldUnderline);\n    // Lets automatically wrap the cells\n    timesBoldUnderline.setWrap(true);\n\n    CellView cv = new CellView();\n    cv.setFormat(times);\n    cv.setFormat(timesBoldUnderline);\n    cv.setAutosize(true);\n\n    // Write a few headers\n    addCaption(sheet, 0, 0, \"Age Range\");\n    addCaption(sheet, 1, 0, \"Beard\");\n    addCaption(sheet, 2, 0, \"Eye glasses\");\n    addCaption(sheet, 3, 0, \"Eyes open\");\n    addCaption(sheet, 4, 0, \"Mustache\");\n    addCaption(sheet, 4, 0, \"Smile\");\n }\n\n // Write the Work Item Data to the Excel Report\n private int createContent(WritableSheet sheet, List<FaceItems> list) throws WriteException {\n\n    int size = list.size() ;\n\n    //  list\n    for (int i = 0; i < size; i++) {\n        FaceItems fi = (FaceItems)list.get(i);\n\n        //Get tne item values\n        String age = fi.getAgeRange();\n        String beard = fi.getBeard();\n        String eyeglasses = fi.getEyeglasses();\n        String eyesOpen = fi.getEyesOpen();\n        String mustache = fi.gettMustache();\n        String smile = fi.gettSmile();\n\n        addLabel(sheet, 0, i + 2, age);\n        addLabel(sheet, 1, i + 2, beard);\n        addLabel(sheet, 2, i + 2, eyeglasses);\n        addLabel(sheet, 3, i + 2, eyesOpen);\n        addLabel(sheet, 4, i + 2, mustache);\n        addLabel(sheet, 5, i + 2, smile);\n     }\n    return size;\n   }\n\n private void addCaption(WritableSheet sheet, int column, int row, String s)\n        throws WriteException {\n    Label label;\n    label = new Label(column, row, s, timesBoldUnderline);\n\n    int cc = countString(s);\n    sheet.setColumnView(column, cc);\n    sheet.addCell(label);\n }\n\nprivate void addNumber(WritableSheet sheet, int column, int row,\n                       Integer integer) throws WriteException {\n    Number number;\n    number = new Number(column, row, integer, times);\n    sheet.addCell(number);\n }\n\nprivate void addLabel(WritableSheet sheet, int column, int row, String s)\n        throws WriteException {\n    Label label;\n    label = new Label(column, row, s, times);\n    int cc = countString(s);\n    if (cc > 200)\n        sheet.setColumnView(column, 150);\n    else\n        sheet.setColumnView(column, cc+6);\n\n    sheet.addCell(label);\n\n }\n\nprivate int countString (String ss) {\n    int count = 0;\n    //Counts each character except space\n    for(int i = 0; i < ss.length(); i++) {\n        if(ss.charAt(i) != ' ')\n            count++;\n    }\n    return count;\n  }\n }\n```\n\n----------------------------------------\n\nTITLE: Implementing Work Item REST Controller in Java Spring\nDESCRIPTION: MainController class that handles HTTP requests for work item management including getting items, archiving items, and adding new items. Uses Spring annotations for REST endpoints and cross-origin requests. Integrates with WorkItemRepository for data persistence.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/Creating_Spring_RDS_Rest/README.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage com.aws.rest;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.web.bind.annotation.CrossOrigin;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.PutMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\nimport java.time.LocalDateTime;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.UUID;\nimport java.util.stream.Collectors;\nimport java.util.stream.StreamSupport;\n\n@ComponentScan(basePackages = {\"com.aws.services\"})\n@CrossOrigin(origins = \"*\")\n@RestController\n@RequestMapping(\"api/items\")\npublic class MainController {\n    private final WorkItemRepository repository;\n\n    @Autowired\n    MainController(\n        WorkItemRepository repository\n    ) {\n        this.repository = repository;\n    }\n\n    @GetMapping(\"\" )\n    public List<WorkItem> getItems(@RequestParam(required=false) String archived) {\n        Iterable<WorkItem> result;\n        if (archived != null)\n            result = repository.findAllWithStatus(archived);\n        else\n            result = repository.findAllWithStatus(\"\");\n\n        return StreamSupport.stream(result.spliterator(), false)\n            .collect(Collectors.toUnmodifiableList());\n    }\n\n    // Notice the : character which is used for custom methods. More information can be found here:\n    // https://cloud.google.com/apis/design/custom_methods\n    @PutMapping(\"{id}:archive\")\n    public List<WorkItem> modUser(@PathVariable String id) {\n        repository.flipItemArchive(id);\n        Iterable<WorkItem> result = repository.findAllWithStatus(\"false\");\n        return StreamSupport.stream(result.spliterator(), false)\n            .collect(Collectors.toUnmodifiableList());\n    }\n\n    @PostMapping(\"\")\n    public List<WorkItem> addItem(@RequestBody Map<String, String> payload) {\n        String name = payload.get(\"name\");\n        String guide = payload.get(\"guide\");\n        String description = payload.get(\"description\");\n        String status = payload.get(\"description\");\n\n        WorkItem item = new WorkItem();\n        String workId = UUID.randomUUID().toString();\n        String date = LocalDateTime.now().toString();\n        item.setId(workId);\n        item.setGuide(guide);\n        item.setDescription(description);\n        item.setName(name);\n        item.setDate(date);\n        item.setStatus(status);\n        repository.save(item);\n\n        // Return active records.\n        Iterable<WorkItem> result = repository.findAllWithStatus(\"false\");\n        return StreamSupport.stream(result.spliterator(), false)\n            .collect(Collectors.toUnmodifiableList());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Export Datasets Example in Python with AWS Lookout for Vision\nDESCRIPTION: Command to run the export_datasets.py script, which demonstrates how to export datasets from an AWS Lookout for Vision project.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/lookoutvision/README.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npython export_datasets.py\n```\n\n----------------------------------------\n\nTITLE: Deleting an S3 Bucket in Java\nDESCRIPTION: Code example that demonstrates how to delete an S3 bucket using the DeleteBucket operation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/s3/README.md#2025-04-09_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\n- [DeleteBucket](src/main/java/com/example/s3/scenario/S3Actions.java#L353)\n```\n\n----------------------------------------\n\nTITLE: Hello CloudWatch - Listing Metrics with CloudWatch in C#\nDESCRIPTION: A simple example showing how to list CloudWatch metrics. This is referenced in the documentation as a starting point for new users.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/CloudWatch/README.md#2025-04-09_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nListMetrics\n```\n\n----------------------------------------\n\nTITLE: Running ListClusterSnapshots Example in Go\nDESCRIPTION: This example shows how to list Amazon RDS cluster snapshots using the AWS SDK for Go. It doesn't require any command-line arguments.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/rds/README.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngo run ListClusterSnapshots.go\n```\n\n----------------------------------------\n\nTITLE: Activating Virtual Environment\nDESCRIPTION: Commands to activate the Python virtual environment on different operating systems. This enables the isolated Python environment for package installation and execution.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n.venv\\Scripts\\activate # Windows\nsource .venv/bin/activate # Linux, macOS, or Unix\n```\n\n----------------------------------------\n\nTITLE: Interactive Menu and Operations Example in S3 Conditional Requests Scenario\nDESCRIPTION: Demonstrates the interactive menu and various operations in the S3 conditional requests scenario. Shows examples of listing bucket items, conditional read operations with various conditions, conditional copy operations, and conditional write operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/s3_conditional_requests/SPECIFICATION.md#2025-04-09_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n----------------------------------------------------------------------------------------\nChoose an action to explore some example conditional requests.\n1. Print list of bucket items.\n2. Perform a conditional read.\n3. Perform a conditional copy.\n4. Perform a conditional write.\n5. Clean up and exit.\nWhich action would you like to take? \n        \n--------------------------------------------------------------------------------\n\nWhich action would you like to take? 1\nListing the objects and buckets.\n\t Items in bucket test555-source-279\n\t\t object: test-upload-file.txt ETag \"3e3d5f53cec929a350af061a39a3a19d\"\n\t Items in bucket test555-dest-279\n\t\tNo objects found.\n--------------------------------------------------------------------------------\n----------------------------------------------------------------------------------------\nChoose an action to explore some example conditional requests.\n1. Print list of bucket items.\n2. Perform a conditional read.\n3. Perform a conditional copy.\n4. Perform a conditional write.\n5. Clean up and exit.\nWhich action would you like to take? 2\nPerform a conditional read.\n1. If-Match: using the object's ETag. This condition should succeed.\n2. If-None-Match: using the object's ETag. This condition should fail.\n3. If-Modified-Since: using yesterday's date. This condition should succeed.\n4. If-Unmodified-Since: using yesterday's date. This condition should fail.\nEnter the condition type : 1\n\tConditional read successful. Here are the first 20 bytes of the object:\n\n\tb'This is a test file '\n----------------------------------------------------------------------------------------\nChoose an action to explore some example conditional requests.\n1. Print list of bucket items.\n2. Perform a conditional read.\n3. Perform a conditional copy.\n4. Perform a conditional write.\n5. Clean up and exit.\nWhich action would you like to take? 2\nPerform a conditional read.\n1. If-Match: using the object's ETag. This condition should succeed.\n2. If-None-Match: using the object's ETag. This condition should fail.\n3. If-Modified-Since: using yesterday's date. This condition should succeed.\n4. If-Unmodified-Since: using yesterday's date. This condition should fail.\nEnter the condition type : 2\n\tConditional read failed: Object not modified\n----------------------------------------------------------------------------------------\n----------------------------------------------------------------------------------------\nChoose an action to explore some example conditional requests.\n1. Print list of bucket items.\n2. Perform a conditional read.\n3. Perform a conditional copy.\n4. Perform a conditional write.\n5. Clean up and exit.\nWhich action would you like to take? 3\nPerform a conditional copy.\n1. If-Match: using the object's ETag. This condition should succeed.\n2. If-None-Match: using the object's ETag. This condition should fail.\n3. If-Modified-Since: using yesterday's date. This condition should succeed.\n4. If-Unmodified-Since: using yesterday's date. This condition should fail.\nEnter the condition type : 1\nEnter an object key: test44\n\tConditional copy successful for key test44 in bucket test555-dest-279.\n----------------------------------------------------------------------------------------\nChoose an action to explore some example conditional requests.\n1. Print list of bucket items.\n2. Perform a conditional read.\n3. Perform a conditional copy.\n4. Perform a conditional write.\n5. Clean up and exit.\nWhich action would you like to take? 3\nPerform a conditional copy.\n1. If-Match: using the object's ETag. This condition should succeed.\n2. If-None-Match: using the object's ETag. This condition should fail.\n3. If-Modified-Since: using yesterday's date. This condition should succeed.\n4. If-Unmodified-Since: using yesterday's date. This condition should fail.\nEnter the condition type : 2\nEnter an object key: test44\n\tConditional copy failed: Precondition failed\n----------------------------------------------------------------------------------------\nChoose an action to explore some example conditional requests.\n1. Print list of bucket items.\n2. Perform a conditional read.\n3. Perform a conditional copy.\n4. Perform a conditional write.\n5. Clean up and exit.\nWhich action would you like to take? 4\nPerform a conditional write using IfNoneMatch condition on the object key.\nIf the key is a duplicate, the write will fail.\nEnter an object key: test44\n\tConditional write successful for key test44 in bucket test555-source-279.\n----------------------------------------------------------------------------------------\nChoose an action to explore some example conditional requests.\n1. Print list of bucket items.\n2. Perform a conditional read.\n3. Perform a conditional copy.\n4. Perform a conditional write.\n5. Clean up and exit.\nWhich action would you like to take? 4\nPerform a conditional write using IfNoneMatch condition on the object key.\nIf the key is a duplicate, the write will fail.\nEnter an object key: test44\n\tConditional write failed: Precondition failed\n----------------------------------------------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for AWS Redshift Examples in C++\nDESCRIPTION: Sets up a CMake project for building AWS Redshift examples. It specifies the minimum CMake version, project name, C++ standard, and locates the required AWS SDK components. The script then defines a list of example programs and creates executable targets for each.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/redshift/CMakeLists.txt#2025-04-09_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nproject(redshift-examples)\nset (CMAKE_CXX_STANDARD 11)\n\n# Locate the aws sdk for c++ package.\n# Note: authorize_cluster_access.cpp needs to link with the EC2 library.\nfind_package(AWSSDK REQUIRED COMPONENTS redshift ec2)\n\nset(EXAMPLES \"\")\nlist(APPEND EXAMPLES \"authorize_cluster_access\")\nlist(APPEND EXAMPLES \"create_cluster\")\nlist(APPEND EXAMPLES \"create_cluster_subnet_group\")\n\n# The executables to build.\nforeach(EXAMPLE IN LISTS EXAMPLES)\n  add_executable(${EXAMPLE} ${EXAMPLE}.cpp)\n  target_link_libraries(${EXAMPLE} ${AWSSDK_LINK_LIBRARIES})\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Loading Items to DynamoDB Table in Go\nDESCRIPTION: Bulk loads items from a JSON file into a DynamoDB table. Requires JSON file path and table name as input parameters.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/dynamodb/README.md#2025-04-09_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ngo run LoadTableItems.go -j JSON-FILE -d TABLE\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven POM for AWS Lambda Java Project\nDESCRIPTION: This XML snippet defines the project structure and dependencies for a Java-based AWS Lambda function. It includes AWS SDK dependencies, logging libraries, and testing frameworks necessary for Lambda development.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_lambda_apigateway/README.md#2025-04-09_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n   <modelVersion>4.0.0</modelVersion>\n   <groupId>LambdaCronFunctions</groupId>\n   <artifactId>LambdaCronFunctions</artifactId>\n   <version>1.0-SNAPSHOT</version>\n   <packaging>jar</packaging>\n   <name>java-basic-function</name>\n   <properties>\n     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n     <maven.compiler.source>1.8</maven.compiler.source>\n     <maven.compiler.target>1.8</maven.compiler.target>\n   </properties>\n   <dependencies>\n    <dependency>\n        <groupId>com.amazonaws</groupId>\n        <artifactId>aws-lambda-java-core</artifactId>\n        <version>1.2.1</version>\n    </dependency>\n    <dependency>\n        <groupId>com.google.code.gson</groupId>\n        <artifactId>gson</artifactId>\n        <version>2.8.9</version>\n    </dependency>\n    <dependency>\n        <groupId>org.apache.logging.log4j</groupId>\n        <artifactId>log4j-api</artifactId>\n        <version>2.17.0</version>\n    </dependency>\n    <dependency>\n        <groupId>org.apache.logging.log4j</groupId>\n        <artifactId>log4j-core</artifactId>\n        <version>2.17.0</version>\n        <scope>test</scope>\n    </dependency>\n    <dependency>\n        <groupId>org.apache.logging.log4j</groupId>\n        <artifactId>log4j-slf4j18-impl</artifactId>\n        <version>2.17.0</version>\n        <scope>test</scope>\n    </dependency>\n    <dependency>\n        <groupId>org.junit.jupiter</groupId>\n        <artifactId>junit-jupiter-api</artifactId>\n        <version>5.8.2</version>\n        <scope>test</scope>\n    </dependency>\n    <dependency>\n        <groupId>org.junit.jupiter</groupId>\n        <artifactId>junit-jupiter-engine</artifactId>\n        <version>5.8.2</version>\n        <scope>test</scope>\n    </dependency>\n    <dependency>\n        <groupId>com.googlecode.json-simple</groupId>\n        <artifactId>json-simple</artifactId>\n        <version>1.1.1</version>\n    </dependency>\n    <dependency>\n        <groupId>software.amazon.awssdk</groupId>\n        <artifactId>dynamodb-enhanced</artifactId>\n        <version>2.17.110</version>\n    </dependency>\n    <dependency>\n        <groupId>software.amazon.awssdk</groupId>\n        <artifactId>dynamodb</artifactId>\n        <version>2.17.110</version>\n    </dependency>\n    <dependency>\n        <groupId>software.amazon.awssdk</groupId>\n        <artifactId>sns</artifactId>\n        <version>2.17.110</version>\n    </dependency>\n    <dependency>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-surefire-plugin</artifactId>\n        <version>3.0.0-M5</version>\n        <type>maven-plugin</type>\n    </dependency>\n  </dependencies>\n  <build>\n    <plugins>\n         <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-shade-plugin</artifactId>\n            <version>3.2.2</version>\n            <configuration>\n                <createDependencyReducedPom>false</createDependencyReducedPom>\n            </configuration>\n            <executions>\n                <execution>\n                    <phase>package</phase>\n                    <goals>\n                        <goal>shade</goal>\n                    </goals>\n                </execution>\n            </executions>\n        </plugin>\n        <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-compiler-plugin</artifactId>\n            <version>3.8.1</version>\n            <configuration>\n                <source>1.8</source>\n                <target>1.8</target>\n            </configuration>\n        </plugin>\n    </plugins>\n    </build>\n   </project>\n```\n\n----------------------------------------\n\nTITLE: Implementing RestoreHandler for PrepareDowload Lambda Function in Java\nDESCRIPTION: This class handles the PrepareDowload Lambda function, which prepares a download based on selected labels. It processes the input, interacts with various services (DynamoDB, S3, SNS), and returns a download URL.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/pam_source_files/README.md#2025-04-09_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\npackage com.example.photo.handlers;\n\nimport com.amazonaws.services.lambda.runtime.Context;\nimport com.amazonaws.services.lambda.runtime.RequestHandler;\nimport com.amazonaws.services.lambda.runtime.events.APIGatewayProxyRequestEvent;\nimport com.amazonaws.services.lambda.runtime.events.APIGatewayProxyResponseEvent;\nimport com.example.photo.endpoints.DownloadEndpoint;\nimport com.example.photo.services.DynamoDBService;\nimport com.example.photo.services.S3Service;\nimport com.example.photo.services.SnsService;\nimport org.json.JSONObject;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\nimport static com.example.photo.PhotoApplicationResources.toJson;\nimport static com.example.photo.PhotoApplicationResources.CORS_HEADER_MAP;\n\npublic class RestoreHandler implements RequestHandler<APIGatewayProxyRequestEvent, APIGatewayProxyResponseEvent> {\n\n  @Override\n  public APIGatewayProxyResponseEvent handleRequest(APIGatewayProxyRequestEvent input, Context context) {\n    try {\n      context.getLogger().log(\"RestoreHandler handleRequest\" + toJson(input));\n      JSONObject body = new JSONObject(input.getBody());\n      List<String> labels = body.getJSONArray(\"tags\")\n          .toList()\n          .stream()\n          .filter(String.class::isInstance)\n          .map(String.class::cast)\n          .collect(Collectors.toList());\n      context.getLogger().log(\"Restoring labels \" + toJson(labels));\n\n      DownloadEndpoint restoreEndpoint = new DownloadEndpoint(new DynamoDBService(), new S3Service(), new SnsService());\n      String url = restoreEndpoint.download(\"notify\", labels);\n\n      context.getLogger().log(\"Labels archived to URL \" + url);\n\n      Map<String, String> headersMap = Map.of(\n          \"Access-Control-Allow-Origin\", \"*\");\n\n      return new APIGatewayProxyResponseEvent()\n          .withStatusCode(200)\n          .withHeaders(headersMap)\n          .withBody(\"{}\")\n          .withIsBase64Encoded(false);\n    } catch (Exception e) {\n      return new APIGatewayProxyResponseEvent()\n          .withStatusCode(500)\n          .withHeaders(CORS_HEADER_MAP)\n          .withBody(toJson(e))\n          .withIsBase64Encoded(false);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Decrypting Data with KMS using PHP\nDESCRIPTION: This example demonstrates how to decrypt data using a KMS key with the AWS SDK for PHP. It's an essential operation for handling encrypted data.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/php/example_code/kms/README.md#2025-04-09_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nKmsService.php#L64\n```\n\n----------------------------------------\n\nTITLE: Copying Objects in Amazon S3 using SDK for SAP ABAP\nDESCRIPTION: This code snippet demonstrates how to copy an object within Amazon S3 using the SDK for SAP ABAP.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/sap-abap/services/s3/README.md#2025-04-09_snippet_1\n\nLANGUAGE: ABAP\nCODE:\n```\nzcl_aws1_s3_actions.clas.abap#L61\n```\n\n----------------------------------------\n\nTITLE: Upload Lambda Function Response JSON Example\nDESCRIPTION: JSON response example from the Upload Lambda function that returns a presigned URL. This URL allows the client to upload the image directly to the S3 bucket with temporary credentials.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/creating_pam/README.md#2025-04-09_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n{\n  \"statusCode\": 200,\n  \"headers\": {\n    \"Access-Control-Allow-Origin\": \"*\"\n  },\n  \"body\": \"{\\\"url\\\":\\\"https://xxxxxxxxxxxx.amazonaws.com/xxxxxxxxxxxxxxx-mountain.jpg?X-Amz-Security-xxxxxxxxxxxxxxxxxxx\\\"}\",\n  \"isBase64Encoded\": false\n }\n```\n\n----------------------------------------\n\nTITLE: Learning EC2 Basics with Instance and Security Management\nDESCRIPTION: A scenario that demonstrates core EC2 operations including creating key pairs and security groups, launching instances, stopping and starting instances, and managing Elastic IP addresses.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/EC2/README.md#2025-04-09_snippet_27\n\nLANGUAGE: C#\nCODE:\n```\n// Learn the basics\n```\n\n----------------------------------------\n\nTITLE: Deleting IAM Policy in Java\nDESCRIPTION: This snippet shows how to delete an IAM policy using the AWS SDK for Java 2.x.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/iam/README.md#2025-04-09_snippet_10\n\nLANGUAGE: Java\nCODE:\n```\nsrc/main/java/com/example/iam/DeletePolicy.java#L6\n```\n\n----------------------------------------\n\nTITLE: Executing Amazon Redshift Scenario Example in Python\nDESCRIPTION: This command runs a comprehensive scenario that demonstrates various Redshift operations including creating a cluster, listing databases, creating and populating a table, querying data, modifying the cluster, and deleting it.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/redshift/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython redshift_scenario.py\n```\n\n----------------------------------------\n\nTITLE: Querying a DynamoDB Table in Kotlin\nDESCRIPTION: This snippet shows how to query a DynamoDB table using the AWS SDK for Kotlin. It's part of the basic operations for interacting with DynamoDB data.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/dynamodb/README.md#2025-04-09_snippet_6\n\nLANGUAGE: Kotlin\nCODE:\n```\nQuery(src/main/kotlin/com/kotlin/dynamodb/QueryTable.kt#L47)\n```\n\n----------------------------------------\n\nTITLE: Multi-factor Authentication Scenario with Amazon Cognito\nDESCRIPTION: A comprehensive example demonstrating user signup flow with MFA integration using Amazon Cognito. This scenario shows how to associate a new user with an MFA application for enhanced security.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/cognito/README.md#2025-04-09_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Complete SnsService Class Implementation for Amazon SNS\nDESCRIPTION: A comprehensive C# class that interacts with Amazon SNS and Translate services. It provides methods for subscribing and unsubscribing emails, publishing messages with optional translation to French or Spanish, and retrieving subscription lists.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/cross-service/SubscribePublishTranslate/README.md#2025-04-09_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace SNSExample.Controllers\n{\n    using System.Collections.Generic;\n    using System.Threading.Tasks;\n    using System.Xml;\n    using Amazon;\n    using Amazon.SimpleNotificationService;\n    using Amazon.SimpleNotificationService.Model;\n    using Amazon.Translate;\n    using Amazon.Translate.Model;\n\n    public class SnsService\n    {\n        private static readonly string TopicArn = \"<PUT TOPIC ARN HERE>\";\n\n        public async Task<string> UnSubEmail(string email)\n        {\n            var client = new AmazonSimpleNotificationServiceClient(RegionEndpoint.USEast2);\n            var arnValue = await GetSubArn(client, email);\n            await RemoveSub(client, arnValue);\n            return $\"{email} was successfully deleted!\";\n        }\n\n        public async Task<string> PubTopic(string body, string lang)\n        {\n            var client = new AmazonSimpleNotificationServiceClient(RegionEndpoint.USEast2);\n            var message = string.Empty;\n\n            switch (lang.ToLower())\n            {\n                case \"french\":\n                    message = TranslateBody(body, \"fr\");\n                    break;\n                case \"spanish\":\n                    message = TranslateBody(body, \"es\");\n                    break;\n                default:\n                    message = body;\n                    break;\n            }\n\n            var msgId = await PublishMessage(client, message);\n            return msgId;\n        }\n\n        public async Task<string> SubEmail(string email)\n        {\n            var client = new AmazonSimpleNotificationServiceClient(RegionEndpoint.USEast2);\n            var subArn = await SubscribeEmail(client, email);\n            return subArn;\n        }\n\n        public async Task<string> GetSubs()\n        {\n            var client = new AmazonSimpleNotificationServiceClient(RegionEndpoint.USEast2);\n            var subscriptions = await GetSubscriptionsListAsync(client);\n            var val = DisplaySubscriptionList(subscriptions);\n            return val;\n        }\n\n        public static async Task<string> RemoveSub(IAmazonSimpleNotificationService client, string subArn)\n        {\n            var request = new UnsubscribeRequest();\n            request.SubscriptionArn = subArn;\n            await client.UnsubscribeAsync(request);\n\n            return string.Empty;\n        }\n\n        public static async Task<string> GetSubArn(IAmazonSimpleNotificationService client, string email)\n        {\n            var request = new ListSubscriptionsByTopicRequest();\n            request.TopicArn = TopicArn;\n            var subArn = string.Empty;\n\n            var response = await client.ListSubscriptionsByTopicAsync(request);\n            List<Subscription> allSubs = response.Subscriptions;\n\n            // Get the ARN Value for this subscription.\n            foreach (Subscription sub in allSubs)\n            {\n                if (sub.Endpoint.Equals(email))\n                {\n                    subArn = sub.SubscriptionArn;\n                    return subArn;\n                }\n            }\n\n            return string.Empty;\n        }\n\n        public static async Task<string> PublishMessage(IAmazonSimpleNotificationService client, string body)\n        {\n            var request = new PublishRequest();\n            request.Message = body;\n            request.TopicArn = TopicArn;\n\n            var response = await client.PublishAsync(request);\n\n            return response.MessageId;\n        }\n\n        public static async Task<string> SubscribeEmail(IAmazonSimpleNotificationService client, string email)\n        {\n            var request = new SubscribeRequest();\n            request.Protocol = \"email\";\n            request.Endpoint = email;\n            request.TopicArn = TopicArn;\n            request.ReturnSubscriptionArn = true;\n\n            var response = await client.SubscribeAsync(request);\n\n            return response.SubscriptionArn;\n        }\n\n        public static async Task<List<Subscription>> GetSubscriptionsListAsync(IAmazonSimpleNotificationService client)\n        {\n            var request = new ListSubscriptionsByTopicRequest\n            {\n                TopicArn = TopicArn,\n            };\n            var response = await client.ListSubscriptionsByTopicAsync(request);\n            return response.Subscriptions;\n        }\n\n        public string DisplaySubscriptionList(List<Subscription> subscriptionList)\n        {\n            var email = string.Empty;\n            List<string> emailList = new List<string>();\n            foreach (var subscription in subscriptionList)\n            {\n                emailList.Add(subscription.Endpoint);\n                email = subscription.Endpoint;\n            }\n\n            var xml = GenerateXML(emailList);\n            return xml;\n        }\n\n        // Convert the list to XML to pass back to the view.\n        private string GenerateXML(List<string> subsList)\n        {\n            XmlDocument doc = new XmlDocument();\n            XmlNode docNode = doc.CreateXmlDeclaration(\"1.0\", \"UTF-8\", null);\n            doc.AppendChild(docNode);\n\n            XmlNode subsNode = doc.CreateElement(\"Subs\");\n            doc.AppendChild(subsNode);\n\n            // Iterate through the collection.\n            foreach (string sub in subsList)\n            {\n                XmlNode subNode = doc.CreateElement(\"Sub\");\n                subsNode.AppendChild(subNode);\n\n                XmlNode email = doc.CreateElement(\"email\");\n                email.AppendChild(doc.CreateTextNode(sub));\n                subNode.AppendChild(email);\n            }\n\n            return doc.OuterXml;\n        }\n\n        private string TranslateBody(string msg, string lan)\n        {\n            var translateClient = new AmazonTranslateClient(RegionEndpoint.USEast2);\n            var request = new TranslateTextRequest\n            {\n                SourceLanguageCode = \"en\",\n                TargetLanguageCode = lan,\n                Text = msg,\n            };\n\n            var response = translateClient.TranslateTextAsync(request);\n            return response.Result.TranslatedText;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving an Email Template in Amazon SES using C++\nDESCRIPTION: This code snippet illustrates how to retrieve an email template in Amazon SES using the AWS SDK for C++. The implementation is in the 'get_template.cpp' file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/ses/README.md#2025-04-09_snippet_9\n\nLANGUAGE: C++\nCODE:\n```\n// See get_template.cpp, line 22\n```\n\n----------------------------------------\n\nTITLE: Retrieving an Object from Amazon S3 using AWS SDK for Swift\nDESCRIPTION: This code snippet demonstrates how to retrieve (download) an object from an Amazon S3 bucket using the AWS SDK for Swift.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/swift/example_code/s3/README.md#2025-04-09_snippet_6\n\nLANGUAGE: Swift\nCODE:\n```\nbasics/Sources/ServiceHandler/ServiceHandler.swift#L163\n```\n\n----------------------------------------\n\nTITLE: Creating Presigned URLs for S3 Objects\nDESCRIPTION: Shows how to generate presigned URLs for Amazon S3 objects and use them for object upload. This allows temporary access to S3 objects without requiring AWS credentials.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/s3/README.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n// Code reference: src/main/kotlin/com/kotlin/s3/PresigningExamples.kt\n```\n\n----------------------------------------\n\nTITLE: Running the HealthImaging Scenario via Command Line\nDESCRIPTION: Command line instruction for executing the HealthImaging scenario with different options for deployment, demonstration, and cleanup. The command accepts parameters for scenario type, help, automatic confirmation, and verbose output.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/medical-imaging/scenarios/health-image-sets/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode index.js --scenario <deploy | demo | destroy> [-h|--help] [-y|--yes] [-v|--verbose]\n```\n\n----------------------------------------\n\nTITLE: Viewing Legal Hold Settings for an S3 Object\nDESCRIPTION: This code snippet demonstrates how to view the legal hold settings for a specific S3 object. It shows the process of selecting an object and displaying its legal hold status.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/s3_object_lock/SPECIFICATION.md#2025-04-09_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nEnter the number of the object to view:\n3\n        Object legal hold for dotnet-example-file0.txt in dotnet-s3-lock-example0-lock-enabled:\n        Status: ON\n```\n\n----------------------------------------\n\nTITLE: Configuring Amazon SES v2 Actions in YAML\nDESCRIPTION: Comprehensive YAML configuration defining Amazon SES v2 actions across Java, Python, and Rust SDKs. Includes configurations for creating and managing contacts, contact lists, email identities, email templates, and sending emails.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/sesv2_weekly_mailer/content/71_metadata.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsesv2_CreateContact:\n  title: Add a contact to a contact list using Amazon SES v2\n  category:\n  languages:\n    Java:\n      versions:\n        - sdk_version: 2\n          github: javav2/example_code/ses\n          excerpts:\n            - description:\n              snippet_tags:\n                - sesv2.java2.newsletter.CreateContact\n    Python:\n      versions:\n        - sdk_version: 3\n          github: python/example_code/sesv2\n          excerpts:\n            - description:\n              snippet_tags:\n                - python.example_code.sesv2.CreateContact\n    Rust:\n      versions:\n        - sdk_version: 1\n          github: rustv1/examples/ses\n          excerpts:\n            - description:\n              snippet_tags:\n                - sesv2.rust.create-contact\n  services:\n    sesv2: { CreateContact }\n\nsesv2_CreateContactList:\n  title: Create a contact list for Amazon SES v2\n  category:\n  languages:\n    Java:\n      versions:\n        - sdk_version: 2\n          github: javav2/example_code/ses\n          excerpts:\n            - description:\n              snippet_tags:\n                - sesv2.java2.newsletter.CreateContactList\n    Python:\n      versions:\n        - sdk_version: 3\n          github: python/example_code/sesv2\n          excerpts:\n            - description:\n              snippet_tags:\n                - python.example_code.sesv2.CreateContactList\n    Rust:\n      versions:\n        - sdk_version: 1\n          github: rustv1/examples/ses\n          excerpts:\n            - description:\n              snippet_tags:\n                - sesv2.rust.create-contact-list\n  services:\n    sesv2: { CreateContactList }\n\nsesv2_CreateEmailIdentity:\n  title: Create an email identity for Amazon SES v2\n  category:\n  languages:\n    Java:\n      versions:\n        - sdk_version: 2\n          github: javav2/example_code/ses\n          excerpts:\n            - description:\n              snippet_tags:\n                - sesv2.java2.newsletter.CreateEmailIdentity\n    Python:\n      versions:\n        - sdk_version: 3\n          github: python/example_code/sesv2\n          excerpts:\n            - description:\n              snippet_tags:\n                - python.example_code.sesv2.CreateEmailIdentity\n    Rust:\n      versions:\n        - sdk_version: 1\n          github: rustv1/examples/ses\n          excerpts:\n            - description:\n              snippet_tags:\n                - sesv2.rust.create-email-identity\n  services:\n    sesv2: { CreateEmailIdentity }\n\nsesv2_CreateEmailTemplate:\n  title: Create an email template for Amazon SES v2\n  category:\n  languages:\n    Java:\n      versions:\n        - sdk_version: 2\n          github: javav2/example_code/ses\n          excerpts:\n            - description:\n              snippet_tags:\n                - sesv2.java2.newsletter.CreateEmailTemplate\n    Python:\n      versions:\n        - sdk_version: 3\n          github: python/example_code/sesv2\n          excerpts:\n            - description:\n              snippet_tags:\n                - python.example_code.sesv2.CreateEmailTemplate\n    Rust:\n      versions:\n        - sdk_version: 1\n          github: rustv1/examples/ses\n          excerpts:\n            - description:\n              snippet_tags:\n                - sesv2.rust.create-email-template\n  services:\n    sesv2: { CreateEmailTemplate }\n\nsesv2_DeleteContactList:\n  title: Delete a contact list for Amazon SES v2\n  category:\n  languages:\n    Java:\n      versions:\n        - sdk_version: 2\n          github: javav2/example_code/ses\n          excerpts:\n            - description:\n              snippet_tags:\n                - sesv2.java2.newsletter.DeleteContactList\n    Python:\n      versions:\n        - sdk_version: 3\n          github: python/example_code/sesv2\n          excerpts:\n            - description:\n              snippet_tags:\n                - python.example_code.sesv2.DeleteContactList\n    Rust:\n      versions:\n        - sdk_version: 1\n          github: rustv1/examples/ses\n          excerpts:\n            - description:\n              snippet_tags:\n                - sesv2.rust.delete-contact-list\n  services:\n    sesv2: { DeleteContactList }\n\nsesv2_DeleteEmailIdentity:\n  title: Delete an email identity for Amazon SES v2\n  category:\n  languages:\n    Java:\n      versions:\n        - sdk_version: 2\n          github: javav2/example_code/ses\n          excerpts:\n            - description:\n              snippet_tags:\n                - sesv2.java2.newsletter.DeleteEmailIdentity\n    Python:\n      versions:\n        - sdk_version: 3\n          github: python/example_code/sesv2\n          excerpts:\n            - description:\n              snippet_tags:\n                - python.example_code.sesv2.DeleteEmailIdentity\n    Rust:\n      versions:\n        - sdk_version: 1\n          github: rustv1/examples/ses\n          excerpts:\n            - description:\n              snippet_tags:\n                - sesv2.rust.delete-email-identity\n  services:\n    sesv2: { DeleteEmailIdentity }\n\nsesv2_DeleteEmailTemplate:\n  title: Delete an email template for Amazon SES v2\n  category:\n  languages:\n    Java:\n      versions:\n        - sdk_version: 2\n          github: javav2/example_code/ses\n          excerpts:\n            - description:\n              snippet_tags:\n                - sesv2.java2.newsletter.DeleteEmailTemplate\n    Python:\n      versions:\n        - sdk_version: 3\n          github: python/example_code/sesv2\n          excerpts:\n            - description:\n              snippet_tags:\n                - python.example_code.sesv2.DeleteEmailTemplate\n    Rust:\n      versions:\n        - sdk_version: 1\n          github: rustv1/examples/ses\n          excerpts:\n            - description:\n              snippet_tags:\n                - sesv2.rust.delete-email-template\n  services:\n    sesv2: { DeleteEmailTemplate }\n\nsesv2_ListContacts:\n  title: List contacts in a contact list for Amazon SES v2\n  category:\n  languages:\n    Java:\n      versions:\n        - sdk_version: 2\n          github: javav2/example_code/ses\n          excerpts:\n            - description:\n              snippet_tags:\n                - sesv2.java2.newsletter.ListContacts\n    Python:\n      versions:\n        - sdk_version: 3\n          github: python/example_code/sesv2\n          excerpts:\n            - description:\n              snippet_tags:\n                - python.example_code.sesv2.ListContacts\n    Rust:\n      versions:\n        - sdk_version: 1\n          github: rustv1/examples/ses\n          excerpts:\n            - description:\n              snippet_tags:\n                - sesv2.rust.list-contacts\n  services:\n    sesv2: { ListContacts }\n\nsesv2_SendEmail:\n  title: Send an email using Amazon SES v2\n  category:\n  languages:\n    Java:\n      versions:\n        - sdk_version: 2\n          github: javav2/example_code/ses\n          excerpts:\n            - description:\n              snippet_tags:\n                - sesv2.java2.newsletter.SendEmail\n    Python:\n      versions:\n        - sdk_version: 3\n          github: python/example_code/sesv2\n          excerpts:\n            - description:\n              snippet_tags:\n                - python.example_code.sesv2.SendEmail\n    Rust:\n      versions:\n        - sdk_version: 1\n          github: rustv1/examples/ses\n          excerpts:\n            - description:\n              snippet_tags:\n                - sesv2.rust.send-email\n  services:\n    sesv2: { SendEmail }\n```\n\n----------------------------------------\n\nTITLE: Creating S3 Batch Job in Java\nDESCRIPTION: Creates a new S3 batch job using the CreateJob API\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/s3/src/main/java/com/example/s3/batch/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nS3BatchActions.java#L314\n```\n\n----------------------------------------\n\nTITLE: Listing S3 Buckets in Java\nDESCRIPTION: Code example that demonstrates how to list all S3 buckets associated with an AWS account using the ListBuckets operation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/s3/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\n- [ListBuckets](src/main/java/com/example/s3/ListBuckets.java#L6)\n```\n\n----------------------------------------\n\nTITLE: Deleting an Object from Amazon S3 using AWS SDK for Swift\nDESCRIPTION: This code snippet demonstrates how to delete a single object from an Amazon S3 bucket using the AWS SDK for Swift.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/swift/example_code/s3/README.md#2025-04-09_snippet_4\n\nLANGUAGE: Swift\nCODE:\n```\nbasics/Sources/ServiceHandler/ServiceHandler.swift#L257\n```\n\n----------------------------------------\n\nTITLE: Creating S3 Bucket using AWS CLI\nDESCRIPTION: This command creates an S3 bucket named 'amzn-s3-demo-bucket' in the us-east-1 region using the AWS CLI.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/cross-service/S3ObjectLambdaFunction/README.md#2025-04-09_snippet_0\n\nLANGUAGE: CMD\nCODE:\n```\naws s3api create-bucket --bucket amzn-s3-demo-bucket --region us-east-1\n```\n\n----------------------------------------\n\nTITLE: Implementing Spring MVC Controller for Amazon S3 Video Streaming\nDESCRIPTION: The VideoStreamController class handles HTTP requests for video streaming, menu item retrieval, and file uploads. It includes endpoints for the main page, video player, upload interface, and streaming functionality that interacts with Amazon S3.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/create_spring_stream_app/README.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage com.example;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.ResponseBody;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.multipart.MultipartFile;\nimport org.springframework.web.servlet.ModelAndView;\nimport org.springframework.web.servlet.view.RedirectView;\nimport reactor.core.publisher.Mono;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\n\n@Controller\npublic class VideoStreamController {\n\n    private final VideoStreamService vid;\n\n    @Autowired\n    VideoStreamController(\n        VideoStreamService vid\n    ) {\n        this.vid = vid;\n    }\n\n    private final String bucket = \"<Enter your S3 bucket>\";\n\n    @RequestMapping(value = \"/\")\n    public String root() {\n        return \"index\";\n    }\n\n    @GetMapping(\"/watch\")\n    public String designer() {\n        return \"video\";\n    }\n\n    @GetMapping(\"/upload\")\n    public String upload() {\n        return \"upload\";\n    }\n\n    // Upload a MP4 to an Amazon S3 bucket\n    @RequestMapping(value = \"/fileupload\", method = RequestMethod.POST)\n    @ResponseBody\n    public ModelAndView singleFileUpload(@RequestParam(\"file\") MultipartFile file, @RequestParam String description) {\n        try {\n            byte[] bytes = file.getBytes();\n            String name = file.getOriginalFilename() ;\n\n            // Put the MP4 file into an Amazon S3 bucket.\n            vid.putVideo(bytes, bucket, name, description);\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return new ModelAndView(new RedirectView(\"upload\"));\n    }\n\n    // Returns items to populate the Video menu.\n    @RequestMapping(value = \"/items\", method = RequestMethod.GET)\n    @ResponseBody\n    public String getItems(HttpServletRequest request, HttpServletResponse response) {\n        String xml = vid.getTags(bucket);\n        return xml;\n    }\n\n    // Returns the video in the bucket specified by the ID value.\n    @GetMapping(\"/{id}/stream\")\n    public Mono<ResponseEntity<StreamingResponseBody>> streamVideo(@PathVariable String id) {\n        String fileName = id;\n        return Mono.just(vid.getObjectBytes(bucket, fileName));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Video Face Detection with Amazon Rekognition in Java\nDESCRIPTION: This class uses Amazon Rekognition to detect faces in videos stored in S3. It includes methods for initiating face detection jobs and retrieving detailed results. The class requires valid AWS credentials and proper IAM roles set up for Rekognition and SNS.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/video_analyzer_application/README.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.video;\n\nimport org.springframework.stereotype.Component;\nimport software.amazon.awssdk.auth.credentials.EnvironmentVariableCredentialsProvider;\nimport software.amazon.awssdk.regions.Region;\nimport software.amazon.awssdk.services.rekognition.RekognitionClient;\nimport software.amazon.awssdk.services.rekognition.model.*;\nimport software.amazon.awssdk.services.rekognition.model.S3Object;\nimport java.util.ArrayList;\nimport java.util.List;\n\n@Component\npublic class VideoDetectFaces {\n\nString topicArn = \"<enter a topic ARN>\";\nString roleArn = \"<enter your role ARN>\"\n\nprivate RekognitionClient getRecClient() {\n    Region region = Region.US_EAST_1;\n    RekognitionClient rekClient = RekognitionClient.builder()\n            .credentialsProvider(EnvironmentVariableCredentialsProvider.create())\n            .region(region)\n            .build();\n    return rekClient;\n}\n\nprivate NotificationChannel getChannel() {\n\n    NotificationChannel channel = NotificationChannel.builder()\n            .snsTopicArn(topicArn)\n            .roleArn(roleArn)\n            .build();\n    return channel;\n}\n\npublic String StartFaceDetection(String bucket, String video) {\n    String startJobId=\"\";\n    try {\n        RekognitionClient rekClient = getRecClient();\n        software.amazon.awssdk.services.rekognition.model.S3Object s3Obj = S3Object.builder()\n                .bucket(bucket)\n                .name(video)\n                .build();\n\n        Video vidOb = Video.builder()\n                .s3Object(s3Obj)\n                .build();\n\n        StartFaceDetectionRequest faceDetectionRequest = StartFaceDetectionRequest.builder()\n                .jobTag(\"Faces\")\n                .notificationChannel(getChannel())\n                .faceAttributes(FaceAttributes.ALL)\n                .video(vidOb)\n                .build();\n\n        StartFaceDetectionResponse startLabelDetectionResult = rekClient.startFaceDetection(faceDetectionRequest);\n        startJobId=startLabelDetectionResult.jobId();\n        return startJobId;\n\n    } catch(RekognitionException e) {\n        System.out.println(e.getMessage());\n        System.exit(1);\n    }\n    return \"\";\n }\n\n // Processes the Job and returns of List of labels\n public List<FaceItems> GetFaceResults(String startJobId) {\n\n    List<FaceItems> items =new ArrayList<>();\n    try {\n        RekognitionClient rekClient = getRecClient();\n        String paginationToken=null;\n        GetFaceDetectionResponse faceDetectionResponse=null;\n        Boolean finished = false;\n        String status=\"\";\n        int yy=0 ;\n\n        do{\n            if (faceDetectionResponse !=null)\n                paginationToken = faceDetectionResponse.nextToken();\n\n            GetFaceDetectionRequest recognitionRequest = GetFaceDetectionRequest.builder()\n                    .jobId(startJobId)\n                    .nextToken(paginationToken)\n                    .maxResults(10)\n                    .build();\n\n            // Wait until the job succeeds\n            while (!finished) {\n\n                faceDetectionResponse = rekClient.getFaceDetection(recognitionRequest);\n                status = faceDetectionResponse.jobStatusAsString();\n\n                if (status.compareTo(\"SUCCEEDED\") == 0)\n                    finished = true;\n                else {\n                    System.out.println(yy + \" status is: \" + status);\n                    Thread.sleep(1000);\n                }\n                yy++;\n            }\n\n            finished = false;\n\n            // Push face information to the list\n            List<FaceDetection> faces= faceDetectionResponse.faces();\n\n            FaceItems faceItem;\n            for (FaceDetection face: faces) {\n\n                faceItem = new FaceItems();\n\n                String age = face.face().ageRange().toString();\n                String beard = face.face().beard().toString();\n                String eyeglasses = face.face().eyeglasses().toString();\n                String eyesOpen = face.face().eyesOpen().toString();\n                String mustache = face.face().mustache().toString();\n                String smile = face.face().smile().toString();\n\n                faceItem.setAgeRange(age);\n                faceItem.setBeard(beard);\n                faceItem.setEyeglasses(eyeglasses);\n                faceItem.setEyesOpen(eyesOpen);\n                faceItem.setMustache(mustache);\n                faceItem.setSmile(smile);\n\n                items.add(faceItem);\n               }\n\n        } while (faceDetectionResponse !=null && faceDetectionResponse.nextToken() != null);\n\n        return items;\n\n\n    } catch(RekognitionException | InterruptedException e) {\n        System.out.println(e.getMessage());\n        System.exit(1);\n    }\n    return null;\n   }\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating an AWS Glue Crawler in Java\nDESCRIPTION: Code that demonstrates how to create an AWS Glue crawler to crawl a data source and populate the AWS Glue Data Catalog.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/glue/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nGlueScenario.java#L335\n```\n\n----------------------------------------\n\nTITLE: Getting S3 Bucket Policies in JavaScript\nDESCRIPTION: This code snippet demonstrates how to retrieve the policy of an S3 bucket using the GetBucketPolicy operation in the AWS SDK for JavaScript (v3).\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/s3/README.md#2025-04-09_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n- [GetBucketPolicy](actions/get-bucket-policy.js#L4)\n```\n\n----------------------------------------\n\nTITLE: Deleting KMS Alias with Java SDK\nDESCRIPTION: This code snippet shows how to delete an alias for a KMS key using the AWS SDK for Java 2.x. It uses the DeleteAlias operation to remove the specified alias.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/kms/README.md#2025-04-09_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\nKMSActions.java#L620\n```\n\n----------------------------------------\n\nTITLE: Running AWS Glue Basic Scenario\nDESCRIPTION: Command to execute the main AWS Glue example that demonstrates creating crawlers, listing databases, creating ETL jobs, and managing resources.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/glue/README.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython glue_wrapper.py\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for Amazon Bedrock Agents Examples in Python\nDESCRIPTION: This snippet shows how to install the necessary packages for running the Amazon Bedrock Agents examples using pip in a virtual environment.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/bedrock-agent/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Scanning DynamoDB Items in Go\nDESCRIPTION: Scans table for items matching specific rating and year criteria using Expression Builder. Requires table name, minimum rating, and year as input parameters.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/dynamodb/README.md#2025-04-09_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ngo run ScanItems.go -t TABLE -r RATING -y YEAR\n```\n\n----------------------------------------\n\nTITLE: AWS Comprehend Service Implementation for Sentiment Analysis\nDESCRIPTION: Service class that provides methods for detecting text sentiment and dominant language using Amazon Comprehend. Uses async client to perform sentiment analysis and language detection operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_fsa_app/README.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.fsa.services;\n\nimport org.json.simple.JSONObject;\nimport software.amazon.awssdk.regions.Region;\nimport software.amazon.awssdk.services.comprehend.ComprehendAsyncClient;\nimport software.amazon.awssdk.services.comprehend.model.ComprehendException;\nimport software.amazon.awssdk.services.comprehend.model.DetectDominantLanguageRequest;\nimport software.amazon.awssdk.services.comprehend.model.DetectDominantLanguageResponse;\nimport software.amazon.awssdk.services.comprehend.model.DetectSentimentRequest;\nimport software.amazon.awssdk.services.comprehend.model.DetectSentimentResponse;\nimport software.amazon.awssdk.services.comprehend.model.DominantLanguage;\nimport java.util.List;\nimport java.util.concurrent.CompletableFuture;\n\npublic class DetectSentimentService {\n\n    private static ComprehendAsyncClient comprehendAsyncClient;\n    private static synchronized ComprehendAsyncClient getComprehendAsyncClient() {\n        if (comprehendAsyncClient == null) {\n            comprehendAsyncClient = ComprehendAsyncClient.builder()\n                .region(Region.US_EAST_1)\n                .build();\n        }\n        return comprehendAsyncClient;\n    }\n\n    public JSONObject detectSentiments(String text){\n        try {\n            String languageCode = detectTheDominantLanguage(text);\n            DetectSentimentRequest detectSentimentRequest = DetectSentimentRequest.builder()\n                .text(text)\n                .languageCode(languageCode)\n                .build();\n\n            CompletableFuture<?> future  = getComprehendAsyncClient().detectSentiment(detectSentimentRequest);\n            future.join();\n\n            DetectSentimentResponse detectSentimentResult = (DetectSentimentResponse) future.join();\n            JSONObject jsonObject = new JSONObject();\n            jsonObject.put(\"sentiment\", detectSentimentResult.sentimentAsString());\n            jsonObject.put(\"language_code\", languageCode);\n            return jsonObject;\n\n        } catch (ComprehendException e) {\n            System.err.println(e.awsErrorDetails().errorMessage());\n            throw e;\n        }\n    }\n\n    public String detectTheDominantLanguage(String text){\n        try {\n            DetectDominantLanguageRequest request = DetectDominantLanguageRequest.builder()\n                .text(text)\n                .build();\n\n            CompletableFuture<?> future = getComprehendAsyncClient().detectDominantLanguage(request);\n            future.join();\n\n            DetectDominantLanguageResponse resp = (DetectDominantLanguageResponse) future.join();\n            List<DominantLanguage> allLanList = resp.languages();\n            if (!allLanList.isEmpty()) {\n                DominantLanguage firstLanguage = allLanList.get(0);\n                return firstLanguage.languageCode();\n            } else {\n                return \"No languages found\";\n            }\n\n        } catch (ComprehendException e) {\n            System.out.println(e.getMessage());\n            throw e;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Understanding CloudWatch Basic Operations with Java SDK\nDESCRIPTION: A scenario demonstrating core CloudWatch operations including listing metrics and namespaces, working with statistics, managing dashboards, creating alarms, and handling anomaly detection.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/cloudwatch/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nsrc/main/java/com/example/cloudwatch/scenario/CloudWatchScenario.java\n```\n\n----------------------------------------\n\nTITLE: Deleting S3 Bucket Policies in JavaScript\nDESCRIPTION: This code snippet demonstrates how to delete the policy associated with an S3 bucket using the DeleteBucketPolicy operation in the AWS SDK for JavaScript (v3).\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/s3/README.md#2025-04-09_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n- [DeleteBucketPolicy](actions/delete-bucket-policy.js#L4)\n```\n\n----------------------------------------\n\nTITLE: Multi-Region Access Point Operations\nDESCRIPTION: Demonstrates how to work with Multi-Region Access Points in Amazon S3, including creating access points and retrieving objects through them. Handles advanced S3 functionality for multi-region scenarios.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/s3/README.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n// Code reference: src/main/kotlin/com/kotlin/s3/MrapExample.kt\n```\n\n----------------------------------------\n\nTITLE: Describing IAM Instance Profile Associations\nDESCRIPTION: Demonstrates how to list IAM instance profile associations for EC2 instances. These profiles allow EC2 instances to securely access AWS services using IAM roles.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/EC2/README.md#2025-04-09_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\n// DescribeIamInstanceProfileAssociations\n```\n\n----------------------------------------\n\nTITLE: Running Claude 3 Demo\nDESCRIPTION: Command to execute the demonstration script for Anthropic Claude 3 model integration.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/bedrock-runtime/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython models/anthropic/claude_3.py\n```\n\n----------------------------------------\n\nTITLE: Getting S3 Bucket Location in Rust\nDESCRIPTION: This code snippet demonstrates how to retrieve the location of an S3 bucket using the AWS SDK for Rust. It uses the GetBucketLocation operation to determine the region where a bucket is stored.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/s3/README.md#2025-04-09_snippet_8\n\nLANGUAGE: Rust\nCODE:\n```\nGetBucketLocation\n```\n\n----------------------------------------\n\nTITLE: Updating an Item in DynamoDB Table in Kotlin\nDESCRIPTION: This snippet demonstrates how to update an item in a DynamoDB table using the AWS SDK for Kotlin. It's part of the basic operations for modifying DynamoDB data.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/dynamodb/README.md#2025-04-09_snippet_8\n\nLANGUAGE: Kotlin\nCODE:\n```\nUpdateItem(src/main/kotlin/com/kotlin/dynamodb/UpdateItem.kt#L50)\n```\n\n----------------------------------------\n\nTITLE: Listing IAM Policies in Java\nDESCRIPTION: This snippet demonstrates how to list IAM policies using the AWS SDK for Java 2.x. It's part of the 'Hello IAM' example, which serves as an introduction to working with IAM.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/iam/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nsrc/main/java/com/example/iam/HelloIAM.java#L6\n```\n\n----------------------------------------\n\nTITLE: Implementing SnsService Class for Amazon SNS Operations in Java\nDESCRIPTION: This class provides methods for interacting with Amazon SNS, including subscribing and unsubscribing email addresses, publishing messages, and retrieving subscriptions. It uses the SnsAsyncClient for asynchronous operations and handles response data using CompletableFuture and AtomicReference.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_sns_async/README.md#2025-04-09_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\npackage com.spring.sns;\n\nimport org.springframework.stereotype.Component;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\nimport software.amazon.awssdk.auth.credentials.EnvironmentVariableCredentialsProvider;\nimport software.amazon.awssdk.services.sns.model.ListSubscriptionsByTopicRequest;\nimport software.amazon.awssdk.regions.Region;\nimport software.amazon.awssdk.services.sns.SnsAsyncClient;\nimport software.amazon.awssdk.services.sns.model.ListSubscriptionsByTopicResponse;\nimport software.amazon.awssdk.services.sns.model.PublishRequest;\nimport software.amazon.awssdk.services.sns.model.PublishResponse;\nimport software.amazon.awssdk.services.sns.model.SnsException;\nimport software.amazon.awssdk.services.sns.model.SubscribeRequest;\nimport software.amazon.awssdk.services.sns.model.SubscribeResponse;\nimport software.amazon.awssdk.services.sns.model.Subscription;\nimport software.amazon.awssdk.services.sns.model.UnsubscribeRequest;\nimport software.amazon.awssdk.services.translate.TranslateAsyncClient;\nimport software.amazon.awssdk.services.translate.model.TranslateTextRequest;\nimport software.amazon.awssdk.services.translate.model.TranslateTextResponse;\nimport javax.xml.XMLConstants;\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.ParserConfigurationException;\nimport javax.xml.transform.Transformer;\nimport javax.xml.transform.TransformerConfigurationException;\nimport javax.xml.transform.TransformerException;\nimport javax.xml.transform.TransformerFactory;\nimport javax.xml.transform.dom.DOMSource;\nimport javax.xml.transform.stream.StreamResult;\nimport java.io.StringWriter;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.atomic.AtomicReference;\n\n@Component\npublic class SnsService {\n    String topicArn = \"<Enter your Amazon SNS Topic ARN>\";\n\n    private SnsAsyncClient getSnsClient() {\n        return SnsAsyncClient.builder()\n            .credentialsProvider(EnvironmentVariableCredentialsProvider.create())\n            .region(Region.US_WEST_2)\n            .build();\n    }\n\n    public void unSubEmail(String emailEndpoint) {\n        try {\n            String subscriptionArn = getTopicArnValue(emailEndpoint);\n            SnsAsyncClient snsAsyncClient = getSnsClient();\n            UnsubscribeRequest request = UnsubscribeRequest.builder()\n                .subscriptionArn(subscriptionArn)\n                .build();\n\n            snsAsyncClient.unsubscribe(request);\n\n        } catch (SnsException e) {\n            System.err.println(e.awsErrorDetails().errorMessage());\n            System.exit(1);\n        }\n    }\n\n    // Returns the Sub ARN based on the given endpoint.\n    private String getTopicArnValue(String endpoint){\n        final AtomicReference<String> reference = new AtomicReference<>();\n        SnsAsyncClient snsAsyncClient = getSnsClient();\n        try {\n            ListSubscriptionsByTopicRequest request = ListSubscriptionsByTopicRequest.builder()\n                .topicArn(topicArn)\n                .build();\n\n            CompletableFuture<ListSubscriptionsByTopicResponse> futureGet  = snsAsyncClient.listSubscriptionsByTopic(request);\n            futureGet.whenComplete((resp, err) -> {\n                List<Subscription> allSubs  = resp.subscriptions();\n                for (Subscription sub: allSubs) {\n\n                    if (sub.endpoint().compareTo(endpoint)==0)\n                        reference.set(sub.subscriptionArn());\n                }\n            });\n            futureGet.join();\n            return reference.get();\n\n        } catch (SnsException e) {\n            System.err.println(e.awsErrorDetails().errorMessage());\n            System.exit(1);\n        }\n        return \"\";\n    }\n\n    // Create a Subscription.\n    public String subEmail(String email) {\n        final AtomicReference<String> reference = new AtomicReference<>();\n        try {\n            SnsAsyncClient snsAsyncClient = getSnsClient();\n            SubscribeRequest request = SubscribeRequest.builder()\n                .protocol(\"email\")\n                .endpoint(email)\n                .returnSubscriptionArn(true)\n                .topicArn(topicArn)\n                .build();\n\n            CompletableFuture<SubscribeResponse> futureGet  = snsAsyncClient.subscribe(request);\n            futureGet.whenComplete((resp, err) -> {\n                String subscriptionArn = resp.subscriptionArn();\n                reference.set(subscriptionArn);\n            });\n            futureGet.join();\n\n            return reference.get();\n\n        } catch (SnsException e) {\n            System.err.println(e.awsErrorDetails().errorMessage());\n            System.exit(1);\n        }\n        return \"\";\n    }\n\n    public String getAllSubscriptions() {\n        final AtomicReference<List<String>> reference = new AtomicReference<>();\n        List<String> subList = new ArrayList<>() ;\n        try {\n            SnsAsyncClient snsAsyncClient = getSnsClient();\n            ListSubscriptionsByTopicRequest request = ListSubscriptionsByTopicRequest.builder()\n                .topicArn(topicArn)\n                .build();\n\n            CompletableFuture<ListSubscriptionsByTopicResponse> futureGet  = snsAsyncClient.listSubscriptionsByTopic(request);\n            futureGet.whenComplete((resp, err) -> {\n\n                List<Subscription> allSubs  = resp.subscriptions();\n                for (Subscription sub: allSubs) {\n                    subList.add(sub.endpoint());\n                }\n                reference.set(subList);\n            });\n            futureGet.join();\n\n        } catch (SnsException e) {\n            System.err.println(e.awsErrorDetails().errorMessage());\n            System.exit(1);\n        }\n\n        return convertToString(toXml(reference.get()));\n    }\n\n      public String pubTopic(String message, String lang) {\n        final AtomicReference<Integer> reference = new AtomicReference<>();\n        String body;\n\n        if (lang.compareTo(\"English\")==0)\n            body = message;\n        else if(lang.compareTo(\"French\")==0)\n            body = translateBody(message, \"fr\");\n        else\n            body = translateBody(message, \"es\");\n\n        try {\n            SnsAsyncClient snsAsyncClient = getSnsClient();\n            PublishRequest request = PublishRequest.builder()\n                .message(body)\n                .topicArn(topicArn)\n                .build();\n\n            CompletableFuture<PublishResponse> futureGet  = snsAsyncClient.publish(request);\n            futureGet.whenComplete((resp, err) -> {\n                reference.set(resp.sdkHttpResponse().statusCode());\n            });\n            futureGet.join();\n            return \" Message sent in \" +lang +\". Status was \" + reference.get();\n\n        } catch (SnsException e) {\n            System.err.println(e.awsErrorDetails().errorMessage());\n            System.exit(1);\n        }\n        return \"Error - msg not sent\";\n    }\n\n    private String translateBody(String message, String lan) {\n        final AtomicReference<String> reference = new AtomicReference<>();\n        Region region = Region.US_WEST_2;\n        TranslateAsyncClient translateClient = TranslateAsyncClient.builder()\n            .credentialsProvider(EnvironmentVariableCredentialsProvider.create())\n            .region(region)\n            .build();\n\n        TranslateTextRequest textRequest = TranslateTextRequest.builder()\n            .sourceLanguageCode(\"en\")\n            .targetLanguageCode(lan)\n            .text(message)\n            .build();\n\n        CompletableFuture<TranslateTextResponse> futureGet = translateClient.translateText(textRequest);;\n        futureGet.whenComplete((resp, err) -> {\n            reference.set(resp.translatedText());\n        });\n        futureGet.join();\n        return reference.get();\n    }\n\n    // Convert the list to XML to pass back to the view.\n    private Document toXml(List<String> subsList) {\n        try {\n            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n            factory.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n            DocumentBuilder builder = factory.newDocumentBuilder();\n            Document doc = builder.newDocument();\n\n            // Start building the XML.\n            Element root = doc.createElement(\"Subs\");\n            doc.appendChild(root);\n            // Iterate through the collection.\n\n\n        } catch (ParserConfigurationException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Activity in AWS Step Functions using Kotlin\nDESCRIPTION: Shows how to create an activity in AWS Step Functions using the AWS SDK for Kotlin with the createActivity command.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/stepfunctions/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Code not provided in the given content\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Interface for Color and Pattern Selection\nDESCRIPTION: HTML code that defines the user interface for the browser application. It includes dropdown menus for selecting colors and patterns, and a submit button that triggers the JavaScript function to process selections.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascript/example_code/lambda/lambda-for-browser/README.md#2025-04-09_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<head>\n    <script src=\"https://sdk.amazonaws.com/js/aws-sdk-2.1044.0.min.js\"></script>\n    <script type=\"text/javascript\" src=\"main.js\"></script>\n</head>\n<body>\n<br>    <!--<form action=\"/myform\" method=\"GET\"> -->\n<form action=\"#\">\n    <div align=\"Center\">\n        <br> <label for=\"skill\"><b>Choose a colour and pattern</b></label> <br>\n        <select name=\"colours\" id=\"c1\">\n            <option value=\"red\">Red</option>\n            <option value=\"orange\">Orange</option>\n            <option value=\"yellow\">Yellow</option>\n            <option value=\"green\">Green</option>\n            <option value=\"blue\">Blue</option>\n            <option value=\"indigo\">Indigo</option>\n            <option value=\"violet\">Violet</option>\n        </select>\n        <select name=\"pattern\" id=\"p1\">\n            <option value=\"floral\">Floral</option>\n            <option value=\"floral\">Floral</option>\n            <option value=\"modern\">Modern</option>\n            <option value=\"paisley\">Paisley</option>\n            <option value=\"plain\">Plain</option>\n            <option value=\"plush\">Plush</option>\n            <option value=\"squares\">Squares</option>\n            <option value=\"stripes\">Stripes</option>\n        </select>\n        <br>\n</form>\n<button type=\"button\" onclick=\"myFunction();\">Submit</button>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Running the Clean Stage for S3 Conditional Requests with JavaScript SDK v3\nDESCRIPTION: Command to run the clean stage which removes all test objects and buckets created during the deployment stage of the example.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/s3/scenarios/conditional-requests/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnode index.js -s clean\n```\n\n----------------------------------------\n\nTITLE: Converse API Tool Integration Example\nDESCRIPTION: A scenario example showing how to integrate external tools (like a weather API) with Amazon Bedrock's Converse API. The example demonstrates building interactions between an application, a generative AI model, and connected tools to provide real-time weather information based on user input.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/bedrock-runtime/README.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [Tool use with the Converse API](src/bin/tool-use.rs)\n- [Converse](src/bin/converse.rs#L43)\n- [ConverseStream](src/bin/converse-stream.rs#L70)\n- [Scenario: Tool use with the Converse API](src/bin/tool-use.rs#L242)\n```\n\n----------------------------------------\n\nTITLE: Implementing LexService Class with Amazon Comprehend, Translate, and Lex Runtime\nDESCRIPTION: This Java class provides functionality to process text inputs by detecting their language, translating non-English text to English, sending the text to Amazon Lex for processing, and translating responses back to the original language if needed. It utilizes AWS SDK for Java v2 to interact with Amazon Comprehend, Amazon Translate, and Amazon Lex.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_lex_chatbot/README.md#2025-04-09_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\npackage com.aws.spring;\n\nimport software.amazon.awssdk.auth.credentials.EnvironmentVariableCredentialsProvider;\nimport software.amazon.awssdk.regions.Region;\nimport software.amazon.awssdk.services.lexruntime.LexRuntimeClient;\nimport org.springframework.stereotype.Component;\nimport software.amazon.awssdk.services.lexruntime.model.LexRuntimeException;\nimport software.amazon.awssdk.services.lexruntime.model.PostTextRequest;\nimport software.amazon.awssdk.services.comprehend.ComprehendClient;\nimport software.amazon.awssdk.services.comprehend.model.ComprehendException;\nimport software.amazon.awssdk.services.comprehend.model.DetectDominantLanguageRequest;\nimport software.amazon.awssdk.services.comprehend.model.DetectDominantLanguageResponse;\nimport software.amazon.awssdk.services.comprehend.model.DominantLanguage;\nimport software.amazon.awssdk.services.translate.TranslateClient;\nimport software.amazon.awssdk.services.translate.model.TranslateTextRequest;\nimport software.amazon.awssdk.services.translate.model.TranslateTextResponse;\nimport software.amazon.awssdk.services.translate.model.TranslateException;\nimport java.util.*;\nimport software.amazon.awssdk.services.lexruntime.model.PostTextResponse;\n\n@Component\npublic class LexService {\n\npublic String getText(String text) {\n\n   Region region = Region.US_EAST_1;\n   LexRuntimeClient lexRuntimeClient = LexRuntimeClient.builder()\n           .region(region)\n           .build();\n\n   String engMessage =\"\";\n   try {\n\n       // Need to determine the language.\n       String lanCode = DetectLanguage(text);\n\n       // If the lanCode is NOT Eng - then we need to translate the message to English to pass to Amazon Lex.\n       if (lanCode.compareTo(\"en\")  !=0)\n           engMessage = textTranslateToEn(lanCode, text);\n       else\n           engMessage=text;\n\n        String userId =  \"chatbot-demo\" ;\n\n       Map<String,String> sessionAttributes = new HashMap<>();\n       PostTextRequest textRequest = PostTextRequest.builder()\n               .botName(\"BookTrip\")\n               .botAlias(\"<ENTER YOUR BOT ALIAS>\")\n               .inputText(engMessage)\n               .userId(userId)\n               .sessionAttributes(sessionAttributes)\n               .build();\n\n       PostTextResponse textResponse = lexRuntimeClient.postText(textRequest);\n       String message = textResponse.message();\n\n       // If not EN, we need to translate the text back\n       String outputText =\"\";\n       if (lanCode.compareTo(\"en\")  !=0)\n           outputText = textTranslateFromEn(lanCode, message);\n       else\n           outputText = message;\n\n       return outputText ;\n\n   } catch (LexRuntimeException e) {\n       System.err.println(e.getMessage());\n       System.exit(1);\n   }\n   return \"\";\n  }\n\n private String DetectLanguage(String text) {\n\n   Region region = Region.US_EAST_1;\n   ComprehendClient comClient = ComprehendClient.builder()\n           .region(region)\n           .build();\n\n   try {\n\n       String lanCode = \"\";\n       DetectDominantLanguageRequest request = DetectDominantLanguageRequest.builder()\n               .text(text)\n               .build();\n\n       DetectDominantLanguageResponse resp = comClient.detectDominantLanguage(request);\n       List<DominantLanguage> allLanList = resp.languages();\n       Iterator<DominantLanguage> lanIterator = allLanList.iterator();\n\n       while (lanIterator.hasNext()) {\n           DominantLanguage lang = lanIterator.next();\n           lanCode = lang.languageCode();\n       }\n\n       return lanCode;\n\n    } catch (ComprehendException e) {\n       System.err.println(e.awsErrorDetails().errorMessage());\n       System.exit(1);\n    }\n    return \"\";\n   }\n\n  public String textTranslateToEn(String lanCode, String text) {\n\n   Region region = Region.US_EAST_1;\n   TranslateClient translateClient = TranslateClient.builder()\n           .credentialsProvider(EnvironmentVariableCredentialsProvider.create())\n           .region(region)\n           .build();\n    try {\n       TranslateTextRequest textRequest = TranslateTextRequest.builder()\n               .sourceLanguageCode(lanCode)\n               .targetLanguageCode(\"en\")\n               .text(text)\n               .build();\n\n       TranslateTextResponse textResponse = translateClient.translateText(textRequest);\n       return textResponse.translatedText();\n\n    } catch (TranslateException e) {\n       System.err.println(e.getMessage());\n       System.exit(1);\n    }\n    return \"\";\n  }\n\n\n public String textTranslateFromEn(String lanCode, String text) {\n\n   Region region = Region.US_EAST_1;\n   TranslateClient translateClient = TranslateClient.builder()\n           .credentialsProvider(EnvironmentVariableCredentialsProvider.create())\n           .region(region)\n           .build();\n   try {\n       TranslateTextRequest textRequest = TranslateTextRequest.builder()\n               .sourceLanguageCode(\"en\")\n               .targetLanguageCode(lanCode)\n               .text(text)\n               .build();\n\n       TranslateTextResponse textResponse = translateClient.translateText(textRequest);\n       return textResponse.translatedText();\n\n    } catch (TranslateException e) {\n       System.err.println(e.getMessage());\n       System.exit(1);\n    }\n    return \"\";\n  }\n }\n```\n\n----------------------------------------\n\nTITLE: Creating IAM Policy in Java\nDESCRIPTION: This snippet demonstrates how to create an IAM policy using the AWS SDK for Java 2.x.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/iam/README.md#2025-04-09_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\nsrc/main/java/com/example/iam/CreatePolicy.java#L6\n```\n\n----------------------------------------\n\nTITLE: Implementing Spring Photo Controller for AWS S3 Operations\nDESCRIPTION: A Spring Controller class that handles HTTP requests for photo operations including upload to S3, download from S3, photo analysis, and report generation. The class requires S3Service, AnalyzePhotos, WriteExcel, and SendMessages dependencies. It manages operations on an S3 bucket specified by the bucketName variable.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_photo_analyzer_async/README.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.photo;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.*;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport org.springframework.web.servlet.ModelAndView;\nimport org.springframework.web.multipart.MultipartFile;\nimport org.springframework.web.servlet.view.RedirectView;\nimport java.io.ByteArrayInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.*;\n\n@Controller\npublic class PhotoController {\n\n    // Change to your Bucket Name\n    private final String bucketName = \"<Enter your S3 bucket name>\";\n    private final S3Service s3Service;\n    private final AnalyzePhotos photos;\n    private final  WriteExcel excel;\n\n    private final SendMessages sendMessage;\n\n    @Autowired\n    PhotoController(\n        S3Service s3Service,\n        AnalyzePhotos photos,\n        WriteExcel excel,\n        SendMessages sendMessage\n    ) {\n        this.s3Service = s3Service;\n        this.photos = photos;\n        this.excel = excel;\n        this.sendMessage = sendMessage;\n    }\n\n    @GetMapping(\"/\")\n    public String root() {\n        return \"index\";\n    }\n\n    @GetMapping(\"/process\")\n    public String process() {\n        return \"process\";\n    }\n\n    @GetMapping(\"/photo\")\n    public String photo() {\n        return \"upload\";\n    }\n\n    // Generates a report that analyzes photos in a given bucket.\n    @RequestMapping(value = \"/report\", method = RequestMethod.POST)\n    @ResponseBody\n    String report (HttpServletRequest request, HttpServletResponse response) {\n        // Get a list of key names in the given bucket.\n        String email = request.getParameter(\"email\");\n        ArrayList<String> myKeys = (ArrayList<String>) s3Service.ListBucketObjects(bucketName);\n        ArrayList<List<WorkItem>> myList = new ArrayList<>();\n        for (String myKey : myKeys) {\n            byte[] keyData = s3Service.getObjectBytes(bucketName, myKey);\n            ArrayList<WorkItem> item = photos.DetectLabels(keyData, myKey);\n            myList.add(item);\n        }\n\n        // Now we have a list of WorkItems describing the photos in the S3 bucket.\n        InputStream excelData = excel.exportExcel(myList);\n        try {\n            // Email the report.\n            sendMessage.sendReport(excelData, email);\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return \"The photos have been analyzed and the report is sent\";\n    }\n\n    // Upload an image to an Amazon S3 bucket.\n    @RequestMapping(value = \"/upload\", method = RequestMethod.POST)\n    @ResponseBody\n    public ModelAndView singleFileUpload(@RequestParam(\"file\") MultipartFile file) {\n        try {\n            byte[] bytes = file.getBytes();\n            String name =  file.getOriginalFilename() ;\n\n            // Put the file into the bucket.\n            s3Service.putObject(bytes, bucketName, name);\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return new ModelAndView(new RedirectView(\"photo\"));\n    }\n\n    @RequestMapping(value = \"/getimages\", method = RequestMethod.GET)\n    @ResponseBody\n    String getImages(HttpServletRequest request, HttpServletResponse response) {\n        return s3Service.ListAllObjects(bucketName);\n    }\n\n    // Downloads the given image from the Amazon S3 bucket.\n    @RequestMapping(value = \"/downloadphoto\", method = RequestMethod.GET)\n    void buildDynamicReportDownload(HttpServletRequest request, HttpServletResponse response) {\n        try {\n            String photoKey = request.getParameter(\"photoKey\");\n            byte[] photoBytes = s3Service.getObjectBytes(bucketName, photoKey) ;\n            InputStream is = new ByteArrayInputStream(photoBytes);\n\n            // Define the required information here.\n            response.setContentType(\"image/png\");\n            response.setHeader(\"Content-disposition\", \"attachment; filename=\"+photoKey);\n            org.apache.commons.io.IOUtils.copy(is, response.getOutputStream());\n            response.flushBuffer();\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating an IAM User using AWS SDK for Kotlin\nDESCRIPTION: This snippet demonstrates how to update an IAM user using the AWS SDK for Kotlin. It requires the current user name and the new user name as inputs.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/iam/README.md#2025-04-09_snippet_14\n\nLANGUAGE: Kotlin\nCODE:\n```\nsrc/main/kotlin/com/kotlin/iam/UpdateUser.kt#L39\n```\n\n----------------------------------------\n\nTITLE: Deleting an EC2 Launch Template\nDESCRIPTION: Shows how to delete a launch template that is no longer needed. This removes the template configuration used for launching EC2 instances in Auto Scaling groups.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/EC2/README.md#2025-04-09_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\n// DeleteLaunchTemplate\n```\n\n----------------------------------------\n\nTITLE: Running Label Detection Example with AWS SDK for Rust\nDESCRIPTION: Command line usage for the label detection example that processes image EXIF data, uploads to S3, detects labels with Rekognition, and stores results in DynamoDB. Takes bucket name, filename, table name and optional region parameters.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/cross_service/README.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd detect_labels;\ncargo run -- -b BUCKET -f FILENAME -t TABLE [-r REGION] [-v]\n```\n\n----------------------------------------\n\nTITLE: Conversing with Mistral AI model in C#\nDESCRIPTION: Shows how to start a conversation with the Mistral AI model using Amazon Bedrock Runtime.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv4/Bedrock-runtime/README.md#2025-04-09_snippet_22\n\nLANGUAGE: C#\nCODE:\n```\nModels/Mistral/Converse/Converse.cs#L4\n```\n\n----------------------------------------\n\nTITLE: Running the EventBridge Scheduler Example in .NET\nDESCRIPTION: This snippet shows how to run the EventBridge Scheduler example from the command line using the dotnet CLI. It requires navigating to the directory containing the .sln file before execution.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/EventBridge Scheduler/Scenarios/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet run\n```\n\n----------------------------------------\n\nTITLE: HTML View Template for SNS Subscription Interface\nDESCRIPTION: The main view template that provides the user interface for subscribing to SNS topics, managing subscriptions, and publishing messages with language translation options. Includes Bootstrap styling and form controls.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/cross-service/SubscribePublishTranslate/README.md#2025-04-09_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n@{\n  ViewData[\"Title\"] = \"Home Page\";\n}\n\n<div class=\"container\">\n  <div class=\"text-center\">\n    <h1>Amazon Web Services</h1>\n    <h2>Subscribe, publish, and translate example</h2>\n  </div>\n\n  <div class=\"row\">\n    <div class=\"col-md-12 mx-auto\">\n      <p>\n        This example uses the AWS SDK for .NET. to use Amazon Simple\n        Notification Service (Amazon SNS) and Amazon Translate to allow\n        users to subscribe, unsubscribe, and translate message for an\n        Amazon SNS queue.\n      </p>\n    </div>\n  </div>\n\n  <div class=\"row\">\n    <div class=\"col-md-4 mx-auto\">\n      <p><strong>To subscribe:</strong></p>\n      <ol>\n        <li>Enter a valid email address and then choose the <em>Subscribe</em> button.</li>\n        <li>The sample application subscribes to the endpoint by using the SNS .NET API.</li>\n      </ol>\n      <p><strong>To unsubscribe:</strong></p>\n      <ol>\n        <li>Enter a valid email address and then choose the <em>Unsubscribe</em> button.</li>\n        <li>The sample application unsubscribes from the endpoint by using the SNS .NET API.</li>\n      </ol>\n      <p>To view the email addresses subscribed to the queue, choose the <em>List Subscriptions</em> button.</p>\n    </div>\n    <div class=\"col-md-8 mx-auto\">\n      <h3>Enter an email address</h3>\n      <input type=\"email\" class=\"form-control\" id=\"inputEmail1\" aria-describedby=\"emailHelp\" placeholder=\"Enter email\">\n      <div class=\"clearfix mt-2\">\n        <button type=\"button\" class=\"btn btn-primary\" onclick=\"subEmail() \">\n          Subscribe\n        </button>\n        <button type=\"button\" class=\"btn btn-primary\" onclick=\"subscribe()\">\n          List Subscriptions\n        </button>\n        <button type=\"button\" class=\"btn btn-primary\" onclick=\"delSub()\">\n          UnSubscribe\n        </button>\n      </div>\n    </div>\n  </div>\n\n  <hr style=\"width:50%;margin-left:auto;margin-right:auto;\">\n\n  <div class=\"row\">\n    <div class=\"col-md-4 mx-auto\">\n      <p><strong>To publish a message:</strong></p>\n      <ol>\n        <li>Enter the message you want to send.</li>\n        <li>Select the language: English, French, or Spanish.</li>\n        <li>Select the <em>Publish</em> button.</li>\n      </ol>\n    </div>\n    <div class=\"col-md-8 mx-auto\">\n      <h3>Enter a message to publish</h3>\n      <div class=\"control-group\">\n        <div class=\"form-group\">\n          <textarea class=\"form-control\" id=\"body\" rows=\"5\" placeholder=\"Body\" required=\"required\" data-validation-required-message=\"Please enter a description.\"></textarea>\n          <p class=\"help-block text-danger\"></p>\n        </div>\n      </div>\n      <div class=\"clearfix mt-2\">\n        <label for=\"lang\">Select a Language:</label>\n        <select name=\"lang\" id=\"lang\">\n          <option>English</option>\n          <option>French</option>\n          <option>Spanish</option>\n        </select>\n        <button type=\"submit\" class=\"btn btn-primary\" id=\"SendButton\">Publish</button>\n      </div>\n    </div>\n  </div>\n\n  <!-- Modal -->\n  <div class=\"modal fade\" id=\"myModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLongTitle\" aria-hidden=\"true\">\n    <div class=\"modal-dialog\" role=\"document\">\n      <div class=\"modal-content\">\n        <div class=\"modal-header\">\n          <h5 class=\"modal-title\" id=\"exampleModalLongTitle\">SNS Email Subscriptions</h5>\n          <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n            <span aria-hidden=\"true\">&times;</span>\n          </button>\n        </div>\n        <div class=\"modal-body\">\n\n        </div>\n        <div class=\"modal-footer\">\n          <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: LabelsFn Lambda Function Input JSON Example\nDESCRIPTION: JSON input example for the LabelsFn Lambda function that retrieves image labels. This function handles GET requests to the /labels endpoint to retrieve all stored labels and their counts.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/creating_pam/README.md#2025-04-09_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n  {\n   \"tags\": \"{}\",\n   \"resource\": \"/labels\",\n   \"path\": \"/labels\",\n   \"httpMethod\": \"GET\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating S3Client with Region in AWS SDK for Java\nDESCRIPTION: This snippet demonstrates how to create an S3Client object using the AWS SDK for Java. It sets the AWS Region and builds the client. This is typically done after setting up AWS credentials in the .aws folder.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/README.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nRegion region = Region.US_WEST_2;\nS3Client s3 = S3Client.builder()\n  .region(region)\n  .build();\n```\n\n----------------------------------------\n\nTITLE: Creating EC2 Security Group in Go\nDESCRIPTION: This example creates a security group. It requires the group name and description as command-line arguments, with an optional VPC ID.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/ec2/README.md#2025-04-09_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\ngo run CreateSecurityGroup.go -n NAME -d DESCRIPTION [-v VPC-ID]\n```\n\n----------------------------------------\n\nTITLE: Working with IAM Policy Builder API in Java\nDESCRIPTION: This example shows how to create IAM policies using the object-oriented API and how to use the IAM Policy Builder API with the IAM service.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/iam/README.md#2025-04-09_snippet_19\n\nLANGUAGE: Java\nCODE:\n```\nsrc/main/java/com/example/iam/IamPolicyBuilderExamples.java\n```\n\n----------------------------------------\n\nTITLE: Creating a DynamoDB Table in Java\nDESCRIPTION: This code snippet demonstrates how to create a new table in DynamoDB using the AWS SDK for Java 2.x. It shows the process of defining table structure and creating it in the database.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/dynamodb/README.md#2025-04-09_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nsrc/main/java/com/example/dynamodb/CreateTable.java#L6\n```\n\n----------------------------------------\n\nTITLE: EventBridge Rule Configuration\nDESCRIPTION: JSON configuration for EventBridge rule that triggers Step Functions workflow on S3 image uploads\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/applications/feedback_sentiment_analyzer/SPECIFICATION.md#2025-04-09_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"source\": [\"aws.s3\"],\n  \"detailType\": [\"Object Created\"],\n  \"detail\": {\n    \"bucket\": {\n      \"name\": [\"<dynamic media bucket name>\"]\n    },\n    \"object\": {\n      \"key\": [{\"suffix\": \".png\"}, {\"suffix\": \".jpeg\"}, {\"suffix\": \".jpg\"}]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying AWS Glue Scaffold Resources\nDESCRIPTION: Command to deploy the required AWS CloudFormation scaffold resources for the AWS Glue examples, including an S3 bucket and IAM role.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/glue/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython scaffold.py deploy\n```\n\n----------------------------------------\n\nTITLE: Implementing Contact Form JavaScript Functions for AWS Application\nDESCRIPTION: JavaScript code that handles form submissions, email subscriptions, and validation for an AWS application. Includes functions for sending messages, managing subscriptions, and email validation using jQuery AJAX calls to communicate with Spring endpoints.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_sns_async/README.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n    $(function() {\n    $(\"#SendButton\" ).click(function($e) {\n\n        var body = $('#body').val();\n        var lang = $('#lang option:selected').text();\n        if (body == '' ){\n            alert(\"Please enter text\");\n            return;\n        }\n\n        $.ajax('/addMessage', {\n            type: 'POST',\n            data: 'lang=' + lang+'&body=' + body,\n            success: function (data, status, xhr) {\n\n                alert(data)\n                $('#body').val(\"\");\n            },\n            error: function (jqXhr, textStatus, errorMessage) {\n                $('p').append('Error' + errorMessage);\n            }\n        });\n      } );\n    } );\n    \n    function subEmail(){\n     var mail = $('#inputEmail1').val();\n     var result = validate(mail)\n     if (result == false) {\n        alert (mail + \" is not valid. Please specify a valid email.\");\n        return;\n     }\n\n     $.ajax('/addEmail', {\n        type: 'POST',\n        data: 'email=' + mail,\n        success: function (data, status, xhr) {\n            alert(\"Subscription validation is \"+data)\n        },\n        error: function (jqXhr, textStatus, errorMessage) {\n            $('p').append('Error' + errorMessage);\n        }\n      });\n     }\n\n     function getSubs() {\n      $.ajax('/getSubs', {\n        type: 'GET', \n        success: function (data, status, xhr) {\n\n            $('.modal-body').empty();\n            var xml = data;\n            $(xml).find('Sub').each(function ()  {\n\n                var $field = $(this);\n                var email = $field.find('email').text();\n\n                // Append this data to the main list.\n                $('.modal-body').append(\"<p><b>\"+email+\"</b></p>\");\n            });\n            $(\"#myModal\").modal();\n        },\n        error: function (jqXhr, textStatus, errorMessage) {\n            $('p').append('Error' + errorMessage);\n        }\n       });\n      }\n\n     function delSub(event) {\n       var mail = $('#inputEmail1').val();\n       var result = validate(mail)\n\n      if (result == false) {\n       alert (mail + \" is not valid. Please specify a valid email\");\n       return;\n      }\n\n     $.ajax('/delSub', {\n        type: 'POST',  // http GET method\n        data: 'email=' + mail,\n        success: function (data, status, xhr) {\n\n            alert(\"Subscription validation is \"+data);\n        },\n        error: function (jqXhr, textStatus, errorMessage) {\n            $('p').append('Error' + errorMessage);\n        }\n      });\n    }\n\n     function validateEmail(email) {\n       const re = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n       return re.test(email);\n      }\n\n     function validate(email) {\n      const $result = $(\"#result\");\n\n     if (validateEmail(email)) {\n        return true ;\n      } else {\n        return false ;\n     }\n    }\n```\n\n----------------------------------------\n\nTITLE: Running Getting Started Movies Scenario\nDESCRIPTION: Command to run the comprehensive getting started example that demonstrates basic DynamoDB operations with a movies database.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/dynamodb/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython GettingStarted/scenario_getting_started_movies.py\n```\n\n----------------------------------------\n\nTITLE: Running Amazon S3 Versioning Example with Python\nDESCRIPTION: Command to execute the example that demonstrates object versioning in S3, including creating versioned buckets, managing object versions, rolling back to previous versions, and handling versioned object deletion.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/s3/README.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npython s3_versioning/versioning.py\n```\n\n----------------------------------------\n\nTITLE: Creating DynamoDB Metrics Example Class in Java\nDESCRIPTION: Main class that configures and executes DynamoDB operations with metrics monitoring. It handles table creation, write/read operations, and cleanup while implementing CloudWatch metric publishing.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/monitor_dynamodb/README.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage org.example;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport software.amazon.awssdk.core.exception.SdkException;\nimport software.amazon.awssdk.regions.Region;\n\nimport java.time.Duration;\n\n\npublic class DynamoDbMetricsExample {\n    private static final Logger LOGGER = LoggerFactory.getLogger(DynamoDbMetricsExample.class);\n\n    public static void main(String[] args) {\n        String namespace = \"DynamoDBMetricsExample\";\n\n        GreetingsSender greetingsSender = new GreetingsSender(Region.US_EAST_1,\n                Duration.ofMinutes(1L),\n                namespace);\n        // Create the DynamoDB table, if it doesn't already exist.\n        greetingsSender.createTable();\n\n        try {\n            greetingsSender.sendGreetings(999, 10000L);\n        } catch (InterruptedException | SdkException e) {\n            LOGGER.error(\"Error\", e);\n        } finally {\n            // Comment out the following statement if you intend to review CloudWatch Contributor Insights.\n            greetingsSender.deleteTable();\n            greetingsSender.close();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Packages\nDESCRIPTION: Command to install the required Python packages for running the CloudWatch Logs examples using pip package manager in a virtual environment.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/cloudwatch-logs/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Implementing S3Handler for Processing S3 Events in Kotlin\nDESCRIPTION: This class handles S3 events, detecting labels for uploaded images using Amazon Rekognition and storing the results in DynamoDB. It uses coroutines for asynchronous processing.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/creating_pam/README.md#2025-04-09_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.example.photo.handlers\n\nimport com.amazonaws.services.lambda.runtime.Context\nimport com.amazonaws.services.lambda.runtime.RequestHandler\nimport com.amazonaws.services.lambda.runtime.events.S3Event\nimport com.example.photo.PhotoApplicationResources\nimport com.example.photo.services.AnalyzePhotos\nimport com.example.photo.services.DynamoDBService\nimport kotlinx.coroutines.runBlocking\n\nclass S3Handler : RequestHandler<S3Event, String> {\n\n    override fun handleRequest(event: S3Event, context: Context): String? = runBlocking {\n        // Get the S3 bucket and object key from the Amazon S3 event.\n        val bucketName = event.records[0].s3.bucket.name\n        val objectKey = event.records[0].s3.getObject().key\n\n        // Log the S3 bucket and object key in the log file.\n        context.logger.log(\"S3 object name: s3://$bucketName/$objectKey\")\n        val photos = AnalyzePhotos()\n        val dbService = DynamoDBService()\n\n        // Tag the file.\n        val labels = photos.detectLabels(PhotoApplicationResources.STORAGE_BUCKET, objectKey)\n        dbService.putRecord(labels)\n        context.logger.log(\"Tagged image\")\n        return@runBlocking \"OK\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running the S3 Glacier Example Script\nDESCRIPTION: Command to execute the main S3 Glacier example script that demonstrates vault operations, archive handling, and job management\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/glacier/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython glacier_basics.py\n```\n\n----------------------------------------\n\nTITLE: Linking to AWS SDK for JavaScript Guide in Markdown\nDESCRIPTION: This snippet provides a Markdown link to the official AWS SDK for JavaScript guide for getting started in the browser environment.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/web/s3/list-objects/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n[AWS SDK for JavaScript guide](https://docs.aws.amazon.com/sdk-for-javascript/v3/developer-guide/getting-started-browser.html)\n```\n\n----------------------------------------\n\nTITLE: Setting up CMake project for AWS EC2 example tests\nDESCRIPTION: Configures the CMake project for AWS EC2 example tests, setting minimum CMake version, project name, and required AWS dependencies. It establishes naming conventions for targets and sets the C++ standard to 14.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/ec2/tests/CMakeLists.txt#2025-04-09_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Set the minimum required version of CMake for this project.\ncmake_minimum_required(VERSION 3.14)\n\nset(EXAMPLE_SERVICE_NAME \"ec2\")\nset(CURRENT_TARGET \"${EXAMPLE_SERVICE_NAME}_gtest\")\nset(CURRENT_TARGET_AWS_DEPENDENCIES ec2)\n\n# Set this project's name.\nproject(\"${EXAMPLE_SERVICE_NAME}-examples-gtests\" )\n\n# Set the C++ standard to use to build this target.\nset(CMAKE_CXX_STANDARD 14)\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing ECR Repositories\nDESCRIPTION: Example showing essential ECR operations including creating repositories, setting policies, getting URIs and auth tokens, managing lifecycle policies, pushing Docker images, and repository management.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/ecr/README.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n// The complete code is referenced in multiple files:\n// - src/main/kotlin/com/example/ecr/scenario/ECRScenario.kt\n// - src/main/kotlin/com/example/ecr/scenario/ECRActions.kt\n\n// Key operations referenced include:\n// - listImages\n// - createRepository\n// - deleteRepository\n// - describeImages\n// - describeRepositories\n// - getAuthorizationToken\n// - getRepositoryPolicy\n// - pushImageCmd\n// - setRepositoryPolicy\n// - startLifecyclePolicyPreview\n```\n\n----------------------------------------\n\nTITLE: Rebooting DB Instance using Amazon RDS in Java\nDESCRIPTION: This code snippet shows how to reboot a DB instance using Amazon RDS with AWS SDK for Java 2.x. It uses the RebootDBInstance operation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/rds/README.md#2025-04-09_snippet_13\n\nLANGUAGE: Java\nCODE:\n```\nsrc/main/java/com/example/rds/RebootDBInstance.java#L6\n```\n\n----------------------------------------\n\nTITLE: Running Single Action Examples with Node.js\nDESCRIPTION: Command to execute individual action examples from the actions directory using Node.js.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/auto-scaling/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode ./actions/<fileName>\n```\n\n----------------------------------------\n\nTITLE: Listing Objects in an Amazon S3 Bucket using AWS SDK for Swift\nDESCRIPTION: This code snippet demonstrates how to list objects within an Amazon S3 bucket using the AWS SDK for Swift, specifically using the ListObjectsV2 operation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/swift/example_code/s3/README.md#2025-04-09_snippet_8\n\nLANGUAGE: Swift\nCODE:\n```\nbasics/Sources/ServiceHandler/ServiceHandler.swift#L280\n```\n\n----------------------------------------\n\nTITLE: Creating a Route Calculator in Amazon Location Service using Java\nDESCRIPTION: This code snippet demonstrates how to create a route calculator in Amazon Location Service. It's part of the LocationActions class that provides various Location Service operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/location/README.md#2025-04-09_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nCreateRouteCalculator\n```\n\n----------------------------------------\n\nTITLE: Listing Amazon SNS Subscriptions in Ruby\nDESCRIPTION: This code snippet shows how to list subscriptions in Amazon SNS using the AWS SDK for Ruby. It refers to a method likely defined in the show_subscriptions.rb file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/ruby/example_code/sns/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\nListSubscriptions\n```\n\n----------------------------------------\n\nTITLE: Creating KMS Alias with Java SDK\nDESCRIPTION: This code snippet shows how to create an alias for a KMS key using the AWS SDK for Java 2.x. It uses the CreateAlias operation to associate a friendly name with a KMS key ID.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/kms/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nKMSActions.java#L221\n```\n\n----------------------------------------\n\nTITLE: Creating an AWS IoT Thing using Kotlin\nDESCRIPTION: This code example shows how to create an AWS IoT Thing using the CreateThing operation in the AWS SDK for Kotlin.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/iot/README.md#2025-04-09_snippet_3\n\nLANGUAGE: Kotlin\nCODE:\n```\nCreateThing\n```\n\n----------------------------------------\n\nTITLE: Setting SMS Attributes for Amazon SNS in C++\nDESCRIPTION: This code snippet demonstrates how to set SMS attributes for Amazon SNS using the AWS SDK for C++. It's located in the set_sms_type.cpp file at line 21.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/sns/README.md#2025-04-09_snippet_8\n\nLANGUAGE: C++\nCODE:\n```\n// Code for SetSMSAttributes action (specific implementation not provided)\n```\n\n----------------------------------------\n\nTITLE: Querying DynamoDB Table in ABAP\nDESCRIPTION: This code example shows how to query a DynamoDB table using the AWS SDK for SAP ABAP. It is one of the single action examples provided for DynamoDB operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/sap-abap/services/dyn/README.md#2025-04-09_snippet_7\n\nLANGUAGE: ABAP\nCODE:\n```\nzcl_aws1_dyn_actions.clas.abap#L263\n```\n\n----------------------------------------\n\nTITLE: Streaming conversation with Cohere Command model in C#\nDESCRIPTION: Illustrates how to stream a conversation with the Cohere Command model using Amazon Bedrock Runtime.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv4/Bedrock-runtime/README.md#2025-04-09_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nModels/CohereCommand/ConverseStream/ConverseStream.cs#L4\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for AWS STS Tests\nDESCRIPTION: Complete CMake configuration that sets up a build environment for AWS STS service examples with Google Test integration. Handles Windows-specific settings, AWS SDK dependencies, and test file organization.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/sts/tests/CMakeLists.txt#2025-04-09_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\n\n# Set the minimum required version of CMake for this project.\ncmake_minimum_required(VERSION 3.14)\n\nset(EXAMPLE_SERVICE_NAME \"sts\")\nset(CURRENT_TARGET \"${EXAMPLE_SERVICE_NAME}_gtest\")\nset(CURRENT_TARGET_AWS_DEPENDENCIES sts iam s3)\n\n# Set this project's name.\nproject(\"${EXAMPLE_SERVICE_NAME}-examples-gtests\" )\n\n# Set the C++ standard to use to build this target.\nset(CMAKE_CXX_STANDARD 14)\n\n# Build shared libraries by default.\nset(BUILD_SHARED_LIBS ON)\n\nfind_package(GTest)\n\nif(NOT GTest_FOUND)\n    include(FetchContent)\n    FetchContent_Declare(\n            googletest\n            GIT_REPOSITORY https://github.com/google/googletest.git\n            GIT_TAG release-1.12.1\n    )\n\n    # For Windows: Prevent overriding the parent project's compiler/linker settings.\n    set(gtest_force_shared_crt ON CACHE BOOL \"\" FORCE)\n    FetchContent_MakeAvailable(googletest)\nendif()\n\n# Use the MSVC variable to determine if this is a Windows build.\nset(WINDOWS_BUILD ${MSVC})\n\n# Set the location for Windows to find the installed libraries of the SDK.\nif (WINDOWS_BUILD)\n    string(REPLACE \";\" \"/aws-cpp-sdk-all;\" SYSTEM_MODULE_PATH \"${CMAKE_SYSTEM_PREFIX_PATH}/aws-cpp-sdk-all\")\n    list(APPEND CMAKE_PREFIX_PATH ${SYSTEM_MODULE_PATH})\nendif ()\n\n# Find the AWS SDK for C++ package.\nfind_package(AWSSDK REQUIRED COMPONENTS ${CURRENT_TARGET_AWS_DEPENDENCIES})\n\nadd_executable(\n        ${CURRENT_TARGET}\n)\n\nif (WINDOWS_BUILD)\n    # set(BIN_SUB_DIR \"/Debug\") # If you are building from the command line, you may need to uncomment this\n    # and set the proper subdirectory to the executables' location.\n\n    if (AWSSDK_INSTALL_AS_SHARED_LIBS)\n        # Copy relevant AWS SDK for C++ libraries into the current binary directory for running and debugging.\n        AWSSDK_CPY_DYN_LIBS(\n                CURRENT_TARGET_AWS_DEPENDENCIES\n                \"\"\n                ${CMAKE_CURRENT_BINARY_DIR}${BIN_SUB_DIR}\n        )\n    endif ()\n\n    add_custom_command(\n            TARGET\n            ${CURRENT_TARGET}\n            POST_BUILD\n            COMMAND ${CMAKE_COMMAND} -E copy\n            ${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_BINDIR}${BIN_SUB_DIR}/gtest.dll\n            ${CMAKE_CURRENT_BINARY_DIR}${BIN_SUB_DIR}\n    )\nendif ()\n\n# GTEST_SOURCE_FILES can be defined in the command line to limit the files in a build. For example,\n# you can limit files to one action.\nif (NOT DEFINED GTEST_SOURCE_FILES)\n    file(\n            GLOB\n            GTEST_SOURCE_FILES\n            \"gtest_*.cpp\"\n    )\nendif()\n\n# Check whether the target system is Windows, including Win64.\nif(WIN32)\n    # Check whether the compiler is some version of Microsoft Visual C++, or another compiler simulating C++.\n    if(MSVC)\n        source_group(\"Source Files\" FILES ${GTEST_SOURCE_FILES})\n    endif(MSVC)\nendif()\n\nenable_testing()\n\n\nforeach(TEST_FILE ${GTEST_SOURCE_FILES})\n    string(REPLACE \"gtest_\" \"../\" SOURCE_FILE ${TEST_FILE})\n     if (EXISTS ${SOURCE_FILE})\n        list(APPEND GTEST_SOURCE ${SOURCE_FILE} ${TEST_FILE})\n    else()\n        message(\"Error: no associated source file found for ${TEST_FILE}\")\n    endif()\nendforeach()\n\ntarget_sources(\n        ${CURRENT_TARGET}\n        PUBLIC\n        ${GTEST_SOURCE}\n        test_main.cpp\n        ${EXAMPLE_SERVICE_NAME}_gtests.cpp\n)\n\ntarget_include_directories(\n        ${CURRENT_TARGET}\n        PUBLIC\n        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/..>\n        $<INSTALL_INTERFACE:..>\n)\n\ntarget_compile_definitions(\n        ${CURRENT_TARGET}\n        PUBLIC\n        TESTING_BUILD\n        SRC_DIR=\"${CMAKE_CURRENT_SOURCE_DIR}\"\n)\n\ntarget_link_libraries(\n        ${CURRENT_TARGET}\n        GTest::gtest\n        ${AWSSDK_LINK_LIBRARIES}\n        ${AWSSDK_PLATFORM_DEPS}\n)\n\ninclude(GoogleTest)\ngtest_add_tests(\n        TARGET\n        ${CURRENT_TARGET}\n)\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container for macOS/Linux with AWS Credentials\nDESCRIPTION: Shows how to run the Docker container with AWS SDK for Go V2 examples on macOS or Linux, mounting the local AWS credentials into the container.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/gov2/README.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it -v ~/.aws/credentials:/root/.aws/credentials <image_name>\n```\n\n----------------------------------------\n\nTITLE: Deleting an AWS Glue Database with .NET\nDESCRIPTION: This snippet shows how to delete an AWS Glue database using the AWS SDK for .NET. It requires the database name as a parameter.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Glue/README.md#2025-04-09_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nDeleteDatabase\n```\n\n----------------------------------------\n\nTITLE: Newsletter Scenario in Amazon SES v2 API using Rust\nDESCRIPTION: This code example demonstrates a complete newsletter scenario using Amazon SES v2 API with the AWS SDK for Rust. It includes multiple operations for managing contacts, templates, and sending emails. The implementation is located in the newsletter.rs file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/ses/README.md#2025-04-09_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\n// Implementation in src/newsletter.rs\n```\n\n----------------------------------------\n\nTITLE: Get Cluster, Service and Task ARN Information Scenario - C#\nDESCRIPTION: Complete scenario demonstrating how to retrieve ARN information for clusters, services and tasks in Amazon ECS. Shows how to combine multiple API calls to gather comprehensive cluster information.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv4/ECS/README.md#2025-04-09_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nECSScenario/ECSScenario.cs\n```\n\n----------------------------------------\n\nTITLE: Creating Amazon EC2 Key Pair in Go\nDESCRIPTION: This example creates an Amazon EC2 key pair. It requires the key name as a command-line argument.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/ec2/README.md#2025-04-09_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\ngo run CreateKeyPair.go -k KEY-NAME\n```\n\n----------------------------------------\n\nTITLE: Deprecated JavaScript Photo Album Example Configuration\nDESCRIPTION: This snippet contained configuration code for the Photo Album example. It has been replaced by a newer example in the AWS documentation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/s3/dead-snippets.txt#2025-04-09_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n// snippet-start:[s3.JavaScript.photoAlbumExample.configV3]\nThis code example has been superseded by the example in\nCode examples > Amazon S3 > Create a web page that lists S3 objects\n// snippet-end:[s3.JavaScript.photoAlbumExample.configV3]\n```\n\n----------------------------------------\n\nTITLE: Creating a DynamoDB Table using C#\nDESCRIPTION: This code example demonstrates how to create a DynamoDB table using the AWS SDK for .NET. It's part of the basic DynamoDB operations example set.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/dynamodb/README.md#2025-04-09_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nscenarios/DynamoDB_Basics/DynamoDB_Actions/DynamoDbMethods.cs#L14\n```\n\n----------------------------------------\n\nTITLE: Building and Running Docker Container for .NET Examples\nDESCRIPTION: Instructions for building a Docker image and launching a container with the .NET examples. The container provides an isolated environment with all examples pre-loaded.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/README.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t <image_name> .\ndocker run -it -v <your_credentials_folder_path>/.aws/credentials:/root/.aws/credentials <image_name>\n```\n\n----------------------------------------\n\nTITLE: Defining HTML Structure for Video Upload Page (HTML)\nDESCRIPTION: This HTML snippet defines the structure for the upload.html page, which allows users to upload videos to an Amazon S3 bucket for analysis. It includes a file upload form and a table to display video information.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/video_analyzer_application/README.md#2025-04-09_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html xmlns:th=\"http://www.thymeleaf.org\" >\n<script th:src=\"|https://code.jquery.com/jquery-1.12.4.min.js|\"></script>\n<script th:src=\"|https://code.jquery.com/ui/1.11.4/jquery-ui.min.js|\"></script>\n<script th:src=\"|https://cdn.datatables.net/v/dt/dt-1.10.20/datatables.min.js|\"></script>\n<script src=\"../public/js/items.js\" th:src=\"@{/js/items.js}\"></script>\n\n<link rel=\"stylesheet\" th:href=\"|https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css|\"/>\n<link rel=\"stylesheet\" th:href=\"|https://cdn.datatables.net/v/dt/dt-1.10.20/datatables.min.css|\"/>\n<link rel=\"stylesheet\" href=\"../public/css/styles.css\" th:href=\"@{/css/styles.css}\" />\n<link rel=\"icon\" href=\"../public/images/favicon.ico\" th:href=\"@{/images/favicon.ico}\" />\n\n<title>AWS Video Analyzer</title>\n\n<script>\n function myFunction() {\n   alert(\"The video was submitted\");\n  }\n</script>\n</head>\n\n<body>\n<header th:replace=\"layout :: site-header\"/>\n\n<div class=\"container\">\n<h2>AWS Video Analyzer application</h2>\n<p>Upload a video to an Amazon S3 bucket that will be analyzed!</p>\n\n<form method=\"POST\" onsubmit=\"myFunction()\" action=\"/upload\" enctype=\"multipart/form-data\">\n   <input type=\"file\" name=\"file\" /><br/><br/>\n   <input type=\"submit\" value=\"Submit\" />\n</form>\n<div>\n   <br>\n\n   <p>Choose the following button to get information about the video to analyze.</p>\n\n   <button onclick=\"getVideo()\">Show Video</button>\n   <table id=\"myTable\" class=\"display\" style=\"width:100%\">\n       <thead>\n       <tr>\n           <th>Name</th>\n           <th>Owner</th>\n           <th>Date</th>\n           <th>Size</th>\n       </tr>\n       </thead>\n       <tbody>\n       <tr>\n           <td>No Data</td>\n           <td>No Data</td>\n           <td>No Data </td>\n           <td>No Data</td>\n       </tr>\n       </tbody>\n       <tfoot>\n       <tr>\n           <th>Name</th>\n           <th>Owner</th>\n           <th>Date</th>\n           <th>Size</th>\n       </tr>\n       </tfoot>\n       <div id=\"success3\"></div>\n   </table>\n  </div>\n </div>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Receiving Messages from Amazon SQS in C#\nDESCRIPTION: Shows how to receive messages from an Amazon SQS queue using the AWS SDK for .NET. This operation retrieves one or more messages from the queue for processing.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/SQS/README.md#2025-04-09_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nReceiveMessage\n```\n\n----------------------------------------\n\nTITLE: Running Examples with Command Line Options\nDESCRIPTION: Command to execute DynamoDB examples with additional command line options using util.parseArgs.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/dynamodb/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnode ./scenarios/<fileName> --option1 --option2\n```\n\n----------------------------------------\n\nTITLE: Setting a Key Policy for a KMS Key with PHP\nDESCRIPTION: This code snippet shows how to set a key policy for a KMS key using the AWS SDK for PHP. Key policies control access to KMS keys.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/php/example_code/kms/README.md#2025-04-09_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\nKmsService.php#L438\n```\n\n----------------------------------------\n\nTITLE: Checking SQL Statement Status with Amazon Redshift Data API in Kotlin\nDESCRIPTION: A suspend function that continuously checks the status of a SQL statement execution until it completes. It uses the Redshift Data API and implements a polling mechanism with a delay between status checks.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/creating_redshift_application/README.md#2025-04-09_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nsuspend fun checkStatement(sqlId: String?) {\n        val statementRequest = DescribeStatementRequest {\n            id = sqlId\n        }\n\n        // Wait until the sql statement processing is finished.\n        var finished = false\n        var status: String\n        RedshiftDataClient { region = \"us-west-2\" }.use { redshiftDataClient ->\n            while (!finished) {\n                val response = redshiftDataClient.describeStatement(statementRequest)\n                status = response.status.toString()\n                println(\"...$status\")\n\n                if (status.compareTo(\"Finished\") == 0) {\n                    finished = true\n                } else {\n                    delay(500)\n                }\n            }\n        }\n        println(\"The statement is finished!\")\n    }\n```\n\n----------------------------------------\n\nTITLE: Performing Batch Write Item Operation in DynamoDB with C++\nDESCRIPTION: This code snippet demonstrates how to perform a batch write item operation in DynamoDB using the AWS SDK for C++. It can put or delete multiple items in one or more tables in a single request.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/dynamodb/README.md#2025-04-09_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nBatchWriteItem\n```\n\n----------------------------------------\n\nTITLE: Putting Events in EventBridge using AWS SDK for .NET\nDESCRIPTION: Method to send custom events to EventBridge. This allows applications to publish events to the event bus for processing by rules and routing to targets.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/EventBridge/README.md#2025-04-09_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nPutEvents\n```\n\n----------------------------------------\n\nTITLE: Running the Route 53 ARC Routing Control Example\nDESCRIPTION: Command to run the routing control state example with required arguments - the routing control ARN and a path to a JSON file containing cluster endpoints.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/route53-recovery-cluster/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython routing_control_state.py [routing_control_arn] [cluster_endpoints_json_file]\n```\n\n----------------------------------------\n\nTITLE: Performing Basic Amazon S3 Operations with AWS SDK for Swift\nDESCRIPTION: This code snippet demonstrates essential Amazon S3 operations including creating a bucket, uploading a file, downloading an object, copying an object to a subfolder, listing objects, and deleting objects and the bucket.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/swift/example_code/s3/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nbasics/Sources/ServiceHandler/ServiceHandler.swift\n```\n\n----------------------------------------\n\nTITLE: Creating a Kinesis Stream using AWS SDK for .NET\nDESCRIPTION: This code snippet shows how to create an Amazon Kinesis stream using the AWS SDK for .NET. It references the CreateStream method in the CreateStream.cs file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Kinesis/README.md#2025-04-09_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nCreateStream(CreateStreamExample/CreateStreamExample/CreateStream.cs#L6)\n```\n\n----------------------------------------\n\nTITLE: Running Amazon Keyspaces Get Started Scenario in Python\nDESCRIPTION: This command runs the 'scenario_get_started_keyspaces.py' script, which demonstrates a complete workflow for using Amazon Keyspaces, including creating keyspaces and tables, querying data, and updating table schema.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/keyspaces/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython scenario_get_started_keyspaces.py\n```\n\n----------------------------------------\n\nTITLE: Defining Python Dependencies for AWS SDK Examples\nDESCRIPTION: This snippet specifies the required Python packages and their minimum versions for the AWS SDK examples project. It requires boto3 version 1.26.79 or higher for AWS interactions and pytest version 7.2.1 or higher for running tests.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/cloudwatch/requirements.txt#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nboto3>=1.26.79\npytest>=7.2.1\n```\n\n----------------------------------------\n\nTITLE: Invoking Anthropic Claude foundation model with PHP\nDESCRIPTION: This code snippet demonstrates how to invoke the Anthropic Claude foundation model using Amazon Bedrock Runtime with the AWS SDK for PHP. It formats the request with a specific prompt and model parameters.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/php/example_code/bedrock-runtime/README.md#2025-04-09_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nInvokeModel(BedrockRuntimeService.php#L31)\n```\n\n----------------------------------------\n\nTITLE: Delete Multiple S3 Objects\nDESCRIPTION: Deletes multiple objects from an S3 bucket using AWS CLI commands.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/aws-cli/bash-linux/s3/README.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nbucket-lifecycle-operations/bucket_operations.sh#L303\n```\n\n----------------------------------------\n\nTITLE: AWS Glue Getting Started Implementation\nDESCRIPTION: Comprehensive C++ implementation demonstrating core AWS Glue functionality including crawler management, database operations, and job execution. Contains multiple service operations in a single source file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/glue/README.md#2025-04-09_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nglue_getting_started_scenario.cpp\n```\n\n----------------------------------------\n\nTITLE: Invoking Meta Llama 2 model with response streaming in C#\nDESCRIPTION: Illustrates how to invoke the Meta Llama 2 model with response streaming using Amazon Bedrock Runtime.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv4/Bedrock-runtime/README.md#2025-04-09_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\nModels/MetaLlama/Llama2_InvokeModelWithResponseStream/InvokeModelWithResponseStream.cs#L4\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for AWS SDK Examples\nDESCRIPTION: This code snippet lists the required Python packages and their minimum versions for running AWS SDK examples. It includes boto3 and botocore for AWS interactions, and pytest for testing.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/healthlake/requirements.txt#2025-04-09_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nboto3>=1.34.149\npytest>=7.2.1\nbotocore>=1.34.149\n```\n\n----------------------------------------\n\nTITLE: Updating an Item in DynamoDB in Swift\nDESCRIPTION: Demonstrates how to update an existing item in a DynamoDB table. This operation modifies attributes of an item without replacing the entire item.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/swift/example_code/dynamodb/README.md#2025-04-09_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nUpdateItem(basics/MovieList/MovieTable.swift#L480)\n```\n\n----------------------------------------\n\nTITLE: Running Black Code Formatter\nDESCRIPTION: Commands to run Black code formatter against Python files or directories to ensure consistent code formatting.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/README.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nblack path/to/python/file_or_directory\nblack .\n```\n\n----------------------------------------\n\nTITLE: Creating CloudWatch Dashboard in Kotlin\nDESCRIPTION: This code snippet shows how to create a CloudWatch dashboard using the AWS SDK for Kotlin. It's part of a larger CloudWatch scenario that covers various CloudWatch functionalities.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/cloudwatch/README.md#2025-04-09_snippet_16\n\nLANGUAGE: Kotlin\nCODE:\n```\nPutDashboard\n```\n\n----------------------------------------\n\nTITLE: Getting Amazon SNS Topic Attributes using .NET\nDESCRIPTION: This code example shows how to retrieve the attributes of an Amazon SNS topic. The code is from a file named GetTopicAttributes.cs located in the GetTopicAttributesExample project.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/SNS/README.md#2025-04-09_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nGetTopicAttributes\n```\n\n----------------------------------------\n\nTITLE: Deleting a Contact List with Amazon SES v2 API in C#\nDESCRIPTION: This code shows how to delete a contact list using the Amazon SES v2 API. It's part of the SESv2Wrapper class and requires the AmazonSimpleEmailServiceV2Client.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/SESv2/README.md#2025-04-09_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic async Task<bool> DeleteContactList(string listName)\n{\n    var deleteContactListRequest = new DeleteContactListRequest\n    {\n        ContactListName = listName\n    };\n\n    try\n    {\n        var response = await _sesv2Client.DeleteContactListAsync(deleteContactListRequest);\n        Console.WriteLine($\"ContactListDeleted: {response.HttpStatusCode == System.Net.HttpStatusCode.OK}\");\n        return response.HttpStatusCode == System.Net.HttpStatusCode.OK;\n    }\n    catch (NotFoundException)\n    {\n        Console.WriteLine($\"Contact list {listName} not found\");\n        return true;\n    }\n    catch (Exception ex)\n    {\n        Console.WriteLine($\"DeleteContactList failed: {ex.Message}\");\n        return false;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Records Scenario with Data Firehose in Java\nDESCRIPTION: A complete scenario showing how to process both individual and batch records using Data Firehose. This example combines multiple operations to demonstrate a full workflow.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/firehose/README.md#2025-04-09_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nsrc/main/java/com/example/firehose/scenario/FirehoseScenario.java\n```\n\n----------------------------------------\n\nTITLE: Building and Running .NET Examples with dotnet CLI\nDESCRIPTION: Instructions for building and running the code examples using the dotnet CLI. Users need to navigate to the solution directory, build the solution, and then run the project.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet build SOLUTION.sln\ndotnet run\n```\n\n----------------------------------------\n\nTITLE: Retrieving CloudFormation Stack Status with AWS SDK for Rust\nDESCRIPTION: This code example illustrates how to get the status of a CloudFormation stack using the AWS SDK for Rust. It employs the DescribeStacks operation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/cloudformation/README.md#2025-04-09_snippet_2\n\nLANGUAGE: Rust\nCODE:\n```\nsrc/bin/describe-stack.rs\n```\n\n----------------------------------------\n\nTITLE: Executing AWS KMS Operations with Java SDK\nDESCRIPTION: This code snippet demonstrates the execution of various AWS KMS operations using the AWS SDK for Java (v2). It includes creating keys, encrypting and decrypting data, managing aliases, enabling key rotation, handling grants, working with key policies, signing data, tagging keys, and scheduling key deletion.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/basics/kms/SPECIFICATION.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n--------------------------------------------------------------------------------\nWelcome to the AWS Key Management SDK Getting Started scenario.\nThis program demonstrates how to interact with AWS Key Management using the AWS SDK for Java (v2).\nThe AWS Key Management Service (KMS) is a secure and highly available service that allows you to create\nand manage AWS KMS keys and control their use across a wide range of AWS services and applications.\nKMS provides a centralized and unified approach to managing encryption keys, making it easier to meet your\ndata protection and regulatory compliance requirements.\n\nThis Getting Started scenario creates two key types. A symmetric encryption key is used to encrypt and decrypt data,\nand an asymmetric key used to digitally sign data.\nLet's get started...\n\n\nPress <ENTER> to continue:\nContinuing with the program...\n\n--------------------------------------------------------------------------------\n1. Create a symmetric KMS key\nFirst, we will create a symmetric KMS key that is used to encrypt and decrypt data by invoking createKey().\n\nPress <ENTER> to continue:\nContinuing with the program...\n\nCreated a customer key with ARN arn:aws:kms:us-west-2:123456789012:key/11223344-aaaa-bbbb-cccc-111222233344\n\nPress <ENTER> to continue:\nContinuing with the program...\n\n--------------------------------------------------------------------------------\n2. Enable a KMS key\n\nBy default when you create an AWS key, it is enabled. The code checks to\ndetermine if the key is enabled. If it is not enabled, the code enables it.\n\nPress <ENTER> to continue:\nContinuing with the program...\n\nThe key is enabled.\n\nPress <ENTER> to continue:\nContinuing with the program...\n\n--------------------------------------------------------------------------------\n3. Encrypt data using the symmetric KMS key\nOne of the main uses of symmetric keys is to encrypt and decrypt data.\nNext, you encrypt the string 'Hello, AWS KMS!' with the SYMMETRIC_DEFAULT encryption algorithm.\n\n\nPress <ENTER> to continue:\nContinuing with the program...\n\nThe encryption algorithm is SYMMETRIC_DEFAULT\n\nPress <ENTER> to continue:\nContinuing with the program...\n\n--------------------------------------------------------------------------------\n4. Create an alias\nEnter an alias name for the key. The name should be prefixed with 'alias/'.\nFor example, 'alias/myFirstKey'.\n\n\nalias/dev-encryption-key was successfully created.\n\nPress <ENTER> to continue:\nContinuing with the program...\n\n--------------------------------------------------------------------------------\n5. List all of your aliases.\n\nPress <ENTER> to continue:\nContinuing with the program...\n\nThe alias name is: alias/Scott\nThe alias name is: alias/alias/myAlias\nThe alias name is: alias/alias/s3-kms-key\nThe alias name is: alias/aws/cloud9\nThe alias name is: alias/aws/connect\nThe alias name is: alias/aws/dynamodb\nThe alias name is: alias/aws/ebs\nThe alias name is: alias/aws/elasticfilesystem\nThe alias name is: alias/aws/es\nThe alias name is: alias/aws/glue\nThe alias name is: alias/aws/kendra\nThe alias name is: alias/aws/kinesisvideo\nThe alias name is: alias/aws/lex\nThe alias name is: alias/aws/rds\nThe alias name is: alias/aws/redshift\n\nPress <ENTER> to continue:\nContinuing with the program...\n\n--------------------------------------------------------------------------------\n6. Enable automatic rotation of the KMS key\nBy default, when you enable automatic rotation of a KMS key,\nKMS rotates the key material of the KMS key one year (approximately 365 days) from the enable date and every year\nthereafter.\n\nPress <ENTER> to continue:\nContinuing with the program...\n\nYou have enabled key rotation for key 11223344-aaaa-bbbb-cccc-111222233344\n\nPress <ENTER> to continue:\nContinuing with the program...\n\n--------------------------------------------------------------------------------\n7. Create a grant.\n\nA grant is a policy instrument that allows Amazon Web Services principals to use KMS keys.\nIt also can allow them to view a KMS key (DescribeKey) and create and manage grants.\nWhen authorizing access to a KMS key, grants are considered along with key policies and IAM policies.\n\nPress <ENTER> to continue:\nContinuing with the program...\n\nThe grant id is 1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\n\nPress <ENTER> to continue:\nContinuing with the program...\n\n--------------------------------------------------------------------------------\n8. List grants for the KMS key.\n\nPress <ENTER> to continue:\nContinuing with the program...\n\nThe grant Id is: 8f1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\n\nPress <ENTER> to continue:\nContinuing with the program...\n\n--------------------------------------------------------------------------------\n9. Revoke the grant.\n\nPress <ENTER> to continue:\nContinuing with the program...\n\n1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef was successfully revoked!\n\nPress <ENTER> to continue:\nContinuing with the program...\n\n--------------------------------------------------------------------------------\n10. Decrypt the data.\nLets decrypt the data that was encrypted in an early step.\nWe'll use the same key to decrypt the string that we encrypted earlier in the program.\n\n\nPress <ENTER> to continue:\nContinuing with the program...\n\nDecrypted text is: Hello, AWS KMS!\n\nPress <ENTER> to continue:\nContinuing with the program...\n\n--------------------------------------------------------------------------------\n10. Create a key policy.\nA key policy is a resource policy for an KMS key. Key policies are the primary way to control\naccess to KMS keys. Every KMS key must have exactly one key policy. The statements in the key policy\ndetermine who has permission to use the KMS key and how they can use it.\nYou can also use IAM policies and grants to control access to the KMS key, but every KMS key\nmust have a key policy.\n\nWe will set a key policy.\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [{\n    \"Effect\": \"Allow\",\n    \"Principal\": {\"AWS\": \"arn:aws:iam::0000000000:root\"},\n    \"Action\": \"kms:*\",\n    \"Resource\": \"*\"\n    }]\n\n\nPress <ENTER> to continue:\nContinuing with the program...\n\nPolicy Name: default\nThe Key already has a policy.\n\nPress <ENTER> to continue:\nContinuing with the program...\n\n--------------------------------------------------------------------------------\n11. Get the key policy.\nLets get the key policy to make sure it exists. \n\nPress <ENTER> to continue:\nContinuing with the program...\n\nThe response is {\n  \"Version\" : \"2012-10-17\",\n  \"Id\" : \"key-default-1\",\n  \"Statement\" : [ {\n    \"Sid\" : \"Enable IAM User Permissions\",\n    \"Effect\" : \"Allow\",\n    \"Principal\" : {\n      \"AWS\" : \"arn:aws:iam::123456789012:root\"\n    },\n    \"Action\" : \"kms:*\",\n    \"Resource\" : \"*\"\n  } ]\n}\n\nPress <ENTER> to continue:\nContinuing with the program...\n\n--------------------------------------------------------------------------------\n12. Sign your data with the asymmetric KMS key.\n Signing your data with an AWS key can provide several benefits that make it an attractive option\n for your data signing needs. By using an AWS KMS key, you can leverage the\n security controls and compliance features provided by AWS,\n which can help you meet various regulatory requirements and enhance the overall security posture\n of your organization.\n\n\nPress <ENTER> to continue:\nContinuing with the program...\n\nCreated KMS key with ID: 12345678-abcd-abcd-abcd-123456789012\nSignature verification result: true\n\nPress <ENTER> to continue:\nContinuing with the program...\n\n--------------------------------------------------------------------------------\n13. Tag your symmetric KMS Key.\nBy using tags, you can improve the overall management, security, and governance of your\nKMS keys, making it easier to organize, track, and control access to your encrypted data within\nyour AWS environment\n\n\nPress <ENTER> to continue:\nContinuing with the program...\n\nTagged KMS key with key-value pair\n\nPress <ENTER> to continue:\nContinuing with the program...\n\n--------------------------------------------------------------------------------\n14. Schedule the deletion of the KMS key.\nBy default, KMS applies a waiting period of 30 days,\nbut you can specify a waiting period of 7-30 days. When this operation is successful,\nthe key state of the KMS key changes to PendingDeletion and the key can't be used in any\ncryptographic operations. It remains in this state for the duration of the waiting period.\n\nDeleting a KMS key is a destructive and potentially dangerous operation. When a KMS key is deleted,\nall data that was encrypted under the KMS key is unrecoverable. \n\nWould you like to delete the Key Management resources? (y/n)\ny\nYou selected to delete the AWS KMS resources.\n\nPress <ENTER> to continue:\nContinuing with the program...\n\nThe key will be deleted in 7 days.\n--------------------------------------------------------------------------------\nThis concludes the AWS Key Management SDK Getting Started scenario\n--------------------------------------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Setting S3 Bucket Policies in JavaScript\nDESCRIPTION: This code snippet shows how to set a policy for an S3 bucket using the PutBucketPolicy operation in the AWS SDK for JavaScript (v3).\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/s3/README.md#2025-04-09_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\n- [PutBucketPolicy](actions/put-bucket-policy.js#L4)\n```\n\n----------------------------------------\n\nTITLE: Enabling AWS Config Resources in Rust\nDESCRIPTION: Command-line utility to enable AWS Config for specified resource types. Requires bucket, IAM role, KMS key, configuration name, prefix and SNS topic parameters.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/config/README.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncargo run --bin enable-config -- -b BUCKET -i IAM-ARN -k KMS-ARN -n NAME -p PREFIX -s SNS-ARN -t TYPE [-r REGION] [-v]\n```\n\n----------------------------------------\n\nTITLE: Get Domain Suggestions from Route 53 in C#\nDESCRIPTION: Obtains domain name suggestions based on a specified domain name and top-level domain. Returns a list of available domain names similar to the requested domain.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Route53/README.md#2025-04-09_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n/// <summary>\n/// Get suggestions for a domain name.\n/// </summary>\n/// <param name=\"domainName\">The domain name to check.</param>\n/// <param name=\"onlyAvailable\">Whether to return only available domains.</param>\n/// <param name=\"suggestionCount\">How many suggestions to return. Default 5, minimum 1, maximum 50.</param>\n/// <returns>The list of suggestions.</returns>\npublic async Task<List<DomainSuggestion>> GetDomainSuggestions(string domainName, bool onlyAvailable, int suggestionCount)\n{\n    var result = await _amazonRoute53Domains.GetDomainSuggestionsAsync(\n        new GetDomainSuggestionsRequest\n        {\n            DomainName = domainName,\n            OnlyAvailable = onlyAvailable,\n            SuggestionCount = suggestionCount\n        }\n    );\n    return result.SuggestionsList;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Device Position in Amazon Location Service using Java\nDESCRIPTION: This code snippet demonstrates how to get the position of a device in Amazon Location Service. It's part of the LocationActions class that provides various Location Service operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/location/README.md#2025-04-09_snippet_12\n\nLANGUAGE: Java\nCODE:\n```\nGetDevicePosition\n```\n\n----------------------------------------\n\nTITLE: Send SQS Message in Kotlin\nDESCRIPTION: Example showing how to send a message to an Amazon SQS queue using the SendMessage API operation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/sqs/README.md#2025-04-09_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nSendMessage\n```\n\n----------------------------------------\n\nTITLE: Creating an IAM Policy in C++\nDESCRIPTION: Code excerpt showing how to create an IAM policy using the AWS SDK for C++.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/iam/README.md#2025-04-09_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\n// From create_policy.cpp line 69\n```\n\n----------------------------------------\n\nTITLE: Running All Tests\nDESCRIPTION: Command to run all tests in the test project directory\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv4/README.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet test\n```\n\n----------------------------------------\n\nTITLE: Extracting Data from Excel Spreadsheets with JXL and Converting to XML in Java\nDESCRIPTION: This class extracts data from Excel spreadsheets stored in Amazon S3 buckets, parses the content using JXL library, and converts it to XML format. It utilizes the S3Service to retrieve files and implements secure XML processing with protections against XML vulnerabilities.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/Creating_etl_workflow/README.md#2025-04-09_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\npackage com.etl.example;\n\nimport jxl.Cell;\nimport jxl.Sheet;\nimport jxl.Workbook;\nimport java.io.ByteArrayInputStream;\nimport java.io.InputStream;\nimport java.util.ArrayList;\nimport java.util.Comparator;\nimport java.util.List;\nimport jxl.read.biff.BiffException;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\nimport javax.xml.XMLConstants;\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.ParserConfigurationException;\nimport javax.xml.transform.Transformer;\nimport javax.xml.transform.TransformerConfigurationException;\nimport javax.xml.transform.TransformerException;\nimport javax.xml.transform.TransformerFactory;\nimport javax.xml.transform.dom.DOMSource;\nimport javax.xml.transform.stream.StreamResult;\nimport java.io.*;\n\npublic class ExcelService {\n\n    public String getData(String bucketName, String object) throws IOException, BiffException {\n        // Get the Excel speadsheet from the Amazon S3 bucket.\n        S3Service s3Service = new S3Service();\n        byte[] data = s3Service.getObjectBytes(bucketName, object);\n        InputStream inputStrean = new ByteArrayInputStream(data);\n\n        List<PopData> myList = new ArrayList<>() ;\n        System.out.println(\"Retrieving data from the Excel Spreadsheet\");\n        Workbook wb = Workbook.getWorkbook(inputStrean);\n        Sheet sheet = wb.getSheet(0);\n        try{\n            // Read the data from the excel spreadsheet.\n            Sheet s=wb.getSheet(0);\n            int b = s.getColumns();\n            System.out.println(\"The No. of Columns in the Sheet are = \" + b);\n            int a = s.getRows();\n            System.out.println(\"The No. of Rows in the sheet are = \" +a);\n            PopData popData = null;\n            // Loop through the rows in the spreadsheet.\n            for (int zz = 0 ; zz <a; zz++) {\n                // Get the first cell.\n                System.out.println(zz);\n                Cell[] row = sheet.getRow(zz);\n                if (zz ==0)\n                    System.out.println(\"Not 1st row\");\n                else {\n                    popData = new PopData();\n                   for (Cell cell : row) {\n                       int colIndex =  cell.getColumn();\n                       String val = cell.getContents();\n                       switch(colIndex) {\n                           case 0:\n                               popData.setName(val);\n                               break;\n\n                           case 1:\n                               popData.setCode(val);\n                               break;\n\n                           case 2:\n                               popData.set2010(val);\n                               break;\n\n                           case 3:\n                               popData.set2011(val);\n                               break;\n\n                           case 4:\n                               popData.set2012(val);\n                               break;\n\n                           case 5:\n                               popData.set2013(val);\n                               break;\n\n                           case 6:\n                               popData.set2014(val);\n                               break;\n\n                           case 7:\n                               popData.set2015(val);\n                               break;\n\n                           case 8:\n                               popData.set2016(val);\n                               break;\n\n                           case 9:\n                               popData.set2017(val);\n                               break;\n\n                           case 10:\n                               popData.set2018(val);\n                               break;\n\n                           default: {\n                               popData.set2019(val);\n                               myList.add(popData);\n                           }\n                       }\n                   }\n                }\n            }\n            myList.sort(Comparator.comparing(PopData::getName));\n            return convertToString(toXml(myList));\n\n        }catch (Exception e) {\n            e.printStackTrace();\n        }\n        return \"\";\n    }\n\n    // Convert population data into XML.\n    private static Document toXml(List<PopData> itemList) {\n        try {\n            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n            factory.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n            DocumentBuilder builder = factory.newDocumentBuilder();\n            Document doc = builder.newDocument();\n\n            // Start building the XML.\n            Element root = doc.createElement( \"Items\" );\n            doc.appendChild( root );\n\n            // Iterate through the collection.\n            for (PopData myItem : itemList) {\n                // Get the WorkItem object from the collection.\n                Element item = doc.createElement(\"Item\");\n                root.appendChild(item);\n\n                // Set Name.\n                Element id = doc.createElement(\"Name\");\n                id.appendChild(doc.createTextNode(myItem.getName()));\n                item.appendChild(id);\n\n                // Set Name.\n                Element name = doc.createElement(\"Code\");\n                name.appendChild(doc.createTextNode(myItem.getCode()));\n                item.appendChild(name);\n\n                // Set 2010.\n                Element ob2010 = doc.createElement(\"Date2010\");\n                ob2010.appendChild(doc.createTextNode(myItem.get2010()));\n                item.appendChild(ob2010);\n\n                // Set 2011.\n                Element ob2011 = doc.createElement(\"Date2011\");\n                ob2011.appendChild(doc.createTextNode(myItem.get2011()));\n                item.appendChild(ob2011);\n\n                // Set 2012.\n                Element ob2012 = doc.createElement(\"Date2012\");\n                ob2012.appendChild(doc.createTextNode(myItem.get2012()));\n                item.appendChild(ob2012);\n\n                // Set 2013.\n                Element ob2013 = doc.createElement(\"Date2013\");\n                ob2013.appendChild(doc.createTextNode(myItem.get2013()));\n                item.appendChild(ob2013);\n\n                // Set 2014.\n                Element ob2014 = doc.createElement(\"Date2014\");\n                ob2014.appendChild(doc.createTextNode(myItem.get2014()));\n                item.appendChild(ob2014);\n\n                // Set 2015.\n                Element ob2015 = doc.createElement(\"Date2015\");\n                ob2015.appendChild(doc.createTextNode(myItem.get2015()));\n                item.appendChild(ob2015);\n\n                // Set 2016.\n                Element ob2016 = doc.createElement(\"Date2016\");\n                ob2016.appendChild(doc.createTextNode(myItem.get2016()));\n                item.appendChild(ob2016);\n\n                // Set 2017.\n                Element ob2017 = doc.createElement(\"Date2017\");\n                ob2017.appendChild(doc.createTextNode(myItem.get2017()));\n                item.appendChild(ob2017);\n\n                // Set 2018.\n                Element ob2018 = doc.createElement(\"Date2018\");\n                ob2018.appendChild(doc.createTextNode(myItem.get2018()));\n                item.appendChild(ob2018);\n\n                // Set 2019.\n                Element ob2019 = doc.createElement(\"Date2019\");\n                ob2019.appendChild(doc.createTextNode(myItem.get2019()));\n                item.appendChild(ob2019);\n            }\n\n            return doc;\n\n        } catch(ParserConfigurationException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n\n    private static String convertToString(Document xml) {\n        try {\n            TransformerFactory transformerFactory = getSecureTransformerFactory();\n            Transformer transformer = transformerFactory.newTransformer();\n            StreamResult result = new StreamResult(new StringWriter());\n            DOMSource source = new DOMSource(xml);\n            transformer.transform(source, result);\n            return result.getWriter().toString();\n\n        } catch(TransformerException ex) {\n            ex.printStackTrace();\n        }\n        return null;\n    }\n\n    private static TransformerFactory getSecureTransformerFactory() {\n        TransformerFactory transformerFactory = TransformerFactory.newInstance();\n        try {\n            transformerFactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\n        } catch (TransformerConfigurationException e) {\n            e.printStackTrace();\n        }\n        return transformerFactory;\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Referencing S3 Glacier Client Operations in JavaScript SDK v3\nDESCRIPTION: Code reference highlighting the CreateVault and UploadArchive operations available in the S3 Glacier client for AWS SDK for JavaScript v3. The specific implementations would be found in the referenced file path.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/glacier/README.md#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsrc/libs/glacierClient.js#L15\n```\n\n----------------------------------------\n\nTITLE: Implementing First Step Lambda Handler for Ticket Processing in Java\nDESCRIPTION: This Handler class implements the first step in a workflow by retrieving a ticket ID from the incoming event and logging execution details to CloudWatch. It passes the ticket ID to the next step in the workflow.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_workflows_stepfunctions/README.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage example;\n\nimport com.amazonaws.services.lambda.runtime.Context;\nimport com.amazonaws.services.lambda.runtime.RequestHandler;\nimport com.amazonaws.services.lambda.runtime.LambdaLogger;\nimport com.google.gson.Gson;\nimport com.google.gson.GsonBuilder;\nimport java.util.Map;\n\n// Handler value: example.Handler\npublic class Handler implements RequestHandler<Map<String,String>, String>{\n\n    @Override\n    public String handleRequest(Map<String,String> event, Context context)\n    {\n        LambdaLogger logger = context.getLogger();\n        Gson gson = new GsonBuilder().create();\n\n        // Log execution details\n        logger.log(\"ENVIRONMENT VARIABLES: \" + gson.toJson(System.getenv()));\n        logger.log(\"CONTEXT: \" + gson.toJson(context));\n        // process event\n        logger.log(\"EVENT Data: \" + gson.toJson(event));\n\n        String myCaseID = event.get(\"inputCaseID\");\n        logger.log(\"CaseId: \" + myCaseID);\n        return myCaseID;\n       }\n      }\n```\n\n----------------------------------------\n\nTITLE: Running the Flow Conversation Example\nDESCRIPTION: Command to execute the example that demonstrates how to use InvokeFlow to converse with an Amazon Bedrock flow including an agent node.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/bedrock-agent-runtime/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython flows/flow-conversation.py\n```\n\n----------------------------------------\n\nTITLE: Running Flask REST Service in Debug Mode\nDESCRIPTION: Command to start the Flask web server in debug mode on port 8080, which is configured to work with the Elwing client.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/cross_service/dynamodb_item_tracker/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nflask --debug run -p 8080\n```\n\n----------------------------------------\n\nTITLE: Uploading an Object to S3 in Java\nDESCRIPTION: Code example that demonstrates how to upload a file to an S3 bucket using the PutObject operation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/s3/README.md#2025-04-09_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\n- [PutObject](src/main/java/com/example/s3/scenario/S3Actions.java#L126)\n```\n\n----------------------------------------\n\nTITLE: Creating an AWS AppSync API Key using Java SDK\nDESCRIPTION: This code example demonstrates how to create an API key for AWS AppSync using the CreateApiKey command with the AppSyncClient object in Java.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/appsync/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nCreateApiKey command\n```\n\n----------------------------------------\n\nTITLE: Running the Scheduled Events Scenario Example\nDESCRIPTION: Command to run the comprehensive scenario example that demonstrates creating and managing EventBridge schedules and schedule groups.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/scheduler/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython scenario/scheduler_scenario.py\n```\n\n----------------------------------------\n\nTITLE: Sending Newsletter Email with AWS SES in Java\nDESCRIPTION: This snippet demonstrates how to send a newsletter email using AWS SES. It creates an email request with a template, sets the sender address, and specifies list management options. The code also includes error handling for various SES-specific exceptions.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/sesv2_weekly_mailer/content/61a_NewsletterWorkflow.java.md#2025-04-09_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\n            .content(EmailContent.builder()\n                .template(Template.builder()\n                    .templateName(TEMPLATE_NAME)\n                    .templateData(coupons)\n                    .build())\n                .build())\n            .fromEmailAddress(this.verifiedEmail)\n            .listManagementOptions(ListManagementOptions.builder()\n                .contactListName(CONTACT_LIST_NAME)\n                .build())\n            .build();\n        SendEmailResponse newsletterResponse = sesClient.sendEmail(newsletterRequest);\n        System.out.println(\"Newsletter sent to \" + emailAddress + \": \" + newsletterResponse.messageId());\n      }\n    } catch (NotFoundException e) {\n      System.err.println(\"The contact list is missing. Please create the contact list and try again.\");\n    } catch (AccountSuspendedException e) {\n      System.err.println(\"Your account is suspended. Please resolve the issue and try again.\");\n    } catch (MailFromDomainNotVerifiedException e) {\n      System.err.println(\"The sending domain is not verified. Please verify your domain and try again.\");\n      throw e;\n    } catch (MessageRejectedException e) {\n      System.err.println(\"The message content is invalid. Please check your template and try again.\");\n      throw e;\n    } catch (SendingPausedException e) {\n      System.err.println(\"Sending is currently paused for your account. Please resolve the issue and try again.\");\n      throw e;\n    } catch (Exception e) {\n      System.err.println(\"Error occurred while sending the newsletter: \" + e.getMessage());\n      e.printStackTrace();\n    }\n```\n\n----------------------------------------\n\nTITLE: Listing DynamoDB Tables with C++\nDESCRIPTION: This code snippet shows how to list all DynamoDB tables in an AWS account using the AWS SDK for C++. It retrieves the names of all tables in the specified region.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/dynamodb/README.md#2025-04-09_snippet_10\n\nLANGUAGE: C++\nCODE:\n```\nListTables\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SDK for Java and Configuring Data Firehose\nDESCRIPTION: This snippet initializes the AWS SDK for Java service clients and defines configuration parameters for the Data Firehose delivery stream. It sets up the delivery stream name, region, batch size, and logging settings.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/firehose/src/main/java/com/example/firehose/scenario/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\n// Code not provided in the given text, but described as part of the execution steps\n```\n\n----------------------------------------\n\nTITLE: Listing Tables in Amazon Keyspaces using C#\nDESCRIPTION: This code snippet demonstrates how to list all tables in a specific keyspace in Amazon Keyspaces using the AWS SDK for .NET. It's an example of a single action operation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Keyspaces/README.md#2025-04-09_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nActions/KeyspacesWrapper.cs#L144\n```\n\n----------------------------------------\n\nTITLE: Creating REST Controller for Amazon SQS Operations\nDESCRIPTION: A Spring REST controller that handles HTTP requests for Amazon SQS message operations. It provides endpoints for adding messages, retrieving messages, and purging the queue, working with the MessageData model and SendReceiveMessages service.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_message_application/README.md#2025-04-09_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\n  package com.example.sqs;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.CrossOrigin;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.ResponseBody;\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.util.List;\nimport java.util.UUID;\n\n@CrossOrigin(origins = \"*\")\n@RestController\n@RequestMapping(\"/chat\")\npublic class MainController {\n\n    @Autowired\n    SendReceiveMessages msgService;\n\n    // Add a new message.\n    @PostMapping(\"/add\")\n    List<MessageData> addItems(HttpServletRequest request, HttpServletResponse response) {\n        String user = request.getParameter(\"user\");\n        String message = request.getParameter(\"message\");\n\n        // Generate the ID.\n        UUID uuid = UUID.randomUUID();\n        String msgId = uuid.toString();\n\n        MessageData messageOb = new MessageData();\n        messageOb.setId(msgId);\n        messageOb.setName(user);\n        messageOb.setBody(message);\n        msgService.processMessage(messageOb);\n        return msgService.getMessages();\n    }\n\n    // Purge the queue.\n    @RequestMapping(value = \"/purge\", method = RequestMethod.GET)\n    @ResponseBody\n    String purgeMessages(HttpServletRequest request, HttpServletResponse response) {\n        msgService.purgeMyQueue();\n        return \"Queue is purged\";\n    }\n\n    // Get messages.\n    @RequestMapping(value = \"/msgs\", method = RequestMethod.GET)\n    @ResponseBody\n    List<MessageData> getItems(HttpServletRequest request, HttpServletResponse response) {\n        List<MessageData> data =  msgService.getMessages();\n        return data;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Detecting Entities in Extracted Text using Amazon Comprehend in Python\nDESCRIPTION: This function uses Amazon Comprehend's DetectEntities API to find entities within each line of text extracted from the image. It returns a list of entities found for each line.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/cross_service/textract_comprehend_notebook/TextractAndComprehendNotebook.ipynb#2025-04-09_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef entity_detection(lines, access_code, secret_code, region):\n    # Create a list to hold the entities found for every line\n    response_entities = []\n\n    # Connect to Amazon Comprehend\n    comprehend = boto3.client(\n        service_name=\"comprehend\",\n        region_name=region,\n        aws_access_key_id=access_code,\n        aws_secret_access_key=secret_code,\n    )\n\n    # Iterate through the lines in the list of lines\n    for line in lines:\n        # construct a list to hold all found entities for a single line\n        entities_list = []\n\n        # Call the DetectEntities operation and pass it a line from lines\n        found_entities = comprehend.detect_entities(Text=line, LanguageCode=\"en\")\n        for response_data, values in found_entities.items():\n            for item in values:\n                if \"Text\" in item:\n                    print(\"Entities found:\")\n                    for text, val in item.items():\n                        if text == \"Text\":\n                            # Append the found entities to the list of entities\n                            entities_list.append(val)\n                            print(val)\n        # Add all found entities for this line to the list of all entities found\n        response_entities.append(entities_list)\n\n    return response_entities\n```\n\n----------------------------------------\n\nTITLE: Listing DynamoDB Tables in Swift\nDESCRIPTION: Shows how to list all DynamoDB tables in the AWS account and region. This operation returns the names of all tables owned by the current AWS account.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/swift/example_code/dynamodb/README.md#2025-04-09_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nListTables(ListTables/Sources/DatabaseManager.swift#L107)\n```\n\n----------------------------------------\n\nTITLE: Listing In-Progress Multipart Uploads for S3 Directory Buckets in Java\nDESCRIPTION: Example code for listing all in-progress multipart uploads for an S3 Directory Bucket using AWS SDK for Java 2.x.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/s3/src/main/java/com/example/s3/directorybucket/README.md#2025-04-09_snippet_17\n\nLANGUAGE: Java\nCODE:\n```\nListMultipartUploads\n```\n\n----------------------------------------\n\nTITLE: Checking Object Metadata in S3 Directory Buckets in Java\nDESCRIPTION: Example code for retrieving object metadata without downloading the object content from an S3 Directory Bucket using AWS SDK for Java 2.x.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/s3/src/main/java/com/example/s3/directorybucket/README.md#2025-04-09_snippet_15\n\nLANGUAGE: Java\nCODE:\n```\nHeadObject\n```\n\n----------------------------------------\n\nTITLE: Invoking multiple foundation models on Amazon Bedrock with PHP\nDESCRIPTION: This scenario demonstrates how to prepare and send prompts to a variety of large-language models (LLMs) on Amazon Bedrock using the AWS SDK for PHP. It shows working with different model types in one application.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/php/example_code/bedrock-runtime/README.md#2025-04-09_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nGettingStartedWithBedrockRuntime.php\n```\n\n----------------------------------------\n\nTITLE: DynamoDB Data Persistence for PPE Records\nDESCRIPTION: Service class that handles the persistence of PPE detection results to DynamoDB using the enhanced client. It creates unique IDs for each record and stores detailed information about detected equipment.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_lambda_ppe/README.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.ppe;\n\nimport software.amazon.awssdk.enhanced.dynamodb.*;\nimport software.amazon.awssdk.regions.Region;\nimport software.amazon.awssdk.services.dynamodb.DynamoDbClient;\nimport software.amazon.awssdk.services.dynamodb.model.*;\nimport java.time.Instant;\nimport java.time.LocalDateTime;\nimport java.time.ZoneOffset;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.UUID;\n\npublic class DynamoDBService {\n\n    private DynamoDbClient getClient() {\n        Region region = Region.US_EAST_1;\n        DynamoDbClient ddb = DynamoDbClient.builder()\n                .region(region)\n                .build();\n        return ddb;\n    }\n\n    public void persistItem(List<ArrayList<GearItem>> gearList) {\n        DynamoDbClient ddb = getClient();\n\n        try {\n            DynamoDbEnhancedClient enhancedClient = DynamoDbEnhancedClient.builder()\n                    .dynamoDbClient(ddb)\n                    .build();\n\n            DynamoDbTable<Gear> gearTable = enhancedClient.table(\"Gear\", TableSchema.fromBean(Gear.class));\n            Gear gearRecord;\n\n            LocalDateTime now = LocalDateTime.now();\n            LocalDateTime timeVal = now.toLocalDate().atStartOfDay();\n            Instant instant = timeVal.toInstant(ZoneOffset.UTC);\n\n            for (Object o : gearList) {\n                List innerList = (List) o;\n                for (Object value : innerList) {\n                    gearRecord = new Gear();\n                    UUID uuid = UUID.randomUUID();\n                    GearItem gearItem = (GearItem) value;\n\n                    gearRecord.setId(uuid.toString());\n                    gearRecord.setKey(gearItem.getKey());\n                    gearRecord.setDate(instant.toString());\n                    gearRecord.setItem(gearItem.getName());\n                    gearRecord.setCoverDescription(gearItem.getBodyCoverDescription());\n                    gearRecord.setItemDescription(gearItem.getItemDescription());\n                    gearRecord.setConfidence(gearItem.getConfidence());\n\n                    gearTable.putItem(gearRecord);\n                }\n            }\n        } catch (DynamoDbException e) {\n            System.err.println(e.getMessage());\n            System.exit(1);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying an Email Identity in Amazon SES using C++\nDESCRIPTION: This code snippet illustrates how to verify an email identity in Amazon SES using the AWS SDK for C++. The implementation is in the 'verify_email_identity.cpp' file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/ses/README.md#2025-04-09_snippet_15\n\nLANGUAGE: C++\nCODE:\n```\n// See verify_email_identity.cpp, line 21\n```\n\n----------------------------------------\n\nTITLE: Listing Amazon S3 Buckets using AWS SDK for Swift\nDESCRIPTION: This code snippet shows how to list all buckets in your Amazon S3 account using the AWS SDK for Swift.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/swift/example_code/s3/README.md#2025-04-09_snippet_7\n\nLANGUAGE: Swift\nCODE:\n```\nListBuckets/Sources/ListBuckets/S3Session.swift#L106\n```\n\n----------------------------------------\n\nTITLE: Running IAM Access Key Management Example in Python\nDESCRIPTION: Command to run an example that demonstrates managing access keys, including creation, listing, checking last usage, updating, and deletion.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/iam/README.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npython access_key_wrapper.py\n```\n\n----------------------------------------\n\nTITLE: Retrieving Object Attributes from S3 Directory Buckets in Java\nDESCRIPTION: Example code for getting object attributes from an S3 Directory Bucket using AWS SDK for Java 2.x.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/s3/src/main/java/com/example/s3/directorybucket/README.md#2025-04-09_snippet_13\n\nLANGUAGE: Java\nCODE:\n```\nGetObjectAttributes\n```\n\n----------------------------------------\n\nTITLE: Creating a State Machine with AWS Step Functions Java SDK\nDESCRIPTION: This code snippet demonstrates the creation of a state machine using the AWS Step Functions Java SDK. It uses the createStateMachine command to define and set up a new state machine.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/stepfunctions/README.md#2025-04-09_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\n// Code snippet for creating a state machine\n// Refer to: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/route53/src/main/java/com/example/route/StepFunctionsScenario.java\n```\n\n----------------------------------------\n\nTITLE: Getting Temporary Security Credentials with AWS STS in Kotlin\nDESCRIPTION: Example demonstrating how to obtain temporary security credentials using AWS STS AssumeRole operation. This allows trusted users to access AWS resources with limited permissions.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/sts/README.md#2025-04-09_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: React AWS Service Integration\nDESCRIPTION: JavaScript module for React frontend integration with the Spring Boot backend. Implements axios HTTP client for making API calls to handle message operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/creating_message_application/README.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport axios from \"axios\";\nimport configData from \"./config.json\";\n\nexport const getMessages = async () => {\n  return await axios.get(`${configData.BASE_URL}/chat/msgs`);\n};\n\nexport const postMessage = async (item) => {\n  let user = item.username;\n  let message = item.message;\n  await axios.post(\n    `${configData.BASE_URL}/chat/add?user=` + user + `&message=` + message\n  );\n};\n\nexport const purgeMessages = async () => {\n  await axios.get(`${configData.BASE_URL}/chat/purge`)\n}\n```\n\n----------------------------------------\n\nTITLE: Describing EC2 Security Groups in Go\nDESCRIPTION: This example displays information about your security groups. It doesn't require any command-line arguments.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/ec2/README.md#2025-04-09_snippet_10\n\nLANGUAGE: Go\nCODE:\n```\ngo run DescribeSecurityGroups.go\n```\n\n----------------------------------------\n\nTITLE: Creating Maintenance Window in Systems Manager with JavaScript SDK v3\nDESCRIPTION: This code snippet demonstrates how to create a maintenance window using the CreateMaintenanceWindow operation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/ssm/README.md#2025-04-09_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// CreateMaintenanceWindow\n```\n\n----------------------------------------\n\nTITLE: Running Custom Classifier Training and Document Classification Example in Python\nDESCRIPTION: Command to execute the Python script that demonstrates how to create, train, and use a custom multi-label classifier with Amazon Comprehend for document classification tasks.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/comprehend/README.md#2025-04-09_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\npython comprehend_classifier.py\n```\n\n----------------------------------------\n\nTITLE: Listing Amazon SNS Topics using .NET\nDESCRIPTION: This code example shows how to list all Amazon SNS topics. The code is from a file named ListSNSTopics.cs located in the ListSNSTopicsExample project.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/SNS/README.md#2025-04-09_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nListTopics\n```\n\n----------------------------------------\n\nTITLE: WorkItem Data Class for Managing Work Items in Kotlin\nDESCRIPTION: A simple data class representing a work item with properties like id, name, guide, date, description, status, and archived flag. This is used to store and manage work item data in the application.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/creating_redshift_application/README.md#2025-04-09_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.example.demo\n\nclass WorkItem {\n    var id: String? = null\n    var name: String? = null\n    var guide: String? = null\n    var date: String? = null\n    var description: String? = null\n    var status: String? = null\n    var archived: Boolean? = null\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for AWS SNS Example in C++\nDESCRIPTION: This CMake configuration sets up a project for an AWS SNS example using the AWS SDK for C++. It specifies the required AWS service components, sets the C++ standard, handles Windows-specific configurations, and links the necessary AWS SDK libraries.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/sns/hello_sns/CMakeLists.txt#2025-04-09_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Set the minimum required version of CMake for this project.\ncmake_minimum_required(VERSION 3.13)\n\n# Set the AWS service components used by this project.\nset(SERVICE_COMPONENTS sns)\n\n# Set this project's name.\nproject(\"hello_sns\")\n\n# Set the C++ standard to use to build this target.\n# At least C++ 11 is required for the AWS SDK for C++.\nset(CMAKE_CXX_STANDARD 11)\n\n# Use the MSVC variable to determine if this is a Windows build.\nset(WINDOWS_BUILD ${MSVC})\n\nif (WINDOWS_BUILD) # Set the location where CMake can find the installed libraries for the AWS SDK.\n    string(REPLACE \";\" \"/aws-cpp-sdk-all;\" SYSTEM_MODULE_PATH \"${CMAKE_SYSTEM_PREFIX_PATH}/aws-cpp-sdk-all\")\n    list(APPEND CMAKE_PREFIX_PATH ${SYSTEM_MODULE_PATH})\nendif ()\n\n# Find the AWS SDK for C++ package.\nfind_package(AWSSDK REQUIRED COMPONENTS ${SERVICE_COMPONENTS})\n\nif (WINDOWS_BUILD AND AWSSDK_INSTALL_AS_SHARED_LIBS)\n    # Copy relevant AWS SDK for C++ libraries into the current binary directory for running and debugging.\n\n    # set(BIN_SUB_DIR \"/Debug\") # If you are building from the command line you may need to uncomment this\n    # and set the proper subdirectory to the executables' location.\n\n    AWSSDK_CPY_DYN_LIBS(SERVICE_COMPONENTS \"\" ${CMAKE_CURRENT_BINARY_DIR}${BIN_SUB_DIR})\nendif ()\n\nadd_executable(${PROJECT_NAME}\n        hello_sns.cpp)\n\ntarget_link_libraries(${PROJECT_NAME}\n        ${AWSSDK_LINK_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: Running Hello Amazon RDS Example with Ruby\nDESCRIPTION: Example command to run the hello_rds.rb script that demonstrates basic RDS operations using the DescribeDBInstances API.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/ruby/example_code/rds/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nruby hello/hello_rds.rb\n```\n\n----------------------------------------\n\nTITLE: Terminating EC2 Instances\nDESCRIPTION: Demonstrates how to permanently terminate EC2 instances. This action deletes the instances and their resources, and cannot be undone.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/EC2/README.md#2025-04-09_snippet_25\n\nLANGUAGE: C#\nCODE:\n```\n// TerminateInstances\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for CloudFormation Operations\nDESCRIPTION: Command for executing unit tests that verify the CloudFormation operations functionality. The tests create and delete a stack with a random name.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/example_code/cloudformation/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngo test\n```\n\n----------------------------------------\n\nTITLE: Describing EC2 Security Groups\nDESCRIPTION: Demonstrates how to retrieve information about EC2 security groups. This provides details about inbound and outbound rules controlling network traffic.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/EC2/README.md#2025-04-09_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\n// DescribeSecurityGroups\n```\n\n----------------------------------------\n\nTITLE: SNS Service Implementation in Java\nDESCRIPTION: Class implementing AWS SNS operations including creating topics, subscribing to topics, and publishing messages.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/pam_source_files/README.md#2025-04-09_snippet_13\n\nLANGUAGE: java\nCODE:\n```\npublic class SnsService {\n    private SnsClient getClient() {\n        return SnsClient.builder()\n            .credentialsProvider(EnvironmentVariableCredentialsProvider.create())\n            .region(PhotoApplicationResources.REGION)\n            .build();\n    }\n\n    public String createNotificationTopic(String notify, String jobId) {\n        CreateTopicResponse response = getClient().createTopic(\n            CreateTopicRequest.builder()\n                .name(jobId + \"-notify-\" + notify)\n                .build());\n        String topicArn = response.topicArn();\n\n        getClient().subscribe(\n            SubscribeRequest.builder()\n                .topicArn(topicArn)\n                .protocol(notify.contains(\"@\") ? \"email\" : \"sms\")\n                .endpoint(notify)\n                .build());\n\n        return topicArn;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Layout Template HTML\nDESCRIPTION: Common layout template with navigation menu using Thymeleaf templating engine.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/creating_photo_analyzer_app/README.md#2025-04-09_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n    <html xmlns:th=\"http://www.thymeleaf.org\">\n    <head th:fragment=\"site-head\">\n     <meta charset=\"UTF-8\" />\n     <link rel=\"icon\" href=\"../public/images/favicon.ico\" th:href=\"@{/images/favicon.ico}\" />\n     <script th:src=\"|https://code.jquery.com/jquery-1.12.4.min.js|\"></script>\n     <meta th:include=\"this :: head\" th:remove=\"tag\"/>\n    </head>\n    <header th:fragment=\"site-header\">\n      <a href=\"#\" style=\"color: white\" th:href=\"@{/}\">Home</a>\n      <a href=\"#\" style=\"color: white\" th:href=\"@{/photo}\">Upload Photos</a>\n      <a href=\"#\"  style=\"color: white\" th:href=\"@{/process}\">Analyze Photos</a>\n    </header>\n    </html>\n```\n\n----------------------------------------\n\nTITLE: GET Response JSON Structure for Main Endpoint in Python Web Server\nDESCRIPTION: Sample JSON response from the main endpoint of the Python web server. It returns a recommendation from DynamoDB along with EC2 metadata that specifies which instance handled the request.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/resilient_service/SPECIFICATION.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"MediaType\": {\"S\": \"Book\"},\n  \"ItemId\":{\"N\": \"0\"},\n  \"Title\": {\"S\": \"404 Not Found: A Coloring Book\"},\n  \"Creator\": {\"S\": \"The Oatmeal\"},\n  \"Metadata\": {\n    \"InstanceId\": \"i-123456789\",\n    \"AvailabilityZone\": \"us-west-2b\"}\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Message from Amazon SQS in C#\nDESCRIPTION: Demonstrates how to delete a message from an Amazon SQS queue using the AWS SDK for .NET. This is typically done after processing a received message.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/SQS/README.md#2025-04-09_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nDeleteMessage\n```\n\n----------------------------------------\n\nTITLE: Building a Resilient Service with EC2, Auto Scaling, and Load Balancing\nDESCRIPTION: Demonstrates how to create a load-balanced web service that can respond to failures. The example uses Auto Scaling, Elastic Load Balancing, and EC2 instances to build a resilient recommendation service.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/EC2/README.md#2025-04-09_snippet_26\n\nLANGUAGE: C#\nCODE:\n```\n// Build and manage a resilient service\n```\n\n----------------------------------------\n\nTITLE: Running Amazon S3 Conditional Requests Example with Python\nDESCRIPTION: Command to execute the example that demonstrates how to make conditional requests to Amazon S3, which allows operations to be performed only if certain conditions are met.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/s3/README.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython scenarios/conditional_requests/scenario.py\n```\n\n----------------------------------------\n\nTITLE: Running the AWS STS AssumeRole MFA Example\nDESCRIPTION: Command to execute the Python script demonstrating how to assume an IAM role that requires an MFA token.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/sts/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython assume_role_mfa.py\n```\n\n----------------------------------------\n\nTITLE: Deleting an Item from DynamoDB Table in Kotlin\nDESCRIPTION: This code excerpt shows how to delete an item from a DynamoDB table using the AWS SDK for Kotlin. It's one of the single actions demonstrated in the file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/dynamodb/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nDeleteItem(src/main/kotlin/com/kotlin/dynamodb/DeleteItem.kt#L43)\n```\n\n----------------------------------------\n\nTITLE: Copying Objects in S3 using C++\nDESCRIPTION: This code snippet shows how to copy objects in Amazon S3 using the AWS SDK for C++.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/s3/README.md#2025-04-09_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nCopyObject\n```\n\n----------------------------------------\n\nTITLE: HTTP GET Request for Active Items\nDESCRIPTION: REST endpoint to retrieve non-archived work items from the service.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/cross_service/aurora_item_tracker/README.md#2025-04-09_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nGET http://localhost:8080/api/items?archived=false\n```\n\n----------------------------------------\n\nTITLE: Implementing DynamoDBService Class for Amazon DynamoDB Operations in Kotlin\nDESCRIPTION: This code snippet defines the DynamoDBService class, which contains methods for interacting with Amazon DynamoDB. It includes operations such as adding records, updating counts, scanning tables, and querying data. The class uses the DynamoDbClient from the AWS SDK for Kotlin to perform these operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/creating_pam/README.md#2025-04-09_snippet_9\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.photo.services\n\nimport aws.sdk.kotlin.services.dynamodb.DynamoDbClient\nimport aws.sdk.kotlin.services.dynamodb.model.AttributeValue\nimport aws.sdk.kotlin.services.dynamodb.model.PutItemRequest\nimport aws.sdk.kotlin.services.dynamodb.model.QueryRequest\nimport aws.sdk.kotlin.services.dynamodb.model.QueryResponse\nimport aws.sdk.kotlin.services.dynamodb.model.ScanRequest\nimport aws.sdk.kotlin.services.dynamodb.model.UpdateItemRequest\nimport com.example.photo.LabelCount\nimport com.example.photo.PhotoApplicationResources\nimport com.example.photo.WorkCount\nimport java.util.Collections\n\nclass DynamoDBService {\n    // Put the tags in the given list into an Amazon DynamoDB table.\n    suspend fun putRecord(list: ArrayList<LabelCount>) {\n        for (count in list) {\n            val label = count.getName()\n            val key = count.getKey()\n            if ((label != null) && (key != null)) {\n                addSingleRecord(label, key)\n            }\n        }\n    }\n\n    suspend fun addSingleRecord(label: String, keyVal: String) {\n        // Check to see if the label exists in the Amazon DynamoDB table.\n        val scanResult = scanLabelTable(PhotoApplicationResources.LABELS_TABLE)\n        if (scanResult == 0) {\n            // There are no records in the table.\n            addNewLabel(PhotoApplicationResources.LABELS_TABLE, label)\n            updateCount(PhotoApplicationResources.LABELS_TABLE, label)\n            updateTableList(PhotoApplicationResources.LABELS_TABLE, label, keyVal)\n        } else {\n            // There are records. Check to see if Label exists.\n            val labelCount = checkTagExists(label)\n            if (labelCount > 0) {\n                // The Label exists in the table.\n                updateCount(PhotoApplicationResources.LABELS_TABLE, label)\n                updateTableList(PhotoApplicationResources.LABELS_TABLE, label, keyVal)\n            } else {\n                // The Label doesn't exist in the table.\n                addNewLabel(PhotoApplicationResources.LABELS_TABLE, label)\n                updateCount(PhotoApplicationResources.LABELS_TABLE, label)\n                updateTableList(PhotoApplicationResources.LABELS_TABLE, label, keyVal)\n            }\n        }\n        println(\"All Data added to the Amazon DynamoDB table\")\n    }\n\n    // Scan table before looking for Labels.\n    suspend fun scanLabelTable(tableNameVal: String): Int {\n        val request = ScanRequest {\n            tableName = tableNameVal\n        }\n\n        DynamoDbClient { region = \"us-east-1\" }.use { ddb ->\n            val response = ddb.scan(request)\n            println(\"${response.count}\")\n            return response.count\n        }\n    }\n\n    suspend fun checkTagExists(tag: String): Int {\n        val tableNameVal = PhotoApplicationResources.LABELS_TABLE\n        val partitionKeyName = \"Label\"\n        val partitionKeyVal = tag\n        val partitionAlias = \"#a\"\n\n        val attrNameAlias = mutableMapOf<String, String>()\n        attrNameAlias[partitionAlias] = partitionKeyName\n\n        // Set up mapping of the partition name with the value.\n        val attrValues = mutableMapOf<String, AttributeValue>()\n        attrValues[\":$partitionKeyName\"] = AttributeValue.S(partitionKeyVal)\n\n        val request = QueryRequest {\n            tableName = tableNameVal\n            keyConditionExpression = \"$partitionAlias = :$partitionKeyName\"\n            expressionAttributeNames = attrNameAlias\n            this.expressionAttributeValues = attrValues\n        }\n\n        var count: Int\n        DynamoDbClient { region = \"us-east-1\" }.use { ddb ->\n            val response = ddb.query(request)\n            count = response.count\n            println(\"$count\")\n        }\n        return count\n    }\n\n    suspend fun updateCount(tableNameVal: String, label: String) {\n        // Specify the item key.\n        val keyMap: MutableMap<String, AttributeValue> = HashMap()\n        keyMap[\"Label\"] = AttributeValue.S(label)\n\n        // Create a map to hold the update expression attributes.\n        val expressionAttributeValuesMap: MutableMap<String, AttributeValue> = HashMap()\n        expressionAttributeValuesMap[\":countval\"] = AttributeValue.N(\"1\")\n\n        // Specify the update item request with an expression.\n        val request = UpdateItemRequest {\n            tableName = tableNameVal\n            key = keyMap\n            updateExpression = \"ADD #count :countval\"\n            expressionAttributeNames = Collections.singletonMap(\"#count\", \"count\")\n            expressionAttributeValues = expressionAttributeValuesMap\n        }\n\n        // Update the item in the table.\n        DynamoDbClient { region = \"us-east-1\" }.use { ddb ->\n            ddb.updateItem(request)\n            println(\"Item in $tableNameVal was updated\")\n        }\n    }\n\n    suspend fun updateTableList(tableNameVal: String, keyVal: String, updateVal: String) {\n        // Build the item key for the DynamoDB update request.\n        val itemKey: MutableMap<String, AttributeValue> = java.util.HashMap()\n        itemKey[\"Label\"] = AttributeValue.S(keyVal)\n\n        // Build the updated values for the \"images\" column.\n        val updatedValues = mutableMapOf<String, AttributeValue>()\n        val myFileList = ArrayList<AttributeValue>()\n        myFileList.add(AttributeValue.S(updateVal))\n        updatedValues[\"images\"] = AttributeValue.L(myFileList)\n\n        val expressionAttValues = mutableMapOf<String, AttributeValue>()\n        expressionAttValues[\":val\"] = AttributeValue.L(myFileList)\n\n        // Build the update request and execute it by using the DynamoDB client.\n        val updateItemRequest = UpdateItemRequest {\n            tableName = tableNameVal\n            key = itemKey\n            updateExpression = \"SET images = list_append(images, :val)\"\n            expressionAttributeValues = expressionAttValues\n        }\n\n        DynamoDbClient { region = \"us-east-1\" }.use { ddb ->\n            ddb.updateItem(updateItemRequest)\n            println(\"Item in $tableNameVal was updated\")\n        }\n    }\n\n    suspend fun addNewLabel(tableNameVal: String, keyName: String) {\n        val itemValues = mutableMapOf<String, AttributeValue>()\n\n        // Add all content to the table.\n        val emptyList = ArrayList<AttributeValue>()\n        itemValues[\"Label\"] = AttributeValue.S(keyName)\n        itemValues[\"images\"] = AttributeValue.L(emptyList)\n\n        val request = PutItemRequest {\n            tableName = tableNameVal\n            item = itemValues\n        }\n\n        DynamoDbClient { region = \"us-east-1\" }.use { ddb ->\n            ddb.putItem(request)\n            println(\" A new item was placed into $tableNameVal.\")\n        }\n    }\n\n    suspend fun scanPhotoTable(): HashMap<String, WorkCount> {\n        val myMap = HashMap<String, WorkCount>()\n        val request = ScanRequest {\n            tableName = PhotoApplicationResources.LABELS_TABLE\n        }\n\n        DynamoDbClient { region = \"us-east-1\" }.use { ddb ->\n            val response = ddb.scan(request)\n            response.items?.forEach { item ->\n                val wc = WorkCount()\n                var labelName = \"\"\n                var myCount: String\n                item.keys.forEach { key ->\n                    if (key.compareTo(\"Label\") == 0) {\n                        val inputString = item[key].toString()\n                        val regex = Regex(\"=(.*?)\\\\)\")\n                        val matchResult = regex.find(inputString)\n                        if (matchResult != null) {\n                            labelName = matchResult.groupValues[1]\n                            println(labelName)\n                        }\n                    }\n\n                    if (key.compareTo(\"count\") == 0) {\n                        val inputString = item[key].toString()\n                        val regex = Regex(\"=(.*?)\\\\)\")\n                        val matchResult = regex.find(inputString)\n                        if (matchResult != null) {\n                            myCount = matchResult.groupValues[1]\n                            println(\"The value of count is $myCount\")\n                            val countInt = myCount.toInt()\n                            wc.setCount(countInt)\n                        }\n                    }\n                }\n                myMap[labelName] = wc\n            }\n        }\n        return myMap\n    }\n\n    suspend fun getImagesByLabel(partitionKeyVal: String): List<String> {\n        val partitionAlias = \"#a\"\n        val partitionKeyName = \"Label\"\n        val attrNameAlias = mutableMapOf<String, String>()\n        attrNameAlias[partitionAlias] = partitionKeyName\n\n        // Set up mapping of the partition name with the value.\n        val attrValues = mutableMapOf<String, AttributeValue>()\n        attrValues[\":$partitionKeyName\"] = AttributeValue.S(partitionKeyVal)\n\n        val request = QueryRequest {\n            tableName = PhotoApplicationResources.LABELS_TABLE\n            keyConditionExpression = \"$partitionAlias = :$partitionKeyName\"\n            expressionAttributeNames = attrNameAlias\n            expressionAttributeValues = attrValues\n        }\n\n        DynamoDbClient { region = \"us-east-1\" }.use { ddb ->\n            val response = ddb.query(request)\n            return processItems(response)\n        }\n    }\n\n    fun processItems(queryRes: QueryResponse): List<String> {\n\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Tests and Collecting Source Files\nDESCRIPTION: Enables testing and associates each test file with its corresponding implementation file by replacing 'gtest_' with '../' in the filename. Adds error checking to ensure source files exist.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/dynamodb/tests/CMakeLists.txt#2025-04-09_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nenable_testing()\n\nforeach(TEST_FILE ${GTEST_SOURCE_FILES})\n    string(REPLACE \"gtest_\" \"../\" SOURCE_FILE ${TEST_FILE})\n     if (EXISTS ${SOURCE_FILE})\n        list(APPEND GTEST_SOURCE ${SOURCE_FILE} ${TEST_FILE})\n    else()\n        message(\"Error: no associated source file found for ${TEST_FILE}\")\n    endif()\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Getting Table Information in Amazon Keyspaces using Kotlin\nDESCRIPTION: This code snippet demonstrates how to retrieve information about a table in Amazon Keyspaces using the AWS SDK for Kotlin. It's part of the single actions examples.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/keyspaces/README.md#2025-04-09_snippet_6\n\nLANGUAGE: Kotlin\nCODE:\n```\nsrc/main/kotlin/com/example/keyspace/ScenarioKeyspaces.kt#L477\n```\n\n----------------------------------------\n\nTITLE: Invoking AI21 Labs Jurassic-2 Model in Java\nDESCRIPTION: Demonstrates how to invoke the AI21 Labs Jurassic-2 model using Amazon Bedrock Runtime. This snippet shows the file location for the implementation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/bedrock-runtime/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nsrc/main/java/com/example/bedrockruntime/models/ai21LabsJurassic2/InvokeModel.java#L6\n```\n\n----------------------------------------\n\nTITLE: Scanning DynamoDB in Swift\nDESCRIPTION: Shows how to scan a DynamoDB table to retrieve multiple items. The example demonstrates scanning for movies released within a range of years.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/swift/example_code/dynamodb/README.md#2025-04-09_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nScan(basics/MovieList/MovieTable.swift#L415)\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container for C++ Lambda Development\nDESCRIPTION: Command to run the Docker container, binding the current directory to the container for development purposes.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/lambda/cpp_lambda/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -i -t --name cpp_lambda --mount type=bind,source=\"$(pwd)\",target=/cpp_lambda cpp_lambda_image bash\n```\n\n----------------------------------------\n\nTITLE: Describing CloudWatch Anomaly Detectors in C#\nDESCRIPTION: Method for describing CloudWatch anomaly detectors. This is implemented in the CloudWatchWrapper class.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/CloudWatch/README.md#2025-04-09_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nDescribeAnomalyDetectors\n```\n\n----------------------------------------\n\nTITLE: Running Single Action Example\nDESCRIPTION: Command to execute a single action example script from the actions directory.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/elastic-load-balancing-v2/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode ./actions/<fileName>\n```\n\n----------------------------------------\n\nTITLE: Implementing Image Retrieval and Display Logic (JavaScript)\nDESCRIPTION: This JavaScript code handles the retrieval of images from Amazon S3 and displays them in a DataTable. It includes functions to initialize the table, hide/show progress bars, and populate the table with image metadata.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_photo_analyzer_async/README.md#2025-04-09_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\n$(function() {\n\n    $(\"#bars3\").hide()\n    $('#myTable').DataTable( {\n        scrollY:        \"500px\",\n        scrollX:        true,\n        scrollCollapse: true,\n        paging:         true,\n        columnDefs: [\n            { width: 200, targets: 0 }\n        ],\n        fixedColumns: true\n     } );\n    } );\n\n   function getImages() {\n\n    $(\"#bars3\").show()\n\n      $.ajax('/getimages', {\n        type: 'GET',  // http method\n        success: function (data, status, xhr) {\n\n            $(\"#bars3\").hide()\n            var xml = data\n            var oTable = $('#myTable').dataTable();\n            oTable.fnClearTable(true);\n            $(xml).find('Item').each(function () {\n\n                var $field = $(this);\n                var key = $field.find('Key').text();\n                var name = $field.find('Owner').text();\n                var date = $field.find('Date').text();\n                var size = $field.find('Size').text();\n\n                //Set the new data\n                oTable.fnAddData( [\n                    key,\n                    name,\n                    date,\n                    size]\n                );\n            });\n        },\n      });\n    }\n```\n\n----------------------------------------\n\nTITLE: Describing EC2 Security Groups\nDESCRIPTION: Demonstrates how to retrieve information about EC2 security groups. This provides details about inbound and outbound rules controlling network traffic.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/EC2/README.md#2025-04-09_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\n// DescribeSecurityGroups\n```\n\n----------------------------------------\n\nTITLE: Updating S3 Batch Job Status in Java\nDESCRIPTION: Updates the status of an existing S3 batch job using UpdateJobStatus API\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/s3/src/main/java/com/example/s3/batch/README.md#2025-04-09_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\nS3BatchActions.java#L146\n```\n\n----------------------------------------\n\nTITLE: Running Go Integration Tests for AWS SDK Examples\nDESCRIPTION: Demonstrates how to run integration tests with the integration tag. These tests make actual AWS service calls and may incur charges.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/gov2/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngo test -tags=integration ./...\n```\n\n----------------------------------------\n\nTITLE: Verifying Stack Deletion with CloudFormation List\nDESCRIPTION: Command that combines the CloudFormation list operation with shell commands to filter and verify that stacks created during testing have been properly deleted.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/example_code/cloudformation/README.md#2025-04-09_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ngo run CfnCrudOps.go -o list | sed /DELETE_COMPLETE/d | grep stack-\n```\n\n----------------------------------------\n\nTITLE: Tagging KMS Resource with Java SDK\nDESCRIPTION: This code snippet demonstrates how to add tags to a KMS key using the AWS SDK for Java 2.x. It uses the TagResource operation to attach key-value pair tags to the specified KMS key.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/kms/README.md#2025-04-09_snippet_16\n\nLANGUAGE: Java\nCODE:\n```\nKMSActions.java#L592\n```\n\n----------------------------------------\n\nTITLE: Listing Transcription Jobs with Amazon Transcribe and Java SDK\nDESCRIPTION: This code shows how to list transcription jobs using the AWS SDK for Java 2.x with Amazon Transcribe. This functionality is defined in the ListTranscriptionJobs file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/transcribe/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nsrc/main/java/com/amazonaws/transcribe/ListTranscriptionJobs.java#L12\n```\n\n----------------------------------------\n\nTITLE: Publishing a Message to Amazon SNS using Rust\nDESCRIPTION: This code snippet demonstrates how to publish a message to an Amazon SNS topic using the AWS SDK for Rust. It references the 'sns-hello-world.rs' file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/sns/README.md#2025-04-09_snippet_2\n\nLANGUAGE: Rust\nCODE:\n```\nsrc/bin/sns-hello-world.rs#L30\n```\n\n----------------------------------------\n\nTITLE: Displaying AWS Config Resource History in Rust\nDESCRIPTION: Command-line utility to display configuration history for a specific AWS resource. Requires resource ID and type parameters.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/config/README.md#2025-04-09_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncargo run --bin show-resource-history -- -i ID --resource-type RESOURCE-TYPE [-r REGION] [-v]\n```\n\n----------------------------------------\n\nTITLE: Resending Confirmation Code in Amazon Cognito Identity Provider with C#\nDESCRIPTION: This code snippet shows how to resend a confirmation code in Amazon Cognito Identity Provider using C#. It's implemented in the CognitoWrapper class and utilizes the ResendConfirmationCodeAsync method.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Cognito/README.md#2025-04-09_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nResendConfirmationCode(Actions/CognitoWrapper.cs#L264)\n```\n\n----------------------------------------\n\nTITLE: Scanning DynamoDB Table in ABAP\nDESCRIPTION: This snippet demonstrates how to scan a DynamoDB table using the AWS SDK for SAP ABAP. It is part of the single action examples for DynamoDB operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/sap-abap/services/dyn/README.md#2025-04-09_snippet_8\n\nLANGUAGE: ABAP\nCODE:\n```\nzcl_aws1_dyn_actions.clas.abap#L301\n```\n\n----------------------------------------\n\nTITLE: DynamoDB Enhanced Client Implementation in Java\nDESCRIPTION: Class that handles data injection into DynamoDB using the Enhanced Client. It creates a DynamoDbTable object and uses environment variables for AWS credentials, designed for Elastic Beanstalk deployment.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_first_project/README.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.handlingformsubmission;\n\nimport software.amazon.awssdk.auth.credentials.EnvironmentVariableCredentialsProvider;\nimport software.amazon.awssdk.enhanced.dynamodb.DynamoDbEnhancedClient;\nimport software.amazon.awssdk.enhanced.dynamodb.DynamoDbTable;\nimport software.amazon.awssdk.enhanced.dynamodb.TableSchema;\nimport software.amazon.awssdk.enhanced.dynamodb.model.PutItemEnhancedRequest;\nimport software.amazon.awssdk.regions.Region;\nimport software.amazon.awssdk.services.dynamodb.DynamoDbClient;\nimport org.springframework.stereotype.Component;\nimport software.amazon.awssdk.services.dynamodb.model.DynamoDbException;\n\n@Component(\"DynamoDBEnhanced\")\npublic class DynamoDBEnhanced {\n    public void injectDynamoItem(Greeting item){\n        Region region = Region.US_EAST_1;\n        DynamoDbClient ddb = DynamoDbClient.builder()\n            .region(region)\n            .credentialsProvider(EnvironmentVariableCredentialsProvider.create())\n            .build();\n\n        try {\n            DynamoDbEnhancedClient enhancedClient = DynamoDbEnhancedClient.builder()\n                .dynamoDbClient(ddb)\n                .build();\n\n            DynamoDbTable<GreetingItems> mappedTable = enhancedClient.table(\"Greeting\", TableSchema.fromBean(GreetingItems.class));\n            GreetingItems gi = new GreetingItems();\n            gi.setName(item.getName());\n            gi.setMessage(item.getBody());\n            gi.setTitle(item.getTitle());\n            gi.setId(item.getId());\n\n            PutItemEnhancedRequest enReq = PutItemEnhancedRequest.builder(GreetingItems.class)\n                .item(gi)\n                .build();\n\n            mappedTable.putItem(enReq);\n\n        } catch (DynamoDbException e) {\n            System.err.println(e.getMessage());\n            System.exit(1);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Describing DynamoDB Table in ABAP\nDESCRIPTION: This code example shows how to describe a DynamoDB table using the AWS SDK for SAP ABAP. It is one of the single action examples provided for DynamoDB operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/sap-abap/services/dyn/README.md#2025-04-09_snippet_3\n\nLANGUAGE: ABAP\nCODE:\n```\nzcl_aws1_dyn_actions.clas.abap#L164\n```\n\n----------------------------------------\n\nTITLE: Creating an Activity with AWS Step Functions Java SDK\nDESCRIPTION: This code snippet shows how to create an activity using the AWS Step Functions Java SDK. It utilizes the createActivity command to set up a new activity in Step Functions.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/stepfunctions/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\n// Code snippet for creating an activity\n// Refer to: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/route53/src/main/java/com/example/route/StepFunctionsScenario.java\n```\n\n----------------------------------------\n\nTITLE: Running Go Unit Tests for CloudTrail Operations\nDESCRIPTION: Command to execute unit tests for CloudTrail operations, which displays basic pass/fail status.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/cloudtrail/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo test\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Dependencies for Spring Boot and AWS SDK for Kotlin\nDESCRIPTION: Gradle build configuration file that sets up dependencies for the Spring Boot application with AWS SDK for Kotlin. It includes dependencies for RDS Data API, Amazon SES, HTTP clients, and Spring Boot components along with Kotlin standard libraries.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/serverless_rds/README.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n import org.jetbrains.kotlin.gradle.tasks.KotlinCompile\n\nplugins {\n    kotlin(\"jvm\") version \"1.9.0\"\n    application\n}\n\ngroup = \"me.scmacdon\"\nversion = \"1.0-SNAPSHOT\"\n\njava {\n    sourceCompatibility = JavaVersion.VERSION_17\n    targetCompatibility = JavaVersion.VERSION_17\n}\n\nbuildscript {\n    repositories {\n        maven(\"https://plugins.gradle.org/m2/\")\n    }\n    dependencies {\n        classpath(\"org.jlleitschuh.gradle:ktlint-gradle:10.3.0\")\n    }\n}\n\nrepositories {\n    mavenCentral()\n}\napply(plugin = \"org.jlleitschuh.gradle.ktlint\")\ndependencies {\n    implementation(\"aws.sdk.kotlin:rdsdata:0.33.1-beta\")\n    implementation(\"aws.sdk.kotlin:ses:0.33.1-beta\")\n    implementation(\"aws.smithy.kotlin:http-client-engine-okhttp:0.28.0\")\n    implementation(\"aws.smithy.kotlin:http-client-engine-crt:0.28.0\")\n    implementation(\"org.springframework.boot:spring-boot-starter-web:2.7.5\")\n    implementation(\"com.fasterxml.jackson.module:jackson-module-kotlin:2.13.3\")\n    implementation(\"org.jetbrains.kotlin:kotlin-reflect\")\n    implementation(\"org.jetbrains.kotlin:kotlin-stdlib-jdk8\")\n    implementation(\"javax.mail:javax.mail-api:1.6.2\")\n    implementation(\"com.sun.mail:javax.mail:1.6.2\")\n    testImplementation(\"org.springframework.boot:spring-boot-starter-test:2.7.5\")\n}\n\ntasks.withType<KotlinCompile> {\n    kotlinOptions {\n        freeCompilerArgs = listOf(\"-Xjsr305=strict\")\n        jvmTarget = \"17\"\n    }\n}\n\ntasks.withType<Test> {\n    useJUnitPlatform()\n}\n\n\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library for Release Builds\nDESCRIPTION: Adds installation rules for the AOT (Ahead-Of-Time) compiled library, but only for non-Debug builds. This optimizes the application's performance in release mode by using pre-compiled code.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/cognito_flutter_mobile_app/linux/CMakeLists.txt#2025-04-09_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\n# Install the AOT library on non-Debug builds only.\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container from ECR Image\nDESCRIPTION: This command pulls and runs a Docker container from the ECR repository, removing the container after execution.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/basics/ecr/SPECIFICATION.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm 1234567890.dkr.ecr.us-east-1.amazonaws.com/echo-text\n```\n\n----------------------------------------\n\nTITLE: Managing Object Legal Hold in S3 in Java\nDESCRIPTION: Code example that demonstrates how to get the legal hold status of an object using the GetObjectLegalHold operation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/s3/README.md#2025-04-09_snippet_9\n\nLANGUAGE: Java\nCODE:\n```\n- [GetObjectLegalHold](src/main/java/com/example/s3/lockscenario/S3LockActions.java#L94)\n```\n\n----------------------------------------\n\nTITLE: Running Hello Amazon Keyspaces Example in Python\nDESCRIPTION: This command executes the 'hello.py' script, which demonstrates basic usage of Amazon Keyspaces by listing keyspaces.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/keyspaces/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython hello.py\n```\n\n----------------------------------------\n\nTITLE: Specifying Boto3 Package Version\nDESCRIPTION: Requirements file entry specifying the minimum version of boto3 needed for AWS SDK interactions. Requires boto3 version 1.35.38 or higher to be installed.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/ecr/hello/requirements.txt#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nboto3>=1.35.38\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for AWS SDK Examples\nDESCRIPTION: This code snippet lists the required Python packages and their minimum versions for running AWS SDK examples. It includes AWS SDK for Python (boto3), Cassandra driver, Cassandra SigV4 authentication, pytest for testing, and the requests library for HTTP requests.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/keyspaces/requirements.txt#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nboto3>=1.26.79\ncassandra-driver>=3.25.0\ncassandra-sigv4>=4.0.2\npytest>=7.2.1\nrequests>=2.28.2\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for S3 Object Integrity Workflow\nDESCRIPTION: This CMake snippet sets up the project configuration, including the minimum CMake version, project name, and C++ standard. It also configures the build type and sets up platform-specific settings for Windows.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/s3/s3_object_integrity_workflow/CMakeLists.txt#2025-04-09_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\n\nset(SERVICE_COMPONENTS s3 transfer)\n\nproject(\"s3_object_integrity_workflow\")\n\nset(BUILD_SHARED_LIBS ON)\n\nset(CMAKE_CXX_STANDARD 17)\n\nset(WINDOWS_BUILD ${MSVC})\n\nif (WINDOWS_BUILD)\n    string(REPLACE \";\" \"/aws-cpp-sdk-all;\" SYSTEM_MODULE_PATH \"${CMAKE_SYSTEM_PREFIX_PATH}/aws-cpp-sdk-all\")\n    list(APPEND CMAKE_PREFIX_PATH ${SYSTEM_MODULE_PATH})\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Listing SageMaker Training Jobs using AWS SDK for SAP ABAP\nDESCRIPTION: This code snippet shows how to list SageMaker training jobs using the AWS SDK for SAP ABAP. It references a method in the zcl_aws1_sgm_actions class.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/sap-abap/services/sagemaker/README.md#2025-04-09_snippet_10\n\nLANGUAGE: ABAP\nCODE:\n```\nzcl_aws1_sgm_actions.clas.abap#L537\n```\n\n----------------------------------------\n\nTITLE: Disassociating Elastic IP Address from EC2 Instance in .NET\nDESCRIPTION: This code snippet demonstrates how to disassociate an Elastic IP address from an EC2 instance using the AWS SDK for .NET. It's part of the EC2Wrapper class that provides various EC2 functionalities.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv4/EC2/README.md#2025-04-09_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\nDisassociateAddress\n```\n\n----------------------------------------\n\nTITLE: Sending Email Messages with Amazon SES in Kotlin\nDESCRIPTION: A SendMessage class that uses the Amazon SES (Simple Email Service) client to send HTML-formatted email messages. It creates structured email content with a recipient, message body containing item reports, and a source email address.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/creating_redshift_application/README.md#2025-04-09_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.example.demo\n\nimport kotlin.system.exitProcess\nimport aws.sdk.kotlin.services.ses.SesClient\nimport aws.sdk.kotlin.services.ses.model.SesException\nimport aws.sdk.kotlin.services.ses.model.Destination\nimport aws.sdk.kotlin.services.ses.model.Content\nimport aws.sdk.kotlin.services.ses.model.Body\nimport aws.sdk.kotlin.services.ses.model.Message\nimport aws.sdk.kotlin.services.ses.model.SendEmailRequest\n\nclass SendMessage {\n\n    suspend fun send(\n        recipient: String,\n        strValue: String?\n    ) {\n        val sesClient = SesClient { region = \"us-east-1\" }\n        // The HTML body of the email.\n        val bodyHTML = (\"<html>\" + \"<head></head>\" + \"<body>\" + \"<h1>Amazon RDS Items!</h1>\"\n                + \"<textarea>$strValue</textarea>\" + \"</body>\" + \"</html>\")\n\n        val destinationOb = Destination {\n            toAddresses = listOf(recipient)\n        }\n\n        val contentOb = Content {\n            data = bodyHTML\n        }\n\n        val subOb = Content {\n            data = \"Item Report\"\n        }\n\n        val bodyOb= Body {\n            html = contentOb\n        }\n\n        val msgOb = Message {\n            subject = subOb\n            body = bodyOb\n        }\n\n        val emailRequest = SendEmailRequest {\n            destination = destinationOb\n            message = msgOb\n            source = \"<Enter email>\"\n        }\n\n        try {\n            println(\"Attempting to send an email through Amazon SES using the AWS SDK for Kotlin...\")\n            sesClient.sendEmail(emailRequest)\n\n        } catch (e: SesException) {\n            println(e.message)\n            sesClient.close()\n            exitProcess(0)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Resilient Service Example\nDESCRIPTION: Execute the cross-service example that creates a load-balanced web service with Auto Scaling for handling recommendations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/auto-scaling/README.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython ../../cross_service/resilient_service/runner.py\n```\n\n----------------------------------------\n\nTITLE: Setting S3 Bucket Website Configuration in JavaScript\nDESCRIPTION: This code snippet demonstrates how to set the website configuration for an S3 bucket using the PutBucketWebsite operation in the AWS SDK for JavaScript (v3).\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/s3/README.md#2025-04-09_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\n- [PutBucketWebsite](actions/put-bucket-website.js#L4)\n```\n\n----------------------------------------\n\nTITLE: Setting S3 Bucket ACLs in JavaScript\nDESCRIPTION: This code snippet shows how to set the Access Control List (ACL) for an S3 bucket using the PutBucketAcl operation in the AWS SDK for JavaScript (v3).\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/s3/README.md#2025-04-09_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\n- [PutBucketAcl](actions/put-bucket-acl.js#L4)\n```\n\n----------------------------------------\n\nTITLE: Deleting a Keyspace in Amazon Keyspaces using Kotlin\nDESCRIPTION: This code snippet demonstrates how to delete a keyspace in Amazon Keyspaces using the AWS SDK for Kotlin. It's part of the single actions examples.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/keyspaces/README.md#2025-04-09_snippet_3\n\nLANGUAGE: Kotlin\nCODE:\n```\nsrc/main/kotlin/com/example/keyspace/ScenarioKeyspaces.kt#L212\n```\n\n----------------------------------------\n\nTITLE: Creating DB Instance with Amazon RDS using PHP SDK\nDESCRIPTION: Code example showing how to create a new database instance using Amazon RDS with the AWS SDK for PHP. Reference to CreateDBInstance.php implementation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/php/example_code/rds/README.md#2025-04-09_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Invoking Cohere Command and Command Light models with response streaming in C#\nDESCRIPTION: Demonstrates how to invoke the Cohere Command and Command Light models with response streaming using Amazon Bedrock Runtime.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv4/Bedrock-runtime/README.md#2025-04-09_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\nModels/CohereCommand/Command_InvokeModelWithResponseStream/InvokeModelWithResponseStream.cs#L4\n```\n\n----------------------------------------\n\nTITLE: Deleting an Item from DynamoDB in Swift\nDESCRIPTION: Shows how to delete a single item from a DynamoDB table using its primary key. This example removes a movie from the movie table.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/swift/example_code/dynamodb/README.md#2025-04-09_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nDeleteItem(basics/MovieList/MovieTable.swift#L545)\n```\n\n----------------------------------------\n\nTITLE: Getting Started with Aurora DB Clusters\nDESCRIPTION: Basic hello world example showing how to get information about Aurora DB clusters using DescribeDBClusters operation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/aurora/README.md#2025-04-09_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nsrc/bin/hello-world.rs\n```\n\n----------------------------------------\n\nTITLE: Deleting CloudWatch Alarms in Kotlin\nDESCRIPTION: This code snippet shows how to delete CloudWatch alarms using the AWS SDK for Kotlin. It's part of a larger CloudWatch scenario that demonstrates various CloudWatch operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/cloudwatch/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nDeleteAlarms\n```\n\n----------------------------------------\n\nTITLE: Listing DynamoDB Tables in Kotlin\nDESCRIPTION: This snippet shows how to list DynamoDB tables using the AWS SDK for Kotlin. It's part of the basic operations for working with DynamoDB.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/dynamodb/README.md#2025-04-09_snippet_4\n\nLANGUAGE: Kotlin\nCODE:\n```\nListTables(src/main/kotlin/com/kotlin/dynamodb/ListTables.kt#L23)\n```\n\n----------------------------------------\n\nTITLE: Creating an Email Template with Amazon SES v2 API in C#\nDESCRIPTION: This snippet illustrates how to create an email template using the Amazon SES v2 API. It's part of the SESv2Wrapper class and uses the AmazonSimpleEmailServiceV2Client.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/SESv2/README.md#2025-04-09_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic async Task<bool> CreateEmailTemplate(string templateName, string subject, string textPart, string htmlPart)\n{\n    var createEmailTemplateRequest = new CreateEmailTemplateRequest\n    {\n        TemplateName = templateName,\n        TemplateContent = new EmailTemplateContent\n        {\n            Subject = subject,\n            Text = textPart,\n            Html = htmlPart\n        }\n    };\n\n    try\n    {\n        var response = await _sesv2Client.CreateEmailTemplateAsync(createEmailTemplateRequest);\n        Console.WriteLine($\"EmailTemplateCreated: {response.HttpStatusCode == System.Net.HttpStatusCode.OK}\");\n        return response.HttpStatusCode == System.Net.HttpStatusCode.OK;\n    }\n    catch (AlreadyExistsException)\n    {\n        Console.WriteLine($\"Email template {templateName} already exists\");\n        return true;\n    }\n    catch (Exception ex)\n    {\n        Console.WriteLine($\"CreateEmailTemplate failed: {ex.Message}\");\n        return false;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Describing CloudWatch Alarm History in C#\nDESCRIPTION: Method for retrieving the history of CloudWatch alarms. This is implemented in the CloudWatchWrapper class.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/CloudWatch/README.md#2025-04-09_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nDescribeAlarmHistory\n```\n\n----------------------------------------\n\nTITLE: Delete Gateway in AWS IoT SiteWise using Java\nDESCRIPTION: Demonstrates how to delete an existing gateway in AWS IoT SiteWise.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/iotsitewise/README.md#2025-04-09_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\nDeleteGateway\n```\n\n----------------------------------------\n\nTITLE: Replacing an IAM Instance Profile Association\nDESCRIPTION: Demonstrates how to replace the IAM instance profile associated with an EC2 instance. This changes the permissions available to the instance for accessing AWS services.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/EC2/README.md#2025-04-09_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\n// ReplaceIamInstanceProfileAssociation\n```\n\n----------------------------------------\n\nTITLE: Retrieving AWS Glue Crawler Information\nDESCRIPTION: Example demonstrating how to retrieve information about an existing AWS Glue crawler using the GetCrawler API operation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/glue/README.md#2025-04-09_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\nsrc/main/kotlin/com/kotlin/glue/GetCrawler.kt#L38\n```\n\n----------------------------------------\n\nTITLE: Setting Bucket Lock Configuration in S3 in Java\nDESCRIPTION: Code example that demonstrates how to set the object lock configuration for a bucket using the PutObjectLockConfiguration operation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/s3/README.md#2025-04-09_snippet_14\n\nLANGUAGE: Java\nCODE:\n```\n- [PutObjectLockConfiguration](src/main/java/com/example/s3/lockscenario/S3LockActions.java#L206)\n```\n\n----------------------------------------\n\nTITLE: AWS Systems Manager Metadata Configuration\nDESCRIPTION: YAML metadata configuration mapping SSM actions to their corresponding metadata files and keys\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/basics/ssm/SPECIFICATION.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n| action                       | metadata file                | metadata key                            |\n|------------------------------|------------------------------|---------------------------------------- |\n| `CreateOpsItem`              | ssm_metadata.yaml            | ssm_CreateOpsItem                       |\n| `CreateMaintenanceWindow`    | ssm_metadata.yaml            | ssm_CreateMainWindow                    |\n| `UpdateMaintenanceWindow`    | ssm_metadata.yaml            | ssm_UpdateMainWindow                    |\n| `CreateDocument`             | ssm_metadata.yaml            | ssm_CreateDocument                      |\n| `SendCommand `               | ssm_metadata.yaml            | ssm_SendCommand                         |\n| `ListCommandInvocations`     | ssm_metadata.yaml            | ssm_ListCommandInfocations              |\n| `UpdateOpsItem`              | ssm_metadata.yaml            | ssm_UpdateOpsItem                       |\n| `DeleteMaintenanceWindow `   | ssm_metadata.yaml            | ssm_DeleteMainWindow                    |\n| `DeleteDocument`             | ssm_metadata.yaml            | ssm_DeleteMainWindow                    |\n| `DescribeOpsItems       `    | ssm_metadata.yaml            | ssm_DescribeOpsItems                    |\n```\n\n----------------------------------------\n\nTITLE: Running Go Unit Tests Basic Command\nDESCRIPTION: Basic command to run unit tests for AWS SDK Go examples, which displays a simple pass/fail status\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/glacier/README.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngo test\n```\n\n----------------------------------------\n\nTITLE: Amazon Rekognition Scenarios with .NET SDK\nDESCRIPTION: Complex scenarios demonstrating how to build applications using multiple Amazon Rekognition functions, including a serverless photo management application and an image object detection application.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Rekognition/README.md#2025-04-09_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n- Create a serverless application to manage photos\n- Detect objects in images\n```\n\n----------------------------------------\n\nTITLE: Describing DB Instances with Amazon RDS in C#\nDESCRIPTION: This code illustrates how to retrieve information about DB instances using the Amazon RDS API. It's part of the RDSWrapper class handling instance-related operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/RDS/README.md#2025-04-09_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nDescribeDBInstances\n```\n\n----------------------------------------\n\nTITLE: Deleting CloudWatch Alarms in C#\nDESCRIPTION: Method for deleting CloudWatch alarms. This is implemented in the CloudWatchWrapper class.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/CloudWatch/README.md#2025-04-09_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nDeleteAlarms\n```\n\n----------------------------------------\n\nTITLE: Listing Lexicons in Amazon Polly\nDESCRIPTION: Code example demonstrating how to list available pronunciation lexicons in Amazon Polly. Located at src/main/java/com/example/polly/ListLexicons.java.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/polly/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nsrc/main/java/com/example/polly/ListLexicons.java#L6\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for Node.js AWS SDK Project\nDESCRIPTION: This JSON snippet shows the configuration for package.json, including project metadata, dependencies, and type declaration for ESM syntax.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/nodegetstarted/README.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"example-javascriptv3-get-started-node\",\n  \"version\": \"1.0.0\",\n  \"description\": \"This guide shows you how to initialize an NPM package, add a service client to your package, and use the JavaScript SDK to call a service action.\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"vitest run unit\"\n  },\n  \"author\": \"Corey Pyle <corepyle@amazon.com>\",\n  \"license\": \"Apache-2.0\",\n  \"dependencies\": {\n    \"@aws-sdk/client-s3\": \"^3.420.0\"\n  },\n  \"type\": \"module\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving AWS Glue Database Information\nDESCRIPTION: Code showing how to fetch details about a specific database in the AWS Glue Data Catalog using the GetDatabase API operation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/glue/README.md#2025-04-09_snippet_3\n\nLANGUAGE: Kotlin\nCODE:\n```\nsrc/main/kotlin/com/kotlin/glue/GetDatabase.kt#L40\n```\n\n----------------------------------------\n\nTITLE: Running Amazon Polly SynthesizeSpeech Example in Go\nDESCRIPTION: This command runs the SynthesizeSpeech example which produces an MP3 file by synthesizing speech from text in a specified file. The example includes a unit test that mocks the service client and the SynthesizeSpeech function.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/polly/README.md#2025-04-09_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ngo run SynthesizeSpeech.go -f FILENAME\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for AWS S3 Google Tests\nDESCRIPTION: Sets up a CMake project for testing AWS S3 examples with Google Test framework. It defines project properties, dependencies, and handles platform-specific configuration including Windows-specific settings.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/s3/tests/CMakeLists.txt#2025-04-09_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\n\n# Set the minimum required version of CMake for this project.\ncmake_minimum_required(VERSION 3.14)\n\nset(EXAMPLE_SERVICE_NAME \"s3\")\nset(CURRENT_TARGET \"${EXAMPLE_SERVICE_NAME}_gtest\")\nset(CURRENT_TARGET_AWS_DEPENDENCIES s3 sts iam transfer)\n\n# Set this project's name.\nproject(\"${EXAMPLE_SERVICE_NAME}-examples-gtests\")\n\n# Set the C++ standard to use to build this target.\nset(CMAKE_CXX_STANDARD 17)\n```\n\n----------------------------------------\n\nTITLE: S3 Object Existence Check Implementation in Java\nDESCRIPTION: Method to verify if an S3 object exists by attempting to retrieve its metadata using HeadObject request. Returns true if the object exists and has a content type.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/pam_source_files/README.md#2025-04-09_snippet_11\n\nLANGUAGE: java\nCODE:\n```\npublic boolean checkS3ObjectDoesNotExist(String keyName) {\n    S3Client s3 = getClient();\n    HeadObjectRequest headObjectRequest = HeadObjectRequest.builder()\n        .bucket(PhotoApplicationResources.STORAGE_BUCKET)\n        .key(keyName)\n        .build();\n\n    try {\n        HeadObjectResponse response = s3.headObject(headObjectRequest);\n        String contentType = response.contentType();\n        if (contentType.length() > 0)\n            return true;\n    } catch (S3Exception e) {\n        System.err.println(e.awsErrorDetails().errorMessage());\n        e.printStackTrace();\n        throw e;\n    }\n    return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SageMaker Assume Role Policy for Geospatial Operations\nDESCRIPTION: JSON policy document that allows SageMaker and SageMaker Geospatial services to assume a role. This policy is needed for the IAM role that will be used by SageMaker for pipeline execution.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/sagemaker_pipelines/SPECIFICATION.md#2025-04-09_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n   Version: \"2012-10-17\",\n   Statement: [\n      {\n         Effect: \"Allow\",\n         Action: [\"sts:AssumeRole\"],\n         Principal: {\n            Service: [\n            \"sagemaker.amazonaws.com\",\n            \"sagemaker-geospatial.amazonaws.com\",\n            ],\n         },\n      },\n   ],\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Step Functions Operations in .NET\nDESCRIPTION: Lists paths to implementation files containing basic Step Functions operations like creating activities, state machines, handling executions etc.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/StepFunctions/README.md#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n- [HelloStepFunctions](Actions/HelloStepFunctions.cs#L4)\n- [CreateActivity](Actions/StepFunctionsWrapper.cs#L28)\n- [CreateStateMachine](Actions/StepFunctionsWrapper.cs#L42)\n- [DeleteActivity](Actions/StepFunctionsWrapper.cs#L68)\n- [DeleteStateMachine](Actions/StepFunctionsWrapper.cs#L83)\n- [DescribeExecution](Actions/StepFunctionsWrapper.cs#L99)\n- [DescribeStateMachine](Actions/StepFunctionsWrapper.cs#L114)\n- [GetActivityTask](Actions/StepFunctionsWrapper.cs#L129)\n- [ListActivities](Actions/StepFunctionsWrapper.cs#L147)\n- [ListExecutions](Actions/StepFunctionsWrapper.cs#L175)\n- [ListStateMachines](Actions/StepFunctionsWrapper.cs#L204)\n- [SendTaskSuccess](Actions/StepFunctionsWrapper.cs#L225)\n- [StartExecution](Actions/StepFunctionsWrapper.cs#L243)\n```\n\n----------------------------------------\n\nTITLE: Publishing to an SNS Topic using AWS SDK for Kotlin\nDESCRIPTION: This code snippet demonstrates how to publish a message to an Amazon SNS topic using the AWS SDK for Kotlin.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/sns/README.md#2025-04-09_snippet_6\n\nLANGUAGE: Kotlin\nCODE:\n```\nsrc/main/kotlin/com/kotlin/sns/PublishTopic.kt#L39\n```\n\n----------------------------------------\n\nTITLE: Installing Additional Libraries on Amazon EMR Cluster Instances\nDESCRIPTION: Command to run the script that installs additional libraries on specific Amazon EMR cluster instances by providing a cluster ID and path to a shell script stored in S3.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/emr/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython install_libraries.py CLUSTER_ID SHELL_SCRIPT_PATH\n```\n\n----------------------------------------\n\nTITLE: Defining Python Dependencies for AWS SDK Examples\nDESCRIPTION: A requirements file that specifies the minimum versions of boto3, botocore, and pytest needed for AWS SDK examples. This ensures compatible AWS SDK components and testing framework are installed.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/redshift/requirements.txt#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nboto3>=1.34.74\nbotocore>=1.34.74\npytest>=8.1.1\n```\n\n----------------------------------------\n\nTITLE: Get Amazon ECS ARN Information Scenario using .NET\nDESCRIPTION: A comprehensive scenario that demonstrates how to retrieve information about clusters, services, and tasks in Amazon ECS. This includes listing clusters, then for each cluster, retrieving its services and tasks.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/ECS/README.md#2025-04-09_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nECSScenario/ECSScenario.cs\n```\n\n----------------------------------------\n\nTITLE: Creating a Lambda Function with SAP ABAP\nDESCRIPTION: This code snippet shows how to create a Lambda function using the AWS SDK for SAP ABAP. It's part of a larger set of Lambda-related actions.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/sap-abap/services/lambda/README.md#2025-04-09_snippet_1\n\nLANGUAGE: ABAP\nCODE:\n```\nzcl_aws1_lmd_actions.clas.abap#L62\n```\n\n----------------------------------------\n\nTITLE: Installing Poco library with Conan package manager for Windows\nDESCRIPTION: Uses the Conan package manager to install the Poco library as a shared library in Debug mode on Windows systems.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/cross-service/serverless-aurora/README.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nconan install .. --build=missing -o poco:shared=True -s build_type=Debug\n```\n\n----------------------------------------\n\nTITLE: Amazon SES Email Sender Component in Java\nDESCRIPTION: A Spring Component class that sends email reports with attachments using Amazon SES. The class configures both plain text and HTML email formats, adds Excel attachments, and sends the email using AWS SDK for Java.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_photo_analyzer_async/README.md#2025-04-09_snippet_8\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.photo;\n\nimport org.apache.commons.io.IOUtils;\nimport software.amazon.awssdk.auth.credentials.EnvironmentVariableCredentialsProvider;\nimport software.amazon.awssdk.regions.Region;\nimport software.amazon.awssdk.services.ses.SesClient;\nimport javax.activation.DataHandler;\nimport javax.activation.DataSource;\nimport javax.mail.Message;\nimport javax.mail.MessagingException;\nimport javax.mail.Session;\nimport javax.mail.internet.InternetAddress;\nimport javax.mail.internet.MimeMessage;\nimport javax.mail.internet.MimeMultipart;\nimport javax.mail.internet.MimeBodyPart;\nimport javax.mail.util.ByteArrayDataSource;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.nio.ByteBuffer;\nimport java.util.Properties;\nimport software.amazon.awssdk.core.SdkBytes;\nimport software.amazon.awssdk.services.ses.model.SendRawEmailRequest;\nimport software.amazon.awssdk.services.ses.model.RawMessage;\nimport software.amazon.awssdk.services.ses.model.SesException;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class SendMessages {\n\nprivate String sender = \"<enter email address>\";\n\n// The subject line for the email.\nprivate String subject = \"Analyzed photos report\";\n\n// The email body for recipients with non-HTML email clients.\nprivate String bodyText = \"Hello,\\r\\n\" + \"See the attached file for the analyzed photos report.\";\n\n// The HTML body of the email.\nprivate String bodyHTML = \"<html>\" + \"<head></head>\" + \"<body>\" + \"<h1>Hello!</h1>\"\n        + \"<p>Please see the attached file for the report that analyzed photos in the S3 bucket.</p>\" + \"</body>\" + \"</html>\";\n\npublic void sendReport(InputStream is, String emailAddress ) throws IOException {\n\n    // Convert the InputStream to a byte[].\n    byte[] fileContent = IOUtils.toByteArray(is);\n\n    try {\n        send(fileContent,emailAddress);\n    } catch (MessagingException e) {\n        e.getStackTrace();\n    }\n }\n\n public void send(byte[] attachment, String emailAddress) throws MessagingException, IOException {\n\n    MimeMessage message = null;\n    Session session = Session.getDefaultInstance(new Properties());\n\n    // Create a new MimeMessage object.\n    message = new MimeMessage(session);\n\n    // Add subject, from, and to lines.\n    message.setSubject(subject, \"UTF-8\");\n    message.setFrom(new InternetAddress(sender));\n    message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(emailAddress));\n\n    // Create a multipart/alternative child container.\n    MimeMultipart msgBody = new MimeMultipart(\"alternative\");\n\n    // Create a wrapper for the HTML and text parts.\n    MimeBodyPart wrap = new MimeBodyPart();\n\n    // Define the text part.\n    MimeBodyPart textPart = new MimeBodyPart();\n    textPart.setContent(bodyText, \"text/plain; charset=UTF-8\");\n\n    // Define the HTML part.\n    MimeBodyPart htmlPart = new MimeBodyPart();\n    htmlPart.setContent(bodyHTML, \"text/html; charset=UTF-8\");\n\n    // Add the text and HTML parts to the child container.\n    msgBody.addBodyPart(textPart);\n    msgBody.addBodyPart(htmlPart);\n\n    // Add the child container to the wrapper object.\n    wrap.setContent(msgBody);\n\n    // Create a multipart/mixed parent container.\n    MimeMultipart msg = new MimeMultipart(\"mixed\");\n\n    // Add the parent container to the message.\n    message.setContent(msg);\n\n    // Add the multipart/alternative part to the message.\n    msg.addBodyPart(wrap);\n\n    // Define the attachment.\n    MimeBodyPart att = new MimeBodyPart();\n    DataSource fds = new ByteArrayDataSource(attachment, \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\");\n    att.setDataHandler(new DataHandler(fds));\n\n    String reportName = \"PhotoReport.xls\";\n    att.setFileName(reportName);\n\n    // Add the attachment to the message.\n    msg.addBodyPart(att);\n\n    // Try to send the email.\n    try {\n        System.out.println(\"Attempting to send an email through Amazon SES \" + \"using the AWS SDK for Java...\");\n\n        Region region = Region.US_WEST_2;\n        SesClient client = SesClient.builder()\n                .credentialsProvider(EnvironmentVariableCredentialsProvider.create())\n                .region(region)\n                .build();\n\n        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n        message.writeTo(outputStream);\n        ByteBuffer buf = ByteBuffer.wrap(outputStream.toByteArray());\n        byte[] arr = new byte[buf.remaining()];\n        buf.get(arr);\n\n        SdkBytes data = SdkBytes.fromByteArray(arr);\n        RawMessage rawMessage = RawMessage.builder()\n                .data(data)\n                .build();\n\n        SendRawEmailRequest rawEmailRequest = SendRawEmailRequest.builder()\n                .rawMessage(rawMessage)\n                .build();\n\n        client.sendRawEmail(rawEmailRequest);\n\n    } catch (SesException e) {\n        System.err.println(e.awsErrorDetails().errorMessage());\n        System.exit(1);\n    }\n    System.out.println(\"Email sent with attachment.\");\n    }\n   }\n```\n\n----------------------------------------\n\nTITLE: Setting Object Retention in S3 in Java\nDESCRIPTION: Code example that demonstrates how to set the retention period for an object using the PutObjectRetention operation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/s3/README.md#2025-04-09_snippet_10\n\nLANGUAGE: Java\nCODE:\n```\n- [PutObjectRetention](src/main/java/com/example/s3/lockscenario/S3LockActions.java#L61)\n```\n\n----------------------------------------\n\nTITLE: Running Hello RDS Example\nDESCRIPTION: Command to run the Hello Amazon RDS example which demonstrates basic RDS operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/gov2/rds/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo run ./hello\n```\n\n----------------------------------------\n\nTITLE: Test File Discovery and Configuration\nDESCRIPTION: Implements automated test file discovery by finding test files with 'gtest_' prefix and mapping them to their corresponding source files. Configures the test executable with sources, includes, compiler definitions and links required libraries.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/aurora/tests/CMakeLists.txt#2025-04-09_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# GTEST_SOURCE_FILES can be defined in the command line to limit the files in a build. For example,\n# you can limit files to one action.\nif (NOT DEFINED GTEST_SOURCE_FILES)\n    file(\n            GLOB\n            GTEST_SOURCE_FILES\n            \"gtest_*.cpp\"\n    )\nendif ()\n\nenable_testing()\n\nforeach (TEST_FILE ${GTEST_SOURCE_FILES})\n    string(REPLACE \"gtest_\" \"../\" SOURCE_FILE ${TEST_FILE})\n    if (EXISTS ${SOURCE_FILE})\n        list(APPEND GTEST_SOURCE ${SOURCE_FILE} ${TEST_FILE})\n    else ()\n        message(\"Error: no associated source file found for ${TEST_FILE}\")\n    endif ()\nendforeach ()\n\ntarget_sources(\n        ${CURRENT_TARGET}\n        PUBLIC\n        ${GTEST_SOURCE}\n        test_main.cpp\n        ${EXAMPLE_SERVICE_NAME}_gtests.cpp\n)\n\ntarget_include_directories(\n        ${CURRENT_TARGET}\n        PUBLIC\n        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/..>\n        $<INSTALL_INTERFACE:..>\n)\n\ntarget_compile_definitions(\n        ${CURRENT_TARGET}\n        PUBLIC\n        TESTING_BUILD\n        SRC_DIR=\"${CMAKE_CURRENT_SOURCE_DIR}\"\n)\n\ntarget_link_libraries(\n        ${CURRENT_TARGET}\n        GTest::gtest\n        ${AWSSDK_LINK_LIBRARIES}\n        ${AWSSDK_PLATFORM_DEPS}\n)\n\ninclude(GoogleTest)\ngtest_add_tests(\n        TARGET\n        ${CURRENT_TARGET}\n)\n```\n\n----------------------------------------\n\nTITLE: Converting WorkItem List to XML Document in Kotlin\nDESCRIPTION: A function that converts a list of WorkItem objects into an XML Document. It creates XML elements for each WorkItem property (Id, Name, Date, Description, Guide, and Status) and organizes them in a hierarchical structure.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/creating_redshift_application/README.md#2025-04-09_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nprivate fun toXml(itemList: List<WorkItem>): Document? {\n        try {\n            val factory = DocumentBuilderFactory.newInstance()\n            val builder = factory.newDocumentBuilder()\n            val doc = builder.newDocument()\n\n            // Start building the XML.\n            val root = doc.createElement(\"Items\")\n            doc.appendChild(root)\n\n            // Get the elements from the collection.\n            val custCount = itemList.size\n\n            // Iterate through the collection.\n            for (index in 0 until custCount) {\n                // Get the WorkItem object from the collection.\n                val myItem = itemList[index]\n                val item = doc.createElement(\"Item\")\n                root.appendChild(item)\n\n                // Set Id.\n                val id = doc.createElement(\"Id\")\n                id.appendChild(doc.createTextNode(myItem.id))\n                item.appendChild(id)\n\n                // Set Name.\n                val name = doc.createElement(\"Name\")\n                name.appendChild(doc.createTextNode(myItem.name))\n                item.appendChild(name)\n\n                // Set Date.\n                val date = doc.createElement(\"Date\")\n                date.appendChild(doc.createTextNode(myItem.date))\n                item.appendChild(date)\n\n                // Set Description.\n                val desc = doc.createElement(\"Description\")\n                desc.appendChild(doc.createTextNode(myItem.description))\n                item.appendChild(desc)\n\n                // Set Guide.\n                val guide = doc.createElement(\"Guide\")\n                guide.appendChild(doc.createTextNode(myItem.guide))\n                item.appendChild(guide)\n\n                // Set Status.\n                val status = doc.createElement(\"Status\")\n                status.appendChild(doc.createTextNode(myItem.status))\n                item.appendChild(status)\n            }\n            return doc\n        } catch (e: ParserConfigurationException) {\n            e.printStackTrace()\n        }\n        return null\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating a Lambda Function in JavaScript\nDESCRIPTION: This code excerpt shows how to create a Lambda function using the AWS SDK for JavaScript (v3). It's part of the single actions examples demonstrating individual Lambda operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/lambda/README.md#2025-04-09_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nactions/create-function.js#L15\n```\n\n----------------------------------------\n\nTITLE: Sending Messages with Amazon Pinpoint using C#\nDESCRIPTION: This code snippet demonstrates how to send messages using Amazon Pinpoint. It references a SendEmail method located in the SendEmailMessage/SendEmail.cs file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Pinpoint/README.md#2025-04-09_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nSendMessages(SendEmailMessage/SendEmail.cs#L4)\n```\n\n----------------------------------------\n\nTITLE: Listing CloudWatch Metrics in Kotlin\nDESCRIPTION: This code snippet demonstrates how to list CloudWatch metrics using the AWS SDK for Kotlin. It's part of the 'Hello CloudWatch' example that introduces basic CloudWatch operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/cloudwatch/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nListMetrics\n```\n\n----------------------------------------\n\nTITLE: Starting ECR Lifecycle Policy Preview with Java\nDESCRIPTION: Demonstrates how to start a preview of a lifecycle policy for an ECR repository using the StartLifecyclePolicyPreview API.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/ecr/README.md#2025-04-09_snippet_9\n\nLANGUAGE: Java\nCODE:\n```\n// Referenced from ECRActions.java#L244\n```\n\n----------------------------------------\n\nTITLE: Running the API Gateway Integration Demo\nDESCRIPTION: Command to execute the main example script that demonstrates creating and using a REST API with API Gateway integrated with DynamoDB.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/api-gateway/aws_service/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython aws_service.py demo\n```\n\n----------------------------------------\n\nTITLE: Listing State Machines with AWS Step Functions Java SDK\nDESCRIPTION: This code snippet shows how to list state machines using the AWS Step Functions Java SDK. It employs the listStateMachines command to retrieve a list of existing state machines.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/stepfunctions/README.md#2025-04-09_snippet_9\n\nLANGUAGE: Java\nCODE:\n```\n// Code snippet for listing state machines\n// Refer to: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/route53/src/main/java/com/example/route/HelloStepFunctions.java\n```\n\n----------------------------------------\n\nTITLE: Listing Rule Names by Target in EventBridge with Kotlin\nDESCRIPTION: This example demonstrates how to list rule names associated with a specific target in Amazon EventBridge using the AWS SDK for Kotlin. It uses the ListRuleNamesByTarget operation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/eventbridge/README.md#2025-04-09_snippet_4\n\nLANGUAGE: Kotlin\nCODE:\n```\nListRuleNamesByTarget\n```\n\n----------------------------------------\n\nTITLE: Creating a Contact List in Amazon SES v2 API using Rust\nDESCRIPTION: This code snippet shows how to create a contact list in Amazon SES v2 API using the AWS SDK for Rust. The implementation is located in the create-contact-list.rs file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/ses/README.md#2025-04-09_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n// Implementation in src/bin/create-contact-list.rs#L26\n```\n\n----------------------------------------\n\nTITLE: Managing CloudWatch Alarm Actions\nDESCRIPTION: Examples showing how to enable and disable CloudWatch alarm actions.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/cloudwatch/README.md#2025-04-09_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nsrc/main/java/com/example/cloudwatch/EnableAlarmActions.java#L6\n```\n\nLANGUAGE: Java\nCODE:\n```\nsrc/main/java/com/example/cloudwatch/DisableAlarmActions.java#L6\n```\n\n----------------------------------------\n\nTITLE: Creating an Access Key using AWS IAM in Kotlin\nDESCRIPTION: This code excerpt shows how to create an IAM access key using the AWS SDK for Kotlin. It requires the user name as input and returns the created access key details.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/iam/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nsrc/main/kotlin/com/kotlin/iam/CreateAccessKey.kt#L39\n```\n\n----------------------------------------\n\nTITLE: Running ListInstanceSnapshots Example in Go\nDESCRIPTION: This example shows how to list Amazon RDS instance snapshots using the AWS SDK for Go. It doesn't require any command-line arguments.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/rds/README.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngo run ListInstanceSnapshots.go\n```\n\n----------------------------------------\n\nTITLE: Getting Object Retention Configuration in S3 in Java\nDESCRIPTION: Code example that demonstrates how to retrieve the retention configuration for an object using the GetObjectRetention operation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/s3/README.md#2025-04-09_snippet_12\n\nLANGUAGE: Java\nCODE:\n```\n- [GetObjectRetention](src/main/java/com/example/s3/lockscenario/S3LockActions.java#L309)\n```\n\n----------------------------------------\n\nTITLE: Listing Lambda Functions with SAP ABAP\nDESCRIPTION: This code example demonstrates how to list Lambda functions using the AWS SDK for SAP ABAP. It's included in a collection of Lambda-related actions.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/sap-abap/services/lambda/README.md#2025-04-09_snippet_5\n\nLANGUAGE: ABAP\nCODE:\n```\nzcl_aws1_lmd_actions.clas.abap#L190\n```\n\n----------------------------------------\n\nTITLE: Deleting a DynamoDB Table in Swift\nDESCRIPTION: Shows how to delete a DynamoDB table. This operation removes the table and all its data from your AWS account.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/swift/example_code/dynamodb/README.md#2025-04-09_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nDeleteTable(basics/MovieList/MovieTable.swift#L153)\n```\n\n----------------------------------------\n\nTITLE: Starting the Flask REST Service\nDESCRIPTION: This command starts the Flask web server in debug mode on http://localhost:5000, running the REST service defined in app.py.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/cross_service/photo_analyzer/README.md#2025-04-09_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\npython app.py\n```\n\n----------------------------------------\n\nTITLE: Displaying Amazon SNS Topic ARNs in Go\nDESCRIPTION: This code snippet displays the Amazon Resource Names (ARNs) of your Amazon SNS topics.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/sns/README.md#2025-04-09_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\ngo run ShowTopics.go\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for Amazon Comprehend Examples in Python\nDESCRIPTION: Command to install the necessary Python packages for running the Amazon Comprehend examples. This should be executed in a virtual environment.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/comprehend/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\npython -m pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Enabling CloudWatch Alarm Actions in C++\nDESCRIPTION: This code snippet demonstrates how to enable actions for CloudWatch alarms using the AWS SDK for C++. It requires the appropriate permissions to modify CloudWatch alarm configurations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/cloudwatch/README.md#2025-04-09_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nenable_alarm_actions.cpp#L20\n```\n\n----------------------------------------\n\nTITLE: Deleting SQS Queue in Go\nDESCRIPTION: Example command for deleting an AWS SQS queue. Requires queue name as an input parameter.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/sqs/README.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngo run DeleteQueue.go -q QUEUE\n```\n\n----------------------------------------\n\nTITLE: Configuring C++ AWS Lambda Project with CMake\nDESCRIPTION: CMake configuration for building an AWS Lambda function in C++. It sets the C++ standard to C++11, links against the AWS Lambda runtime library and jsoncpp, and packages the function for deployment using aws_lambda_package_target.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/lambda/cpp_lambda/increment/CMakeLists.txt#2025-04-09_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_CXX_STANDARD 11)\nproject(cpp_lambda_increment LANGUAGES CXX)\n\nfind_package(aws-lambda-runtime REQUIRED)\nadd_executable(${PROJECT_NAME} \"main.cpp\")\ntarget_link_libraries(${PROJECT_NAME}\n        PUBLIC\n        AWS::aws-lambda-runtime\n        jsoncpp\n        )\n\naws_lambda_package_target(${PROJECT_NAME})\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Windows Build Environment in CMake\nDESCRIPTION: Initializes the CMake build environment for Flutter Windows applications. Configures minimum required CMake version, sets up ephemeral directories, and includes generated configuration.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/cognito_flutter_mobile_app/windows/flutter/CMakeLists.txt#2025-04-09_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n\n# Configuration provided via flutter tool.\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n\n# TODO: Move the rest of this into files in ephemeral. See\n# https://github.com/flutter/flutter/issues/57146.\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n\n# Set fallback configurations for older versions of the flutter tool.\nif (NOT DEFINED FLUTTER_TARGET_PLATFORM)\n  set(FLUTTER_TARGET_PLATFORM \"windows-x64\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: AWS IoT SiteWise Service Flow Documentation\nDESCRIPTION: Detailed markdown documentation of the AWS IoT SiteWise service integration flow, including asset model creation, data management, portal creation, gateway setup, and cleanup procedures. Each step includes proper error handling instructions.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/basics/sitewise/SPECIFICATION.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# AWS IoT SiteWise Service Scenario Specification\n\n## Overview\nThis SDK Basics scenario demonstrates how to interact with AWS IoT SiteWise using an AWS SDK. \nIt demonstrates various tasks such as creating a SiteWise Asset Model, creating an asset, \nsending data to the asset, reading data, and so on.  Finally this scenario demonstrates how \nto clean up resources. Its purpose is to demonstrate how to get up and running with \nAWS IoT SiteWise and an AWS SDK.\n\n## Resources\nThis Basics scenario requires an IAM role that has permissions to work with AWS IoT \nSiteWise service. The scenario creates this resource using a CloudFormation template.\n\n## Hello AWS IoT SiteWise\nThis program is intended for users not familiar with the AWS IoT SiteWise Service to easily get up and running. The program uses a `listAssetModelsPaginator` to demonstrate how you can read through Asset Model information.\n```\n\n----------------------------------------\n\nTITLE: Video Processing Controller with AWS Integration\nDESCRIPTION: Spring MVC controller handling video upload and processing requests. Integrates with AWS S3 for storage and includes endpoints for video analysis and report generation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/video_analyzer_application/README.md#2025-04-09_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.video;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.*;\n// [Additional imports...]\n\n@Controller\npublic class VideoController {\n    @Autowired\n    S3Service s3Client;\n\n    @Autowired\n    WriteExcel excel;\n\n    @Autowired\n    SendMessages sendMessage;\n\n    @Autowired\n    VideoDetectFaces detectFaces;\n\n    private String bucketName = \"<Enter your bucket name>\";\n\n    // [Method implementations...]\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading a File Stream to S3 in Go\nDESCRIPTION: Uploads a stream for a file to an Amazon S3 bucket. Requires parameters for the target bucket, file path, and the object key name to use in the bucket.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/s3/README.md#2025-04-09_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ngo run UploadStream.go -b BUCKET -f FILENAME -k KEY\n```\n\n----------------------------------------\n\nTITLE: Running ListSubnetGroups Example in Go\nDESCRIPTION: This example demonstrates listing Amazon RDS subnet groups using the AWS SDK for Go. It doesn't require any command-line arguments.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/rds/README.md#2025-04-09_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ngo run ListSubnetGroups.go\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Types in CMake\nDESCRIPTION: Defines build configuration types (Debug/Profile/Release) and handles multi-configuration generators.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/cognito_flutter_mobile_app/windows/CMakeLists.txt#2025-04-09_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Dependencies for AWS SDK Examples\nDESCRIPTION: A requirements.txt file listing the Python packages required for an AWS SDK example project. This includes the AWS SDK for Python (boto3), Flask web framework, Flask-CORS extension, webargs for parsing request arguments, and pytest for testing. Each dependency specifies a minimum required version.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/cross_service/dynamodb_item_tracker/requirements.txt#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nboto3>=1.26.81\nflask>=2.2.0\nflask-cors>=3.0.10\nwebargs>=8.2.0\npytest>=7.2.1\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for AWS Secrets Manager C++ Tests\nDESCRIPTION: This CMake script configures a project for running Google Test-based unit tests on AWS Secrets Manager C++ SDK examples. It handles dependency management, platform-specific configurations, and test discovery. The script includes logic for finding or downloading Google Test, locating the AWS SDK for C++, and setting up the build environment.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/secrets-manager/tests/CMakeLists.txt#2025-04-09_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\n\n# Set the minimum required version of CMake for this project.\ncmake_minimum_required(VERSION 3.14)\n\nset(EXAMPLE_SERVICE_NAME \"secretsmanager\")\nset(CURRENT_TARGET \"${EXAMPLE_SERVICE_NAME}_gtest\")\nset(CURRENT_TARGET_AWS_DEPENDENCIES secretsmanager)\n\n# Set this project's name.\nproject(\"${EXAMPLE_SERVICE_NAME}-examples-gtests\")\n\n# Set the C++ standard to use to build this target.\nset(CMAKE_CXX_STANDARD 14)\n\nenable_testing()\n\nfind_package(GTest)\n\nif (NOT GTest_FOUND)\n    include(FetchContent)\n    FetchContent_Declare(\n            googletest\n            GIT_REPOSITORY https://github.com/google/googletest.git\n            GIT_TAG release-1.12.1\n    )\n\n    # For Windows: Prevent overriding the parent project's compiler/linker settings.\n    set(gtest_force_shared_crt ON CACHE BOOL \"\" FORCE)\n    FetchContent_MakeAvailable(googletest)\nendif ()\n\n# Use the MSVC variable to determine if this is a Windows build.\nset(WINDOWS_BUILD ${MSVC})\n\n# Set the location for Windows to find the installed libraries of the SDK.\nif (WINDOWS_BUILD)\n    string(REPLACE \";\" \"/aws-cpp-sdk-all;\" SYSTEM_MODULE_PATH \"${CMAKE_SYSTEM_PREFIX_PATH}/aws-cpp-sdk-all\")\n    list(APPEND CMAKE_PREFIX_PATH ${SYSTEM_MODULE_PATH})\nendif ()\n\n# Find the AWS SDK for C++ package.\nfind_package(AWSSDK REQUIRED COMPONENTS ${CURRENT_TARGET_AWS_DEPENDENCIES})\n\nadd_executable(\n        ${CURRENT_TARGET}\n)\n\nif (WINDOWS_BUILD AND AWSSDK_INSTALL_AS_SHARED_LIBS)\n    # set(BIN_SUB_DIR \"/Debug\") # If you are building from the command line, you may need to uncomment this\n    # and set the proper subdirectory to the executables' location.\n\n    # Copy relevant AWS SDK for C++ libraries into the current binary directory for running and debugging.\n    AWSSDK_CPY_DYN_LIBS(\n            CURRENT_TARGET_AWS_DEPENDENCIES\n            \"\"\n            ${CMAKE_CURRENT_BINARY_DIR}${BIN_SUB_DIR}\n    )\nendif ()\n\n# GTEST_SOURCE_FILES can be defined in the command line to limit the files in a build, for example to one action.\nif (NOT DEFINED GTEST_SOURCE_FILES)\n    file(\n            GLOB\n            GTEST_SOURCE_FILES\n            \"gtest_*.cpp\"\n    )\nendif ()\n\nforeach (TEST_FILE ${GTEST_SOURCE_FILES})\n    string(REPLACE \"gtest_\" \"../\" SOURCE_FILE ${TEST_FILE})\n    if (EXISTS ${SOURCE_FILE})\n        list(APPEND GTEST_SOURCE ${SOURCE_FILE} ${TEST_FILE})\n    else ()\n        message(\"Error: no associated source file found for ${TEST_FILE}\")\n    endif ()\nendforeach ()\n\ntarget_sources(\n        ${CURRENT_TARGET}\n        PUBLIC\n        ${GTEST_SOURCE}\n        test_main.cpp\n        ${EXAMPLE_SERVICE_NAME}_gtests.cpp\n)\n\ntarget_include_directories(\n        ${CURRENT_TARGET}\n        PUBLIC\n        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/..>\n        $<INSTALL_INTERFACE:..>\n)\n\ntarget_compile_definitions(\n        ${CURRENT_TARGET}\n        PUBLIC\n        TESTING_BUILD\n        SRC_DIR=\"${CMAKE_CURRENT_SOURCE_DIR}\"\n)\n\ntarget_link_libraries(\n        ${CURRENT_TARGET}\n        GTest::gtest\n        ${AWSSDK_LINK_LIBRARIES}\n        ${AWSSDK_PLATFORM_DEPS}\n)\n\ninclude(GoogleTest)\n\ngtest_add_tests(\n        TARGET\n        ${CURRENT_TARGET}\n)\n```\n\n----------------------------------------\n\nTITLE: Getting S3 Bucket CORS Configuration in JavaScript\nDESCRIPTION: This code snippet shows how to retrieve the Cross-Origin Resource Sharing (CORS) configuration of an S3 bucket using the GetBucketCors operation in the AWS SDK for JavaScript (v3).\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/s3/README.md#2025-04-09_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n- [GetBucketCors](actions/get-bucket-cors.js#L4)\n```\n\n----------------------------------------\n\nTITLE: Defining PAM Lambda Strategy Interface in TypeScript\nDESCRIPTION: TypeScript interface that defines how AWS CDK deploys Lambdas for a specific language implementation. Includes runtime configuration, timeout settings, memory allocation, and code asset handling.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/applications/photo-asset-manager/DEVELOPMENT.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface PamLambdasStrategy {\n  runtime: Runtime;\n  timeout: Duration; // Default is 15 minutes.\n  memorySize: number; // In megabytes.\n  codeAsset: () => Code; // See Bundle code, following.\n  handlers: PamLambdasStrategyHandlers; // See Handlers, following\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting an EC2 Key Pair\nDESCRIPTION: Demonstrates how to delete a key pair that is no longer needed. This removes the public key stored in AWS, but users should also delete their local copy of the private key.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/EC2/README.md#2025-04-09_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\n// DeleteKeyPair\n```\n\n----------------------------------------\n\nTITLE: Complex SNS Scenarios with AWS SDK for PHP\nDESCRIPTION: Advanced implementation scenarios including a serverless application for photo management using labels and a dedicated example for publishing SMS text messages through Amazon SNS.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/php/example_code/sns/README.md#2025-04-09_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n- Create a serverless application to manage photos\n- Publish an SMS text message\n```\n\n----------------------------------------\n\nTITLE: Creating S3 Bucket in Rust\nDESCRIPTION: This code snippet shows how to create a new S3 bucket using the AWS SDK for Rust. It uses the CreateBucket operation to set up a new storage location in Amazon S3.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/s3/README.md#2025-04-09_snippet_3\n\nLANGUAGE: Rust\nCODE:\n```\nCreateBucket\n```\n\n----------------------------------------\n\nTITLE: Get Domain Details from Route 53 in C#\nDESCRIPTION: Retrieves detailed information about a specified domain registered with Amazon Route 53. Returns domain configuration including contact information, nameservers, and registration status.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Route53/README.md#2025-04-09_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n/// <summary>\n/// Get details for a domain.\n/// </summary>\n/// <param name=\"domainName\">The name of the domain to retrieve.</param>\n/// <returns>A string with detail information about the domain.</returns>\npublic async Task<string> GetDomainDetail(string domainName)\n{\n    try\n    {\n        var result = await _amazonRoute53Domains.GetDomainDetailAsync(\n            new GetDomainDetailRequest\n            {\n                DomainName = domainName\n            }\n        );\n        var detail = $\"\\nDomain {domainName}:\\n\";\n        detail += $\"AutoRenew: {result.AutoRenew}\"\n                 + $\"\\nCreationDate: {result.CreationDate}\"\n                 + $\"\\nDnsSec: {result.DnsSec}\"\n                 + $\"\\nExpirationDate: {result.ExpirationDate}\"\n                 + $\"\\nTransferLock: {result.TransferLock}\";\n        return detail;\n    }\n    catch (InvalidInputException)\n    {\n        return $\"Domain {domainName} was not found in your account.\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Packages\nDESCRIPTION: Command to install the required Python packages in a virtual environment for running the Aurora examples.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/aurora/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies\nDESCRIPTION: Specifies minimum required versions for boto3 (AWS SDK for Python) and pytest (testing framework) packages. Uses the greater than or equal to operator to ensure compatibility with newer versions.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/sns/requirements.txt#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nboto3>=1.26.79\npytest>=7.2.1\n```\n\n----------------------------------------\n\nTITLE: Defining Marshmallow Schema for Data Transformation\nDESCRIPTION: Python code demonstrating how to use marshmallow Schema to transform field names between the API and database (e.g., 'id' in API to 'iditem' in DynamoDB).\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/cross_service/dynamodb_item_tracker/README.md#2025-04-09_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass WorkItemSchema(Schema):\n    iditem = fields.Str(data_key='id')\n```\n\n----------------------------------------\n\nTITLE: Describing EC2 Instances in Go\nDESCRIPTION: This example lists your reservation IDs and instance IDs. It doesn't require any command-line arguments.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/ec2/README.md#2025-04-09_snippet_8\n\nLANGUAGE: Go\nCODE:\n```\ngo run DescribeInstances.go\n```\n\n----------------------------------------\n\nTITLE: Streaming Responses from Anthropic Claude Models in Go\nDESCRIPTION: Demonstrates how to invoke an Anthropic Claude model with streaming responses. This allows for processing model outputs incrementally as they are generated rather than waiting for the complete response.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/gov2/bedrock-runtime/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\ninvoke_model_with_response_stream.go#L30\n```\n\n----------------------------------------\n\nTITLE: Describing CloudWatch Alarms for a Metric in C++\nDESCRIPTION: This code snippet shows how to describe CloudWatch alarms for a specific metric using the AWS SDK for C++. It requires the appropriate permissions to access CloudWatch data.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/cloudwatch/README.md#2025-04-09_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ndescribe_alarms.cpp#L13\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for AWS SDK C++ Tests\nDESCRIPTION: Complete CMake configuration for building and running Google Tests with AWS SDK C++ examples. Sets up project dependencies including GTest and AWS SDK, configures platform-specific settings for Windows builds, and establishes test file organization and linking.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/acm/tests/CMakeLists.txt#2025-04-09_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\n\n# Set the minimum required version of CMake for this project.\ncmake_minimum_required(VERSION 3.14)\n\nset(EXAMPLE_SERVICE_NAME \"acm\")\nset(CURRENT_TARGET \"${EXAMPLE_SERVICE_NAME}_gtest\")\nset(CURRENT_TARGET_AWS_DEPENDENCIES acm)\n\n# Set this project's name.\nproject(\"${EXAMPLE_SERVICE_NAME}-examples-gtests\")\n\n# Set the C++ standard to use to build this target.\nset(CMAKE_CXX_STANDARD 14)\n\n# Build shared libraries by default.\nset(BUILD_SHARED_LIBS ON)\n\nenable_testing()\n\nfind_package(GTest)\n\nif (NOT GTest_FOUND)\n    include(FetchContent)\n    FetchContent_Declare(\n            googletest\n            GIT_REPOSITORY https://github.com/google/googletest.git\n            GIT_TAG release-1.12.1\n    )\n\n    # For Windows: Prevent overriding the parent project's compiler/linker settings.\n    set(gtest_force_shared_crt ON CACHE BOOL \"\" FORCE)\n    FetchContent_MakeAvailable(googletest)\nendif ()\n\n# Use the MSVC variable to determine if this is a Windows build.\nset(WINDOWS_BUILD ${MSVC})\n\n# Set the location for Windows to find the installed libraries of the SDK.\nif (WINDOWS_BUILD)\n    string(REPLACE \";\" \"/aws-cpp-sdk-all;\" SYSTEM_MODULE_PATH \"${CMAKE_SYSTEM_PREFIX_PATH}/aws-cpp-sdk-all\")\n    list(APPEND CMAKE_PREFIX_PATH ${SYSTEM_MODULE_PATH})\nendif ()\n\n# Find the AWS SDK for C++ package.\nfind_package(AWSSDK REQUIRED COMPONENTS ${CURRENT_TARGET_AWS_DEPENDENCIES})\n\nadd_executable(\n        ${CURRENT_TARGET}\n)\n\nif (WINDOWS_BUILD)\n    # set(BIN_SUB_DIR \"/Debug\") # If you are building from the command line, you may need to uncomment this\n    # and set the proper subdirectory to the executables' location.\n\n    if (AWSSDK_INSTALL_AS_SHARED_LIBS)\n        # Copy relevant AWS SDK for C++ libraries into the current binary directory for running and debugging.\n        AWSSDK_CPY_DYN_LIBS(\n                CURRENT_TARGET_AWS_DEPENDENCIES\n                \"\"\n                ${CMAKE_CURRENT_BINARY_DIR}${BIN_SUB_DIR}\n        )\n    endif ()\n\n    add_custom_command(\n            TARGET\n            ${CURRENT_TARGET}\n            POST_BUILD\n            COMMAND ${CMAKE_COMMAND} -E copy\n            ${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_BINDIR}${BIN_SUB_DIR}/gtest.dll\n            ${CMAKE_CURRENT_BINARY_DIR}${BIN_SUB_DIR}\n    )\nendif ()\n\n# GTEST_SOURCE_FILES can be defined in the command line to limit the files in a build, for example to one action.\nif (NOT DEFINED GTEST_SOURCE_FILES)\n    file(\n            GLOB\n            GTEST_SOURCE_FILES\n            \"gtest_*.cpp\"\n    )\nendif ()\n\nforeach (TEST_FILE ${GTEST_SOURCE_FILES})\n    string(REPLACE \"gtest_\" \"../\" SOURCE_FILE ${TEST_FILE})\n    if (EXISTS ${SOURCE_FILE})\n        list(APPEND GTEST_SOURCE ${SOURCE_FILE} ${TEST_FILE})\n    else ()\n        message(\"Error: no associated source file found for ${TEST_FILE}\")\n    endif ()\nendforeach ()\n\ntarget_sources(\n        ${CURRENT_TARGET}\n        PUBLIC\n        ${GTEST_SOURCE}\n        test_main.cpp\n        ${EXAMPLE_SERVICE_NAME}_gtests.cpp\n)\n\ntarget_include_directories(\n        ${CURRENT_TARGET}\n        PUBLIC\n        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/..>\n        $<INSTALL_INTERFACE:..>\n)\n\ntarget_compile_definitions(\n        ${CURRENT_TARGET}\n        PUBLIC\n        TESTING_BUILD\n        SRC_DIR=\"${CMAKE_CURRENT_SOURCE_DIR}\"\n)\n\ntarget_link_libraries(\n        ${CURRENT_TARGET}\n        GTest::gtest\n        ${AWSSDK_LINK_LIBRARIES}\n        ${AWSSDK_PLATFORM_DEPS}\n)\n\ninclude(GoogleTest)\n\ngtest_add_tests(\n        TARGET\n        ${CURRENT_TARGET}\n)\n```\n\n----------------------------------------\n\nTITLE: Deleting a State Machine in AWS Step Functions with Kotlin\nDESCRIPTION: Shows how to delete a state machine in AWS Step Functions using the AWS SDK for Kotlin and the deleteStateMachine command.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/stepfunctions/README.md#2025-04-09_snippet_4\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Code not provided in the given content\n```\n\n----------------------------------------\n\nTITLE: Updating OpenSearch Domain Configuration in Java\nDESCRIPTION: This code snippet demonstrates how to update the configuration of an OpenSearch domain using the AWS SDK for Java 2.x. It's part of the OpenSearchActions class.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/opensearch/README.md#2025-04-09_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\n// OpenSearchActions.java#L189\n// Code for UpdateDomainConfig operation\n```\n\n----------------------------------------\n\nTITLE: Describing EC2 Elastic IP Addresses in Go\nDESCRIPTION: This example displays information about the Elastic IP addresses for your account's VPC. It doesn't require any command-line arguments.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/ec2/README.md#2025-04-09_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\ngo run DescribeAddresses.go\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Elwing Plugin in JavaScript\nDESCRIPTION: Example of defining a basic plugin for Elwing with navigation items and component reference. This shows how to structure the index.ts file with navigation configuration and lazy-loaded component import.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/resources/clients/react/elwing/README.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst MyPlugin = {\n  navigationItem: {\n    text: \"My Plugin\",\n    href: \"/my_plugin\",\n    type: \"expandable-link-group\",\n    items: [{\n      type: \"link\",\n      text: \"Cloudscape Design System\",\n      href: \"https://cloudscape.design/\",\n      external: true\n    }],\n  } as SideNavigationProps.ExpandableLinkGroup,\n    component: lazy(() => import(\"./src/MyPluginComponent\")),\n  };\n\nexport { MyPlugin };\n```\n\n----------------------------------------\n\nTITLE: Running CreateInstanceSnapshot Example in Go\nDESCRIPTION: This example demonstrates creating a snapshot of an Amazon RDS instance using the AWS SDK for Go. It requires the instance name as a command-line argument.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/rds/README.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo run CreateInstanceSnapshot.go -i INSTANCE\n```\n\n----------------------------------------\n\nTITLE: Listing AWS IoT SiteWise Assets in Rust\nDESCRIPTION: This example demonstrates how to list AWS IoT SiteWise assets in a specified Region. It allows filtering by ALL or TOP_LEVEL assets and requires an asset model ID for ALL filter.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/sitewise/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncargo run --bin list-assets -- -f FILTER [-a ASSET-MODEL-ID] [-r REGION] [-v]\n```\n\n----------------------------------------\n\nTITLE: Listing IAM Users in Java\nDESCRIPTION: This snippet demonstrates how to list IAM users using the AWS SDK for Java 2.x.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/iam/README.md#2025-04-09_snippet_15\n\nLANGUAGE: Java\nCODE:\n```\nsrc/main/java/com/example/iam/ListUsers.java#L6\n```\n\n----------------------------------------\n\nTITLE: Running Examples with Command Line Options\nDESCRIPTION: Command to execute scripts with additional command line options. Uses util.parseArgs to configure options specific to each script.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/auto-scaling/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnode ./scenarios/<fileName> --option1 --option2\n```\n\n----------------------------------------\n\nTITLE: Running Collection Management Scenario\nDESCRIPTION: Command to run the example that demonstrates collection management, face detection, and face searching\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/rekognition/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython rekognition_collections.py\n```\n\n----------------------------------------\n\nTITLE: List Amazon ECS Tasks for a Cluster using .NET\nDESCRIPTION: Retrieves a list of all tasks running within a specified Amazon ECS cluster. Takes a cluster ARN as input and returns the task ARNs as a list of strings.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/ECS/README.md#2025-04-09_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n/// <summary>\n/// Get a list of running tasks on a cluster.\n/// </summary>\n/// <param name=\"clusterARN\">The ARN of the cluster.</param>\n/// <returns>A list of task ARNs.</returns>\npublic async Task<List<string>> ListTasks(string clusterARN)\n{\n    var response = await _ecsClient.ListTasksAsync(\n        new ListTasksRequest\n        {\n            Cluster = clusterARN\n        });\n\n    return response.TaskArns;\n}\n```\n\n----------------------------------------\n\nTITLE: Putting Item into DynamoDB Table in ABAP\nDESCRIPTION: This snippet demonstrates how to put an item into a DynamoDB table using the AWS SDK for SAP ABAP. It is part of the single action examples for DynamoDB operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/sap-abap/services/dyn/README.md#2025-04-09_snippet_6\n\nLANGUAGE: ABAP\nCODE:\n```\nzcl_aws1_dyn_actions.clas.abap#L239\n```\n\n----------------------------------------\n\nTITLE: Listing IAM Access Keys in Java\nDESCRIPTION: This snippet demonstrates how to list IAM access keys using the AWS SDK for Java 2.x.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/iam/README.md#2025-04-09_snippet_13\n\nLANGUAGE: Java\nCODE:\n```\nsrc/main/java/com/example/iam/ListAccessKeys.java#L6\n```\n\n----------------------------------------\n\nTITLE: Creating IAM AssumeRole Policy for EC2\nDESCRIPTION: JSON policy document that allows EC2 service to assume an IAM role through STS.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/resilient_service/SPECIFICATION.md#2025-04-09_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [{\n      \"Effect\": \"Allow\",\n      \"Principal\": {\"Service\": \"ec2.amazonaws.com\"},\n      \"Action\": \"sts:AssumeRole\"}]\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Geofences with Amazon Location Service in Java\nDESCRIPTION: This code snippet demonstrates how to use the ListGeofencesPaginator to list geofences in Amazon Location Service. It's part of the 'Hello Amazon Location' example that shows how to get started with the service.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/location/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nListGeofencesPaginator\n```\n\n----------------------------------------\n\nTITLE: Deprecated Get User Implementation - IAM JavaScript SDK V3\nDESCRIPTION: This code example for getting an IAM user has been superseded by newer examples in the AWS documentation under Code examples > Actions and scenarios > IAM section.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/iam/dead-snippets.txt#2025-04-09_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// snippet-start:[iam.JavaScript.users.getUserV3]\nThis code example has been superseded by the example in\nCode examples > Actions and scenarios > IAM\n// snippet-end:[iam.JavaScript.users.getUserV3]\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for AWS SES Tests\nDESCRIPTION: Complete CMake configuration that sets up a build environment for AWS SES example tests. It configures Google Test integration, manages AWS SDK dependencies, handles Windows-specific requirements, and sets up test file compilation. The configuration supports both Windows and non-Windows environments and includes proper library linking.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/ses/tests/CMakeLists.txt#2025-04-09_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\n\n# Set the minimum required version of CMake for this project.\ncmake_minimum_required(VERSION 3.14)\n\nset(EXAMPLE_SERVICE_NAME \"ses\")\nset(CURRENT_TARGET \"${EXAMPLE_SERVICE_NAME}_gtest\")\nset(CURRENT_TARGET_AWS_DEPENDENCIES email)\n\n# Set this project's name.\nproject(\"${EXAMPLE_SERVICE_NAME}-examples-gtests\" )\n\n# Set the C++ standard to use to build this target.\nset(CMAKE_CXX_STANDARD 14)\n\n# Build shared libraries by default.\nset(BUILD_SHARED_LIBS ON)\n\nenable_testing()\n\nfind_package(GTest)\n\nif(NOT GTest_FOUND)\n    include(FetchContent)\n    FetchContent_Declare(\n            googletest\n            GIT_REPOSITORY https://github.com/google/googletest.git\n            GIT_TAG release-1.12.1\n    )\n\n    # For Windows: Prevent overriding the parent project's compiler/linker settings.\n    set(gtest_force_shared_crt ON CACHE BOOL \"\" FORCE)\n    FetchContent_MakeAvailable(googletest)\nendif()\n\n# Use the MSVC variable to determine if this is a Windows build.\nset(WINDOWS_BUILD ${MSVC})\n\n# Set the location for Windows to find the installed libraries of the SDK.\nif(WINDOWS_BUILD)\n    string(REPLACE \";\" \"/aws-cpp-sdk-all;\" SYSTEM_MODULE_PATH \"${CMAKE_SYSTEM_PREFIX_PATH}/aws-cpp-sdk-all\")\n    list(APPEND CMAKE_PREFIX_PATH ${SYSTEM_MODULE_PATH})\nendif()\n\n# Find the AWS SDK for C++ package.\nfind_package(AWSSDK REQUIRED COMPONENTS ${CURRENT_TARGET_AWS_DEPENDENCIES})\n\nadd_executable(\n        ${CURRENT_TARGET}\n)\n\nif (WINDOWS_BUILD)\n    # set(BIN_SUB_DIR \"/Debug\") # If you are building from the command line, you may need to uncomment this\n    # and set the proper subdirectory to the executables' location.\n\n    if (AWSSDK_INSTALL_AS_SHARED_LIBS)\n        # Copy relevant AWS SDK for C++ libraries into the current binary directory for running and debugging.\n        AWSSDK_CPY_DYN_LIBS(\n                CURRENT_TARGET_AWS_DEPENDENCIES\n                \"\"\n                ${CMAKE_CURRENT_BINARY_DIR}${BIN_SUB_DIR}\n        )\n    endif ()\n\n    add_custom_command(\n            TARGET\n            ${CURRENT_TARGET}\n            POST_BUILD\n            COMMAND ${CMAKE_COMMAND} -E copy\n            ${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_BINDIR}${BIN_SUB_DIR}/gtest.dll\n            ${CMAKE_CURRENT_BINARY_DIR}${BIN_SUB_DIR}\n    )\nendif ()\n\n# GTEST_SOURCE_FILES can be defined in the command line to limit the files in a build, for example to one action.\nif (NOT DEFINED GTEST_SOURCE_FILES)\n    file(\n            GLOB\n            GTEST_SOURCE_FILES\n            \"gtest_*.cpp\"\n    )\nendif()\n\nforeach(TEST_FILE ${GTEST_SOURCE_FILES})\n    string(REPLACE \"gtest_\" \"../\" SOURCE_FILE ${TEST_FILE})\n     if (EXISTS ${SOURCE_FILE})\n        list(APPEND GTEST_SOURCE ${SOURCE_FILE} ${TEST_FILE})\n    else()\n        message(\"Error: no associated source file found for ${TEST_FILE}\")\n    endif()\nendforeach()\n\ntarget_sources(\n        ${CURRENT_TARGET}\n        PUBLIC\n        ${GTEST_SOURCE}\n        test_main.cpp\n        ${EXAMPLE_SERVICE_NAME}_gtests.cpp\n)\n\ntarget_include_directories(\n        ${CURRENT_TARGET}\n        PUBLIC\n        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/..>\n        $<INSTALL_INTERFACE:..>\n)\n\ntarget_compile_definitions(\n        ${CURRENT_TARGET}\n        PUBLIC\n        TESTING_BUILD\n        SRC_DIR=\"${CMAKE_CURRENT_SOURCE_DIR}\"\n)\n\ntarget_link_libraries(\n        ${CURRENT_TARGET}\n        GTest::gtest\n        ${AWSSDK_LINK_LIBRARIES}\n        ${AWSSDK_PLATFORM_DEPS}\n)\n\ninclude(GoogleTest)\n\ngtest_add_tests(\n        TARGET\n        ${CURRENT_TARGET}\n)\n```\n\n----------------------------------------\n\nTITLE: Running Go Scenarios with the Command Runner\nDESCRIPTION: Command to get help and a list of available scenarios using the command runner. This is used to execute more complex SQS examples.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/gov2/sqs/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo run ./cmd -h\n```\n\n----------------------------------------\n\nTITLE: Displaying AWS IoT SiteWise Basics Scenario Console Output\nDESCRIPTION: The complete console output of running the AWS IoT SiteWise Basics scenario. This demonstrates creating and managing industrial IoT assets, models, data ingestion, portal creation, and gateway setup, including the cleanup process at the end.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/basics/sitewise/SPECIFICATION.md#2025-04-09_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nAWS IoT SiteWise is a fully managed industrial software-as-a-service (SaaS) that\nmakes it easy to collect, store, organize, and monitor data from industrial equipment and processes.\nIt is designed to help industrial and manufacturing organizations collect data from their equipment and\nprocesses, and use that data to make informed decisions about their operations.\n\nOne of the key features of AWS IoT SiteWise is its ability to connect to a wide range of industrial\nequipment and systems, including programmable logic controllers (PLCs), sensors, and other\nindustrial devices. It can collect data from these devices and organize it into a unified data model,\nmaking it easier to analyze and gain insights from the data. AWS IoT SiteWise also provides tools for\nvisualizing the data, setting up alarms and alerts, and generating reports.\n\nAnother key feature of AWS IoT SiteWise is its ability to scale to handle large volumes of data.\nIt can collect and store data from thousands of devices and process millions of data points per second,\nmaking it suitable for large-scale industrial operations. Additionally, AWS IoT SiteWise is designed\nto be secure and compliant, with features like role-based access controls, data encryption,\nand integration with other AWS services for additional security and compliance features.\n\nLet's get started...\n\n\nEnter 'c' followed by <ENTER> to continue:\nc\nContinuing with the program...\n\n--------------------------------------------------------------------------------\nUse AWS CloudFormation to create an IAM role that are required for this scenario.\nStack creation requested, ARN is arn:aws:cloudformation:us-east-1:814548047983:stack/RoleSitewise/29f480c0-75fd-11ef-a42e-12cd4e534049\nStack created successfully\n--------------------------------------------------------------------------------\n1. Create an AWS SiteWise Asset Model\n An AWS IoT SiteWise Asset Model is a way to represent the physical assets, such as equipment,\n processes, and systems, that exist in an industrial environment. This model provides a structured and\n hierarchical representation of these assets, allowing users to define the relationships and properties\n of each asset.\n\n\nEnter 'c' followed by <ENTER> to continue:\nc\nContinuing with the program...\n\nThe Asset Model MyAssetModel already exists. The id of the existing model is ffbc475b-73ad-4eb6-bf28-8728818fa8ef. Moving on...\n\nEnter 'c' followed by <ENTER> to continue:\nc\nContinuing with the program...\n\n--------------------------------------------------------------------------------\n2. Create an AWS IoT SiteWise Asset\n The IoT SiteWise model defines the structure and metadata for your physical assets. Now we\n can use the asset model to create the asset.\n\n\n\nEnter 'c' followed by <ENTER> to continue:\nc\nContinuing with the program...\n\nAsset created with ID: 4d681624-a303-46dd-8830-6189790ae915\n\nEnter 'c' followed by <ENTER> to continue:\nc\nContinuing with the program...\n\n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\n3. Retrieve the property ID values\n To send data to an asset, we need to get the property ID values for the\n Temperature and Humidity properties.\n\n\nEnter 'c' followed by <ENTER> to continue:\nc\nContinuing with the program...\n\nThe Humidity property Id is feb4aba6-55f9-4b00-b366-27b9d7e5a747\nThe Temperature property Id is 6cb505aa-6bcc-46f4-a12a-7ca5df8eb028\n\nEnter 'c' followed by <ENTER> to continue:\nc\nContinuing with the program...\n\n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\n4. Send data to an AWS IoT SiteWise Asset\nBy sending data to an IoT SiteWise Asset, you can aggregate data from\nmultiple sources, normalize the data into a standard format, and store it in a\ncentralized location. This makes it easier to analyze and gain insights from the data.\n\nThis example demonstrate how to generate sample data and ingest it into the AWS IoT SiteWise asset.\n\n\n\nEnter 'c' followed by <ENTER> to continue:\nc\nContinuing with the program...\n\nData sent successfully.\n\nEnter 'c' followed by <ENTER> to continue:\nc\nContinuing with the program...\n\n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\n5. Retrieve the value of the IoT SiteWise Asset property\nIoT SiteWise is an AWS service that allows you to collect, process, and analyze industrial data\nfrom connected equipment and sensors. One of the key benefits of reading an IoT SiteWise property\nis the ability to gain valuable insights from your industrial data.\n\n\n\nEnter 'c' followed by <ENTER> to continue:\nc\nContinuing with the program...\n\nThe property name is: Temperature property \nThe value of this property is 23.5\n\nEnter 'c' followed by <ENTER> to continue:\nc\nContinuing with the program...\n\nThe property name is: Humidity property \nThe value of this property is 65.0\n\nEnter 'c' followed by <ENTER> to continue:\nc\nContinuing with the program...\n\n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\n6. Create an IoT SiteWise Portal\n An IoT SiteWise Portal allows you to aggregate data from multiple industrial sources,\n such as sensors, equipment, and control systems, into a centralized platform.\n\n\nEnter 'c' followed by <ENTER> to continue:\nc\nContinuing with the program...\n\nPortal created successfully. Portal ID 63e65729-b7a1-410a-aa36-94145fe92153\nThe portal Id is 63e65729-b7a1-410a-aa36-94145fe92153\n\nEnter 'c' followed by <ENTER> to continue:\nc\nContinuing with the program...\n\n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\n7. Describe the Portal\n In this step, we will describe the step and provide the portal URL.\n\n\nEnter 'c' followed by <ENTER> to continue:\nc\nContinuing with the program...\n\nPortal URL: https://p-fy9qnrqy.app.iotsitewise.aws\n\nEnter 'c' followed by <ENTER> to continue:\nc\nContinuing with the program...\n\n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\n8. Create an IoTSitewise Gateway\nIoTSitewise Gateway serves as the bridge between industrial equipment, sensors, and the\ncloud-based IoTSitewise service. It is responsible for securely collecting, processing, and\ntransmitting data from various industrial assets to the IoTSitewise platform,\nenabling real-time monitoring, analysis, and optimization of industrial operations.\n\n\n\nEnter 'c' followed by <ENTER> to continue:\nc\nContinuing with the program...\n\nThe ARN of the gateway is arn:aws:iotsitewise:us-east-1:814548047983:gateway/50320670-1d88-4a7e-9013-1d7e8a3af832\nGateway creation completed successfully. id is 50320670-1d88-4a7e-9013-1d7e8a3af832\n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\n9. Describe the IoTSitewise Gateway\n\nEnter 'c' followed by <ENTER> to continue:\nc\nContinuing with the program...\n\nGateway Name: myGateway11\nGateway ARN: arn:aws:iotsitewise:us-east-1:814548047983:gateway/50320670-1d88-4a7e-9013-1d7e8a3af832\nGateway Platform: GatewayPlatform(GreengrassV2=GreengrassV2(CoreDeviceThingName=myThing78))\nGateway Creation Date: 2024-09-18T20:34:13.117Z\n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\n10. Delete the AWS IoT SiteWise Assets\nBefore you can delete the Asset Model, you must delete the assets.\n\n\nWould you like to delete the IoT Sitewise Assets? (y/n)\ny\nYou selected to delete the Sitewise assets.\n\nEnter 'c' followed by <ENTER> to continue:\nc\nContinuing with the program...\n\nPortal 63e65729-b7a1-410a-aa36-94145fe92153 was deleted successfully.\nAn unexpected error occurred: Cannot invoke \"java.util.concurrent.CompletableFuture.join()\" because \"future\" is null\nAsset deleted successfully.\nLets wait 1 min for the asset to be deleted\n01:00The Gateway was deleted successfully\n00:00Countdown complete!\n\nEnter 'c' followed by <ENTER> to continue:\nc\nContinuing with the program...\n\nDelete the AWS IoT SiteWise Asset Model\nAsset model deleted successfully.\n\nEnter 'c' followed by <ENTER> to continue:\nc\nContinuing with the program...\n\n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\nDelete stack requested ....\nStack deleted successfully.\nThis concludes the AWS SiteWise Scenario\n--------------------------------------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Creating S3Service Class for Amazon S3 Operations in Java\nDESCRIPTION: The S3Service class provides methods for interacting with Amazon S3, including retrieving object bytes and listing bucket objects. It uses the AWS SDK for Java to perform S3 operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_lambda_ppe/README.md#2025-04-09_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\npackage com.example.ppe;\n\nimport software.amazon.awssdk.core.ResponseBytes;\nimport software.amazon.awssdk.regions.Region;\nimport software.amazon.awssdk.services.s3.S3Client;\nimport software.amazon.awssdk.services.s3.model.GetObjectRequest;\nimport software.amazon.awssdk.services.s3.model.GetObjectResponse;\nimport software.amazon.awssdk.services.s3.model.S3Exception;\nimport software.amazon.awssdk.services.s3.model.ListObjectsResponse;\nimport software.amazon.awssdk.services.s3.model.S3Object;\nimport software.amazon.awssdk.services.s3.model.ListObjectsRequest;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class S3Service {\n\nprivate S3Client getClient() {\n\n    Region region = Region.US_WEST_2;\n    return S3Client.builder()\n            .region(region)\n            .build();\n}\n\npublic byte[] getObjectBytes(String bucketName, String keyName) {\n\n    S3Client s3 = getClient();\n\n    try {\n\n        GetObjectRequest objectRequest = GetObjectRequest\n                .builder()\n                .key(keyName)\n                .bucket(bucketName)\n                .build();\n\n        // Return the byte[] from this object.\n        ResponseBytes<GetObjectResponse> objectBytes = s3.getObjectAsBytes(objectRequest);\n        return objectBytes.asByteArray();\n\n    } catch (S3Exception e) {\n        System.err.println(e.awsErrorDetails().errorMessage());\n        System.exit(1);\n    }\n    return null;\n}\n\n// Returns the names of all images in the given bucket.\npublic List<String> listBucketObjects(String bucketName) {\n\n    S3Client s3 = getClient();\n    String keyName;\n\n    List<String> keys = new ArrayList<>();\n\n    try {\n        ListObjectsRequest listObjects = ListObjectsRequest\n                .builder()\n                .bucket(bucketName)\n                .build();\n\n        ListObjectsResponse res = s3.listObjects(listObjects);\n        List<S3Object> objects = res.contents();\n\n        for (S3Object myValue: objects) {\n            keyName = myValue.key();\n            keys.add(keyName);\n        }\n        return keys;\n\n    } catch (S3Exception e) {\n        System.err.println(e.awsErrorDetails().errorMessage());\n        System.exit(1);\n    }\n    return null;\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Completing Multipart Upload in S3 using C++\nDESCRIPTION: This code snippet demonstrates how to complete a multipart upload in Amazon S3 using the AWS SDK for C++. It's part of the S3 object integrity workflow.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/s3/README.md#2025-04-09_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nCompleteMultipartUpload\n```\n\n----------------------------------------\n\nTITLE: Implementing AnalyzePhotos Service for Image Label Detection in Kotlin\nDESCRIPTION: This class uses the AWS Rekognition client to detect labels in images stored in S3. It processes the image and returns a list of detected labels with their counts.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/creating_pam/README.md#2025-04-09_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.example.photo.services\n\nimport aws.sdk.kotlin.services.rekognition.RekognitionClient\nimport aws.sdk.kotlin.services.rekognition.model.DetectLabelsRequest\nimport aws.sdk.kotlin.services.rekognition.model.Image\nimport aws.sdk.kotlin.services.rekognition.model.S3Object\nimport com.example.photo.LabelCount\n\nclass AnalyzePhotos {\n    suspend fun detectLabels(bucketName: String?, key: String?): ArrayList<LabelCount> {\n        val s3Ob = S3Object {\n            bucket = bucketName\n            name = key\n        }\n\n        val souImage = Image {\n            s3Object = s3Ob\n        }\n\n        val detectLabelsRequest = DetectLabelsRequest {\n            image = souImage\n            maxLabels = 10\n        }\n\n        RekognitionClient { region = \"us-east-1\" }.use { rekClient ->\n            val labelsResponse = rekClient.detectLabels(detectLabelsRequest)\n            val labels = labelsResponse.labels\n            println(\"Detected labels for the given photo\")\n            val list = ArrayList<LabelCount>()\n            var item: LabelCount\n            if (labels != null) {\n                for (label in labels) {\n                    item = LabelCount()\n                    item.setKey(key)\n                    item.setName(label.name)\n                    list.add(item)\n                }\n            }\n            return list\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Knowledge Base Chatbot\nDESCRIPTION: Command to execute the chatbot that uses AWS Bedrock Knowledge Base for answering queries\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/bedrock-runtime/models/anthropic_claude/scenarios/claude3_chatbot_demo/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython with_knowledgebase.py --knowledge_base_id 123456\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for Amazon SES Python Examples\nDESCRIPTION: Installs all the necessary dependencies required to run the Amazon SES Python examples. This command should be executed within a virtual environment to avoid conflicts with other installed packages.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/ses/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Running JUnit Tests for IdentityStore\nDESCRIPTION: Maven command to execute JUnit tests for the IdentityStore service examples. Tests validate the functionality of various identity operations and require configuration in config.properties file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/identitystore/README.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmvn test\n```\n\n----------------------------------------\n\nTITLE: Describing DB Instances with Amazon RDS in C#\nDESCRIPTION: This snippet demonstrates how to describe DB instances using the Amazon RDS API. It's part of the 'Hello Amazon RDS' example, which serves as an introduction to working with RDS.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/RDS/README.md#2025-04-09_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nDescribeDBInstances\n```\n\n----------------------------------------\n\nTITLE: Implementing MainActivity for AWS SNS Operations in Kotlin\nDESCRIPTION: This Kotlin class extends AppCompatActivity and provides methods for interacting with AWS SNS. It includes functionality for listing subscriptions, publishing messages, subscribing and unsubscribing users, and translating messages using AWS Translate. The class uses StaticCredentialsProvider for AWS authentication.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/subpub_app_android/README.md#2025-04-09_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.example.sub\n\nimport androidx.appcompat.app.AppCompatActivity\nimport android.os.Bundle\nimport android.view.View\nimport android.widget.AdapterView\nimport android.widget.ArrayAdapter\nimport android.widget.EditText\nimport android.widget.Spinner\nimport android.widget.Toast\nimport kotlinx.coroutines.runBlocking\nimport aws.sdk.kotlin.runtime.auth.credentials.StaticCredentialsProvider\nimport aws.sdk.kotlin.services.sns.SnsClient\nimport java.util.regex.Pattern\nimport aws.sdk.kotlin.services.sns.model.ListSubscriptionsByTopicRequest\nimport aws.sdk.kotlin.services.sns.model.PublishRequest\nimport aws.sdk.kotlin.services.sns.model.SubscribeRequest\nimport aws.sdk.kotlin.services.sns.model.UnsubscribeRequest\nimport aws.sdk.kotlin.services.translate.TranslateClient\nimport aws.sdk.kotlin.services.translate.model.TranslateTextRequest\n\nclass MainActivity : AppCompatActivity(), AdapterView.OnItemSelectedListener {\n    var topicArnVal = \"<Enter value>\"\n    val items = arrayOf(\"En\", \"Fr\", \"Sp\")\n    var chosenLan: String =\"\"\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        val dropdown =  findViewById<Spinner>(R.id.spinner)\n        dropdown.onItemSelectedListener = this\n        val adapter = ArrayAdapter(this, android.R.layout.simple_spinner_dropdown_item, items)\n        dropdown.adapter = adapter\n    }\n\n    override fun onItemSelected(parent: AdapterView<*>?,\n                                view: View, position: Int,\n                                id: Long) {\n\n        chosenLan = parent?.getItemAtPosition(position).toString()\n        val toast = Toast.makeText(applicationContext, chosenLan, Toast.LENGTH_SHORT)\n        toast.setMargin(50f, 50f)\n        toast.show()\n    }\n\n    override fun onNothingSelected(parent: AdapterView<*>?) {\n    }\n\n    // Get all subscriptions from this topic.\n    fun getSubs(view: View) = runBlocking {\n        val subList = mutableListOf<String>()\n        val request = ListSubscriptionsByTopicRequest {\n            topicArn = topicArnVal\n        }\n\n        val snsClient = getClient()\n        val response = snsClient.listSubscriptionsByTopic(request)\n        response.subscriptions?.forEach { sub ->\n            subList.add(sub.endpoint.toString())\n        }\n\n        val listString = java.lang.String.join(\", \", subList)\n        showToast(listString)\n    }\n\n    // Publish a message.\n    fun pubTopic(view: View) = runBlocking {\n        val snsClient = getClient()\n        val translateClient = getTranslateClient()\n        val bodyMessage: EditText = findViewById(R.id.txtMessage)\n        val body = bodyMessage.text.toString()\n        var translateBody: String\n\n        // Need to translate the message if user selected another language.\n        if (chosenLan == \"Fr\" ) {\n\n            val textRequest = TranslateTextRequest {\n                sourceLanguageCode = \"en\"\n                targetLanguageCode = \"fr\"\n                text = body\n            }\n            val textResponse = translateClient.translateText(textRequest)\n            translateBody = textResponse.translatedText.toString()\n\n        } else if (chosenLan == \"Sp\" ) {\n            val textRequest = TranslateTextRequest {\n                sourceLanguageCode = \"en\"\n                targetLanguageCode = \"es\"\n                text = body\n            }\n\n            val textResponse = translateClient.translateText(textRequest)\n            translateBody = textResponse.translatedText.toString()\n\n        } else\n            translateBody = body\n\n\n        val request = PublishRequest {\n            message = translateBody\n            topicArn = topicArnVal\n        }\n\n        val result = snsClient.publish(request)\n        showToast(\"{$result.messageId.toString()} published!\")\n    }\n\n    // Remove a subscription based on an email.\n    fun unSubUser(view: View) = runBlocking {\n        val snsClient = getClient()\n        val emailVal: EditText = findViewById(R.id.txtEmail)\n        val emailStr = emailVal.text.toString()\n        val isValidEmail = checkEmail(emailStr)\n\n        // Make sure that the email is valid.\n        if (!isValidEmail) {\n            showToast(\"Email not valid\")\n        } else {\n            var subArn = \"\"\n            val listRequest = ListSubscriptionsByTopicRequest {\n                topicArn = topicArnVal\n            }\n            val response = snsClient.listSubscriptionsByTopic(listRequest)\n            response.subscriptions?.forEach { sub ->\n                if (sub.endpoint?.compareTo(emailStr) == 0) {\n                    subArn = sub.subscriptionArn.toString()\n                }\n            }\n\n            val request = UnsubscribeRequest {\n                subscriptionArn = subArn\n            }\n            snsClient.unsubscribe(request)\n            showToast(\"$emailStr was unsubscribed\")\n        }\n    }\n\n    // Create a new subscription.\n    fun subUser(view: View) = runBlocking{\n        val snsClient = getClient()\n        val emailVal: EditText =  findViewById(R.id.txtEmail)\n        val emailStr = emailVal.text.toString()\n        val isValidEmail = checkEmail(emailStr)\n\n        // Make sure that the email is valid.\n        if (!isValidEmail) {\n            showToast(\"Email not valid\")\n        }\n        else {\n            val request = SubscribeRequest {\n                protocol = \"email\"\n                endpoint = emailStr\n                returnSubscriptionArn = true\n                topicArn = topicArnVal\n            }\n\n            val result = snsClient.subscribe(request)\n            showToast(result.subscriptionArn.toString())\n        }\n    }\n\n    // Returns the Sub Amazon Resource Name (ARN) based on the given endpoint used for unSub.\n    suspend fun getTopicArnValue(snsClient: SnsClient, endpoint: String): String? {\n        var subArn: String\n        val request = ListSubscriptionsByTopicRequest {\n            topicArn = topicArnVal\n        }\n\n        val response = snsClient.listSubscriptionsByTopic(request)\n        response.subscriptions?.forEach { sub ->\n            if (sub.endpoint?.compareTo(endpoint) ==0 ) {\n                subArn = sub.subscriptionArn.toString()\n                return subArn\n            }\n        }\n        return \"\"\n    }\n\n    fun getClient() : SnsClient{\n        val snsClient = SnsClient{\n            region = \"us-west-2\"\n            credentialsProvider = getStatic()\n        }\n        return snsClient\n    }\n\n    fun getTranslateClient() : TranslateClient{\n        val translateClient = TranslateClient{\n            region = \"us-west-2\"\n            credentialsProvider = getStatic()\n        }\n        return translateClient\n    }\n\n    fun showToast(value:String){\n        val toast = Toast.makeText(applicationContext, value, Toast.LENGTH_SHORT)\n        toast.show()\n    }\n\n    fun checkEmail(email: String?): Boolean {\n        return EMAIL_ADDRESS_PATTERN.matcher(email).matches()\n    }\n\n    val EMAIL_ADDRESS_PATTERN: Pattern = Pattern.compile(\n        \"[a-zA-Z0-9\\\\+\\\\.\\\\_\\\\%\\\\-\\\\+]{1,256}\" +\n                \"\\\\@\" +\n                \"[a-zA-Z0-9][a-zA-Z0-9\\\\-]{0,64}\" +\n                \"(\" +\n                \"\\\\.\" +\n                \"[a-zA-Z0-9][a-zA-Z0-9\\\\-]{0,25}\" +\n                \")+\"\n    )\n\n    fun getStatic() : StaticCredentialsProvider{\n        val staticCredentials = StaticCredentialsProvider {\n            accessKeyId = \"<Enter value>\"\n            secretAccessKey = \"<Enter value>\"\n        }\n        return staticCredentials\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ECS Cluster with Kotlin SDK\nDESCRIPTION: Example demonstrating how to create a cluster in Amazon ECS using the AWS SDK for Kotlin. This allows setting up a new cluster for running containerized applications.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/ecs/README.md#2025-04-09_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Running Amazon Redshift Hello Example\nDESCRIPTION: Command to execute the Hello Amazon Redshift example that demonstrates basic cluster operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/gov2/redshift/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo run ./hello\n```\n\n----------------------------------------\n\nTITLE: Creating Amazon EC2 Instance in Go\nDESCRIPTION: This example creates an Amazon EC2 instance with a tag. It requires the tag name and value as command-line arguments.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/ec2/README.md#2025-04-09_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\ngo run CreateInstance -n NAME -v VALUE\n```\n\n----------------------------------------\n\nTITLE: PostToConnection with API Gateway Management API in Rust\nDESCRIPTION: Code excerpt that demonstrates how to call the PostToConnection API function. This allows sending a message to a connected WebSocket client identified by a connection ID.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/apigatewaymanagement/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nsrc/bin/post_to_connection.rs#L45\n```\n\n----------------------------------------\n\nTITLE: Converting XML Document to String in Java\nDESCRIPTION: Converts a Document object to a String using a secure transformer. The method creates a transformer with secure processing enabled to prevent XML external entity (XXE) attacks.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_photo_analyzer_async/README.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nprivate String convertToString(Document xml) {\n    try {\n        TransformerFactory transformerFactory = getSecureTransformerFactory();\n        Transformer transformer = transformerFactory.newTransformer();\n        StreamResult result = new StreamResult(new StringWriter());\n        DOMSource source = new DOMSource(xml);\n        transformer.transform(source, result);\n        return result.getWriter().toString();\n\n    } catch(TransformerException ex) {\n        ex.printStackTrace();\n    }\n    return null;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating EC2 Security Group in .NET\nDESCRIPTION: This code snippet shows how to create an EC2 security group using the AWS SDK for .NET. It's part of the EC2Wrapper class that encapsulates various EC2 operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv4/EC2/README.md#2025-04-09_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nCreateSecurityGroup\n```\n\n----------------------------------------\n\nTITLE: Uploading a Stream of Unknown Size to Amazon S3 using AWS SDK for Swift\nDESCRIPTION: This code example shows how to upload a stream of unknown size to an Amazon S3 object using the AWS SDK for Swift.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/swift/example_code/s3/README.md#2025-04-09_snippet_11\n\nLANGUAGE: Swift\nCODE:\n```\nbinary-streaming/Sources/streamup/streamup.swift\n```\n\n----------------------------------------\n\nTITLE: Listing Keyspaces in Amazon Keyspaces using C#\nDESCRIPTION: This code snippet shows how to list all keyspaces in Amazon Keyspaces using the AWS SDK for .NET. It's an example of a single action operation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Keyspaces/README.md#2025-04-09_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nActions/KeyspacesWrapper.cs#L125\n```\n\n----------------------------------------\n\nTITLE: Creating a MediaConvert Job in Java\nDESCRIPTION: This code snippet demonstrates how to create a job in AWS Elemental MediaConvert using the AWS SDK for Java 2.x. The CreateJob action is used to submit a new transcoding job.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/mediaconvert/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nsrc/main/java/com/example/mediaconvert/CreateJob.java#L4\n```\n\n----------------------------------------\n\nTITLE: Enabling CloudWatch Alarm Actions in C#\nDESCRIPTION: Method for enabling actions for CloudWatch alarms. This is implemented in the CloudWatchWrapper class.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/CloudWatch/README.md#2025-04-09_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nEnableAlarmActions\n```\n\n----------------------------------------\n\nTITLE: Getting Secret Values from AWS Secrets Manager using Kotlin SDK\nDESCRIPTION: Demonstrates how to retrieve a secret value from AWS Secrets Manager using the Kotlin SDK. The function takes a secret name as input and returns the secret value. It handles API errors with appropriate exception handling.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/secrets-manager/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nGetSecretValue\n```\n\n----------------------------------------\n\nTITLE: Listing Lambda Functions in JavaScript\nDESCRIPTION: This code excerpt demonstrates how to list Lambda functions using the AWS SDK for JavaScript (v3). It's part of the single actions examples for Lambda operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/lambda/README.md#2025-04-09_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nactions/list-functions.js#L5\n```\n\n----------------------------------------\n\nTITLE: Configuring Lambda Assume Role Policy for AWS SageMaker Pipeline\nDESCRIPTION: JSON policy document that allows Lambda service to assume a role. This policy is required for creating the IAM role that will be used by Lambda functions in the SageMaker pipeline.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/sagemaker_pipelines/SPECIFICATION.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   Version: \"2012-10-17\",\n   Statement: [\n      {\n         Effect: \"Allow\",\n      Action: [\"sts:AssumeRole\"],\n      Principal: { Service: [\"lambda.amazonaws.com\"] },\n      },\n   ],\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Welcome Message and Bucket Setup Example in S3 Conditional Requests Scenario\nDESCRIPTION: Shows the welcome output and initial setup of buckets in the S3 conditional requests scenario. This includes creating source and destination buckets with a user-provided prefix and uploading a test file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/s3_conditional_requests/SPECIFICATION.md#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n----------------------------------------------------------------------------------------\nWelcome to the Amazon S3 conditional requests example.\n----------------------------------------------------------------------------------------\nThis example demonstrates the use of conditional requests for S3 operations.\nYou can use conditional requests to add preconditions to S3 read requests to return or copy\nan object based on its Entity tag (ETag), or last modified date. \nYou can use a conditional write requests to prevent overwrites by ensuring \nthere is no existing object with the same key. \n\nThis example will allow you to perform conditional reads\nand writes that will succeed or fail based on your selected options.\n\nSample buckets and a sample object will be created as part of the example.\n        \nEnter a bucket name prefix: test555\nCreated source bucket: test555-source-279 and destination bucket: test555-dest-279\nUploading file test-upload-file.txt to bucket test555-source-279\n```\n\n----------------------------------------\n\nTITLE: Listing Rules in EventBridge using AWS SDK for .NET\nDESCRIPTION: Method to list all EventBridge rules or rules with a specific prefix. Returns information about the rules configured in your account.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/EventBridge/README.md#2025-04-09_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nListRules\n```\n\n----------------------------------------\n\nTITLE: Updating ECS Service with Kotlin SDK\nDESCRIPTION: Example showing how to update task placement strategies and constraints for an existing ECS service using the AWS SDK for Kotlin. This allows modifying how tasks are placed and distributed across the cluster.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/ecs/README.md#2025-04-09_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for AWS EFS Examples in C++\nDESCRIPTION: This CMake script sets up a build environment for C++ examples using the AWS SDK's Elastic File System service. It defines project settings, requires C++11 standard, locates the AWS SDK, and creates executable targets for various EFS operations including creating file systems, creating mount targets, deleting file systems, and updating file systems.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/efs/CMakeLists.txt#2025-04-09_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nproject(efs-examples)\nset (CMAKE_CXX_STANDARD 11)\n\n# Locate the aws sdk for c++ package.\nfind_package(AWSSDK REQUIRED COMPONENTS elasticfilesystem)\n\nset(EXAMPLES \"\")\nlist(APPEND EXAMPLES \"create_file_system\")\nlist(APPEND EXAMPLES \"create_mount_target\")\nlist(APPEND EXAMPLES \"delete_file_system\")\nlist(APPEND EXAMPLES \"update_file_system\")\n\n\n# The executables to build.\nforeach(EXAMPLE IN LISTS EXAMPLES)\n  add_executable(${EXAMPLE} ${EXAMPLE}.cpp)\n  target_link_libraries(${EXAMPLE} ${AWSSDK_LINK_LIBRARIES})\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Signing Up User in Amazon Cognito Identity Provider with C#\nDESCRIPTION: This code snippet shows how to sign up a user in Amazon Cognito Identity Provider using C#. It's implemented in the CognitoWrapper class and utilizes the SignUpAsync method.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Cognito/README.md#2025-04-09_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nSignUp(Actions/CognitoWrapper.cs#L311)\n```\n\n----------------------------------------\n\nTITLE: Deleting an Email Template with Amazon SES v2 API in C#\nDESCRIPTION: This code illustrates how to delete an email template using the Amazon SES v2 API. It's part of the SESv2Wrapper class and requires the AmazonSimpleEmailServiceV2Client.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/SESv2/README.md#2025-04-09_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\npublic async Task<bool> DeleteEmailTemplate(string templateName)\n{\n    var deleteEmailTemplateRequest = new DeleteEmailTemplateRequest\n    {\n        TemplateName = templateName\n    };\n\n    try\n    {\n        var response = await _sesv2Client.DeleteEmailTemplateAsync(deleteEmailTemplateRequest);\n        Console.WriteLine($\"EmailTemplateDeleted: {response.HttpStatusCode == System.Net.HttpStatusCode.OK}\");\n        return response.HttpStatusCode == System.Net.HttpStatusCode.OK;\n    }\n    catch (NotFoundException)\n    {\n        Console.WriteLine($\"Email template {templateName} not found\");\n        return true;\n    }\n    catch (Exception ex)\n    {\n        Console.WriteLine($\"DeleteEmailTemplate failed: {ex.Message}\");\n        return false;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Aurora DB Cluster Parameter Group in C++\nDESCRIPTION: This snippet shows how to create a DB cluster parameter group for Amazon Aurora using the AWS SDK for C++. It sets up the request and calls the CreateDBClusterParameterGroup API.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/aurora/README.md#2025-04-09_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nAws::RDS::Model::CreateDBClusterParameterGroupRequest request;\nrequest.SetDBClusterParameterGroupName(parameterGroupName);\nrequest.SetDBParameterGroupFamily(dbParameterGroupFamily);\nrequest.SetDescription(\"Example cluster parameter group\");\n\nAws::RDS::Model::CreateDBClusterParameterGroupOutcome outcome =\n    client.CreateDBClusterParameterGroup(request);\n\nif (outcome.IsSuccess()) {\n    std::cout << \"The DB cluster parameter group was successfully created.\"\n              << std::endl;\n    clusterParameterGroup = outcome.GetResult().GetDBClusterParameterGroup();\n}\nelse {\n    std::cerr << \"Error with Aurora::CreateDBClusterParameterGroup. \"\n              << outcome.GetError().GetMessage()\n              << std::endl;\n    return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Running a Single Action in Node.js\nDESCRIPTION: This snippet demonstrates how to run a single action from the examples. It uses Node.js to execute a specific file from the actions directory.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/mediaconvert/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode ./actions/<fileName>\n```\n\n----------------------------------------\n\nTITLE: Setting Up CMake Project for AWS Aurora Service Tests\nDESCRIPTION: Configures the CMake project with minimum required version, project name, and C++ standard. Sets up environment variables for the Aurora service with RDS dependencies and configures build settings.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/aurora/tests/CMakeLists.txt#2025-04-09_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Set the minimum required version of CMake for this project.\ncmake_minimum_required(VERSION 3.14)\n\nset(EXAMPLE_SERVICE_NAME \"aurora\")\nset(CURRENT_TARGET \"${EXAMPLE_SERVICE_NAME}_gtest\")\nset(CURRENT_TARGET_AWS_DEPENDENCIES rds)\n\n# Set this project's name.\nproject(\"${EXAMPLE_SERVICE_NAME}-examples-gtests\")\n\n# Set the C++ standard to use to build this target.\nset(CMAKE_CXX_STANDARD 14)\n\n# Build shared libraries by default.\nset(BUILD_SHARED_LIBS ON)\n```\n\n----------------------------------------\n\nTITLE: Defining Android UI Layout with ConstraintLayout in XML\nDESCRIPTION: This XML code defines the user interface for an Android application using ConstraintLayout. It includes text fields for email and message input, buttons for subscription actions and publishing, and a spinner for selection.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/subpub_app_android/README.md#2025-04-09_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".MainActivity\">\n\n    <TextView\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Enter an email address\"\n        android:textSize=\"16sp\"\n        android:textStyle=\"bold\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintLeft_toLeftOf=\"parent\"\n        app:layout_constraintRight_toRightOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\"\n        app:layout_constraintVertical_bias=\"0.053\" />\n\n    <EditText\n        android:id=\"@+id/txtEmail\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"100dp\"\n        android:layout_marginEnd=\"96dp\"\n        android:ems=\"10\"\n        android:inputType=\"textEmailAddress\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\" />\n\n    <Button\n        android:id=\"@+id/btnSub\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"32dp\"\n        android:layout_marginEnd=\"184dp\"\n        android:onClick=\"subUser\"\n        android:text=\"Subscribe\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintTop_toBottomOf=\"@+id/txtEmail\" />\n\n    <Button\n        android:id=\"@+id/btnUnSub\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"16dp\"\n        android:layout_marginEnd=\"160dp\"\n        android:onClick=\"unSubUser\"\n        android:text=\"Unsubscribe\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintTop_toBottomOf=\"@+id/btnSub\" />\n\n\n    <Button\n        android:id=\"@+id/btnList\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"12dp\"\n        android:layout_marginEnd=\"100dp\"\n        android:onClick=\"getSubs\"\n        android:text=\"List subscriptions\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintTop_toBottomOf=\"@+id/btnUnSub\" />\n\n    <Button\n        android:id=\"@+id/btnPublish\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginEnd=\"204dp\"\n        android:onClick=\"pubTopic\"\n        android:text=\"Publish\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintTop_toBottomOf=\"@+id/btnList\" />\n\n    <EditText\n        android:id=\"@+id/txtMessage\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"36dp\"\n        android:layout_marginEnd=\"120dp\"\n        android:ems=\"10\"\n        android:gravity=\"start|top\"\n        android:inputType=\"textMultiLine\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintTop_toBottomOf=\"@+id/textView\" />\n\n    <TextView\n        android:id=\"@+id/textView\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"48dp\"\n        android:layout_marginEnd=\"160dp\"\n        android:text=\"Enter a Message\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintTop_toBottomOf=\"@+id/spinner\" />\n\n\n    <Spinner\n        android:id=\"@+id/spinner\"\n        android:layout_width=\"409dp\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"44dp\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toBottomOf=\"@+id/btnList\" />\n\n</androidx.constraintlayout.widget.ConstraintLayout>\n```\n\n----------------------------------------\n\nTITLE: Listing DynamoDB Tables in Ruby\nDESCRIPTION: This code snippet demonstrates how to list DynamoDB tables using the AWS SDK for Ruby. It uses the ListTables operation to retrieve a list of table names in the DynamoDB service.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/ruby/example_code/dynamodb/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\n# Hello DynamoDB\nrequire \"aws-sdk-dynamodb\"\n\nDynamodb::Client.new.list_tables.table_names.each do |t|\n  puts \"Table name is #{t}\"\nend\n```\n\n----------------------------------------\n\nTITLE: Describing SageMaker Training Job using AWS SDK for SAP ABAP\nDESCRIPTION: This code snippet demonstrates how to describe a SageMaker training job using the AWS SDK for SAP ABAP. It references a method in the zcl_aws1_sgm_actions class.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/sap-abap/services/sagemaker/README.md#2025-04-09_snippet_6\n\nLANGUAGE: ABAP\nCODE:\n```\nzcl_aws1_sgm_actions.clas.abap#L454\n```\n\n----------------------------------------\n\nTITLE: Creating Multipart Upload in S3 using C++\nDESCRIPTION: This code snippet shows how to create a multipart upload in Amazon S3 using the AWS SDK for C++. It's part of the S3 object integrity workflow.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/s3/README.md#2025-04-09_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\nCreateMultipartUpload\n```\n\n----------------------------------------\n\nTITLE: Listing Tags for S3 Glacier Vault\nDESCRIPTION: Retrieves all tags associated with a vault using the ListTagsForVault API\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Glacier/README.md#2025-04-09_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nListTagsForVault\n```\n\n----------------------------------------\n\nTITLE: Example Cluster Endpoints JSON Configuration\nDESCRIPTION: Example JSON structure containing cluster endpoints for different AWS regions, which is required to interact with Route 53 ARC. The Region within the endpoint must match the Region provided with that endpoint.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/route53-recovery-cluster/README.md#2025-04-09_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\"ClusterEndpoints\": \n    [{\"Endpoint\": \"https://11111111.route53-recovery-cluster.us-east-1.amazonaws.com/v1\", \n      \"Region\": \"us-east-1\"}, \n     {\"Endpoint\": \"https://22222222.route53-recovery-cluster.ap-northeast-1.amazonaws.com/v1\",\n      \"Region\": \"ap-northeast-1\"},\n     {\"Endpoint\": \"https://33333333.route53-recovery-cluster.ap-southeast-2.amazonaws.com/v1\",\n      \"Region\": \"ap-southeast-2\"},\n     {\"Endpoint\": \"https://44444444.route53-recovery-cluster.us-west-2.amazonaws.com/v1\",\n      \"Region\": \"us-west-2\"},\n     {\"Endpoint\": \"https://55555555.route53-recovery-cluster.eu-west-1.amazonaws.com/v1\",\n      \"Region\": \"eu-west-1\"}]}\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for AWS Lambda C++ Examples\nDESCRIPTION: This CMake configuration sets up the build environment for AWS Lambda examples using the AWS SDK for C++. It handles platform-specific requirements (especially for Windows), finds necessary AWS SDK components, configures linking, and builds executables for each example source file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/lambda/CMakeLists.txt#2025-04-09_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Set the minimum required version of CMake for this project.\ncmake_minimum_required(VERSION 3.13)\n\nset(SERVICE_NAME lambda)\nset(SERVICE_COMPONENTS lambda iam)\n\n# Set this project's name.\nproject(\"${SERVICE_NAME}-examples\")\n\n# Use the MSVC variable to determine if this is a Windows build.\nset(WINDOWS_BUILD ${MSVC})\n\n# Set the location for Windows to find the installed libraries of the SDK.\nif (WINDOWS_BUILD)\n    string(REPLACE \";\" \"/aws-cpp-sdk-all;\" SYSTEM_MODULE_PATH \"${CMAKE_SYSTEM_PREFIX_PATH}/aws-cpp-sdk-all\")\n    list(APPEND CMAKE_PREFIX_PATH ${SYSTEM_MODULE_PATH})\nendif ()\n\n# Set the C++ standard to use to build this target.\nset(CMAKE_CXX_STANDARD 11)\n\n# Build shared libraries by default.\nset(BUILD_SHARED_LIBS ON)\n\n# Find the AWS SDK for C++ package.\nfind_package(AWSSDK REQUIRED COMPONENTS ${SERVICE_COMPONENTS})\n\nif (WINDOWS_BUILD AND AWSSDK_INSTALL_AS_SHARED_LIBS)\n    # Copy relevant AWS SDK for C++ libraries into the current binary directory for running and debugging.\n\n    # set(BIN_SUB_DIR \"/Debug\") # If you are building from the command line, you may need to uncomment this\n    # and set the proper subdirectory to the executables' location.\n\n    AWSSDK_CPY_DYN_LIBS(SERVICE_COMPONENTS \"\" ${CMAKE_CURRENT_BINARY_DIR}${BIN_SUB_DIR})\nendif ()\n\n# AWSDOC_SOURCE can be defined in the command line to limit the files in a build. For example,\n# you can limit files to one action.\nif(NOT DEFINED AWSDOC_SOURCE)\n    file(GLOB AWSDOC_SOURCE\n        \"*.cpp\"\n    )\nendif()\n\nforeach(file ${AWSDOC_SOURCE})\n    get_filename_component(EXAMPLE ${file} NAME_WE)\n\n    # Build the code example executables.\n    set(EXAMPLE_EXE run_${EXAMPLE})\n\n    add_executable(${EXAMPLE_EXE} ${file})\n\n    target_link_libraries(${EXAMPLE_EXE} ${AWSSDK_LINK_LIBRARIES}\n            ${AWSSDK_PLATFORM_DEPS})\n\n    target_compile_definitions(${EXAMPLE_EXE}\n            PRIVATE\n            SOURCE_DIR=\"${CMAKE_CURRENT_SOURCE_DIR}\"\n    )\n\nendforeach()\n\n\nif(BUILD_TESTS)\n    add_subdirectory(tests)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Deleting an EC2 Security Group\nDESCRIPTION: Demonstrates how to delete a security group when it's no longer needed. Security groups can only be deleted if they are not associated with any resources.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/EC2/README.md#2025-04-09_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\n// DeleteSecurityGroup\n```\n\n----------------------------------------\n\nTITLE: Allocating Elastic IP Address in EC2 using .NET\nDESCRIPTION: This code snippet shows how to allocate an Elastic IP address in Amazon EC2 using the AWS SDK for .NET. It's part of the EC2Wrapper class that encapsulates various EC2 operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv4/EC2/README.md#2025-04-09_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nAllocateAddress\n```\n\n----------------------------------------\n\nTITLE: Deleting an Amazon Redshift Cluster in Java\nDESCRIPTION: This code excerpt illustrates how to delete an Amazon Redshift cluster using the AWS SDK for Java 2.x. It uses the DeleteCluster operation to remove an existing Redshift cluster.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/redshift/README.md#2025-04-09_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nRedshiftActions.java#L481\n```\n\n----------------------------------------\n\nTITLE: Configuring Long Polling for Amazon SQS Queue using Go\nDESCRIPTION: This example shows how to configure an Amazon SQS queue for long polling. It accepts queue name and wait time as command-line arguments, with wait time defaulting to 10 seconds if not specified.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/sqs/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\ngo run ConfigureLPQueue.go -q QUEUE [-d WAIT-TIME]\n```\n\n----------------------------------------\n\nTITLE: Invoking Lambda Function in Kotlin\nDESCRIPTION: Illustrates how to invoke a Lambda function using the AWS SDK for Kotlin. This snippet is part of the Invoke action.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/lambda/README.md#2025-04-09_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\nsrc/main/kotlin/com/kotlin/lambda/LambdaInvoke.kt#L39\n```\n\n----------------------------------------\n\nTITLE: Run AWS Step Functions Usage Demo\nDESCRIPTION: Command to run the usage demonstration with the demo flag.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/cross_service/stepfunctions_messenger/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython stepfunctions_demo.py demo\n```\n\n----------------------------------------\n\nTITLE: Building Hello Aurora C++ Project with CMake\nDESCRIPTION: Commands to build the Hello Aurora project using CMake. This creates a build directory, changes to it, and then builds the project using CMake.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/aurora/hello_aurora/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmkdir build \ncd build\ncmake --build ..\n```\n\n----------------------------------------\n\nTITLE: Deleting AWS Glue Resources in Rust\nDESCRIPTION: These code snippets show how to delete various AWS Glue resources using the AWS SDK for Rust. They include operations for deleting crawlers, databases, jobs, and tables.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/glue/README.md#2025-04-09_snippet_3\n\nLANGUAGE: Rust\nCODE:\n```\n- [DeleteCrawler](src/cleanup.rs#L82)\n- [DeleteDatabase](src/cleanup.rs#L73)\n- [DeleteJob](src/cleanup.rs#L15)\n- [DeleteTable](src/cleanup.rs#L23)\n```\n\n----------------------------------------\n\nTITLE: Updating Lambda Function Configuration with SAP ABAP\nDESCRIPTION: This code excerpt demonstrates how to update the configuration of a Lambda function using the AWS SDK for SAP ABAP. It's included in a set of Lambda function management actions.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/sap-abap/services/lambda/README.md#2025-04-09_snippet_7\n\nLANGUAGE: ABAP\nCODE:\n```\nzcl_aws1_lmd_actions.clas.abap#L250\n```\n\n----------------------------------------\n\nTITLE: Publishing CloudWatch Metric Data in C++\nDESCRIPTION: This code example demonstrates how to publish metric data to CloudWatch using the AWS SDK for C++. It requires the necessary permissions to send metric data to CloudWatch.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/cloudwatch/README.md#2025-04-09_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\nput_metric_data.cpp#L14\n```\n\n----------------------------------------\n\nTITLE: Deleting EC2 Key Pair in .NET\nDESCRIPTION: This code snippet demonstrates how to delete an EC2 key pair using the AWS SDK for .NET. It's part of the EC2Wrapper class that provides various EC2 functionalities.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv4/EC2/README.md#2025-04-09_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nDeleteKeyPair\n```\n\n----------------------------------------\n\nTITLE: Deploying Prerequisite Resources for API Gateway Example\nDESCRIPTION: Command to deploy the CloudFormation stack defined in setup.yaml that creates necessary resources including a DynamoDB table and IAM role for the API Gateway integration example.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/api-gateway/aws_service/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython aws_service.py deploy\n```\n\n----------------------------------------\n\nTITLE: Retrieving Secret Value using GetSecretValue in Rust\nDESCRIPTION: This code snippet demonstrates how to retrieve a secret value from AWS Secrets Manager using the GetSecretValue action. It is part of a larger example file located at src/bin/get-secret-value.rs.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/secretsmanager/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nsrc/bin/get-secret-value.rs#L26\n```\n\n----------------------------------------\n\nTITLE: Listing Kinesis Streams using AWS SDK for .NET\nDESCRIPTION: This code snippet illustrates how to list Amazon Kinesis streams using the AWS SDK for .NET. It references the ListStreams method in the ListStreams.cs file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Kinesis/README.md#2025-04-09_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nListStreams(ListStreamsExample/ListStreamsExample/ListStreams.cs#L6)\n```\n\n----------------------------------------\n\nTITLE: DynamoDB Enhanced Client Bean Definition in Java\nDESCRIPTION: This class defines the Employee bean for use with DynamoDB enhanced client. It maps Java class properties to DynamoDB table attributes using annotations like @DynamoDbBean, @DynamoDbPartitionKey, and @DynamoDbSortKey.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_scheduled_events/README.md#2025-04-09_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\n package com.aws.example;\n\n import software.amazon.awssdk.enhanced.dynamodb.mapper.annotations.DynamoDbBean;\n import software.amazon.awssdk.enhanced.dynamodb.mapper.annotations.DynamoDbPartitionKey;\n import software.amazon.awssdk.enhanced.dynamodb.mapper.annotations.DynamoDbSortKey;\n\n@DynamoDbBean\npublic class Employee {\n\n private String Id;\n private String first;\n private String phone;\n private String startDate;\n\n public void setId(String id) {\n    this.Id = id;\n }\n\n @DynamoDbPartitionKey\n public String getId() {\n    return this.Id;\n }\n\n public void setStartDate(String startDate) {\n    this.startDate = startDate;\n }\n\n @DynamoDbSortKey\n public String getStartDate() {\n    return this.startDate;\n }\n\n public void setPhone(String phone) {\n    this.phone = phone;\n }\n\npublic String getPhone() {\n    return this.phone;\n }\n\n public void setFirst(String first) {\n    this.first = first;\n }\n\n public String getFirst() {\n    return this.first;\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Routing Control State with Route53RecoveryClusterClient in Java\nDESCRIPTION: Demonstrates how to set the state of the routing control to reroute traffic using the Route53RecoveryClusterClient in Java. This operation allows for traffic management in the Amazon Route 53 Application Recovery Controller.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/route53recoverycluster/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nUpdateRoutingControlState\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for AWS Aurora C++ Project\nDESCRIPTION: Sets up a CMake build configuration for an AWS Aurora example project using the AWS SDK for C++. Handles platform-specific settings, manages AWS SDK dependencies, and configures the build environment with required components and libraries.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/aurora/hello_aurora/CMakeLists.txt#2025-04-09_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# Set the minimum required version of CMake for this project.\ncmake_minimum_required(VERSION 3.13)\n\n# Set the AWS service components used by this project.\nset(SERVICE_COMPONENTS rds)\n\n# Set this project's name.\nproject(\"hello_aurora\")\n\n# Set the C++ standard to use to build this target.\n# At least C++ 11 is required for the AWS SDK for C++.\nset(CMAKE_CXX_STANDARD 11)\n\n# Use the MSVC variable to determine if this is a Windows build.\nset(WINDOWS_BUILD ${MSVC})\n\nif (WINDOWS_BUILD) # Set the location where CMake can find the installed libraries for the AWS SDK.\n    string(REPLACE \";\" \"/aws-cpp-sdk-all;\" SYSTEM_MODULE_PATH \"${CMAKE_SYSTEM_PREFIX_PATH}/aws-cpp-sdk-all\")\n    list(APPEND CMAKE_PREFIX_PATH ${SYSTEM_MODULE_PATH})\nendif ()\n\n# Find the AWS SDK for C++ package.\nfind_package(AWSSDK REQUIRED COMPONENTS ${SERVICE_COMPONENTS})\n\nif (WINDOWS_BUILD AND AWSSDK_INSTALL_AS_SHARED_LIBS)\n     # Copy relevant AWS SDK for C++ libraries into the current binary directory for running and debugging.\n\n     # set(BIN_SUB_DIR \"/Debug\") # If you are building from the command line, you may need to uncomment this \n                                    # and set the proper subdirectory to the executables' location.\n\n     AWSSDK_CPY_DYN_LIBS(SERVICE_COMPONENTS \"\" ${CMAKE_CURRENT_BINARY_DIR}${BIN_SUB_DIR})\nendif ()\n\nadd_executable(${PROJECT_NAME}\n        hello_aurora.cpp)\n\ntarget_link_libraries(${PROJECT_NAME}\n        ${AWSSDK_LINK_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: Creating a MediaConvert Job in Kotlin\nDESCRIPTION: This code snippet demonstrates how to create a job in AWS Elemental MediaConvert using the AWS SDK for Kotlin. The CreateJob operation is used to submit a new transcoding job.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/mediaconvert/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nCreateJob(src/main/kotlin/com/kotlin/mediaconvert/CreateJob.kt#L137)\n```\n\n----------------------------------------\n\nTITLE: Running a Scenario Example in JavaScript\nDESCRIPTION: This snippet shows how to run a scenario example using Node.js. It executes a specific file in the 'scenarios' directory.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/sfn/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnode ./scenarios/<fileName>\n```\n\n----------------------------------------\n\nTITLE: Instructions for Running Examples\nDESCRIPTION: Simple command line instructions explaining how to execute the single action examples in the repository.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/ruby/example_code/polly/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\nThe quickest way to interact with this example code is to invoke a [Single Action](#single-actions) from your command line. For example, `ruby some_example.rb` will invoke `some_example.rb`.\n```\n\n----------------------------------------\n\nTITLE: Implementing WorkItem Data Structure\nDESCRIPTION: A Java class that defines a data structure for work items, containing key, name, and confidence properties. Includes standard getter and setter methods for each property.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_photo_analyzer_app/README.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.photo;\n\npublic class WorkItem {\n\n private String key;\n private String name;\n private String confidence ;\n\n public void setKey (String key) {\n    this.key = key;\n }\n\n public String getKey() {\n    return this.key;\n }\n\n public void setName (String name) {\n    this.name = name;\n }\n\n public String getName() {\n    return this.name;\n }\n\n public void setConfidence (String confidence) {\n    this.confidence = confidence;\n }\n\n public String getConfidence() {\n    return this.confidence;\n  }\n }\n```\n\n----------------------------------------\n\nTITLE: Attaching IAM Role Policy in Java\nDESCRIPTION: This snippet shows how to attach a policy to an IAM role using the AWS SDK for Java 2.x.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/iam/README.md#2025-04-09_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nsrc/main/java/com/example/iam/AttachRolePolicy.java#L6\n```\n\n----------------------------------------\n\nTITLE: Creating an AWS IoT Topic Rule using Kotlin\nDESCRIPTION: This snippet illustrates how to create an AWS IoT Topic Rule using the CreateTopicRule operation in the AWS SDK for Kotlin.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/iot/README.md#2025-04-09_snippet_4\n\nLANGUAGE: Kotlin\nCODE:\n```\nCreateTopicRule\n```\n\n----------------------------------------\n\nTITLE: Updating OpsItem in Systems Manager with JavaScript SDK v3\nDESCRIPTION: This code snippet demonstrates how to update an OpsItem using the UpdateOpsItem operation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/ssm/README.md#2025-04-09_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n// UpdateOpsItem\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for AWS Cognito Examples\nDESCRIPTION: Complete CMake configuration for building AWS Cognito service examples. Sets up project requirements, finds AWS SDK dependencies, configures platform-specific settings, and creates build targets for all example files. Includes optional QR code generation via Conan and test configuration support.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/cognito/CMakeLists.txt#2025-04-09_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\n\n# Set the minimum required version of CMake for this project.\ncmake_minimum_required(VERSION 3.13)\n\nset(SERVICE_NAME cognito)\nset(SERVICE_COMPONENTS cognito-idp)\n\n# Set this project's name.\nproject(\"${SERVICE_NAME}-examples\")\n\nset(USING_CONAN FALSE)  # Setting to true enables generation of a QR code.\n\n\nif (USING_CONAN)\n    set(ADDED_CONAN_DEFINE USING_QR=1)\n    include(${CMAKE_BINARY_DIR}/conanbuildinfo.cmake)\n    conan_basic_setup()\nelse ()\n\nendif ()\n\n# Use the MSVC variable to determine if this is a Windows build.\nset(WINDOWS_BUILD ${MSVC})\n\n# Set the location of where Windows can find the installed libraries of the SDK.\nif (WINDOWS_BUILD)\n    string(REPLACE \";\" \"/aws-cpp-sdk-all;\" SYSTEM_MODULE_PATH \"${CMAKE_SYSTEM_PREFIX_PATH}/aws-cpp-sdk-all\")\n    list(APPEND CMAKE_PREFIX_PATH ${SYSTEM_MODULE_PATH})\nendif ()\n\n# Set the C++ standard to use to build this target.\nset(CMAKE_CXX_STANDARD 11)\n\n# Enable CTest for testing these code examples.\nif (BUILD_TESTS)\n    include(CTest)\nendif ()\n\n# Build shared libraries by default.\nset(BUILD_SHARED_LIBS ON)\n\n# Find the AWS SDK for C++ package.\nfind_package(AWSSDK REQUIRED COMPONENTS ${SERVICE_COMPONENTS})\n\nif (WINDOWS_BUILD AND AWSSDK_INSTALL_AS_SHARED_LIBS)\n    # Copy relevant AWS SDK for C++ libraries into the current binary directory for running and debugging.\n\n    # set(BIN_SUB_DIR \"/Debug\") # If you are building from the command line, you may need to uncomment this\n    # and set the proper subdirectory to the executables' location.\n\n    AWSSDK_CPY_DYN_LIBS(SERVICE_COMPONENTS \"\" ${CMAKE_CURRENT_BINARY_DIR}${BIN_SUB_DIR})\nendif ()\n\n# AWSDOC_SOURCE can be defined in the command line to limit the files in a build. For example,\n# you can limit files to one action.\nif (NOT DEFINED AWSDOC_SOURCE)\n    file(GLOB AWSDOC_SOURCE\n            \"*.cpp\"\n            )\nendif ()\n\nforeach (file ${AWSDOC_SOURCE})\n    get_filename_component(EXAMPLE ${file} NAME_WE)\n\n    # Build the code example executables.\n    set(EXAMPLE_EXE run_${EXAMPLE})\n\n    add_executable(${EXAMPLE_EXE} ${file})\n\n    target_link_libraries(${EXAMPLE_EXE} ${AWSSDK_LINK_LIBRARIES}\n            ${AWSSDK_PLATFORM_DEPS}\n            ${CONAN_LIBS})\n\n    target_compile_definitions(${EXAMPLE_EXE}\n            PRIVATE\n            ${ADDED_CONAN_DEFINE}\n            SOURCE_DIR=\"${CMAKE_CURRENT_SOURCE_DIR}\"\n            )\nendforeach ()\n\n# Conan and googletest are not getting along in this instance.\nif (BUILD_TESTS AND NOT USING_CONAN)\n    add_subdirectory(tests)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Source Files for AWS SDK C++ S3 Examples\nDESCRIPTION: Configures the source files for the S3 examples, including headers and cpp files. It also handles a special case for Windows builds regarding the list_buckets_disabling_dns_cache.cpp file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/s3/CMakeLists.txt#2025-04-09_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB AWSDOC_S3_HEADERS\n        \"include/awsdoc/s3/*.h\"\n)\n\nif (NOT DEFINED AWSDOC_S3_SOURCE)\n    file(GLOB AWSDOC_S3_SOURCE\n            \"*.cpp\"\n    )\nendif ()\n\nif (WINDOWS_BUILD)\n    list(FIND AWSSDK_CLIENT_LIBS \"curl\" CONTAINS_CURL)\n    if (CONTAINS_CURL EQUAL -1)\n        list(FILTER AWSDOC_S3_SOURCE EXCLUDE REGEX \"/list_buckets_disabling_dns_cache.cpp$\")\n    else ()\n        if (NOT CURL_FOUND)\n            set(CURL_INCLUDE_DIRS \"c:/curl/include\")\n            set(CURL_LIBRARIES \"c:/curl/lib\")\n        endif ()\n    endif ()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: DynamoDB Single Actions in Rust\nDESCRIPTION: Collection of individual DynamoDB operations including CreateTable, DeleteItem, DeleteTable, ListTables, PutItem, Query, and Scan. Each operation demonstrates a core DynamoDB functionality using the Rust SDK.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/dynamodb/README.md#2025-04-09_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n// CreateTable - src/scenario/create.rs#L12\n// DeleteItem - src/scenario/delete.rs#L12\n// DeleteTable - src/scenario/delete.rs#L36\n// ListTables - src/scenario/list.rs#L7\n// PutItem - src/scenario/add.rs#L25\n// Query - src/scenario/movies/server.rs#L30\n// Scan - src/scenario/list.rs#L178\n```\n\n----------------------------------------\n\nTITLE: Running Hello Aurora Example with Go\nDESCRIPTION: Command to run the Hello Aurora example which demonstrates basic Aurora connectivity using the AWS SDK for Go V2.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/gov2/aurora/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo run ./hello\n```\n\n----------------------------------------\n\nTITLE: Writing Stock Trade Data to a Kinesis Data Stream in Java\nDESCRIPTION: This code snippet demonstrates how to write stock trade data to a Kinesis data stream using the AWS SDK for Java 2.x. It includes the necessary import statement and references the StockTradesWriter class.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/kinesis/README.md#2025-04-09_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nimport com.example.kinesis.StockTradesWriter;\n```\n\n----------------------------------------\n\nTITLE: Getting CloudWatch Metric Widget Images in C#\nDESCRIPTION: Method for retrieving metric widget images from CloudWatch. This is implemented in the CloudWatchWrapper class.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/CloudWatch/README.md#2025-04-09_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\nGetMetricWidgetImage\n```\n\n----------------------------------------\n\nTITLE: DescribeExportTasks Implementation in .NET\nDESCRIPTION: Example showing how to describe CloudWatch Logs export tasks using AWS SDK for .NET. The implementation is referenced in the DescribeExportTasks.cs file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/CloudWatchLogs/README.md#2025-04-09_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\n/* Code reference only - implementation in DescribeExportTasks.cs#L6 */\n```\n\n----------------------------------------\n\nTITLE: Destroying Amazon Textract Explorer Resources\nDESCRIPTION: Command to clean up and remove all AWS resources created for the demo, ensuring no further charges are incurred.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/cross_service/textract_explorer/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython textract_demo_launcher.py destroy\n```\n\n----------------------------------------\n\nTITLE: IAM Permissions Policy for AWS HealthImaging ListDatastores Action\nDESCRIPTION: This JSON policy grants the minimum IAM permissions required to run the Hello HealthImaging example, allowing the ListDatastores action on all resources.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/medical-imaging/hello_health_imaging/README.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"Version\": \"2012-10-17\",\n\t\"Statement\": [\n\t\t{\n\t\t\t\"Effect\": \"Allow\",\n\t\t\t\"Action\": \"medical-imaging:ListDatastores\",\n\t\t\t\"Resource\": \"*\"\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving EC2 Password Data\nDESCRIPTION: Shows how to retrieve the encrypted administrator password for Windows instances launched from password-enabled AMIs.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/ec2/README.md#2025-04-09_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nsrc/main/java/com/example/ec2/GetPasswordData.java#L6\n```\n\n----------------------------------------\n\nTITLE: Deleting an Object from S3 in Java\nDESCRIPTION: Code example that demonstrates how to delete an object from an S3 bucket using the DeleteObject operation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/s3/README.md#2025-04-09_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\n- [DeleteObject](src/main/java/com/example/s3/scenario/S3Actions.java#L325)\n```\n\n----------------------------------------\n\nTITLE: Modifying an Amazon Redshift Cluster in Java\nDESCRIPTION: This code excerpt illustrates how to modify an Amazon Redshift cluster using the AWS SDK for Java 2.x. It shows the use of the ModifyCluster operation to update the configuration of an existing Redshift cluster.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/redshift/README.md#2025-04-09_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\nRedshiftActions.java#L452\n```\n\n----------------------------------------\n\nTITLE: Send and Receive with Long Polling in Go\nDESCRIPTION: Example command for sending and receiving messages using long polling in an AWS SQS queue. Requires queue name as an input parameter.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/sqs/README.md#2025-04-09_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ngo run SendReceiveLongPolling.go -q QUEUE\n```\n\n----------------------------------------\n\nTITLE: Restoring a Table in Amazon Keyspaces using C#\nDESCRIPTION: This code snippet shows how to restore a table to a specific point in time in Amazon Keyspaces using the AWS SDK for .NET. It's an example of a single action operation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Keyspaces/README.md#2025-04-09_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nActions/KeyspacesWrapper.cs#L163\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies for DynamoDB Python Examples\nDESCRIPTION: Command to install the required Python packages for running the DynamoDB examples using pip package manager in a virtual environment.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/dynamodb/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Send Email using Java\nDESCRIPTION: Shows how to send an email using Amazon SES and AWS SDK for Java 2.x. Located in src/main/java/com/example/ses/SendMessageEmailRequest.java.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/ses/README.md#2025-04-09_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\ncom.example.ses.SendMessageEmailRequest.java#L6\n```\n\n----------------------------------------\n\nTITLE: Retrieving EC2 Password Data\nDESCRIPTION: Shows how to retrieve the encrypted administrator password for Windows instances launched from password-enabled AMIs.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/ec2/README.md#2025-04-09_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nsrc/main/java/com/example/ec2/GetPasswordData.java#L6\n```\n\n----------------------------------------\n\nTITLE: AWS SDK C++ Project Structure\nDESCRIPTION: Project directory structure and overview of cross-service examples showing the main README.md content that describes available examples and important considerations for running AWS SDK for C++ applications.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/cross-service/README.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# AWS SDK for C++ cross-service examples \n\n## Overview\nThis README lists the cross-service examples available for the AWS SDK for C++. Each folder in this directory contains the following cross-service examples. A README in each folder describes how to run the example.\n\nA cross-service example is an application that works across multiple AWS services using the AWS SDK for C++.\n\n\n## ⚠️ Important\n* Running this code might result in charges to your AWS account. \n* Running the tests might result in charges to your AWS account.\n*  We recommend that you grant your code least privilege. At most, grant only the minimum permissions required to perform the task. For more information, see [Grant least privilege](https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html#grant-least-privilege). \n* This code is not tested in every AWS Region. For more information, see [AWS Regional Services](https://aws.amazon.com/about-aws/global-infrastructure/regional-product-services).\n\n## Cross-service examples\n* [Amazon Aurora Severless item tracker](serverless-aurora/README.md) Create an item tracker web app using Amazon Aurora Serverless, and Amazon Simple Email Service (Amazon SES).\n* [Photo Asset Manager](photo_asset_manager/README.md) Create a photo asset management application.\n```\n\n----------------------------------------\n\nTITLE: Running Hello Package Example in Go SDK V2\nDESCRIPTION: Demonstrates how to run the basic 'hello' package example from the command line to verify service connectivity with the AWS SDK for Go V2.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/gov2/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo run ./hello\n```\n\n----------------------------------------\n\nTITLE: Running Hello Amazon SNS Example in Go\nDESCRIPTION: Command to run the Hello Amazon SNS example which demonstrates how to get started with Amazon SNS.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/gov2/sns/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo run ./hello\n```\n\n----------------------------------------\n\nTITLE: Deleting a Bucket in Amazon S3 using SDK for SAP ABAP\nDESCRIPTION: This code snippet demonstrates how to delete a bucket from Amazon S3 using the SDK for SAP ABAP.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/sap-abap/services/s3/README.md#2025-04-09_snippet_3\n\nLANGUAGE: ABAP\nCODE:\n```\nzcl_aws1_s3_actions.clas.abap#L107\n```\n\n----------------------------------------\n\nTITLE: Describing DB Engine Versions with Amazon RDS in C#\nDESCRIPTION: This snippet shows how to retrieve information about DB engine versions using the Amazon RDS API. It's part of the RDSWrapper class focused on instance-related operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/RDS/README.md#2025-04-09_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nDescribeDBEngineVersions\n```\n\n----------------------------------------\n\nTITLE: Describing Auto Scaling Groups and Instances in .NET\nDESCRIPTION: This snippet references the DescribeAutoScalingGroups and DescribeAutoScalingInstances methods that retrieve information about existing Auto Scaling groups and their instances.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv4/AutoScaling/README.md#2025-04-09_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nDescribeAutoScalingGroups(Actions/AutoScalingWrapper.cs#L109)\n```\n\nLANGUAGE: C#\nCODE:\n```\nDescribeAutoScalingInstances(Actions/AutoScalingWrapper.cs#L109)\n```\n\n----------------------------------------\n\nTITLE: Getting Lambda Function Information with AWS SDK for .NET\nDESCRIPTION: Retrieves information about a Lambda function using the function name. Returns a GetFunctionResponse object containing details about the function.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Lambda/README.md#2025-04-09_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n/// <summary>\n/// Gets information about a Lambda function.\n/// </summary>\n/// <param name=\"functionName\">The name of the Lambda function for\n/// which to retrieve information.</param>\n/// <returns>Async Task.</returns>\npublic async Task<FunctionConfiguration> GetFunctionAsync(string functionName)\n{\n    var functionRequest = new GetFunctionRequest\n    {\n        FunctionName = functionName,\n    };\n\n    var response = await _lambdaService.GetFunctionAsync(functionRequest);\n    return response.Configuration;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating OpsItem in Systems Manager with JavaScript SDK v3\nDESCRIPTION: This code snippet shows how to create an OpsItem using the CreateOpsItem operation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/ssm/README.md#2025-04-09_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// CreateOpsItem\n```\n\n----------------------------------------\n\nTITLE: Describing Amazon Redshift Clusters in Kotlin\nDESCRIPTION: Example showing how to retrieve and describe Amazon Redshift clusters using the AWS SDK for Kotlin. Located in DescribeClusters.kt at line 22.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/redshift/README.md#2025-04-09_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\nDescribeClusters\n```\n\n----------------------------------------\n\nTITLE: Running ListParameterGroups Example in Go\nDESCRIPTION: This example demonstrates listing Amazon RDS parameter groups using the AWS SDK for Go. It doesn't require any command-line arguments.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/rds/README.md#2025-04-09_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngo run ListParameterGroups.go\n```\n\n----------------------------------------\n\nTITLE: Getting Task Data for an Activity with AWS Step Functions Java SDK\nDESCRIPTION: This code snippet shows how to get task data for an activity using the AWS Step Functions Java SDK. It employs the getActivityTask command to retrieve task information for a specific activity.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/stepfunctions/README.md#2025-04-09_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\n// Code snippet for getting task data for an activity\n// Refer to: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/route53/src/main/java/com/example/route/StepFunctionsScenario.java\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries and Registering Tests\nDESCRIPTION: Links the target with Google Test and AWS SDK libraries and registers tests with the GoogleTest module to enable test discovery and execution.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/dynamodb/tests/CMakeLists.txt#2025-04-09_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(\n        ${CURRENT_TARGET}\n        GTest::gtest\n        ${AWSSDK_LINK_LIBRARIES}\n        ${AWSSDK_PLATFORM_DEPS}\n)\n\ninclude(GoogleTest)\ngtest_add_tests(\n        TARGET\n        ${CURRENT_TARGET}\n)\n```\n\n----------------------------------------\n\nTITLE: Describe Voices Example in C#\nDESCRIPTION: Code example showing how to retrieve a list of available voices from Amazon Polly using the AWS SDK for .NET. Located in DescribeVoicesExample/DescribeVoices.cs\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Polly/README.md#2025-04-09_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nDescribeVoicesExample/DescribeVoices.cs#L10\n```\n\n----------------------------------------\n\nTITLE: Getting Keyspace Information in Amazon Keyspaces using Kotlin\nDESCRIPTION: This code snippet illustrates how to retrieve information about a keyspace in Amazon Keyspaces using the AWS SDK for Kotlin. It's part of the single actions examples.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/keyspaces/README.md#2025-04-09_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\nsrc/main/kotlin/com/example/keyspace/ScenarioKeyspaces.kt#L602\n```\n\n----------------------------------------\n\nTITLE: Listing KMS Key Policies with Java SDK\nDESCRIPTION: This code snippet demonstrates how to list key policies for a KMS key using the AWS SDK for Java 2.x. It uses the ListKeyPolicies operation to retrieve the names of key policies for the specified KMS key.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/kms/README.md#2025-04-09_snippet_12\n\nLANGUAGE: Java\nCODE:\n```\nKMSActions.java#L506\n```\n\n----------------------------------------\n\nTITLE: Deleting an AWS AppSync API Key using Java SDK\nDESCRIPTION: This example illustrates how to delete an API key from AWS AppSync using the DeleteApiKey command with the AppSyncClient object in Java.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/appsync/README.md#2025-04-09_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nDeleteApiKey command\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows-Specific Path Settings for AWS SDK\nDESCRIPTION: Sets up Windows-specific configurations for finding AWS SDK libraries. Detects if the build is running on Windows and adjusts the CMAKE_PREFIX_PATH accordingly.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/rekognition/CMakeLists.txt#2025-04-09_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Use the MSVC variable to determine if this is a Windows build.\nset(WINDOWS_BUILD ${MSVC})\n\n# Set the location of where Windows can find the installed libraries of the SDK.\nif (WINDOWS_BUILD)\n    string(REPLACE \";\" \"/aws-cpp-sdk-all;\" SYSTEM_MODULE_PATH \"${CMAKE_SYSTEM_PREFIX_PATH}/aws-cpp-sdk-all\")\n    list(APPEND CMAKE_PREFIX_PATH ${SYSTEM_MODULE_PATH})\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Running Single Action Examples in Node.js\nDESCRIPTION: Command to execute individual action example files from the actions directory.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/sts/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode ./actions/<fileName>\n```\n\n----------------------------------------\n\nTITLE: Deploying DynamoDB Resources with AWS CDK\nDESCRIPTION: Commands to install dependencies and deploy the AWS CDK stack that creates a DynamoDB table with a string partition key named 'iditem'.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/resources/cdk/dynamodb-item-tracker/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\ncdk deploy\n```\n\n----------------------------------------\n\nTITLE: Revoking a Grant for a KMS Key with PHP\nDESCRIPTION: This example demonstrates how to revoke a grant for a KMS key using the AWS SDK for PHP. Revoking a grant removes the permissions it allowed.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/php/example_code/kms/README.md#2025-04-09_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\nKmsService.php#L325\n```\n\n----------------------------------------\n\nTITLE: Running the Hello Lambda Example\nDESCRIPTION: Command to execute the Hello Lambda example which demonstrates basic Lambda functionality like listing functions.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/lambda/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython hello/hello_lambda.py\n```\n\n----------------------------------------\n\nTITLE: Invoking Meta Llama 3 model with response streaming in C#\nDESCRIPTION: Demonstrates how to invoke the Meta Llama 3 model with response streaming using Amazon Bedrock Runtime.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv4/Bedrock-runtime/README.md#2025-04-09_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\nModels/MetaLlama/Llama3_InvokeModelWithResponseStream/InvokeModelWithResponseStream.cs#L4\n```\n\n----------------------------------------\n\nTITLE: Preparing CloudFormation Package for Deployment\nDESCRIPTION: AWS CLI command to prepare the CloudFormation package for deployment by uploading artifacts to an S3 bucket.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/cross_service/apigateway_covid-19_tracker/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\naws cloudformation package --template-file out/sam.json \\ \n--s3-bucket YOUR-BUCKET-NAME --output-template-file out/template.yml\n```\n\n----------------------------------------\n\nTITLE: Implementing WorkItem Class in Java for AWS RDS Data Service\nDESCRIPTION: This code defines a WorkItem class with properties like id, name, guide, date, description, status, and archived. It includes a static method 'from' to create a WorkItem instance from a List of Field objects, likely used with AWS RDS Data Service. The class also provides getter and setter methods for all properties.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/Creating_Spring_RDS_Rest/README.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npackage com.aws.rest;\n\nimport software.amazon.awssdk.services.rdsdata.model.Field;\n\nimport java.util.List;\n\npublic class WorkItem {\n    private String id;\n    private String name;\n    private String guide;\n    private String date;\n    private String description;\n    private String status;\n    private boolean archived;\n\n    public static WorkItem from(List<Field> fields) {\n        var item = new WorkItem();\n        boolean arcVal = false;\n        for (int i = 0; i <= 6; i++) {\n            String value = fields.get(i).stringValue();\n            if (i == 6)\n                arcVal = fields.get(i).booleanValue();\n\n            switch (i) {\n                case 0:\n                    item.setId(value);\n                    break;\n                case 1:\n                    item.setDate(value);\n                    break;\n                case 2:\n                    item.setDescription(value);\n                    break;\n                case 3:\n                    item.setGuide(value);\n                    break;\n                case 4:\n                    item.setStatus(value);\n                    break;\n                case 5:\n                    item.setName(value);\n                    break;\n\n                case 6:\n                    item.setArchived(arcVal);\n                    break;\n            }\n        }\n        return item;\n    }\n\n    public void setArchived(boolean archived) {\n        this.archived =archived;\n    }\n\n    public boolean getArchived() {\n        return this.archived;\n    }\n\n    public void setId(String id) {\n        this.id = id;\n    }\n\n    public String getId() {\n        return this.id;\n    }\n\n    public void setStatus(String status) {\n        this.status = status;\n    }\n\n    public String getStatus() {\n        return this.status;\n    }\n\n    public void setDescription(String description) {\n        this.description = description;\n    }\n\n    public String getDescription() {\n        return this.description;\n    }\n\n\n    public void setDate(String date) {\n        this.date = date;\n    }\n\n    public String getDate() {\n        return this.date;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getName() {\n        return this.name;\n    }\n\n    public void setGuide(String guide) {\n        this.guide = guide;\n    }\n\n    public String getGuide() {\n        return this.guide;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Identities in Amazon SES using C++\nDESCRIPTION: This example shows how to list identities in Amazon SES using the AWS SDK for C++. The code can be found in the 'list_identities.cpp' file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/ses/README.md#2025-04-09_snippet_10\n\nLANGUAGE: C++\nCODE:\n```\n// See list_identities.cpp, line 21\n```\n\n----------------------------------------\n\nTITLE: Modifying DB Parameter Group using Amazon RDS in Java\nDESCRIPTION: This code snippet demonstrates how to modify a DB parameter group using Amazon RDS with AWS SDK for Java 2.x. It is part of a larger RDS scenario.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/rds/README.md#2025-04-09_snippet_12\n\nLANGUAGE: Java\nCODE:\n```\nsrc/main/java/com/example/rds/RDSScenario.java#L464\n```\n\n----------------------------------------\n\nTITLE: Configuring Dead-Letter Queue in Amazon SQS using Go\nDESCRIPTION: This example demonstrates how to configure a dead-letter queue for an Amazon SQS queue. It accepts the main queue name and dead-letter queue name as command-line arguments.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/sqs/README.md#2025-04-09_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\ngo run DeadLetterQueue.go -q QUEUE -d DLQUEUE\n```\n\n----------------------------------------\n\nTITLE: Confirming Sign Up in Amazon Cognito Identity Provider with C#\nDESCRIPTION: This code snippet shows how to confirm a sign-up in Amazon Cognito Identity Provider using C#. It's implemented in the CognitoWrapper class and utilizes the ConfirmSignUpAsync method.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Cognito/README.md#2025-04-09_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nConfirmSignUp(Actions/CognitoWrapper.cs#L213)\n```\n\n----------------------------------------\n\nTITLE: Completing Multipart Upload in Rust\nDESCRIPTION: This code snippet shows how to complete a multipart upload operation in Amazon S3 using the AWS SDK for Rust. It's part of a larger multipart upload process.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/s3/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Rust\nCODE:\n```\nCompleteMultipartUpload\n```\n\n----------------------------------------\n\nTITLE: Running AWS IoT SiteWise Basics Example\nDESCRIPTION: Command to run the comprehensive example demonstrating core AWS IoT SiteWise operations including asset model creation, data management, and gateway operations\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/iotsitewise/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython iotsitewise_getting_started.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files and Building Executables for DynamoDB Examples\nDESCRIPTION: Sets up the source files for the examples, creates executable targets for each example, and configures include directories and linked libraries.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/dynamodb/CMakeLists.txt#2025-04-09_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT DEFINED AWSDOC_SOURCE)\n    file(GLOB AWSDOC_SOURCE\n        \"*.cpp\"\n    )\n    list(FILTER AWSDOC_SOURCE EXCLUDE REGEX \"/dynamodb_utils.cpp$\")\nendif()\n\nforeach(file ${AWSDOC_SOURCE})\n    get_filename_component(EXAMPLE ${file} NAME_WE)\n    set(EXAMPLE_EXE run_${EXAMPLE})\n\n    add_executable(${EXAMPLE_EXE}\n            dynamodb_utils.cpp\n            ${file})\n\n    target_include_directories(${EXAMPLE_EXE} PUBLIC \n        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\n        $<INSTALL_INTERFACE:include>\n            ${AWSSDK_INCLUDE_DIR}/aws\n            )\n    target_link_libraries(${EXAMPLE_EXE}\n            ${AWSSDK_LINK_LIBRARIES}\n            ${AWSSDK_PLATFORM_DEPS}\n            )\n    target_compile_definitions(${EXAMPLE_EXE}\n            PRIVATE\n            MOVIE_FILE_PATH=\"${CMAKE_CURRENT_SOURCE_DIR}/../../../resources/sample_files/movies.json\"\n        )\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: List Domains in Route 53 in C#\nDESCRIPTION: Retrieves a list of all domain names registered in the current AWS account. Allows filtering with a marker and setting maximum items to return.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Route53/README.md#2025-04-09_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\n/// <summary>\n/// List the domains for the user.\n/// </summary>\n/// <param name=\"marker\">The marker (starting point) of the list.</param>\n/// <param name=\"maxItems\">The maximum number of items to return.</param>\n/// <returns>The list of domains.</returns>\npublic async Task<List<DomainSummary>> ListDomains(string? marker = null, int maxItems = 20)\n{\n    var result = await _amazonRoute53Domains.ListDomainsAsync(\n        new ListDomainsRequest\n        {\n            Marker = marker,\n            MaxItems = maxItems\n        }\n    );\n    return result.Domains;\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Dependencies for AWS SDK Examples\nDESCRIPTION: Lists the required Python dependencies for AWS SDK examples with minimum version specifications. Includes boto3 for AWS API access and pytest for running test cases.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/glacier/requirements.txt#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nboto3>=1.26.79\npytest>=7.2.1\n```\n\n----------------------------------------\n\nTITLE: Setting S3 Object Retention in JavaScript\nDESCRIPTION: This code snippet demonstrates how to set retention settings for an S3 object using the PutObjectRetention operation in the AWS SDK for JavaScript (v3).\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/s3/README.md#2025-04-09_snippet_24\n\nLANGUAGE: JavaScript\nCODE:\n```\n- [PutObjectRetention](actions/put-object-retention.js)\n```\n\n----------------------------------------\n\nTITLE: Defining AWS Step Functions Workflow in JSON\nDESCRIPTION: Amazon States Language (JSON-based) document defining the serverless workflow for sending notifications over multiple channels.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/workflow_multiple_channels/README.md#2025-04-09_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\"Comment\": \"A simple Step Functions state machine that sends mass notifications over multiple channels.\",\n\"StartAt\": \"Determine the missing students\",\n\"States\": {\n \"Determine the missing students\": {\n \"Type\": \"Task\",\n \"Resource\": \" arn:aws:lambda:REGION:ACCOUNT_ID:function:FUNCTION_NAME \",\n \"Next\": \"Send All Notifications\"\n },\n\"Send All Notifications\": {\n \"Type\": \"Task\",\n \"Resource\": \" arn:aws:lambda:REGION:ACCOUNT_ID:function:FUNCTION_NAME \",\n \"End\": true\n }\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Verified SES Email Addresses in Go\nDESCRIPTION: This code snippet lists all verified email addresses in Amazon SES. It doesn't require any command-line arguments.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/ses/README.md#2025-04-09_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\ngo run ListAddresses.go\n```\n\n----------------------------------------\n\nTITLE: Creating a DB Instance with Amazon RDS in C#\nDESCRIPTION: This code snippet shows how to create a new DB instance using the Amazon RDS API. It's part of the RDSWrapper class that encapsulates RDS operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/RDS/README.md#2025-04-09_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nCreateDBInstance\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Test Integration\nDESCRIPTION: Sets up Google Test integration by either finding an existing installation or fetching it from GitHub. Includes special configuration for Windows to prevent overriding compiler settings.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/dynamodb/tests/CMakeLists.txt#2025-04-09_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(GTest)\n\nif(NOT GTest_FOUND)\n    include(FetchContent)\n    FetchContent_Declare(\n            googletest\n            GIT_REPOSITORY https://github.com/google/googletest.git\n            GIT_TAG release-1.12.1\n    )\n\n    # For Windows: Prevent overriding the parent project's compiler/linker settings.\n    set(gtest_force_shared_crt ON CACHE BOOL \"\" FORCE)\n    FetchContent_MakeAvailable(googletest)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Implementing DynamoDB Enhanced Client Operations in Java\nDESCRIPTION: A comprehensive implementation of DynamoDBService class that manages operations on a DynamoDB 'Work' table using the AWS SDK for Java Enhanced Client. It includes methods for retrieving, filtering, and modifying items with support for queries with expressions. This service is designed to be used in a Spring application as indicated by the @Component annotation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_dynamodb_web_app/README.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage com.aws.rest;\n\nimport software.amazon.awssdk.enhanced.dynamodb.DynamoDbEnhancedClient;\nimport software.amazon.awssdk.enhanced.dynamodb.DynamoDbTable;\nimport software.amazon.awssdk.enhanced.dynamodb.Expression;\nimport software.amazon.awssdk.enhanced.dynamodb.Key;\nimport software.amazon.awssdk.enhanced.dynamodb.TableSchema;\nimport software.amazon.awssdk.regions.Region;\nimport software.amazon.awssdk.services.dynamodb.DynamoDbClient;\nimport software.amazon.awssdk.enhanced.dynamodb.model.ScanEnhancedRequest;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport org.springframework.stereotype.Component;\nimport software.amazon.awssdk.services.dynamodb.model.AttributeValue;\nimport software.amazon.awssdk.services.dynamodb.model.DynamoDbException;\n\n/*\n Before running this code example, create an Amazon DynamoDB table named Work with a primary key named id.\n */\n@Component\npublic class DynamoDBService {\n\n    private DynamoDbClient getClient() {\n        Region region = Region.US_EAST_1;\n        return DynamoDbClient.builder()\n            .region(region)\n            .build();\n    }\n    // Get All items from the DynamoDB table.\n    public List<WorkItem> getAllItems() {\n        DynamoDbEnhancedClient enhancedClient = DynamoDbEnhancedClient.builder()\n            .dynamoDbClient(getClient())\n            .build();\n\n        try{\n            DynamoDbTable<Work> table = enhancedClient.table(\"Work\", TableSchema.fromBean(Work.class));\n            Iterator<Work> results = table.scan().items().iterator();\n            WorkItem workItem ;\n            ArrayList<WorkItem> itemList = new ArrayList<>();\n\n            while (results.hasNext()) {\n                workItem = new WorkItem();\n                Work work = results.next();\n                workItem.setName(work.getName());\n                workItem.setGuide(work.getGuide());\n                workItem.setDescription(work.getDescription());\n                workItem.setStatus(work.getStatus());\n                workItem.setDate(work.getDate());\n                workItem.setId(work.getId());\n                workItem.setArchived(work.getArchive());\n\n                // Push the workItem to the list.\n                itemList.add(workItem);\n            }\n            return itemList;\n\n        } catch (DynamoDbException e) {\n            System.err.println(e.getMessage());\n            System.exit(1);\n        }\n        return null;\n    }\n\n    // Archives an item based on the key.\n    public void archiveItemEC(String id) {\n        try {\n            DynamoDbEnhancedClient enhancedClient = DynamoDbEnhancedClient.builder()\n                .dynamoDbClient(getClient())\n                .build();\n\n            DynamoDbTable<Work> workTable = enhancedClient.table(\"Work\", TableSchema.fromBean(Work.class));\n\n            //Get the Key object.\n            Key key = Key.builder()\n                .partitionValue(id)\n                .build();\n\n            // Get the item by using the key.\n            Work work = workTable.getItem(r->r.key(key));\n            work.setArchive(1);\n            workTable.updateItem(r->r.item(work));\n\n        } catch (DynamoDbException e) {\n            System.err.println(e.getMessage());\n            System.exit(1);\n        }\n    }\n\n    // Get Open items from the DynamoDB table.\n    public List<WorkItem> getOpenItems() {\n        DynamoDbEnhancedClient enhancedClient = DynamoDbEnhancedClient.builder()\n            .dynamoDbClient(getClient())\n            .build();\n\n        try{\n            DynamoDbTable<Work> table = enhancedClient.table(\"Work\", TableSchema.fromBean(Work.class));\n            AttributeValue attr = AttributeValue.builder()\n                .n(\"0\")\n                .build();\n\n            Map<String, AttributeValue> myMap = new HashMap<>();\n            myMap.put(\":val1\",attr);\n\n            Map<String, String> myExMap = new HashMap<>();\n            myExMap.put(\"#archive\", \"archive\");\n\n            // Set the Expression so only active items are queried from the Work table.\n            Expression expression = Expression.builder()\n                .expressionValues(myMap)\n                .expressionNames(myExMap)\n                .expression(\"#archive = :val1\")\n                .build();\n\n            ScanEnhancedRequest enhancedRequest = ScanEnhancedRequest.builder()\n                .filterExpression(expression)\n                .limit(15)\n                .build();\n\n            // Scan items.\n            Iterator<Work> results = table.scan(enhancedRequest).items().iterator();\n            WorkItem workItem ;\n            ArrayList<WorkItem> itemList = new ArrayList<>();\n\n            while (results.hasNext()) {\n                workItem = new WorkItem();\n                Work work = results.next();\n                workItem.setName(work.getName());\n                workItem.setGuide(work.getGuide());\n                workItem.setDescription(work.getDescription());\n                workItem.setStatus(work.getStatus());\n                workItem.setDate(work.getDate());\n                workItem.setId(work.getId());\n                workItem.setArchived(work.getArchive());\n\n                // Push the workItem to the list.\n                itemList.add(workItem);\n            }\n            return itemList;\n\n        } catch (DynamoDbException e) {\n            System.err.println(e.getMessage());\n            System.exit(1);\n        }\n        return null;\n    }\n\n    // Get Closed Items from the DynamoDB table.\n    public List< WorkItem > getClosedItems() {\n        DynamoDbEnhancedClient enhancedClient = DynamoDbEnhancedClient.builder()\n            .dynamoDbClient(getClient())\n            .build();\n\n        try{\n            // Create a DynamoDbTable object.\n            DynamoDbTable<Work> table = enhancedClient.table(\"Work\", TableSchema.fromBean(Work.class));\n            AttributeValue attr = AttributeValue.builder()\n                .n(\"1\")\n                .build();\n\n            Map<String, AttributeValue> myMap = new HashMap<>();\n            myMap.put(\":val1\",attr);\n            Map<String, String> myExMap = new HashMap<>();\n            myExMap.put(\"#archive\", \"archive\");\n\n            // Set the Expression so only Closed items are queried from the Work table.\n            Expression expression = Expression.builder()\n                .expressionValues(myMap)\n                .expressionNames(myExMap)\n                .expression(\"#archive = :val1\")\n                .build();\n\n            ScanEnhancedRequest enhancedRequest = ScanEnhancedRequest.builder()\n                .filterExpression(expression)\n                .limit(15)\n                .build();\n\n            // Get items.\n            Iterator<Work> results = table.scan(enhancedRequest).items().iterator();\n            WorkItem workItem ;\n            ArrayList<WorkItem> itemList = new ArrayList<>();\n\n            while (results.hasNext()) {\n                workItem = new WorkItem();\n                Work work = results.next();\n                workItem.setName(work.getName());\n                workItem.setGuide(work.getGuide());\n                workItem.setDescription(work.getDescription());\n                workItem.setStatus(work.getStatus());\n                workItem.setDate(work.getDate());\n                workItem.setId(work.getId());\n                workItem.setArchived(work.getArchive());\n\n                //Push the workItem to the list.\n                itemList.add(workItem);\n            }\n            return itemList;\n\n        } catch (DynamoDbException e) {\n            System.err.println(e.getMessage());\n            System.exit(1);\n        }\n        return null ;\n    }\n\n    public void setItem(WorkItem item) {\n        DynamoDbEnhancedClient enhancedClient = DynamoDbEnhancedClient.builder()\n            .dynamoDbClient(getClient())\n            .build();\n\n        putRecord(enhancedClient, item) ;\n    }\n\n    // Put an item into a DynamoDB table.\n    public void putRecord(DynamoDbEnhancedClient enhancedClient, WorkItem item) {\n\n        try {\n            DynamoDbTable<Work> workTable = enhancedClient.table(\"Work\", TableSchema.fromBean(Work.class));\n            String myGuid = java.util.UUID.randomUUID().toString();\n            Work record = new Work();\n            record.setUsername(item.getName());\n            record.setId(myGuid);\n            record.setDescription(item.getDescription());\n            record.setDate(now()) ;\n            record.setStatus(item.getStatus());\n            record.setArchive(0);\n            record.setGuide(item.getGuide());\n            workTable.putItem(record);\n\n        } catch (DynamoDbException e) {\n            System.err.println(e.getMessage());\n            System.exit(1);\n        }\n    }\n\n    private String now() {\n        String dateFormatNow = \"yyyy-MM-dd HH:mm:ss\";\n        Calendar cal = Calendar.getInstance();\n        SimpleDateFormat sdf = new SimpleDateFormat(dateFormatNow);\n        return sdf.format(cal.getTime());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing SageMaker Notebook Instances in Java\nDESCRIPTION: This code snippet demonstrates how to list SageMaker notebook instances using the AWS SDK for Java 2.x. It's part of the 'Hello SageMaker' example that introduces basic SageMaker operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/sagemaker/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nListNotebookInstances\n```\n\n----------------------------------------\n\nTITLE: Listing Keyspaces with Amazon Keyspaces using Kotlin\nDESCRIPTION: This code snippet demonstrates how to list keyspaces in Amazon Keyspaces using the AWS SDK for Kotlin. It's part of the 'Hello Amazon Keyspaces' example.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/keyspaces/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nsrc/main/kotlin/com/example/keyspace/HelloKeyspaces.kt#L9\n```\n\n----------------------------------------\n\nTITLE: Retrieving an AWS AppSync Data Source using Java SDK\nDESCRIPTION: This example shows how to retrieve information about a data source in AWS AppSync using the GetDataSource command with the AppSyncClient object in Java.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/appsync/README.md#2025-04-09_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nGetDataSource command\n```\n\n----------------------------------------\n\nTITLE: Listing Kinesis Stream Consumers using AWS SDK for .NET\nDESCRIPTION: This code snippet shows how to list consumers of an Amazon Kinesis stream using the AWS SDK for .NET. It references the ListStreamConsumers method in the ListConsumers.cs file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Kinesis/README.md#2025-04-09_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nListStreamConsumers(ListConsumersExample/ListConsumersExample/ListConsumers.cs#L6)\n```\n\n----------------------------------------\n\nTITLE: Creating an Amazon SNS Topic in Go\nDESCRIPTION: This code snippet creates an Amazon SNS topic. It requires the topic name as a command-line argument.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/sns/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\ngo run MakeTopic.go -t TOPIC\n```\n\n----------------------------------------\n\nTITLE: Deleting S3 Directory Buckets in Java\nDESCRIPTION: Example code for deleting an S3 Directory Bucket using AWS SDK for Java 2.x.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/s3/src/main/java/com/example/s3/directorybucket/README.md#2025-04-09_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\nDeleteBucket\n```\n\n----------------------------------------\n\nTITLE: Implementing Image Processing and Download Functions (JavaScript)\nDESCRIPTION: This JavaScript code handles image processing and downloading. It includes functions to send a report generation request to the server and to initiate the download of a specific photo.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_photo_analyzer_async/README.md#2025-04-09_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\n$(function() {\n\n    $(\"#bar\").hide()\n\n\n   } );\n\n  function ProcessImages() {\n\n    //Post the values to the controller\n    $(\"#bar\").show()\n    var email =  $('#email').val();\n\n    $.ajax('/report', {\n        type: 'POST',  // http method\n        data: 'email=' + email ,  // data to submit\n        success: function (data, status, xhr) {\n\n            $(\"#bar\").hide()\n             alert(data) ;\n        },\n        error: function (jqXhr, textStatus, errorMessage) {\n            $('p').append('Error' + errorMessage);\n        }\n    });\n    }\n\n    function DownloadImage(){\n\n     //Post the values to the controller\n     var photo =  $('#photo').val();\n     window.location=\"../downloadphoto?photoKey=\" + photo ;\n    }\n```\n\n----------------------------------------\n\nTITLE: Getting Admin User in Amazon Cognito Identity Provider using C#\nDESCRIPTION: This code snippet demonstrates how to get admin user information in Amazon Cognito Identity Provider using C#. It's part of the CognitoWrapper class and uses the AdminGetUserAsync method.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Cognito/README.md#2025-04-09_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nAdminGetUser(Actions/CognitoWrapper.cs#L288)\n```\n\n----------------------------------------\n\nTITLE: Listing AWS AppSync APIs using Java SDK\nDESCRIPTION: This example demonstrates how to list GraphQL APIs in AWS AppSync using the ListGraphqlApis command with the AppSyncClient object in Java.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/appsync/README.md#2025-04-09_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nListGraphqlApis command\n```\n\n----------------------------------------\n\nTITLE: Setting CLASSPATH for AWS SDK for Java on Windows\nDESCRIPTION: This command sets the CLASSPATH environment variable to include the AWS SDK for Java libraries on Windows systems. It's necessary for running the Java examples.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/java/README.rst#2025-04-09_snippet_1\n\nLANGUAGE: Batch\nCODE:\n```\nset CLASSPATH=\"path/to/aws-java-sdk/lib/*;path/to/aws-java-sdk/third-party/lib/*;%CLASSPATH%\"\n```\n\n----------------------------------------\n\nTITLE: Deleting an Activity in AWS Step Functions using Kotlin\nDESCRIPTION: Illustrates how to delete an activity in AWS Step Functions using the AWS SDK for Kotlin with the deleteActivity command.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/stepfunctions/README.md#2025-04-09_snippet_3\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Code not provided in the given content\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for AWS SDK Examples\nDESCRIPTION: Lists the required Python packages and their minimum versions needed to run AWS SDK for Python (Boto3) example applications. Includes the AWS SDK itself (boto3), audio playback functionality (playsound), testing framework (pytest), and HTTP request capabilities (requests).\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/polly/requirements.txt#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nboto3>=1.26.79\nplaysound==1.2.2\npytest>=7.2.1\nrequests>=2.28.2\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for AWS SDK Medical Imaging Examples\nDESCRIPTION: This CMake snippet sets up the project configuration for AWS SDK Medical Imaging examples. It defines the project name, sets the C++ standard, configures Windows-specific settings, and finds the required AWS SDK components.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/medical-imaging/CMakeLists.txt#2025-04-09_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\n\nset(SERVICE_NAME medical-imaging)\nset(SERVICE_COMPONENTS medical-imaging)\n\nproject(\"${SERVICE_NAME}-examples\")\n\nset(BUILD_SHARED_LIBS ON)\nset(CMAKE_CXX_STANDARD 11)\n\nset(WINDOWS_BUILD ${MSVC})\n\nif (WINDOWS_BUILD)\n    string(REPLACE \";\" \"/aws-cpp-sdk-all;\" SYSTEM_MODULE_PATH \"${CMAKE_SYSTEM_PREFIX_PATH}/aws-cpp-sdk-all\")\n    list(APPEND CMAKE_PREFIX_PATH ${SYSTEM_MODULE_PATH})\nendif ()\n\nfind_package(AWSSDK REQUIRED COMPONENTS ${SERVICE_COMPONENTS})\n```\n\n----------------------------------------\n\nTITLE: Listing IAM Users using AWS SDK for Kotlin\nDESCRIPTION: This code excerpt shows how to list IAM users using the AWS SDK for Kotlin. It returns a list of IAM users in the AWS account.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/iam/README.md#2025-04-09_snippet_13\n\nLANGUAGE: Kotlin\nCODE:\n```\nsrc/main/kotlin/com/kotlin/iam/ListUsers.kt#L23\n```\n\n----------------------------------------\n\nTITLE: Retrieving Contacts from a SES v2 Contact List\nDESCRIPTION: Specifies the ListContacts operation for retrieving all subscribers from the contact list. Includes the parameter for contact list name and potential error handling.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/sesv2_weekly_mailer/content/30_SPECIFICATION.md#2025-04-09_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n- Operation: **ListContacts**\n  - Parameters:\n    - `ContactListName`: `weekly-coupons-newsletter`\n  - Errors:\n    - `NotFoundException`: If the contact list does not exist, fail the workflow and inform the user that the contact list is missing.\n```\n\n----------------------------------------\n\nTITLE: Running Hello Amazon Bedrock Example\nDESCRIPTION: Command to execute the basic Hello Amazon Bedrock example that demonstrates ListFoundationModels functionality.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/gov2/bedrock/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo run ./hello\n```\n\n----------------------------------------\n\nTITLE: Creating an Alias for a KMS Key with PHP\nDESCRIPTION: This code snippet shows how to create an alias for a KMS key using the AWS SDK for PHP. It's part of the single actions examples demonstrating individual KMS operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/php/example_code/kms/README.md#2025-04-09_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nKmsService.php#L140\n```\n\n----------------------------------------\n\nTITLE: Running Presigning Scenario\nDESCRIPTION: Command to run the presigned URL creation scenario\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/gov2/s3/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngo run ./cmd -scenario presigning\n```\n\n----------------------------------------\n\nTITLE: Describing DB Snapshots in Amazon RDS using C++\nDESCRIPTION: This code snippet references the DescribeDBSnapshots action at line 597 in the getting_started_with_db_instances.cpp file, which demonstrates how to list and describe DB snapshots using the AWS SDK for C++.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/rds/README.md#2025-04-09_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Creating Amazon SQS Queue using Go\nDESCRIPTION: This example shows how to create a standard Amazon SQS queue. It accepts the queue name as a command-line argument.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/sqs/README.md#2025-04-09_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\ngo run CreateQueue.go -q QUEUE\n```\n\n----------------------------------------\n\nTITLE: Creating a Tracker in Amazon Location Service using Java\nDESCRIPTION: This code snippet shows how to create a tracker in Amazon Location Service. It's part of the LocationActions class that provides various Location Service operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/location/README.md#2025-04-09_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\nCreateTracker\n```\n\n----------------------------------------\n\nTITLE: List Asset Models in AWS IoT SiteWise using Java\nDESCRIPTION: Demonstrates how to retrieve a list of all asset models in AWS IoT SiteWise.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/iotsitewise/README.md#2025-04-09_snippet_14\n\nLANGUAGE: Java\nCODE:\n```\nListAssetModels\n```\n\n----------------------------------------\n\nTITLE: Deleting DynamoDB Item in Go\nDESCRIPTION: Deletes a specific movie item from a DynamoDB table based on movie name and year. Requires table name, movie name, and year as input parameters.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/dynamodb/README.md#2025-04-09_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ngo run DeleteTable.go -t TABLE -m MOVIE -y YEAR\n```\n\n----------------------------------------\n\nTITLE: Starting Text Translation Job in Amazon Translate using .NET\nDESCRIPTION: Example showing how to start a batch text translation job using StartTextTranslationJob API\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Translate/README.md#2025-04-09_snippet_2\n\nLANGUAGE: .NET\nCODE:\n```\nBatchTranslateExample/BatchTranslate.cs#L6\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests with npm for AWS SDK JavaScript v3\nDESCRIPTION: Command to run integration tests for JavaScript v3 examples. Output will be stored in integration_test.log.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run integration-test\n```\n\n----------------------------------------\n\nTITLE: Getting S3 Object Legal Hold in JavaScript\nDESCRIPTION: This code snippet shows how to retrieve the legal hold status of an S3 object using the GetObjectLegalHold operation in the AWS SDK for JavaScript (v3).\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/s3/README.md#2025-04-09_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\n- [GetObjectLegalHold](actions/get-object-legal-hold.js)\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies\nDESCRIPTION: Specifies minimum required versions of key Python packages including boto3 for AWS SDK, pytest for testing, requests for HTTP, and coloredlogs for logging.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/cross_service/resilient_service/requirements.txt#2025-04-09_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nboto3>=1.26.79\npytest>=7.2.1\nrequests>=2.29.0\ncoloredlogs>=15.0.1\n```\n\n----------------------------------------\n\nTITLE: Creating CloudWatch Metric Alarm in Kotlin\nDESCRIPTION: This code snippet illustrates how to create a CloudWatch metric alarm using the AWS SDK for Kotlin. It demonstrates a single action within the CloudWatch service.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/cloudwatch/README.md#2025-04-09_snippet_17\n\nLANGUAGE: Kotlin\nCODE:\n```\nPutMetricAlarm\n```\n\n----------------------------------------\n\nTITLE: Listing Databases in Amazon Redshift using Java\nDESCRIPTION: This code snippet demonstrates how to list databases in an Amazon Redshift cluster using the AWS SDK for Java 2.x. It utilizes the ListDatabases operation to retrieve information about all databases in a specified Redshift cluster.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/redshift/README.md#2025-04-09_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\nRedshiftActions.java#L188\n```\n\n----------------------------------------\n\nTITLE: Getting CloudWatch Metric Data in C#\nDESCRIPTION: Method for retrieving metric data from CloudWatch. This is implemented in the CloudWatchWrapper class.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/CloudWatch/README.md#2025-04-09_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nGetMetricData\n```\n\n----------------------------------------\n\nTITLE: Invoking Amazon Titan Image Generator Model in Java\nDESCRIPTION: Demonstrates how to invoke the Amazon Titan Image Generator model using Amazon Bedrock Runtime. The implementation details are located in the specified file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/bedrock-runtime/README.md#2025-04-09_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nsrc/main/java/com/example/bedrockruntime/models/amazonTitanImage/InvokeModel.java#L6\n```\n\n----------------------------------------\n\nTITLE: DynamoDB PartiQL Query Examples in Rust\nDESCRIPTION: Examples showing how to perform PartiQL operations including SELECT for retrieval, INSERT for adding items, UPDATE for modification, and DELETE for removing items using the AWS SDK for Rust.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/dynamodb/README.md#2025-04-09_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n// Located in src/bin/partiql.rs\n```\n\n----------------------------------------\n\nTITLE: List User Pools in Amazon Cognito using Java SDK\nDESCRIPTION: Example showing how to list existing users in a specified Cognito user pool using the listUserPools command with CognitoIdentityProviderClient\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/cognito/README.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nListUserPools.java (referenced but not shown in snippet)\n```\n\n----------------------------------------\n\nTITLE: Creating an EventBridge Schedule in Java\nDESCRIPTION: This code snippet shows how to create an EventBridge Schedule using the AWS SDK for Java 2.x. It's located in the EventbridgeSchedulerActions class.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/scheduler/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nCreateSchedule\n```\n\n----------------------------------------\n\nTITLE: Deleting Multiple Objects from Amazon S3 using AWS SDK for Swift\nDESCRIPTION: This code snippet shows how to delete multiple objects from an Amazon S3 bucket in a single operation using the AWS SDK for Swift.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/swift/example_code/s3/README.md#2025-04-09_snippet_5\n\nLANGUAGE: Swift\nCODE:\n```\nDeleteObjects/Sources/ServiceHandler/ServiceHandler.swift#L59\n```\n\n----------------------------------------\n\nTITLE: Updating IAM Access Key in Java\nDESCRIPTION: This snippet shows how to update an IAM access key using the AWS SDK for Java 2.x.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/iam/README.md#2025-04-09_snippet_16\n\nLANGUAGE: Java\nCODE:\n```\nsrc/main/java/com/example/iam/UpdateAccessKey.java#L6\n```\n\n----------------------------------------\n\nTITLE: Describing Amazon Redshift Clusters in Java\nDESCRIPTION: This code snippet demonstrates how to describe Amazon Redshift clusters using the AWS SDK for Java 2.x. It utilizes the DescribeClusters operation to retrieve detailed information about existing Redshift clusters.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/redshift/README.md#2025-04-09_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nRedshiftActions.java#L132\n```\n\n----------------------------------------\n\nTITLE: Creating a Geofence Collection in Amazon Location Service using Java\nDESCRIPTION: This code snippet shows how to create a geofence collection in Amazon Location Service. It's part of the LocationActions class that provides various Location Service operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/location/README.md#2025-04-09_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nCreateGeofenceCollection\n```\n\n----------------------------------------\n\nTITLE: Single Action SNS Operations with AWS SDK for PHP\nDESCRIPTION: A collection of individual SNS operations including checking opted-out phone numbers, managing subscriptions, creating/deleting topics, handling SMS attributes, and publishing messages. Each operation demonstrates a specific SNS functionality using the PHP SDK.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/php/example_code/sns/README.md#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n- CheckIfPhoneNumberIsOptedOut\n- ConfirmSubscription\n- CreateTopic\n- DeleteTopic\n- GetSMSAttributes\n- GetTopicAttributes\n- ListPhoneNumbersOptedOut\n- ListSubscriptions\n- ListTopics\n- Publish\n- SetSMSAttributes\n- SetTopicAttributes\n- Subscribe\n- Unsubscribe\n```\n\n----------------------------------------\n\nTITLE: Maven Test Command for AWS CodeDeploy\nDESCRIPTION: Command line instruction to execute JUnit tests using Maven for AWS CodeDeploy examples.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/codedeploy/README.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmvn test\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies\nDESCRIPTION: Command to install all required Python packages listed in requirements.txt file using pip package manager within the virtual environment.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Listing AWS Glue Job Runs with .NET\nDESCRIPTION: This snippet demonstrates how to list the runs of an AWS Glue job using the AWS SDK for .NET. It takes the job name as a parameter.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Glue/README.md#2025-04-09_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nGetJobRuns\n```\n\n----------------------------------------\n\nTITLE: Running AWS Organizations Policy Examples\nDESCRIPTION: Command to run the organizations_policies.py script with an optional target parameter for attaching/detaching policies to AWS Organizations resources\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/organizations/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython organizations_policies.py [--target TARGET]\n```\n\n----------------------------------------\n\nTITLE: Setting up CMake Project for S3 Encryption Examples\nDESCRIPTION: Configures the basic CMake project properties including minimum required version, project name, C++ standard, and build settings. It also finds the required AWS SDK components for S3 encryption.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/s3encryption/CMakeLists.txt#2025-04-09_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Set the minimum required version of CMake for this project.\ncmake_minimum_required(VERSION 3.13)\n\n# Set this project's name.\nproject(\"s3-encryption-examples\")\n\n# Set the C++ standard to use to build this target.\nset(CMAKE_CXX_STANDARD 11)\n\n# Enable CTest for testing these code examples.\ninclude(CTest)\n\n# Build shared libraries by default.\nif(NOT BUILD_SHARED_LIBS)\n    set(BUILD_SHARED_LIBS ON)\nendif()\n\n# Build in Debug mode by default\nif (NOT CMAKE_BUILD_TYPE)\n    set(CMAKE_BUILD_TYPE Debug)\nendif()\n\n# Find the AWS SDK for C++ package.\nfind_package(AWSSDK REQUIRED COMPONENTS s3-encryption)\n```\n\n----------------------------------------\n\nTITLE: Creating a Map in Amazon Location Service using Java\nDESCRIPTION: This code snippet shows how to create a map in Amazon Location Service. It's part of the LocationActions class that provides various Location Service operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/location/README.md#2025-04-09_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\nCreateMap\n```\n\n----------------------------------------\n\nTITLE: Creating or Updating Parameter\nDESCRIPTION: Creates or updates a Systems Manager parameter using the PutParameter API.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/ssm/README.md#2025-04-09_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nsrc/main/java/com/example/ssm/PutParameter.java#L6\n```\n\n----------------------------------------\n\nTITLE: Listing Grants for a KMS Key with PHP\nDESCRIPTION: This code snippet shows how to list grants associated with a KMS key using the AWS SDK for PHP. Grants define permissions for using KMS keys.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/php/example_code/kms/README.md#2025-04-09_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\nKmsService.php#L284\n```\n\n----------------------------------------\n\nTITLE: Defining Python Dependencies for AWS SDK Examples\nDESCRIPTION: Specifies the required Python packages with minimum version requirements for AWS SDK examples. It includes boto3 for AWS SDK access, pytest for testing, qrcode for QR code generation, and pycognito for Amazon Cognito integration.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/cognito/requirements.txt#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nboto3>=1.26.79\npytest>=7.2.1\nqrcode>=7.4.2\npycognito>=2022.12.0\n```\n\n----------------------------------------\n\nTITLE: Creating a DB Snapshot with Amazon RDS in C#\nDESCRIPTION: This code shows how to create a snapshot of a DB instance using the Amazon RDS API. It's part of the RDSWrapper class handling snapshot-related operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/RDS/README.md#2025-04-09_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nCreateDBSnapshot\n```\n\n----------------------------------------\n\nTITLE: Creating DB Snapshot using Amazon RDS in Java\nDESCRIPTION: This code snippet shows how to create a DB snapshot using Amazon RDS with AWS SDK for Java 2.x. It is part of a larger RDS scenario.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/rds/README.md#2025-04-09_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nsrc/main/java/com/example/rds/RDSScenario.java#L328\n```\n\n----------------------------------------\n\nTITLE: Multi-factor Authentication Setup with Amazon Cognito in Java\nDESCRIPTION: Scenario demonstrating how to sign up a new user with Amazon Cognito and associate them with an MFA application for multi-factor authentication using various SDK commands\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/cognito/README.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nCognitoMVP.java (referenced but not shown in snippet)\n```\n\n----------------------------------------\n\nTITLE: Conversing with Meta Llama model in C#\nDESCRIPTION: Shows how to initiate a conversation with the Meta Llama model using Amazon Bedrock Runtime.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv4/Bedrock-runtime/README.md#2025-04-09_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\nModels/MetaLlama/Converse/Converse.cs#L4\n```\n\n----------------------------------------\n\nTITLE: Describe Gateway in AWS IoT SiteWise using Java\nDESCRIPTION: Shows how to retrieve detailed information about a gateway in AWS IoT SiteWise.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/iotsitewise/README.md#2025-04-09_snippet_11\n\nLANGUAGE: Java\nCODE:\n```\nDescribeGateway\n```\n\n----------------------------------------\n\nTITLE: Deleting a Subscription Filter in CloudWatch Logs with C++\nDESCRIPTION: This code snippet demonstrates how to delete a subscription filter in CloudWatch Logs using the AWS SDK for C++. It references a function located in the 'delete_subscription_filter.cpp' file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/cloudwatch-logs/README.md#2025-04-09_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nDeleteSubscriptionFilter(delete_subscription_filter.cpp#L17)\n```\n\n----------------------------------------\n\nTITLE: Creating Lambda Functions with AWS SDK for .NET\nDESCRIPTION: Creates a Lambda function with the specified name, handler name, role ARN, and function code. The function is created with the provided parameters and configurations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Lambda/README.md#2025-04-09_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n/// <summary>\n/// Creates a new Lambda function.\n/// </summary>\n/// <param name=\"functionName\">The name of the function.</param>\n/// <param name=\"handlerName\">The fully qualified name of the handler.</param>\n/// <param name=\"roleArn\">The ARN of the role that will provide\n/// credentials to the function.</param>\n/// <param name=\"zipFilePath\">The complete path to the zip file</param>\n/// <returns>The Amazon Resource Name (ARN) of the newly created\n/// Lambda function.</returns>\npublic async Task<string> CreateLambdaFunction(\n    string functionName,\n    string handlerName,\n    string roleArn,\n    string zipFilePath)\n{\n    var functionCode = new FunctionCode\n    {\n        ZipFile = await File.ReadAllBytesAsync(zipFilePath),\n    };\n\n    var createFunctionRequest = new CreateFunctionRequest\n    {\n        FunctionName = functionName,\n        Description = \"Created by the Lambda .NET API\",\n        Handler = handlerName,\n        Timeout = 30,\n        MemorySize = 128,\n        Publish = true,\n        Runtime = Runtime.Dotnet6,\n        Role = roleArn,\n        Code = functionCode,\n    };\n\n    var reponse = await _lambdaService.CreateFunctionAsync(createFunctionRequest);\n    return reponse.FunctionArn;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Go Unit Tests for S3 Examples\nDESCRIPTION: Demonstrates how to run unit tests for the S3 example code. The tests create and delete resources as needed, potentially resulting in AWS charges.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/s3/README.md#2025-04-09_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ngo test\n```\n\nLANGUAGE: go\nCODE:\n```\ngo test -test.v\n```\n\n----------------------------------------\n\nTITLE: Invoking Lambda Function via CURL\nDESCRIPTION: Example curl command to invoke the Lambda function through API Gateway's REST endpoint\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_lambda_apigateway/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -XGET \"https://xxxxqjko1o3.execute-api.us-east-1.amazonaws.com/cronstage/employee\"\n```\n\n----------------------------------------\n\nTITLE: Deleting an EventBridge Schedule in Java\nDESCRIPTION: This code snippet shows how to delete an EventBridge Schedule using the AWS SDK for Java 2.x. It's located in the EventbridgeSchedulerActions class.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/scheduler/README.md#2025-04-09_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nDeleteSchedule\n```\n\n----------------------------------------\n\nTITLE: Configuring DLL Imports for AWS SDK C++ Examples\nDESCRIPTION: This snippet sets up an import rule to copy all DLL files from the packages' bin folder to the local 'bin' folder. This ensures that required DLLs are available in the project's bin directory.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/cross-service/serverless-aurora/conanfile.txt#2025-04-09_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[imports]\nbin, *.dll -> ./bin # Copies all dll files from packages bin folder to my local \"bin\" folder\n```\n\n----------------------------------------\n\nTITLE: Invoking AI21 Labs Jurassic-2 Model in PHP\nDESCRIPTION: This code snippet demonstrates how to invoke the AI21 Labs Jurassic-2 model using the Amazon Bedrock Runtime service. It's part of a larger BedrockRuntimeService class.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/php/example_code/bedrock-agent-runtime/README.md#2025-04-09_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nBedrockRuntimeService.php#L64\n```\n\n----------------------------------------\n\nTITLE: Listing OpenSearch Versions in Java\nDESCRIPTION: This code snippet demonstrates how to list OpenSearch versions using the AWS SDK for Java 2.x. It's part of a 'Hello OpenSearch' example to get started with the service.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/opensearch/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\n// HelloOpenSearch.java#L6\n// Code for ListVersions operation\n```\n\n----------------------------------------\n\nTITLE: Creating a Receipt Filter in Amazon SES using C++\nDESCRIPTION: This code snippet demonstrates how to create a receipt filter in Amazon SES using the AWS SDK for C++. It references a function in the 'create_receipt_filter.cpp' file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/ses/README.md#2025-04-09_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n// See create_receipt_filter.cpp, line 24\n```\n\n----------------------------------------\n\nTITLE: Copying Parts of an Object in S3 in Java\nDESCRIPTION: Code example that demonstrates how to copy parts of an object during a multipart upload using the UploadPartCopy operation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/s3/README.md#2025-04-09_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\n- [UploadPartCopy](src/main/java/com/example/s3/scenario/S3Actions.java#L379)\n```\n\n----------------------------------------\n\nTITLE: Setting Desired Capacity for Auto Scaling Group in Rust\nDESCRIPTION: This code snippet shows how to use the SetDesiredCapacity operation to adjust the desired capacity of an Auto Scaling group using the AWS SDK for Rust.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/auto-scaling/README.md#2025-04-09_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nsrc/scenario.rs#L595\n```\n\n----------------------------------------\n\nTITLE: Create Vault Command Usage\nDESCRIPTION: Command line syntax for running the CreateVault example to create an S3 Glacier vault\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/glacier/README.md#2025-04-09_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngo run CreateVault -v VAULT-NAME\n```\n\n----------------------------------------\n\nTITLE: Updating an Item in DynamoDB using Java\nDESCRIPTION: This code snippet illustrates how to update an existing item in a DynamoDB table using the AWS SDK for Java 2.x. It shows the process of modifying data in the database.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/dynamodb/README.md#2025-04-09_snippet_11\n\nLANGUAGE: Java\nCODE:\n```\nsrc/main/java/com/example/dynamodb/UpdateItem.java#L6\n```\n\n----------------------------------------\n\nTITLE: Running AWS KMS CreateKey Example in Go\nDESCRIPTION: Command to run the CreateKey example which creates an AWS KMS key. Requires key name and value arguments.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/kms/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngo run CreateKey.go -k KEY-NAME -v KEY-VALUE\n```\n\n----------------------------------------\n\nTITLE: Describing Amazon Redshift Clusters in Java\nDESCRIPTION: This code snippet demonstrates how to describe Amazon Redshift clusters using the AWS SDK for Java 2.x. It uses the DescribeClusters operation to retrieve information about Redshift clusters.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/redshift/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nHelloRedshift.java#L6\n```\n\n----------------------------------------\n\nTITLE: Describing a State Machine in AWS Step Functions with Kotlin\nDESCRIPTION: Illustrates how to describe a state machine in AWS Step Functions using the AWS SDK for Kotlin and the describeStateMachine command.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/stepfunctions/README.md#2025-04-09_snippet_6\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Code not provided in the given content\n```\n\n----------------------------------------\n\nTITLE: Synthesizing Speech using Amazon Polly in Java\nDESCRIPTION: This class uses Amazon Polly to synthesize speech from text. It initializes a PollyAsyncClient, describes available voices, selects the 'Joanna' voice, and synthesizes speech asynchronously, returning an InputStream of the audio.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_fsa_app/README.md#2025-04-09_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\npackage com.example.fsa.services;\n\nimport software.amazon.awssdk.core.ResponseInputStream;\nimport software.amazon.awssdk.core.async.AsyncResponseTransformer;\nimport software.amazon.awssdk.regions.Region;\nimport software.amazon.awssdk.services.polly.PollyAsyncClient;\nimport software.amazon.awssdk.services.polly.model.DescribeVoicesRequest;\nimport software.amazon.awssdk.services.polly.model.PollyException;\nimport software.amazon.awssdk.services.polly.model.SynthesizeSpeechRequest;\nimport software.amazon.awssdk.services.polly.model.SynthesizeSpeechResponse;\nimport software.amazon.awssdk.services.polly.model.Voice;\nimport software.amazon.awssdk.services.polly.model.DescribeVoicesResponse;\nimport software.amazon.awssdk.services.polly.model.OutputFormat;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.concurrent.CompletableFuture;\n\npublic class PollyService {\n    private static PollyAsyncClient pollyAsyncClient;\n\n    private static synchronized PollyAsyncClient getPollyAsyncClient() {\n        if (pollyAsyncClient == null) {\n            Region region = Region.US_EAST_1;\n            pollyAsyncClient = PollyAsyncClient.builder()\n                .region(region)\n                .build();\n        }\n        return pollyAsyncClient;\n    }\n\n    public InputStream synthesize(String text) throws IOException {\n        try {\n            DescribeVoicesRequest describeVoicesRequest = DescribeVoicesRequest.builder()\n                .engine(\"neural\")\n                .build();\n\n            CompletableFuture<?> future  = getPollyAsyncClient().describeVoices(describeVoicesRequest);\n            DescribeVoicesResponse describeVoicesResult = (DescribeVoicesResponse) future.join();\n            Voice voice = describeVoicesResult.voices().stream()\n                .filter(v -> v.name().equals(\"Joanna\"))\n                .findFirst()\n                .orElseThrow(() -> new RuntimeException(\"Voice not found\"));\n\n            SynthesizeSpeechRequest request = SynthesizeSpeechRequest.builder()\n                .text(text)\n                .outputFormat(OutputFormat.MP3)\n                .voiceId(voice.id())\n                .build();\n\n            CompletableFuture<ResponseInputStream<SynthesizeSpeechResponse>> audioFuture = getPollyAsyncClient().synthesizeSpeech(request, AsyncResponseTransformer.toBlockingInputStream());\n            InputStream audioInputStream = audioFuture.join();\n            return audioInputStream;\n\n        } catch (PollyException e) {\n            System.err.println(e.awsErrorDetails().errorMessage());\n            throw e;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Support Case Management\nDESCRIPTION: Complete scenario showing how to manage AWS Support cases including creating cases, adding attachments, communicating, and resolving cases.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Support/README.md#2025-04-09_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nSupportCaseScenario.cs\n```\n\n----------------------------------------\n\nTITLE: Listing Receipt Filters in Amazon SES using C++\nDESCRIPTION: This code snippet demonstrates how to list receipt filters in Amazon SES using the AWS SDK for C++. The implementation is in the 'list_receipt_filters.cpp' file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/ses/README.md#2025-04-09_snippet_11\n\nLANGUAGE: C++\nCODE:\n```\n// See list_receipt_filters.cpp, line 22\n```\n\n----------------------------------------\n\nTITLE: Putting an Item into DynamoDB in Java\nDESCRIPTION: This code snippet illustrates how to insert a new item into a DynamoDB table using the AWS SDK for Java 2.x. It shows the process of adding new data to the database.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/dynamodb/README.md#2025-04-09_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\nsrc/main/java/com/example/dynamodb/PutItem.java#L6\n```\n\n----------------------------------------\n\nTITLE: Building Hello Autoscaling with CMake\nDESCRIPTION: Commands for building the 'hello_autoscaling' application using CMake from a command line interface. These commands create a build directory, navigate to it, and then build the project.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/autoscaling/hello_autoscaling/README.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmkdir build \ncd build\ncmake --build ..\n```\n\n----------------------------------------\n\nTITLE: Queue Tag Management\nDESCRIPTION: Examples demonstrating how to perform tagging operations with Amazon SQS queues, including adding, removing, and managing tags for organization and access control.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/sqs/README.md#2025-04-09_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\n// File reference:\n// - src/main/java/com/example/sqs/TagExamples.java\n```\n\n----------------------------------------\n\nTITLE: Deleting Multiple S3 Objects in PHP\nDESCRIPTION: Code that demonstrates how to delete multiple objects from an S3 bucket in a single operation using the AWS SDK for PHP. This is more efficient than deleting objects individually.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/php/example_code/s3/README.md#2025-04-09_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nDeleteObjects\n```\n\n----------------------------------------\n\nTITLE: Running Go Unit Tests\nDESCRIPTION: Commands for executing unit tests for AWS STS code examples, showing both basic test execution and verbose logging output.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/sts/README.md#2025-04-09_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nPASS\nok      PATH 6.593s\n```\n\n----------------------------------------\n\nTITLE: Deleting DB Parameter Group using Amazon RDS in Java\nDESCRIPTION: This code snippet shows how to delete a DB parameter group using Amazon RDS with AWS SDK for Java 2.x. It is part of a larger RDS scenario.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/rds/README.md#2025-04-09_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\nsrc/main/java/com/example/rds/RDSScenario.java#L224\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version and Core Project Properties\nDESCRIPTION: Establishes the minimum required CMake version and defines basic project properties including the service name, target names, and required AWS dependencies.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/autoscaling/tests/CMakeLists.txt#2025-04-09_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Set the minimum required version of CMake for this project.\ncmake_minimum_required(VERSION 3.14)\n\nset(EXAMPLE_SERVICE_NAME \"autoscaling\")\nset(CURRENT_TARGET \"${EXAMPLE_SERVICE_NAME}_gtest\")\nset(CURRENT_TARGET_AWS_DEPENDENCIES  autoscaling ec2 monitoring)\n\n# Set this project's name.\nproject(\"${EXAMPLE_SERVICE_NAME}-examples-gtests\" )\n\n# Set the C++ standard to use to build this target.\nset(CMAKE_CXX_STANDARD 14)\n\n# Build shared libraries by default.\nset(BUILD_SHARED_LIBS ON)\n```\n\n----------------------------------------\n\nTITLE: Configuring VPC Subnet Filters\nDESCRIPTION: Python dictionary for filtering VPC subnets based on VPC ID, availability zones, and default subnet status.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/resilient_service/SPECIFICATION.md#2025-04-09_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nFilters=[\n    {'Name': 'vpc-id', 'Values': [vpc_id]},\n    {'Name': 'availability-zone', 'Values': zones},\n    {'Name': 'default-for-az', 'Values': ['true']}])\n```\n\n----------------------------------------\n\nTITLE: Scheduling KMS Key Deletion with PHP\nDESCRIPTION: This code snippet shows how to schedule the deletion of a KMS key using the AWS SDK for PHP. It sets a waiting period before the key is deleted.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/php/example_code/kms/README.md#2025-04-09_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\nKmsService.php#L346\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for AWS CodeCommit Examples in C++\nDESCRIPTION: This CMake script sets up a project for building AWS CodeCommit example applications. It requires CMake 3.13 or higher, sets the C++ standard to 11, finds the AWS SDK for C++, and creates executable targets for various CodeCommit operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/codecommit/CMakeLists.txt#2025-04-09_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nproject(codecommit-examples)\nset (CMAKE_CXX_STANDARD 11)\n\n# Locate the aws sdk for c++ package.\nfind_package(AWSSDK REQUIRED COMPONENTS codecommit)\n\nset(EXAMPLES \"\")\nlist(APPEND EXAMPLES \"create_pull_request\")\nlist(APPEND EXAMPLES \"create_repository\")\nlist(APPEND EXAMPLES \"delete_branch\")\nlist(APPEND EXAMPLES \"delete_repository\")\nlist(APPEND EXAMPLES \"list_branches\")\nlist(APPEND EXAMPLES \"list_pull_requests\")\nlist(APPEND EXAMPLES \"update_pull_request\")\nlist(APPEND EXAMPLES \"update_repository\")\n\n# The executables to build.\nforeach(EXAMPLE IN LISTS EXAMPLES)\n  add_executable(${EXAMPLE} ${EXAMPLE}.cpp)\n  target_link_libraries(${EXAMPLE} ${AWSSDK_LINK_LIBRARIES})\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Describing DB Parameters with Amazon RDS in C#\nDESCRIPTION: This code shows how to retrieve information about DB parameters using the Amazon RDS API. It's part of the RDSWrapper class handling parameter-related operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/RDS/README.md#2025-04-09_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nDescribeDBParameters\n```\n\n----------------------------------------\n\nTITLE: Describing DB Snapshots with Amazon RDS in C#\nDESCRIPTION: This snippet illustrates how to retrieve information about DB snapshots using the Amazon RDS API. It's part of the RDSWrapper class focused on snapshot-related operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/RDS/README.md#2025-04-09_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nDescribeDBSnapshots\n```\n\n----------------------------------------\n\nTITLE: Listing MediaStore Containers in Kotlin\nDESCRIPTION: Shows how to retrieve a list of all MediaStore containers in your AWS account using the AWS SDK for Kotlin. This operation requires appropriate IAM permissions.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/mediastore/README.md#2025-04-09_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nListContainers - Demonstrates how to list your MediaStore containers.\n```\n\n----------------------------------------\n\nTITLE: List ECS Clusters Example - C#\nDESCRIPTION: Code excerpt demonstrating how to list all ECS clusters in your AWS account using the ListClusters API call.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv4/ECS/README.md#2025-04-09_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nListClusters\n```\n\n----------------------------------------\n\nTITLE: Getting Table Information in Amazon Keyspaces using C#\nDESCRIPTION: This code snippet demonstrates how to retrieve information about a specific table in Amazon Keyspaces using the AWS SDK for .NET. It's an example of a single action operation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Keyspaces/README.md#2025-04-09_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nActions/KeyspacesWrapper.cs#L109\n```\n\n----------------------------------------\n\nTITLE: Deleting a Lambda Function in Go\nDESCRIPTION: This code snippet demonstrates how to delete a Lambda function using the AWS SDK for Go V2. It's one of the single actions available for Lambda operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/gov2/lambda/README.md#2025-04-09_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nDeleteFunction\n```\n\n----------------------------------------\n\nTITLE: Building Hello Amazon Cognito project with CMake\nDESCRIPTION: Commands to build the Hello Amazon Cognito project using CMake. This creates a build directory, changes to it, and builds the project.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/cognito/hello_cognito/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmkdir build \ncd build\ncmake --build ..\n```\n\n----------------------------------------\n\nTITLE: Create Asset in AWS IoT SiteWise using Java\nDESCRIPTION: Demonstrates how to create a new asset in AWS IoT SiteWise.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/iotsitewise/README.md#2025-04-09_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nCreateAsset\n```\n\n----------------------------------------\n\nTITLE: Running CloudWatch Events Example in Node.js\nDESCRIPTION: This snippet demonstrates how to run a CloudWatch Events example script using Node.js. It shows the command to execute a JavaScript file after replacing hard-coded values with user-specific data.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascript/example_code/cloudwatch-events/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode cwe_putevents.js\n```\n\n----------------------------------------\n\nTITLE: Adding an Attachment to a Support Case in Java\nDESCRIPTION: Shows how to add an attachment to an existing support case using the AWS Support API. This can be useful for providing additional information or documentation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/support/README.md#2025-04-09_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nAddAttachmentsToSetResponse addAttachmentResponse = supportClient.addAttachmentsToSet(\n    AddAttachmentsToSetRequest.builder()\n        .attachments(Attachment.builder()\n            .fileName(attachmentFileName)\n            .data(SdkBytes.fromByteArray(fileContent))\n            .build())\n        .build()\n);\n```\n\n----------------------------------------\n\nTITLE: Check Domain Availability with Route 53 in C#\nDESCRIPTION: Checks the availability of a domain name for registration using Amazon Route 53. Takes a domain name as input and returns information about its availability status and pricing.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Route53/README.md#2025-04-09_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n/// <summary>\n/// Check the availability of a domain name.\n/// </summary>\n/// <param name=\"domainName\">The domain name to check.</param>\n/// <returns>An availability result string.</returns>\npublic async Task<string> CheckDomainAvailability(string domainName)\n{\n    var result = await _amazonRoute53Domains.CheckDomainAvailabilityAsync(\n        new CheckDomainAvailabilityRequest\n        {\n            DomainName = domainName\n        }\n    );\n    return result.Availability.Value;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SageMaker Execution Policy for Lambda, S3, and SQS Operations\nDESCRIPTION: JSON policy document defining permissions for SageMaker to invoke Lambda functions, access S3 resources, and send messages to SQS. This policy enables the pipeline to interact with the necessary AWS services.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/sagemaker_pipelines/SPECIFICATION.md#2025-04-09_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n   Version: \"2012-10-17\",\n   Statement: [\n   {\n       Effect: \"Allow\",\n       Action: [\"lambda:InvokeFunction\"],\n       Resource: lambdaArn,\n   },\n   {\n       Effect: \"Allow\",\n       Action: [\"s3:*\"],\n        Resource: [\n            `arn:aws:s3:::${s3BucketName}`,\n            `arn:aws:s3:::${s3BucketName}/*`,\n        ],\n   },\n   {\n       Effect: \"Allow\",\n       Action: [\"sqs:SendMessage\"],\n       Resource: sqsQueueArn,\n   },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Deregistering AWS Batch Job Definition in Java\nDESCRIPTION: Demonstrates how to deregister a job definition in AWS Batch using the deregisterJobDefinition operation. This removes job definitions that are no longer required.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/batch/README.md#2025-04-09_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\nDeregisterJobDefinition\n```\n\n----------------------------------------\n\nTITLE: Listing Images in Amazon ECR with Java\nDESCRIPTION: References the Hello Amazon ECR example which demonstrates how to list images in an ECR repository using the listImages operation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/ecr/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\n// Referenced from HelloECR.java#L6\n```\n\n----------------------------------------\n\nTITLE: Changing OpenSearch Domain Progress in Java\nDESCRIPTION: This code snippet demonstrates how to change the progress of an OpenSearch domain using the AWS SDK for Java 2.x. It's part of the OpenSearchActions class.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/opensearch/README.md#2025-04-09_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\n// OpenSearchActions.java#L215\n// Code for ChangeProgress operation\n```\n\n----------------------------------------\n\nTITLE: Describing VPC Subnets\nDESCRIPTION: Shows how to retrieve information about subnets within a Virtual Private Cloud (VPC). Subnets are segments of a VPC's IP address range where resources can be placed.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/EC2/README.md#2025-04-09_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\n// DescribeSubnets\n```\n\n----------------------------------------\n\nTITLE: Email Template Success Response\nDESCRIPTION: HTTP response structure for a successful email template creation. Returns a 200 status code with an empty response body.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/sesv2_weekly_mailer/content/10_CreateEmailTemplate.md#2025-04-09_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\n```\n\n----------------------------------------\n\nTITLE: Putting a Subscription Filter in CloudWatch Logs with C++\nDESCRIPTION: This code example illustrates how to put a subscription filter in CloudWatch Logs using the AWS SDK for C++. The function is implemented in the 'put_subscription_filter.cpp' file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/cloudwatch-logs/README.md#2025-04-09_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nPutSubscriptionFilter(put_subscription_filter.cpp#L16)\n```\n\n----------------------------------------\n\nTITLE: Running EC2 Instances in .NET\nDESCRIPTION: This code snippet demonstrates how to run EC2 instances using the AWS SDK for .NET. It's part of the EC2Wrapper class that provides various EC2 functionalities.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv4/EC2/README.md#2025-04-09_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\nRunInstances\n```\n\n----------------------------------------\n\nTITLE: Reference Links for Amazon Polly Examples\nDESCRIPTION: File references showing the locations of individual service function examples including DescribeVoices, ListLexicons, and SynthesizeSpeech implementations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/ruby/example_code/polly/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n- [DescribeVoices](polly_describe_voices.rb#L8)\n- [ListLexicons](polly_list_lexicons.rb#L8)\n- [SynthesizeSpeech](polly_synthesize_speech.rb#L8)\n```\n\n----------------------------------------\n\nTITLE: Finding AWS SDK Dependencies for Rekognition\nDESCRIPTION: Locates the AWS SDK for C++ package with the required Rekognition components using CMake's find_package mechanism.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/rekognition/CMakeLists.txt#2025-04-09_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Find the AWS SDK for C++ package.\nfind_package(AWSSDK REQUIRED COMPONENTS ${SERVICE_COMPONENTS})\n```\n\n----------------------------------------\n\nTITLE: Hello AWS IoT SiteWise in Java\nDESCRIPTION: Demonstrates how to get started with AWS IoT SiteWise by listing asset models.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/iotsitewise/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nListAssetModels\n```\n\n----------------------------------------\n\nTITLE: Describing ECR Repositories with Java\nDESCRIPTION: Shows how to retrieve information about ECR repositories using the DescribeRepositories API.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/ecr/README.md#2025-04-09_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\n// Referenced from ECRActions.java#L284\n```\n\n----------------------------------------\n\nTITLE: Building the Hello S3 C++ Example with CMake\nDESCRIPTION: Shell commands to build the Hello Amazon S3 example using CMake. This creates a build directory, navigates into it, and builds the project which will generate an executable named 'hello_s3'.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/s3/hello_s3/README.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmkdir build \ncd build\ncmake --build ..\n```\n\n----------------------------------------\n\nTITLE: Listing AWS IoT Certificates using Kotlin\nDESCRIPTION: This snippet illustrates how to list AWS IoT Certificates using the ListCertificates operation in the AWS SDK for Kotlin.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/iot/README.md#2025-04-09_snippet_10\n\nLANGUAGE: Kotlin\nCODE:\n```\nListCertificates\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for AWS SDK JavaScript v3\nDESCRIPTION: Command to build a Docker image containing all JavaScript v3 examples with dependencies. Requires Docker to be installed and running.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/README.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t <image_name> -f javascriptv3/Dockerfile .\n```\n\n----------------------------------------\n\nTITLE: S3 Bucket Item Model Class in Java\nDESCRIPTION: BucketItem class that represents an S3 object with properties for key, owner, date, and size. Provides getters and setters for all properties.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_photo_analyzer_async/README.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.photo;\n\npublic class BucketItem {\n\n    private String key;\n    private String owner;\n    private String date ;\n    private String size ;\n\n\n    public void setSize(String size) {\n        this.size = size ;\n    }\n\n    public String getSize() {\n        return this.size ;\n    }\n\n    public void setDate(String date) {\n        this.date = date ;\n    }\n\n    public String getDate() {\n        return this.date ;\n    }\n\n    public void setOwner(String owner) {\n        this.owner = owner ;\n    }\n\n    public String getOwner() {\n        return this.owner ;\n    }\n\n\n    public void setKey(String key) {\n        this.key = key ;\n    }\n\n    public String getKey() {\n        return this.key ;\n    }\n    }\n```\n\n----------------------------------------\n\nTITLE: Running the Amazon Polly Lip-Sync Application Example\nDESCRIPTION: Command to start the Amazon Polly lip-sync GUI application example, which allows users to enter text and select voice parameters for speech synthesis.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/polly/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython polly_lipsync.py\n```\n\n----------------------------------------\n\nTITLE: Executing Deploy Stage for S3 Object Lock Workflow in Bash\nDESCRIPTION: This command runs the deploy stage of the S3 Object Lock workflow. It creates buckets with different object locking configurations, populates them with objects, and sets object lock and retention policies.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/s3/scenarios/object-locking/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode index.js -s deploy\n```\n\n----------------------------------------\n\nTITLE: Running PHPUnit Tests\nDESCRIPTION: Commands to run PHPUnit tests for the code examples, with options for filtering by test suite or test type (integration or unit tests).\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/php/README.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nphpunit\n```\n\nLANGUAGE: bash\nCODE:\n```\nphpunit --testsuite <testsuite-name>\n```\n\nLANGUAGE: bash\nCODE:\n```\nphpunit --group integ\n```\n\nLANGUAGE: bash\nCODE:\n```\nphpunit --group unit\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for AWS SDK Examples\nDESCRIPTION: This code snippet lists the required Python packages and their minimum versions for AWS SDK examples and related projects. It includes dependencies for AWS services, web frameworks, data processing, and utility libraries.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/test_tools/requirements.txt#2025-04-09_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nawscli>=1.27.81\namazon-dax-client>=1.1.7\nboto3>=1.26.81\ncassandra-driver>=3.25.0\ncassandra-sigv4>=4.0.2\nchalice<=1.27.1\nflask>=2.2.0\nflask-cors>=3.0.10\nflask-restful>=0.3.9\nnumpy>=1.24.2\npillow>=9.4.0\nplaysound==1.2.2\npytest>=7.2.1\nqrcode>=7.4.2\nrequests>=2.28.2\npycognito>=2022.12.0\nwebargs>=8.2.0\nwebsockets>=10.4\n```\n\n----------------------------------------\n\nTITLE: Enabling a KMS Key with PHP\nDESCRIPTION: This example demonstrates how to enable a previously disabled KMS key using the AWS SDK for PHP. Enabling a key allows it to be used for cryptographic operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/php/example_code/kms/README.md#2025-04-09_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nKmsService.php#L238\n```\n\n----------------------------------------\n\nTITLE: Invoking Amazon Bedrock Prompt Flow in Java\nDESCRIPTION: This code example demonstrates how to invoke an Amazon Bedrock Prompt Flow using the AWS SDK for Java 2.x. It is located in the InvokeFlow.java file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/bedrock-agents-runtime/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nsrc/main/java/com/example/bedrockagents/runtime/InvokeFlow.java#L30\n```\n\n----------------------------------------\n\nTITLE: Deleting ECS Service with Kotlin SDK\nDESCRIPTION: Example demonstrating how to delete a service from Amazon ECS using the AWS SDK for Kotlin. This allows removing services that are no longer needed.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/ecs/README.md#2025-04-09_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Deleting a DB Parameter Group with Amazon RDS in C#\nDESCRIPTION: This code demonstrates how to delete a DB parameter group using the Amazon RDS API. It's part of the RDSWrapper class handling parameter group operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/RDS/README.md#2025-04-09_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nDeleteDBParameterGroup\n```\n\n----------------------------------------\n\nTITLE: Setting SNS Topic Attributes using AWS SDK for Kotlin\nDESCRIPTION: This code snippet shows how to set attributes for an Amazon SNS topic using the AWS SDK for Kotlin.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/sns/README.md#2025-04-09_snippet_7\n\nLANGUAGE: Kotlin\nCODE:\n```\nsrc/main/kotlin/com/kotlin/sns/SetTopicAttributes.kt#L41\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for Elastic Load Balancing V2 Examples in Python\nDESCRIPTION: This snippet shows how to install the necessary packages for running the Elastic Load Balancing V2 examples using pip in a virtual environment.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/elastic-load-balancing/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Deleting S3 Bucket Websites in JavaScript\nDESCRIPTION: This code snippet shows how to delete the website configuration of an S3 bucket using the DeleteBucketWebsite operation in the AWS SDK for JavaScript (v3).\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/s3/README.md#2025-04-09_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n- [DeleteBucketWebsite](actions/delete-bucket-website.js#L4)\n```\n\n----------------------------------------\n\nTITLE: Deleting an Auto Scaling Group in Rust\nDESCRIPTION: This code snippet demonstrates how to use the DeleteAutoScalingGroup operation to remove an existing Auto Scaling group using the AWS SDK for Rust.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/auto-scaling/README.md#2025-04-09_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nsrc/bin/delete-autoscaling-group.rs#L30\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter C++ Wrapper Libraries in CMake\nDESCRIPTION: Creates and configures C++ wrapper libraries for the Flutter engine, including core implementations, plugin registrar, and view controller. Sets up source files and properties for the plugin and app wrapper libraries.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/cognito_flutter_mobile_app/windows/flutter/CMakeLists.txt#2025-04-09_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# === Wrapper ===\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n\n# Wrapper sources needed for a plugin.\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n\n# Wrapper sources needed for the runner.\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Create Portal in AWS IoT SiteWise using Java\nDESCRIPTION: Shows how to create a new portal in AWS IoT SiteWise.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/iotsitewise/README.md#2025-04-09_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\nCreatePortal\n```\n\n----------------------------------------\n\nTITLE: Creating Python Virtual Environment\nDESCRIPTION: Command to create a new Python virtual environment for isolating project dependencies\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/bedrock-runtime/cross-model-scenarios/tool_use_demo/README.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython -m venv .venv\n```\n\n----------------------------------------\n\nTITLE: Deleting Auto Scaling Group in PHP\nDESCRIPTION: Deletes an Auto Scaling group. This function removes an Auto Scaling group from AWS, with an option to force delete even if instances are running.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/php/example_code/auto-scaling/README.md#2025-04-09_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nDeleteAutoScalingGroup\n```\n\n----------------------------------------\n\nTITLE: Check Domain Transferability with Route 53 in C#\nDESCRIPTION: Checks whether a domain name can be transferred to Amazon Route 53. Takes a domain name as input and returns information about its transferability status.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Route53/README.md#2025-04-09_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n/// <summary>\n/// Check the transferability of a domain name.\n/// </summary>\n/// <param name=\"domainName\">The domain name to check.</param>\n/// <returns>The transferability result.</returns>\npublic async Task<string> CheckDomainTransferability(string domainName)\n{\n    var result = await _amazonRoute53Domains.CheckDomainTransferabilityAsync(\n        new CheckDomainTransferabilityRequest\n        {\n            DomainName = domainName\n        }\n    );\n    return result.Transferability.Transferable.Value;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Email Template with SES v2 API\nDESCRIPTION: Details the CreateEmailTemplate operation for setting up a newsletter template. Includes parameters for template name, subject, and content sources that should be loaded from HTML and text files.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/sesv2_weekly_mailer/content/30_SPECIFICATION.md#2025-04-09_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n- Operation: **CreateEmailTemplate**\n  - Parameters:\n    - `TemplateName`: `weekly-coupons`\n    - `TemplateContent`:\n      - `Subject`: `Weekly Coupons Newsletter`\n      - `Html`: Read from the `coupon-newsletter.html` file\n      - `Text`: Read from the `coupon-newsletter.txt` file\n  - Errors:\n    - `AlreadyExistsException`: If the template already exists, skip this step and proceed with the next operation. This error can be safely ignored.\n    - `LimitExceededException`: If the limit for email templates is exceeded, fail the workflow and inform the user that they have reached the limit for email templates.\n```\n\n----------------------------------------\n\nTITLE: Invoking Meta Llama 3 model in C#\nDESCRIPTION: Shows how to invoke the Meta Llama 3 model using Amazon Bedrock Runtime.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv4/Bedrock-runtime/README.md#2025-04-09_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\nModels/MetaLlama/Llama3_InvokeModel/InvokeModel.cs#L4\n```\n\n----------------------------------------\n\nTITLE: Running Dataset Creation Example\nDESCRIPTION: Command to execute the dataset creation example that demonstrates manifest file creation and upload to S3.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/lookoutvision/README.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython datasets.py\n```\n\n----------------------------------------\n\nTITLE: Pushing Docker Image to ECR with Java\nDESCRIPTION: Demonstrates how to push a Docker image to an ECR repository using the PushImageCmd operation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/ecr/README.md#2025-04-09_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\n// Referenced from ECRActions.java#L451\n```\n\n----------------------------------------\n\nTITLE: Deleting an Item from DynamoDB in Java\nDESCRIPTION: This code snippet shows how to delete a single item from a DynamoDB table using the AWS SDK for Java 2.x. It demonstrates the process of removing data from the database.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/dynamodb/README.md#2025-04-09_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nsrc/main/java/com/example/dynamodb/DeleteItem.java#L6\n```\n\n----------------------------------------\n\nTITLE: Describing Auto Scaling Groups in PHP\nDESCRIPTION: Retrieves information about Auto Scaling groups. This function returns details about configured Auto Scaling groups, including their settings and instances.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/php/example_code/auto-scaling/README.md#2025-04-09_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nDescribeAutoScalingGroups\n```\n\n----------------------------------------\n\nTITLE: List SES Identities using Java\nDESCRIPTION: Shows how to list email identities in Amazon SES using AWS SDK for Java 2.x. Located in src/main/java/com/example/ses/ListIdentities.java.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/ses/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\ncom.example.ses.ListIdentities.java#L6\n```\n\n----------------------------------------\n\nTITLE: Listing State Machines with AWS Step Functions Java SDK\nDESCRIPTION: This code snippet demonstrates how to list existing state machines using the AWS Step Functions Java SDK. It uses the listStateMachines command to retrieve a list of state machines.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/stepfunctions/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\n// Code snippet for listing state machines\n// Refer to: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/stepfunctions/src/main/java/com/example/stepfunctions/CreateStateMachine.java\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Feedback Sentiment Analyzer Frontend\nDESCRIPTION: Command to install the required dependencies for the FSA frontend application using npm.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/applications/feedback_sentiment_analyzer/client/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Getting AWS Glue Job Run History in Java\nDESCRIPTION: Implementation that retrieves the history of job runs for a specific AWS Glue job, including statuses and execution details.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/glue/README.md#2025-04-09_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\nGlueScenario.java#L602\n```\n\n----------------------------------------\n\nTITLE: Creating ECS Cluster with Java SDK\nDESCRIPTION: Implementation for creating an Amazon ECS cluster using AWS SDK for Java 2.x. Located in CreateCluster.java.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/ecs/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nCreateCluster.java#L6\n```\n\n----------------------------------------\n\nTITLE: S3 Control API Metadata Mapping Table\nDESCRIPTION: A markdown table mapping S3 Control API actions to their corresponding metadata file and key entries. The table covers core job operations like creation, priority updates, status changes, listing, and tagging management.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/basics/s3/SPECIFICATION.md#2025-04-09_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| action                       | metadata file                | metadata key                            |\n|------------------------------|------------------------------|---------------------------------------- |\n| `createjob`                  | s3-control_metadata.yaml     | s3-control_CreateJob                    |\n| `updateJobPriority`          | s3-control_metadata.yaml     | s3-control_UpdateJobPriority            |\n| `updateJobStatus`            | s3-control_metadata.yaml     | s3-control_UpdateJobStatus              |\n| `listJobs`                   | s3-control_metadata.yaml     | s3-control_ListJobs                     |\n| `getJobTagging`              | s3-control_metadata.yaml     | s3-control_GetJobTagging                |\n| `deleteJobTagging`           | s3-control_metadata.yaml     | s3-control_DeleteJobTagging             |\n| `describeJob`                | s3-control_metadata.yaml     | s3-control_DescribeJob                  |\n| `putJobTagging`              | s3-control_metadata.yaml     | s3-control_PutJobTagging                |\n| `scenario                    | s3-control_metadata.yaml     | s3-control_Basics                           |\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS SQS Client and Connection Factory in Spring XML\nDESCRIPTION: This XML configuration sets up an AWS SQS client and JMS connection factory in a Spring application context. It defines beans for AWS region (us-east-1), default credentials provider, SQS client builder, connection factory, and queue configuration. The setup includes prefetch settings and proper lifecycle management for connections.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/sqs-jms/src/main/resources/SpringExampleConfiguration.xml.txt#2025-04-09_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans\n        xmlns=\"http://www.springframework.org/schema/beans\"\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:schemaLocation=\"\nhttp://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n        \">\n    <!-- Define the AWS Region -->\n    <bean id=\"region\" class=\"software.amazon.awssdk.regions.Region\" factory-method=\"of\">\n        <constructor-arg value=\"us-east-1\"/>\n    </bean>\n\n    <bean id=\"credentialsProviderBean\" class=\"software.amazon.awssdk.auth.credentials.DefaultCredentialsProvider\"\n          factory-method=\"create\"/>\n\n    <bean id=\"clientBuilder\" class=\"software.amazon.awssdk.services.sqs.SqsClient\" factory-method=\"builder\"/>\n\n    <bean id=\"regionSetClientBuilder\" factory-bean=\"clientBuilder\" factory-method=\"region\">\n        <constructor-arg ref=\"region\"/>\n    </bean>\n\n    <!-- Configure the Builder with Credentials Provider -->\n    <bean id=\"sqsClient\" factory-bean=\"regionSetClientBuilder\" factory-method=\"credentialsProvider\">\n        <constructor-arg ref=\"credentialsProviderBean\"/>\n    </bean>\n\n    <bean id=\"providerConfiguration\" class=\"com.amazon.sqs.javamessaging.ProviderConfiguration\">\n        <property name=\"numberOfMessagesToPrefetch\" value=\"5\"/>\n    </bean>\n\n    <bean id=\"connectionFactory\" class=\"com.amazon.sqs.javamessaging.SQSConnectionFactory\">\n        <constructor-arg ref=\"providerConfiguration\"/>\n        <constructor-arg ref=\"clientBuilder\"/>\n    </bean>\n\n    <bean id=\"connection\"\n          factory-bean=\"connectionFactory\"\n          factory-method=\"createConnection\"\n          init-method=\"start\"\n          destroy-method=\"close\"/>\n\n    <bean id=\"queueName\" class=\"java.lang.String\">\n        <constructor-arg value=\"SQSJMSClientExampleQueue\"/>\n    </bean>\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container for AWS SDK JavaScript v3\nDESCRIPTION: Command to run a Docker container with the JavaScript v3 examples. Optionally mounts local AWS credentials to the container.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/README.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it -v /Users/corepyle/.aws/credentials:/home/automation/.aws/credentials <image_name>\n```\n\n----------------------------------------\n\nTITLE: Specifying Boto3 Version Requirement\nDESCRIPTION: This snippet defines the minimum required version of the Boto3 library. It uses the greater than or equal to operator to ensure compatibility with version 1.35.38 and above.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/iotsitewise/hello/requirements.txt#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nboto3>=1.35.38\n```\n\n----------------------------------------\n\nTITLE: Invoking AI21 Labs Jurassic-2 foundation model with PHP\nDESCRIPTION: This code snippet shows how to invoke the AI21 Labs Jurassic-2 foundation model using Amazon Bedrock Runtime with the AWS SDK for PHP. It formats the request with appropriate parameters for this specific model.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/php/example_code/bedrock-runtime/README.md#2025-04-09_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nInvokeModel(BedrockRuntimeService.php#L66)\n```\n\n----------------------------------------\n\nTITLE: Deploy AWS Step Functions Demo Resources\nDESCRIPTION: Command to deploy the prerequisite AWS resources using the example script with the deploy flag.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/cross_service/stepfunctions_messenger/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython stepfunctions_demo.py deploy\n```\n\n----------------------------------------\n\nTITLE: Running Example with Options\nDESCRIPTION: Command to execute a script with command line options using util.parseArgs.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/elastic-load-balancing-v2/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnode ./scenarios/<fileName> --option1 --option2\n```\n\n----------------------------------------\n\nTITLE: Invoking Anthropic Claude Model in PHP\nDESCRIPTION: This code example illustrates how to invoke the Anthropic Claude model using the Amazon Bedrock Runtime service. It's a method within the BedrockRuntimeService class.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/php/example_code/bedrock-agent-runtime/README.md#2025-04-09_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nBedrockRuntimeService.php#L31\n```\n\n----------------------------------------\n\nTITLE: Updating Elastic Beanstalk Applications using Ruby SDK\nDESCRIPTION: Code example showing how to update an existing Elastic Beanstalk application using the UpdateApplication API call through the Ruby SDK. This operation allows modification of application attributes.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/ruby/example_code/elasticbeanstalk/README.md#2025-04-09_snippet_2\n\nLANGUAGE: Ruby\nCODE:\n```\n# update_app.rb#L8\nUpdateApplication\n```\n\n----------------------------------------\n\nTITLE: Updating ECS Service with Java SDK\nDESCRIPTION: Implementation for updating an Amazon ECS service using AWS SDK for Java 2.x. Located in UpdateService.java.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/ecs/README.md#2025-04-09_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nUpdateService.java#L6\n```\n\n----------------------------------------\n\nTITLE: Allocating an Elastic IP Address in Amazon EC2\nDESCRIPTION: Demonstrates how to allocate an Elastic IP address for use with Amazon EC2 instances. This operation assigns a static public IP address from Amazon's pool of addresses.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/EC2/README.md#2025-04-09_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n// AllocateAddress\n```\n\n----------------------------------------\n\nTITLE: Running Hello Support Example\nDESCRIPTION: Executes the basic Hello Support example that demonstrates the DescribeServices operation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/support/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython hello.py\n```\n\n----------------------------------------\n\nTITLE: Running Hello Elastic Load Balancing V2 Example in Python\nDESCRIPTION: This snippet demonstrates how to run the 'Hello Elastic Load Balancing V2' example, which introduces basic usage of the service.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/elastic-load-balancing/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython hello.py\n```\n\n----------------------------------------\n\nTITLE: Running Lambda basics scenario in Ruby\nDESCRIPTION: Command to run the Lambda basics scenario which demonstrates creating, invoking, updating, and deleting Lambda functions.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/ruby/example_code/lambda/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nruby lambda_basics.rb\n```\n\n----------------------------------------\n\nTITLE: Setting TLS 1.2 for S3 Access in Go\nDESCRIPTION: Creates a custom HTTP client using TLS version 1.2 to access an Amazon S3 bucket object. Requires a bucket name and object name, with optional region parameter that defaults to us-west-2.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/s3/README.md#2025-04-09_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ngo run s3SetTls12 -b BUCKET -o OBJECT [-r REGION] [-v]\n```\n\n----------------------------------------\n\nTITLE: Running Customization Examples in C++\nDESCRIPTION: This snippet demonstrates how to run a customization example executable from the build folder. It shows the command structure for executing the compiled examples.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/sdk-customization/README.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./run_my_customization\n```\n\n----------------------------------------\n\nTITLE: ReEncrypt Data Reference - Rust\nDESCRIPTION: Reference to code example for re-encrypting data using AWS KMS with the Rust SDK\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/kms/README.md#2025-04-09_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nsrc/bin/reencrypt-data.rs#L42\n```\n\n----------------------------------------\n\nTITLE: Create Gateway in AWS IoT SiteWise using Java\nDESCRIPTION: Demonstrates how to create a new gateway in AWS IoT SiteWise.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/iotsitewise/README.md#2025-04-09_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nCreateGateway\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for CloudWatch Logs Query\nDESCRIPTION: Sets environment variables for the query start and end dates, and optionally for the log group name. These variables are used in the log upload process and the Python script.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/cloudwatch-logs/scenarios/large-query/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport QUERY_START_DATE=<QUERY_START_DATE>\nexport QUERY_END_DATE=<QUERY_END_DATE>\nexport QUERY_LOG_GROUP=<QUERY_LOG_GROUP>\n```\n\n----------------------------------------\n\nTITLE: Adding an Inline Policy to an IAM Role in C++\nDESCRIPTION: Code excerpt showing how to add an inline policy to an IAM role using the AWS SDK for C++.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/iam/README.md#2025-04-09_snippet_21\n\nLANGUAGE: C++\nCODE:\n```\n// From put_role_policy.cpp line 35\n```\n\n----------------------------------------\n\nTITLE: Register Domain with Route 53 in C#\nDESCRIPTION: Initiates a domain registration process with Amazon Route 53. Takes domain name and contact information as input and returns an operation ID that can be used to track the registration progress.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Route53/README.md#2025-04-09_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\n/// <summary>\n/// Register a domain.\n/// </summary>\n/// <param name=\"contact\">Contact details.</param>\n/// <param name=\"domainName\">The domain name to register.</param>\n/// <param name=\"autoRenew\">Auto renew the domain?</param>\n/// <param name=\"duration\">Domain registration duration in years.</param>\n/// <returns>The operation Id.</returns>\npublic async Task<string> RegisterDomain(\n    ContactDetail contact,\n    string domainName,\n    bool autoRenew,\n    int duration)\n{\n    // This example uses the same contact information for admin, registrant, and tech contacts.\n    var result = await _amazonRoute53Domains.RegisterDomainAsync(\n        new RegisterDomainRequest\n        {\n            AdminContact = contact,\n            RegistrantContact = contact,\n            TechContact = contact,\n            DomainName = domainName,\n            AutoRenew = autoRenew,\n            DurationInYears = duration,\n            PrivacyProtectAdminContact = false,\n            PrivacyProtectRegistrantContact = false,\n            PrivacyProtectTechContact = false\n        }\n    );\n    return result.OperationId;\n}\n```\n\n----------------------------------------\n\nTITLE: List KMS Keys Reference - Rust\nDESCRIPTION: Reference to code example for listing KMS keys using the AWS SDK for Rust\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/kms/README.md#2025-04-09_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nsrc/bin/list-keys.rs#L22\n```\n\n----------------------------------------\n\nTITLE: Verifying an Email Address with Amazon SES in Go\nDESCRIPTION: This code snippet shows how to verify an email address with Amazon SES. It requires the email address to be verified as a command-line argument.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/ses/README.md#2025-04-09_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\ngo run VerifyAddress -r RECIPIENT\n```\n\n----------------------------------------\n\nTITLE: Creating ECS Service with Java SDK\nDESCRIPTION: Implementation for creating an Amazon ECS service using AWS SDK for Java 2.x. Located in CreateService.java.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/ecs/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nCreateService.java#L6\n```\n\n----------------------------------------\n\nTITLE: Enabling a Rule in EventBridge using AWS SDK for .NET\nDESCRIPTION: Method to enable an EventBridge rule by name. This activates the rule so it can process events according to its pattern.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/EventBridge/README.md#2025-04-09_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nEnableRule\n```\n\n----------------------------------------\n\nTITLE: Creating Keys and Certificate for AWS IoT using Kotlin\nDESCRIPTION: This snippet demonstrates how to create keys and a certificate for AWS IoT using the CreateKeysAndCertificate operation in the AWS SDK for Kotlin.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/iot/README.md#2025-04-09_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\nCreateKeysAndCertificate\n```\n\n----------------------------------------\n\nTITLE: Listing S3 Buckets in JavaScript\nDESCRIPTION: This code snippet demonstrates how to list S3 buckets using the AWS SDK for JavaScript (v3). It uses the ListBuckets operation to retrieve a list of all buckets in the account.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/s3/README.md#2025-04-09_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n- [Hello Amazon S3](hello.js#L6) (`ListBuckets`)\n```\n\n----------------------------------------\n\nTITLE: Deleting a Kinesis Data Stream in Java\nDESCRIPTION: This code snippet shows how to delete an existing Kinesis data stream using the AWS SDK for Java 2.x. It includes the necessary import statement and references the DeleteDataStream class.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/kinesis/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nimport com.example.kinesis.DeleteDataStream;\n```\n\n----------------------------------------\n\nTITLE: Implementing S3 Object Lambda Function in C#\nDESCRIPTION: This C# code defines a Lambda function that transforms S3 object content to uppercase. It uses the AWS SDK for .NET to interact with S3 and handle S3 Object Lambda events.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/cross-service/S3ObjectLambdaFunction/README.md#2025-04-09_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic class Function\n{\n    IAmazonS3 S3Client { get; set; }\n\n    public Function()\n    {\n        S3Client = new AmazonS3Client();\n    }\n    public Function(IAmazonS3 s3Client)\n    {\n        this.S3Client = s3Client;\n    }\n\n    public async Task<HttpResponseMessage> FunctionHandler(S3ObjectLambdaEvent s3Event, ILambdaContext context)\n    {\n        try\n        {\n            var objectContext = s3Event.GetObjectContext;\n            var s3Url = objectContext.InputS3Url;\n            var requestRoute = objectContext.OutputRoute;\n            var requestToken = objectContext.OutputToken;\n            context.Logger.LogInformation(objectContext.InputS3Url.ToString());\n\n            var httpClient = new HttpClient();\n\n            var response = await httpClient.GetAsync(s3Url);\n            var responseBody = await response.Content.ReadAsStringAsync();\n            var transformedObject = responseBody.ToUpper();\n\n            var writeGetObjectResponseRequest = new Amazon.S3.Model.WriteGetObjectResponseRequest\n            {\n                Body = GenerateStreamFromString(transformedObject),\n                RequestRoute = requestRoute,\n                RequestToken = requestToken\n            };\n\n            await S3Client.WriteGetObjectResponseAsync(writeGetObjectResponseRequest);\n\n            return new HttpResponseMessage(System.Net.HttpStatusCode.OK);\n        }\n        catch (Exception e)\n        {\n            context.Logger.LogError(e.Message);\n            context.Logger.LogError(e.StackTrace);\n            throw;\n        }\n    }\n\n    public static MemoryStream GenerateStreamFromString(string value)\n    {\n        return new MemoryStream(Encoding.UTF8.GetBytes(value ?? \"\"));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-Side Functions for Amazon SNS Operations in JavaScript\nDESCRIPTION: JavaScript functions for interacting with the Spring Controller to perform SNS operations. Features include publishing messages, subscribing/unsubscribing email addresses, listing subscriptions, and validating email addresses using regex.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_sns_sample_app/README.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n$(function() {\n    $(\"#SendButton\" ).click(function($e) {\n\n        var body = $('#body').val();\n        var lang = $('#lang option:selected').text();\n        if (body == '' ){\n            alert(\"Please enter text\");\n            return;\n        }\n\n        $.ajax('/addMessage', {\n            type: 'POST',\n            data: 'lang=' + lang+'&body=' + body,\n            success: function (data, status, xhr) {\n\n                alert(data)\n                $('#body').val(\"\");\n            },\n            error: function (jqXhr, textStatus, errorMessage) {\n                $('p').append('Error' + errorMessage);\n            }\n        });\n      } );\n    } );\n    \n    function subEmail(){\n     var mail = $('#inputEmail1').val();\n     var result = validate(mail)\n     if (result == false) {\n        alert (mail + \" is not valid. Please specify a valid email.\");\n        return;\n     }\n\n     $.ajax('/addEmail', {\n        type: 'POST',\n        data: 'email=' + mail,\n        success: function (data, status, xhr) {\n            alert(\"Subscription validation is \"+data)\n        },\n        error: function (jqXhr, textStatus, errorMessage) {\n            $('p').append('Error' + errorMessage);\n        }\n      });\n     }\n\n     function getSubs() {\n      $.ajax('/getSubs', {\n        type: 'GET', \n        success: function (data, status, xhr) {\n\n            $('.modal-body').empty();\n            var xml = data;\n            $(xml).find('Sub').each(function ()  {\n\n                var $field = $(this);\n                var email = $field.find('email').text();\n\n                // Append this data to the main list.\n                $('.modal-body').append(\"<p><b>\"+email+\"</b></p>\");\n            });\n            $(\"#myModal\").modal();\n        },\n        error: function (jqXhr, textStatus, errorMessage) {\n            $('p').append('Error' + errorMessage);\n        }\n       });\n      }\n\n     function delSub(event) {\n       var mail = $('#inputEmail1').val();\n       var result = validate(mail)\n\n      if (result == false) {\n       alert (mail + \" is not valid. Please specify a valid email\");\n       return;\n      }\n\n     $.ajax('/delSub', {\n        type: 'POST',  // http GET method\n        data: 'email=' + mail,\n        success: function (data, status, xhr) {\n\n            alert(\"Subscription validation is \"+data);\n        },\n        error: function (jqXhr, textStatus, errorMessage) {\n            $('p').append('Error' + errorMessage);\n        }\n      });\n    }\n\n     function validateEmail(email) {\n       const re = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n       return re.test(email);\n      }\n\n     function validate(email) {\n      const $result = $(\"#result\");\n\n     if (validateEmail(email)) {\n        return true ;\n      } else {\n        return false ;\n     }\n    }\n```\n\n----------------------------------------\n\nTITLE: Starting Stopped EC2 Instances\nDESCRIPTION: Demonstrates how to start EC2 instances that were previously stopped. This resumes the instances with the same configuration, although they may receive a new public IP address.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/EC2/README.md#2025-04-09_snippet_23\n\nLANGUAGE: C#\nCODE:\n```\n// StartInstances\n```\n\n----------------------------------------\n\nTITLE: Creating Systems Manager Document\nDESCRIPTION: Creates a new Systems Manager document using the CreateDocument API.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/ssm/README.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nsrc/main/java/com/example/scenario/SSMActions.java#L481\n```\n\n----------------------------------------\n\nTITLE: Describing ECS Clusters with Java SDK\nDESCRIPTION: Implementation for describing Amazon ECS clusters using AWS SDK for Java 2.x. Located in DescribeClusters.java.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/ecs/README.md#2025-04-09_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nDescribeClusters.java#L6\n```\n\n----------------------------------------\n\nTITLE: Authenticating with ECR using AWS CLI\nDESCRIPTION: This command authenticates the Docker client with Amazon ECR using the AWS CLI. It retrieves an authentication token and logs in to the ECR registry.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/basics/ecr/SPECIFICATION.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\naws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 1234567890.dkr.ecr.us-east-1.amazonaws.com\n```\n\n----------------------------------------\n\nTITLE: Performing Batch Get Operations in DynamoDB using C#\nDESCRIPTION: This code example demonstrates how to perform batch get operations in DynamoDB using the low-level API of the AWS SDK for .NET.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/dynamodb/README.md#2025-04-09_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nlow-level-api/LowLevelBatchGet/LowLevelBatchGet.cs#L4\n```\n\n----------------------------------------\n\nTITLE: Creating Main Landing Page HTML Template\nDESCRIPTION: HTML template for the application's home page using Thymeleaf templating engine. Includes Bootstrap styling and displays instructions for using the photo analyzer application.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_photo_analyzer_app/README.md#2025-04-09_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n    <html xmlns:th=\"http://www.thymeleaf.org\">\n\n    <head>\n     <meta charset=\"utf-8\" />\n     <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n     <link rel=\"stylesheet\" th:href=\"|https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css|\"/>\n     <script th:src=\"|https://code.jquery.com/jquery-1.12.4.min.js|\"></script>\n     <script th:src=\"|https://code.jquery.com/ui/1.11.4/jquery-ui.min.js|\"></script>\n     <link rel=\"stylesheet\" href=\"../public/css/styles.css\" th:href=\"@{/css/styles.css}\" />\n     <link rel=\"icon\" href=\"../public/images/favicon.ico\" th:href=\"@{/images/favicon.ico}\" />\n\n    <title>AWS Photo Analyzer</title>\n    </head>\n    <body>\n    <header th:replace=\"layout :: site-header\"/>\n    <div class=\"container\">\n\n    <h2>AWS Photo Analyzer application</h2>\n\n    <p>The AWS Photo Analyzer application is an example application that uses the Amazon Rekognition service, other AWS services, and the AWS SDK for Java version 2.\n        Analyzing nature photographs has never been easier! Just perform these steps:<p>\n\n    <ol>\n        <li>Upload a nature photograph to an Amazon S3 bucket by choosing the <b>Upload Photos</b> menu item.</li>\n        <li>Choose <b>Choose File</b> and browse to a nature image located on your desktop.</li>\n        <li>Choose <b>Upload</b> to upload your image to an S3 bucket.</li>\n        <li>Choose <b>Get Images</b> to view the images located in the S3 bucket. All images in the bucket are displayed in the table. </li>\n        <li>Analyze the photographs and produce a report by choosing the <b>Analyze Photos</b> menu item. </li>\n        <li>Enter an email address in the email field and choose <b>Analyze Photos</b>.  </li>\n        <li>Amazon SES is used to send an email with an Excel report to the specified email recipient.</li>\n    </ol>\n    </div>\n    </body>\n    </html>\n```\n\n----------------------------------------\n\nTITLE: Running Hello Amazon SQS Example in JavaScript\nDESCRIPTION: A command to run the Hello Amazon SQS example which demonstrates the ListQueues operation with the AWS SDK for JavaScript.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/sqs/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode ./hello.js\n```\n\n----------------------------------------\n\nTITLE: Creating Main Landing Page HTML Template\nDESCRIPTION: HTML template for the application's home page using Thymeleaf templating engine. Includes Bootstrap styling and displays instructions for using the photo analyzer application.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_photo_analyzer_app/README.md#2025-04-09_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n    <html xmlns:th=\"http://www.thymeleaf.org\">\n\n    <head>\n     <meta charset=\"utf-8\" />\n     <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n     <link rel=\"stylesheet\" th:href=\"|https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css|\"/>\n     <script th:src=\"|https://code.jquery.com/jquery-1.12.4.min.js|\"></script>\n     <script th:src=\"|https://code.jquery.com/ui/1.11.4/jquery-ui.min.js|\"></script>\n     <link rel=\"stylesheet\" href=\"../public/css/styles.css\" th:href=\"@{/css/styles.css}\" />\n     <link rel=\"icon\" href=\"../public/images/favicon.ico\" th:href=\"@{/images/favicon.ico}\" />\n\n    <title>AWS Photo Analyzer</title>\n    </head>\n    <body>\n    <header th:replace=\"layout :: site-header\"/>\n    <div class=\"container\">\n\n    <h2>AWS Photo Analyzer application</h2>\n\n    <p>The AWS Photo Analyzer application is an example application that uses the Amazon Rekognition service, other AWS services, and the AWS SDK for Java version 2.\n        Analyzing nature photographs has never been easier! Just perform these steps:<p>\n\n    <ol>\n        <li>Upload a nature photograph to an Amazon S3 bucket by choosing the <b>Upload Photos</b> menu item.</li>\n        <li>Choose <b>Choose File</b> and browse to a nature image located on your desktop.</li>\n        <li>Choose <b>Upload</b> to upload your image to an S3 bucket.</li>\n        <li>Choose <b>Get Images</b> to view the images located in the S3 bucket. All images in the bucket are displayed in the table. </li>\n        <li>Analyze the photographs and produce a report by choosing the <b>Analyze Photos</b> menu item. </li>\n        <li>Enter an email address in the email field and choose <b>Analyze Photos</b>.  </li>\n        <li>Amazon SES is used to send an email with an Excel report to the specified email recipient.</li>\n    </ol>\n    </div>\n    </body>\n    </html>\n```\n\n----------------------------------------\n\nTITLE: Creating CloudWatch Anomaly Detectors in C#\nDESCRIPTION: Method for creating anomaly detectors in CloudWatch. This is implemented in the CloudWatchWrapper class.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/CloudWatch/README.md#2025-04-09_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\nPutAnomalyDetector\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for PAM CDK Project\nDESCRIPTION: Command to install the required Node.js dependencies for the PAM CDK project.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/applications/photo-asset-manager/cdk/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for AWS S3 CRT Examples\nDESCRIPTION: Sets up the CMake project for AWS S3 CRT examples, including version requirements, C++ standard, and build options. It also configures the AWS SDK dependencies and sets up shared library handling for Windows.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/s3-crt/CMakeLists.txt#2025-04-09_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\n\nproject(\"s3-crt-examples\")\n\nset(CMAKE_CXX_STANDARD 11)\n\ninclude(CTest)\n\nif(NOT BUILD_SHARED_LIBS)\n    set(BUILD_SHARED_LIBS ON)\nendif()\n\nlist(APPEND CMAKE_PREFIX_PATH \"C:\\\\Program Files (x86)\\\\aws-cpp-sdk-all\\\\lib\\\\cmake\")\nif(MSVC)\n    string(REPLACE \";\" \"/aws-cpp-sdk-all;\" SYSTEM_MODULE_PATH \"${CMAKE_SYSTEM_PREFIX_PATH}/aws-cpp-sdk-all\")\n    list(APPEND CMAKE_PREFIX_PATH ${SYSTEM_MODULE_PATH})\nendif()\n\nfind_package(AWSSDK REQUIRED COMPONENTS s3-crt)\n\nif(MSVC AND AWSSDK_INSTALL_AS_SHARED_LIBS)\n    add_definitions(-DUSE_IMPORT_EXPORT)\n    list(APPEND SERVICE_LIST s3-crt)\n    \n    set(CMAKE_BUILD_TYPE Debug)\n    \n    AWSSDK_CPY_DYN_LIBS(SERVICE_LIST \"\" ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_BUILD_TYPE})\n    \n    message(STATUS \">>CMAKE_CURRENT_BINARY_DIR: ${CMAKE_CURRENT_BINARY_DIR}\")\n    message(STATUS \">>CMAKE_BUILD_TYPE: ${CMAKE_BUILD_TYPE}\")\n    message(STATUS \">>EXECUTABLE_OUTPUT_PATH : ${EXECUTABLE_OUTPUT_PATH}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Upload Function Output JSON Example\nDESCRIPTION: JSON response from the UploadFn Lambda function, containing a presigned URL for uploading the specified .jpg file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/php/applications/photo_asset_manager/README.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"statusCode\": 200,\n  \"headers\": {\n    \"Access-Control-Allow-Origin\": \"*\"\n  },\n  \"body\": \"{\\\"url\\\":\\\"https://xxxxxxxxxxxx.amazonaws.com/xxxxxxxxxxxxxxx-mountain.jpg?X-Amz-Security-xxxxxxxxxxxxxxxxxxx\\\"}\",\n  \"isBase64Encoded\": false\n }\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for AWS SDK C++ Examples with GTest\nDESCRIPTION: Sets up a CMake project for AWS SDK C++ examples with GTest integration. It configures the project, finds or downloads GTest, sets up Windows-specific paths, and defines the build target with necessary dependencies.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/cross-service/topics_and_queues/tests/CMakeLists.txt#2025-04-09_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\n\n# Set the minimum required version of CMake for this project.\ncmake_minimum_required(VERSION 3.14)\n\nset(CURRENT_TARGET \"topics_and_queues_gtest\")\nset(CURRENT_TARGET_AWS_DEPENDENCIES sns sqs)\n\n# Set this project's name.\nproject(\"${EXAMPLE_SERVICE_NAME}-examples-gtests\")\n\n# Set the C++ standard to use to build this target.\nset(CMAKE_CXX_STANDARD 14)\n\n# Build shared libraries by default.\nset(BUILD_SHARED_LIBS ON)\n\nfind_package(GTest)\n\nif (NOT GTest_FOUND)\n    include(FetchContent)\n    FetchContent_Declare(\n            googletest\n            GIT_REPOSITORY https://github.com/google/googletest.git\n            GIT_TAG release-1.12.1\n    )\n\n    # For Windows: Prevent overriding the parent project's compiler/linker settings.\n    set(gtest_force_shared_crt ON CACHE BOOL \"\" FORCE)\n    FetchContent_MakeAvailable(googletest)\nendif ()\n\n# Use the MSVC variable to determine if this is a Windows build.\nset(WINDOWS_BUILD ${MSVC})\n\n# Set the location for Windows to find the installed libraries of the SDK.\nif (WINDOWS_BUILD)\n    string(REPLACE \";\" \"/aws-cpp-sdk-all;\" SYSTEM_MODULE_PATH \"${CMAKE_SYSTEM_PREFIX_PATH}/aws-cpp-sdk-all\")\n    list(APPEND CMAKE_PREFIX_PATH ${SYSTEM_MODULE_PATH})\nendif ()\n\n# Find the AWS SDK for C++ package.\nfind_package(AWSSDK REQUIRED COMPONENTS ${CURRENT_TARGET_AWS_DEPENDENCIES})\n\nadd_executable(\n        ${CURRENT_TARGET}\n)\n```\n\n----------------------------------------\n\nTITLE: Creating EC2 Security Group with AWS CLI\nDESCRIPTION: This snippet demonstrates creating an EC2 security group using the AWS CLI. It uses the 'aws ec2 create-security-group' command and captures the group ID for further use.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/aws-cli/bash-linux/ec2/README.md#2025-04-09_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nsecurityGroupId=$(aws ec2 create-security-group \\\n    --group-name \"$securityGroupName\" \\\n    --description \"$securityGroupDescription\" \\\n    --query \"GroupId\" \\\n    --output text)\n```\n\n----------------------------------------\n\nTITLE: Disassociating an Elastic IP Address from an EC2 Instance\nDESCRIPTION: Shows how to disassociate an Elastic IP address from an EC2 instance. This frees up the Elastic IP for reassignment while giving the instance a new public IP.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/EC2/README.md#2025-04-09_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\n// DisassociateAddress\n```\n\n----------------------------------------\n\nTITLE: Analyzing Images with Amazon Rekognition in Java\nDESCRIPTION: The AnalyzePhotos class uses the Amazon Rekognition API to detect labels in images. It processes byte arrays of images and returns a list of WorkItem objects containing label information.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_lambda_tag_assets/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npackage com.aws.tags;\n\nimport software.amazon.awssdk.auth.credentials.EnvironmentVariableCredentialsProvider;\nimport software.amazon.awssdk.core.SdkBytes;\nimport software.amazon.awssdk.regions.Region;\nimport software.amazon.awssdk.services.rekognition.RekognitionClient;\nimport software.amazon.awssdk.services.rekognition.model.Image;\nimport software.amazon.awssdk.services.rekognition.model.DetectLabelsRequest;\nimport software.amazon.awssdk.services.rekognition.model.DetectLabelsResponse;\nimport software.amazon.awssdk.services.rekognition.model.Label;\nimport software.amazon.awssdk.services.rekognition.model.RekognitionException;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class AnalyzePhotos {\n\n public ArrayList<WorkItem> detectLabels(byte[] bytes, String key) {\n\n    Region region = Region.US_EAST_2;\n    RekognitionClient rekClient = RekognitionClient.builder()\n            .credentialsProvider(EnvironmentVariableCredentialsProvider.create())\n            .region(region)\n            .build();\n\n    try {\n\n        SdkBytes sourceBytes = SdkBytes.fromByteArray(bytes);\n\n        // Create an Image object for the source image.\n        Image souImage = Image.builder()\n                .bytes(sourceBytes)\n                .build();\n\n        DetectLabelsRequest detectLabelsRequest = DetectLabelsRequest.builder()\n                .image(souImage)\n                .maxLabels(10)\n                .build();\n\n        DetectLabelsResponse labelsResponse = rekClient.detectLabels(detectLabelsRequest);\n\n        // Write the results to a WorkItem instance.\n        List<Label> labels = labelsResponse.labels();\n        ArrayList<WorkItem> list = new ArrayList<>();\n        WorkItem item ;\n        for (Label label: labels) {\n            item = new WorkItem();\n            item.setKey(key); // identifies the photo.\n            item.setConfidence(label.confidence().toString());\n            item.setName(label.name());\n            list.add(item);\n        }\n        return list;\n\n    } catch (RekognitionException e) {\n        System.out.println(e.getMessage());\n        System.exit(1);\n    }\n    return null ;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Describing EC2 Availability Zones\nDESCRIPTION: Shows how to retrieve information about the Availability Zones available in the current AWS Region. This helps in distributing resources across multiple zones for high availability.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/EC2/README.md#2025-04-09_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\n// DescribeAvailabilityZones\n```\n\n----------------------------------------\n\nTITLE: Analyzing Photos with Amazon Rekognition in Java\nDESCRIPTION: This class uses the Amazon Rekognition API to analyze images. It detects labels in the given image and returns a list of WorkItem objects containing the detected labels and their confidence scores.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_photo_analyzer_app/README.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.photo;\n\nimport software.amazon.awssdk.auth.credentials.EnvironmentVariableCredentialsProvider;\nimport software.amazon.awssdk.core.SdkBytes;\nimport software.amazon.awssdk.regions.Region;\nimport software.amazon.awssdk.services.rekognition.RekognitionClient;\nimport software.amazon.awssdk.services.rekognition.model.Image;\nimport software.amazon.awssdk.services.rekognition.model.DetectLabelsRequest;\nimport software.amazon.awssdk.services.rekognition.model.DetectLabelsResponse;\nimport software.amazon.awssdk.services.rekognition.model.Label;\nimport software.amazon.awssdk.services.rekognition.model.RekognitionException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class AnalyzePhotos {\n    public ArrayList<WorkItem> DetectLabels(byte[] bytes, String key) {\n        try {\n            RekognitionClient rekClient = RekognitionClient.builder()\n                .credentialsProvider(EnvironmentVariableCredentialsProvider.create())\n                .region(Region.US_EAST_2)\n                .build();\n\n            SdkBytes sourceBytes = SdkBytes.fromByteArray(bytes);\n            Image souImage = Image.builder()\n                    .bytes(sourceBytes)\n                    .build();\n\n            DetectLabelsRequest detectLabelsRequest = DetectLabelsRequest.builder()\n                    .image(souImage)\n                    .maxLabels(10)\n                    .build();\n\n            DetectLabelsResponse labelsResponse = rekClient.detectLabels(detectLabelsRequest);\n            List<Label> labels = labelsResponse.labels();\n            System.out.println(\"Detected labels for the given photo\");\n            ArrayList<WorkItem> list = new ArrayList<>();\n            WorkItem item ;\n            for (Label label: labels) {\n                item = new WorkItem();\n                item.setKey(key); // identifies the photo\n                item.setConfidence(label.confidence().toString());\n                item.setName(label.name());\n                list.add(item);\n            }\n            return list;\n\n        } catch (RekognitionException e) {\n            System.out.println(e.getMessage());\n            System.exit(1);\n        }\n        return null ;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Hello IAM Example in Go\nDESCRIPTION: Shows how to run the Hello IAM example which demonstrates the ListPolicies operation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/gov2/iam/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo run ./hello\n```\n\n----------------------------------------\n\nTITLE: Load Balancer Endpoint Verification in Python\nDESCRIPTION: Sends a GET request to verify the load balancer endpoint is responding. Uses the requests library to make an HTTP GET request to the endpoint.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/resilient_service/SPECIFICATION.md#2025-04-09_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nlb_response = requests.get(f'http://{self.endpoint()}')\n```\n\n----------------------------------------\n\nTITLE: Send Message to Amazon SQS using Ruby\nDESCRIPTION: Example code demonstrating how to send a single message to an SQS queue using the AWS SDK for Ruby.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/ruby/example_code/sqs/README.md#2025-04-09_snippet_5\n\nLANGUAGE: Ruby\nCODE:\n```\nsend_message.rb#L7\n```\n\n----------------------------------------\n\nTITLE: Creating an IAM Account Alias in C++\nDESCRIPTION: Code excerpt showing how to create an IAM account alias using the AWS SDK for C++.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/iam/README.md#2025-04-09_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\n// From create_account_alias.cpp line 35\n```\n\n----------------------------------------\n\nTITLE: Listing AWS AppSync API Keys using Java SDK\nDESCRIPTION: This code snippet illustrates how to list API keys for AWS AppSync using the ListApiKeys command with the AppSyncClient object in Java.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/appsync/README.md#2025-04-09_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\nListApiKeys command\n```\n\n----------------------------------------\n\nTITLE: DynamoDB Table Schema Definition for Recommendation Service\nDESCRIPTION: Schema definition for creating the DynamoDB recommendation table. It includes attribute definitions for MediaType and ItemId, with a composite key schema comprising MediaType as the hash key and ItemId as the range key.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/resilient_service/SPECIFICATION.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\nAttributeDefinitions=[{\n    'AttributeName': 'MediaType',\n    'AttributeType': 'S'},{\n    'AttributeName': 'ItemId',\n    'AttributeType': 'N'}],\nKeySchema=[{\n    'AttributeName': 'MediaType',\n    'KeyType': 'HASH'}, {\n    'AttributeName': 'ItemId',\n    'KeyType': 'RANGE'}],\n```\n\n----------------------------------------\n\nTITLE: Delete Portal in AWS IoT SiteWise using Java\nDESCRIPTION: Shows how to delete an existing portal in AWS IoT SiteWise.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/iotsitewise/README.md#2025-04-09_snippet_9\n\nLANGUAGE: Java\nCODE:\n```\nDeletePortal\n```\n\n----------------------------------------\n\nTITLE: Authorizing EC2 Security Group Ingress in .NET\nDESCRIPTION: This code snippet shows how to authorize ingress for an EC2 security group using the AWS SDK for .NET. It's part of the EC2Wrapper class that encapsulates various EC2 operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv4/EC2/README.md#2025-04-09_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nAuthorizeSecurityGroupIngress\n```\n\n----------------------------------------\n\nTITLE: Scanning DynamoDB Table with AWS CLI\nDESCRIPTION: This snippet shows how to perform a scan operation on a DynamoDB table using the AWS CLI. The actual code is not provided in the given content, but it's referenced as being located in the dynamodb_operations.sh file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/aws-cli/bash-linux/dynamodb/README.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Code for Scan operation\n# Located in dynamodb_operations.sh at line 714\n```\n\n----------------------------------------\n\nTITLE: Managing RDS Database Operations with Kotlin SDK\nDESCRIPTION: A collection of code examples demonstrating core RDS operations including creating DB instances, parameter groups, taking snapshots, and cleanup. The example shows how to work with Amazon RDS programmatically using the Kotlin SDK.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/rds/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Core functionality demonstrated:\n// - Create custom DB parameter group\n// - Set parameter values\n// - Create DB instance with parameter group\n// - Take DB snapshot\n// - Delete instance and parameter group\n```\n\n----------------------------------------\n\nTITLE: Listing Files in S3 Buckets\nDESCRIPTION: This snippet shows the output of listing all files in the created S3 buckets. It displays the file names, bucket names, and version IDs for each object stored in the buckets.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/s3_object_lock/SPECIFICATION.md#2025-04-09_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nCurrent buckets and objects:\n\n1: dotnet-example-file0.txt\n        Bucket: dotnet-s3-lock-example0-no-lock\n        Version: null\n2: dotnet-example-file1.txt\n        Bucket: dotnet-s3-lock-example0-no-lock\n        Version: null\n3: dotnet-example-file0.txt\n        Bucket: dotnet-s3-lock-example0-lock-enabled\n        Version: GY4S9LbwYsglEhq3FY5I0tvc85peaplB\n4: dotnet-example-file1.txt\n        Bucket: dotnet-s3-lock-example0-lock-enabled\n        Version: h4BEwfBUtanzdrDFbnqLfqxJflYQ2_9g\n5: dotnet-example-file0.txt\n        Bucket: dotnet-s3-lock-example0-retention-after-creation\n        Version: X22KoUqO4DRfrHgNnS_4ZDf7bpR4eKc6\n6: dotnet-example-file1.txt\n        Bucket: dotnet-s3-lock-example0-retention-after-creation\n        Version: 5aHizC1XBao6nnTyLnbiaOEmKAVSIy6R\n```\n\n----------------------------------------\n\nTITLE: Getting ECR Authorization Token with Java\nDESCRIPTION: Demonstrates how to obtain an authorization token for ECR operations using the GetAuthorizationToken API.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/ecr/README.md#2025-04-09_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\n// Referenced from ECRActions.java#L329\n```\n\n----------------------------------------\n\nTITLE: Basic Entity Resolution Operations\nDESCRIPTION: Core functionality including schema mapping creation, workflow management, and job processing.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/entityresolution/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nsrc/main/java/com/example/entity/scenario/EntityResScenario.java\n```\n\n----------------------------------------\n\nTITLE: Running Automated Tests with RSpec\nDESCRIPTION: Commands to run the automated RSpec tests that validate the database wrapper functionality of the application.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/ruby/cross_service_examples/item_tracker/README.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd spec\nrspec db_wrapper_spec.rb\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for AWS Medical Imaging C++ Project\nDESCRIPTION: CMake configuration that sets up a C++ project using the AWS SDK for Medical Imaging. It defines the project requirements, configures platform-specific settings for Windows builds, finds the AWS SDK packages, and sets up the executable with proper linking to AWS libraries.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/medical-imaging/hello_health_imaging/CMakeLists.txt#2025-04-09_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# Set the minimum required version of CMake for this project.\ncmake_minimum_required(VERSION 3.13)\n\n# Set the AWS service components used by this project.\nset(SERVICE_COMPONENTS medical-imaging)\n\n# Set this project's name.\nproject(\"hello_health-imaging\")\n\n# Set the C++ standard to use to build this target.\n# At least C++ 11 is required for the AWS SDK for C++.\nset(CMAKE_CXX_STANDARD 11)\n\n# Use the MSVC variable to determine if this is a Windows build.\nset(WINDOWS_BUILD ${MSVC})\n\nif (WINDOWS_BUILD) # Set the location where CMake can find the installed libraries for the AWS SDK.\n    string(REPLACE \";\" \"/aws-cpp-sdk-all;\" SYSTEM_MODULE_PATH \"${CMAKE_SYSTEM_PREFIX_PATH}/aws-cpp-sdk-all\")\n    list(APPEND CMAKE_PREFIX_PATH ${SYSTEM_MODULE_PATH})\nendif ()\n\n# Find the AWS SDK for C++ package.\nfind_package(AWSSDK REQUIRED COMPONENTS ${SERVICE_COMPONENTS})\n\nif (WINDOWS_BUILD AND AWSSDK_INSTALL_AS_SHARED_LIBS)\n    # Copy relevant AWS SDK for C++ libraries into the current binary directory for running and debugging.\n\n    # set(BIN_SUB_DIR \"/Debug\") # If you are building from the command line, you may need to uncomment this\n    # and set the proper subdirectory to the executable location.\n\n    AWSSDK_CPY_DYN_LIBS(SERVICE_COMPONENTS \"\" ${CMAKE_CURRENT_BINARY_DIR}${BIN_SUB_DIR})\nendif ()\n\nadd_executable(${PROJECT_NAME}\n        hello_health_imaging.cpp)\n\ntarget_link_libraries(${PROJECT_NAME}\n        ${AWSSDK_LINK_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: Starting a Snapshot in Amazon EBS with Rust\nDESCRIPTION: This code demonstrates how to call the StartSnapshot API to initiate a snapshot creation in Amazon EBS. It requires client configuration and snapshot parameters including volume size and description.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/ebs/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nclient\n    .start_snapshot()\n    .set_volume_size(Some(1))\n    .set_description(Some(\"Created by Rust code using the EBS API\".to_owned()))\n    .send()\n    .await\n```\n\n----------------------------------------\n\nTITLE: Defining Application Target and Linking Dependencies\nDESCRIPTION: Configures the main application executable target with its source files and applies standard settings. Links the application with Flutter and GTK libraries and establishes proper build dependencies.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/cognito_flutter_mobile_app/linux/CMakeLists.txt#2025-04-09_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# Define the application target. To change its name, change BINARY_NAME above,\n# not the value here, or `flutter run` will no longer work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n\n# Add dependency libraries. Add any application-specific dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n\n# Only the install-generated bundle's copy of the executable will launch\n# correctly, since the resources must in the right relative locations. To avoid\n# people trying to run the unbundled copy, put it in a subdirectory instead of\n# the default top-level location.\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n```\n\n----------------------------------------\n\nTITLE: JSON Structure for POST Report Request\nDESCRIPTION: JSON request body structure for the POST /report endpoint. Used to send an email report of work items, specifying the recipient's email address and the status filter for items to include.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/resources/clients/react/item-tracker/README.md#2025-04-09_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"email\": \"<recipient's email address>\",\n    \"status\": \"<blank>|all|archive\"\n}\n```\n\n----------------------------------------\n\nTITLE: S3 Event Notifications with EventBridge in Java\nDESCRIPTION: Demonstrates how to configure an S3 bucket to send event notifications to EventBridge and route them to SNS topics and SQS queues. Implemented in PutBucketS3EventNotificationEventBridge.java.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/eventbridge/README.md#2025-04-09_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Installing Required Python Packages\nDESCRIPTION: Command to install the required dependencies for the Route 53 ARC examples using pip in a virtual environment.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/route53-recovery-cluster/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Running a Scenario in Node.js\nDESCRIPTION: This snippet shows how to run a scenario example using Node.js. It executes a specific JavaScript file from the 'scenarios' directory.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/secrets-manager/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnode ./scenarios/<fileName>\n```\n\n----------------------------------------\n\nTITLE: Deleting a Lambda Function in JavaScript\nDESCRIPTION: This snippet illustrates how to delete a Lambda function using the AWS SDK for JavaScript (v3). It's one of the single action examples for Lambda operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/lambda/README.md#2025-04-09_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nactions/delete-function.js#L5\n```\n\n----------------------------------------\n\nTITLE: Creating IAM Access Key in Java\nDESCRIPTION: This snippet demonstrates how to create an IAM access key using the AWS SDK for Java 2.x.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/iam/README.md#2025-04-09_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nsrc/main/java/com/example/iam/CreateAccessKey.java#L6\n```\n\n----------------------------------------\n\nTITLE: Listing Keyspaces in Amazon Keyspaces using Kotlin\nDESCRIPTION: This code snippet shows how to list all keyspaces in Amazon Keyspaces using the AWS SDK for Kotlin. It's part of the single actions examples.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/keyspaces/README.md#2025-04-09_snippet_7\n\nLANGUAGE: Kotlin\nCODE:\n```\nsrc/main/kotlin/com/example/keyspace/ScenarioKeyspaces.kt#L589\n```\n\n----------------------------------------\n\nTITLE: Creating XML Elements in Kotlin\nDESCRIPTION: This snippet demonstrates how to create XML elements and append them to an XML document using Kotlin. It creates elements for Name, Date, Description, Guide, and Status.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/serverless_rds/README.md#2025-04-09_snippet_3\n\nLANGUAGE: Kotlin\nCODE:\n```\nval name = doc.createElement(\"Name\")\nname.appendChild(doc.createTextNode(myItem.name))\nitem.appendChild(name)\n\n// Set Date.\nval date = doc.createElement(\"Date\")\ndate.appendChild(doc.createTextNode(myItem.date))\nitem.appendChild(date)\n\n// Set Description.\nval desc = doc.createElement(\"Description\")\ndesc.appendChild(doc.createTextNode(myItem.description))\nitem.appendChild(desc)\n\n// Set Guide.\nval guide = doc.createElement(\"Guide\")\nguide.appendChild(doc.createTextNode(myItem.guide))\nitem.appendChild(guide)\n\n// Set Status.\nval status = doc.createElement(\"Status\")\nstatus.appendChild(doc.createTextNode(myItem.status))\nitem.appendChild(status)\n```\n\n----------------------------------------\n\nTITLE: Running Examples with Command Line Options in Node.js\nDESCRIPTION: This snippet illustrates how to run examples with command line options using Node.js. It executes a specific JavaScript file from the 'scenarios' directory and passes additional options.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/secrets-manager/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnode ./scenarios/<fileName> --option1 --option2\n```\n\n----------------------------------------\n\nTITLE: Running Hello Aurora Example in Ruby\nDESCRIPTION: Command to execute the Hello Aurora example script that demonstrates basic Aurora operations including DescribeDBClusters.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/ruby/example_code/aurora/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nruby hello/hello_aurora.rb\n```\n\n----------------------------------------\n\nTITLE: Windows-Specific Configuration\nDESCRIPTION: Configures Windows-specific build settings and handles AWS SDK library paths for Windows environments.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/medical-imaging/imaging_set_and_frames_workflow/CMakeLists.txt#2025-04-09_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(WINDOWS_BUILD ${MSVC})\n\nif (WINDOWS_BUILD)\n    string(REPLACE \";\" \"/aws-cpp-sdk-all;\" SYSTEM_MODULE_PATH \"${CMAKE_SYSTEM_PREFIX_PATH}/aws-cpp-sdk-all\")\n    list(APPEND CMAKE_PREFIX_PATH ${SYSTEM_MODULE_PATH})\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Aborting Multipart Upload in S3 using C++\nDESCRIPTION: This code snippet shows how to abort a multipart upload in Amazon S3 using the AWS SDK for C++. It's part of the S3 object integrity workflow.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/s3/README.md#2025-04-09_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nAbortMultipartUpload\n```\n\n----------------------------------------\n\nTITLE: Deleting EC2 Security Group in .NET\nDESCRIPTION: This code snippet shows how to delete an EC2 security group using the AWS SDK for .NET. It's part of the EC2Wrapper class that encapsulates various EC2 operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv4/EC2/README.md#2025-04-09_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nDeleteSecurityGroup\n```\n\n----------------------------------------\n\nTITLE: Running AWS Device Farm Tests with Python Script\nDESCRIPTION: This command demonstrates how to execute the Python script 'run_tests.py' using Pipenv to run tests on AWS Device Farm. The script should be modified with appropriate ARNs and package locations before execution.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/devicefarm/device_testing/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\npipenv run python run_tests.py\n```\n\n----------------------------------------\n\nTITLE: Basic EventBridge Operations in Java\nDESCRIPTION: Demonstrates core EventBridge functionality including creating rules, adding targets, enabling/disabling rules, listing rules and targets, sending events, and cleanup. Part of the EventbridgeMVP example.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/eventbridge/README.md#2025-04-09_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Retrieving an Item from DynamoDB Table with C++\nDESCRIPTION: This code snippet demonstrates how to retrieve a single item from a DynamoDB table using the AWS SDK for C++. It fetches the item based on its primary key.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/dynamodb/README.md#2025-04-09_snippet_9\n\nLANGUAGE: C++\nCODE:\n```\nGetItem\n```\n\n----------------------------------------\n\nTITLE: Specifying Package Dependencies for AWS SDK Python Examples\nDESCRIPTION: This snippet defines the minimum required versions for boto3 and pytest packages. boto3 is the AWS SDK for Python, used to interact with AWS services. pytest is a testing framework for Python applications.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/kinesis/requirements.txt#2025-04-09_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nboto3>=1.26.79\npytest>=7.2.1\n```\n\n----------------------------------------\n\nTITLE: Listing AWS Config Resources in Rust\nDESCRIPTION: Command-line utility to list AWS Config resources by resource type in a specified region.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/config/README.md#2025-04-09_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncargo run --bin list-resources -- [-r REGION] [-v]\n```\n\n----------------------------------------\n\nTITLE: Listing Objects in S3 Directory Buckets in Java\nDESCRIPTION: Example code for listing objects within an S3 Directory Bucket using the V2 API with AWS SDK for Java 2.x.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/s3/src/main/java/com/example/s3/directorybucket/README.md#2025-04-09_snippet_18\n\nLANGUAGE: Java\nCODE:\n```\nListObjectsV2\n```\n\n----------------------------------------\n\nTITLE: Deleting a SageMaker Pipeline in Java\nDESCRIPTION: This code snippet demonstrates how to delete a SageMaker pipeline using the AWS SDK for Java 2.x. It's used in the cleanup process of the SageMaker workflow example.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/sagemaker/README.md#2025-04-09_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nDeletePipeline\n```\n\n----------------------------------------\n\nTITLE: Uploading Object to S3 in Rust\nDESCRIPTION: This code snippet demonstrates how to upload an object to an S3 bucket using the AWS SDK for Rust. It uses the PutObject operation to store a file in Amazon S3.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/s3/README.md#2025-04-09_snippet_12\n\nLANGUAGE: Rust\nCODE:\n```\nPutObject\n```\n\n----------------------------------------\n\nTITLE: Running Hello Amazon EC2 Example\nDESCRIPTION: Command to execute the Hello EC2 getting started example that demonstrates basic EC2 operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/ruby/example_code/ec2/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nruby hello/hello_ec2.rb\n```\n\n----------------------------------------\n\nTITLE: Decrypting Data with KMS using Java SDK\nDESCRIPTION: This code snippet demonstrates how to decrypt data using a KMS key with the AWS SDK for Java 2.x. It uses the Decrypt operation to decrypt ciphertext that was encrypted using a KMS key.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/kms/README.md#2025-04-09_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nKMSActions.java#L423\n```\n\n----------------------------------------\n\nTITLE: Implementing Spring Boot Controller for Form Handling\nDESCRIPTION: This controller class handles HTTP requests, processes form submissions, persists data to DynamoDB, and triggers SNS notifications. It uses Spring's @Controller annotation and demonstrates dependency injection with @Autowired.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_first_project/README.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.handlingformsubmission;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.ModelAttribute;\nimport org.springframework.web.bind.annotation.PostMapping;\n\n@Controller\npublic class GreetingController {\n    private final DynamoDBEnhanced dde;\n    private final PublishTextSMS msg;\n\n@Autowired\nGreetingController(\n    DynamoDBEnhanced dde,\n    PublishTextSMS msg\n) {\n    this.dde = dde;\n    this.msg = msg;\n}\n\n@GetMapping(\"/\")\npublic String greetingForm(Model model) {\n    model.addAttribute(\"greeting\", new Greeting());\n    return \"greeting\";\n}\n\n@PostMapping(\"/greeting\")\npublic String greetingSubmit(@ModelAttribute Greeting greeting) {\n    \n    // Persist submitted data into a DynamoDB table.\n    dde.injectDynamoItem(greeting);\n\n    // Send a mobile notification.\n    msg.sendMessage(greeting.getId());\n\n    return \"result\";\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Maven Test Output\nDESCRIPTION: Example of successful Maven test execution output showing test results and build status\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/guardduty/README.md#2025-04-09_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n[INFO] -------------------------------------------------------\n[INFO]  T E S T S\n[INFO] -------------------------------------------------------\n[INFO] Running GuarddutyTest\nTest 1 passed\nTest 2 passed\n...\nDone!\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0\n[INFO]\nINFO] --------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO]--------------------------------------------\n[INFO] Total time:  12.003 s\n[INFO] Finished at: 2020-02-10T14:25:08-05:00\n[INFO] --------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Running Hello IAM Example\nDESCRIPTION: Command to execute the Hello IAM example that demonstrates basic IAM functionality\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/ruby/example_code/iam/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nruby hello/hello_iam.rb\n```\n\n----------------------------------------\n\nTITLE: Uploading and Testing Device Packages with AWS Device Farm in Python\nDESCRIPTION: This command runs the Python script for uploading and testing mobile device packages using AWS Device Farm.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/devicefarm/README.md#2025-04-09_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\npython device_testing/run_tests.py\n```\n\n----------------------------------------\n\nTITLE: Listing Amazon SQS Queues in C#\nDESCRIPTION: Demonstrates how to list Amazon SQS queues using the AWS SDK for .NET. This is part of the 'Hello Amazon SQS' example that introduces basic SQS operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/SQS/README.md#2025-04-09_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nListQueues\n```\n\n----------------------------------------\n\nTITLE: Deleting a Tracker in Amazon Location Service using Java\nDESCRIPTION: This code snippet shows how to delete a tracker in Amazon Location Service. It's part of the LocationActions class that provides various Location Service operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/location/README.md#2025-04-09_snippet_11\n\nLANGUAGE: Java\nCODE:\n```\nDeleteTracker\n```\n\n----------------------------------------\n\nTITLE: Running the SNS FIFO Topic Example in Python\nDESCRIPTION: Command to execute the example that demonstrates creating and publishing to a FIFO (First-In-First-Out) SNS topic, which guarantees order and prevents message duplication.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/sns/README.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npython sns_fifo_topic.py\n```\n\n----------------------------------------\n\nTITLE: Deleting an Object from Amazon S3 using SDK for SAP ABAP\nDESCRIPTION: This code snippet shows how to delete an object from a bucket in Amazon S3 using the SDK for SAP ABAP.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/sap-abap/services/s3/README.md#2025-04-09_snippet_4\n\nLANGUAGE: ABAP\nCODE:\n```\nzcl_aws1_s3_actions.clas.abap#L128\n```\n\n----------------------------------------\n\nTITLE: Implementing MainController for Work Item Management in Spring Boot\nDESCRIPTION: Spring REST controller that manages work items with CRUD operations. It handles GET requests to retrieve items with optional filtering by archive status, PUT requests to archive items, and POST requests to add new items. The controller uses dependency injection for database service access.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/Creating_rds_item_tracker/README.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage com.aws.rest;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.web.bind.annotation.CrossOrigin;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.PutMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\nimport java.time.LocalDateTime;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.UUID;\nimport java.util.stream.Collectors;\nimport java.util.stream.StreamSupport;\n\n@ComponentScan(basePackages = {\"com.aws.rest\"})\n@CrossOrigin(origins = \"*\")\n@RestController\n@RequestMapping(\"api/items\")\npublic class MainController {\n    private final DatabaseService dbService;\n\n    @Autowired\n    MainController(\n        DatabaseService dbService\n     ) {\n        this.dbService = dbService;\n     }\n\n    @GetMapping(\"\" )\n    public List<WorkItem> getItems(@RequestParam(required=false) String archived) {\n        Iterable<WorkItem> result;\n        if (archived != null && archived.compareTo(\"false\")==0)\n            result = dbService.getItemsDataSQLReport(0);\n        else if (archived != null && archived.compareTo(\"true\")==0)\n            result = dbService.getItemsDataSQLReport(1);\n        else\n            result = dbService.getItemsDataSQLReport(-1);\n\n        return StreamSupport.stream(result.spliterator(), false)\n            .collect(Collectors.toUnmodifiableList());\n    }\n\n    // Notice the : character which is used for custom methods. More information can be found here:\n    // https://cloud.google.com/apis/design/custom_methods\n    @PutMapping(\"{id}:archive\")\n    public String modUser(@PathVariable String id) {\n        dbService.flipItemArchive(id);\n        return id +\" was archived\";\n    }\n\n    @PostMapping(\"\")\n    public List<WorkItem> addItem(@RequestBody Map<String, String> payload) {\n        String name = payload.get(\"name\");\n        String guide = payload.get(\"guide\");\n        String description = payload.get(\"description\");\n        String status = payload.get(\"status\");\n\n        WorkItem item = new WorkItem();\n        String workId = UUID.randomUUID().toString();\n        String date = LocalDateTime.now().toString();\n        item.setId(workId);\n        item.setGuide(guide);\n        item.setDescription(description);\n        item.setName(name);\n        item.setDate(date);\n        item.setStatus(status);\n        dbService.injestNewSubmission(item);\n        Iterable<WorkItem> result= dbService.getItemsDataSQLReport(0);\n        return StreamSupport.stream(result.spliterator(), false)\n            .collect(Collectors.toUnmodifiableList());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initiating S3 Glacier Job\nDESCRIPTION: Initiates a new job in S3 Glacier using the InitiateJob API\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Glacier/README.md#2025-04-09_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nInitiateJob\n```\n\n----------------------------------------\n\nTITLE: Implementing Excel Report Generation in Java\nDESCRIPTION: Java class that generates Excel workbook reports containing image analysis data. Uses JXL library to create workbooks with formatted cells containing photo data including keys, labels, and confidence scores.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_photo_analyzer_app/README.md#2025-04-09_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.photo;\n\nimport jxl.CellView;\nimport jxl.Workbook;\nimport jxl.WorkbookSettings;\nimport jxl.format.UnderlineStyle;\nimport jxl.write.Label;\nimport jxl.write.WritableCellFormat;\nimport jxl.write.WritableFont;\nimport jxl.write.WritableSheet;\nimport jxl.write.WritableWorkbook;\nimport jxl.write.WriteException;\nimport org.springframework.stereotype.Component;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.List;\nimport java.util.Locale;\n\n@Component\npublic class WriteExcel {\n\n    private WritableCellFormat timesBoldUnderline;\n    private WritableCellFormat times;\n\n    // Returns an InputStream that represents the Excel Report.\n    public InputStream exportExcel(List<List<WorkItem>> list) {\n        try {\n            return write(list);\n        } catch (WriteException | IOException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n\n    // Generates the report and returns an inputstream.\n    public InputStream write(List<List<WorkItem>> list) throws IOException, WriteException {\n        ByteArrayOutputStream os = new ByteArrayOutputStream();\n        WorkbookSettings wbSettings = new WorkbookSettings();\n        wbSettings.setLocale(new Locale(\"en\", \"EN\"));\n        WritableWorkbook workbook = Workbook.createWorkbook(os, wbSettings);\n\n        int size = list.size();\n        for (int i = 0; i < size; i++) {\n            // Get the WorkItem from each list.\n            List<WorkItem> innerList = list.get(i);\n            workbook.createSheet(\"Sheet \" + (i + 1), i);\n            WritableSheet excelSheet = workbook.getSheet(i);\n            createLabel(excelSheet);\n            createContent(excelSheet, innerList);\n        }\n\n        // Close the workbook.\n        workbook.write();\n        workbook.close();\n\n        // Get an InputStream that represents the Report.\n        byte[] myBytes = os.toByteArray();\n        return new ByteArrayInputStream(myBytes);\n    }\n\n    // Create Headings in the Excel spreadsheet.\n    private void createLabel(WritableSheet sheet) throws WriteException {\n        // Create a times font.\n        WritableFont times10pt = new WritableFont(WritableFont.TIMES, 10);\n        // Define the cell format.\n        times = new WritableCellFormat(times10pt);\n        // Let's automatically wrap the cells.\n        times.setWrap(true);\n\n        // Create a bold font with underlines.\n        WritableFont times10ptBoldUnderline = new WritableFont(WritableFont.TIMES, 10, WritableFont.BOLD, false,\n            UnderlineStyle.SINGLE);\n        timesBoldUnderline = new WritableCellFormat(times10ptBoldUnderline);\n\n        // Let's automatically wrap the cells.\n        timesBoldUnderline.setWrap(true);\n\n        CellView cv = new CellView();\n        cv.setFormat(times);\n        cv.setFormat(timesBoldUnderline);\n        cv.setAutosize(true);\n\n        // Write a few headers.\n        addCaption(sheet, 0, 0, \"Photo\");\n        addCaption(sheet, 1, 0, \"Label\");\n        addCaption(sheet, 2, 0, \"Confidence\");\n    }\n\n    // Write the WorkItem Data to the Excel Report.\n    private void createContent(WritableSheet sheet, List<WorkItem> list) throws WriteException {\n        int size = list.size();\n        for (int i = 0; i < size; i++) {\n            WorkItem wi = list.get(i);\n            String key = wi.getKey();\n            String label = wi.getName();\n            String confidence = wi.getConfidence();\n\n            // First column.\n            addLabel(sheet, 0, i + 1, key);\n\n            // Second column.\n            addLabel(sheet, 1, i + 1, label);\n\n            // Third column.\n            addLabel(sheet, 2, i + 1, confidence);\n        }\n    }\n\n    private void addCaption(WritableSheet sheet, int column, int row, String s) throws WriteException {\n        Label label = new Label(column, row, s, timesBoldUnderline);\n        int cc = countString(s);\n        sheet.setColumnView(column, cc);\n        sheet.addCell(label);\n    }\n\n    private void addLabel(WritableSheet sheet, int column, int row, String s) throws WriteException {\n        Label label = new Label(column, row, s, times);\n        int cc = countString(s);\n        if (cc > 200) {\n            sheet.setColumnView(column, 150);\n        } else {\n            sheet.setColumnView(column, cc + 6);\n        }\n        sheet.addCell(label);\n    }\n\n    private int countString(String ss) {\n        int count = 0;\n        for (int i = 0; i < ss.length(); i++) {\n            if (ss.charAt(i) != ' ') {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the React Development Server\nDESCRIPTION: Command to start the React application in development mode, which will open the app at http://localhost:3000.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/resources/clients/react/elwing/src/plugins/sqs-message/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Listing Activities with AWS Step Functions Java SDK\nDESCRIPTION: This code snippet demonstrates how to list existing activities using the AWS Step Functions Java SDK. It utilizes the listActivities command to retrieve a list of activities.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/stepfunctions/README.md#2025-04-09_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\n// Code snippet for listing activities\n// Refer to: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/stepfunctions/src/main/java/com/example/stepfunctions/ListActivities.java\n```\n\n----------------------------------------\n\nTITLE: Aurora Serverless Database Operations\nDESCRIPTION: Python code demonstrating database operations using Amazon RDS Data Service with Aurora Serverless.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/cross_service/aurora_item_tracker/README.md#2025-04-09_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndef get_work_items(self, archived=None):\n    if archived is not None:\n        sql_where = \"WHERE archived=:archived\"\n        sql_params = [{'name': 'archived', 'value': {'booleanValue': archived}}]\n    sql = f\"SELECT iditem, description, guide, status, username, archived FROM {self._table_name} {sql_where}\"\n    results = self._run_statement(sql, sql_params=sql_params)\n\ndef _run_statement(self, sql, sql_params=None):\n    run_args = {\n        'database': self._db_name,\n        'resourceArn': self._cluster,\n        'secretArn': self._secret,\n        'sql': sql\n    }\n    if sql_params is not None:\n        run_args['parameters'] = sql_params\n    results = self._rdsdata_client.execute_statement(**run_args)\n```\n\n----------------------------------------\n\nTITLE: Getting an Amazon SQS Queue URL in C#\nDESCRIPTION: Demonstrates how to get the URL of an Amazon SQS queue using the AWS SDK for .NET. The queue URL is required for many SQS operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/SQS/README.md#2025-04-09_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nGetQueueUrl\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Packages\nDESCRIPTION: Command to install the required Python packages using pip in a virtual environment\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/rekognition/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Running the Hello EventBridge Scheduler Example\nDESCRIPTION: Command to run the introductory EventBridge Scheduler example that demonstrates how to list schedules.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/scheduler/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython hello/hello_scheduler.py\n```\n\n----------------------------------------\n\nTITLE: Listing Amazon SNS Topics in Ruby\nDESCRIPTION: This code snippet demonstrates how to list topics in Amazon SNS using the AWS SDK for Ruby. It refers to a method likely defined in the show_topics.rb file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/ruby/example_code/sns/README.md#2025-04-09_snippet_2\n\nLANGUAGE: Ruby\nCODE:\n```\nListTopics\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for AWS Lambda C++ Calculator Project\nDESCRIPTION: This CMake configuration sets up a C++ project for an AWS Lambda calculator function. It specifies C++11 as the standard, finds the AWS Lambda runtime package, adds the main executable, links necessary libraries, and packages the target for AWS Lambda deployment.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/lambda/cpp_lambda/calculator/CMakeLists.txt#2025-04-09_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_CXX_STANDARD 11)\nproject(cpp_lambda_calculator LANGUAGES CXX)\n\nfind_package(aws-lambda-runtime REQUIRED)\nadd_executable(${PROJECT_NAME} \"main.cpp\")\ntarget_link_libraries(${PROJECT_NAME}\n        PUBLIC\n        AWS::aws-lambda-runtime\n        jsoncpp\n        )\n\naws_lambda_package_target(${PROJECT_NAME})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Records from a Kinesis Data Stream in Java\nDESCRIPTION: This code snippet illustrates how to retrieve records from a Kinesis data stream using the AWS SDK for Java 2.x. It includes the necessary import statement and references the GetRecords class.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/kinesis/README.md#2025-04-09_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nimport com.example.kinesis.GetRecords;\n```\n\n----------------------------------------\n\nTITLE: Terminating EC2 Instances in .NET\nDESCRIPTION: This code snippet shows how to terminate EC2 instances using the AWS SDK for .NET. It's part of the EC2Wrapper class that encapsulates various EC2 operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv4/EC2/README.md#2025-04-09_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\nTerminateInstances\n```\n\n----------------------------------------\n\nTITLE: Batch Getting Items from DynamoDB in Swift\nDESCRIPTION: Demonstrates how to retrieve multiple items from a DynamoDB table in a single operation, which is more efficient than getting items individually.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/swift/example_code/dynamodb/README.md#2025-04-09_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nBatchGetItem(BatchGetItem/Sources/MovieDatabase.swift#L304)\n```\n\n----------------------------------------\n\nTITLE: Describing DB Parameter Groups using Amazon RDS in Java\nDESCRIPTION: This code snippet demonstrates how to describe DB parameter groups using Amazon RDS with AWS SDK for Java 2.x. It is part of a larger RDS scenario.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/rds/README.md#2025-04-09_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\nsrc/main/java/com/example/rds/RDSScenario.java#L531\n```\n\n----------------------------------------\n\nTITLE: Describing a MediaStore Container in Java\nDESCRIPTION: Demonstrates how to retrieve detailed information about a specific container in AWS Elemental MediaStore using the AWS SDK for Java 2.x. This is useful for checking container properties and settings.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/mediastore/README.md#2025-04-09_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nDescribeContainer\n```\n\n----------------------------------------\n\nTITLE: Describing a DynamoDB Table with C++\nDESCRIPTION: This code snippet shows how to retrieve information about a DynamoDB table using the AWS SDK for C++. It provides details such as the table's schema, status, and provisioned throughput.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/dynamodb/README.md#2025-04-09_snippet_7\n\nLANGUAGE: C++\nCODE:\n```\nDescribeTable\n```\n\n----------------------------------------\n\nTITLE: Deleting an IAM Access Key in C++\nDESCRIPTION: Code excerpt showing how to delete an IAM access key using the AWS SDK for C++.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/iam/README.md#2025-04-09_snippet_7\n\nLANGUAGE: C++\nCODE:\n```\n// From delete_access_key.cpp line 35\n```\n\n----------------------------------------\n\nTITLE: Converting XML Document to String in Kotlin\nDESCRIPTION: Transforms an XML Document object to a string representation using TransformerFactory. Handles the conversion of DOM structure to text format.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/itemtracker_dynamodb/README.md#2025-04-09_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nprivate fun convertToString(xml: Document): String? {\n    try {\n        val transformer = TransformerFactory.newInstance().newTransformer()\n        val result = StreamResult(StringWriter())\n        val source = DOMSource(xml)\n        transformer.transform(source, result)\n        return result.writer.toString()\n    } catch (ex: TransformerException) {\n        ex.printStackTrace()\n    }\n    return null\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Contacts in Amazon SES v2 API using Rust\nDESCRIPTION: This code snippet demonstrates how to list contacts in Amazon SES v2 API using the AWS SDK for Rust. The implementation is located in the list-contacts.rs file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/ses/README.md#2025-04-09_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\n// Implementation in src/bin/list-contacts.rs#L26\n```\n\n----------------------------------------\n\nTITLE: Updating OpsItem\nDESCRIPTION: Updates an existing OpsItem using the UpdateOpsItem API.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/ssm/README.md#2025-04-09_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nsrc/main/java/com/example/scenario/SSMActions.java#L170\n```\n\n----------------------------------------\n\nTITLE: Example Query Output Format\nDESCRIPTION: Sample output showing the format for displaying query execution details including date ranges, log counts, and performance metrics.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/cloudwatch_logs_large_query/SPECIFICATION.md#2025-04-09_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nStarting a recursive query...\nQuery date range: 2023-12-22T19:08:42.000Z to 2023-12-22T19:13:41.994Z. Found 10000 logs.\nQuery date range: 2023-12-22T19:09:41.995Z to 2023-12-22T19:11:41.994Z. Found 10000 logs.\nQuery date range: 2023-12-22T19:11:41.995Z to 2023-12-22T19:13:41.994Z. Found 10000 logs.\nQuery date range: 2023-12-22T19:10:41.995Z to 2023-12-22T19:11:11.994Z. Found 5000 logs.\nQuery date range: 2023-12-22T19:11:11.995Z to 2023-12-22T19:11:41.994Z. Found 5000 logs.\nQuery date range: 2023-12-22T19:12:41.995Z to 2023-12-22T19:13:11.994Z. Found 5000 logs.\nQuery date range: 2023-12-22T19:13:11.995Z to 2023-12-22T19:13:41.994Z. Found 5000 logs.\nQueries finished in 11.253 seconds.\nTotal logs found: 50000\n```\n\n----------------------------------------\n\nTITLE: Starting a SageMaker Pipeline Execution in Java\nDESCRIPTION: This code snippet demonstrates how to start a SageMaker pipeline execution using the AWS SDK for Java 2.x. It's part of the workflow for running geospatial jobs and pipelines.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/sagemaker/README.md#2025-04-09_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nStartPipelineExecution\n```\n\n----------------------------------------\n\nTITLE: Listing Contacts with Amazon SES v2 API in C#\nDESCRIPTION: This snippet shows how to list contacts using the Amazon SES v2 API. It's part of the SESv2Wrapper class and uses the AmazonSimpleEmailServiceV2Client.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/SESv2/README.md#2025-04-09_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\npublic async Task<List<Contact>> ListContacts(string listName)\n{\n    var listContactsRequest = new ListContactsRequest\n    {\n        ContactListName = listName\n    };\n\n    try\n    {\n        var response = await _sesv2Client.ListContactsAsync(listContactsRequest);\n        Console.WriteLine($\"Contacts retrieved: {response.Contacts.Count}\");\n        return response.Contacts;\n    }\n    catch (Exception ex)\n    {\n        Console.WriteLine($\"ListContacts failed: {ex.Message}\");\n        return new List<Contact>();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Describing DB Instances with Amazon RDS using PHP SDK\nDESCRIPTION: Code example demonstrating how to retrieve information about database instances using Amazon RDS with the AWS SDK for PHP. Reference to DescribeInstance.php implementation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/php/example_code/rds/README.md#2025-04-09_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Getting Started with SageMaker Models and Endpoints using AWS SDK for SAP ABAP\nDESCRIPTION: This scenario demonstrates how to start a training job, create a SageMaker model, create an endpoint configuration, create an endpoint, and clean up resources using the AWS SDK for SAP ABAP.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/sap-abap/services/sagemaker/README.md#2025-04-09_snippet_11\n\nLANGUAGE: ABAP\nCODE:\n```\nzcl_aws1_sgm_scenario.clas.abap\n```\n\n----------------------------------------\n\nTITLE: Listing Tags for OpenSearch Domain in Java\nDESCRIPTION: This code snippet shows how to list tags for an OpenSearch domain using the AWS SDK for Java 2.x. It's part of the OpenSearchActions class.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/opensearch/README.md#2025-04-09_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\n// OpenSearchActions.java#L265\n// Code for ListTags operation\n```\n\n----------------------------------------\n\nTITLE: Creating a Keyspace in Amazon Keyspaces using Kotlin\nDESCRIPTION: This code snippet shows how to create a keyspace in Amazon Keyspaces using the AWS SDK for Kotlin. It's part of the basic operations demonstrated in the scenario.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/keyspaces/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nsrc/main/kotlin/com/example/keyspace/ScenarioKeyspaces.kt#L616\n```\n\n----------------------------------------\n\nTITLE: Destroying AWS Resources\nDESCRIPTION: Command to destroy and clean up the AWS resources created for the example\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/cross_service/apigateway_websocket_chat/README.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython websocket_chat.py destroy\n```\n\n----------------------------------------\n\nTITLE: Running the SES Identity Replication Example\nDESCRIPTION: Command to run the Amazon SES example that demonstrates how to copy email and domain identities from one AWS Region to another. This example also copies verification records to Route 53 for domain identities.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/ses/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython ses_replicate_identities.py\n```\n\n----------------------------------------\n\nTITLE: Modifying a DB Parameter Group with Amazon RDS in C#\nDESCRIPTION: This snippet shows how to modify a DB parameter group using the Amazon RDS API. It's part of the RDSWrapper class focused on parameter group operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/RDS/README.md#2025-04-09_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\nModifyDBParameterGroup\n```\n\n----------------------------------------\n\nTITLE: Listing DynamoDB Tables in Go\nDESCRIPTION: Lists DynamoDB tables with optional limit parameter. Default limit is 100 tables, values less than zero are set to 10.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/dynamodb/README.md#2025-04-09_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ngo run ListTables.go [-l LIMIT]\n```\n\n----------------------------------------\n\nTITLE: Retrieving a MediaConvert Job in Java\nDESCRIPTION: This code snippet shows how to retrieve information about a specific MediaConvert job using the AWS SDK for Java 2.x. The GetJob action is used to fetch details of an existing transcoding job.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/mediaconvert/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nsrc/main/java/com/example/mediaconvert/GetJob.java#L6\n```\n\n----------------------------------------\n\nTITLE: Listing Tables in Amazon Keyspaces using Kotlin\nDESCRIPTION: This code snippet illustrates how to list all tables in a keyspace in Amazon Keyspaces using the AWS SDK for Kotlin. It's part of the single actions examples.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/keyspaces/README.md#2025-04-09_snippet_8\n\nLANGUAGE: Kotlin\nCODE:\n```\nsrc/main/kotlin/com/example/keyspace/ScenarioKeyspaces.kt#L459\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Lambda Scheduled Events Example\nDESCRIPTION: Commands for installing the necessary dependencies for the project, including global installation of ts-node and local installation of all required packages specified in package.json.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/cross-services/lambda-scheduled-events/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install ts-node -g # If using JavaScript, enter 'npm install node -g' instead\ncd javascriptv3/example_code/cross-services/lamba-api-gateway\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Running Bedrock Example Script\nDESCRIPTION: Command to execute the main Bedrock example runner script\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/php/example_code/bedrock/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp Runner.php\n```\n\n----------------------------------------\n\nTITLE: Receiving Messages with Long Polling in Go\nDESCRIPTION: Example command for receiving messages using long polling from an AWS SQS queue. Supports configurable visibility timeout and wait time parameters.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/sqs/README.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngo run ReceiveLPMessage.go -q QUEUE [-v VISIBILITY] [-w WAIT-TIME]\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies for AWS SDK\nDESCRIPTION: Specifies required Python packages and their minimum versions for AWS SDK examples. Requires boto3 version 1.26.79 or higher for AWS SDK functionality and pytest version 7.2.1 or higher for testing.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/ses/requirements.txt#2025-04-09_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nboto3>=1.26.79\npytest>=7.2.1\n```\n\n----------------------------------------\n\nTITLE: Getting IAM Server Certificate Information in C++\nDESCRIPTION: Code excerpt showing how to get information about an IAM server certificate using the AWS SDK for C++.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/iam/README.md#2025-04-09_snippet_15\n\nLANGUAGE: C++\nCODE:\n```\n// From get_server_certificate.cpp line 36\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Build File for PAM Kotlin Project\nDESCRIPTION: Gradle build configuration file for the Photo Asset Management Kotlin project. Includes dependencies for AWS SDK for Kotlin (DynamoDB, S3, SNS, Rekognition), Spring Boot, Jackson, AWS Lambda, and other required libraries. Sets up Java 17 compatibility and application configuration.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/creating_pam/README.md#2025-04-09_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n import org.jetbrains.kotlin.gradle.tasks.KotlinCompile\n\nplugins {\n    kotlin(\"jvm\") version \"1.9.0\"\n    id(\"com.github.johnrengelman.shadow\") version \"7.1.0\"\n    application\n}\n\ngroup = \"me.scmacdon\"\nversion = \"1.0-SNAPSHOT\"\n\njava {\n    sourceCompatibility = JavaVersion.VERSION_17\n    targetCompatibility = JavaVersion.VERSION_17\n}\n\nbuildscript {\n    repositories {\n        maven(\"https://plugins.gradle.org/m2/\")\n    }\n    dependencies {\n        classpath(\"org.jlleitschuh.gradle:ktlint-gradle:10.3.0\")\n    }\n}\n\nrepositories {\n    mavenCentral()\n    gradlePluginPortal()\n}\n\napply(plugin = \"org.jlleitschuh.gradle.ktlint\")\ndependencies {\n    implementation(\"aws.sdk.kotlin:dynamodb:1.0.0\")\n    implementation(\"aws.sdk.kotlin:s3:1.0.0\")\n    implementation(\"aws.sdk.kotlin:sns:1.0.0\")\n    implementation(\"aws.sdk.kotlin:rekognition:1.0.0\")\n    implementation(\"aws.smithy.kotlin:http-client-engine-okhttp:0.28.0\")\n    implementation(\"aws.smithy.kotlin:http-client-engine-crt:0.28.0\")\n    implementation(\"org.springframework.boot:spring-boot-starter-web:2.7.5\")\n    implementation(\"com.fasterxml.jackson.module:jackson-module-kotlin:2.13.3\")\n    implementation(\"org.jetbrains.kotlin:kotlin-reflect\")\n    implementation(\"com.amazonaws:aws-java-sdk-lambda:1.12.429\")\n    implementation(\"com.amazonaws:aws-lambda-java-core:1.2.2\")\n    implementation(\"com.amazonaws:aws-lambda-java-events:3.11.1\")\n    implementation(\"org.jetbrains.kotlin:kotlin-stdlib-jdk8\")\n    implementation(\"javax.mail:javax.mail-api:1.6.2\")\n    implementation(\"com.sun.mail:javax.mail:1.6.2\")\n    implementation(\"com.google.code.gson:gson:2.10\")\n    implementation(\"org.json:json:20230227\")\n    implementation(\"com.googlecode.json-simple:json-simple:1.1.1\")\n    testImplementation(\"org.springframework.boot:spring-boot-starter-test:2.7.3\")\n}\n\napplication {\n    mainClassName = \"com.example.photo.PhotoApplication\"\n}\n\ntasks.withType<KotlinCompile> {\n    kotlinOptions {\n        freeCompilerArgs = listOf(\"-Xjsr305=strict\")\n        jvmTarget = \"17\"\n    }\n}\n\ntasks.withType<Test> {\n    useJUnitPlatform()\n}\n\n\n```\n\n----------------------------------------\n\nTITLE: Defining DynamoDB Data Model with Enhanced Client in Java\nDESCRIPTION: Java class representing a DynamoDB data model using the @DynamoDbBean annotation. It demonstrates how to create a bean for DynamoDB mapping with partition key and attribute annotations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/monitor_dynamodb/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npackage org.example;\n\nimport software.amazon.awssdk.enhanced.dynamodb.mapper.annotations.DynamoDbBean;\nimport software.amazon.awssdk.enhanced.dynamodb.mapper.annotations.DynamoDbPartitionKey;\n\n@DynamoDbBean\npublic class Greeting {\n    private String id;\n    private String name;\n\n    public String getId() {\n        return id;\n    }\n\n    @DynamoDbPartitionKey\n    public void setId(String id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    @Override\n    public String toString() {\n        return String.format(\n                \"%s[id=%s, name=%s]\",\n                getClass().getSimpleName(), id, name\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Ruby Backend API Server\nDESCRIPTION: Command to start the Ruby API server that handles database operations and provides REST endpoints for the frontend application.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/ruby/cross_service_examples/item_tracker/README.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd ruby/cross_service_examples/item-tracker\nruby app.rb # Starts REST API listening on port 8080.\n```\n\n----------------------------------------\n\nTITLE: SNS Topic Name Prompt\nDESCRIPTION: Prompt for entering SNS topic name, which can be 1-256 characters including ASCII letters, numbers, underscores, and hyphens\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/topics_and_queues/README.md#2025-04-09_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nEnter a name for your SNS topic:\n```\n\n----------------------------------------\n\nTITLE: Getting AWS Glue Crawler Information in Java\nDESCRIPTION: Example demonstrating how to retrieve information about an AWS Glue crawler, including its status and configuration.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/glue/README.md#2025-04-09_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nGlueScenario.java#L383\n```\n\n----------------------------------------\n\nTITLE: Describing Auto Scaling Instances in PHP\nDESCRIPTION: Retrieves information about Auto Scaling instances. This function returns details about instances managed by Auto Scaling, including their lifecycle state and health status.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/php/example_code/auto-scaling/README.md#2025-04-09_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nDescribeAutoScalingInstances\n```\n\n----------------------------------------\n\nTITLE: Implementing User Sign-up with MFA in Amazon Cognito Identity Provider using C#\nDESCRIPTION: This code example demonstrates a complete scenario for signing up a user with a user pool that requires multi-factor authentication (MFA) in Amazon Cognito Identity Provider using C#. It includes steps for sign-up, confirmation, setting up MFA, and signing in with MFA.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Cognito/README.md#2025-04-09_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\n// Full implementation in Actions/CognitoWrapper.cs\n```\n\n----------------------------------------\n\nTITLE: Deleting CloudWatch Alarms in C++\nDESCRIPTION: This code snippet demonstrates how to delete CloudWatch alarms using the AWS SDK for C++. It requires the necessary permissions to perform CloudWatch actions.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/cloudwatch/README.md#2025-04-09_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ndelete_alarm.cpp#L15\n```\n\n----------------------------------------\n\nTITLE: Running the .NET application from command line\nDESCRIPTION: Command to run the .NET application from the command line by navigating to the folder containing the .csproj file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/cross-service/DynamoDbItemTracker/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet run\n```\n\n----------------------------------------\n\nTITLE: Hello Amazon EC2 using DescribeSecurityGroups\nDESCRIPTION: Demonstrates how to get started with Amazon EC2 by describing security groups. This is referenced but the actual code is in HelloEC2.cs.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/EC2/README.md#2025-04-09_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// Hello Amazon EC2 (DescribeSecurityGroups)\n```\n\n----------------------------------------\n\nTITLE: Running Python Unit Tests\nDESCRIPTION: Command to run Python unit tests using pytest, excluding integration tests marked with 'integ'.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/README.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npython -m pytest -m \"not integ\"\n```\n\n----------------------------------------\n\nTITLE: Building Swift examples using command line\nDESCRIPTION: This snippet demonstrates how to build Swift examples using the command line. It requires navigating to the example's directory and running the swift build command.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/swift/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ swift build\n```\n\n----------------------------------------\n\nTITLE: Updating AWS Batch Compute Environment in Java\nDESCRIPTION: Shows how to update a compute environment in AWS Batch using the updateComputeEnvironment operation. This allows modifying the configuration of existing compute resources.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/batch/README.md#2025-04-09_snippet_12\n\nLANGUAGE: Java\nCODE:\n```\nUpdateComputeEnvironment\n```\n\n----------------------------------------\n\nTITLE: Listing Lambda Functions with AWS SDK for .NET\nDESCRIPTION: Retrieves a list of available Lambda functions for the AWS account. Returns a collection of function configurations with their specifications.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Lambda/README.md#2025-04-09_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n/// <summary>\n/// Get a list of Lambda functions.\n/// </summary>\n/// <returns>A list of FunctionConfiguration objects.</returns>\npublic async Task<List<FunctionConfiguration>> ListFunctionsAsync()\n{\n    var functionList = new List<FunctionConfiguration>();\n\n    var response = await _lambdaService.ListFunctionsAsync();\n\n    functionList.AddRange(response.Functions);\n\n    // If there are more functions, get them too.\n    var marker = response.NextMarker;\n\n    while (marker is not null)\n    {\n        response = await _lambdaService.ListFunctionsAsync(new ListFunctionsRequest\n        {\n            Marker = marker,\n        });\n\n        functionList.AddRange(response.Functions);\n        marker = response.NextMarker;\n    }\n\n    return functionList;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Identity Pool with Amazon Cognito Identity in Swift\nDESCRIPTION: This snippet demonstrates how to create an identity pool using the Amazon Cognito Identity service. It's part of the CognitoIdentityHandler class and likely requires additional context from the full file to function properly.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/swift/example_code/cognito-identity/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nCreateIdentityPool\n```\n\n----------------------------------------\n\nTITLE: DynamoDB Entity Mapping for PPE Data\nDESCRIPTION: Data model class using DynamoDB enhanced client annotations to map PPE detection results to the Gear table. Includes fields for item identification, descriptions, and confidence levels.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_lambda_ppe/README.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.ppe;\nimport software.amazon.awssdk.enhanced.dynamodb.mapper.annotations.DynamoDbBean;\nimport software.amazon.awssdk.enhanced.dynamodb.mapper.annotations.DynamoDbPartitionKey;\n\n@DynamoDbBean\npublic class Gear {\n\n    private String id;\n    private String date;\n    private String item;\n    private String key;\n    private String itemDescription;\n    private String coverDescription;\n    private String confidence;\n\n    @DynamoDbPartitionKey\n    public String getId() {\n        return this.id;\n    }\n\n    public void setId(String id) {\n        this.id = id;\n    }\n\n    public void setKey(String key) {\n        this.key = key;\n    }\n\n    public String getKey() {\n        return this.key;\n    }\n\n    public void setDate(String date) {\n        this.date = date;\n    }\n\n    public String getDate() {\n        return this.date;\n    }\n\n    public String getItem() {\n        return this.item;\n    }\n\n    public void setItem(String item) {\n        this.item = item;\n    }\n\n    public String getItemDescription() {\n        return this.itemDescription;\n    }\n\n    public void setItemDescription(String itemDescription) {\n        this.itemDescription = itemDescription;\n    }\n\n    public String getCoverDescription() {\n        return this.coverDescription;\n    }\n\n    public void setCoverDescription(String coverDescription) {\n        this.coverDescription = coverDescription;\n    }\n\n    public String getConfidence() {\n        return this.confidence;\n    }\n\n    public void setConfidence(String confidence) {\n        this.confidence = confidence;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing IAM Users in C++\nDESCRIPTION: Code excerpt showing how to list IAM users using the AWS SDK for C++.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/iam/README.md#2025-04-09_snippet_20\n\nLANGUAGE: C++\nCODE:\n```\n// From list_users.cpp line 34\n```\n\n----------------------------------------\n\nTITLE: Listing State Machines with AWS Step Functions in Kotlin\nDESCRIPTION: Demonstrates how to list state machines using the AWS SDK for Kotlin with the listStateMachines command. This is part of the 'Hello AWS Step Functions' example.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/stepfunctions/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Code not provided in the given content\n```\n\n----------------------------------------\n\nTITLE: Running CloudWatch Basics Scenario\nDESCRIPTION: Command to execute the CloudWatch basics example script that demonstrates metrics and alarms management.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/cloudwatch/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython cloudwatch_basics.py\n```\n\n----------------------------------------\n\nTITLE: Deleting a Keyspace in Amazon Keyspaces using C#\nDESCRIPTION: This code snippet shows how to delete a keyspace in Amazon Keyspaces using the AWS SDK for .NET. It's an example of a single action operation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Keyspaces/README.md#2025-04-09_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nActions/KeyspacesWrapper.cs#L63\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for AWS EBS Examples\nDESCRIPTION: Sets up a CMake project for building AWS EBS examples using the AWS SDK for C++. Configures C++11 standard, finds required AWS SDK components, and creates executable targets for multiple EBS operations including attach_volume, create_volume, delete_volume, and describe_volumes.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/ebs/CMakeLists.txt#2025-04-09_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nproject(ebs-examples)\nset (CMAKE_CXX_STANDARD 11)\n\n# Locate the aws sdk for c++ package.\nfind_package(AWSSDK REQUIRED COMPONENTS elasticbeanstalk ec2)\n\nset(EXAMPLES \"\")\nlist(APPEND EXAMPLES \"attach_volume\")\nlist(APPEND EXAMPLES \"create_volume\")\nlist(APPEND EXAMPLES \"delete_volume\")\nlist(APPEND EXAMPLES \"describe_volumes\")\n\n# The executables to build.\nforeach(EXAMPLE IN LISTS EXAMPLES)\n  add_executable(${EXAMPLE} ${EXAMPLE}.cpp)\n  target_link_libraries(${EXAMPLE} ${AWSSDK_LINK_LIBRARIES})\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for AWS Glacier C++ Examples\nDESCRIPTION: This CMake script sets up a project for building AWS Glacier SDK examples in C++. It requires CMake 3.13 or higher, finds the AWS SDK for C++ with the Glacier component, and configures executable targets for multiple example applications.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/glacier/CMakeLists.txt#2025-04-09_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nproject(glacier-examples)\nset (CMAKE_CXX_STANDARD 11)\n\n# Locate the aws sdk for c++ package.\nfind_package(AWSSDK REQUIRED COMPONENTS glacier)\n\nset(EXAMPLES \"\")\nlist(APPEND EXAMPLES \"create_vault\")\nlist(APPEND EXAMPLES \"upload_archive\")\nlist(APPEND EXAMPLES \"upload_archive_multipart\")\n\n\n# The executables to build.\nforeach(EXAMPLE IN LISTS EXAMPLES)\n  add_executable(${EXAMPLE} ${EXAMPLE}.cpp)\n  target_link_libraries(${EXAMPLE} ${AWSSDK_LINK_LIBRARIES})\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Dependencies\nDESCRIPTION: Command to install the necessary Python packages using pip package manager in a virtual environment for running the HealthImaging examples.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/medical-imaging/imaging_set_and_frames_workflow/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Dependencies\nDESCRIPTION: Command to install the necessary Python packages using pip package manager in a virtual environment for running the HealthImaging examples.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/medical-imaging/imaging_set_and_frames_workflow/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Getting Amazon SQS Queue Attributes in C#\nDESCRIPTION: Shows how to retrieve the attributes of an Amazon SQS queue using the AWS SDK for .NET. This can be used to get information about the queue's configuration and status.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/SQS/README.md#2025-04-09_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nGetQueueAttributes\n```\n\n----------------------------------------\n\nTITLE: Retrieving an IAM Policy using AWS SDK for Kotlin\nDESCRIPTION: This snippet demonstrates how to retrieve an IAM policy using the AWS SDK for Kotlin. It requires the policy ARN as input and returns the policy details.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/iam/README.md#2025-04-09_snippet_10\n\nLANGUAGE: Kotlin\nCODE:\n```\nsrc/main/kotlin/com/kotlin/iam/GetPolicy.kt#L37\n```\n\n----------------------------------------\n\nTITLE: Configuring DynamoDB Table and Email Settings\nDESCRIPTION: Python configuration file snippet showing how to set the DynamoDB table name and SES verified sender email address for the application.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/cross_service/dynamodb_item_tracker/README.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nTABLE_NAME = 'doc-example-work-item-tracker'\nSENDER_EMAIL = 'your_name@example.com'\n```\n\n----------------------------------------\n\nTITLE: Getting Keyspace Information in Amazon Keyspaces using C#\nDESCRIPTION: This code snippet shows how to retrieve information about a specific keyspace in Amazon Keyspaces using the AWS SDK for .NET. It's an example of a single action operation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Keyspaces/README.md#2025-04-09_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nActions/KeyspacesWrapper.cs#L94\n```\n\n----------------------------------------\n\nTITLE: Running ListInstances Example in Go\nDESCRIPTION: This example demonstrates listing Amazon RDS instances using the AWS SDK for Go. It doesn't require any command-line arguments.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/rds/README.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngo run ListInstances.go\n```\n\n----------------------------------------\n\nTITLE: StartMedicalStreamTranscription in Java\nDESCRIPTION: This code snippet demonstrates how to start a medical stream transcription using Amazon Transcribe Streaming. It references a specific line in the TranscribeMedicalStreamingDemoApp.java file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/transcribe-streaming/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nsrc/main/java/com/amazonaws/transcribestreaming/TranscribeMedicalStreamingDemoApp.java#L25\n```\n\n----------------------------------------\n\nTITLE: Running Hello Auto Scaling Example\nDESCRIPTION: Execute the basic Auto Scaling example that demonstrates how to get started with the service.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/auto-scaling/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython hello/hello_autoscaling.py\n```\n\n----------------------------------------\n\nTITLE: AWS Glue SDK for PHP Basic Operations Reference\nDESCRIPTION: This file contains references to various AWS Glue SDK operations in PHP, including CreateCrawler, CreateJob, DeleteCrawler, DeleteDatabase, DeleteJob, DeleteTable, GetCrawler, GetDatabase, GetJobRun, GetJobRuns, GetTables, ListJobs, StartCrawler, and StartJobRun. The implementation details are in the GettingStartedWithGlue.php file at specific line numbers.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/php/example_code/glue/README.md#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n- [CreateCrawler](GettingStartedWithGlue.php#L47)\n- [CreateJob](GettingStartedWithGlue.php#L110)\n- [DeleteCrawler](GettingStartedWithGlue.php#L180)\n- [DeleteDatabase](GettingStartedWithGlue.php#L173)\n- [DeleteJob](GettingStartedWithGlue.php#L159)\n- [DeleteTable](GettingStartedWithGlue.php#L166)\n- [GetCrawler](GettingStartedWithGlue.php#L69)\n- [GetDatabase](GettingStartedWithGlue.php#L58)\n- [GetJobRun](GettingStartedWithGlue.php#L120)\n- [GetJobRuns](GettingStartedWithGlue.php#L130)\n- [GetTables](GettingStartedWithGlue.php#L58)\n- [ListJobs](GettingStartedWithGlue.php#L151)\n- [StartCrawler](GettingStartedWithGlue.php#L47)\n- [StartJobRun](GettingStartedWithGlue.php#L58)\n```\n\n----------------------------------------\n\nTITLE: Running Amazon S3 Bucket Deletion Script in Go\nDESCRIPTION: This snippet shows the command to run the S3 bucket deletion script. It takes a prefix argument to specify which buckets to delete.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/example_code/s3/delete-buckets-by-prefix/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngo run s3_delete_buckets -p PREFIX\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for AWS Medical Imaging SDK\nDESCRIPTION: Sets up the CMake project configuration with required version, service components, and C++ standard. Configures build settings and identifies the project name for medical imaging examples.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/medical-imaging/imaging_set_and_frames_workflow/CMakeLists.txt#2025-04-09_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\n\nset(SERVICE_NAME medical-imaging)\nset(SERVICE_COMPONENTS medical-imaging cloudformation s3 sts)\n\nproject(\"${SERVICE_NAME}-examples\")\n\nset(BUILD_SHARED_LIBS ON)\nset(CMAKE_CXX_STANDARD 17)\n```\n\n----------------------------------------\n\nTITLE: Initiating Asynchronous Document Analysis with Amazon Textract in SAP ABAP\nDESCRIPTION: Demonstrates how to start an asynchronous document analysis job using the StartDocumentAnalysis function. This function is implemented in the zcl_aws1_tex_actions class.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/sap-abap/services/textract/README.md#2025-04-09_snippet_3\n\nLANGUAGE: ABAP\nCODE:\n```\nzcl_aws1_tex_actions.clas.abap#L255\n```\n\n----------------------------------------\n\nTITLE: Running Aurora Basics Scenario\nDESCRIPTION: Command to run the basic Aurora scenario that demonstrates cluster creation, parameter groups, and snapshots.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/aurora/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython scenario_get_started_aurora.py\n```\n\n----------------------------------------\n\nTITLE: Creating an AWS Glue Job with .NET\nDESCRIPTION: This snippet shows how to create an AWS Glue job using the AWS SDK for .NET. It sets up job parameters including name, IAM role, and script location.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Glue/README.md#2025-04-09_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nCreateJob\n```\n\n----------------------------------------\n\nTITLE: Describing CloudWatch Alarm History in Kotlin\nDESCRIPTION: This code snippet shows how to retrieve and describe the history of a CloudWatch alarm using the AWS SDK for Kotlin. It's part of a comprehensive CloudWatch scenario.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/cloudwatch/README.md#2025-04-09_snippet_4\n\nLANGUAGE: Kotlin\nCODE:\n```\nDescribeAlarmHistory\n```\n\n----------------------------------------\n\nTITLE: Creating IAM Account Alias in Java\nDESCRIPTION: This snippet shows how to create an IAM account alias using the AWS SDK for Java 2.x.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/iam/README.md#2025-04-09_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nsrc/main/java/com/example/iam/CreateAccountAlias.java#L6\n```\n\n----------------------------------------\n\nTITLE: Running Resilient Service Scenario in Python\nDESCRIPTION: Executes the resilient service scenario script, which demonstrates building a load-balanced web service using EC2, Auto Scaling, and other AWS services.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/ec2/README.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython ../../cross_service/resilient_service/runner.py\n```\n\n----------------------------------------\n\nTITLE: CreateLogStream Implementation in .NET\nDESCRIPTION: Example showing how to create a new CloudWatch Logs log stream using AWS SDK for .NET. The implementation is referenced in the CreateLogStream.cs file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/CloudWatchLogs/README.md#2025-04-09_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n/* Code reference only - implementation in CreateLogStream.cs#L6 */\n```\n\n----------------------------------------\n\nTITLE: Creating a Bucket in Amazon S3 using SDK for SAP ABAP\nDESCRIPTION: This code snippet shows how to create a new bucket in Amazon S3 using the SDK for SAP ABAP.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/sap-abap/services/s3/README.md#2025-04-09_snippet_2\n\nLANGUAGE: ABAP\nCODE:\n```\nzcl_aws1_s3_actions.clas.abap#L85\n```\n\n----------------------------------------\n\nTITLE: Running RDS Basics Scenario\nDESCRIPTION: Executes the RDS basics scenario that demonstrates creating parameter groups, DB instances, taking snapshots and cleanup operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/rds/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython scenario_get_started_instances.py\n```\n\n----------------------------------------\n\nTITLE: Building Executables and Libraries for AWS S3 CRT Examples\nDESCRIPTION: Iterates through source files to create executables for each example. It also sets up library targets and unit tests when BUILD_TESTING is enabled.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/s3-crt/CMakeLists.txt#2025-04-09_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nforeach(file ${AWSDOC_S3CRT_SOURCE})\n    get_filename_component(EXAMPLE ${file} NAME_WE)\n\n    set(EXAMPLE_EXE run_${EXAMPLE})\n\n    add_executable(${EXAMPLE_EXE} ${AWSDOC_S3CRT_HEADERS} ${file})\n\n    if(MSVC AND BUILD_SHARED_LIBS)\n        target_compile_definitions(${EXAMPLE_EXE} PUBLIC \"USE_IMPORT_EXPORT\")\n        target_compile_definitions(${EXAMPLE_EXE} PRIVATE \"AWSDOC_S3CRT_EXPORTS\")\n    endif()\n\n    target_include_directories(${EXAMPLE_EXE} PUBLIC\n        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\n        $<INSTALL_INTERFACE:include>)\n    target_link_libraries(${EXAMPLE_EXE} ${AWSSDK_LINK_LIBRARIES}\n        ${AWSSDK_PLATFORM_DEPS})\n\n    if(BUILD_TESTING)\n        enable_testing()\n\n        set(EXAMPLE_LIB ${EXAMPLE})\n\n        add_library(${EXAMPLE_LIB} ${AWSDOC_S3CRT_HEADERS} ${file} )\n\n        if(MSVC AND BUILD_SHARED_LIBS)\n            target_compile_definitions(${EXAMPLE_LIB} PUBLIC \"USE_IMPORT_EXPORT\")\n            target_compile_definitions(${EXAMPLE_LIB} PRIVATE \"AWSDOC_S3CRT_EXPORTS\")\n        endif()\n\n        target_include_directories(${EXAMPLE_LIB} PUBLIC\n            $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\n            $<INSTALL_INTERFACE:include>)\n        target_link_libraries(${EXAMPLE_LIB} ${AWSSDK_LINK_LIBRARIES}\n            ${AWSSDK_PLATFORM_DEPS})\n\n        set(EXAMPLE_TEST test_${EXAMPLE})\n        set(EXAMPLE_TEST_FILE ${CMAKE_CURRENT_SOURCE_DIR}/tests/test_${EXAMPLE}.cpp)\n\n        if(EXISTS ${EXAMPLE_TEST_FILE})\n            add_executable(${EXAMPLE_TEST} ${EXAMPLE_TEST_FILE} )\n\n            target_include_directories(${EXAMPLE_TEST} PUBLIC\n                $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\n                $<INSTALL_INTERFACE:include>)\n            target_link_libraries(${EXAMPLE_TEST} ${EXAMPLE_LIB} )\n            add_test(${EXAMPLE_TEST} ${EXAMPLE_TEST})\n        endif()\n    endif()\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Starting Execution in AWS Step Functions using Rust\nDESCRIPTION: This code snippet demonstrates how to start an execution in AWS Step Functions using the AWS SDK for Rust. It requires proper AWS credentials and an existing Step Functions definition.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/stepfunction/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\n// Code content not provided in the input text, but referenced as:\n// src/bin/start-execution.rs\n```\n\n----------------------------------------\n\nTITLE: User Input for Checksum Algorithm Selection in Bash\nDESCRIPTION: This code snippet shows the user interface for selecting a checksum algorithm and deciding whether to let the SDK calculate the checksum or use a hash calculated by the application. It demonstrates the interactive nature of the scenario.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/s3_object_integrity/SPECIFICATION.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nChoose from one of the following checksum algorithms.\n  1 - Default\n  2 - MD5\n  3 - CRC32\n  4 - CRC32C\n  5 - SHA1\n  6 - SHA256\nEnter an index: 3\nLet the SDK calculate the checksum for you? (y/n) n\n```\n\n----------------------------------------\n\nTITLE: Deleting a Contact List in Amazon SES v2 API using Rust\nDESCRIPTION: This code snippet shows how to delete a contact list in Amazon SES v2 API using the AWS SDK for Rust. The implementation can be found in the newsletter.rs file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/ses/README.md#2025-04-09_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n// Implementation in src/newsletter.rs#L347\n```\n\n----------------------------------------\n\nTITLE: Implementing AWS Lambda Handler in Java\nDESCRIPTION: This Java class defines the Lambda function handler. It creates a ScanEmployees object and invokes the sendEmployeMessage method. The class uses LambdaLogger for logging to Amazon CloudWatch.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_lambda_apigateway/README.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage com.aws.example;\n\nimport com.amazonaws.services.lambda.runtime.Context;\nimport com.amazonaws.services.lambda.runtime.LambdaLogger;\n\n/**\n*  This is the entry point for the Lambda function\n*/\n\npublic class Handler {\n\n public Void handleRequest(Context context) {\n    LambdaLogger logger = context.getLogger();\n    ScanEmployees scanEmployees = new ScanEmployees();\n   Boolean ans =  scanEmployees.sendEmployeMessage();\n    if (ans)\n        logger.log(\"Messages sent: \" + ans);\n    return null;\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Describing AWS Batch Compute Environments using Rust SDK\nDESCRIPTION: This code snippet shows how to describe AWS Batch compute environments using the AWS SDK for Rust. It appears to be part of a 'batch-helloworld.rs' file that demonstrates basic AWS Batch functionality.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/batch/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nDescribeComputeEnvironments\n```\n\n----------------------------------------\n\nTITLE: Deleting a Receipt Filter in Amazon SES using C++\nDESCRIPTION: This code snippet demonstrates the deletion of a receipt filter in Amazon SES using the AWS SDK for C++. The implementation is in the 'delete_receipt_filter.cpp' file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/ses/README.md#2025-04-09_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\n// See delete_receipt_filter.cpp, line 21\n```\n\n----------------------------------------\n\nTITLE: Converting XML Document to String in Kotlin\nDESCRIPTION: This function converts an XML Document object to a string representation using a Transformer. It handles potential TransformerException errors.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/serverless_rds/README.md#2025-04-09_snippet_4\n\nLANGUAGE: Kotlin\nCODE:\n```\nfun convertToString(xml: Document?): String? {\n    try {\n        val transformer = TransformerFactory.newInstance().newTransformer()\n        val result = StreamResult(StringWriter())\n        val source = DOMSource(xml)\n        transformer.transform(source, result)\n        return result.writer.toString()\n    } catch (ex: TransformerException) {\n        ex.printStackTrace()\n    }\n    return null\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring React Application Base URL\nDESCRIPTION: This JavaScript code snippet shows how to configure the base URL for the React application to connect to the Spring Boot backend API.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_dynamodb_web_app/README.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"BASE_URL\": \"http://localhost:8080/api\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for AWS IoT Service Examples\nDESCRIPTION: Sets up a CMake project for building AWS IoT service examples with the AWS SDK for C++. It handles platform-specific configurations, sets C++ standards, finds required dependencies, and creates executable targets for each example file in the directory.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/iot/CMakeLists.txt#2025-04-09_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\n\n# Set the minimum required version of CMake for this project.\ncmake_minimum_required(VERSION 3.13)\n\nset(SERVICE_NAME iot)\nset(SERVICE_COMPONENTS iot iot-data)\n\n# Set this project's name.\nproject(\"${SERVICE_NAME}-examples\")\n\n# Build shared libraries by default.\nset(BUILD_SHARED_LIBS ON)\n\n# Set the C++ standard to use to build this target.\nset(CMAKE_CXX_STANDARD 11)\n\n# Use the MSVC variable to determine if this is a Windows build.\nset(WINDOWS_BUILD ${MSVC})\n\n# Set the location of where Windows can find the installed libraries of the SDK.\nif (WINDOWS_BUILD)\n    string(REPLACE \";\" \"/aws-cpp-sdk-all;\" SYSTEM_MODULE_PATH \"${CMAKE_SYSTEM_PREFIX_PATH}/aws-cpp-sdk-all\")\n    list(APPEND CMAKE_PREFIX_PATH ${SYSTEM_MODULE_PATH})\nendif ()\n\n# Find the AWS SDK for C++ package.\nfind_package(AWSSDK REQUIRED COMPONENTS ${SERVICE_COMPONENTS})\n\nif (WINDOWS_BUILD AND AWSSDK_INSTALL_AS_SHARED_LIBS)\n    # Copy relevant AWS SDK for C++ libraries into the current binary directory for running and debugging.\n\n    # set(BIN_SUB_DIR \"/Debug\") # If you are building from the command line, you may need to uncomment this\n    # and set the proper subdirectory to the executables' location.\n\n    AWSSDK_CPY_DYN_LIBS(SERVICE_COMPONENTS \"\" ${CMAKE_CURRENT_BINARY_DIR}${BIN_SUB_DIR})\nendif ()\n\n# AWSDOC_SOURCE can be defined in the command line to limit the files in a build. For example,\n# you can limit files to one action.\nif (NOT DEFINED AWSDOC_SOURCE)\n    file(GLOB AWSDOC_SOURCE\n            \"*.cpp\"\n    )\nendif ()\n\nforeach (file ${AWSDOC_SOURCE})\n    get_filename_component(EXAMPLE ${file} NAME_WE)\n\n    # Build the code example executables.\n    set(EXAMPLE_EXE run_${EXAMPLE})\n\n    add_executable(${EXAMPLE_EXE} ${file})\n\n    target_link_libraries(${EXAMPLE_EXE} ${AWSSDK_LINK_LIBRARIES}\n            ${AWSSDK_PLATFORM_DEPS})\n\nendforeach ()\n\n\nif (BUILD_TESTS)\n    add_subdirectory(tests)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Listing KMS Keys with Java SDK\nDESCRIPTION: This code snippet demonstrates how to list KMS keys using the AWS SDK for Java 2.x. It uses the ListKeys operation to retrieve a list of KMS keys in the account.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/kms/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nHelloKMS.java#L6\n```\n\n----------------------------------------\n\nTITLE: Describe Portal in AWS IoT SiteWise using Java\nDESCRIPTION: Demonstrates how to retrieve detailed information about a portal in AWS IoT SiteWise.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/iotsitewise/README.md#2025-04-09_snippet_12\n\nLANGUAGE: Java\nCODE:\n```\nDescribePortal\n```\n\n----------------------------------------\n\nTITLE: Upload Function Input JSON Example\nDESCRIPTION: JSON representation of the input for the UploadFn Lambda function. This JSON can be used to test the Lambda function in the AWS Management Console.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/php/applications/photo_asset_manager/README.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"body\": \"{\\\"file_name\\\":\\\"mountain.jpg\\\"}\",\n  \"resource\": \"/upload\",\n  \"path\": \"/upload\",\n  \"httpMethod\": \"PUT\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Client Demo\nDESCRIPTION: Command to run a Python client demonstration that sends requests to the REST API using the Requests package.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/cross_service/apigateway_covid-19_tracker/README.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npython client_demo.py\n```\n\n----------------------------------------\n\nTITLE: Describing Virtual Private Clouds (VPCs)\nDESCRIPTION: Demonstrates how to list and describe Virtual Private Clouds (VPCs) in the AWS account. VPCs provide isolated network environments for AWS resources.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/EC2/README.md#2025-04-09_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\n// DescribeVpcs\n```\n\n----------------------------------------\n\nTITLE: Running CreateClusterSnapshot Example in Go\nDESCRIPTION: This example shows how to create a snapshot of an Amazon RDS cluster using the AWS SDK for Go. It requires the cluster ID as a command-line argument.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/rds/README.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo run CreateClusterSnapshot.go -c CLUSTER-ID\n```\n\n----------------------------------------\n\nTITLE: Implementing Spring Boot REST Controller for AWS DynamoDB Work Item Management in Java\nDESCRIPTION: This class implements a Spring REST controller that manages work items stored in DynamoDB. It provides endpoints to retrieve all items, only open items, or only closed items, archive existing items, and add new work items. The controller uses cross-origin resource sharing (CORS) to accept requests from any domain.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_dynamodb_web_app/README.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage com.aws.rest;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.web.bind.annotation.CrossOrigin;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.PutMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\nimport java.time.LocalDateTime;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.UUID;\nimport java.util.stream.Collectors;\nimport java.util.stream.StreamSupport;\n\n@ComponentScan(basePackages = {\"com.aws.rest\"})\n@CrossOrigin(origins = \"*\")\n@RestController\n@RequestMapping(\"api/items\")\npublic class MainController {\n    private final DynamoDBService dbService;\n\n    @Autowired\n    MainController(\n        DynamoDBService dbService\n    ) {\n        this.dbService = dbService;\n    }\n\n    @GetMapping(\"\" )\n    public List<WorkItem> getItems(@RequestParam(required=false) String archived) {\n        Iterable<WorkItem> result;\n        if (archived != null && archived.compareTo(\"false\")==0)\n            result = dbService.getOpenItems();\n        else if (archived != null && archived.compareTo(\"true\")==0)\n            result = dbService.getClosedItems();\n        else\n            result = dbService.getAllItems();\n\n        return StreamSupport.stream(result.spliterator(), false)\n            .collect(Collectors.toUnmodifiableList());\n    }\n\n    @PutMapping(\"{id}:archive\")\n    public String modUser(@PathVariable String id) {\n        dbService.archiveItemEC(id);\n        return id +\" was archived\";\n    }\n\n    @PostMapping(\"\")\n    public List<WorkItem> addItem(@RequestBody Map<String, String> payload) {\n        String name = payload.get(\"name\");\n        String guide = payload.get(\"guide\");\n        String description = payload.get(\"description\");\n        String status = payload.get(\"status\");\n\n        WorkItem item = new WorkItem();\n        String workId = UUID.randomUUID().toString();\n        String date = LocalDateTime.now().toString();\n        item.setId(workId);\n        item.setGuide(guide);\n        item.setDescription(description);\n        item.setName(name);\n        item.setDate(date);\n        item.setStatus(status);\n        dbService.setItem(item);\n        Iterable<WorkItem> result= dbService.getOpenItems();\n        return StreamSupport.stream(result.spliterator(), false)\n            .collect(Collectors.toUnmodifiableList());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting an Item from DynamoDB in Swift\nDESCRIPTION: Retrieves a single item from a DynamoDB table using its primary key. The example demonstrates how to specify the key and retrieve the corresponding item.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/swift/example_code/dynamodb/README.md#2025-04-09_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nGetItem(basics/MovieList/MovieTable.swift#L324)\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows-specific Build Settings for AWS SDK C++ Examples\nDESCRIPTION: Handles Windows-specific build settings, including copying AWS SDK libraries and GTest DLL to the build directory for proper execution and debugging.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/cross-service/topics_and_queues/tests/CMakeLists.txt#2025-04-09_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (WINDOWS_BUILD)\n    # set(BIN_SUB_DIR \"/Debug\") # If you are building from the command line, you may need to uncomment this\n    # and set the proper subdirectory to the executables' location.\n\n    if (AWSSDK_INSTALL_AS_SHARED_LIBS)\n        # Copy relevant AWS SDK for C++ libraries into the current binary directory for running and debugging.\n        AWSSDK_CPY_DYN_LIBS(\n                CURRENT_TARGET_AWS_DEPENDENCIES\n                \"\"\n                ${CMAKE_CURRENT_BINARY_DIR}${BIN_SUB_DIR}\n        )\n    endif ()\n\n    add_custom_command(\n            TARGET\n            ${CURRENT_TARGET}\n            POST_BUILD\n            COMMAND ${CMAKE_COMMAND} -E copy\n            ${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_BINDIR}${BIN_SUB_DIR}/gtest.dll\n            ${CMAKE_CURRENT_BINARY_DIR}${BIN_SUB_DIR}\n    )\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Deleting SESv2 Contact List using DeleteContactList API\nDESCRIPTION: This operation deletes the contact list named 'weekly-coupons-newsletter'. It also removes all contacts within the list without requiring separate API calls.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/sesv2_weekly_mailer/content/34_SPEC_CLEANUP.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Operation: **DeleteContactList**\n  - `ContactListName`: `weekly-coupons-newsletter`\n```\n\n----------------------------------------\n\nTITLE: Building Lambda Examples in Swift\nDESCRIPTION: Commands for building Lambda examples using Swift in both terminal and Xcode environments. This snippet shows how to compile Swift code for Lambda functions.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/swift/example_code/lambda/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ swift build\n```\n\n----------------------------------------\n\nTITLE: Running Scenario Scripts\nDESCRIPTION: Command to execute scenario scripts that demonstrate more complex workflows\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/transcribe/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnode ./scenarios/<fileName>\n```\n\n----------------------------------------\n\nTITLE: Retrieving AWS Glue Tables with .NET\nDESCRIPTION: This code retrieves information about tables in an AWS Glue database using the AWS SDK for .NET. It returns details of all tables in the specified database.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Glue/README.md#2025-04-09_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nGetTables\n```\n\n----------------------------------------\n\nTITLE: Removing Targets from a Rule in EventBridge using AWS SDK for .NET\nDESCRIPTION: Method to remove targets from an EventBridge rule. This stops events from being sent to the specified targets when the rule is triggered.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/EventBridge/README.md#2025-04-09_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nRemoveTargets\n```\n\n----------------------------------------\n\nTITLE: Describing CloudWatch Alarms in Kotlin\nDESCRIPTION: This code snippet illustrates how to describe CloudWatch alarms using the AWS SDK for Kotlin. It's included in a larger CloudWatch scenario that demonstrates various CloudWatch operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/cloudwatch/README.md#2025-04-09_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\nDescribeAlarms\n```\n\n----------------------------------------\n\nTITLE: Invoking Amazon Bedrock Agents with SDK for SAP ABAP\nDESCRIPTION: Example showing how to invoke an agent using the InvokeAgent action from the Amazon Bedrock Agents Runtime. The code references a specific location in the repository where the implementation can be found.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/sap-abap/services/bdz/README.md#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nInvokeAgent (zcl_aws1_bdz_actions.clas.abap#L37)\n```\n\n----------------------------------------\n\nTITLE: Building AWS CloudWatch Example Executables\nDESCRIPTION: This CMake snippet sets up the build process for each AWS CloudWatch example. It creates an executable for each source file, links necessary libraries, and sets compile definitions. The AWSDOC_SOURCE variable can be used to limit which files are built.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/cloudwatch/CMakeLists.txt#2025-04-09_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# AWSDOC_SOURCE can be defined in the command line to limit the files in a build. For example,\n# you can limit files to one action.\nif(NOT DEFINED AWSDOC_SOURCE)\n    file(GLOB AWSDOC_SOURCE\n            \"*.cpp\"\n            )\nendif()\n\nforeach(file ${AWSDOC_SOURCE})\n    get_filename_component(EXAMPLE ${file} NAME_WE)\n\n    # Build the code example executables.\n    set(EXAMPLE_EXE run_${EXAMPLE})\n\n    add_executable(${EXAMPLE_EXE} ${file})\n\n    target_link_libraries(${EXAMPLE_EXE} ${AWSSDK_LINK_LIBRARIES}\n            ${AWSSDK_PLATFORM_DEPS})\n\n    target_compile_definitions(${EXAMPLE_EXE}\n            PRIVATE\n            SOURCE_DIR=\"${CMAKE_CURRENT_SOURCE_DIR}\"\n            )\n\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: ListInputs Example in Rust for AWS MediaLive\nDESCRIPTION: This code demonstrates how to list MediaLive inputs using the AWS SDK for Rust. The example shows the basic pattern for interfacing with MediaLive's input listing functionality. Referenced from the repository's MediaLive hello world example.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/medialive/README.md#2025-04-09_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nsrc/bin/medialive-helloworld.rs#L22\n```\n\n----------------------------------------\n\nTITLE: Listing Contact Lists in Amazon SES v2 API using Rust\nDESCRIPTION: This code snippet illustrates how to list contact lists in Amazon SES v2 API using the AWS SDK for Rust. The implementation can be found in the list-contact-lists.rs file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/ses/README.md#2025-04-09_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\n// Implementation in src/bin/list-contact-lists.rs#L22\n```\n\n----------------------------------------\n\nTITLE: Scanning DynamoDB Items in Kotlin\nDESCRIPTION: This code example illustrates how to scan items in a DynamoDB table using the AWS SDK for Kotlin. It's one of the single actions demonstrated in the file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/dynamodb/README.md#2025-04-09_snippet_7\n\nLANGUAGE: Kotlin\nCODE:\n```\nScan(src/main/kotlin/com/kotlin/dynamodb/DynamoDBScanItems.kt#L38)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for AWS SDK Medical Imaging Examples with Google Test\nDESCRIPTION: This CMake configuration sets up the build environment for AWS SDK Medical Imaging examples with Google Test integration. It handles dependency management, compiler settings, and test execution setup for both Windows and non-Windows environments.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/medical-imaging/tests/CMakeLists.txt#2025-04-09_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\n\n# Set the minimum required version of CMake for this project.\ncmake_minimum_required(VERSION 3.14)\n\nset(EXAMPLE_SERVICE_NAME \"medical-imaging\")\nset(CURRENT_TARGET \"${EXAMPLE_SERVICE_NAME}_gtest\")\nset(CURRENT_TARGET_AWS_DEPENDENCIES medical-imaging)\n\n# Set this project's name.\nproject(\"${EXAMPLE_SERVICE_NAME}-examples-gtests\")\n\n# Set the C++ standard to use to build this target.\nset(CMAKE_CXX_STANDARD 14)\n\n# Build shared libraries by default.\nset(BUILD_SHARED_LIBS ON)\n\nenable_testing()\n\nfind_package(GTest)\n\nif (NOT GTest_FOUND)\n    include(FetchContent)\n    FetchContent_Declare(\n            googletest\n            GIT_REPOSITORY https://github.com/google/googletest.git\n            GIT_TAG release-1.12.1\n    )\n\n    # For Windows: Prevent overriding the parent project's compiler/linker settings.\n    set(gtest_force_shared_crt ON CACHE BOOL \"\" FORCE)\n    FetchContent_MakeAvailable(googletest)\nendif ()\n\n# Use the MSVC variable to determine if this is a Windows build.\nset(WINDOWS_BUILD ${MSVC})\n\n# Set the location for Windows to find the installed libraries of the SDK.\nif (WINDOWS_BUILD)\n    string(REPLACE \";\" \"/aws-cpp-sdk-all;\" SYSTEM_MODULE_PATH \"${CMAKE_SYSTEM_PREFIX_PATH}/aws-cpp-sdk-all\")\n    list(APPEND CMAKE_PREFIX_PATH ${SYSTEM_MODULE_PATH})\nendif ()\n\n# Find the AWS SDK for C++ package.\nfind_package(AWSSDK REQUIRED COMPONENTS ${CURRENT_TARGET_AWS_DEPENDENCIES})\n\nadd_executable(\n        ${CURRENT_TARGET}\n)\n\nif (WINDOWS_BUILD)\n    # set(BIN_SUB_DIR \"/Debug\") # If you are building from the command line, you may need to uncomment this\n    # and set the proper subdirectory to the executables' location.\n\n    if (AWSSDK_INSTALL_AS_SHARED_LIBS)\n        # Copy relevant AWS SDK for C++ libraries into the current binary directory for running and debugging.\n        AWSSDK_CPY_DYN_LIBS(\n                CURRENT_TARGET_AWS_DEPENDENCIES\n                \"\"\n                ${CMAKE_CURRENT_BINARY_DIR}${BIN_SUB_DIR}\n        )\n    endif ()\n\n    add_custom_command(\n            TARGET\n            ${CURRENT_TARGET}\n            POST_BUILD\n            COMMAND ${CMAKE_COMMAND} -E copy\n            ${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_BINDIR}${BIN_SUB_DIR}/gtest.dll\n            ${CMAKE_CURRENT_BINARY_DIR}${BIN_SUB_DIR}\n    )\nendif ()\n\n# GTEST_SOURCE_FILES can be defined in the command line to limit the files in a build, for example to one action.\nif (NOT DEFINED GTEST_SOURCE_FILES)\n    file(\n            GLOB\n            GTEST_SOURCE_FILES\n            \"gtest_*.cpp\"\n    )\nendif ()\n\nforeach (TEST_FILE ${GTEST_SOURCE_FILES})\n    string(REPLACE \"gtest_\" \"../\" SOURCE_FILE ${TEST_FILE})\n    if (EXISTS ${SOURCE_FILE})\n        list(APPEND GTEST_SOURCE ${SOURCE_FILE} ${TEST_FILE})\n    else ()\n        message(\"Error: no associated source file found for ${TEST_FILE}\")\n    endif ()\nendforeach ()\n\ntarget_sources(\n        ${CURRENT_TARGET}\n        PUBLIC\n        ${GTEST_SOURCE}\n        test_main.cpp\n        ${EXAMPLE_SERVICE_NAME}_gtests.cpp\n)\n\ntarget_include_directories(\n        ${CURRENT_TARGET}\n        PUBLIC\n        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/..>\n        $<INSTALL_INTERFACE:..>\n)\n\ntarget_compile_definitions(\n        ${CURRENT_TARGET}\n        PUBLIC\n        TESTING_BUILD\n        SRC_DIR=\"${CMAKE_CURRENT_SOURCE_DIR}\"\n)\n\ntarget_link_libraries(\n        ${CURRENT_TARGET}\n        GTest::gtest\n        ${AWSSDK_LINK_LIBRARIES}\n        ${AWSSDK_PLATFORM_DEPS}\n)\n\ninclude(GoogleTest)\n\ngtest_add_tests(\n        TARGET\n        ${CURRENT_TARGET}\n)\n```\n\n----------------------------------------\n\nTITLE: Extracting Text from S3 Documents using Amazon Textract in Java\nDESCRIPTION: This class uses Amazon Textract to extract text from documents stored in S3. It initializes a TextractAsyncClient, processes the document asynchronously, and concatenates extracted words into a single string.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_fsa_app/README.md#2025-04-09_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\npackage com.example.fsa.services;\n\nimport software.amazon.awssdk.core.exception.SdkClientException;\nimport software.amazon.awssdk.regions.Region;\nimport software.amazon.awssdk.services.textract.model.BlockType;\nimport software.amazon.awssdk.services.textract.model.Document;\nimport software.amazon.awssdk.services.textract.model.DetectDocumentTextRequest;\nimport software.amazon.awssdk.services.textract.model.DetectDocumentTextResponse;\nimport software.amazon.awssdk.services.textract.model.Block;\nimport software.amazon.awssdk.services.textract.TextractAsyncClient;\nimport software.amazon.awssdk.services.textract.model.S3Object;\nimport software.amazon.awssdk.services.textract.model.TextractException;\n\nimport java.util.concurrent.CompletableFuture;\n\npublic class ExtractTextService {\n\n    private static TextractAsyncClient textractAsyncClient;\n\n    private static synchronized TextractAsyncClient getTextractAsyncClient() {\n        if (textractAsyncClient == null) {\n            textractAsyncClient = TextractAsyncClient.builder()\n                .region(Region.US_EAST_1)\n                .build();\n        }\n        return textractAsyncClient;\n    }\n\n    public String getCardText(String bucketName, String obName) {\n        try {\n            S3Object s3Object = S3Object.builder()\n                .bucket(bucketName)\n                .name(obName)\n                .build();\n\n            Document myDoc = Document.builder()\n                .s3Object(s3Object)\n                .build();\n\n            DetectDocumentTextRequest detectDocumentTextRequest = DetectDocumentTextRequest.builder()\n                .document(myDoc)\n                .build();\n\n            StringBuilder completeText = new StringBuilder();\n            CompletableFuture<?> future = getTextractAsyncClient().detectDocumentText(detectDocumentTextRequest);\n            future.join();\n\n            DetectDocumentTextResponse textResponse = (DetectDocumentTextResponse) future.join();\n            for (Block block : textResponse.blocks()) {\n                if (block.blockType() == BlockType.WORD) {\n                    if (completeText.length() == 0) {\n                        completeText.append(block.text());\n                    } else {\n                        completeText.append(\" \").append(block.text());\n                    }\n                }\n            }\n            return completeText.toString();\n\n        } catch (TextractException e) {\n            System.err.println(e.awsErrorDetails().errorMessage());\n            throw e; // Re-throw the exception.\n        } catch (SdkClientException e) {\n            System.err.println(e.getMessage());\n            throw e; // Re-throw the exception.\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Hello EC2 Example\nDESCRIPTION: Command to run the introductory EC2 example that demonstrates basic functionality\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/ec2/README.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnode ./hello.js\n```\n\n----------------------------------------\n\nTITLE: Uploading an Object to MediaStore in Java\nDESCRIPTION: Demonstrates how to upload an object to a container in AWS Elemental MediaStore using the AWS SDK for Java 2.x. This operation is used to store new media assets in the service.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/mediastore/README.md#2025-04-09_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nPutObject\n```\n\n----------------------------------------\n\nTITLE: Creating a VPC Endpoint using Amazon EC2 with PHP\nDESCRIPTION: This code snippet shows how to create a VPC Endpoint using the Amazon EC2 service with PHP. It refers to a method named 'CreateVpcEndpoint' in the EC2Service class.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/php/example_code/ec2/README.md#2025-04-09_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nCreateVpcEndpoint(EC2Service.php#L41)\n```\n\n----------------------------------------\n\nTITLE: User Input for Publishing Messages in C++\nDESCRIPTION: Illustrates the command-line interface for publishing messages to an SNS topic, including options for message text, group ID, deduplication ID, and attributes.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/topics_and_queues/SPECIFICATION.md#2025-04-09_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nEnter a message text to publish.\n\nEnter a message group ID for this message.\n\nEnter a deduplication ID for this message.\n\nAdd an attribute to this message? (y/n) y\n\n1. cheerful\n2. funny\n3. serious\n4. sincere\nEnter a number for an attribute: \n\nPost another message? (y/n)\n```\n\n----------------------------------------\n\nTITLE: Running Go Unit Tests with Verbose Output\nDESCRIPTION: Shell commands for running Go unit tests with standard and verbose output modes. Shows expected test execution output format.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/lambda/README.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nPASS\nok      PATH 6.593s\n```\n\n----------------------------------------\n\nTITLE: Create Asset Model in AWS IoT SiteWise using Java\nDESCRIPTION: Shows how to create a new asset model in AWS IoT SiteWise.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/iotsitewise/README.md#2025-04-09_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nCreateAssetModel\n```\n\n----------------------------------------\n\nTITLE: Implementing ReportController for Excel Report Generation in Spring Boot\nDESCRIPTION: Spring REST controller for generating Excel reports from work items data. It exposes a POST endpoint that retrieves unarchived work items, generates an Excel report, and sends it to the email address provided in the request body.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/Creating_rds_item_tracker/README.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage com.aws.rest;\n\nimport com.google.gson.Gson;\nimport jxl.write.WriteException;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.CrossOrigin;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.List;\nimport java.util.Map;\n\n@CrossOrigin(origins = \"*\")\n@RestController\n@RequestMapping(\"api/items:report\")\npublic class ReportController {\n\n    private final DatabaseService dbService;\n    private final WriteExcel writeExcel;\n    private final WriteExcel.SendMessages sm;\n\n    @Autowired()\n    ReportController(\n        DatabaseService dbService,\n        WriteExcel writeExcel,\n        WriteExcel.SendMessages sm\n    ) {\n        this.dbService = dbService;\n        this.writeExcel = writeExcel;\n        this.sm = sm;\n    }\n\n    @PostMapping(\"\")\n    public String sendReport(@RequestBody Map<String, String> body) {\n        List<WorkItem> list = dbService.getItemsDataSQLReport(0);\n        Gson gson = new Gson();\n        try {\n            InputStream is = writeExcel.write(list);\n            sm.sendReport(is, body.get(\"email\"));\n            return gson.toJson(\"ok\");\n\n        } catch (IOException | WriteException e) {\n            e.printStackTrace();\n        }\n        return gson.toJson(\"error happened\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a DynamoDB Table with C++\nDESCRIPTION: This code snippet demonstrates how to delete a DynamoDB table using the AWS SDK for C++. It removes the specified table and all of its items.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/dynamodb/README.md#2025-04-09_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\nDeleteTable\n```\n\n----------------------------------------\n\nTITLE: Describing OpsItems\nDESCRIPTION: Retrieves information about OpsItems using the DescribeOpsItems API.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/ssm/README.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nsrc/main/java/com/example/scenario/SSMActions.java#L210\n```\n\n----------------------------------------\n\nTITLE: Describing Route Tables using Amazon EC2 with PHP\nDESCRIPTION: This code snippet shows how to describe Route Tables using the Amazon EC2 service with PHP. It refers to a method named 'DescribeRouteTables' in the EC2Service class.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/php/example_code/ec2/README.md#2025-04-09_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nDescribeRouteTables(EC2Service.php#L128)\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests with pytest\nDESCRIPTION: Command to run unit tests using pytest, which use the botocore Stubber to mock AWS responses.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/cross_service/apigateway_covid-19_tracker/README.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npython -m pytest\n```\n\n----------------------------------------\n\nTITLE: Listing S3 Buckets in C++\nDESCRIPTION: This code snippet demonstrates how to list S3 buckets using the AWS SDK for C++. It's part of the 'Hello Amazon S3' example.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/s3/README.md#2025-04-09_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Hello Amazon S3 (ListBuckets)\nListBuckets\n```\n\n----------------------------------------\n\nTITLE: Running the Amazon SES Newsletter Application from Command Line\nDESCRIPTION: Command for running the compiled .NET application from the command line. Navigate to the folder containing the .sln file and execute this command to run the newsletter workflow.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/SESv2/NewsLetterWorkflow/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet run\n```\n\n----------------------------------------\n\nTITLE: Home Page View Implementation in ASP.NET MVC\nDESCRIPTION: The index.cshtml file implements the home page view with jQuery and Bootstrap dependencies. It displays the application description and instructions for using the photo analysis features.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/cross-service/PhotoAnalyzerApp/README.md#2025-04-09_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n  @{\n    ViewData[\"Title\"] = \"Home Page\";\n  }\n  <head>\n    <script src=\"https://code.jquery.com/jquery-1.11.1.min.js\"></script>\n    <script src=\"https://code.jquery.com/ui/1.11.1/jquery-ui.min.js\"></script>\n    <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" />\n </head>\n\n <h1 class=\"display-4\">AWS Photo Analyzer application</h1>\n <p>\n    The AWS Photo Analyzer application is a sample application that uses Amazon Rekognition, other AWS services, and the AWS SDK for .NET.\n    Analyzing nature photographs has never been easier! Perform the following steps:\n <p>\n\n    <ol>\n        <li>You can choose <i>Get Images</i> to view the images located in the S3 bucket. All images in the S3 bucket are displayed in the table. </li>\n        <li>You can analyze the photographs and produce a report by choosing the <i>Analyze Photos</i> menu item. </li>\n        <li>Enter an email address in the email field and choose <i>Analyze Photos</i>.  </li>\n        <li>Amazon SES is used to send an email that contains label data to the specified email recipient.</li>\n    </ol>\n```\n\n----------------------------------------\n\nTITLE: Setting Up AWS Services and Image Parameters in Python\nDESCRIPTION: This code imports necessary libraries and sets up variables for the S3 bucket, document name, and AWS region to be used in subsequent operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/cross_service/textract_comprehend_notebook/TextractAndComprehendNotebook.ipynb#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\nimport io\nfrom PIL import Image\nfrom IPython.display import display\nimport json\nimport pandas as pd\nimport os\n\nbucket = \"amzn-s3-demo-bucket\"\ndocument = \"Name of your document\"\nregion_name = \"Name of your region\"\n```\n\n----------------------------------------\n\nTITLE: Activating Virtual Environment on Linux/macOS\nDESCRIPTION: Command to activate the Python virtual environment on Linux or macOS systems\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/bedrock-runtime/cross-model-scenarios/tool_use_demo/README.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsource .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Archiving Lambda Functions in Swift\nDESCRIPTION: Commands for archiving Swift Lambda functions for deployment. This process creates a zip file that can be uploaded to AWS Lambda.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/swift/example_code/lambda/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nswift package archive --allow-network-connections docker\n```\n\n----------------------------------------\n\nTITLE: Finding and Processing Test Source Files\nDESCRIPTION: Discovers and processes test source files, handling conditional inclusion and platform-specific grouping. Associates test files with their corresponding implementation files.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/autoscaling/tests/CMakeLists.txt#2025-04-09_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# GTEST_SOURCE_FILES can be defined in the command line to limit the files in a build. For example,\n# you can limit files to one action.\nif (NOT DEFINED GTEST_SOURCE_FILES)\n    file(\n            GLOB\n            GTEST_SOURCE_FILES\n            \"gtest_*.cpp\"\n    )\nendif()\n\n# Check whether the target system is Windows, including Win64.\nif(WIN32)\n    # Check whether the compiler is some version of Microsoft Visual C++, or another compiler simulating C++.\n    if(MSVC)\n        source_group(\"Source Files\" FILES ${GTEST_SOURCE_FILES})\n    endif(MSVC)\nendif()\n\nenable_testing()\n\n\nforeach(TEST_FILE ${GTEST_SOURCE_FILES})\n    string(REPLACE \"gtest_\" \"../\" SOURCE_FILE ${TEST_FILE})\n     if (EXISTS ${SOURCE_FILE})\n        list(APPEND GTEST_SOURCE ${SOURCE_FILE} ${TEST_FILE})\n    else()\n        message(\"Error: no associated source file found for ${TEST_FILE}\")\n    endif()\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Running analyze-document Example with AWS SDK for Rust\nDESCRIPTION: This code snippet demonstrates how to run the analyze-document example, which sends a message to and receives a message from a queue in the specified Region. It uses cargo to run the binary with various command-line arguments.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/textract/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --bin analyze-document -- --document-path ./example_document.png [--help] [-r REGION] [--query QUERY]\n```\n\n----------------------------------------\n\nTITLE: Deleting AWS Batch Compute Environment in Java\nDESCRIPTION: Demonstrates how to delete a compute environment in AWS Batch using the deleteComputeEnvironment operation. This helps clean up resources when they are no longer needed.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/batch/README.md#2025-04-09_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nDeleteComputeEnvironment\n```\n\n----------------------------------------\n\nTITLE: Running Support Cases Basic Example\nDESCRIPTION: Executes the comprehensive example demonstrating core Support operations including creating cases, adding attachments, and managing case communications.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/support/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython get_started_support_cases.py\n```\n\n----------------------------------------\n\nTITLE: Running Amazon EBS Examples\nDESCRIPTION: Command line instruction for executing compiled examples from the build directory. Shows how to run a specific action from a source file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/ebs/README.md#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n./run_my_action\n```\n\n----------------------------------------\n\nTITLE: Client-side Lambda Function Invocation\nDESCRIPTION: JavaScript implementation for invoking the Lambda function from the browser. Configures AWS credentials, retrieves user input values, and sends them to the Lambda function with proper error handling.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascript/example_code/lambda/lambda-for-browser/README.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nAWS.config.region = \"REGION\";\nAWS.config.credentials = new AWS.CognitoIdentityCredentials({\n    IdentityPoolId: \"IDENTITY_POOL_ID\",\n});\n\n// Create client.\nconst lambda = new AWS.Lambda();\n\nconst myFunction = async () => {\n    const color = document.getElementById(\"c1\").value\n    const pattern = document.getElementById(\"p1\").value\n    const id = Math.floor(Math.random() * (10000 - 1 + 1)) + 1;\n    const params = {\n        FunctionName: 'forPathryusah', /* required */\n        Payload: JSON.stringify( { Item: {\n                Id: id,\n                Color: color,\n                Pattern: pattern\n            },\n            TableName: \"DesignRequests\",\n        })\n    };\n    lambda.invoke(params,  function (err, data){\n        if (err) console.log(err, err.stack); // an error occurred\n        else console.log('Success, payload', data);           // successful response\n    })\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling CloudWatch Alarm Actions in Kotlin\nDESCRIPTION: This code snippet demonstrates how to enable actions for a CloudWatch alarm using the AWS SDK for Kotlin. It shows a single action operation within the CloudWatch service.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/cloudwatch/README.md#2025-04-09_snippet_9\n\nLANGUAGE: Kotlin\nCODE:\n```\nEnableAlarmActions\n```\n\n----------------------------------------\n\nTITLE: Hello Lambda Example with AWS SDK for .NET\nDESCRIPTION: Basic example showing how to list Lambda functions in an AWS account. This demonstrates the minimum code needed to interact with the Lambda service.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Lambda/README.md#2025-04-09_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\n// snippet-start:[Lambda.dotnetv3.HelloLambda]\nusing System;\nusing System.Threading.Tasks;\nusing Amazon.Lambda;\nusing Amazon.Lambda.Model;\n\nnamespace LambdaActions;\n\n/// <summary>\n/// Shows how to get a list of AWS Lambda functions.\n/// </summary>\npublic class HelloLambda\n{\n    /// <summary>\n    /// The main entry point into the Lambda Command.\n    /// </summary>\n    /// <param name=\"args\">Command line arguments.</param>\n    /// <returns>A Task object.</returns>\n    static async Task Main(string[] args)\n    {\n        using var lambdaClient = new AmazonLambdaClient();\n\n        Console.WriteLine(\"Hello AWS Lambda\");\n        Console.WriteLine(\"Let's get a list of your Lambda functions in this account:\");\n\n        // Get the list of functions.\n        var response = await lambdaClient.ListFunctionsAsync();\n\n        Console.WriteLine($\"Found {response.Functions.Count} function(s):\");\n\n        if (response.Functions.Count > 0)\n        {\n            foreach (var function in response.Functions)\n            {\n                Console.WriteLine($\"Function name: {function.FunctionName}\");\n                Console.WriteLine($\"Function ARN: {function.FunctionArn}\");\n                Console.WriteLine();\n            }\n        }\n    }\n}\n// snippet-end:[Lambda.dotnetv3.HelloLambda]\n```\n\n----------------------------------------\n\nTITLE: Executable Configuration and Library Linking\nDESCRIPTION: Sets up the main executable target with source files and links required libraries including AWS SDK, OpenJPEG, and ZLIB.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/medical-imaging/imaging_set_and_frames_workflow/CMakeLists.txt#2025-04-09_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(EXAMPLE medical_image_sets_and_frames_workflow)\nset(EXAMPLE_EXE run_${EXAMPLE})\n\nadd_executable(${EXAMPLE_EXE}\n        medical_image_sets_and_frames_workflow.cpp\n        ../delete_image_set.cpp\n        ../get_dicom_import_job.cpp\n        ../get_image_set_metadata.cpp\n        ../search_image_sets.cpp\n        ../start_dicom_import_job.cpp)\n\ntarget_link_libraries(${EXAMPLE_EXE}\n        PRIVATE\n        ${AWSSDK_LINK_LIBRARIES}\n        ${AWSSDK_PLATFORM_DEPS}\n        openjp2\n        ZLIB::ZLIB)\n\ntarget_include_directories(${EXAMPLE_EXE}\n        PRIVATE\n        ${GZIP_HPP_INCLUDE_DIRS}\n        ${JSONCONS_HPP_INCLUDE_DIRS}\n        ${CMAKE_CURRENT_SOURCE_DIR}/..)\n\ntarget_compile_definitions(${EXAMPLE_EXE}\n        PRIVATE\n        TEMPLATES_PATH=\"${CMAKE_CURRENT_SOURCE_DIR}\"\n        TESTING_BUILD=1\n)\n```\n\n----------------------------------------\n\nTITLE: SendEmail Request Syntax\nDESCRIPTION: HTTP POST request format for sending emails through Amazon SES API v2. Includes configuration options for simple, raw, and templated emails with support for various email parameters like destinations, tags, and feedback forwarding.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/sesv2_weekly_mailer/content/10_SendEmail.md#2025-04-09_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /v2/email/outbound-emails HTTP/1.1\nContent-type: application/json\n\n{\n   \"ConfigurationSetName\": \"string\",\n   \"Content\": {\n      \"Raw\": {\n         \"Data\": blob\n      },\n      \"Simple\": {\n         \"Body\": {\n            \"Html\": {\n               \"Charset\": \"string\",\n               \"Data\": \"string\"\n            },\n            \"Text\": {\n               \"Charset\": \"string\",\n               \"Data\": \"string\"\n            }\n         },\n         \"Headers\": [\n            {\n               \"Name\": \"string\",\n               \"Value\": \"string\"\n            }\n         ],\n         \"Subject\": {\n            \"Charset\": \"string\",\n            \"Data\": \"string\"\n         }\n      },\n      \"Template\": {\n         \"Headers\": [\n            {\n               \"Name\": \"string\",\n               \"Value\": \"string\"\n            }\n         ],\n         \"TemplateArn\": \"string\",\n         \"TemplateData\": \"string\",\n         \"TemplateName\": \"string\"\n      }\n   },\n   \"Destination\": {\n      \"BccAddresses\": [\"string\"],\n      \"CcAddresses\": [\"string\"],\n      \"ToAddresses\": [\"string\"]\n   },\n   \"EmailTags\": [\n      {\n         \"Name\": \"string\",\n         \"Value\": \"string\"\n      }\n   ],\n   \"FeedbackForwardingEmailAddress\": \"string\",\n   \"FeedbackForwardingEmailAddressIdentityArn\": \"string\",\n   \"FromEmailAddress\": \"string\",\n   \"FromEmailAddressIdentityArn\": \"string\",\n   \"ListManagementOptions\": {\n      \"ContactListName\": \"string\",\n      \"TopicName\": \"string\"\n   },\n   \"ReplyToAddresses\": [\"string\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Describing S3 Glacier Vault\nDESCRIPTION: Retrieves vault information using the DescribeVault API\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Glacier/README.md#2025-04-09_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nDescribeVault\n```\n\n----------------------------------------\n\nTITLE: Hello Amazon SNS with ListTopics Operation in JavaScript\nDESCRIPTION: Basic example that demonstrates how to get started with Amazon SNS by listing existing topics. This is referenced in the documentation as the entry point for Amazon SNS examples.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/sns/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode ./hello.js\n```\n\n----------------------------------------\n\nTITLE: Terminating Instance in Auto Scaling Group in PHP\nDESCRIPTION: Terminates a specific instance within an Auto Scaling group. This function can terminate an instance while optionally decreasing the desired capacity of the group.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/php/example_code/auto-scaling/README.md#2025-04-09_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nTerminateInstanceInAutoScalingGroup\n```\n\n----------------------------------------\n\nTITLE: Spring Boot Application with SQS Integration in Kotlin\nDESCRIPTION: Main Spring Boot application class with REST endpoints for handling message operations. Implements CORS support and includes endpoints for getting messages, purging the queue, and adding new messages to a FIFO queue.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/creating_message_application/README.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.sqs\n\nimport kotlinx.coroutines.runBlocking\nimport org.springframework.boot.autoconfigure.SpringBootApplication\nimport org.springframework.boot.runApplication\nimport org.springframework.web.bind.annotation.CrossOrigin\nimport org.springframework.web.bind.annotation.GetMapping\nimport org.springframework.web.bind.annotation.PostMapping\nimport org.springframework.web.bind.annotation.RequestMapping\nimport org.springframework.web.bind.annotation.RestController\nimport java.util.UUID\nimport javax.servlet.http.HttpServletRequest\nimport javax.servlet.http.HttpServletResponse\n\n@SpringBootApplication\nopen class App\n\n    fun main(args: Array<String>) {\n        runApplication<App>(*args)\n    }\n\n    @CrossOrigin(origins = [\"*\"])\n    @RestController\n    @RequestMapping(\"chat/\")\n    class MessageResource {\n\n        @GetMapping(\"msgs\")\n        fun getItems(request: HttpServletRequest?, response: HttpServletResponse?): List<MessageData?>? = runBlocking {\n            val msgService = SendReceiveMessages()\n            return@runBlocking msgService.getMessages()\n        }\n\n        @GetMapping(\"purge\")\n        fun purgeMessages(request: HttpServletRequest?, response: HttpServletResponse?): String? = runBlocking {\n            val msgService = SendReceiveMessages()\n            msgService.purgeMyQueue()\n            return@runBlocking \"Queue is purged\"\n        }\n\n        @PostMapping(\"add\")\n        fun addItems(request: HttpServletRequest, response: HttpServletResponse?): List<MessageData?>? = runBlocking {\n            val user = request.getParameter(\"user\")\n            val message = request.getParameter(\"message\")\n            val msgService = SendReceiveMessages()\n\n            val uuid = UUID.randomUUID()\n            val msgId = uuid.toString()\n            val messageOb = MessageData()\n            messageOb.id = msgId\n            messageOb.name = user\n            messageOb.body = message\n            msgService.processMessage(messageOb)\n            return@runBlocking msgService.getMessages()\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: EventBridge Scenario for AWS SDK for .NET\nDESCRIPTION: Comprehensive scenario demonstrating EventBridge functionality including creating rules, adding targets, enabling/disabling rules, listing and updating resources, sending events, and cleanup.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/EventBridge/README.md#2025-04-09_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\nLearn the basics\n```\n\n----------------------------------------\n\nTITLE: Sending an Email in Amazon SES v2 API using Rust\nDESCRIPTION: This code snippet shows how to send an email using Amazon SES v2 API with the AWS SDK for Rust. The implementation can be found in the send-email.rs file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/ses/README.md#2025-04-09_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\n// Implementation in src/bin/send-email.rs#L39\n```\n\n----------------------------------------\n\nTITLE: Example Routing Control ARN Format\nDESCRIPTION: Example of a routing control Amazon Resource Name (ARN) format that would be used as an argument for the routing control example.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/route53-recovery-cluster/README.md#2025-04-09_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\narn:aws:route53-recovery-control::123456789012:controlpanel/ffa374e10db34a90bc56EXAMPLE/routingcontrol/60649aEXAMPLE\n```\n\n----------------------------------------\n\nTITLE: Disabling Metrics Collection for Auto Scaling in PHP\nDESCRIPTION: Disables CloudWatch metrics collection for an Auto Scaling group. This function stops the collection of CloudWatch metrics for the specified Auto Scaling group.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/php/example_code/auto-scaling/README.md#2025-04-09_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nDisableMetricsCollection\n```\n\n----------------------------------------\n\nTITLE: Flask Request Handler with Webargs\nDESCRIPTION: Python code showing a Flask request handler using webargs decorators for argument parsing.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/cross_service/aurora_item_tracker/README.md#2025-04-09_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n@use_kwargs(WorkItemSchema, location='query')\ndef get(self, iditem, archived=None):\n    work_items = self.storage.get_work_items(archived)\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Packages for Lambda Examples\nDESCRIPTION: Command to install the necessary Python packages for the Lambda code examples using pip in a virtual environment.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/lambda/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Aborting Multipart Uploads for S3 Directory Buckets in Java\nDESCRIPTION: Example code for aborting multipart uploads in S3 Directory Buckets using AWS SDK for Java 2.x.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/s3/src/main/java/com/example/s3/directorybucket/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nAbortMultipartUpload\n```\n\n----------------------------------------\n\nTITLE: Running Image Detection Example\nDESCRIPTION: Command to run the example that demonstrates detecting and displaying elements in images\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/rekognition/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython rekognition_image_detection.py\n```\n\n----------------------------------------\n\nTITLE: Putting a Snapshot Block in Amazon EBS with Rust\nDESCRIPTION: This code shows how to upload snapshot data using the PutSnapshotBlock API. It takes a snapshot ID, block index, block data and data length, along with a checksum for verification purposes.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/ebs/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Rust\nCODE:\n```\nclient\n    .put_snapshot_block()\n    .set_snapshot_id(Some(snapshot_id.clone()))\n    .set_block_index(Some(1))\n    .set_block_data(Some(data))\n    .set_data_length(Some(1024))\n    .set_checksum(Some(checksum))\n    .set_checksum_algorithm(Some(ChecksumAlgorithm::ChecksumAlgorithmSha256))\n    .send()\n    .await\n```\n\n----------------------------------------\n\nTITLE: Running Chat Demonstration\nDESCRIPTION: Command to run an automated demo of the websocket chat functionality\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/cross_service/apigateway_websocket_chat/README.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython websocket_chat.py chat\n```\n\n----------------------------------------\n\nTITLE: Defining Build Configuration Options for Flutter\nDESCRIPTION: Sets up build type options (Debug, Profile, Release) with Debug as the default if not specified otherwise. This ensures proper configuration for the Flutter application in different build scenarios.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/cognito_flutter_mobile_app/linux/CMakeLists.txt#2025-04-09_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Define build configuration options.\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from an Amazon SNS Topic using .NET\nDESCRIPTION: This code example demonstrates how to unsubscribe from an Amazon SNS topic. The code is from a file named SNSWrapper.cs located in the cross-service TopicsAndQueues project.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/SNS/README.md#2025-04-09_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nUnsubscribe\n```\n\n----------------------------------------\n\nTITLE: Describing Scaling Activities in Rust\nDESCRIPTION: This code snippet demonstrates how to use the DescribeScalingActivities operation to retrieve information about scaling activities using the AWS SDK for Rust.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/auto-scaling/README.md#2025-04-09_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nsrc/scenario.rs#L399\n```\n\n----------------------------------------\n\nTITLE: Retrieving a MediaConvert Job in Kotlin\nDESCRIPTION: This code snippet shows how to retrieve information about a specific MediaConvert job using the AWS SDK for Kotlin. The GetJob operation is used to fetch details of an existing job.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/mediaconvert/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nGetJob(src/main/kotlin/com/kotlin/mediaconvert/GetJob.kt#L41)\n```\n\n----------------------------------------\n\nTITLE: Implementing Photo Application Resources Class in Kotlin\nDESCRIPTION: A Kotlin class that manages configuration and resource names for the photo application. It handles storage buckets, DynamoDB tables, SNS topics, and CORS settings using environment variables.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/creating_pam/README.md#2025-04-09_snippet_16\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.photo\n\nimport com.google.gson.Gson\nimport java.util.Map\n\nclass PhotoApplicationResources {\n\n    companion object {\n        //val REGION = Region.of(System.getenv(\"AWS_REGION\"))\n        val STORAGE_BUCKET = System.getenv(\"STORAGE_BUCKET_NAME\")\n        val WORKING_BUCKET = System.getenv(\"WORKING_BUCKET_NAME\")\n        val LABELS_TABLE = System.getenv(\"LABELS_TABLE_NAME\")\n        val JOBS_TABLE = System.getenv(\"JOBS_TABLE_NAME\")\n        val TOPIC_ARN = System.getenv(\"NOTIFICATION_TOPIC\")\n\n        val CORS_HEADER_MAP = Map.of(\n            \"Access-Control-Allow-Origin\", \"*\"\n        )\n        val gson = Gson()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecated JavaScript Photo Album Example Photo Addition\nDESCRIPTION: This snippet contained code for adding a photo in the Photo Album example. It has been replaced by a newer example in the AWS documentation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/s3/dead-snippets.txt#2025-04-09_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n// snippet-start:[s3.JavaScript.photoAlbumExample.addPhotoV3]\nThis code example has been superseded by the example in\nCode examples > Amazon S3 > Create a web page that lists S3 objects\n// snippet-end:[s3.JavaScript.photoAlbumExample.addPhotoV3]\n```\n\n----------------------------------------\n\nTITLE: Deleting an Identity Pool with Amazon Cognito Identity in Swift\nDESCRIPTION: This code snippet shows how to delete an identity pool using the Amazon Cognito Identity service. It's part of the CognitoIdentityHandler class and may require additional setup and context from the full file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/swift/example_code/cognito-identity/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nDeleteIdentityPool\n```\n\n----------------------------------------\n\nTITLE: LabelCount Class for Storing Label Information in Kotlin\nDESCRIPTION: This class represents a data structure for storing label information, including a key, name, and count. It's likely used in conjunction with the DynamoDB operations for storing image label data.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/creating_pam/README.md#2025-04-09_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.example.photo\n\nclass LabelCount {\n    private var key: String? = null\n    private var name: String? = null\n    private var count = 0\n\n    fun setKey(key: String?) {\n        this.key = key\n    }\n\n    fun getKey(): String? {\n        return key\n    }\n\n    fun setName(name: String?) {\n        this.name = name\n    }\n\n    fun getName(): String? {\n        return name\n    }\n\n    fun getCount(): Int {\n        return count\n    }\n\n    fun setCount(count: Int) {\n        this.count = count\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing AWS Batch Jobs Using Paginator in Java\nDESCRIPTION: A basic example demonstrating how to list AWS Batch jobs using the listJobsPaginator operation. This is referenced as a 'Hello AWS Batch' example to get started with the service.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/batch/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nlistJobsPaginator\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for AWS Cognito C++ Project\nDESCRIPTION: This CMake configuration sets up a project for AWS Cognito using the AWS SDK for C++. It specifies the required SDK components, sets C++ standards, handles Windows-specific configurations, and links the necessary AWS libraries.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/cognito/hello_cognito/CMakeLists.txt#2025-04-09_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Set the minimum required version of CMake for this project.\ncmake_minimum_required(VERSION 3.13)\n\n# Set the AWS service components used by this project.\nset(SERVICE_COMPONENTS cognito-idp)\n\n# Set this project's name.\nproject(\"hello_cognito\")\n\n# Set the C++ standard to use to build this target.\n# At least C++ 11 is required for the AWS SDK for C++.\nset(CMAKE_CXX_STANDARD 11)\n\n# Use the MSVC variable to determine if this is a Windows build.\nset(WINDOWS_BUILD ${MSVC})\n\nif (WINDOWS_BUILD) # Set the location where CMake can find the installed libraries for the AWS SDK.\n    string(REPLACE \";\" \"/aws-cpp-sdk-all;\" SYSTEM_MODULE_PATH \"${CMAKE_SYSTEM_PREFIX_PATH}/aws-cpp-sdk-all\")\n    list(APPEND CMAKE_PREFIX_PATH ${SYSTEM_MODULE_PATH})\nendif ()\n\n# Find the AWS SDK for C++ package.\nfind_package(AWSSDK REQUIRED COMPONENTS ${SERVICE_COMPONENTS})\n\nif (WINDOWS_BUILD AND AWSSDK_INSTALL_AS_SHARED_LIBS)\n     # Copy relevant AWS SDK for C++ libraries into the current binary directory for running and debugging.\n\n     # set(BIN_SUB_DIR \"/Debug\") # If you are building from the command line, you may need to uncomment this \n                                    # and set the proper subdirectory to the executables' location.\n\n     AWSSDK_CPY_DYN_LIBS(SERVICE_COMPONENTS \"\" ${CMAKE_CURRENT_BINARY_DIR}${BIN_SUB_DIR})\nendif ()\n\nadd_executable(${PROJECT_NAME}\n        hello_cognito.cpp)\n\ntarget_link_libraries(${PROJECT_NAME}\n        ${AWSSDK_LINK_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: Running Interactive AWS Lambda PHP Examples\nDESCRIPTION: This command demonstrates how to run the interactive AWS Lambda PHP examples directly using the Runner.php file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/php/example_code/lambda/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp Runner.php\n```\n\n----------------------------------------\n\nTITLE: Describing a Rule in EventBridge using AWS SDK for .NET\nDESCRIPTION: Method to get the details of a specific EventBridge rule by name. Returns information about the rule's configuration and settings.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/EventBridge/README.md#2025-04-09_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nDescribeRule\n```\n\n----------------------------------------\n\nTITLE: Building Hello Amazon EC2 C++ Project with CMake\nDESCRIPTION: Commands to build the Hello Amazon EC2 project using CMake. This creates a build directory, changes to it, and builds the project. The resulting executable is named 'hello_ec2'.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/ec2/hello_ec2/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmkdir build \ncd build\ncmake --build ..\n```\n\n----------------------------------------\n\nTITLE: AWS CLI CloudFormation Stack Creation\nDESCRIPTION: Command to create a CloudFormation stack using the AWS CLI with a template file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/resources/cdk/aurora_serverless_app/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\naws cloudformation create-stack --template-body file://setup.yaml --stack-name YOUR_STACK_NAME\n```\n\n----------------------------------------\n\nTITLE: Running a Single Action in Node.js\nDESCRIPTION: This snippet demonstrates how to run a single action example using Node.js. It executes a specific JavaScript file from the 'actions' directory.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/secrets-manager/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode ./actions/<fileName>\n```\n\n----------------------------------------\n\nTITLE: Initiating Auth in Amazon Cognito Identity Provider using C#\nDESCRIPTION: This code snippet demonstrates how to initiate authentication in Amazon Cognito Identity Provider using C#. It's part of the CognitoWrapper class and uses the InitiateAuthAsync method.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Cognito/README.md#2025-04-09_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nInitiateAuth(Actions/CognitoWrapper.cs#L184)\n```\n\n----------------------------------------\n\nTITLE: Putting Batches of Records to Data Firehose\nDESCRIPTION: This snippet shows how to put batches of records to a Data Firehose delivery stream using the PutRecordBatch API. It handles scenarios where the number of records exceeds the maximum limit by breaking down requests into multiple batches.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/firehose/src/main/java/com/example/firehose/scenario/README.md#2025-04-09_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\n// Code not provided in the given text, but described as part of the execution steps\n```\n\n----------------------------------------\n\nTITLE: Creating an IAM Access Key in C++\nDESCRIPTION: Code excerpt showing how to create an IAM access key using the AWS SDK for C++.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/iam/README.md#2025-04-09_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\n// From create_access_key.cpp line 35\n```\n\n----------------------------------------\n\nTITLE: Copying S3 Objects in Rust\nDESCRIPTION: This code snippet demonstrates how to copy an object within Amazon S3 using the AWS SDK for Rust. It uses the CopyObject operation to duplicate an object, potentially in a different location.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/s3/README.md#2025-04-09_snippet_2\n\nLANGUAGE: Rust\nCODE:\n```\nCopyObject\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for AWS Storage Gateway Examples\nDESCRIPTION: CMake configuration script that sets up build requirements for AWS Storage Gateway examples. It defines C++11 as the standard, finds the AWS SDK package, and creates executable targets for multiple example programs including file share management and gateway operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/storage_gateway/CMakeLists.txt#2025-04-09_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nproject(sg-examples)\nset (CMAKE_CXX_STANDARD 11)\n\n# Locate the aws sdk for c++ package.\nfind_package(AWSSDK REQUIRED COMPONENTS storagegateway)\n\nset(EXAMPLES \"\")\nlist(APPEND EXAMPLES \"create_nfs_file_share\")\nlist(APPEND EXAMPLES \"delete_volume\")\nlist(APPEND EXAMPLES \"describe_gateway_information\")\nlist(APPEND EXAMPLES \"describe_smb_settings\")\nlist(APPEND EXAMPLES \"list_file_shares\")\nlist(APPEND EXAMPLES \"start_gateway\")\n\n# The executables to build.\nforeach(EXAMPLE IN LISTS EXAMPLES)\n  add_executable(${EXAMPLE} ${EXAMPLE}.cpp)\n  target_link_libraries(${EXAMPLE} ${AWSSDK_LINK_LIBRARIES})\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Put Lexicon Example in C#\nDESCRIPTION: Code example demonstrating how to store a new lexicon in Amazon Polly using the AWS SDK for .NET. Located in PutLexiconExample/PutLexicon.cs\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Polly/README.md#2025-04-09_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nPutLexiconExample/PutLexicon.cs#L6\n```\n\n----------------------------------------\n\nTITLE: Running ListSecurityGroups Example in Go\nDESCRIPTION: This example shows how to list Amazon RDS security groups using the AWS SDK for Go. It doesn't require any command-line arguments.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/rds/README.md#2025-04-09_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngo run ListSecurityGroups.go\n```\n\n----------------------------------------\n\nTITLE: Describe Asset Model in AWS IoT SiteWise using Java\nDESCRIPTION: Demonstrates how to retrieve detailed information about an asset model in AWS IoT SiteWise.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/iotsitewise/README.md#2025-04-09_snippet_10\n\nLANGUAGE: Java\nCODE:\n```\nDescribeAssetModel\n```\n\n----------------------------------------\n\nTITLE: Retrieving Secret Value using AWS Secrets Manager in C++\nDESCRIPTION: This code snippet demonstrates how to retrieve a secret value from AWS Secrets Manager using the AWS SDK for C++. It includes the necessary headers and uses the Aws::SecretsManager::SecretsManagerClient to make the API call.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/secrets-manager/README.md#2025-04-09_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#include <aws/core/Aws.h>\\n#include <aws/secretsmanager/SecretsManagerClient.h>\\n#include <aws/secretsmanager/model/GetSecretValueRequest.h>\\n#include <aws/secretsmanager/model/GetSecretValueResult.h>\\n#include <iostream>\\n\\nint main()\\n{\\n    Aws::SDKOptions options;\\n    Aws::InitAPI(options);\\n    {\\n        Aws::Client::ClientConfiguration clientConfig;\\n        // Optional: Set to the AWS Region in which the secret is stored (e.g., \\\"us-east-1\\\")\\n        // clientConfig.region = \\\"us-east-1\\\";\\n\\n        Aws::SecretsManager::SecretsManagerClient client(clientConfig);\\n\\n        Aws::SecretsManager::Model::GetSecretValueRequest request;\\n        request.SetSecretId(\\\"secret-name\\\");\\n\\n        auto outcome = client.GetSecretValue(request);\\n        if (outcome.IsSuccess()) {\\n            auto result = outcome.GetResult();\\n            std::cout << \\\"Secret value: \\\" << result.GetSecretString() << std::endl;\\n        }\\n        else {\\n            std::cout << \\\"Error: \\\" << outcome.GetError().GetMessage() << std::endl;\\n        }\\n    }\\n    Aws::ShutdownAPI(options);\\n    return 0;\\n}\n```\n\n----------------------------------------\n\nTITLE: Running Amazon Polly DescribeVoices Example in Go\nDESCRIPTION: This command runs the DescribeVoices example which describes the available Amazon Polly voices. The example includes a unit test that mocks the service client and the DescribeVoices function.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/polly/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngo run DescribeVoices.go\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for AWS Organizations Examples\nDESCRIPTION: Install required Python packages in a virtual environment using pip\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/organizations/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Describing DB Parameter Groups with Amazon RDS in C#\nDESCRIPTION: This snippet demonstrates how to retrieve information about DB parameter groups using the Amazon RDS API. It's part of the RDSWrapper class focused on parameter group operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/RDS/README.md#2025-04-09_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nDescribeDBParameterGroups\n```\n\n----------------------------------------\n\nTITLE: Deleting Maintenance Window\nDESCRIPTION: Deletes an existing maintenance window using the DeleteMaintenanceWindow API.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/ssm/README.md#2025-04-09_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nsrc/main/java/com/example/scenario/SSMActions.java#L131\n```\n\n----------------------------------------\n\nTITLE: Listing S3 Object Versions in Rust\nDESCRIPTION: This code snippet demonstrates how to list all versions of objects in an S3 bucket using the AWS SDK for Rust. It uses the ListObjectVersions operation to retrieve version information for all objects.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/s3/README.md#2025-04-09_snippet_10\n\nLANGUAGE: Rust\nCODE:\n```\nListObjectVersions\n```\n\n----------------------------------------\n\nTITLE: Multipart Upload and Download with Amazon S3 using TransferManager in C++\nDESCRIPTION: This example demonstrates how to perform multipart upload and download of large objects via memory stream using the TransferManager class from the AWS SDK for C++. It offers better upload/download performance compared to the S3Client.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/transfer-manager/README.md#2025-04-09_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n// Code snippet is not provided in the given text, but is referenced as:\n// [Multipart upload and download of data with Amazon S3](./transferOnStream.cpp)\n```\n\n----------------------------------------\n\nTITLE: Listing IAM Server Certificates in C++\nDESCRIPTION: Code excerpt showing how to list IAM server certificates using the AWS SDK for C++.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/iam/README.md#2025-04-09_snippet_19\n\nLANGUAGE: C++\nCODE:\n```\n// From list_server_certificates.cpp line 35\n```\n\n----------------------------------------\n\nTITLE: Building the Hello AWS Glue Project with CMake\nDESCRIPTION: Commands to build the Hello AWS Glue project using CMake build system from the command line. This creates a build directory, navigates into it, and builds the project which results in an executable named 'hello_glue'.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/glue/hello_glue/README.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmkdir build \ncd build\ncmake --build ..\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for AWS SES Examples\nDESCRIPTION: Sets up a CMake project for building AWS SES examples. It defines the project name, sets the C++ standard, configures paths for Windows builds, and finds the AWS SDK for C++.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/ses/CMakeLists.txt#2025-04-09_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\n\nset(SERVICE_NAME ses)\nset(SERVICE_COMPONENTS email)\n\nproject(\"${SERVICE_NAME}-examples\")\n\nset(BUILD_SHARED_LIBS ON)\nset(CMAKE_CXX_STANDARD 11)\n\nset(WINDOWS_BUILD ${MSVC})\n\nif(WINDOWS_BUILD)\n  string(REPLACE \";\" \"/aws-cpp-sdk-all;\" SYSTEM_MODULE_PATH \"${CMAKE_SYSTEM_PREFIX_PATH}/aws-cpp-sdk-all\")\n  list(APPEND CMAKE_PREFIX_PATH ${SYSTEM_MODULE_PATH})\nendif()\n\nfind_package(AWSSDK REQUIRED COMPONENTS ${SERVICE_COMPONENTS})\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Textract React Application\nDESCRIPTION: Command to install the npm dependencies required by the Amazon Textract React application, which must be run in the project directory.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/cross-services/textract-react/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd javascriptv3/example_code/cross-services/textract-react\nnpm install\n```\n\n----------------------------------------\n\nTITLE: AWS Batch Program Console Output\nDESCRIPTION: Console output showing the complete workflow of creating and managing AWS Batch resources including compute environments, job queues, job definitions, and job submission. The output demonstrates successful creation, monitoring, and cleanup of AWS Batch resources.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/basics/batch/SPECIFICATION.md#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nAWS Batch is a fully managed batch processing service that dynamically provisions the required compute\nresources for batch computing workloads. The Java V2 `BatchAsyncClient` allows\ndevelopers to automate the submission, monitoring, and management of batch jobs.\n\nThis scenario provides an example of setting up a compute environment, job queue and job definition,\nand then submitting a job.\n\nLet's get started...\n\nYou have two choices:\n\n1 - Run the entire program.\n2 - Delete an existing Compute Environment (created from a previous execution of\nthis program that did not complete).\n\n1\nContinuing with the program...\n\n--------------------------------------------------------------------------------\n\nEnter 'c' followed by <ENTER> to continue:\nc\nContinuing with the program...\n\nUse AWS CloudFormation to create two IAM roles that are required for this scenario.\nStack creation requested, ARN is arn:aws:cloudformation:us-east-1:814548047983:stack/BatchStack4/a3f75c50-54d1-11ef-b797-0e1c1efd9fe3\nStack created successfully\nStack creation requested, ARN is arn:aws:cloudformation:us-east-1:814548047983:stack/EcsStack/c8f19bb0-54d1-11ef-8454-0eebf7f4997f\nStack created successfully\nThe IAM role needed to interact wit AWS Batch is arn:aws:iam::814548047983:role/BatchStack4-RoleBatch15CD9C03-KWhgI3rvSIbY\nThe second IAM role needed to interact wit AWS ECR is arn:aws:iam::814548047983:role/EcsStack-RoleEcsB0CD5AAE-RaUPyHZuoa1L\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for AWS SQS C++ Example\nDESCRIPTION: CMake configuration that sets up a build environment for an AWS SQS example using the AWS SDK for C++. It handles platform-specific requirements, sets C++11 as the minimum standard, configures AWS SDK dependencies, and sets up proper library linking for both Windows and non-Windows environments.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/sqs/hello_sqs/CMakeLists.txt#2025-04-09_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# Set the minimum required version of CMake for this project.\ncmake_minimum_required(VERSION 3.13)\n\n# Set the AWS service components used by this project.\nset(SERVICE_COMPONENTS sqs)\n\n# Set this project's name.\nproject(\"hello_sqs\")\n\n# Set the C++ standard to use to build this target.\n# At least C++ 11 is required for the AWS SDK for C++.\nset(CMAKE_CXX_STANDARD 11)\n\n# Use the MSVC variable to determine if this is a Windows build.\nset(WINDOWS_BUILD ${MSVC})\n\nif (WINDOWS_BUILD) # Set the location where CMake can find the installed libraries for the AWS SDK.\n    string(REPLACE \";\" \"/aws-cpp-sdk-all;\" SYSTEM_MODULE_PATH \"${CMAKE_SYSTEM_PREFIX_PATH}/aws-cpp-sdk-all\")\n    list(APPEND CMAKE_PREFIX_PATH ${SYSTEM_MODULE_PATH})\nendif ()\n\n# Find the AWS SDK for C++ package.\nfind_package(AWSSDK REQUIRED COMPONENTS ${SERVICE_COMPONENTS})\n\nif(WINDOWS_BUILD AND AWSSDK_INSTALL_AS_SHARED_LIBS)\n    # Copy relevant AWS SDK for C++ libraries into the current binary directory for running and debugging.\n\n    # set(BIN_SUB_DIR \"/Debug\") # If you are building from the command line you may need to uncomment this\n    # and set the proper subdirectory to the executables' location.\n\n    AWSSDK_CPY_DYN_LIBS(SERVICE_COMPONENTS \"\" ${CMAKE_CURRENT_BINARY_DIR}${BIN_SUB_DIR})\nendif()\n\nadd_executable(${PROJECT_NAME}\n        hello_sqs.cpp)\n\ntarget_link_libraries(${PROJECT_NAME}\n        ${AWSSDK_LINK_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: Listing Amazon SNS Subscriptions in C++\nDESCRIPTION: This code snippet shows how to list SNS subscriptions using the AWS SDK for C++. It's located in the list_subscriptions.cpp file at line 21.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/sns/README.md#2025-04-09_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\n// Code for ListSubscriptions action (specific implementation not provided)\n```\n\n----------------------------------------\n\nTITLE: Checking S3 Directory Bucket Existence in Java\nDESCRIPTION: Example code for checking if an S3 Directory Bucket exists using AWS SDK for Java 2.x.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/s3/src/main/java/com/example/s3/directorybucket/README.md#2025-04-09_snippet_14\n\nLANGUAGE: Java\nCODE:\n```\nHeadBucket\n```\n\n----------------------------------------\n\nTITLE: Adding Targets to a Rule in EventBridge using Kotlin\nDESCRIPTION: This code snippet shows how to add targets to a rule in Amazon EventBridge using the AWS SDK for Kotlin. It utilizes the PutTargets operation to associate one or more targets with a specific rule.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/eventbridge/README.md#2025-04-09_snippet_9\n\nLANGUAGE: Kotlin\nCODE:\n```\nPutTargets\n```\n\n----------------------------------------\n\nTITLE: Running Scenario Examples\nDESCRIPTION: Command to get help and list available scenarios for running examples with the cmd runner.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/gov2/cognito/README.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo run ./cmd -h\n```\n\n----------------------------------------\n\nTITLE: Setting Up CMake Project for DynamoDB Example Tests\nDESCRIPTION: Configures CMake project settings including minimum required version, project name, C++ standard, and dependencies for AWS DynamoDB example tests.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/dynamodb/tests/CMakeLists.txt#2025-04-09_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\n\n# Set the minimum required version of CMake for this project.\ncmake_minimum_required(VERSION 3.14)\n\nset(EXAMPLE_SERVICE_NAME dynamodb)\nset(CURRENT_TARGET \"${EXAMPLE_SERVICE_NAME}_gtest\")\nset(CURRENT_TARGET_AWS_DEPENDENCIES dynamodb s3)\n\n# Set this project's name.\nproject(\"${EXAMPLE_SERVICE_NAME}-examples-gtests\" )\n\n# Set the C++ standard to use to build this target.\nset(CMAKE_CXX_STANDARD 14)\n\n# Build shared libraries by default.\nset(BUILD_SHARED_LIBS ON)\n```\n\n----------------------------------------\n\nTITLE: Inserting Unsubscribe URL in Newsletter Template using Handlebars\nDESCRIPTION: This snippet shows how to insert an Amazon SES unsubscribe URL into the newsletter template using Handlebars syntax. It allows recipients to easily unsubscribe from future mailings.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/sesv2_weekly_mailer/resources/coupon-newsletter.txt#2025-04-09_snippet_1\n\nLANGUAGE: Handlebars\nCODE:\n```\n{{amazonSESUnsubscribeUrl}}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Schedule Group with EventBridge Scheduler in C#\nDESCRIPTION: This snippet shows how to delete a schedule group using the AWS SDK for .NET with Amazon EventBridge Scheduler. It includes error handling and returns a boolean indicating success or failure.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/EventBridge Scheduler/README.md#2025-04-09_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic async Task<bool> DeleteScheduleGroup(string groupName)\n{\n    var request = new DeleteScheduleGroupRequest\n    {\n        Name = groupName\n    };\n\n    try\n    {\n        await _schedulerClient.DeleteScheduleGroupAsync(request);\n        return true;\n    }\n    catch (Amazon.Scheduler.Model.ResourceNotFoundException ex)\n    {\n        Console.WriteLine($\"Couldn't delete schedule group {groupName}. {ex.Message}\");\n    }\n\n    return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Describing CloudWatch Alarms for a Metric in Kotlin\nDESCRIPTION: This code snippet demonstrates how to describe CloudWatch alarms for a specific metric using the AWS SDK for Kotlin. It's part of a comprehensive CloudWatch scenario.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/cloudwatch/README.md#2025-04-09_snippet_6\n\nLANGUAGE: Kotlin\nCODE:\n```\nDescribeAlarmsForMetric\n```\n\n----------------------------------------\n\nTITLE: List Amazon SQS Queues using Ruby\nDESCRIPTION: Example code demonstrating how to list all available SQS queues using the AWS SDK for Ruby.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/ruby/example_code/sqs/README.md#2025-04-09_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\nshow_queues.rb#L7\n```\n\n----------------------------------------\n\nTITLE: Deleting S3 Object in Rust\nDESCRIPTION: This code snippet demonstrates how to delete an object from an S3 bucket using the AWS SDK for Rust. It uses the DeleteObject operation to remove a specific file from storage.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/s3/README.md#2025-04-09_snippet_6\n\nLANGUAGE: Rust\nCODE:\n```\nDeleteObject\n```\n\n----------------------------------------\n\nTITLE: Implementing Third Step Lambda Handler for Email Notification in Java\nDESCRIPTION: The Handler3 class is the final step in the workflow that receives an employee's email address and sends a notification about the assigned ticket. It utilizes a SendMessage object to handle the email delivery.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_workflows_stepfunctions/README.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage example;\n\nimport com.amazonaws.services.lambda.runtime.Context;\nimport com.amazonaws.services.lambda.runtime.LambdaLogger;\nimport com.amazonaws.services.lambda.runtime.RequestHandler;\nimport java.io.IOException;\n\n// Handler value: example.Handler\npublic class Handler3 implements RequestHandler<String, String> {\n\n@Override\npublic String handleRequest(String event, Context context)\n{\n        LambdaLogger logger = context.getLogger();\n        String email = event ;\n\n\t// log execution details\n        logger.log(\"Email value \" + email);\n        SendMessage msg = new SendMessage();\n\n       try {\n           msg.sendMessage(email);\n\n       } catch (IOException e)\n       {\n           e.getStackTrace();\n       }\n\n        return \"\";\n     }\n  }\n```\n\n----------------------------------------\n\nTITLE: Copying AWS SDK Libraries for Windows Builds\nDESCRIPTION: Copies relevant AWS SDK for C++ libraries into the current binary directory for running and debugging on Windows when building shared libraries.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/ses/CMakeLists.txt#2025-04-09_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(WINDOWS_BUILD AND AWSSDK_INSTALL_AS_SHARED_LIBS)\n  # set(BIN_SUB_DIR \"/Debug\") # If you are building from the command line, you may need to uncomment this\n  # and set the proper subdirectory to the executables' location.\n\n  AWSSDK_CPY_DYN_LIBS(SERVICE_COMPONENTS \"\" ${CMAKE_CURRENT_BINARY_DIR}${BIN_SUB_DIR})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Running Assessment Report Example\nDESCRIPTION: Command to execute the Python script that creates an Audit Manager assessment report with one day of evidence.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/auditmanager/README.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython create_assessment_report.py\n```\n\n----------------------------------------\n\nTITLE: Listing AWS IoT SiteWise Portals in Rust\nDESCRIPTION: This example demonstrates how to list AWS IoT SiteWise portals in a specified Region. It allows for specifying the Region and displaying additional information.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/sitewise/README.md#2025-04-09_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ncargo run --bin list-portals -- [-r REGION] [-v]\n```\n\n----------------------------------------\n\nTITLE: Cleanup Resources Example\nDESCRIPTION: Sample output showing the resource cleanup process where the user confirms deletion of schedules, schedule groups, and CloudFormation stack, with progress messages during the deletion process.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/eventbridge_scheduler/SPECIFICATION.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nAre you ready to delete the 'recurring-test' schedule? (y/n)\ny\nSuccessfully deleted schedule with name 'recurring-test'.\n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\nDo you want to delete all resources created by this workflow? (y/n)\ny\nSuccessfully deleted schedule group 'scenario-schedules-group'.\nCloudFormation stack 'teststack10' is being deleted. This may take a few minutes.\nWaiting for CloudFormation stack 'teststack10' to be deleted...\nWaiting for CloudFormation stack 'teststack10' to be deleted...\nCloudFormation stack 'teststack10' has been deleted.\n--------------------------------------------------------------------------------\nAmazon EventBridge Scheduler workflow completed.\n```\n\n----------------------------------------\n\nTITLE: Receive Messages from Amazon SQS using Ruby\nDESCRIPTION: Example code showing how to receive messages from an SQS queue using the AWS SDK for Ruby.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/ruby/example_code/sqs/README.md#2025-04-09_snippet_4\n\nLANGUAGE: Ruby\nCODE:\n```\nreceive_messages.rb#L7\n```\n\n----------------------------------------\n\nTITLE: Sending an Email via Amazon SES using C++\nDESCRIPTION: This example illustrates how to send an email using Amazon SES with the AWS SDK for C++. The code is located in the 'send_email.cpp' file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/ses/README.md#2025-04-09_snippet_12\n\nLANGUAGE: C++\nCODE:\n```\n// See send_email.cpp, line 26\n```\n\n----------------------------------------\n\nTITLE: Running Image Set Tagging Example\nDESCRIPTION: Command to run the example showing how to tag a HealthImaging image set\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/medical-imaging/README.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython tagging_image_sets.py\n```\n\n----------------------------------------\n\nTITLE: Hello Route 53 Domain Registration in C#\nDESCRIPTION: Demonstrates a simple interaction with Amazon Route 53 Domain Registration by listing domain prices. This is a starting point example for working with the Route 53 domains API.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Route53/README.md#2025-04-09_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nusing Amazon.Route53Domains;\nusing Amazon.Route53Domains.Model;\n\nnamespace Route53Actions;\n\n/// <summary>\n/// Hello Amazon Route 53 Domain Registration!\n/// </summary>\npublic class HelloRoute53\n{\n    public static async Task Main()\n    {\n        var route53Client = new AmazonRoute53DomainsClient();\n\n        // The ListDomains method returns a list of domain names, sorted by domain name.\n        var listPricesResponse = await route53Client.ListPricesAsync(\n            new ListPricesRequest { Tld = \".com\", MaxItems = 3 }\n        );\n\n        listPricesResponse.Prices.ForEach(price =>\n        {\n            Console.WriteLine($\"Domain name: {price.Name}\");\n            Console.WriteLine($\"Registration: {price.RegistrationPrice?.Price} {price.RegistrationPrice?.Currency}\");\n            Console.WriteLine($\"Renewal: {price.RenewalPrice?.Price} {price.RenewalPrice?.Currency}\");\n            Console.WriteLine($\"Transfer: {price.TransferPrice?.Price} {price.TransferPrice?.Currency}\");\n            Console.WriteLine($\"Restoration: {price.RestorationPrice?.Price} {price.RestorationPrice?.Currency}\");\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Auto Scaling Group Configuration in C#\nDESCRIPTION: This code snippet shows how to update the configuration of an existing Auto Scaling group using the AWS SDK for .NET. It allows for modifications to group parameters after creation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/AutoScaling/README.md#2025-04-09_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nUpdateAutoScalingGroup\n```\n\n----------------------------------------\n\nTITLE: Deleting DynamoDB Table in ABAP\nDESCRIPTION: This snippet demonstrates how to delete a DynamoDB table using the AWS SDK for SAP ABAP. It is part of the single action examples for DynamoDB operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/sap-abap/services/dyn/README.md#2025-04-09_snippet_2\n\nLANGUAGE: ABAP\nCODE:\n```\nzcl_aws1_dyn_actions.clas.abap#L141\n```\n\n----------------------------------------\n\nTITLE: Deleting an IAM Access Key using AWS SDK for Kotlin\nDESCRIPTION: This code excerpt shows how to delete an IAM access key using the AWS SDK for Kotlin. It requires the user name and access key ID as inputs.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/iam/README.md#2025-04-09_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\nsrc/main/kotlin/com/kotlin/iam/DeleteAccessKey.kt#L39\n```\n\n----------------------------------------\n\nTITLE: Deleting S3 Buckets in PHP\nDESCRIPTION: Code that demonstrates how to delete an S3 bucket using the AWS SDK for PHP. This is part of the bucket lifecycle management examples.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/php/example_code/s3/README.md#2025-04-09_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nDeleteBucket\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing IAM Users and Roles in Java\nDESCRIPTION: This code example shows how to perform basic IAM operations such as creating users, creating roles, attaching policies, and assuming roles. It's part of a scenario that demonstrates IAM basics.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/iam/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nsrc/main/java/com/example/iam/IAMScenario.java\n```\n\n----------------------------------------\n\nTITLE: Building Hello Rekognition Project with CMake\nDESCRIPTION: These commands create a build directory, navigate into it, and use CMake to build the project. The resulting executable is named 'hello_rekognition'.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/rekognition/hello_rekognition/README.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmkdir build \ncd build\ncmake --build ..\n```\n\n----------------------------------------\n\nTITLE: Updating DynamoDB Item in Go\nDESCRIPTION: Updates the year and rating of a specific movie item in a DynamoDB table. Requires table name, movie name, year, and rating as input parameters.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/dynamodb/README.md#2025-04-09_snippet_7\n\nLANGUAGE: go\nCODE:\n```\ngo run UpdateItem.go -t TABLE -m MOVIE -y YEAR -r RATING\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Packages\nDESCRIPTION: Command to install the required Python packages for the AWS Glue examples using pip in a virtual environment.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/glue/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Running Example Code with Runner.php\nDESCRIPTION: Command to execute PHP example code using the Runner.php file which abstracts implementation logic.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/php/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp Runner.php\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Template for Cognito-Authenticated Spring Boot Application\nDESCRIPTION: This HTML template uses Thymeleaf and Spring Security to display different content for authenticated and anonymous users. It includes a login button for Cognito, a form to submit data to DynamoDB, and a logout button.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_amazon_cognito_app/README.md#2025-04-09_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE HTML>\n<html lang=\"en\" xmlns:sec=\"http://www.thymeleaf.org/extras/spring-security\" xmlns:th=\"http://www.thymeleaf.org\">\n<head>\n <title>Getting Started: Spring Boot and the Enhanced DynamoDB Client</title>\n <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n <link rel=\"stylesheet\" th:href=\"|https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css|\"/>\n <style>\n  body {\n   background-color: #f8f9fa;\n  }\n\n  .container {\n   margin-top: 50px;\n  }\n\n  .login-container {\n   max-width: 400px;\n   margin: auto;\n   text-align: center;\n   padding: 20px;\n   background-color: #ffffff;\n   border-radius: 10px;\n   box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n  }\n\n  .main-content {\n   max-width: 600px;\n   margin: auto;\n   background-color: #ffffff;\n   padding: 20px;\n   border-radius: 10px;\n   box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n   text-align: center;\n  }\n\n  .btn-primary,\n  .btn-secondary,\n  .btn-danger {\n   margin-top: 10px;\n  }\n\n  h1 {\n   color: #007bff;\n  }\n\n  form {\n   margin-top: 20px;\n  }\n\n  .form-group {\n   margin-bottom: 20px;\n  }\n\n  input[type=\"text\"] {\n   width: 100%;\n   padding: 10px;\n   box-sizing: border-box;\n  }\n\n  input[type=\"submit\"],\n  input[type=\"reset\"] {\n   background-color: #007bff;\n   color: #fff;\n   padding: 10px 20px;\n   border: none;\n   border-radius: 5px;\n   cursor: pointer;\n  }\n\n  input[type=\"submit\"]:hover,\n  input[type=\"reset\"]:hover {\n   background-color: #0056b3;\n  }\n\n  .btn-danger {\n   background-color: #dc3545;\n  }\n\n  .btn-danger:hover {\n   background-color: #c82333;\n  }\n </style>\n</head>\n<body>\n<div class=\"container\">\n <div class=\"login-container\" sec:authorize=\"isAnonymous()\">\n  <p>You must log in with Amazon Cognito to access this AWS Web Application.</p>\n  <a class=\"btn btn-primary\" th:href=\"@{/oauth2/authorization/cognito}\" role=\"button\">\n   Log in using <b>Amazon Cognito</b>\n  </a>\n </div>\n\n <div class=\"main-content\" sec:authorize=\"isAuthenticated()\">\n  <h1>A secure AWS Web application</h1>\n  <p>Hello <strong th:text=\"${#authentication.getPrincipal().attributes['cognito:username']}\"></strong></p>\n  <p>You can submit data to a DynamoDB table by using the Enhanced Client. A mobile notification is sent alerting a user a new submission occurred.</p>\n  <form action=\"#\" th:action=\"@{/greeting}\" th:object=\"${greeting}\" method=\"post\">\n   <div class=\"form-group\">\n    <label for=\"id\">Id:</label>\n    <input type=\"text\" class=\"form-control\" th:field=\"*{id}\" id=\"id\" />\n   </div>\n\n   <div class=\"form-group\">\n    <label for=\"title\">Title:</label>\n    <input type=\"text\" class=\"form-control\" th:field=\"*{title}\" id=\"title\" />\n   </div>\n\n   <div class=\"form-group\">\n    <label for=\"name\">Name:</label>\n    <input type=\"text\" class=\"form-control\" th:field=\"*{name}\" id=\"name\" />\n   </div>\n\n   <div class=\"form-group\">\n    <label for=\"body\">Body:</label>\n    <input type=\"text\" class=\"form-control\" th:field=\"*{body}\" id=\"body\" />\n   </div>\n\n   <p>\n    <input type=\"submit\" class=\"btn btn-primary\" value=\"Submit\" />\n    <input type=\"reset\" class=\"btn btn-secondary\" value=\"Reset\" />\n   </p>\n  </form>\n\n  <form method=\"post\" th:action=\"@{/logout}\">\n   <input type=\"submit\" class=\"btn btn-danger\" value=\"Logout\"/>\n  </form>\n </div>\n</div>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Running EventBridge Create and Trigger Rule Scenario in Ruby\nDESCRIPTION: This code snippet demonstrates how to run the 'Create and trigger a rule' scenario for Amazon EventBridge using Ruby. It executes a Ruby script that creates and triggers an EventBridge rule.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/ruby/example_code/eventbridge/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nruby cw-ruby-example-send-events-ec2.rb\n```\n\n----------------------------------------\n\nTITLE: Creating DB Parameter Group in Amazon RDS using C++\nDESCRIPTION: This code snippet demonstrates how to create a custom DB parameter group in Amazon RDS using the AWS SDK for C++. It references line 313 in the getting_started_with_db_instances.cpp file which contains the CreateDBParameterGroup action implementation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/rds/README.md#2025-04-09_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Hello Amazon RDS\nL4\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for AWS SDK C++ IAM Examples with Google Test\nDESCRIPTION: This CMake script sets up a project for building and testing AWS SDK C++ IAM examples. It configures dependencies, build settings, and test execution using Google Test. The script handles both Windows and non-Windows environments, manages AWS SDK dependencies, and sets up the necessary compile definitions and link libraries.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/iam/tests/CMakeLists.txt#2025-04-09_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\n\n# Set the minimum required version of CMake for this project.\ncmake_minimum_required(VERSION 3.14)\n\nset(EXAMPLE_SERVICE_NAME \"iam\")\nset(CURRENT_TARGET \"${EXAMPLE_SERVICE_NAME}_gtest\")\nset(CURRENT_TARGET_AWS_DEPENDENCIES iam s3 sts)\n\n# Set this project's name.\nproject(\"${EXAMPLE_SERVICE_NAME}-examples-gtests\" )\n\n# Set the C++ standard to use to build this target.\nset(CMAKE_CXX_STANDARD 14)\n\n# Build shared libraries by default.\nset(BUILD_SHARED_LIBS ON)\n\nenable_testing()\n\nfind_package(GTest)\n\nif(NOT GTest_FOUND)\n    include(FetchContent)\n    FetchContent_Declare(\n            googletest\n            GIT_REPOSITORY https://github.com/google/googletest.git\n            GIT_TAG release-1.12.1\n    )\n\n    # For Windows: Prevent overriding the parent project's compiler/linker settings.\n    set(gtest_force_shared_crt ON CACHE BOOL \"\" FORCE)\n    FetchContent_MakeAvailable(googletest)\nendif()\n\n# Use the MSVC variable to determine if this is a Windows build.\nset(WINDOWS_BUILD ${MSVC})\n\n# Set the location for Windows to find the installed libraries of the SDK.\nif(WINDOWS_BUILD)\n    string(REPLACE \";\" \"/aws-cpp-sdk-all;\" SYSTEM_MODULE_PATH \"${CMAKE_SYSTEM_PREFIX_PATH}/aws-cpp-sdk-all\")\n    list(APPEND CMAKE_PREFIX_PATH ${SYSTEM_MODULE_PATH})\nendif()\n\n# Find the AWS SDK for C++ package.\nfind_package(AWSSDK REQUIRED COMPONENTS ${CURRENT_TARGET_AWS_DEPENDENCIES})\n\nadd_executable(\n        ${CURRENT_TARGET}\n)\n\nif (WINDOWS_BUILD)\n    # set(BIN_SUB_DIR \"/Debug\") # If you are building from the command line, you may need to uncomment this\n    # and set the proper subdirectory to the executables' location.\n\n    if (AWSSDK_INSTALL_AS_SHARED_LIBS)\n        # Copy relevant AWS SDK for C++ libraries into the current binary directory for running and debugging.\n        AWSSDK_CPY_DYN_LIBS(\n                CURRENT_TARGET_AWS_DEPENDENCIES\n                \"\"\n                ${CMAKE_CURRENT_BINARY_DIR}${BIN_SUB_DIR}\n        )\n    endif ()\n\n    add_custom_command(\n            TARGET\n            ${CURRENT_TARGET}\n            POST_BUILD\n            COMMAND ${CMAKE_COMMAND} -E copy\n            ${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_BINDIR}${BIN_SUB_DIR}/gtest.dll\n            ${CMAKE_CURRENT_BINARY_DIR}${BIN_SUB_DIR}\n    )\nendif ()\n\n# GTEST_SOURCE_FILES can be defined in the command line to limit the files in a build. For example,\n# you can limit files to one action.\nif (NOT DEFINED GTEST_SOURCE_FILES)\n    file(\n            GLOB\n            GTEST_SOURCE_FILES\n            \"gtest_*.cpp\"\n    )\nendif()\n\nenable_testing()\n\nfile(GLOB GTEST_SOURCE_FILES\n        \"gtest_*.cpp\"\n)\n\nforeach(TEST_FILE ${GTEST_SOURCE_FILES})\n    string(REPLACE \"gtest_\" \"../\" SOURCE_FILE ${TEST_FILE})\n     if (EXISTS ${SOURCE_FILE})\n        list(APPEND GTEST_SOURCE ${SOURCE_FILE} ${TEST_FILE})\n    else()\n        message(\"Error: no associated source file ${SOURCE_FILE} found for ${TEST_FILE}\")\n    endif()\nendforeach()\n\ntarget_sources(\n        ${CURRENT_TARGET}\n        PUBLIC\n        ${GTEST_SOURCE}\n        test_main.cpp\n        ${EXAMPLE_SERVICE_NAME}_gtests.cpp\n)\n\ntarget_include_directories(\n        ${CURRENT_TARGET}\n        PUBLIC\n        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/..>\n        $<INSTALL_INTERFACE:..>\n)\n\ntarget_compile_definitions(\n        ${CURRENT_TARGET}\n        PUBLIC\n        TESTING_BUILD\n        SRC_DIR=\"${CMAKE_CURRENT_SOURCE_DIR}\"\n)\n\ntarget_link_libraries(\n        ${CURRENT_TARGET}\n        GTest::gtest\n        ${AWSSDK_LINK_LIBRARIES}\n        ${AWSSDK_PLATFORM_DEPS}\n)\n\ninclude(GoogleTest)\ngtest_add_tests(\n        TARGET\n        ${CURRENT_TARGET}\n)\n```\n\n----------------------------------------\n\nTITLE: Deleting an Amazon S3 Bucket using AWS SDK for Swift\nDESCRIPTION: This code snippet shows how to delete an existing bucket from Amazon S3 using the AWS SDK for Swift.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/swift/example_code/s3/README.md#2025-04-09_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\nbasics/Sources/ServiceHandler/ServiceHandler.swift#L87\n```\n\n----------------------------------------\n\nTITLE: Assuming IAM Role with AWS STS in C#\nDESCRIPTION: Implementation of the AssumeRole operation using AWS STS in C#. This functionality enables creating temporary security credentials that can be used to access AWS resources by assuming a specified IAM role. The code is located in the AssumeRole.cs file within the AssumeRoleExample project.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/STS/README.md#2025-04-09_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nAssumeRole/AssumeRoleExample/AssumeRole.cs#L4\n```\n\n----------------------------------------\n\nTITLE: Resource Cleanup Output\nDESCRIPTION: Terminal output showing the cleanup process for AWS resources including load balancers, auto scaling groups, IAM roles, and DynamoDB tables\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/resilient_service/SPECIFICATION.md#2025-04-09_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nThis concludes the demo of how to build and manage a resilient service.\nTo keep things tidy and to avoid unwanted charges on your account, we can clean up all AWS resources\nthat were created for this demo.\nDo you want to clean up all demo resources? (y/n) y\nINFO: Deleted load balancer doc-example-resilience-lb.\nINFO: Waiting for load balancer to be deleted...\nINFO: Target group not yet released from load balancer, waiting...\nINFO: Deleted load balancing target group doc-example-resilience-tg.\nINFO: Stopping i-041efe367831f49b5.\nINFO: Stopping i-08022d9ebb1041b55.\nINFO: Stopping i-08763def19ccbcbd6.\nINFO: Stopping i-0f2c8709826fe8bf6.\nINFO: Some instances are still running. Waiting for them to stop...\nINFO: Some instances are still running. Waiting for them to stop...\nINFO: Some instances are still running. Waiting for them to stop...\nINFO: Some instances are still running. Waiting for them to stop...\nINFO: Some instances are still running. Waiting for them to stop...\nINFO: Some instances are still running. Waiting for them to stop...\nINFO: Some instances are still running. Waiting for them to stop...\nINFO: Deleted EC2 Auto Scaling group doc-example-resilience-group.\nINFO: Deleted instance profile doc-example-resilience-prof.\nINFO: Detached and deleted policy doc-example-resilience-pol.\nINFO: Deleted role doc-example-resilience-role.\nINFO: Launch template doc-example-resilience-template deleted.\nINFO: Deleted instance profile doc-example-resilience-bc-prof.\nINFO: Detached and deleted policy doc-example-resilience 'doc-example-resilience-bc-pol'.\nINFO: Detached and deleted policy AmazonSSMManagedInstanceCore.\nINFO: Deleted role doc-example-resilience-bc-role.\nINFO: Deleting table doc-example-recommendation-service...\nINFO: Table doc-example-recommendation-service deleted.\n----------------------------------------------------------------------------------------\nThanks for watching!\n----------------------------------------------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Listing Tags for a Kinesis Stream using AWS SDK for .NET\nDESCRIPTION: This code snippet demonstrates how to list tags associated with an Amazon Kinesis stream using the AWS SDK for .NET. It references the ListTagsForStream method in the ListTags.cs file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Kinesis/README.md#2025-04-09_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nListTagsForStream(ListTagsExample/ListTagsExample/ListTags.cs#L6)\n```\n\n----------------------------------------\n\nTITLE: Listing S3 Objects (V2) in Rust\nDESCRIPTION: This code snippet shows how to list objects in an S3 bucket using the AWS SDK for Rust. It uses the ListObjectsV2 operation, which is the recommended way to list objects in a bucket.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/s3/README.md#2025-04-09_snippet_11\n\nLANGUAGE: Rust\nCODE:\n```\nListObjectsV2\n```\n\n----------------------------------------\n\nTITLE: Updating an Email Template in Amazon SES using C++\nDESCRIPTION: This example demonstrates how to update an email template in Amazon SES using the AWS SDK for C++. The code is located in the 'update_template.cpp' file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/ses/README.md#2025-04-09_snippet_14\n\nLANGUAGE: C++\nCODE:\n```\n// See update_template.cpp, line 22\n```\n\n----------------------------------------\n\nTITLE: Delete Asset Model in AWS IoT SiteWise using Java\nDESCRIPTION: Shows how to delete an existing asset model in AWS IoT SiteWise.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/iotsitewise/README.md#2025-04-09_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\nDeleteAssetModel\n```\n\n----------------------------------------\n\nTITLE: Running List Hosted Models Example in Python with AWS Lookout for Vision\nDESCRIPTION: Command to run the hosting.py script, which demonstrates how to list all currently hosted AWS Lookout for Vision models.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/lookoutvision/README.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npython hosting.py\n```\n\n----------------------------------------\n\nTITLE: Sending Command in Systems Manager with JavaScript SDK v3\nDESCRIPTION: This code snippet demonstrates how to send a command using the SendCommand operation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/ssm/README.md#2025-04-09_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n// SendCommand\n```\n\n----------------------------------------\n\nTITLE: Running Data Firehose Examples\nDESCRIPTION: Command to execute the Data Firehose examples that demonstrate record processing functionality\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/firehose/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython scenarios/firehose-put-actions/firehose.py\n```\n\n----------------------------------------\n\nTITLE: Describing ECS Clusters in Rust\nDESCRIPTION: Illustrates how to retrieve descriptions of Amazon ECS clusters using the AWS SDK for Rust. Contains a code reference to describe-clusters.rs line 22.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/ecs/README.md#2025-04-09_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Android Gradle Build Configuration\nDESCRIPTION: Gradle build file configuration for an Android project using AWS SDK for Kotlin, including necessary dependencies and compile options for SNS and Translate services.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/subpub_app_android/README.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nplugins {\n    id 'com.android.application'\n    id 'org.jetbrains.kotlin.android'\n}\n\nandroid {\n    namespace 'com.example.pubsub'\n    compileSdk 33\n\n    defaultConfig {\n        applicationId \"com.example.pubsub\"\n        minSdk 24\n        targetSdk 33\n        versionCode 1\n        versionName \"1.0\"\n\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\n    }\n\n    buildTypes {\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\n        }\n    }\n    compileOptions {\n        sourceCompatibility JavaVersion.VERSION_11\n        targetCompatibility JavaVersion.VERSION_11\n    }\n    kotlinOptions {\n        jvmTarget = '11'\n    }\n}\n\ndependencies {\n\n    implementation 'androidx.core:core-ktx:1.7.0'\n    implementation(\"aws.sdk.kotlin:translate:0.33.1-beta\")\n    implementation(\"aws.sdk.kotlin:sns:0.33.1-beta\")  {\n        exclude group: \"xmlpull\", module: \"xmlpull\"\n    }\n    implementation 'androidx.appcompat:appcompat:1.6.0'\n    implementation 'com.google.android.material:material:1.8.0'\n    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'\n    testImplementation 'junit:junit:4.13.2'\n    androidTestImplementation 'androidx.test.ext:junit:1.1.5'\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for AWS SDK C++ SNS Examples\nDESCRIPTION: This CMake script sets up the build environment for AWS SDK C++ examples for Amazon SNS. It defines project properties, locates the AWS SDK, and creates executables for each example file. The script also handles Windows-specific configurations and supports optional test building.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/sns/CMakeLists.txt#2025-04-09_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\n\n# Set the minimum required version of CMake for this project.\ncmake_minimum_required(VERSION 3.13)\n\nset(SERVICE_NAME sns)\nset(SERVICE_COMPONENTS sns)\n\n# Set this project's name.\nproject(\"${SERVICE_NAME}-examples\")\n\n# Set the C++ standard to use to build this target.\nset(CMAKE_CXX_STANDARD 11)\n\n# Build shared libraries by default.\nset(BUILD_SHARED_LIBS ON)\n\n# Use the MSVC variable to determine if this is a Windows build.\nset(WINDOWS_BUILD ${MSVC})\n\n# Set the location of where Windows can find the installed libraries of the SDK.\nif (WINDOWS_BUILD)\n    string(REPLACE \";\" \"/aws-cpp-sdk-all;\" SYSTEM_MODULE_PATH \"${CMAKE_SYSTEM_PREFIX_PATH}/aws-cpp-sdk-all\")\n    list(APPEND CMAKE_PREFIX_PATH ${SYSTEM_MODULE_PATH})\nendif ()\n\n# Find the AWS SDK for C++ package.\nfind_package(AWSSDK REQUIRED COMPONENTS ${SERVICE_COMPONENTS})\n\nif (WINDOWS_BUILD AND AWSSDK_INSTALL_AS_SHARED_LIBS)\n    # Copy relevant AWS SDK for C++ libraries into the current binary directory for running and debugging.\n\n    # set(BIN_SUB_DIR \"/Debug\") # If you are building from the command line, you may need to uncomment this\n    # and set the proper subdirectory to the executables' location.\n\n    AWSSDK_CPY_DYN_LIBS(SERVICE_COMPONENTS \"\" ${CMAKE_CURRENT_BINARY_DIR}${BIN_SUB_DIR})\nendif ()\n\n# AWSDOC_SOURCE can be defined in the command line to limit the files in a build. For example,\n# you can limit files to one action.\nif (NOT DEFINED AWSDOC_SOURCE)\n    file(GLOB AWSDOC_SOURCE\n            \"*.cpp\"\n            )\nendif ()\n\nforeach (file ${AWSDOC_SOURCE})\n    get_filename_component(EXAMPLE ${file} NAME_WE)\n\n    # Build the code example executables.\n    set(EXAMPLE_EXE run_${EXAMPLE})\n\n    add_executable(${EXAMPLE_EXE} ${file})\n\n    target_link_libraries(${EXAMPLE_EXE} ${AWSSDK_LINK_LIBRARIES}\n            ${AWSSDK_PLATFORM_DEPS})\n\nendforeach ()\n\n\nif (BUILD_TESTS)\n    add_subdirectory(tests)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Sending Messages to SQS Queue in Go\nDESCRIPTION: Example command for sending a message to an AWS SQS queue. Requires queue name as an input parameter.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/sqs/README.md#2025-04-09_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ngo run SendMessage.go -q QUEUE\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Pipenv for AWS Device Farm Testing in Python\nDESCRIPTION: This snippet shows the commands to install the required dependencies using Pipenv for the AWS Device Farm CI runner example. It installs boto3 and requests libraries.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/devicefarm/device_testing/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\npipenv lock\npipenv install\n```\n\n----------------------------------------\n\nTITLE: Terminating Instances in Auto Scaling Group in C#\nDESCRIPTION: This code snippet demonstrates how to terminate a specific instance within an Auto Scaling group using the AWS SDK for .NET. It's useful for removing problematic instances or managing group composition.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/AutoScaling/README.md#2025-04-09_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nTerminateInstanceInAutoScalingGroup\n```\n\n----------------------------------------\n\nTITLE: AssumeRole Operation with AWS STS in C++\nDESCRIPTION: Demonstrates how to call the AssumeRole operation in AWS STS using the C++ SDK. This operation returns a set of temporary security credentials that can be used to access AWS resources. The reference is to line 37 in the file assume_role.cpp.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/sts/README.md#2025-04-09_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nAssumeRole\n```\n\n----------------------------------------\n\nTITLE: Describing Scaling Activities in C#\nDESCRIPTION: This code snippet shows how to describe scaling activities for Auto Scaling groups using the AWS SDK for .NET. It helps in monitoring and understanding the scaling operations that have occurred.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/AutoScaling/README.md#2025-04-09_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nDescribeScalingActivities\n```\n\n----------------------------------------\n\nTITLE: Creating Work Items Table for PostgreSQL-Compatible Aurora\nDESCRIPTION: SQL query to create a work_items table in PostgreSQL-compatible Aurora Serverless with columns for tracking work items including ID, dates, descriptions, and status.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/php/cross_service/aurora_item_tracker/README.md#2025-04-09_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate table work_items (\n  work_item_id SERIAL PRIMARY KEY,\n  created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  description TEXT,\n  guide TEXT,\n  status TEXT,\n  username VARCHAR(45),\n  archive BOOL DEFAULT false\n);\n```\n\n----------------------------------------\n\nTITLE: Revoking KMS Grant with Java SDK\nDESCRIPTION: This code snippet shows how to revoke a grant for a KMS key using the AWS SDK for Java 2.x. It uses the RevokeGrant operation to remove the specified grant for the KMS key.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/kms/README.md#2025-04-09_snippet_13\n\nLANGUAGE: Java\nCODE:\n```\nKMSActions.java#L385\n```\n\n----------------------------------------\n\nTITLE: Querying Items in DynamoDB Table with C++\nDESCRIPTION: This code snippet demonstrates how to query items in a DynamoDB table using the AWS SDK for C++. It retrieves items based on specified conditions.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/dynamodb/README.md#2025-04-09_snippet_12\n\nLANGUAGE: C++\nCODE:\n```\nQuery\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for AWS STS Examples\nDESCRIPTION: Complete CMake configuration file that sets up the build environment for AWS STS examples. It configures project settings, finds AWS SDK dependencies (STS, IAM, S3), handles Windows-specific library paths, and builds executables for all C++ example files in the directory.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/sts/CMakeLists.txt#2025-04-09_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\n\n# Set the minimum required version of CMake for this project.\ncmake_minimum_required(VERSION 3.13)\n\nset(SERVICE_NAME sts)\nset(SERVICE_COMPONENTS sts iam s3)\n\n# Set this project's name.\nproject(\"${SERVICE_NAME}-examples\")\n\n# Use the MSVC variable to determine if this is a Windows build.\nset(WINDOWS_BUILD ${MSVC})\n\n# Set the location of where Windows can find the installed libraries of the SDK.\nif (WINDOWS_BUILD)\n    string(REPLACE \";\" \"/aws-cpp-sdk-all;\" SYSTEM_MODULE_PATH \"${CMAKE_SYSTEM_PREFIX_PATH}/aws-cpp-sdk-all\")\n    list(APPEND CMAKE_PREFIX_PATH ${SYSTEM_MODULE_PATH})\nendif ()\n\n# Set the C++ standard to use to build this target.\nset(CMAKE_CXX_STANDARD 11)\n\n# Build shared libraries by default.\nset(BUILD_SHARED_LIBS ON)\n\n# Find the AWS SDK for C++ package.\nfind_package(AWSSDK REQUIRED COMPONENTS ${SERVICE_COMPONENTS})\n\nif (WINDOWS_BUILD AND AWSSDK_INSTALL_AS_SHARED_LIBS)\n    # Copy relevant AWS SDK for C++ libraries into the current binary directory for running and debugging.\n\n    # set(BIN_SUB_DIR \"/Debug\") # If you are building from the command line, you may need to uncomment this\n    # and set the proper subdirectory to the executables' location.\n\n    AWSSDK_CPY_DYN_LIBS(SERVICE_COMPONENTS \"\" ${CMAKE_CURRENT_BINARY_DIR}${BIN_SUB_DIR})\nendif ()\n\n# AWSDOC_SOURCE can be defined in the command line to limit the files in a build. For example,\n# you can limit files to one action.\nif(NOT DEFINED AWSDOC_SOURCE)\n    file(GLOB AWSDOC_SOURCE\n        \"*.cpp\"\n    )\nendif()\n\nforeach(file ${AWSDOC_SOURCE})\n    get_filename_component(EXAMPLE ${file} NAME_WE)\n\n    # Build the code example executables.\n    set(EXAMPLE_EXE run_${EXAMPLE})\n\n    add_executable(${EXAMPLE_EXE} ${file})\n\n    target_link_libraries(${EXAMPLE_EXE} ${AWSSDK_LINK_LIBRARIES}\n            ${AWSSDK_PLATFORM_DEPS})\n\nendforeach()\n\n\nif(BUILD_TESTS)\n    add_subdirectory(tests)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating SageMaker Model using AWS SDK for SAP ABAP\nDESCRIPTION: This code snippet shows how to create a SageMaker model using the AWS SDK for SAP ABAP. It references a method in the zcl_aws1_sgm_actions class.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/sap-abap/services/sagemaker/README.md#2025-04-09_snippet_1\n\nLANGUAGE: ABAP\nCODE:\n```\nzcl_aws1_sgm_actions.clas.abap#L170\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for AWS IAM Example\nDESCRIPTION: CMake configuration that sets up a build environment for an AWS IAM example using the AWS SDK for C++. Includes platform-specific settings for Windows builds, sets C++11 as the required standard, and configures necessary AWS SDK components and dependencies.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/iam/hello_iam/CMakeLists.txt#2025-04-09_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# Set the minimum required version of CMake for this project.\ncmake_minimum_required(VERSION 3.13)\n\n# Set the AWS service components used by this project.\nset(SERVICE_COMPONENTS iam)\n\n# Set this project's name.\nproject(\"hello_iam\")\n\n# Set the C++ standard to use to build this target.\n# At least C++ 11 is required for the AWS SDK for C++.\nset(CMAKE_CXX_STANDARD 11)\n\n# Use the MSVC variable to determine if this is a Windows build.\nset(WINDOWS_BUILD ${MSVC})\n\nif (WINDOWS_BUILD) # Set the location where CMake can find the installed libraries for the AWS SDK.\n    string(REPLACE \";\" \"/aws-cpp-sdk-all;\" SYSTEM_MODULE_PATH \"${CMAKE_SYSTEM_PREFIX_PATH}/aws-cpp-sdk-all\")\n    list(APPEND CMAKE_PREFIX_PATH ${SYSTEM_MODULE_PATH})\nendif ()\n\n# Find the AWS SDK for C++ package.\nfind_package(AWSSDK REQUIRED COMPONENTS ${SERVICE_COMPONENTS})\n\nif (WINDOWS_BUILD AND AWSSDK_INSTALL_AS_SHARED_LIBS)\n    # Copy relevant AWS SDK for C++ libraries into the current binary directory for running and debugging.\n\n    # set(BIN_SUB_DIR \"/Debug\") # if you are building from the command line you may need to uncomment this\n    # and set the proper subdirectory to the executables' location.\n\n    AWSSDK_CPY_DYN_LIBS(SERVICE_COMPONENTS \"\" ${CMAKE_CURRENT_BINARY_DIR}${BIN_SUB_DIR})\nendif ()\n\nadd_executable(${PROJECT_NAME}\n        hello_iam.cpp)\n\ntarget_link_libraries(${PROJECT_NAME}\n        ${AWSSDK_LINK_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from an SNS Topic using AWS SDK for Kotlin\nDESCRIPTION: This code snippet demonstrates how to unsubscribe from an Amazon SNS topic using the AWS SDK for Kotlin.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/sns/README.md#2025-04-09_snippet_10\n\nLANGUAGE: Kotlin\nCODE:\n```\nsrc/main/kotlin/com/kotlin/sns/Unsubscribe.kt#L37\n```\n\n----------------------------------------\n\nTITLE: Automatically Fixing PHP Code Style Issues\nDESCRIPTION: Command to run PHP Code Beautifier and Fixer (phpcbf) to automatically fix simple code style issues in the DynamoDB examples.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/php/README.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/phpcbf --standard=../.github/linters/phpcs.xml --extensions=php --ignore=vendor example_code/dynamodb/\n```\n\n----------------------------------------\n\nTITLE: Displaying Amazon SNS Subscription ARNs in Go\nDESCRIPTION: This code snippet displays the Amazon Resource Names (ARNs) of your Amazon SNS subscriptions.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/sns/README.md#2025-04-09_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\ngo run ShowSubscriptions.go\n```\n\n----------------------------------------\n\nTITLE: Executing a Single PartiQL Statement in DynamoDB with C++\nDESCRIPTION: This code snippet illustrates how to execute a single PartiQL statement in DynamoDB using the AWS SDK for C++. It's part of a scenario that demonstrates querying a table using PartiQL.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/dynamodb/README.md#2025-04-09_snippet_8\n\nLANGUAGE: C++\nCODE:\n```\nExecuteStatement\n```\n\n----------------------------------------\n\nTITLE: Retrieving Execution History in AWS Step Functions with Kotlin\nDESCRIPTION: Demonstrates how to retrieve the history of a specific execution in AWS Step Functions using the AWS SDK for Kotlin and the getExecutionHistory command.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/stepfunctions/README.md#2025-04-09_snippet_8\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Code not provided in the given content\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Dependencies\nDESCRIPTION: Command to install the required Python packages for the AWS IoT examples using pip package manager in a virtual environment. Dependencies are specified in requirements.txt file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/iot/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Implementing AWS Lambda Function with DynamoDB Document Client\nDESCRIPTION: AWS Lambda function that uses DynamoDB Document client to store user selections in a DynamoDB table. It initializes Cognito credentials and handles put operations to DynamoDB with error handling and logging.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascript/example_code/lambda/lambda-for-browser/README.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict'\n\nconsole.log('Loading function');\n\nvar AWS = require('aws-sdk');\n\n// Initialize the Amazon Cognito credentials provider.\nAWS.config.region = \"REGION\";\nAWS.config.credentials = new AWS.CognitoIdentityCredentials({\n    IdentityPoolId: \"IDENTITY_POOL_ID\",\n});\n\n\n// Create client.\nconst docClient = new AWS.DynamoDB.DocumentClient();\n\n\nexports.handler = async(event, context, callback) => {\n    const params = {\n        Item: {\n            Id: event.Item.Id,\n            Color: event.Item.Color,\n            Pattern: event.Item.Pattern\n        },\n        TableName: event.TableName\n    };\n    await docClient.put(params, async function (err, data) {\n        if (err) {\n            console.error(\n                \"Unable to add item. Error JSON:\",\n                JSON.stringify(err, null, 2)\n            );\n        } else {\n            console.log(\"Adding data to dynamodb...\");\n            console.log(\"Added item:\", JSON.stringify(data, null, 2));\n        }\n    });\n    callback(null, event);\n};\n```\n\n----------------------------------------\n\nTITLE: DeleteLogGroup Implementation in .NET\nDESCRIPTION: Example demonstrating how to delete a CloudWatch Logs log group using AWS SDK for .NET. The implementation is referenced in the DeleteLogGroup.cs file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/CloudWatchLogs/README.md#2025-04-09_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\n/* Code reference only - implementation in DeleteLogGroup.cs#L6 */\n```\n\n----------------------------------------\n\nTITLE: Running Scenario Commands\nDESCRIPTION: Command to display help information about available scenarios and how to run them using the cmd runner.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/gov2/bedrock/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo run ./cmd -h\n```\n\n----------------------------------------\n\nTITLE: Delete S3 Bucket\nDESCRIPTION: Removes an S3 bucket using AWS CLI commands.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/aws-cli/bash-linux/s3/README.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbucket-lifecycle-operations/bucket_operations.sh#L343\n```\n\n----------------------------------------\n\nTITLE: Deleting Encryption Configuration from S3 Directory Buckets in Java\nDESCRIPTION: Example code for removing encryption settings from an S3 Directory Bucket using AWS SDK for Java 2.x.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/s3/src/main/java/com/example/s3/directorybucket/README.md#2025-04-09_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nDeleteBucketEncryption\n```\n\n----------------------------------------\n\nTITLE: Deprecated HTML S3 Photo Viewer Example\nDESCRIPTION: This snippet was part of an HTML example for viewing photos stored in Amazon S3. It has been replaced by a newer example in the AWS documentation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/s3/dead-snippets.txt#2025-04-09_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n// snippet-start:[s3.HTML.s3_PhotoViewer.completeV3]\nThis code example has been superseded by the example in\nCode examples > Amazon S3 > Create a web page that lists S3 objects\n// snippet-end:[s3.HTML.s3_PhotoViewer.completeV3]\n```\n\n----------------------------------------\n\nTITLE: Deleting an Amazon SNS Topic in C++\nDESCRIPTION: This code snippet demonstrates how to delete an SNS topic using the AWS SDK for C++. It's located in the delete_topic.cpp file at line 21.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/sns/README.md#2025-04-09_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\n// Code for DeleteTopic action (specific implementation not provided)\n```\n\n----------------------------------------\n\nTITLE: Sending Messages with Amazon Pinpoint using JavaScript\nDESCRIPTION: This code snippet demonstrates how to send messages using Amazon Pinpoint. It references a function named 'SendMessages' located in the 'pinClient.js' file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/pinpoint/README.md#2025-04-09_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// SendMessages\n// See implementation in src/libs/pinClient.js#L16\n```\n\n----------------------------------------\n\nTITLE: Running Single Action Scripts\nDESCRIPTION: Command to execute individual action files from the actions directory using Node.js.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/rekognition/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode ./actions/<fileName>\n```\n\n----------------------------------------\n\nTITLE: Resolving a Support Case in Java\nDESCRIPTION: Demonstrates how to resolve an open support case using the AWS Support API. This action marks the case as resolved in the AWS Support system.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/support/README.md#2025-04-09_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nResolveCase resolveCase = supportClient.resolveCase(\n    ResolveCaseRequest.builder()\n        .caseId(caseId)\n        .build()\n);\n```\n\n----------------------------------------\n\nTITLE: Setting JAVA_SDK_HOME Environment Variable\nDESCRIPTION: This command sets the JAVA_SDK_HOME environment variable to the path of the AWS Java SDK directory. It's used by the run_example.sh script to locate the SDK.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/java/README.rst#2025-04-09_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nexport JAVA_SDK_HOME=/path/to/aws-java-sdk\n```\n\n----------------------------------------\n\nTITLE: Setting JAVA_SDK_HOME Environment Variable\nDESCRIPTION: This command sets the JAVA_SDK_HOME environment variable to the path of the AWS Java SDK directory. It's used by the run_example.sh script to locate the SDK.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/java/README.rst#2025-04-09_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nexport JAVA_SDK_HOME=/path/to/aws-java-sdk\n```\n\n----------------------------------------\n\nTITLE: Subscribing to an Amazon SNS Topic via Email in C++\nDESCRIPTION: This code snippet shows how to subscribe an email address to an SNS topic using the AWS SDK for C++. It's located in the subscribe_email.cpp file at line 10.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/sns/README.md#2025-04-09_snippet_9\n\nLANGUAGE: C++\nCODE:\n```\n// Code for Subscribe action (specific implementation not provided)\n```\n\n----------------------------------------\n\nTITLE: Creating Long Polling Queue in Amazon SQS using Go\nDESCRIPTION: This example demonstrates how to create an Amazon SQS queue with long polling enabled. It accepts queue name and wait time as command-line arguments, with wait time defaulting to 10 seconds if not specified.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/sqs/README.md#2025-04-09_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\ngo run CreateLPQueue.go -q QUEUE [-d WAIT-TIME]\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Interface for AWS Video Analyzer Application\nDESCRIPTION: The index.html template serves as the home page for the AWS Video Analyzer application. It provides a user-friendly introduction to the application functionality and step-by-step instructions for uploading, viewing, and analyzing videos using Amazon Rekognition and other AWS services.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/video_analyzer_application/README.md#2025-04-09_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html xmlns:th=\"http://www.thymeleaf.org\" >\n\n<head>\n <meta charset=\"utf-8\" />\n <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n <link rel=\"stylesheet\" th:href=\"|https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css|\"/>\n <script th:src=\"|https://code.jquery.com/jquery-1.12.4.min.js|\"></script>\n <script th:src=\"|https://code.jquery.com/ui/1.11.4/jquery-ui.min.js|\"></script>\n <link rel=\"stylesheet\" href=\"../public/css/styles.css\" th:href=\"@{/css/styles.css}\" />\n <link rel=\"icon\" href=\"../public/images/favicon.ico\" th:href=\"@{/images/favicon.ico}\" />\n\n<title>AWS Video Analyzer</title>\n</head>\n<body>\n <header th:replace=\"layout :: site-header\"/>\n  <div class=\"container\">\n\n <h2>AWS Video Analyzer application</h2>\n\n <p>The AWS Video Analyzer example application uses the Amazon Rekognition service and other AWS services, and the AWS SDK for Java version 2.\n    Analyzing your videos in real-time has never been easier! Just perform these steps:<p>\n\n <ol>\n    <li>Upload a video (.MP4) to an Amazon S3 bucket by choosing the <b>Upload Video</b> menu item.</li>\n    <li>Choose <b>Choose Video File</b> and browse to a video located on your desktop.</li>\n    <li>Choose <b>Upload</b> to upload your video to an Amazon S3 bucket.</li>\n    <li>Choose <b>Get Video</b> to view the video located in the S3 bucket. Only 1 video can be in the bucket.</li>\n    <li>Analyze the video and produce a report by choosing the <b>Analyze Video</b> menu item. </li>\n    <li>Enter an email address in the email field and choose <b>Analyze Video</b>.  </li>\n    <li>Amazon SES is used to send an email with an Excel report to the specified email recipient.</li>\n </ol>\n</div>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Finding AWS SDK Dependencies and Creating Executable Target\nDESCRIPTION: Locates the AWS SDK for C++ components required for testing and creates the executable target for the tests.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/s3/tests/CMakeLists.txt#2025-04-09_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n# Find the AWS SDK for C++ package.\nfind_package(AWSSDK REQUIRED COMPONENTS ${CURRENT_TARGET_AWS_DEPENDENCIES})\n\nadd_executable(\n        ${CURRENT_TARGET}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Google Tests to the Test Suite\nDESCRIPTION: Includes the GoogleTest module and adds the executable as a test target, enabling automatic discovery of test cases.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/cross-service/serverless-aurora/tests/CMakeLists.txt#2025-04-09_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(GoogleTest)\ngtest_add_tests(\n        TARGET\n        ${EXECUTABLE}\n)\n```\n\n----------------------------------------\n\nTITLE: Running Single Action Scripts with Node.js\nDESCRIPTION: Command to execute individual action scripts from the actions directory using Node.js.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/bedrock-agent-runtime/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode ./actions/<fileName>\n```\n\n----------------------------------------\n\nTITLE: Running the Create and Invoke Agent Scenario for Amazon Bedrock in Python\nDESCRIPTION: This command demonstrates how to execute the scenario that creates and invokes an Amazon Bedrock agent using the Python SDK.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/bedrock-agent/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython scenario_get_started_with_agents.py\n```\n\n----------------------------------------\n\nTITLE: Creating an IAM Role in C++\nDESCRIPTION: Code excerpt showing how to create an IAM role using the AWS SDK for C++.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/iam/README.md#2025-04-09_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\n// From create_role.cpp line 35\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Statement with Amazon RDS Data Service in Rust\nDESCRIPTION: This code snippet demonstrates how to execute a SQL statement using the Amazon RDS Data Service with the AWS SDK for Rust. It shows the usage of the ExecuteStatement action.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/rdsdata/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nuse aws_config::meta::region::RegionProviderChain;\nuse aws_sdk_rdsdata::types::ResultSetOptions;\nuse aws_sdk_rdsdata::{Client, Error};\n\n#[tokio::main]\nasync fn main() -> Result<(), Error> {\n    let region_provider = RegionProviderChain::default_provider().or_else(\"us-east-1\");\n    let config = aws_config::from_env().region(region_provider).load().await;\n    let client = Client::new(&config);\n\n    let resource_arn = \"arn:aws:rds:us-east-1:123456789012:cluster:database-2\";\n    let secret_arn = \"arn:aws:secretsmanager:us-east-1:123456789012:secret:database2-Rv3asg\";\n    let sql = \"SELECT * FROM Employees\";\n\n    let rsp = client\n        .execute_statement()\n        .resource_arn(resource_arn)\n        .database(\"employees\")\n        .secret_arn(secret_arn)\n        .sql(sql)\n        .include_result_metadata(true)\n        .result_set_options(\n            ResultSetOptions::builder()\n                .decimal_return_type(\"STRING\")\n                .build(),\n        )\n        .send()\n        .await?;\n\n    println!(\"ExecuteStatement response: {:#?}\", rsp);\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting an Amazon SNS Topic using .NET\nDESCRIPTION: This code example demonstrates how to delete an Amazon SNS topic. The code is from a file named SNSWrapper.cs located in the cross-service TopicsAndQueues project.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/SNS/README.md#2025-04-09_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nDeleteTopic\n```\n\n----------------------------------------\n\nTITLE: Running Scenario Scripts in Node.js\nDESCRIPTION: Command to execute a CloudWatch Events scenario script from the scenarios directory.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/cloudwatch-events/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnode ./scenarios/<fileName>\n```\n\n----------------------------------------\n\nTITLE: Delete Asset in AWS IoT SiteWise using Java\nDESCRIPTION: Demonstrates how to delete an existing asset in AWS IoT SiteWise.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/iotsitewise/README.md#2025-04-09_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nDeleteAsset\n```\n\n----------------------------------------\n\nTITLE: Updating Lambda Function Code in Java\nDESCRIPTION: This code snippet illustrates how to update the code of a Lambda function using the AWS SDK for Java 2.x. It's used in the Lambda scenario to demonstrate function code updates.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/lambda/README.md#2025-04-09_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\nUpdateFunctionCode\n```\n\n----------------------------------------\n\nTITLE: Creating SNS Subscription HTML Interface\nDESCRIPTION: HTML template for managing Amazon SNS subscriptions and publishing messages. It includes form elements for email subscription management and message publishing with language selection.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/subpub_app/README.md#2025-04-09_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html xmlns:th=\"https://www.thymeleaf.org\" lang=\"\">\n<head>\n <meta charset=\"UTF-8\" />\n <title>Subscription</title>\n\n <script th:src=\"|https://code.jquery.com/jquery-1.12.4.min.js|\"></script>\n <script th:src=\"|https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js|\"></script>\n <link rel=\"stylesheet\" th:href=\"|https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css|\"/>\n <script src=\"../public/js/contact_me.js\" th:src=\"@{/js/contact_me.js}\"></script>\n  <link rel=\"stylesheet\" href=\"../public/css/styles.css\" th:href=\"@{/css/styles.css}\" />\n</head>\n<body>\n<header th:replace=\"layout :: site-header\"/>\n<div class=\"container\">\n <p>Now is: <b th:text=\"${execInfo.now.time}\"></b></p>\n <div class=\"row\">\n     <div class=\"col\">\n        <h4>Enter an email address<h3>\n            <input type=\"email\" class=\"form-control\" id=\"inputEmail1\" aria-describedby=\"emailHelp\" placeholder=\"Enter email\">\n            <div class=\"clearfix mt-40\">\n\n                <!-- Button trigger modal -->\n                <button type=\"button\"  onclick=\"subEmail() \"class=\"btn btn-primary\" >\n                    Subscribe\n                </button>\n                <button type=\"button\" class=\"btn btn-primary\" onclick=\"getSubs()\">\n                    List Subscriptions\n                </button>\n                <button type=\"button\" onclick=\"delSub()\" class=\"btn btn-primary\" >\n                    UnSubscribe\n                </button>\n\n                <!-- Modal -->\n                <div class=\"modal fade\" id=\"myModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLongTitle\" aria-hidden=\"true\">\n                    <div class=\"modal-dialog\" role=\"document\">\n                        <div class=\"modal-content\">\n                            <div class=\"modal-header\">\n                                <h5 class=\"modal-title\" id=\"exampleModalLongTitle\">SNS Email Subscriptions</h5>\n                                <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                    <span aria-hidden=\"true\">&times;</span>\n                                </button>\n                            </div>\n                            <div class=\"modal-body\">\n\n                            </div>\n                            <div class=\"modal-footer\">\n                                <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n       </div>\n     </div>\n     <hr style=\"width:50%;text-align:left;margin-left:0\">\n     <h4>Enter a message to publish</h4>\n     <div class=\"col-lg-12 mx-auto\">\n     <div class=\"control-group\">\n        <div class=\"form-group floating-label-form-group controls mb-0 pb-2\">\n            <textarea class=\"form-control\" id=\"body\" rows=\"5\" placeholder=\"Body\" required=\"required\" data-validation-required-message=\"Please enter a description.\"></textarea>\n            <p class=\"help-block text-danger\"></p>\n        </div>\n       </div>\n      <br>\n      <div>\n        <label for=\"lang\">Select a Language:</label>\n        <select name=\"lang\" id=\"lang\">\n            <option>English</option>\n            <option>French</option>\n            <option>Spanish</option>\n        </select>\n    </div>\n      <button type=\"submit\" class=\"btn btn-primary btn-xl\" id=\"SendButton\">Publish</button>\n     </div>\n   </div>\n   </body>\n  </html\n```\n\n----------------------------------------\n\nTITLE: Deleting DB Instance in Amazon RDS using C++\nDESCRIPTION: This code snippet references the DeleteDBInstance action at line 873 in the getting_started_with_db_instances.cpp file, which demonstrates how to delete a DB instance using the AWS SDK for C++.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/rds/README.md#2025-04-09_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Adding Targets to a Rule in EventBridge using C++\nDESCRIPTION: This code snippet illustrates how to add targets to a rule in Amazon EventBridge using the AWS SDK for C++. It references the PutTargets action implemented in the put_targets.cpp file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/eventbridge/README.md#2025-04-09_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\n// See put_targets.cpp#L15 for the implementation\n```\n\n----------------------------------------\n\nTITLE: AWS SNS SMS Publisher Implementation in Java\nDESCRIPTION: Class that sends SMS notifications using AWS SNS when new items are added to DynamoDB. It uses environment variables for AWS credentials and requires a valid phone number configuration.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_first_project/README.md#2025-04-09_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.handlingformsubmission;\n\nimport software.amazon.awssdk.auth.credentials.EnvironmentVariableCredentialsProvider;\nimport software.amazon.awssdk.regions.Region;\nimport software.amazon.awssdk.services.sns.SnsClient;\nimport software.amazon.awssdk.services.sns.model.PublishRequest;\nimport software.amazon.awssdk.services.sns.model.SnsException;\nimport org.springframework.stereotype.Component;\n\n@Component(\"PublishTextSMS\")\npublic class PublishTextSMS {\n    public void sendMessage(String id) {\n        Region region = Region.US_EAST_1;\n        SnsClient snsClient = SnsClient.builder()\n            .region(region)\n            .credentialsProvider(EnvironmentVariableCredentialsProvider.create())\n            .build();\n        \n\tString message = \"A new item with ID value \"+ id +\" was added to the DynamoDB table\";\n        String phoneNumber = \"<Enter a valid mobile number>\";\n\n        try {\n            PublishRequest request = PublishRequest.builder()\n                .message(message)\n                .phoneNumber(phoneNumber)\n                .build();\n\n            snsClient.publish(request);\n\n        } catch (SnsException e) {\n            System.err.println(e.awsErrorDetails().errorMessage());\n            System.exit(1);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Describing an Execution in AWS Step Functions using Kotlin\nDESCRIPTION: Demonstrates how to describe an execution in AWS Step Functions using the AWS SDK for Kotlin with the describeExecution command.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/stepfunctions/README.md#2025-04-09_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Code not provided in the given content\n```\n\n----------------------------------------\n\nTITLE: Deleting Objects from S3 Directory Buckets in Java\nDESCRIPTION: Example code for deleting a single object from an S3 Directory Bucket using AWS SDK for Java 2.x.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/s3/src/main/java/com/example/s3/directorybucket/README.md#2025-04-09_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\nDeleteObject\n```\n\n----------------------------------------\n\nTITLE: Getting S3 Batch Job Tags in Java\nDESCRIPTION: Retrieves tags associated with an S3 batch job using GetJobTagging API\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/s3/src/main/java/com/example/s3/batch/README.md#2025-04-09_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nS3BatchActions.java#L204\n```\n\n----------------------------------------\n\nTITLE: DynamoDB Service Implementation with Enhanced Client\nDESCRIPTION: Service class that handles DynamoDB operations using AWS SDK V2 Enhanced Client. It processes XML data and populates a DynamoDB table named 'Country' with population statistics.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/Creating_etl_workflow/README.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage com.etl.example;\n\nimport org.jdom2.Document;\nimport org.jdom2.JDOMException;\nimport org.jdom2.input.SAXBuilder;\nimport org.xml.sax.InputSource;\nimport software.amazon.awssdk.enhanced.dynamodb.DynamoDbEnhancedClient;\nimport software.amazon.awssdk.enhanced.dynamodb.DynamoDbTable;\nimport software.amazon.awssdk.enhanced.dynamodb.TableSchema;\nimport software.amazon.awssdk.regions.Region;\nimport software.amazon.awssdk.services.dynamodb.DynamoDbClient;\nimport software.amazon.awssdk.services.dynamodb.model.DynamoDbException;\nimport java.util.List;\nimport java.io.IOException;\nimport java.io.StringReader;\n\npublic class DynamoDBService {\n    int recNum = 1;\n\n    private DynamoDbClient getClient() {\n        return DynamoDbClient.builder()\n            .region(Region.US_EAST_1)\n            .build();\n    }\n\n    public void injectETLData(String myDom)  throws JDOMException, IOException {\n        SAXBuilder builder = new SAXBuilder();\n        builder.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n        Document jdomDocument = builder.build(new InputSource(new StringReader(myDom)));\n        org.jdom2.Element root = jdomDocument.getRootElement();\n        PopData pop = new PopData();\n        List<org.jdom2.Element> items = root.getChildren(\"Item\");\n        for (org.jdom2.Element element : items) {\n            pop.setName(element.getChildText(\"Name\"));\n            pop.setCode(element.getChildText(\"Code\"));\n            pop.set2010(element.getChildText(\"Date2010\"));\n            pop.set2011(element.getChildText(\"Date2011\"));\n            pop.set2012(element.getChildText(\"Date2012\"));\n            pop.set2013(element.getChildText(\"Date2013\"));\n            pop.set2014(element.getChildText(\"Date2014\"));\n            pop.set2015(element.getChildText(\"Date2015\"));\n            pop.set2016(element.getChildText(\"Date2016\"));\n            pop.set2017(element.getChildText(\"Date2017\"));\n            pop.set2018(element.getChildText(\"Date2018\"));\n            pop.set2019(element.getChildText(\"Date2019\"));\n            setItem(pop) ;\n        }\n    }\n\n    public void setItem(PopData pop) {\n        // Create a DynamoDbEnhancedClient.\n        DynamoDbClient ddb = getClient();\n        DynamoDbEnhancedClient enhancedClient = DynamoDbEnhancedClient.builder()\n                .dynamoDbClient(ddb)\n                .build();\n        try {\n            // Create a DynamoDbTable object.\n            DynamoDbTable<Population> workTable = enhancedClient.table(\"Country\", TableSchema.fromBean(Population.class));\n\n             // Populate the table.\n            Population record = new Population();\n            String name = pop.getName();\n            String code = pop.getCode();\n\n            record.setId(name);\n            record.setCode(code);\n            record.set2010(pop.get2010());\n            record.set2011(pop.get2011());\n            record.set2012(pop.get2012());\n            record.set2013(pop.get2013());\n            record.set2014(pop.get2014());\n            record.set2015(pop.get2015());\n            record.set2016(pop.get2016());\n            record.set2017(pop.get2017());\n            record.set2018(pop.get2018());\n            record.set2019(pop.get2019());\n\n            // Put the data into the Amazon DynamoDB table.\n            workTable.putItem(record);\n            System.out.println(\"Added record \"+recNum);\n            recNum ++;\n\n        } catch (DynamoDbException e) {\n            System.err.println(e.getMessage());\n            System.exit(1);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Stream Transcription with Amazon Transcribe in C++\nDESCRIPTION: This code snippet demonstrates how to start a stream transcription using Amazon Transcribe. It's part of the 'StartStreamTranscription' action in the AWS SDK for C++.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/transcribe-streaming/README.md#2025-04-09_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nStartStreamTranscription\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for AWS Transcribe Application\nDESCRIPTION: Sets up a CMake build configuration for an AWS Transcribe application. Configures C++11 standard, handles AWS SDK dependencies, manages Windows-specific library paths, and sets up executable linking. Includes special handling for shared libraries and Windows dynamic library copying.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/transcribe-streaming/CMakeLists.txt#2025-04-09_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_CXX_STANDARD 11)\nproject(get_transcript LANGUAGES CXX)\nset(SERVICE_COMPONENTS transcribe;transcribestreaming)\n\n# Build shared libraries by default.\nset(BUILD_SHARED_LIBS ON)\n\n# Use the MSVC variable to determine if this is a Windows build.\nset(WINDOWS_BUILD ${MSVC})\n\n# Set the location of where Windows can find the installed libraries of the SDK.\nif (WINDOWS_BUILD)\n    string(REPLACE \";\" \"/aws-cpp-sdk-all;\" SYSTEM_MODULE_PATH \"${CMAKE_SYSTEM_PREFIX_PATH}/aws-cpp-sdk-all\")\n    list(APPEND CMAKE_PREFIX_PATH ${SYSTEM_MODULE_PATH})\nendif ()\n\nfind_package(AWSSDK COMPONENTS ${SERVICE_COMPONENTS})\n\nif (WINDOWS_BUILD AND AWSSDK_INSTALL_AS_SHARED_LIBS)\n    # Copy relevant AWS SDK for C++ libraries into the current binary directory for running and debugging.\n\n    # set(BIN_SUB_DIR \"/Debug\") # If you are building from the command line, you may need to uncomment this\n    # and set the proper subdirectory to the executables' location.\n\n    AWSSDK_CPY_DYN_LIBS(SERVICE_COMPONENTS \"\" ${CMAKE_CURRENT_BINARY_DIR}${BIN_SUB_DIR})\nendif ()\n\n\nadd_executable(${PROJECT_NAME} \"get_transcript.cpp\" )\n\ntarget_link_libraries(${PROJECT_NAME} PRIVATE ${AWSSDK_LINK_LIBRARIES})\n\ntarget_compile_definitions(${PROJECT_NAME}\n        PRIVATE\n        MEDIA_DIR=\"${CMAKE_CURRENT_SOURCE_DIR}/.media\" )\n```\n\n----------------------------------------\n\nTITLE: Implementing AWS Service Client in React for SQS Integration\nDESCRIPTION: A JavaScript module for the React frontend that provides functions to interact with the Spring REST API. It includes methods for retrieving messages, posting new messages, and purging the queue.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_message_application/README.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport axios from \"axios\";\nimport configData from \"./config.json\";\n\nexport const getMessages = async () => {\n  return await axios.get(`${configData.BASE_URL}/chat/msgs`);\n};\n\nexport const postMessage = async (item) => {\n  let user = item.username;\n  let message = item.message;\n  await axios.post(\n    `${configData.BASE_URL}/chat/add?user=` + user + `&message=` + message\n  );\n};\n\nexport const purgeMessages = async () => {\n  await axios.get(`${configData.BASE_URL}/chat/purge`)\n}\n```\n\n----------------------------------------\n\nTITLE: Superseded Pinpoint Send Email SMTP Example in .NET\nDESCRIPTION: This is a placeholder for a code example that demonstrates how to send emails using AWS Pinpoint via SMTP in .NET. The comment indicates that this example has been replaced by newer examples located in the 'Code examples > Actions and scenarios > Pinpoint' section.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Pinpoint/dead-snippets.txt#2025-04-09_snippet_0\n\nLANGUAGE: .NET\nCODE:\n```\n// snippet-start:[pinpoint.dotnet.pinpoint_send_email_smtp.complete]\nThis code example has been superseded by the examples in\nCode examples > Actions and scenarios > Pinpoint\n// snippet-end:[pinpoint.dotnet.pinpoint_send_email_smtp.complete]\n```\n\n----------------------------------------\n\nTITLE: Creating CloudWatch Anomaly Detector in Kotlin\nDESCRIPTION: This code snippet demonstrates how to create a CloudWatch anomaly detector using the AWS SDK for Kotlin. It's included in a comprehensive CloudWatch scenario.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/cloudwatch/README.md#2025-04-09_snippet_15\n\nLANGUAGE: Kotlin\nCODE:\n```\nPutAnomalyDetector\n```\n\n----------------------------------------\n\nTITLE: CloudWatch Basic Operations Listing\nDESCRIPTION: A reference guide listing all the supported CloudWatch operations including metrics management, alarm handling, dashboard operations, and anomaly detection. Each operation maps to a specific function in the CloudWatchWrapper class.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv4/CloudWatch/README.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- DeleteAlarms\n- DeleteAnomalyDetector\n- DeleteDashboards\n- DescribeAlarmHistory\n- DescribeAlarms\n- DescribeAlarmsForMetric\n- DescribeAnomalyDetectors\n- DisableAlarmActions\n- EnableAlarmActions\n- GetDashboard\n- GetMetricData\n- GetMetricStatistics\n- GetMetricWidgetImage\n- ListDashboards\n- ListMetrics\n- PutAnomalyDetector\n- PutDashboard\n- PutMetricAlarm\n- PutMetricData\n```\n\n----------------------------------------\n\nTITLE: Running IAM User and Role Scenario\nDESCRIPTION: Command to execute a scenario that demonstrates creating users, roles, and assuming roles with temporary credentials\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/ruby/example_code/iam/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nruby scenario_users.rb\n```\n\n----------------------------------------\n\nTITLE: Describing Stack Resources with CloudFormation in C#\nDESCRIPTION: This code snippet demonstrates how to use the DescribeStackResources operation in AWS CloudFormation using the AWS SDK for .NET. It's part of a 'Hello CloudFormation' example to get started with the service.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/CloudFormation/README.md#2025-04-09_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nActions/HelloCloudFormation.cs#L4\n```\n\n----------------------------------------\n\nTITLE: Running Go Unit Tests for AWS KMS Examples\nDESCRIPTION: Commands to run unit tests for the AWS KMS examples. Basic test command and verbose version are shown.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/kms/README.md#2025-04-09_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ngo test\n```\n\nLANGUAGE: Shell\nCODE:\n```\ngo test -test.v\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Packages\nDESCRIPTION: Installs the necessary Python packages for running the RDS examples using pip package manager in a virtual environment.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/rds/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Creating a Receipt Rule in Amazon SES using C++\nDESCRIPTION: This code snippet shows how to create a receipt rule in Amazon SES using the AWS SDK for C++. The implementation can be found in the 'create_receipt_rule.cpp' file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/ses/README.md#2025-04-09_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n// See create_receipt_rule.cpp, line 25\n```\n\n----------------------------------------\n\nTITLE: Deleting AWS Config Delivery Channel in Rust\nDESCRIPTION: Command-line utility to delete an AWS Config delivery channel by name. Accepts channel name with optional region specification.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/config/README.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncargo run --bin delete-delivery-channel -- -c CHANNEL [-r REGION] [-v]\n```\n\n----------------------------------------\n\nTITLE: Starting a State Machine Execution with AWS Step Functions Java SDK\nDESCRIPTION: This code snippet shows how to start a state machine execution using the AWS Step Functions Java SDK. It employs the startExecution command to initiate the execution of a state machine.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/stepfunctions/README.md#2025-04-09_snippet_13\n\nLANGUAGE: Java\nCODE:\n```\n// Code snippet for starting a state machine execution\n// Refer to: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/route53/src/main/java/com/example/route/StepFunctionsScenario.java\n```\n\n----------------------------------------\n\nTITLE: AWS SQS and Comprehend Integration Service in Kotlin\nDESCRIPTION: Service class that handles AWS SQS operations including sending, receiving, and purging messages. Integrates with AWS Comprehend for language detection and implements FIFO queue functionality.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/creating_message_application/README.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.sqs\n\nimport aws.sdk.kotlin.services.comprehend.ComprehendClient\nimport aws.sdk.kotlin.services.comprehend.model.DetectDominantLanguageRequest\nimport aws.sdk.kotlin.services.sqs.SqsClient\nimport aws.sdk.kotlin.services.sqs.model.GetQueueUrlRequest\nimport aws.sdk.kotlin.services.sqs.model.MessageAttributeValue\nimport aws.sdk.kotlin.services.sqs.model.PurgeQueueRequest\nimport aws.sdk.kotlin.services.sqs.model.ReceiveMessageRequest\nimport aws.sdk.kotlin.services.sqs.model.SendMessageRequest\nimport org.springframework.stereotype.Component\n\n@Component\nclass SendReceiveMessages {\n    private val queueNameVal = \"Message.fifo\"\n\n    suspend fun purgeMyQueue() {\n        var queueUrlVal: String\n        val getQueueRequest = GetQueueUrlRequest {\n            queueName = queueNameVal\n        }\n        SqsClient { region = \"us-west-2\" }.use { sqsClient ->\n            queueUrlVal = sqsClient.getQueueUrl(getQueueRequest).queueUrl.toString()\n            val queueRequest = PurgeQueueRequest {\n                queueUrl = queueUrlVal\n            }\n            sqsClient.purgeQueue(queueRequest)\n        }\n    }\n\n    suspend fun getMessages(): List<MessageData>? {\n        val attr: MutableList<String> = ArrayList()\n        attr.add(\"Name\")\n\n        val getQueueRequest = GetQueueUrlRequest {\n            queueName = queueNameVal\n        }\n\n        SqsClient { region = \"us-west-2\" }.use { sqsClient ->\n            val queueUrlVal = sqsClient.getQueueUrl(getQueueRequest).queueUrl\n\n            val receiveRequest = ReceiveMessageRequest {\n                queueUrl = queueUrlVal\n                maxNumberOfMessages = 10\n                waitTimeSeconds = 20\n                messageAttributeNames = attr\n            }\n\n            val messages = sqsClient.receiveMessage(receiveRequest).messages\n            var myMessage: MessageData\n            val allMessages = mutableListOf<MessageData>()\n\n            if (messages != null) {\n                for (m in messages) {\n                    myMessage = MessageData()\n                    myMessage.body = m.body\n                    myMessage.id = m.messageId\n                    val map = m.messageAttributes\n                    val `val` = map?.get(\"Name\")\n                    if (`val` != null) {\n                        myMessage.name = `val`.stringValue\n                    }\n                    allMessages.add(myMessage)\n                }\n            }\n            return allMessages\n        }\n    }\n\n    suspend fun processMessage(msg: MessageData) {\n        val attributeValue = MessageAttributeValue {\n            stringValue = msg.name\n            dataType = \"String\"\n        }\n\n        val myMap: MutableMap<String, MessageAttributeValue> = HashMap()\n        myMap[\"Name\"] = attributeValue\n\n        val getQueueRequest = GetQueueUrlRequest {\n            queueName = queueNameVal\n        }\n\n        var lanCode = \"\"\n        val request = DetectDominantLanguageRequest {\n            text = msg.body\n        }\n\n        ComprehendClient { region = \"us-west-2\" }.use { comClient ->\n            val resp = comClient.detectDominantLanguage(request)\n            val allLanList = resp.languages\n            if (allLanList != null) {\n                for (lang in allLanList) {\n                    println(\"Language is \" + lang.languageCode)\n                    lanCode = lang.languageCode.toString()\n                }\n            }\n        }\n\n        SqsClient { region = \"us-west-2\" }.use { sqsClient ->\n            val queueUrlVal: String? = sqsClient.getQueueUrl(getQueueRequest).queueUrl\n            val sendMsgRequest = SendMessageRequest {\n                queueUrl = queueUrlVal\n                messageAttributes = myMap\n                messageGroupId = \"GroupA_$lanCode\"\n                messageDeduplicationId = msg.id\n                messageBody = msg.body\n            }\n            sqsClient.sendMessage(sendMsgRequest)\n        }\n      }\n   }\n```\n\n----------------------------------------\n\nTITLE: Creating an Amazon SNS Topic in C++\nDESCRIPTION: This code snippet shows how to create a new SNS topic using the AWS SDK for C++. It's located in the create_topic.cpp file at line 21.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/sns/README.md#2025-04-09_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n// Code for CreateTopic action (specific implementation not provided)\n```\n\n----------------------------------------\n\nTITLE: Configuring Executable for S3 Object Integrity Workflow\nDESCRIPTION: This CMake snippet sets up the executable for the S3 object integrity workflow. It specifies the source files, compile definitions, include directories, and links the necessary libraries.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/s3/s3_object_integrity_workflow/CMakeLists.txt#2025-04-09_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(EXAMPLE_EXE run_${PROJECT_NAME})\n\nadd_executable(${EXAMPLE_EXE}\n        s3_object_integrity_workflow.cpp\n        main.cpp\n        ../create_bucket.cpp\n        ../delete_objects.cpp\n        ../list_objects.cpp\n        ../delete_bucket.cpp\n)\n\ntarget_compile_definitions(${EXAMPLE_EXE}\n        PRIVATE\n        EXCLUDE_MAIN_FUNCTION\n        SRC_DIR=\"${CMAKE_CURRENT_SOURCE_DIR}\"\n        LARGE_FILE_DIR=\"${CMAKE_CURRENT_SOURCE_DIR}/../../../../resources/sample_files/\"\n)\n\ntarget_include_directories(${EXAMPLE_EXE}\n        PRIVATE\n        \"${CMAKE_CURRENT_SOURCE_DIR}/..\"\n)\n\ntarget_link_libraries(${EXAMPLE_EXE}\n        PRIVATE\n        ${AWSSDK_LINK_LIBRARIES}\n        ${AWSSDK_PLATFORM_DEPS}\n)\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages to Queues using AWS SDK for Kotlin\nDESCRIPTION: This code example shows how to publish messages to queues using Amazon SNS and Amazon SQS with the AWS SDK for Kotlin. It demonstrates creating topics, subscribing queues, and publishing messages.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/sns/README.md#2025-04-09_snippet_12\n\nLANGUAGE: Kotlin\nCODE:\n```\n../../usecases/topics_and_queues/src/main/kotlin/com/example/sns/SNSWorkflow.kt\n```\n\n----------------------------------------\n\nTITLE: Listing Amazon SNS Subscriptions using .NET\nDESCRIPTION: This code example demonstrates how to list all Amazon SNS subscriptions. The code is from a file named ListSubscriptions.cs located in the ListSNSSubscriptionsExample project.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/SNS/README.md#2025-04-09_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nListSubscriptions\n```\n\n----------------------------------------\n\nTITLE: Running Single Action in Node.js\nDESCRIPTION: Command to execute a single CloudWatch Events action script from the actions directory.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/cloudwatch-events/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode ./actions/<fileName>\n```\n\n----------------------------------------\n\nTITLE: Describing a KMS Key with PHP\nDESCRIPTION: This example demonstrates how to retrieve detailed information about a KMS key using the AWS SDK for PHP. It's useful for key management and auditing.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/php/example_code/kms/README.md#2025-04-09_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nKmsService.php#L195\n```\n\n----------------------------------------\n\nTITLE: Creating a Contact List with SES v2 API\nDESCRIPTION: Specifies how to create a new contact list named 'weekly-coupons-newsletter' using SES v2 API. Includes the required parameter and error handling guidance.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/sesv2_weekly_mailer/content/30_SPECIFICATION.md#2025-04-09_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- Operation: **CreateContactList**\n  - Parameters:\n    - `ContactListName`: `weekly-coupons-newsletter`\n  - Errors:\n    - `AlreadyExistsException`: If the contact list already exists, skip this step and proceed with the next operation. This error can be safely ignored.\n    - `LimitExceededException`: If the limit for contact lists is exceeded, fail the workflow and inform the user that they have reached the limit for contact lists.\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for C++ Lambda Function\nDESCRIPTION: Command to build a Docker image for C++ Lambda function development using a provided Dockerfile.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/lambda/cpp_lambda/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker build . -f Dockerfile -t cpp_lambda_image\n```\n\n----------------------------------------\n\nTITLE: CloudFormation Stack Update Command\nDESCRIPTION: AWS CLI command to update the CloudFormation stack with new parameters for testing different resilience scenarios. Uses a template file and parameters file with IAM capabilities enabled.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/aws-cfn/cross-service/resilient-workflow/README.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\naws cloudformation update-stack \\\n  --stack-name resilience-demo \\\n  --template-body file://./resilient-service.yaml \\\n  --parameters file://./params.json \\\n  --capabilities CAPABILITY_NAMED_IAM\n```\n\n----------------------------------------\n\nTITLE: Attaching a Policy to an IAM Role in C++\nDESCRIPTION: Code excerpt showing how to attach a policy to an IAM role using the AWS SDK for C++.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/iam/README.md#2025-04-09_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n// From attach_role_policy.cpp line 38\n```\n\n----------------------------------------\n\nTITLE: Running the API Gateway Create and Deploy REST API Example in Python\nDESCRIPTION: Executes the Python script that demonstrates creating and deploying a REST API using Amazon API Gateway.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/api-gateway/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython aws_service/aws_service.py\n```\n\n----------------------------------------\n\nTITLE: Delete SQS Queue in Kotlin\nDESCRIPTION: Example showing how to delete an Amazon SQS queue using the DeleteQueue API operation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/sqs/README.md#2025-04-09_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nDeleteQueue\n```\n\n----------------------------------------\n\nTITLE: Building Swift Examples using Command Line\nDESCRIPTION: Command to build the Swift examples from terminal by navigating to the example directory.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/swift/example_code/iam/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ swift build\n```\n\n----------------------------------------\n\nTITLE: Signing Data with a KMS Key using PHP\nDESCRIPTION: This example demonstrates how to sign data using a KMS key with the AWS SDK for PHP. It's used for creating digital signatures to ensure data integrity and authenticity.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/php/example_code/kms/README.md#2025-04-09_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\nKmsService.php#L390\n```\n\n----------------------------------------\n\nTITLE: Creating DynamoDB Table with AWS CLI\nDESCRIPTION: This snippet demonstrates how to create a DynamoDB table using the AWS CLI. It's referenced in the file but the actual code is not provided in the given content.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/aws-cli/bash-linux/dynamodb/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Code for CreateTable operation\n# Located in dynamodb_operations.sh at line 17\n```\n\n----------------------------------------\n\nTITLE: Querying Aurora Serverless Database for a Work Item in Rust\nDESCRIPTION: Rust function that constructs and executes a SQL SELECT statement to retrieve a single work item from an Aurora Serverless database using the Amazon RDS Data Service client.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/cross_service/rest_ses/README.md#2025-04-09_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\npub async fn retrieve(id: String, client: &crate::client::RdsClient) -> Result<crate::work_item::WorkItem, crate::work_item::WorkItemError> {\n    let statement = client\n        .execute_statement()\n        .sql(format!(\n            r#\"SELECT {FIELDS} FROM Work WHERE idwork = :idwork;\"#\n        ))\n        .set_parameters(params![(\"idwork\", id)])\n        .format_records_as(RecordsFormatType::Json)\n        .send()\n        .await;\n\n    let items = parse_rds_output(statement)?;\n    todo!(\"Further checks to ensure a single item was retrieved\")\n}\n```\n\n----------------------------------------\n\nTITLE: Listing CloudWatch Metrics in C#\nDESCRIPTION: Method for listing CloudWatch metrics. This is implemented in the CloudWatchWrapper class.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/CloudWatch/README.md#2025-04-09_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\nListMetrics\n```\n\n----------------------------------------\n\nTITLE: Running the Resilient Web Service Example with Python\nDESCRIPTION: This command runs the entire interactive scenario that demonstrates building and managing a resilient web service using AWS SDK for Python.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/cross_service/resilient_service/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython runner.py --action all\n```\n\n----------------------------------------\n\nTITLE: List Prepend Function in CMake\nDESCRIPTION: Helper function that prepends a prefix to each element in a list, providing functionality similar to list(TRANSFORM ... PREPEND ...) for CMake versions below 3.10.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/cognito_flutter_mobile_app/linux/flutter/CMakeLists.txt#2025-04-09_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Creating an IAM User and Assuming a Role in C++\nDESCRIPTION: Complete scenario demonstrating how to create an IAM user and assume a role to access S3 resources using temporary credentials.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/iam/README.md#2025-04-09_snippet_25\n\nLANGUAGE: C++\nCODE:\n```\n// From iam_create_user_assume_role_scenario.cpp\n```\n\n----------------------------------------\n\nTITLE: Describing EC2 Instance Types\nDESCRIPTION: Shows how to retrieve information about available EC2 instance types. This helps in choosing the appropriate instance type based on computing, memory, and storage requirements.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/EC2/README.md#2025-04-09_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\n// DescribeInstanceTypes\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for AWS SDK Go Examples\nDESCRIPTION: This snippet shows how to run unit tests for the AWS SDK Go examples. It includes commands for running tests with and without verbose output.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/rds/README.md#2025-04-09_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ngo test\n```\n\nLANGUAGE: shell\nCODE:\n```\ngo test -test.v\n```\n\n----------------------------------------\n\nTITLE: Deleting a Schedule with EventBridge Scheduler in C#\nDESCRIPTION: This snippet demonstrates how to delete a schedule using the AWS SDK for .NET with Amazon EventBridge Scheduler. It includes error handling and returns a boolean indicating success or failure.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/EventBridge Scheduler/README.md#2025-04-09_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic async Task<bool> DeleteSchedule(string name, string groupName)\n{\n    var request = new DeleteScheduleRequest\n    {\n        Name = name,\n        GroupName = groupName\n    };\n\n    try\n    {\n        await _schedulerClient.DeleteScheduleAsync(request);\n        return true;\n    }\n    catch (Amazon.Scheduler.Model.ResourceNotFoundException ex)\n    {\n        Console.WriteLine($\"Couldn't delete schedule {name}. {ex.Message}\");\n    }\n\n    return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Tests Subdirectory Conditionally\nDESCRIPTION: Conditionally adds the tests subdirectory to the build if BUILD_TESTS is enabled. This allows for unit testing of the example code.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/rekognition/CMakeLists.txt#2025-04-09_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif (BUILD_TESTS)\n    add_subdirectory(tests)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for AWS Auto Scaling Examples with C++ SDK\nDESCRIPTION: Complete CMake configuration file that sets up a project for building AWS Auto Scaling examples. It handles dependencies on the AWS SDK for C++, configures platform-specific settings for Windows builds, and creates executable targets for each example file in the directory.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/autoscaling/CMakeLists.txt#2025-04-09_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\n\n# Set the minimum required version of CMake for this project.\ncmake_minimum_required(VERSION 3.13)\n\nset(SERVICE_NAME auto_scaling)\nset(SERVICE_COMPONENTS autoscaling ec2 monitoring)\n\n# Set this project's name.\nproject(\"${SERVICE_NAME}-examples\")\n\n# Build shared libraries by default.\nset(BUILD_SHARED_LIBS ON)\n\n# Use the MSVC variable to determine if this is a Windows build.\nset(WINDOWS_BUILD ${MSVC})\n\n# Set the location of where Windows can find the installed libraries of the SDK.\nif (WINDOWS_BUILD)\n    string(REPLACE \";\" \"/aws-cpp-sdk-all;\" SYSTEM_MODULE_PATH \"${CMAKE_SYSTEM_PREFIX_PATH}/aws-cpp-sdk-all\")\n    list(APPEND CMAKE_PREFIX_PATH ${SYSTEM_MODULE_PATH})\nendif ()\n\n# Set the C++ standard to use to build this target.\nset(CMAKE_CXX_STANDARD 11)\n\n# Enable CTest for testing these code examples.\nif(BUILD_TESTS)\n    include(CTest)\nendif()\n\n# Find the AWS SDK for C++ package.\nfind_package(AWSSDK REQUIRED COMPONENTS ${SERVICE_COMPONENTS})\n\nif (WINDOWS_BUILD AND AWSSDK_INSTALL_AS_SHARED_LIBS)\n    # Copy relevant AWS SDK for C++ libraries into the current binary directory for running and debugging.\n\n    # set(BIN_SUB_DIR \"/Debug\") # If you are building from the command line, you may need to uncomment this\n    # and set the proper subdirectory to the executables' location.\n\n    AWSSDK_CPY_DYN_LIBS(SERVICE_COMPONENTS \"\" ${CMAKE_CURRENT_BINARY_DIR}${BIN_SUB_DIR})\nendif ()\n\n# AWSDOC_SOURCE can be defined in the command line to limit the files in a build. For example,\n# you can limit files to one action.\nif(NOT DEFINED AWSDOC_SOURCE)\n    file(GLOB AWSDOC_SOURCE\n        \"*.cpp\"\n    )\nendif()\n\nforeach(file ${AWSDOC_SOURCE})\n    get_filename_component(EXAMPLE ${file} NAME_WE)\n\n    # Build the code example executables.\n    set(EXAMPLE_EXE run_${EXAMPLE})\n\n    add_executable(${EXAMPLE_EXE} ${file})\n\n    target_link_libraries(${EXAMPLE_EXE} ${AWSSDK_LINK_LIBRARIES}\n            ${AWSSDK_PLATFORM_DEPS})\n\nendforeach()\n\n\nif(BUILD_TESTS)\n    add_subdirectory(tests)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building Hello Rekognition Example with CMake\nDESCRIPTION: CMakeLists.txt file configuration for the Hello Rekognition example which demonstrates the ListCollections action.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/rekognition/README.md#2025-04-09_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nL4\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Email Template for Weekly Coupons Newsletter\nDESCRIPTION: This HTML template is designed for sending weekly coupon newsletters via email. It includes responsive styling and uses Mustache-style template syntax ({{#coupons}}{{details}}{{/coupons}}) to dynamically populate coupon details when processed by Amazon SES v2 SendEmail API.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/sesv2_weekly_mailer/content/42_coupon_newsletter_html.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Weekly Coupons Newsletter</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            max-width: 600px;\n            margin: 0 auto;\n            padding: 20px;\n        }\n        h1 {\n            color: #333;\n        }\n        ul {\n            list-style-type: none;\n            padding: 0;\n        }\n        li {\n            background-color: #f5f5f5;\n            padding: 10px;\n            margin-bottom: 10px;\n            border-radius: 5px;\n        }\n    </style>\n</head>\n<body>\n    <h1>Weekly Coupons Newsletter</h1>\n    <p>Check out this week's hot deals and exclusive coupons!</p>\n    <ul>\n        {{#coupons}}\n        <li>{{details}}</li>\n        {{/coupons}}\n    </ul>\n    <p>\n        Hurry, these offers won't last long! Visit our website or your nearest store to take advantage of these amazing deals.\n    </p>\n    <p>\n        Happy shopping!<br>\n        The Weekly Coupons Team\n    </p>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Translate Text Lambda Input Schema\nDESCRIPTION: JSON schema showing required input format for the TranslateText Lambda function\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/applications/feedback_sentiment_analyzer/SPECIFICATION.md#2025-04-09_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"source_language_code\": \"fr-FR\",\n  \"region\": \"us-east-1\",\n  \"extracted_text\": \"CET HÔTEL ÉTAIT SUPER\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build Environment for AWS SDK C++ EC2 Examples\nDESCRIPTION: This CMake configuration sets up the build environment for Amazon EC2 service examples. It defines project settings, handles platform-specific configurations, finds the AWS SDK for C++ dependencies, and creates executable targets for each example file in the directory. The configuration supports both Windows and Linux builds and includes conditional logic for handling shared libraries on Windows.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/ec2/CMakeLists.txt#2025-04-09_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\n\n# Set the minimum required version of CMake for this project.\ncmake_minimum_required(VERSION 3.13)\n\nset(SERVICE_NAME ec2)\nset(SERVICE_COMPONENTS ec2)\n\n# Set this project's name.\nproject(\"${SERVICE_NAME}-examples\")\n\n# Set the C++ standard to use to build this target.\nset(CMAKE_CXX_STANDARD 11)\n\n# Use the MSVC variable to determine if this is a Windows build.\nset(WINDOWS_BUILD ${MSVC})\n\n# Set the location for Windows to find the installed libraries of the SDK.\nif (WINDOWS_BUILD)\n    string(REPLACE \";\" \"/aws-cpp-sdk-all;\" SYSTEM_MODULE_PATH \"${CMAKE_SYSTEM_PREFIX_PATH}/aws-cpp-sdk-all\")\n    list(APPEND CMAKE_PREFIX_PATH ${SYSTEM_MODULE_PATH})\nendif ()\n\n# Find the AWS SDK for C++ package.\nfind_package(AWSSDK REQUIRED COMPONENTS ${SERVICE_COMPONENTS})\n\nif (WINDOWS_BUILD AND AWSSDK_INSTALL_AS_SHARED_LIBS)\n    # Copy relevant AWS SDK for C++ libraries into the current binary directory for running and debugging.\n\n    # set(BIN_SUB_DIR \"/Debug\") # If you are building from the command line, you may need to uncomment this\n    # and set the proper subdirectory to the executable's location.\n\n    AWSSDK_CPY_DYN_LIBS(SERVICE_COMPONENTS \"\" ${CMAKE_CURRENT_BINARY_DIR}${BIN_SUB_DIR})\nendif ()\n\n# AWSDOC_SOURCE can be defined in the command line to limit the files in a build. For example,\n# you can limit files to one action.\nif (NOT DEFINED AWSDOC_SOURCE)\n    file(GLOB AWSDOC_SOURCE\n            \"*.cpp\"\n    )\nendif ()\n\nforeach (file ${AWSDOC_SOURCE})\n    get_filename_component(EXAMPLE ${file} NAME_WE)\n\n    # Build the code example executables.\n    set(EXAMPLE_EXE run_${EXAMPLE})\n\n    add_executable(${EXAMPLE_EXE} ${file})\n\n    target_link_libraries(${EXAMPLE_EXE} ${AWSSDK_LINK_LIBRARIES}\n            ${AWSSDK_PLATFORM_DEPS})\nendforeach ()\n\nif (BUILD_TESTS)\n    add_subdirectory(tests)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Running AWS KMS ReEncryptData Example in Go\nDESCRIPTION: Command to run the ReEncryptData example which re-encrypts text using a new AWS KMS key. Requires a key ID and the data to re-encrypt.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/kms/README.md#2025-04-09_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ngo run ReEncryptData.go -k KEY-ID -d DATA\n```\n\n----------------------------------------\n\nTITLE: Retrieving AWS Glue Resource Information in Rust\nDESCRIPTION: These code snippets demonstrate how to retrieve information about various AWS Glue resources using the AWS SDK for Rust. They include operations for getting details about crawlers, databases, job runs, and tables.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/glue/README.md#2025-04-09_snippet_4\n\nLANGUAGE: Rust\nCODE:\n```\n- [GetCrawler](src/prepare.rs#L118)\n- [GetDatabase](src/prepare.rs#L148)\n- [GetJobRun](src/run.rs#L70)\n- [GetTables](src/prepare.rs#L163)\n```\n\n----------------------------------------\n\nTITLE: Publishing SMS Text Messages with Amazon SNS using .NET\nDESCRIPTION: This code example shows how to publish SMS text messages using Amazon SNS. The code is from a file named SNSMessage.cs located in the SNSMessageExample project.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/SNS/README.md#2025-04-09_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nSNSMessage\n```\n\n----------------------------------------\n\nTITLE: Running IAM User and Role Creation Scenario in Python\nDESCRIPTION: Command to run a scenario that demonstrates creating a user with no permissions, creating a role with S3 bucket listing permissions, and assuming that role.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/iam/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython scenario_create_user_assume_role.py\n```\n\n----------------------------------------\n\nTITLE: Implementing Spring Boot Application and RESTful API in Kotlin\nDESCRIPTION: This code snippet defines a Spring Boot application with RESTful API endpoints for managing work items. It includes functionality for adding new items, retrieving items, archiving items, and generating reports. The code uses coroutines for asynchronous operations and interacts with a WorkItemRepository for data persistence.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/serverless_rds/README.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.example.demo\n\nimport kotlinx.coroutines.runBlocking\nimport org.springframework.boot.autoconfigure.SpringBootApplication\nimport org.springframework.boot.runApplication\nimport org.springframework.http.HttpStatus\nimport org.springframework.web.bind.annotation.CrossOrigin\nimport org.springframework.web.bind.annotation.GetMapping\nimport org.springframework.web.bind.annotation.PathVariable\nimport org.springframework.web.bind.annotation.PostMapping\nimport org.springframework.web.bind.annotation.PutMapping\nimport org.springframework.web.bind.annotation.RequestBody\nimport org.springframework.web.bind.annotation.RequestParam\nimport org.springframework.web.bind.annotation.ResponseStatus\nimport org.springframework.web.bind.annotation.RestController\nimport java.io.IOException\n\n@SpringBootApplication\nopen class DemoApplication\n\nfun main(args: Array<String>) {\n    runApplication<DemoApplication>(*args)\n}\n\n@CrossOrigin(origins = [\"*\"])\n@RestController\nclass MessageResource {\n\n    // Add a new item.\n    @PostMapping(\"api/items\")\n    fun addItems(@RequestBody payLoad: Map<String, Any>): String = runBlocking {\n        val wi = WorkItemRepository()\n        val nameVal = \"user\"\n        val guideVal = payLoad.get(\"guide\").toString()\n        val descriptionVal = payLoad.get(\"description\").toString()\n        val statusVal = payLoad.get(\"status\").toString()\n\n        // Create a Work Item object.\n        val myWork = WorkItem()\n        myWork.guide = guideVal\n        myWork.description = descriptionVal\n        myWork.status = statusVal\n        myWork.name = nameVal\n        val id = wi.injestNewSubmission(myWork)\n        return@runBlocking \"Item $id added successfully!\"\n    }\n\n    // Retrieve items.\n    @GetMapping(\"api/items\")\n    fun getItems(@RequestParam(required = false) archived: String?): MutableList<WorkItem> = runBlocking {\n        val wi = WorkItemRepository()\n        val list: MutableList<WorkItem>\n        if (archived != null) {\n            list = wi.getItemsDataSQL(archived)\n        } else {\n            list = wi.getItemsDataSQL(\"\")\n        }\n        return@runBlocking list\n    }\n\n    // Flip an item from Active to Archive.\n    @PutMapping(\"api/items/{id}:archive\")\n    fun modUser(@PathVariable id: String): String = runBlocking {\n        val wi = WorkItemRepository()\n        wi.flipItemArchive(id)\n        return@runBlocking id\n    }\n\n    @PostMapping(\"api/items:report\")\n    @ResponseStatus(value = HttpStatus.NO_CONTENT)\n    fun sendReport(@RequestBody body: Map<String, String>) = runBlocking {\n        val wi = WorkItemRepository()\n        val email = body.get(\"email\")\n        val sendMsg = SendMessage()\n        val xml = wi.getItemsDataSQLReport(\"0\")\n        try {\n            if (email != null) {\n                sendMsg.send(email, xml)\n            }\n        } catch (e: IOException) {\n            e.stackTrace\n        }\n        return@runBlocking\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for AWS Systems Manager Examples in Python\nDESCRIPTION: Installs the necessary Python packages for running the AWS Systems Manager examples. This should be executed in a virtual environment.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/ssm/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Running IAM Account Management Example in Python\nDESCRIPTION: Command to run an example that demonstrates account management, including managing account aliases, generating credential reports, and getting account usage summaries.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/iam/README.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npython account_wrapper.py\n```\n\n----------------------------------------\n\nTITLE: Creating a SageMaker Pipeline in Java\nDESCRIPTION: This code snippet shows how to create a SageMaker pipeline using the AWS SDK for Java 2.x. It's part of a larger workflow for managing SageMaker pipelines and geospatial jobs.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/sagemaker/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nCreatePipeline\n```\n\n----------------------------------------\n\nTITLE: Running Hello Bedrock Runtime Example\nDESCRIPTION: Command to execute the getting started example for Amazon Bedrock Runtime.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/bedrock-runtime/README.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython hello/hello_bedrock_runtime_invoke.py\n```\n\n----------------------------------------\n\nTITLE: Retrieving CloudWatch Metric Data in Kotlin\nDESCRIPTION: This code snippet shows how to retrieve metric data from CloudWatch using the AWS SDK for Kotlin. It's part of a larger CloudWatch scenario that demonstrates various CloudWatch operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/cloudwatch/README.md#2025-04-09_snippet_10\n\nLANGUAGE: Kotlin\nCODE:\n```\nGetMetricData\n```\n\n----------------------------------------\n\nTITLE: Setting Desired Capacity for Auto Scaling Group in .NET\nDESCRIPTION: This snippet references the SetDesiredCapacity method which updates the desired capacity of an Auto Scaling group, potentially launching or terminating instances.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv4/AutoScaling/README.md#2025-04-09_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nSetDesiredCapacity(Actions/AutoScalingWrapper.cs#L249)\n```\n\n----------------------------------------\n\nTITLE: Creating S3 Buckets in PHP\nDESCRIPTION: Code that demonstrates how to create a new S3 bucket in AWS using the SDK for PHP. This is a fundamental operation for working with S3.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/php/example_code/s3/README.md#2025-04-09_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nCreateBucket\n```\n\n----------------------------------------\n\nTITLE: Deleting S3 Batch Job Tags in Java\nDESCRIPTION: Removes tags from an S3 batch job using DeleteJobTagging API\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/s3/src/main/java/com/example/s3/batch/README.md#2025-04-09_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nS3BatchActions.java#L238\n```\n\n----------------------------------------\n\nTITLE: MediaConvert Endpoint URI Helper in C++\nDESCRIPTION: Utility function for retrieving and caching MediaConvert endpoints, which helps avoid hitting the low request limit for DescribeEndpoints. Located in the utils.cpp file at line 30.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/mediaconvert/README.md#2025-04-09_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\ngetEndpointUriHelper\n```\n\n----------------------------------------\n\nTITLE: Running RDS Scenario Examples using Go\nDESCRIPTION: Command to run RDS scenario examples using the cmd runner tool. Shows how to get help and list available scenarios.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/gov2/rds/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo run ./cmd -h\n```\n\n----------------------------------------\n\nTITLE: Running Get Started with State Machines Example in Python\nDESCRIPTION: Executes the Get Started with State Machines example script, which demonstrates creating and managing state machines, activities, and executions.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/stepfunctions/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython get_started_state_machines.py\n```\n\n----------------------------------------\n\nTITLE: Retrieving Document Analysis Results with Amazon Textract in SAP ABAP\nDESCRIPTION: Illustrates the use of the GetDocumentAnalysis function to retrieve the results of a document analysis job. This function is part of the zcl_aws1_tex_actions class.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/sap-abap/services/textract/README.md#2025-04-09_snippet_2\n\nLANGUAGE: ABAP\nCODE:\n```\nzcl_aws1_tex_actions.clas.abap#L197\n```\n\n----------------------------------------\n\nTITLE: Launching EC2 Instances\nDESCRIPTION: Shows how to launch new EC2 instances with specified configurations. This creates and starts virtual servers based on parameters like AMI, instance type, and security groups.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/EC2/README.md#2025-04-09_snippet_22\n\nLANGUAGE: C#\nCODE:\n```\n// RunInstances\n```\n\n----------------------------------------\n\nTITLE: Retrieving DynamoDB Item in Go\nDESCRIPTION: Retrieves a specific movie item from a DynamoDB table using movie name and year. Requires table name, movie name, and year as input parameters.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/dynamodb/README.md#2025-04-09_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ngo run GetItem.go -t TABLE -n NAME -y YEAR\n```\n\n----------------------------------------\n\nTITLE: Implementing Amazon S3 Operations with AWS SDK for Kotlin\nDESCRIPTION: A Kotlin class that interacts with Amazon S3 to perform operations like listing bucket objects, retrieving object bytes, and uploading objects. It includes methods for XML processing and conversion for data representation. The class uses the AWS SDK for Kotlin and targets the us-west-2 region.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/creating_photo_analyzer_app/README.md#2025-04-09_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.aws.photo\n\nimport aws.sdk.kotlin.services.s3.S3Client\nimport aws.sdk.kotlin.services.s3.model.*\nimport aws.smithy.kotlin.runtime.content.ByteStream\nimport aws.smithy.kotlin.runtime.content.toByteArray\nimport org.springframework.stereotype.Component\nimport org.w3c.dom.Document\nimport java.io.StringWriter\nimport javax.xml.parsers.DocumentBuilderFactory\nimport javax.xml.parsers.ParserConfigurationException\nimport javax.xml.transform.TransformerException\nimport javax.xml.transform.TransformerFactory\nimport javax.xml.transform.dom.DOMSource\nimport javax.xml.transform.stream.StreamResult\nimport kotlin.system.exitProcess\n\n@Component\nclass S3Service {\n\nvar myBytes: ByteArray? = null\n\n// Returns the names of all images in the given bucket.\nsuspend fun listBucketObjects(bucketName: String?): List<*>? {\n\n    var keyName: String\n    val keys  = mutableListOf<String>()\n\n    val listObjects = ListObjectsRequest {\n        bucket = bucketName\n    }\n\n    S3Client { region = \"us-west-2\" }.use { s3Client ->\n        val response = s3Client.listObjects(listObjects)\n        response.contents?.forEach { myObject ->\n               keyName = myObject.key.toString()\n               keys.add(keyName)\n        }\n        return keys\n    }\n}\n\n// Returns the names of all images and data within an XML document.\nsuspend fun ListAllObjects(bucketName: String?): String? {\n\n    var sizeLg: Long\n    var dateIn: aws.smithy.kotlin.runtime.time.Instant?\n    val bucketItems = mutableListOf<BucketItem>()\n\n    val listObjects = ListObjectsRequest {\n        bucket = bucketName\n     }\n\n    S3Client { region = \"us-west-2\" }.use { s3Client ->\n        val res = s3Client.listObjects(listObjects)\n        res.contents?.forEach { myObject ->\n            val myItem = BucketItem()\n            myItem.key = myObject.key\n            myItem.owner = myObject.owner?.displayName.toString()\n            sizeLg = (myObject.size / 1024)\n            myItem.size = (sizeLg.toString())\n            dateIn = myObject.lastModified\n            myItem.date = dateIn.toString()\n\n            // Push the items to the list.\n            bucketItems.add(myItem)\n        }\n        return convertToString(toXml(bucketItems))\n    }\n  }\n\n // Places an image into an Amazon S3 bucket.\n suspend fun putObject(data: ByteArray, bucketName: String?, objectKey: String?): String? {\n    val request =  PutObjectRequest{\n            bucket = bucketName\n            key = objectKey\n            body = ByteStream.fromBytes(data)\n     }\n\n    S3Client { region = \"us-west-2\" }.use { s3Client ->\n        val response = s3Client.putObject(request)\n        return response.eTag\n    }\n  }\n\n // Get the byte[] from this Amazon S3 object.\n suspend fun getObjectBytes(bucketName: String?, keyName: String?): ByteArray? {\n       val objectRequest = GetObjectRequest {\n            key = keyName\n            bucket = bucketName\n        }\n\n       S3Client { region = \"us-west-2\" }.use { s3Client ->\n         s3Client.getObject(objectRequest) { resp ->\n            myBytes = resp.body?.toByteArray()\n         }\n        return myBytes\n       }\n }\n\n // Convert items into XML to pass back to the view.\n private fun toXml(itemList: List<BucketItem>): Document {\n    try {\n        val factory = DocumentBuilderFactory.newInstance()\n        val builder = factory.newDocumentBuilder()\n        val doc = builder.newDocument()\n\n        // Start building the XML.\n        val root = doc.createElement(\"Items\")\n        doc.appendChild(root)\n\n        // Get the elements from the collection.\n        val custCount = itemList.size\n\n        // Iterate through the collection.\n        for (index in 0 until custCount) {\n\n            // Get the WorkItem object from the collection.\n            val myItem = itemList[index]\n            val item = doc.createElement(\"Item\")\n            root.appendChild(item)\n\n            // Set Key.\n            val id = doc.createElement(\"Key\")\n            id.appendChild(doc.createTextNode(myItem.key))\n            item.appendChild(id)\n\n            // Set Owner.\n            val name = doc.createElement(\"Owner\")\n            name.appendChild(doc.createTextNode(myItem.owner))\n            item.appendChild(name)\n\n            // Set Date.\n            val date = doc.createElement(\"Date\")\n            date.appendChild(doc.createTextNode(myItem.date))\n            item.appendChild(date)\n\n            // Set Size.\n            val desc = doc.createElement(\"Size\")\n            desc.appendChild(doc.createTextNode(myItem.size))\n            item.appendChild(desc)\n        }\n        return doc\n    } catch (e: ParserConfigurationException) {\n        e.printStackTrace()\n        exitProcess(0)\n    }\n }\n\nprivate fun convertToString(xml: Document): String {\n    try {\n        val transformer = TransformerFactory.newInstance().newTransformer()\n        val result = StreamResult(StringWriter())\n        val source = DOMSource(xml)\n        transformer.transform(source, result)\n        return result.writer.toString()\n\n    } catch (ex: TransformerException) {\n        ex.printStackTrace()\n        exitProcess(0)\n    }\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Amazon S3 Operations with AWS SDK for Kotlin\nDESCRIPTION: A Kotlin class that interacts with Amazon S3 to perform operations like listing bucket objects, retrieving object bytes, and uploading objects. It includes methods for XML processing and conversion for data representation. The class uses the AWS SDK for Kotlin and targets the us-west-2 region.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/creating_photo_analyzer_app/README.md#2025-04-09_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.aws.photo\n\nimport aws.sdk.kotlin.services.s3.S3Client\nimport aws.sdk.kotlin.services.s3.model.*\nimport aws.smithy.kotlin.runtime.content.ByteStream\nimport aws.smithy.kotlin.runtime.content.toByteArray\nimport org.springframework.stereotype.Component\nimport org.w3c.dom.Document\nimport java.io.StringWriter\nimport javax.xml.parsers.DocumentBuilderFactory\nimport javax.xml.parsers.ParserConfigurationException\nimport javax.xml.transform.TransformerException\nimport javax.xml.transform.TransformerFactory\nimport javax.xml.transform.dom.DOMSource\nimport javax.xml.transform.stream.StreamResult\nimport kotlin.system.exitProcess\n\n@Component\nclass S3Service {\n\nvar myBytes: ByteArray? = null\n\n// Returns the names of all images in the given bucket.\nsuspend fun listBucketObjects(bucketName: String?): List<*>? {\n\n    var keyName: String\n    val keys  = mutableListOf<String>()\n\n    val listObjects = ListObjectsRequest {\n        bucket = bucketName\n    }\n\n    S3Client { region = \"us-west-2\" }.use { s3Client ->\n        val response = s3Client.listObjects(listObjects)\n        response.contents?.forEach { myObject ->\n               keyName = myObject.key.toString()\n               keys.add(keyName)\n        }\n        return keys\n    }\n}\n\n// Returns the names of all images and data within an XML document.\nsuspend fun ListAllObjects(bucketName: String?): String? {\n\n    var sizeLg: Long\n    var dateIn: aws.smithy.kotlin.runtime.time.Instant?\n    val bucketItems = mutableListOf<BucketItem>()\n\n    val listObjects = ListObjectsRequest {\n        bucket = bucketName\n     }\n\n    S3Client { region = \"us-west-2\" }.use { s3Client ->\n        val res = s3Client.listObjects(listObjects)\n        res.contents?.forEach { myObject ->\n            val myItem = BucketItem()\n            myItem.key = myObject.key\n            myItem.owner = myObject.owner?.displayName.toString()\n            sizeLg = (myObject.size / 1024)\n            myItem.size = (sizeLg.toString())\n            dateIn = myObject.lastModified\n            myItem.date = dateIn.toString()\n\n            // Push the items to the list.\n            bucketItems.add(myItem)\n        }\n        return convertToString(toXml(bucketItems))\n    }\n  }\n\n // Places an image into an Amazon S3 bucket.\n suspend fun putObject(data: ByteArray, bucketName: String?, objectKey: String?): String? {\n    val request =  PutObjectRequest{\n            bucket = bucketName\n            key = objectKey\n            body = ByteStream.fromBytes(data)\n     }\n\n    S3Client { region = \"us-west-2\" }.use { s3Client ->\n        val response = s3Client.putObject(request)\n        return response.eTag\n    }\n  }\n\n // Get the byte[] from this Amazon S3 object.\n suspend fun getObjectBytes(bucketName: String?, keyName: String?): ByteArray? {\n       val objectRequest = GetObjectRequest {\n            key = keyName\n            bucket = bucketName\n        }\n\n       S3Client { region = \"us-west-2\" }.use { s3Client ->\n         s3Client.getObject(objectRequest) { resp ->\n            myBytes = resp.body?.toByteArray()\n         }\n        return myBytes\n       }\n }\n\n // Convert items into XML to pass back to the view.\n private fun toXml(itemList: List<BucketItem>): Document {\n    try {\n        val factory = DocumentBuilderFactory.newInstance()\n        val builder = factory.newDocumentBuilder()\n        val doc = builder.newDocument()\n\n        // Start building the XML.\n        val root = doc.createElement(\"Items\")\n        doc.appendChild(root)\n\n        // Get the elements from the collection.\n        val custCount = itemList.size\n\n        // Iterate through the collection.\n        for (index in 0 until custCount) {\n\n            // Get the WorkItem object from the collection.\n            val myItem = itemList[index]\n            val item = doc.createElement(\"Item\")\n            root.appendChild(item)\n\n            // Set Key.\n            val id = doc.createElement(\"Key\")\n            id.appendChild(doc.createTextNode(myItem.key))\n            item.appendChild(id)\n\n            // Set Owner.\n            val name = doc.createElement(\"Owner\")\n            name.appendChild(doc.createTextNode(myItem.owner))\n            item.appendChild(name)\n\n            // Set Date.\n            val date = doc.createElement(\"Date\")\n            date.appendChild(doc.createTextNode(myItem.date))\n            item.appendChild(date)\n\n            // Set Size.\n            val desc = doc.createElement(\"Size\")\n            desc.appendChild(doc.createTextNode(myItem.size))\n            item.appendChild(desc)\n        }\n        return doc\n    } catch (e: ParserConfigurationException) {\n        e.printStackTrace()\n        exitProcess(0)\n    }\n }\n\nprivate fun convertToString(xml: Document): String {\n    try {\n        val transformer = TransformerFactory.newInstance().newTransformer()\n        val result = StreamResult(StringWriter())\n        val source = DOMSource(xml)\n        transformer.transform(source, result)\n        return result.writer.toString()\n\n    } catch (ex: TransformerException) {\n        ex.printStackTrace()\n        exitProcess(0)\n    }\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling C++ Lambda Function Usage\nDESCRIPTION: Preprocessor directive to enable the use of C++ Lambda functions in the scenario code.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/lambda/cpp_lambda/README.md#2025-04-09_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\n#define USE_CPP_LAMBDA_FUNCTION 1\n```\n\n----------------------------------------\n\nTITLE: Creating AWS Glue Crawler\nDESCRIPTION: Code example showing how to create a new AWS Glue crawler that can scan data sources and generate metadata tables in the AWS Glue Data Catalog.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/glue/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nsrc/main/kotlin/com/kotlin/glue/CreateCrawler.kt#L48\n```\n\n----------------------------------------\n\nTITLE: Creating a Grant for a KMS Key with PHP\nDESCRIPTION: This example demonstrates how to create a grant for a KMS key using the AWS SDK for PHP. Grants are a way to delegate permissions to use KMS keys.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/php/example_code/kms/README.md#2025-04-09_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nKmsService.php#L164\n```\n\n----------------------------------------\n\nTITLE: Metadata Mapping for EventBridge Scheduler Operations\nDESCRIPTION: Table mapping EventBridge Scheduler operations to their corresponding metadata files and keys, used for tracking and documenting the various operations in the scenario.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/eventbridge_scheduler/SPECIFICATION.md#2025-04-09_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| action / scenario                | metadata file           | metadata key                      |\n|----------------------------------|-------------------------|-----------------------------------|\n| `ListSchedules`                  | scheduler_metadata.yaml | scheduler_hello                   |\n| `CreateSchedule`                 | scheduler_metadata.yaml | scheduler_CreateSchedule          |\n| `CreateScheduleGroup`            | scheduler_metadata.yaml | scheduler_CreateScheduleGroup     |\n| `DeleteSchedule`                 | scheduler_metadata.yaml | scheduler_DeleteSchedule          |\n| `DeleteScheduleGroup`            | scheduler_metadata.yaml | scheduler_DeleteScheduleGroup     |\n| `EventBridge Scheduler Scenario` | scheduler_metadata.yaml | scheduler_ScheduledEventsScenario |\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for AWS Glue C++ Project\nDESCRIPTION: This CMake script sets up a C++ project for AWS Glue using the AWS SDK. It defines the project name, required AWS service components, C++ standard, and handles platform-specific configurations for Windows builds. The script also sets up the necessary linking for the AWS SDK libraries.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/glue/hello_glue/CMakeLists.txt#2025-04-09_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Set the minimum required version of CMake for this project.\ncmake_minimum_required(VERSION 3.13)\n\n# Set the AWS service components used by this project.\nset(SERVICE_COMPONENTS glue)\n\n# Set this project's name.\nproject(\"hello_glue\")\n\n# Set the C++ standard to use to build this target.\n# At least C++ 11 is required for the AWS SDK for C++.\nset(CMAKE_CXX_STANDARD 11)\n\n# Use the MSVC variable to determine if this is a Windows build.\nset(WINDOWS_BUILD ${MSVC})\n\nif (WINDOWS_BUILD) # Set the location where CMake can find the installed libraries for the AWS SDK.\n    string(REPLACE \";\" \"/aws-cpp-sdk-all;\" SYSTEM_MODULE_PATH \"${CMAKE_SYSTEM_PREFIX_PATH}/aws-cpp-sdk-all\")\n    list(APPEND CMAKE_PREFIX_PATH ${SYSTEM_MODULE_PATH})\nendif ()\n\n# Find the AWS SDK for C++ package.\nfind_package(AWSSDK REQUIRED COMPONENTS ${SERVICE_COMPONENTS})\n\nif (WINDOWS_BUILD AND AWSSDK_INSTALL_AS_SHARED_LIBS)\n     # Copy relevant AWS SDK for C++ libraries into the current binary directory for running and debugging.\n\n     # set(BIN_SUB_DIR \"/Debug\") # if you are building from the command line you may need to uncomment this \n                                    # and set the proper subdirectory to the executables' location.\n\n     AWSSDK_CPY_DYN_LIBS(SERVICE_COMPONENTS \"\" ${CMAKE_CURRENT_BINARY_DIR}${BIN_SUB_DIR})\nendif ()\n\nadd_executable(${PROJECT_NAME}\n        hello_glue.cpp)\n\ntarget_link_libraries(${PROJECT_NAME}\n        ${AWSSDK_LINK_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: Retrieving REST API Endpoint URL\nDESCRIPTION: AWS CLI command to retrieve the endpoint URL of the deployed REST API from the CloudFormation stack outputs.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/cross_service/apigateway_covid-19_tracker/README.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\naws cloudformation describe-stacks --stack-name ChaliceRestDemo \\\n--query \"Stacks[0].Outputs[?OutputKey=='EndpointURL'].OutputValue\" --output text\n```\n\n----------------------------------------\n\nTITLE: SNS Subscription Management Template\nDESCRIPTION: HTML template for managing SNS subscriptions including subscription creation, listing, and deletion functionality with Bootstrap styling.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_sns_async/README.md#2025-04-09_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html>\n<html xmlns:th=\"https://www.thymeleaf.org\" lang=\"\">\n<head>\n<meta charset=\"UTF-8\" />\n<title>Subscription</title>\n<script th:src=\"|https://code.jquery.com/jquery-1.12.4.min.js|\"></script>\n<script th:src=\"|https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js|\"></script>\n<link rel=\"stylesheet\" th:href=\"|https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css|\"/>\n```\n\n----------------------------------------\n\nTITLE: Running Scenarios with the CMD Runner in Go\nDESCRIPTION: Command to get help and a list of available scenarios that can be run with the cmd runner.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/gov2/sns/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo run ./cmd -h\n```\n\n----------------------------------------\n\nTITLE: Running the AWS KMS Basics Example in Python\nDESCRIPTION: Command to run the KMS scenario example script that demonstrates key creation, listing, enabling/disabling, and other basic KMS operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/kms/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython kms_scenario.py\n```\n\n----------------------------------------\n\nTITLE: Systems Manager SDK Scenario Program Output\nDESCRIPTION: Complete console output demonstrating the creation and management of SSM resources including maintenance windows, documents, commands, and OpsItems\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/basics/ssm/SPECIFICATION.md#2025-04-09_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n--------------------------------------------------------------------------------\nWelcome to the AWS Systems Manager SDK Getting Started scenario.\nThis Java program demonstrates how to interact with AWS Systems Manager using the AWS SDK.\nAWS Systems Manager is the operations hub for your AWS applications and resources and a secure end-to-end management solution.\nThe program's primary functionalities include creating a maintenance window, creating a document, sending a command to a document,\nlisting documents, listing commands, creating an OpsItem, modifying an OpsItem, and deleting AWS SSM resources.\nUpon completion of the program, all AWS resources are cleaned up.\nLet's get started...\nPlease hit Enter\n\n\n--------------------------------------------------------------------------------\nCreate an SSM maintenance window.\nPlease enter the maintenance window name (default is ssm-maintenance-window):\n\nThe maintenance window id is mw-0a782f69416fa2d68\n--------------------------------------------------------------------------------\nModify the maintenance window by changing the schedule\nPlease hit Enter\n\nThe SSM maintenance window was successfully updated\n--------------------------------------------------------------------------------\nCreate an SSM document that defines the actions that Systems Manager performs on your managed nodes.\nPlease enter the document name (default is ssmdocument):\n\nThe status of the SSM document is Creating\n--------------------------------------------------------------------------------\nNow we are going to run a command on an EC2 instance\nPlease hit Enter\n\nThe SSM document is active and ready to use.\nCommand ID: ac4aef03-7d60-4fba-8d71-051defea89e2\nWait 5 secs\nCommand execution successful\n--------------------------------------------------------------------------------\nLets get the time when the specific command was sent to the specific managed node\nPlease hit Enter\n\nThe time of the command invocation is 2024-04-09 14:52:50\n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\n Now we will create an SSM OpsItem.\n SSM OpsItem is a feature provided by the Systems Manager service.\n It is a type of operational data item that allows you to manage and track various operational issues,\n events, or tasks within your AWS environment.\n\n You can create OpsItems to track and manage operational issues as they arise.\n For example, you could create an OpsItem whenever your application detects a critical error\n or an anomaly in your infrastructure.\n\nPlease hit Enter\n\n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\nNow we will update SSM OpsItem oi-c1e5435471e9\nPlease hit Enter\n\nNow we will resolve the SSM OpsItem oi-c1e5435471e9\nPlease hit Enter\n\n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\nWould you like to delete the AWS Systems Manager resources? (y/n)\n\nThe AWS Systems Manager resources will not be deleted\n--------------------------------------------------------------------------------\nThis concludes the AWS Systems Manager SDK Getting Started scenario.\n--------------------------------------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Invoking Amazon Titan Image Generator foundation model with PHP\nDESCRIPTION: This code snippet shows how to invoke the Amazon Titan Image Generator foundation model using Amazon Bedrock Runtime with the AWS SDK for PHP. It formats the request with parameters specific to this image generation model.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/php/example_code/bedrock-runtime/README.md#2025-04-09_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nInvokeModel(BedrockRuntimeService.php#L133)\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for EventBridge Scheduler Examples in Python\nDESCRIPTION: Command to install the necessary dependencies for the EventBridge Scheduler examples using pip in a Python virtual environment.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/scheduler/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Running Hello RDS Example\nDESCRIPTION: Executes the basic Hello Amazon RDS example that demonstrates basic RDS operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/rds/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython hello/hello_rds.py\n```\n\n----------------------------------------\n\nTITLE: Describing OpsItems in Systems Manager with JavaScript SDK v3\nDESCRIPTION: This code snippet demonstrates how to describe OpsItems using the DescribeOpsItems operation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/ssm/README.md#2025-04-09_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n// DescribeOpsItems\n```\n\n----------------------------------------\n\nTITLE: Running Hello Bedrock Example\nDESCRIPTION: Command to run the Hello Bedrock example script that demonstrates basic Amazon Bedrock functionality.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/bedrock/README.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npython hello_bedrock.py\n```\n\n----------------------------------------\n\nTITLE: Updating an Item in DynamoDB Table with C++\nDESCRIPTION: This code snippet illustrates how to update an existing item in a DynamoDB table using the AWS SDK for C++. It modifies the attributes of the specified item.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/dynamodb/README.md#2025-04-09_snippet_14\n\nLANGUAGE: C++\nCODE:\n```\nUpdateItem\n```\n\n----------------------------------------\n\nTITLE: Creating Cognito MFA Resources with AWS CloudFormation via CLI\nDESCRIPTION: Command to create a CloudFormation stack that provisions a Cognito user pool with MFA using the AWS CLI. This uses a template file named setup.yaml.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/resources/cdk/cognito_scenario_user_pool_with_mfa/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\naws cloudformation create-stack --template-body file://setup.yaml --stack-name YOUR_STACK_NAME\n```\n\n----------------------------------------\n\nTITLE: Running Hello Amazon S3 Example\nDESCRIPTION: Command to run the basic Hello Amazon S3 example that demonstrates listing buckets.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/ruby/example_code/s3/README.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nruby hello/hello_s3.rb\n```\n\n----------------------------------------\n\nTITLE: DynamoDB Local Connection Example in Rust\nDESCRIPTION: Example demonstrating how to override endpoint URL to connect to a local development deployment of DynamoDB using the AWS SDK for Rust.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/dynamodb/README.md#2025-04-09_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n// Located in src/bin/list-tables-local.rs\n```\n\n----------------------------------------\n\nTITLE: Creating an EC2 Key Pair for SSH Access\nDESCRIPTION: Shows how to create a key pair used for secure SSH access to EC2 instances. The key pair consists of a public key stored by AWS and a private key file that the user downloads.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/EC2/README.md#2025-04-09_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n// CreateKeyPair\n```\n\n----------------------------------------\n\nTITLE: Loading S3 Encryption Example Source Files\nDESCRIPTION: Locates and groups the header and source files for the S3 encryption examples. For Windows with MSVC, it also sets up source grouping for better organization in the IDE.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/s3encryption/CMakeLists.txt#2025-04-09_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Add the code example-specific header files.\nfile(GLOB AWSDOC_S3_ENCRYPTION_HEADERS\n    \"include/awsdoc/s3-encryption/*.h\"\n)\n\n# Add the code example-specific source files.\nfile(GLOB AWSDOC_S3_ENCRYPTION_SOURCE\n    \"*.cpp\"\n)\n\n# Check whether the target system is Windows, including Win64.\nif(WIN32)\n    # Check whether the compiler is some version of Microsoft Visual C++, or another compiler simulating C++.\n    if(MSVC)\n        source_group(\"Header Files\\\\awsdoc\\\\s3-encryption\" FILES ${AWSDOC_S3_ENCRYPTION_HEADERS})\n        source_group(\"Source Files\" FILES ${AWSDOC_S3_ENCRYPTION_SOURCE})\n    endif(MSVC)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Checking CloudFormation Stack Status with AWS CLI\nDESCRIPTION: Command to check the deployment status of the CloudFormation stack that's creating the Cognito resources using the AWS CLI.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/resources/cdk/cognito_scenario_user_pool_with_mfa/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\naws cloudformation describe-stacks --stack-name YOUR_STACK_NAME\n```\n\n----------------------------------------\n\nTITLE: Running Step Functions Examples\nDESCRIPTION: Instructions for running the example code projects using dotnet CLI or IDE.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/StepFunctions/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet run\n```\n\n----------------------------------------\n\nTITLE: Running IAM User Policy Management Example in Python\nDESCRIPTION: Command to run an example that demonstrates creating users with different permissions for Amazon S3 buckets, including read-only and read-write access.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/iam/README.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython user_wrapper.py\n```\n\n----------------------------------------\n\nTITLE: Listing Event Buses with AWS SDK for .NET\nDESCRIPTION: Sample code showing how to list event buses in EventBridge using the AWS SDK for .NET. This is part of the 'Hello EventBridge' example that demonstrates basic usage of the EventBridge API.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/EventBridge/README.md#2025-04-09_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nListEventBuses\n```\n\n----------------------------------------\n\nTITLE: Running TLS Example Binary\nDESCRIPTION: Command to run the TLS configuration example binary from the Rust project root. Uses AWS KMS service to demonstrate custom TLS configuration.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/tls/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --bin tls\n```\n\n----------------------------------------\n\nTITLE: Finding AWS SDK and creating executable target\nDESCRIPTION: Locates the AWS SDK for C++ with the required EC2 component and sets up the executable target. It also handles copying dynamic libraries for Windows builds when the SDK is installed as shared libraries.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/ec2/tests/CMakeLists.txt#2025-04-09_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Find the AWS SDK for C++ package.\nfind_package(AWSSDK REQUIRED COMPONENTS ${CURRENT_TARGET_AWS_DEPENDENCIES})\n\nadd_executable(\n        ${CURRENT_TARGET}\n)\n\nif (WINDOWS_BUILD AND AWSSDK_INSTALL_AS_SHARED_LIBS)\n    # set(BIN_SUB_DIR \"/Debug\") # If you are building from the command line, you may need to uncomment this\n    # and set the proper subdirectory to the executable's location.\n    # Copy relevant AWS SDK for C++ libraries into the current binary directory for running and debugging.\n    AWSSDK_CPY_DYN_LIBS(\n            CURRENT_TARGET_AWS_DEPENDENCIES\n            \"\"\n            ${CMAKE_CURRENT_BINARY_DIR}${BIN_SUB_DIR}\n    )\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Verifying Directory Binding in Docker Container\nDESCRIPTION: Command to list contents of the bound directory in the Docker container to verify correct setup.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/lambda/cpp_lambda/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nls /cpp_lambda\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for AWS SDK DynamoDB Examples\nDESCRIPTION: Sets up the CMake project for DynamoDB examples, including minimum CMake version, project name, and required AWS SDK components.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/dynamodb/CMakeLists.txt#2025-04-09_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\n\nset(SERVICE_NAME dynamodb)\nset(SERVICE_COMPONENTS dynamodb s3)\n\nproject(\"${SERVICE_NAME}-examples\")\n\nset(CMAKE_CXX_STANDARD 11)\nset(BUILD_SHARED_LIBS ON)\n\nfind_package(AWSSDK REQUIRED COMPONENTS ${SERVICE_COMPONENTS})\n```\n\n----------------------------------------\n\nTITLE: Creating ECS Service with Kotlin SDK\nDESCRIPTION: Example showing how to create a service in Amazon ECS using the AWS SDK for Kotlin. This enables running and maintaining a specified number of instances of a task definition.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/ecs/README.md#2025-04-09_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Configuring CMake for DynamoDB C++ Application\nDESCRIPTION: This CMake configuration sets up a C++ project that uses the AWS SDK for DynamoDB. It handles platform-specific settings for both Windows and non-Windows builds, sets C++11 as the required standard, and properly links the AWS SDK libraries. It also includes special handling for shared libraries on Windows.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/dynamodb/hello_dynamodb/CMakeLists.txt#2025-04-09_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# Set the minimum required version of CMake for this project.\ncmake_minimum_required(VERSION 3.13)\n\n# Set the AWS service components used by this project.\nset(SERVICE_COMPONENTS dynamodb)\n\n# Set this project's name.\nproject(\"hello_dynamodb\")\n\n# Set the C++ standard to use to build this target.\n# At least C++ 11 is required for the AWS SDK for C++.\nset(CMAKE_CXX_STANDARD 11)\n\n# Use the MSVC variable to determine if this is a Windows build.\nset(WINDOWS_BUILD ${MSVC})\n\nif (WINDOWS_BUILD) # Set the location where CMake can find the installed libraries for the AWS SDK.\n    string(REPLACE \";\" \"/aws-cpp-sdk-all;\" SYSTEM_MODULE_PATH \"${CMAKE_SYSTEM_PREFIX_PATH}/aws-cpp-sdk-all\")\n    list(APPEND CMAKE_PREFIX_PATH ${SYSTEM_MODULE_PATH})\nendif ()\n\n# Find the AWS SDK for C++ package.\nfind_package(AWSSDK REQUIRED COMPONENTS ${SERVICE_COMPONENTS})\n\nif (WINDOWS_BUILD AND AWSSDK_INSTALL_AS_SHARED_LIBS)\n     # Copy relevant AWS SDK for C++ libraries into the current binary directory for running and debugging.\n\n     # set(BIN_SUB_DIR \"/Debug\") # if you are building from the command line you may need to uncomment this \n                                    # and set the proper subdirectory to the executables' location.\n\n     AWSSDK_CPY_DYN_LIBS(SERVICE_COMPONENTS \"\" ${CMAKE_CURRENT_BINARY_DIR}${BIN_SUB_DIR})\nendif ()\n\nadd_executable(${PROJECT_NAME}\n        hello_dynamodb.cpp)\n\ntarget_link_libraries(${PROJECT_NAME}\n        ${AWSSDK_LINK_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: Registering tests with CTest\nDESCRIPTION: Includes the GoogleTest module and registers the tests with CTest, making them discoverable and executable through CTest's test runner interface.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/ec2/tests/CMakeLists.txt#2025-04-09_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(GoogleTest)\n\ngtest_add_tests(\n        TARGET\n        ${CURRENT_TARGET}\n)\n```\n\n----------------------------------------\n\nTITLE: Decrypting Data with KMS - Ruby\nDESCRIPTION: Code example demonstrating how to decrypt data using AWS KMS with the Ruby SDK\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/ruby/example_code/kms/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\nDecrypt\n```\n\n----------------------------------------\n\nTITLE: Deleting S3 Objects in JavaScript\nDESCRIPTION: This code snippet demonstrates how to delete a single object from an S3 bucket using the DeleteObject operation in the AWS SDK for JavaScript (v3).\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/s3/README.md#2025-04-09_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n- [DeleteObject](actions/delete-object.js#L4)\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for AWS STS Examples\nDESCRIPTION: Command to install the required Python packages for the AWS STS examples using pip in a virtual environment.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/sts/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Configuring Amazon Personalize Project Settings in Java\nDESCRIPTION: Core configuration settings for the Amazon Personalize demo project including project prefix name and AWS region selection. These variables must be modified before running the application.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/create_amazon_personalize_app/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nprivate static final String PREFIX = \"your-project-name-here\";\nprivate static final Region region = Region.US_EAST_1;\n```\n\n----------------------------------------\n\nTITLE: Creating DynamoDB Table in ABAP\nDESCRIPTION: This snippet demonstrates how to create a DynamoDB table using the AWS SDK for SAP ABAP. It is part of the basic operations for working with DynamoDB.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/sap-abap/services/dyn/README.md#2025-04-09_snippet_0\n\nLANGUAGE: ABAP\nCODE:\n```\nzcl_aws1_dyn_actions.clas.abap#L75\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for Amazon SES Operations in Go\nDESCRIPTION: This snippet demonstrates how to run unit tests for the Amazon SES operations. It shows both the basic test command and the verbose version for additional log messages.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/ses/README.md#2025-04-09_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ngo test\n```\n\nLANGUAGE: sh\nCODE:\n```\ngo test -test.v\n```\n\n----------------------------------------\n\nTITLE: Python Package Requirements for AWS SDK Examples\nDESCRIPTION: This requirements.txt file specifies the exact package versions needed to run AWS SDK examples in Python. It includes boto3 and botocore for AWS API operations, testing frameworks like pytest, and utility libraries like python-dateutil and urllib3.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/bedrock/requirements.txt#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nboto3==1.34.144\nbotocore==1.34.144\ncolorama==0.4.6\niniconfig==2.0.0\njmespath==1.0.1\npackaging==24.0\npluggy==1.5.0\npytest==8.2.1\npython-dateutil==2.9.0.post0\ns3transfer==0.10.1\nsix==1.16.0\nurllib3==2.2.1\n```\n\n----------------------------------------\n\nTITLE: Running Bedrock Wrapper Example\nDESCRIPTION: Command to execute the main Bedrock wrapper example script from within the example_code folder.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/bedrock/README.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython bedrock_wrapper.py\n```\n\n----------------------------------------\n\nTITLE: Running Scenario Scripts\nDESCRIPTION: Command to execute scenario files from the scenarios directory using Node.js. This is used for running most scenario examples.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/rekognition/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnode ./scenarios/<fileName>\n```\n\n----------------------------------------\n\nTITLE: Deploying CDK Stacks for PAM Application\nDESCRIPTION: Commands for bootstrapping the AWS environment (one-time setup) and deploying each of the three PAM application stacks in order.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/applications/photo-asset-manager/cdk/README.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ cdk bootstrap # Only required once for the lifetime of your account.\n$ cdk deploy {STACK_NAME} # Deploy each of the three preceding stacks in order.\n```\n\n----------------------------------------\n\nTITLE: Delete Amazon SQS Queue using Ruby\nDESCRIPTION: Example code showing how to delete an existing SQS queue using the AWS SDK for Ruby.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/ruby/example_code/sqs/README.md#2025-04-09_snippet_2\n\nLANGUAGE: Ruby\nCODE:\n```\ndelete_queue.rb#L7\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Data for Movies Example in AWS SDK\nDESCRIPTION: A JSON file containing sample movie data used in AWS SDK examples that work with a common movies data model.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/resources/sample_files/README.md#2025-04-09_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\nmovies.json\n```\n\n----------------------------------------\n\nTITLE: Adding Targets to a Rule in EventBridge using AWS SDK for .NET\nDESCRIPTION: Method to add targets to an EventBridge rule. Specifies the resources that should receive events when the rule is triggered.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/EventBridge/README.md#2025-04-09_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nPutTargets\n```\n\n----------------------------------------\n\nTITLE: S3 Image Listing and Table Management (JavaScript)\nDESCRIPTION: JavaScript file that initializes a DataTable for displaying S3 bucket images and provides the getImages() function to fetch image metadata from the Spring controller. It makes an AJAX call to the /getimages endpoint and populates the table with data including key, owner, date, and size for each image.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_photo_analyzer_app/README.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n$(function() {\n\n    $('#myTable').DataTable( {\n        scrollY:        \"500px\",\n        scrollX:        true,\n        scrollCollapse: true,\n        paging:         true,\n        columnDefs: [\n            { width: 200, targets: 0 }\n        ],\n        fixedColumns: true\n      } );\n     } );\n\n    function getImages() {\n\n      $.ajax('/getimages', {\n        type: 'GET',  // http method\n        success: function (data, status, xhr) {\n\n            var xml = data\n            var oTable = $('#myTable').dataTable();\n            oTable.fnClearTable(true);\n            $(xml).find('Item').each(function () {\n\n                var $field = $(this);\n                var key = $field.find('Key').text();\n                var name = $field.find('Owner').text();\n                var date = $field.find('Date').text();\n                var size = $field.find('Size').text();\n\n                //Set the new data\n                oTable.fnAddData( [\n                    key,\n                    name,\n                    date,\n                    size]\n                );\n            });\n          },\n        });\n      }\n```\n\n----------------------------------------\n\nTITLE: Running Single Action Example in JavaScript\nDESCRIPTION: This snippet demonstrates how to run a single action example for Amazon Bedrock Agents using Node.js. It executes a specific action file from the 'actions' directory.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/bedrock-agent/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode ./actions/<fileName>\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for Step Functions Examples in Python\nDESCRIPTION: Installs the necessary packages for running the Step Functions code examples using pip in a virtual environment.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/stepfunctions/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Sample Unit Test Success Output\nDESCRIPTION: Example output showing successful completion of unit tests, including execution time and path information.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/cloudformation/README.md#2025-04-09_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nPASS\nok      PATH 6.593s\n```\n\n----------------------------------------\n\nTITLE: Adding Tags to S3 Glacier Vault\nDESCRIPTION: Implementation for adding tags to an S3 Glacier vault using the AddTagsToVault API\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Glacier/README.md#2025-04-09_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nAddTagsToVault\n```\n\n----------------------------------------\n\nTITLE: Running TLS Test Suite\nDESCRIPTION: Command to execute the test suite for TLS configuration examples, including ignored tests. Must be run from the Rust project root directory.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/tls/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo test -p tls --test test-tls -- --include-ignored\n```\n\n----------------------------------------\n\nTITLE: Running Hello Amazon EC2 Example in Python\nDESCRIPTION: Executes the Hello Amazon EC2 example script, which demonstrates basic usage of the EC2 service.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/ec2/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython hello/hello_ec2.py\n```\n\n----------------------------------------\n\nTITLE: Running Test Suite for EC2 Code Examples\nDESCRIPTION: Shell commands for building and running the test suite for EC2 code examples. Requires CMake and build tools configured.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/ec2/README.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd <BUILD_DIR>\ncmake <path-to-root-of-this-source-code> -DBUILD_TESTS=ON\nmake\nctest\n```\n\n----------------------------------------\n\nTITLE: Displaying ASCII Art Header for AWS SDK for Ruby v3\nDESCRIPTION: An ASCII art representation of the text 'AWS SDK for Ruby v3'. This is likely used as a visual header or banner in documentation or code files related to the AWS SDK for Ruby.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/ruby/helpers/banner.txt#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n               ___      _____   ___ ___  _  __   __           ___      _               ____\n              /_\\ \\    / / __| / __|   \\| |/ /  / _|___ _ _  | _ \\_  _| |__ _  _  __ _|__ /\n             / _ \\ \\/\\/ /\\__ \\ \\__ \\ |) | ' <  |  _/ _ \\ '_| |   / || | '_ \\ || | \\ V /|_ \\\n            /_/ \\_\\_/\\_/ |___/ |___/___/|_|\\_\\ |_| \\___/_|   |_|_\\\\_,_|_.__/\\_, |  \\_/|___/\n                                                                            |__/\n```\n\n----------------------------------------\n\nTITLE: Send Message Batch to Amazon SQS using Ruby\nDESCRIPTION: Example code showing how to send multiple messages in a single batch to an SQS queue using the AWS SDK for Ruby.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/ruby/example_code/sqs/README.md#2025-04-09_snippet_6\n\nLANGUAGE: Ruby\nCODE:\n```\nsend_message_batch.rb#L7\n```\n\n----------------------------------------\n\nTITLE: Creating or Updating CloudWatch Dashboards in C#\nDESCRIPTION: Method for creating or updating CloudWatch dashboards. This is implemented in the CloudWatchWrapper class.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/CloudWatch/README.md#2025-04-09_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\nPutDashboard\n```\n\n----------------------------------------\n\nTITLE: Finding Test Source Files and Managing Visual C++ Source Groups\nDESCRIPTION: Discovers test source files using glob patterns with an option to limit files via command line. Configures Visual C++ source groups for better organization in the IDE.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/dynamodb/tests/CMakeLists.txt#2025-04-09_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n# GTEST_SOURCE_FILES can be defined in the command line to limit the files in a build, for example to one action.\nif (NOT DEFINED GTEST_SOURCE_FILES)\n    file(\n            GLOB\n            GTEST_SOURCE_FILES\n            \"gtest_*.cpp\"\n    )\nendif()\n\n# Check whether the target system is Windows, including Win64.\nif(WIN32)\n    # Check whether the compiler is some version of Microsoft Visual C++, or another compiler simulating C++.\n    if(MSVC)\n        source_group(\"Source Files\" FILES ${GTEST_SOURCE_FILES})\n    endif(MSVC)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Sample Unit Test Success Output\nDESCRIPTION: Example output showing successful completion of unit tests, including execution time and path information.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/cloudformation/README.md#2025-04-09_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nPASS\nok      PATH 6.593s\n```\n\n----------------------------------------\n\nTITLE: Running S3 Scenario\nDESCRIPTION: Command to run S3 scenarios using the cmd runner\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/gov2/s3/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo run ./cmd -h\n```\n\n----------------------------------------\n\nTITLE: Delete S3 Object\nDESCRIPTION: Deletes a single object from an S3 bucket using AWS CLI commands.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/aws-cli/bash-linux/s3/README.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbucket-lifecycle-operations/bucket_operations.sh#L272\n```\n\n----------------------------------------\n\nTITLE: Running AWS KMS DecryptData Example in Go\nDESCRIPTION: Command to run the DecryptData example which decrypts text encrypted with an AWS KMS key. Takes encrypted data as an argument.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/kms/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngo run DecryptData.go -d DATA\n```\n\n----------------------------------------\n\nTITLE: Running Multi-Model Demo\nDESCRIPTION: Command to run the demonstration wrapper script for multiple models including Claude 2, Titan, Stable Diffusion, Jurassic-2, Llama 2, and Mistral AI models.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/bedrock-runtime/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython bedrock_runtime_wrapper.py\n```\n\n----------------------------------------\n\nTITLE: Optimizing AWS SDK for C++ Build for IoT Scenario\nDESCRIPTION: CMake argument to optimize the AWS SDK for C++ build by only including the libraries needed for this IoT scenario. This can significantly speed up the build process.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/iot/things_and_shadows_workflow/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n-DBUILD_ONLY=\"cloudformation;iot;iot-data\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Boto3 and Pytest Dependencies for AWS SDK Examples\nDESCRIPTION: This snippet defines the minimum required versions for boto3 and pytest packages. Boto3 is the AWS SDK for Python, while pytest is a testing framework used for running unit tests on the example code.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/kinesis-analytics-v2/requirements.txt#2025-04-09_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nboto3>=1.26.79\npytest>=7.2.1\n```\n\n----------------------------------------\n\nTITLE: Running Scenario Example for Amazon Polly\nDESCRIPTION: Command to execute a scenario example file from the scenarios directory. This is the standard way to run most scenario examples.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/polly/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnode ./scenarios/<fileName>\n```\n\n----------------------------------------\n\nTITLE: Running Topic Modeling Job Example in Python\nDESCRIPTION: Command to execute the Python script that demonstrates how to run a topic modeling job on sample data using Amazon Comprehend, including job management and output extraction.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/comprehend/README.md#2025-04-09_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\npython comprehend_topic_modeler.py\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Windows CMD for FSA Deployment\nDESCRIPTION: Sets required environment variables in Windows Command Prompt for the FSA deployment, including the stack name, admin email address, and programming language for Lambda functions.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/applications/feedback_sentiment_analyzer/cdk/README.md#2025-04-09_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\nset FSA_NAME=\nset FSA_EMAIL=\nset FSA_LANG=\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up CDK Resources\nDESCRIPTION: Command to destroy the CDK stacks in reverse creation order to clean up resources when no longer needed.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/applications/photo-asset-manager/cdk/README.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ cdk destroy {STACK_NAME}\n```\n\n----------------------------------------\n\nTITLE: Deleting an Email Identity in Amazon SES v2 API using Rust\nDESCRIPTION: This code snippet illustrates the deletion of an email identity in Amazon SES v2 API using the AWS SDK for Rust. The implementation is located in the newsletter.rs file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/ses/README.md#2025-04-09_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n// Implementation in src/newsletter.rs#L385\n```\n\n----------------------------------------\n\nTITLE: Running Single Action Scripts\nDESCRIPTION: Command to execute individual action scripts from the actions directory\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/transcribe/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode ./actions/<fileName>\n```\n\n----------------------------------------\n\nTITLE: Listing S3 Glacier Jobs\nDESCRIPTION: Lists all jobs for a vault using the ListJobs API\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Glacier/README.md#2025-04-09_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nListJobs\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for Amazon Redshift Examples in Python\nDESCRIPTION: This snippet shows how to install the necessary packages for running the Amazon Redshift examples using pip in a virtual environment.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/redshift/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: AWS SDK Directory Structure Table\nDESCRIPTION: Markdown table showing the organization of SDK examples by programming language, directory location and SDK version.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/README.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|     SDK    |       folder      | SDK version |\n|:----------:|:-----------------:|:-----------:|\n| .NET       | [dotnetv3/](dotnetv3)         | 3.5+        |\n| .NET       | [dotnet/](.dotnet)           | <3.5        |\n| C++        | [cpp/](cpp)              | 1           |\n| Go         | [gov2/](gov2)            | 2           |\n| Go         | [go/](go)               | 1           |\n| Java       | [javav2/](javav2)           | 2           |\n| Java       | [java/](java)             | 1           |\n| JavaScript | [javascriptv3/](javascriptv3)     | 3           |\n| JavaScript | [javascript/](javascriptv)       | 2           |\n| Kotlin     | [kotlin/](kotlin)           | 1             |\n| PHP        | [php/](php)              | 3           |\n| Python     | [python/](python)           | 3           |\n| Ruby       | [ruby/](ruby)             | 3           |\n| Rust       | [rustv1/](rustv1) | 1             |\n| Swift      | [swift/](swift)            | preview           |\n```\n\n----------------------------------------\n\nTITLE: Starting Asynchronous Document Text Detection with Amazon Textract in SAP ABAP\nDESCRIPTION: Shows how to initiate an asynchronous document text detection job using the StartDocumentTextDetection function. This function is part of the zcl_aws1_tex_actions class.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/sap-abap/services/textract/README.md#2025-04-09_snippet_4\n\nLANGUAGE: ABAP\nCODE:\n```\nzcl_aws1_tex_actions.clas.abap#L326\n```\n\n----------------------------------------\n\nTITLE: Listing AWS Glue Jobs with .NET\nDESCRIPTION: This snippet demonstrates how to list AWS Glue jobs using the AWS SDK for .NET. It's part of the 'Hello AWS Glue' example that introduces basic Glue operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Glue/README.md#2025-04-09_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nListJobs\n```\n\n----------------------------------------\n\nTITLE: Building WebAssembly Module with AWS SDK for Rust\nDESCRIPTION: This command builds the Rust code into a WebAssembly module targeting web browsers. It outputs the result to the www/pkg directory in development mode.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/webassembly/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nwasm-pack build --target web --out-dir www/pkg --dev\n```\n\n----------------------------------------\n\nTITLE: Running Amazon S3 Presigned URL Example with Python\nDESCRIPTION: Command to execute the example that demonstrates how to create presigned URLs for Amazon S3 objects, enabling temporary access to private objects without AWS credentials.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/s3/README.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython s3_basics/presigned_url.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Target for AWS SDK C++ Examples with GTest\nDESCRIPTION: Sets up the test target for AWS SDK C++ examples, including source files, include directories, compile definitions, and linking libraries. It also enables testing and adds GTest tests to the project.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/cross-service/topics_and_queues/tests/CMakeLists.txt#2025-04-09_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nenable_testing()\n\ntarget_sources(\n        ${CURRENT_TARGET}\n        PUBLIC\n        gtest_messaging_with_topics_and_queues.cpp\n        ../messaging_with_topics_and_queues.cpp\n        test_main.cpp\n        topics_and_queues_gtests.cpp\n)\n\ntarget_include_directories(\n        ${CURRENT_TARGET}\n        PUBLIC\n        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/..>\n        $<INSTALL_INTERFACE:..>\n)\n\ntarget_compile_definitions(\n        ${CURRENT_TARGET}\n        PUBLIC\n        TESTING_BUILD\n        SRC_DIR=\"${CMAKE_CURRENT_SOURCE_DIR}\"\n)\n\ntarget_link_libraries(\n        ${CURRENT_TARGET}\n        GTest::gtest\n        ${AWSSDK_LINK_LIBRARIES}\n        ${AWSSDK_PLATFORM_DEPS}\n)\n\ninclude(GoogleTest)\n\ngtest_add_tests(\n        TARGET\n        ${CURRENT_TARGET}\n)\n```\n\n----------------------------------------\n\nTITLE: Python Package Requirements for AWS SDK Examples\nDESCRIPTION: Requirements file listing all Python package dependencies with specific version constraints for AWS SDK examples. Contains the AWS SDK for Python (boto3 and botocore), testing frameworks (pytest), and various utility packages needed to run the examples.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/bedrock-runtime/requirements.txt#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nboto3==1.37.9\nbotocore==1.37.9\ncolorama==0.4.6\niniconfig==2.0.0\njmespath==1.0.1\npackaging==24.2\npluggy==1.5.0\npytest==8.3.4\npython-dateutil==2.9.0.post0\ns3transfer==0.11.2\nsix==1.17.0\nurllib3==2.3.0\n```\n\n----------------------------------------\n\nTITLE: Creating an Email Template in Amazon SES using C++\nDESCRIPTION: This code snippet illustrates how to create an email template in Amazon SES using the AWS SDK for C++. The implementation is in the 'create_template.cpp' file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/ses/README.md#2025-04-09_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\n// See create_template.cpp, line 22\n```\n\n----------------------------------------\n\nTITLE: AWS CloudFormation Deployment Command\nDESCRIPTION: Command to deploy required AWS resources using npm and AWS CLI\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/cross-services/photo_analyzer/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run deploy\n```\n\n----------------------------------------\n\nTITLE: Google Test Discovery and Configuration\nDESCRIPTION: Attempts to find Google Test on the system. If not found, it uses FetchContent to download and configure Google Test from GitHub, using release-1.12.1.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/cross-service/serverless-aurora/tests/CMakeLists.txt#2025-04-09_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(GTest)\n\nif(NOT GTest_FOUND)\n    include(FetchContent)\n    FetchContent_Declare(\n            googletest\n            GIT_REPOSITORY https://github.com/google/googletest.git\n            GIT_TAG release-1.12.1\n    )\n\n    # For Windows: Prevent overriding the parent project's compiler/linker settings.\n    set(gtest_force_shared_crt ON CACHE BOOL \"\" FORCE)\n    FetchContent_MakeAvailable(googletest)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Internet Permission to Android Manifest\nDESCRIPTION: This XML snippet adds the INTERNET permission to the AndroidManifest.xml file, allowing the application to make network calls.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/subpub_app_android/README.md#2025-04-09_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<uses-permission android:name=\"android.permission.INTERNET\"/>\n```\n\n----------------------------------------\n\nTITLE: S3Service Class for Amazon S3 Operations in Kotlin\nDESCRIPTION: This class handles various Amazon S3 operations including putting objects, creating ZIP files, and generating presigned URLs for upload and download. It uses the AWS SDK for Kotlin to interact with S3.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/creating_pam/README.md#2025-04-09_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.example.photo.services\n\nimport aws.sdk.kotlin.services.s3.S3Client\nimport aws.sdk.kotlin.services.s3.model.GetObjectRequest\nimport aws.sdk.kotlin.services.s3.model.PutObjectRequest\nimport aws.sdk.kotlin.services.s3.presigners.presignGetObject\nimport aws.sdk.kotlin.services.s3.presigners.presignPutObject\nimport aws.smithy.kotlin.runtime.content.ByteStream\nimport aws.smithy.kotlin.runtime.content.toByteArray\nimport com.example.photo.PhotoApplicationResources\nimport java.io.ByteArrayOutputStream\nimport java.net.URL\nimport java.util.zip.ZipEntry\nimport java.util.zip.ZipOutputStream\nimport kotlin.time.Duration.Companion.hours\nimport kotlin.time.Duration.Companion.minutes\n\nclass S3Service {\n    // Place the upload image into an Amazon S3 bucket\n    suspend fun putObject(data: ByteArray, objectKey: String) {\n        val request = PutObjectRequest {\n            bucket = PhotoApplicationResources.STORAGE_BUCKET\n            key = objectKey\n            body = ByteStream.fromBytes(data)\n        }\n\n        S3Client { region = \"us-east-1\" }.use { s3Client ->\n            s3Client.putObject(request)\n        }\n    }\n\n    // Place the upload image into an Amazon S3 bucket.\n    suspend fun putZIP(data: ByteArray, objectKey: String) {\n        val request = PutObjectRequest {\n            bucket = PhotoApplicationResources.WORKING_BUCKET\n            key = objectKey\n            body = ByteStream.fromBytes(data)\n        }\n\n        S3Client { region = \"us-east-1\" }.use { s3Client ->\n            s3Client.putObject(request)\n        }\n    }\n\n    suspend fun getObjectBytes(bucketName: String?, keyName: String?): ByteArray? {\n        var myBytes: ByteArray? = null\n        val objectRequest = GetObjectRequest {\n            key = keyName\n            bucket = bucketName\n        }\n\n        S3Client { region = \"us-east-1\" }.use { s3Client ->\n            s3Client.getObject(objectRequest) { resp ->\n                myBytes = resp.body?.toByteArray()\n            }\n            return myBytes\n        }\n    }\n\n    // Pass a map and get back a byte[] that represents a ZIP of all images.\n    fun createZipFile(files: HashMap<String, ByteArray>): ByteArray {\n        val byteArrayOutputStream = ByteArrayOutputStream()\n        val zipOutputStream = ZipOutputStream(byteArrayOutputStream)\n        for ((fileName, fileData) in files) {\n            if (fileName == null) {\n                continue\n            }\n            val entry = ZipEntry(fileName)\n            zipOutputStream.putNextEntry(entry)\n            zipOutputStream.write(fileData)\n            zipOutputStream.closeEntry()\n        }\n        zipOutputStream.close()\n        return byteArrayOutputStream.toByteArray()\n    }\n\n    suspend fun signObjectToDownload(keyName: String?): String? {\n        S3Client { region = \"us-east-1\" }.use { s3Client ->\n            val unsignedRequest = GetObjectRequest {\n                bucket = PhotoApplicationResources.WORKING_BUCKET\n                key = keyName\n            }\n\n            // Presign the GetObject request.\n            val presignedRequest = s3Client.presignGetObject(unsignedRequest, 1.hours)\n            val presignedUrl = URL(presignedRequest.url.toString()).readText()\n            println(presignedUrl)\n            return presignedUrl\n        }\n    }\n\n    suspend fun signObjectToUpload(keyName: String?): String {\n        S3Client { region = \"us-east-1\" }.use { s3Client ->\n            val presignedUrl = PutObjectRequest {\n                bucket = PhotoApplicationResources.WORKING_BUCKET\n                key = keyName\n                contentType = \"image/jpeg\"\n            }\n\n            val presignedRequest = s3Client.presignPutObject(presignedUrl, 5L.minutes)\n            println(presignedRequest.url.toString())\n            return presignedRequest.url.toString()\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Scenario Examples in Node.js\nDESCRIPTION: Command to execute scenario example files from the scenarios directory.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/sts/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnode ./scenarios/<fileName>\n```\n\n----------------------------------------\n\nTITLE: Running Go Unit Tests for Amazon SNS Operations\nDESCRIPTION: This command runs unit tests for the Amazon SNS operations implemented in the Go code files.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/sns/README.md#2025-04-09_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\ngo test\n```\n\n----------------------------------------\n\nTITLE: Running the Amazon SES v2 Newsletter Example in Python\nDESCRIPTION: Command to execute the Amazon SES v2 newsletter scenario example in Python, which demonstrates a complete workflow for managing and sending newsletters.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/sesv2/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython newsletter.py\n```\n\n----------------------------------------\n\nTITLE: Essential CDK CLI Commands for Java Projects\nDESCRIPTION: A list of commonly used CDK CLI commands for managing a Java-based CDK project, including package compilation, stack listing, template synthesis, deployment, comparison, and documentation access.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/batch/resources/cdk/batch_resources/README.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmvn package     compile and run tests\ncdk ls          list all stacks in the app\ncdk synth       emits the synthesized CloudFormation template\ncdk deploy      deploy this stack to your default AWS account/region\ncdk diff        compare deployed stack with current state\ncdk docs        open CDK documentation\n```\n\n----------------------------------------\n\nTITLE: Creating a Pandas DataFrame to Display Extracted Text and Entities in Python\nDESCRIPTION: This code creates a Pandas DataFrame that displays the lines of text extracted from the image alongside the entities detected in each line.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/cross_service/textract_comprehend_notebook/TextractAndComprehendNotebook.ipynb#2025-04-09_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nentities_dict = {\"Lines\": lines, \"Entities\": response_ents}\ndf = pd.DataFrame(entities_dict, columns=[\"Lines\", \"Entities\"])\nprint(df)\n```\n\n----------------------------------------\n\nTITLE: Executing Amazon Data Firehose Operations in Python\nDESCRIPTION: Running the example Python script (firehose.py) that demonstrates Data Firehose operations including individual record ingestion, batch processing, error handling, and monitoring. The script requires proper setup of a Firehose delivery stream and sample data generation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/firehose/scenarios/firehose-put-actions/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython firehose.py\n```\n\n----------------------------------------\n\nTITLE: Uploading Parts for Multipart Upload in S3 Directory Buckets in Java\nDESCRIPTION: Example code for uploading individual parts for a multipart upload to an S3 Directory Bucket using AWS SDK for Java 2.x.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/s3/src/main/java/com/example/s3/directorybucket/README.md#2025-04-09_snippet_23\n\nLANGUAGE: Java\nCODE:\n```\nUploadPart\n```\n\n----------------------------------------\n\nTITLE: Running Go Unit Tests - Verbose Mode\nDESCRIPTION: Command for running unit tests with verbose output to show detailed test execution information and logging.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/cloudformation/README.md#2025-04-09_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngo test -test.v\n```\n\n----------------------------------------\n\nTITLE: Listing Amazon SNS Topics using Rust\nDESCRIPTION: This code snippet shows how to list existing Amazon SNS topics using the AWS SDK for Rust. It references the 'list-topics.rs' file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/sns/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Rust\nCODE:\n```\nsrc/bin/list-topics.rs#L22\n```\n\n----------------------------------------\n\nTITLE: Configuring Flask Routes with MethodView\nDESCRIPTION: Python code showing how to set up Flask routes with MethodView to handle API endpoints for work items.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/cross_service/dynamodb_item_tracker/README.md#2025-04-09_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nitem_list_view = ItemList.as_view('item_list_api', storage)\napp.add_url_rule(\n    '/api/items', defaults={'iditem': None}, view_func=item_list_view, methods=['GET'],\n    strict_slashes=False)\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for S3 Directory Buckets Examples in Python\nDESCRIPTION: This command installs the necessary packages for running the S3 Directory Buckets examples using pip in a virtual environment.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/s3-directory-buckets/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Starting an AWS Glue Job Run with .NET\nDESCRIPTION: This snippet shows how to start a run of an AWS Glue job using the AWS SDK for .NET. It requires the job name and can include additional arguments.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Glue/README.md#2025-04-09_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\nStartJobRun\n```\n\n----------------------------------------\n\nTITLE: Setting Up Amazon Cognito for Elros\nDESCRIPTION: Step-by-step instructions for configuring Amazon Cognito with Elros. This includes creating a user pool and setting the necessary environment variables.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/resources/clients/react/elros/README.md#2025-04-09_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n1. [Create](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-as-user-directory.html) an Amazon Cognito user pool, or use an existing one.\n2. Set the value of `VITE_COGNITO_USER_POOL_ID` to the user pool ID. You can find the user pool ID\n   in the AWS Management Console for Amazon Cognito.\n3. Set the value of `VITE_COGNITO_USER_POOL_CLIENT_ID` to the user pool ID. You can find the user pool ID\n   in the AWS Management Console for Amazon Cognito under the \"App integration\" tab.\n```\n\n----------------------------------------\n\nTITLE: Building TypeScript CDK App for Kinesis Examples\nDESCRIPTION: Compiles TypeScript code to JavaScript for the CDK app.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/kinesis/kinesis-cdk/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Listing SQS Queues in Go\nDESCRIPTION: Example command for listing all AWS SQS queues in the account.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/sqs/README.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngo run ListQueues.go\n```\n\n----------------------------------------\n\nTITLE: Running Presigned URL Example\nDESCRIPTION: Command to run the example showing how to create and use presigned URLs with Amazon S3 for object upload.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/ruby/example_code/s3/README.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nruby object_presigned_url_upload.rb\n```\n\n----------------------------------------\n\nTITLE: Deleting an AWS Glue Crawler with .NET\nDESCRIPTION: This code demonstrates how to delete an AWS Glue crawler using the AWS SDK for .NET. It takes the crawler name as a parameter.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Glue/README.md#2025-04-09_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nDeleteCrawler\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Amazon Cognito C++ Examples\nDESCRIPTION: Commands to build and run tests for the Amazon Cognito C++ code examples. This includes setting up the build directory, configuring CMake with tests enabled, building the project, and running the tests using ctest.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/cognito/README.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd <BUILD_DIR>\ncmake <path-to-root-of-this-source-code> -DBUILD_TESTS=ON\nmake\nctest\n```\n\n----------------------------------------\n\nTITLE: Sending Emails with Amazon SES in Kotlin\nDESCRIPTION: Implements email sending functionality using Amazon SES client. Creates and sends HTML formatted emails with work item reports. Requires verified email addresses in SES.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/itemtracker_dynamodb/README.md#2025-04-09_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nclass SendMessage {\n\n    suspend fun send(\n        recipient: String,\n        strValue: String?\n    ) {\n        val sesClient = SesClient { region = \"us-east-1\" }\n        // The HTML body of the email.\n        val bodyHTML = (\"<html>\" + \"<head></head>\" + \"<body>\" + \"<h1>Amazon RDS Items!</h1>\"\n                + \"<textarea>$strValue</textarea>\" + \"</body>\" + \"</html>\")\n\n        val destinationOb = Destination {\n            toAddresses = listOf(recipient)\n        }\n\n        val contentOb = Content {\n            data = bodyHTML\n        }\n\n        val subOb = Content {\n            data = \"Item Report\"\n        }\n\n        val bodyOb= Body {\n            html = contentOb\n        }\n\n        val msgOb = Message {\n            subject = subOb\n            body = bodyOb\n        }\n\n        val emailRequest = SendEmailRequest {\n            destination = destinationOb\n            message = msgOb\n            source = \"<Enter email>\"\n        }\n\n        try {\n            println(\"Attempting to send an email through Amazon SES using the AWS SDK for Kotlin...\")\n            sesClient.sendEmail(emailRequest)\n\n        } catch (e: SesException) {\n            println(e.message)\n            sesClient.close()\n            exitProcess(0)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for AWS SDK C++ Messaging Example\nDESCRIPTION: CMake configuration file that sets up build parameters for an AWS SDK C++ messaging example. It configures the project to use SNS and SQS services, sets C++11 standard, handles Windows-specific requirements, and links required AWS SDK libraries.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/cross-service/topics_and_queues/CMakeLists.txt#2025-04-09_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\n\n# Set the minimum required version of CMake for this project.\ncmake_minimum_required(VERSION 3.13)\n\nset(SERVICE_COMPONENTS sns sqs)\n\n# Set this project's name.\nproject(messaging_with_topics_and_queues)\n\nset(EXECUTABLE_NAME run_${PROJECT_NAME})\n\n# Set the C++ standard to use to build this target.\nset(CMAKE_CXX_STANDARD 11)\n\n# Build shared libraries by default.\nset(BUILD_SHARED_LIBS ON)\n\n# Use the MSVC variable to determine if this is a Windows build.\nset(WINDOWS_BUILD ${MSVC})\n\n# Set the location of where Windows can find the installed libraries of the SDK.\nif (WINDOWS_BUILD)\n    string(REPLACE \";\" \"/aws-cpp-sdk-all;\" SYSTEM_MODULE_PATH \"${CMAKE_SYSTEM_PREFIX_PATH}/aws-cpp-sdk-all\")\n    list(APPEND CMAKE_PREFIX_PATH ${SYSTEM_MODULE_PATH})\nendif ()\n\n# Find the AWS SDK for C++ package.\nfind_package(AWSSDK REQUIRED COMPONENTS ${SERVICE_COMPONENTS})\n\nif (WINDOWS_BUILD AND AWSSDK_INSTALL_AS_SHARED_LIBS)\n    # Copy relevant AWS SDK for C++ libraries into the current binary directory for running and debugging.\n\n    # set(BIN_SUB_DIR \"/Debug\") # If you are building from the command line you may need to uncomment this\n    # and set the proper subdirectory to the executables' location.\n\n    AWSSDK_CPY_DYN_LIBS(SERVICE_COMPONENTS \"\" ${CMAKE_CURRENT_BINARY_DIR}${BIN_SUB_DIR})\nendif ()\n\nadd_executable(${EXECUTABLE_NAME}\n        messaging_with_topics_and_queues.cpp)\n\ntarget_link_libraries(${EXECUTABLE_NAME}\n        ${AWSSDK_LINK_LIBRARIES}\n        ${AWSSDK_PLATFORM_DEPS})\n\nif (BUILD_TESTS)\n    add_subdirectory(tests)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Running the SNS Basics Example in Python\nDESCRIPTION: Command to execute the SNS basics example script which demonstrates core SNS functionality including creating topics and publishing SMS messages.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/sns/README.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython sns_basics.py\n```\n\n----------------------------------------\n\nTITLE: Retrieving AWS Glue Job Run Information with .NET\nDESCRIPTION: This code shows how to get information about a specific AWS Glue job run using the AWS SDK for .NET. It requires the job name and run ID.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Glue/README.md#2025-04-09_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nGetJobRun\n```\n\n----------------------------------------\n\nTITLE: Running Support Examples with Options in JavaScript\nDESCRIPTION: Command to run AWS Support examples with command line options. Uses util.parseArgs to configure the available options for the script.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/support/README.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnode ./scenarios/<fileName> --option1 --option2\n```\n\n----------------------------------------\n\nTITLE: Running EventBridge Example with Node.js\nDESCRIPTION: Command to execute an EventBridge JavaScript example file (eb_putevents.js) using Node.js after replacing the required values in the code.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascript/example_code/eventbridge/README.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnode eb_putevents.js\n```\n\n----------------------------------------\n\nTITLE: Setting Up Executable Target for AWS IoT SDK GTests\nDESCRIPTION: Creates the executable target for the GTests and configures Windows-specific build settings, including copying necessary DLLs.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/iot/tests/CMakeLists.txt#2025-04-09_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(\n        ${CURRENT_TARGET}\n)\n\nif (WINDOWS_BUILD)\n    if (AWSSDK_INSTALL_AS_SHARED_LIBS)\n        AWSSDK_CPY_DYN_LIBS(\n                CURRENT_TARGET_AWS_DEPENDENCIES\n                \"\"\n                ${CMAKE_CURRENT_BINARY_DIR}${BIN_SUB_DIR}\n        )\n    endif ()\n\n    add_custom_command(\n            TARGET\n            ${CURRENT_TARGET}\n            POST_BUILD\n            COMMAND ${CMAKE_COMMAND} -E copy\n            ${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_BINDIR}${BIN_SUB_DIR}/gtest.dll\n            ${CMAKE_CURRENT_BINARY_DIR}${BIN_SUB_DIR}\n    )\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Creating Resources with AWS CloudFormation via AWS CLI\nDESCRIPTION: AWS CLI command to create a CloudFormation stack using the setup.yaml template file, which provisions the necessary DynamoDB resources.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/resources/cdk/dynamodb-item-tracker/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\naws cloudformation create-stack --template-body file://setup.yaml --stack-name YOUR_STACK_NAME\n```\n\n----------------------------------------\n\nTITLE: Cleanup and Exit Example in S3 Conditional Requests Scenario\nDESCRIPTION: Shows the cleanup process and exit in the S3 conditional requests scenario, where all created buckets are emptied and deleted before the program terminates.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/s3_conditional_requests/SPECIFICATION.md#2025-04-09_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nChoose an action to explore some example conditional requests.\n1. Print list of bucket items.\n2. Perform a conditional read.\n3. Perform a conditional copy.\n4. Perform a conditional write.\n5. Clean up and exit.\nWhich action would you like to take? 5\nCleaned up bucket: test555-source-279.\nCleaned up bucket: test555-dest-279.\n----------------------------------------------------------------------------------------\nThanks for watching.\n----------------------------------------------------------------------------------------\n\nProcess finished with exit code 0\n```\n\n----------------------------------------\n\nTITLE: Running Example with Options in JavaScript\nDESCRIPTION: This snippet illustrates how to run an example with command-line options for Amazon Bedrock Agents using Node.js. It uses the util.parseArgs method to handle options.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/bedrock-agent/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnode ./scenarios/<fileName> --option1 --option2\n```\n\n----------------------------------------\n\nTITLE: Invoking Mistral AI model in C#\nDESCRIPTION: Demonstrates how to invoke the Mistral AI model using Amazon Bedrock Runtime.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv4/Bedrock-runtime/README.md#2025-04-09_snippet_24\n\nLANGUAGE: C#\nCODE:\n```\nModels/Mistral/InvokeModel/InvokeModel.cs#L4\n```\n\n----------------------------------------\n\nTITLE: Running Amazon Textract Explorer Unit Tests with pytest\nDESCRIPTION: Command to execute all unit tests for the application, which use the botocore Stubber to mock AWS service responses without making actual API calls.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/cross_service/textract_explorer/README.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython -m pytest\n```\n\n----------------------------------------\n\nTITLE: Invoking Amazon Titan Image Generator Model in PHP\nDESCRIPTION: This code snippet shows the invocation of the Amazon Titan Image Generator model using the Amazon Bedrock Runtime service. It's implemented as part of the BedrockRuntimeService class.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/php/example_code/bedrock-agent-runtime/README.md#2025-04-09_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nBedrockRuntimeService.php#L131\n```\n\n----------------------------------------\n\nTITLE: GET Response JSON Structure for Health Check Endpoint in Python Web Server\nDESCRIPTION: Sample JSON response from the health check endpoint used by the load balancer to determine if the server is healthy. Returns a success code (200) or failure code (503).\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/resilient_service/SPECIFICATION.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"success\": \"True\"}\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for AWS KMS Examples in Python\nDESCRIPTION: Command to install the required Python packages for AWS KMS examples using pip in a virtual environment.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/kms/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: CancelExportTask Implementation in .NET\nDESCRIPTION: Example demonstrating how to cancel a CloudWatch Logs export task using AWS SDK for .NET. The implementation is referenced in the CancelExportTask.cs file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/CloudWatchLogs/README.md#2025-04-09_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n/* Code reference only - implementation in CancelExportTask.cs#L6 */\n```\n\n----------------------------------------\n\nTITLE: Running a Hello Auto Scaling example in Ruby\nDESCRIPTION: This command runs the hello_autoscaling.rb example file that demonstrates how to get started with Auto Scaling using the AWS SDK for Ruby.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/ruby/example_code/auto-scaling/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nruby hello/hello_autoscaling.rb\n```\n\n----------------------------------------\n\nTITLE: Listing SageMaker Training Jobs in Rust\nDESCRIPTION: Example showing how to list all SageMaker training jobs using the AWS SDK for Rust. The code is found in the list-training-jobs.rs file at line 24.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/sagemaker/README.md#2025-04-09_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nListTrainingJobs\n```\n\n----------------------------------------\n\nTITLE: Building the C++ Project with CMake\nDESCRIPTION: Commands to build the C++ project using CMake. This creates an executable named 'run_topics_and_queues' in the build directory.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/cross-service/topics_and_queues/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir build \ncd build\ncmake —build ..\n```\n\n----------------------------------------\n\nTITLE: Testing API Endpoint with curl\nDESCRIPTION: Example of using curl to test the REST API by retrieving the list of states from the endpoint.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/cross_service/apigateway_covid-19_tracker/README.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://1234567890.execute-api.us-west-2.amazonaws.com/api/states\n```\n\n----------------------------------------\n\nTITLE: Creating a Keyspace in Amazon Keyspaces using C#\nDESCRIPTION: This code snippet shows how to create a new keyspace in Amazon Keyspaces using the AWS SDK for .NET. It's an example of a single action operation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Keyspaces/README.md#2025-04-09_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nActions/KeyspacesWrapper.cs#L23\n```\n\n----------------------------------------\n\nTITLE: Configuring Base URL for React Frontend API Connection\nDESCRIPTION: A JavaScript configuration file that defines the base URL for the React frontend to connect to the Spring REST API. It sets the endpoint to the locally hosted Spring application.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/CreatingSpringRedshiftRest/README.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"BASE_URL\": \"http://localhost:8080/api\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Elros Development Server\nDESCRIPTION: Commands for installing dependencies and starting the development server for Elros. This uses npm for package management and running scripts.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/resources/clients/react/elros/README.md#2025-04-09_snippet_2\n\nLANGUAGE: shellscript\nCODE:\n```\n1. Run `npm i` from the same directory as this readme.\n2. Run `npm run dev`.\n```\n\n----------------------------------------\n\nTITLE: Implementing UploadHandler for Managing File Uploads in Kotlin\nDESCRIPTION: This class handles file upload requests, generating a unique filename and a signed URL for S3 upload. It uses coroutines and processes API Gateway proxy events.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/creating_pam/README.md#2025-04-09_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.example.photo.handlers\n\nimport com.amazonaws.services.lambda.runtime.Context\nimport com.amazonaws.services.lambda.runtime.RequestHandler\nimport com.amazonaws.services.lambda.runtime.events.APIGatewayProxyRequestEvent\nimport com.amazonaws.services.lambda.runtime.events.APIGatewayProxyResponseEvent\nimport com.example.photo.services.S3Service\nimport com.google.gson.Gson\nimport kotlinx.coroutines.runBlocking\nimport java.util.UUID\n\nclass UploadHandler : RequestHandler<APIGatewayProxyRequestEvent?, APIGatewayProxyResponseEvent?> {\n    val CORS_HEADER_MAP: Map<String, String> = java.util.Map.of(\n        \"Access-Control-Allow-Origin\", \"*\"\n    )\n\n    fun toJson(src: Any?): String? {\n        val gson = Gson()\n        return gson.toJson(src)\n    }\n\n    override fun handleRequest(input: APIGatewayProxyRequestEvent?, context: Context): APIGatewayProxyResponseEvent = runBlocking {\n        context.getLogger().log(\"In UploadHandler handler\")\n        val body: org.json.JSONObject = org.json.JSONObject(input!!.body)\n        context.logger.log(\"Got body: $body\")\n        val fileName = body.getString(\"file_name\")\n        context.logger.log(\"Building URL for $fileName\")\n\n        if (fileName == null || fileName == \"\") {\n            return@runBlocking APIGatewayProxyResponseEvent()\n                .withStatusCode(400)\n                .withHeaders(CORS_HEADER_MAP)\n                .withBody(\"{\\\"error\\\":\\\"Missing filename\\\"}\")\n                .withIsBase64Encoded(false)\n        }\n\n        val uuid = UUID.randomUUID()\n        val uniqueFileName = \"$uuid-$fileName\"\n        val s3Service = S3Service()\n        val signedURL = s3Service.signObjectToUpload(uniqueFileName)\n        val data = UploadResponse.from(signedURL)\n        return@runBlocking makeResponse(data)\n    }\n\n    fun makeResponse(src: Any?): APIGatewayProxyResponseEvent {\n        return APIGatewayProxyResponseEvent()\n            .withStatusCode(200)\n            .withHeaders(CORS_HEADER_MAP)\n            .withBody(toJson(src))\n            .withIsBase64Encoded(false)\n    }\n}\n\ninternal class UploadResponse private constructor(val uRL: String) {\n    companion object {\n        fun from(url: String): UploadResponse {\n            return UploadResponse(url)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Table in Amazon Keyspaces using C#\nDESCRIPTION: This code snippet demonstrates how to update the configuration of an existing table in Amazon Keyspaces using the AWS SDK for .NET. It's an example of a single action operation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Keyspaces/README.md#2025-04-09_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nActions/KeyspacesWrapper.cs#L188\n```\n\n----------------------------------------\n\nTITLE: Sample Transcription Output\nDESCRIPTION: Example output from the transcription service when processing the hello-transcribe-8000.wav file, showing the text that was transcribed from the audio.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/transcribestreaming/README.md#2025-04-09_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nGood day to you transcribe.\nThis is Polly talking to you from the Rust ST K.\n```\n\n----------------------------------------\n\nTITLE: Listing Targets by Rule in EventBridge using AWS SDK for .NET\nDESCRIPTION: Method to list all targets associated with a specific EventBridge rule. Returns information about the configured targets that receive events when the rule is triggered.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/EventBridge/README.md#2025-04-09_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nListTargetsByRule\n```\n\n----------------------------------------\n\nTITLE: Listing CloudWatch Metrics in C++\nDESCRIPTION: This code example shows how to list CloudWatch metrics using the AWS SDK for C++. It requires the necessary permissions to retrieve CloudWatch metric data.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/cloudwatch/README.md#2025-04-09_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\nlist_metrics.cpp#L18\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for AWS SDK Examples\nDESCRIPTION: This requirements file lists the minimum versions of Python packages required for AWS SDK example projects. It includes boto3 for AWS API access, pytest for testing, and requests for HTTP operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/sts/requirements.txt#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nboto3>=1.26.79\npytest>=7.2.1\nrequests>=2.28.2\n```\n\n----------------------------------------\n\nTITLE: Deleting an AWS AppSync Data Source using Java SDK\nDESCRIPTION: This code snippet demonstrates the deletion of a data source from AWS AppSync using the DeleteDataSource command with the AppSyncClient object in Java.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/appsync/README.md#2025-04-09_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nDeleteDataSource command\n```\n\n----------------------------------------\n\nTITLE: Listing MediaConvert Jobs in Java\nDESCRIPTION: This code snippet illustrates how to list MediaConvert jobs using the AWS SDK for Java 2.x. The ListJobs action is used to retrieve a list of transcoding jobs that meet specified criteria.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/mediaconvert/README.md#2025-04-09_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nsrc/main/java/com/example/mediaconvert/ListJobs.java#L6\n```\n\n----------------------------------------\n\nTITLE: Running Single Action Examples in Node.js\nDESCRIPTION: Command to execute individual EC2 action examples from the actions directory\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/ec2/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode ./actions/<fileName>\n```\n\n----------------------------------------\n\nTITLE: Describing Elastic Beanstalk Applications using Ruby SDK\nDESCRIPTION: Code example showing how to retrieve descriptions of Elastic Beanstalk applications using the DescribeApplications API call through the Ruby SDK. This operation provides detailed information about existing Elastic Beanstalk applications.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/ruby/example_code/elasticbeanstalk/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\n# list_apps.rb#L6\nDescribeApplications\n```\n\n----------------------------------------\n\nTITLE: SNS Deduplication Configuration Prompt\nDESCRIPTION: Prompt for configuring content-based deduplication for FIFO topics\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/topics_and_queues/README.md#2025-04-09_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nUse content-based deduplication instead of a deduplication ID? (y/n)\n```\n\n----------------------------------------\n\nTITLE: Uploading Test Files to S3 Buckets\nDESCRIPTION: This code snippet shows the process of uploading test files to the previously created S3 buckets. It uploads two files to each of the three buckets created earlier.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/s3_object_lock/SPECIFICATION.md#2025-04-09_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nNow let's add some test files:\n        Successfully uploaded dotnet-example-file0.txt to dotnet-s3-lock-example0-no-lock.\n        Successfully uploaded dotnet-example-file1.txt to dotnet-s3-lock-example0-no-lock.\n        Successfully uploaded dotnet-example-file0.txt to dotnet-s3-lock-example0-lock-enabled.\n        Successfully uploaded dotnet-example-file1.txt to dotnet-s3-lock-example0-lock-enabled.\n        Successfully uploaded dotnet-example-file0.txt to dotnet-s3-lock-example0-retention-after-creation.\n        Successfully uploaded dotnet-example-file1.txt to dotnet-s3-lock-example0-retention-after-creation.\nPress Enter to continue.\n```\n\n----------------------------------------\n\nTITLE: Running Scenario Example in JavaScript\nDESCRIPTION: This snippet shows how to run a scenario example for Amazon Bedrock Agents using Node.js. It executes a specific scenario file from the 'scenarios' directory.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/bedrock-agent/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnode ./scenarios/<fileName>\n```\n\n----------------------------------------\n\nTITLE: Attaching a Role Policy using AWS IAM in Kotlin\nDESCRIPTION: This snippet demonstrates how to attach a policy to an IAM role using the AWS SDK for Kotlin. It requires the role name and policy ARN as inputs.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/iam/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nsrc/main/kotlin/com/kotlin/iam/AttachRolePolicy.kt#L41\n```\n\n----------------------------------------\n\nTITLE: Invoking Amazon Titan Text model in C#\nDESCRIPTION: Shows how to invoke the Amazon Titan Text model using Amazon Bedrock Runtime.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv4/Bedrock-runtime/README.md#2025-04-09_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nModels/AmazonTitanText/InvokeModel/InvokeModel.cs#L4\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Configuration for Windows\nDESCRIPTION: Detects if the build environment is Windows using the MSVC variable and sets up additional configuration for finding AWS SDK libraries on Windows systems.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/cross-service/serverless-aurora/tests/CMakeLists.txt#2025-04-09_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Use the MSVC variable to determine if this is a Windows build.\nset(WINDOWS_BUILD ${MSVC})\n\n# Set the location for Windows to find the installed libraries of the SDK.\nif (WINDOWS_BUILD)\n    string(REPLACE \";\" \"/aws-cpp-sdk-all;\" SYSTEM_MODULE_PATH \"${CMAKE_SYSTEM_PREFIX_PATH}/aws-cpp-sdk-all\")\n    list(APPEND CMAKE_PREFIX_PATH ${SYSTEM_MODULE_PATH})\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Copying Parts for Multipart Upload in S3 Directory Buckets in Java\nDESCRIPTION: Example code for copying parts from an existing object for a multipart upload to an S3 Directory Bucket using AWS SDK for Java 2.x.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/s3/src/main/java/com/example/s3/directorybucket/README.md#2025-04-09_snippet_24\n\nLANGUAGE: Java\nCODE:\n```\nUploadPartCopy\n```\n\n----------------------------------------\n\nTITLE: Model Configuration JSON Structure\nDESCRIPTION: Template for the configuration JSON file used for model inference, including project settings, version, confidence limits, and anomaly parameters.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/lookoutvision/README.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"project\": \"The Lookout for Vision project name.\",\n    \"model_version\": \"The model version.\",\n    \"confidence_limit\": \"The minimum acceptable confidence. (Float 0 - 1).\",\n    \"coverage_limit\": \"The maximum acceptable percentage coverage of an anomaly (Float 0 - 1).\",\n    \"anomaly_types_limit\": \"The maximum number of allowable anomaly types. (Integer)\",\n    \"anomaly_label\": \"The anomaly label for the type of anomaly that you want to check.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Test Tools in Python Tests\nDESCRIPTION: Code snippet showing how to import the test tools in a conftest.py file. Adds the main Python folder to the system path and imports common fixtures.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/test_tools/README.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport sys\n# This is needed so Python can find test_tools on the path.\nsys.path.append('../..')\nfrom test_tools.fixtures.common import *\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Packages\nDESCRIPTION: Command to install the necessary Python packages using pip in a virtual environment for running the Bedrock examples.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/bedrock/README.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython -m pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: List Snowball Addresses Command - Rust\nDESCRIPTION: Command line example for listing all AWS Snowball addresses associated with the account. Supports optional region specification and verbose output.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/snowball/README.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo run --bin describe-addresses -- [-r REGION] [-v]\n```\n\n----------------------------------------\n\nTITLE: Creating a Table in Amazon Keyspaces using C#\nDESCRIPTION: This code snippet demonstrates how to create a new table within a keyspace in Amazon Keyspaces using the AWS SDK for .NET. It's an example of a single action operation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Keyspaces/README.md#2025-04-09_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nActions/KeyspacesWrapper.cs#L39\n```\n\n----------------------------------------\n\nTITLE: Error Handling Table for EventBridge Scheduler Operations\nDESCRIPTION: Table defining error handling strategies for various EventBridge Scheduler operations, including how to handle conflicts during schedule creation and resource not found errors during deletion.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/eventbridge_scheduler/SPECIFICATION.md#2025-04-09_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| action                       | Error                     | Handling                                         |\n|------------------------------|---------------------------|--------------------------------------------------|\n| `ListSchedules`              | none                      | Not required for Hello Service                   |\n| `CreateSchedule`             | ConflictException         | Notify the user to use a unique name.            |\n| `CreateScheduleGroup`        | ConflictException         | Notify the user to use a unique name.            |\n| `DeleteSchedule`             | ResourceNotFoundException | Notify the user the schedule is already deleted. |\n| `DeleteScheduleGroup`        | ResourceNotFoundException | Notify the user the group is already deleted.    |\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cognito Resource IDs from CloudFormation Stack\nDESCRIPTION: Command to extract the UserPoolId and ClientId values from the CloudFormation stack outputs using the AWS CLI. These values are needed to interact with the Cognito resources.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/resources/cdk/cognito_scenario_user_pool_with_mfa/README.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\naws cloudformation describe-stacks --stack-name STACK_NAME --query Stacks[0].Outputs --output text\n```\n\n----------------------------------------\n\nTITLE: Synthesizing CloudFormation Template with CDK\nDESCRIPTION: Command to synthesize the AWS CloudFormation template for the front-end infrastructure stack of the PAM application.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/applications/photo-asset-manager/cdk/README.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncdk synth {PAM_NAME}-FE-Infra-PAM\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Packages\nDESCRIPTION: Command to install the required Python packages using pip package manager within a virtual environment.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/transcribe/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for AWS SDK Examples\nDESCRIPTION: This code snippet defines the exact versions of Python packages required to run the AWS SDK examples. It includes boto3 and botocore for AWS SDK functionality, moto for mocking AWS services in tests, pytest for running tests, and backoff for implementing retry logic.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/firehose/scenarios/firehose-put-actions/requirements.txt#2025-04-09_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nboto3==1.26.65\nbotocore==1.29.65\nmoto==4.0.9\npytest==7.3.1\nbackoff==2.2.1\n```\n\n----------------------------------------\n\nTITLE: Registering a Kinesis Stream Consumer using AWS SDK for .NET\nDESCRIPTION: This code snippet shows how to register a consumer for an Amazon Kinesis stream using the AWS SDK for .NET. It references the RegisterStreamConsumer method in the RegisterConsumer.cs file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Kinesis/README.md#2025-04-09_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nRegisterStreamConsumer(RegisterConsumerExample/RegisterConsumerExample/RegisterConsumer.cs#L6)\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for AWS SDK Examples\nDESCRIPTION: This code snippet defines the minimum required versions of boto3, pytest, and botocore packages for AWS SDK examples. These dependencies ensure compatibility and proper functionality of the examples.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/scheduler/scenario/requirements.txt#2025-04-09_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nboto3>=1.35.38\npytest>=8.3.3\nbotocore>=1.35.38\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for AWS CodeBuild C++ SDK Examples\nDESCRIPTION: Configures a CMake project for building AWS CodeBuild SDK examples in C++. The configuration handles platform-specific settings for Windows and Linux, sets up the AWS SDK dependencies, and creates build targets for all example files in the directory.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/codebuild/CMakeLists.txt#2025-04-09_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\n\n# Set the minimum required version of CMake for this project.\ncmake_minimum_required(VERSION 3.13)\n\nset(SERVICE_NAME codebuild)\nset(SERVICE_COMPONENTS codebuild)\n\n# Set this project's name.\nproject(\"${SERVICE_NAME}-examples\")\n\n# Build shared libraries by default.\nset(BUILD_SHARED_LIBS ON)\n\n# Set the C++ standard to use to build this target.\nset(CMAKE_CXX_STANDARD 11)\n\n# Use the MSVC variable to determine if this is a Windows build.\nset(WINDOWS_BUILD ${MSVC})\n\n# Set the location of where Windows can find the installed libraries of the SDK.\nif (WINDOWS_BUILD)\n    string(REPLACE \";\" \"/aws-cpp-sdk-all;\" SYSTEM_MODULE_PATH \"${CMAKE_SYSTEM_PREFIX_PATH}/aws-cpp-sdk-all\")\n    list(APPEND CMAKE_PREFIX_PATH ${SYSTEM_MODULE_PATH})\nendif ()\n\n# Find the AWS SDK for C++ package.\nfind_package(AWSSDK REQUIRED COMPONENTS ${SERVICE_COMPONENTS})\n\nif (WINDOWS_BUILD AND AWSSDK_INSTALL_AS_SHARED_LIBS)\n    # Copy relevant AWS SDK for C++ libraries into the current binary directory for running and debugging.\n\n    # set(BIN_SUB_DIR \"/Debug\") # If you are building from the command line, you may need to uncomment this\n    # and set the proper subdirectory to the executables' location.\n\n    AWSSDK_CPY_DYN_LIBS(SERVICE_COMPONENTS \"\" ${CMAKE_CURRENT_BINARY_DIR}${BIN_SUB_DIR})\nendif ()\n\n# AWSDOC_SOURCE can be defined in the command line to limit the files in a build. For example,\n# you can limit files to one action.\nif (NOT DEFINED AWSDOC_SOURCE)\n    file(GLOB AWSDOC_SOURCE\n            \"*.cpp\"\n    )\nendif ()\n\nforeach (file ${AWSDOC_SOURCE})\n    get_filename_component(EXAMPLE ${file} NAME_WE)\n\n    # Build the code example executables.\n    set(EXAMPLE_EXE run_${EXAMPLE})\n\n    add_executable(${EXAMPLE_EXE} ${file})\n\n    target_link_libraries(${EXAMPLE_EXE} ${AWSSDK_LINK_LIBRARIES}\n            ${AWSSDK_PLATFORM_DEPS})\n\nendforeach ()\n\n\nif (BUILD_TESTS)\n    add_subdirectory(tests)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Get S3 Object\nDESCRIPTION: Downloads an object from an S3 bucket using AWS CLI commands.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/aws-cli/bash-linux/s3/README.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nbucket-lifecycle-operations/bucket_operations.sh#L168\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Composer\nDESCRIPTION: Command to install project dependencies using Composer before running example code.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/php/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer install\n```\n\n----------------------------------------\n\nTITLE: Deleting Amazon Redshift Cluster in Kotlin\nDESCRIPTION: Example demonstrating how to delete an existing Amazon Redshift cluster using the AWS SDK for Kotlin. Located in DeleteCluster.kt at line 38.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/redshift/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nDeleteCluster\n```\n\n----------------------------------------\n\nTITLE: Getting Started with Systems Manager - List Documents\nDESCRIPTION: Basic example to list Systems Manager documents using the ListDocuments API.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/ssm/README.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nsrc/main/java/com/example/ssm/HelloSSM.java#L6\n```\n\n----------------------------------------\n\nTITLE: Batch Updating Device Positions in Amazon Location Service using Java\nDESCRIPTION: This code snippet shows how to perform a batch update of device positions in Amazon Location Service. It's part of the LocationActions class that provides various Location Service operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/location/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nBatchUpdateDevicePosition\n```\n\n----------------------------------------\n\nTITLE: Retrieving Lambda Function Information in JavaScript\nDESCRIPTION: This code example demonstrates how to get information about a Lambda function using the AWS SDK for JavaScript (v3). It's part of the single actions showcasing Lambda operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/lambda/README.md#2025-04-09_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nactions/get-function.js#L5\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Windows PowerShell\nDESCRIPTION: Commands for setting required environment variables (PAM_NAME, PAM_EMAIL, PAM_LANG) in Windows PowerShell. These variables configure the stack identity, user account email, and programming language for Lambda functions.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/applications/photo-asset-manager/cdk/README.md#2025-04-09_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\n$Env:PAM_NAME =\n$Env:PAM_EMAIL =\n$Env:PAM_LANG =\n```\n\n----------------------------------------\n\nTITLE: Create S3 Bucket\nDESCRIPTION: Creates a new S3 bucket using AWS CLI commands.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/aws-cli/bash-linux/s3/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbucket-lifecycle-operations/bucket_operations.sh#L50\n```\n\n----------------------------------------\n\nTITLE: Running CloudFront Distribution Examples in Python\nDESCRIPTION: This snippet demonstrates how to execute the CloudFront distribution examples by running the Python script from the command line.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/cloudfront/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython distributions.py\n```\n\n----------------------------------------\n\nTITLE: Running Tool Use Demo Scenario\nDESCRIPTION: Command to execute the tool use demonstration that shows integration between AI models and external APIs.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/bedrock-runtime/README.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython cross-model-scenarios/tool_use_demo/tool_use_demo.py\n```\n\n----------------------------------------\n\nTITLE: Generating Log Files for CloudWatch Logs Query\nDESCRIPTION: Executes a shell script to generate log files and outputs timestamps for query start and end dates. These timestamps are used in subsequent steps of the example.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/cloudwatch-logs/scenarios/large-query/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./make-log-files.sh\n```\n\n----------------------------------------\n\nTITLE: Synthesizing CDK Stack to YAML for Java SQS Example\nDESCRIPTION: This command uses the CDK to synthesize the stack and output it as a YAML template. The template is then redirected to a file in the Java v2 SDK examples directory for SQS.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/resources/cdk/javav2_sqs_SSE-KMS_encryption/README.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncdk synth --yaml >  ../../../javav2/example_code/sqs/src/main/resources/template.yaml\n```\n\n----------------------------------------\n\nTITLE: Invoking AI21 Labs Jurassic-2 model in C#\nDESCRIPTION: Shows how to invoke the AI21 Labs Jurassic-2 model using Amazon Bedrock Runtime.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv4/Bedrock-runtime/README.md#2025-04-09_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nModels/Ai21LabsJurassic2/InvokeModel/InvokeModel.cs#L4\n```\n\n----------------------------------------\n\nTITLE: User Input for Resource Cleanup in C++\nDESCRIPTION: Shows the command-line interface for cleaning up resources by deleting SQS queues and SNS topics.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/topics_and_queues/SPECIFICATION.md#2025-04-09_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nDelete the SQS queues? (y/n) \n\nDelete the SNS topic? (y/n) \n```\n\n----------------------------------------\n\nTITLE: Creating DB Instance using Amazon RDS in Java\nDESCRIPTION: This code snippet shows how to create a DB instance using Amazon RDS with AWS SDK for Java 2.x. It utilizes the CreateDBInstance operation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/rds/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nsrc/main/java/com/example/rds/CreateDBInstance.java#L6\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies with Version Requirements\nDESCRIPTION: This requirements file specifies the minimum versions of Python packages needed for an AWS-integrated Flask web application. It includes boto3 for AWS SDK functionality, Flask for the web framework, flask-cors for handling cross-origin requests, webargs for parameter parsing, and pytest for testing.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/cross_service/aurora_item_tracker/requirements.txt#2025-04-09_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\nboto3>=1.26.81\nflask>=2.2.0\nflask-cors>=3.0.10\nwebargs>=8.2.0\npytest>=7.2.1\n```\n\n----------------------------------------\n\nTITLE: Getting Started with Systems Manager - List Documents\nDESCRIPTION: Basic example to list Systems Manager documents using the ListDocuments API.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/ssm/README.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nsrc/main/java/com/example/ssm/HelloSSM.java#L6\n```\n\n----------------------------------------\n\nTITLE: Running Hello AWS Glue Example\nDESCRIPTION: Command to execute the Hello AWS Glue example script that demonstrates basic Glue operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/ruby/example_code/glue/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nruby hello/hello_glue.rb\n```\n\n----------------------------------------\n\nTITLE: Listing AWS IoT SiteWise Asset Models in Rust\nDESCRIPTION: This example shows how to list AWS IoT SiteWise asset models in a specified Region. It provides options for specifying the Region and displaying additional information.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/sitewise/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncargo run --bin list-asset-models -- [-r REGION] [-v]\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies for Amazon SNS Python Examples\nDESCRIPTION: Command to install the required Python packages for the SNS examples using pip. This should be run in a virtual environment to isolate dependencies.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/sns/README.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython -m pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Running Verbose Go Unit Tests for Amazon SNS Operations\nDESCRIPTION: This command runs unit tests for the Amazon SNS operations implemented in the Go code files with verbose output.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/sns/README.md#2025-04-09_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\ngo test -test.v\n```\n\n----------------------------------------\n\nTITLE: Updating Lambda Function Configuration with AWS SDK for .NET\nDESCRIPTION: Updates the configuration of an existing Lambda function. This includes updating the description, memory size, timeout, and environment variables.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Lambda/README.md#2025-04-09_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\n/// <summary>\n/// Update the configuration of a Lambda function.\n/// </summary>\n/// <param name=\"functionName\">The name of the Lambda function to update.</param>\n/// <param name=\"jsonConfigurationValues\">Key-value pairs for the configuration.</param>\n/// <returns>A Boolean value that indicates the success of the action.</returns>\npublic async Task<bool> UpdateFunctionConfigurationAsync(\n    string functionName,\n    Dictionary<string, string> environmentVariables)\n{\n    var request = new UpdateFunctionConfigurationRequest\n    {\n        FunctionName = functionName,\n        Description = \"Updated Lambda function\",\n        Environment = new Amazon.Lambda.Model.Environment { Variables = environmentVariables },\n        Timeout = 10,\n        MemorySize = 256,\n    };\n\n    var response = await _lambdaService.UpdateFunctionConfigurationAsync(request);\n\n    Console.WriteLine(response.LastModified);\n\n    return response.HttpStatusCode == System.Net.HttpStatusCode.OK;\n}\n```\n\n----------------------------------------\n\nTITLE: Running AWS CodeCommit Example Scripts in JavaScript\nDESCRIPTION: This snippet demonstrates how to run the AWS CodeCommit example scripts. It changes to the source directory and executes a specified example file using Node.js.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/codecommit/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd src\nnode [example name].js\n```\n\n----------------------------------------\n\nTITLE: Running the Amazon SNS FIFO Topic Example\nDESCRIPTION: Command to run the example that demonstrates how to create and publish to a FIFO Amazon SNS topic.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/sqs/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython ../sns/sns_fifo_topic.py\n```\n\n----------------------------------------\n\nTITLE: Creating an Email Identity with Amazon SES v2 API in C#\nDESCRIPTION: This code demonstrates how to create an email identity using the Amazon SES v2 API. It's part of the SESv2Wrapper class and requires the AmazonSimpleEmailServiceV2Client.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/SESv2/README.md#2025-04-09_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic async Task<bool> CreateEmailIdentity(string emailAddress)\n{\n    var createEmailIdentityRequest = new CreateEmailIdentityRequest\n    {\n        EmailIdentity = emailAddress\n    };\n\n    try\n    {\n        var response = await _sesv2Client.CreateEmailIdentityAsync(createEmailIdentityRequest);\n        Console.WriteLine($\"EmailIdentityCreated: {response.HttpStatusCode == System.Net.HttpStatusCode.OK}\");\n        return response.HttpStatusCode == System.Net.HttpStatusCode.OK;\n    }\n    catch (AlreadyExistsException)\n    {\n        Console.WriteLine($\"Email identity {emailAddress} already exists\");\n        return true;\n    }\n    catch (Exception ex)\n    {\n        Console.WriteLine($\"CreateEmailIdentity failed: {ex.Message}\");\n        return false;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies with Version Requirements\nDESCRIPTION: A requirements file that lists the project's Python dependencies with minimum version constraints. It includes boto3 and botocore libraries for AWS SDK functionality and pytest for testing.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/scheduler/requirements.txt#2025-04-09_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\nboto3>=1.35.38\npytest>=8.3.3\nbotocore>=1.35.38\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies with pip\nDESCRIPTION: Command to install the required Python packages for the examples using pip in a virtual environment.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/bedrock-agent-runtime/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Running Change EC2 Instance Type Function in Bash\nDESCRIPTION: This snippet demonstrates how to source the script file and call the change_ec2_instance_type function to modify an EC2 instance type to t2.nano. It requires the instance ID to be specified.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/aws-cli/bash-linux/ec2/change-ec2-instance-type/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsource change_ec2_instance_type.sh\nchange_ec2_instance_type -i *instance-id* -t t2.nano\n```\n\n----------------------------------------\n\nTITLE: Listing Amazon SNS Topics in C++\nDESCRIPTION: This code snippet demonstrates how to list SNS topics using the AWS SDK for C++. It's located in the list_topics.cpp file at line 21.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/sns/README.md#2025-04-09_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\n// Code for ListTopics action (specific implementation not provided)\n```\n\n----------------------------------------\n\nTITLE: Listing AWS CodeBuild Projects with AWS SDK for Go\nDESCRIPTION: This command runs the ListProjects Go program which retrieves and displays all CodeBuild projects in your AWS account.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/codebuild/README.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo run ListProjects.go\n```\n\n----------------------------------------\n\nTITLE: Implementing SES v2 Coupon Newsletter Workflow in Java\nDESCRIPTION: This class implements a complete workflow for sending coupon newsletters using Amazon SES v2. It includes methods for creating email identities, contact lists, and email templates, as well as sending welcome emails and newsletters.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/sesv2_weekly_mailer/content/61a_NewsletterWorkflow.java.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.sesv2;\n\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\n\nimport software.amazon.awssdk.regions.Region;\nimport software.amazon.awssdk.services.sesv2.SesV2Client;\nimport software.amazon.awssdk.services.sesv2.model.*;\n\n/**\n * This class implements the SES v2 Coupon Newsletter Workflow.\n * It demonstrates how to use the Amazon Simple Email Service (SES) v2 to send a\n * coupon newsletter to a list of contacts.\n */\npublic class NewsletterWorkflow {\n  private static final String CONTACT_LIST_NAME = \"weekly-coupons-newsletter\";\n  private static final String TEMPLATE_NAME = \"weekly-coupons\";\n  private static final String INTRO = \"\"\"\n      Welcome to the Amazon SES v2 Coupon Newsletter Workflow!\n\n      This workflow will help you:\n      1. Prepare a verified email identity and contact list for your newsletter.\n      2. Gather subscriber email addresses and send them a welcome email.\n      3. Send a weekly coupon newsletter to your subscribers using email templates.\n      4. Monitor your sending activity and metrics in the AWS console.\n\n      Let's get started!\n      \"\"\";\n  private final SesV2Client sesClient;\n  private String verifiedEmail = \"\";\n\n  public void test_setVerifiedEmail(String verifiedEmail) {\n    this.verifiedEmail = verifiedEmail;\n  }\n\n  /**\n   * Constructor for the Workflow class.\n   *\n   * @param sesClient The SesV2Client instance to be used for interacting with the\n   *                  SES v2 service.\n   */\n  public NewsletterWorkflow(SesV2Client sesClient) {\n    this.sesClient = sesClient;\n  }\n\n  /**\n   * The main entry point of the application.\n   *\n   * @param args Command-line arguments.\n   */\n  public static void main(String[] args) {\n    System.out.println(INTRO);\n    SesV2Client sesClient = SesV2Client.builder()\n        .region(Region.AWS_GLOBAL)\n        .build();\n\n    new NewsletterWorkflow(sesClient).run();\n  }\n\n  /**\n   * Orchestrates the execution of the workflow steps.\n   */\n  public void run() {\n    try {\n      prepareApplication();\n      gatherSubscriberEmails();\n      sendCouponNewsletter();\n      monitorAndReview();\n    } catch (Exception e) {\n    }\n    cleanUp();\n  }\n\n  /**\n   * Prepares the application by creating an email identity and a contact list.\n   */\n  public void prepareApplication() throws IOException {\n    try {\n      // 1. Create an email identity\n      System.out.println(\"Enter the verified email address: \");\n      Scanner scanner = new Scanner(System.in);\n      this.verifiedEmail = scanner.nextLine();\n      scanner.close();\n      CreateEmailIdentityRequest createEmailIdentityRequest = CreateEmailIdentityRequest.builder()\n          .emailIdentity(verifiedEmail)\n          .build();\n      sesClient.createEmailIdentity(createEmailIdentityRequest);\n      System.out.println(\"Email identity created: \" + verifiedEmail);\n    } catch (AlreadyExistsException e) {\n      System.out.println(\"Email identity already exists, skipping creation: \" + verifiedEmail);\n    } catch (NotFoundException e) {\n      System.err.println(\"The provided email address is not verified: \" + verifiedEmail);\n      throw e;\n    } catch (LimitExceededException e) {\n      System.err\n          .println(\"You have reached the limit for email identities. Please remove some identities and try again.\");\n      throw e;\n    } catch (SesV2Exception e) {\n      System.err.println(\"Error creating email identity: \" + e.getMessage());\n      throw e;\n    }\n\n    try {\n      // 2. Create a contact list\n      String contactListName = CONTACT_LIST_NAME;\n      CreateContactListRequest createContactListRequest = CreateContactListRequest.builder()\n          .contactListName(contactListName)\n          .build();\n      sesClient.createContactList(createContactListRequest);\n      System.out.println(\"Contact list created: \" + contactListName);\n    } catch (AlreadyExistsException e) {\n      System.out.println(\"Contact list already exists, skipping creation: weekly-coupons-newsletter\");\n    } catch (LimitExceededException e) {\n      System.err.println(\"Limit for contact lists has been exceeded.\");\n      throw e;\n    } catch (SesV2Exception e) {\n      System.err.println(\"Error creating contact list: \" + e.getMessage());\n      throw e;\n    }\n    try {\n      // Create an email template named \"weekly-coupons\"\n      String newsletterHtml = Files.readString(Paths.get(\"resources/coupon_newsletter/coupon-newsletter.html\"));\n      String newsletterText = Files.readString(Paths.get(\"resources/coupon_newsletter/coupon-newsletter.txt\"));\n\n      CreateEmailTemplateRequest templateRequest = CreateEmailTemplateRequest.builder()\n          .templateName(TEMPLATE_NAME)\n          .templateContent(EmailTemplateContent.builder()\n              .subject(\"Weekly Coupons Newsletter\")\n              .html(newsletterHtml)\n              .text(newsletterText)\n              .build())\n          .build();\n\n      sesClient.createEmailTemplate(templateRequest);\n\n      System.out.println(\"Email template created: \" + TEMPLATE_NAME);\n    } catch (AlreadyExistsException e) {\n      // If the template already exists, skip this step and proceed with the next\n      // operation\n      System.out.println(\"Email template already exists, skipping creation...\");\n    } catch (LimitExceededException e) {\n      // If the limit for email templates is exceeded, fail the workflow and inform\n      // the user\n      System.err.println(\"You have reached the limit for email templates. Please remove some templates and try again.\");\n      throw e;\n    } catch (Exception e) {\n      System.err.println(\"Error occurred while creating email template: \" + e.getMessage());\n      throw e;\n    }\n  }\n\n  /**\n   * Helper method to create subscriber subaddresses.\n   *\n   * @param baseEmail The base email address (e.g., \"user@example.com\")\n   * @return A list of three email addresses with subaddress extensions\n   */\n  private List<String> createSubscriberSubaddresses(String baseEmail) {\n    List<String> subaddresses = new ArrayList<>();\n    String[] parts = baseEmail.split(\"@\");\n    String username = parts[0];\n    String domain = parts[1];\n\n    for (int i = 1; i <= 3; i++) {\n      String subaddress = username + \"+ses-weekly-newsletter-\" + i + \"@\" + domain;\n      subaddresses.add(subaddress);\n    }\n\n    return subaddresses;\n  }\n\n  /**\n   * Gathers subscriber email addresses and sends a welcome email to each new\n   * subscriber.\n   */\n  public void gatherSubscriberEmails() throws IOException {\n    Scanner scanner = new Scanner(System.in);\n    System.out.print(\"Enter a base email address for subscribing to the newsletter: \");\n    String baseEmail = scanner.nextLine();\n    scanner.close();\n\n    for (String emailAddress : createSubscriberSubaddresses(baseEmail)) {\n      try {\n        // Create a new contact with the provided email address in the\n        // \"weekly-coupons-newsletter\" contact list\n        CreateContactRequest contactRequest = CreateContactRequest.builder()\n            .contactListName(CONTACT_LIST_NAME)\n            .emailAddress(emailAddress)\n            .build();\n\n        sesClient.createContact(contactRequest);\n\n        System.out.println(\"Contact created: \" + emailAddress);\n\n        // Send a welcome email to the new contact\n        String welcomeHtml = Files.readString(Paths.get(\"resources/coupon_newsletter/welcome.html\"));\n        String welcomeText = Files.readString(Paths.get(\"resources/coupon_newsletter/welcome.txt\"));\n\n        SendEmailRequest welcomeEmailRequest = SendEmailRequest.builder()\n            .fromEmailAddress(this.verifiedEmail)\n            .destination(Destination.builder().toAddresses(emailAddress).build())\n            .content(EmailContent.builder()\n                .simple(\n                    Message.builder()\n                        .subject(Content.builder().data(\"Welcome to the Weekly Coupons Newsletter\").build())\n                        .body(Body.builder()\n                            .text(Content.builder().data(welcomeText).build())\n                            .html(Content.builder().data(welcomeHtml).build())\n                            .build())\n                        .build())\n                .build())\n            .build();\n        SendEmailResponse welcomeEmailResponse = sesClient.sendEmail(welcomeEmailRequest);\n        System.out.println(\"Welcome email sent: \" + welcomeEmailResponse.messageId());\n      } catch (AlreadyExistsException e) {\n        // If the contact already exists, skip this step for that contact and proceed\n        // with the next contact\n        System.out.println(\"Contact already exists, skipping creation...\");\n      } catch (Exception e) {\n        System.err.println(\"Error occurred while processing email address \" + emailAddress + \": \" + e.getMessage());\n        throw e;\n      }\n    }\n  }\n\n  /**\n   * Sends the coupon newsletter to the list of contacts.\n   */\n  public void sendCouponNewsletter() {\n    try {\n      // Retrieve the list of contacts from the \"weekly-coupons-newsletter\" contact\n      // list\n      ListContactsRequest contactListRequest = ListContactsRequest.builder()\n          .contactListName(CONTACT_LIST_NAME)\n          .build();\n      ListContactsResponse contactListResponse = sesClient.listContacts(contactListRequest);\n      List<String> contactEmails = contactListResponse.contacts().stream()\n          .map(Contact::emailAddress)\n          .toList();\n\n      // Send an email using the \"weekly-coupons\" template to each contact in the list\n      String coupons = Files.readString(Paths.get(\"resources/coupon_newsletter/sample_coupons.json\"));\n      for (String emailAddress : contactEmails) {\n        SendEmailRequest newsletterRequest = SendEmailRequest.builder()\n            .destination(Destination.builder().toAddresses(emailAddress).build())\n```\n\n----------------------------------------\n\nTITLE: Bundling JavaScript Modules with Webpack\nDESCRIPTION: Command to bundle Node.js modules using Webpack for web deployment, creating a bundled main.js file from estimate-age.js.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/rekognition/estimate-age-example/src/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwebpack estimate-age.js --mode development --target web --devtool false -o main.js\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for AWS SDK Examples\nDESCRIPTION: This requirements file specifies the minimum versions of boto3 and pytest needed for AWS SDK examples. boto3 is the official AWS SDK for Python, while pytest is used for automated testing of the code examples.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/cloudfront/requirements.txt#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nboto3>=1.26.79\npytest>=7.2.1\n```\n\n----------------------------------------\n\nTITLE: Invoking Stable Diffusion Model in PHP\nDESCRIPTION: This code snippet demonstrates the invocation of the Stable Diffusion model using the Amazon Bedrock Runtime service. It's implemented as a method in the BedrockRuntimeService class.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/php/example_code/bedrock-agent-runtime/README.md#2025-04-09_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nBedrockRuntimeService.php#L94\n```\n\n----------------------------------------\n\nTITLE: Running Examples in Build Directory\nDESCRIPTION: Command example showing how to execute built examples from the build directory. The executables are created with 'run_' prefix and the source filename.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/kinesis/README.md#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n./run_my_action\n```\n\n----------------------------------------\n\nTITLE: Structuring Upload Lambda Function Output in JSON\nDESCRIPTION: JSON structure representing the output of the UploadFn Lambda function, which includes a presigned URL for uploading the specified image file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/applications/photo-asset-manager/README_TEMPLATE.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"statusCode\": 200,\n  \"headers\": {\n    \"Access-Control-Allow-Origin\": \"*\"\n  },\n  \"body\": \"{\\\"url\\\":\\\"https://xxxxxxxxxxxx.amazonaws.com/xxxxxxxxxxxxxxx-mountain.jpg?X-Amz-Security-xxxxxxxxxxxxxxxxxxx\\\"}\",\n  \"isBase64Encoded\": false\n }\n```\n\n----------------------------------------\n\nTITLE: Implementing DynamoDB Data Persistence for Ticket Management in Java\nDESCRIPTION: The PersistCase class handles storing ticket assignment data in a DynamoDB table using the DynamoDB Enhanced Client. It includes a Case class with annotations for mapping attributes to the database schema.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_workflows_stepfunctions/README.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npackage example;\n\nimport software.amazon.awssdk.enhanced.dynamodb.DynamoDbEnhancedClient;\nimport software.amazon.awssdk.enhanced.dynamodb.DynamoDbTable;\nimport software.amazon.awssdk.enhanced.dynamodb.TableSchema;\nimport software.amazon.awssdk.enhanced.dynamodb.mapper.annotations.DynamoDbSortKey;\nimport software.amazon.awssdk.regions.Region;\nimport software.amazon.awssdk.services.dynamodb.DynamoDbClient;\nimport software.amazon.awssdk.services.dynamodb.model.DynamoDbException;\nimport software.amazon.awssdk.enhanced.dynamodb.mapper.annotations.DynamoDbBean;\nimport software.amazon.awssdk.enhanced.dynamodb.mapper.annotations.DynamoDbPartitionKey;\nimport java.time.Instant;\nimport java.time.LocalDate;\nimport java.time.LocalDateTime;\nimport java.time.ZoneOffset;\n\n/*\n Prior to running this code example, create a table named Case with a PK named id\n*/\n\npublic class PersistCase {\n\n// Puts an item into a DynamoDB table\npublic void putRecord(String caseId, String employeeName, String email) {\n\n        // Create a DynamoDbClient object\n        Region region = Region.US_WEST_2;\n        DynamoDbClient ddb = DynamoDbClient.builder()\n                .region(region)\n                .build();\n\n        // Create a DynamoDbEnhancedClient and use the DynamoDbClient object\n        DynamoDbEnhancedClient enhancedClient = DynamoDbEnhancedClient.builder()\n                .dynamoDbClient(ddb)\n                .build();\n\n        try {\n            // Create a DynamoDbTable object\n            DynamoDbTable<Case> caseTable = enhancedClient.table(\"Case\", TableSchema.fromBean(Case.class));\n\n            // Create an Instant object\n            LocalDate localDate = LocalDate.parse(\"2020-04-07\");\n            LocalDateTime localDateTime = localDate.atStartOfDay();\n            Instant instant = localDateTime.toInstant(ZoneOffset.UTC);\n\n            // Populate the table\n            Case caseRecord = new Case();\n            caseRecord.setName(employeeName);\n            caseRecord.setId(caseId);\n            caseRecord.setEmail(email);\n            caseRecord.setRegistrationDate(instant) ;\n\n            // Put the case data into a DynamoDB table\n            caseTable.putItem(caseRecord);\n\n        } catch (DynamoDbException e) {\n            System.err.println(e.getMessage());\n            System.exit(1);\n        }\n        System.out.println(\"done\");\n    }\n\n\n    // Create the Case table to track open cases created in the workflow\n    @DynamoDbBean\n    public static class Case {\n\n        private String id;\n        private String name;\n        private String email;\n        private Instant regDate;\n\n        @DynamoDbPartitionKey\n        public String getId() {\n            return this.id;\n        };\n\n        public void setId(String id) {\n\n            this.id = id;\n        }\n\n        @DynamoDbSortKey\n        public String getName() {\n            return this.name;\n\n        }\n\n        public void setName(String name) {\n\n            this.name = name;\n        }\n\n        public String getEmail() {\n            return this.email;\n        }\n\n        public void setEmail(String email) {\n\n            this.email = email;\n        }\n\n        public Instant getRegistrationDate() {\n            return regDate;\n        }\n        public void setRegistrationDate(Instant registrationDate) {\n\n            this.regDate = registrationDate;\n        }\n       }\n      }\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for AWS SDK Examples\nDESCRIPTION: This snippet defines the minimum required versions for Boto3 and pytest packages. Boto3 is the AWS SDK for Python, used for interacting with AWS services. pytest is a testing framework for Python, likely used for running unit tests on the example code.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/kms/requirements.txt#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nboto3>=1.26.79\npytest>=7.2.1\n```\n\n----------------------------------------\n\nTITLE: Run AWS Step Functions Unit Tests\nDESCRIPTION: Command to execute the unit tests using pytest in the stepfunctions directory.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/cross_service/stepfunctions_messenger/README.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython -m pytest\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Build Dependencies for Kotlin SNS Application\nDESCRIPTION: Gradle build configuration file that sets up the project dependencies for a Spring Boot application using AWS SDK for Kotlin with SNS and Translate services. It specifies Java compatibility, Kotlin compiler settings, and includes Spring Web, Thymeleaf, and other necessary libraries.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/subpub_app/README.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nimport org.jetbrains.kotlin.gradle.tasks.KotlinCompile\n\nplugins {\n    kotlin(\"jvm\") version \"1.9.0\"\n    application\n}\n\ngroup = \"me.scmacdon\"\nversion = \"1.0-SNAPSHOT\"\n\njava {\n    sourceCompatibility = JavaVersion.VERSION_17\n    targetCompatibility = JavaVersion.VERSION_17\n}\n\nbuildscript {\n    repositories {\n        maven(\"https://plugins.gradle.org/m2/\")\n    }\n    dependencies {\n        classpath(\"org.jlleitschuh.gradle:ktlint-gradle:10.3.0\")\n    }\n}\n\nrepositories {\n    mavenCentral()\n}\napply(plugin = \"org.jlleitschuh.gradle.ktlint\")\ndependencies {\n    implementation(\"aws.sdk.kotlin:sns:0.33.1-beta\")\n    implementation(\"aws.sdk.kotlin:translate:0.33.1-beta\")\n    implementation(\"aws.smithy.kotlin:http-client-engine-okhttp:0.28.0\")\n    implementation(\"aws.smithy.kotlin:http-client-engine-crt:0.28.0\")\n    implementation(\"org.springframework.boot:spring-boot-starter-web:2.7.4\")\n    implementation(\"org.springframework.boot:spring-boot-starter-thymeleaf:2.7.4\")\n    implementation(\"com.fasterxml.jackson.module:jackson-module-kotlin:2.13.3\")\n    implementation(\"org.jetbrains.kotlin:kotlin-reflect\")\n    implementation(\"org.jetbrains.kotlin:kotlin-stdlib-jdk8\")\n    implementation(\"net.sourceforge.jexcelapi:jxl:2.6.10\")\n    implementation(\"commons-io:commons-io:2.10.0\")\n    testImplementation(\"org.springframework.boot:spring-boot-starter-test:2.7.3\")\n}\n\ntasks.withType<KotlinCompile> {\n    kotlinOptions {\n        freeCompilerArgs = listOf(\"-Xjsr305=strict\")\n        jvmTarget = \"17\"\n    }\n}\n\ntasks.withType<Test> {\n    useJUnitPlatform()\n}\n```\n\n----------------------------------------\n\nTITLE: Running the ACM Basics Example in Python\nDESCRIPTION: This snippet demonstrates how to run the certificate_basics.py example, which showcases basic ACM operations like requesting, importing, listing, and removing certificates.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/acm/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython certificate_basics.py\n```\n\n----------------------------------------\n\nTITLE: Executing Batch PartiQL Statements in DynamoDB using C#\nDESCRIPTION: This code snippet shows how to execute batch PartiQL statements in DynamoDB using the AWS SDK for .NET. It's part of a larger scenario for querying a table using batches of PartiQL statements.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/dynamodb/README.md#2025-04-09_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nscenarios/PartiQL_Batch_Scenario/PartiQL_Batch_Scenario/PartiQLBatchMethods.cs#L10\n```\n\n----------------------------------------\n\nTITLE: Debugging AWS SDK for Go Response from DynamoDB ListTables API\nDESCRIPTION: This debug log shows the raw HTTP response from DynamoDB's ListTables API call. It includes all headers, status code, and details of the response structure.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/example_code/extending_sdk/tableList.txt#2025-04-09_snippet_1\n\nLANGUAGE: log\nCODE:\n```\n2017/10/25 11:10:58 DEBUG: Response dynamodb/ListTables Details:\n---[ RESPONSE ]--------------------------------------\nHTTP/1.1 200 OK\nContent-Length: 177\nConnection: keep-alive\nContent-Type: application/x-amz-json-1.0\nDate: Wed, 25 Oct 2017 18:10:58 GMT\nServer: Server\nX-Amz-Crc32: 3023160996\nX-Amzn-Requestid: M5B4BM4UU569MVBSDG5O2O9ITJVV4KQNSO5AEMVJF66Q9ASUAAJG\n\n\n-----------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Building S3 Encryption Examples and Tests\nDESCRIPTION: Creates executable targets for each S3 encryption example and configures compiler options. When testing is enabled, it also creates library targets and unit tests for each example that has a corresponding test file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/s3encryption/CMakeLists.txt#2025-04-09_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nforeach(file ${AWSDOC_S3_ENCRYPTION_SOURCE})\n    get_filename_component(EXAMPLE ${file} NAME_WE)\n\n    # Build the code example executables.\n    set(EXAMPLE_EXE run_${EXAMPLE})\n\n    add_executable(${EXAMPLE_EXE} ${AWSDOC_S3_ENCRYPTION_HEADERS} ${file})\n\n    if(MSVC AND BUILD_SHARED_LIBS)\n        target_compile_definitions(${EXAMPLE_EXE} PUBLIC \"USE_IMPORT_EXPORT\")\n        target_compile_definitions(${EXAMPLE_EXE} PRIVATE \"AWSDOC_S3ENCRYPTION_EXPORTS\")\n    endif()\n    if(NOT MSVC)\n        list(APPEND AWS_COMPILER_WARNINGS \"-Wall\" \"-pedantic\" \"-Wextra\")\n        target_compile_options(${EXAMPLE_EXE} PRIVATE \"${AWS_COMPILER_WARNINGS}\")\n    endif()\n\n    target_include_directories(${EXAMPLE_EXE} PUBLIC\n        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\n        $<INSTALL_INTERFACE:include>)\n    target_link_libraries(${EXAMPLE_EXE} ${AWSSDK_LINK_LIBRARIES}\n        ${AWSSDK_PLATFORM_DEPS})\n\n    if(BUILD_TESTING)\n        # Enable testing for this directory and below.\n        enable_testing()\n\n        # Build the code example libraries.\n        set(EXAMPLE_LIB ${EXAMPLE})\n\n        add_library(${EXAMPLE_LIB} ${AWSDOC_S3_ENCRYPTION_HEADERS} ${file})\n\n        if(MSVC AND BUILD_SHARED_LIBS)\n            target_compile_definitions(${EXAMPLE_LIB} PUBLIC \"USE_IMPORT_EXPORT\")\n            target_compile_definitions(${EXAMPLE_LIB} PRIVATE \"AWSDOC_S3ENCRYPTION_EXPORTS\")\n        endif()\n\n        target_include_directories(${EXAMPLE_LIB} PUBLIC\n            $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\n            $<INSTALL_INTERFACE:include>)\n        target_link_libraries(${EXAMPLE_LIB} ${AWSSDK_LINK_LIBRARIES}\n            ${AWSSDK_PLATFORM_DEPS})\n\n        # Build the code example unit tests.\n        set(EXAMPLE_TEST test_${EXAMPLE})\n        set(EXAMPLE_TEST_FILE ${CMAKE_CURRENT_SOURCE_DIR}/tests/test_${EXAMPLE}.cpp)\n\n        if(EXISTS ${EXAMPLE_TEST_FILE})\n            add_executable(${EXAMPLE_TEST} ${EXAMPLE_TEST_FILE} )\n\n            target_include_directories(${EXAMPLE_TEST} PUBLIC\n                $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\n                $<INSTALL_INTERFACE:include>)\n            target_link_libraries(${EXAMPLE_TEST} ${EXAMPLE_LIB} )\n            add_test(${EXAMPLE_TEST} ${EXAMPLE_TEST})\n        endif()\n\n    endif()\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Running CloudWatch Logs Commands\nDESCRIPTION: Example showing how to run CloudWatch Logs commands from the command line using Node.js. Demonstrates command execution for both single actions and scenarios.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/cloudwatch-logs/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode ./actions/<fileName>\n```\n\nLANGUAGE: bash\nCODE:\n```\nnode ./scenarios/<fileName>\n```\n\nLANGUAGE: bash\nCODE:\n```\nnode ./scenarios/<fileName> --option1 --option2\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugin Build Rules\nDESCRIPTION: Includes the CMake file containing generated build rules for Flutter plugins. This ensures all plugins are properly built and integrated into the application.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/cognito_flutter_mobile_app/linux/CMakeLists.txt#2025-04-09_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Requirements\nDESCRIPTION: Defines minimum required package dependencies using pip requirements.txt format. Specifies boto3 version 1.26.79 or higher for AWS SDK access and pytest 7.2.1 or higher for testing.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/sesv2/requirements.txt#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nboto3>=1.26.79\npytest>=7.2.1\n```\n\n----------------------------------------\n\nTITLE: Disabling Metrics Collection for Auto Scaling in .NET\nDESCRIPTION: This snippet references the DisableMetricsCollection method which turns off the collection of CloudWatch metrics for an Auto Scaling group.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv4/AutoScaling/README.md#2025-04-09_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nDisableMetricsCollection(Actions/AutoScalingWrapper.cs#L202)\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies\nDESCRIPTION: Specifies required Python package dependencies with minimum version constraints. Requires boto3 version 1.26.79 or higher for AWS SDK functionality and pytest version 7.2.1 or higher for testing.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/pinpoint/requirements.txt#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nboto3>=1.26.79\npytest>=7.2.1\n```\n\n----------------------------------------\n\nTITLE: Creating an AWS AppSync Data Source using Java SDK\nDESCRIPTION: This code snippet shows how to create a data source for AWS AppSync using the CreateDataSource command with the AppSyncClient object in Java.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/appsync/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nCreateDataSource command\n```\n\n----------------------------------------\n\nTITLE: Retrieve Target Group Health Status\nDESCRIPTION: AWS CLI commands to get the target group ARN and check the health status of instances in the target group.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/aws-cfn/cross-service/resilient-workflow/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\naws cloudformation describe-stacks --stack-name resilience-demo --query 'Stacks[0].Outputs[?OutputKey==`TGArn`].OutputValue | [0]'\naws elbv2 describe-target-health --target-group-arn \"arn:aws:elasticloadbalancing:us-east-1:000000000000:targetgroup/doc-example-resilience-tg/0123456789abcdef\"\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Data Structure for Entity Resolution\nDESCRIPTION: Example JSON records containing customer information with id, name, and email fields for entity matching.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/basics/entity_resolution/SPECIFICATION.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"id\":\"1\",\"name\":\"Jane Doe\",\"email\":\"jane.doe@example.com\"}\n{\"id\":\"2\",\"name\":\"John Doe\",\"email\":\"john.doe@example.com\"}\n{\"id\":\"3\",\"name\":\"Jorge Souza\",\"email\":\"jorge_souza@example.com\"}\n```\n\n----------------------------------------\n\nTITLE: Streaming conversation with Amazon Titan Text model in C#\nDESCRIPTION: Demonstrates how to stream a conversation with the Amazon Titan Text model using Amazon Bedrock Runtime.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv4/Bedrock-runtime/README.md#2025-04-09_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nModels/AmazonTitanText/ConverseStream/ConverseStream.cs#L4\n```\n\n----------------------------------------\n\nTITLE: Configuring Lambda Execution Policy for SageMaker Geospatial Operations\nDESCRIPTION: JSON policy document defining permissions for Lambda to interact with SQS, CloudWatch Logs, and SageMaker Geospatial services. This policy grants necessary permissions for the Lambda function to process geospatial jobs.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/sagemaker_pipelines/SPECIFICATION.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    Version: \"2012-10-17\",\n    Statement: [\n      {\n        Effect: \"Allow\",\n        Action: [\n          \"sqs:ReceiveMessage\",\n          \"sqs:DeleteMessage\",\n          \"sqs:GetQueueAttributes\",\n          \"logs:CreateLogGroup\",\n          \"logs:CreateLogStream\",\n          \"logs:PutLogEvents\",\n          \"sagemaker-geospatial:StartVectorEnrichmentJob\",\n          \"sagemaker-geospatial:GetVectorEnrichmentJob\",\n          \"sagemaker:SendPipelineExecutionStepFailure\",\n          \"sagemaker:SendPipelineExecutionStepSuccess\",\n          \"sagemaker-geospatial:ExportVectorEnrichmentJob\"\n        ],\n        Resource: \"*\",\n      },\n      {\n        Effect: \"Allow\",\n        Action: [\"iam:PassRole\"],\n        Resource: `${pipelineExecutionRoleArn}`,\n        Condition: {\n          StringEquals: {\n            \"iam:PassedToService\": [\n              \"sagemaker.amazonaws.com\",\n              \"sagemaker-geospatial.amazonaws.com\",\n            ],\n          },\n        },\n      },\n    ],\n  }\n```\n\n----------------------------------------\n\nTITLE: Importing Redshift Client in JavaScript\nDESCRIPTION: This code snippet shows how to import and use the Redshift client from the AWS SDK for JavaScript (v3). It includes references to CreateCluster, DeleteCluster, DescribeClusters, and ModifyCluster operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/redshift/README.md#2025-04-09_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { RedshiftClient } from \"@aws-sdk/client-redshift\";\n```\n\n----------------------------------------\n\nTITLE: Starting the React Item Tracker Development Server\nDESCRIPTION: Command to run the React item tracker web client in development mode. This will start a local development server and open the application in your default web browser at http://localhost:3000.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/resources/clients/react/item-tracker/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Debugging AWS SDK for Go Request to DynamoDB ListTables API\nDESCRIPTION: The debug log shows the raw HTTP request from AWS SDK for Go to the DynamoDB ListTables API. It includes all headers with authorization signature, request content, and formatting.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/example_code/extending_sdk/tableList.txt#2025-04-09_snippet_0\n\nLANGUAGE: log\nCODE:\n```\n2017/10/25 11:10:57 DEBUG: Request dynamodb/ListTables Details:\n---[ REQUEST POST-SIGN ]-----------------------------\nPOST / HTTP/1.1\nHost: dynamodb.us-west-2.amazonaws.com\nUser-Agent: aws-sdk-go/1.10.34 (go1.8; windows; amd64)\nContent-Length: 2\nAccept-Encoding: identity\nAuthorization: AWS4-HMAC-SHA256 Credential=ACCESS-KEY/20171025/us-west-2/dynamodb/aws4_request, SignedHeaders=accept-encoding;content-length;content-type;host;x-amz-date;x-amz-target, Signature=9c92efe5d6c597cf29e4f7cc74de6dc2e39f8010a0d4957a397c59ef9cde21f2\nContent-Type: application/x-amz-json-1.0\nCustomHeader: 10\nX-Amz-Date: 20171025T181057Z\nX-Amz-Target: DynamoDB_20120810.ListTables\n\n{}\n-----------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Creating IAM Role Command\nDESCRIPTION: Command line usage pattern for creating an IAM role that grants CloudWatch Events permissions.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/cloudwatch/README.md#2025-04-09_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ngo run CreateRole -p POLICY -r ROLE\n```\n\n----------------------------------------\n\nTITLE: Invoking Cohere Command R and R+ models with response streaming in C#\nDESCRIPTION: Illustrates how to invoke the Cohere Command R and R+ models with response streaming using Amazon Bedrock Runtime.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv4/Bedrock-runtime/README.md#2025-04-09_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\nModels/CohereCommand/Command_R_InvokeModelWithResponseStream/InvokeModelWithResponseStream.cs#L4\n```\n\n----------------------------------------\n\nTITLE: Security Group Rule Addition in Python\nDESCRIPTION: Adds a new security group rule to allow inbound traffic on a specified port from the user's IP address. Uses the EC2 client to authorize ingress rules.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/resilient_service/SPECIFICATION.md#2025-04-09_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nif q.ask(f\"Do you want to add a rule to security group {sec_group['GroupId']} to allow\\n\"\n      f\"inbound traffic on port {self.port} from your computer's IP address of {current_ip_address}? (y/n) \",\n      q.is_yesno):\n    self.ec2_client.authorize_security_group_ingress(\n        GroupId=sec_group_id, CidrIp=f'{ip_address}/32', FromPort=port, ToPort=port, IpProtocol='tcp')\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container with AWS Credentials\nDESCRIPTION: Command to run the Docker container with AWS SDK for C++ examples, mounting the local AWS credentials file into the container.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/README.rst#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --volume ~/.aws/credentials:/home/tests/.aws/credentials <container_tag>\n```\n\n----------------------------------------\n\nTITLE: Running IAM Role Management Example in Python\nDESCRIPTION: Command to run an example that demonstrates role management, including creating a role, attaching and detaching policies, and deleting a role.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/iam/README.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npython role_wrapper.py\n```\n\n----------------------------------------\n\nTITLE: Deprecated Delete Role Implementation - IAM JavaScript SDK V3\nDESCRIPTION: This code example for deleting an IAM role has been superseded by newer examples in the AWS documentation under Code examples > Actions and scenarios > IAM section.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/iam/dead-snippets.txt#2025-04-09_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// snippet-start:[iam.JavaScript.users.deleterolev3]\nThis code example has been superseded by the example in\nCode examples > Actions and scenarios > IAM\n// snippet-end:[iam.JavaScript.users.deleterolev3]\n```\n\n----------------------------------------\n\nTITLE: Downloading and Processing AWS SES API Documentation with Bash\nDESCRIPTION: This Bash script downloads API documentation for six AWS SES operations (CreateContact, CreateContactList, CreateEmailIdentity, CreateEmailTemplate, ListContacts, and SendEmail) using curl. It then processes the HTML content using pup and html2text, and saves the result as markdown files with a YAML header.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/sesv2_weekly_mailer/content/tmp/api_ref.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho \"---\\nskip: true\\n---\" > 10_CreateContact.md\ncurl https://docs.aws.amazon.com/ses/latest/APIReference-V2/API_CreateContact.html | pup \"#main-col-body\" | html2text -nobs -utf8 >> 10_CreateContact.md\n\necho \"---\\nskip: true\\n---\" > 10_CreateContactList.md\ncurl https://docs.aws.amazon.com/ses/latest/APIReference-V2/API_CreateContactList.html | pup \"#main-col-body\" | html2text -nobs -utf8 >> 10_CreateContactList.md\n\necho \"---\\nskip: true\\n---\" > 10_CreateEmailIdentity.md\ncurl https://docs.aws.amazon.com/ses/latest/APIReference-V2/API_CreateEmailIdentity.html | pup \"#main-col-body\" | html2text -nobs -utf8 >> 10_CreateEmailIdentity.md\n\necho \"---\\nskip: true\\n---\" > 10_CreateEmailTemplate.md\ncurl https://docs.aws.amazon.com/ses/latest/APIReference-V2/API_CreateEmailTemplate.html | pup \"#main-col-body\" | html2text -nobs -utf8 >> 10_CreateEmailTemplate.md\n\necho \"---\\nskip: true\\n---\" > 10_ListContacts.md\ncurl https://docs.aws.amazon.com/ses/latest/APIReference-V2/API_ListContacts.html | pup \"#main-col-body\" | html2text -nobs -utf8 >> 10_ListContacts.md\n\necho \"---\\nskip: true\\n---\" > 10_SendEmail.md\ncurl https://docs.aws.amazon.com/ses/latest/APIReference-V2/API_SendEmail.html | pup \"#main-col-body\" | html2text -nobs -utf8 >> 10_SendEmail.md\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Dependencies for AWS SDK Example Projects\nDESCRIPTION: This requirements file lists the necessary Python packages and their minimum versions needed to run AWS SDK code examples. It includes boto3 for AWS API interactions, pytest for testing, and UI enhancement libraries like alive-progress and rich.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/ec2/requirements.txt#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nboto3>=1.26.79\npytest>=7.2.1\nalive-progress==2.4.1\nrich==13.5.2\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Packages\nDESCRIPTION: Command to install the required dependencies for the AWS HealthLake examples using pip in a virtual environment.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/healthlake/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests with RSpec\nDESCRIPTION: Command to run integration tests using RSpec with the integ tag. These tests make actual AWS requests and might create or destroy resources in your account, potentially incurring charges.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/ruby/README.md#2025-04-09_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\nrspec --tag integ\n```\n\n----------------------------------------\n\nTITLE: Running Hello Aurora Example\nDESCRIPTION: Command to execute the Hello Aurora example that demonstrates basic Aurora functionality.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/aurora/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython hello/hello_aurora.py\n```\n\n----------------------------------------\n\nTITLE: Deploying AWS CDK App Using CDK Commands\nDESCRIPTION: Direct deployment of a CDK app using CDK CLI commands. Includes installation of dependencies, synthesis of CloudFormation template, and deployment.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/resources/cdk/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install && cdk synth && cdk deploy\n```\n\n----------------------------------------\n\nTITLE: Enabling Metrics Collection for Auto Scaling in .NET\nDESCRIPTION: This snippet references the EnableMetricsCollection method which enables the collection of CloudWatch metrics for an Auto Scaling group.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv4/AutoScaling/README.md#2025-04-09_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nEnableMetricsCollection(Actions/AutoScalingWrapper.cs#L223)\n```\n\n----------------------------------------\n\nTITLE: Checking AWS CDK Toolkit Version\nDESCRIPTION: Command to verify the installed version of the AWS CDK toolkit.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/applications/photo-asset-manager/cdk/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cdk --version\n```\n\n----------------------------------------\n\nTITLE: Plain Text Welcome Email Template\nDESCRIPTION: Plain text version of the welcome email template for email clients that don't support HTML. Contains the same welcome message and content as the HTML version but without formatting.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/sesv2_weekly_mailer/content/41_welcome_html.md#2025-04-09_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nWelcome to the Weekly Coupons Newsletter!\n\nThank you for subscribing to our weekly newsletter. Every week, you'll receive a list of exciting coupons and deals from our partners.\n\nStay tuned for your first newsletter, coming soon!\n\nBest regards,\nThe Weekly Coupons Team\n```\n\n----------------------------------------\n\nTITLE: Running a Single Action Example in JavaScript\nDESCRIPTION: This snippet demonstrates how to run a single action example using Node.js. It executes a specific file in the 'actions' directory.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/sfn/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode ./actions/<fileName>\n```\n\n----------------------------------------\n\nTITLE: Updating Auto Scaling Group Configuration in .NET\nDESCRIPTION: This snippet references the UpdateAutoScalingGroup method which modifies the configuration of an existing Auto Scaling group.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv4/AutoScaling/README.md#2025-04-09_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nUpdateAutoScalingGroup(Actions/AutoScalingWrapper.cs#L306)\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for AWS SDK Examples\nDESCRIPTION: This code snippet defines the minimum required versions for boto3, botocore, and pytest packages. These dependencies are essential for running AWS SDK examples and tests in Python.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/iotsitewise/requirements.txt#2025-04-09_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nboto3>=1.35.55\nbotocore>=1.35.55\npytest>=8.3.3\n```\n\n----------------------------------------\n\nTITLE: Describing AWS Batch Job Queues in Java\nDESCRIPTION: Demonstrates how to get information about job queues in AWS Batch using the describeJobQueues operation. This retrieves configuration details about job queues.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/batch/README.md#2025-04-09_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\nDescribeJobQueues\n```\n\n----------------------------------------\n\nTITLE: Deleting an AWS Glue Job with .NET\nDESCRIPTION: This code demonstrates how to delete an AWS Glue job using the AWS SDK for .NET. It takes the job name as a parameter.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Glue/README.md#2025-04-09_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nDeleteJob\n```\n\n----------------------------------------\n\nTITLE: Detecting Entities with Amazon Comprehend in Java\nDESCRIPTION: Illustrates the use of Amazon Comprehend for entity recognition. This function identifies and extracts entities such as names, places, and organizations from text.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/comprehend/README.md#2025-04-09_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nDetectEntities\n```\n\n----------------------------------------\n\nTITLE: Running Single Action Scripts in Node.js\nDESCRIPTION: Command for executing individual Amazon SES action scripts using Node.js\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/ses/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode ./actions/<fileName>\n```\n\n----------------------------------------\n\nTITLE: Configuring IAM Guest Role Permissions for Lambda\nDESCRIPTION: IAM policy JSON that grants permissions to invoke Lambda functions. This policy is attached to the Cognito identity pool's guest role to allow unauthenticated access to Lambda functions.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/cross-services/lambda-for-browser/README.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Action\": \"lambda:InvokeFunction\",\n      \"Resource\": \"*\",\n      \"Effect\": \"Allow\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating CloudWatch Rule Command\nDESCRIPTION: Command line usage pattern for creating a CloudWatch rule with schedule-based event triggering.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/cloudwatch/README.md#2025-04-09_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ngo run CreateRule -r RULE -a ROLE-ARN -s SCHEDULE\n```\n\n----------------------------------------\n\nTITLE: Running Lambda Basics Example in Swift\nDESCRIPTION: Command to run the main Lambda basics program, demonstrating how to pass archive paths as arguments to the Swift executable.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/swift/example_code/lambda/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nswift run lambda-basics --incpath <path-of-increment-archive> --calcpath <path-of-calculator-archive>\n```\n\n----------------------------------------\n\nTITLE: Specifying Python package dependencies for AWS SDK examples\nDESCRIPTION: This code snippet defines the minimum versions of boto3 and pytest required for running AWS SDK examples. boto3 is the AWS SDK for Python, while pytest is a testing framework.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/cross_service/stepfunctions_messenger/requirements.txt#2025-04-09_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nboto3>=1.26.81\npytest>=7.2.1\n```\n\n----------------------------------------\n\nTITLE: Deleting an IAM Policy using AWS SDK for Kotlin\nDESCRIPTION: This code example shows how to delete an IAM policy using the AWS SDK for Kotlin. It requires the policy ARN as input.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/iam/README.md#2025-04-09_snippet_7\n\nLANGUAGE: Kotlin\nCODE:\n```\nsrc/main/kotlin/com/kotlin/iam/DeletePolicy.kt#L37\n```\n\n----------------------------------------\n\nTITLE: Loading File Content in Python\nDESCRIPTION: A function to load the content of a file given its path. It opens the file in read mode and returns its content as a string.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/sesv2_weekly_mailer/content/63a_newsletter.py.md#2025-04-09_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndef load_file_content(file_path):\n    \"\"\"\n    Loads the content of a file.\n\n    Args:\n        file_path (str): The path to the file.\n\n    Returns:\n        str: The content of the file.\n    \"\"\"\n    with open(file_path, \"r\") as file:\n        content = file.read()\n    return content\n```\n\n----------------------------------------\n\nTITLE: Transcribing Audio Files with Amazon Transcribe in Java\nDESCRIPTION: This code demonstrates a complete scenario for transcribing audio files using Amazon Transcribe. It shows how to start a transcription job, wait for completion, and retrieve the transcript URI.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/transcribe/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\n../transcribe-streaming/src/main/java/com/amazonaws/transcribestreaming/TranscribeStreamingDemoFile.java\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies\nDESCRIPTION: Lists required Python packages with minimum version constraints: numpy 1.24.2 or higher and pytest 7.2.1 or higher. Used for installing dependencies needed to run AWS SDK examples.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/greengrass/requirements.txt#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nnumpy>=1.24.2\npytest>=7.2.1\n```\n\n----------------------------------------\n\nTITLE: Building Swift Examples Using Command Line\nDESCRIPTION: Command to build Swift examples from the terminal by navigating to the example directory and using swift build.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/swift/example_code/sqs/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ swift build\n```\n\n----------------------------------------\n\nTITLE: Running Biome Linting for AWS SDK JavaScript v3\nDESCRIPTION: Command to run Biome linting tool to statically check the JavaScript code for errors.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run ci-lint\n```\n\n----------------------------------------\n\nTITLE: Calling Text Detection Function and Printing Results in Python\nDESCRIPTION: This snippet calls the process_text_detection function with the previously set parameters and prints the extracted text lines.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/cross_service/textract_comprehend_notebook/TextractAndComprehendNotebook.ipynb#2025-04-09_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nlines = process_text_detection(bucket, document, access_key, secret_key, region_name)\nprint(\"Text found: \" + str(lines))\n```\n\n----------------------------------------\n\nTITLE: Downloading AWS SES v2 API Documentation Using Curl and Text Processing\nDESCRIPTION: A series of commands that download boto3 documentation for SES v2 API endpoints, extract the main content using pup selector, convert to markdown using html2text, and save to files with YAML headers. Each file is initialized with a 'skip: true' YAML header and the documentation is appended afterward.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/sesv2_weekly_mailer/content/tmp/pyref.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho \"---\\nskip: true\\n---\" > 10_create_contact.md\ncurl https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/sesv2/client/create_contact.html | pup \"#main-col-body\" | html2text -nobs -utf8 >> 10_create_contact.md\n\necho \"---\\nskip: true\\n---\" > 10_create_contact_list.md\ncurl https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/sesv2/client/create_contact_list.html | pup \"#main-col-body\" | html2text -nobs -utf8 >> 10_create_contact_list.md\n\necho \"---\\nskip: true\\n---\" > 10_create_email_identity.md\ncurl https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/sesv2/client/create_email_identity.html | pup \"#main-col-body\" | html2text -nobs -utf8 >> 10_create_email_identity.md\n\necho \"---\\nskip: true\\n---\" > 10_create_email_template.md\ncurl https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/sesv2/client/create_email_template.html | pup \"#main-col-body\" | html2text -nobs -utf8 >> 10_create_email_template.md\n\necho \"---\\nskip: true\\n---\" > 10_list_contacts.md\ncurl https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/sesv2/client/list_contacts.html | pup \"#main-col-body\" | html2text -nobs -utf8 >> 10_list_contacts.md\n\necho \"---\\nskip: true\\n---\" > 10_send_email.md\ncurl https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/sesv2/client/send_email.html | pup \"#main-col-body\" | html2text -nobs -utf8 >> 10_send_email.md\n```\n\n----------------------------------------\n\nTITLE: Streaming conversation with Meta Llama model in C#\nDESCRIPTION: Illustrates how to stream a conversation with the Meta Llama model using Amazon Bedrock Runtime.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv4/Bedrock-runtime/README.md#2025-04-09_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\nModels/MetaLlama/ConverseStream/ConverseStream.cs#L4\n```\n\n----------------------------------------\n\nTITLE: Specifying Boto3 Version Requirement for AWS SDK Python Examples\nDESCRIPTION: This snippet defines the minimum required version of the Boto3 library for AWS SDK examples in Python. It uses the greater than or equal to operator to ensure compatibility with version 1.26.81 and above.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/cross_service/aurora_rest_lending_library/library_api/requirements.txt#2025-04-09_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nboto3>=1.26.81\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files for AWS IoT SDK GTests\nDESCRIPTION: Sets up the source files for the GTests, including both test files and their associated source files.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/iot/tests/CMakeLists.txt#2025-04-09_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT DEFINED GTEST_SOURCE_FILES)\n    file(\n            GLOB\n            GTEST_SOURCE_FILES\n            \"gtest_*.cpp\"\n    )\nendif ()\n\nforeach (TEST_FILE ${GTEST_SOURCE_FILES})\n    string(REPLACE \"gtest_\" \"../\" SOURCE_FILE ${TEST_FILE})\n    if (EXISTS ${SOURCE_FILE})\n        list(APPEND GTEST_SOURCE ${SOURCE_FILE} ${TEST_FILE})\n    else ()\n        message(\"Error: no associated source file found for ${TEST_FILE}\")\n    endif ()\nendforeach ()\n```\n\n----------------------------------------\n\nTITLE: Running All Tests in Docker Container\nDESCRIPTION: Shows how to execute all unit tests in the Docker container environment and write the output to a file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/gov2/README.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n./run_all_tests.sh\n```\n\n----------------------------------------\n\nTITLE: Bucket Item Model Class in C#\nDESCRIPTION: Model class for storing S3 bucket object information, including the object key, owner, and size properties.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/cross-service/PhotoAnalyzerApp/README.md#2025-04-09_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nnamespace PhotoAnalyzerApp.Controllers\n{\n    public class BucketItem\n    {\n        public string Key { get; set; }\n        public string Owner { get; set; }\n        public string Size { get; set; }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Destroying Resources with AWS CDK\nDESCRIPTION: Command to remove all resources deployed with the AWS CDK stack.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/resources/cdk/dynamodb-item-tracker/README.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncdk destroy\n```\n\n----------------------------------------\n\nTITLE: Invoking Anthropic Claude model with response streaming in C#\nDESCRIPTION: Demonstrates how to invoke the Anthropic Claude model with response streaming using Amazon Bedrock Runtime.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv4/Bedrock-runtime/README.md#2025-04-09_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nModels/AnthropicClaude/InvokeModelWithResponseStream/InvokeModelWithResponseStream.cs#L4\n```\n\n----------------------------------------\n\nTITLE: Console Output: Amazon S3 Batch Operations Demo\nDESCRIPTION: Complete console output demonstrating the execution flow of an Amazon S3 Batch operations scenario, including resource creation, job management, tagging operations, and cleanup steps. The output shows interactive prompts and system responses throughout the workflow execution.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/basics/s3/SPECIFICATION.md#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n--------------------------------------------------------------------------------\nWelcome to the Amazon S3 Batch basics scenario.\nS3 Batch is a powerful service provided by AWS that enables efficient and\ncost-effective processing of large-scale data stored in Amazon S3.\nIt automatically scales resources to handle varying workloads without the need for manual\nintervention.\n\nOne of the key features of S3 Batch is its ability to perform tagging operations on objects stored in\nS3 buckets. Users can leverage S3 Batch to apply, update, or remove tags on thousands or millions of\nobjects in a single operation, streamlining the management and organization of their data.\n\nThis can be particularly useful for tasks such as cost allocation, lifecycle management, or\nmetadata-driven workflows, where consistent and accurate tagging is essential.\nS3 Batch's scalability and serverless nature make it an ideal solution for organizations with\ngrowing data volumes and complex data management requirements.\n\nThis Java program walks you through Amazon S3 Batch operations.\n\nLet's get started...\n[...remaining console output...]\n```\n\n----------------------------------------\n\nTITLE: Streaming conversation with Mistral AI model in C#\nDESCRIPTION: Illustrates how to stream a conversation with the Mistral AI model using Amazon Bedrock Runtime.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv4/Bedrock-runtime/README.md#2025-04-09_snippet_23\n\nLANGUAGE: C#\nCODE:\n```\nModels/Mistral/ConverseStream/ConverseStream.cs#L4\n```\n\n----------------------------------------\n\nTITLE: Implementing S3Trigger for DetectLabelsFn Lambda Function in Java\nDESCRIPTION: This class handles the DetectLabelsFn Lambda function, which is triggered by S3 events. It processes newly uploaded images, analyzes them for labels, and updates the DynamoDB table with the results.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/pam_source_files/README.md#2025-04-09_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\npackage com.example.photo.handlers;\n\nimport com.amazonaws.services.lambda.runtime.events.S3Event;\nimport com.amazonaws.services.lambda.runtime.Context;\nimport com.amazonaws.services.lambda.runtime.RequestHandler;\nimport com.example.photo.endpoints.UploadEndpoint;\nimport com.example.photo.services.AnalyzePhotos;\nimport com.example.photo.services.DynamoDBService;\nimport com.example.photo.services.S3Service;\n\n// Tags the object after it's uploaded into the storage bucket.\npublic class S3Trigger implements RequestHandler<S3Event, String> {\n\n    @Override\n    public String handleRequest(S3Event event, Context context) {\n        // Get the S3 bucket and object key from the Amazon S3 event.\n        String bucketName = event.getRecords().get(0).getS3().getBucket().getName();\n        String objectKey = event.getRecords().get(0).getS3().getObject().getKey();\n\n        // Log the S3 bucket and object key in the log file.\n        context.getLogger().log(\"S3 object name: s3://\" + bucketName + \"/\" + objectKey);\n\n        AnalyzePhotos photos = new AnalyzePhotos();\n        DynamoDBService dbService = new DynamoDBService();\n        S3Service s3Service = new S3Service();\n\n        // Tag the file.\n        UploadEndpoint endpoint = new UploadEndpoint(photos, dbService, s3Service);\n        endpoint.tagAfterUpload(objectKey);\n\n        context.getLogger().log(\"Tagged image\");\n        return \"OK\"; // Unused response.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading and Processing Image Frames in AWS HealthImaging\nDESCRIPTION: This code snippet shows the process of downloading and processing image frames created during the DICOM import job in AWS HealthImaging. It includes retrieving image set metadata and decoding HTJ2K format images to bitmaps.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/healthimaging_image_sets/SPECIFICATION.md#2025-04-09_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n***************************************************************************************\n\nNext this workflow will download all the image frames created in this import job.\nThe IDs of all the image frames in an image set are stored in the image set metadata.\nThe image set metadata will be downloaded and parsed for the image frame IDs.\nEnter return to continue.\n192 image frames were created by this import job.\n\n***************************************************************************************\n\nThe image frames are encoded in the HTJ2K format. This example will convert\nthe image frames to bitmaps. The decoded images will be verified using\na CRC32 checksum retrieved from the image set metadata,\nThe OpenJPEG open-source library will be used for the conversion.\nThe following link contains information about HTJ2K decoding libraries.\nhttps://docs.aws.amazon.com/healthimaging/latest/devguide/reference-htj2k.html\nEnter return to download and convert the images.\n192 image files were downloaded.\nThe image files were successfully decoded and validated.\nThe HTJ2K image files are located in the directory\n'output/import_job_12345678901234567890123456789012' in the working directory\nof this application.\n\n***************************************************************************************\n\nThis concludes this workflow.\n\n***************************************************************************************\n\nWould you like to delete the stack workflow-stack? (y/n)y\nDeleting the image sets in the stack.\nSuccessfully deleted image set 12345678901234567890123456789012 from data store 12345678901234567890123456789012\n\n***************************************************************************************\n\nDeleting the stack.\nStack deletion initiated.\nStack deletion completed.\n```\n\n----------------------------------------\n\nTITLE: Describing EC2 Instance Types in .NET\nDESCRIPTION: This code snippet demonstrates how to describe EC2 instance types using the AWS SDK for .NET. It's part of the EC2Wrapper class that provides various EC2 functionalities.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv4/EC2/README.md#2025-04-09_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nDescribeInstanceTypes\n```\n\n----------------------------------------\n\nTITLE: Running React Item Tracker Unit Tests\nDESCRIPTION: Command to run all unit tests for the React item tracker web client. This launches the test runner in interactive watch mode and does not require a REST endpoint or AWS resources.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/resources/clients/react/item-tracker/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Installing Prerequisites for Elros Boilerplate\nDESCRIPTION: Instructions for installing the necessary prerequisites before setting up Elros. This includes installing the latest Node.js LTS version and git.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/resources/clients/react/elros/README.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Install the latest Node.js LTS.\n2. Install git.\n```\n\n----------------------------------------\n\nTITLE: AssociateKmsKey Implementation in .NET\nDESCRIPTION: Example showing how to associate a KMS key with CloudWatch Logs using AWS SDK for .NET. The implementation is referenced in the AssociateKmsKey.cs file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/CloudWatchLogs/README.md#2025-04-09_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n/* Code reference only - implementation in AssociateKmsKey.cs#L6 */\n```\n\n----------------------------------------\n\nTITLE: Running Aurora Scenarios with Go Command Runner\nDESCRIPTION: Command to get help and a list of available Aurora scenarios using the command runner in the AWS SDK for Go V2 examples.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/gov2/aurora/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo run ./cmd -h\n```\n\n----------------------------------------\n\nTITLE: CloudFormation S3 Auto Delete Objects Inline Lambda Implementation\nDESCRIPTION: YAML snippet showing how to embed the Lambda function directly in the CloudFormation template using ZipFile property instead of referencing an S3 object.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/healthimaging_image_sets/SPECIFICATION.md#2025-04-09_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nCustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F:\nType: AWS::Lambda::Function\nProperties:\nCode:\nZipFile: |\n\"use strict\";var C=Object.create,i=Object.defineProperty,I=Object.getOwnPropertyDescriptor,w=Object.getOwnPropertyNames,P=Object.getPrototypeOf,A=Object.prototype.hasOwnProperty,L=(e,t)=>{for(var o in t)i(e,o,{get:t[o],enumerable:!0})},d=(e,t,o,r)=>{if(t&&typeof t==\"object\"||typeof t==\"function\")for(let s of w(t))!A.call(e,s)&&s!==o&&i(e,s,{get:()=>t[s],enumerable:!(r=I(t,s))||r.enumerable});return e},l=(e,t,o)=>(o=e!=null?C(P(e)):{},d(t||!e||!e.__esModule?i(o,\"default\",{value:e,enumerable:!0}):o,e)),k=e=>d(i({},\"__esModule\",{value:!0}),e),U={};L(U,{autoDeleteHandler:()=>S,handler:()=>_}),module.exports=k(U);var h=require(\"@aws-sdk/client-s3\"),y=l(require(\"https\")),m=l(require(\"url\")),a={sendHttpRequest:T,log:b,includeStackTraces:!0,userHandlerIndex:\"./index\"},p=\"AWSCDK::CustomResourceProviderFramework::CREATE_FAILED\",B=\"AWSCDK::CustomResourceProviderFramework::MISSING_PHYSICAL_ID\";function R(e){return async(t,o)=>{let r={...t,ResponseURL:\"...\"};if(a.log(JSON.stringify(r,void 0,2)),t.RequestType===\"Delete\"&&t.PhysicalResourceId===p){a.log(\"ignoring DELETE event caused by a failed CREATE event\"),await u(\"SUCCESS\",t);return}try{let s=await e(r,o),n=D(t,s);await u(\"SUCCESS\",n)}catch(s){let n={...t,Reason:a.includeStackTraces?s.stack:s.message};n.PhysicalResourceId||(t.RequestType===\"Create\"?(a.log(\"CREATE failed, responding with a marker physical resource id so that the subsequent DELETE will be ignored\"),n.PhysicalResourceId=p):a.log(`ERROR: Malformed event. \"PhysicalResourceId\" is required: ${JSON.stringify(t)}`)),await u(\"FAILED\",n)}}}function D(e,t={}){let o=t.PhysicalResourceId??e.PhysicalResourceId??e.RequestId;if(e.RequestType===\"Delete\"&&o!==e.PhysicalResourceId)throw new Error(`DELETE: cannot change the physical resource ID from \"${e.PhysicalResourceId}\" to \"${t.PhysicalResourceId}\" during deletion`);return{...e,...t,PhysicalResourceId:o}}async function u(e,t){let o={Status:e,Reason:t.Reason??e,StackId:t.StackId,RequestId:t.RequestId,PhysicalResourceId:t.PhysicalResourceId||B,LogicalResourceId:t.LogicalResourceId,NoEcho:t.NoEcho,Data:t.Data};a.log(\"submit response to cloudformation\",o);let r=JSON.stringify(o),s=m.parse(t.ResponseURL),n={hostname:s.hostname,path:s.path,method:\"PUT\",headers:{\"content-type\":\"\",\"content-length\":Buffer.byteLength(r,\"utf8\")}};await O({attempts:5,sleep:1e3},a.sendHttpRequest)(n,r)}async function T(e,t){return new Promise((o,r)=>{try{let s=y.request(e,n=>o());s.on(\"error\",r),s.write(t),s.end()}catch(s){r(s)}})}function b(e,...t){console.log(e,...t)}function O(e,t){return async(...o)=>{let r=e.attempts,s=e.sleep;for(;;)try{return await t(...o)}catch(n){if(r--<=0)throw n;await x(Math.floor(Math.random()*s)),s*=2}}}async function x(e){return new Promise(t=>setTimeout(t,e))}var g=\"aws-cdk:auto-delete-objects\",H=JSON.stringify({Version:\"2012-10-17\",Statement:[]}),c=new h.S3({}),_=R(S);async function S(e){switch(e.RequestType){case\"Create\":return;case\"Update\":return F(e);case\"Delete\":return f(e.ResourceProperties?.BucketName)}}async function F(e){let t=e,o=t.OldResourceProperties?.BucketName,r=t.ResourceProperties?.BucketName;if(r!=null&&o!=null&&r!==o)return f(o)}async function N(e){try{let t=(await c.getBucketPolicy({Bucket:e}))?.Policy??H,o=JSON.parse(t);o.Statement.push({Principal:\"*\",Effect:\"Deny\",Action:[\"s3:PutObject\"],Resource:[`arn:aws:s3:::${e}/*`]}),await c.putBucketPolicy({Bucket:e,Policy:JSON.stringify(o)})}catch(t){if(t.name===\"NoSuchBucket\")throw t;console.log(`Could not set new object deny policy on bucket '${e}' prior to deletion.`)}}async function E(e){let t=await c.listObjectVersions({Bucket:e}),o=[...t.Versions??[],...t.DeleteMarkers??[]];if(o.length===0)return;let r=o.map(s=>({Key:s.Key,VersionId:s.VersionId}));await c.deleteObjects({Bucket:e,Delete:{Objects:r}}),t?.IsTruncated&&await E(e)}async function f(e){if(!e)throw new Error(\"No BucketName was provided.\");try{if(!await W(e)){console.log(`Bucket does not have '${g}' tag, skipping cleaning.`);return}await N(e),await E(e)}catch(t){if(t.name===\"NoSuchBucket\"){console.log(`Bucket '${e}' does not exist.`);return}throw t}}async function W(e){return(await c.getBucketTagging({Bucket:e})).TagSet?.some(o=>o.Key===g&&o.Value===\"true\")}\n```\n\n----------------------------------------\n\nTITLE: Installing Native Assets and Flutter Assets\nDESCRIPTION: Configures installation of native assets provided by build.dart and Flutter assets. Ensures assets directories are properly cleaned and recreated during installation to avoid stale files from previous builds.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/cognito_flutter_mobile_app/linux/CMakeLists.txt#2025-04-09_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\n# Copy the native assets provided by the build.dart from all packages.\nset(NATIVE_ASSETS_DIR \"${PROJECT_BUILD_DIR}native_assets/linux/\")\ninstall(DIRECTORY \"${NATIVE_ASSETS_DIR}\"\n   DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n   COMPONENT Runtime)\n\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Deleting an IAM User using AWS SDK for Kotlin\nDESCRIPTION: This snippet demonstrates how to delete an IAM user using the AWS SDK for Kotlin. It requires the user name as input.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/iam/README.md#2025-04-09_snippet_8\n\nLANGUAGE: Kotlin\nCODE:\n```\nsrc/main/kotlin/com/kotlin/iam/DeleteUser.kt#L37\n```\n\n----------------------------------------\n\nTITLE: Running Scenario Scripts with Node.js\nDESCRIPTION: Command to execute scenario scripts from the scenarios directory using Node.js.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/bedrock-agent-runtime/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnode ./scenarios/<fileName>\n```\n\n----------------------------------------\n\nTITLE: Running Config Conformance Pack Framework Example\nDESCRIPTION: Command to execute the Python script that creates a custom framework from AWS Config conformance pack rules.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/auditmanager/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython framework_from_conformance_pack.py\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for AWS SDK Examples\nDESCRIPTION: This code snippet defines the minimum required versions for key Python packages used in the AWS SDK examples project. It includes Boto3 for AWS interactions, pytest for testing, and websockets for WebSocket support.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/cross_service/apigateway_websocket_chat/requirements.txt#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nboto3>=1.26.81\npytest>=7.2.1\nwebsockets>=10.4\n```\n\n----------------------------------------\n\nTITLE: Generating CloudFormation Template from CDK App\nDESCRIPTION: Creates a CloudFormation template from the CDK app for deployment through AWS CLI or console.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/resources/cdk/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install && cdk synth >CLOUDFORMATION_TEMPLATE_NAME\n```\n\n----------------------------------------\n\nTITLE: Building Feedback Sentiment Analyzer Frontend\nDESCRIPTION: Command to build the FSA frontend application for production deployment.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/applications/feedback_sentiment_analyzer/client/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Calling Entity Detection Function and Printing Results in Python\nDESCRIPTION: This snippet calls the entity_detection function with the previously extracted text lines and prints the detected entities.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/cross_service/textract_comprehend_notebook/TextractAndComprehendNotebook.ipynb#2025-04-09_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nprint(\"Calling DetectEntities:\")\nprint(\"------\")\nresponse_ents = entity_detection(lines, access_key, secret_key, region_name)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build System for AWS Cognito SDK Tests\nDESCRIPTION: Complete CMake configuration file that sets up a Google Test environment for AWS Cognito Identity Provider SDK examples. It handles fetching GTest if not available, configuring AWS SDK dependencies, and setting up platform-specific builds for Windows and other environments.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/cognito/tests/CMakeLists.txt#2025-04-09_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\n\n# Set the minimum required version of CMake for this project.\ncmake_minimum_required(VERSION 3.14)\n\nset(EXAMPLE_SERVICE_NAME \"cognito\")\nset(CURRENT_TARGET \"${EXAMPLE_SERVICE_NAME}_gtest\")\nset(CURRENT_TARGET_AWS_DEPENDENCIES cognito-idp)\n\n# Set this project's name.\nproject(\"${EXAMPLE_SERVICE_NAME}-examples-gtests\")\n\n# Set the C++ standard to use to build this target.\nset(CMAKE_CXX_STANDARD 14)\n\n# Build shared libraries by default.\nset(BUILD_SHARED_LIBS ON)\n\nfind_package(GTest)\n\nmessage(STATUS \"gtest found ${GTest_FOUND}\")\n\nif(NOT GTest_FOUND)\n    message(STATUS \"fetching gtest\")\n    include(FetchContent)\n    FetchContent_Declare(\n            googletest\n            GIT_REPOSITORY https://github.com/google/googletest.git\n            GIT_TAG release-1.12.1\n    )\n\n    # For Windows: Prevent overriding the parent project's compiler/linker settings.\n    set(gtest_force_shared_crt ON CACHE BOOL \"\" FORCE)\n    FetchContent_MakeAvailable(googletest)\nendif()\n\n# Use the MSVC variable to determine if this is a Windows build.\nset(WINDOWS_BUILD ${MSVC})\n\n# Set the location for Windows to find the installed libraries of the SDK.\nif (WINDOWS_BUILD)\n    string(REPLACE \";\" \"/aws-cpp-sdk-all;\" SYSTEM_MODULE_PATH \"${CMAKE_SYSTEM_PREFIX_PATH}/aws-cpp-sdk-all\")\n    list(APPEND CMAKE_PREFIX_PATH ${SYSTEM_MODULE_PATH})\nendif ()\n\n# Find the AWS SDK for C++ package.\nfind_package(AWSSDK REQUIRED COMPONENTS ${CURRENT_TARGET_AWS_DEPENDENCIES})\n\nadd_executable(\n        ${CURRENT_TARGET}\n)\n\nif (WINDOWS_BUILD)\n    # set(BIN_SUB_DIR \"/Debug\") # If you are building from the command line, you may need to uncomment this\n    # and set the proper subdirectory to the executables' location.\n\n    if (AWSSDK_INSTALL_AS_SHARED_LIBS)\n        # Copy relevant AWS SDK for C++ libraries into the current binary directory for running and debugging.\n        AWSSDK_CPY_DYN_LIBS(\n                CURRENT_TARGET_AWS_DEPENDENCIES\n                \"\"\n                ${CMAKE_CURRENT_BINARY_DIR}${BIN_SUB_DIR}\n        )\n    endif ()\n\n    add_custom_command(\n            TARGET\n            ${CURRENT_TARGET}\n            POST_BUILD\n            COMMAND ${CMAKE_COMMAND} -E copy\n            ${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_BINDIR}${BIN_SUB_DIR}/gtest.dll\n            ${CMAKE_CURRENT_BINARY_DIR}${BIN_SUB_DIR}\n    )\nendif ()\n\n# GTEST_SOURCE_FILES can be defined in the command line to limit the files in a build. For example,\n# you can limit files to one action.\nif (NOT DEFINED GTEST_SOURCE_FILES)\n    file(\n            GLOB\n            GTEST_SOURCE_FILES\n            \"gtest_*.cpp\"\n    )\nendif ()\n\nenable_testing()\n\nforeach (TEST_FILE ${GTEST_SOURCE_FILES})\n    string(REPLACE \"gtest_\" \"../\" SOURCE_FILE ${TEST_FILE})\n    if (EXISTS ${SOURCE_FILE})\n        list(APPEND GTEST_SOURCE ${SOURCE_FILE} ${TEST_FILE})\n    else ()\n        message(\"Error: no associated source file found for ${TEST_FILE}\")\n    endif ()\nendforeach ()\n\ntarget_sources(\n        ${CURRENT_TARGET}\n        PUBLIC\n        ${GTEST_SOURCE}\n        test_main.cpp\n        ${EXAMPLE_SERVICE_NAME}_gtests.cpp\n)\n\ntarget_include_directories(\n        ${CURRENT_TARGET}\n        PUBLIC\n        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/..>\n        $<INSTALL_INTERFACE:..>\n)\n\ntarget_compile_definitions(\n        ${CURRENT_TARGET}\n        PUBLIC\n        TESTING_BUILD\n        SOURCE_DIR=\"${CMAKE_CURRENT_SOURCE_DIR}\"\n)\n\ntarget_link_libraries(\n        ${CURRENT_TARGET}\n        GTest::gtest\n        ${AWSSDK_LINK_LIBRARIES}\n        ${AWSSDK_PLATFORM_DEPS}\n)\n\ninclude(GoogleTest)\ngtest_add_tests(\n        TARGET\n        ${CURRENT_TARGET}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting up Flutter Build Dependencies and System Libraries\nDESCRIPTION: Adds the Flutter managed directory as a subdirectory and configures system-level dependencies. Sets up GTK as a required package using pkg-config and defines the application ID as a preprocessor definition.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/cognito_flutter_mobile_app/linux/CMakeLists.txt#2025-04-09_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n```\n\n----------------------------------------\n\nTITLE: Describing EC2 Security Groups in .NET\nDESCRIPTION: This code snippet shows how to describe EC2 security groups using the AWS SDK for .NET. It's part of the EC2Wrapper class that encapsulates various EC2 operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv4/EC2/README.md#2025-04-09_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nDescribeSecurityGroups\n```\n\n----------------------------------------\n\nTITLE: Running AWS HealthImaging Pixel Data Verification Script\nDESCRIPTION: This command executes the Node.js script for AWS HealthImaging Pixel Data Verification. It requires the datastore ID, image set ID, series UID, and SOP instance UID as arguments. The script verifies if the CRC32 of the decoded image matches the original.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/medical-imaging/scenarios/health-image-sets/pixel-data-verification/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ node index.js $DATASTOREID $IMAGESETID 1.3.6.1.4.1.5962.1.3.1.1.20040826185059.5457 1.3.6.1.4.1.5962.1.1.1.1.1.20040826185059.5457\nCRC32 match!\n```\n\n----------------------------------------\n\nTITLE: Spring Boot Result Template with Thymeleaf\nDESCRIPTION: HTML template for displaying form submission results using Thymeleaf. Shows the submitted ID and content with a link to submit another message.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_first_project/README.md#2025-04-09_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE HTML>\n\t<html xmlns:th=\"https://www.thymeleaf.org\">\n\t<head>\n    \t <title>Getting started: Handling form submission</title>\n      \t  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n\t </head>\n\t<body>\n\t<h1>Result</h1>\n\t<p th:text=\"'id: ' + ${greeting.id}\" />\n\t<p th:text=\"'content: ' + ${greeting.body}\" />\n\t<a href=\"/\">Submit another message</a>\n\t</body>\n\t</html>\n```\n\n----------------------------------------\n\nTITLE: Describing Scaling Policies with AWS Application Auto Scaling in Rust\nDESCRIPTION: This code snippet demonstrates how to describe scaling policies using the AWS SDK for Rust. It's part of a larger example that interacts with AWS Application Auto Scaling.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/applicationautoscaling/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nsrc/bin/describe-scaling-policies.rs#L23\n```\n\n----------------------------------------\n\nTITLE: Running IAM Scenario with Command Line Runner in Go\nDESCRIPTION: Demonstrates how to list available scenarios and get help using the command line runner.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/gov2/iam/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo run ./cmd -h\n```\n\n----------------------------------------\n\nTITLE: Monitoring Data Firehose Metrics\nDESCRIPTION: This snippet demonstrates how to monitor Data Firehose metrics such as IncomingBytes, IncomingRecords, and FailedPutCount. It ensures there is incoming traffic and checks for any failed batch operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/firehose/src/main/java/com/example/firehose/scenario/README.md#2025-04-09_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\n// Code not provided in the given text, but described as part of the execution steps\n```\n\n----------------------------------------\n\nTITLE: Listing Command Invocations in Systems Manager with JavaScript SDK v3\nDESCRIPTION: This code snippet shows how to list command invocations using the ListCommandInvocations operation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/ssm/README.md#2025-04-09_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n// ListCommandInvocations\n```\n\n----------------------------------------\n\nTITLE: Retrieving X-Ray Service Information in Kotlin\nDESCRIPTION: Shows how to retrieve sampling rules and service graph documentation. The service graph provides information about services processing incoming requests.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/xray/README.md#2025-04-09_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nGetSamplingRules - Retrieves sampling rules\\nGetServiceGraph - Retrieves a document describing services that process incoming requests\n```\n\n----------------------------------------\n\nTITLE: Hello Amazon Bedrock Foundation Models List\nDESCRIPTION: Example showing how to list foundation models available in Amazon Bedrock using the AWS SDK for .NET. This demonstrates basic Bedrock API interaction and model discovery.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv4/Bedrock/README.md#2025-04-09_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nListFoundationModels\n```\n\n----------------------------------------\n\nTITLE: Create SQS Queue in Kotlin\nDESCRIPTION: Example showing how to create a new Amazon SQS queue using the CreateQueue API operation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/sqs/README.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nCreateQueue\n```\n\n----------------------------------------\n\nTITLE: Running Python Integration Tests\nDESCRIPTION: Command to run Python integration tests using pytest, specifically targeting tests marked with 'integ'.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/README.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npython -m pytest -m \"integ\"\n```\n\n----------------------------------------\n\nTITLE: Running the CloudWatch Logs Query Example\nDESCRIPTION: Executes the Node.js script that performs the large CloudWatch Logs query.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/cloudwatch-logs/scenarios/large-query/README.md#2025-04-09_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nnode index.js\n```\n\n----------------------------------------\n\nTITLE: Creating Work Items Table in Aurora Serverless Database\nDESCRIPTION: AWS CLI command to create a 'work_items' table in an Aurora Serverless database. The command uses the RDS Data API to execute an SQL statement that defines the table structure.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/cross-service/AuroraItemTracker/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\naws rds-data execute-statement ^\n    --resource-arn \"CLUSTER_ARN\" ^\n    --database \"DATABASE\" ^\n    --secret-arn \"SECRET_ARN\" ^\n    --sql \"CREATE TABLE items (id VARCHAR(45), description VARCHAR(400), guide VARCHAR(45), status VARCHAR(400), name VARCHAR(45), archived BOOLEAN);\"\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for AWS CodeCommit Examples in JavaScript\nDESCRIPTION: This snippet shows how to install the necessary dependencies for running the AWS CodeCommit examples. It uses npm to install Node.js globally and then installs the project-specific dependencies.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/codecommit/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install node -g\ncd javascriptv3/example_code/codecommit\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Deleting an IAM Account Alias using AWS SDK for Kotlin\nDESCRIPTION: This snippet demonstrates how to delete an IAM account alias using the AWS SDK for Kotlin. It requires the alias name as input.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/iam/README.md#2025-04-09_snippet_6\n\nLANGUAGE: Kotlin\nCODE:\n```\nsrc/main/kotlin/com/kotlin/iam/DeleteAccountAlias.kt#L37\n```\n\n----------------------------------------\n\nTITLE: Rendering Weekly Coupons Newsletter Template with Handlebars\nDESCRIPTION: A template that iterates through coupon items using Handlebars syntax and includes an Amazon SES unsubscribe URL. The template displays coupon details in a list format and includes standard newsletter header and footer content.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/SESv2/NewsLetterWorkflow/resources/coupon-newsletter.txt#2025-04-09_snippet_0\n\nLANGUAGE: handlebars\nCODE:\n```\nWeekly Coupons Newsletter\n\nCheck out this week's hot deals and exclusive coupons!\n\n{{#each coupons}}\n- {{details}}\n{{/each}}\n\nHurry, these offers won't last long! Visit our website or your nearest store to take advantage of these amazing deals.\n\nHappy shopping!\nThe Weekly Coupons Team\n\n---\n\nUnsubscribe: {{amazonSESUnsubscribeUrl}}\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Resources for Aurora Serverless App in YAML\nDESCRIPTION: YAML configuration for specifying AWS resource values and email address for the Aurora Serverless application. It includes RDS database instance, secret ARN, cluster ARN, and SES source email.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/cross_service/rest_ses/README.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nrds:\n  db_instance: auroraappdb\n  secret_arn: \"arn:aws:secretsmanager:us-east-1:1111222233334444:secret:docexampleauroraappsecret8B-EXAMPLE-Dz2N2y\"\n  cluster_arn: \"arn:aws:rds:us-east-1:1111222233334444:cluster:docexampleauroraapp-docexampleauroraappclustereb7e-EXAMPLE\"\nses:\n  source: \"report-account@amazondomains.com\" # Replace with an email address that is registered with Amazon SES.\n```\n\n----------------------------------------\n\nTITLE: Upload Archive Command Usage\nDESCRIPTION: Command line syntax for running the UploadArchive example to upload a file to an S3 Glacier vault\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/glacier/README.md#2025-04-09_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ngo run UploadArchive -v VAULT-NAME -f FILE-NAME\n```\n\n----------------------------------------\n\nTITLE: Listing CloudWatch Metrics in Kotlin\nDESCRIPTION: This code snippet illustrates how to list CloudWatch metrics using the AWS SDK for Kotlin. It's part of a larger CloudWatch scenario that demonstrates various CloudWatch operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/cloudwatch/README.md#2025-04-09_snippet_14\n\nLANGUAGE: Kotlin\nCODE:\n```\nListMetrics\n```\n\n----------------------------------------\n\nTITLE: Student Data Model Class in Java\nDESCRIPTION: Simple Java class representing a Student entity with properties for firstName, email, and mobileNumber. Includes standard getter and setter methods for all properties.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/workflow_multiple_channels/README.md#2025-04-09_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npackage com.example;\n\npublic class Student {\n\n    private String firstName;\n    private String email;\n    private String mobileNumber ;\n\n    public void setMobileNumber(String mobileNumber) {\n        this.mobileNumber = mobileNumber;\n    }\n\n    public String getMobileNumber() {\n        return this.mobileNumber;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }\n\n    public String getEmail() {\n        return this.email;\n    }\n\n    public void setFirstName(String firstName) {\n        this.firstName = firstName;\n    }\n\n    public String getFirstName() {\n        return this.firstName;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Allocating Elastic IP Address with AWS CLI\nDESCRIPTION: This snippet shows how to allocate an Elastic IP address using the AWS CLI. It uses the 'aws ec2 allocate-address' command and captures the allocation ID and public IP for further use.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/aws-cli/bash-linux/ec2/README.md#2025-04-09_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nallocationId=$(aws ec2 allocate-address \\\n    --domain vpc \\\n    --query \"AllocationId\" \\\n    --output text)\n\nelasticIp=$(aws ec2 describe-addresses \\\n    --allocation-ids \"$allocationId\" \\\n    --query \"Addresses[0].PublicIp\" \\\n    --output text)\n```\n\n----------------------------------------\n\nTITLE: Querying DynamoDB Table with AWS CLI\nDESCRIPTION: This snippet demonstrates how to query a DynamoDB table using the AWS CLI. The actual code is not provided in the given content, but it's referenced as being located in the dynamodb_operations.sh file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/aws-cli/bash-linux/dynamodb/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Code for Query operation\n# Located in dynamodb_operations.sh at line 604\n```\n\n----------------------------------------\n\nTITLE: Building AWS IoT Example with CMake\nDESCRIPTION: CMake configuration for building the Hello AWS IoT example that demonstrates listThings functionality.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/iot/README.md#2025-04-09_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nlistThings\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies for AWS SDK Examples\nDESCRIPTION: Specifies the minimum required versions of boto3 (AWS SDK for Python) and pytest (testing framework) needed to run the AWS SDK example code. Uses the >= operator to indicate version requirements.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/sqs/requirements.txt#2025-04-09_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nboto3>=1.26.79\npytest>=7.2.1\n```\n\n----------------------------------------\n\nTITLE: Styling SNS Application with CSS\nDESCRIPTION: CSS styles for the SNS application interface, defining the layout for the header, footer, and logged-in information section. The styling provides consistent visual presentation across the application.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/subpub_app/README.md#2025-04-09_snippet_7\n\nLANGUAGE: css\nCODE:\n```\nbody>header {\n     background: #000;\n     padding: 5px;\n  }\n\n  body>header>a>img, body>header a {\n     display: inline-block;\n     vertical-align: middle;\n     padding: 0px 5px;\n     font-size: 1.2em;\n  }\n\n  body>footer {\n    background: #eee;\n    padding: 5px;\n    margin: 10px 0;\n    text-align: center;\n }\n\n #logged-in-info {\n    float: right;\n    margin-top: 18px;\n }\n\n #logged-in-info form {\n    display: inline-block;\n    margin-right: 10px;\n }\n```\n\n----------------------------------------\n\nTITLE: Running Maven Test Command\nDESCRIPTION: Command line instruction to execute JUnit tests using Maven\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/quicksight/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmvn test\n```\n\n----------------------------------------\n\nTITLE: Running Hello Cognito Example\nDESCRIPTION: Command to execute the basic hello world example for Amazon Cognito Identity Provider\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/cognito-identity-provider/README.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnode ./hello.js\n```\n\n----------------------------------------\n\nTITLE: Creating CloudWatch Target Command\nDESCRIPTION: Command line usage pattern for creating an event target that gets invoked when a rule is triggered.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/cloudwatch/README.md#2025-04-09_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ngo run CreateTarget.go -r RULE -l LAMBDA-ARN -t TARGET\n```\n\n----------------------------------------\n\nTITLE: Stopping Execution in AWS Step Functions using Rust\nDESCRIPTION: This code snippet shows how to stop an execution in AWS Step Functions using the AWS SDK for Rust. It requires proper AWS credentials and an existing Step Functions execution.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/stepfunction/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Rust\nCODE:\n```\n// Code content not provided in the input text, but referenced as:\n// src/bin/stop-execution.rs\n```\n\n----------------------------------------\n\nTITLE: Implementing SNS Service Class in Kotlin\nDESCRIPTION: This class uses the Kotlin SNS API to interact with Amazon SNS. It provides methods for email subscription management and message publishing with language translation capabilities. The class requires an SNS topic ARN to be configured.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/subpub_app/README.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.aws.kotlin\n\nimport aws.sdk.kotlin.services.sns.SnsClient\nimport aws.sdk.kotlin.services.sns.model.ListSubscriptionsByTopicRequest\nimport aws.sdk.kotlin.services.sns.model.PublishRequest\nimport aws.sdk.kotlin.services.sns.model.SubscribeRequest\nimport aws.sdk.kotlin.services.sns.model.UnsubscribeRequest\nimport aws.sdk.kotlin.services.translate.TranslateClient\nimport aws.sdk.kotlin.services.translate.model.TranslateTextRequest\nimport org.springframework.stereotype.Component\nimport org.w3c.dom.Document\nimport java.io.StringWriter\nimport javax.xml.parsers.DocumentBuilderFactory\nimport javax.xml.parsers.ParserConfigurationException\nimport javax.xml.transform.TransformerConfigurationException\nimport javax.xml.transform.TransformerException\nimport javax.xml.transform.TransformerFactory\nimport javax.xml.transform.dom.DOMSource\nimport javax.xml.transform.stream.StreamResult\n\n@Component\nclass SnsService {\n    var topicArnVal = \"<Enter your topic ARN>\"\n\n    // Create a Subscription.\n    suspend fun subEmail(email: String?): String? {\n        val request = SubscribeRequest {\n            protocol = \"email\"\n            endpoint = email\n            returnSubscriptionArn = true\n            topicArn = topicArnVal\n        }\n\n        SnsClient { region = \"us-west-2\" }.use { snsClient ->\n            val result = snsClient.subscribe(request)\n            return result.subscriptionArn\n        }\n    }\n\n    suspend fun pubTopic(messageVal: String, lang: String): String {\n        val translateClient = TranslateClient { region = \"us-east-1\" }\n        val body: String\n\n        if (lang.compareTo(\"English\") == 0) {\n            body = messageVal\n        } else if (lang.compareTo(\"French\") == 0) {\n            val textRequest = TranslateTextRequest {\n                sourceLanguageCode = \"en\"\n                targetLanguageCode = \"fr\"\n                text = messageVal\n            }\n\n            val textResponse = translateClient.translateText(textRequest)\n            body = textResponse.translatedText.toString()\n        } else {\n            val textRequest = TranslateTextRequest {\n                sourceLanguageCode = \"en\"\n                targetLanguageCode = \"es\"\n                text = messageVal\n            }\n\n            val textResponse = translateClient.translateText(textRequest)\n            body = textResponse.translatedText.toString()\n        }\n\n        val request = PublishRequest {\n            message = body\n            topicArn = topicArnVal\n        }\n\n        SnsClient { region = \"us-west-2\" }.use { snsClient ->\n            val result = snsClient.publish(request)\n            return \"{$result.messageId.toString()}  message sent successfully in $lang.\"\n        }\n    }\n\n    suspend fun unSubEmail(emailEndpoint: String) {\n        val subscriptionArnVal = getTopicArnValue(emailEndpoint)\n        val request = UnsubscribeRequest {\n            subscriptionArn = subscriptionArnVal\n        }\n\n        SnsClient { region = \"us-west-2\" }.use { snsClient ->\n            snsClient.unsubscribe(request)\n        }\n    }\n\n    // Returns the Sub Amazon Resource Name (ARN) based on the given endpoint used for unSub.\n    suspend fun getTopicArnValue(endpoint: String): String? {\n        var subArn: String\n        val request = ListSubscriptionsByTopicRequest {\n            topicArn = topicArnVal\n        }\n\n        SnsClient { region = \"us-west-2\" }.use { snsClient ->\n            val response = snsClient.listSubscriptionsByTopic(request)\n            response.subscriptions?.forEach { sub ->\n                if (sub.endpoint?.compareTo(endpoint) == 0) {\n                    subArn = sub.subscriptionArn.toString()\n                    return subArn\n                }\n            }\n            return \"\"\n        }\n    }\n\n    suspend fun getAllSubscriptions(): String? {\n        val subList = mutableListOf<String>()\n        val request = ListSubscriptionsByTopicRequest {\n            topicArn = topicArnVal\n        }\n\n        SnsClient { region = \"us-west-2\" }.use { snsClient ->\n            val response = snsClient.listSubscriptionsByTopic(request)\n            response.subscriptions?.forEach { sub ->\n                subList.add(sub.endpoint.toString())\n            }\n            return convertToString(toXml(subList))\n        }\n    }\n\n    // Convert the list to XML to pass back to the view.\n    private fun toXml(subsList: List<String>): Document? {\n        try {\n            val factory = DocumentBuilderFactory.newInstance()\n            factory.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true)\n            val builder = factory.newDocumentBuilder()\n            val doc = builder.newDocument()\n\n            // Start building the XML.\n            val root = doc.createElement(\"Subs\")\n            doc.appendChild(root)\n\n            // Iterate through the collection.\n            for (sub in subsList) {\n                val item = doc.createElement(\"Sub\")\n                root.appendChild(item)\n\n                // Set email.\n                val email = doc.createElement(\"email\")\n                email.appendChild(doc.createTextNode(sub))\n                item.appendChild(email)\n            }\n            return doc\n        } catch (e: ParserConfigurationException) {\n            e.printStackTrace()\n        }\n        return null\n    }\n\n    private fun convertToString(xml: Document?): String? {\n        try {\n            val transformerFactory = getSecureTransformerFactory()\n            val transformer = transformerFactory?.newTransformer()\n            val result = StreamResult(StringWriter())\n            val source = DOMSource(xml)\n            if (transformer != null) {\n                transformer.transform(source, result)\n            }\n            return result.writer.toString()\n        } catch (ex: TransformerException) {\n            ex.printStackTrace()\n        }\n        return null\n    }\n\n    private fun getSecureTransformerFactory(): TransformerFactory? {\n        val transformerFactory: TransformerFactory = TransformerFactory.newInstance()\n        try {\n            transformerFactory.setFeature(javax.xml.XMLConstants.FEATURE_SECURE_PROCESSING, true)\n        } catch (e: TransformerConfigurationException) {\n            e.printStackTrace()\n        }\n        return transformerFactory\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SNS Service Class in Kotlin\nDESCRIPTION: This class uses the Kotlin SNS API to interact with Amazon SNS. It provides methods for email subscription management and message publishing with language translation capabilities. The class requires an SNS topic ARN to be configured.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/subpub_app/README.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.aws.kotlin\n\nimport aws.sdk.kotlin.services.sns.SnsClient\nimport aws.sdk.kotlin.services.sns.model.ListSubscriptionsByTopicRequest\nimport aws.sdk.kotlin.services.sns.model.PublishRequest\nimport aws.sdk.kotlin.services.sns.model.SubscribeRequest\nimport aws.sdk.kotlin.services.sns.model.UnsubscribeRequest\nimport aws.sdk.kotlin.services.translate.TranslateClient\nimport aws.sdk.kotlin.services.translate.model.TranslateTextRequest\nimport org.springframework.stereotype.Component\nimport org.w3c.dom.Document\nimport java.io.StringWriter\nimport javax.xml.parsers.DocumentBuilderFactory\nimport javax.xml.parsers.ParserConfigurationException\nimport javax.xml.transform.TransformerConfigurationException\nimport javax.xml.transform.TransformerException\nimport javax.xml.transform.TransformerFactory\nimport javax.xml.transform.dom.DOMSource\nimport javax.xml.transform.stream.StreamResult\n\n@Component\nclass SnsService {\n    var topicArnVal = \"<Enter your topic ARN>\"\n\n    // Create a Subscription.\n    suspend fun subEmail(email: String?): String? {\n        val request = SubscribeRequest {\n            protocol = \"email\"\n            endpoint = email\n            returnSubscriptionArn = true\n            topicArn = topicArnVal\n        }\n\n        SnsClient { region = \"us-west-2\" }.use { snsClient ->\n            val result = snsClient.subscribe(request)\n            return result.subscriptionArn\n        }\n    }\n\n    suspend fun pubTopic(messageVal: String, lang: String): String {\n        val translateClient = TranslateClient { region = \"us-east-1\" }\n        val body: String\n\n        if (lang.compareTo(\"English\") == 0) {\n            body = messageVal\n        } else if (lang.compareTo(\"French\") == 0) {\n            val textRequest = TranslateTextRequest {\n                sourceLanguageCode = \"en\"\n                targetLanguageCode = \"fr\"\n                text = messageVal\n            }\n\n            val textResponse = translateClient.translateText(textRequest)\n            body = textResponse.translatedText.toString()\n        } else {\n            val textRequest = TranslateTextRequest {\n                sourceLanguageCode = \"en\"\n                targetLanguageCode = \"es\"\n                text = messageVal\n            }\n\n            val textResponse = translateClient.translateText(textRequest)\n            body = textResponse.translatedText.toString()\n        }\n\n        val request = PublishRequest {\n            message = body\n            topicArn = topicArnVal\n        }\n\n        SnsClient { region = \"us-west-2\" }.use { snsClient ->\n            val result = snsClient.publish(request)\n            return \"{$result.messageId.toString()}  message sent successfully in $lang.\"\n        }\n    }\n\n    suspend fun unSubEmail(emailEndpoint: String) {\n        val subscriptionArnVal = getTopicArnValue(emailEndpoint)\n        val request = UnsubscribeRequest {\n            subscriptionArn = subscriptionArnVal\n        }\n\n        SnsClient { region = \"us-west-2\" }.use { snsClient ->\n            snsClient.unsubscribe(request)\n        }\n    }\n\n    // Returns the Sub Amazon Resource Name (ARN) based on the given endpoint used for unSub.\n    suspend fun getTopicArnValue(endpoint: String): String? {\n        var subArn: String\n        val request = ListSubscriptionsByTopicRequest {\n            topicArn = topicArnVal\n        }\n\n        SnsClient { region = \"us-west-2\" }.use { snsClient ->\n            val response = snsClient.listSubscriptionsByTopic(request)\n            response.subscriptions?.forEach { sub ->\n                if (sub.endpoint?.compareTo(endpoint) == 0) {\n                    subArn = sub.subscriptionArn.toString()\n                    return subArn\n                }\n            }\n            return \"\"\n        }\n    }\n\n    suspend fun getAllSubscriptions(): String? {\n        val subList = mutableListOf<String>()\n        val request = ListSubscriptionsByTopicRequest {\n            topicArn = topicArnVal\n        }\n\n        SnsClient { region = \"us-west-2\" }.use { snsClient ->\n            val response = snsClient.listSubscriptionsByTopic(request)\n            response.subscriptions?.forEach { sub ->\n                subList.add(sub.endpoint.toString())\n            }\n            return convertToString(toXml(subList))\n        }\n    }\n\n    // Convert the list to XML to pass back to the view.\n    private fun toXml(subsList: List<String>): Document? {\n        try {\n            val factory = DocumentBuilderFactory.newInstance()\n            factory.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true)\n            val builder = factory.newDocumentBuilder()\n            val doc = builder.newDocument()\n\n            // Start building the XML.\n            val root = doc.createElement(\"Subs\")\n            doc.appendChild(root)\n\n            // Iterate through the collection.\n            for (sub in subsList) {\n                val item = doc.createElement(\"Sub\")\n                root.appendChild(item)\n\n                // Set email.\n                val email = doc.createElement(\"email\")\n                email.appendChild(doc.createTextNode(sub))\n                item.appendChild(email)\n            }\n            return doc\n        } catch (e: ParserConfigurationException) {\n            e.printStackTrace()\n        }\n        return null\n    }\n\n    private fun convertToString(xml: Document?): String? {\n        try {\n            val transformerFactory = getSecureTransformerFactory()\n            val transformer = transformerFactory?.newTransformer()\n            val result = StreamResult(StringWriter())\n            val source = DOMSource(xml)\n            if (transformer != null) {\n                transformer.transform(source, result)\n            }\n            return result.writer.toString()\n        } catch (ex: TransformerException) {\n            ex.printStackTrace()\n        }\n        return null\n    }\n\n    private fun getSecureTransformerFactory(): TransformerFactory? {\n        val transformerFactory: TransformerFactory = TransformerFactory.newInstance()\n        try {\n            transformerFactory.setFeature(javax.xml.XMLConstants.FEATURE_SECURE_PROCESSING, true)\n        } catch (e: TransformerConfigurationException) {\n            e.printStackTrace()\n        }\n        return transformerFactory\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Document Classifier with Amazon Comprehend in Java\nDESCRIPTION: Demonstrates how to create a document classifier using Amazon Comprehend. This functionality allows for custom classification of documents based on trained models.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/comprehend/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nCreateDocumentClassifier\n```\n\n----------------------------------------\n\nTITLE: Deleting a Rule in EventBridge using Kotlin\nDESCRIPTION: This code snippet shows how to delete a rule in Amazon EventBridge using the AWS SDK for Kotlin. It uses the DeleteRule operation to remove a specified rule.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/eventbridge/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nDeleteRule\n```\n\n----------------------------------------\n\nTITLE: Deleting an Amazon SQS Queue in C#\nDESCRIPTION: Demonstrates how to delete an Amazon SQS queue using the AWS SDK for .NET. This operation permanently removes the queue and all its messages.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/SQS/README.md#2025-04-09_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nDeleteQueue\n```\n\n----------------------------------------\n\nTITLE: Basic AWS Glue Operations Example\nDESCRIPTION: A comprehensive example that demonstrates core AWS Glue functionalities including creating a crawler to process CSV data in S3, listing databases and tables in the AWS Glue Data Catalog, creating and running transformation jobs, and managing job runs. The example shows the complete workflow from data discovery to transformation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/glue/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nsrc/main/kotlin/com/kotlin/glue/GlueScenario.kt\n```\n\n----------------------------------------\n\nTITLE: Describing KMS Key with Java SDK\nDESCRIPTION: This code snippet demonstrates how to retrieve detailed information about a KMS key using the AWS SDK for Java 2.x. It uses the DescribeKey operation to get metadata about the specified KMS key.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/kms/README.md#2025-04-09_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nKMSActions.java#L135\n```\n\n----------------------------------------\n\nTITLE: Running Flask Development Server\nDESCRIPTION: Command to start Flask development server in debug mode on port 8080\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/cross_service/aurora_item_tracker/README.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nflask --debug run -p 8080\n```\n\n----------------------------------------\n\nTITLE: Sending a Welcome Email with SES v2 API\nDESCRIPTION: Outlines the SendEmail operation for sending a welcome email to new subscribers. Specifies all required parameters including sender, recipients, subject, and email content that should be loaded from files.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/sesv2_weekly_mailer/content/30_SPECIFICATION.md#2025-04-09_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- Operation: **SendEmail**\n  - Parameters:\n    - `FromEmailAddress`: Use the `verified_email` address provided in Prepare the Application.\n    - `Destination.ToAddresses`: The email address provided by the user.\n    - `Content.Simple.Subject.Data`: \"Welcome to the Weekly Coupons Newsletter\"\n    - `Content.Simple.Body.Text.Data`: Read the content from the `welcome.txt` file.\n    - `Content.Simple.Body.Html.Data`: Read the content from the `welcome.html` file.\n  - Errors:\n    - See Errors in `SendEmail` for \"Send the Coupon Newsletter\"\n```\n\n----------------------------------------\n\nTITLE: Running IdentityStore Operations with Java SDK v2\nDESCRIPTION: Collection of Maven commands to execute various IdentityStore operations. Each command targets a specific operation like creating users/groups, managing memberships, or querying identity information.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/identitystore/README.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmvn exec:java -Dexec.mainClass=\"com.example.identitystore.CreateGroup\" -Dexec.args=IDENTITY_STORE_ID GROUP_NAME DESCRIPTION\n\nmvn exec:java -Dexec.mainClass=\"com.example.identitystore.CreateGroupMembership\" -Dexec.args=IDENTITY_STORE_ID GROUP_ID USER_ID\n\nmvn exec:java -Dexec.mainClass=\"com.example.identitystore.CreateUser\" -Dexec.args=IDENTITY_STORE_ID USER_NAME FIRST_NAME LAST_NAME\n\nmvn exec:java -Dexec.mainClass=\"com.example.identitystore.DeleteGroup\" -Dexec.args=IDENTITY_STORE_ID GROUP_ID\n\nmvn exec:java -Dexec.mainClass=\"com.example.identitystore.DeleteGroupMembership\" -Dexec.args=IDENTITY_STORE_ID MEMBERSHIP_ID\n\nmvn exec:java -Dexec.mainClass=\"com.example.identitystore.DeleteUser\" -Dexec.args=IDENTITY_STORE_ID USER_ID\n```\n\n----------------------------------------\n\nTITLE: Running the Amazon Transcribe CLI Command\nDESCRIPTION: Command line syntax for running the transcription example. It takes parameters for the audio file, AWS region, and verbosity flag.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/transcribestreaming/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo run -- -a AUDIO-FILE [-r REGION] [-v]\n```\n\n----------------------------------------\n\nTITLE: Listing IoT Greengrass V2 Core Devices using Rust SDK\nDESCRIPTION: Lists the name, status, and last update timestamp of IoT Greengrass V2 devices in a specified AWS Region. Takes optional region parameter and verbose flag. Uses AWS SDK for Rust to interact with Greengrass V2 service.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/greengrassv2/README.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run --bin list-core-devices -- [-r REGION] [-v]\n```\n\n----------------------------------------\n\nTITLE: Running Hello Amazon Cognito Example\nDESCRIPTION: Command to run the basic Hello Amazon Cognito Identity Provider example that demonstrates ListUserPools functionality.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/gov2/cognito/README.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo run ./hello\n```\n\n----------------------------------------\n\nTITLE: Setting S3 Object Legal Hold in JavaScript\nDESCRIPTION: This code snippet demonstrates how to set a legal hold on an S3 object using the PutObjectLegalHold operation in the AWS SDK for JavaScript (v3).\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/s3/README.md#2025-04-09_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\n- [PutObjectLegalHold](actions/put-object-legal-hold.js)\n```\n\n----------------------------------------\n\nTITLE: Upload to S3 Bucket\nDESCRIPTION: Uploads an object to an S3 bucket using AWS CLI commands.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/aws-cli/bash-linux/s3/README.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nbucket-lifecycle-operations/bucket_operations.sh#L134\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies\nDESCRIPTION: Specifies the minimum required versions of boto3 (AWS SDK for Python) and pytest (testing framework) needed to run the AWS SDK example code. Uses the >= operator to indicate minimum compatible versions.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/pinpoint-sms-voice/requirements.txt#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nboto3>=1.26.79\npytest>=7.2.1\n```\n\n----------------------------------------\n\nTITLE: Starting the React Client Application\nDESCRIPTION: Command to start the React client application using npm.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/resources/clients/react/elwing/src/default-plugins/get-started-plugin/GetStarted.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Health Check Status Response\nDESCRIPTION: Example of health check status output showing both healthy and unhealthy targets in the load balancer\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/resilient_service/SPECIFICATION.md#2025-04-09_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nChecking the health of load balancer targets:\\n\\n        Target i-02d98d9d0726c4b2d on port 80 is healthy\\n        Target i-0e4b7104cfaf8e056 on port 80 is unhealthy\\n                Target.ResponseCodeMismatch: Health checks failed with these codes: [503]\\n\\n        Target i-05387127cb2ebbea1 on port 80 is healthy\n```\n\n----------------------------------------\n\nTITLE: Defining Python AWS SDK Dependencies\nDESCRIPTION: Specifies the minimum required versions of boto3, botocore, and pytest libraries for AWS SDK examples. Requires boto3 1.34.0 or higher, botocore 1.34.0 or higher, and pytest 7.4.0 or higher.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/ssm/requirements.txt#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nboto3>=1.34.0\nbotocore>=1.34.0\npytest>=7.4.0\n```\n\n----------------------------------------\n\nTITLE: Running Tests in .NET Projects\nDESCRIPTION: Commands for running tests in the .NET projects, including options for verbosity and filtering by test category (Unit or Integration).\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet test\ndotnet test -l \"console;verbosity=detailed\"\ndotnet test --filter Category=Unit -l \"console;verbosity=detailed\"\ndotnet test --filter Category=Integration -l \"console;verbosity=detailed\"\n```\n\n----------------------------------------\n\nTITLE: AssumeRole Operation Implementation in Rust\nDESCRIPTION: This code demonstrates how to use the AWS SDK for Rust to call the AssumeRole operation in AWS STS. The function assumes a specified IAM role and returns temporary security credentials.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/sts/README.md#2025-04-09_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nsrc/bin/assume-role.rs#L32\n```\n\n----------------------------------------\n\nTITLE: Getting SNS Topic Attributes using AWS SDK for Kotlin\nDESCRIPTION: This code snippet shows how to retrieve attributes of an Amazon SNS topic using the AWS SDK for Kotlin.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/sns/README.md#2025-04-09_snippet_3\n\nLANGUAGE: Kotlin\nCODE:\n```\nsrc/main/kotlin/com/kotlin/sns/GetTopicAttributes.kt#L38\n```\n\n----------------------------------------\n\nTITLE: Synthesizing CloudFormation Template for Kinesis Examples\nDESCRIPTION: Generates the synthesized CloudFormation template from the CDK app.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/kinesis/kinesis-cdk/README.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx cdk synth\n```\n\n----------------------------------------\n\nTITLE: Getting CloudWatch Log Events Command\nDESCRIPTION: Command line usage pattern for retrieving log events from a specified log group and stream.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/cloudwatch/README.md#2025-04-09_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ngo run GetLogEvents.go -l LOG-GROUP -s LOG-STREAM [-l LIMIT]\n```\n\n----------------------------------------\n\nTITLE: Copying S3 Objects in PHP\nDESCRIPTION: Code that demonstrates how to copy an object from one location to another within Amazon S3. This operation is part of the basic S3 operations example.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/php/example_code/s3/README.md#2025-04-09_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nCopyObject\n```\n\n----------------------------------------\n\nTITLE: Starting AWS Glue Crawler\nDESCRIPTION: Example showing how to start an AWS Glue crawler using the StartCrawler API operation to begin the data discovery process.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/glue/README.md#2025-04-09_snippet_4\n\nLANGUAGE: Kotlin\nCODE:\n```\nsrc/main/kotlin/com/kotlin/glue/StartCrawler.kt#L38\n```\n\n----------------------------------------\n\nTITLE: Conditional Test Directory Setup\nDESCRIPTION: Adds a tests subdirectory to the build if the BUILD_TESTS variable is enabled. This allows for building test cases alongside the main examples conditionally.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/sdk-customization/CMakeLists.txt#2025-04-09_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif (BUILD_TESTS)\n    add_subdirectory(tests)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Marshmallow Schema Definition\nDESCRIPTION: Python code defining the work item schema using marshmallow for data transformation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/cross_service/aurora_item_tracker/README.md#2025-04-09_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nclass WorkItemSchema(Schema):\n    iditem = fields.Str(data_key='id')\n```\n\n----------------------------------------\n\nTITLE: Specifying tomlkit Package Version in Python Requirements File\nDESCRIPTION: This snippet specifies the tomlkit package at version 0.12.1 as a dependency for a Python project. This is typically found in a requirements.txt file which lists all external dependencies needed by the project.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/tools/requirements.txt#2025-04-09_snippet_0\n\nLANGUAGE: plain text\nCODE:\n```\ntomlkit==0.12.1\n```\n\n----------------------------------------\n\nTITLE: Describing AWS Support Services in Java\nDESCRIPTION: Uses the Support client to retrieve and display available AWS services that can be used when creating support cases.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/support/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nDescribeServicesResponse response = supportClient.describeServices(DescribeServicesRequest.builder().build());\nList<Service> services = response.services();\n\nSystem.out.println(\"Available services:\");\nfor (Service service : services) {\n    System.out.printf(\"- %s\\n\", service.name());\n}\n```\n\n----------------------------------------\n\nTITLE: Aurora Core Operations Tutorial\nDESCRIPTION: Complete scenario demonstrating essential Aurora operations including creating clusters, parameter groups, instances and snapshots.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/aurora/README.md#2025-04-09_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nsrc/aurora_scenario/mod.rs\n```\n\n----------------------------------------\n\nTITLE: Running Hello Amazon Cognito Identity Provider Example in Ruby\nDESCRIPTION: Command to execute the Hello Amazon Cognito Identity Provider example which demonstrates basic functionality using the ListUserPools operation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/ruby/example_code/cognito/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nruby hello/hello_cognito.rb\n```\n\n----------------------------------------\n\nTITLE: Signing Data with KMS using Java SDK\nDESCRIPTION: This code snippet shows how to sign data using a KMS key with the AWS SDK for Java 2.x. It uses the Sign operation to create a digital signature for the specified message using an asymmetric KMS key.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/kms/README.md#2025-04-09_snippet_15\n\nLANGUAGE: Java\nCODE:\n```\nKMSActions.java#L532\n```\n\n----------------------------------------\n\nTITLE: Creating AWS Resources with CloudFormation\nDESCRIPTION: Command to create the required AWS resources for the Textract example using CloudFormation. The setup.yaml template configures services including S3, SNS, SQS, and Cognito.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/cross-services/textract-react/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\naws cloudformation create-stack --stack-name <stack-name> --template-body file://setup.yaml --capabilities CAPABILITY_IAM\n```\n\n----------------------------------------\n\nTITLE: Setting Up Windows-Specific Build Configuration for RDS Examples\nDESCRIPTION: Configures Windows-specific build settings, including paths for finding AWS SDK libraries and copying necessary DLLs.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/rds/tests/CMakeLists.txt#2025-04-09_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(WINDOWS_BUILD ${MSVC})\n\nif (WINDOWS_BUILD)\n    string(REPLACE \";\" \"/aws-cpp-sdk-all;\" SYSTEM_MODULE_PATH \"${CMAKE_SYSTEM_PREFIX_PATH}/aws-cpp-sdk-all\")\n    list(APPEND CMAKE_PREFIX_PATH ${SYSTEM_MODULE_PATH})\nendif ()\n\nfind_package(AWSSDK REQUIRED COMPONENTS ${CURRENT_TARGET_AWS_DEPENDENCIES})\n\nif (WINDOWS_BUILD)\n    if (AWSSDK_INSTALL_AS_SHARED_LIBS)\n        AWSSDK_CPY_DYN_LIBS(\n                CURRENT_TARGET_AWS_DEPENDENCIES\n                \"\"\n                ${CMAKE_CURRENT_BINARY_DIR}${BIN_SUB_DIR}\n        )\n    endif ()\n\n    add_custom_command(\n            TARGET\n            ${CURRENT_TARGET}\n            POST_BUILD\n            COMMAND ${CMAKE_COMMAND} -E copy\n            ${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_BINDIR}${BIN_SUB_DIR}/gtest.dll\n            ${CMAKE_CURRENT_BINARY_DIR}${BIN_SUB_DIR}\n    )\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Listing SageMaker Notebook Instances in Rust\nDESCRIPTION: Example showing how to list all SageMaker notebook instances using the AWS SDK for Rust. The code is found in the sagemaker-helloworld.rs file at line 22.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/sagemaker/README.md#2025-04-09_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nListNotebookInstances\n```\n\n----------------------------------------\n\nTITLE: Assuming a Role using AWS STS in Java\nDESCRIPTION: This code snippet demonstrates how to assume a role using AWS Security Token Service (STS) in Java. It requires the role ARN, an access key ID, and a role session name to be defined in a config.properties file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/sts/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nAssumeRole\n```\n\n----------------------------------------\n\nTITLE: Modifying DB Parameter Group in Amazon RDS using C++\nDESCRIPTION: This code snippet references the ModifyDBParameterGroup action at line 382 in the getting_started_with_db_instances.cpp file, which demonstrates how to modify parameter values in a DB parameter group using the AWS SDK for C++.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/rds/README.md#2025-04-09_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Running Unit Tests with npm for AWS SDK JavaScript v3\nDESCRIPTION: Command to run unit tests for JavaScript v3 examples. Output will be stored in unit_test.log.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Sample SAML Metadata XML for Creating SAML Provider in AWS\nDESCRIPTION: An XML file containing sample SAML metadata used for creating a SAML provider in AWS Identity and Access Management (IAM) examples.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/resources/sample_files/README.md#2025-04-09_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\nsample_saml_metadata.xml\n```\n\n----------------------------------------\n\nTITLE: ASCII Wireframe for Photo Asset Management UI\nDESCRIPTION: This ASCII sketch represents a wireframe for the Photo Asset Management application's user interface. It shows the layout for uploading images, displaying tags with image counts, and initiating the download process.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/applications/photo-asset-manager/DESIGN.md#2025-04-09_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n(Upload images) (Import Bucket)\nTags\n[ ] Mountain (32)\n[ ] Lake (27)\n[ ] Clouds (18)\n[Phone Number|Email] (Download)\nSelect tags → Click (Download) → Start User Story 3\nUpload Images → <input type=\"file\" multiple /> to select images & Upload over form\n~Import Bucket → [Bucket Name] (Copy) → Import jpegs from that button~\n```\n\n----------------------------------------\n\nTITLE: Creating MediaStore Container in Kotlin\nDESCRIPTION: Demonstrates the creation of a MediaStore container using the AWS SDK for Kotlin. This operation may incur charges to your AWS account and requires appropriate IAM permissions.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/mediastore/README.md#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCreateContainer - Demonstrates how to create a MediaStore container.\n```\n\n----------------------------------------\n\nTITLE: Listing Available Elastic Beanstalk Solution Stacks using Ruby SDK\nDESCRIPTION: Code example demonstrating how to retrieve a list of available solution stacks in Elastic Beanstalk using the ListAvailableSolutionStacks API call through the Ruby SDK. This operation returns all solution stack names available for use.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/ruby/example_code/elasticbeanstalk/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\n# list_stacks.rb#L6\nListAvailableSolutionStacks\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to the Executable\nDESCRIPTION: Links the Google Test main library, AWS SDK libraries, and platform-specific dependencies to the executable target.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/cross-service/serverless-aurora/tests/CMakeLists.txt#2025-04-09_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(${EXECUTABLE}\n        GTest::gtest_main\n        ${AWSSDK_LINK_LIBRARIES}\n        ${AWSSDK_PLATFORM_DEPS})\n```\n\n----------------------------------------\n\nTITLE: Updating an IAM Access Key Status in C++\nDESCRIPTION: Code excerpt showing how to update the status of an IAM access key using the AWS SDK for C++.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/iam/README.md#2025-04-09_snippet_22\n\nLANGUAGE: C++\nCODE:\n```\n// From update_access_key.cpp line 40\n```\n\n----------------------------------------\n\nTITLE: Implementing Actix Web Route for Retrieving a Work Item in Rust\nDESCRIPTION: Rust code snippet demonstrating an Actix Web route for retrieving a single WorkItem. It uses path parameters, dependency injection for the RDS client, and returns a JSON response or a WorkItemError.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/cross_service/rest_ses/README.md#2025-04-09_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[actix_web::get(\"/{id}\")]\n#[tracing::instrument(name = \"Request Retrieve single WorkItem\", skip(client))]\nasync fn retrieve(\n    itemid: Path<String>,\n    client: Data<crate::client::RdsClient>,\n) -> Result<Json<crate::work_item::WorkItem>, crate::work_item::WorkItemError> {\n    crate::work_item::repository::retrieve(itemid.to_string(), &client)\n        .await\n        .map(Json)\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Amazon SageMaker Notebook Instances\nDESCRIPTION: This code snippet demonstrates how to initialize a SageMaker client and list up to 5 notebook instances in the account. It shows the instance name, ARN, and creation date for each notebook instance found.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/sagemaker_pipelines/SPECIFICATION.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nHello Amazon SageMaker! Let's list some of your notebook instances:\n    Instance: test-notebook\n    Arn: arn:aws:sagemaker:us-west-2:123456789:notebook-instance/test-notebook\n    Creation Date: 6/7/2023\n```\n\n----------------------------------------\n\nTITLE: Generating Coupon List in Weekly Newsletter Template using Handlebars\nDESCRIPTION: This snippet demonstrates how to dynamically generate a list of coupons using Handlebars templating. It iterates over a 'coupons' array and displays the details of each coupon.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/sesv2_weekly_mailer/resources/coupon-newsletter.txt#2025-04-09_snippet_0\n\nLANGUAGE: Handlebars\nCODE:\n```\n{{#each coupons}}\n- {{details}}\n{{/each}}\n```\n\n----------------------------------------\n\nTITLE: Translating Text in Amazon Translate using .NET\nDESCRIPTION: Example showing how to translate text using the TranslateText API\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Translate/README.md#2025-04-09_snippet_4\n\nLANGUAGE: .NET\nCODE:\n```\nTranslateTextExample/TranslateText.cs#L6\n```\n\n----------------------------------------\n\nTITLE: CloudFormation S3 Auto Delete Objects Lambda Definition Reference\nDESCRIPTION: YAML snippet showing how to reference the S3 auto-delete Lambda function in a CloudFormation template. This is the code that needs to be replaced with the actual Lambda implementation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/healthimaging_image_sets/SPECIFICATION.md#2025-04-09_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nCustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F:\nType: AWS::Lambda::Function\nProperties:\nCode:\nS3Bucket:\nFn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}\nS3Key: b7f33614a69548d6bafe224d751a7ef238cde19097415e553fe8b63a4c8fd8a6.zip\n```\n\n----------------------------------------\n\nTITLE: Setting Amazon SNS Topic Attributes in Ruby\nDESCRIPTION: This code snippet demonstrates how to set attributes for an Amazon SNS topic using the AWS SDK for Ruby. It refers to a method likely defined in the enable_resource.rb file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/ruby/example_code/sns/README.md#2025-04-09_snippet_4\n\nLANGUAGE: Ruby\nCODE:\n```\nSetTopicAttributes\n```\n\n----------------------------------------\n\nTITLE: Creating an EventBridge Schedule Group in Java\nDESCRIPTION: This code snippet demonstrates the creation of an EventBridge Schedule Group using the AWS SDK for Java 2.x. It's part of the EventbridgeSchedulerActions class.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/scheduler/README.md#2025-04-09_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nCreateScheduleGroup\n```\n\n----------------------------------------\n\nTITLE: Checking CloudFormation Stack Deployment Status\nDESCRIPTION: Command to verify the deployment status of the CloudFormation stack. The stack must report CREATE_COMPLETE before proceeding with the next steps.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/cross-services/textract-react/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\naws cloudformation describe-stacks --stack-name <stack-name>\n```\n\n----------------------------------------\n\nTITLE: Configuring EC2 StartInstances Example Metadata in YAML\nDESCRIPTION: YAML configuration block that defines metadata for code examples showing how to start EC2 instances. Includes specifications for Java SDK v2, Python SDK v3, and Rust SDK v1 implementations, with references to GitHub locations and snippet tags.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/sesv2_weekly_mailer/content/70_snippets.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nc2_StartInstances:\n  title: Start an &EC2; instance using an &AWS; SDK\n  title_abbrev: Start an instance\n  synopsis: start an &EC2; instance.\n  category:\n  languages:\n    Java:\n      versions:\n        - sdk_version: 2\n          github: javav2/example_code/ec2\n          sdkguide:\n          excerpts:\n            - description:\n              snippet_tags:\n                - ec2.java2.scenario.start_instance.main\n    Python:\n      versions:\n        - sdk_version: 3\n          github: python/example_code/ec2\n          sdkguide:\n          excerpts:\n            - description:\n              snippet_tags:\n                - python.example_code.ec2.InstanceWrapper.decl\n                - python.example_code.ec2.StartInstances\n    Rust:\n      versions:\n        - sdk_version: 1\n          github: rustv1/examples/ec2\n          excerpts:\n            - description:\n              snippet_tags:\n                - ec2.rust.start-instance\n  services:\n    ec2: { StartInstances }\n```\n\n----------------------------------------\n\nTITLE: JSON Structure for POST Items Request\nDESCRIPTION: JSON request body structure for the POST /items endpoint. Used to add a new work item to the list with name, guide, description, and status properties.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/resources/clients/react/item-tracker/README.md#2025-04-09_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"<user name>\",\n  \"guide\": \"<guide name>\",\n  \"description\": \"<item description>\",\n  \"status\": \"<item status>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Terminating Instance in Auto Scaling Group in .NET\nDESCRIPTION: This snippet references the TerminateInstanceInAutoScalingGroup method which terminates a specific instance in an Auto Scaling group.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv4/AutoScaling/README.md#2025-04-09_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nTerminateInstanceInAutoScalingGroup(Actions/AutoScalingWrapper.cs#L275)\n```\n\n----------------------------------------\n\nTITLE: Obtaining Temporary Session Credentials with AWS STS in Kotlin\nDESCRIPTION: Example showing how to obtain a set of temporary security credentials using the GetSessionToken operation for temporary access to AWS resources.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/sts/README.md#2025-04-09_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Subscribing to an Amazon SNS Topic using .NET\nDESCRIPTION: This code example shows how to subscribe to an Amazon SNS topic. The code is from a file named ManageTopicSubscription.cs located in the ManageTopicSubscriptionExample project.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/SNS/README.md#2025-04-09_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nSubscribe\n```\n\n----------------------------------------\n\nTITLE: Deleting IAM User in Java\nDESCRIPTION: This snippet demonstrates how to delete an IAM user using the AWS SDK for Java 2.x.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/iam/README.md#2025-04-09_snippet_11\n\nLANGUAGE: Java\nCODE:\n```\nsrc/main/java/com/example/iam/DeleteUser.java#L6\n```\n\n----------------------------------------\n\nTITLE: Configuring target sources, includes, and linking\nDESCRIPTION: Adds source files to the target, configures include directories, sets compile definitions for testing builds, and links necessary libraries including Google Test and AWS SDK libraries.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/ec2/tests/CMakeLists.txt#2025-04-09_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(\n        ${CURRENT_TARGET}\n        PUBLIC\n        ${GTEST_SOURCE}\n        test_main.cpp\n        ${EXAMPLE_SERVICE_NAME}_gtests.cpp\n)\n\ntarget_include_directories(\n        ${CURRENT_TARGET}\n        PUBLIC\n        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/..>\n        $<INSTALL_INTERFACE:..>\n)\n\ntarget_compile_definitions(\n        ${CURRENT_TARGET}\n        PUBLIC\n        TESTING_BUILD\n)\n\ntarget_link_libraries(\n        ${CURRENT_TARGET}\n        GTest::gtest\n        ${AWSSDK_LINK_LIBRARIES}\n        ${AWSSDK_PLATFORM_DEPS}\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing AWS Lambda Upload Handler for S3\nDESCRIPTION: Java class that implements RequestHandler for API Gateway events, handling file upload requests to S3. Generates unique filenames and signed URLs for S3 uploads. Includes error handling for missing filenames and CORS support.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/pam_source_files/README.md#2025-04-09_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.photo.handlers;\n\nimport com.amazonaws.services.lambda.runtime.Context;\nimport com.amazonaws.services.lambda.runtime.RequestHandler;\nimport com.amazonaws.services.lambda.runtime.events.APIGatewayProxyRequestEvent;\nimport com.amazonaws.services.lambda.runtime.events.APIGatewayProxyResponseEvent;\nimport com.example.photo.services.S3Service;\nimport java.util.UUID;\n\nimport org.json.JSONObject;\n\nimport static com.example.photo.PhotoApplicationResources.makeResponse;\nimport static com.example.photo.PhotoApplicationResources.CORS_HEADER_MAP;\n\npublic class UploadHandler implements RequestHandler<APIGatewayProxyRequestEvent, APIGatewayProxyResponseEvent> {\n\n    @Override\n    public APIGatewayProxyResponseEvent handleRequest(APIGatewayProxyRequestEvent input, Context context) {\n        JSONObject body = new JSONObject(input.getBody());\n        context.getLogger().log(\"Got body: \" + body);\n        String fileName = body.getString(\"file_name\");\n        context.getLogger().log(\"Building URL for \" + fileName);\n\n        if (fileName == null || fileName.equals(\"\")) {\n            return new APIGatewayProxyResponseEvent()\n                    .withStatusCode(400)\n                    .withHeaders(CORS_HEADER_MAP)\n                    .withBody(\"{\\\"error\\\":\\\"Missing filename\\\"}\")\n                    .withIsBase64Encoded(false);\n        }\n        UUID uuid = UUID.randomUUID();\n        String uniqueFileName = uuid + \"-\" + fileName;\n\n        S3Service s3Service = new S3Service();\n        String signedURL = s3Service.signObjectToUpload(uniqueFileName);\n        UploadResponse data = UploadResponse.from(signedURL);\n        return makeResponse(data);\n    }\n}\n\nclass UploadResponse {\n    private final String url;\n\n    static UploadResponse from(String url) {\n        return new UploadResponse(url);\n    }\n\n    private UploadResponse(String url) {\n        this.url = url;\n    }\n\n    public String getURL() {\n        return url;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Describing AWS IoT Endpoint using Kotlin\nDESCRIPTION: This code example illustrates how to describe an AWS IoT Endpoint using the DescribeEndpoint operation in the AWS SDK for Kotlin.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/iot/README.md#2025-04-09_snippet_7\n\nLANGUAGE: Kotlin\nCODE:\n```\nDescribeEndpoint\n```\n\n----------------------------------------\n\nTITLE: Creating an IAM User using AWS SDK for Kotlin\nDESCRIPTION: This snippet demonstrates how to create an IAM user using the AWS SDK for Kotlin. It requires the user name as input and returns the created user details.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/iam/README.md#2025-04-09_snippet_4\n\nLANGUAGE: Kotlin\nCODE:\n```\nsrc/main/kotlin/com/kotlin/iam/CreateUser.kt#L38\n```\n\n----------------------------------------\n\nTITLE: Listing MediaConvert Jobs in C++\nDESCRIPTION: Referenced example for listing MediaConvert jobs using the AWS SDK for C++. Located in the list_jobs.cpp file at line 20.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/mediaconvert/README.md#2025-04-09_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nListJobs\n```\n\n----------------------------------------\n\nTITLE: Creating KMS Key - Ruby\nDESCRIPTION: Code example showing how to create a new KMS key using the AWS SDK for Ruby\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/ruby/example_code/kms/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nCreateKey\n```\n\n----------------------------------------\n\nTITLE: Uploading an Object to Amazon S3 using AWS SDK for Swift\nDESCRIPTION: This code snippet shows how to upload an object to an Amazon S3 bucket using the AWS SDK for Swift.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/swift/example_code/s3/README.md#2025-04-09_snippet_9\n\nLANGUAGE: Swift\nCODE:\n```\nbasics/Sources/ServiceHandler/ServiceHandler.swift#L107\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Files and Linking for RDS Examples\nDESCRIPTION: Sets up the test files, links necessary libraries, and configures Google Test for the RDS examples project.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/rds/tests/CMakeLists.txt#2025-04-09_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT DEFINED GTEST_SOURCE_FILES)\n    file(\n            GLOB\n            GTEST_SOURCE_FILES\n            \"gtest_*.cpp\"\n    )\nendif()\n\nenable_testing()\n\nforeach(TEST_FILE ${GTEST_SOURCE_FILES})\n    string(REPLACE \"gtest_\" \"../\" SOURCE_FILE ${TEST_FILE})\n     if (EXISTS ${SOURCE_FILE})\n        list(APPEND GTEST_SOURCE ${SOURCE_FILE} ${TEST_FILE})\n    else()\n        message(\"Error: no associated source file found for ${TEST_FILE}\")\n    endif()\nendforeach()\n\ntarget_sources(\n        ${CURRENT_TARGET}\n        PUBLIC\n        ${GTEST_SOURCE}\n        test_main.cpp\n        ${EXAMPLE_SERVICE_NAME}_gtests.cpp\n)\n\ntarget_include_directories(\n        ${CURRENT_TARGET}\n        PUBLIC\n        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/..>\n        $<INSTALL_INTERFACE:..>\n)\ntarget_compile_definitions(\n        ${CURRENT_TARGET}\n        PUBLIC\n        TESTING_BUILD\n        SRC_DIR=\"${CMAKE_CURRENT_SOURCE_DIR}\"\n)\n\ntarget_link_libraries(\n        ${CURRENT_TARGET}\n        GTest::gtest\n        ${AWSSDK_LINK_LIBRARIES}\n        ${AWSSDK_PLATFORM_DEPS}\n)\n\ninclude(GoogleTest)\ngtest_add_tests(\n        TARGET\n        ${CURRENT_TARGET}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for AWS SDK C++ Transfer Manager Examples\nDESCRIPTION: Configures CMake build settings for AWS Transfer Manager examples. Sets up project properties, AWS SDK dependencies, and generates executables and test targets. Handles platform-specific configurations for Windows builds and shared library management.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/transfer-manager/CMakeLists.txt#2025-04-09_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\n\n# Set the minimum required version of CMake for this project.\ncmake_minimum_required(VERSION 3.13)\n\n# Set this project's name.\nproject(\"tm-examples\")\n\nset(SERVICE_COMPONENTS transfer)\n\n# Set the C++ standard to use to build this target.\nset(CMAKE_CXX_STANDARD 11)\n\n# Enable CTest for testing these code examples.\ninclude(CTest)\n\n# Build shared libraries by default.\nif(NOT BUILD_SHARED_LIBS)\n    set(BUILD_SHARED_LIBS ON)\nendif()\n\n# Use the MSVC variable to determine if this is a Windows build.\nset(WINDOWS_BUILD ${MSVC})\n\n# Set the location of where Windows can find the installed libraries of the SDK.\nif (WINDOWS_BUILD)\n    string(REPLACE \";\" \"/aws-cpp-sdk-all;\" SYSTEM_MODULE_PATH \"${CMAKE_SYSTEM_PREFIX_PATH}/aws-cpp-sdk-all\")\n    list(APPEND CMAKE_PREFIX_PATH ${SYSTEM_MODULE_PATH})\nendif ()\n\n# Find the AWS SDK for C++ package.\nfind_package(AWSSDK REQUIRED COMPONENTS ${SERVICE_COMPONENTS})\n\nif (WINDOWS_BUILD AND AWSSDK_INSTALL_AS_SHARED_LIBS)\n    AWSSDK_CPY_DYN_LIBS(SERVICE_COMPONENTS \"\" ${CMAKE_CURRENT_BINARY_DIR}${BIN_SUB_DIR})\nendif ()\n\n# Add the code example-specific source files.\nfile(GLOB AWSDOC_EX_SOURCE\n    \"*.cpp\"\n)\n\nforeach(file ${AWSDOC_EX_SOURCE})\n    get_filename_component(EXAMPLE ${file} NAME_WE)\n\n    # Build the code example executables.\n    set(EXAMPLE_EXE run_${EXAMPLE})\n\n    add_executable(${EXAMPLE_EXE}  ${file})\n\n    if(MSVC AND BUILD_SHARED_LIBS)\n        target_compile_definitions(${EXAMPLE_EXE} PUBLIC \"USE_IMPORT_EXPORT\")\n        target_compile_definitions(${EXAMPLE_EXE} PRIVATE \"AWSDOC_EX_EXPORTS\")\n    endif()\n\n    target_include_directories(${EXAMPLE_EXE} PUBLIC\n        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\n        $<INSTALL_INTERFACE:include>)\n    target_link_libraries(${EXAMPLE_EXE} ${AWSSDK_LINK_LIBRARIES}\n        ${AWSSDK_PLATFORM_DEPS})\n\n    if(BUILD_TESTING)\n        # Enable testing for this directory and below.\n        enable_testing()\n\n        # Build the code example libraries.\n        set(EXAMPLE_LIB ${EXAMPLE})\n\n        add_library(${EXAMPLE_LIB} ${file} )\n\n        if(MSVC AND BUILD_SHARED_LIBS)\n            target_compile_definitions(${EXAMPLE_LIB} PUBLIC \"USE_IMPORT_EXPORT\")\n            target_compile_definitions(${EXAMPLE_LIB} PRIVATE \"AWSDOC_EX_EXPORTS\")\n        endif()\n\n        target_include_directories(${EXAMPLE_LIB} PUBLIC\n            $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\n            $<INSTALL_INTERFACE:include>)\n        target_link_libraries(${EXAMPLE_LIB} ${AWSSDK_LINK_LIBRARIES}\n            ${AWSSDK_PLATFORM_DEPS})\n\n        # Build the code example unit tests.\n        set(EXAMPLE_TEST test_${EXAMPLE})\n        set(EXAMPLE_TEST_FILE ${CMAKE_CURRENT_SOURCE_DIR}/tests/test_${EXAMPLE}.cpp)\n\n        if(EXISTS ${EXAMPLE_TEST_FILE})\n            add_executable(${EXAMPLE_TEST} ${EXAMPLE_TEST_FILE} )\n\n            target_include_directories(${EXAMPLE_TEST} PUBLIC\n                $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\n                $<INSTALL_INTERFACE:include>)\n            target_link_libraries(${EXAMPLE_TEST} ${EXAMPLE_LIB} )\n            add_test(${EXAMPLE_TEST} ${EXAMPLE_TEST})\n        endif()\n\n    endif()\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for SubmitData App\nDESCRIPTION: This code snippet shows how to install the necessary dependencies for the SubmitData App. It includes installing Node.js globally and then installing the project-specific dependencies listed in package.json, which include AWS SDK client modules for Cognito Identity, DynamoDB, SNS, S3, and IAM.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/cross-services/submit-data-app/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install node -g\ncd javascriptv3/example_code/cross-services/submit-data-app\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Upload Lambda Function Response JSON Structure\nDESCRIPTION: JSON response structure returned by the Upload Lambda function. It includes a presigned S3 URL that can be used to upload the specified image file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/pam_source_files/README.md#2025-04-09_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n{\n  \"statusCode\": 200,\n  \"headers\": {\n    \"Access-Control-Allow-Origin\": \"*\"\n  },\n  \"body\": \"{\\\"url\\\":\\\"https://xxxxxxxxxxxx.amazonaws.com/xxxxxxxxxxxxxxx-mountain.jpg?X-Amz-Security-xxxxxxxxxxxxxxxxxxx\\\"}\",\n  \"isBase64Encoded\": false\n }\n```\n\n----------------------------------------\n\nTITLE: Creating New Work Item via REST POST\nDESCRIPTION: HTTP POST request to add a new work item with specified details including name, guide, description, and status.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/resources/clients/react/elwing/src/plugins/item-tracker/README.md#2025-04-09_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST http://localhost:8080/api/items\n{\"name\":\"Me\",\n \"guide\":\"Rust\",\n \"description\":\"Show how to add an item\",\n \"status\":\"In progress\",\n \"archived\":false}\n```\n\n----------------------------------------\n\nTITLE: Deleting CloudTrail Trail using Ruby SDK\nDESCRIPTION: Code example demonstrating how to delete an existing trail from AWS CloudTrail using AWS SDK for Ruby. The functionality is referenced in delete_trail.rb at line 9.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/ruby/example_code/cloudtrail/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\n# Location: delete_trail.rb#L9\n```\n\n----------------------------------------\n\nTITLE: Listing IAM Account Aliases in C++\nDESCRIPTION: Code excerpt showing how to list IAM account aliases using the AWS SDK for C++.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/iam/README.md#2025-04-09_snippet_17\n\nLANGUAGE: C++\nCODE:\n```\n// From list_account_aliases.cpp line 36\n```\n\n----------------------------------------\n\nTITLE: Receiving Messages from SQS Queue in Go\nDESCRIPTION: Example command for receiving messages from an AWS SQS queue with configurable visibility timeout.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/sqs/README.md#2025-04-09_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngo run ReceiveMessage.go -q QUEUE [-t VISIBILITY]\n```\n\n----------------------------------------\n\nTITLE: Describing S3 Batch Job in Java\nDESCRIPTION: Retrieves detailed information about an S3 batch job using DescribeJob API\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/s3/src/main/java/com/example/s3/batch/README.md#2025-04-09_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nS3BatchActions.java#L263\n```\n\n----------------------------------------\n\nTITLE: Initializing Project Configuration in CMake\nDESCRIPTION: Sets up basic project configuration including minimum CMake version, project name, and executable name.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/cognito_flutter_mobile_app/windows/CMakeLists.txt#2025-04-09_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(myapp LANGUAGES CXX)\nset(BINARY_NAME \"myapp\")\n```\n\n----------------------------------------\n\nTITLE: Setting Up CMake Project for AWS SDK C++ Examples\nDESCRIPTION: Configures a CMake project for AWS SDK C++ examples with S3 components. Sets minimum CMake version, project name, C++ standard, and handles Windows-specific configurations for finding SDK libraries.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/sdk-customization/CMakeLists.txt#2025-04-09_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Set the minimum required version of CMake for this project.\ncmake_minimum_required(VERSION 3.13)\n\nset(PROJECT_NAME sdk_customization)\nset(SERVICE_COMPONENTS s3)\n\n# Set this project's name.\nproject(\"${PROJECT_NAME}-examples\")\n\n# Set the C++ standard to use to build this target.\nset(CMAKE_CXX_STANDARD 11)\n\n# Use the MSVC variable to determine if this is a Windows build.\nset(WINDOWS_BUILD ${MSVC})\n\n# Set the location of where Windows can find the installed libraries of the SDK.\nif (WINDOWS_BUILD)\n    string(REPLACE \";\" \"/aws-cpp-sdk-all;\" SYSTEM_MODULE_PATH \"${CMAKE_SYSTEM_PREFIX_PATH}/aws-cpp-sdk-all\")\n    list(APPEND CMAKE_PREFIX_PATH ${SYSTEM_MODULE_PATH})\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Listing EventBuses with EventBridge in Kotlin\nDESCRIPTION: This snippet demonstrates how to list event buses using the ListEventBuses operation in Amazon EventBridge with the AWS SDK for Kotlin.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/eventbridge/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nListEventBuses\n```\n\n----------------------------------------\n\nTITLE: Configuring Static AWS Credentials in Kotlin\nDESCRIPTION: Code showing how to set up static AWS credentials using StaticCredentialsProvider for mobile app authentication. This approach is used when shared credentials are not accessible on mobile devices.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/subpub_app_android/README.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nfun getStatic() : StaticCredentialsProvider{\n    val staticCredentials = StaticCredentialsProvider {\n        accessKeyId = \"<Enter value>\"\n        secretAccessKey = \"<Enter value>\"\n    }\n    return staticCredentials\n}\n```\n\n----------------------------------------\n\nTITLE: Detaching a Thing Principal in AWS IoT using Kotlin\nDESCRIPTION: This code example shows how to detach a principal (certificate) from an AWS IoT Thing using the DetachThingPrincipal operation in the AWS SDK for Kotlin.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/iot/README.md#2025-04-09_snippet_9\n\nLANGUAGE: Kotlin\nCODE:\n```\nDetachThingPrincipal\n```\n\n----------------------------------------\n\nTITLE: Running Tests with CMake\nDESCRIPTION: Shell commands for building and running tests using CMake. This snippet shows how to configure the build with tests enabled and execute them.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/lambda/README.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd <BUILD_DIR>\ncmake <path-to-root-of-this-source-code> -DBUILD_TESTS=ON\nmake\nctest\n```\n\n----------------------------------------\n\nTITLE: Running Auto Scaling Basics Scenario\nDESCRIPTION: Execute the scenario that demonstrates core Auto Scaling functionality including group creation, metrics collection, and instance management.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/auto-scaling/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython scenario_groups_and_instances.py\n```\n\n----------------------------------------\n\nTITLE: Getting SMS Attributes for Amazon SNS in C++\nDESCRIPTION: This code snippet shows how to retrieve SMS attributes for Amazon SNS using the AWS SDK for C++. It's located in the get_sms_type.cpp file at line 21.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/sns/README.md#2025-04-09_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\n// Code for GetSMSAttributes action (specific implementation not provided)\n```\n\n----------------------------------------\n\nTITLE: Handling Shared Libraries for Windows Builds\nDESCRIPTION: Copies the required AWS SDK dynamic libraries to the binary directory for Windows builds when using shared libraries, ensuring the executable can find them at runtime.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/s3/tests/CMakeLists.txt#2025-04-09_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif (WINDOWS_BUILD AND AWSSDK_INSTALL_AS_SHARED_LIBS)\n    # set(BIN_SUB_DIR \"/Debug\") # If you are building from the command line, you may need to uncomment this\n    # and set the proper subdirectory to the executables' location.\n    # Copy relevant AWS SDK for C++ libraries into the current binary directory for running and debugging.\n    AWSSDK_CPY_DYN_LIBS(\n            CURRENT_TARGET_AWS_DEPENDENCIES\n            \"\"\n            ${CMAKE_CURRENT_BINARY_DIR}${BIN_SUB_DIR}\n    )\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Test for RDS Examples\nDESCRIPTION: Finds or downloads Google Test library for the project. If Google Test is not found, it's fetched from GitHub.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/rds/tests/CMakeLists.txt#2025-04-09_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(GTest)\n\nif(NOT GTest_FOUND)\n    include(FetchContent)\n    FetchContent_Declare(\n            googletest\n            GIT_REPOSITORY https://github.com/google/googletest.git\n            GIT_TAG release-1.12.1\n    )\n\n    set(gtest_force_shared_crt ON CACHE BOOL \"\" FORCE)\n    FetchContent_MakeAvailable(googletest)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting S3 Object Lock Configuration in JavaScript\nDESCRIPTION: This code snippet shows how to set the Object Lock configuration for an S3 bucket using the PutObjectLockConfiguration operation in the AWS SDK for JavaScript (v3).\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/s3/README.md#2025-04-09_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\n- [PutObjectLockConfiguration](actions/put-object-lock-configuration.js)\n```\n\n----------------------------------------\n\nTITLE: S3 Bucket Cleanup Command\nDESCRIPTION: AWS CLI command to recursively remove all objects from an S3 bucket\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/cross-services/photo_analyzer/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\naws s3 rm s3://bucket-name --recursive\n```\n\n----------------------------------------\n\nTITLE: Setting Static Response Parameters Example\nDESCRIPTION: Shows the response when setting up static fallback responses for service failures, returning a '404 Not Found' coloring book as the default response.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/resilient_service/SPECIFICATION.md#2025-04-09_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nRequest:\\n\\nGET http://doc-example-resilience-lb-1317068782.us-west-2.elb.amazonaws.com\\n\\nResponse:\\n\\n200\\n{'MediaType': {'S': 'Book'},\\n 'ItemId': {'N': '0'},\\n 'Title': {'S': '404 Not Found: A Coloring Book'},\\n 'Creator': {'S': 'The Oatmeal'},\\n 'Metadata': {'InstanceId': 'i-05387127cb2ebbea1',\\n              'AvailabilityZone': 'us-west-2c'}}\n```\n\n----------------------------------------\n\nTITLE: Creating DB Snapshot with Amazon RDS using PHP SDK\nDESCRIPTION: Code example demonstrating how to create a database snapshot using Amazon RDS with the AWS SDK for PHP. Reference to CreateDBSnapshot.php implementation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/php/example_code/rds/README.md#2025-04-09_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Deleting an IAM User in C++\nDESCRIPTION: Code excerpt showing how to delete an IAM user using the AWS SDK for C++.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/iam/README.md#2025-04-09_snippet_11\n\nLANGUAGE: C++\nCODE:\n```\n// From delete_user.cpp line 42\n```\n\n----------------------------------------\n\nTITLE: Running Scenario Examples in Node.js\nDESCRIPTION: Command to execute EC2 scenario examples that demonstrate multiple operations together\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/ec2/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnode ./scenarios/<fileName>\n```\n\n----------------------------------------\n\nTITLE: Listing Aliases for KMS Keys with PHP\nDESCRIPTION: This example demonstrates how to list aliases for KMS keys using the AWS SDK for PHP. Aliases are friendly names that can be associated with KMS keys.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/php/example_code/kms/README.md#2025-04-09_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\nKmsService.php#L112\n```\n\n----------------------------------------\n\nTITLE: Flutter Library Headers Configuration\nDESCRIPTION: Defines the list of Flutter library headers and configures the Flutter interface library with necessary dependencies and include directories.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/cognito_flutter_mobile_app/linux/flutter/CMakeLists.txt#2025-04-09_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\n```\n\n----------------------------------------\n\nTITLE: Deploying Cognito MFA Resources with AWS CDK\nDESCRIPTION: Commands to install dependencies and deploy the Cognito user pool with MFA using AWS CDK. This creates the necessary resources and outputs the ClientId and UserPoolId.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/resources/cdk/cognito_scenario_user_pool_with_mfa/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\ncdk deploy\n```\n\n----------------------------------------\n\nTITLE: Creating a State Machine in AWS Step Functions with Kotlin\nDESCRIPTION: Demonstrates the creation of a state machine in AWS Step Functions using the AWS SDK for Kotlin and the createStateMachine command.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/stepfunctions/README.md#2025-04-09_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Code not provided in the given content\n```\n\n----------------------------------------\n\nTITLE: Uploading Document to S3\nDESCRIPTION: Command to upload resume documents to Amazon S3 bucket for document context\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/bedrock-runtime/models/anthropic_claude/scenarios/claude3_chatbot_demo/README.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython utils/upload_document.py\n```\n\n----------------------------------------\n\nTITLE: Describing IoT Endpoint in Rust\nDESCRIPTION: This code snippet demonstrates how to use the AWS SDK for Rust to describe an AWS IoT endpoint. It's located in the file 'src/bin/describe-endpoint.rs' at line 26.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/iot/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nsrc/bin/describe-endpoint.rs#L26\n```\n\n----------------------------------------\n\nTITLE: Running AWS IoT Tests\nDESCRIPTION: Shell commands for building and running the test suite using CMake and CTest. Configures build with BUILD_TESTS flag enabled.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/iot/README.md#2025-04-09_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n   cd <BUILD_DIR>\n   cmake <path-to-root-of-this-source-code> -DBUILD_TESTS=ON\n   make\n   ctest\n```\n\n----------------------------------------\n\nTITLE: Creating an Amazon SNS Topic using Rust\nDESCRIPTION: This code snippet demonstrates how to create a new Amazon SNS topic using the AWS SDK for Rust. It references the 'create-topic.rs' file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/sns/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nsrc/bin/create-topic.rs#L26\n```\n\n----------------------------------------\n\nTITLE: Inserting an Item into DynamoDB Table in Kotlin\nDESCRIPTION: This code excerpt demonstrates how to insert an item into a DynamoDB table using the AWS SDK for Kotlin. It's one of the single actions illustrated in the file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/dynamodb/README.md#2025-04-09_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\nPutItem(src/main/kotlin/com/kotlin/dynamodb/PutItem.kt#L56)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for AWS SNS GTest Build\nDESCRIPTION: Complete CMake configuration that sets up Google Test integration with AWS SNS SDK examples. Handles Windows-specific setup, AWS SDK dependencies, and test file organization. Includes automatic test discovery and linking of required libraries.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/sns/tests/CMakeLists.txt#2025-04-09_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\n\n# Set the minimum required version of CMake for this project.\ncmake_minimum_required(VERSION 3.14)\n\nset(EXAMPLE_SERVICE_NAME sns)\nset(CURRENT_TARGET \"${EXAMPLE_SERVICE_NAME}_gtest\")\nset(CURRENT_TARGET_AWS_DEPENDENCIES sns)\n\n# Set this project's name.\nproject(\"${EXAMPLE_SERVICE_NAME}-examples-gtests\")\n\n# Set the C++ standard to use to build this target.\nset(CMAKE_CXX_STANDARD 14)\n\n# Build shared libraries by default.\nset(BUILD_SHARED_LIBS ON)\n\nfind_package(GTest)\n\nif (NOT GTest_FOUND)\n    include(FetchContent)\n    FetchContent_Declare(\n            googletest\n            GIT_REPOSITORY https://github.com/google/googletest.git\n            GIT_TAG release-1.12.1\n    )\n\n    # For Windows: Prevent overriding the parent project's compiler/linker settings.\n    set(gtest_force_shared_crt ON CACHE BOOL \"\" FORCE)\n    FetchContent_MakeAvailable(googletest)\nendif ()\n\n# Use the MSVC variable to determine if this is a Windows build.\nset(WINDOWS_BUILD ${MSVC})\n\n# Set the location for Windows to find the installed libraries of the SDK.\nif (WINDOWS_BUILD)\n    string(REPLACE \";\" \"/aws-cpp-sdk-all;\" SYSTEM_MODULE_PATH \"${CMAKE_SYSTEM_PREFIX_PATH}/aws-cpp-sdk-all\")\n    list(APPEND CMAKE_PREFIX_PATH ${SYSTEM_MODULE_PATH})\nendif ()\n\n# Find the AWS SDK for C++ package.\nfind_package(AWSSDK REQUIRED COMPONENTS ${CURRENT_TARGET_AWS_DEPENDENCIES})\n\nadd_executable(\n        ${CURRENT_TARGET}\n)\n\nif (WINDOWS_BUILD)\n    # set(BIN_SUB_DIR \"/Debug\") # If you are building from the command line, you may need to uncomment this\n    # and set the proper subdirectory to the executables' location.\n\n    if (AWSSDK_INSTALL_AS_SHARED_LIBS)\n        # Copy relevant AWS SDK for C++ libraries into the current binary directory for running and debugging.\n        AWSSDK_CPY_DYN_LIBS(\n                CURRENT_TARGET_AWS_DEPENDENCIES\n                \"\"\n                ${CMAKE_CURRENT_BINARY_DIR}${BIN_SUB_DIR}\n        )\n    endif ()\n\n    add_custom_command(\n            TARGET\n            ${CURRENT_TARGET}\n            POST_BUILD\n            COMMAND ${CMAKE_COMMAND} -E copy\n            ${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_BINDIR}${BIN_SUB_DIR}/gtest.dll\n            ${CMAKE_CURRENT_BINARY_DIR}${BIN_SUB_DIR}\n    )\nendif ()\n\n# GTEST_SOURCE_FILES can be defined in the command line to limit the files in a build, for example to one action.\nif (NOT DEFINED GTEST_SOURCE_FILES)\n    file(\n            GLOB\n            GTEST_SOURCE_FILES\n            \"gtest_*.cpp\"\n    )\nendif ()\n\nenable_testing()\n\nforeach (TEST_FILE ${GTEST_SOURCE_FILES})\n    string(REPLACE \"gtest_\" \"../\" SOURCE_FILE ${TEST_FILE})\n    if (EXISTS ${SOURCE_FILE})\n        list(APPEND GTEST_SOURCE ${SOURCE_FILE} ${TEST_FILE})\n    else ()\n        message(\"Error: no associated source file found for ${TEST_FILE}\")\n    endif ()\nendforeach ()\n\ntarget_sources(\n        ${CURRENT_TARGET}\n        PUBLIC\n        ${GTEST_SOURCE}\n        test_main.cpp\n        ${EXAMPLE_SERVICE_NAME}_gtests.cpp\n)\n\ntarget_include_directories(\n        ${CURRENT_TARGET}\n        PUBLIC\n        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/..>\n        $<INSTALL_INTERFACE:..>\n)\n\ntarget_compile_definitions(\n        ${CURRENT_TARGET}\n        PUBLIC\n        TESTING_BUILD\n        SRC_DIR=\"${CMAKE_CURRENT_SOURCE_DIR}\"\n)\n\ntarget_link_libraries(\n        ${CURRENT_TARGET}\n        GTest::gtest\n        ${AWSSDK_LINK_LIBRARIES}\n        ${AWSSDK_PLATFORM_DEPS}\n)\n\ninclude(GoogleTest)\n\ngtest_add_tests(\n        TARGET\n        ${CURRENT_TARGET}\n)\n```\n\n----------------------------------------\n\nTITLE: Listing DynamoDB Tables in ABAP\nDESCRIPTION: This code excerpt shows how to list DynamoDB tables using the AWS SDK for SAP ABAP. It is one of the single action examples provided for DynamoDB operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/sap-abap/services/dyn/README.md#2025-04-09_snippet_5\n\nLANGUAGE: ABAP\nCODE:\n```\nzcl_aws1_dyn_actions.clas.abap#L215\n```\n\n----------------------------------------\n\nTITLE: Running Scenario Example\nDESCRIPTION: Command to execute a scenario example file from the scenarios directory\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/cognito-identity-provider/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnode ./scenarios/<fileName>\n```\n\n----------------------------------------\n\nTITLE: Creating an Amazon SNS Topic in Ruby\nDESCRIPTION: This code snippet demonstrates how to create a new topic in Amazon SNS using the AWS SDK for Ruby. It refers to a method likely defined in the create_topic.rb file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/ruby/example_code/sns/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nCreateTopic\n```\n\n----------------------------------------\n\nTITLE: Detaching a Policy from an IAM Role in C++\nDESCRIPTION: Code excerpt showing how to detach a policy from an IAM role using the AWS SDK for C++.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/iam/README.md#2025-04-09_snippet_12\n\nLANGUAGE: C++\nCODE:\n```\n// From detach_role_policy.cpp line 41\n```\n\n----------------------------------------\n\nTITLE: Running PyTest with AWS Device Farm Browser Testing\nDESCRIPTION: Commands to set up the environment and run the PyTest suite for AWS Device Farm browser testing. Requires a Device Farm project ARN and uses pipenv for dependency management.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/devicefarm/browser_testing/README.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npipenv install\n```\n\nLANGUAGE: shell\nCODE:\n```\nPROJECT_ARN=\"aws:arn:devicefarm:us-west-2:...\" pipenv run pytest -s\n```\n\n----------------------------------------\n\nTITLE: Running the Demo Stage for S3 Conditional Requests with JavaScript SDK v3\nDESCRIPTION: Command to run the demo stage which demonstrates various conditional request operations on S3 objects, including successful and failed operations based on preconditions.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/s3/scenarios/conditional-requests/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnode index.js -s demo\n```\n\n----------------------------------------\n\nTITLE: Building Calculator Lambda Function in C++\nDESCRIPTION: Series of commands to build and package the Calculator Lambda function using CMake and the AWS Lambda C++ Runtime.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/lambda/cpp_lambda/README.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd /cpp_lambda/calculator && \\\nmkdir build && \\\ncd build && \\\ncmake3 .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH=~/install && \\\nmake && \\\nmake aws-lambda-package-cpp_lambda_calculator\n```\n\n----------------------------------------\n\nTITLE: Getting MediaConvert Job Details in C++\nDESCRIPTION: Referenced example for retrieving details of a MediaConvert job using the AWS SDK for C++. Located in the get_job.cpp file at line 20.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/mediaconvert/README.md#2025-04-09_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nGetJob\n```\n\n----------------------------------------\n\nTITLE: Implementing Spring Boot Controller for SNS Operations in Kotlin\nDESCRIPTION: Kotlin implementation of a Spring Boot application with a controller that handles HTTP requests for SNS operations. The controller provides endpoints for subscribing/unsubscribing emails to an SNS topic, publishing messages with language translation, and listing all subscriptions using Kotlin Coroutines.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/subpub_app/README.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.aws.kotlin\n\nimport kotlinx.coroutines.runBlocking\nimport org.springframework.beans.factory.annotation.Autowired\nimport org.springframework.boot.autoconfigure.SpringBootApplication\nimport org.springframework.boot.runApplication\nimport org.springframework.stereotype.Controller\nimport org.springframework.web.bind.annotation.GetMapping\nimport org.springframework.web.bind.annotation.RequestMapping\nimport org.springframework.web.bind.annotation.RequestMethod\nimport org.springframework.web.bind.annotation.ResponseBody\nimport javax.servlet.http.HttpServletRequest\nimport javax.servlet.http.HttpServletResponse\n\n@SpringBootApplication\nopen class SubApplication\n\nfun main(args: Array<String>) {\n    runApplication<SubApplication>(*args)\n}\n\n@Controller\nclass MessageResource {\n\n    @Autowired\n    var sns: SnsService? = null\n\n    @GetMapping(\"/\")\n    fun root(): String? {\n        return \"index\"\n    }\n\n    @GetMapping(\"/subscribe\")\n    fun add(): String? {\n        return \"sub\"\n    }\n\n    @RequestMapping(value = [\"/delSub\"], method = [RequestMethod.POST])\n    @ResponseBody\n    fun delSub(request: HttpServletRequest, response: HttpServletResponse?): String? = runBlocking {\n        val email = request.getParameter(\"email\")\n        sns?.unSubEmail(email)\n        return@runBlocking \"$email was successfully deleted!\"\n    }\n\n    @RequestMapping(value = [\"/addEmail\"], method = [RequestMethod.POST])\n    @ResponseBody\n    fun addItems(request: HttpServletRequest, response: HttpServletResponse?): String? = runBlocking {\n        val email = request.getParameter(\"email\")\n        return@runBlocking sns?.subEmail(email)\n    }\n\n    @RequestMapping(value = [\"/addMessage\"], method = [RequestMethod.POST])\n    @ResponseBody\n    fun addMessage(request: HttpServletRequest, response: HttpServletResponse?): String? = runBlocking {\n        val body = request.getParameter(\"body\")\n        val lang = request.getParameter(\"lang\")\n        return@runBlocking sns?.pubTopic(body,lang)\n    }\n\n    @RequestMapping(value = [\"/getSubs\"], method = [RequestMethod.GET])\n    @ResponseBody\n    fun getSubs(request: HttpServletRequest?, response: HttpServletResponse?): String? = runBlocking{\n        return@runBlocking sns?.getAllSubscriptions()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying AWS KMS Key Information in Java\nDESCRIPTION: Example output showing the ARN and ID of a KMS key. This demonstrates the format of key identifiers returned by the AWS KMS service.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/basics/kms/SPECIFICATION.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nThe key ARN is: arn:aws:kms:us-west-2:123456789012:key/12345678-abcd-abcd-abcd-123456789012. The key Id is: 2345678-abcd-abcd-abcd-1234\n```\n\n----------------------------------------\n\nTITLE: Invoking Lambda Functions with AWS SDK for .NET\nDESCRIPTION: Invokes a Lambda function with the specified function name and parameters. The function can be invoked with different invocation types and returns the response from the invocation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Lambda/README.md#2025-04-09_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n/// <summary>\n/// Invoke a Lambda function.\n/// </summary>\n/// <param name=\"functionName\">The name of the Lambda function to\n/// invoke.</param>\n/// <param name=\"parameters\">The parameter value to pass to the function.</param>\n/// <returns>A string with the function response.</returns>\npublic async Task<string> InvokeFunctionAsync(\n    string functionName,\n    string parameters)\n{\n    var payload = parameters;\n    var request = new InvokeRequest\n    {\n        FunctionName = functionName,\n        Payload = payload,\n        InvocationType = InvocationType.RequestResponse,\n    };\n\n    var response = await _lambdaService.InvokeAsync(request);\n    MemoryStream stream = response.Payload;\n    string returnValue = System.Text.Encoding.UTF8.GetString(stream.ToArray());\n    return returnValue;\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Running the HealthImaging C++ Workflow Application\nDESCRIPTION: Shell commands to build and run the C++ application that demonstrates the HealthImaging workflow. These commands create a build directory, configure the project with CMake using vcpkg for dependency management, build the application, and run it.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/medical-imaging/imaging_set_and_frames_workflow/README.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmkdir build\ncd build\ncmake .. -DCMAKE_TOOLCHAIN_FILE=[path to vcpkg]/scripts/buildsystems/vcpkg.cmake -DCMAKE_BUILD_TYPE=Debug\ncmake --build . --config=Debug\n./run_medical_image_sets_and_frames_workflow\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for S3 Bucket Operations in Go\nDESCRIPTION: This snippet demonstrates how to run the unit tests for the S3 bucket operations. It includes commands for running tests with and without verbose output.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/example_code/s3/delete-buckets-by-prefix/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngo test\n```\n\nLANGUAGE: Shell\nCODE:\n```\ngo test -test.v\n```\n\n----------------------------------------\n\nTITLE: Retrieving SQS Queue URL in Go\nDESCRIPTION: Example command for retrieving the URL of an AWS SQS queue. Requires queue name as an input parameter.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/sqs/README.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngo run GetQueueURL.go -q QUEUE\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Cognito Configuration in JSON\nDESCRIPTION: This JSON configuration file sets up the AWS Cognito User Pool ID and Client ID for the application.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/cognito_flutter_mobile_app/README.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"UserPoolID\": \"<<YOUR USER POOL ID>>\",\n    \"ClientID\": \"<< YOUR CLIENT ID>>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Required Dependencies\nDESCRIPTION: Locates necessary dependencies including gzip-hpp, ZLIB, jsoncons, and OpenJPEG libraries required for image processing and metadata handling.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/medical-imaging/imaging_set_and_frames_workflow/CMakeLists.txt#2025-04-09_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_path(GZIP_HPP_INCLUDE_DIRS \"gzip/compress.hpp\")\nfind_package(ZLIB REQUIRED)\nfind_path(JSONCONS_HPP_INCLUDE_DIRS \"jsoncons/json.hpp\")\nfind_package(OpenJPEG CONFIG REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Running Security Hub Framework Example\nDESCRIPTION: Command to execute the Python script that creates a custom framework containing Security Hub controls.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/auditmanager/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython security_hub_custom_framework.py\n```\n\n----------------------------------------\n\nTITLE: Running Scripts with Command Line Options\nDESCRIPTION: Command to execute scripts with additional command line options. Uses util.parseArgs for option configuration.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/bedrock-agent-runtime/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnode ./scenarios/<fileName> --option1 --option2\n```\n\n----------------------------------------\n\nTITLE: Building and Running Tests with CMake\nDESCRIPTION: Commands for building and running tests using CMake. This includes changing to the build directory, configuring CMake with test flag, building the project, and running tests with ctest.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/kinesis/README.md#2025-04-09_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd <BUILD_DIR>\ncmake <path-to-root-of-this-source-code> -DBUILD_TESTS=ON\nmake\nctest\n```\n\n----------------------------------------\n\nTITLE: Getting IAM Policy Information in C++\nDESCRIPTION: Code excerpt showing how to get information about an IAM policy using the AWS SDK for C++.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/iam/README.md#2025-04-09_snippet_14\n\nLANGUAGE: C++\nCODE:\n```\n// From get_policy.cpp line 36\n```\n\n----------------------------------------\n\nTITLE: Describing EC2 Key Pairs with AWS CLI\nDESCRIPTION: This snippet shows how to list and describe EC2 key pairs using the AWS CLI. It uses the 'aws ec2 describe-key-pairs' command and formats the output as a table.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/aws-cli/bash-linux/ec2/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\naws ec2 describe-key-pairs \\\n    --output table\n```\n\n----------------------------------------\n\nTITLE: AWS Lambda RequestHandler for Storing XML Data in DynamoDB\nDESCRIPTION: A Lambda function handler that processes XML data and stores it in DynamoDB using the DynamoDBService class. This class represents the second step in an ETL workflow, receiving XML data as input and returning a success message after storing the data.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/Creating_etl_workflow/README.md#2025-04-09_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\npackage com.etl.example;\n\nimport com.amazonaws.services.lambda.runtime.Context;\nimport com.amazonaws.services.lambda.runtime.RequestHandler;\nimport com.amazonaws.services.lambda.runtime.LambdaLogger;\nimport org.jdom2.JDOMException;\nimport java.io.IOException;\n\npublic class HandlerStoreData  implements RequestHandler<String, String>{\n\n @Override\n public String handleRequest(String event, Context context) {\n\n    LambdaLogger logger = context.getLogger();\n    String xml = event ;\n    DynamoDBService storeData = new DynamoDBService();\n    try {\n\n        storeData.injectETLData(xml);\n        logger.log(\"data stored:\");\n    } catch (JDOMException | IOException e) {\n        e.printStackTrace();\n    }\n    return \"Data is stored successfully.\";\n  }\n }\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for CloudFront Examples in Python\nDESCRIPTION: This snippet shows how to install the necessary packages for running the CloudFront examples using pip in a virtual environment.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/cloudfront/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Running the HTTP server application\nDESCRIPTION: Launches the compiled HTTP server with required parameters for database connection and email functionality.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/cross-service/serverless-aurora/README.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n./run_serverless_aurora <database> <resource_arn> <secret_arn> <email>\n```\n\n----------------------------------------\n\nTITLE: Implementing AWS Cognito Manager in Dart\nDESCRIPTION: This Dart class manages AWS Cognito operations including initialization, sign up, user confirmation, and sign in. It uses the amazon_cognito_identity_dart_2 package to interact with Cognito services.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/cognito_flutter_mobile_app/README.md#2025-04-09_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:amazon_cognito_identity_dart_2/cognito.dart';\nimport 'config.dart';\n\nclass CognitoServiceException implements Exception {\n  final String message;\n  CognitoServiceException(this.message);\n}\n\nclass User {\n  String username;\n  bool userConfirmed;\n  bool sessionValid;\n  String? userSub;\n  Map<String, dynamic> claims;\n\n  User(this.username, this.userConfirmed, this.sessionValid, this.userSub,\n      this.claims);\n}\n\nclass CognitoManager {\n  late final CognitoUserPool userPool;\n\n  CognitoManager();\n\n  Future<void> init() async {\n    final config = await loadConfig();\n    userPool = CognitoUserPool(config.userPoolID, config.clientID);\n  }\n\n  Future<User> signUp(String email, String password) async {\n    final userAttributes = [\n      AttributeArg(name: 'email', value: email),\n      // Add other attributes as needed\n    ];\n\n    try {\n      final result = await userPool.signUp(email, password,\n          userAttributes: userAttributes);\n      return User(\n          email, result.userConfirmed ?? false, false, result.userSub, {});\n    } catch (e) {\n      throw CognitoServiceException(e.toString());\n    }\n  }\n\n  Future<bool> confirmUser(String email, String confirmationCode) async {\n    final cognitoUser = CognitoUser(email, userPool);\n    try {\n      return await cognitoUser.confirmRegistration(confirmationCode);\n    } catch (e) {\n      throw CognitoServiceException(e.toString());\n    }\n  }\n\n  Future<User> signIn(String email, String password) async {\n    final cognitoUser = CognitoUser(email, userPool);\n    final authDetails =\n        AuthenticationDetails(username: email, password: password);\n\n    try {\n      final session = await cognitoUser.authenticateUser(authDetails);\n      if (session == null) {\n        throw CognitoClientException(\"session not found\");\n      }\n      var claims = <String, dynamic>{};\n      claims.addAll(session.idToken.payload);\n      claims.addAll(session.accessToken.payload);\n      return User(email, true, session.isValid(),\n          session.idToken.getSub() ?? \"\", claims);\n    } catch (e) {\n      throw CognitoServiceException(e.toString());\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ExtractText Lambda Function in TypeScript\nDESCRIPTION: This snippet demonstrates how to define the ExtractText Lambda function configuration for the FSA project. It includes inline code and extends the BASE_APP_FUNCTION configuration.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/applications/feedback_sentiment_analyzer/DEVELOPMENT.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n  {\n    ...BASE_APP_FUNCTION,\n    codeAsset() {\n      return Code.fromInline(`\n        exports.handler = async (event) => {\n          // implementation goes here\n        }\n    `);\n    },\n    name: \"ExtractText\",\n  },\n```\n\n----------------------------------------\n\nTITLE: Building Hello SNS Application with CMake\nDESCRIPTION: Commands to build the Hello SNS application using CMake build system from the command line. Creates a build directory, changes into it, and builds the project which produces a 'hello_sns' executable.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/sns/hello_sns/README.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmkdir build \ncd build\ncmake --build ..\n```\n\n----------------------------------------\n\nTITLE: Describing Voices with Amazon Polly in Rust\nDESCRIPTION: Example code showing how to list available voices in Amazon Polly using the AWS SDK for Rust. Located at src/bin/describe-voices.rs line 22.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/polly/README.md#2025-04-09_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Deleting Multiple Objects from S3 Directory Buckets in Java\nDESCRIPTION: Example code for deleting multiple objects from an S3 Directory Bucket in a single request using AWS SDK for Java 2.x.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/s3/src/main/java/com/example/s3/directorybucket/README.md#2025-04-09_snippet_9\n\nLANGUAGE: Java\nCODE:\n```\nDeleteObjects\n```\n\n----------------------------------------\n\nTITLE: Enabling Testing and Configuring Source Files\nDESCRIPTION: Enables testing functionality and configures the source files for the executable target, including handler files from the parent directory and test files.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/cross-service/serverless-aurora/tests/CMakeLists.txt#2025-04-09_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nenable_testing()\n\ntarget_sources(\n        ${EXECUTABLE}\n        PUBLIC\n        ../RDSDataHandler.cpp\n        ../SESV2EmailHandler.cpp\n        ../ItemTrackerHTTPHandler.cpp\n        serverless_aurora_gtests.cpp\n        gtest_serverless_aurora.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Running Single Support Action in JavaScript\nDESCRIPTION: Command to run a single AWS Support action example, which demonstrates a specific operation with the Support service.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/support/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnode ./actions/<fileName>\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies\nDESCRIPTION: Command to install required Python packages using pip package manager from requirements.txt file\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/cross_service/aurora_item_tracker/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Running Maven Tests for AWS SDK Examples\nDESCRIPTION: Command to execute JUnit tests for AWS SDK for Java examples using Maven. This will run all tests defined in the src/test/java directory and display results of test execution.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/README.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmvn test\n```\n\n----------------------------------------\n\nTITLE: Listing IAM Account Aliases in Java\nDESCRIPTION: This snippet shows how to list IAM account aliases using the AWS SDK for Java 2.x.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/iam/README.md#2025-04-09_snippet_14\n\nLANGUAGE: Java\nCODE:\n```\nsrc/main/java/com/example/iam/ListAccountAliases.java#L6\n```\n\n----------------------------------------\n\nTITLE: Retrieving Execution History with AWS Step Functions Java SDK\nDESCRIPTION: This code snippet demonstrates how to retrieve the history of a specific execution using the AWS Step Functions Java SDK. It uses the getExecutionHistory command to get detailed information about an execution's history.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/stepfunctions/README.md#2025-04-09_snippet_10\n\nLANGUAGE: Java\nCODE:\n```\n// Code snippet for retrieving execution history\n// Refer to: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/stepfunctions/src/main/java/com/example/stepfunctions/GetExecutionHistory.java\n```\n\n----------------------------------------\n\nTITLE: Implementing AWS Lambda Handler for Text Extraction\nDESCRIPTION: Java class that implements RequestHandler interface to extract text from images stored in S3 using AWS Textract service. It processes S3 bucket and file information from the input Map and returns the extracted text as a String.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_fsa_app/README.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.fsa.handlers;\n\nimport com.amazonaws.services.lambda.runtime.Context;\nimport com.amazonaws.services.lambda.runtime.RequestHandler;\nimport com.example.fsa.services.ExtractTextService;\nimport java.util.Map;\n\npublic class ExtractTextHandler implements RequestHandler<Map<String, Object>, String>{\n\n    @Override\n    public String handleRequest(Map<String, Object> requestObject, Context context) {\n        // Get the Amazon Simple Storage Service (Amazon S3) bucket and object key from the Amazon EventBridge event.\n        ExtractTextService textService = new ExtractTextService();\n        String bucket = (String) requestObject.get(\"bucket\");\n        String fileName = (String) requestObject.get(\"object\");\n        context.getLogger().log(\"*** Bucket: \" + bucket + \", fileName: \" + fileName);\n        String extractedText = textService.getCardText(bucket, fileName);\n        context.getLogger().log(\"*** Text: \" + extractedText);\n        return extractedText;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for AWS SDK Examples\nDESCRIPTION: This snippet defines the minimum required versions for boto3 and pytest packages. boto3 is the AWS SDK for Python, used for interacting with AWS services. pytest is a testing framework for Python, likely used for running tests on the AWS SDK examples.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/elastic-load-balancing/requirements.txt#2025-04-09_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nboto3>=1.26.79\npytest>=7.2.1\n```\n\n----------------------------------------\n\nTITLE: Retrieving Amazon SES Send Statistics in Go\nDESCRIPTION: This example shows how to fetch statistics about Amazon SES send operations. It doesn't require any command-line arguments.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/ses/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\ngo run GetStatistics.go\n```\n\n----------------------------------------\n\nTITLE: Listing Objects in an S3 Bucket in Java\nDESCRIPTION: Code example that demonstrates how to list objects in an S3 bucket using the ListObjectsV2 operation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/s3/README.md#2025-04-09_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\n- [ListObjectsV2](src/main/java/com/example/s3/scenario/S3Actions.java#L185)\n```\n\n----------------------------------------\n\nTITLE: Listing Objects in an S3 Bucket in Java\nDESCRIPTION: Code example that demonstrates how to list objects in an S3 bucket using the ListObjectsV2 operation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/s3/README.md#2025-04-09_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\n- [ListObjectsV2](src/main/java/com/example/s3/scenario/S3Actions.java#L185)\n```\n\n----------------------------------------\n\nTITLE: SNS Application Layout Template\nDESCRIPTION: HTML template defining the common layout elements including header and navigation for the SNS application.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_sns_async/README.md#2025-04-09_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html>\n<html xmlns:th=\"http://www.thymeleaf.org\">\n<head th:fragment=\"site-head\">\n<meta charset=\"UTF-8\" />\n<link rel=\"icon\" href=\"../public/img/favicon.ico\" th:href=\"@{/img/favicon.ico}\" />\n<script th:src=\"|https://code.jquery.com/jquery-1.12.4.min.js|\"></script>\n<meta th:include=\"this :: head\" th:remove=\"tag\"/>\n</head>\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Windows PowerShell for FSA Deployment\nDESCRIPTION: Sets required environment variables in Windows PowerShell for the FSA deployment, including the stack name, admin email address, and programming language for Lambda functions.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/applications/feedback_sentiment_analyzer/cdk/README.md#2025-04-09_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n$Env:FSA_NAME =\n$Env:FSA_EMAIL =\n$Env:FSA_LANG =\n```\n\n----------------------------------------\n\nTITLE: Building Hello Amazon RDS C++ Project with CMake\nDESCRIPTION: These shell commands demonstrate how to build the Hello Amazon RDS C++ project using CMake. It creates a build directory, changes to it, and then builds the project using CMake.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/rds/hello_rds/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmkdir build \ncd build\ncmake --build ..\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for API Gateway Examples in Python\nDESCRIPTION: Installs the necessary packages for running the API Gateway examples using pip in a virtual environment.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/api-gateway/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Running Amazon Polly ListLexicons Example in Go\nDESCRIPTION: This command runs the ListLexicons example which lists all Amazon Polly lexicons that enable customization of word pronunciation. The example includes a unit test that mocks the service client and the ListLexicons function.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/polly/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngo run ListLexicons.go\n```\n\n----------------------------------------\n\nTITLE: Running Hello DynamoDB Example\nDESCRIPTION: Command to execute the basic DynamoDB getting started example.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/dynamodb/README.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnode ./hello.js\n```\n\n----------------------------------------\n\nTITLE: Building AWS Rekognition Example Executables\nDESCRIPTION: Creates executable targets for each example source file. Iterates through all source files, creates an executable with a 'run_' prefix, and links it with the appropriate AWS SDK libraries.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/rekognition/CMakeLists.txt#2025-04-09_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nforeach (file ${AWSDOC_SOURCE})\n    get_filename_component(EXAMPLE ${file} NAME_WE)\n\n    # Build the code example executables.\n    set(EXAMPLE_EXE run_${EXAMPLE})\n\n    add_executable(${EXAMPLE_EXE} ${file})\n\n    target_link_libraries(${EXAMPLE_EXE} ${AWSSDK_LINK_LIBRARIES}\n            ${AWSSDK_PLATFORM_DEPS})\n\nendforeach ()\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Packages\nDESCRIPTION: Command to install the required Python packages for the examples using pip package manager in a virtual environment.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/auditmanager/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Installing Backend Dependencies with pip\nDESCRIPTION: This command installs the required backend dependencies listed in the requirements.txt file, including Boto3, Flask, and Flask-RESTful, in a virtual environment.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/cross_service/photo_analyzer/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\npython -m pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Running Lambda Examples\nDESCRIPTION: Command line instructions for executing the built Lambda examples. Shows how to run an action from a source file within the build folder.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/lambda/README.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./run_my_action\n```\n\n----------------------------------------\n\nTITLE: Deleting Multiple S3 Objects in Rust\nDESCRIPTION: This code snippet shows how to delete multiple objects from an S3 bucket in a single operation using the AWS SDK for Rust. It uses the DeleteObjects operation for efficient removal of multiple files.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/s3/README.md#2025-04-09_snippet_7\n\nLANGUAGE: Rust\nCODE:\n```\nDeleteObjects\n```\n\n----------------------------------------\n\nTITLE: Get Operation Details from Route 53 in C#\nDESCRIPTION: Retrieves information about a specific operation performed on domains in Amazon Route 53. Takes an operation ID and returns details about the operation status and properties.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Route53/README.md#2025-04-09_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n/// <summary>\n/// Get details for an operation.\n/// </summary>\n/// <param name=\"operationId\">The operational Id.</param>\n/// <returns>A string with details about the operation.</returns>\npublic async Task<string> GetOperationDetail(string operationId)\n{\n    var result = await _amazonRoute53Domains.GetOperationDetailAsync(\n        new GetOperationDetailRequest\n        {\n            OperationId = operationId\n        }\n    );\n\n    var detail = $\"\\nOperation {operationId}:\\n\";\n    detail += $\"Status: {result.Status}\"\n             + $\"\\nMessage: {result.Message}\"\n             + $\"\\nDomainName: {result.DomainName}\"\n             + $\"\\nType: {result.Type}\"\n             + $\"\\nSubmitted: {result.SubmittedDate}\";\n    return detail;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Dependencies for DynamoDB and CloudWatch in Java\nDESCRIPTION: Maven POM file configuration for a Java project using AWS SDK for Java v2 to work with DynamoDB and CloudWatch. It includes dependencies for DynamoDB enhanced client, CloudWatch, and other necessary AWS services.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/monitor_dynamodb/README.md#2025-04-09_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>org.example</groupId>\n    <artifactId>monitor_dynamodb</artifactId>\n    <version>1.0</version>\n    <packaging>jar</packaging>\n    <description>Example for DynamoDB performance monitoring.</description>\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <java.version>17</java.version>\n        <maven.compiler.target>17</maven.compiler.target>\n        <maven.compiler.source>17</maven.compiler.source>\n    </properties>\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>software.amazon.awssdk</groupId>\n                <artifactId>bom</artifactId>\n                <version>2.25.39</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n            <dependency>\n                <groupId>org.apache.logging.log4j</groupId>\n                <artifactId>log4j-bom</artifactId>\n                <version>2.23.1</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>software.amazon.awssdk</groupId>\n            <artifactId>dynamodb-enhanced</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>software.amazon.awssdk</groupId>\n            <artifactId>dynamodb</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>software.amazon.awssdk</groupId>\n            <artifactId>cloudwatch-metric-publisher</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>software.amazon.awssdk</groupId>\n            <artifactId>cloudwatch</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>software.amazon.awssdk</groupId>\n            <artifactId>sso</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>software.amazon.awssdk</groupId>\n            <artifactId>ssooidc</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.logging.log4j</groupId>\n            <artifactId>log4j-slf4j-impl</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.junit.jupiter</groupId>\n            <artifactId>junit-jupiter</artifactId>\n            <version>5.8.1</version>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-checkstyle-plugin</artifactId>\n                <version>3.3.1</version>\n                <configuration>\n                    <configLocation>checkstyle.xml</configLocation>\n                </configuration>\n                <dependencies>\n                    <dependency>\n                        <groupId>com.puppycrawl.tools</groupId>\n                        <artifactId>checkstyle</artifactId>\n                        <version>10.15.0</version>\n                    </dependency>\n                </dependencies>\n            </plugin>\n        </plugins>\n    </build>\n</project>\n```\n\n----------------------------------------\n\nTITLE: Unhealthy Targets Status\nDESCRIPTION: Example output showing all load balancer targets in unhealthy state due to service failure\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/resilient_service/SPECIFICATION.md#2025-04-09_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n----------------------------------------------------------------------------------------\n\nChecking the health of load balancer targets:\n\n        Target i-02d98d9d0726c4b2d on port 80 is unhealthy\n                Target.ResponseCodeMismatch: Health checks failed with these codes: [503]\n\n        Target i-05387127cb2ebbea1 on port 80 is unhealthy\n                Target.ResponseCodeMismatch: Health checks failed with these codes: [503]\n\n        Target i-0c8df865e77bbb943 on port 80 is unhealthy\n                Target.ResponseCodeMismatch: Health checks failed with these codes: [503]\n\n----------------------------------------------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Deleting Maintenance Window in Systems Manager with JavaScript SDK v3\nDESCRIPTION: This code snippet shows how to delete a maintenance window using the DeleteMaintenanceWindow operation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/ssm/README.md#2025-04-09_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n// DeleteMaintenanceWindow\n```\n\n----------------------------------------\n\nTITLE: Getting Bucket Lock Configuration in S3 in Java\nDESCRIPTION: Code example that demonstrates how to retrieve the object lock configuration for a bucket using the GetObjectLockConfiguration operation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/s3/README.md#2025-04-09_snippet_13\n\nLANGUAGE: Java\nCODE:\n```\n- [GetObjectLockConfiguration](src/main/java/com/example/s3/lockscenario/S3LockActions.java#L345)\n```\n\n----------------------------------------\n\nTITLE: Getting Bucket Lock Configuration in S3 in Java\nDESCRIPTION: Code example that demonstrates how to retrieve the object lock configuration for a bucket using the GetObjectLockConfiguration operation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/s3/README.md#2025-04-09_snippet_13\n\nLANGUAGE: Java\nCODE:\n```\n- [GetObjectLockConfiguration](src/main/java/com/example/s3/lockscenario/S3LockActions.java#L345)\n```\n\n----------------------------------------\n\nTITLE: Lambda Function Update Utility in Kotlin\nDESCRIPTION: A Kotlin script that updates AWS Lambda functions using the AWS SDK for Kotlin. It handles updating function code from an S3 bucket and waits for the update to complete.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/creating_pam/README.md#2025-04-09_snippet_18\n\nLANGUAGE: java\nCODE:\n```\npackage com.pam\n\nimport aws.sdk.kotlin.services.lambda.LambdaClient\nimport aws.sdk.kotlin.services.lambda.model.UpdateFunctionCodeRequest\nimport aws.sdk.kotlin.services.lambda.waiters.waitUntilFunctionUpdated\n\nsuspend fun main() {\n    val key = \"PhotoAssetRestKotlin-1.0-SNAPSHOT-all.jar\"\n    val bucketName = \"<Update value>\"\n    val functionNamesLabels = \"<Update value>\"\n    val uploadFunction = \"<Update value>\"\n    val downloadFunction = \"<Update value>\"\n    val s3Handle = \"<Update value>\"\n\n    // Replace all four AWS Lambda functions.\n    updateFunctionCode(functionNamesLabels, bucketName, key)\n    updateFunctionCode( uploadFunction, bucketName, key)\n    updateFunctionCode(downloadFunction, bucketName, key)\n    updateFunctionCode(s3Handle, bucketName, key)\n    println(\"You have replaced all PAM Application Lambda functions!\")\n}\n\nsuspend fun updateFunctionCode(functionNameVal: String?, bucketName: String?, key: String?) {\n    val functionCodeRequest = UpdateFunctionCodeRequest {\n        functionName = functionNameVal\n        publish = true\n        s3Bucket = bucketName\n        s3Key = key\n    }\n\n    LambdaClient { region = \"us-east-1\" }.use { awsLambda ->\n        val response = awsLambda.updateFunctionCode(functionCodeRequest)\n        awsLambda.waitUntilFunctionUpdated {\n            functionName = functionNameVal\n        }\n        println(\"The last modified value is \" + response.lastModified)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for AWS SDK C++ Examples\nDESCRIPTION: Command to build a Docker image containing the AWS SDK for C++ code examples. This should be run in the 'aws-doc-sdk-examples/cpp' directory.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/README.rst#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t <container_tag> .\n```\n\n----------------------------------------\n\nTITLE: Deleting a Receipt Rule in Amazon SES using C++\nDESCRIPTION: This example illustrates how to delete a receipt rule in Amazon SES using the AWS SDK for C++. The code is located in the 'delete_receipt_rule.cpp' file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/ses/README.md#2025-04-09_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\n// See delete_receipt_rule.cpp, line 21\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Windows Application Build with CMake\nDESCRIPTION: Defines a CMake build configuration for a Flutter Windows desktop application. Sets up the executable target with source files, applies standard build settings, adds version definitions, and configures dependencies including Flutter libraries.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/cognito_flutter_mobile_app/windows/runner/CMakeLists.txt#2025-04-09_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n\napply_standard_settings(${BINARY_NAME})\n\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\"\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Building C++ project with CMake and Make\nDESCRIPTION: Uses CMake to generate build files and Make to compile the application.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/cross-service/serverless-aurora/README.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncmake ..\nmake ..\n```\n\n----------------------------------------\n\nTITLE: AWS API Gateway Proxy Event Structure\nDESCRIPTION: JSON structure showing the format of API Gateway Proxy Events used for Lambda function input/output handling. Used in Upload and GetLabels functions.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/applications/photo-asset-manager/DEVELOPMENT.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"body\": \"string\",\n  \"labels\": [\"string\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up API Gateway Example Resources\nDESCRIPTION: Command to destroy all resources created by the CloudFormation stack for this example, preventing further AWS charges.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/api-gateway/aws_service/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython aws_service.py destroy\n```\n\n----------------------------------------\n\nTITLE: Running Scripts with Command Line Options\nDESCRIPTION: Command to run scripts with additional command line options using util.parseArgs\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/transcribe/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnode ./scenarios/<fileName> --option1 --option2\n```\n\n----------------------------------------\n\nTITLE: Describing EC2 Instances Status in Rust\nDESCRIPTION: This code snippet shows how to describe the status of EC2 instances using the AWS SDK for Rust. It's useful for monitoring the state of EC2 instances.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/ec2/README.md#2025-04-09_snippet_3\n\nLANGUAGE: Rust\nCODE:\n```\nsrc/bin/list-all-instance-events.rs#L22\n```\n\n----------------------------------------\n\nTITLE: Running Find Tag Example in Python with AWS Lookout for Vision\nDESCRIPTION: Command to run the find_tag.py script, which demonstrates how to find a Lookout for Vision project with a specific tag. This script searches for projects matching a specified tag key and value.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/lookoutvision/README.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npython find_tag.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows-Specific Settings for AWS SDK\nDESCRIPTION: Sets up Windows-specific configurations for finding and using the AWS SDK for C++, including proper path configuration for installed SDK libraries.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/dynamodb/tests/CMakeLists.txt#2025-04-09_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n# Use the MSVC variable to determine if this is a Windows build.\nset(WINDOWS_BUILD ${MSVC})\n\n# Set the location for Windows to find the installed libraries of the SDK.\nif (WINDOWS_BUILD)\n    string(REPLACE \";\" \"/aws-cpp-sdk-all;\" SYSTEM_MODULE_PATH \"${CMAKE_SYSTEM_PREFIX_PATH}/aws-cpp-sdk-all\")\n    list(APPEND CMAKE_PREFIX_PATH ${SYSTEM_MODULE_PATH})\nendif ()\n\n# Find the AWS SDK for C++ package.\nfind_package(AWSSDK REQUIRED COMPONENTS ${CURRENT_TARGET_AWS_DEPENDENCIES})\n```\n\n----------------------------------------\n\nTITLE: SnsService Class for Amazon SNS Operations in Kotlin\nDESCRIPTION: This class handles publishing messages to an Amazon SNS topic. It uses the AWS SDK for Kotlin to interact with SNS.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/creating_pam/README.md#2025-04-09_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.example.photo.services\n\nimport aws.sdk.kotlin.services.sns.SnsClient\nimport aws.sdk.kotlin.services.sns.model.PublishRequest\nimport com.example.photo.PhotoApplicationResources\n\nclass SnsService {\n    suspend fun pubTopic(messageVal: String?) {\n        val request = PublishRequest {\n            message = messageVal\n            topicArn = PhotoApplicationResources.TOPIC_ARN\n        }\n        SnsClient { region = \"us-east-1\" }.use { snsClient ->\n            snsClient.publish(request)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Batch Get Item Operation in DynamoDB with C++\nDESCRIPTION: This code snippet illustrates how to perform a batch get item operation in DynamoDB using the AWS SDK for C++. It retrieves multiple items from one or more tables in a single request.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/dynamodb/README.md#2025-04-09_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nBatchGetItem\n```\n\n----------------------------------------\n\nTITLE: Creating an Amazon Redshift Cluster in Java\nDESCRIPTION: This code snippet shows how to create an Amazon Redshift cluster using the AWS SDK for Java 2.x. It demonstrates the use of the CreateCluster operation to set up a new Redshift cluster.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/redshift/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nRedshiftActions.java#L102\n```\n\n----------------------------------------\n\nTITLE: Updating AWS IoT Thing Shadow\nDESCRIPTION: This snippet demonstrates the JSON format used to update an IoT Thing Shadow. It shows the state information including reported temperature and humidity, along with metadata and version details.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/basics/iot/SPECIFICATION.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"state\":{\"reported\":{\"temperature\":25,\"humidity\":50}},\"metadata\":{\"reported\":{\"temperature\":{\"timestamp\":1707413791},\"humidity\":{\"timestamp\":1707413791}}},\"version\":1,\"timestamp\":1707413794}\n```\n\n----------------------------------------\n\nTITLE: Implementing Work Count Class in Kotlin\nDESCRIPTION: A simple Kotlin class that manages a counter value with getter and setter methods.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/creating_pam/README.md#2025-04-09_snippet_17\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.photo\n\nclass WorkCount {\n    private var count = 0\n\n    fun getCount(): Int {\n        return count\n    }\n\n    fun setCount(count: Int) {\n        this.count = count\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for AWS MediaConvert C++ Examples\nDESCRIPTION: This CMake script sets up the build environment for AWS MediaConvert C++ code examples. It defines project settings, locates the AWS SDK for C++, and creates executables for each example file. The script also handles Windows-specific configurations and supports optional test building.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/mediaconvert/CMakeLists.txt#2025-04-09_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\n\n# Set the minimum required version of CMake for this project.\ncmake_minimum_required(VERSION 3.13)\n\nset(SERVICE_NAME mediaconvert)\nset(SERVICE_COMPONENTS mediaconvert)\n\n# Set this project's name.\nproject(\"${SERVICE_NAME}-examples\")\n\n# Set the C++ standard to use to build this target.\nset(CMAKE_CXX_STANDARD 11)\n\n# Build shared libraries by default.\nset(BUILD_SHARED_LIBS ON)\n\n# Use the MSVC variable to determine if this is a Windows build.\nset(WINDOWS_BUILD ${MSVC})\n\n# Set the location for Windows to find the installed libraries of the SDK.\nif (WINDOWS_BUILD)\n    string(REPLACE \";\" \"/aws-cpp-sdk-all;\" SYSTEM_MODULE_PATH \"${CMAKE_SYSTEM_PREFIX_PATH}/aws-cpp-sdk-all\")\n    list(APPEND CMAKE_PREFIX_PATH ${SYSTEM_MODULE_PATH})\nendif ()\n\n# Find the AWS SDK for C++ package.\nfind_package(AWSSDK REQUIRED COMPONENTS ${SERVICE_COMPONENTS})\n\nif (WINDOWS_BUILD AND AWSSDK_INSTALL_AS_SHARED_LIBS)\n    # Copy relevant AWS SDK for C++ libraries into the current binary directory for running and debugging.\n\n    # set(BIN_SUB_DIR \"/Debug\") # If you are building from the command line, you may need to uncomment this\n    # and set the proper subdirectory to the executables' location.\n\n    AWSSDK_CPY_DYN_LIBS(SERVICE_COMPONENTS \"\" ${CMAKE_CURRENT_BINARY_DIR}${BIN_SUB_DIR})\nendif ()\n\n# AWSDOC_SOURCE can be defined in the command line to limit the files in a build. For example,\n# you can limit files to one action.\nif (NOT DEFINED AWSDOC_SOURCE)\n    file(GLOB AWSDOC_SOURCE\n            \"*.cpp\"\n            )\n\n    list(FILTER AWSDOC_SOURCE EXCLUDE REGEX \"/utils.cpp$\")\nendif ()\n\nforeach (file ${AWSDOC_SOURCE})\n    get_filename_component(EXAMPLE ${file} NAME_WE)\n\n    # Build the code example executables.\n    set(EXAMPLE_EXE run_${EXAMPLE})\n\n    add_executable(${EXAMPLE_EXE}\n            ${file})\n\n    target_link_libraries(${EXAMPLE_EXE} ${AWSSDK_LINK_LIBRARIES}\n            ${AWSSDK_PLATFORM_DEPS})\n\nendforeach ()\n\nif (BUILD_TESTS)\n    add_subdirectory(tests)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for AWS Glue Examples with GTest\nDESCRIPTION: Sets up the CMake project for AWS Glue examples, including GTest integration. It defines the project name, sets C++ standard, configures dependencies like AWS SDK and GTest, and sets up build targets for both the examples and their unit tests.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/glue/tests/CMakeLists.txt#2025-04-09_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\n\n# Set the minimum required version of CMake for this project.\ncmake_minimum_required(VERSION 3.14)\n\nset(EXAMPLE_SERVICE_NAME \"glue\")\nset(CURRENT_TARGET \"${EXAMPLE_SERVICE_NAME}_gtest\")\nset(CURRENT_TARGET_AWS_DEPENDENCIES glue s3 iam)\n\n# Set this project's name.\nproject(\"${EXAMPLE_SERVICE_NAME}-examples-gtests\" )\n\n# Set the C++ standard to use to build this target.\nset(CMAKE_CXX_STANDARD 14)\n\n# Build shared libraries by default.\nset(BUILD_SHARED_LIBS ON)\n\nfind_package(GTest)\n\nif(NOT GTest_FOUND)\n    include(FetchContent)\n    FetchContent_Declare(\n            googletest\n            GIT_REPOSITORY https://github.com/google/googletest.git\n            GIT_TAG release-1.12.1\n    )\n\n    # For Windows: Prevent overriding the parent project's compiler/linker settings.\n    set(gtest_force_shared_crt ON CACHE BOOL \"\" FORCE)\n    FetchContent_MakeAvailable(googletest)\nendif()\n\n# Use the MSVC variable to determine if this is a Windows build.\nset(WINDOWS_BUILD ${MSVC})\n\n# Set the location for Windows to find the installed libraries of the SDK.\nif (WINDOWS_BUILD)\n    string(REPLACE \";\" \"/aws-cpp-sdk-all;\" SYSTEM_MODULE_PATH \"${CMAKE_SYSTEM_PREFIX_PATH}/aws-cpp-sdk-all\")\n    list(APPEND CMAKE_PREFIX_PATH ${SYSTEM_MODULE_PATH})\nendif ()\n\n# Find the AWS SDK for C++ package.\nfind_package(AWSSDK REQUIRED COMPONENTS ${CURRENT_TARGET_AWS_DEPENDENCIES})\n\nadd_executable(\n        ${CURRENT_TARGET}\n)\n\nif (WINDOWS_BUILD)\n    # set(BIN_SUB_DIR \"/Debug\") # If you are building from the command line, you may need to uncomment this\n    # and set the proper subdirectory to the executables' location.\n\n    if (AWSSDK_INSTALL_AS_SHARED_LIBS)\n        # Copy relevant AWS SDK for C++ libraries into the current binary directory for running and debugging.\n        AWSSDK_CPY_DYN_LIBS(\n                CURRENT_TARGET_AWS_DEPENDENCIES\n                \"\"\n                ${CMAKE_CURRENT_BINARY_DIR}${BIN_SUB_DIR}\n        )\n    endif ()\n\n    add_custom_command(\n            TARGET\n            ${CURRENT_TARGET}\n            POST_BUILD\n            COMMAND ${CMAKE_COMMAND} -E copy\n            ${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_BINDIR}${BIN_SUB_DIR}/gtest.dll\n            ${CMAKE_CURRENT_BINARY_DIR}${BIN_SUB_DIR}\n    )\nendif ()\n\n# GTEST_SOURCE_FILES can be defined in the command line to limit the files in a build. For example,\n# you can limit files to one action.\nif (NOT DEFINED GTEST_SOURCE_FILES)\n    file(\n            GLOB\n            GTEST_SOURCE_FILES\n            \"gtest_*.cpp\"\n    )\nendif()\n\nenable_testing()\n\nforeach(TEST_FILE ${GTEST_SOURCE_FILES})\n    string(REPLACE \"gtest_\" \"../\" SOURCE_FILE ${TEST_FILE})\n     if (EXISTS ${SOURCE_FILE})\n        list(APPEND GTEST_SOURCE ${SOURCE_FILE} ${TEST_FILE})\n    else()\n        message(\"Error: no associated source file found for ${TEST_FILE}\")\n    endif()\nendforeach()\n\ntarget_sources(\n        ${CURRENT_TARGET}\n        PUBLIC\n        ${GTEST_SOURCE}\n        test_main.cpp\n        ${EXAMPLE_SERVICE_NAME}_gtests.cpp\n        ../glue_utilities.cpp\n)\n\ntarget_include_directories(\n        ${CURRENT_TARGET}\n        PUBLIC\n        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/..>\n        $<INSTALL_INTERFACE:..>\n)\n\ntarget_compile_definitions(\n        ${CURRENT_TARGET}\n        PUBLIC\n        TESTING_BUILD\n        SOURCE_DIR=\"${CMAKE_CURRENT_SOURCE_DIR}/..\"\n)\n\ntarget_link_libraries(\n        ${CURRENT_TARGET}\n        GTest::gtest\n        ${AWSSDK_LINK_LIBRARIES}\n        ${AWSSDK_PLATFORM_DEPS}\n)\n\ninclude(GoogleTest)\ngtest_add_tests(\n        TARGET\n        ${CURRENT_TARGET}\n)\n```\n\n----------------------------------------\n\nTITLE: Running C++ Redshift examples from the build folder\nDESCRIPTION: Command to execute the built executables for code examples. The examples are located in the build folder with 'run_' prepended to the source file name.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/redshift/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n./run_my_action\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing Lambda Functions with SAP ABAP\nDESCRIPTION: This example demonstrates creating an IAM role and Lambda function, uploading handler code, invoking the function, updating code and configuration, and listing functions. It covers the entire lifecycle of Lambda function management using SAP ABAP.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/sap-abap/services/lambda/README.md#2025-04-09_snippet_0\n\nLANGUAGE: ABAP\nCODE:\n```\nzcl_aws1_lmd_scenario.clas.abap\n```\n\n----------------------------------------\n\nTITLE: Destroy AWS Step Functions Demo Resources\nDESCRIPTION: Command to destroy and clean up the example resources using the destroy flag.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/cross_service/stepfunctions_messenger/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython stepfunctions_demo.py destroy\n```\n\n----------------------------------------\n\nTITLE: Running the File Transfer Demo Script in Python\nDESCRIPTION: Command to interactively run the demo_file_transfer.py script which demonstrates various file transfer configurations with Amazon S3. The script handles artifact creation and cleanup.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/s3/file_transfer/README.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython -m demo_file_transfer\n```\n\n----------------------------------------\n\nTITLE: Updating an Auto Scaling Group in Rust\nDESCRIPTION: This code snippet shows how to use the UpdateAutoScalingGroup operation to modify the configuration of an existing Auto Scaling group using the AWS SDK for Rust.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/auto-scaling/README.md#2025-04-09_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\nsrc/bin/update-autoscaling-group.rs#L30\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring Security with OAuth2 for Cognito Authentication\nDESCRIPTION: Java configuration class that extends WebSecurityConfigurerAdapter to set up security rules for the web application. It configures OAuth2 login with Amazon Cognito and defines authentication requirements for different URL patterns.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_amazon_cognito_app/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npackage com.example.handlingformsubmission;\n\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n\n@Configuration\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n\n@Override\nprotected void configure(HttpSecurity http) throws Exception {\n    http\n            .csrf()\n            .and()\n            .authorizeRequests(authorize ->\n                    authorize.mvcMatchers(\"/\").permitAll()\n                            .anyRequest().authenticated())\n            .oauth2Login()\n            .and()\n            .logout()\n            .logoutSuccessUrl(\"/\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring Security with OAuth2 for Cognito Authentication\nDESCRIPTION: Java configuration class that extends WebSecurityConfigurerAdapter to set up security rules for the web application. It configures OAuth2 login with Amazon Cognito and defines authentication requirements for different URL patterns.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_amazon_cognito_app/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npackage com.example.handlingformsubmission;\n\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n\n@Configuration\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n\n@Override\nprotected void configure(HttpSecurity http) throws Exception {\n    http\n            .csrf()\n            .and()\n            .authorizeRequests(authorize ->\n                    authorize.mvcMatchers(\"/\").permitAll()\n                            .anyRequest().authenticated())\n            .oauth2Login()\n            .and()\n            .logout()\n            .logoutSuccessUrl(\"/\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AWS Lambda Handler in Java\nDESCRIPTION: Java class that serves as the entry point for a Lambda function. It creates a ScanEmployees object to process employee data and send messages, with CloudWatch logging functionality.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_scheduled_events/README.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage com.aws.example;\n\nimport com.amazonaws.services.lambda.runtime.Context;\nimport com.amazonaws.services.lambda.runtime.LambdaLogger;\n\n/**\n*  This is the entry point for the Lambda function\n*/\n\npublic class Handler {\n\n public Void handleRequest(Context context) {\n    LambdaLogger logger = context.getLogger();\n    ScanEmployees scanEmployees = new ScanEmployees();\n   Boolean ans =  scanEmployees.sendEmployeMessage();\n    if (ans)\n        logger.log(\"Messages sent: \" + ans);\n    return null;\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating EventBridge Schedules Example\nDESCRIPTION: Sample output demonstrating the creation of a schedule group, one-time schedule, and recurring schedule. Shows user prompts for schedule names and rate configuration, along with success messages and subscription notifications.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/eventbridge_scheduler/SPECIFICATION.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nSuccessfully created schedule group 'scenario-schedules-group'.\nApplication preparation complete.\n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\nEnter a name for the one-time schedule:\none-time-test\nCreating a one-time schedule named 'one-time-test' to send an initial event in 1 minute...\nSuccessfully created schedule 'one-time-test' in schedule group 'scenario-schedules-group'.\nSubscription email will receive an email from this event.\nYou must confirm your subscription to receive event emails.\nOne-time schedule 'one-time-test' created successfully.\n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\nCreating a recurring schedule to send events for one hour...\nEnter a name for the recurring schedule:\nrecurring-test\nEnter the desired schedule rate (in minutes):\n2\nSuccessfully created schedule 'recurring-test' in schedule group 'scenario-schedules-group'.\nSubscription email will receive an email from this event.\nYou must confirm your subscription to receive event emails.\nAre you ready to delete the 'recurring-test' schedule? (y/n)\ny\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for AWS GuardDuty C++ Examples\nDESCRIPTION: This CMake script sets up the build environment for AWS GuardDuty examples. It specifies the minimum CMake version, sets the C++ standard to 11, finds the AWS SDK for C++, and creates build targets for multiple example executables.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/guardduty/CMakeLists.txt#2025-04-09_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nproject(guardduty-examples)\nset (CMAKE_CXX_STANDARD 11)\n\n# Locate the aws sdk for c++ package.\nfind_package(AWSSDK REQUIRED COMPONENTS guardduty)\n\nset(EXAMPLES \"\")\nlist(APPEND EXAMPLES \"list_detectors\")\nlist(APPEND EXAMPLES \"list_findings_with_finding_criteria\")\n\n# The executables to build.\nforeach(EXAMPLE IN LISTS EXAMPLES)\n  add_executable(${EXAMPLE} ${EXAMPLE}.cpp)\n  target_link_libraries(${EXAMPLE} ${AWSSDK_LINK_LIBRARIES})\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Batch Reading Items from DynamoDB in Java\nDESCRIPTION: This code snippet shows how to perform a BatchGetItem operation in DynamoDB using the AWS SDK for Java 2.x. It demonstrates how to retrieve multiple items from a DynamoDB table in a single request.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/dynamodb/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nsrc/main/java/com/example/dynamodb/BatchReadItems.java#L6\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for AWS SDK Project\nDESCRIPTION: Defines the required Python package dependencies with version constraints for an AWS SDK project. It includes Boto3 for AWS service interactions, pytest for testing, requests for HTTP operations, and botocore as a core dependency for Boto3.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/medical-imaging/imaging_set_and_frames_workflow/requirements.txt#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nboto3>=1.26.79\npytest>=7.2.1\nrequests>=2.28.2\nbotocore~=1.31.30\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment-based AWS Credentials in Kotlin\nDESCRIPTION: Example of using EnvironmentCredentialsProvider to authenticate AWS services using environment variables set in Android Studio.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/subpub_app_android/README.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nfun getTranslateClient() : TranslateClient{\n    val translateClient = TranslateClient{\n        region = \"us-west-2\"\n        credentialsProvider = EnvironmentCredentialsProvider()\n    }\n    return translateClient\n}\n```\n\n----------------------------------------\n\nTITLE: Creating MediaConvert Job in C++\nDESCRIPTION: Referenced example for creating a MediaConvert job using the AWS SDK for C++. Located in the create_job.cpp file at line 49.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/mediaconvert/README.md#2025-04-09_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nCreateJob\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Starting Web Server for WebAssembly Example\nDESCRIPTION: These commands install the necessary Node.js dependencies and start a local web server to run the WebAssembly example. They should be executed from within the www directory.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/webassembly/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm ci\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Detecting Labels in Images with Amazon Rekognition\nDESCRIPTION: Code example demonstrating how to detect labels in images using the DetectLabels operation of Amazon Rekognition.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/rekognition/README.md#2025-04-09_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nL22\n```\n\n----------------------------------------\n\nTITLE: Executing IAM Policy Version Management Script\nDESCRIPTION: Command to execute the Python script that handles IAM policy version management operations. The script performs policy version listing, default version identification, and version rollback functionality.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/iam/README.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npython policy_wrapper.py\n```\n\n----------------------------------------\n\nTITLE: Running .NET Application Command\nDESCRIPTION: Command to run the .NET application from the command line. Must be executed from the directory containing the .csproj file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/cross-service/TopicsAndQueues/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet run\n```\n\n----------------------------------------\n\nTITLE: Creating build directory and setting up project environment\nDESCRIPTION: Creates a build directory and changes into it to prepare for building the C++ application.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/cross-service/serverless-aurora/README.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmkdir build\ncd build\n```\n\n----------------------------------------\n\nTITLE: Describing Parameters in AWS Systems Manager using Rust\nDESCRIPTION: Shows how to list and describe parameters stored in AWS Systems Manager Parameter Store. References a function in the src/bin/describe-parameters.rs file at line 22.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/ssm/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\n// Sample reference to DescribeParameters function at src/bin/describe-parameters.rs#L22\n```\n\n----------------------------------------\n\nTITLE: Monitoring EC2 Instances in Go\nDESCRIPTION: This example enables or disables monitoring for an instance. It requires the instance ID and the desired monitoring state as command-line arguments.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/ec2/README.md#2025-04-09_snippet_11\n\nLANGUAGE: Go\nCODE:\n```\ngo run MonitorInstances.go -i INSTANCE-ID -m STATE\n```\n\n----------------------------------------\n\nTITLE: Deprecated JavaScript S3 Bucket Upload Example\nDESCRIPTION: This snippet contained code for uploading to an S3 bucket using the put command. It has been replaced by a newer example in the AWS documentation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/s3/dead-snippets.txt#2025-04-09_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\n// snippet-start:[s3.JavaScript.buckets.upload_putcommandV3]\nThis code example has been superseded by the example in\nCode examples > Amazon S3 > Create a web page that lists S3 objects\n// snippet-end:[s3.JavaScript.buckets.upload_putcommandV3]\n```\n\n----------------------------------------\n\nTITLE: Configuring Poco Library Dependencies for AWS SDK C++ Examples\nDESCRIPTION: This snippet specifies the required Poco library version (1.12.2) for the AWS SDK C++ examples project. It also configures various Poco features, enabling only the necessary components for the project.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/cross-service/serverless-aurora/conanfile.txt#2025-04-09_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[requires]\n poco/1.12.2\n\n\n [options]\n poco:enable_activerecord=False\n poco:enable_crypto=False\n poco:enable_data=False\n poco:enable_data_mysql=False\n poco:enable_data_postgresql=False\n poco:enable_data_sqlite=False\n poco:enable_encodings=True\n poco:enable_json=True\n poco:enable_jwt=False\n poco:enable_mongodb=False\n poco:enable_net=True\n poco:enable_netssl=False\n poco:enable_redis=True\n poco:enable_util=True\n poco:enable_xml=True\n poco:enable_zip=False\n```\n\n----------------------------------------\n\nTITLE: Starting AWS Glue Operations in Rust\nDESCRIPTION: These code snippets show how to start AWS Glue operations using the AWS SDK for Rust. They include starting a crawler and initiating a job run.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/glue/README.md#2025-04-09_snippet_5\n\nLANGUAGE: Rust\nCODE:\n```\n- [StartCrawler](src/prepare.rs#L79)\n- [StartJobRun](src/run.rs#L39)\n```\n\n----------------------------------------\n\nTITLE: Describing Account Attributes using Amazon RDS in Java\nDESCRIPTION: This code snippet demonstrates how to describe account attributes using Amazon RDS with AWS SDK for Java 2.x. It uses the DescribeAccountAttributes operation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/rds/README.md#2025-04-09_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nsrc/main/java/com/example/rds/DescribeAccountAttributes.java#L6\n```\n\n----------------------------------------\n\nTITLE: DynamoDB ListTables API Response JSON Data\nDESCRIPTION: The JSON response from the DynamoDB ListTables API call showing the list of table names returned by the service. The response has been formatted for readability.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/example_code/extending_sdk/tableList.txt#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n2017/10/25 11:10:58 {\"TableNames\":[\"TABLE-1\",\"...\",\"TABLE-N\"]}\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies\nDESCRIPTION: Specifies minimum version requirements for boto3 AWS SDK (1.26.79 or higher) and pytest testing framework (7.2.1 or higher). Used for setting up Python development environment for AWS SDK examples.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/config/requirements.txt#2025-04-09_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nboto3>=1.26.79\npytest>=7.2.1\n```\n\n----------------------------------------\n\nTITLE: Sending Success Response to a Task in AWS Step Functions with Kotlin\nDESCRIPTION: Shows how to send a success response to a task in AWS Step Functions using the AWS SDK for Kotlin and the sendTaskSuccess command.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/stepfunctions/README.md#2025-04-09_snippet_10\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Code not provided in the given content\n```\n\n----------------------------------------\n\nTITLE: Listing ACM Certificates with .NET SDK\nDESCRIPTION: Code example demonstrating how to list ACM certificates using the AWS SDK for .NET. Located in ListCertificates/ListCertificates/ListCertificates.cs starting at line 4.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/ACM/README.md#2025-04-09_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nListCertificates/ListCertificates/ListCertificates.cs#L4\n```\n\n----------------------------------------\n\nTITLE: Updating Auto Scaling Group in PHP\nDESCRIPTION: Updates an existing Auto Scaling group configuration. This function allows modifying properties such as availability zones, launch templates, and other settings of an existing Auto Scaling group.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/php/example_code/auto-scaling/README.md#2025-04-09_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nUpdateAutoScalingGroup\n```\n\n----------------------------------------\n\nTITLE: Getting IAM Access Key Last Used Information in C++\nDESCRIPTION: Code excerpt showing how to get information about when an IAM access key was last used using the AWS SDK for C++.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/iam/README.md#2025-04-09_snippet_13\n\nLANGUAGE: C++\nCODE:\n```\n// From access_key_last_used.cpp line 36\n```\n\n----------------------------------------\n\nTITLE: Deleting DB Parameter Group in Amazon RDS using C++\nDESCRIPTION: This code snippet references the DeleteDBParameterGroup action at line 927 in the getting_started_with_db_instances.cpp file, which demonstrates how to delete a DB parameter group using the AWS SDK for C++.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/rds/README.md#2025-04-09_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Running the S3 Object Lock Example in .NET\nDESCRIPTION: Instructions for compiling and running the S3 Object Lock example from the command line using the dotnet CLI. This snippet shows how to navigate to the project directory and execute the compiled application.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/S3/scenarios/S3ObjectLockScenario/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet run\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS CloudTrail Examples Build with CMake\nDESCRIPTION: Sets up a CMake project for building AWS CloudTrail SDK examples in C++. It configures compiler standards, library dependencies, and platform-specific settings. The script finds the AWS SDK, handles shared library dependencies on Windows, and creates executable targets for each source file in the project.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/cloudtrail/CMakeLists.txt#2025-04-09_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\n\n# Set the minimum required version of CMake for this project.\ncmake_minimum_required(VERSION 3.13)\n\nset(SERVICE_NAME cloudtrail)\nset(SERVICE_COMPONENTS cloudtrail)\n\n# Set this project's name.\nproject(\"${SERVICE_NAME}-examples\")\n\n# Build shared libraries by default.\nset(BUILD_SHARED_LIBS ON)\n\n# Set the C++ standard to use to build this target.\nset(CMAKE_CXX_STANDARD 11)\n\n# Use the MSVC variable to determine if this is a Windows build.\nset(WINDOWS_BUILD ${MSVC})\n\n# Set the location of where Windows can find the installed libraries of the SDK.\nif (WINDOWS_BUILD)\n    string(REPLACE \";\" \"/aws-cpp-sdk-all;\" SYSTEM_MODULE_PATH \"${CMAKE_SYSTEM_PREFIX_PATH}/aws-cpp-sdk-all\")\n    list(APPEND CMAKE_PREFIX_PATH ${SYSTEM_MODULE_PATH})\nendif ()\n\n# Find the AWS SDK for C++ package.\nfind_package(AWSSDK REQUIRED COMPONENTS ${SERVICE_COMPONENTS})\n\nif (WINDOWS_BUILD AND AWSSDK_INSTALL_AS_SHARED_LIBS)\n    # Copy relevant AWS SDK for C++ libraries into the current binary directory for running and debugging.\n\n    # set(BIN_SUB_DIR \"/Debug\") # If you are building from the command line, you may need to uncomment this\n    # and set the proper subdirectory to the executables' location.\n\n    AWSSDK_CPY_DYN_LIBS(SERVICE_COMPONENTS \"\" ${CMAKE_CURRENT_BINARY_DIR}${BIN_SUB_DIR})\nendif ()\n\n\n# AWSDOC_SOURCE can be defined in the command line to limit the files in a build. For example,\n# you can limit files to one action.\nif (NOT DEFINED AWSDOC_SOURCE)\n    file(GLOB AWSDOC_SOURCE\n            \"*.cpp\"\n    )\nendif ()\n\nforeach (file ${AWSDOC_SOURCE})\n    get_filename_component(EXAMPLE ${file} NAME_WE)\n\n    # Build the code example executables.\n    set(EXAMPLE_EXE run_${EXAMPLE})\n\n    add_executable(${EXAMPLE_EXE} ${file})\n\n    target_link_libraries(${EXAMPLE_EXE} ${AWSSDK_LINK_LIBRARIES}\n            ${AWSSDK_PLATFORM_DEPS})\n\nendforeach ()\n\n\nif (BUILD_TESTS)\n    add_subdirectory(tests)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Creating an Email Identity in Amazon SES v2 API using Rust\nDESCRIPTION: This code snippet illustrates how to create an email identity in Amazon SES v2 API using the AWS SDK for Rust. The implementation can be found in the newsletter.rs file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/ses/README.md#2025-04-09_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n// Implementation in src/newsletter.rs#L57\n```\n\n----------------------------------------\n\nTITLE: Updating Maintenance Window\nDESCRIPTION: Updates an existing maintenance window settings using the UpdateMaintenanceWindow API.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/ssm/README.md#2025-04-09_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nsrc/main/java/com/example/scenario/SSMActions.java#L532\n```\n\n----------------------------------------\n\nTITLE: Deleting Lambda Functions with AWS SDK for .NET\nDESCRIPTION: Deletes a Lambda function with the specified function name. If the function exists, it will be deleted and the method returns true, otherwise it returns false.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Lambda/README.md#2025-04-09_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n/// <summary>\n/// Delete an AWS Lambda function.\n/// </summary>\n/// <param name=\"functionName\">The name of the Lambda function to\n/// delete.</param>\n/// <returns>A Boolean value that indicates the success of the action.</returns>\npublic async Task<bool> DeleteFunctionAsync(string functionName)\n{\n    var request = new DeleteFunctionRequest\n    {\n        FunctionName = functionName,\n    };\n\n    var response = await _lambdaService.DeleteFunctionAsync(request);\n\n    // A return value of NoContent means that the request was processed.\n    // In this case, the function was deleted, and the return value\n    // is intentionally blank.\n    return response.HttpStatusCode == System.Net.HttpStatusCode.NoContent;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Bash/Zsh for FSA Deployment\nDESCRIPTION: Sets required environment variables in Bash or Zsh for the FSA deployment, including the stack name, admin email address, and programming language for Lambda functions.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/applications/feedback_sentiment_analyzer/cdk/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport FSA_NAME=\nexport FSA_EMAIL=\nexport FSA_LANG=\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for RDS Examples with Google Test\nDESCRIPTION: Sets up the CMake project for RDS examples with Google Test. It defines the project name, sets the C++ standard, and configures shared library building.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/rds/tests/CMakeLists.txt#2025-04-09_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n\nset(EXAMPLE_SERVICE_NAME \"rds\")\nset(CURRENT_TARGET \"${EXAMPLE_SERVICE_NAME}_gtest\")\nset(CURRENT_TARGET_AWS_DEPENDENCIES  rds)\n\nproject(\"${EXAMPLE_SERVICE_NAME}-examples-gtests\")\n\nset(CMAKE_CXX_STANDARD 14)\n\nset(BUILD_SHARED_LIBS ON)\n```\n\n----------------------------------------\n\nTITLE: Describing DB Engine Versions using Amazon RDS in Java\nDESCRIPTION: This code snippet shows how to describe DB engine versions using Amazon RDS with AWS SDK for Java 2.x. It is part of a larger RDS scenario.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/rds/README.md#2025-04-09_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\nsrc/main/java/com/example/rds/RDSScenario.java#L572\n```\n\n----------------------------------------\n\nTITLE: AWS Java SDK Runtime Dependencies\nDESCRIPTION: Runtime dependencies required for AWS SDK Java applications, including HTTP client libraries, JSON processing, and time handling utilities\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/java/example_code/stepfunctions/libs.txt#2025-04-09_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ncommons-logging-1.2.jar\nhttpclient-4.5.3.jar\nhttpcore-4.4.8.jar\njackson-annotations-2.9.0.jar\njackson-core-2.9.2.jar\njackson-databind-2.9.2.jar\njoda-time-2.9.9.jar\n```\n\n----------------------------------------\n\nTITLE: Listing SNS Subscriptions using AWS SDK for Kotlin\nDESCRIPTION: This code snippet demonstrates how to list Amazon SNS subscriptions using the AWS SDK for Kotlin.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/sns/README.md#2025-04-09_snippet_4\n\nLANGUAGE: Kotlin\nCODE:\n```\nsrc/main/kotlin/com/kotlin/sns/ListSubscriptions.kt#L22\n```\n\n----------------------------------------\n\nTITLE: Individual Aurora API Operations\nDESCRIPTION: Collection of individual API operation examples including creating and managing clusters, parameter groups, instances and snapshots.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/aurora/README.md#2025-04-09_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nsrc/rds.rs\n```\n\nLANGUAGE: rust\nCODE:\n```\nsrc/aurora_scenario/tests.rs\n```\n\n----------------------------------------\n\nTITLE: Starting an AWS Glue Crawler with .NET\nDESCRIPTION: This code demonstrates how to start an AWS Glue crawler using the AWS SDK for .NET. It takes the crawler name as a parameter.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Glue/README.md#2025-04-09_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\nStartCrawler\n```\n\n----------------------------------------\n\nTITLE: Setting Up Elros Boilerplate\nDESCRIPTION: Step-by-step instructions for setting up the Elros boilerplate in your workspace. This includes copying the directory, renaming it, and initializing a new git repository.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/resources/clients/react/elros/README.md#2025-04-09_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n1. Copy and paste the `elros` directory to your workspace.\n2. Rename your directory.\n3. Initialize a new `git` repository with `git init`.\n```\n\n----------------------------------------\n\nTITLE: Describing Parameters\nDESCRIPTION: Retrieves information about Systems Manager parameters using the DescribeParameters API.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/ssm/README.md#2025-04-09_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nsrc/main/java/com/example/ssm/GetParameter.java#L6\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js Dependencies\nDESCRIPTION: Command to install all required Node.js packages for the web client using npm.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/resources/clients/react/elwing/src/plugins/sqs-message/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Retrieving CloudFormation Stack Outputs\nDESCRIPTION: Command to get the output values from a deployed CloudFormation stack.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/resources/cdk/aurora_serverless_app/README.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\naws cloudformation describe-stacks --stack-name STACK_NAME --query Stacks[0].Outputs --output text\n```\n\n----------------------------------------\n\nTITLE: PutRecord Operation Reference in Rust\nDESCRIPTION: Reference to a Rust implementation for putting a record into a Kinesis stream located in the put-record.rs file at line 35.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/kinesis/README.md#2025-04-09_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nsrc/bin/put-record.rs#L35\n```\n\n----------------------------------------\n\nTITLE: Message Filter Configuration Prompt\nDESCRIPTION: Prompt for configuring message filters for FIFO queue subscriptions\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/topics_and_queues/README.md#2025-04-09_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nFilter messages for \"<queue name>.fifo\"s subscription to \nthe topic \"<topic name>.fifo\"?  (y/n)\n```\n\n----------------------------------------\n\nTITLE: Stopping EC2 Instances in .NET\nDESCRIPTION: This code snippet demonstrates how to stop EC2 instances using the AWS SDK for .NET. It's part of the EC2Wrapper class that provides various EC2 functionalities.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv4/EC2/README.md#2025-04-09_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\nStopInstances\n```\n\n----------------------------------------\n\nTITLE: Building Hello Lambda C++ Project with CMake\nDESCRIPTION: Commands to build the Hello Lambda C++ project using CMake from the command line. These steps create a build directory, navigate to it, and initiate the CMake build process. The resulting executable is named \"hello_lambda\".\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/lambda/hello_lambda/README.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmkdir build \ncd build\ncmake --build ..\n```\n\n----------------------------------------\n\nTITLE: Authorizing Security Group Ingress Rules for EC2\nDESCRIPTION: Demonstrates how to add inbound rules to an EC2 security group to allow specific types of incoming traffic. This is essential for controlling network access to EC2 instances.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/EC2/README.md#2025-04-09_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n// AuthorizeSecurityGroupIngress\n```\n\n----------------------------------------\n\nTITLE: Describing DB Parameters using Amazon RDS in Java\nDESCRIPTION: This code snippet shows how to describe DB parameters using Amazon RDS with AWS SDK for Java 2.x. It is part of a larger RDS scenario.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/rds/README.md#2025-04-09_snippet_9\n\nLANGUAGE: Java\nCODE:\n```\nsrc/main/java/com/example/rds/RDSScenario.java#L491\n```\n\n----------------------------------------\n\nTITLE: List S3 Objects\nDESCRIPTION: Lists objects in an S3 bucket using AWS CLI commands with V2 API.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/aws-cli/bash-linux/s3/README.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nbucket-lifecycle-operations/bucket_operations.sh#L236\n```\n\n----------------------------------------\n\nTITLE: Retrieving Failed Executions with AWS Step Functions Java SDK\nDESCRIPTION: This code snippet shows how to retrieve a list of failed executions using the AWS Step Functions Java SDK. It employs the listExecutions command to get information about failed executions.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/stepfunctions/README.md#2025-04-09_snippet_11\n\nLANGUAGE: Java\nCODE:\n```\n// Code snippet for retrieving failed executions\n// Refer to: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/stepfunctions/src/main/java/com/example/stepfunctions/GetFailedExecutions.java\n```\n\n----------------------------------------\n\nTITLE: Deleting an AWS IoT Thing using Kotlin\nDESCRIPTION: This snippet shows how to delete an AWS IoT Thing using the DeleteThing operation in the AWS SDK for Kotlin.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/iot/README.md#2025-04-09_snippet_6\n\nLANGUAGE: Kotlin\nCODE:\n```\nDeleteThing\n```\n\n----------------------------------------\n\nTITLE: Create Snowball Address Command - Rust\nDESCRIPTION: Command line example for creating an AWS Snowball address with required parameters like city, company, country, name, phone number, postal code and street information. Supports optional region and verbose output flags.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/snowball/README.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run --bin create-address -- --city CITY --company COMPANY --country COUNTRY --landmark LANDMARK --name NAME --phone-number PHONE-NUMBER --postal-code POSTAL-CODE --prefecture-or-district PREFECTURE-OR-DISTRICT --state STATE --street1 STREET1 --street2 STREET2 --street3 STREET3 [-r REGION] [-v]\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for AWS SDK Customization Tests\nDESCRIPTION: Sets up the CMake project for AWS SDK for C++ customization examples with Google Test. This configuration defines project parameters, finds dependencies (AWS SDK and GTest), configures platform-specific settings, and establishes test file management.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/sdk-customization/tests/CMakeLists.txt#2025-04-09_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\n\n# Set the minimum required version of CMake for this project.\ncmake_minimum_required(VERSION 3.14)\n\nset(EXAMPLE_SERVICE_NAME \"customization\")\nset(CURRENT_TARGET \"${EXAMPLE_SERVICE_NAME}_gtest\")\nset(CURRENT_TARGET_AWS_DEPENDENCIES s3)\n\n# Set this project's name.\nproject(\"${EXAMPLE_SERVICE_NAME}-examples-gtests\")\n\n# Set the C++ standard to use to build this target.\nset(CMAKE_CXX_STANDARD 17)\n\nenable_testing()\n\nfind_package(GTest)\n\nif (NOT GTest_FOUND)\n    include(FetchContent)\n    FetchContent_Declare(\n            googletest\n            GIT_REPOSITORY https://github.com/google/googletest.git\n            GIT_TAG release-1.12.1\n    )\n\n    # For Windows: Prevent overriding the parent project's compiler/linker settings.\n    set(gtest_force_shared_crt ON CACHE BOOL \"\" FORCE)\n    FetchContent_MakeAvailable(googletest)\nendif ()\n\n# Use the MSVC variable to determine if this is a Windows build.\nset(WINDOWS_BUILD ${MSVC})\n\n# Set the location for Windows to find the installed libraries of the SDK.\nif (WINDOWS_BUILD)\n    string(REPLACE \";\" \"/aws-cpp-sdk-all;\" SYSTEM_MODULE_PATH \"${CMAKE_SYSTEM_PREFIX_PATH}/aws-cpp-sdk-all\")\n    list(APPEND CMAKE_PREFIX_PATH ${SYSTEM_MODULE_PATH})\nendif ()\n\n# Find the AWS SDK for C++ package.\nfind_package(AWSSDK REQUIRED COMPONENTS ${CURRENT_TARGET_AWS_DEPENDENCIES})\n\nadd_executable(\n        ${CURRENT_TARGET}\n)\n\nif (WINDOWS_BUILD AND AWSSDK_INSTALL_AS_SHARED_LIBS)\n    # set(BIN_SUB_DIR \"/Debug\") # If you are building from the command line, you may need to uncomment this\n    # and set the proper subdirectory to the executables' location.\n\n    # Copy relevant AWS SDK for C++ libraries into the current binary directory for running and debugging.\n    AWSSDK_CPY_DYN_LIBS(\n            CURRENT_TARGET_AWS_DEPENDENCIES\n            \"\"\n            ${CMAKE_CURRENT_BINARY_DIR}${BIN_SUB_DIR}\n    )\nendif ()\n\n# GTEST_SOURCE_FILES can be defined in the command line to limit the files in a build, for example to one action.\nif (NOT DEFINED GTEST_SOURCE_FILES)\n    file(\n            GLOB\n            GTEST_SOURCE_FILES\n            \"gtest_*.cpp\"\n    )\nendif ()\n\nforeach (TEST_FILE ${GTEST_SOURCE_FILES})\n    string(REPLACE \"gtest_\" \"../\" SOURCE_FILE ${TEST_FILE})\n    if (EXISTS ${SOURCE_FILE})\n        list(APPEND GTEST_SOURCE ${SOURCE_FILE} ${TEST_FILE})\n    else ()\n        message(\"Error: no associated source file found for ${TEST_FILE}\")\n    endif ()\nendforeach ()\n\ntarget_sources(\n        ${CURRENT_TARGET}\n        PUBLIC\n        ${GTEST_SOURCE}\n        test_main.cpp\n        ${EXAMPLE_SERVICE_NAME}_gtests.cpp\n)\n\ntarget_include_directories(\n        ${CURRENT_TARGET}\n        PUBLIC\n        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/..>\n        $<INSTALL_INTERFACE:..>\n)\n\ntarget_compile_definitions(\n        ${CURRENT_TARGET}\n        PUBLIC\n        TESTING_BUILD\n        SRC_DIR=\"${CMAKE_CURRENT_SOURCE_DIR}\"\n)\n\ntarget_link_libraries(\n        ${CURRENT_TARGET}\n        GTest::gtest\n        ${AWSSDK_LINK_LIBRARIES}\n        ${AWSSDK_PLATFORM_DEPS}\n)\n\ninclude(GoogleTest)\n\ngtest_add_tests(\n        TARGET\n        ${CURRENT_TARGET}\n)\n```\n\n----------------------------------------\n\nTITLE: Compiling Rust Lambda Function with Cargo Lambda\nDESCRIPTION: Commands to build the Rust Lambda function using Cargo Lambda for ARM64 architecture and create a zip file for deployment.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/cross_service/photo_asset_management/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo lambda build --release --arm64\nzip ../../target/lambda/pam/bootstrap{.zip,}\n```\n\n----------------------------------------\n\nTITLE: Releasing an Elastic IP Address\nDESCRIPTION: Shows how to release an Elastic IP address when it's no longer needed. This returns the IP address to AWS's pool and stops any charges associated with it.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/EC2/README.md#2025-04-09_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\n// ReleaseAddress\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js Dependencies for React Item Tracker\nDESCRIPTION: Command to install all required Node.js packages for the React item tracker web client. Run this in the item-tracker folder before starting the application.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/resources/clients/react/item-tracker/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Copying AWS SDK Libraries for Windows Builds\nDESCRIPTION: This CMake snippet handles copying relevant AWS SDK libraries into the current binary directory for Windows builds. It's conditional on the build being for Windows and the AWS SDK being installed as shared libraries.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/medical-imaging/CMakeLists.txt#2025-04-09_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (WINDOWS_BUILD AND AWSSDK_INSTALL_AS_SHARED_LIBS)\n    # set(BIN_SUB_DIR \"/Debug\") # If you are building from the command line, you may need to uncomment this\n    # and set the proper subdirectory to the executables' location.\n\n    AWSSDK_CPY_DYN_LIBS(SERVICE_COMPONENTS \"\" ${CMAKE_CURRENT_BINARY_DIR}${BIN_SUB_DIR})\nendif ()\n```\n\n----------------------------------------\n\nTITLE: DescribeStream Operation Reference in Rust\nDESCRIPTION: Reference to a Rust implementation for describing a Kinesis stream located in the describe-stream.rs file at line 26.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/kinesis/README.md#2025-04-09_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nsrc/bin/describe-stream.rs#L26\n```\n\n----------------------------------------\n\nTITLE: Putting Events in EventBridge using Kotlin\nDESCRIPTION: This code snippet shows how to put custom events into Amazon EventBridge using the AWS SDK for Kotlin. It utilizes the PutEvents operation to send one or more events to EventBridge.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/eventbridge/README.md#2025-04-09_snippet_7\n\nLANGUAGE: Kotlin\nCODE:\n```\nPutEvents\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Bundler\nDESCRIPTION: Commands to install Bundler and resolve dependencies declared in the Gemfile. These commands should be run from the /ruby directory to properly set up the environment for running examples.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/ruby/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\ngem install bundler\nbundle install\n```\n\n----------------------------------------\n\nTITLE: Deploying CloudFormation Stack and Setup Example\nDESCRIPTION: Sample output showing the initial interaction where the user provides an email address for subscription and stack name for CloudFormation deployment. Includes error handling for existing stack names and successful stack creation with output ARNs.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/eventbridge_scheduler/SPECIFICATION.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--------------------------------------------------------------------------------\nWelcome to the Amazon EventBridge Scheduler Scenario.\n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\nPreparing the application...\n\nThis example creates resources in a CloudFormation stack, including an SNS topic\nthat will be subscribed to the EventBridge Scheduler events.\n\nYou will need to confirm the subscription in order to receive event emails.\nEnter an email address to use for event subscriptions:\ntest@example.com\nEnter a name for the AWS Cloud Formation Stack:\nteststack10\n\nDeploying CloudFormation stack: teststack10\nEnter a name for the AWS Cloud Formation Stack:\nwarn: SchedulerScenario.SchedulerWorkflow[0]\n      CloudFormation stack 'teststack10' already exists. Please provide a unique name.\nstackAB\n\nDeploying CloudFormation stack: stackAB\nCloudFormation stack creation started: stackAB\nWaiting for CloudFormation stack creation to complete...\nCloudFormation stack creation complete.\nStack output RoleARN: arn:aws:iam::123456789123:role/example_scheduler_role\nStack output SNStopicARN: arn:aws:sns:us-east-1:123456789123:stackAB-SchedulerSnsTopic-UORtMkZypo3x\n--------------------------------------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for Amazon Polly Examples\nDESCRIPTION: Command to install the necessary Python packages for running the Amazon Polly examples in a virtual environment.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/polly/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Hello CloudWatch - Basic Metrics Listing\nDESCRIPTION: Simple example showing how to get started with CloudWatch by listing metrics using the ListMetrics operation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/cloudwatch/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nsrc/main/java/com/example/cloudwatch/HelloService.java#L6\n```\n\n----------------------------------------\n\nTITLE: Running Examples with Command-Line Options in JavaScript\nDESCRIPTION: This snippet illustrates how to run examples with command-line options using Node.js. It uses the util.parseArgs function to configure options for specific scripts.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/sfn/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnode ./scenarios/<fileName> --option1 --option2\n```\n\n----------------------------------------\n\nTITLE: Describing a State Machine with AWS Step Functions Java SDK\nDESCRIPTION: This code snippet demonstrates how to describe a state machine using the AWS Step Functions Java SDK. It uses the describeStateMachine command to get information about a specific state machine.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/stepfunctions/README.md#2025-04-09_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\n// Code snippet for describing a state machine\n// Refer to: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/route53/src/main/java/com/example/route/StepFunctionsScenario.java\n```\n\n----------------------------------------\n\nTITLE: Listing EC2 Regions and Availability Zones in Go\nDESCRIPTION: This example lists the AWS Regions where Amazon EC2 is available, and the Availability Zones within the current AWS Region. It doesn't require any command-line arguments.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/ec2/README.md#2025-04-09_snippet_13\n\nLANGUAGE: Go\nCODE:\n```\ngo run RegionsAndZones.go\n```\n\n----------------------------------------\n\nTITLE: Running Hello AWS IoT SiteWise Example\nDESCRIPTION: Command to execute the basic Hello AWS IoT SiteWise example that demonstrates ListAssetModels functionality\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/iotsitewise/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython hello/hello_iot_sitewise.py\n```\n\n----------------------------------------\n\nTITLE: Running Single Action Example for Amazon Polly\nDESCRIPTION: Command to execute a single action example file from the actions directory.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/polly/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode ./actions/<fileName>\n```\n\n----------------------------------------\n\nTITLE: Running the Resilience Demo Application\nDESCRIPTION: Command to run the main application script which manages the resilient service demonstration. It accepts different scenarios (deploy, demo, destroy) and optional parameters for help, automatic confirmation, and verbose output.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/cross-services/wkflw-resilient-service/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode index.js --scenario <deploy | demo | destroy> [-h|--help] [-y|--yes] [-v|--verbose]\n```\n\n----------------------------------------\n\nTITLE: Updating the Plugin Manifest in TypeScript\nDESCRIPTION: Example of how to register a new plugin in the manifest.ts file. This code imports both the default AppPlugin and the custom MyPlugin, then adds the custom plugin to the plugins array for Elwing to load.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/resources/clients/react/elwing/README.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { AppPlugin } from \"./AppPlugin\";\nimport { MyPlugin } from \"./my-plugin\";\nconst plugins: AppPlugin[] = [MyPlugin];\nexport default plugins;\n```\n\n----------------------------------------\n\nTITLE: Running the SES Email Sending and Verification Example\nDESCRIPTION: Command to run the comprehensive example that demonstrates how to add and verify an email address, send standard and templated email messages, and send messages using the Amazon SES SMTP server.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/ses/README.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython ses_email.py\n```\n\n----------------------------------------\n\nTITLE: Create KMS Key Reference - Rust\nDESCRIPTION: Reference to code example for creating a new KMS key using the AWS SDK for Rust\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/kms/README.md#2025-04-09_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nsrc/bin/create-key.rs#L22\n```\n\n----------------------------------------\n\nTITLE: Running Python Tests with PyTest\nDESCRIPTION: Command to run all unit tests for the S3 file transfer module. The tests use botocore Stubber to mock AWS responses without making actual API calls.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/s3/file_transfer/README.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython -m pytest\n```\n\n----------------------------------------\n\nTITLE: Creating Work Items Table for MySQL\nDESCRIPTION: SQL query to create work_items table schema in MySQL-compatible Aurora database\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/cross_service/aurora_item_tracker/README.md#2025-04-09_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ncreate table work_items ( \n  iditem INT AUTO_INCREMENT PRIMARY KEY, \n  description TEXT, \n  guide VARCHAR(45), \n  status TEXT, \n  username VARCHAR(45), \n  archived BOOL DEFAULT 0\n);\n```\n\n----------------------------------------\n\nTITLE: Creating an Auto Scaling Group in .NET\nDESCRIPTION: This snippet demonstrates how to create an Amazon EC2 Auto Scaling group using the AWS SDK for .NET. It references the CreateAutoScalingGroup method in the AutoScalingWrapper class.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv4/AutoScaling/README.md#2025-04-09_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nCreateAutoScalingGroup(Actions/AutoScalingWrapper.cs#L28)\n```\n\n----------------------------------------\n\nTITLE: Encrypting Data with KMS using Java SDK\nDESCRIPTION: This code snippet shows how to encrypt data using a KMS key with the AWS SDK for Java 2.x. It uses the Encrypt operation to encrypt plaintext using the specified KMS key.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/kms/README.md#2025-04-09_snippet_9\n\nLANGUAGE: Java\nCODE:\n```\nKMSActions.java#L194\n```\n\n----------------------------------------\n\nTITLE: Terminating Instance in Auto Scaling Group in Rust\nDESCRIPTION: This code snippet demonstrates how to use the TerminateInstanceInAutoScalingGroup operation to remove an instance from an Auto Scaling group using the AWS SDK for Rust.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/auto-scaling/README.md#2025-04-09_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nsrc/scenario.rs#L456\n```\n\n----------------------------------------\n\nTITLE: Sending a Templated Email via Amazon SES using C++\nDESCRIPTION: This code snippet shows how to send a templated email using Amazon SES with the AWS SDK for C++. The implementation can be found in the 'send_templated_email.cpp' file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/ses/README.md#2025-04-09_snippet_13\n\nLANGUAGE: C++\nCODE:\n```\n// See send_templated_email.cpp, line 23\n```\n\n----------------------------------------\n\nTITLE: Creating a Kinesis Data Stream in Java\nDESCRIPTION: This code snippet demonstrates how to create a new Kinesis data stream using the AWS SDK for Java 2.x. It includes the necessary import statement and references the CreateDataStream class.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/kinesis/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport com.example.kinesis.CreateDataStream;\n```\n\n----------------------------------------\n\nTITLE: Specifying Boto3 Version Requirement\nDESCRIPTION: Defines the minimum required version of the AWS Boto3 SDK package as 1.26.79 or higher using pip requirements format.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/route53-recovery-cluster/requirements.txt#2025-04-09_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nboto3>=1.26.79\n```\n\n----------------------------------------\n\nTITLE: Log4j2 Configuration for AWS SDK Logging\nDESCRIPTION: XML configuration for Log4j2 that sets up console logging for the application, AWS SDK requests, and CloudWatch metric publishing. Includes patterns for logging timestamps, thread information, and log levels.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/monitor_dynamodb/README.md#2025-04-09_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<Configuration status=\"WARN\">\n    <Appenders>\n        <Console name=\"ConsoleAppender\" target=\"SYSTEM_OUT\">\n            <PatternLayout pattern=\"%d{YYYY-MM-dd HH:mm:ss} [%t] %-5p %c:%L - %m%n\" />\n        </Console>\n    </Appenders>\n\n    <Loggers>\n        <Root level=\"WARN\">\n            <AppenderRef ref=\"ConsoleAppender\"/>\n        </Root>\n        <Logger name=\"org.example\" level=\"INFO\"/>\n        <Logger name=\"software.amazon.awssdk.request\" level=\"DEBUG\" />\n        <Logger name=\"software.amazon.awssdk.metrics.publishers.cloudwatch\" level=\"TRACE\"/>\n    </Loggers>\n</Configuration>\n```\n\n----------------------------------------\n\nTITLE: Running Single Action Examples in Node.js\nDESCRIPTION: Command to execute individual action examples from the actions directory using Node.js.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/codebuild/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode ./actions/<fileName>\n```\n\n----------------------------------------\n\nTITLE: Listing Amazon Bedrock Foundation Models in .NET\nDESCRIPTION: Code example showing how to list available foundation models in Amazon Bedrock using the AWS SDK for .NET. This is part of the HelloBedrock example that demonstrates basic interaction with the service.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Bedrock/README.md#2025-04-09_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nActions/HelloBedrock.cs#L4\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for FSA Deployment in Bash\nDESCRIPTION: Sets the required environment variables for deploying the FSA application using Bash. These variables include the FSA name, email, and language.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/applications/feedback_sentiment_analyzer/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nexport FSA_NAME=ana\nexport FSA_EMAIL=ana@example.com\nexport FSA_LANG=ruby\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring Security with Amazon Cognito in YAML\nDESCRIPTION: This YAML configuration sets up Spring Security to use Amazon Cognito as an OAuth2 provider. It specifies client details, redirect URI, and the Cognito issuer URI.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_amazon_cognito_app/README.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nspring:\n  security:\n    oauth2:\n     client:\n      registration:\n       cognito:\n       clientId: <enter your client id value>\n       clientSecret: <enter your client secret value>\n       scope: openid, email\n       redirectUriTemplate: http://localhost:8080/login/oauth2/code/cognito <your call back URL>\n       clientName: spring-boot <The client app value you defined>\n    provider:\n     cognito:\n       issuerUri: https://cognito-idp.<AWS Region>.amazonaws.com/<pool id value>\n```\n\n----------------------------------------\n\nTITLE: Decrypt Data Reference - Rust\nDESCRIPTION: Reference to code example for decrypting data using AWS KMS with the Rust SDK\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/kms/README.md#2025-04-09_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nsrc/bin/decrypt.rs#L32\n```\n\n----------------------------------------\n\nTITLE: Describing ECR Images with Java\nDESCRIPTION: Demonstrates how to retrieve details about images in an ECR repository using the DescribeImages API.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/ecr/README.md#2025-04-09_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\n// Referenced from ECRActions.java#L244\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for AWS SDK Examples\nDESCRIPTION: This snippet lists the required Python packages and their minimum versions for working with AWS SDK examples. It includes boto3 for AWS interactions, pytest for testing, and moto for mocking AWS services.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/secretsmanager/requirements.txt#2025-04-09_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nboto3>=1.34.8\npytest>=7.2.1\nmoto\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Packages for Amazon EMR Examples\nDESCRIPTION: Command to install all required dependencies for the Amazon EMR examples using pip within a virtual environment.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/emr/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Deleting AWS Batch Job Queue in Java\nDESCRIPTION: Shows how to delete a job queue in AWS Batch using the deleteJobQueue operation. This operation removes job queues when they are no longer needed.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/batch/README.md#2025-04-09_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nDeleteJobQueue\n```\n\n----------------------------------------\n\nTITLE: Synthesizing Speech with Amazon Polly\nDESCRIPTION: Code example showing how to convert text to speech using Amazon Polly's speech synthesis capabilities. Located at src/main/java/com/example/polly/PollyDemo.java.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/polly/README.md#2025-04-09_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nsrc/main/java/com/example/polly/PollyDemo.java#L6\n```\n\n----------------------------------------\n\nTITLE: Detecting Key Phrases with Amazon Comprehend in Java\nDESCRIPTION: Demonstrates how to extract key phrases from text using Amazon Comprehend. This is useful for summarizing content or identifying important topics in a document.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/comprehend/README.md#2025-04-09_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nDetectKeyPhrases\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies for AWS SDK Examples\nDESCRIPTION: A requirements.txt file that specifies the minimum versions of necessary Python packages for running AWS SDK examples. It includes boto3 for AWS API interaction, pillow for image manipulation, pytest for testing, and requests for HTTP calls.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/rekognition/requirements.txt#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nboto3>=1.26.79\npillow>=9.4.0\npytest>=7.2.1\nrequests>=2.28.2\n```\n\n----------------------------------------\n\nTITLE: Deploying AWS Resources with CDK in TypeScript\nDESCRIPTION: Uses AWS CDK with TypeScript to deploy and manage the application's infrastructure. This includes setting up S3 buckets, Cognito user pools, Lambda functions, API Gateway, and other necessary resources for the serverless application.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/applications/photo-asset-manager/DESIGN.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// CDK deployment code would go here\n// Example:\n// import * as cdk from '@aws-cdk/core';\n// import * as s3 from '@aws-cdk/aws-s3';\n// import * as cognito from '@aws-cdk/aws-cognito';\n// \n// class ImageProcessingStack extends cdk.Stack {\n//   constructor(scope: cdk.Construct, id: string, props?: cdk.StackProps) {\n//     super(scope, id, props);\n// \n//     // Define resources here\n//     const storageBucket = new s3.Bucket(this, 'StorageBucket', {\n//       // bucket properties\n//     });\n// \n//     const userPool = new cognito.UserPool(this, 'UserPool', {\n//       // user pool properties\n//     });\n// \n//     // Add more resources as needed\n//   }\n// }\n```\n\n----------------------------------------\n\nTITLE: Running Single Action Examples in Node.js\nDESCRIPTION: Command to run individual action examples from the actions directory using Node.js.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/eventbridge/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode ./actions/<fileName>\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign Up UI in Flutter\nDESCRIPTION: This Dart code demonstrates a Flutter widget for a sign-up view. It uses the CognitoManager to handle the sign-up process and displays a simple form for email and password input.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/cognito_flutter_mobile_app/README.md#2025-04-09_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'cognito_manager.dart';\n\n...\n\nclass SignUpView extends StatefulWidget {\n  @override\n  _SignUpViewState createState() => _SignUpViewState();\n}\n\nclass _SignUpViewState extends State<SignUpView> {\n  final _emailController = TextEditingController();\n  final _passwordController = TextEditingController();\n  late final CognitoManager _cognitoManager;\n\n  @override\n  void initState() {\n    super.initState();\n    _cognitoManager = CognitoManager();\n    _initCognitoManager();\n  }\n\n  Future<void> _initCognitoManager() async {\n    await _cognitoManager.init();\n  }\n\n  void _signUp() async {\n    final email = _emailController.text;\n    final password = _passwordController.text;\n\n    try {\n      await _cognitoManager.signUp(email, password);\n      DefaultTabController.of(context).animateTo(1);\n    } on CognitoServiceException catch (e) {\n      ScaffoldMessenger.of(context).showSnackBar(\n        SnackBar(content: Text(e.message)),\n      );\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Sign Up')),\n      body: Padding(\n        padding: const EdgeInsets.all(8.0),\n        child: Column(\n          children: [\n            TextField(\n              controller: _emailController,\n              decoration: const InputDecoration(labelText: 'Email'),\n            ),\n            TextField(\n              controller: _passwordController,\n              decoration: const InputDecoration(labelText: 'Password'),\n              obscureText: true,\n            ),\n            ElevatedButton(\n              onPressed: _signUp,\n              child: const Text('Sign Up'),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n\n...\n```\n\n----------------------------------------\n\nTITLE: Creating Welcome Message for Amazon SES v2 Coupon Newsletter Workflow in Markdown\nDESCRIPTION: This snippet provides a welcome message that introduces users to the Amazon SES v2 Coupon Newsletter Workflow. It outlines the four main steps involved in the process: preparing email identity and contact list, gathering subscriber emails, sending weekly newsletters, and monitoring metrics.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/sesv2_weekly_mailer/content/31a_intro_message.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nWelcome to the Amazon SES v2 Coupon Newsletter Workflow!\n\nThis workflow will help you:\n1. Prepare a verified email identity and contact list for your newsletter.\n2. Gather subscriber email addresses and send them a welcome email.\n3. Send a weekly coupon newsletter to your subscribers using email templates.\n4. Monitor your sending activity and metrics in the AWS console.\n\nLet's get started!\n```\n\n----------------------------------------\n\nTITLE: Mapping Test Files to Source Files and Handling Special Cases\nDESCRIPTION: Pairs each test file with its corresponding source file, including special handling for the Object Integrity Workflow which has a different directory structure.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/s3/tests/CMakeLists.txt#2025-04-09_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nenable_testing()\n\n# The Object Integrity Workflow is a special case and is handled differently.\nset(OBJECT_INTEGRITY_WORKFLOW_SOURCE s3_object_integrity_workflow.cpp)\n\nforeach (TEST_FILE ${GTEST_SOURCE_FILES})\n    string(REPLACE \"gtest_\" \"../\" SOURCE_FILE ${TEST_FILE})\n    if (EXISTS ${SOURCE_FILE})\n        list(APPEND GTEST_SOURCE ${SOURCE_FILE} ${TEST_FILE})\n\n    else ()\n        string(FIND ${SOURCE_FILE} ${OBJECT_INTEGRITY_WORKFLOW_SOURCE} POS)\n        if (POS EQUAL -1)\n            message(\"Error: no associated source file found for ${TEST_FILE}\")\n        else ()\n            list(APPEND GTEST_SOURCE ../s3_object_integrity_workflow/${OBJECT_INTEGRITY_WORKFLOW_SOURCE} ${TEST_FILE})\n        endif ()\n    endif ()\nendforeach ()\n```\n\n----------------------------------------\n\nTITLE: Encrypt Data Reference - Rust\nDESCRIPTION: Reference to code example for encrypting data using AWS KMS with the Rust SDK\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/kms/README.md#2025-04-09_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nsrc/bin/encrypt.rs#L37\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for AWS SDK\nDESCRIPTION: Defines the minimum required versions of boto3 and pytest packages needed to run AWS SDK examples. Boto3 version 1.26.79 or higher is required for AWS interactions, while pytest 7.2.1 or higher is needed for running tests.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/organizations/requirements.txt#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nboto3>=1.26.79\npytest>=7.2.1\n```\n\n----------------------------------------\n\nTITLE: Creating Work Items Table for MySQL-Compatible Aurora\nDESCRIPTION: SQL query to create a work_items table in MySQL-compatible Aurora Serverless with columns for tracking work items including ID, dates, descriptions, and status.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/php/cross_service/aurora_item_tracker/README.md#2025-04-09_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate table work_items (\n  work_item_id INT AUTO_INCREMENT PRIMARY KEY,\n  created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP, \n  description TEXT, \n  guide TEXT, \n  status TEXT, \n  username VARCHAR(45), \n  archive BOOL DEFAULT 0\n);\n```\n\n----------------------------------------\n\nTITLE: Running a Scenario in Node.js\nDESCRIPTION: This snippet shows how to run a scenario from the examples. It uses Node.js to execute a specific file from the scenarios directory.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/mediaconvert/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnode ./scenarios/<fileName>\n```\n\n----------------------------------------\n\nTITLE: Listing Tables in AWS Glue Data Catalog with Java\nDESCRIPTION: Example showing how to retrieve a list of tables from an AWS Glue database in the Data Catalog.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/glue/README.md#2025-04-09_snippet_9\n\nLANGUAGE: Java\nCODE:\n```\nGlueScenario.java#L468\n```\n\n----------------------------------------\n\nTITLE: Subscribing to an Amazon SNS Topic by Email in Go\nDESCRIPTION: This code snippet subscribes a user to an Amazon SNS topic using their email address. It requires the email address and the topic ARN as command-line arguments.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/sns/README.md#2025-04-09_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\ngo run SubscribeTopic.go -e EMAIL -t TOPIC-ARN\n```\n\n----------------------------------------\n\nTITLE: List Lexicons Example in C#\nDESCRIPTION: Code example showing how to list all lexicons stored in Amazon Polly using the AWS SDK for .NET. Located in ListLexiconsExample/ListLexicons.cs\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Polly/README.md#2025-04-09_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nListLexiconsExample/ListLexicons.cs#L6\n```\n\n----------------------------------------\n\nTITLE: Configuring Properties for Amazon Lookout for Vision JUnit Tests\nDESCRIPTION: This snippet outlines the required properties to be defined in the config.properties file for running Amazon Lookout for Vision JUnit tests. It includes project settings, model configurations, S3 bucket details, and file locations for various test scenarios.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/lookoutvision/README.md#2025-04-09_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nprojectName=<project_name>\nmodelDescription=<model_description>\nmodelTrainingOutputBucket=<s3_bucket_name>\nmodelTrainingOutputFolder=<s3_folder_name>\nphoto=<path_to_normal_image>\nanomalousPhoto=<path_to_anomalous_image>\nanomalyLabel=<anomaly_label>\nmanifestFile=<path_to_manifest_file>\nmodelPackageJobJsonFile=<path_to_packaging_job_json_file>\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for AWS SDK Examples\nDESCRIPTION: This code snippet defines the minimum required versions for key Python packages used in AWS SDK examples. It includes boto3 for AWS SDK interactions, pytest for testing, requests for HTTP operations, openjphpy for specific functionality, and botocore for low-level AWS operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/medical-imaging/requirements.txt#2025-04-09_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nboto3>=1.34.149\npytest>=7.2.1\nrequests>=2.28.2\nopenjphpy>=0.1.0\nbotocore>=1.34.149\n```\n\n----------------------------------------\n\nTITLE: Implementing First Lambda Function to Query DynamoDB in Java\nDESCRIPTION: The ListMissingStudentsHandler class implements the RequestHandler interface as the first step in the workflow. It extracts a date value from the input event, uses it to query the Students table through the GetStudents class, and returns XML data about absent students.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/workflow_multiple_channels/README.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage com.example;\n\nimport com.amazonaws.services.lambda.runtime.Context;\nimport com.amazonaws.services.lambda.runtime.RequestHandler;\nimport com.amazonaws.services.lambda.runtime.LambdaLogger;\nimport java.util.Map;\n\npublic class ListMissingStudentsHandler implements RequestHandler<Map<String,String>, String> {\n\n    @Override\n    public String handleRequest(Map<String,String> event, Context context) {\n        LambdaLogger logger = context.getLogger();\n        String date = event.get(\"date\");\n        logger.log(\"DATE: \" + date);\n\n        GetStudents students = new GetStudents();\n        String xml = students.getStudentsData(date);\n        logger.log(\"XML: \" + xml);\n        return xml;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Examples with Command Line Options\nDESCRIPTION: Command to run scripts with additional command line options using util.parseArgs\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/ec2/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnode ./scenarios/<fileName> --option1 --option2\n```\n\n----------------------------------------\n\nTITLE: Creating Systems Manager Document with JavaScript SDK v3\nDESCRIPTION: This code snippet shows how to create a Systems Manager document using the CreateDocument operation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/ssm/README.md#2025-04-09_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// CreateDocument\n```\n\n----------------------------------------\n\nTITLE: Creating Contact in SESv2 Contact List\nDESCRIPTION: API call to create a new contact in the weekly-coupons-newsletter contact list using AWS SESv2.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/sesv2_weekly_mailer/content/32_SPEC_GATHER.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ContactListName\": \"weekly-coupons-newsletter\",\n  \"EmailAddress\": \"<user_email_address>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Destroying Resources with AWS CLI\nDESCRIPTION: Command to delete the CloudFormation stack using AWS CLI.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/resources/cdk/aurora_serverless_app/README.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\naws cloudformation delete-stack --stack-name YOUR_STACK_NAME\n```\n\n----------------------------------------\n\nTITLE: Listing SQS Queues in Rust\nDESCRIPTION: Code excerpt showing how to list Amazon SQS queues using the AWS SDK for Rust. References line 30 of sqs-hello-world.rs file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/sqs/README.md#2025-04-09_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nListQueues\n```\n\n----------------------------------------\n\nTITLE: Releasing Elastic IP Address in EC2 using .NET\nDESCRIPTION: This code snippet shows how to release an Elastic IP address in Amazon EC2 using the AWS SDK for .NET. It's part of the EC2Wrapper class that encapsulates various EC2 operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv4/EC2/README.md#2025-04-09_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\nReleaseAddress\n```\n\n----------------------------------------\n\nTITLE: Building AWS SES Example Executables\nDESCRIPTION: Iterates through source files to create executable targets for each AWS SES example. It allows limiting the build to specific files using the AWSDOC_SOURCE variable.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/ses/CMakeLists.txt#2025-04-09_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT DEFINED AWSDOC_SOURCE)\n  file(GLOB AWSDOC_SOURCE\n          \"*.cpp\"\n          )\nendif()\n\nforeach(file ${AWSDOC_SOURCE})\n  get_filename_component(EXAMPLE ${file} NAME_WE)\n\n  set(EXAMPLE_EXE run_${EXAMPLE})\n\n  add_executable(${EXAMPLE_EXE} ${file})\n\n  target_link_libraries(${EXAMPLE_EXE} ${AWSSDK_LINK_LIBRARIES}\n          ${AWSSDK_PLATFORM_DEPS})\n\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Specifying AWS SDK and Testing Dependencies in Python\nDESCRIPTION: This snippet defines the minimum required versions of Python packages for an AWS SDK example project. It requires boto3 (the AWS SDK for Python) version 1.26.79 or later, and pytest version 7.2.1 or later for testing.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/glue/requirements.txt#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nboto3>=1.26.79\npytest>=7.2.1\n```\n\n----------------------------------------\n\nTITLE: Deleting a Route Calculator in Amazon Location Service using Java\nDESCRIPTION: This code snippet demonstrates how to delete a route calculator in Amazon Location Service. It's part of the LocationActions class that provides various Location Service operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/location/README.md#2025-04-09_snippet_10\n\nLANGUAGE: Java\nCODE:\n```\nDeleteRouteCalculator\n```\n\n----------------------------------------\n\nTITLE: Running Custom Vocabulary Example\nDESCRIPTION: Command to execute the transcribe_basics.py script which demonstrates creating and refining custom vocabularies.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/transcribe/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython transcribe_basics.py\n```\n\n----------------------------------------\n\nTITLE: AWS Lambda Handler for Text Translation\nDESCRIPTION: Implements a Lambda RequestHandler that translates text using Amazon Translate. Takes source text and language code as input, translates the text, and returns a JSON response with the translated text.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_fsa_app/README.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.fsa.handlers;\n\nimport com.amazonaws.services.lambda.runtime.Context;\nimport com.amazonaws.services.lambda.runtime.RequestHandler;\nimport com.example.fsa.services.TranslateService;\nimport org.json.simple.JSONObject;\nimport java.util.Map;\n\npublic class TranslateTextHandler implements RequestHandler<Map<String, Object>, JSONObject> {\n\n    @Override\n    public JSONObject handleRequest(Map<String, Object> requestObject, Context context) {\n        TranslateService translateService = new TranslateService();\n        String sourceText = (String) requestObject.get(\"extracted_text\");\n        String lanCode = (String) requestObject.get(\"source_language_code\");\n        context.getLogger().log(\"sourceText: \" + sourceText + \"lang code: \"+lanCode);\n        String translatedText = translateService.translateText(lanCode, sourceText);\n        context.getLogger().log(\"Translated text : \" + translatedText);\n        JSONObject jsonResponse = new JSONObject();\n        jsonResponse.put(\"translated_text\", translatedText);\n        return jsonResponse;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Visual C++ Special Configuration for Shared Libraries\nDESCRIPTION: Special configuration for Microsoft Visual C++ compiler when building with shared libraries. It sets necessary definitions and copies AWS SDK dynamic libraries to the binary directory.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/s3encryption/CMakeLists.txt#2025-04-09_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# If the compiler is some version of Microsoft Visual C++, or another compiler simulating C++,\n# and building as shared libraries, then dynamically link to those shared libraries.\nif(MSVC AND AWSSDK_INSTALL_AS_SHARED_LIBS)\n    add_definitions(-DUSE_IMPORT_EXPORT)\n    # Copy relevant AWS SDK for C++ libraries into the current binary directory for running and debugging.\n    list(APPEND SERVICE_LIST s3-encryption)\n    message(STATUS \"CMAKE_CURRENT_BINARY_DIR: ${CMAKE_CURRENT_BINARY_DIR}\")\n    AWSSDK_CPY_DYN_LIBS(SERVICE_LIST \"\" ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_BUILD_TYPE})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Maven Build Error Output for Unsuccessful Tests\nDESCRIPTION: This shows the output when Maven tests fail due to incorrect property values in the configuration file. The error indicates that the maven-surefire-plugin encountered test failures when attempting to run tests for the IdentitystoreJ2Project.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/identitystore/README.md#2025-04-09_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n[INFO]\n[INFO] --------------------------------------\n[INFO] BUILD FAILURE\n[INFO] --------------------------------------\n[INFO] Total time:  19.038 s\n[INFO] Finished at: 2023-02-23T14:41:51-05:00\n[INFO] ---------------------------------------\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.22.1:test (default-test) on project IdentitystoreJ2Project:  There are test failures.\n[ERROR];\n```\n\n----------------------------------------\n\nTITLE: Managing Sampling Rules in AWS X-Ray using Kotlin\nDESCRIPTION: Shows how to create and delete sampling rules that control the sampling behavior for instrumented applications. These rules determine which requests are traced and collected by X-Ray.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/xray/README.md#2025-04-09_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nCreateSamplingRule - Creates a rule to control sampling behavior\\nDeleteSamplingRule - Deletes a sampling rule\n```\n\n----------------------------------------\n\nTITLE: Building and Running Tests for Amazon EBS Examples\nDESCRIPTION: Shell commands for building and running tests using CMake. These commands enable test building and execution from the build directory.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/ebs/README.md#2025-04-09_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd <BUILD_DIR>\ncmake <path-to-root-of-this-source-code> -DBUILD_TESTS=ON\nmake\nctest\n```\n\n----------------------------------------\n\nTITLE: Defining Coupon Data Structure in JSON\nDESCRIPTION: This JSON structure represents the coupon items to be included in the newsletter email. It contains an array of coupon objects, each with a 'details' field describing the offer.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/sesv2_weekly_mailer/content/40_sample_files.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"coupons\": [\n    {\n      \"details\": \"20% off on all electronics\"\n    },\n    {\n      \"details\": \"Buy one, get one free on books\"\n    },\n    {\n      \"details\": \"15% off on home appliances\"\n    },\n    {\n      \"details\": \"Free shipping on orders over $50\"\n    },\n    {\n      \"details\": \"25% off on outdoor gear\"\n    },\n    {\n      \"details\": \"10% off on groceries\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Subscription Management Page with Thymeleaf for Amazon SNS Application\nDESCRIPTION: HTML template for managing SNS subscriptions. It provides UI elements for subscribing, unsubscribing, listing subscriptions, and publishing messages to SNS topics with support for multiple languages.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_sns_sample_app/README.md#2025-04-09_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n     <html xmlns:th=\"https://www.thymeleaf.org\" lang=\"\">\n    <head>\n     <meta charset=\"UTF-8\" />\n     <title>Subscription</title>\n\n     <script th:src=\"|https://code.jquery.com/jquery-1.12.4.min.js|\"></script>\n     <script th:src=\"|https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js|\"></script>\n     <link rel=\"stylesheet\" th:href=\"|https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css|\"/>\n     <script src=\"../public/js/contact_me.js\" th:src=\"@{/js/contact_me.js}\"></script>\n      <link rel=\"stylesheet\" href=\"../public/css/styles.css\" th:href=\"@{/css/styles.css}\" />\n    </head>\n    <body>\n    <header th:replace=\"layout :: site-header\"/>\n    <div class=\"container\">\n     <p>Now is: <b th:text=\"${execInfo.now.time}\"></b></p>\n     <div class=\"row\">\n         <div class=\"col\">\n            <h4>Enter an email address<h3>\n                <input type=\"email\" class=\"form-control\" id=\"inputEmail1\" aria-describedby=\"emailHelp\" placeholder=\"Enter email\">\n                <div class=\"clearfix mt-40\">\n\n                    <!-- Button trigger modal -->\n                    <button type=\"button\"  onclick=\"subEmail() \"class=\"btn btn-primary\" >\n                        Subscribe\n                    </button>\n                    <button type=\"button\" class=\"btn btn-primary\" onclick=\"getSubs()\">\n                        List Subscriptions\n                    </button>\n                    <button type=\"button\" onclick=\"delSub()\" class=\"btn btn-primary\" >\n                        UnSubscribe\n                    </button>\n\n                    <!-- Modal -->\n                    <div class=\"modal fade\" id=\"myModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLongTitle\" aria-hidden=\"true\">\n                        <div class=\"modal-dialog\" role=\"document\">\n                            <div class=\"modal-content\">\n                                <div class=\"modal-header\">\n                                    <h5 class=\"modal-title\" id=\"exampleModalLongTitle\">SNS email subscriptions</h5>\n                                    <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                        <span aria-hidden=\"true\">&times;</span>\n                                    </button>\n                                </div>\n                                <div class=\"modal-body\">\n\n                                </div>\n                                <div class=\"modal-footer\">\n                                    <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n           </div>\n         </div>\n         <hr style=\"width:50%;text-align:left;margin-left:0\">\n         <h4>Enter a message to publish</h4>\n        <div class=\"col-lg-12 mx-auto\">\n        <div class=\"control-group\">\n            <div class=\"form-group floating-label-form-group controls mb-0 pb-2\">\n                <textarea class=\"form-control\" id=\"body\" rows=\"5\" placeholder=\"Body\" required=\"required\" data-validation-required-message=\"Please enter a description.\"></textarea>\n                <p class=\"help-block text-danger\"></p>\n            </div>\n        </div>\n        <br>\n        <div>\n            <label for=\"lang\">Select a language:</label>\n            <select name=\"lang\" id=\"lang\">\n                <option>English</option>\n                <option>French</option>\n                <option>Spanish</option>\n            </select>\n        </div>\n        <button type=\"submit\" class=\"btn btn-primary btn-xl\" id=\"SendButton\">Publish</button>\n    </div>\n    </div>\n    </body>\n    </html>\n```\n\n----------------------------------------\n\nTITLE: Redirecting to Textract Examples in Rust SDK\nDESCRIPTION: This markdown snippet provides a link to the new location of the Textract examples for the Rust SDK in the AWS documentation repository.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rust_dev_preview/examples/textract/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\nThis file has been moved to https://github.com/awsdocs/aws-doc-sdk-examples/blob/rust_dev_preview/rustv1/examples/textract/README.md\n```\n\n----------------------------------------\n\nTITLE: Running S3 Object Lock Workflow in Python\nDESCRIPTION: Command to execute the main workflow script that demonstrates S3 Object Lock features. Requires configured AWS credentials and Python environment with required dependencies installed via pip.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/s3/scenarios/object-locking/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython main.py\n```\n\n----------------------------------------\n\nTITLE: Lambda Test Event Configuration\nDESCRIPTION: Sample JSON event for testing the Lambda function through the AWS Console. This event simulates inserting a record into the DynamoDB table with specific attributes.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/cross-services/lambda-for-browser/README.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Item\": {\n    \"Id\": 1001,\n    \"Color\": \"tangerine\",\n    \"Pattern\": \"solid\"\n  },\n  \"TableName\": \"lambda-for-browser\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving AWS CloudFormation Stack Outputs\nDESCRIPTION: AWS CLI command to extract and display the outputs from a deployed CloudFormation stack, which includes the DynamoDB table name.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/resources/cdk/dynamodb-item-tracker/README.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\naws cloudformation describe-stacks --stack-name STACK_NAME --query Stacks[0].Outputs --output text\n```\n\n----------------------------------------\n\nTITLE: Listing Entity Resolution Workflows with Java SDK\nDESCRIPTION: Example showing how to get started with AWS Entity Resolution by listing matching workflows.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/entityresolution/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nHelloEntityResoultion.java#L19\n```\n\n----------------------------------------\n\nTITLE: Responding to Auth Challenge in Amazon Cognito Identity Provider using C#\nDESCRIPTION: This code snippet demonstrates how to respond to an authentication challenge in Amazon Cognito Identity Provider using C#. It's part of the CognitoWrapper class and uses the AdminRespondToAuthChallengeAsync method.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Cognito/README.md#2025-04-09_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nAdminRespondToAuthChallenge(Actions/CognitoWrapper.cs#L72)\n```\n\n----------------------------------------\n\nTITLE: Running Basic Transcription Example\nDESCRIPTION: Command to execute the getting_started.py script which demonstrates basic audio transcription functionality.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/transcribe/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython getting_started.py\n```\n\n----------------------------------------\n\nTITLE: Application Styling CSS\nDESCRIPTION: CSS styles for application layout including header, footer, and logged-in user information display.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/creating_photo_analyzer_app/README.md#2025-04-09_snippet_13\n\nLANGUAGE: css\nCODE:\n```\nbody>header {\n     background: #000;\n     padding: 5px;\n  }\n\n  body>header>a>img, body>header a {\n     display: inline-block;\n     vertical-align: middle;\n     padding: 0px 5px;\n     font-size: 1.2em;\n  }\n\n  body>footer {\n    background: #eee;\n    padding: 5px;\n    margin: 10px 0;\n    text-align: center;\n }\n\n #logged-in-info {\n    float: right;\n    margin-top: 18px;\n }\n\n #logged-in-info form {\n    display: inline-block;\n    margin-right: 10px;\n }\n```\n\n----------------------------------------\n\nTITLE: Configuring Target Sources, Include Directories, and Compile Definitions\nDESCRIPTION: Sets up the target with all necessary source files, include directories, and compile definitions. Configures paths for testing resources including a sample movie JSON file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/dynamodb/tests/CMakeLists.txt#2025-04-09_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(\n        ${CURRENT_TARGET}\n        PUBLIC\n        ${GTEST_SOURCE}\n        test_main.cpp\n        ../dynamodb_utils.cpp\n        ${EXAMPLE_SERVICE_NAME}_gtests.cpp\n)\n\ntarget_include_directories(\n        ${CURRENT_TARGET}\n        PUBLIC\n        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/..>\n        ${AWSSDK_INCLUDE_DIR}/aws\n)\n\ntarget_compile_definitions(\n        ${CURRENT_TARGET}\n        PUBLIC\n        TESTING_BUILD\n        TESTS_DIR=\"${CMAKE_CURRENT_SOURCE_DIR}\"\n        MOVIE_FILE_PATH=\"${CMAKE_CURRENT_SOURCE_DIR}/../../../../resources/sample_files/movies.json\"\n)\n```\n\n----------------------------------------\n\nTITLE: Auto Scaling Basics Scenario in .NET\nDESCRIPTION: This snippet references a comprehensive example that demonstrates basic Auto Scaling operations including group creation, monitoring, and instance management.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv4/AutoScaling/README.md#2025-04-09_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nAutoScalingBasics(Scenarios/AutoScalingBasics/AutoScalingBasics.cs)\n```\n\n----------------------------------------\n\nTITLE: Managing Amazon Cognito User Pools with CognitoIdentityProviderClient\nDESCRIPTION: Examples show user pool management operations including creating/deleting pools, adding users, obtaining pool information, and listing users using the CognitoIdentityProviderClient. These operations enable complete user pool administration.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/cognito/README.md#2025-04-09_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Analyze Sentiment Lambda Output Schema\nDESCRIPTION: JSON schema showing the output format from the AnalyzeSentiment Lambda function\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/applications/feedback_sentiment_analyzer/SPECIFICATION.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sentiment\": \"POSITIVE\",\n  \"language_code\": \"fr-FR\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating SES Contact with JSON Request Body\nDESCRIPTION: JSON request body for creating a contact in AWS SES. The request includes optional attribute data, required email address, optional topic preferences, and an optional flag to unsubscribe from all topics.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/sesv2_weekly_mailer/content/10_CreateContact.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"AttributesData\": \"string\",\n   \"EmailAddress\": \"string\",\n   \"TopicPreferences\": [\n    {\n   \"SubscriptionStatus\": \"string\",\n         \"TopicName\": \"string\"\n      }\n   ],\n   \"UnsubscribeAll\": boolean\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP PUT Request to Archive Item\nDESCRIPTION: REST endpoint to archive a specific work item by its GUID.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/cross_service/aurora_item_tracker/README.md#2025-04-09_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nPUT http://localhost:8080/api/items/8db8aaa4-6f04-4467-bd60-EXAMPLEGUID:archive\n```\n\n----------------------------------------\n\nTITLE: Performing Basic Amazon S3 Operations with SDK for SAP ABAP\nDESCRIPTION: This code example demonstrates essential Amazon S3 operations including creating a bucket, uploading a file, downloading an object, copying an object to a subfolder, listing objects, and deleting bucket objects and the bucket itself.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/sap-abap/services/s3/README.md#2025-04-09_snippet_0\n\nLANGUAGE: ABAP\nCODE:\n```\nzcl_aws1_s3_scenario.clas.abap\n```\n\n----------------------------------------\n\nTITLE: Detecting Syntax with Amazon Comprehend in Java\nDESCRIPTION: Illustrates how to analyze the syntax of text using Amazon Comprehend. This includes identifying parts of speech, tokenization, and other grammatical elements of the input text.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/comprehend/README.md#2025-04-09_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\nDetectSyntax\n```\n\n----------------------------------------\n\nTITLE: Deploying Amazon Textract Explorer Resources with CloudFormation\nDESCRIPTION: Command to deploy the prerequisite AWS resources using CloudFormation stack defined in setup.yaml, which includes S3 bucket, SNS topic, and SQS queue.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/cross_service/textract_explorer/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython textract_demo_launcher.py deploy\n```\n\n----------------------------------------\n\nTITLE: Listing SageMaker Algorithms using AWS SDK for SAP ABAP\nDESCRIPTION: This code snippet shows how to list SageMaker algorithms using the AWS SDK for SAP ABAP. It references a method in the zcl_aws1_sgm_actions class.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/sap-abap/services/sagemaker/README.md#2025-04-09_snippet_7\n\nLANGUAGE: ABAP\nCODE:\n```\nzcl_aws1_sgm_actions.clas.abap#L475\n```\n\n----------------------------------------\n\nTITLE: Invoking Stable Diffusion Model in Java\nDESCRIPTION: Shows how to invoke the Stable Diffusion model using Amazon Bedrock Runtime. The implementation can be found in the specified file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/bedrock-runtime/README.md#2025-04-09_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\nsrc/main/java/com/example/bedrockruntime/models/stabilityAi/InvokeModel.java#L6\n```\n\n----------------------------------------\n\nTITLE: Links to Code Examples\nDESCRIPTION: List of available code examples showing individual service functions and scenarios for working with Amazon Rekognition\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/rekognition/README.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [CompareFaces](src/main/java/com/example/rekognition/CompareFaces.java#L6)\n- [CreateCollection](src/main/java/com/example/rekognition/CreateCollection.java#L6)\n- [DeleteCollection](src/main/java/com/example/rekognition/DeleteCollection.java#L6)\n- [DeleteFaces](src/main/java/com/example/rekognition/DeleteFacesFromCollection.java#L6)\n- [DescribeCollection](src/main/java/com/example/rekognition/DescribeCollection.java#L6)\n- [DetectFaces](src/main/java/com/example/rekognition/DetectFaces.java#L6)\n- [DetectLabels](src/main/java/com/example/rekognition/DetectLabels.java#L6)\n- [DetectModerationLabels](src/main/java/com/example/rekognition/DetectModerationLabels.java#L6)\n- [DetectText](src/main/java/com/example/rekognition/DetectText.java#L6)\n- [IndexFaces](src/main/java/com/example/rekognition/AddFacesToCollection.java#L6)\n- [ListCollections](src/main/java/com/example/rekognition/ListCollections.java#L6)\n- [ListFaces](src/main/java/com/example/rekognition/ListFacesInCollection.java#L6)\n- [RecognizeCelebrities](src/main/java/com/example/rekognition/RecognizeCelebrities.java#L6)\n- [SearchFaces](src/main/java/com/example/rekognition/SearchFaceMatchingImageCollection.java#L6)\n- [SearchFacesByImage](src/main/java/com/example/rekognition/SearchFaceMatchingIdCollection.java#L6)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Tool Backend Build Commands in CMake\nDESCRIPTION: Configures the build commands for the Flutter tool backend. Creates custom commands and targets to generate the Flutter library, headers, and wrapper sources required for the Windows platform.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/cognito_flutter_mobile_app/windows/flutter/CMakeLists.txt#2025-04-09_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# === Flutter tool backend ===\n# _phony_ is a non-existent file to force this command to run every time,\n# since currently there's no way to get a full input/output list from the\n# flutter tool.\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for AWS Kinesis C++ Examples\nDESCRIPTION: This CMake script sets up a project for building AWS Kinesis examples in C++. It requires CMake version 3.13 or higher, sets C++11 as the standard, finds the AWS SDK for C++ with the Kinesis component, and configures the build process for example executables.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/kinesis/CMakeLists.txt#2025-04-09_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nproject(kinesis-examples)\nset (CMAKE_CXX_STANDARD 11)\n\n# Locate the aws sdk for c++ package.\nfind_package(AWSSDK REQUIRED COMPONENTS kinesis)\n\nset(EXAMPLES \"\")\nlist(APPEND EXAMPLES \"put_get_records\")\n\n# The executables to build.\nforeach(EXAMPLE IN LISTS EXAMPLES)\n    add_executable(${EXAMPLE} ${EXAMPLE}.cpp)\n    target_link_libraries(${EXAMPLE} ${AWSSDK_LINK_LIBRARIES})\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Send Templated Email using Java\nDESCRIPTION: Demonstrates sending a templated email using Amazon SES v2 and AWS SDK for Java 2.x. Located in src/main/java/com/example/sesv2/SendEmailTemplate.java.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/ses/README.md#2025-04-09_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\ncom.example.sesv2.SendEmailTemplate.java#L6\n```\n\n----------------------------------------\n\nTITLE: Managing Amazon Cognito Identity Pools with CognitoIdentityClient\nDESCRIPTION: Examples demonstrate core identity pool operations including creation, deletion, listing identities, and listing pools using the CognitoIdentityClient. These operations allow management of Cognito identity pools and their associated identities.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/cognito/README.md#2025-04-09_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Delete Lexicon Example in C#\nDESCRIPTION: Code example demonstrating how to delete a lexicon from Amazon Polly using the AWS SDK for .NET. Located in DeleteLexiconExample/DeleteLexicon.cs\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Polly/README.md#2025-04-09_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nDeleteLexiconExample/DeleteLexicon.cs#L6\n```\n\n----------------------------------------\n\nTITLE: Main Function for SES v2 Coupon Newsletter Workflow in Python\nDESCRIPTION: The main function that orchestrates the execution of the SES v2 Coupon Newsletter Workflow. It creates an SESv2Workflow instance and calls its methods in sequence.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/sesv2_weekly_mailer/content/63a_newsletter.py.md#2025-04-09_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\ndef main():\n    \"\"\"\n    The main function that orchestrates the execution of the workflow.\n    \"\"\"\n    print(INTRO)\n    ses_client = boto3.client(\"sesv2\")\n    workflow = SESv2Workflow(ses_client)\n    try:\n        workflow.prepare_application()\n        workflow.gather_subscriber_email_addresses()\n        workflow.send_coupon_newsletter()\n        workflow.monitor_and_review()\n    except ClientError as e:\n        print_error(e)\n    workflow.clean_up()\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Configuring Optional CURL Dependency for Pre-signed URL Testing\nDESCRIPTION: Sets up CURL as an optional dependency for testing pre-signed URL functionality. If CURL is not found, the related variables are unset.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/s3/tests/CMakeLists.txt#2025-04-09_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n# CURL package is optional to test pre-signed url code.\nfind_package(CURL)\nif (NOT CURL_FOUND)\n    unset(CURL_INCLUDE_DIRS)\n    unset(CURL_LIBRARIES)\n    unset(CURL_LIBRARY)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Create Amazon SQS Queue using Ruby\nDESCRIPTION: Example code demonstrating how to create a new SQS queue using the AWS SDK for Ruby.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/ruby/example_code/sqs/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\ncreate_queue.rb#L6\n```\n\n----------------------------------------\n\nTITLE: Amazon Connect Contact and Queue Operations in Java\nDESCRIPTION: Examples demonstrating contact-related operations including describing contacts, getting contact attributes, and searching queues. These operations use the ConnectClient interface to interact with Amazon Connect's contact center functionality.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/connect/README.md#2025-04-09_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Running tests for Swift examples\nDESCRIPTION: This snippet shows how to run tests for a Swift example. It involves using the swift test command in the example's directory.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/swift/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nswift test\n```\n\n----------------------------------------\n\nTITLE: Sending Welcome Email via SESv2\nDESCRIPTION: API call to send a welcome email to newly subscribed contacts using AWS SESv2, including sender address, recipient, subject, and HTML content.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/sesv2_weekly_mailer/content/32_SPEC_GATHER.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"FromEmailAddress\": \"<verified_email>\",\n  \"Destination\": {\n    \"ToAddresses\": [\"<user_email_address>\"]\n  },\n  \"Content\": {\n    \"Simple\": {\n      \"Subject\": {\n        \"Data\": \"Welcome to the Weekly Coupons Newsletter\"\n      },\n      \"Body\": {\n        \"Html\": {\n          \"Data\": \"<content_from_welcome.html>\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: DynamoDB Enhanced Client Bean Class with Annotations\nDESCRIPTION: This class is designed to work with the DynamoDB Enhanced Client API. It uses the @DynamoDbBean annotation to map Java objects to DynamoDB items, with @DynamoDbPartitionKey marking the primary key.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_first_project/README.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.handlingformsubmission;\n\nimport software.amazon.awssdk.enhanced.dynamodb.mapper.annotations.DynamoDbBean;\nimport software.amazon.awssdk.enhanced.dynamodb.mapper.annotations.DynamoDbPartitionKey;\n\n@DynamoDbBean\npublic class GreetingItems {\n    private String id;\n    private String name;\n    private String message;\n    private String title;\n\n    public GreetingItems() {\n    }\n\n    public String getId() {\n        return this.id;\n    }\n\n    @DynamoDbPartitionKey\n    public void setId(String id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return this.name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getMessage(){\n        return this.message;\n    }\n\n    public void setMessage(String message){\n        this.message = message;\n    }\n\n    public String getTitle() {\n        return this.title;\n    }\n\n    public void setTitle(String title) {\n        this.title = title;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: View Billing for Route 53 Domains in C#\nDESCRIPTION: Retrieves billing records for domain registration operations in the specified time period. Returns a list of billing records with details about charges, domains, and operation types.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Route53/README.md#2025-04-09_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\n/// <summary>\n/// View billing for the account.\n/// </summary>\n/// <param name=\"start\">The start date.</param>\n/// <param name=\"end\">The end date.</param>\n/// <param name=\"marker\">The marker (starting point) of the list.</param>\n/// <param name=\"maxItems\">The maximum number items to return.</param>\n/// <returns>The list of billing records.</returns>\npublic async Task<List<BillingRecord>> ViewBilling(\n    DateTime start,\n    DateTime end,\n    string? marker = null,\n    int maxItems = 20)\n{\n    var result = await _amazonRoute53Domains.ViewBillingAsync(\n        new ViewBillingRequest\n        {\n            Start = start,\n            End = end,\n            Marker = marker,\n            MaxItems = maxItems\n        }\n    );\n    return result.BillingRecords;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing BucketItem Model Class for S3 Object Data in Java\nDESCRIPTION: A model class that stores Amazon S3 bucket information including object key, owner, date, and size. This class is used to represent S3 objects in the application's data structure.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/video_analyzer_application/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npackage com.example.photo;\n\npublic class BucketItem {\n\nprivate String key;\nprivate String owner;\nprivate String date ;\nprivate String size ;\n\n\npublic void setSize(String size) {\n    this.size = size ;\n}\n\npublic String getSize() {\n    return this.size ;\n}\n\npublic void setDate(String date) {\n    this.date = date ;\n}\n\npublic String getDate() {\n    return this.date ;\n}\n\npublic void setOwner(String owner) {\n    this.owner = owner ;\n}\n\npublic String getOwner() {\n    return this.owner ;\n}\n\n\npublic void setKey(String key) {\n    this.key = key ;\n}\n\npublic String getKey() {\n    return this.key ;\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Spring Boot Application Class\nDESCRIPTION: Main Spring Boot application class that serves as the entry point for the web application. Uses the @SpringBootApplication annotation to enable auto-configuration.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_sns_async/README.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage com.spring.sns;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class SubApplication {\n\npublic static void main(String[] args) {\n   SpringApplication.run(SubApplication.class, args);\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Library for Windows in CMake\nDESCRIPTION: Sets up the Flutter library for Windows, including library paths, headers, and export settings. Defines the necessary components for Flutter integration in Windows applications.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/cognito_flutter_mobile_app/windows/flutter/CMakeLists.txt#2025-04-09_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# === Flutter Library ===\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Deleting a Lambda Function with SAP ABAP\nDESCRIPTION: This code snippet demonstrates how to delete a Lambda function using the AWS SDK for SAP ABAP. It's part of a collection of Lambda management actions.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/sap-abap/services/lambda/README.md#2025-04-09_snippet_2\n\nLANGUAGE: ABAP\nCODE:\n```\nzcl_aws1_lmd_actions.clas.abap#L102\n```\n\n----------------------------------------\n\nTITLE: Defining PopData Class for ETL Data Model in Java\nDESCRIPTION: This class represents the data model for the ETL use case. It includes properties for country name, country code, and population data from 2010 to 2019, along with getter and setter methods for each property.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/Creating_etl_workflow/README.md#2025-04-09_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npackage com.etl.example;\n\n// Stores the data model for this use case.\npublic class PopData {\n\n    private String countryName;\n    private String countryCode;\n    private String pop2010;\n    private String pop2011;\n    private String pop2012;\n    private String pop2013;\n    private String pop2014;\n    private String pop2015;\n    private String pop2016;\n    private String pop2017;\n    private String pop2018;\n    private String pop2019;\n\n\n    public void set2019(String num) {\n        this.pop2019 = num;\n    }\n\n    public String get2019() {\n        return this.pop2019;\n    }\n\n    public void set2018(String num) {\n        this.pop2018 = num;\n    }\n\n    public String get2018() {\n        return this.pop2018;\n    }\n\n\n    public void set2017(String num) {\n        this.pop2017 = num;\n    }\n\n    public String get2017() {\n        return this.pop2017;\n    }\n\n\n    public void set2016(String num) {\n        this.pop2016 = num;\n    }\n\n    public String get2016() {\n        return this.pop2016;\n    }\n\n    public void set2015(String num) {\n        this.pop2015 = num;\n    }\n\n    public String get2015() {\n        return this.pop2015;\n    }\n\n\n    public void set2014(String num) {\n        this.pop2014 = num;\n    }\n\n    public String get2014() {\n        return this.pop2014;\n    }\n\n\n    public void set2013(String num) {\n        this.pop2013 = num;\n    }\n\n    public String get2013() {\n        return this.pop2013;\n    }\n\n\n    public void set2012(String num) {\n        this.pop2012 = num;\n    }\n\n    public String get2012() {\n        return this.pop2012;\n    }\n\n    public void set2011(String num) {\n        this.pop2011 = num;\n    }\n\n    public String get2011() {\n        return this.pop2011;\n    }\n\n\n    public void set2010(String num) {\n        this.pop2010 = num;\n    }\n\n    public String get2010() {\n        return this.pop2010;\n    }\n\n    public void setCode(String code) {\n        this.countryCode = code;\n    }\n\n    public String getCode() {\n        return this.countryCode;\n    }\n\n    public void setName(String name) {\n        this.countryName = name;\n    }\n\n    public String getName() {\n        return this.countryName ;\n    }\n   }\n```\n\n----------------------------------------\n\nTITLE: Creating an IAM Access Key in C#\nDESCRIPTION: Shows how to create an IAM access key using the AWS SDK for .NET. This is part of the IAMWrapper class that provides various IAM operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/IAM/README.md#2025-04-09_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nActions/IAMWrapper.cs#L42\n```\n\n----------------------------------------\n\nTITLE: AWS SES Newsletter Manager Main Runner Implementation\nDESCRIPTION: Implements the main execution flow for the newsletter manager, orchestrating the preparation, subscriber gathering, newsletter sending, and monitoring steps.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/sesv2_weekly_mailer/content/62a_newsletter.rs.md#2025-04-09_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\npub async fn run(&mut self) -> Result<()> {\n    self.prepare_application().await?\n    self.gather_subscriber_emails().await?\n    self.send_coupon_newsletter().await?\n    self.monitor().await?\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Creating AWS CloudFormation Stack for Rekognition Example\nDESCRIPTION: Command to create AWS CloudFormation stack using setup.yaml template for setting up required AWS resources with IAM capabilities.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/rekognition/estimate-age-example/src/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\naws cloudformation create-stack --stack-name STACK_NAME --template-body file://setup.yaml --capabilities CAPABILITY_IAM\n```\n\n----------------------------------------\n\nTITLE: Deleting Item from DynamoDB Table with AWS CLI\nDESCRIPTION: This snippet shows how to delete an item from a DynamoDB table using the AWS CLI. The actual code is not provided in the given content, but it's referenced as being located in the dynamodb_operations.sh file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/aws-cli/bash-linux/dynamodb/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Code for DeleteItem operation\n# Located in dynamodb_operations.sh at line 525\n```\n\n----------------------------------------\n\nTITLE: Listing DynamoDB Tables in Java\nDESCRIPTION: This code snippet demonstrates how to list DynamoDB tables using the AWS SDK for Java 2.x. It's part of the 'Hello DynamoDB' example that shows how to get started with DynamoDB operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/dynamodb/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nsrc/main/java/com/example/dynamodb/ListTables.java#L6\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Detailed Logging\nDESCRIPTION: Command to run tests with detailed console output verbosity\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv4/README.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet test -l \"console;verbosity=detailed\"\n```\n\n----------------------------------------\n\nTITLE: Deleting IAM Access Key in Java\nDESCRIPTION: This snippet shows how to delete an IAM access key using the AWS SDK for Java 2.x.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/iam/README.md#2025-04-09_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\nsrc/main/java/com/example/iam/DeleteAccessKey.java#L6\n```\n\n----------------------------------------\n\nTITLE: Creating Photo Processing Page HTML Template\nDESCRIPTION: HTML template for the photo processing interface using Thymeleaf. Provides functionality to analyze photos and generate reports, with Bootstrap styling and progress indicators.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_photo_analyzer_app/README.md#2025-04-09_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n    <html xmlns:th=\"http://www.thymeleaf.org\">\n     <head>\n     <meta charset=\"utf-8\" />\n     <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n\n     <script th:src=\"|https://code.jquery.com/jquery-1.12.4.min.js|\"></script>\n     <script th:src=\"|https://code.jquery.com/ui/1.11.4/jquery-ui.min.js|\"></script>\n     <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js\"></script>\n     <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css\" rel=\"stylesheet\"/>\n     <script src=\"../public/js/message.js\" th:src=\"@{/js/message.js}\"></script>\n\n     <link rel=\"stylesheet\" href=\"../public/css/styles.css\" th:href=\"@{/css/styles.css}\" />\n     <link rel=\"icon\" href=\"../public/images/favicon.ico\" th:href=\"@{/images/favicon.ico}\" />\n\n     <title>AWS Photo Analyzer</title>\n\n     <script>\n        function myFunction() {\n            alert(\"The form was submitted\");\n        }\n      </script>\n      </head>\n\n      <body>\n      <header th:replace=\"layout :: site-header\"/>\n\n      <div class=\"container\">\n\n      <h2>AWS Photo Analyzer Application</h2>\n      <p>You can generate a report that analyzes the images in the S3 bucket. You can send the report to the following email address. </p>\n      <label for=\"email\">Email address:</label><br>\n      <input type=\"text\" id=\"email\" name=\"email\" value=\"\"><br>\n      <div>\n        <br>\n        <p>Click the following button to obtain a report</p>\n        <button onclick=\"ProcessImages()\">Analyze Photos</button>\n       </div>\n       <div  id =\"bar\"  class=\"progress\">\n        <div class=\"progress-bar progress-bar-striped active\" role=\"progressbar\"\n             aria-valuenow=\"40\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width:90%\">\n            Generating Report\n         </div>\n        </div>\n       <div>\n         <h3>Download a photo to your browser</h3>\n         <p>Specify the photo to download from an Amazon S3 bucket</p>\n         <label for=\"photo\">Photo Name:\"</label><br>\n         <input type=\"text\" id=\"photo\" name=\"photo\" value=\"\"><br>\n         <p>Click the following button to download a photo</p>\n         <button onclick=\"DownloadImage()\">Download Photo</button>\n      </div>\n     </div>\n     </body>\n    </html>\n```\n\n----------------------------------------\n\nTITLE: Amazon S3 Bucket Structure for Training Data\nDESCRIPTION: Shows the required folder structure for organizing normal and anomalous training/test images in an S3 bucket for Lookout for Vision.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/lookoutvision/README.md#2025-04-09_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ns3://amzn-s3-demo-bucket/<train or test>/\n    normal/\n    anomaly/\n```\n\n----------------------------------------\n\nTITLE: Describing Text Translation Job in Amazon Translate using .NET\nDESCRIPTION: Example showing how to describe a text translation job using DescribeTextTranslationJob API\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Translate/README.md#2025-04-09_snippet_0\n\nLANGUAGE: .NET\nCODE:\n```\nDescribeTextTranslationExample/DescribeTextTranslation.cs#L6\n```\n\n----------------------------------------\n\nTITLE: Finalizing CMake Configuration for AWS IoT SDK GTests\nDESCRIPTION: Completes the CMake configuration by setting up target sources, include directories, compile definitions, and linking libraries. It also adds the tests using GTest.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/iot/tests/CMakeLists.txt#2025-04-09_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(\n        ${CURRENT_TARGET}\n        PUBLIC\n        ${GTEST_SOURCE}\n        test_main.cpp\n        ${EXAMPLE_SERVICE_NAME}_gtests.cpp\n)\n\ntarget_include_directories(\n        ${CURRENT_TARGET}\n        PUBLIC\n        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/..>\n        $<INSTALL_INTERFACE:..>\n)\n\ntarget_compile_definitions(\n        ${CURRENT_TARGET}\n        PUBLIC\n        EXCLUDE_ACTION_MAIN\n        SRC_DIR=\"${CMAKE_CURRENT_SOURCE_DIR}\"\n)\n\ntarget_link_libraries(\n        ${CURRENT_TARGET}\n        GTest::gtest\n        ${AWSSDK_LINK_LIBRARIES}\n        ${AWSSDK_PLATFORM_DEPS}\n)\n\ninclude(GoogleTest)\n\ngtest_add_tests(\n        TARGET\n        ${CURRENT_TARGET}\n)\n```\n\n----------------------------------------\n\nTITLE: Building Hello HealthImaging C++ Project with CMake\nDESCRIPTION: These commands create a build directory, navigate into it, and build the project using CMake. The resulting executable is named 'hello_medical-imaging'.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/medical-imaging/hello_health_imaging/README.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmkdir build \ncd build\ncmake --build ..\n```\n\n----------------------------------------\n\nTITLE: Building the Lambda Function JAR File with Maven\nDESCRIPTION: Command to compile the project into a JAR file using Maven. This JAR file will serve as input for the SageMaker geospatial pipeline example.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/workflow_sagemaker_lambda/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmvn package\n```\n\n----------------------------------------\n\nTITLE: Publishing CloudWatch Metric Data in C#\nDESCRIPTION: Method for publishing metric data to CloudWatch. This is implemented in the CloudWatchWrapper class.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/CloudWatch/README.md#2025-04-09_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\nPutMetricData\n```\n\n----------------------------------------\n\nTITLE: IAM Role Assume Policy Configuration\nDESCRIPTION: JSON configuration for creating an IAM role that allows EC2 to assume the role for SSM management\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/resilient_service/SPECIFICATION.md#2025-04-09_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"Version\": \"2012-10-17\",\\n  \"Statement\": [{\\n      \"Effect\": \"Allow\",\\n      \"Principal\": {\"Service\": \"ec2.amazonaws.com\"},\\n      \"Action\": \"sts:AssumeRole\"}]\\n}\n```\n\n----------------------------------------\n\nTITLE: Describing EC2 Instances\nDESCRIPTION: Demonstrates how to retrieve information about existing EC2 instances. This provides details about instance state, configuration, networking, and more.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/EC2/README.md#2025-04-09_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\n// DescribeInstances\n```\n\n----------------------------------------\n\nTITLE: Lambda Scenario in Kotlin\nDESCRIPTION: Demonstrates a complete Lambda workflow including creating a function, invoking it, updating code, and cleaning up resources. This scenario covers multiple Lambda operations using the AWS SDK for Kotlin.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/lambda/README.md#2025-04-09_snippet_3\n\nLANGUAGE: Kotlin\nCODE:\n```\nsrc/main/kotlin/com/kotlin/lambda/LambdaScenario.kt\n```\n\n----------------------------------------\n\nTITLE: Running dotnet-format\nDESCRIPTION: Command to run dotnet-format in the solution or project directory\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv4/README.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndotnet format\n```\n\n----------------------------------------\n\nTITLE: Deleting a Kinesis Stream using AWS SDK for .NET\nDESCRIPTION: This code snippet illustrates how to delete an Amazon Kinesis stream using the AWS SDK for .NET. It references the DeleteStream method in the DeleteStream.cs file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Kinesis/README.md#2025-04-09_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nDeleteStream(DeleteStreamExample/DeleteStreamExample/DeleteStream.cs#L6)\n```\n\n----------------------------------------\n\nTITLE: WorkItem Data Model for Photo Analysis in Java\nDESCRIPTION: A simple POJO (Plain Old Java Object) class that represents an analyzed photo item with key, name, and confidence score properties. This class is used to store photo analysis results.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_photo_analyzer_async/README.md#2025-04-09_snippet_9\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.photo;\n\npublic class WorkItem {\n\n private String key;\n private String name;\n private String confidence ;\n\n public void setKey (String key) {\n    this.key = key;\n }\n\n public String getKey() {\n    return this.key;\n }\n\n public void setName (String name) {\n    this.name = name;\n }\n\n public String getName() {\n    return this.name;\n }\n\n public void setConfidence (String confidence) {\n    this.confidence = confidence;\n }\n\n public String getConfidence() {\n    return this.confidence;\n  }\n }\n```\n\n----------------------------------------\n\nTITLE: Running Text-to-Speech Example with AWS SDK for Rust\nDESCRIPTION: Command line usage for the telephone example that converts text to speech using Polly, stores audio in S3, and transcribes it back to text using Transcribe. Takes input filename, bucket name, job name and optional region parameters.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/cross_service/README.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd telephone\ncargo run -- -f FILENAME -b BUCKET -j JOB-NAME  [-r REGION] [-v]\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies for AWS SDK Examples\nDESCRIPTION: This snippet defines the minimum required versions of Python packages needed to run AWS SDK examples. It requires boto3 version 1.26.79 or higher for AWS API interactions and pytest version 7.2.1 or higher for testing functionality.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/lookoutvision/requirements.txt#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nboto3>=1.26.79\npytest>=7.2.1\n```\n\n----------------------------------------\n\nTITLE: Deleting an Email Identity with Amazon SES v2 API in C#\nDESCRIPTION: This snippet demonstrates how to delete an email identity using the Amazon SES v2 API. It's part of the SESv2Wrapper class and uses the AmazonSimpleEmailServiceV2Client.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/SESv2/README.md#2025-04-09_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\npublic async Task<bool> DeleteEmailIdentity(string emailAddress)\n{\n    var deleteEmailIdentityRequest = new DeleteEmailIdentityRequest\n    {\n        EmailIdentity = emailAddress\n    };\n\n    try\n    {\n        var response = await _sesv2Client.DeleteEmailIdentityAsync(deleteEmailIdentityRequest);\n        Console.WriteLine($\"EmailIdentityDeleted: {response.HttpStatusCode == System.Net.HttpStatusCode.OK}\");\n        return response.HttpStatusCode == System.Net.HttpStatusCode.OK;\n    }\n    catch (NotFoundException)\n    {\n        Console.WriteLine($\"Email identity {emailAddress} not found\");\n        return true;\n    }\n    catch (Exception ex)\n    {\n        Console.WriteLine($\"DeleteEmailIdentity failed: {ex.Message}\");\n        return false;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning the AWS Doc SDK Examples Repository\nDESCRIPTION: Command to clone the AWS documentation SDK examples repository from GitHub.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/resources/clients/react/elwing/src/default-plugins/get-started-plugin/GetStarted.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:awsdocs/aws-doc-sdk-examples.git\n```\n\n----------------------------------------\n\nTITLE: Scanning DynamoDB Table with C++\nDESCRIPTION: This code snippet shows how to scan a DynamoDB table using the AWS SDK for C++. It retrieves all items in the table or those that match specified conditions.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/dynamodb/README.md#2025-04-09_snippet_13\n\nLANGUAGE: C++\nCODE:\n```\nScan\n```\n\n----------------------------------------\n\nTITLE: Creating Home Page with Thymeleaf for Amazon SNS Application\nDESCRIPTION: HTML template for the application's home page using Thymeleaf templating engine. It includes Bootstrap for styling and provides instructions on how to use the SNS example application features.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_sns_sample_app/README.md#2025-04-09_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n    <html xmlns:th=\"https://www.thymeleaf.org\">\n    <head>\n     <meta charset=\"utf-8\" />\n     <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n     <script th:src=\"|https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js|\"></script>\n     <link rel=\"stylesheet\" th:href=\"|https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css|\"/>\n     <link rel=\"stylesheet\" href=\"../public/css/styles.css\" th:href=\"@{/css/styles.css}\" />\n     <link rel=\"icon\" href=\"../public/img/favicon.ico\" th:href=\"@{/img/favicon.ico}\" />\n\n    <title>AWS job posting example</title>\n    </head> \n\n     <body>\n     <header th:replace=\"layout :: site-header\"/>\n     <div class=\"container\">\n\n     <h3>Welcome to the Amazon Simple Notification Service example app</h3>\n     <p>Now is: <b th:text=\"${execInfo.now.time}\"></b></p>\n     <p>The Amazon Simple Notification Service example uses multiple AWS services and the Java V2 API. Perform the following steps:<p>\n     <ol>\n        <li>You can subscribe to an SNS topic by choosing the <i>Manage Subscriptions</i> menu item.</li>\n        <li>Enter a valid email address and then choose <i>Subscribe</i>.</li>\n        <li>The sample application subscribes to the endpoint by using the SNS Java API V2.</li>\n        <li>You can view all the email addresses that have subscribed by choosing the <i>List Subscriptions</i> menu item.</li>\n        <li>You can unSubscribe by entering the email address and choosing <i>UnSubscribe</i>. </li>\n        <li>You can publish a message by entering a message and choosing <i>Publish</i>.\n        <li>All subscribed email recipients will receive the published message.</li>\n       </ol>\n      <div>\n     </body>\n    </html>\n```\n\n----------------------------------------\n\nTITLE: Deleting CloudWatch Dashboards in C#\nDESCRIPTION: Method for deleting CloudWatch dashboards. This is implemented in the CloudWatchWrapper class.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/CloudWatch/README.md#2025-04-09_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nDeleteDashboards\n```\n\n----------------------------------------\n\nTITLE: SSM Server Restart Command\nDESCRIPTION: Python code showing how to use SSM to send a command to restart the web server on an EC2 instance\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/resilient_service/SPECIFICATION.md#2025-04-09_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nself.ssm_client.send_command(\\n    InstanceIds=[instance_id], \\n    DocumentName='AWS-RunShellScript',\\n    Parameters={'commands': ['cd / && sudo python3 server.py 80']})\n```\n\n----------------------------------------\n\nTITLE: Implementing S3Service Class for AWS S3 Operations in Java\nDESCRIPTION: A comprehensive S3Service class that provides methods for interacting with Amazon S3 buckets. It includes functionality for listing bucket objects, retrieving key names, and converting bucket data to XML format. The class uses EnvironmentVariableCredentialsProvider for AWS authentication and implements secure XML processing.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/video_analyzer_application/README.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.video;\n\nimport org.springframework.stereotype.Component;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\nimport software.amazon.awssdk.auth.credentials.EnvironmentVariableCredentialsProvider;\nimport software.amazon.awssdk.regions.Region;\nimport software.amazon.awssdk.services.s3.S3Client;\nimport software.amazon.awssdk.services.s3.model.*;\nimport javax.xml.XMLConstants;\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.ParserConfigurationException;\nimport javax.xml.transform.Transformer;\nimport javax.xml.transform.TransformerConfigurationException;\nimport javax.xml.transform.TransformerException;\nimport javax.xml.transform.TransformerFactory;\nimport javax.xml.transform.dom.DOMSource;\nimport javax.xml.transform.stream.StreamResult;\nimport java.io.StringWriter;\nimport java.time.Instant;\nimport java.util.ArrayList;\nimport java.util.List;\n\n@Component\npublic class S3Service {\n    private  S3Client s3 ;\n    private S3Client getClient() {\n        Region region = Region.US_EAST_1;\n        return S3Client.builder()\n            .credentialsProvider(EnvironmentVariableCredentialsProvider.create())\n            .region(region)\n            .build();\n    }\n\n    public String ListAllObjects(String bucketName) {\n        s3 = getClient();\n        long sizeLg;\n        Instant DateIn;\n        BucketItem myItem ;\n        List<BucketItem> bucketItems = new ArrayList<>();\n        try {\n            ListObjectsRequest listObjects = ListObjectsRequest\n                    .builder()\n                    .bucket(bucketName)\n                    .build();\n\n            ListObjectsResponse res = s3.listObjects(listObjects);\n            List<S3Object> objects = res.contents();\n            for (S3Object myValue : objects) {\n                myItem = new BucketItem();\n                myItem.setKey(myValue.key());\n                myItem.setOwner(myValue.owner().displayName());\n                sizeLg = myValue.size() / 1024;\n                myItem.setSize(String.valueOf(sizeLg));\n                DateIn = myValue.lastModified();\n                myItem.setDate(String.valueOf(DateIn));\n\n                // Push the items to the list\n                bucketItems.add(myItem);\n            }\n            return convertToString(toXml(bucketItems));\n\n        } catch (S3Exception e) {\n            System.err.println(e.awsErrorDetails().errorMessage());\n            System.exit(1);\n        }\n        return null ;\n    }\n\n    public String getKeyName(String bucketName) {\n        s3 = getClient();\n        String keyName=\"\";\n        try {\n            ListObjectsRequest listObjects = ListObjectsRequest.builder()\n                .bucket(bucketName)\n                .build();\n\n            ListObjectsResponse res = s3.listObjects(listObjects);\n            List<S3Object> objects = res.contents();\n            for (S3Object myValue : objects) {\n                keyName = myValue.key();\n            }\n            return keyName;\n\n        } catch (S3Exception e) {\n            System.err.println(e.awsErrorDetails().errorMessage());\n            System.exit(1);\n        }\n        return null ;\n    }\n\n    // Convert Bucket item data into XML to pass back to the view.\n    private Document toXml(List<BucketItem> itemList) {\n        try {\n            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n            factory.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n            DocumentBuilder builder = factory.newDocumentBuilder();\n            Document doc = builder.newDocument();\n\n            // Start building the XML.\n            Element root = doc.createElement( \"Items\" );\n            doc.appendChild( root );\n\n            // Iterate through the collection.\n            for (BucketItem myItem : itemList) {\n                // Get the WorkItem object from the collection.\n                Element item = doc.createElement(\"Item\");\n                root.appendChild(item);\n\n                // Set Key.\n                Element id = doc.createElement(\"Key\");\n                id.appendChild(doc.createTextNode(myItem.getKey()));\n                item.appendChild(id);\n\n                // Set Owner.\n                Element name = doc.createElement(\"Owner\");\n                name.appendChild(doc.createTextNode(myItem.getOwner()));\n                item.appendChild(name);\n\n                // Set Date.\n                Element date = doc.createElement(\"Date\");\n                date.appendChild(doc.createTextNode(myItem.getDate()));\n                item.appendChild(date);\n\n                // Set Size.\n                Element desc = doc.createElement(\"Size\");\n                desc.appendChild(doc.createTextNode(myItem.getSize()));\n                item.appendChild(desc);\n            }\n\n            return doc;\n        } catch(ParserConfigurationException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n\n    private static String convertToString(Document xml) {\n        try {\n            TransformerFactory transformerFactory = getSecureTransformerFactory();\n            Transformer transformer = transformerFactory.newTransformer();\n            StreamResult result = new StreamResult(new StringWriter());\n            DOMSource source = new DOMSource(xml);\n            transformer.transform(source, result);\n            return result.getWriter().toString();\n\n        } catch(TransformerException ex) {\n            ex.printStackTrace();\n        }\n        return null;\n    }\n\n    private static TransformerFactory getSecureTransformerFactory() {\n        TransformerFactory transformerFactory = TransformerFactory.newInstance();\n        try {\n            transformerFactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\n        } catch (TransformerConfigurationException e) {\n            e.printStackTrace();\n        }\n        return transformerFactory;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Hello Amazon ECS Example using .NET\nDESCRIPTION: A simple example demonstrating how to initialize the ECS client and list all clusters in the account. This serves as a starter example for working with Amazon ECS.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/ECS/README.md#2025-04-09_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nListClusters\n```\n\n----------------------------------------\n\nTITLE: Initializing Support Client in Java\nDESCRIPTION: Creates a Support client using the AWS SDK for Java 2.x to interact with AWS Support services.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/support/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nSupportClient supportClient = SupportClient.builder()\n    .region(Region.US_WEST_2)\n    .credentialsProvider(EnvironmentVariableCredentialsProvider.create())\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Running Single Action Example\nDESCRIPTION: Command to execute a single action example file from the actions directory\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/cognito-identity-provider/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode ./actions/<fileName>\n```\n\n----------------------------------------\n\nTITLE: Describing Users using Amazon WorkDocs SDK for Ruby\nDESCRIPTION: This code snippet shows how to describe users in Amazon WorkDocs using the AWS SDK for Ruby. It utilizes the DescribeUsers method of the WorkDocs client to retrieve user information.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/ruby/example_code/workdocs/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\ndef describe_users(workdocs_client, organization_id)\n  resp = workdocs_client.describe_users(\n    organization_id: organization_id\n  )\n  resp.users.each do |user|\n    puts \"First name:     #{user.given_name}\"\n    puts \"Last name:      #{user.surname}\"\n    puts \"Email:          #{user.email_address}\"\n    puts \"Root folder ID: #{user.root_folder_id}\"\n    puts\n  end\nrescue StandardError => e\n  puts \"Error describing users: #{e.message}\"\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Lambda Document Handler for Excel Processing\nDESCRIPTION: AWS Lambda handler class that retrieves Excel documents from S3 and initiates the ETL process. It accepts bucket name and object name as input parameters and returns XML data.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/Creating_etl_workflow/README.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage com.etl.example;\n\nimport com.amazonaws.services.lambda.runtime.Context;\nimport com.amazonaws.services.lambda.runtime.LambdaLogger;\nimport jxl.read.biff.BiffException;\nimport java.io.IOException;\nimport java.util.Map;\n\npublic class DocumentHandler {\n\n public String handleRequest(Map<String,String> event, Context context) throws IOException, BiffException {\n\n    LambdaLogger logger = context.getLogger();\n    logger.log(\"Getting excel doc from the Amazon S3 bucket\");\n\n    // Get the Amazon S3 bucket name and MS Excel file name\n    String bucketName = event.get(\"bucketname\");\n    String object = event.get(\"objectname\");\n\n    // Get the XML that contains the Pop data\n    ExcelService excel = new ExcelService();\n    String xml = excel.getData(bucketName, object);\n    return xml;\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing PDF and OCR Tools with Homebrew\nDESCRIPTION: Command line instructions for installing poppler (PDF manipulation tools) and tesseract (optical character recognition engine) using the Homebrew package manager on macOS.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/bedrock-runtime/models/anthropic_claude/scenarios/claude3_chatbot_demo/requirements.txt#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# brew install poppler\n# brew install tesseract\n```\n\n----------------------------------------\n\nTITLE: Detecting Document Text with Amazon Textract in SAP ABAP\nDESCRIPTION: Shows how to use the DetectDocumentText function of Amazon Textract to detect text in documents. This function is implemented in the zcl_aws1_tex_actions class.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/sap-abap/services/textract/README.md#2025-04-09_snippet_1\n\nLANGUAGE: ABAP\nCODE:\n```\nzcl_aws1_tex_actions.clas.abap#L136\n```\n\n----------------------------------------\n\nTITLE: Checking Ruby Version\nDESCRIPTION: Command to verify the installed Ruby version in your environment. This helps ensure compatibility with the code examples which are tested with Ruby 3.1.2.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/ruby/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nruby -v\n```\n\n----------------------------------------\n\nTITLE: Running Resilient Service Example in Python\nDESCRIPTION: Command to run an example that demonstrates building a resilient web service using EC2 Auto Scaling, Elastic Load Balancing, and DynamoDB for recommendations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/iam/README.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython ../../cross_service/resilient_service/runner.py\n```\n\n----------------------------------------\n\nTITLE: Creating Video Player with JavaScript for AWS Video Streaming App\nDESCRIPTION: The video.html file combines a video player with a list of available videos retrieved via AJAX. It includes JavaScript functions to load video tags from the backend and update the video source when a title is clicked.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/create_spring_stream_app/README.md#2025-04-09_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html xmlns:th=\"http://www.thymeleaf.org\">\n<head lang=\"en\">\n<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\" integrity=\"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\" crossorigin=\"anonymous\">\n<script th:src=\"|https://code.jquery.com/jquery-1.12.4.min.js|\"></script>\n<link rel=\"stylesheet\" href=\"../public/css/styles.css\" th:href=\"@{/css/styles.css}\" />\n<link rel=\"icon\" href=\"../public/images/favicon.ico\" th:href=\"@{/images/favicon.ico}\" />\n<title>Spring Framework</title>\n\n<script>\n    $(function() {\n        getItems();\n    } );\n\n    // Gets the MP4 tags to set in the scroll list.\n    function getItems() {\n\n        var xhr = new XMLHttpRequest();\n        xhr.addEventListener(\"load\", loadTags, false);\n        xhr.open(\"GET\", \"../items\", true);\n        xhr.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");//necessary\n        xhr.send();\n    }\n\n    function loadTags(event) {\n\n        var xml = event.target.responseText;\n        $(xml).find('Tag').each(function () {\n\n            var $field = $(this);\n            var name = $field.find('Name').text();\n            var description = $field.find('Description').text();\n            var vv = \"Prime video\"\n\n            // Append this data to the main list.\n            $('.list-group').append(\"<className='list-group-item list-group-item-action flex-column align-items-start'>\");\n            $('.list-group').append(\"<h5 onMouseOver=\\\"this.style.cursor='pointer'\\\" onclick=\\\"addVideo('\" +name+\"')\\\" class='mb-1'>\"+name+\"</li>\");\n            $('.list-group').append(\"<p class='mb-1'>\"+description+\"</p>\");\n            $('.list-group').append(\"<small class='text-muted'>\"+vv+\"</small>\");\n            $('.list-group').append(\"<br class='row'>\");\n        });\n    }\n\n    function addVideo(myVid) {\n        var myVideo = document.getElementById(\"video1\");\n        myVideo.src = \"/\"+myVid+\"/stream\";\n    }\n  </script>\n  </head>\n  <body>\n  <header th:replace=\"layout :: site-header\"></header>\n  <div class=\"container\">\n  <h3>Video Stream over HTTP App</h3>\n  <p>This example reads a MP4 video located in an Amazon S3 bucket and streams over HTTP</p>\n  <div class=\"row\">\n    <div class=\"col\">\n        <video id=\"video1\" width=\"750\" height=\"440\" controls>\n            <source type=\"video/mp4\">\n\n            Your browser does not support HTML video.\n        </video>\n    </div>\n    <div class=\"col\">\n        <div class=\"list-group\">\n        </div>\n    </div>\n  </div>\n</div>\n\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for FSA Deployment in Windows PowerShell\nDESCRIPTION: Sets the required environment variables for deploying the FSA application using Windows PowerShell. These variables include the FSA name, email, and language.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/applications/feedback_sentiment_analyzer/README.md#2025-04-09_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n$Env:FSA_NAME = ana\n$Env:FSA_EMAIL = ana@example.com\n$Env:FSA_LANG = ruby\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for AWS Aurora SDK Examples\nDESCRIPTION: Comprehensive CMake configuration that sets up build requirements for AWS Aurora SDK examples. Handles platform-specific settings, AWS SDK dependencies, and builds example executables with proper linking.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/aurora/CMakeLists.txt#2025-04-09_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\n\n# Set the minimum required version of CMake for this project.\ncmake_minimum_required(VERSION 3.13)\n\nset(SERVICE_NAME aurora)\nset(SERVICE_COMPONENTS rds)\n\n# Set this project's name.\nproject(\"${SERVICE_NAME}-examples\")\n\n# Set the location of where Windows can find the installed libraries of the SDK.\nif(MSVC)\n    string(REPLACE \";\" \"/aws-cpp-sdk-all;\" SYSTEM_MODULE_PATH \"${CMAKE_SYSTEM_PREFIX_PATH}/aws-cpp-sdk-all\")\n    list(APPEND CMAKE_PREFIX_PATH ${SYSTEM_MODULE_PATH})\nendif()\n\n# Set the C++ standard to use to build this target.\nset(CMAKE_CXX_STANDARD 11)\n\n# Enable CTest for testing these code examples.\nif(BUILD_TESTS)\n    include(CTest)\nendif()\n\n# Build shared libraries by default.\nif(NOT DEFINED BUILD_SHARED_LIBS)\n    set(BUILD_SHARED_LIBS ON)\nendif()\n\n# Find the AWS SDK for C++ package.\nfind_package(AWSSDK REQUIRED COMPONENTS ${SERVICE_COMPONENTS})\n\nif (WINDOWS_BUILD AND AWSSDK_INSTALL_AS_SHARED_LIBS)\n    # Copy relevant AWS SDK for C++ libraries into the current binary directory for running and debugging.\n\n    # set(BIN_SUB_DIR \"/Debug\") # If you are building from the command line, you may need to uncomment this\n    # and set the proper subdirectory to the executables' location.\n\n    AWSSDK_CPY_DYN_LIBS(SERVICE_COMPONENTS \"\" ${CMAKE_CURRENT_BINARY_DIR}${BIN_SUB_DIR})\nendif ()\n\n# AWSDOC_SOURCE can be defined in the command line to limit the files in a build. For example,\n# you can limit files to one action.\nif(NOT DEFINED AWSDOC_SOURCE)\n    file(GLOB AWSDOC_SOURCE\n        \"*.cpp\"\n    )\nendif()\n\n# Check whether the target system is Windows, including Win64.\nif(WIN32)\n    # Check whether the compiler is some version of Microsoft Visual C++, or another compiler simulating C++.\n    if(MSVC)\n         source_group(\"Source Files\" FILES ${AWSDOC_SOURCE})\n    endif(MSVC)\nendif()\n\nforeach(file ${AWSDOC_SOURCE})\n    get_filename_component(EXAMPLE ${file} NAME_WE)\n\n    # Build the code example executables.\n    set(EXAMPLE_EXE run_${EXAMPLE})\n\n    add_executable(${EXAMPLE_EXE} ${file})\n\n    target_link_libraries(${EXAMPLE_EXE} ${AWSSDK_LINK_LIBRARIES}\n            ${AWSSDK_PLATFORM_DEPS})\n\nendforeach()\n\n\nif(BUILD_TESTS)\n    add_subdirectory(tests)\nendif()\n```\n\n----------------------------------------\n\nTITLE: SendEmail Response Syntax\nDESCRIPTION: HTTP response format for successful email sending through Amazon SES API v2. Returns a message ID for tracking the sent email.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/sesv2_weekly_mailer/content/10_SendEmail.md#2025-04-09_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-type: application/json\n\n{\n   \"MessageId\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Rule Names by Target in EventBridge using AWS SDK for .NET\nDESCRIPTION: Method to list all rule names associated with a specific target in EventBridge. This helps identify which rules are configured to use a particular target.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/EventBridge/README.md#2025-04-09_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nListRuleNamesByTarget\n```\n\n----------------------------------------\n\nTITLE: Describing DB Parameter Groups in Amazon RDS using C++\nDESCRIPTION: This code snippet references the DescribeDBParameterGroups action at line 256 in the getting_started_with_db_instances.cpp file, which demonstrates how to list and describe DB parameter groups using the AWS SDK for C++.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/rds/README.md#2025-04-09_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Maven Package Command\nDESCRIPTION: Command to package the Java project into a JAR file with dependencies using Maven. The maven-shade-plugin must be configured in the POM file to include all required dependencies.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_lambda_ppe/README.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmvn package\n```\n\n----------------------------------------\n\nTITLE: Running Single AWS CloudWatch Actions\nDESCRIPTION: Command to execute individual CloudWatch action scripts from the actions directory.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/cloudwatch/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode ./actions/<fileName>\n```\n\n----------------------------------------\n\nTITLE: Implementing SQS Message Service with Comprehend Integration in Java\nDESCRIPTION: A Java class that handles sending and receiving messages using Amazon SQS with language detection via Amazon Comprehend. It includes methods for queue management, message processing, and language detection.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_message_application/README.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.sqs;\n\nimport org.springframework.stereotype.Component;\nimport software.amazon.awssdk.auth.credentials.EnvironmentVariableCredentialsProvider;\nimport software.amazon.awssdk.regions.Region;\nimport software.amazon.awssdk.services.comprehend.ComprehendClient;\nimport software.amazon.awssdk.services.comprehend.model.DetectDominantLanguageRequest;\nimport software.amazon.awssdk.services.comprehend.model.DetectDominantLanguageResponse;\nimport software.amazon.awssdk.services.comprehend.model.DominantLanguage;\nimport software.amazon.awssdk.services.sqs.SqsClient;\nimport software.amazon.awssdk.services.sqs.model.GetQueueUrlRequest;\nimport software.amazon.awssdk.services.sqs.model.MessageAttributeValue;\nimport software.amazon.awssdk.services.sqs.model.ReceiveMessageRequest;\nimport software.amazon.awssdk.services.sqs.model.Message;\nimport software.amazon.awssdk.services.sqs.model.PurgeQueueRequest;\nimport software.amazon.awssdk.services.sqs.model.SendMessageRequest;\nimport software.amazon.awssdk.services.sqs.model.SqsException;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n@Component\npublic class SendReceiveMessages {\n\n    private final String queueName = \"Message.fifo\";\n\n    private SqsClient getClient() {\n        return SqsClient.builder()\n            .region(Region.US_WEST_2)\n            .credentialsProvider(ProfileCredentialsProvider.create())\n            .build();\n    }\n\n    // Get a Comprehend client.\n    private ComprehendClient getComClient() {\n\n        return ComprehendClient.builder()\n            .region(Region.US_WEST_2)\n            .credentialsProvider(ProfileCredentialsProvider.create())\n            .build();\n    }\n\n    public void purgeMyQueue() {\n        SqsClient sqsClient = getClient();\n        GetQueueUrlRequest getQueueRequest = GetQueueUrlRequest.builder()\n            .queueName(queueName)\n            .build();\n\n        PurgeQueueRequest queueRequest = PurgeQueueRequest.builder()\n            .queueUrl(sqsClient.getQueueUrl(getQueueRequest).queueUrl())\n            .build();\n\n        sqsClient.purgeQueue(queueRequest);\n    }\n\n    public List<MessageData> getMessages() {\n        List<String> attr = new ArrayList<>();\n        attr.add(\"Name\");\n        SqsClient sqsClient = getClient();\n\n        try {\n            GetQueueUrlRequest getQueueRequest = GetQueueUrlRequest.builder()\n                .queueName(queueName)\n                .build();\n\n            String queueUrl = sqsClient.getQueueUrl(getQueueRequest).queueUrl();\n            ReceiveMessageRequest receiveRequest = ReceiveMessageRequest.builder()\n                .queueUrl(queueUrl)\n                .maxNumberOfMessages(10)\n                .waitTimeSeconds(20)\n                .messageAttributeNames(attr)\n                .build();\n\n            List<Message> messages = sqsClient.receiveMessage(receiveRequest).messages();\n            MessageData myMessage;\n            List<MessageData> allMessages = new ArrayList<>();\n\n            // Push the messages to a list.\n            for (Message m : messages) {\n                myMessage=new MessageData();\n                myMessage.setBody(m.body());\n                myMessage.setId(m.messageId());\n\n                Map<String, MessageAttributeValue> map = m.messageAttributes();\n                MessageAttributeValue val= map.get(\"Name\");\n                myMessage.setName(val.stringValue());\n                allMessages.add(myMessage);\n            }\n\n            return allMessages;\n\n        } catch (SqsException e) {\n            e.getStackTrace();\n        }\n        return null;\n    }\n\n    public void processMessage(MessageData msg) {\n        SqsClient sqsClient = getClient();\n\n        try {\n            MessageAttributeValue attributeValue = MessageAttributeValue.builder()\n                .stringValue(msg.getName())\n                .dataType(\"String\")\n                .build();\n\n            Map<String, MessageAttributeValue> myMap = new HashMap<>();\n            myMap.put(\"Name\", attributeValue);\n            GetQueueUrlRequest getQueueRequest = GetQueueUrlRequest.builder()\n                .queueName(queueName)\n                .build();\n\n            // We will get the language code for the incoming message.\n            ComprehendClient comClient =  getComClient();\n\n            // Specify the Language code of the incoming message.\n            String lanCode = \"\" ;\n            DetectDominantLanguageRequest request = DetectDominantLanguageRequest.builder()\n                .text(msg.getBody())\n                .build();\n\n            DetectDominantLanguageResponse resp = comClient.detectDominantLanguage(request);\n            List<DominantLanguage> allLanList = resp.languages();\n            for (DominantLanguage lang : allLanList) {\n                System.out.println(\"Language is \" + lang.languageCode());\n                lanCode = lang.languageCode();\n            }\n\n            String queueUrl = sqsClient.getQueueUrl(getQueueRequest).queueUrl();\n            SendMessageRequest sendMsgRequest = SendMessageRequest.builder()\n                .queueUrl(queueUrl)\n                .messageAttributes(myMap)\n                .messageGroupId(\"GroupA_\"+lanCode)\n                .messageDeduplicationId(msg.getId())\n                .messageBody(msg.getBody())\n                .build();\n\n            sqsClient.sendMessage(sendMsgRequest);\n\n        } catch (SqsException e) {\n            e.getStackTrace();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Face Detection Example with AWS SDK for Rust\nDESCRIPTION: Command line usage for the face detection example that uploads an image to S3 and uses Rekognition to analyze faces. Takes bucket name, filename and optional region parameters.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/cross_service/README.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd detect_faces;\ncargo run -- -b BUCKET -f FILENAME [-r REGION] [-v]\n```\n\n----------------------------------------\n\nTITLE: Laravel Environment Configuration\nDESCRIPTION: YAML configuration for Laravel environment file including Aurora database connection settings and email configuration.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/php/cross_service/aurora_item_tracker/README.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nRESOURCE_ARN=*ResourceArn*\nSECRET_ARN=*SecretArn*\nDATABASE=auroraappdb\nEMAIL=your@email\n```\n\n----------------------------------------\n\nTITLE: Deleting SageMaker Endpoint using AWS SDK for SAP ABAP\nDESCRIPTION: This code snippet shows how to delete a SageMaker endpoint using the AWS SDK for SAP ABAP. It references a method in the zcl_aws1_sgm_actions class.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/sap-abap/services/sagemaker/README.md#2025-04-09_snippet_4\n\nLANGUAGE: ABAP\nCODE:\n```\nzcl_aws1_sgm_actions.clas.abap#L399\n```\n\n----------------------------------------\n\nTITLE: Running PHP Code Standards Checker (PHPCS)\nDESCRIPTION: Command to run the PHP Code Sniffer linter to check code formatting and styling against project standards.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/php/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/phpcs --standard=../.github/linters/phpcs.xml --extensions=php --ignore=vendor /path/to/lint\n```\n\n----------------------------------------\n\nTITLE: Publishing CloudWatch Metric Data in Kotlin\nDESCRIPTION: This code snippet demonstrates how to publish metric data to CloudWatch using the AWS SDK for Kotlin. It's part of a comprehensive CloudWatch scenario that shows various CloudWatch operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/cloudwatch/README.md#2025-04-09_snippet_18\n\nLANGUAGE: Kotlin\nCODE:\n```\nPutMetricData\n```\n\n----------------------------------------\n\nTITLE: Failed Maven Test Output\nDESCRIPTION: Example of Maven test execution output when tests fail due to incorrect configuration\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/guardduty/README.md#2025-04-09_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n[INFO]\n[INFO] --------------------------------------\n[INFO] BUILD FAILURE\n[INFO] --------------------------------------\n[INFO] Total time:  19.038 s\n[INFO] Finished at: 2020-02-10T14:41:51-05:00\n[INFO] ---------------------------------------\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.22.1:test (default-test) on project GuarddutyTest:  There are test failures.\n[ERROR];\n```\n\n----------------------------------------\n\nTITLE: Deleting Systems Manager Document with JavaScript SDK v3\nDESCRIPTION: This code snippet demonstrates how to delete a Systems Manager document using the DeleteDocument operation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/ssm/README.md#2025-04-09_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// DeleteDocument\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for AWS ACM Examples\nDESCRIPTION: Configures the CMake build system for AWS ACM service examples. Sets up project parameters, finds AWS SDK dependencies, configures Windows-specific settings, and creates build targets for all example files. Includes handling of shared libraries and platform-specific requirements.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/acm/CMakeLists.txt#2025-04-09_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# Set the minimum required version of CMake for this project.\ncmake_minimum_required(VERSION 3.13)\n\nset(SERVICE_NAME acm)\nset(SERVICE_COMPONENTS acm)\n\n# Set this project's name.\nproject(\"${SERVICE_NAME}-examples\")\n\n# Build shared libraries by default.\nset(BUILD_SHARED_LIBS ON)\n\n# Set the C++ standard to use to build this target.\nset(CMAKE_CXX_STANDARD 11)\n\n# Use the MSVC variable to determine if this is a Windows build.\nset(WINDOWS_BUILD ${MSVC})\n\n# Set the location of where Windows can find the installed libraries of the SDK.\nif (WINDOWS_BUILD)\n    string(REPLACE \";\" \"/aws-cpp-sdk-all;\" SYSTEM_MODULE_PATH \"${CMAKE_SYSTEM_PREFIX_PATH}/aws-cpp-sdk-all\")\n    list(APPEND CMAKE_PREFIX_PATH ${SYSTEM_MODULE_PATH})\nendif ()\n\n# Find the AWS SDK for C++ package.\nfind_package(AWSSDK REQUIRED COMPONENTS ${SERVICE_COMPONENTS})\n\nif (WINDOWS_BUILD AND AWSSDK_INSTALL_AS_SHARED_LIBS)\n    # Copy relevant AWS SDK for C++ libraries into the current binary directory for running and debugging.\n\n    # set(BIN_SUB_DIR \"/Debug\") # If you are building from the command line, you may need to uncomment this\n    # and set the proper subdirectory to the executables' location.\n\n    AWSSDK_CPY_DYN_LIBS(SERVICE_COMPONENTS \"\" ${CMAKE_CURRENT_BINARY_DIR}${BIN_SUB_DIR})\nendif ()\n\n# AWSDOC_SOURCE can be defined in the command line to limit the files in a build. For example,\n# you can limit files to one action.\nif (NOT DEFINED AWSDOC_SOURCE)\n    file(GLOB AWSDOC_SOURCE\n            \"*.cpp\"\n    )\nendif ()\n\nforeach (file ${AWSDOC_SOURCE})\n    get_filename_component(EXAMPLE ${file} NAME_WE)\n\n    # Build the code example executables.\n    set(EXAMPLE_EXE run_${EXAMPLE})\n\n    add_executable(${EXAMPLE_EXE} ${file})\n\n    target_link_libraries(${EXAMPLE_EXE} ${AWSSDK_LINK_LIBRARIES}\n            ${AWSSDK_PLATFORM_DEPS})\n\nendforeach ()\n\n\nif (BUILD_TESTS)\n    add_subdirectory(tests)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Running the .NET Example from Command Line\nDESCRIPTION: Command to run the compiled .NET example from the command line. Navigate to the folder containing the .sln file and execute this command.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/cross-service/ResilientService/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet run\n```\n\n----------------------------------------\n\nTITLE: Describing Auto Scaling Groups and Instances in C#\nDESCRIPTION: This code snippet demonstrates how to describe both Auto Scaling groups and instances using the AWS SDK for .NET. It provides detailed information about the current state of Auto Scaling resources.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/AutoScaling/README.md#2025-04-09_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nDescribeAutoScalingGroups\nDescribeAutoScalingInstances\n```\n\n----------------------------------------\n\nTITLE: Listing Text Translation Jobs in Amazon Translate using .NET\nDESCRIPTION: Example demonstrating how to list text translation jobs using ListTextTranslationJobs API\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Translate/README.md#2025-04-09_snippet_1\n\nLANGUAGE: .NET\nCODE:\n```\nListTranslationJobsExample/ListTranslationJobs.cs#L6\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Packages\nDESCRIPTION: Command to install the required Python packages using pip in a virtual environment\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/medical-imaging/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Disabling KMS Key with Java SDK\nDESCRIPTION: This code snippet shows how to disable a KMS key using the AWS SDK for Java 2.x. It uses the DisableKey operation to prevent the specified KMS key from being used in cryptographic operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/kms/README.md#2025-04-09_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\nKMSActions.java#L642\n```\n\n----------------------------------------\n\nTITLE: PrepareDowload Lambda Function Input JSON Structure\nDESCRIPTION: JSON input structure for the PrepareDowload Lambda function that retrieves images matching specified labels. It contains an array of label names to search for.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/pam_source_files/README.md#2025-04-09_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\"labels\": [\"Mountain\", \"Lake\"]}\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for AWS SDK RDS Example in C++\nDESCRIPTION: This CMake configuration sets up a project for building an AWS SDK for C++ example that uses Amazon RDS. It configures the project name, C++ standard, finds the AWS SDK, and sets up linking for both Windows and non-Windows environments.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/rds/hello_rds/CMakeLists.txt#2025-04-09_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Set the minimum required version of CMake for this project.\ncmake_minimum_required(VERSION 3.13)\n\n# Set the AWS service components used by this project.\nset(SERVICE_COMPONENTS rds)\n\n# Set this project's name.\nproject(\"hello_rds\")\n\n# Set the C++ standard to use to build this target.\n# At least C++ 11 is required for the AWS SDK for C++.\nset(CMAKE_CXX_STANDARD 11)\n\n# Use the MSVC variable to determine if this is a Windows build.\nset(WINDOWS_BUILD ${MSVC})\n\nif (WINDOWS_BUILD) # Set the location where CMake can find the installed libraries for the AWS SDK.\n    string(REPLACE \";\" \"/aws-cpp-sdk-all;\" SYSTEM_MODULE_PATH \"${CMAKE_SYSTEM_PREFIX_PATH}/aws-cpp-sdk-all\")\n    list(APPEND CMAKE_PREFIX_PATH ${SYSTEM_MODULE_PATH})\nendif ()\n\n# Find the AWS SDK for C++ package.\nfind_package(AWSSDK REQUIRED COMPONENTS ${SERVICE_COMPONENTS})\n\nif (WINDOWS_BUILD AND AWSSDK_INSTALL_AS_SHARED_LIBS)\n     # Copy relevant AWS SDK for C++ libraries into the current binary directory for running and debugging.\n\n     # set(BIN_SUB_DIR \"/Debug\") # If you are building from the command line, you may need to uncomment this \n                                    # and set the proper subdirectory to the executables' location.\n\n     AWSSDK_CPY_DYN_LIBS(SERVICE_COMPONENTS \"\" ${CMAKE_CURRENT_BINARY_DIR}${BIN_SUB_DIR})\nendif ()\n\nadd_executable(${PROJECT_NAME}\n        hello_rds.cpp)\n\ntarget_link_libraries(${PROJECT_NAME}\n        ${AWSSDK_LINK_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Lambda Function Details with SAP ABAP\nDESCRIPTION: This code excerpt shows how to get details of a Lambda function using the AWS SDK for SAP ABAP. It's one of several Lambda-related operations demonstrated in the file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/sap-abap/services/lambda/README.md#2025-04-09_snippet_3\n\nLANGUAGE: ABAP\nCODE:\n```\nzcl_aws1_lmd_actions.clas.abap#L127\n```\n\n----------------------------------------\n\nTITLE: Installing AWS CDK Dependencies\nDESCRIPTION: Commands to install dependencies and deploy the CDK stack for Aurora Serverless resources.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/resources/cdk/aurora_serverless_app/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\ncdk deploy\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for AWS Elastic File System Examples in C++\nDESCRIPTION: This CMake script sets up the build environment for AWS Elastic File System examples. It requires CMake 3.13 or higher, sets the C++ standard to 11, finds the AWS SDK package, and configures the build for the 'create_file_system_with_modeled_exceptions' example.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/elasticfilesystem/CMakeLists.txt#2025-04-09_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nproject(elasticfilesystem-examples)\nset (CMAKE_CXX_STANDARD 11)\n\n# Locate the aws sdk for c++ package.\nfind_package(AWSSDK REQUIRED COMPONENTS elasticfilesystem)\n\n# Example: create_file_system_with_modeled_exceptions is only for AWS SDK for C++ with version higher than 1.8.\nset(EXAMPLES \"\")\nlist(APPEND EXAMPLES \"create_file_system_with_modeled_exceptions\")\n\n# The executables to build.\nforeach(EXAMPLE IN LISTS EXAMPLES)\n  add_executable(${EXAMPLE} ${EXAMPLE}.cpp)\n  target_link_libraries(${EXAMPLE} ${AWSSDK_LINK_LIBRARIES})\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Transcribe an audio file using Amazon Transcribe Streaming in Java\nDESCRIPTION: This code example demonstrates how to generate a transcription of a source audio file using Amazon Transcribe streaming. The full implementation can be found in the TranscribeStreamingDemoFile.java file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/transcribe-streaming/README.md#2025-04-09_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nsrc/main/java/com/amazonaws/transcribestreaming/TranscribeStreamingDemoFile.java\n```\n\n----------------------------------------\n\nTITLE: Creating Amazon EC2 Image in Go\nDESCRIPTION: This example creates an Amazon EC2 image. It requires the image description, instance ID, and image name as command-line arguments.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/ec2/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\ngo run CreateImage -d IMAGE-DESCRIPTION -i INSTANCE-ID -n IMAGE-NAME\n```\n\n----------------------------------------\n\nTITLE: Windows-Specific Build Settings for AWS SDK Tests\nDESCRIPTION: Handles Windows-specific build settings for the test executable, including copying dynamic libraries and the Google Test DLL to the appropriate location for execution and debugging.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/aurora/tests/CMakeLists.txt#2025-04-09_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(\n        ${CURRENT_TARGET}\n)\n\nif (WINDOWS_BUILD)\n    # set(BIN_SUB_DIR \"/Debug\") # If you are building from the command line, you may need to uncomment this\n    # and set the proper subdirectory to the executables' location.\n\n    if (AWSSDK_INSTALL_AS_SHARED_LIBS)\n        # Copy relevant AWS SDK for C++ libraries into the current binary directory for running and debugging.\n        AWSSDK_CPY_DYN_LIBS(\n                CURRENT_TARGET_AWS_DEPENDENCIES\n                \"\"\n                ${CMAKE_CURRENT_BINARY_DIR}${BIN_SUB_DIR}\n        )\n    endif ()\n\n    add_custom_command(\n            TARGET\n            ${CURRENT_TARGET}\n            POST_BUILD\n            COMMAND ${CMAKE_COMMAND} -E copy\n            ${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_BINDIR}${BIN_SUB_DIR}/gtest.dll\n            ${CMAKE_CURRENT_BINARY_DIR}${BIN_SUB_DIR}\n    )\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Testing Rust Lambda Function with Cargo Lambda\nDESCRIPTION: Commands to watch for changes and invoke the Lambda function locally using Cargo Lambda for testing purposes.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/cross_service/photo_asset_management/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo lambda watch\n```\n\nLANGUAGE: bash\nCODE:\n```\ncargo lambda invoke <name-of-bin> --data-file examples/<name-of-bin>.json\n```\n\n----------------------------------------\n\nTITLE: DescribeLogGroups Implementation in .NET\nDESCRIPTION: Example demonstrating how to describe CloudWatch Logs log groups using AWS SDK for .NET. The implementation is referenced in the DescribeLogGroups.cs file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/CloudWatchLogs/README.md#2025-04-09_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\n/* Code reference only - implementation in DescribeLogGroups.cs#L6 */\n```\n\n----------------------------------------\n\nTITLE: Running the SES SMTP Credentials Generator Example\nDESCRIPTION: Command to run the example that generates credentials required to connect to an Amazon SES SMTP endpoint. These credentials are derived from AWS access keys but follow a specific format required by the SMTP service.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/ses/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython ses_generate_smtp_credentials.py\n```\n\n----------------------------------------\n\nTITLE: Defining WorkItem Class in Java for AWS Lambda\nDESCRIPTION: This Java code defines a WorkItem class with key, name, and confidence attributes, along with getter and setter methods. It's used to represent work items in the AWS Lambda function for tagging digital assets.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_lambda_tag_assets/README.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npackage com.aws.tags;\n\npublic class WorkItem {\n\nprivate String key;\nprivate String name;\nprivate String confidence ;\n\npublic void setKey (String key) {\n    this.key = key;\n}\n\npublic String getKey() {\n    return this.key;\n}\n\npublic void setName (String name) {\n    this.name = name;\n}\n\npublic String getName() {\n    return this.name;\n}\n\npublic void setConfidence (String confidence) {\n    this.confidence = confidence;\n}\n\npublic String getConfidence() {\n    return this.confidence;\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Log Files and Setting Query Date Range\nDESCRIPTION: Executes a shell script to generate log files and set environment variables for query start and end dates.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/cloudwatch-logs/scenarios/large-query/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n./make-log-files.sh\n```\n\n----------------------------------------\n\nTITLE: Implementing UploadEndpoint Class for Photo Upload and Analysis in Java\nDESCRIPTION: The UploadEndpoint class manages photo file uploads to S3, triggers image analysis using AWS services, and stores metadata in DynamoDB. It supports direct uploads, post-upload tagging, and bulk file copying between S3 buckets.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/pam_source_files/README.md#2025-04-09_snippet_15\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.photo.endpoints;\n\nimport com.example.photo.PhotoApplicationResources;\nimport com.example.photo.LabelCount;\nimport com.example.photo.services.AnalyzePhotos;\nimport com.example.photo.services.DynamoDBService;\nimport com.example.photo.services.S3Service;\n\nimport java.util.List;\n\npublic class UploadEndpoint {\n    final AnalyzePhotos analyzePhotos;\n    final DynamoDBService dbService;\n    final S3Service s3Service;\n\n    public UploadEndpoint(AnalyzePhotos analyzePhotos, DynamoDBService dynamoDBService, S3Service s3Service) {\n        this.analyzePhotos = analyzePhotos;\n        this.dbService = dynamoDBService;\n        this.s3Service = s3Service;\n    }\n\n    // This method has changed as the JPG has been placed into the bucket using a\n    // presigned URL.\n    public void tagAfterUpload(String name) {\n        List<LabelCount> labels = analyzePhotos.detectLabels(PhotoApplicationResources.STORAGE_BUCKET, name);\n        dbService.putRecord(labels);\n    }\n\n    // This method is only invoked from the Spring Controller and not the AWS Lambda\n    // handler.\n    public void upload(byte[] bytes, String name) {\n        // Put the file into the bucket.\n        s3Service.putObject(bytes, PhotoApplicationResources.STORAGE_BUCKET, name);\n        this.tagAfterUpload(name);\n    }\n\n    // Copy every object in source bucket with suffix .jpe?g to Storage Bucket.\n    public int copyFiles(String source) {\n        return s3Service.copyFiles(source);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading Objects to S3 in PHP\nDESCRIPTION: Code that demonstrates how to upload an object to an S3 bucket using the AWS SDK for PHP. This is a core operation for storing data in S3.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/php/example_code/s3/README.md#2025-04-09_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nPutObject\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for AWS MediaConvert Examples and Tests\nDESCRIPTION: This CMake script sets up a project for AWS MediaConvert examples with Google Test integration. It configures the build environment, manages dependencies, and sets up test execution for both Windows and non-Windows platforms.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/mediaconvert/tests/CMakeLists.txt#2025-04-09_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\n\n# Set the minimum required version of CMake for this project.\ncmake_minimum_required(VERSION 3.14)\n\nset(EXAMPLE_SERVICE_NAME MediaConvert)\nset(CURRENT_TARGET \"${EXAMPLE_SERVICE_NAME}_gtest\")\nset(CURRENT_TARGET_AWS_DEPENDENCIES mediaconvert)\n\n# Set this project's name.\nproject(\"${EXAMPLE_SERVICE_NAME}-examples-gtests\")\n\n# Set the C++ standard to use to build this target.\nset(CMAKE_CXX_STANDARD 14)\n\n# Build shared libraries by default.\nset(BUILD_SHARED_LIBS ON)\n\ninclude(CTest)\n\nfind_package(GTest)\n\nif (NOT GTest_FOUND)\n    include(FetchContent)\n    FetchContent_Declare(\n            googletest\n            GIT_REPOSITORY https://github.com/google/googletest.git\n            GIT_TAG release-1.12.1\n    )\n\n    # For Windows: Prevent overriding the parent project's compiler/linker settings.\n    set(gtest_force_shared_crt ON CACHE BOOL \"\" FORCE)\n    FetchContent_MakeAvailable(googletest)\nendif ()\n\n# Use the MSVC variable to determine if this is a Windows build.\nset(WINDOWS_BUILD ${MSVC})\n\n# Set the location for Windows to find the installed libraries of the SDK.\nif (WINDOWS_BUILD)\n    string(REPLACE \";\" \"/aws-cpp-sdk-all;\" SYSTEM_MODULE_PATH \"${CMAKE_SYSTEM_PREFIX_PATH}/aws-cpp-sdk-all\")\n    list(APPEND CMAKE_PREFIX_PATH ${SYSTEM_MODULE_PATH})\nendif ()\n\n# Find the AWS SDK for C++ package.\nfind_package(AWSSDK REQUIRED COMPONENTS ${CURRENT_TARGET_AWS_DEPENDENCIES})\n\nadd_executable(\n        ${CURRENT_TARGET}\n)\n\nif (WINDOWS_BUILD)\n    # set(BIN_SUB_DIR \"/Debug\") # If you are building from the command line, you may need to uncomment this\n    # and set the proper subdirectory to the executables' location.\n\n    if (AWSSDK_INSTALL_AS_SHARED_LIBS)\n        # Copy relevant AWS SDK for C++ libraries into the current binary directory for running and debugging.\n        AWSSDK_CPY_DYN_LIBS(\n                CURRENT_TARGET_AWS_DEPENDENCIES\n                \"\"\n                ${CMAKE_CURRENT_BINARY_DIR}${BIN_SUB_DIR}\n        )\n    endif ()\n\n    add_custom_command(\n            TARGET\n            ${CURRENT_TARGET}\n            POST_BUILD\n            COMMAND ${CMAKE_COMMAND} -E copy\n            ${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_BINDIR}${BIN_SUB_DIR}/gtest.dll\n            ${CMAKE_CURRENT_BINARY_DIR}${BIN_SUB_DIR}\n    )\nendif ()\n\n# GTEST_SOURCE_FILES can be defined in the command line to limit the files in a build, for example to one action.\nif (NOT DEFINED GTEST_SOURCE_FILES)\n    file(\n            GLOB\n            GTEST_SOURCE_FILES\n            \"gtest_*.cpp\"\n    )\nendif ()\n\nenable_testing()\n\nforeach (TEST_FILE ${GTEST_SOURCE_FILES})\n    string(REPLACE \"gtest_\" \"../\" SOURCE_FILE ${TEST_FILE})\n    if (EXISTS ${SOURCE_FILE})\n        list(APPEND GTEST_SOURCE ${SOURCE_FILE} ${TEST_FILE})\n    else ()\n        message(\"Error: no associated source file found for ${TEST_FILE}\")\n    endif ()\nendforeach ()\n\ntarget_sources(\n        ${CURRENT_TARGET}\n        PUBLIC\n        ${GTEST_SOURCE}\n        test_main.cpp\n        ${EXAMPLE_SERVICE_NAME}_gtests.cpp\n)\n\ntarget_include_directories(\n        ${CURRENT_TARGET}\n        PUBLIC\n        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/..>\n        $<INSTALL_INTERFACE:..>\n)\n\ntarget_compile_definitions(\n        ${CURRENT_TARGET}\n        PUBLIC\n        TESTING_BUILD\n        SRC_DIR=\"${CMAKE_CURRENT_SOURCE_DIR}\"\n)\n\ntarget_link_libraries(\n        ${CURRENT_TARGET}\n        GTest::gtest\n        ${AWSSDK_LINK_LIBRARIES}\n        ${AWSSDK_PLATFORM_DEPS}\n)\n\ninclude(GoogleTest)\ngtest_add_tests(\n        TARGET\n        ${CURRENT_TARGET}\n)\n```\n\n----------------------------------------\n\nTITLE: Describing Root Folders using Amazon WorkDocs SDK for Ruby\nDESCRIPTION: This code snippet demonstrates how to describe root folders in Amazon WorkDocs using the AWS SDK for Ruby. It uses the DescribeRootFolders method of the WorkDocs client.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/ruby/example_code/workdocs/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\ndef describe_root_folders(workdocs_client)\n  resp = workdocs_client.describe_root_folders(limit: 10)\n  resp.folders.each do |folder|\n    puts \"Name:   #{folder.name}\"\n    puts \"Id:     #{folder.id}\"\n    puts\n  end\nrescue StandardError => e\n  puts \"Error describing root folders: #{e.message}\"\nend\n```\n\n----------------------------------------\n\nTITLE: Deploying REST API for Lending Library Example\nDESCRIPTION: Command to deploy the serverless REST API using Chalice, which sets up AWS Lambda functions, API Gateway, and IAM roles to handle HTTP requests to the lending library service.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/cross_service/aurora_rest_lending_library/README.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npython library_demo.py deploy_rest\n```\n\n----------------------------------------\n\nTITLE: Describing Subscription Filters in CloudWatch Logs with C++\nDESCRIPTION: This code snippet shows how to describe subscription filters in CloudWatch Logs using the AWS SDK for C++. The implementation is found in the 'describe_subscription_filters.cpp' file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/cloudwatch-logs/README.md#2025-04-09_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nDescribeSubscriptionFilters(describe_subscription_filters.cpp#L15)\n```\n\n----------------------------------------\n\nTITLE: Parsing String Value from Field in Kotlin\nDESCRIPTION: A utility function to extract string values from a Field object. It checks if the field contains a \"StringValue\" and extracts the value after the last equals sign, removing the trailing character.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/creating_redshift_application/README.md#2025-04-09_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\n// Return the String value of the field.\n    fun parseValue(myField: Field): String {\n        val ss = myField.toString()\n        if (\"StringValue\" in ss) {\n            var str = ss.substringAfterLast(\"=\")\n            str = str.substring(0, str.length - 1)\n            return str\n        }\n        return \"\"\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating Work Items Table for PostgreSQL\nDESCRIPTION: SQL query to create work_items table schema in PostgreSQL-compatible Aurora database\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/cross_service/aurora_item_tracker/README.md#2025-04-09_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ncreate table work_items ( \n  iditem SERIAL PRIMARY KEY, \n  description TEXT, \n  guide VARCHAR(45), \n  status TEXT, \n  username VARCHAR(45), \n  archived BOOL DEFAULT false\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Test Dependencies\nDESCRIPTION: Sets up Google Test as a dependency, either finding an existing installation or fetching it from GitHub. Includes special handling for Windows builds to ensure proper compiler settings.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/autoscaling/tests/CMakeLists.txt#2025-04-09_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(GTest)\n\nif(NOT GTest_FOUND)\n    include(FetchContent)\n    FetchContent_Declare(\n            googletest\n            GIT_REPOSITORY https://github.com/google/googletest.git\n            GIT_TAG release-1.12.1\n    )\n\n    # For Windows: Prevent overriding the parent project's compiler/linker settings.\n    set(gtest_force_shared_crt ON CACHE BOOL \"\" FORCE)\n    FetchContent_MakeAvailable(googletest)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS SDK for C++ in CMake for IoT Examples\nDESCRIPTION: Sets up the environment to find and use the AWS SDK for C++. It handles Windows-specific configurations and finds the required AWS SDK components.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/iot/tests/CMakeLists.txt#2025-04-09_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(WINDOWS_BUILD ${MSVC})\n\nif (WINDOWS_BUILD)\n    string(REPLACE \";\" \"/aws-cpp-sdk-all;\" SYSTEM_MODULE_PATH \"${CMAKE_SYSTEM_PREFIX_PATH}/aws-cpp-sdk-all\")\n    list(APPEND CMAKE_PREFIX_PATH ${SYSTEM_MODULE_PATH})\nendif ()\n\nfind_package(AWSSDK REQUIRED COMPONENTS ${CURRENT_TARGET_AWS_DEPENDENCIES})\n```\n\n----------------------------------------\n\nTITLE: Uploading Archive to S3 Glacier\nDESCRIPTION: Uploads an archive to a specified vault using the UploadArchive API\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Glacier/README.md#2025-04-09_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nUploadArchive\n```\n\n----------------------------------------\n\nTITLE: Running Amazon Pinpoint Voice Message Example in Python\nDESCRIPTION: This command executes the Python script to send a voice message through Amazon Pinpoint SMS and Voice API.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/pinpoint-sms-voice/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython pinpoint_send_voice_message_sms_voice_api.py\n```\n\n----------------------------------------\n\nTITLE: Building IAM Hello World Example with CMake\nDESCRIPTION: CMake configuration file reference for the 'Hello IAM' example that demonstrates the ListPolicies operation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/iam/README.md#2025-04-09_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Line 4 of CMakeLists.txt file for Hello IAM example\n```\n\n----------------------------------------\n\nTITLE: Updating an IAM User in C++\nDESCRIPTION: Code excerpt showing how to update an IAM user using the AWS SDK for C++.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/iam/README.md#2025-04-09_snippet_24\n\nLANGUAGE: C++\nCODE:\n```\n// From update_user.cpp line 37\n```\n\n----------------------------------------\n\nTITLE: Implementing FaceItems Model Class for Amazon Rekognition Results in Java\nDESCRIPTION: A model class that stores facial analysis data returned by the Amazon Rekognition service. It captures attributes like age range, beard, eyeglasses, eyes open status, mustache, and smile detection.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/video_analyzer_application/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npackage com.example.video;\n\n// Represents a model that stores labels detected in a video\npublic class FaceItems {\n\nprivate String  ageRange;\nprivate String beard;\nprivate String eyeglasses;\nprivate String eyesOpen;\nprivate String mustache;\nprivate String smile;\n\npublic String getAgeRange() {\n    return this.ageRange ;\n}\n\npublic void setAgeRange(String age) {\n    this.ageRange = age ;\n}\n\npublic String getBeard() {\n    return this.beard ;\n}\n\npublic void setBeard(String beard) {\n         this.beard = beard ;\n}\n\npublic String getEyesOpen() {\n    return this.eyesOpen ;\n}\n\npublic void setEyesOpen(String eyesOpen) {\n    this.eyesOpen = eyesOpen ;\n}\n\npublic String getEyeglasses() {\n    return this.eyeglasses ;\n}\n\npublic void setEyeglasses(String eyeglasses) {\n    this.eyeglasses = eyeglasses ;\n}\n\npublic String gettMustache() {\n    return this.mustache ;\n}\n\npublic void setMustache(String mustache) {\n\n    this.mustache = mustache ;\n}\n\npublic String gettSmile() {\n    return this.smile ;\n}\n\npublic void setSmile(String smile) {\n    this.smile = smile ;\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Secrets Manager Build with CMake\nDESCRIPTION: Complete CMake configuration for building AWS Secrets Manager code examples. Sets up project requirements, finds AWS SDK dependencies, handles Windows-specific configurations, and creates build targets for all example files. Supports optional test building and selective source file compilation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/secrets-manager/CMakeLists.txt#2025-04-09_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\n\n# Set the minimum required version of CMake for this project.\ncmake_minimum_required(VERSION 3.13)\n\nset(SERVICE_NAME secretsmanager)\nset(SERVICE_COMPONENTS secretsmanager)\n\n# Set this project's name.\nproject(\"${SERVICE_NAME}-examples\")\n\n# Set the C++ standard to use to build this target.\nset(CMAKE_CXX_STANDARD 11)\n\n# Use the MSVC variable to determine if this is a Windows build.\nset(WINDOWS_BUILD ${MSVC})\n\n# Set the location of where Windows can find the installed libraries of the SDK.\nif (WINDOWS_BUILD)\n    string(REPLACE \";\" \"/aws-cpp-sdk-all;\" SYSTEM_MODULE_PATH \"${CMAKE_SYSTEM_PREFIX_PATH}/aws-cpp-sdk-all\")\n    list(APPEND CMAKE_PREFIX_PATH ${SYSTEM_MODULE_PATH})\nendif ()\n\n# Find the AWS SDK for C++ package.\nfind_package(AWSSDK REQUIRED COMPONENTS ${SERVICE_COMPONENTS})\n\nif (WINDOWS_BUILD AND AWSSDK_INSTALL_AS_SHARED_LIBS)\n    # Copy relevant AWS SDK for C++ libraries into the current binary directory for running and debugging.\n\n    # set(BIN_SUB_DIR \"/Debug\") # If you are building from the command line, you may need to uncomment this\n    # and set the proper subdirectory to the executables' location.\n\n    AWSSDK_CPY_DYN_LIBS(SERVICE_COMPONENTS \"\" ${CMAKE_CURRENT_BINARY_DIR}${BIN_SUB_DIR})\nendif ()\n\n# AWSDOC_SOURCE can be defined in the command line to limit the files in a build. For example,\n# you can limit files to one action.\nif (NOT DEFINED AWSDOC_SOURCE)\n    file(GLOB AWSDOC_SOURCE\n            \"*.cpp\"\n    )\nendif ()\n\nforeach (file ${AWSDOC_SOURCE})\n    get_filename_component(EXAMPLE ${file} NAME_WE)\n\n    # Build the code example executables.\n    set(EXAMPLE_EXE run_${EXAMPLE})\n\n    add_executable(${EXAMPLE_EXE} ${file})\n\n    target_link_libraries(${EXAMPLE_EXE} ${AWSSDK_LINK_LIBRARIES}\n            ${AWSSDK_PLATFORM_DEPS})\n\nendforeach ()\n\n\nif (BUILD_TESTS)\n    add_subdirectory(tests)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Listing IoT Things in Rust\nDESCRIPTION: This code snippet shows how to use the AWS SDK for Rust to list AWS IoT things. It can be found in the file 'src/bin/list-things.rs' at line 22.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/iot/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Rust\nCODE:\n```\nsrc/bin/list-things.rs#L22\n```\n\n----------------------------------------\n\nTITLE: Running REST API Demonstration with Requests Package\nDESCRIPTION: Command to run a demonstration of the lending library REST API using the Requests package, which shows listing books, adding patrons, borrowing, and returning books.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/cross_service/aurora_rest_lending_library/README.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython library_demo.py demo_rest\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Dependencies for Spring Boot and AWS SDK for Kotlin\nDESCRIPTION: Gradle build file configuration for a Spring Boot application that uses AWS SDK for Kotlin. It includes dependencies for DynamoDB, SES, Spring Boot, and other required libraries with Kotlin JVM targeting Java 17.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/itemtracker_dynamodb/README.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nimport org.jetbrains.kotlin.gradle.tasks.KotlinCompile\n\nplugins {\nkotlin(\"jvm\") version \"1.9.0\"\napplication\n}\n\ngroup = \"me.scmacdon\"\nversion = \"1.0-SNAPSHOT\"\n\njava {\nsourceCompatibility = JavaVersion.VERSION_17\ntargetCompatibility = JavaVersion.VERSION_17\n}\n\nbuildscript {\nrepositories {\nmaven(\"https://plugins.gradle.org/m2/\")\n}\ndependencies {\nclasspath(\"org.jlleitschuh.gradle:ktlint-gradle:10.3.0\")\n}\n}\n\nrepositories {\nmavenCentral()\n}\napply(plugin = \"org.jlleitschuh.gradle.ktlint\")\ndependencies {\nimplementation(\"org.springframework.boot:spring-boot-starter-web:2.7.5\")\nimplementation(\"com.fasterxml.jackson.module:jackson-module-kotlin:2.13.3\")\nimplementation(\"org.jetbrains.kotlin:kotlin-reflect\")\nimplementation(\"org.jetbrains.kotlin:kotlin-stdlib-jdk8\")\nimplementation(\"javax.mail:javax.mail-api:1.6.2\")\nimplementation(\"com.sun.mail:javax.mail:1.6.2\")\nimplementation(\"aws.sdk.kotlin:dynamodb:0.33.1-beta\")\nimplementation(\"aws.sdk.kotlin:ses:0.33.1-beta\")\nimplementation(\"aws.smithy.kotlin:http-client-engine-okhttp:0.28.0\")\nimplementation(\"aws.smithy.kotlin:http-client-engine-crt:0.28.0\")\ntestImplementation(\"org.springframework.boot:spring-boot-starter-test:2.7.3\")\n}\n\ntasks.withType<KotlinCompile> {\nkotlinOptions {\nfreeCompilerArgs = listOf(\"-Xjsr305=strict\")\njvmTarget = \"17\"\n}\n}\n\ntasks.withType<Test> {\nuseJUnitPlatform()\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying AWS Region in AmazonSimpleNotificationServiceClient Constructor\nDESCRIPTION: Examples showing how to modify the AWS region in the client constructor to match where your resources are defined. The snippet demonstrates changing from USEast2 to USWest2 region.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/cross-service/SubscribePublishTranslate/README.md#2025-04-09_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar client = new AmazonSimpleNotificationServiceClient(RegionEndpoint.USEast2);\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar client = new AmazonSimpleNotificationServiceClient(RegionEndpoint.USWest2);\n```\n\n----------------------------------------\n\nTITLE: List Amazon ECS Services for a Cluster using .NET\nDESCRIPTION: Retrieves a list of all Amazon ECS services running within a specified cluster. Takes a cluster ARN as input and returns the service ARNs as a list of strings.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/ECS/README.md#2025-04-09_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n/// <summary>\n/// Get a list of services running on a cluster.\n/// </summary>\n/// <param name=\"clusterARN\">The ARN of the cluster.</param>\n/// <returns>A list of service ARNs.</returns>\npublic async Task<List<string>> ListServices(string clusterARN)\n{\n    var response = await _ecsClient.ListServicesAsync(\n        new ListServicesRequest\n        {\n            Cluster = clusterARN\n        });\n\n    return response.ServiceArns;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Windows-Specific Build Configuration\nDESCRIPTION: Configures Windows-specific build settings, including paths to find AWS SDK libraries and handling shared library dependencies.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/autoscaling/tests/CMakeLists.txt#2025-04-09_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Use the MSVC variable to determine if this is a Windows build.\nset(WINDOWS_BUILD ${MSVC})\n\n# Set the location for Windows to find the installed libraries of the SDK.\nif (WINDOWS_BUILD)\n    string(REPLACE \";\" \"/aws-cpp-sdk-all;\" SYSTEM_MODULE_PATH \"${CMAKE_SYSTEM_PREFIX_PATH}/aws-cpp-sdk-all\")\n    list(APPEND CMAKE_PREFIX_PATH ${SYSTEM_MODULE_PATH})\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Adding Test Subdirectory for AWS SES Examples\nDESCRIPTION: Conditionally adds a test subdirectory to the build if the BUILD_TESTS flag is set.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/ses/CMakeLists.txt#2025-04-09_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_TESTS)\n  add_subdirectory(tests)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Tags to a Kinesis Stream using AWS SDK for .NET\nDESCRIPTION: This code snippet demonstrates how to add tags to an Amazon Kinesis stream using the AWS SDK for .NET. It references the AddTagsToStream method in the TagStream.cs file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Kinesis/README.md#2025-04-09_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nAddTagsToStream(TagStreamExample/TagStreamExample/TagStream.cs#L6)\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Composer for AWS Lambda PHP Examples\nDESCRIPTION: This snippet shows how to install the required dependencies using Composer for running the AWS Lambda PHP examples.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/php/example_code/lambda/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer install\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for Amazon S3 Examples with Python\nDESCRIPTION: Command to install the required Python packages for the Amazon S3 examples. This should be run in a virtual environment to isolate dependencies.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/s3/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Executing Batch PartiQL Statements in DynamoDB with Ruby\nDESCRIPTION: This code snippet shows how to execute batch PartiQL statements in DynamoDB using the AWS SDK for Ruby. It uses the BatchExecuteStatement operation to perform multiple PartiQL operations in a single request.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/ruby/example_code/dynamodb/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\ndef run_batch_execute_statement(dynamodb_client, statements)\n  response = dynamodb_client.batch_execute_statement({ statements: statements })\n  response.responses\nend\n```\n\n----------------------------------------\n\nTITLE: Defining HTML Structure for Video Analysis Page (HTML)\nDESCRIPTION: This HTML snippet defines the structure for the process.html page, which allows users to analyze videos stored in an Amazon S3 bucket and generate reports. It includes form inputs for email address and a button to trigger the analysis process.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/video_analyzer_application/README.md#2025-04-09_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html xmlns:th=\"http://www.thymeleaf.org\">\n<head>\n<meta charset=\"utf-8\" />\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n\n<link rel=\"stylesheet\" th:href=\"|https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css|\"/>\n<script th:src=\"|https://code.jquery.com/jquery-1.12.4.min.js|\"></script>\n<script th:src=\"|https://code.jquery.com/ui/1.11.4/jquery-ui.min.js|\"></script>\n<script th:src=\"|https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js|\"></script>\n<script th:src=\"|https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js|\"></script>\n<script src=\"../public/js/message.js\" th:src=\"@{/js/message.js}\"></script>\n\n<link rel=\"stylesheet\" href=\"../public/css/styles.css\" th:href=\"@{/css/styles.css}\" />\n<link rel=\"icon\" href=\"../public/images/favicon.ico\" th:href=\"@{/images/favicon.ico}\" />\n\n<title>AWS Photo Analyzer</title>\n\n<script>\n   function myFunction() {\n       alert(\"The form was submitted\");\n   }\n</script>\n</head>\n<body>\n<header th:replace=\"layout :: site-header\"/>\n\n<div class=\"container\">\n\n<h2>AWS Video Analyzer Sample Application</h2>\n<p>You can generate a report that analyzes a video in an Amazon S3 bucket. You can send the report to the following email address. </p>\n<label for=\"email\">Email address:</label><br>\n<input type=\"text\" id=\"email\" name=\"email\" value=\"\"><br>\n\n <div>\n   <br>\n\n   <p>Click the following button to analyze the video and obtain a report</p>\n   <button id=\"button\" onclick=\"ProcessImages()\">Analyze Video</button>\n  </div>\n  <div id=\"spinner\">\n   <p>Report is being generated:</p>\n   <div class=\"spinner-border\"></div>\n  </div>\n </div>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Creating a Rule in EventBridge using AWS SDK for .NET\nDESCRIPTION: Method to create or update an EventBridge rule. Defines the event pattern or schedule that determines when the rule is triggered.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/EventBridge/README.md#2025-04-09_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nPutRule\n```\n\n----------------------------------------\n\nTITLE: Building Hello IoT C++ Application with CMake\nDESCRIPTION: Commands to build the Hello IoT application using CMake build system. Creates a build directory, navigates into it, and builds the project using CMake, resulting in an executable named 'hello_iot'.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/iot/hello_iot/README.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmkdir build \ncd build\ncmake --build ..\n```\n\n----------------------------------------\n\nTITLE: Subscribing to an Amazon SNS Topic using Rust\nDESCRIPTION: This code snippet shows how to subscribe to an Amazon SNS topic using the AWS SDK for Rust. It references the 'sns-hello-world.rs' file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/sns/README.md#2025-04-09_snippet_3\n\nLANGUAGE: Rust\nCODE:\n```\nsrc/bin/sns-hello-world.rs#L30\n```\n\n----------------------------------------\n\nTITLE: Running the Amazon Textract Explorer Demo Application\nDESCRIPTION: Command to launch the Tkinter-based Amazon Textract Explorer application that enables users to analyze document images and explore detected text elements.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/cross_service/textract_explorer/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython textract_demo_launcher.py demo\n```\n\n----------------------------------------\n\nTITLE: Invoking Foundation Models with Amazon Bedrock Runtime in Go\nDESCRIPTION: Demonstrates how to invoke large language models available through Amazon Bedrock Runtime. This is referenced as part of the InvokeModel functionality for various models including AI21 Labs Jurassic-2, Amazon Titan, and Anthropic Claude.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/gov2/bedrock-runtime/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\ninvoke_model.go#L7\n```\n\n----------------------------------------\n\nTITLE: Work Item Model Class in C#\nDESCRIPTION: Model class for storing image label detection results from AWS Rekognition, including the image key, label name, and confidence score.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/cross-service/PhotoAnalyzerApp/README.md#2025-04-09_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nnamespace PhotoAnalyzerApp.Controllers\n{\n    public class WorkItem\n    {\n        public string Key { get; set; }\n        public string Name { get; set; }\n        public string Confidence { get; set; }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying AWS Resources\nDESCRIPTION: Command to deploy the required AWS resources using the CloudFormation stack\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/cross_service/apigateway_websocket_chat/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython websocket_chat.py deploy\n```\n\n----------------------------------------\n\nTITLE: Finding AWS SDK and Configuring Target Executable\nDESCRIPTION: Finds the AWS SDK for C++ and configures the main test executable target. Sets up platform-specific library copying for Windows builds to ensure runtime dependencies are available.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/autoscaling/tests/CMakeLists.txt#2025-04-09_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Build shared libraries by default.\nset(BUILD_SHARED_LIBS ON)\n\n# Find the AWS SDK for C++ package.\nfind_package(AWSSDK REQUIRED COMPONENTS ${CURRENT_TARGET_AWS_DEPENDENCIES})\n\nadd_executable(\n        ${CURRENT_TARGET}\n)\n\nif (WINDOWS_BUILD)\n    # set(BIN_SUB_DIR \"/Debug\") # If you are building from the command line, you may need to uncomment this\n    # and set the proper subdirectory to the executables' location.\n\n    if (AWSSDK_INSTALL_AS_SHARED_LIBS)\n        # Copy relevant AWS SDK for C++ libraries into the current binary directory for running and debugging.\n        AWSSDK_CPY_DYN_LIBS(\n                CURRENT_TARGET_AWS_DEPENDENCIES\n                \"\"\n                ${CMAKE_CURRENT_BINARY_DIR}${BIN_SUB_DIR}\n        )\n    endif ()\n\n    add_custom_command(\n            TARGET\n            ${CURRENT_TARGET}\n            POST_BUILD\n            COMMAND ${CMAKE_COMMAND} -E copy\n            ${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_BINDIR}${BIN_SUB_DIR}/gtest.dll\n            ${CMAKE_CURRENT_BINARY_DIR}${BIN_SUB_DIR}\n    )\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Sample Unit Test Success Output\nDESCRIPTION: Example output showing successful completion of unit tests for AWS SDK Go examples\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/glacier/README.md#2025-04-09_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nPASS\nok      PATH 6.593s\n```\n\n----------------------------------------\n\nTITLE: Sending a Message to Amazon SQS in C#\nDESCRIPTION: Demonstrates how to send a message to an Amazon SQS queue using the AWS SDK for .NET. This is a fundamental operation for adding data to a queue.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/SQS/README.md#2025-04-09_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nSendMessage\n```\n\n----------------------------------------\n\nTITLE: Deleting EC2 Security Group in Go\nDESCRIPTION: This example deletes a security group. It requires the security group name as a command-line argument.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/ec2/README.md#2025-04-09_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\ngo run DeleteSecurityGroup.go -n NAME\n```\n\n----------------------------------------\n\nTITLE: CloudFormation Stack Deletion Command\nDESCRIPTION: AWS CLI command to clean up and delete all resources created by the resilience demo stack, including load balancers, instances, auto scaling groups, and DynamoDB tables.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/aws-cfn/cross-service/resilient-workflow/README.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\naws cloudformation delete-stack \\\n  --stack-name resilience-demo\n```\n\n----------------------------------------\n\nTITLE: Defining HTML Structure for Application Layout (HTML)\nDESCRIPTION: This HTML snippet defines the structure for the layout.html file, which serves as the main layout template for the application. It includes the header with navigation links to different pages of the application.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/video_analyzer_application/README.md#2025-04-09_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n <html xmlns:th=\"http://www.thymeleaf.org\">\n <head th:fragment=\"site-head\">\n <meta charset=\"UTF-8\" />\n  <link rel=\"icon\" href=\"../public/images/favicon.ico\" th:href=\"@{/images/favicon.ico}\" />\n  <script th:src=\"|https://code.jquery.com/jquery-1.12.4.min.js|\"></script>\n  <meta th:include=\"this :: head\" th:remove=\"tag\"/>\n</head>\n<body>\n <header th:fragment=\"site-header\">\n <a href=\"index.html\" th:href=\"@{/}\"><img src=\"../public/images/site-logo.png\" th:src=\"@{/images/site-logo.png}\" /></a>\n <a href=\"#\" style=\"color: white\" th:href=\"@{/}\">Home</a>\n <a href=\"#\" style=\"color: white\" th:href=\"@{/video}\">Upload Videos</a>\n <a href=\"#\"  style=\"color: white\" th:href=\"@{/process}\">Analyze Videos</a>\n\n</header>\n<h1>Welcome</h1>\n<body>\n<p>Welcome to  AWS Video Analyzer.</p>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: SESv2 API Action Mappings\nDESCRIPTION: JSON array mapping AWS SESv2 API action names to human-readable titles in imperative case. Each object contains the official API action name and a descriptive title indicating the action's purpose.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/sesv2_weekly_mailer/content/tmp/links.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"action\": \"BatchGetMetricData\",\n    \"title\": \"Retrieve Batched Metric Data\"\n  },\n  {\n    \"action\": \"CancelExportJob\",\n    \"title\": \"Cancel an Export Job\"\n  },\n  {\n    \"action\": \"CreateConfigurationSet\",\n    \"title\": \"Create a Configuration Set\"\n  },\n  {\n    \"action\": \"CreateConfigurationSetEventDestination\",\n    \"title\": \"Create a Configuration Set Event Destination\"\n  },\n  {\n    \"action\": \"CreateContact\",\n    \"title\": \"Create a Contact\"\n  }\n  /* Additional mappings truncated */\n]\n```\n\n----------------------------------------\n\nTITLE: Enabling Metrics Collection for Auto Scaling in Rust\nDESCRIPTION: This code snippet demonstrates how to use the EnableMetricsCollection operation to start collecting metrics for an Auto Scaling group using the AWS SDK for Rust.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/auto-scaling/README.md#2025-04-09_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nsrc/scenario.rs#L294\n```\n\n----------------------------------------\n\nTITLE: Querying DynamoDB with FilterExpression\nDESCRIPTION: Python code demonstrating how to use Boto3 Table object to scan a DynamoDB table for work items with a specific archived status.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/cross_service/dynamodb_item_tracker/README.md#2025-04-09_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef get_work_items(self, archived=None):\n    work_items = self.table.scan(\n        FilterExpression=Attr('archived').eq(archived)).get('Items', [])\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Packages\nDESCRIPTION: Command to install the required Python packages for running the CloudWatch examples using pip package manager in a virtual environment.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/cloudwatch/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Updating Item in DynamoDB Table in ABAP\nDESCRIPTION: This code excerpt shows how to update an item in a DynamoDB table using the AWS SDK for SAP ABAP. It is one of the single action examples provided for DynamoDB operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/sap-abap/services/dyn/README.md#2025-04-09_snippet_9\n\nLANGUAGE: ABAP\nCODE:\n```\nzcl_aws1_dyn_actions.clas.abap#L337\n```\n\n----------------------------------------\n\nTITLE: SNS Application Main Index Template\nDESCRIPTION: HTML template for the main landing page of the SNS application. Includes Bootstrap styling and navigation elements with instructions for using the SNS features.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_sns_async/README.md#2025-04-09_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html>\n<html xmlns:th=\"https://www.thymeleaf.org\">\n<head>\n <meta charset=\"utf-8\" />\n <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n <script th:src=\"|https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js|\"></script>\n <link rel=\"stylesheet\" th:href=\"|https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css|\"/>\n <link rel=\"stylesheet\" href=\"../public/css/styles.css\" th:href=\"@{/css/styles.css}\" />\n <link rel=\"icon\" href=\"../public/img/favicon.ico\" th:href=\"@{/img/favicon.ico}\" />\n<title>AWS Job Posting Example</title>\n</head>\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Target Properties and Dependencies\nDESCRIPTION: Sets up the target sources, include directories, compile definitions, and library dependencies for the test executable. Integrates with GTest for test discovery and execution.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/autoscaling/tests/CMakeLists.txt#2025-04-09_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(\n        ${CURRENT_TARGET}\n        PUBLIC\n        ${GTEST_SOURCE}\n        test_main.cpp\n        ${EXAMPLE_SERVICE_NAME}_gtests.cpp\n)\n\ntarget_include_directories(\n        ${CURRENT_TARGET}\n        PUBLIC\n        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/..>\n        $<INSTALL_INTERFACE:..>\n)\n\ntarget_compile_definitions(\n        ${CURRENT_TARGET}\n        PUBLIC\n        TESTING_BUILD\n        SRC_DIR=\"${CMAKE_CURRENT_SOURCE_DIR}\"\n)\n\ntarget_link_libraries(\n        ${CURRENT_TARGET}\n        GTest::gtest\n        ${AWSSDK_LINK_LIBRARIES}\n        ${AWSSDK_PLATFORM_DEPS}\n)\n\ninclude(GoogleTest)\ngtest_add_tests(\n        TARGET\n        ${CURRENT_TARGET}\n)\n```\n\n----------------------------------------\n\nTITLE: CloudFormation Stack Creation Command\nDESCRIPTION: AWS CLI command to create a CloudFormation stack named 'resilience-demo' using a specified template and parameters file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/aws-cfn/cross-service/resilient-workflow/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naws cloudformation create-stack \\\n  --stack-name resilience-demo \\\n  --template-body file://./resilient-service.yaml \\\n  --parameters file://./params.json \\\n  --capabilities CAPABILITY_NAMED_IAM\n```\n\n----------------------------------------\n\nTITLE: Submitting AWS Batch Job in Java\nDESCRIPTION: Demonstrates how to submit a job to AWS Batch using the submitJob operation. This operation sends a job to a specified job queue for execution.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/batch/README.md#2025-04-09_snippet_11\n\nLANGUAGE: Java\nCODE:\n```\nSubmitJob\n```\n\n----------------------------------------\n\nTITLE: Getting S3 Bucket ACLs in JavaScript\nDESCRIPTION: This code snippet demonstrates how to retrieve the Access Control List (ACL) of an S3 bucket using the GetBucketAcl operation in the AWS SDK for JavaScript (v3).\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/s3/README.md#2025-04-09_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n- [GetBucketAcl](actions/get-bucket-acl.js#L4)\n```\n\n----------------------------------------\n\nTITLE: Creating a Contact in Amazon SES v2 API using Rust\nDESCRIPTION: This code snippet demonstrates how to create a contact in Amazon SES v2 API using the AWS SDK for Rust. It references the implementation in the create-contact.rs file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/ses/README.md#2025-04-09_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n// Implementation in src/bin/create-contact.rs#L30\n```\n\n----------------------------------------\n\nTITLE: Updating an IAM Server Certificate in C++\nDESCRIPTION: Code excerpt showing how to update an IAM server certificate using the AWS SDK for C++.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/iam/README.md#2025-04-09_snippet_23\n\nLANGUAGE: C++\nCODE:\n```\n// From update_server_certificate.cpp line 35\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-Side Video Management (JavaScript)\nDESCRIPTION: This JavaScript snippet, items.js, handles client-side functionality for managing video data. It initializes a DataTable for displaying video information and defines functions for retrieving video data from the server.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/video_analyzer_application/README.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n$(function() {\n\n$('#myTable').DataTable( {\n    scrollY:        \"500px\",\n    scrollX:        true,\n    scrollCollapse: true,\n    paging:         true,\n    columnDefs: [\n        { width: 200, targets: 0 }\n    ],\n    fixedColumns: true\n } );\n } );\n\n\nfunction getVideo() {\n var xhr = new XMLHttpRequest();\n xhr.addEventListener(\"load\", handlevideo, false);\n xhr.open(\"GET\", \"../getvideo\", true);\n xhr.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");//necessary\n xhr.send();\n}\n\nfunction handlevideo() {\n\n var xml = event.target.responseText;\n var oTable = $('#myTable').dataTable();\n oTable.fnClearTable(true);\n $(xml).find('Item').each(function () {\n\n    var $field = $(this);\n    var key = $field.find('Key').text();\n    var name = $field.find('Owner').text();\n    var date = $field.find('Date').text();\n    var size = $field.find('Size').text();\n\n    //Set the new data\n    oTable.fnAddData( [\n        key,\n        name,\n        date,\n        size,,]\n    );\n    });\n    }\n```\n\n----------------------------------------\n\nTITLE: Deleting an AWS Glue Job in Java\nDESCRIPTION: Code that shows how to delete an AWS Glue job when it is no longer needed, as part of resource cleanup.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/glue/README.md#2025-04-09_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\nGlueScenario.java#L655\n```\n\n----------------------------------------\n\nTITLE: Executing JUnit Tests for AWS CodeCommit via Maven\nDESCRIPTION: Command to run JUnit tests for AWS CodeCommit Java examples using Maven. This command executes all tests defined in the CodeCommitTest file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/codecommit/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmvn test\n```\n\n----------------------------------------\n\nTITLE: Describing Auto Scaling Instances in Rust\nDESCRIPTION: This code snippet shows how to use the DescribeAutoScalingInstances operation to get information about Auto Scaling instances using the AWS SDK for Rust.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/auto-scaling/README.md#2025-04-09_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nsrc/scenario.rs#L532\n```\n\n----------------------------------------\n\nTITLE: Message Handling JavaScript\nDESCRIPTION: JavaScript functions for handling image downloads and report generation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/creating_photo_analyzer_app/README.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n$(function() {\n\n    } );\n\n    function DownloadImage(e){\n      var photo =  $('#photo').val();\n      window.location =\"../downloadphoto?photoKey=\" + photo ;\n    }\n\n    function DownloadReport(e){\n        window.location=\"../report\" ;\n    }\n```\n\n----------------------------------------\n\nTITLE: Sending Work Items Report via REST POST\nDESCRIPTION: HTTP POST request to generate and send an email report of work items.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/resources/clients/react/elwing/src/plugins/item-tracker/README.md#2025-04-09_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST http://localhost:8080/api/items:report\n```\n\n----------------------------------------\n\nTITLE: Displaying Docker Image Tag Output in Java\nDESCRIPTION: Simple console output showing the docker image tag from an ECR operation. This is part of the program execution output demonstration.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/basics/ecr/SPECIFICATION.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nThe docker image tag is latest \n```\n\n----------------------------------------\n\nTITLE: Listing Redshift Clusters Status Check\nDESCRIPTION: Java code demonstrating how to list and check the status of Redshift clusters using redshiftClient.describeClustersPaginator(). Shows cluster identifiers and their availability status.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/basics/redshift/SPECIFICATION.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nCluster identifier: redshift-cluster-1 status = available\nCluster identifier: redshift-cluster-wf status = available\n```\n\n----------------------------------------\n\nTITLE: Running ACM Code Examples with AWS SDK for C++\nDESCRIPTION: Instructions for running the ACM code examples. The examples are built as executables in the build folder with 'run_' prepended to the source file name.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/acm/README.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n./run_my_action\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Resources with CloudFormation\nDESCRIPTION: AWS CLI command to delete the CloudFormation stack and clean up all resources created for the demo.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/cross_service/apigateway_covid-19_tracker/README.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\naws cloudformation delete-stack --stack-name ChaliceRestDemo\n```\n\n----------------------------------------\n\nTITLE: Creating AWS Batch Compute Environment in Java\nDESCRIPTION: Demonstrates how to create a compute environment in AWS Batch using the createComputeEnvironment operation. Compute environments are the infrastructure where batch jobs run.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/batch/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nCreateComputeEnvironment\n```\n\n----------------------------------------\n\nTITLE: Creating SNS Client in JavaScript\nDESCRIPTION: Client setup for Amazon SNS operations. This file is imported by other examples to establish a connection to the SNS service.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/sns/README.md#2025-04-09_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nlibs/snsClient.js#L4\n```\n\n----------------------------------------\n\nTITLE: Deprecated JavaScript Photo Album Example Album Listing\nDESCRIPTION: This snippet contained code for listing albums in the Photo Album example. It has been replaced by a newer example in the AWS documentation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/s3/dead-snippets.txt#2025-04-09_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n// snippet-start:[s3.JavaScript.photoAlbumExample.listAlbumsV3]\nThis code example has been superseded by the example in\nCode examples > Amazon S3 > Create a web page that lists S3 objects\n// snippet-end:[s3.JavaScript.photoAlbumExample.listAlbumsV3]\n```\n\n----------------------------------------\n\nTITLE: CreateLogGroup Implementation in .NET\nDESCRIPTION: Example demonstrating how to create a new CloudWatch Logs log group using AWS SDK for .NET. The implementation is referenced in the CreateLogGroup.cs file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/CloudWatchLogs/README.md#2025-04-09_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n/* Code reference only - implementation in CreateLogGroup.cs#L6 */\n```\n\n----------------------------------------\n\nTITLE: Running a Java Example with AWS SDK\nDESCRIPTION: This command demonstrates how to run a specific Java example (ListBuckets) using the AWS SDK for Java. It assumes the CLASSPATH has been set correctly.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/java/README.rst#2025-04-09_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\njava aws.example.s3.ListBuckets -cp target/s3examples-1.0.jar:$CLASSPATH\n```\n\n----------------------------------------\n\nTITLE: Listing AWS CodeBuild Builds with AWS SDK for Go\nDESCRIPTION: This command executes the ListBuilds Go program which retrieves and displays all CodeBuild builds in your AWS account.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/codebuild/README.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo run ListBuilds.go\n```\n\n----------------------------------------\n\nTITLE: Deleting a CloudFormation Stack with AWS SDK for Rust\nDESCRIPTION: This code example shows how to delete a CloudFormation stack using the AWS SDK for Rust. It utilizes the DeleteStack operation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/cloudformation/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Rust\nCODE:\n```\nsrc/bin/delete-stack.rs\n```\n\n----------------------------------------\n\nTITLE: Image Upload Interface with S3 Integration (HTML)\nDESCRIPTION: HTML template for the upload page of the AWS Photo Analyzer application. It provides a form for uploading images to Amazon S3 and displays a table of existing images in the bucket using DataTables JavaScript library. The page uses Thymeleaf templating engine for server-side rendering.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_photo_analyzer_app/README.md#2025-04-09_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html xmlns:th=\"http://www.thymeleaf.org\">\n<head>\n    <meta charset=\"utf-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n\n    <script th:src=\"|https://code.jquery.com/jquery-1.12.4.min.js|\"></script>\n    <script th:src=\"|https://code.jquery.com/ui/1.11.4/jquery-ui.min.js|\"></script>\n    <script th:src=\"|https://cdn.datatables.net/v/dt/dt-1.10.20/datatables.min.js|\"></script>\n    <script src=\"../public/js/items.js\" th:src=\"@{/js/items.js}\"></script>\n\n    <link rel=\"stylesheet\" th:href=\"|https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css|\"/>\n    <link rel=\"stylesheet\" th:href=\"|https://cdn.datatables.net/v/dt/dt-1.10.20/datatables.min.css|\"/>\n    <link rel=\"stylesheet\" href=\"../public/css/styles.css\" th:href=\"@{/css/styles.css}\" />\n    <link rel=\"icon\" href=\"../public/images/favicon.ico\" th:href=\"@{/images/favicon.ico}\" />\n\n\n    <title>AWS Photo Analyzer</title>\n\n    <script>\n        function myFunction() {\n            alert(\"The form was submitted\");\n        }\n    </script>\n    </head>\n\n    <body>\n    <header th:replace=\"layout :: site-header\"/>\n\n    <div class=\"container\">\n     <h2>AWS Photo Analyzer application</h2>\n     <p>Upload images to an Amazon S3 bucket. Each image will be analyzed!</p>\n\n     <form method=\"POST\" onsubmit=\"myFunction()\" action=\"/upload\" enctype=\"multipart/form-data\">\n      <input type=\"file\" name=\"file\" /><br/><br/>\n      <input type=\"submit\" value=\"Submit\" />\n     </form>\n    <div>\n    <br>\n\n    <p>Choose the following button to determine the number of images in the bucket.</p>\n\n    <button onclick=\"getImages()\">Get Images</button>\n    <table id=\"myTable\" class=\"display\" style=\"width:100%\">\n        <thead>\n        <tr>\n            <th>Name</th>\n            <th>Owner</th>\n            <th>Date</th>\n            <th>Size</th>\n        </tr>\n        </thead>\n        <tbody>\n        <tr>\n            <td>No Data</td>\n            <td>No Data</td>\n            <td>No Data </td>\n            <td>No Data</td>\n        </tr>\n        </tbody>\n        <tfoot>\n        <tr>\n            <th>Name</th>\n            <th>Owner</th>\n            <th>Date</th>\n            <th>Size</th>\n        </tr>\n        </tfoot>\n        <div id=\"success3\"></div>\n    </table>\n    </div>\n    </div>\n    </body>\n    </html>\n```\n\n----------------------------------------\n\nTITLE: Retrieving CloudWatch Metric Widget Image in Kotlin\nDESCRIPTION: This code snippet demonstrates how to retrieve a metric widget image from CloudWatch using the AWS SDK for Kotlin. It's part of a larger CloudWatch scenario.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/cloudwatch/README.md#2025-04-09_snippet_12\n\nLANGUAGE: Kotlin\nCODE:\n```\nGetMetricWidgetImage\n```\n\n----------------------------------------\n\nTITLE: Describing ECR Images using AWS CLI\nDESCRIPTION: This command describes the images in the ECR repository named 'echo-text' with the specified image tag.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/basics/ecr/SPECIFICATION.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\naws ecr describe-images --repository-name echo-text --image-ids imageTag=echo-text\n```\n\n----------------------------------------\n\nTITLE: SQS JMS Interface Implementation\nDESCRIPTION: Example showing how to use the Amazon SQS Java Messaging Library with the JMS interface for message processing. Includes implementation of TextMessageSender for JMS-compliant messaging.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/sqs/README.md#2025-04-09_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\n// File reference:\n// - src/main/java/com/example/sqs/jms/stdqueue/TextMessageSender.java\n```\n\n----------------------------------------\n\nTITLE: Running AWS Lambda PHP Examples as PHPUnit Tests\nDESCRIPTION: This command shows how to run the AWS Lambda PHP examples as part of a PHPUnit test suite, automatically selecting choices.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/php/example_code/lambda/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n..\\..\\vendor\\bin\\phpunit LambdaBasicsTests.php\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Required Version and Project Configuration\nDESCRIPTION: Sets the minimum required CMake version to 3.14 and configures AWS service components (sesv2 and rds-data) for the ServerlessAuroraGTest project. Also enables shared libraries.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/cross-service/serverless-aurora/tests/CMakeLists.txt#2025-04-09_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Set the minimum required version of CMake for this project.\ncmake_minimum_required(VERSION 3.14)\nset(SERVICE_COMPONENTS sesv2 rds-data)\n\nset(BUILD_SHARED_LIBS ON)\n\n# Set this project's name.\nproject(\"ServerlessAuroraGTest\")\nset(EXECUTABLE serverless_aurora_gtest)\n```\n\n----------------------------------------\n\nTITLE: Certificate Management Operations with AWS ACM Java SDK\nDESCRIPTION: Collection of Java code examples for common ACM operations including adding/removing tags, importing/exporting certificates, listing certificates and their tags, and certificate lifecycle management. Each example demonstrates a specific ACM API operation using the AWS SDK for Java 2.x.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/acm/README.md#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n- AddTagsToCertificate\n- DeleteCertificate\n- DescribeCertificate\n- ExportCertificate\n- ImportCertificate\n- ListCertificates\n- ListTagsForCertificate\n- RemoveTagsFromCertificate\n- RenewCertificate\n- RequestCertificate\n```\n\n----------------------------------------\n\nTITLE: Deprecated HTML Photo Album Example for Amazon S3\nDESCRIPTION: This snippet was part of a complete HTML example for a photo album using Amazon S3. It has been replaced by a newer example in the AWS documentation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/s3/dead-snippets.txt#2025-04-09_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n// snippet-start:[s3.HTML.photoAlbumExample.completeV3]\nThis code example has been superseded by the example in\nCode examples > Amazon S3 > Create a web page that lists S3 objects\n// snippet-end:[s3.HTML.photoAlbumExample.completeV3]\n```\n\n----------------------------------------\n\nTITLE: Deleting MediaStore Container in Kotlin\nDESCRIPTION: Shows how to delete an existing MediaStore container using the AWS SDK for Kotlin. This operation requires appropriate IAM permissions and the container name as input.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/mediastore/README.md#2025-04-09_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nDeleteContainer - Demonstrates how to delete a given MediaStore container.\n```\n\n----------------------------------------\n\nTITLE: Destroying Cognito Resources with AWS CDK\nDESCRIPTION: Command to tear down and remove all Cognito resources that were deployed using the AWS CDK.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/resources/cdk/cognito_scenario_user_pool_with_mfa/README.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncdk destroy\n```\n\n----------------------------------------\n\nTITLE: Running an Example Using run_example.sh Script\nDESCRIPTION: This command demonstrates how to use the run_example.sh script to execute a Java example (ListBuckets) after setting the JAVA_SDK_HOME variable.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/java/README.rst#2025-04-09_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\n./run_example.sh ListBuckets\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Packages\nDESCRIPTION: Command to install the required Python packages for running the ECR examples in a virtual environment\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/ecr/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Listing Auto Scaling Groups in Rust\nDESCRIPTION: This code snippet demonstrates how to use the DescribeAutoScalingGroups operation to list Auto Scaling groups using the AWS SDK for Rust.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/auto-scaling/README.md#2025-04-09_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nsrc/bin/list-autoscaling-groups.rs#L22\n```\n\n----------------------------------------\n\nTITLE: Generate Data Key Without Plaintext Reference - Rust\nDESCRIPTION: Reference to code example for generating an encrypted data key without plaintext using AWS KMS with the Rust SDK\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/kms/README.md#2025-04-09_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nsrc/bin/generate-data-key-without-plaintext.rs#L27\n```\n\n----------------------------------------\n\nTITLE: Lambda Function Test JSON Input\nDESCRIPTION: JSON test input for the Lambda function that specifies the S3 bucket containing PPE images to analyze. The bucketName parameter must be set to a valid S3 bucket name.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_lambda_ppe/README.md#2025-04-09_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n\"bucketName\": \"<Bucket name>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing WorkItem Java Class for Data Model\nDESCRIPTION: A plain Java class that represents a WorkItem with properties for tracking tasks. This class includes standard getter and setter methods for all fields, serving as a basic data structure or POJO (Plain Old Java Object).\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_dynamodb_web_app/README.md#2025-04-09_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\npackage com.aws.rest;\n\npublic class WorkItem {\n\n    private String id;\n    private String name;\n    private String guide ;\n    private String date;\n    private String description;\n    private String status;\n    private int archived ;\n\n    public int getArchived() {\n        return this.archived;\n    }\n\n    public void setArchived(int archived) {\n        this.archived = archived;\n    }\n\n    public void setId (String id) {\n        this.id = id;\n    }\n\n    public String getId() {\n        return this.id;\n    }\n\n    public void setStatus (String status) {\n        this.status = status;\n    }\n\n    public String getStatus() {\n        return this.status;\n    }\n\n    public void setDescription (String description) {\n        this.description = description;\n    }\n\n    public String getDescription() {\n        return this.description;\n    }\n\n    public void setDate (String date) {\n        this.date = date;\n    }\n\n    public String getDate() {\n        return this.date;\n    }\n\n    public void setName (String name) {\n        this.name = name;\n    }\n\n    public String getName() {\n        return this.name;\n    }\n\n    public void setGuide (String guide) {\n        this.guide = guide;\n    }\n\n    public String getGuide() {\n        return this.guide;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: AWS OpenSearch Service Operations Console Output\nDESCRIPTION: Complete console output demonstrating the lifecycle of an AWS OpenSearch domain, including creation, configuration, modification, tagging, and deletion. The output shows interaction with OpenSearch Service APIs and includes status updates, domain endpoints, and configuration details.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/basics/opensearch/SPECIFICATION.md#2025-04-09_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nThese operations exposed by the OpenSearch Service client is focused on managing the OpenSearch Service domains\nand their configurations, not the data within the domains (such as indexing or querying documents).\nFor document management, you typically interact directly with the OpenSearch REST API or use other libraries,\nsuch as the OpenSearch Java client.\n\nLets get started...\n\n\nEnter 'c' followed by <ENTER> to continue:\nc\nContinuing with the program...\n\n--------------------------------------------------------------------------------\n1. Create an Amazon OpenSearch domain\nAn Amazon OpenSearch domain is a managed instance of the OpenSearch engine,\nwhich is an open-source search and analytics engine derived from Elasticsearch.\nAn OpenSearch domain is essentially a cluster of compute resources and storage that hosts\none or more OpenSearch indexes, enabling you to perform full-text searches, data analysis, and\nvisualizations.\n\n[...remaining console output...]\n```\n\n----------------------------------------\n\nTITLE: Repository URL for AWS STS Examples in Rust\nDESCRIPTION: URL pointing to the new location of the AWS STS examples in the Rust SDK documentation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rust_dev_preview/examples/sts/README.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://github.com/awsdocs/aws-doc-sdk-examples/blob/rust_dev_preview/rustv1/examples/sts/README.md\n```\n\n----------------------------------------\n\nTITLE: Implementing WorkCount Data Class in Java\nDESCRIPTION: The WorkCount class is a simple data container that tracks the count of work items. It provides getter and setter methods for the count property and is used by the photo management application to track processing statistics.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/pam_source_files/README.md#2025-04-09_snippet_19\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.photo;\n\npublic class WorkCount {\n\n    private int count;\n\n    public int getCount() {\n        return this.count;\n    }\n    public void setCount(int count) {\n        this.count = count;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Console Output from S3 Express Basics Demo in PHP\nDESCRIPTION: Example console output showing the execution of an S3 Express Basics demo program in PHP. It demonstrates creating buckets, copying objects, performance testing, and comparing lexicographical differences between standard and directory buckets.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/basics/s3express/SPECIFICATION.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--------------------------------------\nWelcome to the Amazon S3 Express Basics demo using PHP!\n--------------------------------------\nLet's get started! First, please note that S3 Express One Zone works best when working within the AWS infrastructure,\nspecifically when working in the same Availability Zone. To see the best results in this example, and when you implement\nDirectory buckets into your infrastructure, it is best to put your Compute resources in the same AZ as your Directory\nbucket.\n\n1. First, we'll set up a new VPC and VPC Endpoint if this program is running in an EC2 instance in the same AZ as your Directory buckets will be.\nSkipping the VPC setup. Don't forget to use this in production!\n\n2. Policies, users, and roles with CDK.\nNow, we'll set up some policies, roles, and a user. This user will only have permissions to do S3 Express One Zone actions.\n\n3. Create an additional client using the credentials with S3 Express permissions.\nThis client is created with the credentials associated with the user account with the S3 Express policy attached, so it can perform S3 Express operations.\nAll the roles and policies were created an attached to the user. Then, a new S3 Client and Service were created using that user's credentials.\nWe can now use this client to make calls to S3 Express operations. Keeping permissions in mind (and adhering to least-privilege) is crucial to S3 Express.\n\n3. Create two buckets.\nNow we will create a Directory bucket, which is the linchpin of the S3 Express One Zone service.\nDirectory buckets behave in different ways from regular S3 buckets, which we will explore here.\nWe'll also create a normal bucket, put an object into the normal bucket, and copy it over to the Directory bucket.\nNow, let's create the actual Directory bucket, as well as a regular bucket.\nGreat! Both buckets were created.\n\n5. Create an object and copy it over.\nWe'll create a basic object consisting of some text and upload it to the normal bucket.\nNext, we'll copy the object into the Directory bucket using the regular client.\nThis works fine, because Copy operations are not restricted for Directory buckets.\nIt worked! It's important to remember the user permissions when interacting with Directory buckets.\nInstead of validating permissions on every call as normal buckets do, Directory buckets utilize the user credentials and session token to validate.\nThis allows for much faster connection speeds on every call. For single calls, this is low, but for many concurrent calls, this adds up to a lot of time saved.\n\n6. Demonstrate performance difference.\nNow, let's do a performance test. We'll download the same object from each bucket 1000 times and compare the total time needed. Note: the performance difference will be much more pronounced if this example is run in an EC2 instance in the same AZ as the bucket.\nThe directory bucket took 2464126625 nanoseconds, while the normal bucket took 1989507125.\nThat's a difference of -474619500 nanoseconds, or -0.4746195 seconds.\n\n7. Populate the buckets to show the lexicographical difference.\nNow let's explore how Directory buckets store objects in a different manner to regular buckets.\nThe key is in the name \"Directory!\"\nWhere regular buckets store their key/value pairs in a flat manner, Directory buckets use actual directories/folders.\nThis allows for more rapid indexing, traversing, and therefore retrieval times!\nThe more segmented your bucket is, with lots of directories, sub-directories, and objects, the more efficient it becomes.\nThis structural difference also causes ListObjects to behave differently, which can cause unexpected results.\nLet's add a few more objects with layered directories as see how the output of ListObjects changes.\nDirectory bucket content\nother/basic-text-object\nother/alt/basic-text-object\nbasic-text-object\nalt/basic-text-object\n\nNormal bucket content\nalt/basic-text-object\nbasic-text-object\nother/alt/basic-text-object\nother/basic-text-object\nNotice how the normal bucket lists objects in lexicographical order, while the directory bucket does not. This is because the normal bucket considers the whole \"key\" to be the object identifies, while the directory bucket actually creates directories and uses the object \"key\" as a path to the object.\n\nThat's it for our tour of the basic operations for S3 Express One Zone.\n```\n\n----------------------------------------\n\nTITLE: Creating an ECR Repository with Java\nDESCRIPTION: Demonstrates how to create a new Amazon ECR repository using the CreateRepository API.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/ecr/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\n// Referenced from ECRActions.java#L54\n```\n\n----------------------------------------\n\nTITLE: Running Hello DynamoDB Example\nDESCRIPTION: Command to execute the basic Hello DynamoDB example that demonstrates listing DynamoDB tables.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/dynamodb/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython hello/hello_dynamodb.py\n```\n\n----------------------------------------\n\nTITLE: Configuring BASE_URL in config.json for React Frontend\nDESCRIPTION: JSON configuration for setting the base URL that points to your Spring Boot REST API. This configuration ensures the React frontend can properly communicate with the backend API running on localhost port 8080.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/Creating_rds_item_tracker/README.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"BASE_URL\": \"http://localhost:8080/api\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Test in CMake\nDESCRIPTION: Sets up Google Test as a dependency using CMake's FetchContent functionality. It downloads the specific Google Test release 1.12.1 from GitHub and makes it available to the project if it's not already found in the system.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/ec2/tests/CMakeLists.txt#2025-04-09_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT GTest_FOUND)\n    include(FetchContent)\n    FetchContent_Declare(\n            googletest\n            GIT_REPOSITORY https://github.com/google/googletest.git\n            GIT_TAG release-1.12.1\n    )\n\n    # For Windows: Prevent overriding the parent project's compiler/linker settings.\n    set(gtest_force_shared_crt ON CACHE BOOL \"\" FORCE)\n    FetchContent_MakeAvailable(googletest)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Retrieving AWS Glue Database Information with .NET\nDESCRIPTION: This snippet demonstrates how to get information about an AWS Glue database using the AWS SDK for .NET. It returns the database's details.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Glue/README.md#2025-04-09_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nGetDatabase\n```\n\n----------------------------------------\n\nTITLE: Creating an Amazon EKS Cluster in Rust\nDESCRIPTION: This code snippet demonstrates how to create an Amazon EKS cluster using the AWS SDK for Rust. It uses the CreateCluster operation from the EKS API.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/eks/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nsrc/bin/create-delete-cluster.rs#L36\n```\n\n----------------------------------------\n\nTITLE: Creating a VPC using Amazon EC2 with PHP\nDESCRIPTION: This code snippet demonstrates how to create a Virtual Private Cloud (VPC) using the Amazon EC2 service with PHP. It refers to a method named 'CreateVpc' in the EC2Service class.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/php/example_code/ec2/README.md#2025-04-09_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nCreateVpc(EC2Service.php#L67)\n```\n\n----------------------------------------\n\nTITLE: Storing S3 Object Data with BucketItem Class in Java\nDESCRIPTION: The BucketItem class is a simple Java object for storing Amazon S3 object data. It includes properties for key, owner, date, and size, along with getter and setter methods for each property.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_lambda_tag_assets/README.md#2025-04-09_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\npackage com.aws.tags;\n\npublic class BucketItem {\n\n private String key;\n private String owner;\n private String date ;\n private String size ;\n\n\n public void setSize(String size) {\n    this.size = size ;\n }\n\n public String getSize() {\n    return this.size ;\n }\n\n public void setDate(String date) {\n    this.date = date ;\n }\n\n public String getDate() {\n    return this.date ;\n }\n\n public void setOwner(String owner) {\n    this.owner = owner ;\n }\n\n public String getOwner() {\n    return this.owner ;\n }\n\n public void setKey(String key) {\n    this.key = key ;\n }\n\n public String getKey() {\n    return this.key ;\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Running CloudFormation Operations with Go\nDESCRIPTION: Command-line syntax for running the CloudFormation operations. Demonstrates the available flags and required parameters for creating, listing, and deleting stacks.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/example_code/cloudformation/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngo run CfnCodeOps.go [-o all | create | list | delete] [-n stack-name] [-t template-name]\n```\n\n----------------------------------------\n\nTITLE: Setting Object Lock Policies on Individual Files\nDESCRIPTION: This snippet illustrates the process of setting object lock policies on individual files. It demonstrates adding a legal hold and a governance retention period to specific files in different buckets.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/s3_object_lock/SPECIFICATION.md#2025-04-09_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nNow we can set some object lock policies on individual files:\n\nWould you like to add a legal hold to dotnet-example-file0.txt in dotnet-s3-lock-example0-lock-enabled? (y/n)\ny\n        Modified legal hold for dotnet-example-file0.txt in dotnet-s3-lock-example0-lock-enabled.\n\nWould you like to add a 1 day Governance retention period to dotnet-example-file1.txt in dotnet-s3-lock-example0-lock-enabled? (y/n)\nReminder: Only a user with the s3:BypassGovernanceRetention permission will be able to delete this file or its bucket until the retention period has expired.\ny\n```\n\n----------------------------------------\n\nTITLE: Describing an AWS IoT SiteWise Asset in Rust\nDESCRIPTION: This example shows how to describe an AWS IoT SiteWise asset in a specified Region. It requires an asset ID and provides options for specifying the Region and displaying additional information.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/sitewise/README.md#2025-04-09_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ncargo run --bin describe-asset -- -a ASSET-ID [-r REGION] [-v]\n```\n\n----------------------------------------\n\nTITLE: S3 Test File Location Comment\nDESCRIPTION: Comment indicating the new location of the S3 test file in the AWS documentation SDK examples repository.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rust_dev_preview/examples/s3/testfile.txt#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n// This file has been moved to https://github.com/awsdocs/aws-doc-sdk-examples/blob/rust_dev_preview/rustv1/examples/s3/testfile.txt\n```\n\n----------------------------------------\n\nTITLE: Creating Scheduled EventBridge Rule in Java\nDESCRIPTION: Shows how to create an EventBridge rule with a schedule using the PutRule operation. Referenced in the file as CreateRuleSchedule.java.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/eventbridge/README.md#2025-04-09_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Configuring CMake for AWS IoT C++ Project\nDESCRIPTION: Sets up a CMake build configuration for an AWS IoT project using the AWS SDK for C++. Configures minimum CMake version, C++11 standard requirement, AWS SDK dependencies, and platform-specific settings for Windows builds. Includes handling of shared libraries and binary output locations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/iot/hello_iot/CMakeLists.txt#2025-04-09_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# Set the minimum required version of CMake for this project.\ncmake_minimum_required(VERSION 3.13)\n\n# Set the AWS service components used by this project.\nset(SERVICE_COMPONENTS iot)\n\n# Set this project's name.\nproject(\"hello_iot\")\n\n# Set the C++ standard to use to build this target.\n# At least C++ 11 is required for the AWS SDK for C++.\nset(CMAKE_CXX_STANDARD 11)\n\n# Use the MSVC variable to determine if this is a Windows build.\nset(WINDOWS_BUILD ${MSVC})\n\nif (WINDOWS_BUILD) # Set the location where CMake can find the installed libraries for the AWS SDK.\n    string(REPLACE \";\" \"/aws-cpp-sdk-all;\" SYSTEM_MODULE_PATH \"${CMAKE_SYSTEM_PREFIX_PATH}/aws-cpp-sdk-all\")\n    list(APPEND CMAKE_PREFIX_PATH ${SYSTEM_MODULE_PATH})\nendif ()\n\n# Find the AWS SDK for C++ package.\nfind_package(AWSSDK REQUIRED COMPONENTS ${SERVICE_COMPONENTS})\n\nif (WINDOWS_BUILD AND AWSSDK_INSTALL_AS_SHARED_LIBS)\n    # Copy relevant AWS SDK for C++ libraries into the current binary directory for running and debugging.\n\n    # set(BIN_SUB_DIR \"/Debug\") # If you are building from the command line, you may need to uncomment this\n    # and set the proper subdirectory to the executables' location.\n\n    AWSSDK_CPY_DYN_LIBS(SERVICE_COMPONENTS \"\" ${CMAKE_CURRENT_BINARY_DIR}${BIN_SUB_DIR})\nendif ()\n\nadd_executable(${PROJECT_NAME}\n        hello_iot.cpp)\n\ntarget_link_libraries(${PROJECT_NAME}\n        ${AWSSDK_LINK_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: Watching and Compiling CDK TypeScript for Kinesis Examples\nDESCRIPTION: Watches for changes in the TypeScript code and automatically compiles to JavaScript.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/kinesis/kinesis-cdk/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run watch\n```\n\n----------------------------------------\n\nTITLE: Creating an EC2 Security Group\nDESCRIPTION: Shows how to create a security group for EC2 instances to control inbound and outbound traffic. Security groups act as virtual firewalls for EC2 instances.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/EC2/README.md#2025-04-09_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\n// CreateSecurityGroup\n```\n\n----------------------------------------\n\nTITLE: Amazon Rekognition Actions with .NET SDK\nDESCRIPTION: List of available single actions for interacting with Amazon Rekognition, including face comparison, collection management, object detection, text detection, and celebrity recognition functionalities.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Rekognition/README.md#2025-04-09_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n- CompareFaces\n- CreateCollection\n- DeleteCollection\n- DeleteFaces\n- DescribeCollection\n- DetectFaces\n- DetectLabels\n- DetectModerationLabels\n- DetectText\n- GetCelebrityInfo\n- IndexFaces\n- ListCollections\n- ListFaces\n- RecognizeCelebrities\n- SearchFaces\n- SearchFacesByImage\n```\n\n----------------------------------------\n\nTITLE: Deleting an ECR Repository with Java\nDESCRIPTION: Shows how to delete an Amazon ECR repository using the DeleteRepository API.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/ecr/README.md#2025-04-09_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\n// Referenced from ECRActions.java#L101\n```\n\n----------------------------------------\n\nTITLE: Listing Identity Pools with Amazon Cognito Identity in Swift\nDESCRIPTION: This snippet illustrates how to list identity pools using the Amazon Cognito Identity service. It's part of the CognitoIdentityHandler class and likely needs additional context from the full file for proper execution.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/swift/example_code/cognito-identity/README.md#2025-04-09_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\nListIdentityPools\n```\n\n----------------------------------------\n\nTITLE: Listing KMS Keys with PHP\nDESCRIPTION: This snippet demonstrates how to list KMS keys using the AWS SDK for PHP. It's part of the 'Hello AWS KMS' example that shows how to get started with KMS.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/php/example_code/kms/README.md#2025-04-09_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nHelloKMS.php#L5\n```\n\n----------------------------------------\n\nTITLE: UploadEndpoint Class for Handling Image Uploads in Kotlin\nDESCRIPTION: This class manages the process of uploading an image file, storing it in an S3 bucket, analyzing the image for labels, and storing the label information in DynamoDB. It uses S3Service, AnalyzePhotos, and DynamoDBService.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/creating_pam/README.md#2025-04-09_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.example.photo.endpoints\n\nimport com.example.photo.PhotoApplicationResources\nimport com.example.photo.services.AnalyzePhotos\nimport com.example.photo.services.DynamoDBService\nimport com.example.photo.services.S3Service\n\nclass UploadEndpoint {\n    suspend fun upload(bytes: ByteArray, name: String) {\n        // Put the file into the bucket.\n        val s3Service = S3Service()\n        val analyzePhotos = AnalyzePhotos()\n        val dbService = DynamoDBService()\n\n        s3Service?.putObject(bytes, name)\n        val labels = analyzePhotos.detectLabels(PhotoApplicationResources.STORAGE_BUCKET, name)\n        dbService.putRecord(labels)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting an IAM Server Certificate in C++\nDESCRIPTION: Code excerpt showing how to delete an IAM server certificate using the AWS SDK for C++.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/iam/README.md#2025-04-09_snippet_10\n\nLANGUAGE: C++\nCODE:\n```\n// From delete_server_certificate.cpp line 34\n```\n\n----------------------------------------\n\nTITLE: User Input for SNS Topic Creation in C++\nDESCRIPTION: Demonstrates the command-line interface for creating an SNS topic, including options for FIFO topics and content-based deduplication.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/topics_and_queues/SPECIFICATION.md#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nWould you like to work with FIFO topics? (y/n) \n\nUse content-based deduplication instead of a deduplication ID? (y/n)\n\nEnter a name for your SNS topic:\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Resources from Lending Library Example\nDESCRIPTION: Command to remove all AWS resources created during the demonstration using the AWS Cloud Development Kit (CDK), which prevents additional charges to your AWS account.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/cross_service/aurora_rest_lending_library/README.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncdk destroy\n```\n\n----------------------------------------\n\nTITLE: Aurora Documentation URL Redirect\nDESCRIPTION: Link to the new location of Aurora SDK examples in the rust_dev_preview branch\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rust_dev_preview/examples/aurora/README.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://github.com/awsdocs/aws-doc-sdk-examples/blob/rust_dev_preview/rustv1/examples/aurora/README.md\n```\n\n----------------------------------------\n\nTITLE: File Relocation Comment\nDESCRIPTION: A comment indicating the new location of the requirements.txt file in the rust_dev_preview branch of the AWS SDK examples repository.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rust_dev_preview/tools/requirements.txt#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n// This file has been moved to https://github.com/awsdocs/aws-doc-sdk-examples/blob/rust_dev_preview/rustv1/tools/requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Describing DB Instances using Amazon RDS in Java\nDESCRIPTION: This code snippet demonstrates how to describe DB instances using the Amazon RDS service with AWS SDK for Java 2.x. It uses the DescribeDBInstances operation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/rds/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nsrc/main/java/com/example/rds/DescribeDBInstances.java#L6\n```\n\n----------------------------------------\n\nTITLE: Running Scenario Scripts in Node.js\nDESCRIPTION: Command for executing Amazon SES scenario scripts using Node.js\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/ses/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnode ./scenarios/<fileName>\n```\n\n----------------------------------------\n\nTITLE: Running ECR Getting Started Example\nDESCRIPTION: Command to run the comprehensive ECR example that demonstrates repository management, policies, and image operations\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/ecr/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython ecr_getting_started.py\n```\n\n----------------------------------------\n\nTITLE: Creating S3 Buckets with Different Locking Options\nDESCRIPTION: This snippet demonstrates the creation of S3 buckets with various object locking configurations. It creates three buckets: one without locking, one with object lock enabled on creation, and one with object lock enabled after creation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/s3_object_lock/SPECIFICATION.md#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nS3 buckets can be created either with or without object lock enabled.\n        Creating bucket dotnet-s3-lock-example0-no-lock with object lock False.\n        Creating bucket dotnet-s3-lock-example0-lock-enabled with object lock True.\n        Creating bucket dotnet-s3-lock-example0-retention-after-creation with object lock False.\nPress Enter to continue.\n```\n\n----------------------------------------\n\nTITLE: CreateExportTask Implementation in .NET\nDESCRIPTION: Example showing how to create a CloudWatch Logs export task using AWS SDK for .NET. The implementation is referenced in the CreateExportTask.cs file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/CloudWatchLogs/README.md#2025-04-09_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n/* Code reference only - implementation in CreateExportTask.cs#L6 */\n```\n\n----------------------------------------\n\nTITLE: Retrieving Account Info for Access Keys using AWS STS in Kotlin\nDESCRIPTION: Example showing how to get the AWS account identifier associated with a specific access key ID using the GetAccessKeyInfo operation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/sts/README.md#2025-04-09_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Sending an Email Message via Amazon SES in Go\nDESCRIPTION: This example demonstrates how to send an email message to a recipient using Amazon SES. It requires the sender and recipient email addresses as command-line arguments, with an optional subject argument.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/ses/README.md#2025-04-09_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\ngo run SendMessage.go -f SENDER -t RECIPIENT [-s SUBJECT]\n```\n\n----------------------------------------\n\nTITLE: Implementing GetHandler for LabelsFn Lambda Function in Java\nDESCRIPTION: This class handles the LabelsFn Lambda function, which retrieves labels from a DynamoDB table and returns them in a structured format. It uses the AWS Lambda Java runtime API and interacts with a DynamoDBService.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/pam_source_files/README.md#2025-04-09_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\npackage com.example.photo.handlers;\n\nimport com.amazonaws.services.lambda.runtime.Context;\nimport com.amazonaws.services.lambda.runtime.RequestHandler;\nimport com.amazonaws.services.lambda.runtime.events.APIGatewayProxyRequestEvent;\nimport com.amazonaws.services.lambda.runtime.events.APIGatewayProxyResponseEvent;\nimport com.example.photo.WorkCount;\nimport com.example.photo.services.DynamoDBService;\n\nimport java.util.Map;\nimport java.util.TreeMap;\n\nimport static com.example.photo.PhotoApplicationResources.makeResponse;\n\npublic class GetHandler implements RequestHandler<APIGatewayProxyRequestEvent, APIGatewayProxyResponseEvent> {\n    @Override\n    public APIGatewayProxyResponseEvent handleRequest(APIGatewayProxyRequestEvent input, Context context) {\n        context.getLogger().log(\"In Labels handler\");\n\n        DynamoDBService dbService = new DynamoDBService();\n        Map<String, WorkCount> map = dbService.scanPhotoTable();\n\n        context.getLogger().log(\"Retrieved photos: \" + map.size());\n\n        Map<String, Map<String, WorkCount>> data = new TreeMap<>();\n        data.put(\"labels\", map);\n\n        return makeResponse(data);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding an Item to DynamoDB Table with C++\nDESCRIPTION: This code snippet illustrates how to add a new item to a DynamoDB table using the AWS SDK for C++. It creates a new entry with the specified attributes.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/dynamodb/README.md#2025-04-09_snippet_11\n\nLANGUAGE: C++\nCODE:\n```\nPutItem\n```\n\n----------------------------------------\n\nTITLE: Creating Auto Scaling Group Configuration\nDESCRIPTION: Python code for configuring an Auto Scaling group with availability zones and launch template specifications.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/resilient_service/SPECIFICATION.md#2025-04-09_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nAvailabilityZones=zones,\nLaunchTemplate={\n    'LaunchTemplateName': launch_template_name, 'Version': '$Default'},\nMinSize=group_size, MaxSize=group_size)\n```\n\n----------------------------------------\n\nTITLE: Deleting Amazon EC2 Key Pair in Go\nDESCRIPTION: This example deletes an Amazon EC2 key pair. It requires the key name as a command-line argument.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/ec2/README.md#2025-04-09_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\ngo run DeleteKeyPair.go -k KEY-NAME\n```\n\n----------------------------------------\n\nTITLE: Repository URL Redirect for AWS Kinesis Rust Examples\nDESCRIPTION: New location URL for AWS Kinesis Rust SDK example documentation in the rust_dev_preview branch of the aws-doc-sdk-examples repository.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rust_dev_preview/examples/kinesis/README.md#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://github.com/awsdocs/aws-doc-sdk-examples/blob/rust_dev_preview/rustv1/examples/kinesis/README.md\n```\n\n----------------------------------------\n\nTITLE: Creating OpsItem\nDESCRIPTION: Creates a new operational item (OpsItem) using the CreateOpsItem API.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/ssm/README.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nsrc/main/java/com/example/scenario/SSMActions.java#L314\n```\n\n----------------------------------------\n\nTITLE: Setting Query Date Range Environment Variables\nDESCRIPTION: Sets environment variables for query start and end dates based on output from the previous script.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/cloudwatch-logs/scenarios/large-query/README.md#2025-04-09_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nexport QUERY_START_DATE=<...>\nexport QUERY_END_DATE=<...>\n```\n\n----------------------------------------\n\nTITLE: Printing Error Messages in Python\nDESCRIPTION: A function to print error messages to the console. It takes an exception object as input and prints the error message.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/sesv2_weekly_mailer/content/63a_newsletter.py.md#2025-04-09_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ndef print_error(error):\n    \"\"\"\n    Prints the error message to the console.\n\n    Args:\n        error (Exception): The exception object.\n    \"\"\"\n    print(f\"Error: {error}\")\n```\n\n----------------------------------------\n\nTITLE: Getting S3 Objects in JavaScript\nDESCRIPTION: This code snippet demonstrates how to retrieve an object from an S3 bucket using the GetObject operation in the AWS SDK for JavaScript (v3).\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/s3/README.md#2025-04-09_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\n- [GetObject](actions/get-object.js#L4)\n```\n\n----------------------------------------\n\nTITLE: Support API Individual Operations\nDESCRIPTION: Collection of individual Support API operations including AddAttachmentsToSet, AddCommunicationToCase, CreateCase, DescribeAttachment, DescribeCases, DescribeCommunications, DescribeServices, DescribeSeverityLevels, and ResolveCase.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Support/README.md#2025-04-09_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nSupportWrapper.cs\n```\n\n----------------------------------------\n\nTITLE: Listing AWS IoT Things using Kotlin\nDESCRIPTION: This snippet demonstrates how to list AWS IoT Things using the listThings operation from the AWS SDK for Kotlin.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/iot/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nlistThings\n```\n\n----------------------------------------\n\nTITLE: Running Hello Support Example in JavaScript\nDESCRIPTION: Command to run the Hello Support example that demonstrates basic interaction with AWS Support services.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/support/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode ./hello.js\n```\n\n----------------------------------------\n\nTITLE: Deleting an Identity in Amazon SES using C++\nDESCRIPTION: This example shows how to delete an identity in Amazon SES using the AWS SDK for C++. The code can be found in the 'delete_identity.cpp' file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/ses/README.md#2025-04-09_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\n// See delete_identity.cpp, line 21\n```\n\n----------------------------------------\n\nTITLE: Implementing DynamoDB Operations with Enhanced Client\nDESCRIPTION: Java class that handles DynamoDB operations using Enhanced Client. Includes methods for adding records, checking label existence, retrieving images by label, and scanning the photo table. Features atomic counter implementation for the count field.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/pam_source_files/README.md#2025-04-09_snippet_9\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.photo.services;\n\nimport com.example.photo.PhotoApplicationResources;\nimport com.example.photo.Label;\nimport com.example.photo.WorkCount;\nimport com.example.photo.LabelCount;\nimport software.amazon.awssdk.enhanced.dynamodb.DynamoDbEnhancedClient;\nimport software.amazon.awssdk.enhanced.dynamodb.DynamoDbTable;\nimport software.amazon.awssdk.enhanced.dynamodb.Key;\nimport software.amazon.awssdk.enhanced.dynamodb.TableSchema;\nimport software.amazon.awssdk.enhanced.dynamodb.model.QueryConditional;\nimport software.amazon.awssdk.services.dynamodb.DynamoDbClient;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\n\npublic class DynamoDBService {\n    private DynamoDbClient getClient() {\n        return DynamoDbClient.builder()\n            .region(PhotoApplicationResources.REGION)\n            .build();\n    }\n\n    // Insert label data into an Amazon DynamoDB table.\n    public void putRecord(List<LabelCount> list) {\n        DynamoDbEnhancedClient enhancedClient = DynamoDbEnhancedClient.builder()\n            .dynamoDbClient(getClient())\n            .build();\n\n        DynamoDbTable<com.example.photo.Label> table = enhancedClient.table(PhotoApplicationResources.LABELS_TABLE,\n            TableSchema.fromBean(Label.class));\n\n        for (LabelCount count : list) {\n            addSingleRecord(table, count.getName(), count.getKey());\n        }\n    }\n\n    private void addSingleRecord(DynamoDbTable<Label> table, String label, String key) {\n        // Check to see if the label exists in the Amazon DynamoDB table.\n        // The count item uses an @DynamoDbAtomicCounter which means it is\n        // updated automatically. No need to manually set this value when the record is\n        // created or updated.\n        if (!checkLabelExists(table, label)) {\n            Label photoRec = new Label();\n            photoRec.setId(label);\n            List<String> keyList = new ArrayList<>();\n            keyList.add(key);\n            photoRec.setImages(keyList);\n            table.putItem(photoRec);\n        } else {\n            // The label exists in the table.\n            Key myKey = Key.builder()\n                .partitionValue(label)\n                .build();\n\n            // Add the file name to the list.\n            Label myPhoto = table.getItem(myKey);\n            Label updatedPhoto = new Label();\n            List<String> imageList = myPhoto.getImages();\n            imageList.add(key);\n            updatedPhoto.setId(label);\n            updatedPhoto.setImages(imageList);\n            table.updateItem(updatedPhoto);\n        }\n    }\n\n    private Boolean checkLabelExists(DynamoDbTable<Label> table, String label) {\n        QueryConditional queryConditional = QueryConditional.keyEqualTo(Key.builder()\n            .partitionValue(label)\n            .build());\n\n        Iterator<Label> results = table.query(queryConditional).items().iterator();\n        return results.hasNext();\n    }\n\n    public List<String> getImagesByLabel(String label) {\n        DynamoDbEnhancedClient enhancedClient = DynamoDbEnhancedClient.builder()\n            .dynamoDbClient(getClient())\n            .build();\n\n        DynamoDbTable<com.example.photo.Label> table = enhancedClient.table(PhotoApplicationResources.LABELS_TABLE,\n            TableSchema.fromBean(Label.class));\n        Key key = Key.builder()\n            .partitionValue(label)\n            .build();\n\n        // Get the item by using the key.\n        Label result = table.getItem(r -> r.key(key));\n        return (result == null) ? List.of() : result.getImages();\n    }\n\n    // Scan the table and send data back to the client.\n    public Map<String, WorkCount> scanPhotoTable() {\n        Map<String, WorkCount> myMap = new HashMap<>();\n        DynamoDbEnhancedClient enhancedClient = DynamoDbEnhancedClient.builder()\n            .dynamoDbClient(getClient())\n            .build();\n\n        DynamoDbTable<Label> table = enhancedClient.table(PhotoApplicationResources.LABELS_TABLE,\n            TableSchema.fromBean(Label.class));\n\n        for (Label photo : table.scan().items()) {\n            WorkCount wc = new WorkCount();\n            wc.setCount(photo.getCount());\n            myMap.put(photo.getId(), wc);\n        }\n\n        return myMap;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating DB Instance in Amazon RDS using C++\nDESCRIPTION: This code snippet references the CreateDBInstance action at line 481 in the getting_started_with_db_instances.cpp file, which demonstrates how to create a DB instance in Amazon RDS that is configured to use a specific parameter group using the AWS SDK for C++.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/rds/README.md#2025-04-09_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: GetFeedback Lambda Output Schema\nDESCRIPTION: JSON schema showing the output format from the GetFeedback Lambda function that retrieves feedback data\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/applications/feedback_sentiment_analyzer/SPECIFICATION.md#2025-04-09_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"feedback\": [\n    {\n      \"sentiment\": \"POSITIVE\",\n      \"text\": \"THIS HOTEL WAS GREAT\",\n      \"audioUrl\": \"PXL_20230710_182358532.jpg.mp3\",\n      \"imageUrl\": \"PXL_20230710_182358532.jpg\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running tests for Amazon Redshift C++ examples\nDESCRIPTION: Commands to build and run tests for the Amazon Redshift C++ code examples. This includes navigating to the build directory, configuring with CMake, building, and running tests with ctest.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/redshift/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncd <BUILD_DIR>\ncmake <path-to-root-of-this-source-code> -DBUILD_TESTS=ON\nmake\nctest\n```\n\n----------------------------------------\n\nTITLE: Python Package Dependencies List\nDESCRIPTION: Requirements file specifying exact versions of Python packages needed for AWS SDK examples. Includes AWS SDK packages (boto3, botocore), HTTP libraries (requests, urllib3), and utility packages.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/bedrock-runtime/cross-model-scenarios/tool_use_demo/requirements.txt#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nboto3==1.34.124\nbotocore==1.34.124\ncertifi==2024.7.4\ncharset-normalizer==3.3.2\nidna==3.7\njmespath==1.0.1\npython-dateutil==2.9.0.post0\nrequests==2.32.3\ns3transfer==0.10.1\nsix==1.16.0\nurllib3==2.2.1\n```\n\n----------------------------------------\n\nTITLE: Sending Task Success Response with AWS Step Functions Java SDK\nDESCRIPTION: This code snippet demonstrates how to send a success response to a task using the AWS Step Functions Java SDK. It utilizes the sendTaskSuccess command to indicate successful task completion.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/stepfunctions/README.md#2025-04-09_snippet_12\n\nLANGUAGE: Java\nCODE:\n```\n// Code snippet for sending task success response\n// Refer to: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/route53/src/main/java/com/example/route/StepFunctionsScenario.java\n```\n\n----------------------------------------\n\nTITLE: Invoking Meta Llama 2 model in C#\nDESCRIPTION: Demonstrates how to invoke the Meta Llama 2 model using Amazon Bedrock Runtime.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv4/Bedrock-runtime/README.md#2025-04-09_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\nModels/MetaLlama/Llama2_InvokeModel/InvokeModel.cs#L4\n```\n\n----------------------------------------\n\nTITLE: Deleting SageMaker Model using AWS SDK for SAP ABAP\nDESCRIPTION: This code snippet illustrates how to delete a SageMaker model using the AWS SDK for SAP ABAP. It references a method in the zcl_aws1_sgm_actions class.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/sap-abap/services/sagemaker/README.md#2025-04-09_snippet_5\n\nLANGUAGE: ABAP\nCODE:\n```\nzcl_aws1_sgm_actions.clas.abap#L432\n```\n\n----------------------------------------\n\nTITLE: Creating a Model Class for Spring MVC Application\nDESCRIPTION: This Greeting class serves as the model for the Spring Boot application. It represents the data structure for form submissions with properties for id, body, name, and title.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_first_project/README.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.handlingformsubmission;\n\npublic class Greeting {\n    private String id;\n    private String body;\n    private String name;\n    private String title;\n\n    public String getTitle() {\n       \treturn this.title;\n    }\n\n    public void setTitle(String title) {\n       \tthis.title = title;\n    }\n\n    public String getName() {\n       \treturn this.name;\n    }\n\n    public void setName(String name) {\n       \tthis.name = name;\n    }\n\n    public String getId() {\n       \treturn id;\n    }\n\n    public void setId(String id) {\n       \tthis.id = id;\n    }\n\n    public String getBody() {\n       \treturn this.body;\n    }\n\n    public void setBody(String body) {\n       \tthis.body = body;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Table in Amazon Keyspaces using C#\nDESCRIPTION: This code snippet demonstrates how to delete a table from a keyspace in Amazon Keyspaces using the AWS SDK for .NET. It's an example of a single action operation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Keyspaces/README.md#2025-04-09_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nActions/KeyspacesWrapper.cs#L78\n```\n\n----------------------------------------\n\nTITLE: Running Basic Support Scenario in JavaScript\nDESCRIPTION: Command to run a comprehensive scenario that demonstrates AWS Support operations including creating cases, adding attachments, and resolving cases.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/support/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnode ./scenarios/<fileName>\n```\n\n----------------------------------------\n\nTITLE: Navigating to the React Client Directory\nDESCRIPTION: Command to change the current directory to the React client project folder within the cloned repository.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/resources/clients/react/elwing/src/default-plugins/get-started-plugin/GetStarted.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd aws-doc-sdk-examples/resources/clients/react/elwing\n```\n\n----------------------------------------\n\nTITLE: Converting XML Document to String in Kotlin\nDESCRIPTION: A function that transforms an XML Document object into a string representation using a Transformer. It creates a StringWriter as the output destination and a DOMSource from the XML document to produce the string output.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/creating_redshift_application/README.md#2025-04-09_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nprivate fun convertToString(xml: Document): String? {\n        try {\n            val transformer = TransformerFactory.newInstance().newTransformer()\n            val result = StreamResult(StringWriter())\n            val source = DOMSource(xml)\n            transformer.transform(source, result)\n            return result.writer.toString()\n        } catch (ex: TransformerException) {\n            ex.printStackTrace()\n        }\n        return null\n    }\n```\n\n----------------------------------------\n\nTITLE: Running Python Unit Tests for Textract and Comprehend Notebook\nDESCRIPTION: Instructions for running unit tests on the Textract and Comprehend notebook using the Testbook library. It involves installing Testbook, configuring test variables, and executing the test file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/cross_service/textract_comprehend_notebook/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython test-textract-comprehend.py\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Packages\nDESCRIPTION: Command to install the required Python packages using pip package manager within a virtual environment.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/config/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Deleting an IAM Policy in C++\nDESCRIPTION: Code excerpt showing how to delete an IAM policy using the AWS SDK for C++.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/iam/README.md#2025-04-09_snippet_9\n\nLANGUAGE: C++\nCODE:\n```\n// From delete_policy.cpp line 38\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for AWS SDK Examples\nDESCRIPTION: This requirements file lists the Python package dependencies needed for AWS SDK examples. It specifies boto3 version 1.26.79 or higher for AWS SDK functionality and pytest version 7.2.1 or higher for testing purposes.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/auto-scaling/requirements.txt#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nboto3>=1.26.79\npytest>=7.2.1\n```\n\n----------------------------------------\n\nTITLE: Describing a Rule in EventBridge with Kotlin\nDESCRIPTION: This example demonstrates how to describe a rule in Amazon EventBridge using the AWS SDK for Kotlin. It utilizes the DescribeRule operation to retrieve details about a specific rule.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/eventbridge/README.md#2025-04-09_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\nDescribeRule\n```\n\n----------------------------------------\n\nTITLE: Uploading Objects to S3 in JavaScript\nDESCRIPTION: This code snippet shows how to upload an object to an S3 bucket using the PutObject operation in the AWS SDK for JavaScript (v3).\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/s3/README.md#2025-04-09_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\n- [PutObject](actions/put-object.js#L4)\n```\n\n----------------------------------------\n\nTITLE: Creating a CloudFormation Stack with AWS SDK for Rust\nDESCRIPTION: This code example demonstrates how to create a CloudFormation stack using the AWS SDK for Rust. It uses the CreateStack operation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/cloudformation/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nsrc/bin/create-stack.rs\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for AWS Auto Scaling C++ Project\nDESCRIPTION: Sets up a CMake build configuration for an AWS Auto Scaling application using the AWS SDK for C++. Includes platform-specific handling for Windows builds, sets C++11 as the minimum standard, and configures necessary AWS SDK components and dependencies.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/autoscaling/hello_autoscaling/CMakeLists.txt#2025-04-09_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# Set the minimum required version of CMake for this project.\ncmake_minimum_required(VERSION 3.13)\n\n# Set the AWS service components used by this project.\nset(SERVICE_COMPONENTS autoscaling)\n\n# Set this project's name.\nproject(\"hello_autoscaling\")\n\n# Set the C++ standard to use to build this target.\n# At least C++ 11 is required for the AWS SDK for C++.\nset(CMAKE_CXX_STANDARD 11)\n\n# Use the MSVC variable to determine if this is a Windows build.\nset(WINDOWS_BUILD ${MSVC})\n\nif (WINDOWS_BUILD) # Set the location where CMake can find the installed libraries for the AWS SDK.\n    string(REPLACE \";\" \"/aws-cpp-sdk-all;\" SYSTEM_MODULE_PATH \"${CMAKE_SYSTEM_PREFIX_PATH}/aws-cpp-sdk-all\")\n    list(APPEND CMAKE_PREFIX_PATH ${SYSTEM_MODULE_PATH})\nendif ()\n\n# Find the AWS SDK for C++ package.\nfind_package(AWSSDK REQUIRED COMPONENTS ${SERVICE_COMPONENTS})\n\nif (WINDOWS_BUILD AND AWSSDK_INSTALL_AS_SHARED_LIBS)\n     # Copy relevant AWS SDK for C++ libraries into the current binary directory for running and debugging.\n\n     # set(BIN_SUB_DIR \"/Debug\") # If you are building from the command line, you may need to uncomment this \n                                    # and set the proper subdirectory to the executables' location.\n\n     AWSSDK_CPY_DYN_LIBS(SERVICE_COMPONENTS \"\" ${CMAKE_CURRENT_BINARY_DIR}${BIN_SUB_DIR})\nendif ()\n\nadd_executable(${PROJECT_NAME}\n        hello_autoscaling.cpp)\n\ntarget_link_libraries(${PROJECT_NAME}\n        ${AWSSDK_LINK_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: Creating a Ledger in Amazon QLDB using Rust\nDESCRIPTION: This code snippet demonstrates how to create a ledger in Amazon QLDB using the AWS SDK for Rust. It references the CreateLedger function located in the create-ledger.rs file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/qldb/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nsrc/bin/create-ledger.rs#L27\n```\n\n----------------------------------------\n\nTITLE: Deleting a Rule in EventBridge using AWS SDK for .NET\nDESCRIPTION: Method to delete an EventBridge rule by name. This removes the specified rule from the event bus.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/EventBridge/README.md#2025-04-09_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nDeleteRule\n```\n\n----------------------------------------\n\nTITLE: Deleting Item from DynamoDB Table in ABAP\nDESCRIPTION: This code excerpt shows how to delete an item from a DynamoDB table using the AWS SDK for SAP ABAP. It is one of the single action examples provided.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/sap-abap/services/dyn/README.md#2025-04-09_snippet_1\n\nLANGUAGE: ABAP\nCODE:\n```\nzcl_aws1_dyn_actions.clas.abap#L117\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Bash/Zsh\nDESCRIPTION: Commands for setting required environment variables (PAM_NAME, PAM_EMAIL, PAM_LANG) in Bash or Zsh shells. These variables configure the stack identity, user account email, and programming language for Lambda functions.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/applications/photo-asset-manager/cdk/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport PAM_NAME=\nexport PAM_EMAIL=\nexport PAM_LANG=\n```\n\n----------------------------------------\n\nTITLE: Running Amazon S3 ListObjectsV2 Operation in Rust\nDESCRIPTION: This command demonstrates how to run the example that gets the accumulated size of objects with a specified prefix in an S3 bucket. It uses command-line arguments for bucket name, prefix, region, and verbose output.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/testing/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncargo run -- -b BUCKET -p PREFIX [-r REGION] [-v]\n```\n\n----------------------------------------\n\nTITLE: HelloGlacier - Basic S3 Glacier Operations\nDESCRIPTION: Demonstrates basic S3 Glacier operations including listing vaults using the ListVaults API\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Glacier/README.md#2025-04-09_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nListVaults\n```\n\n----------------------------------------\n\nTITLE: Running Hello Amazon ECR Example\nDESCRIPTION: Command to execute the basic Hello Amazon ECR example that demonstrates listing images\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/ecr/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython hello/hello_ecr.py\n```\n\n----------------------------------------\n\nTITLE: Deleting CloudWatch Alarm Command\nDESCRIPTION: Command line usage pattern for deleting a CloudWatch alarm.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/cloudwatch/README.md#2025-04-09_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ngo run DeleteAlarm.go -a ALARM\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for AWS SDK Examples\nDESCRIPTION: This snippet defines the minimum required versions of boto3 and pytest for running AWS SDK examples. boto3 is the AWS SDK for Python, while pytest is a testing framework used for running unit tests.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/aurora/requirements.txt#2025-04-09_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nboto3>=1.26.79\npytest>=7.2.1\n```\n\n----------------------------------------\n\nTITLE: Deleting a Table in Amazon Keyspaces using Kotlin\nDESCRIPTION: This code snippet shows how to delete a table in Amazon Keyspaces using the AWS SDK for Kotlin. It's part of the single actions examples.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/keyspaces/README.md#2025-04-09_snippet_4\n\nLANGUAGE: Kotlin\nCODE:\n```\nsrc/main/kotlin/com/example/keyspace/ScenarioKeyspaces.kt#L253\n```\n\n----------------------------------------\n\nTITLE: Running Hello Amazon S3 Example with Python\nDESCRIPTION: Command to execute the Hello Amazon S3 example which demonstrates how to list buckets in your AWS account using the ListBuckets operation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/s3/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython s3_basics/hello.py\n```\n\n----------------------------------------\n\nTITLE: Creating an AWS Glue Job in Rust\nDESCRIPTION: This code snippet demonstrates how to create an AWS Glue job using the AWS SDK for Rust. It uses the CreateJob operation to define a new job with specific configuration details.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/glue/README.md#2025-04-09_snippet_2\n\nLANGUAGE: Rust\nCODE:\n```\n- [CreateJob](src/prepare.rs#L253)\n```\n\n----------------------------------------\n\nTITLE: Creating S3 Access Point using AWS CLI\nDESCRIPTION: This command creates an S3 access point for the bucket 'amzn-s3-demo-bucket' with a specific name and account ID using the AWS CLI.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/cross-service/S3ObjectLambdaFunction/README.md#2025-04-09_snippet_2\n\nLANGUAGE: CMD\nCODE:\n```\naws s3control create-access-point --bucket amzn-s3-demo-bucket --name amzn-s3-demo-bucket-ACCESSPOINT --account-id 111122223333\n```\n\n----------------------------------------\n\nTITLE: Generate Random Reference - Rust\nDESCRIPTION: Reference to code example for generating random data using AWS KMS with the Rust SDK\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/kms/README.md#2025-04-09_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nsrc/bin/generate-random.rs#L27\n```\n\n----------------------------------------\n\nTITLE: Implementing PutRecord Operation in Data Firehose with Java SDK\nDESCRIPTION: Shows how to put a single record into a Data Firehose delivery stream. This is a core operation for sending individual records for real-time streaming data delivery.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/firehose/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nsrc/main/java/com/example/firehose/scenario/FirehoseScenario.java#L92\n```\n\n----------------------------------------\n\nTITLE: Uploading File to S3 Bucket using AWS CLI\nDESCRIPTION: This command uploads a local file named 'tutorial.txt' to the previously created S3 bucket using the AWS CLI.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/cross-service/S3ObjectLambdaFunction/README.md#2025-04-09_snippet_1\n\nLANGUAGE: CMD\nCODE:\n```\naws s3 cp tutorial.txt s3://amzn-s3-demo-bucket\n```\n\n----------------------------------------\n\nTITLE: Defining Weather Tool Specification for Bedrock Runtime Converse API\nDESCRIPTION: JSON schema defining the Weather_Tool specification for the Bedrock Runtime Converse API. It includes the tool name, description, and input schema with latitude and longitude properties.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/bedrock_converse_tool/SPECIFICATION.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"toolSpec\": {\n        \"name\": \"Weather_Tool\",\n        \"description\": \"Get the current weather for a given location, based on its WGS84 coordinates.\",\n        \"inputSchema\": {\n            \"json\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"latitude\": {\n                        \"type\": \"string\",\n                        \"description\": \"Geographical WGS84 latitude of the location.\"\n                    },\n                    \"longitude\": {\n                        \"type\": \"string\",\n                        \"description\": \"Geographical WGS84 longitude of the location.\"\n                    }\n                },\n                \"required\": [\"latitude\", \"longitude\"]\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting an Item from DynamoDB Table with C++\nDESCRIPTION: This code snippet illustrates how to delete a single item from a DynamoDB table using the AWS SDK for C++. It removes the item based on its primary key.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/dynamodb/README.md#2025-04-09_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\nDeleteItem\n```\n\n----------------------------------------\n\nTITLE: Deploying CloudFormation Stack for CloudWatch Logs Query\nDESCRIPTION: Uses AWS CLI to deploy a CloudFormation stack for the CloudWatch Logs large query example. The stack is named 'CloudWatchLargeQuery' and uses the 'stack.yaml' template file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/cloudwatch-logs/scenarios/large-query/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naws cloudformation deploy --template-file stack.yaml --stack-name CloudWatchLargeQuery\n```\n\n----------------------------------------\n\nTITLE: Listing User Pools with Amazon Cognito Identity Provider in C#\nDESCRIPTION: This code snippet demonstrates how to list user pools using the Amazon Cognito Identity Provider client in C#. It's part of the CognitoWrapper class and uses the ListUserPoolsAsync method.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Cognito/README.md#2025-04-09_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nListUserPools(Actions/CognitoWrapper.cs#L25)\n```\n\n----------------------------------------\n\nTITLE: Python Package Dependencies with Version Constraints\nDESCRIPTION: Defines the required Python packages and their minimum/compatible versions needed to run AWS SDK examples. Uses boto3 and botocore for AWS interactions, pytest for testing, and docker for container operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/ecr/requirements.txt#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nboto3>=1.35.38\npytest>=8.3.3\nbotocore>=1.35.38\ndocker~=7.1.0\n```\n\n----------------------------------------\n\nTITLE: Publishing SMS Text Messages using AWS SDK for Kotlin\nDESCRIPTION: This code example demonstrates how to publish SMS text messages using Amazon SNS with the AWS SDK for Kotlin.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/sns/README.md#2025-04-09_snippet_11\n\nLANGUAGE: Kotlin\nCODE:\n```\nsrc/main/kotlin/com/kotlin/sns/PublishTextSMS.kt\n```\n\n----------------------------------------\n\nTITLE: Running Go Unit Tests - Basic Command\nDESCRIPTION: Command for running basic unit tests that validate AWS CloudFormation operations. The tests should clean up any resources they create.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/cloudformation/README.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngo test\n```\n\n----------------------------------------\n\nTITLE: Invoking Meta Llama 3 Model in Java\nDESCRIPTION: Shows how to invoke the Meta Llama 3 model using Amazon Bedrock Runtime. The implementation details can be found in the specified file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/bedrock-runtime/README.md#2025-04-09_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\nsrc/main/java/com/example/bedrockruntime/models/metaLlama/Llama3_InvokeModel.java#L6\n```\n\n----------------------------------------\n\nTITLE: Creating an Email Template in Amazon SES v2 API using Rust\nDESCRIPTION: This code snippet demonstrates the creation of an email template in Amazon SES v2 API using the AWS SDK for Rust. The implementation is located in the newsletter.rs file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/ses/README.md#2025-04-09_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n// Implementation in src/newsletter.rs#L100\n```\n\n----------------------------------------\n\nTITLE: Checking If a Phone Number is Opted Out in Amazon SNS using .NET\nDESCRIPTION: This code example demonstrates how to check if a phone number has opted out of receiving messages from Amazon SNS. The code is from a file named IsPhoneNumOptedOut.cs located in the IsPhoneNumOptedOutExample project.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/SNS/README.md#2025-04-09_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nCheckIfPhoneNumberIsOptedOut\n```\n\n----------------------------------------\n\nTITLE: Deleting an Object from MediaStore in Java\nDESCRIPTION: Illustrates how to delete an object from a container in AWS Elemental MediaStore using the AWS SDK for Java 2.x. This operation is used to remove specific media assets from storage.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/mediastore/README.md#2025-04-09_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nDeleteObject\n```\n\n----------------------------------------\n\nTITLE: Defining Metadata Tags for SageMaker Pipeline Example\nDESCRIPTION: Metadata tags that should be included in the SDK examples to categorize the code snippets by SageMaker service actions and scenarios. These tags help organize the example code for documentation and searchability.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/sagemaker_pipelines/SPECIFICATION.md#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsagemaker_Hello\nsagemaker_CreatePipeline\nsagemaker_ExecutePipeline\nsagemaker_DeletePipeline\nsagemaker_DescribePipelineExecution\nsagemaker_Scenario_Pipelines\n```\n\n----------------------------------------\n\nTITLE: Configuring EC2 Launch Template Data\nDESCRIPTION: Python dictionary defining EC2 launch template configuration including instance type, AMI ID, IAM profile, and base64 encoded user data script.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/resilient_service/SPECIFICATION.md#2025-04-09_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nLaunchTemplateData={\n    'InstanceType': 't3.micro',\n    'ImageId': ami_id,\n    'IamInstanceProfile': {'Name': self.instance_profile_name},\n    'UserData': base64.b64encode(start_server_script.encode(encoding='utf-8')).decode(encoding='utf-8')}\n```\n\n----------------------------------------\n\nTITLE: Listing AWS Glue Jobs with .NET\nDESCRIPTION: This snippet shows how to list all AWS Glue jobs in your account using the AWS SDK for .NET. It returns details of each job.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Glue/README.md#2025-04-09_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\nListJobs\n```\n\n----------------------------------------\n\nTITLE: Implementing Spring Boot Application Entry Point for Amazon Redshift Web Application\nDESCRIPTION: The main application class that serves as the entry point for the Spring Boot application. It uses the @SpringBootApplication annotation to enable auto-configuration and component scanning.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/CreatingSpringRedshiftRest/README.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage com.aws.rest;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class App {\n        public static void main(String[] args) {\n        SpringApplication.run(App.class, args);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for AWS Serverless Aurora Application\nDESCRIPTION: CMake configuration that sets up a C++ project using AWS SDK for SESv2 and RDS data services with Poco HTTP server. It defines platform-specific settings, manages dependencies through Conan or direct package finding, and configures the executable with its required source files and library dependencies.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/cross-service/serverless-aurora/CMakeLists.txt#2025-04-09_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\n\n# Set the minimum required version of CMake for this project.\ncmake_minimum_required(VERSION 3.13)\n\nset(SERVICE_COMPONENTS sesv2 rds-data)\n\n# This example uses the poco library to implement an HTTP server.\n# Poco can be installed automatically using the Conan package manager.\n# See the accompanying ReadMe for instructions.\nset(USING_CONAN TRUE)  # True if using Conan.\n\n# Set this project's name.\nproject(\"ServerlessAurora\")\nset(EXECUTABLE run_serverless_aurora)\n\n# Use the MSVC variable to determine if this is a Windows build.\nset(WINDOWS_BUILD ${MSVC})\n\n# Set the location of where Windows can find the installed libraries of the SDK.\nif (WINDOWS_BUILD)\n    string(REPLACE \";\" \"/aws-cpp-sdk-all;\" SYSTEM_MODULE_PATH \"${CMAKE_SYSTEM_PREFIX_PATH}/aws-cpp-sdk-all\")\n    list(APPEND CMAKE_PREFIX_PATH ${SYSTEM_MODULE_PATH})\nendif ()\n\n# Set the C++ standard to use to build this target.\nset(CMAKE_CXX_STANDARD 11)\n\n# Build shared libraries by default.\nset(BUILD_SHARED_LIBS ON)\n\n# Find the AWS SDK for C++ package.\nfind_package(AWSSDK REQUIRED COMPONENTS ${SERVICE_COMPONENTS})\n\nif (USING_CONAN)\n    include(${CMAKE_BINARY_DIR}/conanbuildinfo.cmake)\n    conan_basic_setup()\nelse()\n    find_package(POCO REQUIRED Net Util)\n    list(APPEND MY_POCO_LIBS\n            PocoNet\n            PocoUtil\n            PocoFoundation)\nendif()\n\nif (WINDOWS_BUILD AND AWSSDK_INSTALL_AS_SHARED_LIBS)\n    # Copy relevant AWS SDK for C++ libraries into the current binary directory for running and debugging.\n\n    # set(BIN_SUB_DIR \"/Debug\") # If you are building from the command line, you may need to uncomment this\n    # and set the proper subdirectory to the executables' location.\n\n    AWSSDK_CPY_DYN_LIBS(SERVICE_COMPONENTS \"\" ${CMAKE_CURRENT_BINARY_DIR}${BIN_SUB_DIR})\nendif ()\n\nadd_executable(${EXECUTABLE}\n        serverless_aurora.cpp\n        RDSDataHandler.cpp\n        SESV2EmailHandler.cpp\n        ItemTrackerHTTPHandler.cpp\n        PocoHTTPServer.cpp)\n\ntarget_link_libraries(${EXECUTABLE}\n        ${AWSSDK_LINK_LIBRARIES}\n        ${AWSSDK_PLATFORM_DEPS}\n        ${MY_POCO_LIBS}\n        ${CONAN_LIBS})\n```\n\n----------------------------------------\n\nTITLE: Work Item Data Model in Kotlin\nDESCRIPTION: Defines the WorkItem class structure with properties for tracking work items including id, arc, name, guide, date, description, and status fields.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/itemtracker_dynamodb/README.md#2025-04-09_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nclass WorkItem {\n    var id: String? = null\n    var arc: String? = null\n    var name: String? = null\n    var guide: String? = null\n    var date: String? = null\n    var description: String? = null\n    var status: String? = null\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies with pip for Amazon Pinpoint SMS and Voice Examples\nDESCRIPTION: This command installs the required Python packages for the Amazon Pinpoint SMS and Voice examples in a virtual environment using pip.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/pinpoint-sms-voice/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows-Specific Build Settings\nDESCRIPTION: Detects Windows builds and sets the appropriate paths for finding AWS SDK libraries. It also handles copying of dynamic libraries for Windows builds.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/lambda/tests/CMakeLists.txt#2025-04-09_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(WINDOWS_BUILD ${MSVC})\n\nif(WINDOWS_BUILD)\n    string(REPLACE \";\" \"/aws-cpp-sdk-all;\" SYSTEM_MODULE_PATH \"${CMAKE_SYSTEM_PREFIX_PATH}/aws-cpp-sdk-all\")\n    list(APPEND CMAKE_PREFIX_PATH ${SYSTEM_MODULE_PATH})\nendif()\n\nfind_package(AWSSDK REQUIRED COMPONENTS ${CURRENT_TARGET_AWS_DEPENDENCIES})\n\nadd_executable(\n        ${CURRENT_TARGET}\n)\n\nif (WINDOWS_BUILD)\n    if (AWSSDK_INSTALL_AS_SHARED_LIBS)\n        AWSSDK_CPY_DYN_LIBS(\n                CURRENT_TARGET_AWS_DEPENDENCIES\n                \"\"\n                ${CMAKE_CURRENT_BINARY_DIR}${BIN_SUB_DIR}\n        )\n    endif ()\n\n    add_custom_command(\n            TARGET\n            ${CURRENT_TARGET}\n            POST_BUILD\n            COMMAND ${CMAKE_COMMAND} -E copy\n            ${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_BINDIR}${BIN_SUB_DIR}/gtest.dll\n            ${CMAKE_CURRENT_BINARY_DIR}${BIN_SUB_DIR}\n    )\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Running LocalStack Example with AWS SDK for Rust\nDESCRIPTION: Example command to run the LocalStack integration example that lists S3 buckets and SQS queues using cargo. Requires LocalStack setup and AWS SDK for Rust configuration.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/localstack/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --bin use-localstack\n```\n\n----------------------------------------\n\nTITLE: Sample CSV Data Structure for Entity Resolution\nDESCRIPTION: Example CSV records containing extended customer information including phone numbers for entity matching.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/basics/entity_resolution/SPECIFICATION.md#2025-04-09_snippet_2\n\nLANGUAGE: csv\nCODE:\n```\nid,name,email,phone\n1,Jane B.,Doe,jane.doe@example.com,555-876-9846\n2,John Doe Jr.,john.doe@example.com,555-654-3210\n3,María García,maría_garcia@company.com,555-567-1234\n4,Mary Major,mary_major@company.com,555-222-3333\n```\n\n----------------------------------------\n\nTITLE: Creating a Contact in a SES v2 Contact List\nDESCRIPTION: Details the API operation for adding a new contact to the 'weekly-coupons-newsletter' contact list. Includes the required parameters for the contact list name and email address.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/sesv2_weekly_mailer/content/30_SPECIFICATION.md#2025-04-09_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- Operation: **CreateContact**\n  - Parameters:\n    - `ContactListName`: `weekly-coupons-newsletter`\n    - `EmailAddress`: The email address provided by the user.\n  - Errors:\n    - `AlreadyExistsException`: If the contact already exists, skip this step for that contact and proceed with the next contact. This error can be safely ignored.\n```\n\n----------------------------------------\n\nTITLE: Creating an Email Identity with SES v2 API\nDESCRIPTION: Details the operation for creating a verified email identity using SES v2 API. Includes the required parameter to specify the email identity and possible error responses that need to be handled.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/sesv2_weekly_mailer/content/30_SPECIFICATION.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Operation: **CreateEmailIdentity**\n  - Parameters:\n    - `EmailIdentity`: Value of the `verified email` given by the user.\n  - Errors:\n    - `AlreadyExistsException`: If the identity already exists, skip this step and proceed with the next operation. This error can be safely ignored.\n    - `NotFoundException`: If the identity does not exist, fail the workflow and inform the user that the provided email address is not verified.\n    - `LimitExceededException`: If the limit for email identities is exceeded, fail the workflow and inform the user that they have reached the limit for email identities.\n```\n\n----------------------------------------\n\nTITLE: Running Maven Test Command for API Gateway Examples\nDESCRIPTION: Command to execute JUnit tests for API Gateway Java examples using Maven from the command line.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/apigateway/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmvn test\n```\n\n----------------------------------------\n\nTITLE: Listing Parts of a Multipart Upload in S3 Directory Buckets in Java\nDESCRIPTION: Example code for listing all uploaded parts for a specific multipart upload in an S3 Directory Bucket using AWS SDK for Java 2.x.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/s3/src/main/java/com/example/s3/directorybucket/README.md#2025-04-09_snippet_19\n\nLANGUAGE: Java\nCODE:\n```\nListParts\n```\n\n----------------------------------------\n\nTITLE: Getting CloudWatch Metric Statistics in Kotlin\nDESCRIPTION: This code snippet illustrates how to get statistics for a CloudWatch metric using the AWS SDK for Kotlin. It's included in a comprehensive CloudWatch scenario.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/cloudwatch/README.md#2025-04-09_snippet_11\n\nLANGUAGE: Kotlin\nCODE:\n```\nGetMetricStatistics\n```\n\n----------------------------------------\n\nTITLE: Putting a Geofence in Amazon Location Service using Java\nDESCRIPTION: This code snippet shows how to put a geofence in Amazon Location Service. It's part of the LocationActions class that provides various Location Service operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/location/README.md#2025-04-09_snippet_13\n\nLANGUAGE: Java\nCODE:\n```\nPutGeofence\n```\n\n----------------------------------------\n\nTITLE: Configuring CURL Package for AWS SDK C++ S3 Examples\nDESCRIPTION: Attempts to find the CURL package, which is optional for testing pre-signed URL code. If not found, it unsets related variables.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/s3/CMakeLists.txt#2025-04-09_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(CURL)\n\nif (NOT CURL_FOUND)\n    unset(CURL_INCLUDE_DIRS)\n    unset(CURL_LIBRARIES)\n    unset(CURL_LIBRARY)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings Function\nDESCRIPTION: Creates a function to apply standard compilation settings including C++17 standard, warning levels, and exception handling.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/cognito_flutter_mobile_app/windows/CMakeLists.txt#2025-04-09_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Amazon Connect Instance Management Operations in Java\nDESCRIPTION: A comprehensive set of examples covering instance management operations in Amazon Connect using ConnectClient. Operations include creating, deleting, describing instances and managing instance attributes. All examples utilize ProfileCredentialsProvider for authentication.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/connect/README.md#2025-04-09_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Listing Identity Pool Usage with Amazon Cognito Sync in Rust\nDESCRIPTION: This code snippet demonstrates how to list identity pool usage using Amazon Cognito Sync and the AWS SDK for Rust. It is located in the file 'src/bin/list-identity-pool-usage.rs' at line 26.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rustv1/examples/cognitosync/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nListIdentityPoolUsage\n```\n\n----------------------------------------\n\nTITLE: List Operations in Route 53 in C#\nDESCRIPTION: Retrieves a list of operations that have been performed on domains in the current AWS account. Supports filtering by submitted date and pagination with a marker and maximum items.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Route53/README.md#2025-04-09_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\n/// <summary>\n/// List operations in the past year.\n/// </summary>\n/// <param name=\"marker\">The marker (starting point) of the list.</param>\n/// <param name=\"maxItems\">The maximum number of items to return.</param>\n/// <returns>The list of operations.</returns>\npublic async Task<List<OperationSummary>> ListOperations(string? marker = null, int maxItems = 20)\n{\n    var result = await _amazonRoute53Domains.ListOperationsAsync(\n        new ListOperationsRequest\n        {\n            SubmittedSince = DateTime.UtcNow.AddYears(-1),\n            Marker = marker,\n            MaxItems = maxItems\n        }\n    );\n    return result.Operations;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Usage Demonstration\nDESCRIPTION: Command to create and deploy the API Gateway websocket API\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/cross_service/apigateway_websocket_chat/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython websocket_chat.py demo\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up AWS SES Resources in Java\nDESCRIPTION: This method cleans up resources created during the newsletter campaign workflow. It deletes the contact list, email template, and optionally the email identity. The code includes error handling for cases where resources may not exist.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/sesv2_weekly_mailer/content/61a_NewsletterWorkflow.java.md#2025-04-09_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\n  public void cleanUp() {\n    try {\n      DeleteContactListRequest deleteContactListRequest = DeleteContactListRequest.builder()\n          .contactListName(CONTACT_LIST_NAME)\n          .build();\n\n      sesClient.deleteContactList(deleteContactListRequest);\n\n      System.out.println(\"Contact list deleted: \" + CONTACT_LIST_NAME);\n    } catch (NotFoundException e) {\n      System.out.println(\"Contact list not found. Skipping deletion...\");\n    } catch (Exception e) {\n      System.err.println(\"Error occurred while deleting the contact list: \" + e.getMessage());\n      e.printStackTrace();\n    }\n\n    try {\n      DeleteEmailTemplateRequest deleteTemplateRequest = DeleteEmailTemplateRequest.builder()\n          .templateName(TEMPLATE_NAME)\n          .build();\n\n      sesClient.deleteEmailTemplate(deleteTemplateRequest);\n\n      System.out.println(\"Email template deleted: \" + TEMPLATE_NAME);\n    } catch (NotFoundException e) {\n      System.out.println(\"Email template not found. Skipping deletion...\");\n    } catch (Exception e) {\n      System.err.println(\"Error occurred while deleting the email template: \" + e.getMessage());\n      e.printStackTrace();\n    }\n\n    System.out.println(\"\\nDo you want to delete the email identity? (y/n)\");\n    Scanner scanner = new Scanner(System.in);\n    String input = scanner.nextLine();\n    scanner.close();\n\n    if (input.equalsIgnoreCase(\"y\")) {\n      try {\n        DeleteEmailIdentityRequest deleteIdentityRequest = DeleteEmailIdentityRequest.builder()\n            .emailIdentity(this.verifiedEmail)\n            .build();\n\n        sesClient.deleteEmailIdentity(deleteIdentityRequest);\n\n        System.out.println(\"Email identity deleted: \" + this.verifiedEmail);\n      } catch (NotFoundException e) {\n        System.out.println(\"Email identity not found. Skipping deletion...\");\n      } catch (Exception e) {\n        System.err.println(\"Error occurred while deleting the email identity: \" + e.getMessage());\n        e.printStackTrace();\n      }\n    } else {\n      System.out.println(\"Skipping email identity deletion.\");\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating Plain Text Template for Weekly Coupons Newsletter\nDESCRIPTION: This snippet provides a plain text template for a weekly coupons newsletter. It includes a header, a placeholder for dynamic coupon details, and a closing message. The template uses Mustache-style syntax for content insertion.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/sesv2_weekly_mailer/content/43_coupon_newsletter_txt.md#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nWeekly Coupons Newsletter\n\nCheck out this week's hot deals and exclusive coupons!\n\n{{#coupons}}\n- {{details}}\n{{/coupons}}\n\nHurry, these offers won't last long! Visit our website or your nearest store to take advantage of these amazing deals.\n\nHappy shopping!\nThe Weekly Coupons Team\n```\n\n----------------------------------------\n\nTITLE: Describing CloudWatch Alarms for a Specific Metric in C#\nDESCRIPTION: Method for describing CloudWatch alarms associated with a specific metric. This is implemented in the CloudWatchWrapper class.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/CloudWatch/README.md#2025-04-09_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nDescribeAlarmsForMetric\n```\n\n----------------------------------------\n\nTITLE: Copying Objects in S3 Directory Buckets in Java\nDESCRIPTION: Example code for copying objects between S3 Directory Buckets using AWS SDK for Java 2.x.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/s3/src/main/java/com/example/s3/directorybucket/README.md#2025-04-09_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nCopyObject\n```\n\n----------------------------------------\n\nTITLE: Managing X-Ray Groups in Kotlin\nDESCRIPTION: Demonstrates how to retrieve all active group details and delete specific X-Ray groups. These operations are essential for maintaining and organizing trace data collections.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/xray/README.md#2025-04-09_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nDeleteGroup - Deletes an AWS X-Ray group\\nGetGroups - Retrieves all active group details\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Web Crawler Access\nDESCRIPTION: Basic robots.txt configuration that allows all web crawlers (*) full access with no disallowed paths. This is the most permissive robots.txt configuration.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/php/cross_service/aurora_item_tracker/public/robots.txt#2025-04-09_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Configuring GTest for AWS IoT SDK Examples\nDESCRIPTION: Sets up Google Test (GTest) for the project. If GTest is not found, it uses FetchContent to download and make it available.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/iot/tests/CMakeLists.txt#2025-04-09_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(GTest)\n\nif (NOT GTest_FOUND)\n    include(FetchContent)\n    FetchContent_Declare(\n            googletest\n            GIT_REPOSITORY https://github.com/google/googletest.git\n            GIT_TAG release-1.12.1\n    )\n\n    # For Windows: Prevent overriding the parent project's compiler/linker settings.\n    set(gtest_force_shared_crt ON CACHE BOOL \"\" FORCE)\n    FetchContent_MakeAvailable(googletest)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Deleting VPC Endpoints using Amazon EC2 with PHP\nDESCRIPTION: This code snippet demonstrates how to delete VPC Endpoints using the Amazon EC2 service with PHP. It refers to a method named 'DeleteVpcEndpoints' in the EC2Service class.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/php/example_code/ec2/README.md#2025-04-09_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nDeleteVpcEndpoints(EC2Service.php#L108)\n```\n\n----------------------------------------\n\nTITLE: Creating OpenSearch Domain in Java\nDESCRIPTION: This code snippet shows how to create an OpenSearch domain using the AWS SDK for Java 2.x. It's part of the OpenSearchActions class.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/opensearch/README.md#2025-04-09_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\n// OpenSearchActions.java#L69\n// Code for CreateDomain operation\n```\n\n----------------------------------------\n\nTITLE: Redshift Scenario Program Execution Output\nDESCRIPTION: Console output showing the complete flow of the Redshift operations including cluster creation, database listing, table creation, data insertion, and query execution. Demonstrates user interaction and program progress.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/basics/redshift/SPECIFICATION.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n--------------------------------------------------------------------------------\nWelcome to the Amazon Redshift SDK Getting Started scenario.\nThis Java program demonstrates how to interact with Amazon Redshift by using the AWS SDK for Java (v2).\nAmazon Redshift is a fully managed, petabyte-scale data warehouse service hosted in the cloud.\n\nThe program's primary functionalities include cluster creation, verification of cluster readiness,\nlist databases, table creation, data population within the table, and execution of SQL statements.\nFurthermore, it demonstrates the process of querying data from the Movie table.\n\nUpon completion of the program, all AWS resources are cleaned up.\n\nLets get started...\nPlease enter your user name (default is awsuser)\n\n--------------------------------------------------------------------------------\nPlease enter your user password (default is AwsUser1000)\n\n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\nA Redshift cluster refers to the collection of computing resources and storage that work together to process and analyze large volumes of data.\nEnter a cluster id value (default is redshift-cluster-movies):\n\nCreated cluster redshift-cluster-movies\n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\nWait until redshift-cluster-movies is available.\nPress Enter to continue...\nWaiting for cluster to become available. This may take a few mins.\nElapsed Time: 00:02 - Waiting for cluster...\nElapsed Time: 00:07 - Waiting for cluster...\nElapsed Time: 00:12 - Waiting for cluster...\nElapsed Time: 00:18 - Waiting for cluster...\nElapsed Time: 00:23 - Waiting for cluster...\nElapsed Time: 00:28 - Waiting for cluster...\nElapsed Time: 00:33 - Waiting for cluster...\nElapsed Time: 00:39 - Waiting for cluster...\nElapsed Time: 00:44 - Waiting for cluster...\nElapsed Time: 00:49 - Waiting for cluster...\nCluster is available! Total Elapsed Time: 00:54\n```\n\n----------------------------------------\n\nTITLE: Archiving Work Item via REST PUT\nDESCRIPTION: HTTP PUT request to archive a specific work item using its GUID.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/resources/clients/react/elwing/src/plugins/item-tracker/README.md#2025-04-09_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPUT http://localhost:8080/api/items/8db8aaa4-6f04-4467-bd60-EXAMPLEGUID:archive\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies with pip\nDESCRIPTION: Command to install all required Python dependencies for the project using pip in a virtual environment.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/cross_service/dynamodb_item_tracker/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Generating Email Subaddress Variants in Python\nDESCRIPTION: A function that generates subaddress variants of a base email address. It splits the email into user and domain parts, then creates variants by adding a suffix to the user part.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/sesv2_weekly_mailer/content/63a_newsletter.py.md#2025-04-09_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ndef get_subaddress_variants(base_email, num_variants):\n    \"\"\"\n    Generates subaddress variants of a base email address.\n\n    Args:\n        base_email (str): The base email address.\n        num_variants (int): The number of variants to generate.\n\n    Returns:\n        list: A list of subaddress variants.\n    \"\"\"\n    user_part, domain_part = base_email.split(\"@\")\n    variants = [\n        f\"{user_part}+ses-weekly-newsletter-{i}@{domain_part}\"\n        for i in range(1, num_variants + 1)\n    ]\n    return variants\n```\n\n----------------------------------------\n\nTITLE: Creating a DynamoDB Table in Swift\nDESCRIPTION: Creates a DynamoDB table that can hold movie data. This is part of the basic example that demonstrates essential DynamoDB operations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/swift/example_code/dynamodb/README.md#2025-04-09_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nCreateTable(basics/MovieList/MovieTable.swift#L62)\n```\n\n----------------------------------------\n\nTITLE: Deleting Bucket Policy from S3 Directory Buckets in Java\nDESCRIPTION: Example code for removing a bucket policy from an S3 Directory Bucket using AWS SDK for Java 2.x.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/s3/src/main/java/com/example/s3/directorybucket/README.md#2025-04-09_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\nDeleteBucketPolicy\n```\n\n----------------------------------------\n\nTITLE: Running Scenario Example\nDESCRIPTION: Command to execute a scenario example script from the scenarios directory.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/elastic-load-balancing-v2/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnode ./scenarios/<fileName>\n```\n\n----------------------------------------\n\nTITLE: Describing DB Instances in Amazon RDS using C++\nDESCRIPTION: This code snippet references the DescribeDBInstances action at line 752 in the getting_started_with_db_instances.cpp file, which demonstrates how to retrieve and display information about DB instances using the AWS SDK for C++.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/rds/README.md#2025-04-09_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Common RDS Operations in Kotlin\nDESCRIPTION: Individual service function examples including CreateDBInstance, DeleteDBInstance, DescribeAccountAttributes, DescribeDBInstances, and ModifyDBInstance operations using the AWS SDK for Kotlin.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/rds/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Available operations:\n// - CreateDBInstance\n// - DeleteDBInstance\n// - DescribeAccountAttributes\n// - DescribeDBInstances\n// - ModifyDBInstance\n// - CreateDBSnapshot\n```\n\n----------------------------------------\n\nTITLE: Running the Hello Amazon SQS Example in Go\nDESCRIPTION: Command to run the Hello Amazon SQS example which demonstrates basic SQS functionality.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/gov2/sqs/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo run ./hello\n```\n\n----------------------------------------\n\nTITLE: Emptying S3 Bucket and Destroying CloudFormation Stack in Java\nDESCRIPTION: This code snippet demonstrates how to empty an S3 bucket and destroy a CloudFormation stack as part of cleaning up resources in the AWS Entity Resolution scenario. It uses helper methods from a CloudFormationHelper class.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/basics/entity_resolution/SPECIFICATION.md#2025-04-09_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nCloudFormationHelper.emptyS3Bucket(glueBucketName);\nCloudFormationHelper.destroyCloudFormationStack\n```\n\n----------------------------------------\n\nTITLE: Listing ECS Clusters with Kotlin SDK\nDESCRIPTION: Example demonstrating how to list all clusters in Amazon ECS using the AWS SDK for Kotlin. This returns an overview of available clusters in the account.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/ecs/README.md#2025-04-09_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: GitHub Repository URL for Rust Test Utils Documentation\nDESCRIPTION: A markdown link showing the new location of the test utilities documentation in the AWS SDK examples repository\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/rust_dev_preview/test-utils/README.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://github.com/awsdocs/aws-doc-sdk-examples/blob/rust_dev_preview/rustv1/test-utils/README.md\n```\n\n----------------------------------------\n\nTITLE: Deprecated JavaScript Photo Album Example Album Deletion\nDESCRIPTION: This snippet contained code for deleting an album in the Photo Album example. It has been replaced by a newer example in the AWS documentation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/s3/dead-snippets.txt#2025-04-09_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\n// snippet-start:[s3.JavaScript.photoAlbumExample.deleteAlbumV3]\nThis code example has been superseded by the example in\nCode examples > Amazon S3 > Create a web page that lists S3 objects\n// snippet-end:[s3.JavaScript.photoAlbumExample.deleteAlbumV3]\n```\n\n----------------------------------------\n\nTITLE: Analyze Sentiment Lambda Input Schema\nDESCRIPTION: JSON schema showing required input format for the AnalyzeSentiment Lambda function\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/applications/feedback_sentiment_analyzer/SPECIFICATION.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"source_text\": \"CET HÔTEL ÉTAIT SUPER\",\n  \"region\": \"us-east-1\"\n}\n```\n\n----------------------------------------\n\nTITLE: AWS CodeDeploy Properties Configuration\nDESCRIPTION: Configuration properties required for running AWS CodeDeploy JUnit tests, including application names, deployment group settings, S3 bucket details, and service role configurations.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/codedeploy/README.md#2025-04-09_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nappName=\nexistingApp=\nnewDeploymentGroupName=\nexistingDeployment=\nbucketName=\nkey=\nbundleType=\nserviceRoleArn=\ntagKey=\ntagValue=\n```\n\n----------------------------------------\n\nTITLE: Deleting an Email Template in Amazon SES using C++\nDESCRIPTION: This example demonstrates how to delete an email template in Amazon SES using the AWS SDK for C++. The code is located in the 'delete_template.cpp' file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/ses/README.md#2025-04-09_snippet_8\n\nLANGUAGE: C++\nCODE:\n```\n// See delete_template.cpp, line 21\n```\n\n----------------------------------------\n\nTITLE: Running Detect Document Elements Example in Python\nDESCRIPTION: Command to execute the Python script that demonstrates various document element detection features of Amazon Comprehend, including language detection, entity recognition, and sentiment analysis.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/comprehend/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\npython comprehend_detect.py\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Packages\nDESCRIPTION: Installs the required Python packages for running the Lookout for Vision examples using pip in a virtual environment.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/lookoutvision/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: ListContacts Request Body Schema\nDESCRIPTION: JSON schema for the optional filter in the request body that can be applied to the list of contacts.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/sesv2_weekly_mailer/content/10_ListContacts.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"Filter\": {\n      \"FilteredStatus\": \"string\",\n      \"TopicFilter\": {\n         \"TopicName\": \"string\",\n         \"UseDefaultIfPreferenceUnavailable\": boolean\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecated JavaScript Photo Album Example Photo Deletion\nDESCRIPTION: This snippet contained code for deleting a photo in the Photo Album example. It has been replaced by a newer example in the AWS documentation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/s3/dead-snippets.txt#2025-04-09_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\n// snippet-start:[s3.JavaScript.photoAlbumExample.deletePhotoV3]\nThis code example has been superseded by the example in\nCode examples > Amazon S3 > Create a web page that lists S3 objects\n// snippet-end:[s3.JavaScript.photoAlbumExample.deletePhotoV3]\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running React Native AWS Example\nDESCRIPTION: Commands to set up and run the React Native example application that demonstrates AWS SDK for JavaScript v3. The sequence includes installing NPM dependencies, setting up iOS specific dependencies with CocoaPods, and running the app on either iOS or Android.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/reactnative/ReactNativeApp/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\ncd ios && pod install\ncd .. && npm run <ios|android>\n```\n\n----------------------------------------\n\nTITLE: Listing MediaConvert Jobs in Kotlin\nDESCRIPTION: This code snippet illustrates how to list MediaConvert jobs using the AWS SDK for Kotlin. The ListJobs operation is used to retrieve a list of jobs that have been created.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/mediaconvert/README.md#2025-04-09_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\nListJobs(src/main/kotlin/com/kotlin/mediaconvert/ListJobs.kt#L28)\n```\n\n----------------------------------------\n\nTITLE: Running DAX Query Test Example\nDESCRIPTION: Command to execute the DynamoDB Accelerator (DAX) query test script with a specified DAX cluster endpoint for performance comparison.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/dynamodb/README.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython 04-query-test.py YOUR-CLUSTER-NAME.111111.clustercfg.dax.usw2.cache.amazonaws.com:8111\n```\n\n----------------------------------------\n\nTITLE: Associating Elastic IP with EC2 Instance using AWS CLI\nDESCRIPTION: This snippet demonstrates how to associate an Elastic IP address with an EC2 instance using the AWS CLI. It uses the 'aws ec2 associate-address' command with the allocation ID and instance ID.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/aws-cli/bash-linux/ec2/README.md#2025-04-09_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\naws ec2 associate-address \\\n    --allocation-id \"$allocationId\" \\\n    --instance-id \"$instanceId\"\n```\n\n----------------------------------------\n\nTITLE: Deleting SESv2 Email Identity using DeleteEmailIdentity API\nDESCRIPTION: This optional operation deletes the email identity. It requires user confirmation before execution, as the user may want to keep the verified email identity for future use.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/scenarios/features/sesv2_weekly_mailer/content/34_SPEC_CLEANUP.md#2025-04-09_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- Operation: **DeleteEmailIdentity**\n  - `EmailIdentity`: Value of the `verified email` given by the user in part 1.\n```\n\n----------------------------------------\n\nTITLE: Creating a Receipt Rule Set in Amazon SES using C++\nDESCRIPTION: This example demonstrates the creation of a receipt rule set in Amazon SES using the AWS SDK for C++. The code is located in the 'create_receipt_rule_set.cpp' file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/ses/README.md#2025-04-09_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\n// See create_receipt_rule_set.cpp, line 21\n```\n\n----------------------------------------\n\nTITLE: Describing Scaling Activities in .NET\nDESCRIPTION: This snippet references the DescribeScalingActivities method that retrieves information about scaling activities that occur in response to user requests and capacity changes.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv4/AutoScaling/README.md#2025-04-09_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nDescribeScalingActivities(Actions/AutoScalingWrapper.cs#L86)\n```\n\n----------------------------------------\n\nTITLE: Running Hello Elastic Load Balancing Example\nDESCRIPTION: Command to execute the hello example for Elastic Load Balancing v2.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/elastic-load-balancing-v2/README.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnode ./hello.js\n```\n\n----------------------------------------\n\nTITLE: Navigation Layout Template with Thymeleaf (HTML)\nDESCRIPTION: HTML template for the layout header used across the AWS Photo Analyzer application. It defines the navigation menu with links to the home page, photo upload page, and photo analysis page using Thymeleaf fragments for reusability across multiple pages.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/usecases/creating_photo_analyzer_app/README.md#2025-04-09_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n     <html xmlns:th=\"http://www.thymeleaf.org\">\n     <head th:fragment=\"site-head\">\n      <meta charset=\"UTF-8\" />\n      <link rel=\"icon\" href=\"../public/images/favicon.ico\" th:href=\"@{/images/favicon.ico}\" />\n      <script th:src=\"|https://code.jquery.com/jquery-1.12.4.min.js|\"></script>\n      <meta th:include=\"this :: head\" th:remove=\"tag\"/>\n     </head>\n     <body>\n      <!-- th:hef calls a controller method - which returns the view -->\n      <header th:fragment=\"site-header\">\n       <a href=\"#\" style=\"color: white\" th:href=\"@{/}\">Home</a>\n       <a href=\"#\" style=\"color: white\" th:href=\"@{/photo}\">Upload Photos</a>\n       <a href=\"#\"  style=\"color: white\" th:href=\"@{/process}\">Analyze Photos</a>\n      </header>\n     </html>\n```\n\n----------------------------------------\n\nTITLE: Describing CloudFormation Stack Outputs\nDESCRIPTION: AWS CLI command to retrieve and display the outputs of the deployed CloudFormation stack.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/resources/cdk/README.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\naws cloudformation describe-stacks --stack-name STACK_NAME --query Stacks[0].Outputs --output text\n```\n\n----------------------------------------\n\nTITLE: Creating SageMaker Transform Job using AWS SDK for SAP ABAP\nDESCRIPTION: This code snippet demonstrates how to create a SageMaker transform job using the AWS SDK for SAP ABAP. It references a method in the zcl_aws1_sgm_actions class.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/sap-abap/services/sagemaker/README.md#2025-04-09_snippet_3\n\nLANGUAGE: ABAP\nCODE:\n```\nzcl_aws1_sgm_actions.clas.abap#L334\n```\n\n----------------------------------------\n\nTITLE: Running Publish Messages to Queues Example in AWS SDK for JavaScript\nDESCRIPTION: An explanation of the publish messages to queues example which demonstrates creating topics, subscribing queues, publishing messages, and polling for received messages.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/sqs/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnode ./scenarios/<fileName>\n```\n\n----------------------------------------\n\nTITLE: Creating an SNS Topic using AWS SDK for Kotlin\nDESCRIPTION: This code snippet shows how to create an Amazon SNS topic using the AWS SDK for Kotlin.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/services/sns/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nsrc/main/kotlin/com/kotlin/sns/CreateTopic.kt#L39\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Rules in CMake\nDESCRIPTION: Sets up installation rules for the Flutter application, including executable, libraries, and assets deployment.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/cognito_flutter_mobile_app/windows/CMakeLists.txt#2025-04-09_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Building Increment Lambda Function in C++\nDESCRIPTION: Series of commands to build and package the Increment Lambda function using CMake and the AWS Lambda C++ Runtime.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/lambda/cpp_lambda/README.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd /cpp_lambda/increment && \\\nmkdir build && \\\ncd build && \\\ncmake3 .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH=~/install && \\\nmake && \\\nmake aws-lambda-package-cpp_lambda_increment\n```\n\n----------------------------------------\n\nTITLE: Building Increment Lambda Function in C++\nDESCRIPTION: Series of commands to build and package the Increment Lambda function using CMake and the AWS Lambda C++ Runtime.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/lambda/cpp_lambda/README.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd /cpp_lambda/increment && \\\nmkdir build && \\\ncd build && \\\ncmake3 .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH=~/install && \\\nmake && \\\nmake aws-lambda-package-cpp_lambda_increment\n```\n\n----------------------------------------\n\nTITLE: Creating IAM User in Java\nDESCRIPTION: This snippet demonstrates how to create an IAM user using the AWS SDK for Java 2.x.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javav2/example_code/iam/README.md#2025-04-09_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\nsrc/main/java/com/example/iam/CreateUser.java#L6\n```\n\n----------------------------------------\n\nTITLE: Running Hello Amazon Bedrock Agents Example in JavaScript\nDESCRIPTION: This snippet demonstrates how to run the 'Hello Amazon Bedrock Agents' example, which shows how to get started with Amazon Bedrock Agents using Node.js.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/bedrock-agent/README.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnode ./hello.js\n```\n\n----------------------------------------\n\nTITLE: Deprecated JavaScript S3 Photo Viewer Album Viewing\nDESCRIPTION: This snippet contained code for viewing an album in the S3 Photo Viewer example. It has been replaced by a newer example in the AWS documentation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/s3/dead-snippets.txt#2025-04-09_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n// snippet-start:[s3.JavaScript.s3_PhotoViewer.viewAlbumV3]\nThis code example has been superseded by the example in\nCode examples > Amazon S3 > Create a web page that lists S3 objects\n// snippet-end:[s3.JavaScript.s3_PhotoViewer.viewAlbumV3]\n```\n\n----------------------------------------\n\nTITLE: Deprecated JavaScript S3 Photo Viewer Album Listing\nDESCRIPTION: This snippet contained code for listing albums in the S3 Photo Viewer example. It has been replaced by a newer example in the AWS documentation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/s3/dead-snippets.txt#2025-04-09_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// snippet-start:[s3.JavaScript.s3_PhotoViewer.listAlbumV3]\nThis code example has been superseded by the example in\nCode examples > Amazon S3 > Create a web page that lists S3 objects\n// snippet-end:[s3.JavaScript.s3_PhotoViewer.listAlbumV3]\n```\n\n----------------------------------------\n\nTITLE: Putting Events in EventBridge using C++\nDESCRIPTION: This code snippet demonstrates how to put events into Amazon EventBridge using the AWS SDK for C++. It references the PutEvents action implemented in the put_events.cpp file.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/eventbridge/README.md#2025-04-09_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n// See put_events.cpp#L15 for the implementation\n```\n\n----------------------------------------\n\nTITLE: Querying DynamoDB with JavaScript (Deprecated)\nDESCRIPTION: This code snippet for querying DynamoDB using JavaScript has been deprecated. Users are directed to refer to the updated example in the 'Code examples > Actions and scenarios > DynamoDB' section for current implementation.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/dynamodb/dead-snippets.txt#2025-04-09_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// snippet-start[dynamodb.JavaScript.movies.queryV3]\nThis code example has been superseded by the example in\nCode examples > Actions and scenarios > DynamoDB\n// snippet-end[dynamodb.JavaScript.movies.queryV3]\n```\n\n----------------------------------------\n\nTITLE: Deprecated Create Client Implementation - IAM JavaScript SDK V3\nDESCRIPTION: This code example for creating an IAM client has been superseded by newer examples in the AWS documentation under Code examples > Actions and scenarios > IAM section.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/iam/dead-snippets.txt#2025-04-09_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// snippet-start:[iam.JavaScript.scenario.createclientv3]\nThis code example has been superseded by the example in\nCode examples > Actions and scenarios > IAM\n// snippet-end:[iam.JavaScript.scenario.createclientv3]\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Composer for Bedrock\nDESCRIPTION: Command to install required PHP dependencies using Composer package manager from the bedrock directory\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/php/example_code/bedrock/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer install\n```\n\n----------------------------------------\n\nTITLE: Allocating VPC Elastic IP Address in Go\nDESCRIPTION: This example allocates a VPC Elastic IP address and associates it with an EC2 instance. It requires the instance ID as a command-line argument.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/ec2/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\ngo run AllocateAddress.go -i INSTANCE-ID\n```\n\n----------------------------------------\n\nTITLE: JavaScript Client for SNS Operations\nDESCRIPTION: Client-side JavaScript code that handles SNS subscription management and message publishing. Includes email validation, AJAX calls to the backend controller, and modal dialog management for displaying subscriptions.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/cross-service/SubscribePublishTranslate/README.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n$(function () {\n    $(\"#SendButton\").click(function ($e) {\n\n        var body = $('#body').val();\n        var lang = $('#lang option:selected').text();\n        if (body == '') {\n            alert(\"Please enter text\");\n            return;\n        }\n\n        $.ajax('home/PublishMessage', {\n            type: 'POST',\n            data: 'lang=' + lang + '&body=' + body,\n            success: function (data, status, xhr) {\n\n                alert(data)\n                $('#body').val(\"\");\n            },\n            error: function (jqXhr, textStatus, errorMessage) {\n                $('p').append('Error' + errorMessage);\n            }\n        });\n    });\n});\n\nfunction subEmail() {\n    var mail = $('#inputEmail1').val();\n    var result = validate(mail)\n    if (result == false) {\n        alert(mail + \" is not valid. Please specify a valid email.\");\n        return;\n    }\n\n    $.ajax('home/AddEmailSub', {\n        type: 'POST',\n        data: 'email=' + mail,\n        success: function (data, status, xhr) {\n            alert(\"Subscription validation is \" + data)\n        },\n        error: function (jqXhr, textStatus, errorMessage) {\n            $('p').append('Error' + errorMessage);\n        }\n    });\n}\n\nfunction delSub(event) {\n    var mail = $('#inputEmail1').val();\n    var result = validate(mail)\n\n    if (result == false) {\n        alert(mail + \" is not valid. Please specify a valid email\");\n        return;\n    }\n\n    $.ajax('home/RemoveEmailSub', {\n        type: 'POST',  // http GET method\n        data: 'email=' + mail,\n        success: function (data, status, xhr) {\n\n            alert(data);\n        },\n        error: function (jqXhr, textStatus, errorMessage) {\n            $('p').append('Error' + errorMessage);\n        }\n    });\n}\n\nfunction subscribe() {\n\n    $.ajax({\n        url: 'home/GetAjaxValue',\n        success: function (data, status, xhr) {\n\n            $('.modal-body').empty();\n            var xml = data;\n            $(xml).find('Sub').each(function () {\n\n                var $field = $(this);\n                var email = $field.find('email').text();\n\n                // Append this data to the main list.\n                $('.modal-body').append(\"<p><b>\" + email + \"</b></p>\");\n            });\n            $(\"#myModal\").modal();\n        },\n        error: function (jqXhr, textStatus, errorMessage) {\n            $('p').append('Error' + errorMessage);\n        }\n    });\n}\n\nfunction validateEmail(email) {\n    const re = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(email);\n}\n\nfunction validate(email) {\n    const $result = $(\"#result\");\n\n    if (validateEmail(email)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Running Amazon S3 Object Integrity Workflow in C++\nDESCRIPTION: Commands to build and run the Amazon S3 Object Integrity Workflow using CMake. This process includes creating a build directory, configuring the project with CMake in Debug mode, building the project, and running the executable.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/s3/s3_object_integrity_workflow/README.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmkdir build\ncd build\ncmake .. -DCMAKE_BUILD_TYPE=Debug\ncmake --build . --config=Debug\n./run_medical_image_sets_and_frames_workflow\n```\n\n----------------------------------------\n\nTITLE: Analyzing Documents with Amazon Textract in SAP ABAP\nDESCRIPTION: Demonstrates how to use the AnalyzeDocument function of Amazon Textract to analyze document content. This function is part of the zcl_aws1_tex_actions class.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/sap-abap/services/textract/README.md#2025-04-09_snippet_0\n\nLANGUAGE: ABAP\nCODE:\n```\nzcl_aws1_tex_actions.clas.abap#L61\n```\n\n----------------------------------------\n\nTITLE: Updating Lambda Function Code with AWS SDK for .NET\nDESCRIPTION: Updates the code for an existing Lambda function. The function code can be updated with a new ZIP file, and returns the Amazon Resource Name (ARN) of the updated function.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Lambda/README.md#2025-04-09_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\n/// <summary>\n/// Update the code for a Lambda function.\n/// </summary>\n/// <param name=\"functionName\">The name of the Lambda function to update.</param>\n/// <param name=\"zipFilePath\">The path to the zip file that contains the new Lambda\n/// function code.</param>\n/// <returns>Async Task.</returns>\npublic async Task<UpdateFunctionCodeResponse> UpdateFunctionCode(\n    string functionName,\n    string zipFilePath)\n{\n    var functionCodeRequest = new UpdateFunctionCodeRequest\n    {\n        FunctionName = functionName,\n        Publish = true,\n        ZipFile = await File.ReadAllBytesAsync(zipFilePath),\n    };\n\n    var response = await _lambdaService.UpdateFunctionCodeAsync(functionCodeRequest);\n    return response;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating S3 Bucket using C++\nDESCRIPTION: This code snippet demonstrates how to create an S3 bucket using the AWS SDK for C++.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/cpp/example_code/s3/README.md#2025-04-09_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\nCreateBucket\n```\n\n----------------------------------------\n\nTITLE: Running Verbose Go Unit Tests for CloudTrail\nDESCRIPTION: Command to execute unit tests with verbose logging for detailed test execution information.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/go/cloudtrail/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo test -test.v\n```\n\n----------------------------------------\n\nTITLE: Running AWS Glue Basics Example\nDESCRIPTION: Command to execute the main AWS Glue example script that demonstrates crawler creation, database operations, and job management.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/ruby/example_code/glue/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nruby glue_wrapper.rb\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Command to install all required project dependencies listed in requirements.txt\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/bedrock-runtime/cross-model-scenarios/tool_use_demo/README.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Running Scenario Examples in Node.js\nDESCRIPTION: Command to execute scenario examples from the scenarios directory using Node.js.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/javascriptv3/example_code/codebuild/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnode ./scenarios/<fileName>\n```\n\n----------------------------------------\n\nTITLE: Parsing Boolean Value from Field in Kotlin\nDESCRIPTION: A utility function to extract boolean values from a Field object. It checks if the field contains a \"BooleanValue\" and extracts the value after the last equals sign, removing the trailing character.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/kotlin/usecases/creating_redshift_application/README.md#2025-04-09_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nfun parseBooleanValue(myField: Field): String {\n        val ss = myField.toString()\n        if (\"BooleanValue\" in ss) {\n            var str = ss.substringAfterLast(\"=\")\n            str = str.substring(0, str.length - 1)\n            return str\n        }\n        return \"\"\n    }\n```\n\n----------------------------------------\n\nTITLE: Listing Keyspaces with Amazon Keyspaces in C#\nDESCRIPTION: This code snippet demonstrates how to list keyspaces using the Amazon Keyspaces service with the AWS SDK for .NET. It's part of the 'Hello Amazon Keyspaces' example.\nSOURCE: https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/dotnetv3/Keyspaces/README.md#2025-04-09_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nActions/HelloKeyspaces.cs#L4\n```"
  }
]