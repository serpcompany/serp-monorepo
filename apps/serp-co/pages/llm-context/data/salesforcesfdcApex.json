[
  {
    "owner": "salesforcesfdc",
    "repo": "apex",
    "content": "TITLE: Declaring Variables in Apex Language\nDESCRIPTION: Demonstrates the syntax used to declare variables in Apex, including optional initialization. It emphasizes that every statement must end with a semicolon and provides context on using different types of statements in Apex. This snippet lays the groundwork for variable usage and assignment in Apex programming.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/README.md#_snippet_0\n\nLANGUAGE: Apex\nCODE:\n```\ndatatype variable_name [ = value];\n```\n\n----------------------------------------\n\nTITLE: SOQL Query for Apex Loop (SOQL)\nDESCRIPTION: Presents a SOQL query designed specifically for use within an Apex for loop. It retrieves parent Position__c records along with their related Job_Application__r children, filtered to include only parents that have associated children, allowing efficient processing of related records in Apex.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/APEX.md#_snippet_31\n\nLANGUAGE: SOQL\nCODE:\n```\nSELECT Id, Name, (SELECT Id, Name FROM Job_Applications__r)\nFROM Position__c\nWHERE Id IN (SELECT Position__c FROM Job_Application__c)\n```\n\n----------------------------------------\n\nTITLE: Manipulate Records with DML in Apex\nDESCRIPTION: Provides examples of DML operations including 'insert', 'upsert', 'merge', and 'update'. Demonstrates creating, inserting, retrieving IDs, bulk operations, and managing relationships between objects through foreign keys such as 'AccountId'. Highlights limitations like DML statement limits and showcases updating related records through separate DML calls.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/README.md#_snippet_31\n\nLANGUAGE: Apex\nCODE:\n```\n// Create the account sObject \nAccount acct = new Account(Name='Acme', Phone='(415)555-1212', NumberOfEmployees=100);\n// Insert the account by using DML\ninsert acct;\n\n// Get the new ID on the inserted sObject argument\nID acctID = acct.Id;\n// Display this ID in the debug log\nSystem.debug('ID = ' + acctID);\n\n// Debug log result (the ID will be different in your case)\n// DEBUG|ID = 001D000000JmKkeIAF\n```\n\nLANGUAGE: Apex\nCODE:\n```\n// Create a list of contacts\nList<Contact> conList = new List<Contact> {\n    new Contact(FirstName='Joe',LastName='Smith',Department='Finance'),\n        new Contact(FirstName='Kathy',LastName='Smith',Department='Technology'),\n        new Contact(FirstName='Caroline',LastName='Roth',Department='Finance'),\n        new Contact(FirstName='Kim',LastName='Shain',Department='Education')};\n            \n// Bulk insert all contacts with one DML call\ninsert conList;\n\n// List to hold the new contacts to update\nList<Contact> listToUpdate = new List<Contact>();\n\n// Iterate through the list and add a title only\n//   if the department is Finance\nfor(Contact con : conList) {\n    if (con.Department == 'Finance') {\n        con.Title = 'Financial analyst';\n        // Add updated contact sObject to the list.\n        listToUpdate.add(con);\n    }\n}\n\n// Bulk update all contacts with one DML call\nupdate listToUpdate;\n```\n\nLANGUAGE: Apex\nCODE:\n```\n// Create an account and insert\nAccount acct = new Account(Name='SFDC Account');\ninsert acct;\n\n// Obtain the inserted account's ID\nID acctID = acct.ID;\n\n// Add a contact related to this account\nContact mario = new Contact(\n    FirstName='Mario',\n    LastName='Ruiz',\n    Phone='415.555.1212',\n    AccountId=acctID);\ninsert mario;\n```\n\nLANGUAGE: Apex\nCODE:\n```\n// Updating related records involves separate update calls\n// Query for contact and related account\nContact queriedContact = [SELECT Account.Name \n                          FROM Contact \n                          WHERE FirstName = 'Mario' AND LastName='Ruiz'\n                          LIMIT 1];\n\n// Update contact's phone\nqueriedContact.Phone = '(415)555-1213';\n\n// Update account's industry\nqueriedContact.Account.Industry = 'Technology';\n\n// Perform updates\nupdate queriedContact;\nupdate queriedContact.Account;\n```\n\n----------------------------------------\n\nTITLE: Checking Field-Level Update Permission for Contact Email in Apex\nDESCRIPTION: Demonstrates how to verify if the current user has permission to update the Email field on Contact objects before performing an update operation. This ensures the operation respects user permissions beyond just sharing rules.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/HTTP-Security-Principles.md#_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nif (Schema.SObjectType.Contact.fields.Email.isUpdateable()) {\n    // Update email address\n}\n```\n\n----------------------------------------\n\nTITLE: Optimized SOQL Query Pattern in Bulk Triggers\nDESCRIPTION: Shows a recommended pattern for bulk Apex triggers (`before insert`, `before update`). It efficiently extracts record IDs from the `Trigger.newMap` context variable's key set into a `Set`. This ID set is then used in a single SOQL query's `WHERE IN` clause to fetch related `User` records, minimizing SOQL queries and respecting governor limits.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/README.md#_snippet_13\n\nLANGUAGE: Apex\nCODE:\n```\nTrigger MileageTrigger on Mileage__c (before insert, before update) {\n\tSet<ID> ids = Trigger.newMap.keySet();\n\tList<User> c = [SELECT Id FROM user WHERE mileage__c in :ids];\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Standard Parent-to-Child (SOQL)\nDESCRIPTION: Illustrates querying a standard parent-to-child relationship in SOQL using a nested SELECT statement (subquery). It retrieves the Account name and the LastName of related Contacts, noting the use of the plural relationship name 'Contacts' for standard objects.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/APEX.md#_snippet_19\n\nLANGUAGE: SOQL\nCODE:\n```\nSELECT Name,\n  (\n    SELECT LastName\n    FROM Contacts\n  )\nFROM Account\n```\n\n----------------------------------------\n\nTITLE: Using Variables in SOQL Queries\nDESCRIPTION: Explains bind variables in SOQL queries, identified by a colon prefix, allowing dynamic query parameters set by Apex variables. Used for filtering results based on runtime values, enabling flexible and efficient data retrieval.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/README.md#_snippet_38\n\n\n\n----------------------------------------\n\nTITLE: Bulk Insert and Conditional Update of Contact Records in Apex\nDESCRIPTION: This example demonstrates bulk operations by inserting multiple Contact records in one DML statement and then conditionally updating a subset of those records based on their Department field. This pattern is essential for efficient bulk data processing in Salesforce.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/APEX.md#_snippet_40\n\nLANGUAGE: apex\nCODE:\n```\n// Create a list of contacts\nList<Contact> conList = new List<Contact> {\n    new Contact(FirstName='Joe',LastName='Smith',Department='Finance'),\n        new Contact(FirstName='Kathy',LastName='Smith',Department='Technology'),\n        new Contact(FirstName='Caroline',LastName='Roth',Department='Finance'),\n        new Contact(FirstName='Kim',LastName='Shain',Department='Education')};\n            \n// Bulk insert all contacts with one DML call\ninsert conList;\n// List to hold the new contacts to update\nList<Contact> listToUpdate = new List<Contact>();\n// Iterate through the list and add a title only\n//   if the department is Finance\nfor(Contact con : conList) {\n    if (con.Department == 'Finance') {\n        con.Title = 'Financial analyst';\n        // Add updated contact sObject to the list.\n        listToUpdate.add(con);\n    }\n}\n// Bulk update all contacts with one DML call\nupdate listToUpdate;\n```\n\n----------------------------------------\n\nTITLE: Implementing a Queueable Class (Apex)\nDESCRIPTION: Defines an Apex class `UpdateParentAccount` that implements the `Queueable` interface. The constructor accepts a list of `Account` records and a parent ID. The `execute` method iterates through the accounts, sets their `parentId`, and updates them in the database. It can also include other processing logic like callouts.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/Queueable-Apex/README.md#_snippet_0\n\nLANGUAGE: Apex\nCODE:\n```\npublic class UpdateParentAccount implements Queueable {\n\n    private List<Account> accounts;\n    private ID parent;\n\n    public UpdateParentAccount(List<Account> records, ID Id) {\n        this.accounts = records;\n        this.parent = id;\n    }\n\n    public void execute(QueueableContext context) {\n        for(Account account : accounts) {\n            account.parentId = parent;\n            // perform other processing or callout\n        }\n        update accounts;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing an Apex Batch Class\nDESCRIPTION: This Apex snippet demonstrates how to initiate an asynchronous batch job. It first creates an instance of a custom batch class (`MyBatchClass`) and then submits it for execution using the `Database.executeBatch` method, which returns the ID of the submitted batch job.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/Update Record/README.md#_snippet_0\n\nLANGUAGE: Apex\nCODE:\n```\nMyBatchClass myBatchObject = new MyBatchClass(); \nId batchId = Database.executeBatch(myBatchObject);\n```\n\n----------------------------------------\n\nTITLE: Declaring an Apex Variable\nDESCRIPTION: This snippet demonstrates the general syntax for declaring a variable in Apex. It includes optional modifiers like public, private, protected, global, final, and static, followed by the data type, variable name, and an optional initial value. The modifiers control the accessibility and behavior of the variable.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/Apex-Best-Practices.md#_snippet_6\n\nLANGUAGE: apex\nCODE:\n```\n [public | private | protected | global] [final] [static] data_type variable_name [= value]\n```\n\n----------------------------------------\n\nTITLE: Batch Apex Class Template Implementing Database.Batchable Interface\nDESCRIPTION: Template for an Apex batch class implementing Database.Batchable<sObject> with the required methods: start (to return a query locator), execute (to process batch scope records), and finish (to finalize batch operations). The included comments emphasize asynchronous processing benefits, governor limits reset per batch, and job queue execution. The constructor and query string serve as placeholders for job configuration.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/README.md#_snippet_24\n\nLANGUAGE: Apex\nCODE:\n```\nglobal class {{ api_name }} implements Database.Batchable<sObject> {\n\t\n\tString query;\n\t\n\tglobal {{ api_name }}() {\n\t\t\n\t}\n\t\n\tglobal Database.QueryLocator start(Database.BatchableContext BC) {\n\t\treturn Database.getQueryLocator(query);\n\t}\n\n    global void execute(Database.BatchableContext BC, List<sObject> scope) {\n\t\n\t}\n\t\n\tglobal void finish(Database.BatchableContext BC) {\n\t\t\n\t}\n\t\n}\n```\n\n----------------------------------------\n\nTITLE: Bulk Trigger for Copying Product Color in Apex\nDESCRIPTION: A bulk trigger executed before inserting OpportunityLineItem records. It collects distinct PricebookEntry IDs from the incoming line items into a set, performs a single SOQL query to fetch related product color information, and uses a map to efficiently assign the product color to each opportunity line item's color__c field. This approach minimizes queries and supports bulk operations following Salesforce best practices.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/ApexBestPractices.md#_snippet_6\n\nLANGUAGE: apex\nCODE:\n```\n// When a new line item is added to an opportunity, this trigger copies the value of the\n// associated product's color to the new record.\ntrigger oppLineTrigger on OpportunityLineItem (before insert) {\n  Set<Id> pbeIds = new Set<Id>();\n  for (OpportunityLineItem oli : Trigger.New) {\n    pbeIds.add(oli.pricebookentryid);\n  }\n\n  // Query the PricebookEntries for their associated product color and place the results\n  // in a map.\n  Map<Id, PricebookEntry> entries = new Map<Id, PricebookEntry>(\n        [SELECT product2.Color__c FROM PricebookEntry\n                                  WHERE Id\n                                  IN :pbeIds]);\n  // Now use the map to set the appropriate color on every OpportunityLineItem processed by the trigger.\n  for (OpportunityLineItem oli : Trigger.new)\n        oli.color__c = entries.get(oli.pricebookEntryId).product2.color__c;\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Parent's Child Records (Apex)\nDESCRIPTION: An Apex code snippet showing an inner `for` loop that iterates through the list of child records (Job_Applications__r) associated with a parent record (`pos`) retrieved from a relationship query. This loop processes the child records for the current parent instance, typically used within an outer loop iterating through parent records.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/APEX.md#_snippet_28\n\nLANGUAGE: Apex\nCODE:\n```\nfor (Job_application__c jobApp : pos.Job_Applications__r) {\n    // business logic\n  }\n```\n\n----------------------------------------\n\nTITLE: Calling a Method that Inserts an Account in Apex\nDESCRIPTION: This snippet demonstrates calling a method from the AccountHandler class that inserts a new account with the specified name. It shows how to modularize DML operations into reusable methods.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/APEX.md#_snippet_44\n\nLANGUAGE: apex\nCODE:\n```\nAccountHandler.insertNewAccount(\"Test\");\n```\n\n----------------------------------------\n\nTITLE: Processing Relationship Query Results (Apex)\nDESCRIPTION: Shows how to execute a SOQL relationship query directly within an Apex `for` loop or by assigning the query result to a List. It then demonstrates iterating through the list of parent objects and accessing the related child records for each parent using nested loops, displaying how to traverse the query result structure in Apex.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/APEX.md#_snippet_32\n\nLANGUAGE: Apex\nCODE:\n```\nList<Position__c> ps;\nps = [SELECT Id, Name, (SELECT Id, Name FROM Job_Applications__r)\n      FROM Position__c\n      WHERE Id IN (SELECT Position__c FROM Job_Application__c)];\n      \nfor (Position__c p : ps) {\n  for (Job_Application__c ja :p.Job_Applications__r) {\n    System.debug(p.id + ' - ' + p.Name + ' - ' + ja.Name);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Bulk Insert and Update of Contact Records Using Apex DML Statements\nDESCRIPTION: This code demonstrates efficient bulk DML operations by inserting a list of Contact sObjects in one call and selectively updating contacts belonging to the Finance department with a Title field in a second bulk update call, promoting governor limits compliance. It iterates over the inserted contacts, adds modified records to a list, and performs a single update.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/README.md#_snippet_21\n\nLANGUAGE: Apex\nCODE:\n```\n// Create a list of contacts\nList<Contact> conList = new List<Contact> {\n    new Contact(FirstName='Joe',LastName='Smith',Department='Finance'),\n        new Contact(FirstName='Kathy',LastName='Smith',Department='Technology'),\n        new Contact(FirstName='Caroline',LastName='Roth',Department='Finance'),\n        new Contact(FirstName='Kim',LastName='Shain',Department='Education')};\n            \n// Bulk insert all contacts with one DML call\ninsert conList;\n\n// List to hold the new contacts to update\nList<Contact> listToUpdate = new List<Contact>();\n\n// Iterate through the list and add a title only\n//   if the department is Finance\nfor(Contact con : conList) {\n    if (con.Department == 'Finance') {\n        con.Title = 'Financial analyst';\n        // Add updated contact sObject to the list.\n        listToUpdate.add(con);\n    }\n}\n\n// Bulk update all contacts with one DML call\nupdate listToUpdate;\n```\n\n----------------------------------------\n\nTITLE: Querying Parents and Related Children (SOQL)\nDESCRIPTION: A SOQL query designed to retrieve parent Position__c records along with their related child Job_Application__r records using a nested SELECT. It includes a WHERE clause with a subquery using `IN` to limit the results to only Position__c records that have at least one related Job_Application__c record, preparing the data structure for processing in Apex.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/APEX.md#_snippet_27\n\nLANGUAGE: SOQL\nCODE:\n```\nSELECT Id, Name, (SELECT Id, Name\n                  FROM Job_Application__r)\nFROM Position__c\nWHERE Id IN (SELECT Position__c\n              FROM Job_Application__c)\n```\n\n----------------------------------------\n\nTITLE: Upserting Records Using External ID Field in Apex\nDESCRIPTION: This snippet demonstrates the upsert operation using an external ID field. The upsert DML operation creates new records or updates existing ones based on a matching field, which allows for more efficient data integration scenarios.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/APEX.md#_snippet_41\n\nLANGUAGE: apex\nCODE:\n```\nupsert sObjectList Account.Fields.MyExternalId;\n```\n\n----------------------------------------\n\nTITLE: Querying Standard Parent-to-Child Re-iterated (SOQL)\nDESCRIPTION: Re-iterates querying a standard parent-to-child relationship in SOQL using a nested SELECT. Retrieves the Account name and FirstName/LastName from related Contacts, emphasizing the use of the plural relationship name ('Contacts').\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/APEX.md#_snippet_22\n\nLANGUAGE: SOQL\nCODE:\n```\nSELECT Name, (Select FirstName, LastName FROM Contacts) FROM Account\n```\n\n----------------------------------------\n\nTITLE: Enqueueing a Queueable Job (Apex)\nDESCRIPTION: Queries for `Account` records based on a condition and finds a specific parent account ID. It then instantiates the `UpdateParentAccount` class with the fetched accounts and parent ID and submits the instance to the asynchronous processing queue using `System.enqueueJob()`. The method returns a job ID for monitoring.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/Queueable-Apex/README.md#_snippet_1\n\nLANGUAGE: Apex\nCODE:\n```\n// find all accounts in ‘NY’\nList<Account> accounts = [select id from account where billingstate = ‘NY’];\n// find a specific parent account for all records\nId parentId = [select id from account where name = 'ACME Corp'][0].Id;\n// instantiate a new instance of the Queueable class\nUpdateParentAccount updateJob = new UpdateParentAccount(accounts, parentId);\n// enqueue the job for processing\nID jobID = System.enqueueJob(updateJob);\n```\n\n----------------------------------------\n\nTITLE: Querying Child-to-Parent Relationship (SOQL)\nDESCRIPTION: Demonstrates querying a standard child-to-parent relationship in SOQL using dot notation. It retrieves contact ID, name, and the name of the related Account for contacts where the Account's Industry is 'media'.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/APEX.md#_snippet_18\n\nLANGUAGE: SOQL\nCODE:\n```\nSELECT Id, Name, Account.Name\nFROM Contact\nWHERE Account.Industry = 'media'\n```\n\n----------------------------------------\n\nTITLE: Deleting Contact Records in Apex\nDESCRIPTION: This snippet shows how to query for Contact records with a specific LastName and then delete them using the delete DML operation. It demonstrates the pattern of selecting records and then performing bulk deletion.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/APEX.md#_snippet_45\n\nLANGUAGE: apex\nCODE:\n```\nContact[] contactsDel = [SELECT Id FROM Contact WHERE LastName='Smith']; \ndelete contactsDel;\n```\n\n----------------------------------------\n\nTITLE: Defining Apex REST Web Service Class for Account Plan in Apex\nDESCRIPTION: This Apex code snippet defines a global class 'AccountPlan' exposed as a web service with several webservice annotated fields and an inner global class 'Plan'. The 'createAccountPlan' static webservice method creates and inserts a Salesforce Account record using the Plan object's data and returns the updated Plan object with the Account Id. Dependencies include Salesforce Apex environment with webservice and global keywords for class/method exposure. Inputs are Plan object properties, and output is a Plan object containing the newly created Account Id. This implementation enables external systems to create account plans through REST web services, noting that the method runs in system context without enforcing user permissions. Developers must ensure sensitive data is handled carefully to avoid security risks.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/APEX.md#_snippet_2\n\nLANGUAGE: Apex\nCODE:\n```\nglobal class AccountPlan {\n  webservice String area; \n  webservice String region; \n  //Define an object in apex that is exposed in apex web service\n  global class Plan {\n  webservice String name;\n  webservice Integer planNumber;\n  webservice Date planningPeriod;\n  webservice Id planId;\n }\n  webservice static Plan createAccountPlan(Plan vPlan) {\n  //A plan maps to the Account object in salesforce.com. \n  //So need to map the Plan class object to Account standard object\n  Account acct = new Account();\n  acct.Name = vPlan.name;\n  acct.AccountNumber = String.valueOf(vPlan.planNumber);\n  insert acct;\n  vPlan.planId=acct.Id;\n  return vPlan;\n } \n}\n```\n\n----------------------------------------\n\nTITLE: Custom Iterable Class Template Implementing Apex Iterable Interface\nDESCRIPTION: Defines an Apex class implementing Iterable interface for a generic type, with an Iterator method returning a new instance of a custom iterator class. This setup facilitates the use of Apex for-each loops over custom collections by providing enumerator functionality.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/README.md#_snippet_28\n\nLANGUAGE: Apex\nCODE:\n```\npublic with sharing class {{ api_name }} implements Iterable<{{ type_name }}> {\n\nn  public Iterator<{{ type_name }}> Iterator(){\n    return new {{ iterator_class_name }}();\n  }\n  \n}\n```\n\n----------------------------------------\n\nTITLE: Querying Data Using SOQL in Salesforce Apex\nDESCRIPTION: This snippet summarizes how SOQL allows querying a single object at a time, supports all field types, and enables DML operations on the result set, facilitating flexible data retrieval within classes and triggers in Apex.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/APEX.md#_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Using Future Annotation for Asynchronous Web Service Callouts in Apex\nDESCRIPTION: This snippet explains how to define and use a method annotated with @future to execute web service callouts asynchronously in Apex, enabling non-blocking operations and resource optimization during external service interactions.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/APEX.md#_snippet_5\n\nLANGUAGE: Apex\nCODE:\n```\n@future\npublic static void calloutToExternalService() {\n    // Implementation of asynchronous web service callout\n}\n```\n\n----------------------------------------\n\nTITLE: Behavior-Driven Development (BDD) Unit Test Class Template in Apex\nDESCRIPTION: A minimal Apex test class template annotated with @isTest for implementing BDD style testing. It contains a single static test method 'itShould' with placeholders for Given, When, and Then testing stages to clearly establish conditions, actions, and expected outcomes, improving test readability and maintainability.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/README.md#_snippet_25\n\nLANGUAGE: Apex\nCODE:\n```\n@isTest\nprivate class {{ api_name }}\n{\n\t@isTest\n\tstatic void itShould()\n\t{\n\t\t// Given\n\n\n\t\t// When\n\n\n\t\t// Then\n\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Skeleton for Batch Apex Class Implementation (Apex)\nDESCRIPTION: Defines the basic structure required for a Batch Apex class in Salesforce, which must implement the `Database.Batchable<sObject>` interface. It outlines the three core methods (`start`, `execute`, and `finish`) necessary for retrieving records, processing them in batches, and performing final operations, respectively. This structure is essential for handling large datasets that exceed synchronous processing limits.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/Apex-Best-Practices.md#_snippet_2\n\nLANGUAGE: Apex\nCODE:\n```\nglobal class MyBatchClass implements Database.Batchable<sObject> {\n    global (Database.QueryLocator | Iterable<sObject>) start(Database.BatchableContext bc) {\n        // collect the batches of records or objects to be passed to execute\n    }\n    global void execute(Database.BatchableContext bc, List<P> records){\n        // process each batch of records\n    }\n    global void finish(Database.BatchableContext bc){\n        // execute any post-processing operations\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing an Apex Map with Key-Value Pairs\nDESCRIPTION: Shows how to declare and initialize an Apex `Map` with String keys and String values using curly brace syntax. Key-value pairs are specified using the `=>` operator. This example initializes a map with two entries, converting the second value to uppercase during initialization.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/README.md#_snippet_9\n\nLANGUAGE: Apex\nCODE:\n```\nMap<String, String> MyStrings = new Map<String, String>{'a' => 'b', 'c' => 'd'.toUpperCase()};\n```\n\n----------------------------------------\n\nTITLE: Simple Apex DML Insert Statement to Create Account Record\nDESCRIPTION: Demonstrates creation of an Account sObject with specified fields and the insertion of this record into Salesforce database using the 'insert' DML statement. This basic example is foundational for managing data persistence using Apex. Key parameters include field values like Name, Phone, and NumberOfEmployees, with no explicit dependencies other than Salesforce's standard Account object.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/README.md#_snippet_19\n\nLANGUAGE: Apex\nCODE:\n```\n// Create the account sObject\nAccount acct = new Account (Name='Acme', Phone='(415)-635-9877', NumberOfEmployees=100);\n// Insert the account by using DML\ninsert acct;\n```\n\n----------------------------------------\n\nTITLE: Understanding Change Data Capture in Salesforce\nDESCRIPTION: This detailed overview describes Change Data Capture as a real-time data replication mechanism publishing events for create, update, delete, and undelete operations. It covers its stages, including data initial load, synchronization, and reconciliation, along with event formats, object support, and event replay capabilities.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/APEX.md#_snippet_14\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"schema\":\"TIOb-jG_qRb2ucSBIdByMA\",\n  \"payload\":{\n    \"ChangeEventHeader\":{\n      \"entityName\":\"Employee__c\",\n      \"recordIds\":[\"a00xx0000004GvqAAE\"],\n      \"changeType\":\"CREATE\",\n      \"changeOrigin\":\"com/salesforce/api/soap/44.0;client=GetCloudy\",\n      \"transactionKey\":\"00059b44-a6c7-ffa7-af68-8a455868ed30\",\n      \"sequenceNumber\":1,\n      \"isTransactionEnd\":true,\n      \"commitTimestamp\":1533160499000,\n      \"commitUser\":\"005xx000001SwSiAAK\",\n      \"commitNumber\":356619267\n    },\n    \"First_Name__c\":\"Jane\",\n    \"Last_Name__c\":\"Smith\",\n    \"Name\":\"e-100\",\n    \"Tenure__c\":2.0,\n    \"LastModifiedDate\":\"2018-08-01T21:54:58Z\",\n    \"OwnerId\":\"005xx000001SwSiAAK\",\n    \"CreatedById\":\"005xx000001SwSiAAK\",\n    \"CreatedDate\":\"2018-08-01T21:54:58Z\",\n    \"LastModifiedById\":\"005xx000001SwSiAAK\"\n  },\n  \"event\":{\n    \"replayId\":1\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Shipping_Invoice__C Object in Apex\nDESCRIPTION: This Apex code snippet demonstrates the instantiation of a `Shipping_Invoice__C` object and sets the initial values of its fields to zero.  This practice is beneficial for ensuring data consistency and avoiding unexpected results in the context of triggers and data manipulation operations.  It minimizes the chances of uninitialized or erroneous data being stored in your Salesforce environment.  It is a best practice to explicitly initialize all relevant fields to a known default value.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/ApexBestPractices.md#_snippet_0\n\nLANGUAGE: apex\nCODE:\n```\nShipping_Invoice__C order1 = new Shipping_Invoice__C(subtotal__c = 0,\n                          totalweight__c = 0, grandtotal__c = 0,\n                          ShippingDiscount__c = 0, Shipping__c = 0, tax__c = 0);\n```\n\n----------------------------------------\n\nTITLE: Creating and Inserting a Single Account Record in Apex\nDESCRIPTION: This snippet demonstrates how to create an Account sObject and insert it into the database using a basic DML operation. It shows the fundamental syntax for creating and persisting a new record.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/APEX.md#_snippet_38\n\nLANGUAGE: apex\nCODE:\n```\n// Create the account sObject \nAccount acct = new Account(Name='Acme', Phone='(415)555-1212', NumberOfEmployees=100);\n// Insert the account by using DML\ninsert acct;\n```\n\n----------------------------------------\n\nTITLE: SOQL Query with Downwards Traversal\nDESCRIPTION: Demonstrates a SOQL query retrieving Account records along with their related Contact list through nested subquery. Highlights SOQL syntax for parent-child relationships, including nested queries and relationship name conventions, useful for accessing related data efficiently.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/README.md#_snippet_34\n\nLANGUAGE: apex\nCODE:\n```\nSELECT Id, Name, Industry, AnnualRevenue,\n    ( SELECT Name, Email, BirthDate FROM Contacts )\n    FROM Account\n```\n\n----------------------------------------\n\nTITLE: Monitoring AsyncApexJob Status (SOQL)\nDESCRIPTION: Shows a SOQL query to retrieve information about an asynchronous Apex job from the `AsyncApexJob` standard object. The query filters by the job ID returned when the job was enqueued. It retrieves fields like `Id`, `Status`, and `NumberOfErrors` to track the job's execution state.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/Queueable-Apex/README.md#_snippet_2\n\nLANGUAGE: SOQL\nCODE:\n```\nSELECT Id, Status, NumberOfErrors, FROM AsyncApexJob WHERE Id = :jobID\n```\n\n----------------------------------------\n\nTITLE: Using Apex Map Methods\nDESCRIPTION: Demonstrates common Apex `Map` operations: defining a map, adding key-value pairs using `put()`, checking for key existence with `containsKey()`, retrieving a value for a specific key using `get()`, and obtaining a `Set` of all keys using `keySet()`. Uses `System.assert` and `System.assertEquals` for verification.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/README.md#_snippet_10\n\nLANGUAGE: Apex\nCODE:\n```\nMap<Integer, String> m = new Map<Integer, String>(); // Define a new map\nm.put(1, 'First entry');                  // Insert a new key-value pair in the map\nm.put(2, 'Second entry');                  // Insert a new key-value pair in the map\nSystem.assert(m.containsKey(1));  // Assert that the map contains a key\nString value = m.get(2);               // Retrieve a value, given a particular key\nSystem.assertEquals('Second entry', value);\nSet<Integer> s = m.keySet();       // Return a set that contains all of the keys in the map\n```\n\n----------------------------------------\n\nTITLE: Creating and Manipulating Maps in Apex\nDESCRIPTION: This Apex code snippet demonstrates basic operations on a Map with Integer keys and String values. It defines a new map, inserts key-value pairs using put, checks for key existence using containsKey, retrieves values with get, and obtains the set of all keys using keySet. The snippet requires the Salesforce Apex runtime environment and uses standard Map methods to show core functionality of Map collections.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/Map/Map.md#_snippet_0\n\nLANGUAGE: Apex\nCODE:\n```\nMap<Integer, String> m = new Map<Integer, String>(); // Define a new map\nm.put(1, 'First Entry'); // Insert a new key-value pair in the map\nm.put(2, 'Second Entry'); // Insert the key-value pair in the map\nSystem.assert(m.containsKey(1)); // Assert that the map contains a key\nString value = m.get(2); // Retrieve a particular key\nSystem.assertEquals('Second Entry', value);\nSet<Integer> s = m.keySet(); // Return a set that contains all of the keys in the map\n```\n\n----------------------------------------\n\nTITLE: Counting All Records (SOQL Aggregate)\nDESCRIPTION: Demonstrates using the `COUNT(*)` aggregate function in SOQL to retrieve the total number of records in the Account object, including those with null field values. This returns a single row with the count.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/APEX.md#_snippet_29\n\nLANGUAGE: SOQL\nCODE:\n```\nSELECT COUNT(*) FROM Account\n```\n\n----------------------------------------\n\nTITLE: Salesforce Platform Event Payload for Employee Create (JSON)\nDESCRIPTION: This JSON object demonstrates the structure of a Salesforce Platform Event payload (Change Data Capture event) generated upon the creation of a new `Employee__c` record. The payload includes the initial values for the record's fields and metadata. The `ChangeEventHeader` specifies the `changeType` as \"CREATE\", identifies the new record ID, and provides transaction details.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/APEX.md#_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{  \n \"schema\":\"TIOb-jG_qRb2ucSBIdByMA\",\n \"payload\":{\n  \"LastModifiedDate\":\"2018-09-20T21:30:06Z\",\n  \"OwnerId\":\"005B0000004xULvIAM\",\n  \"CreatedById\":\"005B0000004xULvIAM\",\n  \"ChangeEventHeader\":{\n   \"isTransactionEnd\":true,\n   \"commitNumber\":10341190291016,\n   \"commitUser\":\"005B0000004xULvIAM\",\n   \"sequenceNumber\":1,\n   \"entityName\":\"Employee__c\",\n   \"changeType\":\"CREATE\",\n   \"changeOrigin\":\"com/salesforce/api/soap/44.0;client=SfdcInternalAPI/\",\n   \"transactionKey\":\"000861b9-2218-2464-9404-c16b0e2fee71\",\n   \"commitTimestamp\":1537479006000,\n   \"recordIds\":[ \n    \"a00B00000098x4aIAA\"\n   ]\n  },\n  \"CreatedDate\":\"2018-09-20T21:30:06Z\",\n  \"First_Name__c\":\"Patricia\",\n  \"LastModifiedById\":\"005B0000004xULvIAM\",\n  \"Name\":\"e-100\",\n  \"Last_Name__c\":\"Smith\"\n },\n \"event\":{  \n  \"replayId\":16907794\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Asynchronous Apex Future Method\nDESCRIPTION: This snippet illustrates the basic syntax for defining a Future method in Apex. It uses the `@future` annotation, is declared as `static` and `void`, and accepts a `List<Id>` parameter, demonstrating the requirement for primitive types or collections. Future methods are used for asynchronous operations like callouts or background tasks.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/Apex-Best-Practices.md#_snippet_5\n\nLANGUAGE: Apex\nCODE:\n```\nglobal class SomeClass {\n  @future\n  public static void someFutureMethod(List<Id> recordIds) {\n    List<Account> accounts = [SELECT Id, Name from Account WHERE Id IN :recordIds];\n      // process something\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Iteration For Loop Syntax (Apex)\nDESCRIPTION: Provides the general syntax for an Apex iteration `for` loop, designed for easily processing each element in a collection (List or Set). The syntax requires the variable's data type to match the element type of the collection being iterated.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/APEX.md#_snippet_34\n\nLANGUAGE: Apex\nCODE:\n```\nfor (data_type variable_name : list_name or set_name) {}\n```\n\n----------------------------------------\n\nTITLE: Salesforce Platform Event Payload for Employee Update (JSON)\nDESCRIPTION: This JSON object shows the structure of a Salesforce Platform Event payload (Change Data Capture event) for an update operation on an `Employee__c` record. The payload contains only the fields that were modified (`First_Name__c`, `Tenure__c`), along with the `ChangeEventHeader` indicating the `changeType` as \"UPDATE\", the affected record ID, and event metadata.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/APEX.md#_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n \"schema\":\"TIOb-jG_qRb2ucSBIdByMA\",\n \"payload\":{\n  \"LastModifiedDate\":\"2018-09-20T21:31:08Z\",\n  \"ChangeEventHeader\":{ \n   \"isTransactionEnd\":true,\n   \"commitNumber\":10341190536560,\n   \"commitUser\":\"005B0000004xULvIAM\",\n   \"sequenceNumber\":1,\n   \"entityName\":\"Employee__c\",\n   \"changeType\":\"UPDATE\",\n   \"changeOrigin\":\"com/salesforce/api/soap/44.0;client=SfdcInternalAPI/\",\n   \"transactionKey\":\"000861c7-a3cb-f5bf-8c8a-a5e3cf9b8278\",\n   \"commitTimestamp\":1537479068000,\n   \"recordIds\":[\n    \"a00B00000098x4aIAA\"\n   ]\n  },\n  \"First_Name__c\":\"Trish\",\n  \"Tenure__c\":3.0\n },\n \"event\":{ \n  \"replayId\":16907799\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying AsyncApexJob Status (Apex)\nDESCRIPTION: Illustrates how to query the `AsyncApexJob` object using SOQL to check the status and progress of an asynchronous Apex job, such as a Batch Apex job. It selects fields like `Id`, `Status`, `JobItemsProcessed`, and `NumberOfErrors`, using the `Id` returned from `Database.executeBatch` to filter the result. This is useful for monitoring job execution.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/Apex-Best-Practices.md#_snippet_4\n\nLANGUAGE: Apex\nCODE:\n```\nAsyncApexJob job = [SELECT Id, Status, JobItemsProcessed, NumberOfErrors FROM AsyncApexJob WHERE ID = :batchId];\n```\n\n----------------------------------------\n\nTITLE: Apex IF Statements\nDESCRIPTION: Provides syntax for conditional logic using 'if', 'else if', and 'else'. Encloses code blocks within braces, executing different code paths based on boolean comparisons, enabling decision-making within Apex classes or triggers.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/README.md#_snippet_37\n\nLANGUAGE: Apex\nCODE:\n```\nif (insert comparison operator) {\n    // Code that runs if the above is true\n} else if (another comparison operator) {\n    // Code that runs if only the above line is true\n} else {\n    // Code that runs if everything else is false\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing an Apex Set with Values\nDESCRIPTION: Demonstrates how to create and initialize an Apex `Set` of Strings with specific values ('a', 'b', 'c') using the `new` keyword and curly braces syntax. The resulting set will contain these three unique string elements.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/README.md#_snippet_7\n\nLANGUAGE: Apex\nCODE:\n```\nSet<String> My_String = new Set<String>{'a', 'b', 'c'};\n```\n\n----------------------------------------\n\nTITLE: Conditional Statements Using If-Else in Apex Language\nDESCRIPTION: Shows how to implement conditional logic in Apex using if-else statements combined within a code block. The snippet illustrates grouping multiple statements inside curly braces to execute different debug outputs depending on the Boolean condition. This example highlights the use of code blocks and semicolon-terminated statements in Apex.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/README.md#_snippet_1\n\nLANGUAGE: Apex\nCODE:\n```\nif (true) {\n\tSystem.debug(1);\n\tSystem.debug(2);\n} else {\n\tSystem.debug(3);\n\tSystem.debug(4);\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring and Initializing Lists in Apex Language\nDESCRIPTION: Provides the syntax patterns for declaring and optionally initializing lists in Apex. The snippet details how to define generic typed lists, including empty initialization and initialization with values, emphasizing Apex's strong typing requirements. These patterns are fundamental for creating ordered collections that support duplicates.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/README.md#_snippet_2\n\nLANGUAGE: Apex\nCODE:\n```\nList<datatype> list_name\n\t[= new List<datatype>();] |\n\t[= new List<datatype>{value, [, value2...]};] |\n\t;\n```\n\n----------------------------------------\n\nTITLE: Creating a Shipping Invoice with Initialized Fields in Apex\nDESCRIPTION: This example demonstrates creating a Shipping_Invoice__C object with all numeric fields explicitly initialized to zero. This follows the best practice of setting default values to avoid having extraneous data in tests and to ensure consistent behavior.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/APEX.md#_snippet_47\n\nLANGUAGE: apex\nCODE:\n```\nShipping_Invoice__C order1 = new Shipping_Invoice__C(subtotal__c = 0,\n                          totalweight__c = 0, grandtotal__c = 0,\n                          ShippingDiscount__c = 0, Shipping__c = 0, tax__c = 0);\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Sets with Various Data Types in Apex\nDESCRIPTION: This code snippet illustrates how to declare and initialize Sets with different data types, including primitives, collections, sObjects, user-defined types, and built-in Apex types for efficient data management and exclusion filtering.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/APEX.md#_snippet_8\n\nLANGUAGE: Apex\nCODE:\n```\nSet<String> stringSet = new Set<String>();\nSet<Id> idSet = new Set<Id>();\nSet<sObject> sObjectSet = new Set<sObject>();\nSet<CustomType__c> customTypeSet = new Set<CustomType__c>();\nSet<Integer> intSet = new Set<Integer>();\n```\n\n----------------------------------------\n\nTITLE: Example HTTP POST Request\nDESCRIPTION: This snippet demonstrates an HTTP POST request used for login. It shows the structure of a POST request, including headers like Host, User-Agent, Content-Type, and Content-Length, and includes the request body containing the login credentials (login=alice&password=correcthorsebatterystaple). The purpose is to authenticate a user on the server.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/HTTP-Security-Principles.md#_snippet_7\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /login HTTP/1.1\nHost: lotsofgoods.me\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.84 Safari/537.36\nOrigin: https://codebashing.com\nReferer: https://codebashing.com/courses\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\nAccept-Encoding: gzip, deflate\nAccept-Language: en-US,en;q=0.9\nUpgrade-Insecure-Requests: 1\nCookie: sessionid=55fc9da99a9d425c8ec8c597fd5bec61\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 46\nConnection: close\nlogin=alice&password=correcthorsebatterystaple\n```\n\n----------------------------------------\n\nTITLE: Creating Abstract Classes in Apex\nDESCRIPTION: Illustrates how to define an abstract class in Apex with both abstract and concrete methods. The example shows a GameCoin class with an abstract coinValue() method and a concrete absorbCoin() method that uses the abstract method.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/README.md#_snippet_48\n\nLANGUAGE: apex\nCODE:\n```\npublic abstract class GameCoin { \n     \n  public abstract Integer coinValue(); \n     \n  public Integer absorbCoin(Integer existingPoint){ \n    return existingPoint + coinValue(); \n  }  \n}\n```\n\n----------------------------------------\n\nTITLE: General Explanation of sObjects in Salesforce Apex\nDESCRIPTION: This content describes the concept of sObjects as generic object representations in Apex, with concrete examples such as Vehicle (and its subclasses Car and Motor Bike), and standard sObjects like Account and Opportunity, emphasizing their flexible usage in data operations.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/APEX.md#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Initializing an Apex Map with Integer Keys\nDESCRIPTION: Provides a concise example of declaring and initializing an Apex `Map` where the keys are of type `Integer` and the values are `String`. The map is populated with three key-value pairs upon creation using the curly brace syntax and `=>` operator.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/README.md#_snippet_12\n\nLANGUAGE: Apex\nCODE:\n```\nMap<Integer, String> My_Map = new Map<Integer, String>{1 => 'a', 2=> 'b', 3 => 'c'};\n```\n\n----------------------------------------\n\nTITLE: Semi-Join: Querying Task IDs with Contact Mailing City in Apex\nDESCRIPTION: This Apex code snippet demonstrates a semi-join query, retrieving task IDs for contacts located in Twin Falls. It uses a subquery within the `IN` clause to filter tasks by their associated contact's mailing city. This retrieves a list of `Task` Ids based on the filter condition specified within the subquery.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/SOQL/Semi-Joins with In/README.md#_snippet_2\n\nLANGUAGE: Apex\nCODE:\n```\nSELECT Id\nFROM Task\nWHERE WhoId IN\n(\n    SELECT Id\n    FROM CONTACT\n    WHERE MailiingCity = 'Twin Falls'\n)\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Instance Methods in Apex\nDESCRIPTION: This Apex code defines a class `Plotter` that uses instance methods and variables.  It creates a nested `Point` class and uses a `List` to store the points. The `plot` method adds a point to the list, and the `render` method (currently empty) is intended for further processing of the points.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/README.md#_snippet_52\n\nLANGUAGE: apex\nCODE:\n```\npublic class Plotter {\n    // This inner class manages the points\n    class Point {\n        Double x;\n        Double y;\n\n        Point(Double x, Double y) {\n            this.x = x;\n            this.y = y;\n        }\n        Double getXCoordinate() {\n            return x;\n        }\n        Double getYCoordinate() {\n            return y;\n        }\n    }\n\n    List<Point> points = new List<Point>();\n\n    public void plot(Double x, Double y) {\n        points.add(new Point(x, y));\n    }\n\n    // The followting method takes the list of points and does somethin\n    public void render() {\n\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Apex Interface Template with Method Signature Definition\nDESCRIPTION: Defines a basic Apex interface template with a placeholder for the API name and a single method signature 'operation' returning an Integer. This interface serves as a contract to be implemented by Apex classes, enforcing the implementation of specified methods.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/README.md#_snippet_22\n\nLANGUAGE: Apex\nCODE:\n```\npublic interface {{ api_name }} {\n\n\t//Define the method signature to be implemented in classes that implements the interface\n\t//Example method\n\tInteger operation();\n}\n```\n\n----------------------------------------\n\nTITLE: Trigger to Invoke Static Discount Method on Book Records Before Insert in Apex\nDESCRIPTION: An Apex trigger named 'HelloWorldTrigger' that executes before inserting records of type Book__c. The trigger retrieves new book records using Trigger.new and passes them to the static applyDiscount method of MyHelloWorld class, demonstrating best practices for leveraging static methods within triggers to apply business logic before database insertions.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/README.md#_snippet_17\n\nLANGUAGE: Apex\nCODE:\n```\ntrigger HelloWorldTrigger on Book__c (before insert) {\n\t\n\tBook__c[] books = Trigger.new;\n\t\n\tMyHelloWorld.applyDiscount (books);\n}\n```\n\n----------------------------------------\n\nTITLE: Calling the Automatic Apex Properties\nDESCRIPTION: This Apex example calls the `AutomaticProperty` class, and tries to write values to properties, to show the get and set modifiers usage. The `MyReadOnlyProperty` fails because its not writable. `MyReadWriteProperty` runs with no errors, and MyWriteOnlyProperty fails the read error.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/README.md#_snippet_57\n\nLANGUAGE: apex\nCODE:\n```\n// calling this class:\nAutomaticProperty ap = new AutomaticProperty();\nap.MyReadOnlyProperty = 5; // this produces a compile error: not writable\nap.MyReadWriteProperty = 5; // No error\nSystem.assertEquals(5, MyWriteOnlyProperty); // This produces a compile error: not readable\n```\n\n----------------------------------------\n\nTITLE: Simple Apex Trigger (before insert)\nDESCRIPTION: This Apex trigger executes before inserting a new Account record. It demonstrates the basic structure of a trigger and uses System.debug to print a message to the debug logs. This trigger does not depend on any other components.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/src/triggers/Apex-Triggers.md#_snippet_0\n\nLANGUAGE: Apex\nCODE:\n```\ntrigger HelloWorldTrigger on Account (before insert) {\n    System.debug('Hello World!');\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Static Members in Apex\nDESCRIPTION: This snippet demonstrates the correct and incorrect ways to access static members of a class in Apex. It highlights that static members are accessed using the class name, not an instance of the class, while instance members are accessed using an instance variable.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/README.md#_snippet_51\n\nLANGUAGE: apex\nCODE:\n```\n// MyClass has a static variable = myStaticVariable\n// myClassInstance is an instance of MyClass\nmyClassInstance.myStaticVariable // not a legal expression\nMyClass.myStaticVariable // legal\nMyClassInstance.myStaticMethod() // not a legal expression\nMyClass.myStaticMethod() // legal\n```\n\n----------------------------------------\n\nTITLE: Creating Automatic Apex Properties\nDESCRIPTION: This snippet demonstrates automatic Apex properties.  It creates three properties: a read-only property (`MyReadOnlyProperty`), a read-write property (`MyReadWriteProperty`), and a write-only property (`MyWriteOnlyProperty`). Accessing the properties shows the use of a set accessor to generate a compile error.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/README.md#_snippet_56\n\nLANGUAGE: apex\nCODE:\n```\npublic class AutomaticProperty {\n    public integer MyReadOnlyProperty { get; }\n    public double MyReadWriteProperty { get; set; }\n    public string MyWriteOnlyProperty { set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Handling Custom Exception in Apex\nDESCRIPTION: This code snippet demonstrates how to create a custom exception in Apex by extending the built-in `Exception` class. It also showcases how to throw and catch the custom exception within a try-catch block. The example includes a base exception and a derived exception, illustrating inheritance in exception handling.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/Apex Unit Tests.md#_snippet_0\n\nLANGUAGE: Apex\nCODE:\n```\npublic class ExceptionExample {\n    public virtual class BaseException extends Exception {}\n    public class OtherException extends BaseException {}\n\n    public static void testExtendedException() {\n        try {\n            Integer i=0;\n            if (i < 5) throw new OtherException('This is bad');\n        } catch (BaseException e) {\n            // This catches the OtherException\n            System.debug(e.getMessage());\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Apex Properties\nDESCRIPTION: This snippet illustrates the basic syntax of an Apex property. It demonstrates the declaration of an `access_modifier`, the `return_type`, and a `property_name`.  Properties use `get` and `set` accessors to control how the property is read and modified.  The example includes a basic class `BasicClass` to demonstrate the property definition.  Also shows the class call and using `get` and `set` accessors\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/README.md#_snippet_53\n\nLANGUAGE: apex\nCODE:\n```\nPublic class BasicClass {\n\n    // Property declaration\n    access_modifier return_type property_name {\n        get {\n            // Get accessor code block\n        }\n        set {\n            // Set accessor code block\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking Batch Apex in Apex\nDESCRIPTION: This code demonstrates how to call a Batch Apex class in Apex. The steps involve instantiating the Batch Apex class and then calling `Database.executeBatch()` to submit the job for execution.  An optional scope parameter allows for specifying the number of records per batch. The method returns a job ID that can be used to track progress and the status of the batch job. This is a standard mechanism to process data in the background, adhering to governor limits.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/ApexBestPractices.md#_snippet_2\n\nLANGUAGE: apex\nCODE:\n```\nMyBatchClass myBatchObject = new MyBatchClass();\nId batchId = Database.executeBatch(myBatchObject);\nId batchId = Database.executeBatch(myBatchObject, 100);\n```\n\n----------------------------------------\n\nTITLE: Sample HTTP Response with Security Headers\nDESCRIPTION: Presents an example HTTP response showcasing several important security headers like Content-Security-Policy, Strict-Transport-Security, X-Content-Type-Options, X-Frame-Options, and X-XSS-Protection. These headers instruct browsers to enforce security policies, mitigating common web vulnerabilities.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/HTTP-Security-Principles.md#_snippet_4\n\nLANGUAGE: HTTP\nCODE:\n```\nHTTP/1.1 200 OK\nDate: Thu, 21 Mar 2019 09:05:07 GMT\nContent-Type: text/html; charset=utf-8\nContent-Length: 0\nConnection: close\nCache-Control: max-age=600\nContent-Security-Policy: script-src 'self' *.codebashing.com 'unsafe-inline' 'unsafe-eval'  www.google-analytics.com; img-src 'self' *.codebashing.com\nExpires: Thu, 21 Mar 2019 09:15:06 GMT\nLocation: https://codebashing.com\nstrict-transport-security: max-age=31536000\nVary: Accept-Language, Accept-Encoding\nx-content-type-options: nosniff\nX-Frame-Options: DENY\nX-Robots-Tag: noodp\nx-xss-protection: 1; mode=block\n```\n\n----------------------------------------\n\nTITLE: Apex Getter and Setter Properties\nDESCRIPTION: Shows how to define public properties with automatic getter and setter methods, enabling encapsulation and property access syntax. Alternatively, explicit getter and setter methods can be implemented for more control over property access.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/README.md#_snippet_32\n\nLANGUAGE: Apex\nCODE:\n```\npublic class MyClass {\n\tpublic String myVariable {get; set;}\n}\n```\n\nLANGUAGE: Apex\nCODE:\n```\npublic class MyClass {\n\tpublic String myVariable;\n\t\n\tpublic void setMyVariable(String input){\n\t\tmyVariable = input;\n\t}\n\t\n\tpublic String getMyVariable(){\n\t\treturn myVariable;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Exceptions with Inheritance in Apex\nDESCRIPTION: Demonstrates defining a custom exception hierarchy in Apex by extending the base `Exception` class (`BaseException`) and creating a derived exception (`OtherException`). A static method (`testExtendedException`) shows how a `try-catch` block targeting the base exception type can successfully catch instances of derived exception types, illustrating polymorphism in exception handling.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/src/unitTests/BestPractices.md#_snippet_0\n\nLANGUAGE: Apex\nCODE:\n```\npublic class ExceptionExample {\n    public virtual class BaseException extends Exception {}\n    public class OtherException extends BaseException {}\n\n    public static void testExtendedException() {\n        try {\n            Integer i=0;\n            if (i < 5) throw new OtherException('This is bad');\n        } catch (BaseException e) {\n            // This catches the OtherException\n            System.debug(e.getMessage());\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Saving Duplicate Accounts Using DML Options in Salesforce Apex - Java\nDESCRIPTION: This code demonstrates how to create and insert a Salesforce Account record that may be identified as a duplicate using Apex. It configures the Database.DMLOptions.DuplicateRuleHeader to allow saving duplicate records by setting AllowSave to true. Prerequisites include Salesforce Apex runtime and proper permissions to perform DML operations. The inputs are the account data, and the output is a SaveResult that indicates success or failure. Limitations: Settings only affect Apex DML, not actions performed through the Salesforce UI.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/DuplicateManagement.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nDatabase.DMLOptions dml = new Database.DMLOptions();\ndml.DuplicateRuleHeader.AllowSave = true;\nAccount duplicateAccount = new Account(Name='dupe');\nDatabase.SaveResult sr = Database.insert(duplicateAccount, dml);\nif (sr.isSuccess()) {\n    System.debug('Duplicate account has been inserted in Salesforce!');\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Future Method in Apex\nDESCRIPTION: Example of a future method implementation in Apex that processes Account records asynchronously. The method accepts a List of record IDs as parameters since objects cannot be passed to future methods. This pattern is commonly used for callouts or isolating DML operations.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/ApexBestPractices.md#_snippet_3\n\nLANGUAGE: Apex\nCODE:\n```\nglobal class SomeClass {\n  @future\n  public static void someFutureMethod(List<Id> recordId) {\n    List<Account> accounts = [SELECT Id, Name from Account WHERE Id IN :recordIds] {\n      // process something\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Variables in Apex\nDESCRIPTION: Defines the syntax and options for declaring variables in Apex, showing modifiers such as public, private, protected, global, final, and static. The syntax mandates providing a data type and variable name, with optional initialization. This snippet serves as a template for creating variables with specific access levels and characteristics in Apex classes or anonymous blocks.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/ApexBestPractices.md#_snippet_4\n\nLANGUAGE: apex\nCODE:\n```\n [public | private | protected | global] [final] [static] data_type variable_name [= value]\n```\n\n----------------------------------------\n\nTITLE: Example HTTP 200 OK Response\nDESCRIPTION: This code block represents a typical HTTP response with a 200 OK status code. It includes response headers like Date, Server, ETag, Cache-Control, Content-Type, and Content-Length, along with the response body containing HTML content. The response indicates successful retrieval of the requested resource.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/HTTP-Security-Principles.md#_snippet_6\n\nLANGUAGE: HTTP\nCODE:\n```\nHTTP/1.1 200 OK\nDate: Sat, 08 March 2019 12:33:14 GMT\nServer: nginx/1.11.9\nX-Frame-Options: ALLOW-FROM https://academy.checkmarx.net\nETag: W/\"8ca5dd4f507a4295e629491c\"\nCache-Control: max-age=0, private, must-revalidate\nSet-Cookie: trackingCookie=user135727\nX-Request-Id: 295e586f-7cab-4530-b5cb-1c\nX-Runtime: 0.2243\nConnection: close\nContent-Type: text/html; charset=utf-8\nContent-Length: 8576\n<!DOCTYPE html>\n<-- Web Page content -->\n```\n\n----------------------------------------\n\nTITLE: Applying Discount with Static Apex Method\nDESCRIPTION: This Apex code defines a static method `applyDiscount` within the `IterateOverBooks` class. The method takes an array of `Book__c` sObjects, iterates through them using a for-each loop, and updates the `Price__c` field of each book by applying a 10% discount. This illustrates how to perform bulk updates on records using static methods without needing to instantiate the class.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/APEX.md#_snippet_0\n\nLANGUAGE: apex\nCODE:\n```\npublic class IterateOverBooks {\n  public static void applyDiscount(Book__c[] books) {\n    for (Book__c b :books) {\n      b.Price__c *= 0.9;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CSP with Nonce, Strict Dynamics, and Object Restriction\nDESCRIPTION: This HTTP header example demonstrates a Content Security Policy (CSP) configuration using 'strict-dynamic' and a nonce ('RandomValue'). It allows scripts with the specified nonce and propagates trust to scripts loaded by them, specifies permitted schemes (http:, https:), potentially allows scripts from 'https://codebashing.com' if they have the nonce, permits 'unsafe-inline' (which might be ignored due to 'strict-dynamic'), and explicitly disallows plugin content via 'object-src 'none''.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/HTTP-Security-Principles.md#_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nContent-Security-Policy: script-src 'strict-dynamic' 'nonce-RandomValue' 'unsafe-inline' http: https:https://codebashing.com; object-src 'none';\n```\n\n----------------------------------------\n\nTITLE: Applying Discount via Static Method in Apex\nDESCRIPTION: Defines a static method 'applyDiscount' within the 'MyHelloWorld' class that iterates over an array of Book__c objects and applies a 10% discount on their Price__c field. This method is static, allowing it to be called without instantiating the class. The snippet demonstrates use of static methods to directly manipulate sObject fields in bulk.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/README.md#_snippet_16\n\nLANGUAGE: Apex\nCODE:\n```\npublic class MyHelloWorld {\n\tpublic static void applyDiscount (Book__c[] books) {\n\t\tfor (Book__c b :books) {\n\t\t\tb.Price__c *= 0.9;\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Salesforce Data Types and Collection Structures\nDESCRIPTION: Details various Apex data types including String, Date, Number, Boolean, and sObjects. Explains collection types such as List, Set, and Map, emphasizing List ordering, Set uniqueness, and Map key-based lookup. Demonstrates usage of dot notation for object methods and properties.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/README.md#_snippet_35\n\nLANGUAGE: Apex\nCODE:\n```\n// List example\nContact firstContact = peopleToSpam[0];\nContact lastContact  = peopleToSpam[peopleToSpam.size() - 1];\n```\n\nLANGUAGE: Apex\nCODE:\n```\n// Dot notation example\nInteger numOpps = opps.size();  // List method\nString iLoveCaps = myContact.FirstName.capitalize(); // String method\n```\n\n----------------------------------------\n\nTITLE: Defining - Apex Method - Syntax\nDESCRIPTION: This snippet details the syntax for defining a method in Apex. It includes optional modifiers (access control, override, static), the required return data type (or void), the method name, a list of input parameters enclosed in parentheses, and the method body enclosed in braces.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/APEX.md#_snippet_49\n\nLANGUAGE: apex\nCODE:\n```\n[public | private | protected | global] [override] [static] data_type method_name (input parameters)\n{\n// The body of the method\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Apex Class Structure\nDESCRIPTION: Provides the general syntax template for defining an Apex class. It includes placeholders for access modifiers (private, public, global), optional definition modifiers (virtual, abstract, with sharing, without sharing), the class keyword, class name, and optional 'implements' and 'extends' clauses for interfaces and inheritance.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/README.md#_snippet_42\n\nLANGUAGE: Apex\nCODE:\n```\nprivate | public | global \n[virtual | abstract | with sharing | without sharing]\nclass ClassName [implements InterfaceNameList] [extends ClassName]\n{\n    //the body of the class\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Apex Class Variables (Members)\nDESCRIPTION: Shows the syntax for declaring member variables (attributes) within an Apex class. This includes the access modifier, optional 'final' and 'static' keywords, the data type, the variable name, and an optional initial value assignment.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/README.md#_snippet_43\n\nLANGUAGE: Apex\nCODE:\n```\n[public | private | protected | global] [final] [static] data_type variable_name \n[= value] \n```\n\n----------------------------------------\n\nTITLE: Salesforce Platform Event Payload for Employee Undelete (JSON)\nDESCRIPTION: This JSON object illustrates the structure of a Salesforce Platform Event payload, specifically a Change Data Capture event, generated when an `Employee__c` record is undeleted. It includes the event schema, payload containing the restored record data and metadata, and event replay information. The `ChangeEventHeader` specifies the `changeType` as \"UNDELETE\" and identifies the affected record.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/APEX.md#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n \"schema\":\"TIOb-jG_qRb2ucSBIdByMA\",\n \"payload\":{\n  \"LastModifiedDate\":\"2018-09-20T21:52:27Z\",\n  \"OwnerId\":\"005B0000004xULvIAM\",\n  \"CreatedById\":\"005B0000004xULvIAM\",\n  \"ChangeEventHeader\":{  \n   \"isTransactionEnd\":true,\n   \"commitNumber\":10341195374106,\n   \"commitUser\":\"005B0000004xULvIAM\",\n   \"sequenceNumber\":1,\n   \"entityName\":\"Employee__c\",\n   \"changeType\":\"UNDELETE\",\n   \"changeOrigin\":\"com/salesforce/api/soap/44.0;client=devconsole\",\n   \"transactionKey\":\"000a9934-32e1-ed11-a74d-8c735d12841c\",\n   \"commitTimestamp\":1537480347000,\n   \"recordIds\":[  \n    \"a00B00000098x4aIAA\"\n   ]\n  },\n  \"CreatedDate\":\"2018-09-20T21:30:06Z\",\n  \"First_Name__c\":\"Trish\",\n  \"LastModifiedById\":\"005B0000004xULvIAM\",\n  \"Tenure__c\":3.0,\n  \"Name\":\"e-100\",\n  \"Last_Name__c\":\"Smith\"\n },\n \"event\":{  \n  \"replayId\":16908128\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking an Instance Method on an Apex Object\nDESCRIPTION: Demonstrates how to instantiate an Apex class (EmailManager) to create an object ('em') and then call a public instance method (sendMail) on that object using dot notation. Arguments required by the method are passed within the parentheses.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/README.md#_snippet_46\n\nLANGUAGE: Apex\nCODE:\n```\nEmailManager em = new EmailManager();\nem.sendMail('Your email address', 'Trailhead Tutorial', '123 body');\n```\n\n----------------------------------------\n\nTITLE: Auth.RegistrationHandler Implementation Template in Apex\nDESCRIPTION: Shows a skeleton implementation of an Apex class implementing the Auth.RegistrationHandler interface with two methods: createUser and updateUser, both intended for managing portal user identities based on Auth.UserData input. The methods include placeholders for logic such as matching existing users, provisioning new users, or updating user details.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/README.md#_snippet_23\n\nLANGUAGE: Apex\nCODE:\n```\npublic class {{ api_name }} implements Auth.RegistrationHandler {\n    \n    public User createUser(Id portalId, Auth.UserData data) {\n        \n\t\t// Match the Auth.UserData to an existing user?\n\t\t// Update user details from Auth.UserData?\n\t\t// Provision a new user where the User does not exist?\n\t\t\n        return null;\n    }\n    \n    public void updateUser(Id userId, Id portalId, Auth.UserData data) {\n        \n\t\t// Update user details from Auth.UserData?\n\t\t\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring and Initializing Static Constants - Apex\nDESCRIPTION: This Apex code snippet demonstrates how to declare and initialize `static final` constants within a class. It shows two methods: direct assignment during declaration and assignment within a static initialization block that calls a static helper method. This ensures the constant's value is set only once when the class is loaded.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/README.md#_snippet_49\n\nLANGUAGE: Apex\nCODE:\n```\npublic class myClass {\n    static final Integer PRIVATE_INT_CONST = 220;\n    static final Integer PRIVATE_INT_CONST2;\n\n    public static Integer calculate() {\n        return 2 + 7;\n    }\n\n    static {\n        PRIVATE_INT_CONST2 = calculate;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Apex Properties\nDESCRIPTION: This snippet shows how to call and interact with an Apex property defined in the `BasicProperty` class. The `bp.prop = 5` line invokes the set accessor, and `System.assertEqual(5, bp.prop)` invokes the get accessor.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/README.md#_snippet_54\n\nLANGUAGE: apex\nCODE:\n```\npublic class BasicProperty {\n    public Integer prop {\n        get { return prop; }\n        set { prop = value; }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Anti-Join with NOT IN (SOQL)\nDESCRIPTION: Shows an Anti-Join in SOQL to find parent records (Position__c) that do not have any related child records (Job_Application__c). It uses a subquery within a `WHERE` clause with `NOT IN` to exclude Position__c records whose IDs are found in the Position__c field of any Job_Application__c records.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/APEX.md#_snippet_25\n\nLANGUAGE: SOQL\nCODE:\n```\nSELECT Id, Name\nFROM Position__c\nWHERE Id NOT IN (SELECT Position__c FROM Job_Application__c)\n```\n\n----------------------------------------\n\nTITLE: Calling the Static Properties in Apex\nDESCRIPTION: This Apex snippet calls the `StaticProperty` class to show how it interacts with static member variables. The instance properties generate errors, and the legal way to call static properties is through the class name.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/README.md#_snippet_59\n\nLANGUAGE: apex\nCODE:\n```\n// call the instance and static properties\nStaticProperty sp = new StaticProperty();\n// The following produces a system error: a static variable cannot be\n// accessed through an object instance\n// sp.MyGoodStaticProp = 5;\n// The following does not produce an error\nStaticProperty.MyGoodStaticProp = 5;\n```\n\n----------------------------------------\n\nTITLE: Using Static Properties in Apex\nDESCRIPTION: This code demonstrates static properties in Apex. `StaticProperty` class has a static `StaticMember` and an instance `NonStaticMember`. It also demonstrates the legal access of a static variable `MyGoodStaticProperty` by the class name and shows how to call instance properties.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/README.md#_snippet_58\n\nLANGUAGE: apex\nCODE:\n```\npublic class StaticProperty {\n    private static integer StaticMember;\n    private integer NonStaticMember;\n\n    // The following produces a system error\n    // public static integer MyBadStaticProp { return NonStaticMember; }\n\n    public static integer MyGoodStaticProperty {\n        get { return StaticMember; }\n        set { StaticMember = value; }\n    }\n\n    public integer MyGoogNonStaticProperty {\n        get { return NonStaticMember; }\n        set { NonStaticMember = value; }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample HTTP POST Response\nDESCRIPTION: Provides an example of an HTTP response to a POST request. Similar to the GET response, it includes the status line and response headers, indicating the server's outcome after processing the data sent in the POST request.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/HTTP-Security-Principles.md#_snippet_3\n\nLANGUAGE: HTTP\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: text/html; charset=utf-8\nServer: nginx/1.11.9\nETag: W/\"d18a59b032422092a1daaccd9b46bbf4\"\nCache-Control: max-age=0, private, must-revalidate\nSet-Cookie: sessionid=26161af57b9de30f9b67d16be83700113f8742a136c26d3d2e90b677b85934fe\nConnection: close\nContent-Length: 1467\n<!DOCTYPE html>\n<-- Web Page content -->\n```\n\n----------------------------------------\n\nTITLE: Performing Right Anti-Join (SOQL)\nDESCRIPTION: Illustrates a Right Anti-Join in SOQL to find \"orphan\" child records (Job_Application__c) that are not related to a parent (Position__c). It achieves this by filtering records where the lookup or master-detail relationship field (`Position__c`) is null.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/APEX.md#_snippet_24\n\nLANGUAGE: SOQL\nCODE:\n```\nSELECT Name, Status__c \nFROM Job_Application__c\nWHERE Position__c = null\n```\n\n----------------------------------------\n\nTITLE: Instantiating - Java Object - Java\nDESCRIPTION: This snippet demonstrates how to create an instance of the `Student` class defined in Java. It shows using the `new` keyword to instantiate the object and then accessing and assigning a value to a member variable (`firstName`) using dot notation.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/APEX.md#_snippet_51\n\nLANGUAGE: java\nCODE:\n```\nStudent j = new Student();\nj.firstName = 'Janko';\n```\n\n----------------------------------------\n\nTITLE: Duplicate Example HTTP GET Request\nDESCRIPTION: This code snippet repeats an HTTP GET request. It is similar to the first GET example, showing the structure and headers.  The purpose is to retrieve the 'courses' resource, and it helps to understand the consistent structure of HTTP GET requests.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/HTTP-Security-Principles.md#_snippet_8\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /courses HTTP/1.1\nHost: codebashing.com\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.84 Safari/537.36\nOrigin: https://codebashing.com\nReferer: https://codebashing.com/dashboard\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\nAccept-Encoding: gzip, deflate\nAccept-Language: en-US,en;q=0.9,ru;q=0.8\nCache-Control: max-age=0\nUpgrade-Insecure-Requests: 1\nCookie:sessionid=b3cd288f3e3d499ca8e45fbae696f7b5\nConnection: close\n```\n\n----------------------------------------\n\nTITLE: Einstein API Access and Heroku Resources\nDESCRIPTION: Provides links to Einstein API tokens and resources, including documentation for authentication. Mentions Heroku Dynos for containerized runtime environments and describes slug and buildpack mechanisms for deploying and packaging applications, emphasizing isolation and process management.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/README.md#_snippet_39\n\n\n\n----------------------------------------\n\nTITLE: Iterating Query Results for Bulk Processing (Apex)\nDESCRIPTION: Demonstrates a basic loop structure used to iterate over a list of sObjects (`itemList`), typically retrieved by a single SOQL query. This pattern is a core component of bulkified Apex code, allowing processing of multiple records within governor limits after a single data retrieval operation.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/Apex-Best-Practices.md#_snippet_0\n\nLANGUAGE: Apex\nCODE:\n```\nfor(item__c i :itemList) {}\n```\n\n----------------------------------------\n\nTITLE: Declaring Empty Class for Pass-by-Reference Examples - Apex\nDESCRIPTION: This Apex code snippet provides the declaration for an empty class named `PassNonPrimitiveTypeExample`. According to the surrounding text, this class is intended to house methods and examples used to illustrate the concept of passing non-primitive data types, such as Lists, by reference in Apex programming. The actual code for the illustrative methods discussed in the text is not included in this specific snippet.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/README.md#_snippet_50\n\nLANGUAGE: Apex\nCODE:\n```\npublic class PassNonPrimitiveTypeExample {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Searching Multiple Objects with SOSL in Salesforce\nDESCRIPTION: This explains SOSL's ability to search across multiple objects simultaneously, limited to specific field types like email, text, or phone, and its restrictions such as inability to perform DML operations directly on search results.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/APEX.md#_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Instantiating SObject with Explicit Field Values (Apex)\nDESCRIPTION: Creates a new instance of the `Shipping_Invoice__C` custom object. It demonstrates initializing multiple custom fields (`subtotal__c`, `totalweight__c`, etc.) with explicit zero values upon object creation. This is particularly useful in test methods to ensure predictable starting data without relying on default field values defined in the object schema.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/Apex-Best-Practices.md#_snippet_1\n\nLANGUAGE: Apex\nCODE:\n```\nShipping_Invoice__C order1 = new Shipping_Invoice__C(subtotal__c = 0,\n                          totalweight__c = 0, grandtotal__c = 0,\n                          ShippingDiscount__c = 0, Shipping__c = 0, tax__c = 0);\n```\n\n----------------------------------------\n\nTITLE: Defining Apex Class Methods\nDESCRIPTION: Illustrates the syntax for defining methods within an Apex class. It covers access modifiers, optional 'override' and 'static' keywords, the return data type (or 'void' if no value is returned), the method name, input parameters within parentheses, and the method body enclosed in curly braces.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/README.md#_snippet_44\n\nLANGUAGE: Apex\nCODE:\n```\n[public | private | protected | global] [override] [static] data_type method_name \n(input parameters) \n{\n// The body of the method\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing and Iterating Over Apex List Elements\nDESCRIPTION: Shows how to retrieve elements from an Apex List using both the get(index) method and index notation ([index]). It also includes an example of iterating through a list using a standard for loop and System.debug to output element values.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/README.md#_snippet_41\n\nLANGUAGE: Apex\nCODE:\n```\n// Get elements from a list\nString color1 = moreColors.get(0);\nString color2 = moreColors[0];\nSystem.assertEquals(color1, color2);\n\n//iterate over a list to read elements\nfor(Integer i=0; i<colors.size(); i++) {\n    //write value to the debug log\n    System.debug(colors[i]);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CSP Allowing Specific Sources, Inline Scripts, and Eval\nDESCRIPTION: This example shows a Content Security Policy (CSP) header that allows scripts specifically from 'https://codebashing.com', permits inline scripts ('unsafe-inline'), and allows dynamic code evaluation via 'unsafe-eval'. It also allows images from any source ('img-src *') and sets a default policy allowing content only from the document's origin ('default-src 'self'').\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/HTTP-Security-Principles.md#_snippet_10\n\nLANGUAGE: http\nCODE:\n```\nContent-Security-Policy: script-src https://codebashing.com unsafe-inline' 'unsafe-eval'; img-src * ; default-src 'self'\n```\n\n----------------------------------------\n\nTITLE: Querying Accounts with IN Clause in Apex\nDESCRIPTION: This Apex code snippet demonstrates how to query `Account` objects using the `IN` clause to filter by the `BillingState` field. It retrieves `Name` from `Account` records where `BillingState` is either \"California\" or \"New York\". No specific dependencies are required other than the Salesforce environment. The output is a list of `Account` records.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/SOQL/Semi-Joins with In/README.md#_snippet_0\n\nLANGUAGE: Apex\nCODE:\n```\nSELECT Name FROM Account \nWHERE BillingState IN ('California', 'New York')\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Collections Using Lists and Sets in Apex Language\nDESCRIPTION: Illustrates the declaration and creation of nested collection types in Apex, specifically a list containing lists of sets of integers. This example demonstrates Apex's support for multi-level nested collections up to five levels deep, providing flexibility in complex data structures.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/README.md#_snippet_4\n\nLANGUAGE: Apex\nCODE:\n```\n// Create an empty list of String\nList<String> my_list = new List<String>();\n// Create a nested list\nList<List<Set<Integer>>> my_list_2 = new List<List<Set<Integer>>>();\n```\n\n----------------------------------------\n\nTITLE: Calling Apex Controller Method from JavaScript in Visualforce Page\nDESCRIPTION: This JavaScript snippet demonstrates how to call an Apex controller method from JavaScript within a Visualforce page using an actionfunction or equivalent mechanism. The provided code shows a JavaScript function calling 'callfromJS()', which implies the presence of an actionfunction defined elsewhere linking to an Apex method. This technique is essential when integrating client-side scripts with server-side Apex logic in Salesforce Visualforce pages. The snippet requires a Visualforce environment with an Apex controller containing the 'callfromJS' method and an <apex:actionfunction> component to bridge JavaScript calls to Apex methods.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/APEX.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n<script>\nfunction JSmethodCallFromAnyAction()\n{\ncallfromJS();\n}\n</apex:page>\n```\n\n----------------------------------------\n\nTITLE: Controller Extension Class Template with Constructor and Record Accessor in Apex\nDESCRIPTION: Defines a controller extension class with a constructor accepting an ApexPages.StandardController reference, initializing a private sObject member using the controller's getRecord method. Provides a method getRecordName to return a formatted string with the record's name and Id, useful for Visualforce controllers extending standard controller functionality.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/README.md#_snippet_26\n\nLANGUAGE: Apex\nCODE:\n```\npublic with sharing class {{ api_name }} {\n\n\tprivate final sObject mysObject;\n\n    // The extension constructor initializes the private member\n    // variable mysObject by using the getRecord method from the standard\n    // controller.\n    public {{ api_name }}(ApexPages.StandardController stdController) {\n        this.mysObject = (sObject)stdController.getRecord();\n    }\n\n    public String getRecordName() {\n        return 'Hello ' + (String)mysObject.get('name') + ' (' + (Id)mysObject.get('Id') + ')';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Apex Method\nDESCRIPTION: This snippet illustrates the syntax for defining a method in Apex. It includes optional modifiers, the return data type (or void), the method name, and a list of input parameters.  The method body contains the executable code.  Override can only be used in virtual or abstract classes.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/Apex-Best-Practices.md#_snippet_7\n\nLANGUAGE: apex\nCODE:\n```\n  [public | private | protected | global] [override] [static] data_type method_name (input parameters)\n{\n// The body of the method\n}\n```\n\n----------------------------------------\n\nTITLE: Using Getter and Setter Methods in Apex Controllers\nDESCRIPTION: This snippet explains the purpose of getter and setter methods in Apex controllers, where getters pass data to Visualforce pages and setters allow modification of controller variables from the page.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/APEX.md#_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: Implementing Pagination in Visualforce with StandardController\nDESCRIPTION: This Visualforce page demonstrates pagination for displaying Account records. It uses the `standardController` for the Account object and `recordSetVar` to handle the list of records. The `<apex:dataList>` component iterates through the `accounts` variable displaying the name, and `<apex:commandLink>` components trigger the `previous` and `next` actions provided by the standard set controller for navigation between pages of records.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/APEX.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<apex:page standardController=\"Account\" recordSetvar=\"accounts\">\n <apex:pageBlock title=\"Viewing Accounts\">\n <apex:form id=\"theForm\">\n <apex:pageBlockSection >\n <apex:dataList var=\"a\" value=\"{!accounts}\" type=\"1\">\n {!a.name}\n </apex:dataList>\n </apex:pageBlockSection>\n <apex:panelGrid columns=\"2\">\n <apex:commandLink action=\"{!previous}\">Previous</apex:commandLink>\n <apex:commandLink action=\"{!next}\">Next</apex:commandLink>\n </apex:panelGrid>\n </apex:form>\n </apex:pageBlock>\n</apex:page>\n```\n\n----------------------------------------\n\nTITLE: Sample HTTP GET Response\nDESCRIPTION: Illustrates a standard HTTP response to a GET request. It includes the status line (protocol, status code, status text) and various response headers, showing how a server responds to a client's request for data. The body includes HTML content.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/HTTP-Security-Principles.md#_snippet_1\n\nLANGUAGE: HTTP\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: text/html; charset=utf-8\nServer: nginx/1.11.9\nX-Frame-Options: ALLOW-FROM https://academy.checkmarx.net\nETag: W/\"8ca5dd4f507a4295e629491c\"\nCache-Control: max-age=0, private, must-revalidate\nSet-Cookie: trackingCookie=user1357272\nX-Request-Id: 295e586f-7cab-4530-b5cb-1c\nX-Runtime: 0.2243\nConnection: close\nContent-Length: 8576\n<!DOCTYPE html>\n<-- Web Page content -->\n```\n\n----------------------------------------\n\nTITLE: Sample HTTP GET Request\nDESCRIPTION: Provides an example of a standard HTTP GET request. It shows the request line (verb, path, protocol version) and various common request headers used by a browser, illustrating how a client asks a server for data.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/HTTP-Security-Principles.md#_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /courses HTTP/1.1\nHost: codebashing.com\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.84 Safari/537.36\nReferer: https://codebashing.com/\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\nAccept-Encoding: gzip, deflate\nAccept-Language: en-US,en;q=0.9,ru;q=0.8\nCache-Control: max-age=0\nUpgrade-Insecure-Requests: 1\nConnection: close\n```\n\n----------------------------------------\n\nTITLE: Sample HTTP POST Request\nDESCRIPTION: Shows an example of an HTTP POST request. It includes common headers and demonstrates how data is sent in the request body, typically used for submitting forms or sending data to be processed by the server.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/HTTP-Security-Principles.md#_snippet_2\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /login HTTP/1.1\nHost: www.lotsofgoods.me\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.84 Safari/537.36\nReferer: https://codebashing.com/\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\nAccept-Encoding: gzip, deflate\nAccept-Language: en-US,en;q=0.9\nUpgrade-Insecure-Requests: 1\nContent-Type: application/x-www-form-urlencoded\nConnection: close\nContent-Length: 46\n\nlogin=alice&password=correcthorsebatterystaple\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Visualforce Component with Attributes in Apex Markup\nDESCRIPTION: This Visualforce markup snippet defines a custom component with two required attributes: 'myValue' (String) and 'borderColor' (String). These attributes allow users of the component to specify dynamic text and styling properties. The component outputs the 'myValue' within an H1 HTML element styled with the 'borderColor' attribute. It illustrates Salesforce Visualforce component development where attribute tags define configurable properties. The snippet requires a Visualforce environment to use custom components, and prohibits defining certain reserved attribute names such as 'id' or 'rendered'. This enables reusable UI components with customizable appearance and behavior.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/APEX.md#_snippet_4\n\nLANGUAGE: Apex\nCODE:\n```\n<apex:component>\n <apex:attribute name=\"myValue\" description=\"This is the value for the component.\" type=\"String\" required=\"true\"/>\n <apex:attribute name=\"borderColor\" description=\"This is color for the border.\" type=\"String\" required=\"true\"/>\n  \n</p>\n<p>\n</p>\n<h1 style=\"border:{!borderColor}\">\n <apex:outputText value=\"{!myValue}\"/>\n </h1>\n<p>\n</p>\n<p>\n \n</apex:component>\n```\n\n----------------------------------------\n\nTITLE: Checking for First Trigger Execution in Context\nDESCRIPTION: Illustrates a pattern using a static boolean variable (e.g., `myclass.firstcall`) within a trigger or associated class to track whether the trigger logic has already run within the current transaction context. This is useful for preventing recursion or redundant operations in complex trigger scenarios where the same trigger might be invoked multiple times.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/README.md#_snippet_15\n\nLANGUAGE: Apex\nCODE:\n```\nif (!myclass.firstcall)\n{\n\t// First call into trigger\n\tmyclass.firstcall = true;\n}\nelse\n{\n\t// Subsequent call into trigger\n}\n```\n\n----------------------------------------\n\nTITLE: Using Access Modifiers on Property Accessors\nDESCRIPTION: This Apex code shows how to define access modifiers on individual property accessors. It demonstrates how to make the access modifier of an individual accessor more restrictive than the property's access modifier, thereby overriding the access of the property. The example defines the visibility for X,Y,Z properties.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/README.md#_snippet_60\n\nLANGUAGE: apex\nCODE:\n```\nglobal virtual class PropertyVisibility {\n    // X is private for read and public for write\n    public integer X { private get; set; }\n    // Y can be globally read but only written within a class\n    global integer Y { get; public set; }\n    // Z can be read within the class but only subclasses can set it\n    public integer Z { get; protected set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing UUID Variable in JavaScript\nDESCRIPTION: This snippet shows how to assign a hard-coded UUID string to a JavaScript variable. Dependencies are limited to the standard JavaScript runtime; no external libraries are necessary. Input is the UUID string, and output is the variable myuuid containing the value. Limitations: The snippet only initializes the variable; it does not demonstrate validation or further usage.\nSOURCE: https://github.com/salesforcesfdc/apex/blob/master/DuplicateManagement.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar myuuid = '3b241101-e2bb-4255-8caf-4136c566a962'\n```"
  }
]