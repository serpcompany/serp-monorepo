[
  {
    "owner": "ourresearch",
    "repo": "openalex-docs",
    "content": "TITLE: Filtering Works by Publication Year in OpenAlex API\nDESCRIPTION: This snippet demonstrates how to filter works in the OpenAlex API based on the publication year using the `filter` parameter.  The filter is applied to the `publication_year` attribute.  Input is the desired year and output is a list of works published in that year.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/filter-works.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttps://api.openalex.org/works?filter=publication_year:2020\n```\n\n----------------------------------------\n\nTITLE: Autocompleting Works with Type-Ahead Query - OpenAlex API - JSON\nDESCRIPTION: This snippet provides an example of using the OpenAlex autocomplete endpoint for works. By supplying a query term (e.g., 'tigers'), the API returns a JSON array of work titles and corresponding authors as hints, which is ideal for implementing type-ahead features. No authentication is needed; the response includes work IDs, display names, author hints, citation counts, and external links. Input is the search term; output is a structured list of matching work records optimized for UI suggestions.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/search-works.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\nhttps://api.openalex.org/autocomplete/works?q=tigers\n```\n\nLANGUAGE: json\nCODE:\n```\n{ \n  \"results\": [\n    {\n      \"id\": \"https://openalex.org/W2125098916\",\n      \"display_name\": \"Crouching tigers, hidden prey: Sumatran tiger and prey populations in a tropical forest landscape\",\n      \"hint\": \"Timothy G. O'Brien, Margaret F. Kinnaird, Hariyo T. Wibisono\",\n      \"cited_by_count\": 620,\n      \"works_count\": null,\n      \"entity_type\": \"work\",\n      \"external_id\": \"https://doi.org/10.1017/s1367943003003172\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Counting Distinct Institutions from Authorships for an OpenAlex Work in JSON\nDESCRIPTION: A JSON integer representing the distinct count of institutions affiliated with the authorships of the work. Inputs derive from linked institution records; this metric quantifies institution diversity.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/work-object/README.md#_snippet_23\n\nLANGUAGE: JSON\nCODE:\n```\ninstitutions_distinct_count: 4\n```\n\n----------------------------------------\n\nTITLE: Querying with external ID\nDESCRIPTION: This is an example using curl, to retrieve a work using its DOI. The endpoint takes a URL-formatted DOI as input. This demonstrates using a canonical external ID other than the OpenAlex ID to retrieve a resource from the API.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/how-to-use-the-api/get-single-entities/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhttps://api.openalex.org/works/https://doi.org/10.7717/peerj.4375\n```\n\n----------------------------------------\n\nTITLE: Sorting Works by Citation Count in OpenAlex API (HTTP)\nDESCRIPTION: This example demonstrates how to request a list of works from the OpenAlex API, ordered descendingly by their citation count using the sort parameter. No additional dependencies are needed—send a standard HTTP GET request to the provided endpoint. The resulting output is a JSON-formatted list of works, sorted by highest cited_by_count first; the cited_by_count:desc parameter ensures descending order. Only publicly accessible data is returned.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/how-to-use-the-api/get-lists-of-entities/sort-entity-lists.md#_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.openalex.org/works?sort=cited_by_count:desc\n```\n\n----------------------------------------\n\nTITLE: Filtering by Cites\nDESCRIPTION: This filter returns works that cite a specified work, using its OpenAlex ID. It searches for works that have the provided OpenAlex ID in their `referenced_works` section, effectively identifying incoming citations. The input is the OpenAlex ID of the work to find citing works for.  The output is a list of works citing the provided work. No dependencies are needed.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/filter-works.md#_snippet_7\n\nLANGUAGE: API\nCODE:\n```\nhttps://api.openalex.org/works?filter=cites:W2741809807\n```\n\n----------------------------------------\n\nTITLE: Selecting Fields in OpenAlex Sources List\nDESCRIPTION: Demonstrates how to limit the fields returned for each source object to `id`, `display_name`, and `issn`. This uses the `select` query parameter with a comma-separated list of desired fields, which can reduce response size.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/sources/get-lists-of-sources.md#_snippet_5\n\nLANGUAGE: API Request\nCODE:\n```\nhttps://api.openalex.org/sources?select=id,display_name,issn\n```\n\n----------------------------------------\n\nTITLE: Querying Single Entity with OpenAlex ID\nDESCRIPTION: This snippet demonstrates how to retrieve a single entity (in this case, a work) from the OpenAlex API using its OpenAlex ID. The OpenAlex ID is a unique identifier for resources in the OpenAlex database. The user provides the ID to the API endpoint and receives a JSON object describing the resource.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/how-to-use-the-api/get-single-entities/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://api.openalex.org/works/W2741809807\n```\n\n----------------------------------------\n\nTITLE: Selecting Works Fields OpenAlex API HTTP\nDESCRIPTION: Shows how to limit the fields returned within each work object in the list using the 'select' query parameter. This example restricts the returned fields to only 'id' and 'display_name' ('select=id,display_name'), which helps reduce response size and processing load.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/get-lists-of-works.md#_snippet_5\n\nLANGUAGE: HTTP\nCODE:\n```\nhttps://api.openalex.org/works?select=id,display_name\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Publishers from OpenAlex API (JSON)\nDESCRIPTION: This snippet demonstrates how to retrieve a list of all publishers from the OpenAlex API using a GET request. The response is a JSON object containing metadata about the results and an array of publisher objects.  Each publisher object includes information like ID and display name. There are no parameters in this base request.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/publishers/get-lists-of-publishers.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"meta\": {\n        \"count\": 7207,\n        \"db_response_time_ms\": 26,\n        \"page\": 1,\n        \"per_page\": 25\n    },\n    \"results\": [\n        {\n            \"id\": \"https://openalex.org/P4310311775\",\n            \"display_name\": \"RELX Group\",\n            // more fields (removed to save space)\n        },\n        {\n            \"id\": \"https://openalex.org/P4310320990\",\n            \"display_name\": \"Elsevier BV\",\n            // more fields (removed to save space)\n        },\n        // more results (removed to save space)\n    ],\n    \"group_by\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting OpenAlex Sources List by Cited Count\nDESCRIPTION: Illustrates how to sort the list of sources by the `cited_by_count` field in descending order. This uses the `sort` query parameter with the field name followed by a colon and the sort direction (`desc` or `asc`).\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/sources/get-lists-of-sources.md#_snippet_3\n\nLANGUAGE: API Request\nCODE:\n```\nhttps://api.openalex.org/sources?sort=cited_by_count:desc\n```\n\n----------------------------------------\n\nTITLE: Get Single Author by OpenAlex ID using OpenAlex API\nDESCRIPTION: Demonstrates fetching a single author's data from the OpenAlex API by appending their unique OpenAlex ID to the /authors endpoint.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/authors/get-a-single-author.md#_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nhttps://api.openalex.org/authors/A5023888391\n```\n\n----------------------------------------\n\nTITLE: Filtering Works by Institution Using ID - OpenAlex API - JSON\nDESCRIPTION: The example illustrates a two-step process to find all works associated with a specific institution. First, the institution is located using a search query, then the institution ID (e.g., 'I57206974' for NYU) is used as a filter in the works endpoint. The filter utilizes the institution's unique OpenAlex ID, ensuring comprehensive and accurate results across all naming variants. The output is a JSON list of works linked to the specified institution.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/search-works.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\nhttps://api.openalex.org/institutions?search=nyu\n```\n\nLANGUAGE: json\nCODE:\n```\nhttps://api.openalex.org/works?filter=institutions.id:I57206974\n```\n\n----------------------------------------\n\nTITLE: Paginating OpenAlex Sources List\nDESCRIPTION: Shows an example API request URL to retrieve the second page of sources, returning 50 results per page. This demonstrates how to control the result set size and offset using the `per-page` and `page` query parameters.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/sources/get-lists-of-sources.md#_snippet_2\n\nLANGUAGE: API Request\nCODE:\n```\nhttps://api.openalex.org/sources?per-page=50&page=2\n```\n\n----------------------------------------\n\nTITLE: Example Works List Response OpenAlex API JSON\nDESCRIPTION: Provides an example structure of the JSON response returned by the OpenAlex API when listing works. It includes metadata about the query (count, page, per_page) and a list of work objects in the 'results' array, showing common fields like 'id', 'doi', and 'title'. This serves as a guide to the expected data format.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/get-lists-of-works.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"meta\": {\n        \"count\": 245684392,\n        \"db_response_time_ms\": 929,\n        \"page\": 1,\n        \"per_page\": 25\n    },\n    \"results\": [\n        {\n            \"id\": \"https://openalex.org/W1775749144\",\n            \"doi\": \"https://doi.org/10.1016/s0021-9258(19)52451-6\",\n            \"title\": \"PROTEIN MEASUREMENT WITH THE FOLIN PHENOL REAGENT\",\n            // more fields (removed to save space)\n        },\n        {\n            \"id\": \"https://openalex.org/W2100837269\",\n            \"doi\": \"https://doi.org/10.1038/227680a0\",\n            \"title\": \"Cleavage of Structural Proteins during the Assembly of the Head of Bacteriophage T4\",\n            // more fields (removed to save space)\n        },\n        // more results (removed to save space)\n    ],\n    \"group_by\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Works by Publication Date (OpenAlex API, HTTP)\nDESCRIPTION: Demonstrates filtering works based on their publication date, returning works published on or before the specified date. The date is formatted as 'yyyy-mm-dd'.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/filter-works.md#_snippet_35\n\nLANGUAGE: HTTP\nCODE:\n```\nhttps://api.openalex.org/works?filter=to_publication_date:2001-03-14\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response with Selected Fields\nDESCRIPTION: Shows a sample JSON response snippet from the OpenAlex Works API when the 'select' parameter is used to request only the 'id', 'doi', and 'display_name' fields. This illustrates the structure of the returned 'results' array containing objects with only the specified fields.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/how-to-use-the-api/get-lists-of-entities/select-fields.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n\"results\": [\n  {\n    \"id\": \"https://openalex.org/W1775749144\",\n    \"doi\": \"https://doi.org/10.1016/s0021-9258(19)52451-6\",\n    \"display_name\": \"PROTEIN MEASUREMENT WITH THE FOLIN PHENOL REAGENT\"\n  },\n  {\n    \"id\": \"https://openalex.org/W2100837269\",\n    \"doi\": \"https://doi.org/10.1038/227680a0\",\n    \"display_name\": \"Cleavage of Structural Proteins during the Assembly of the Head of Bacteriophage T4\"\n  },\n  // more results removed for brevity\n]\n```\n\n----------------------------------------\n\nTITLE: Example API Response for Institutions List - JSON\nDESCRIPTION: Provides an example structure of the JSON response received when listing institutions. It includes metadata about the query, a list of institution results with key fields like id, ror, and display_name, and an empty group_by array.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/institutions/get-lists-of-institutions.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"meta\": {\n        \"count\": 108618,\n        \"db_response_time_ms\": 32,\n        \"page\": 1,\n        \"per_page\": 25\n    },\n    \"results\": [\n        {\n            \"id\": \"https://openalex.org/I27837315\",\n            \"ror\": \"https://ror.org/00jmfr291\",\n            \"display_name\": \"University of Michigan–Ann Arbor\",\n            // more fields (removed to save space)\n        },\n        {\n            \"id\": \"https://openalex.org/I201448701\",\n            \"ror\": \"https://ror.org/00cvxb145\",\n            \"display_name\": \"University of Washington\",\n            // more fields (removed to save space)\n        },\n        // more results (removed to save space)\n    ],\n    \"group_by\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Canonical DOI Representation for OpenAlex Works in JSON\nDESCRIPTION: A JSON string specifying the single canonical DOI of the published work. Even if multiple DOIs exist (e.g., preprint and published versions), this field holds only the one for the published version, serving as a standardized external persistent identifier.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/work-object/README.md#_snippet_15\n\nLANGUAGE: JSON\nCODE:\n```\ndoi: \"https://doi.org/10.7717/peerj.4375\"\n```\n\n----------------------------------------\n\nTITLE: Illustrating `is_oa` property (JSON)\nDESCRIPTION: Describes the `is_oa` boolean property. It is true if an Open Access (OA) version of this work is available at this location. OpenAlex broadly defines OA as having a URL where the fulltext can be read without payment or login.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/work-object/location-object.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\nis_oa: true\n```\n\n----------------------------------------\n\nTITLE: Filtering Institutions by Field and Search Term\nDESCRIPTION: This snippet illustrates filtering institutions by searching within a specific field using the OpenAlex API.  The example shows how to filter institutions based on the `display_name`.  The `.search` suffix is appended to the field name to enable searching within that field.  The provided URL searches for institutions with \"florida\" in their display name. Access to the OpenAlex API is the only dependency, and output is a JSON list of matching institutions.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/institutions/search-institutions.md#_snippet_1\n\nLANGUAGE: HTTP\nCODE:\n```\nhttps://api.openalex.org/institutions?filter=display_name.search:florida\n```\n\n----------------------------------------\n\nTITLE: Sorting Search Results by Year and Relevance in OpenAlex API (HTTP)\nDESCRIPTION: This example shows how to sort search results for works matching 'bioplastics' in the OpenAlex API first by publication year (descending) and then by relevance_score (descending). The API request uses both the filter and sort parameters; filter applies a search query and sort accepts multiple fields separated by commas. Only works matching the search string will be returned, and relevance-based sorting is only valid when a search query is present.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/how-to-use-the-api/get-lists-of-entities/sort-entity-lists.md#_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.openalex.org/works?filter=display_name.search:bioplastics&sort=publication_year:desc,relevance_score:desc\n```\n\n----------------------------------------\n\nTITLE: Filtering by Author ORCID Presence\nDESCRIPTION: This API call filters works to find those where at least one author has an ORCID ID.  The `has_orcid` filter checks the `orcid` field within the `authorships.author` field.  The input is a boolean value (`true` or `false`). The output returns works based on author ORCID presence. Note that author disambiguation can influence the results.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/filter-works.md#_snippet_18\n\nLANGUAGE: API\nCODE:\n```\nhttps://api.openalex.org/works?filter=has_orcid:true\n```\n\n----------------------------------------\n\nTITLE: Searching Works by Title and Abstract (OpenAlex API, HTTP)\nDESCRIPTION: Demonstrates performing a full-text search across the title ('display_name') and abstract fields of works. The filter value is the search string.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/filter-works.md#_snippet_33\n\nLANGUAGE: HTTP\nCODE:\n```\nhttps://api.openalex.org/works?filter=title_and_abstract.search:gum%20disease\n```\n\n----------------------------------------\n\nTITLE: Filtering by Cited By\nDESCRIPTION: This API call filters works based on the given work's OpenAlex ID. It retrieves works that are cited by the specified work. The filter leverages the `referenced_works` section of the work object. The input is an OpenAlex ID. The output is a list of works that cite the given work.  No prerequisites are required.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/filter-works.md#_snippet_6\n\nLANGUAGE: API\nCODE:\n```\nhttps://api.openalex.org/works?filter=cited_by:W2766808518\n```\n\n----------------------------------------\n\nTITLE: Grouping works by publication year using OpenAlex Works API\nDESCRIPTION: This code snippet shows how to group works by publication year using the OpenAlex Works API. It filters works by institution ID and publication year (2010-2020) and then groups the results by publication year using the `group-by` parameter. The API returns a JSON response containing the publication year, its display name, and the count of works for that year.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/quickstart-tutorial.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"key\": \"2020\",\n    \"key_display_name\": \"2020\",\n    \"count\": 18627\n  },\n  {\n    \"key\": \"2019\",\n    \"key_display_name\": \"2019\",\n    \"count\": 15933\n  },\n  {\n    \"key\": \"2017\",\n    \"key_display_name\": \"2017\",\n    \"count\": 14789\n  },\n  ...\n]\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Fields in OpenAlex API Response\nDESCRIPTION: This example demonstrates how to use the select parameter to retrieve only the id and display_name fields from a work entity in the OpenAlex API. The query uses a comma-separated list of field names to specify which fields to include in the response.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/how-to-use-the-api/get-single-entities/select-fields.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  id: \"https://openalex.org/W2138270253\",\n  display_name: \"DNA sequencing with chain-terminating inhibitors\"\n}\n```\n\n----------------------------------------\n\nTITLE: Paging Works List OpenAlex API HTTP\nDESCRIPTION: Shows how to retrieve a specific page of results when listing works using the 'page' and 'per-page' query parameters. This example requests the second page ('page=2') with 50 results per page ('per-page=50') to navigate large result sets beyond the default page and limit.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/get-lists-of-works.md#_snippet_2\n\nLANGUAGE: HTTP\nCODE:\n```\nhttps://api.openalex.org/works?per-page=50&page=2\n```\n\n----------------------------------------\n\nTITLE: Filtering Authors by ORCID Presence (API Call)\nDESCRIPTION: Demonstrates filtering authors using the OpenAlex API to retrieve only those who have an ORCID associated with their profile. The `has_orcid` filter is set to `true`. This is a convenience filter.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/authors/filter-authors.md#_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nhttps://api.openalex.org/authors?filter=has_orcid:true\n```\n\n----------------------------------------\n\nTITLE: Searching Institutions via API Endpoint\nDESCRIPTION: This snippet demonstrates how to search for institutions using the `search` query parameter in the OpenAlex API.  The query searches across the `display_name`, `display_name_alternatives`, and `display_name_acronyms` fields of the institution objects. The provided URL shows an example search for \"san diego state university\".  No dependencies are required besides access to the OpenAlex API.  The output is a list of matching institutions in JSON format.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/institutions/search-institutions.md#_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nhttps://api.openalex.org/institutions?search=san diego state university\n```\n\n----------------------------------------\n\nTITLE: Displaying Concept Level - OpenAlex - JSON\nDESCRIPTION: Presents the 'level' field, which is an integer denoting the specific depth of the concept in the hierarchical concept tree. Lower levels are more general concepts; higher ones are more specific. Output: integer.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/concepts/concept-object.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\nlevel: 2\n```\n\n----------------------------------------\n\nTITLE: Filtering Works by Institution and Excluding Repository (OpenAlex API, HTTP)\nDESCRIPTION: Demonstrates combining filters using a comma (',') and negating a filter using an exclamation mark ('!') to find works associated with a specific institution but *not* available in a particular repository.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/filter-works.md#_snippet_31\n\nLANGUAGE: HTTP\nCODE:\n```\nhttps://api.openalex.org/works?filter=institutions.id:I27837315,repository:!S4306400393\n```\n\n----------------------------------------\n\nTITLE: Filtering OpenAlex Topics by Subfield ID\nDESCRIPTION: This example demonstrates filtering topics using the OpenAlex API `/topics` endpoint to retrieve only those belonging to a specific subfield, identified by its ID (2713, corresponding to Epidemiology). The `filter` parameter is used with the `subfield.id` attribute.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/topics/filter-topics.md#_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nhttps://api.openalex.org/topics?filter=subfield.id:2713\n```\n\n----------------------------------------\n\nTITLE: Searching Source Names in OpenAlex API\nDESCRIPTION: Example of using the display_name.search filter to find sources with 'Neurology' in their name. This filter performs a text search on the display_name field of sources.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/sources/filter-sources.md#_snippet_2\n\nLANGUAGE: url\nCODE:\n```\nhttps://api.openalex.org/sources?filter=display_name.search:Neurology\n```\n\n----------------------------------------\n\nTITLE: Filtering Works by Primary Location Source Publisher Lineage (OpenAlex API, HTTP)\nDESCRIPTION: Demonstrates filtering works where the primary location's source's host organization lineage includes a specific publisher ID. The filter requires an OpenAlex Publisher ID as its value.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/filter-works.md#_snippet_27\n\nLANGUAGE: HTTP\nCODE:\n```\nhttps://api.openalex.org/works?filter=primary_location.source.publisher_lineage:https://openalex.org/P4310320547\n```\n\n----------------------------------------\n\nTITLE: Querying with ORCID ID\nDESCRIPTION: This demonstrates fetching an author using their ORCID ID. The URL is constructed with the API base, entity type (authors), and the ORCID in URL format.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/how-to-use-the-api/get-single-entities/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhttps://api.openalex.org/authors/https://orcid.org/0000-0003-1613-5981\n```\n\n----------------------------------------\n\nTITLE: Listing Topics: OpenAlex API - All\nDESCRIPTION: This URL retrieves the default list of all topics available in the OpenAlex database. It returns the first page of results with default pagination and sorting.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/topics/get-lists-of-topics.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttps://api.openalex.org/topics\n```\n\n----------------------------------------\n\nTITLE: Displaying Concept ID - OpenAlex - JSON\nDESCRIPTION: Shows the 'id' property, containing the canonical OpenAlex URI for the concept object. This string is unique within the OpenAlex dataset and used to reference concepts in API calls and data models.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/concepts/concept-object.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\nid: \"https://openalex.org/C2778407487\"\n```\n\n----------------------------------------\n\nTITLE: Redirecting HTTP Request\nDESCRIPTION: This code shows an example of how the API redirects requests if an entity has been merged into another. It's expected that the client handles this transparently by getting the data from the new location, but clients should be aware of this case, to optimize performance by replacing the old ID with the new ID in any stored lists.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/how-to-use-the-api/get-single-entities/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -i https://api.openalex.org/authors/A5092938886\nHTTP/1.1 301 MOVED PERMANENTLY\nLocation: https://api.openalex.org/authors/A5006060960\n```\n\n----------------------------------------\n\nTITLE: Filtering Works by Title Search Term - OpenAlex API - JSON\nDESCRIPTION: This snippet shows how to filter works to only those whose title contains a specified term (e.g., 'cubist') by appending '.search' to the field name in the OpenAlex API. Dependencies include basic understanding of filter parameters; no additional authentication is required. The API returns a JSON list of works where the title matches the provided term.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/search-works.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\nhttps://api.openalex.org/works?filter=title.search:cubist\n```\n\n----------------------------------------\n\nTITLE: Getting All Works OpenAlex API HTTP\nDESCRIPTION: Demonstrates how to retrieve the initial list of works from the OpenAlex API endpoint. This basic call returns the first page of results with default parameters (typically 25 results per page). No specific query parameters are required for this request.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/get-lists-of-works.md#_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nhttps://api.openalex.org/works\n```\n\n----------------------------------------\n\nTITLE: Filtering Works by Institution Continent\nDESCRIPTION: This endpoint filters works based on the continent of the institutions associated with the work. Replace `<continent>` with a valid continent value like `africa`, `europe`, etc. Refer to the table for available values.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/geo/continents.md#_snippet_2\n\nLANGUAGE: HTTP\nCODE:\n```\n/works?filter=institutions.continent:<continent>\n```\n\n----------------------------------------\n\nTITLE: Paging Authors Results from OpenAlex API\nDESCRIPTION: This snippet illustrates how to retrieve a specific page of author results using the `per-page` and `page` parameters in the OpenAlex API. It requests the second page with 50 results per page. The API call URL is given, demonstrating how to use these query parameters.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/authors/get-lists-of-authors.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\nhttps://api.openalex.org/authors?per-page=50\\&page=2\n```\n\n----------------------------------------\n\nTITLE: Showing OpenAlex Work Open Access Status JSON Example\nDESCRIPTION: Example JSON for the `open_access` attribute of an OpenAlex Work object. This object provides comprehensive information about the work's open access status, including `is_oa`, `oa_status`, `oa_url`, and whether a repository has the full text.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/work-object/README.md#_snippet_32\n\nLANGUAGE: JSON\nCODE:\n```\nopen_access: {\n    is_oa: true,\n    oa_status: \"gold\",\n    oa_url: \"https://peerj.com/articles/4375.pdf\",\n    any_repository_has_fulltext: true\n}\n```\n\n----------------------------------------\n\nTITLE: Example `cited_by_count` Field Value (JSON)\nDESCRIPTION: Shows an example integer value for the `cited_by_count` field within an OpenAlex Keyword object. This field represents the total number of citations received by works tagged with this specific keyword.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/keywords/README.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\ncited_by_count: 4347000\n```\n\n----------------------------------------\n\nTITLE: Displaying Works Count - OpenAlex - JSON\nDESCRIPTION: Presents the 'works_count' field, which is an integer representing the total number of works tagged with the current concept. Useful for statistics and analytics. Output: integer.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/concepts/concept-object.md#_snippet_17\n\nLANGUAGE: json\nCODE:\n```\nworks_count: 3078 \n```\n\n----------------------------------------\n\nTITLE: Filtering Works by Continent (Europe) in OpenAlex API\nDESCRIPTION: This snippet demonstrates how to filter works by the continent of the authors' institutions.  Specifically, the example filters for works where at least one author's institution is in Europe. The filter uses the `authorships.institutions.continent` parameter and specifies 'europe' as the value. This leverages a predefined geographical filter.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/filter-works.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nhttps://api.openalex.org/works?filter=authorships.institutions.continent:europe\n```\n\n----------------------------------------\n\nTITLE: Accessing OpenAlex API for Funders - URL\nDESCRIPTION: This URL represents the base endpoint for accessing a list of all funders available in the OpenAlex database via its API. Sending an HTTP GET request to this endpoint will retrieve a paginated list of funder objects.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/funders/README.md#_snippet_0\n\nLANGUAGE: URL\nCODE:\n```\nhttps://api.openalex.org/funders\n```\n\n----------------------------------------\n\nTITLE: Displaying Concept Description - OpenAlex - JSON\nDESCRIPTION: Presents the 'description' property of a Concept, containing a short summary string explaining the concept. Provided as an English-language string in API responses. Inputs: none; outputs: string.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/concepts/concept-object.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\ndescription: \"study of alternative metrics for analyzing and informing scholarship\"\n```\n\n----------------------------------------\n\nTITLE: Performing a Full-Text Search for Works - OpenAlex API - JSON\nDESCRIPTION: This snippet demonstrates how to search for works containing a specific term (e.g., 'dna') in the title, abstract, or fulltext using the OpenAlex API via the 'search' query parameter. No authentication is required for basic searches. The URL accepts a search term and returns a list of matching scholarly works in JSON format, with results ranked by relevance. Inputs include the desired keyword(s); outputs are paginated work records.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/search-works.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nhttps://api.openalex.org/works?search=dna\n```\n\n----------------------------------------\n\nTITLE: Filtering by OA Accepted or Published Version\nDESCRIPTION: This filter retrieves works with at least one accepted or published Open Access location. It utilizes the `has_oa_accepted_or_published_version` filter, based on the `is_oa` and `version` fields in the `locations` object. The input is a boolean value (`true` or `false`). The output includes works with a peer-reviewed OA copy, in cases of journal articles.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/filter-works.md#_snippet_16\n\nLANGUAGE: API\nCODE:\n```\nhttps://api.openalex.org/works?filter=has_oa_accepted_or_published_version:true\n```\n\n----------------------------------------\n\nTITLE: Searching OpenAlex Concepts by Display Name using HTTP\nDESCRIPTION: Shows how to filter OpenAlex concepts where the `display_name` contains a specific string (\"electrodynamics\") using the `display_name.search` convenience filter via an HTTP GET request. It's noted that the main `search` parameter is generally preferred for better results.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/concepts/filter-concepts.md#_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nhttps://api.openalex.org/concepts?filter=display_name.search:electrodynamics\n```\n\n----------------------------------------\n\nTITLE: Get Single Author by ORCID URN using OpenAlex API\nDESCRIPTION: Illustrates fetching an author's data from the OpenAlex API using the more concise Uniform Resource Name (URN) format for an ORCID (e.g., 'orcid:ID').\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/authors/get-a-single-author.md#_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nhttps://api.openalex.org/authors/orcid:0000-0002-1298-3089\n```\n\n----------------------------------------\n\nTITLE: Displaying Concept Cited By Count - OpenAlex - JSON\nDESCRIPTION: Displays the 'cited_by_count' integer field, representing the total number of citations to works tagged with this Concept in OpenAlex. Used in bibliometric applications to gauge influence or popularity of a concept. Inputs: none, shown as API response. Outputs: a single integer. No dependencies apart from the OpenAlex dataset.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/concepts/concept-object.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\ncited_by_count: 20248 \n```\n\n----------------------------------------\n\nTITLE: Grouping OpenAlex Works by OA Status via API\nDESCRIPTION: This example demonstrates an HTTP GET request to the OpenAlex API's `/works` endpoint. It uses the `group_by` parameter set to `oa_status` to retrieve counts of works categorized by their Open Access status.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/group-works.md#_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nhttps://api.openalex.org/works?group_by=oa_status\n```\n\n----------------------------------------\n\nTITLE: Autocomplete Funder Names\nDESCRIPTION: Illustrates using the OpenAlex autocomplete endpoint ('/autocomplete/funders') to get quick suggestions for funder names based on a partial query string ('q'). This is useful for implementing type-ahead search functionality. This example searches for funders starting with \"national sci\".\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/funders/search-funders.md#_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nhttps://api.openalex.org/autocomplete/funders?q=national+sci\n```\n\n----------------------------------------\n\nTITLE: Filtering by DOI Presence\nDESCRIPTION: This filter returns works based on whether they have a DOI assigned. It uses the `has_doi` filter with a boolean value. This is particularly useful for grouping works. The input is a boolean value (`true` or `false`). The output lists works that either have or do not have a DOI.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/filter-works.md#_snippet_15\n\nLANGUAGE: API\nCODE:\n```\nhttps://api.openalex.org/works?filter=has_doi:false\n```\n\n----------------------------------------\n\nTITLE: Filtering Authors by Last Known Institution's Continent (API Call)\nDESCRIPTION: Illustrates filtering authors based on the continent of their last known institution using the `last_known_institution.continent` convenience filter in the OpenAlex API. This example retrieves authors whose last known institution is in Africa.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/authors/filter-authors.md#_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nhttps://api.openalex.org/authors?filter=last_known_institution.continent:africa\n```\n\n----------------------------------------\n\nTITLE: Example GET request for second page with basic paging\nDESCRIPTION: Demonstrates how to retrieve the second page of results from the OpenAlex API using the 'page' parameter. By default, each page returns 25 results, but this can be customized with 'per-page' parameter up to 200. Essential for paginating through initial data sets.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/how-to-use-the-api/get-lists-of-entities/paging.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\nhttps://api.openalex.org/works?page=2\n```\n\n----------------------------------------\n\nTITLE: Filtering by PMID Presence\nDESCRIPTION: This filter retrieves works based on the presence or absence of a PubMed identifier (PMID). The `has_pmid` filter checks for the existence of a PMID. The input is a boolean (`true` or `false`). The output returns works that have or lack a PMID.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/filter-works.md#_snippet_20\n\nLANGUAGE: API\nCODE:\n```\nhttps://api.openalex.org/works?filter=has_pmid:true\n```\n\n----------------------------------------\n\nTITLE: Example GET request for second page with 200 results using basic paging\nDESCRIPTION: Shows how to retrieve 200 results on the second page by setting 'per-page=200'. Useful for bulk data retrieval within the basic paging constraints. Assumes prior familiarity with the basic paging method.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/how-to-use-the-api/get-lists-of-entities/paging.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\nhttps://api.openalex.org/works?page=2&per-page=200\n```\n\n----------------------------------------\n\nTITLE: Filtering Authors by Display Name Search (API Call)\nDESCRIPTION: Shows how to filter authors by searching for a specific string within their `display_name` using the `display_name.search` convenience filter in the OpenAlex API. This example searches for authors whose display name contains \"tupolev\".\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/authors/filter-authors.md#_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nhttps://api.openalex.org/authors?filter=display_name.search:tupolev\n```\n\n----------------------------------------\n\nTITLE: Representing Citation Normalized Percentile (JSON)\nDESCRIPTION: Example of the `citation_normalized_percentile` object, which contains the work's citation percentile normalized by type, year, and subfield. It includes the percentile value and boolean flags indicating if the work is in the top 1% or top 10% of citations within its normalized group.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/work-object/README.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\ncitation_normalized_percentile: {\n        value: 0.999948,\n        is_in_top_1_percent: true,\n        \"is_in_top_10_percent\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response from OpenAlex /text Endpoint\nDESCRIPTION: This snippet shows the structure of a JSON response returned by the `/text` endpoint when requesting all tags (keywords, topics, concepts). It includes metadata (`meta`) with counts, arrays of `keywords`, `topics`, and `concepts` objects (each with an ID, display name, and score), and details about the `primary_topic`. Note that some parts were omitted for brevity in the original documentation.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/aboutness-endpoint-text.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"meta\": {\n\t\t\"keywords_count\": 5,\n\t\t\"topics_count\": 3,\n\t\t\"concepts_count\": 3\n\t},\n\t\"keywords\": [\n\t\t{\n\t\t\t\"id\": \"https://openalex.org/keywords/type-1-diabetes\",\n\t\t\t\"display_name\": \"Type 1 Diabetes\",\n\t\t\t\"score\": 0.677\n\t\t}\n\t\t// ... other keywords omitted\n\t],\n\t\"primary_topic\": {\n\t\t\"id\": \"https://openalex.org/T10560\",\n\t\t\"display_name\": \"Management of Diabetes Mellitus and Hypoglycemia\",\n\t\t\"score\": 0.995\n\t\t// more information about the primary topic, removed for brevity\n\t},\n\t\"topics\": [\n\t\t// list of topic objects with scores\n\t],\n\t\"concepts\": [\n\t\t// list of concept objects with scores\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Authors by Last Known Institution in Global South (API Call)\nDESCRIPTION: Demonstrates how to filter authors whose last known institution is located in the Global South using the `last_known_institution.is_global_south` convenience filter (set to `true`) in the OpenAlex API.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/authors/filter-authors.md#_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nhttps://api.openalex.org/authors?filter=last_known_institution.is_global_south:true\n```\n\n----------------------------------------\n\nTITLE: Example 'updated_date' Field in OpenAlex Topic Object (JSON)\nDESCRIPTION: Demonstrates the 'updated_date' field in an OpenAlex Topic object. This field provides the timestamp of the last update to the topic object as an ISO 8601 formatted date string.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/topics/topic-object.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\nupdated_date: \"2024-02-05T05:00:03.798420\"\n```\n\n----------------------------------------\n\nTITLE: Filtering OpenAlex Institutions by Continent (HTTP)\nDESCRIPTION: This API call retrieves institutions from the OpenAlex dataset that are located in South America. It uses the `filter` query parameter with the `continent` key set to `south_america`.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/geo/README.md#_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nhttps://api.openalex.org/institutions?filter=continent:south_america\n```\n\n----------------------------------------\n\nTITLE: Listing Topics: OpenAlex API - Paged\nDESCRIPTION: This URL demonstrates how to retrieve a specific page of topics using the `per-page` and `page` query parameters. It fetches the second page with 50 results per page.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/topics/get-lists-of-topics.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nhttps://api.openalex.org/topics?per-page=50&page=2\n```\n\n----------------------------------------\n\nTITLE: Example Response Structure for Author Autocomplete\nDESCRIPTION: Provides an example JSON response from the autocomplete endpoint, showing a list of author results with IDs, display names, affiliated institution hints, citation counts, and external IDs like ORCID. This structure helps interpret autocomplete responses.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/authors/search-authors.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"results\": [\n    {\n      \"id\": \"https://openalex.org/A5007433649\",\n      \"display_name\": \"Ronald Swanstrom\",\n      \"hint\": \"University of North Carolina at Chapel Hill, USA\",\n      \"cited_by_count\": 19142,\n      \"works_count\": 339,\n      \"entity_type\": \"author\",\n      \"external_id\": \"https://orcid.org/0000-0001-7777-0773\",\n      \"filter_key\": \"authorships.author.id\"\n    },\n    ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example 'works_count' Field in OpenAlex Topic Object (JSON)\nDESCRIPTION: Shows an example of the 'works_count' field in an OpenAlex Topic object. This field contains an integer representing the total number of works (publications) tagged with this specific topic.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/topics/topic-object.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\nworks_count: 21737 \n```\n\n----------------------------------------\n\nTITLE: Autocompleting Institutions using API Endpoint\nDESCRIPTION: This code snippet shows how to use the autocomplete functionality to quickly find institutions based on a partial search term. The endpoint `autocomplete/institutions` is used with the `q` parameter. The provided example searches for institutions with \"harv\" in their `display_name`. The output is a JSON array containing the institution's `id`, `display_name`, `hint` (location), and other relevant metrics like `cited_by_count`, `works_count`, `entity_type`, and `external_id`.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/institutions/search-institutions.md#_snippet_2\n\nLANGUAGE: HTTP\nCODE:\n```\nhttps://api.openalex.org/autocomplete/institutions?q=harv\n```\n\n----------------------------------------\n\nTITLE: Filtering Works by Source Host Institution Lineage (OpenAlex API, HTTP)\nDESCRIPTION: Demonstrates filtering works where the source's host organization lineage includes a specific institution ID. The filter requires an OpenAlex Institution ID as its value.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/filter-works.md#_snippet_23\n\nLANGUAGE: HTTP\nCODE:\n```\nhttps://api.openalex.org/works?filter=locations.source.host_institution_lineage:https://openalex.org/I205783295\n```\n\n----------------------------------------\n\nTITLE: Page Institutions List - OpenAlex API Call\nDESCRIPTION: Shows how to paginate through the list of institutions. Uses the `per-page` parameter to set the number of results per page and the `page` parameter to request a specific page number, here getting the second page with 50 results.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/institutions/get-lists-of-institutions.md#_snippet_2\n\nLANGUAGE: API Call\nCODE:\n```\nhttps://api.openalex.org/institutions?per-page=50&page=2\n```\n\n----------------------------------------\n\nTITLE: Filtering institutions by country using the OpenAlex API\nDESCRIPTION: This snippet demonstrates how to retrieve institutions located in Canada by applying the `filter` parameter with the `country_code`. It highlights the use of the common `filter` parameter to specify country codes for regional filtering.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/institutions/filter-institutions.md#_snippet_0\n\nLANGUAGE: URL\nCODE:\n```\nhttps://api.openalex.org/institutions?filter=country_code:ca\n```\n\n----------------------------------------\n\nTITLE: Grouping Highly-Cited OpenAlex Authors by Continent (HTTP)\nDESCRIPTION: This API call groups authors with more than 100 citations based on the continent of their last known institution. It uses the `group-by` query parameter for `last_known_institution.continent` and the `filter` query parameter to select authors where `cited_by_count` is greater than 100.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/geo/README.md#_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nhttps://api.openalex.org/authors?group-by=last_known_institution.continent&filter=cited_by_count:>100\n```\n\n----------------------------------------\n\nTITLE: Grouping Works by Authorship Country (URL)\nDESCRIPTION: This API call groups Works by the country of their authorships. By default, results where the country is unknown are excluded from the response.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/how-to-use-the-api/get-groups-of-entities.md#_snippet_2\n\nLANGUAGE: URL\nCODE:\n```\nhttps://api.openalex.org/works?group_by=authorships.countries\n```\n\n----------------------------------------\n\nTITLE: Assigning Author Position in OpenAlex Work Record (JSON)\nDESCRIPTION: Displays the JSON assignment of an author's position within a work, using categorical strings such as 'first', 'middle', or 'last'. The value provides an explicit summary but is redundant with the relative position in the authorship list. Only a single string is present, and validation against known values is recommended.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/work-object/authorship-object.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\nauthor_position: \"first\"\n```\n\n----------------------------------------\n\nTITLE: Querying Authors by Continent with OpenAlex API (Example)\nDESCRIPTION: This snippet demonstrates how to retrieve a count of authors grouped by their last known institution's continent using the OpenAlex API.  It uses the `group_by` parameter to aggregate results. The output will provide counts of authors per continent.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/authors/group-authors.md#_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nhttps://api.openalex.org/authors?group_by=last_known_institution.continent\n```\n\n----------------------------------------\n\nTITLE: Grouping concepts by level in OpenAlex API\nDESCRIPTION: Example URL demonstrating how to get counts of concepts grouped by their level attribute in the OpenAlex API. The level represents the hierarchical position of a concept in the concept taxonomy.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/concepts/group-concepts.md#_snippet_0\n\nLANGUAGE: url\nCODE:\n```\nhttps://api.openalex.org/concepts?group_by=level\n```\n\n----------------------------------------\n\nTITLE: Field-Specific Funder Search using 'filter'\nDESCRIPTION: Shows how to search within a specific field of a funder record, like 'display_name', by appending '.search' to the field name within the 'filter' query parameter. This example searches for funders with \"florida\" specifically in their 'display_name'. Other searchable fields include 'description.search'.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/funders/search-funders.md#_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nhttps://api.openalex.org/funders?filter=display_name.search:florida\n```\n\n----------------------------------------\n\nTITLE: Querying OpenAlex /text/keywords Endpoint (HTTP GET)\nDESCRIPTION: This example demonstrates how to retrieve OpenAlex Keywords for a given text ('type 1 diabetes research for children') using an HTTP GET request to the `/text/keywords` endpoint. The text is passed via the URL-encoded `title` query parameter.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/aboutness-endpoint-text.md#_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nhttps://api.openalex.org/text/keywords?title=type%201%20diabetes%20research%20for%20children\n```\n\n----------------------------------------\n\nTITLE: Displaying Works API URL - OpenAlex - JSON\nDESCRIPTION: Shows the 'works_api_url' property, a string containing the API endpoint to retrieve all Works associated with the given Concept. Essential for data retrieval workflows and downstream processing. Output: URL string.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/concepts/concept-object.md#_snippet_16\n\nLANGUAGE: json\nCODE:\n```\nworks_api_url: \"https://api.openalex.org/works?filter=concept.id:C2778407487\"\n```\n\n----------------------------------------\n\nTITLE: Representing Citation Count (JSON)\nDESCRIPTION: Shows the simple integer value for the `cited_by_count` field, representing the total number of times this work has been cited by other works recorded in the OpenAlex dataset.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/work-object/README.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\ncited_by_count: 382\n```\n\n----------------------------------------\n\nTITLE: Filtering Authors by Display Name Using Specific Field Search\nDESCRIPTION: Displays how to filter authors with 'john smith' in their display name by appending '.search' to the filter parameter. It illustrates the equivalent of the general search, specifying exact search fields.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/authors/search-authors.md#_snippet_1\n\nLANGUAGE: URL\nCODE:\n```\nhttps://api.openalex.org/authors?filter=display_name.search:john%20smith\n```\n\n----------------------------------------\n\nTITLE: Sampling Concepts in OpenAlex API\nDESCRIPTION: This example demonstrates how to retrieve a random sample of concepts using the `sample` parameter. The `sample` parameter is set to the desired sample size, in this case, 10.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/concepts/get-lists-of-concepts.md#_snippet_3\n\nLANGUAGE: HTTP\nCODE:\n```\nhttps://api.openalex.org/concepts?sample=10\n```\n\n----------------------------------------\n\nTITLE: Example JSON response with cursor pagination metadata\nDESCRIPTION: Displays the structure of a typical API response when using cursor pagination, highlighting the 'meta' object containing 'count', 'db_response_time_ms', 'page', 'per_page', and 'next_cursor'. This information is necessary to manage pagination flow.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/how-to-use-the-api/get-lists-of-entities/paging.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"meta\": {\n    \"count\": 8695857,\n    \"db_response_time_ms\": 28,\n    \"page\": null,\n    \"per_page\": 100,\n    \"next_cursor\": \"IlsxNjA5MzcyODAwMDAwLCAnaHR0cHM6Ly9vcGVuYWxleC5vcmcvVzI0ODg0OTk3NjQnXSI=\"\n  },\n  \"results\" : [\n    // the first page of results\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example Response: List Topics API\nDESCRIPTION: Example JSON response demonstrating the structure returned by the OpenAlex topics list endpoint, including metadata, results array with topic objects, and grouping information.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/topics/get-lists-of-topics.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"meta\": {\n        \"count\": 4516,\n        \"db_response_time_ms\": 10,\n        \"page\": 1,\n        \"per_page\": 25,\n        \"groups_count\": null\n    },\n    \"results\": [\n        {\n            \"id\": \"https://openalex.org/T11475\",\n            \"display_name\": \"Territorial Governance and Environmental Participation\"\n            // more fields (removed to save space)\n        },\n        {\n            \"id\": \"https://openalex.org/T13445\",\n            \"display_name\": \"American Political Thought and History\"\n            // more fields (removed to save space)\n        }\n        // more results (removed to save space)\n    ],\n    \"group_by\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering OpenAlex Concepts by Wikidata Presence using HTTP\nDESCRIPTION: Illustrates filtering OpenAlex concepts based on the presence of a Wikidata ID using the `has_wikidata` convenience filter. This example specifically requests concepts *without* a Wikidata ID (`false`), although the text notes all concepts currently have one. This is done via an HTTP GET request.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/concepts/filter-concepts.md#_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nhttps://api.openalex.org/concepts?filter=has_wikidata:false\n```\n\n----------------------------------------\n\nTITLE: Listing Associated Concepts with Scores (JSON)\nDESCRIPTION: Demonstrates the JSON structure for the `concepts` field, a list of associated Concept objects. Each concept includes its ID, display name, Wikidata link, level in the hierarchy, and a score indicating the strength of its connection to the work (higher is stronger, >= 0.3 for direct assignment). Ancestor concepts might have lower or zero scores.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/work-object/README.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\nconcepts: [\n    {\n        id: \"https://openalex.org/C71924100\",\n        wikidata: \"https://www.wikidata.org/wiki/Q11190\",\n        display_name: \"Medicine\",\n        level: 0,\n        score: 0.9187037\n    },\n    {\n        id: \"https://openalex.org/C3007834351\",\n        wikidata: \"https://www.wikidata.org/wiki/Q82069695\",\n        display_name: \"Severe acute respiratory syndrome coronavirus 2 (SARS-CoV-2)\",\n        level: 5,\n        score: 0.8070164\n    },\n    ...\n    {\n        id: \"https://openalex.org/C191935318\",\n        wikidata: \"https://www.wikidata.org/wiki/Q148\",\n        display_name: \"China\",\n        level: 2,\n        score: 0.5948172\n    },\n    ...\n    {\n        id: \"https://openalex.org/C121608353\",\n        wikidata: \"https://www.wikidata.org/wiki/Q12078\",\n        display_name: \"Cancer\",\n        level: 2,\n        score: 0.46887803\n    },\n    ...\n    {\n        id: \"https://openalex.org/C17744445\",\n        wikidata: \"https://www.wikidata.org/wiki/Q36442\",\n        display_name: \"Political science\",\n        level: 0,\n        score: 0\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Publisher Object: roles Field (JSON)\nDESCRIPTION: Example of the 'roles' field within an OpenAlex Publisher object. This list contains role objects (like 'institution', 'funder', 'publisher') associated with the organization, including their OpenAlex ID and the count of works associated with that specific role. The list always includes the entity's primary role.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/publishers/publisher-object.md#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\nroles: [\n    {\n        role: \"funder\",\n        id: \"https://openalex.org/F4320308380\",\n        works_count: 1004,\n    },\n    {\n        role: \"publisher\",\n        id: \"https://openalex.org/P4310315589\",\n        works_count: 13986,\n    },\n    {\n        role: \"institution\",\n        id: \"https://openalex.org/I32971472\",\n        works_count: 250031,\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Specifying OpenAlex Work Unique Identifier in JSON Format\nDESCRIPTION: A JSON string containing the canonical OpenAlex ID URI for the work entity, uniquely identifying it in the OpenAlex dataset for retrieval and reference.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/work-object/README.md#_snippet_20\n\nLANGUAGE: JSON\nCODE:\n```\nid: \"https://openalex.org/W2741809807\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Topic by ID using OpenAlex API - JSON\nDESCRIPTION: This snippet demonstrates how to retrieve a topic object from the OpenAlex API using its ID. It involves making an HTTP GET request to the API endpoint with the topic ID. The API returns a JSON object containing various fields related to the specified topic. The example shows a simplified view of the returned JSON object, excluding some fields for brevity, and it uses the OpenAlex API.  There are no dependencies required besides accessing the API.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/topics/get-a-single-topic.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"id\": \"https://openalex.org/T11636\",\n    \"display_name\": \"Artificial Intelligence in Medicine\",\n    // other fields removed for brevity\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Random Institutions - OpenAlex API Call\nDESCRIPTION: Demonstrates retrieving a random sample of institutions using the `sample` parameter. The value specifies the number of random institutions to return. It's often combined with `per-page` to control the batch size.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/institutions/get-lists-of-institutions.md#_snippet_4\n\nLANGUAGE: API Call\nCODE:\n```\nhttps://api.openalex.org/institutions?sample=50&per-page=50\n```\n\n----------------------------------------\n\nTITLE: Representation of Source Concepts with Scores (JSON format)\nDESCRIPTION: This JSON array contains concept objects representing the most frequently applied concepts to works in a source, each with an associated score indicating the strength of the relationship (0-100). The concepts are represented as dehydrated concept objects with an additional 'score' attribute.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/sources/source-object.md#_snippet_26\n\nLANGUAGE: json\nCODE:\n```\nx_concepts: [\n    {\n        id: \"https://openalex.org/C86803240\",\n        wikidata: null,\n        display_name: \"Biology\",\n        level: 0,\n        score: 86.7\n    },\n    {\n        id: \"https://openalex.org/C185592680\",\n        wikidata: null,\n        display_name: \"Chemistry\",\n        level: 0,\n        score: 51.4\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Filtering by OA Submitted Version\nDESCRIPTION: This filter retrieves works that have at least one submitted Open Access copy. It uses the `has_oa_submitted_version` filter which is based on the `is_oa` and `version` fields in the `locations` object.  The input is a boolean value (`true` or `false`). The output is a list of works with preprints deposited somewhere.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/filter-works.md#_snippet_17\n\nLANGUAGE: API\nCODE:\n```\nhttps://api.openalex.org/works?filter=has_oa_submitted_version:true\n```\n\n----------------------------------------\n\nTITLE: Autocomplete Sources API Example\nDESCRIPTION: This snippet demonstrates the use of the autocomplete endpoint for sources.  It searches for sources with \"neuro\" in their `display_name` and returns a list of matching sources.  The response includes the `display_name`, the publisher as the hint, and counts for cited_by and works.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/sources/search-sources.md#_snippet_2\n\nLANGUAGE: HTTP\nCODE:\n```\nhttps://api.openalex.org/autocomplete/sources?q=neuro\n```\n\n----------------------------------------\n\nTITLE: Fetching a Random Institution via OpenAlex API (HTTP)\nDESCRIPTION: Demonstrates how to use the OpenAlex API to retrieve a random institution entity by using 'random' as the ID in the institutions endpoint URL. Each request to this URL will return a different random institution.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/how-to-use-the-api/get-single-entities/random-result.md#_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nhttps://api.openalex.org/institutions/random\n```\n\n----------------------------------------\n\nTITLE: Showing OpenAlex Work Sustainable Development Goals JSON Example\nDESCRIPTION: Example JSON structure for the `sustainable_development_goals` attribute of an OpenAlex Work object. This list contains objects detailing the work's predicted relevance to UN Sustainable Development Goals, including the goal ID, display name, and a probability score from a machine learning model.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/work-object/README.md#_snippet_39\n\nLANGUAGE: JSON\nCODE:\n```\nsustainable_development_goals: [\n    {\n        id: \"https://metadata.un.org/sdg/3\",\n        display_name: \"Good health and well-being\",\n        score: \t0.95\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Fetching All Concepts from OpenAlex API\nDESCRIPTION: This endpoint retrieves a list of all concepts available in the OpenAlex database. The response is paginated, providing metadata such as the total count of concepts, response time, current page, and items per page. The results array contains concept objects with information like ID, Wikidata URL, and display name.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/concepts/get-lists-of-concepts.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"meta\": {\n        \"count\": 65073,\n        \"db_response_time_ms\": 26,\n        \"page\": 1,\n        \"per_page\": 25\n    },\n    \"results\": [\n        {\n            \"id\": \"https://openalex.org/C41008148\",\n            \"wikidata\": \"https://www.wikidata.org/wiki/Q21198\",\n            \"display_name\": \"Computer science\",\n            // more fields (removed to save space)\n        },\n        {\n            \"id\": \"https://openalex.org/C71924100\",\n            \"wikidata\": \"https://www.wikidata.org/wiki/Q11190\",\n            \"display_name\": \"Medicine\",\n            // more fields (removed to save space)\n        },\n        // more results (removed to save space)\n    ],\n    \"group_by\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Indicating Source of Full Text Acquisition in OpenAlex Work JSON Records\nDESCRIPTION: A JSON string describing how the full text of a work was obtained for full-text search indexing when has_fulltext is true. Valid values include \"pdf\" (extracted via Grobid from open-access PDFs) and \"ngrams\" (full text search enabled using n-grams from the Internet Archive).\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/work-object/README.md#_snippet_16\n\nLANGUAGE: JSON\nCODE:\n```\nfulltext_origin: \"pdf\"\n```\n\n----------------------------------------\n\nTITLE: Publisher Object: country_codes Field (JSON)\nDESCRIPTION: Example of the 'country_codes' field within an OpenAlex Publisher object. This field is a list of ISO 3166-1 alpha-2 country codes indicating the primary location(s) of the publisher.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/publishers/publisher-object.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\ncountry_codes: [\"DE\"]\n```\n\n----------------------------------------\n\nTITLE: Reporting Author Last Update Date in OpenAlex API (JSON)\nDESCRIPTION: This code illustrates 'updated_date', a string property with the ISO 8601 timestamp of the author object's last modification. Input not required; output is a datetime string. Updated with any object changes, including statistics increments.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/authors/author-object.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\nupdated_date: \"2022-01-02T00:00:00\"\n```\n\n----------------------------------------\n\nTITLE: Filtering OpenAlex Topics by Display Name Search\nDESCRIPTION: This example shows how to use the `display_name.search` convenience filter with the OpenAlex API `/topics` endpoint. It retrieves topics where the `display_name` contains the terms \"artificial\" and \"intelligence\". It's noted that the general `search` parameter is often preferred for better search results.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/topics/filter-topics.md#_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nhttps://api.openalex.org/topics?filter=display_name.search:artificial+intelligence\n```\n\n----------------------------------------\n\nTITLE: Illustrating `license` property (JSON)\nDESCRIPTION: Describes the `license` string property. It indicates the publishing license applied to the work at this location. Examples include Creative Commons licenses (like cc0, cc-by), publisher-specific licenses, or null if the license cannot be determined.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/work-object/location-object.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\nlicense: \"cc-by\"\n```\n\n----------------------------------------\n\nTITLE: Publisher Object: ids Field (JSON)\nDESCRIPTION: Example of the 'ids' field within an OpenAlex Publisher object. This object contains various external identifiers associated with the publisher, such as OpenAlex ID, ROR ID, and Wikidata ID, typically expressed as URIs.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/publishers/publisher-object.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\nids: {\n  openalex: \"https://openalex.org/P4310320990\",\n  ror: \"https://ror.org/02scfj030\",\n  wikidata: \"https://www.wikidata.org/entity/Q746413\"\n},\n```\n\n----------------------------------------\n\nTITLE: Sorting Authors Results from OpenAlex API\nDESCRIPTION: This snippet shows how to sort author results using the `sort` parameter in the OpenAlex API. It sorts authors by the `cited_by_count` field in descending order. The API call sorts the results based on a specific criterion.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/authors/get-lists-of-authors.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\nhttps://api.openalex.org/authors?sort=cited_by_count:desc\n```\n\n----------------------------------------\n\nTITLE: Retraction Status Indication for OpenAlex Works in JSON Format\nDESCRIPTION: A JSON boolean that is true if the work has been identified as retracted, based on data from the Retraction Watch database integrated via Crossref. This is critical for filtering out invalidated scholarship.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/work-object/README.md#_snippet_25\n\nLANGUAGE: JSON\nCODE:\n```\nis_retracted: false\n```\n\n----------------------------------------\n\nTITLE: Querying OpenAlex /text/topics Endpoint (HTTP GET)\nDESCRIPTION: This example shows how to fetch OpenAlex Topics for specific text ('type 1 diabetes research for children') using an HTTP GET request to the `/text/topics` endpoint. The text is provided in the URL-encoded `title` query parameter.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/aboutness-endpoint-text.md#_snippet_1\n\nLANGUAGE: HTTP\nCODE:\n```\nhttps://api.openalex.org/text/topics?title=type%201%20diabetes%20research%20for%20children\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Fields in OpenAlex API\nDESCRIPTION: This example illustrates how to limit the fields returned in the concept list using the `select` parameter.  The `select` parameter accepts a comma-separated list of field names to include in the response, such as `id`, `display_name`, and `description`.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/concepts/get-lists-of-concepts.md#_snippet_4\n\nLANGUAGE: HTTP\nCODE:\n```\nhttps://api.openalex.org/concepts?select=id,display_name,description\n```\n\n----------------------------------------\n\nTITLE: Referencing Host Organization by OpenAlex ID in OpenAlex Source Object - JSON\nDESCRIPTION: Shows the 'host_organization' field, containing the OpenAlex ID of the institution or publisher hosting the source. Input/output is a URI string. Prerequisite knowledge includes OpenAlex ID formatting.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/sources/source-object.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\nid: \"https://openalex.org/P4310320595\"\n```\n\n----------------------------------------\n\nTITLE: Representing Geographical Data of Institution - JSON\nDESCRIPTION: Covers the `geo` object containing detailed location information including city, GeoNames city ID, region (state or province), country code, country name, and geographic coordinates (latitude and longitude). This enriches institutional data with precise geospatial context.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/institutions/institution-object.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\ngeo: {\n    city: \"Chapel Hill\",\n    geonames_city_id: \"4460162\",\n    region: \"North Carolina\",\n    country_code: \"US\",\n    country: \"United States\",\n    latitude: 35.9083,\n    longitude: -79.0492\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping funders by country code using the OpenAlex API\nDESCRIPTION: An example URL showing how to use the group_by parameter to get counts of funders by country_code. This endpoint returns aggregated data about funders grouped by their countries.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/funders/group-funders.md#_snippet_0\n\nLANGUAGE: url\nCODE:\n```\nhttps://api.openalex.org/funders?group_by=country_code\n```\n\n----------------------------------------\n\nTITLE: Documenting Organizational Lineage with 'host_organization_lineage' in OpenAlex Source Object - JSON\nDESCRIPTION: Exhibits 'host_organization_lineage', an array of OpenAlex IDs representing publisher lineages. Each is a URI string. Field presence depends on source being a publisher. Used for tracing organizational history.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/sources/source-object.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\nhost_organization_lineage: [\n    \"https://openalex.org/P4310321285\",\n    \"https://openalex.org/P4310319900\",\n    \"https://openalex.org/P4310319965\"\n]\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Work Object as JSON Using OpenAlex API\nDESCRIPTION: This JSON snippet represents a typical response from the OpenAlex API when fetching a single academic work by its OpenAlex ID. It includes key metadata such as the unique OpenAlex URI, DOI URL, title, display name, publication year, and publication date. Dependencies include network access to the OpenAlex API endpoint. The input is a properly formatted work identifier embedded in the API request URL, and the output is a JSON object describing the work. The snippet omits several other fields for brevity.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/get-a-single-work.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"https://openalex.org/W2741809807\",\n    \"doi\": \"https://doi.org/10.7717/peerj.4375\",\n    \"title\": \"The state of OA: a large-scale analysis of the prevalence and impact of Open Access articles\",\n    \"display_name\": \"The state of OA: a large-scale analysis of the prevalence and impact of Open Access articles\",\n    \"publication_year\": 2018,\n    \"publication_date\": \"2018-02-13\",\n    // other fields removed for brevity\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Publisher Details from OpenAlex API - JSON\nDESCRIPTION: This JSON snippet exemplifies the response structure returned when querying the OpenAlex API for a publisher entity by its OpenAlex ID. It showcases key fields such as 'id', 'display_name', and 'alternate_titles', demonstrating the type of metadata available about publishers. This example assumes a GET request to the endpoint 'https://api.openalex.org/publishers/P4310319965'. The snippet is for illustration and omits other fields for brevity. Dependencies include internet access and valid OpenAlex entity identifiers. Inputs are the entity ID in the URL; the output is a JSON object detailing the publisher's attributes.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/publishers/get-a-single-publisher.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"https://openalex.org/P4310319965\",\n  \"display_name\": \"Springer Nature\",\n  \"alternate_titles\": [\n    \"エイプレス\",\n    \"Springer Nature Group\",\n    \"施普林格-自然出版集团\"\n  ],\n  \"hierarchy_level\": 0\n  // other fields removed for brevity\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Funder Object in JSON format from OpenAlex API\nDESCRIPTION: This example shows the JSON response structure returned when requesting a single funder from the OpenAlex API. The response contains the funder's OpenAlex ID, display name, and alternate titles, though additional fields have been omitted for brevity.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/funders/get-a-single-funder.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"https://openalex.org/F4320332161\",\n  \"display_name\": \"National Institutes of Health\",\n  \"alternate_titles\": [\n  \"US National Institutes of Health\",\n  \"Institutos Nacionales de la Salud\",\n  \"NIH\"\n  ],\n  // other fields removed for brevity\n}\n```\n\n----------------------------------------\n\nTITLE: Publisher Object: sources_api_url Field (JSON)\nDESCRIPTION: Example of the 'sources_api_url' field within an OpenAlex Publisher object. This string provides a URL to the OpenAlex API endpoint that returns a list of all sources (e.g., journals) published by this publisher. This avoids embedding potentially large lists directly in the publisher object.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/publishers/publisher-object.md#_snippet_14\n\nLANGUAGE: json\nCODE:\n```\nsources_api_url: \"https://api.openalex.org/sources?filter=host_organization.id:P4310319965\"\n```\n\n----------------------------------------\n\nTITLE: Reporting Author Published Works Count in OpenAlex API (JSON)\nDESCRIPTION: This snippet describes the 'works_count' field—an integer specifying the number of published works for this author as tracked by OpenAlex. Updated semi-regularly, minor discrepancies may exist compared to on-demand works endpoint results. Output is an integer; input not required.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/authors/author-object.md#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\nworks_count: 38 \n```\n\n----------------------------------------\n\nTITLE: Grouping Works by Institution Continent\nDESCRIPTION: This endpoint groups works by the continent of the institutions associated with the work.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/geo/continents.md#_snippet_6\n\nLANGUAGE: HTTP\nCODE:\n```\n/works?group-by=institutions.continent\n```\n\n----------------------------------------\n\nTITLE: Filtering Works by Primary Location Source ISSN Availability (OpenAlex API, HTTP)\nDESCRIPTION: Demonstrates filtering works where the source associated with the primary location has at least one ISSN assigned. The filter accepts a boolean value.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/filter-works.md#_snippet_26\n\nLANGUAGE: HTTP\nCODE:\n```\nhttps://api.openalex.org/works?filter=primary_location.source.has_issn:true\n```\n\n----------------------------------------\n\nTITLE: Showing OpenAlex Work Publication Date JSON Example\nDESCRIPTION: Example JSON for the `publication_date` attribute of an OpenAlex Work object. This string contains the publication day of the work, formatted according to ISO 8601, typically representing the earliest electronic publication date.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/work-object/README.md#_snippet_35\n\nLANGUAGE: JSON\nCODE:\n```\npublication_date: \"2018-02-13\"\n```\n\n----------------------------------------\n\nTITLE: JSON Output: Autocomplete Institutions\nDESCRIPTION: This snippet shows the JSON format of the output returned by the autocomplete endpoint. It lists institutions matching the query, including their display name, hint (institution location), and other related data, facilitating a rapid, type-ahead user experience. This example is a sample JSON response representing possible results, including several fields to describe each matching institution. It's used for creating a type ahead search UI.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/institutions/search-institutions.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{ \n  \"results\": [\n    {\n        \"id\": \"https://openalex.org/I136199984\",\n        \"display_name\": \"Harvard University\",\n        \"hint\": \"Cambridge, USA\",\n        \"cited_by_count\": 37792327,\n        \"works_count\": 242547,\n        \"entity_type\": \"institution\",\n        \"external_id\": \"https://ror.org/03vek6s52\"\n    },\n    ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering institutions without ROR IDs\nDESCRIPTION: This example filters out institutions that do not have a ROR ID by setting the `has_ror` filter to false. It is useful for identifying institutions lacking certain identifiers.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/institutions/filter-institutions.md#_snippet_4\n\nLANGUAGE: URL\nCODE:\n```\nhttps://api.openalex.org/institutions?filter=has_ror:false\n```\n\n----------------------------------------\n\nTITLE: Defining Author Display Name in OpenAlex API (JSON)\nDESCRIPTION: This example shows the 'display_name' field—the primary, canonical name for an author as a single string. Display name is typically required unless the author object is incomplete. Input is an author name string; output is a single string property.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/authors/author-object.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\ndisplay_name: \"Jason Priem\"\n```\n\n----------------------------------------\n\nTITLE: Querying OpenAlex Sources Autocomplete by OpenAlex ID URL\nDESCRIPTION: This snippet illustrates querying the 'sources' autocomplete endpoint using an OpenAlex ID (`S49861241`) in the `q` parameter. The endpoint specifically searches for the matching source with this ID.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/how-to-use-the-api/get-lists-of-entities/autocomplete-entities.md#_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nhttps://api.openalex.org/autocomplete/sources?q=S49861241\n```\n\n----------------------------------------\n\nTITLE: Identifying Best Open Access Location (JSON)\nDESCRIPTION: Provides the JSON structure for the `best_oa_location` field, which contains a Location object representing the optimal Open Access source for the work. The selection prioritizes publisher versions, PDF availability, and repository ranking based on specific criteria.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/work-object/README.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\nbest_oa_location: {\n  is_oa: true,\n  landing_page_url: \"https://www.ncbi.nlm.nih.gov/pmc/articles/PMC1398957\",\n  pdf_url: null,\n  source: {\n    id: \"https://openalex.org/S2764455111\",\n    display_name: \"PubMed Central\",\n    issn_l: null,\n    issn: null,\n    host_organization: \"https://openalex.org/I1299303238\",\n    type: \"repository\"\n  },\n  license: null,\n  version: \"publishedVersion\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Authorship Affiliations Field in JSON\nDESCRIPTION: Demonstrates the JSON structure of the 'affiliations' property within the Authorship object, listing claimed institutional affiliations for an author. Each affiliation includes the original raw string as well as one or more OpenAlex Institution IDs used for matching. Integrators should ensure proper handling of lists and nested objects; repeated or overlapping information with the 'institutions' field may occur.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/work-object/authorship-object.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\naffiliations: [\n    {\n        raw_affiliation_string: \"Scholarly Communications Lab, Simon Fraser University, Vancouver, Canada\",\n        institution_ids: [\n            \"https://openalex.org/I18014758\"\n        ]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Filtering Works by Update Date (Premium OpenAlex API, HTTP)\nDESCRIPTION: Demonstrates filtering works based on their last update date, returning works updated on or before the specified date/datetime. This filter requires an OpenAlex Premium subscription API key. The date can be formatted as ISO 8601 date or date-time.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/filter-works.md#_snippet_36\n\nLANGUAGE: HTTP\nCODE:\n```\nhttps://api.openalex.org/works?filter=to_updated_date:2023-01-12&api_key=myapikey\n```\n\n----------------------------------------\n\nTITLE: Full Text Search\nDESCRIPTION: This filter allows text search within the fulltext of works. The example searches for works with \"climate change\" in their full text. The fulltext is available for a subset of works, often sourced from PDFs or n-grams. The input is a search string.  The output returns works containing the search string within their full text. Note that exact phrase searching may not always work as expected.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/filter-works.md#_snippet_13\n\nLANGUAGE: API\nCODE:\n```\nhttps://api.openalex.org/works?filter=fulltext.search:climate%20change\n```\n\n----------------------------------------\n\nTITLE: Autocomplete Source JSON Response Example\nDESCRIPTION: This is an example of the JSON response from the autocomplete API for sources. It includes an array of results. Each result has various properties like `id`, `display_name`, `hint`, `cited_by_count`, `works_count`, `entity_type` and `external_id` describing a matched source.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/sources/search-sources.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{ \n  \"results\": [\n    {\n        \"id\": \"https://openalex.org/S5555990\",\n        \"display_name\": \"The Journal of Neuroscience\",\n        \"hint\": \"Society for Neuroscience\",\n        \"cited_by_count\": 4274712,\n        \"works_count\": 40376,\n        \"entity_type\": \"source\",\n        \"external_id\": \"0270-6474\"\n    },\n    // more results\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Concept in JSON Format\nDESCRIPTION: This JSON object represents the structure of a `Concept` returned by the OpenAlex API. It demonstrates the fields returned such as `id`, `wikidata`, `display_name`, `level`, and `description`. The object describes the OpenAlex's view of a specific concept including external identifiers and descriptive data. It's a sample of the response from a GET request to the OpenAlex API using a concept ID.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/concepts/get-a-single-concept.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"id\": \"https://openalex.org/C71924100\",\n    \"wikidata\": \"https://www.wikidata.org/wiki/Q11190\",\n    \"display_name\": \"Medicine\",\n    \"level\": 0,\n    \"description\": \"field of study for diagnosing, treating and preventing disease\",\n    // other fields removed for brevity\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Counts By Year - OpenAlex - JSON\nDESCRIPTION: Illustrates the 'counts_by_year' property, an array of yearly bins with counts for works and citations. Useful for trend analyses, this field shows how frequently new works were tagged and citations accrued over recent years, omitting years with zero activity. Input is implicit (API data); output is a list of year-indexed objects containing yearly metrics.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/concepts/concept-object.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\ncounts_by_year: [\n    {\n        year: 2021,\n        works_count: 4211,\n        cited_by_count: 120939\n    },\n    {\n        year: 2020,\n        works_count: 4363,\n        cited_by_count: 119531\n    }\n    \n    // and so forth\n]\n```\n\n----------------------------------------\n\nTITLE: Recording 'country_code' Using ISO 2-letter Codes in OpenAlex Source Object - JSON\nDESCRIPTION: Displays the 'country_code' as a two-letter ISO string representing the country linked to the source. The only dependency is knowledge of ISO 3166-1 alpha-2 codes. Input/output is a string; values are constrained to valid country codes.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/sources/source-object.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\ncountry_code: \"GB\" \n```\n\n----------------------------------------\n\nTITLE: Count of Works Hosted by a Source\nDESCRIPTION: This code snippet is a JSON key-value pair indicating the total number of works associated with a specific source. The count is an integer value representing the volume of works hosted.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/sources/source-object.md#_snippet_25\n\nLANGUAGE: json\nCODE:\n```\nworks_count: 20184\n```\n\n----------------------------------------\n\nTITLE: Mapping Author External Identifiers in OpenAlex API (JSON)\nDESCRIPTION: This snippet depicts the 'ids' object, which maps external identifier types to values for the author (OpenAlex, ORCID, Scopus, Twitter, Wikipedia). Each key is a string identifier type (typically only present for known values); values are strings and generally URIs. Prerequisite is the existence of external IDs. Output is an object of string keys to string values. Null or missing IDs are not included in the representation.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/authors/author-object.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\nids: {\n    openalex: \"https://openalex.org/A5023888391\",\n    orcid: \"https://orcid.org/0000-0001-6187-6610\",\n    scopus: \"http://www.scopus.com/inward/authorDetails.url?authorID=36455008000&partnerID=MN8TOARS\",\n},\n```\n\n----------------------------------------\n\nTITLE: Representing Work Abstract as Inverted Index (JSON)\nDESCRIPTION: Shows the JSON structure for the `abstract_inverted_index` field, which represents the work's abstract using an inverted index format. This format lists each word followed by an array of its zero-based positions in the abstract text. Plaintext abstracts are not provided due to legal constraints.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/work-object/README.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nabstract_inverted_index: {\n    Despite: [\n        0\n    ],\n    growing: [\n        1\n    ],\n    interest: [\n        2\n    ],\n    in: [\n        3,\n        57,\n        73,\n        110,\n        122\n    ],\n    Open: [\n        4,\n        201\n    ],\n    Access: [\n        5\n    ],\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Dehydrated Source Object Structure in OpenAlex\nDESCRIPTION: This outline describes the properties retained in a dehydrated 'Source' object, which is a lightweight representation used for reduced data transfer. Remaining properties include display name, host organization details, identifiers, core status, open access status, ISSN identifiers, and type.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/sources/source-object.md#_snippet_27\n\n\n\n----------------------------------------\n\nTITLE: Retrieving All Authors from OpenAlex API\nDESCRIPTION: This snippet demonstrates how to retrieve all authors from the OpenAlex API endpoint. It fetches the entire author list which can be a large dataset. The output is a JSON object containing metadata, and an array of author objects. It does not take any parameters.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/authors/get-lists-of-authors.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"meta\": {\n        \"count\": 93011659,\n        \"db_response_time_ms\": 150,\n        \"page\": 1,\n        \"per_page\": 25\n    },\n    \"results\": [\n        {\n            \"id\": \"https://openalex.org/A5053780153\",\n            // more fields (removed to save space)\n        },\n        {\n            \"id\": \"https://openalex.org/A5032245741\",\n            // more fields (removed to save space)\n        },\n        // more results (removed to save space)\n    ],\n    \"group_by\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering by Creation Date\nDESCRIPTION: This example filters works by their `created_date`, which returns works created on or after a specific date. This requires an OpenAlex Premium subscription to access. The input is a date formatted as `yyyy-mm-dd`. The output returns works created on or after the specified date. An API key (`api_key`) is also included in this call.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/filter-works.md#_snippet_10\n\nLANGUAGE: API\nCODE:\n```\nhttps://api.openalex.org/works?filter=from_created_date:2023-01-12&api_key=myapikey\n```\n\n----------------------------------------\n\nTITLE: Providing Author Summary Statistics in OpenAlex API (JSON)\nDESCRIPTION: This snippet reveals the 'summary_stats' object, which contains metric fields (2yr_mean_citedness as float, h_index as integer, i10_index as integer) calculated over the author's body of work. Outputs an object of numerics summarizing citation impact and productivity. Inputs and calculation logic rely on internal OpenAlex data.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/authors/author-object.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\nsummary_stats: {\n    2yr_mean_citedness: 1.5295340589458237,\n    h_index: 45,\n    i10_index: 205\n}\n```\n\n----------------------------------------\n\nTITLE: Query BigQuery Table Extracting JSON Values (SQL)\nDESCRIPTION: A basic SQL query for BigQuery that demonstrates how to extract specific fields from a JSON string stored in a single column using the `json_value` function. It retrieves the 'id' and 'open_access.is_oa' values from the 'work' column.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/download-all-data/upload-to-your-database/load-to-a-data-warehouse.md#_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nselect \n    json_value(work, '$.id') as work_id, \n    json_value(work, '$.open_access.is_oa') as is_oa\nfrom\n    `openalex-demo.openalex.works`;\n```\n\n----------------------------------------\n\nTITLE: Providing Dehydrated Institution Reference in JSON\nDESCRIPTION: Demonstrates the 'institutions' field as a JSON array of dehydrated Institution objects associated with the author in the work. Each object supplies keys: id, display_name, ROR, country code, type, and lineage. Usage assumes these are references to separately documented full institution objects.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/work-object/authorship-object.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\ninstitutions: [\n    {\n        id: \"https://openalex.org/I18014758\",\n        display_name: \"Simon Fraser University\",\n        ror: \"https://ror.org/0213rcc28\",\n        country_code: \"CA\",\n        type: \"education\",\n        lineage: [\"https://openalex.org/I18014758\"]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Returning Author Works API URL in OpenAlex API (JSON)\nDESCRIPTION: This code is for the 'works_api_url' property—a string URL that can be used to list all of an author's publications via OpenAlex API. The URL is typically parameterized with the author's OpenAlex ID. Input not required; output is an API endpoint string.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/authors/author-object.md#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\nworks_api_url: \"https://api.openalex.org/works?filter=author.id:A5023888391\",\n```\n\n----------------------------------------\n\nTITLE: Providing Author ORCID in OpenAlex API (JSON)\nDESCRIPTION: This snippet documents the 'orcid' field, a canonical external identifier for the author in ORCID URI format. Expected as a string or omitted if unavailable. Input is not required; output is typically a URI string. Relies on accurate ORCID enumeration.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/authors/author-object.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\norcid: \"https://orcid.org/0000-0001-6187-6610\"\n```\n\n----------------------------------------\n\nTITLE: Representing Keywords with Similarity Scores for OpenAlex Works in JSON\nDESCRIPTION: A JSON list of keyword objects identified for the work based on topic similarity. Each object contains an OpenAlex keyword ID URI, a display name string, and a similarity score float indicating alignment with the work's title and abstract. Up to five keywords are provided above a score threshold.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/work-object/README.md#_snippet_26\n\nLANGUAGE: JSON\nCODE:\n```\n[\n    {\n        id: \"https://openalex.org/keywords/global-seaweed-distribution\",\n        display_name: \"Global Seaweed Distribution\",\n        score: 0.559386\n    },\n    {\n        id: \"https://openalex.org/keywords/climate-change-impacts\",\n        display_name: \"Climate Change Impacts\",\n        score: 0.535795\n    },\n    {\n        id: \"https://openalex.org/keywords/ecosystem-resilience\",\n        display_name: \"Ecosystem Resilience\",\n        score: 0.502789\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Representing Country Code Property - JSON\nDESCRIPTION: Describes the `country_code` field as a string using the ISO two-letter country code standard, indicating the country of the institution. This standardized geographic coding facilitates consistent country identification across datasets.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/institutions/institution-object.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\ncountry_code: \"US\"\n```\n\n----------------------------------------\n\nTITLE: Representing Institution Names in Multiple Languages - JSON\nDESCRIPTION: Contains the `international` object, specifically `display_name`, which maps language codes to translated institution names as derived from the institution's Wikipedia pages. This allows localization and multilingual support for institution names.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/institutions/institution-object.md#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\ninternational: {\n    display_name: {\n        \"ar\": \"جامعة نورث كارولينا في تشابل هيل\",\n        \"en\": \"University of North Carolina at Chapel Hill\",\n        \"es\": \"Universidad de Carolina del Norte en Chapel Hill\",\n        \"zh-cn\": \"北卡罗来纳大学教堂山分校\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Publisher Object: id Field (JSON)\nDESCRIPTION: Example of the 'id' field within an OpenAlex Publisher object. This string is the unique OpenAlex identifier for the publisher, formatted as a URL.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/publishers/publisher-object.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\nid: \"https://openalex.org/P4310320990\"\n```\n\n----------------------------------------\n\nTITLE: Get Single Author with Selected Fields using OpenAlex API\nDESCRIPTION: Demonstrates how to limit the fields returned for a single author object by using the 'select' query parameter with a comma-separated list of desired field names.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/authors/get-a-single-author.md#_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nhttps://api.openalex.org/authors/A5023888391?select=id,display_name,orcid\n```\n\n----------------------------------------\n\nTITLE: Aggregating External Identifiers for OpenAlex Works in JSON\nDESCRIPTION: A JSON object enumerating known external identifiers for a work, keyed by identifier type such as openalex, doi, mag, pmid, and pmcid. Known IDs appear as URIs or integers, with absent or unknown IDs omitted (null keys not displayed). This facilitates cross-reference across databases.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/work-object/README.md#_snippet_21\n\nLANGUAGE: JSON\nCODE:\n```\nids: {\n    openalex: \"https://openalex.org/W2741809807\",\n    doi: \"https://doi.org/10.7717/peerj.4375\",\n    mag: 2741809807,\n    pmid: \"https://pubmed.ncbi.nlm.nih.gov/29456894\"\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering by Concepts Count\nDESCRIPTION: This API call filters works based on the number of assigned concepts. It uses the `concepts` field in the work object. The example gets works that have at least three concepts assigned.  The input is an integer representing the minimum concept count.  The output returns works meeting the count criteria.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/filter-works.md#_snippet_8\n\nLANGUAGE: API\nCODE:\n```\nhttps://api.openalex.org/works?filter=concepts_count:>2\n```\n\n----------------------------------------\n\nTITLE: Grouping OA Works by Repository (OpenAlex API, HTTP)\nDESCRIPTION: Demonstrates combining a filter for Open Access works ('is_oa:true') with a 'group_by' parameter to aggregate results by repository. This shows how many OA works are associated with each repository.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/filter-works.md#_snippet_32\n\nLANGUAGE: HTTP\nCODE:\n```\nhttps://api.openalex.org/works?filter=is_oa:true&group_by=repository\n```\n\n----------------------------------------\n\nTITLE: Filtering works by version using OpenAlex API\nDESCRIPTION: This snippet explains how to filter works in the OpenAlex database based on their version status. It details the use of the 'version' parameter which can take values 'publishedVersion', 'submittedVersion', 'acceptedVersion', or null. The snippet also provides an example URL to retrieve works with published versions available in at least one location.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/filter-works.md#_snippet_37\n\nLANGUAGE: HTML\nCODE:\n```\nValue: a String with value `publishedVersion`, `submittedVersion`, `acceptedVersion`, or `null`\n\nReturns: works where the chosen version exists within the [`locations`](work-object/#locations). If `null`, it returns works where no version is found in any of the locations.\n\n* Get works where a published version is available in at least one of the locations:\\\n  [`https://api.openalex.org/works?filter=version:publishedVersion`](https://api.openalex.org/works?filter=version:publishedVersion)\n```\n\n----------------------------------------\n\nTITLE: Exporting Per-Year Author Metrics in OpenAlex API (JSON)\nDESCRIPTION: This JSON snippet represents the 'counts_by_year' property, a list of yearly metrics for an author containing number of works published and citation counts for each year (max ten years). Each entry in the list is an object with 'year', 'works_count', and 'cited_by_count' fields. Years with all-zero values are omitted; developers must fill in those years as needed. Input is not required; output is a list of year-based metric objects.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/authors/author-object.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\ncounts_by_year: [\n    {\n        year: 2022,\n        works_count: 0,\n        cited_by_count: 8\n    },\n    {\n        year: 2021,\n        works_count: 1,\n        cited_by_count: 252\n    },\n    ...\n    {\n        year: 2012,\n        works_count: 7,\n        cited_by_count: 79\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Autocomplete Concepts API Response Example in JSON\nDESCRIPTION: An example JSON response from the OpenAlex concepts autocomplete endpoint. The response includes matching concept information such as ID, display name, hint description, citation counts, and work counts.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/concepts/search-concepts.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{ \n  \"results\": [\n    {\n        \"id\": \"https://openalex.org/C41008148\",\n        \"display_name\": \"Computer science\",\n        \"hint\": \"theoretical study of the formal foundation enabling the automated processing or computation of information, for example on a computer or over a data transmission network\",\n        \"cited_by_count\": 392939277,\n        \"works_count\": 76722605,\n        \"entity_type\": \"concept\",\n        \"external_id\": \"https://www.wikidata.org/wiki/Q21198\"\n    },\n    ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Representing Institution Lineage IDs - JSON\nDESCRIPTION: Details the `lineage` list containing OpenAlex IDs for the institution and its parent institutions, excluding super systems. This hierarchical data models institutional relationships and inheritance useful for aggregations and grouping.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/institutions/institution-object.md#_snippet_16\n\nLANGUAGE: json\nCODE:\n```\nlineage: [\n    \"https://openalex.org/I170203145\",\n    \"https://openalex.org/I90344618\"\n]\n```\n\n----------------------------------------\n\nTITLE: Representing Institution Image URL - JSON\nDESCRIPTION: Shows the `image_url` string property providing the primary URL for the institution's representative image or seal, generally sourced from Wikipedia. Used for visual identification of the institution.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/institutions/institution-object.md#_snippet_14\n\nLANGUAGE: json\nCODE:\n```\nimage_url: \"https://upload.wikimedia.org/wikipedia/en/5/5c/University_of_North_Carolina_at_Chapel_Hill_seal.svg\"\n```\n\n----------------------------------------\n\nTITLE: Example 'ids' Field in OpenAlex Topic Object (JSON)\nDESCRIPTION: Demonstrates the structure of the 'ids' field in an OpenAlex Topic object. This object contains various external identifiers associated with the topic, such as its OpenAlex ID ('openalex') and Wikipedia URL ('wikipedia'), expressed as URIs.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/topics/topic-object.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\nids: {\n    openalex: \"https://openalex.org/T11636\",\n    wikipedia: \"https://en.wikipedia.org/wiki/Artificial_intelligence_in_healthcare\"\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Single Source Entity Using OpenAlex API - JSON Response\nDESCRIPTION: Demonstrates how to retrieve a single source entity from the OpenAlex API by its entity ID, returning a JSON object that encapsulates all known metadata about the source. The snippet highlights key fields such as 'id', 'issn_l', 'issn', and 'display_name'. This example requires crafting an HTTP GET request to the endpoint `/sources/<entity_id>`. The JSON response can be used directly to access source metadata, with limitations on maximum batch query sizes noted (up to 50).\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/sources/get-a-single-source.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"https://openalex.org/S137773608\",\n    \"issn_l\": \"0028-0836\",\n    \"issn\": [\n        \"1476-4687\",\n        \"0028-0836\"\n    ],\n    \"display_name\": \"Nature\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example 'keywords' Field in OpenAlex Topic Object (JSON)\nDESCRIPTION: Illustrates the 'keywords' field within an OpenAlex Topic object. This field contains a list of strings, where each string is a keyword generated by an AI model to represent the content of papers associated with the topic.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/topics/topic-object.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\nkeywords: [\n    \"Artificial Intelligence\",\n    \"Machine Learning\",\n    \"Healthcare\",\n    \"Medical Imaging\",\n    \"Clinical Decision Support\",\n    ...\n]\n```\n\n----------------------------------------\n\nTITLE: Example 'id' Field in OpenAlex Topic Object (JSON)\nDESCRIPTION: Shows an example of the 'id' field in an OpenAlex Topic object. This field contains the unique OpenAlex ID for the topic, represented as a URL string.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/topics/topic-object.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\nid: \"https://openalex.org/T11636\"\n```\n\n----------------------------------------\n\nTITLE: Publisher Object: counts_by_year Field (JSON)\nDESCRIPTION: Example of the 'counts_by_year' field within an OpenAlex Publisher object. This field contains a list of objects, each representing a year, showing the number of new works ('works_count') and total citations ('cited_by_count') associated with the publisher for that specific year, typically covering the last ten years. Years with zero works and citations are omitted.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/publishers/publisher-object.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\ncounts_by_year: [\n    {\n        year: 2021,\n        works_count: 4211,\n        cited_by_count: 120939\n    },\n    {\n        year: 2020,\n        works_count: 4363,\n        cited_by_count: 119531\n    },\n    \n    // and so forth\n]\n```\n\n----------------------------------------\n\nTITLE: Filtering Works by Global South Affiliation in OpenAlex API\nDESCRIPTION: This snippet shows how to filter works based on whether any of the authors' institutions are in the Global South. The filter uses the `authorships.institutions.is_global_south` parameter, with a value of `true`. The output will consist of works that satisfy this condition. The provided filter is a boolean check.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/filter-works.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nhttps://api.openalex.org/works?filter=authorships.institutions.is_global_south:true\n```\n\n----------------------------------------\n\nTITLE: Filtering Works by References Availability (OpenAlex API, HTTP)\nDESCRIPTION: Demonstrates filtering works based on whether they have references available in their 'referenced_works' list. The filter accepts a boolean value ('true' for works with references, 'false' for works without).\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/filter-works.md#_snippet_22\n\nLANGUAGE: HTTP\nCODE:\n```\nhttps://api.openalex.org/works?filter=has_references:true\n```\n\n----------------------------------------\n\nTITLE: Storing Author Last Known Institutions in OpenAlex API (JSON)\nDESCRIPTION: This example shows 'last_known_institutions', the array listing an author's latest institutional affiliations. Each entry is a dehydrated Institution object with properties like id, ror, display_name, country_code, type, and lineage. Depends on fully-formed Institution subobjects and accurate latest-association logic. Output is an array of institution objects; input not required.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/authors/author-object.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\nlast_known_institutions: [{\n    id: \"https://openalex.org/I4200000001\",\n    ror: \"https://ror.org/02nr0ka47\",\n    display_name: \"OurResearch\",\n    country_code: \"CA\",\n    type: \"nonprofit\",\n    lineage: [\"https://openalex.org/I4200000001\"]\n}],\n```\n\n----------------------------------------\n\nTITLE: Listing Corresponding Author IDs (JSON)\nDESCRIPTION: Shows the JSON structure for the `corresponding_author_ids` field, which is a list containing the OpenAlex Author IDs for any authors associated with the work where the `is_corresponding` flag in their authorship record is set to `true`.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/work-object/README.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\ncorresponding_author_ids: [\"https://openalex.org/A5004365451\"]\n```\n\n----------------------------------------\n\nTITLE: Example `display_name` Field Value (JSON)\nDESCRIPTION: Illustrates an example string value for the `display_name` field in an OpenAlex Keyword object. This field represents the human-readable, English-language label assigned to the keyword.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/keywords/README.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\ndisplay_name: \"Cardiac Imaging\"\n```\n\n----------------------------------------\n\nTITLE: Basic Funders API Response in JSON\nDESCRIPTION: Example JSON response from the OpenAlex API when retrieving a list of funders. The response includes metadata about the query and pagination, along with a results array containing funder objects with information such as IDs and display names.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/funders/get-lists-of-funders.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"meta\": {\n        \"count\": 32437,\n        \"db_response_time_ms\": 26,\n        \"page\": 1,\n        \"per_page\": 25\n    },\n    \"results\": [\n        {\n            \"id\": \"https://openalex.org/F4320321001\",\n            \"display_name\": \"National Natural Science Foundation of China\",\n            // more fields (removed to save space)\n        },\n        {\n            \"id\": \"https://openalex.org/F4320306076\",\n            \"display_name\": \"National Science Foundation\",\n            // more fields (removed to save space)\n        },\n        // more results (removed to save space)\n    ],\n    \"group_by\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Publisher Object: summary_stats Field (JSON)\nDESCRIPTION: Example of the 'summary_stats' field within an OpenAlex Publisher object. This object contains citation metrics calculated for the publisher, including the 2-year mean citedness (impact factor), h-index, and i10-index, providing a statistical summary of the publisher's citation impact.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/publishers/publisher-object.md#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\nsummary_stats: {\n    2yr_mean_citedness: 5.065784263815827,\n    h_index: 985,\n    i10_index: 176682\n}\n```\n\n----------------------------------------\n\nTITLE: Institution Type Example (JSON)\nDESCRIPTION: This JSON snippet shows the `type` property of an institution, which specifies the institution's primary type. The values are pulled from the ROR \"type\" controlled vocabulary. This provides a way to categorize institutions based on their primary focus (e.g., education, healthcare, company).\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/institutions/institution-object.md#_snippet_21\n\nLANGUAGE: json\nCODE:\n```\ntype: \"education\"\n```\n\n----------------------------------------\n\nTITLE: Illustrating `is_accepted` property (JSON)\nDESCRIPTION: Describes the `is_accepted` boolean property of the Location object. It is true if the location's `version` is either `acceptedVersion` or `publishedVersion`, indicating an accepted or published version of the work.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/work-object/location-object.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\nis_accepted: true\n```\n\n----------------------------------------\n\nTITLE: Summary Statistics Example (JSON)\nDESCRIPTION: This JSON snippet illustrates the structure of the `summary_stats` property, which contains citation metrics for an institution. These metrics include the 2-year mean citedness (impact factor), the h-index, and the i10-index. These metrics provide insights into the impact and influence of the institution's research output.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/institutions/institution-object.md#_snippet_20\n\nLANGUAGE: json\nCODE:\n```\nsummary_stats: {\n    2yr_mean_citedness: 5.065784263815827,\n    h_index: 985,\n    i10_index: 176682\n}\n```\n\n----------------------------------------\n\nTITLE: Works Count Example (JSON)\nDESCRIPTION: Shows the `works_count` field, which represents the total number of works linked to the funder. This integer value provides a measure of the funder's research output volume.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/funders/funder-object.md#_snippet_16\n\nLANGUAGE: JSON\nCODE:\n```\nworks_count: 260210\n```\n\n----------------------------------------\n\nTITLE: Illustrating `pdf_url` property (JSON)\nDESCRIPTION: Describes the `pdf_url` string property. This is a direct URL pointing to the PDF document of the work at this location, if available.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/work-object/location-object.md#_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\npdf_url: \"http://www.scielo.br/pdf/jaos/v18n1/a10v18n1.pdf\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Concept Ancestors - OpenAlex - JSON\nDESCRIPTION: Demonstrates the structure of the 'ancestors' field in a Concept object, providing a list of dehydrated Concept representations from which the current concept descends. Each ancestor entry includes its OpenAlex ID, optional Wikidata reference, display name, and its depth level in the concept tree hierarchy. This snippet is returned by the OpenAlex API when querying for a concept and is presented as a list within the Concept object. Dependencies: OpenAlex API concept resource. Inputs: none, shown as API response. Outputs: array of ancestor objects.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/concepts/concept-object.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nancestors: [\n    {\n        id: \"https://openalex.org/C2522767166\",\n        wikidata: \"https://www.wikidata.org/wiki/Q2374463\",\n        display_name: \"Data science\",\n        level: 1\n    },\n    {\n        id: \"https://openalex.org/C161191863\",\n        wikidata: \"https://www.wikidata.org/wiki/Q199655\",\n        display_name: \"Library science\",\n        level: 1\n    }\n    \n    // and so forth\n]\n```\n\n----------------------------------------\n\nTITLE: Publisher Object: image_url Field (JSON)\nDESCRIPTION: Example of the 'image_url' field within an OpenAlex Publisher object. This string provides a URL to an image representing the publisher, typically a logo or seal hosted on Wikimedia Commons.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/publishers/publisher-object.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\nimage_url: \"https://commons.wikimedia.org/w/index.php?title=Special:Redirect/file/MIT%20Press%20logo.svg\"\n```\n\n----------------------------------------\n\nTITLE: Example OpenAlex API Grouping Response (JSON)\nDESCRIPTION: This JSON snippet shows the typical structure of a response from the OpenAlex API when the `group_by` parameter is used. It includes meta information and an array of group objects, each with a key, display name, and count.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/how-to-use-the-api/get-groups-of-entities.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    meta: {\n        count: 246136992,\n        db_response_time_ms: 271,\n        page: 1,\n        per_page: 200,\n        groups_count: 15\n    },\n    group_by: [\n        {\n            key: \"article\",\n            key_display_name: \"article\",\n            count: 202814957\n        },\n        {\n            key: \"book-chapter\",\n            key_display_name: \"book-chapter\",\n            count: 21250659\n        },\n        {\n            key: \"dissertation\",\n            key_display_name: \"dissertation\",\n            count: 6055973\n        },\n        {\n            key: \"book\",\n            key_display_name: \"book\",\n            count: 5400871\n        },\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Indicating Availability of Searchable Full Text in OpenAlex Work JSON Records\nDESCRIPTION: A JSON boolean set to true if the full text of the work is indexed and searchable within OpenAlex, regardless of public access rights. This supports search functionality, and the source of full text can be identified via the fulltext_origin field.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/work-object/README.md#_snippet_19\n\nLANGUAGE: JSON\nCODE:\n```\nhas_fulltext: true\n```\n\n----------------------------------------\n\nTITLE: Filtering Works Related to a Specific Work (OpenAlex API, HTTP)\nDESCRIPTION: Demonstrates filtering works that are listed in the 'related_works' section of a specific target work. The filter requires the OpenAlex ID of the target work.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/filter-works.md#_snippet_29\n\nLANGUAGE: HTTP\nCODE:\n```\nhttps://api.openalex.org/works?filter=related_to:W2486144666\n```\n\n----------------------------------------\n\nTITLE: Sampling Random Works OpenAlex API HTTP\nDESCRIPTION: Illustrates how to retrieve a random sample of works using the 'sample' query parameter. This example requests a sample size of 20 ('sample=20'). An optional 'seed' parameter can be added for reproducible random samples.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/get-lists-of-works.md#_snippet_4\n\nLANGUAGE: HTTP\nCODE:\n```\nhttps://api.openalex.org/works?sample=20\n```\n\n----------------------------------------\n\nTITLE: Returning Author Citation Count with OpenAlex API (JSON)\nDESCRIPTION: This snippet illustrates the structure of the 'cited_by_count' field, showing the total number of works in OpenAlex that cite any work by this author. It is an integer and typically appears as a top-level property. No dependencies exist beyond up-to-date citation indexing in the data source. Input is not required; output is an integer citation count.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/authors/author-object.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\ncited_by_count: 38 \n```\n\n----------------------------------------\n\nTITLE: Listing Grants Associated with OpenAlex Works in JSON Format\nDESCRIPTION: A JSON list containing grant objects that associate funders and award IDs with a work. Each grant may include the funder's OpenAlex ID, its display name, and the award ID string or null if unavailable. Grants data are sourced from Crossref but are limited in scope.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/work-object/README.md#_snippet_18\n\nLANGUAGE: JSON\nCODE:\n```\ngrants: [\n    {\n        funder: \"https://openalex.org/F4320306076\",\n        funder_display_name: \"National Science Foundation\",\n        award_id: \"ABI 1661218\"\n    },\n    {\n        funder: \"https://openalex.org/F4320306084\",\n        funder_display_name: \"U.S. Department of Energy\",\n        award_id: null\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Description Example (JSON)\nDESCRIPTION: Shows the `description` field, which contains a short description of the funder taken from Wikidata. This provides a brief overview of the funder's purpose or area of focus.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/funders/funder-object.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\ndescription: \"medical research organization in the United States\"\n```\n\n----------------------------------------\n\nTITLE: Querying with ROR ID\nDESCRIPTION: This example shows querying for an institution using a ROR ID. It constructs a URL with the API base, entity type (institutions), and the ROR ID (in this case, the canonical form, which is the URL itself).\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/how-to-use-the-api/get-single-entities/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhttps://api.openalex.org/institutions/https://ror.org/02y3ad647\n```\n\n----------------------------------------\n\nTITLE: Image URL Example (JSON)\nDESCRIPTION: Shows the `image_url` field, which contains a URL for an image representing the funder, often a seal or logo hosted on Wikimedia. This provides a visual representation of the funder.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/funders/funder-object.md#_snippet_12\n\nLANGUAGE: JSON\nCODE:\n```\nimage_url: \"https://commons.wikimedia.org/w/index.php?title=Special:Redirect/file/NIH 2013 logo vertical.svg\"\n```\n\n----------------------------------------\n\nTITLE: Summary Stats Example (JSON)\nDESCRIPTION: Illustrates the `summary_stats` object, which contains citation metrics for the funder, including 2-year mean citedness, h-index, and i10-index. These metrics provide a quantitative assessment of the funder's impact.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/funders/funder-object.md#_snippet_14\n\nLANGUAGE: JSON\nCODE:\n```\nsummary_stats: {\n    2yr_mean_citedness: 5.065784263815827,\n    h_index: 985,\n    i10_index: 176682\n}\n```\n\n----------------------------------------\n\nTITLE: Select Specific Fields for Institutions List - OpenAlex API Call\nDESCRIPTION: Shows how to limit the fields returned for each institution result using the `select` parameter. A comma-separated list of desired field names (`id`, `display_name`, `ror`) is provided. This reduces response size.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/institutions/get-lists-of-institutions.md#_snippet_5\n\nLANGUAGE: API Call\nCODE:\n```\nhttps://api.openalex.org/institutions?select=id,display_name,ror\n```\n\n----------------------------------------\n\nTITLE: Querying with ROR ID URN style\nDESCRIPTION: This example shows fetching an institution with a ROR ID in a URN-style format. The URN format uses the namespace of the ID, followed by the ID itself (ror:02y3ad647).\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/how-to-use-the-api/get-single-entities/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhttps://api.openalex.org/institutions/ror:02y3ad647\n```\n\n----------------------------------------\n\nTITLE: Querying OpenAlex /text/concepts Endpoint (HTTP GET)\nDESCRIPTION: This example illustrates retrieving OpenAlex Concepts for a given text ('type 1 diabetes research for children') through an HTTP GET request to the `/text/concepts` endpoint. The text is supplied using the URL-encoded `title` query parameter.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/aboutness-endpoint-text.md#_snippet_2\n\nLANGUAGE: HTTP\nCODE:\n```\nhttps://api.openalex.org/text/concepts?title=type%201%20diabetes%20research%20for%20children\n```\n\n----------------------------------------\n\nTITLE: Filtering Works by Author Count in OpenAlex API\nDESCRIPTION: This snippet shows how to filter works using the `authors_count` filter to get works with a specific number of authors.  The example searches for works with exactly one author, indicated by passing '1' as the value to the filter.  It filters based on the number of authorships associated with a work.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/filter-works.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nhttps://api.openalex.org/works?filter=authors_count:1\n```\n\n----------------------------------------\n\nTITLE: Example: `oa_url` Field in OpenAccess Object (JSON)\nDESCRIPTION: Illustrates the `oa_url` string field within the `OpenAccess` object. This field provides the best available URL (closest to the version of record) where the full text of the work can be accessed freely without payment or login. This could be a direct PDF link or a landing page.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/work-object/README.md#_snippet_48\n\nLANGUAGE: json\nCODE:\n```\noa_url: \"https://peerj.com/articles/4375.pdf\"\n```\n\n----------------------------------------\n\nTITLE: Representing Citation Count Property - JSON\nDESCRIPTION: Illustrates the `cited_by_count` property which is an integer representing the total number of works citing any work affiliated with this institution. This property quantifies the citation impact or scholarly citations accumulated by the institution's outputs.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/institutions/institution-object.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\ncited_by_count: 21199844\n```\n\n----------------------------------------\n\nTITLE: Filtering Works by Abstract Search in OpenAlex API\nDESCRIPTION: This code provides an example of filtering works in OpenAlex by searching within their abstracts using the `abstract.search` filter.  The input is a search string, in this case, \"artificial intelligence\", and the output will be works which abstracts contain that phrase. This implements a search through the abstract text.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/filter-works.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nhttps://api.openalex.org/works?filter=abstract.search:artificial%20intelligence\n```\n\n----------------------------------------\n\nTITLE: Creating the concepts_related_concepts relationship table\nDESCRIPTION: Establishes a dedicated relationship table to store related concepts and their scores, enabling efficient many-to-many relationship queries between concepts.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/download-all-data/upload-to-your-database/load-to-a-relational-database/README.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE openalex.concepts_related_concepts (\n    concept_id text,\n    related_concept_id text,\n    score real\n);\n```\n\n----------------------------------------\n\nTITLE: Funder IDs Object Example (JSON)\nDESCRIPTION: Shows the `ids` object, which contains various external identifiers for the funder, such as Crossref ID, DOI, OpenAlex ID, ROR ID, and Wikidata ID. These are expressed as URIs whenever possible.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/funders/funder-object.md#_snippet_10\n\nLANGUAGE: JSON\nCODE:\n```\nids: {\n    openalex: \"https://openalex.org/F4320332161\",\n    ror: \"https://ror.org/01cwqze88\",\n    wikidata: \"https://www.wikidata.org/entity/Q390551\",\n    crossref: \"100000002\",\n    doi: \"https://doi.org/10.13039/100000002\"\n}\n```\n\n----------------------------------------\n\nTITLE: Representing Counts By Year Property - JSON\nDESCRIPTION: Details the `counts_by_year` list which contains yearly binned counts of works produced and citations received by the institution over the last ten years (with years having zero counts omitted). Each entry includes `year`, `works_count` (number of works produced that year), and `cited_by_count` (number of citations to works affiliated with the institution). Useful for tracking institutional productivity and citation trends over time.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/institutions/institution-object.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\ncounts_by_year: [\n    {\n        year: 2022,\n        works_count: 133,\n        cited_by_count: 32731\n    },\n    {\n        year: 2021,\n        works_count: 12565,\n        cited_by_count: 2180827\n    }\n    \n    // and so forth\n]\n```\n\n----------------------------------------\n\nTITLE: Marking Open Access Indexing with 'is_in_doaj' Boolean in OpenAlex Source Object - JSON\nDESCRIPTION: Depicts 'is_in_doaj', which is true if the source appears in the Directory of Open Access Journals (DOAJ). Field is a boolean, no dependencies, enables OA filtering.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/sources/source-object.md#_snippet_16\n\nLANGUAGE: json\nCODE:\n```\nis_in_doaj: true \n```\n\n----------------------------------------\n\nTITLE: Display Name Example (JSON)\nDESCRIPTION: Displays the `display_name` field, which represents the primary name of the funder. This is the most commonly used name for the funding organization.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/funders/funder-object.md#_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\ndisplay_name: \"National Institutes of Health\"\n```\n\n----------------------------------------\n\nTITLE: Showing OpenAlex Work Primary Topic JSON Example\nDESCRIPTION: Example JSON structure for the `primary_topic` attribute of an OpenAlex Work object. This object represents the single top-ranked topic associated with the work, providing its ID, display name, score, and information about its parent subfield, field, and domain.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/work-object/README.md#_snippet_34\n\nLANGUAGE: JSON\nCODE:\n```\nprimary_topic: {\n    id: \"https://openalex.org/T12419\",\n    display_name: \"Analysis of Cardiac and Respiratory Sounds\",\n    score: \t0.9997,\n    subfield: {\n        id: 2740,\n        display_name: \"Pulmonary and Respiratory Medicine\"\n    },\n    field: {\n        id: 27,\n        display_name: \"Medicine\"\n    },\n    domain: {\n        id: 4,\n        display_name: \"Health Sciences\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Representing an Author Object Reference in JSON\nDESCRIPTION: Shows the dehydrated Author object as referenced in an Authorship entry, containing the author's unique ID, display name, and optional ORCID. Consumers require access to linked author resources for further details, and missing ORCID information is possible due to author disambiguation. All fields are strings; expect keys 'id', 'display_name', and possibly 'orcid'.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/work-object/authorship-object.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\nauthor: {\n    id: \"https://openalex.org/A5085171399\",\n    display_name: \"Juan Pablo Alperin\",\n    orcid: \"https://orcid.org/0000-0002-9344-7439\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying with OpenAlex Key\nDESCRIPTION: This shows the most concise way to query using the OpenAlex ID - just using the key part of the ID, like w1234567 instead of the full URL.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/how-to-use-the-api/get-single-entities/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nhttps://api.openalex.org/works/W2741809807\n```\n\n----------------------------------------\n\nTITLE: Listing Work Authorships in JSON Format\nDESCRIPTION: Demonstrates the JSON structure for the `authorships` field, which is a list of Authorship objects. Each object contains details about an author (ID, name, ORCID) and their affiliated institutions. The list is limited to the first 100 authors for performance.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/work-object/README.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\nauthorships: [\n    // first authorship object:\n    {\n        author_position: \"middle\",\n        author: {\n            id: \"https://openalex.org/A5023888391\",\n            display_name: \"Jason Priem\",\n            orcid: \"https://orcid.org/0000-0001-6187-6610\"\n        },\n        institutions: [\n            {\n                id: \"https://openalex.org/I4200000001\",\n                display_name: \"OurResearch\",\n                ror: \"https://ror.org/02nr0ka47\",\n                country_code: \"US\",\n                type: \"nonprofit\"\n            }\n        ],\n        // other fields removed for brevity. See the Authorship object documentation\n    },\n    \n    // more authorship objects go here\n]\n```\n\n----------------------------------------\n\nTITLE: Showing OpenAlex Work Locations List JSON Example\nDESCRIPTION: Example JSON structure for the `locations` attribute of an OpenAlex Work object. This attribute provides a list of `Location` objects, detailing where the work can be found, including URLs, OA status, and source information. Each location object represents a unique place where the work is accessible.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/work-object/README.md#_snippet_29\n\nLANGUAGE: JSON\nCODE:\n```\nlocations: [\n  {\n    is_oa: true,\n    landing_page_url: \"https://doi.org/10.1073/pnas.17.6.401\",\n    pdf_url: \"http://www.pnas.org/content/17/6/401.full.pdf\",\n    source: {\n      id: \"https://openalex.org/S125754415\",\n      display_name: \"Proceedings of the National Academy of Sciences of the United States of America\",\n      issn_l: \"0027-8424\",\n      issn: [\"1091-6490\", \"0027-8424\"],\n      host_organization: \"https://openalex.org/P4310320052\",\n      type: \"journal\"\n    },\n    license: null,\n    version: \"publishedVersion\"\n  },\n  {\n    is_oa: true,\n    landing_page_url: \"https://www.ncbi.nlm.nih.gov/pmc/articles/PMC1076072\",\n    pdf_url: null,\n    source: {\n      id: \"https://openalex.org/S2764455111\",\n      display_name: \"PubMed Central\",\n      issn_l: null,\n      issn: null,\n      host_organization: \"https://openalex.org/I1299303238\",\n      type: \"repository\"\n    },\n    license: null,\n    version: \"publishedVersion\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Importing Data Analysis Libraries with pandas and numpy in Python\nDESCRIPTION: Imports pandas and numpy, which are essential for data manipulation and numerical computing respectively. pandas is used for tabular data representation and processing, while numpy underpins efficient array operations. Both libraries should be installed as dependencies.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/scripts/notebooks/scrape_docs.ipynb#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport pandas as pd\nimport numpy as np\n```\n\n----------------------------------------\n\nTITLE: Appending Parent Directory to sys.path in Python\nDESCRIPTION: Expands the module search path by appending the parent directory (..) to sys.path. This allows importing modules located in the parent directory, which is necessary for accessing project-specific modules such as markdown_edits.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/scripts/notebooks/scrape_docs.ipynb#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nsys.path.append('..')\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Funder Autocomplete\nDESCRIPTION: Provides a sample JSON structure returned by the funder autocomplete endpoint. The response includes a list of matching funders under the 'results' key, each containing details like 'id', 'display_name', 'hint', 'cited_by_count', 'works_count', 'entity_type', and 'external_id'.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/funders/search-funders.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"results\": [\n    {\n        \"id\": \"https://openalex.org/F4320306076\",\n        \"display_name\": \"National Science Foundation\",\n        \"hint\": null,\n        \"cited_by_count\": 6705777,\n        \"works_count\": 264303,\n        \"entity_type\": \"funder\",\n        \"external_id\": \"https://ror.org/021nxhr62\"\n    },\n    ...\n  ]\n```\n\n----------------------------------------\n\nTITLE: Writing Glossary Markdown Sections to File in Python\nDESCRIPTION: Opens or creates a markdown file (tmpglossary.md) for writing and writes each pre-assembled glossary_section string to it, ensuring separation between sections. This produces the final human-readable glossary output for OpenAlex fields and attributes.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/scripts/notebooks/scrape_docs.ipynb#_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\nwith Path(\"tmpglossary.md\").open(\"w\") as outf:\n    for glossary_section in glossary_sections:\n        outf.write(glossary_section)\n        outf.write(\"\\n\")\n```\n\n----------------------------------------\n\nTITLE: Listing Author Name Alternatives in OpenAlex API (JSON)\nDESCRIPTION: This snippet shows the 'display_name_alternatives' property—an array of alternative display names for the author. Each array item is a string representing a known variant. Output is a string array; input not required.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/authors/author-object.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\ndisplay_name_alternatives: [\n    \"Jason R Priem\"\n]\n```\n\n----------------------------------------\n\nTITLE: Searching Keywords by Display Name (HTTP GET)\nDESCRIPTION: Example API request using the `search` parameter to perform a full-text search across the `display_name` field of Keywords. This request searches for keywords related to \"artificial intelligence\".\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/keywords/README.md#_snippet_13\n\nLANGUAGE: http\nCODE:\n```\nhttps://api.openalex.org/keywords?search=artificial intelligence\n```\n\n----------------------------------------\n\nTITLE: Importing Pandas and NumPy Libraries in Python\nDESCRIPTION: Imports the `pandas` library, aliased as `pd`, for data manipulation and analysis capabilities, particularly for creating DataFrames and Series. It also imports the `numpy` library, aliased as `np`, a fundamental package for numerical computation often used alongside pandas.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/scripts/notebooks/filters_align.ipynb#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nimport numpy as np\n```\n\n----------------------------------------\n\nTITLE: Works API URL Example (JSON)\nDESCRIPTION: This JSON snippet demonstrates the `works_api_url` property. It provides the URL to retrieve a list of works affiliated with the institution.  It is an API URL that can be used to access a list of works created by authors affiliated with the institution. It's provided instead of listing the works directly.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/institutions/institution-object.md#_snippet_23\n\nLANGUAGE: json\nCODE:\n```\nworks_api_url: \"https://api.openalex.org/works?filter=institutions.id:I114027177\"\n```\n\n----------------------------------------\n\nTITLE: Load Single JSON Line File to BigQuery Table using bq CLI (Bash)\nDESCRIPTION: Illustrates the `bq load` command to import a single data file into a BigQuery table. It specifies the source format as CSV with a non-existent tab delimiter (`-F '\\t'`) and defines the schema as a single STRING column to load each line of the JSON Lines file as a single string.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/download-all-data/upload-to-your-database/load-to-a-data-warehouse.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbq load \\\n--project_id openalex-demo \\\n--source_format=CSV -F '\\t' \\\n--schema 'work:string' \\\nopenalex.works \\\n'openalex-snapshot/data/works/updated_date=2021-12-28/0000_part_00.gz'\n```\n\n----------------------------------------\n\nTITLE: Listing Indexing Sources for OpenAlex Works as JSON Array\nDESCRIPTION: A JSON list enumerating the external sources or databases in which the work is indexed, such as arxiv, crossref, doaj, and pubmed. This provides provenance and coverage information for the work's indexing status.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/work-object/README.md#_snippet_22\n\nLANGUAGE: JSON\nCODE:\n```\nindexed_in: [\n    \"arxiv\", \"crossref\", \"pubmed\"\n]\n```\n\n----------------------------------------\n\nTITLE: Listing Authorship Countries Field as JSON\nDESCRIPTION: Illustrates the 'countries' property comprising a string list of ISO country codes linked to the author, derived from institutions or affiliation parsing. Each entry must be a two-letter country code string, and one or more values are possible depending on matching. Coverage may be partial if direct institutions are unavailable.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/work-object/authorship-object.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\ncountries: [\n    \"US\"\n]\n```\n\n----------------------------------------\n\nTITLE: Example 'subfield' Field in OpenAlex Topic Object (JSON)\nDESCRIPTION: Shows the structure of the 'subfield' field in an OpenAlex Topic object. It's an object containing the 'id' and 'display_name' of the topic's subfield, the third level in the topic hierarchy.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/topics/topic-object.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\nsubfield: {\n    id: 2718,\n    display_name: \"Health Informatics\"\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking Last Update with 'updated_date' Field in OpenAlex Source Object - JSON\nDESCRIPTION: This snippet reflects the 'updated_date', a string in ISO 8601 format that timestamps the last modification to any aspect of the Source object. Input/output should strictly follow date-time standards, allowing record versioning and synchronization. No dependencies.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/sources/source-object.md#_snippet_23\n\nLANGUAGE: json\nCODE:\n```\nupdated_date: \"2022-01-02T00:00:00\"\n```\n\n----------------------------------------\n\nTITLE: Extracting GUI Filters using Regex in Python\nDESCRIPTION: Uses the `re` (regular expression) library to extract filter keys and their corresponding entity types from the fetched GUI source code (`r.text`). It compiles a regex pattern `p` designed to match `key: \"<key_name>\"` and `entityType: \"<entity_name>\"` patterns, potentially spanning multiple lines (`re.S` flag). The `p.findall()` method retrieves all matching pairs, storing them in `gui_matches`.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/scripts/notebooks/filters_align.ipynb#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\np = re.compile(r'key: \"(.*?)\",.*?entityType: \"(.*?)\"', flags=re.S)  # re.S means dot matches newline\n# p = re.compile(r'key: \"(.*?)\",', flags=re.S)  # re.S means dot matches newline\ngui_matches = p.findall(r.text)\n```\n\n----------------------------------------\n\nTITLE: Displaying Source ISSNs with 'issn' Array Field in OpenAlex Source Object - JSON\nDESCRIPTION: Exhibits the 'issn' array, which lists one or more ISSNs for the source, representing all media versions. Field contains strings; should be cross-checked with 'issn_l' for canonical ID. Input/output is an array of valid ISSN strings.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/sources/source-object.md#_snippet_18\n\nLANGUAGE: json\nCODE:\n```\nissn: [\"2167-8359\"]\n```\n\n----------------------------------------\n\nTITLE: Cited By Count Example (JSON)\nDESCRIPTION: Illustrates the `cited_by_count` field in a Funder object, representing the total number of works that cite a work linked to this funder. This integer value indicates the citation impact associated with the funder's supported research.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/funders/funder-object.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\ncited_by_count: 7823467\n```\n\n----------------------------------------\n\nTITLE: Example SQL query: Top author with most open access works\nDESCRIPTION: Finds the author who has the highest number of open access works by aggregating data across authors, works, and open access status tables; illustrates use of nested queries, joins, and aggregation.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/download-all-data/upload-to-your-database/load-to-a-relational-database/README.md#_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nselect \n    author_id, \n    count(distinct work_id) as num_oa_works \nfrom (\n    select \n        a.id as author_id, \n        w.id as work_id, \n        oa.is_oa  \n    from \n        openalex.authors a \n        join openalex.works_authorships wa on a.id = wa.author_id \n        join openalex.works w on wa.work_id = w.id \n        join openalex.works_open_access oa on w.id = oa.work_id\n) work_authorships_oa \nwhere is_oa \ngroup by 1 \norder by 2 desc \nlimit 1;\n```\n\n----------------------------------------\n\nTITLE: Country Code Example (JSON)\nDESCRIPTION: Shows the `country_code` field within a Funder object, representing the country where the funder is located. It uses the ISO two-letter country code standard (e.g., \"US\" for the United States).\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/funders/funder-object.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\ncountry_code: \"US\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Concept Creation Date - OpenAlex - JSON\nDESCRIPTION: Shows the 'created_date' property as an ISO 8601 string, indicating when the Concept object was first added to OpenAlex. This can help users determine the longevity or recency of a concept in the dataset.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/concepts/concept-object.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\ncreated_date: \"2017-08-08\"\n```\n\n----------------------------------------\n\nTITLE: Querying with ORCID ID URN style\nDESCRIPTION: This is a query for an author using the URN format for ORCID IDs.  It combines the entity type \"authors\" with the URN format for ORCID, namespace:identifier.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/how-to-use-the-api/get-single-entities/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nhttps://api.openalex.org/authors/orcid:0000-0003-1613-5981\n```\n\n----------------------------------------\n\nTITLE: Filtering by Best Open Access Version\nDESCRIPTION: This snippet demonstrates filtering works based on their 'best_open_version'. It retrieves works that have a best open access location version of 'any' (submitted, accepted, or published). This filter utilizes the best_oa_location.version field to determine the open access status.  No dependencies are required.  The output is a list of work objects matching the criteria. The filter supports 'any', 'acceptedOrPublished' and 'published' values.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/filter-works.md#_snippet_5\n\nLANGUAGE: API\nCODE:\n```\nhttps://api.openalex.org/works?filter=best_open_version:any\n```\n\n----------------------------------------\n\nTITLE: Defining Paid Article Processing Charge (APC) (JSON)\nDESCRIPTION: Shows the JSON structure for the `apc_paid` field (though the example code block is labelled `apc_payment`), representing the actual paid Article Processing Charge (APC). It includes the value, currency, provenance (e.g., \"openapc\", \"doaj\"), and the value converted to USD. This differs from `apc_list`, which shows the listed price.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/work-object/README.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\napc_payment: {\n    value: 2250,\n    currency: \"EUR\",\n    value_usd: 2426,\n    provenance: \"openapc\"\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Canonical ISSN with 'issn_l' String Field in OpenAlex Source Object - JSON\nDESCRIPTION: Shows 'issn_l', a string representing the canonical ISSN-L for all versions of a source. Used for unique identification. The field is required for all indexed sources and uses ISO formatting.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/sources/source-object.md#_snippet_19\n\nLANGUAGE: json\nCODE:\n```\nissn_l: \"2167-8359\"\n```\n\n----------------------------------------\n\nTITLE: Importing Python Modules\nDESCRIPTION: This snippet imports necessary Python modules for file system operations and Markdown processing. It includes `os` for interacting with the operating system, `shutil` for high-level file operations like moving files, and `pathlib.Path` for object-oriented file path manipulation.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/scripts/notebooks/moving_files.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport shutil\nfrom pathlib import Path\n```\n\n----------------------------------------\n\nTITLE: Counting Distinct Countries from Work Authorship in OpenAlex JSON\nDESCRIPTION: A JSON integer representing the number of unique country codes extracted across institutions involved in the authorships of a work. It serves as a metric for geographic diversity among contributors. Inputs are derived from authorship affiliations, and outputs are aggregated distinct counts.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/work-object/README.md#_snippet_11\n\nLANGUAGE: JSON\nCODE:\n```\ncountries_distinct_count: 4\n```\n\n----------------------------------------\n\nTITLE: Capturing Yearly Citation Counts in OpenAlex Works Using JSON\nDESCRIPTION: A JSON list representing citation counts by year for the past ten years, excluding older citations and omitting years with zero citations. Each item contains a year and the number of citations (cited_by_count) that the work received that year. This allows temporal tracking of citation impact.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/work-object/README.md#_snippet_12\n\nLANGUAGE: JSON\nCODE:\n```\ncounts_by_year: [\n    {\n        year: 2022,\n        cited_by_count: 8\n    },\n    {\n        year: 2021,\n        cited_by_count: 252\n    },\n    ...\n    {\n        year: 2012,\n        cited_by_count: 79\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Language Code Representation for OpenAlex Work Metadata in JSON\nDESCRIPTION: A JSON string storing the detected language of the work metadata using the ISO 639-1 two-letter code. Language is inferred algorithmically using tools like langdetect on abstracts or titles and may not match the full text language. Null if detection is inconclusive.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/work-object/README.md#_snippet_27\n\nLANGUAGE: JSON\nCODE:\n```\nlanguage: \"en\"\n```\n\n----------------------------------------\n\nTITLE: Boolean Flag for Paratext Classification in OpenAlex Work JSON Records\nDESCRIPTION: A JSON boolean indicating whether a work is classified as paratext, i.e., material related to the venue rather than scholarly content (e.g., editorial boards, tables of contents). Determined algorithmically via title heuristics, this flag helps filter out non-research materials.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/work-object/README.md#_snippet_24\n\nLANGUAGE: JSON\nCODE:\n```\nis_paratext: false\n```\n\n----------------------------------------\n\nTITLE: Capturing Raw Affiliation Strings for Authorship (JSON)\nDESCRIPTION: Represents the raw affiliation strings as originally received, stored as a list even if only a single entry is present. This field is useful when matched institutions might be incomplete or when retention of original, non-normalized data is needed. Each item should be an unaltered string from upstream sources.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/work-object/authorship-object.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\nraw_affiliation_strings: [\n    \"Canadian Institute for Studies in Publishing, Simon Fraser University\"\n],\n```\n\n----------------------------------------\n\nTITLE: Defining Article Processing Charge (APC) List Price (JSON)\nDESCRIPTION: Illustrates the JSON structure for the `apc_list` field (though the example code block is labelled `apc_payment`), detailing the listed Article Processing Charge (APC). It includes the value, currency, provenance (source of data, currently only \"doaj\"), and the value converted to USD. This represents the list price, not necessarily the price paid.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/work-object/README.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\napc_payment: {\n    value: 3200,\n    currency: \"USD\",\n    value_usd: 3200,\n    provenance: \"doaj\"\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Topics: OpenAlex API - Select Fields\nDESCRIPTION: This URL shows how to limit the fields returned for each topic using the `select` query parameter. It requests only the `id`, `display_name`, and `description` fields.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/topics/get-lists-of-topics.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nhttps://api.openalex.org/topics?select=id,display_name,description\n```\n\n----------------------------------------\n\nTITLE: Filtering institutions in the Global South\nDESCRIPTION: This snippet retrieves institutions located in the Global South by setting the `is_global_south` filter to true. It is relevant for regional or socio-economic research focusing on Global South countries.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/institutions/filter-institutions.md#_snippet_5\n\nLANGUAGE: URL\nCODE:\n```\nhttps://api.openalex.org/institutions?filter=is_global_south:true\n```\n\n----------------------------------------\n\nTITLE: X Concepts Example (JSON)\nDESCRIPTION: This JSON snippet showcases the structure of the `x_concepts` property. It lists the concepts most frequently associated with works affiliated with the institution. Each concept is represented as a dehydrated concept object, and includes a score indicating the strength of the association between the institution and the concept. Note that this functionality will soon be replaced by `Topics`.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/institutions/institution-object.md#_snippet_25\n\nLANGUAGE: json\nCODE:\n```\nx_concepts: [\n    {\n        id: \"https://openalex.org/C86803240\",\n        wikidata: null,\n        display_name: \"Biology\",\n        level: 0,\n        score: 86.7\n    },\n    {\n        id: \"https://openalex.org/C185592680\",\n        wikidata: null,\n        display_name: \"Chemistry\",\n        level: 0,\n        score: 51.4\n    },\n    \n    // and so forth\n]\n```\n\n----------------------------------------\n\nTITLE: Showing OpenAlex Work Topics List JSON Example\nDESCRIPTION: Example JSON structure for the `topics` attribute of an OpenAlex Work object. This list contains up to three top-ranked topic objects associated with the work, providing details like ID, display name, score, and hierarchical information (subfield, field, domain).\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/work-object/README.md#_snippet_40\n\nLANGUAGE: JSON\nCODE:\n```\ntopics: [\n    {\n        id: \"https://openalex.org/T12419\",\n        display_name: \"Analysis of Cardiac and Respiratory Sounds\",\n        score: \t0.9997,\n        subfield: {\n            id: 2740,\n            display_name: \"Pulmonary and Respiratory Medicine\"\n        },\n        field: {\n            id: 27,\n            display_name: \"Medicine\"\n        },\n        domain: {\n            id: 4,\n            display_name: \"Health Sciences\"\n        }\n    }\n    ...\n]\n```\n\n----------------------------------------\n\nTITLE: Showing OpenAlex Work Locations Count JSON Example\nDESCRIPTION: Example JSON for the `locations_count` attribute of an OpenAlex Work object. This integer value indicates the total number of unique locations where the work is available, corresponding to the count of objects in the `locations` list.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/work-object/README.md#_snippet_30\n\nLANGUAGE: JSON\nCODE:\n```\nlocations_count: 3\n```\n\n----------------------------------------\n\nTITLE: Publisher Object: cited_by_count Field (JSON)\nDESCRIPTION: Example of the 'cited_by_count' field within an OpenAlex Publisher object. This integer represents the total number of citations received by all works associated with the publisher via its journals or other linked sources.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/publishers/publisher-object.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\ncited_by_count: 407508754\n```\n\n----------------------------------------\n\nTITLE: Sort Institutions List by Cited Count - OpenAlex API Call\nDESCRIPTION: Illustrates how to sort the institutions list using the `sort` parameter. This example sorts results by `cited_by_count` in descending order (`desc`). Other fields and sort directions are possible.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/institutions/get-lists-of-institutions.md#_snippet_3\n\nLANGUAGE: API Call\nCODE:\n```\nhttps://api.openalex.org/institutions?sort=cited_by_count:desc\n```\n\n----------------------------------------\n\nTITLE: Get Single Author by Full ORCID using OpenAlex API\nDESCRIPTION: Shows how to retrieve an author's information from the OpenAlex API using their full ORCID URL as the identifier in the /authors endpoint.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/authors/get-a-single-author.md#_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nhttps://api.openalex.org/authors/https://orcid.org/0000-0002-1298-3089\n```\n\n----------------------------------------\n\nTITLE: Representing External Identifiers Object - JSON\nDESCRIPTION: Describes the `ids` object which aggregates all known external identifiers for the institution from various data sources like GRID, MAG, ROR, Wikipedia, and Wikidata. ID values are either strings (usually URI) or integers, providing cross-reference capabilities. Null or missing IDs are omitted from this object.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/institutions/institution-object.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\nids: {\n    openalex: \"https://openalex.org/I114027177\",\n    ror: \"https://ror.org/0130frc33\",\n    grid: \"grid.10698.36\",\n    wikipedia: \"https://en.wikipedia.org/wiki/University%20of%20North%20Carolina%20at%20Chapel%20Hill\",\n    wikidata: \"https://www.wikidata.org/wiki/Q192334\",\n    mag: 114027177\n}\n```\n\n----------------------------------------\n\nTITLE: Listing 'apc_prices' as Array of Objects in OpenAlex Source Object - JSON\nDESCRIPTION: This example illustrates the 'apc_prices' field, an array where each object holds article processing charge information with 'price' (integer) and 'currency' (string) keys. This data comes from DOAJ. There are no dependencies, and the field conveys cost details for open access. Expected input is an array of objects as described; output is a structured list of price/currency pairs.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/sources/source-object.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\napc_prices: [\n    {\n        price: 3920,\n        currency: \"GBP\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Created Date Example (JSON)\nDESCRIPTION: Illustrates the `created_date` field, which represents the date the Funder object was created in the OpenAlex dataset. The date is expressed as an ISO 8601 date string.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/funders/funder-object.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\ncreated_date: \"2023-02-13\"\n```\n\n----------------------------------------\n\nTITLE: Example: `oa_status` Field in OpenAccess Object (JSON)\nDESCRIPTION: Displays an example of the `oa_status` string field within the `OpenAccess` object. This field categorizes the specific Open Access status (diamond, gold, green, hybrid, bronze, or closed) of the work based on publisher and repository information.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/work-object/README.md#_snippet_47\n\nLANGUAGE: json\nCODE:\n```\noa_status: \"gold\"\n```\n\n----------------------------------------\n\nTITLE: Filtering Sources by ISSN Availability in OpenAlex API\nDESCRIPTION: A basic example showing how to filter sources that have an ISSN using the OpenAlex API. The filter parameter 'has_issn:true' returns only sources with an assigned ISSN.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/sources/filter-sources.md#_snippet_0\n\nLANGUAGE: url\nCODE:\n```\nhttps://api.openalex.org/sources?filter=has_issn:true\n```\n\n----------------------------------------\n\nTITLE: Field-Weighted Citation Impact (FWCI) Value Representation in OpenAlex JSON\nDESCRIPTION: A JSON float value indicating the field-weighted citation impact for the work, calculated as the ratio of actual citations received to expected citations within the publication year plus the following three years. This metric normalizes citations by field and year for comparative impact.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/work-object/README.md#_snippet_17\n\nLANGUAGE: JSON\nCODE:\n```\nfwci: 76.992\n```\n\n----------------------------------------\n\nTITLE: Representing Institution Display Name - JSON\nDESCRIPTION: Illustrates the `display_name` field as the primary full name of the institution, represented as a string. This is the main human-readable identifier for the institution.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/institutions/institution-object.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\ndisplay_name: \"University of North Carolina at Chapel Hill\"\n```\n\n----------------------------------------\n\nTITLE: Aggregating External Identifiers with 'ids' Object in OpenAlex Source Object - JSON\nDESCRIPTION: Illustrates the 'ids' field containing various external identifiers, such as ISSNs, Fatcat, MAG, and Wikidata links. Each subfield provides linkage to external databases and is a string or a list; missing values are omitted. Used for cross-referencing records across bibliometric systems.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/sources/source-object.md#_snippet_14\n\nLANGUAGE: json\nCODE:\n```\nids: {\n    openalex: \"https://openalex.org/S1983995261\",\n    issn_l: \"2167-8359\",\n    issn: [\n        \"2167-8359\"\n    ],\n    mag: 1983995261,\n    fatcat: \"https://fatcat.wiki/container/z3ijzhu7zzey3f7jwws7rzopoq\",\n    wikidata: \"https://www.wikidata.org/entity/Q96326029\"\n}\n```\n\n----------------------------------------\n\nTITLE: Providing Main Source ID with 'id' Field in OpenAlex Source Object - JSON\nDESCRIPTION: This snippet shows the 'id' field, which is the canonical OpenAlex ID for the source. Representation is a URI string. Required for linking, querying, or integrating data. Should match with 'ids.openalex' where present.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/sources/source-object.md#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\nid: \"https://openalex.org/S1983995261\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Concept Last Update Date - OpenAlex - JSON\nDESCRIPTION: Shows the 'updated_date' as an ISO 8601-formatted string containing the last modification time for any attribute in the Concept object. Important for tracking freshness in downstream applications.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/concepts/concept-object.md#_snippet_14\n\nLANGUAGE: json\nCODE:\n```\nupdated_date: \"2021-12-25T14:04:30.578837\"\n```\n\n----------------------------------------\n\nTITLE: Create BigQuery Dataset using bq CLI (Bash)\nDESCRIPTION: Uses the Google Cloud SDK's `bq` command-line tool to create a new BigQuery dataset. The command specifies the project ID followed by a colon and the dataset name.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/download-all-data/upload-to-your-database/load-to-a-data-warehouse.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbq mk openalex-demo:openalex\n```\n\n----------------------------------------\n\nTITLE: Representing Institution Homepage URL - JSON\nDESCRIPTION: Shows the `homepage_url` string property containing the primary URL of the institution's official website.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/institutions/institution-object.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\nhomepage_url: \"http://www.unc.edu/\"\n```\n\n----------------------------------------\n\nTITLE: Displaying DehydratedConcept Fields - OpenAlex - JSON\nDESCRIPTION: Summarizes the structure of a minimal DehydratedConcept object, containing only display_name, id, level, and wikidata. Used as lightweight references for related or ancestor concepts. Outputs: object with four string/integer fields.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/concepts/concept-object.md#_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  display_name,\n  id,\n  level,\n  wikidata\n}\n```\n\n----------------------------------------\n\nTITLE: Publisher Object: display_name Field (JSON)\nDESCRIPTION: Example of the 'display_name' field within an OpenAlex Publisher object. This string provides the primary, human-readable name of the publisher.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/publishers/publisher-object.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\ndisplay_name: \"Elsevier BV\"\n```\n\n----------------------------------------\n\nTITLE: Storing Display Name (Title) of OpenAlex Work in JSON\nDESCRIPTION: A JSON string that duplicates the Work's title as display_name to ensure conformity with other OpenAlex entities that include a display_name property. This provides a uniform property for display purposes across entity types.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/work-object/README.md#_snippet_14\n\nLANGUAGE: JSON\nCODE:\n```\ndisplay_name: \"The state of OA: a large-scale analysis of the prevalence and impact of Open Access articles\"\n```\n\n----------------------------------------\n\nTITLE: Filtering institutions by continent\nDESCRIPTION: This example shows how to filter institutions located within the South American continent using the `continent` convenience filter. It is useful for region-specific data queries and requires valid continent strings.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/institutions/filter-institutions.md#_snippet_2\n\nLANGUAGE: URL\nCODE:\n```\nhttps://api.openalex.org/institutions?filter=continent:south_america\n```\n\n----------------------------------------\n\nTITLE: Get All Institutions - OpenAlex API Call\nDESCRIPTION: Demonstrates the base endpoint for retrieving the default list of all institutions from the OpenAlex API. By default, this returns the first page with 25 results. Subsequent results can be accessed via pagination.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/institutions/get-lists-of-institutions.md#_snippet_1\n\nLANGUAGE: API Call\nCODE:\n```\nhttps://api.openalex.org/institutions\n```\n\n----------------------------------------\n\nTITLE: Example 'description' Field in OpenAlex Topic Object (JSON)\nDESCRIPTION: Illustrates the 'description' field within an OpenAlex Topic object. This field contains a string value representing an AI-generated description of the topic, summarizing the content focus.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/topics/topic-object.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\ndescription: \"This cluster of papers explores the intersection of artificial intelligence and medicine, focusing on applications in healthcare, medical imaging, clinical decision support, and the ethical challenges associated with AI implementation. It delves into topics such as machine learning, big data, precision medicine, and the potential impact of AI on health equity.\"\n```\n\n----------------------------------------\n\nTITLE: Example `works_count` Field Value (JSON)\nDESCRIPTION: Displays an example integer value for the `works_count` field in an OpenAlex Keyword object. This field represents the total number of distinct works in OpenAlex that have been tagged with this keyword.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/keywords/README.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\nworks_count: 21737\n```\n\n----------------------------------------\n\nTITLE: Presenting 'alternate_titles' Array Field in OpenAlex Source Object - JSON\nDESCRIPTION: This snippet shows the 'alternate_titles' array containing alternate or abbreviated forms of the source name, as assigned by the ISSN Centre or metadata records. The property is an array of strings. No dependencies are required, and the primary parameter is a list of names. Output is an array with alternative titles; the field may be empty or missing if no alternatives exist.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/sources/source-object.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\nalternate_titles: [\n   \"ACRJ\"\n]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Field 'abbreviated_title' in OpenAlex Source Object - JSON\nDESCRIPTION: This snippet shows the JSON representation for the 'abbreviated_title' field, which is a string abbreviation from the ISSN Centre. There are no special dependencies. The key parameter is 'abbreviated_title', representing a condensed title version for the source. The expected output is a string value, and there are no constraints beyond its optional presence.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/sources/source-object.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nabbreviated_title: \"J. addict. med. ther. sci.\"\n```\n\n----------------------------------------\n\nTITLE: General Funder Search using 'search' Parameter\nDESCRIPTION: Demonstrates how to perform a broad search across funder 'display_name', 'alternate_titles', and 'description' fields using the 'search' query parameter in the OpenAlex API. This example searches for funders related to \"health\". The API endpoint returns a list of funders matching the search term.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/funders/search-funders.md#_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nhttps://api.openalex.org/funders?search=health\n```\n\n----------------------------------------\n\nTITLE: Example 'display_name' Field in OpenAlex Topic Object (JSON)\nDESCRIPTION: Shows an example of the 'display_name' field in an OpenAlex Topic object. This field provides the human-readable, English-language label for the topic as a string.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/topics/topic-object.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\ndisplay_name: \"Artificial Intelligence in Medicine\"\n```\n\n----------------------------------------\n\nTITLE: Example `id` Field Value (JSON)\nDESCRIPTION: Provides an example OpenAlex ID URL string for the `id` field within a Keyword object. This URL serves as the unique, persistent identifier for the keyword within the OpenAlex system.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/keywords/README.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\nid: \"https://openalex.org/keywords/cardiac-imaging\"\n```\n\n----------------------------------------\n\nTITLE: Example OpenAlex Snapshot Directory Structure\nDESCRIPTION: Sample of the directory structure created after downloading the OpenAlex snapshot, showing the organization of data by entity types (authors, concepts, institutions, sources, works) and their associated files.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/download-all-data/download-to-your-machine.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nopenalex-snapshot/\n├── LICENSE.txt\n├── RELEASE_NOTES.txt\n└── data\n    ├── authors\n    │   ├── manifest\n    │   └── updated_date=2021-12-28\n    │       ├── 0000_part_00.gz\n    │       └── 0001_part_00.gz\n    ├── concepts\n    │   ├── manifest\n    │   └── updated_date=2021-12-28\n    │       ├── 0000_part_00.gz\n    │       └── 0001_part_00.gz\n    ├── institutions\n    │   ├── manifest\n    │   └── updated_date=2021-12-28\n    │       ├── 0000_part_00.gz\n    │       └── 0001_part_00.gz\n    ├── sources\n    │   ├── manifest\n    │   └── updated_date=2021-12-28\n    │       ├── 0000_part_00.gz\n    │       └── 0001_part_00.gz\n    └── works\n        ├── manifest\n        └── updated_date=2021-12-28\n            ├── 0000_part_00.gz\n            └── 0001_part_00.gz\n```\n\n----------------------------------------\n\nTITLE: Example: `is_oa` Field in OpenAccess Object (JSON)\nDESCRIPTION: Provides an example of the `is_oa` boolean field within the `OpenAccess` object. It signifies whether the work is considered Open Access based on OpenAlex's broad definition: having a URL for reading the fulltext without payment or login.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/work-object/README.md#_snippet_46\n\nLANGUAGE: json\nCODE:\n```\nis_oa: true\n```\n\n----------------------------------------\n\nTITLE: Showing OpenAlex Work Referenced Works JSON Example\nDESCRIPTION: Example JSON structure for the `referenced_works` attribute of an OpenAlex Work object. This list contains OpenAlex IDs of other works that are cited *by* this work, representing outgoing citations.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/work-object/README.md#_snippet_37\n\nLANGUAGE: JSON\nCODE:\n```\nreferenced_works: [\n    \"https://openalex.org/W2753353163\",\n    \"https://openalex.org/W2785823074\",\n    \"https://openalex.org/W2511661767\",\n    \"https://openalex.org/W2115339903\",\n    \"https://openalex.org/W2031754690\"\n]\n```\n\n----------------------------------------\n\nTITLE: Filtering institutions by attribute `cited_by_count`\nDESCRIPTION: This snippet illustrates filtering institutions based on the number of times they are cited, using the `cited_by_count` attribute within filter parameters. It requires understanding of attribute filters and their appropriate syntax.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/institutions/filter-institutions.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\nhttps://api.openalex.org/institutions?filter=cited_by_count:>100\n```\n\n----------------------------------------\n\nTITLE: Example 'domain' Field in OpenAlex Topic Object (JSON)\nDESCRIPTION: Demonstrates the structure of the 'domain' field in an OpenAlex Topic object. It's an object containing the 'id' and 'display_name' of the topic's domain, which is the highest level in the topic hierarchy.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/topics/topic-object.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\ndomain: {\n    id: 4,\n    display_name: \"Health Sciences\"\n}\n```\n\n----------------------------------------\n\nTITLE: Alternate Titles Example (JSON)\nDESCRIPTION: Demonstrates the structure of the `alternate_titles` field within a Funder object, which is a list of alternate titles for the funder. This provides different names or abbreviations used for the same funding entity.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/funders/funder-object.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\nalternate_titles: [\n  \"US National Institutes of Health\",\n  \"Institutos Nacionales de la Salud\",\n  \"NIH\"\n]\n```\n\n----------------------------------------\n\nTITLE: Markdown Editing Script\nDESCRIPTION: This script makes edits to Markdown documents, prioritizing the preservation of the original content. It includes functionalities for splitting Markdown documents into sections, comparing sections, and updating sections while resolving potential conflicts. It uses regular expressions for pattern matching and `difflib` for comparing text sequences.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/scripts/notebooks/moving_files.ipynb#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# %load /home/hasone/code/ourresearch/openalex-docs/scripts/markdown_edits.py\n\nDESCRIPTION = \"\"\"Make edits to Markdown docs, prioritizing making sure nothing is lost from original.\"\"\"\n\nfrom collections import OrderedDict\nfrom typing import Any, Generator, List, Tuple\nimport difflib\nimport re\n\nimport logging\n\nroot_logger = logging.getLogger()\nlogger = root_logger.getChild(__name__)\n\n# match (english-language) hashtags between 1 and 30 characters long\n# https://stackoverflow.com/questions/42065872/regex-for-a-valid-hashtag\npattern_hashtag = re.compile(r\"(^|\\B)#(?![0-9_]+\\b)([a-zA-Z0-9_]{1,30})(\\b|\\r)\")\n\n\nclass MarkdownDoc:\n    def __init__(\n        self,\n        txt: str,\n        parent: Any = None,\n    ) -> None:\n        # self.txt = txt\n        self.parent = parent\n\n        self.sections = [\n            MarkdownSection(sec, title, parent=self, level=2)\n            for title, sec in self.split_into_sections(txt, level=2)\n        ]\n\n    @property\n    def txt(self):\n        return \"\\n\".join([section.txt for section in self.sections])\n\n    def __repr__(self) -> str:\n        txt_repr = self.txt[:50] + \"...\" if len(self.txt) > 50 else self.txt\n        txt_repr = txt_repr.replace(\"\\n\", \"\\\\\")\n        return f\"{self.__class__}({txt_repr})\"\n\n    def get_section_by_title(self, title: str) -> \"MarkdownSection\":\n        s = [sec for sec in self.sections if sec.title.lower() == title.lower()]\n        if len(s) < 1:\n            raise KeyError(f\"could not find section with title {title}\")\n        elif len(s) > 1:\n            raise KeyError(f\"ERROR: more than one section found with title {title}\")\n        return s[0]\n\n    def split_into_sections(\n        self, markdown_text: str, level=2\n    ) -> Generator[Tuple[str, List[str]], None, None]:\n        \"\"\"This is a very simple way of splitting the markdown text into sections.\n        It will not handle edge cases very well.\n\n        Args:\n            markdown_text (str): full text in Markdown format\n            level (int, optional): Heading level to split by. Defaults to 2, meaning \"## <Heading label>\"\n\n        Yields:\n            Generator[Tuple[str, List[str]], None, None]: Tuple of (section title, list of lines)\n        \"\"\"\n        heading_indicator = \"#\" * level\n        protect_flag = False\n        # sections = OrderedDict()\n        this_section = []\n        this_section_title = \"\"\n        # this_section_txt = \"\"\n        for line in markdown_text.split(\"\\n\"):\n            if line.startswith(\"```\"):\n                protect_flag = not protect_flag\n            if protect_flag is False and line.startswith(heading_indicator + \" \"):\n                # sections.append(\"\\n\".join(this_section))\n                # sections[this_section_title] = \"\\n\".join(this_section)\n                # this_section_txt = \"\\n\".join(this_section)\n                yield this_section_title, this_section\n                this_section = [line]\n                this_section_title = line.strip(heading_indicator).strip()\n            else:\n                this_section.append(line)\n        # sections.append(\"\\n\".join(this_section))\n        # this_section_txt = \"\\n\".join(this_section)\n        yield this_section_title, this_section\n\n    def refresh_all_sections(self):\n        for sec in self.sections:\n            sec.refresh()\n\n\nclass MarkdownSection:\n    def __init__(\n        self, lines: List[str], title: str = \"\", parent: Any = None, level=2\n    ) -> None:\n        self.lines = lines\n        self.title = title\n        self.parent = parent\n        self.level = level\n\n        self.refresh()\n\n    def refresh(self) -> None:\n        self.txt = \"\\n\".join(self.lines)\n        self.content = self.get_content()\n\n    def get_content(self) -> str:\n        content_lines = self.lines[1:]\n        content = \"\\n\".join(content_lines)\n        content = content.strip()\n        return content\n\n    def __repr__(self) -> str:\n        txt_repr = self.txt[:50] + \"...\" if len(self.txt) > 50 else self.txt\n        txt_repr = txt_repr.replace(\"\\n\", \"\\\\\")\n        return f\"{self.__class__}({txt_repr})\"\n\n    def __str__(self) -> str:\n        return self.txt\n\n    def get_resource_ids(self) -> List[str]:\n        # example of a resource id:\n        # \"![](:/f04c1849b3e64b5ca151a737720s0132)\"\n        return re.findall(r\"!\\[.*?\\]\\(:(/[a-zA-Z0-9]+?)\\)\", self.content)\n\n    def update(self, new_txt: str, force: bool = False) -> str:\n        new_sec = MarkdownSection(new_txt.split(\"\\n\"))\n        if not new_sec.content or new_sec.content == \"None\":\n            # no new text to replace. do nothing\n            return \"no update\"\n        if self.txt == new_txt:\n            # new text is the same as old text. do nothing\n            return \"no update\"\n\n        if force is True:\n            replace = True\n        else:\n            replace = False\n            if not self.content or self.content == \"None\":\n                # no old text exists. safe to replace\n                replace = True\n            else:\n                s = difflib.SequenceMatcher(\n                    None, self.content.splitlines(), new_sec.content.splitlines()\n                )\n                tags = [opcode[0] for opcode in s.get_opcodes()]\n                if all(tag in [\"equal\", \"insert\"] for tag in tags):\n                    # no merge conflicts (no lines are marked to delete or replace). safe to replace old text with new text\n                    replace = True\n                else:\n                    logger.debug(tags)\n        if replace is True:\n            # self.txt = new_txt\n            self.lines = new_txt.split(\"\\n\")\n            # self.content = self.get_content()\n            self.refresh()\n            return \"updated\"\n\n        logger.debug(new_txt)\n        from difflib import Differ\n\n        logger.debug(MarkdownSection(new_txt.splitlines()).content)\n        for x in Differ().compare(self.lines, new_txt.splitlines()):\n            logger.debug(x)\n        raise RuntimeError(\"could not update text\")\n```\n\n----------------------------------------\n\nTITLE: Representing Display Name Acronyms - JSON\nDESCRIPTION: Describes the `display_name_acronyms` field as a list of strings containing acronyms or initialisms often used in place of the full institution name. This allows for alternative short names.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/institutions/institution-object.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\ndisplay_name_acronyms:[\"UNC\"]\n```\n\n----------------------------------------\n\nTITLE: Providing Author Creation Date in OpenAlex API (JSON)\nDESCRIPTION: This snippet displays the 'created_date' property, indicating when the Author object was added to the OpenAlex dataset. The value is a string in ISO 8601 date format (YYYY-MM-DD). There's no input; output is a date string. No dependencies except consistent API creation logic.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/authors/author-object.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\ncreated_date: \"2017-08-08\"\n```\n\n----------------------------------------\n\nTITLE: Works Count Example (JSON)\nDESCRIPTION: This JSON snippet shows the `works_count` property. This property represents the total number of works (publications) created by authors associated with the institution. It provides a quick indication of the institution's research output.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/institutions/institution-object.md#_snippet_24\n\nLANGUAGE: json\nCODE:\n```\nworks_count: 202704    \n```\n\n----------------------------------------\n\nTITLE: Roles List Example (JSON)\nDESCRIPTION: Presents the `roles` list, showing different roles associated with the funder (e.g., institution, funder, publisher), along with their OpenAlex IDs and associated works counts. This indicates the various functions of the organization.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/funders/funder-object.md#_snippet_13\n\nLANGUAGE: JSON\nCODE:\n```\nroles: [\n    {\n        role: \"funder\",\n        id: \"https://openalex.org/F4320308380\",\n        works_count: 1004,\n    },\n    {\n        role: \"publisher\",\n        id: \"https://openalex.org/P4310315589\",\n        works_count: 13986,\n    },\n    {\n        role: \"institution\",\n        id: \"https://openalex.org/I32971472\",\n        works_count: 250031,\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Displaying International Display Names - OpenAlex - JSON\nDESCRIPTION: Shows the 'international' object structure, which contains translations of the concept's display name, keyed by language code. Used to provide multilingual support in client applications. Inputs: none (API-provided); outputs: object with string keys and values.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/concepts/concept-object.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\ninternational: {\n    display_name: {\n        ca: \"Altmetrics\",\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Grants Count Example (JSON)\nDESCRIPTION: Illustrates the `grants_count` field, which represents the number of grants linked to the funder. This integer value indicates the funder's involvement in providing research grants.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/funders/funder-object.md#_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\ngrants_count: 7109\n```\n\n----------------------------------------\n\nTITLE: Defining Associated Institutions Property - JSON\nDESCRIPTION: Shows the structure of the `associated_institutions` field, which is a list of related institutions each represented as a dehydrated Institution object including an extra `relationship` attribute describing the nature of the relationship (parent, child, or related). This field provides relational context between institutions based on ROR relationships. Each institution object contains properties like id, ror ID, display name, country, and type.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/institutions/institution-object.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nassociated_institutions: [\n    {\n        id: \"https://openalex.org/I2802101240\",\n        ror: \"https://ror.org/0483mr804\",\n        display_name: \"Carolinas Medical Center\",\n        country_code: \"US\",\n        type: \"healthcare\",\n        relationship: \"related\"\n    },\n    {\n        id: \"https://openalex.org/I69048370\",\n        ror: \"https://ror.org/01s91ey96\",\n        display_name: \"Renaissance Computing Institute\",\n        country_code: \"US\",\n        type: \"education\",\n        relationship: \"related\"\n    }\n    \n    // and so forth\n]\n```\n\n----------------------------------------\n\nTITLE: Example: `any_repository_has_fulltext` Field in OpenAccess Object (JSON)\nDESCRIPTION: Shows an example of the `any_repository_has_fulltext` boolean field within the `OpenAccess` object. It indicates if any repository location associated with the work provides full text access (`location.is_oa=true` and `location.source.type=repository`), useful for tracking 'shadowed Green' OA which might be obscured by publisher-hosted OA statuses.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/work-object/README.md#_snippet_45\n\nLANGUAGE: json\nCODE:\n```\nany_repository_has_fulltext: true\n```\n\n----------------------------------------\n\nTITLE: Showing OpenAlex Work Title JSON Example\nDESCRIPTION: Example JSON for the `title` attribute of an OpenAlex Work object. This string contains the main title of the scholarly work, which is identical to the `display_name` attribute for Work entities.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/work-object/README.md#_snippet_41\n\nLANGUAGE: JSON\nCODE:\n```\ntitle: \"The state of OA: a large-scale analysis of the prevalence and impact of Open Access articles\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single Keyword by ID (HTTP GET)\nDESCRIPTION: Example API request URL to fetch a specific OpenAlex Keyword object using its unique identifier (`cardiac-imaging`). This demonstrates the basic endpoint structure for retrieving a single entity by its OpenAlex ID.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/keywords/README.md#_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nhttps://api.openalex.org/keywords/cardiac-imaging\n```\n\n----------------------------------------\n\nTITLE: Homepage URL Example (JSON)\nDESCRIPTION: Shows the `homepage_url` field, which contains the URL for the funder's primary homepage. This provides a direct link to the funder's official website.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/funders/funder-object.md#_snippet_8\n\nLANGUAGE: JSON\nCODE:\n```\nhomepage_url: \"http://www.nih.gov/\"\n```\n\n----------------------------------------\n\nTITLE: Representing Super System Flag - JSON\nDESCRIPTION: Describes the `is_super_system` boolean flag indicating if an institution is considered a large 'super system' (e.g., university systems, governments, or multinational companies). This flag is used to exclude such entities from lineage data as they can distort aggregations in rankings or groupings.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/institutions/institution-object.md#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n// Example not explicitly provided for value true or false but described in text\n```\n\n----------------------------------------\n\nTITLE: Representing Institution OpenAlex ID - JSON\nDESCRIPTION: Illustrates the `id` field which holds the unique OpenAlex identifier URL for the institution. This serves as a canonical reference within the OpenAlex ecosystem.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/institutions/institution-object.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\nid: \"https://openalex.org/I114027177\"\n```\n\n----------------------------------------\n\nTITLE: Representing Creation Date Property - JSON\nDESCRIPTION: Shows the `created_date` field stored as a string formatted according to ISO 8601 date standard. It indicates when the institution object was first created in the OpenAlex dataset.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/institutions/institution-object.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\ncreated_date: \"2017-08-08\"\n```\n\n----------------------------------------\n\nTITLE: Finding Stanford University ID using OpenAlex Institutions API\nDESCRIPTION: This code snippet demonstrates how to query the OpenAlex Institutions API to find the ID of Stanford University. It uses the `search` parameter to search for \"stanford\". The API returns a JSON response containing information about the institution, including its ID, ROR ID, display name, country code, type, and homepage URL.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/quickstart-tutorial.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"https://openalex.org/I97018004\",\n  \"ror\": \"https://ror.org/00f54p054\",\n  \"display_name\": \"Stanford University\",\n  \"country_code\": \"US\",\n  \"type\": \"education\",\n  \"homepage_url\": \"http://www.stanford.edu/\"\n  // other fields removed\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping Keywords by `cited_by_count` (HTTP GET)\nDESCRIPTION: Shows how to use the `group_by` parameter in an API request to group Keywords based on their `cited_by_count`. The response will provide counts of keywords for each distinct citation count value.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/keywords/README.md#_snippet_14\n\nLANGUAGE: http\nCODE:\n```\nhttps://api.openalex.org/keywords?group_by=cited_by_count\n```\n\n----------------------------------------\n\nTITLE: Displaying Concept Summary Statistics - OpenAlex - JSON\nDESCRIPTION: Displays the 'summary_stats' object, holding various citation metrics such as 2-year mean citedness, h-index, and i10-index for the concept's associated works. Used in bibliometric analyses. Input: none; output: object with metrics as floats/integers.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/concepts/concept-object.md#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\nsummary_stats: {\n    2yr_mean_citedness: 1.5295340589458237,\n    h_index: 105,\n    i10_index: 5045\n}\n```\n\n----------------------------------------\n\nTITLE: Representing Institution Image Thumbnail URL - JSON\nDESCRIPTION: Details the `image_thumbnail_url` string containing a smaller sized image of the institution's logo or seal, typically derived from the full image URL for thumbnail use cases.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/institutions/institution-object.md#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\nimage_thumbnail_url: \"https://upload.wikimedia.org/wikipedia/en/thumb/5/5c/University_of_North_Carolina_at_Chapel_Hill_seal.svg/100px-University_of_North_Carolina_at_Chapel_Hill_seal.svg.png\"\n```\n\n----------------------------------------\n\nTITLE: Representing Repositories Hosted by Institution - JSON\nDESCRIPTION: Defines the `repositories` list where each entry is a `Source` object of type repository associated with this institution as the host_organization. Each object includes IDs, display name, and lineage information reflecting the hosting institution and its hierarchy.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/institutions/institution-object.md#_snippet_17\n\nLANGUAGE: json\nCODE:\n```\nrepositories: [\n    {\n        id: \"https://openalex.org/S4306402521\",\n        display_name: \"University of Minnesota Digital Conservancy (University of Minnesota)\",\n        host_organization: \"https://openalex.org/I130238516\",\n        host_organization_name: \"University of Minnesota\",\n        host_organization_lineage: [\"https://openalex.org/I130238516\"]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Illustrating `source` property (JSON)\nDESCRIPTION: Describes the `source` object property. This is a `DehydratedSource` object that provides information about the entity (journal, repository, etc.) hosting this specific location of the work, capturing the relationship between the host and the work's version.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/work-object/location-object.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\nsource {\n    id: \"https://openalex.org/S125754415\",\n    display_name: \"Proceedings of the National Academy of Sciences of the United States of America\",\n    issn_l: \"0027-8424\",\n    issn: [\"1091-6490\", \"0027-8424\"],\n    host_organization: \"https://openalex.org/P4310320052\",\n    type: \"journal\"\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Works by Creation Date (Premium OpenAlex API, HTTP)\nDESCRIPTION: Demonstrates filtering works based on their creation date, returning works created on or before the specified date. This filter requires an OpenAlex Premium subscription API key. The date is formatted as 'yyyy-mm-dd'.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/filter-works.md#_snippet_34\n\nLANGUAGE: HTTP\nCODE:\n```\nhttps://api.openalex.org/works?filter=to_created_date:2024-01-12&api_key=myapikey\n```\n\n----------------------------------------\n\nTITLE: Illustrating `version` property (JSON)\nDESCRIPTION: Describes the `version` string property. It indicates the version of the work available at this location, based on the DRIVER Guidelines versioning scheme. Possible values are `publishedVersion`, `acceptedVersion`, and `submittedVersion`.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/work-object/location-object.md#_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\nversion: \"publishedVersion\"\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Fields for a Keyword (HTTP GET)\nDESCRIPTION: Demonstrates using the `select` query parameter in an API request to retrieve only the specified fields (`id`, `display_name`) for a Keyword object. This technique is useful for reducing response size and fetching only necessary data.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/keywords/README.md#_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nhttps://api.openalex.org/keywords/cardiac-imaging?select=id,display_name\n```\n\n----------------------------------------\n\nTITLE: Displaying Wikidata ID - OpenAlex - JSON\nDESCRIPTION: Displays the 'wikidata' field as a string URL for the associated Wikidata entity. Used for linking OpenAlex concepts to Wikidata and external datasets. Outputs a string, and is guaranteed to be present.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/concepts/concept-object.md#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\nwikidata: \"https://www.wikidata.org/wiki/Q14565201\"\n```\n\n----------------------------------------\n\nTITLE: Listing Publishing Societies with 'societies' Array in OpenAlex Source Object - JSON\nDESCRIPTION: This JSON snippet shows the 'societies' field, an array listing societies responsible for the source. Each element contains 'url' (string) and 'organization' (string). The array may be empty or absent if no society applies.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/sources/source-object.md#_snippet_20\n\nLANGUAGE: json\nCODE:\n```\nsocieties: [\n    {\n        \"url\": \"http://www.counseling.org/\",\n        \"organization\": \"American Counseling Association on behalf of the American College Counseling Association\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Representing 'apc_usd' as Integer Field in OpenAlex Source Object - JSON\nDESCRIPTION: This snippet shows 'apc_usd', an integer field that records the article processing charge in US Dollars. Derived from DOAJ data, it is calculated based on 'apc_prices'. The field expects a numeric value, either directly from USD or converted from another currency. No dependencies other than 'apc_prices'.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/sources/source-object.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\napc_usd: 5200\n```\n\n----------------------------------------\n\nTITLE: Listing Roles and Counts (JSON)\nDESCRIPTION: This JSON snippet demonstrates the structure of the `roles` property within an OpenAlex Institution object. It lists the different roles an institution can have, such as funder, publisher, and institution, along with their respective IDs and the number of associated works.  It highlights the relationships between different OpenAlex entities.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/institutions/institution-object.md#_snippet_18\n\nLANGUAGE: json\nCODE:\n```\nroles: [\n    {\n        role: \"funder\",\n        id: \"https://openalex.org/F4320308380\",\n        works_count: 1004,\n    },\n    {\n        role: \"publisher\",\n        id: \"https://openalex.org/P4310315589\",\n        works_count: 13986,\n    },\n    {\n        role: \"institution\",\n        id: \"https://openalex.org/I32971472\",\n        works_count: 250031,\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Storing Author Affiliations in OpenAlex API Response (JSON)\nDESCRIPTION: This JSON snippet provides an example of the 'affiliations' property returned in an Author object via the OpenAlex API. Dependencies include referencing valid Institution objects and years of affiliation as integer lists. Each list entry connects an author to an institution using IDs and RORs, and specifies the years of claimed affiliation as an integer array. All properties must exist if the author has relevant affiliations, and institutions follow the 'dehydrated' minimized format. Incomplete institutions use ellipsis to indicate omitted properties.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/authors/author-object.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\naffiliations: [\n    {\n        institution: {\n            id: \"https://openalex.org/I201448701\",\n            ror: \"https://ror.org/00cvxb145\",\n            ...\n        },\n        years: [2018, 2019, 2020]\n    },\n    {\n        institution: {\n            id: \"https://openalex.org/I74973139\",\n            ror: \"https://ror.org/05x2bcf33\",\n            ...\n        },\n        years: [2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Showing OpenAlex Work Crossref Type JSON Example\nDESCRIPTION: Example JSON for the `type_crossref` attribute of an OpenAlex Work object. This string provides legacy type information using the Crossref \"type\" controlled vocabulary, retained for backward compatibility and mapping to original metadata sources when available.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/work-object/README.md#_snippet_43\n\nLANGUAGE: JSON\nCODE:\n```\ntype_crossref: \"journal-article\"\n```\n\n----------------------------------------\n\nTITLE: Sample Publisher Autocomplete JSON Response\nDESCRIPTION: This snippet shows the JSON response format when using the publishers autocomplete endpoint. The response includes publisher details such as ID, display name, citation count, works count, and external ID.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/publishers/search-publishers.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{ \n  \"results\": [\n    {\n        \"id\": \"https://openalex.org/P4310320990\",\n        \"display_name\": \"Elsevier BV\",\n        \"hint\": null,\n        \"cited_by_count\": 407508754,\n        \"works_count\": 20311868,\n        \"entity_type\": \"publisher\",\n        \"external_id\": \"https://www.wikidata.org/entity/Q746413\"\n    },\n    ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Flagging Type with 'type' Field in OpenAlex Source Object - JSON\nDESCRIPTION: Displays the 'type' string, which categorizes the source as one of several allowed types ('journal', 'repository', etc.). Field is required and constrains allowed values. No dependencies.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/sources/source-object.md#_snippet_22\n\nLANGUAGE: json\nCODE:\n```\ntype: \"journal\" \n```\n\n----------------------------------------\n\nTITLE: Publisher Object: works_count Field (JSON)\nDESCRIPTION: Example of the 'works_count' field within an OpenAlex Publisher object. This integer represents the total number of works directly associated with or published by this publisher.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/publishers/publisher-object.md#_snippet_17\n\nLANGUAGE: json\nCODE:\n```\nworks_count: 13789818\n```\n\n----------------------------------------\n\nTITLE: Displaying Image Thumbnail URL - OpenAlex - JSON\nDESCRIPTION: Displays the 'image_thumbnail_url' property—an optional string containing a thumbnail image URL for the concept. Pulled from Wikipedia or related sources, this is used for compact display. Input: none; output: string URL.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/concepts/concept-object.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\nimage_thumbnail_url: \"https://upload.wikimedia.org/wikipedia/commons/thumb/f/f1/Altmetrics.svg/100px-Altmetrics.svg.png\"\n```\n\n----------------------------------------\n\nTITLE: Filtering by Updated Date\nDESCRIPTION: This example demonstrates filtering works by their `updated_date`. It fetches works updated on or after a specified date. It uses an ISO 8601 formatted date or date-time string as input. This functionality requires an OpenAlex Premium subscription. The output returns works that have been updated since or on the specified date. An API key (`api_key`) is included in the request.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/filter-works.md#_snippet_12\n\nLANGUAGE: API\nCODE:\n```\nhttps://api.openalex.org/works?filter=from_updated_date:2023-01-12&api_key=myapikey\n```\n\n----------------------------------------\n\nTITLE: Structuring Annual Statistics with 'counts_by_year' Array in OpenAlex Source Object - JSON\nDESCRIPTION: This code shows the 'counts_by_year' field, an array of objects, each with statistics for a given year—'year', 'works_count', and 'cited_by_count'. Used to monitor trends over the last decade, it expects an array of year-specific metric objects. Gaps for years with zeroes are omitted; adding missing entries is up to consumers.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/sources/source-object.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\ncounts_by_year: [\n    {\n        year: 2021,\n        works_count: 4338,\n        cited_by_count: 127268\n    },\n    {\n        year: 2020,\n        works_count: 4363,\n        cited_by_count: 119531\n    }\n    \n    // and so forth\n]\n```\n\n----------------------------------------\n\nTITLE: Publisher Object: parent_publisher Field (JSON)\nDESCRIPTION: Example of the 'parent_publisher' field within an OpenAlex Publisher object. This string contains the OpenAlex ID of the direct parent publisher in the hierarchy. It will be null if the publisher is at the top level (hierarchy_level 0).\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/publishers/publisher-object.md#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\nparent_publisher: \"https://openalex.org/P4310311775\"\n```\n\n----------------------------------------\n\nTITLE: API URL for Fetching List of Works in OpenAlex (JSON format)\nDESCRIPTION: This code snippet defines a JSON key-value pair representing the API URL used to retrieve a list of works associated with a specific source. The URL includes a filter parameter for the source ID, enabling targeted queries of publication data in JSON format.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/sources/source-object.md#_snippet_24\n\nLANGUAGE: json\nCODE:\n```\nworks_api_url: \"https://api.openalex.org/works?filter=primary_location.source.id:S1983995261\"\n```\n\n----------------------------------------\n\nTITLE: Updated Date Example (JSON)\nDESCRIPTION: Demonstrates the `updated_date` field, which indicates the last time the funder object was updated. The date is expressed as an ISO 8601 date string, reflecting any changes, including count increases.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/funders/funder-object.md#_snippet_15\n\nLANGUAGE: JSON\nCODE:\n```\nupdated_date: \"2023-04-21T16:54:19.012138\"\n```\n\n----------------------------------------\n\nTITLE: Publisher Object: lineage Field (JSON)\nDESCRIPTION: Example of the 'lineage' field within an OpenAlex Publisher object, shown with related 'id' and 'hierarchy_level' fields for context. This field is a list of OpenAlex IDs representing the publisher's hierarchical lineage, including its own ID and the IDs of all its parent publishers up to the root.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/publishers/publisher-object.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\nid: \"https://openalex.org/P4310321285\",\n...\nhierarchy_level: 2,\nlineage: [\n    \"https://openalex.org/P4310321285\",\n    \"https://openalex.org/P4310319900\",\n    \"https://openalex.org/P4310319965\"\n]\n```\n\n----------------------------------------\n\nTITLE: Displaying Full Image URL - OpenAlex - JSON\nDESCRIPTION: Shows the 'image_url' field, containing a string URL linking to an illustrative image for the concept, typically hosted on Wikipedia. This field is optional and may be null; used for UI enrichment.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/concepts/concept-object.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\nimage_url: \"https://upload.wikimedia.org/wikipedia/commons/f/f1/Altmetrics.svg\"\n```\n\n----------------------------------------\n\nTITLE: Indicating Current Open Access Status with 'is_oa' Boolean in OpenAlex Source Object - JSON\nDESCRIPTION: Demonstrates 'is_oa', which is true if the source is fully open access at present. Boolean value, no dependencies. Reflects access status at the record’s last update.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/sources/source-object.md#_snippet_17\n\nLANGUAGE: json\nCODE:\n```\nis_oa: true \n```\n\n----------------------------------------\n\nTITLE: Flagging Core Sources with 'is_core' Boolean in OpenAlex Source Object - JSON\nDESCRIPTION: This example sets 'is_core', a boolean marker for whether the source is on the CWTS core source list. Output is true or false. No dependencies. Used for filtering or ranking by importance.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/sources/source-object.md#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\nis_core: true \n```\n\n----------------------------------------\n\nTITLE: Publisher Object: hierarchy_level Field (JSON)\nDESCRIPTION: Example of the 'hierarchy_level' field within an OpenAlex Publisher object. This integer indicates the publisher's position in a hierarchy, where 0 represents a top-level publisher with no parent.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/publishers/publisher-object.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\nhierarchy_level: 1\n```\n\n----------------------------------------\n\nTITLE: Filtering Sources by Asian Continent in OpenAlex API\nDESCRIPTION: Example of using the continent convenience filter to return sources associated with Asia. This filter allows geographical filtering of sources by continental region.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/sources/filter-sources.md#_snippet_1\n\nLANGUAGE: url\nCODE:\n```\nhttps://api.openalex.org/sources?filter=continent:asia\n```\n\n----------------------------------------\n\nTITLE: Grouping Works by Author Institution ID (URL)\nDESCRIPTION: This API call groups Works based on the OpenAlex ID of their authors' institutions. When grouping by an entity ID, the `key` property in the response will be the entity ID.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/how-to-use-the-api/get-groups-of-entities.md#_snippet_4\n\nLANGUAGE: URL\nCODE:\n```\nhttps://api.openalex.org/works?group_by=authorships.institutions.id\n```\n\n----------------------------------------\n\nTITLE: Example OpenAlex Author Object Structure JSON\nDESCRIPTION: Provides an example structure of the JSON object returned by the OpenAlex API when fetching a single author, showing key fields like ID, ORCID, display name, and works count.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/authors/get-a-single-author.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"https://openalex.org/A5023888391\",\n    \"orcid\": \"https://orcid.org/0000-0001-6187-6610\",\n    \"display_name\": \"Jason Priem\",\n    \"display_name_alternatives\": [],\n    \"works_count\": 53,\n    // other fields removed for brevity\n}\n```\n\n----------------------------------------\n\nTITLE: Publisher Object: created_date Field (JSON)\nDESCRIPTION: Example of the 'created_date' field within an OpenAlex Publisher object. This string represents the date the Publisher object was initially created in the OpenAlex dataset, formatted as an ISO 8601 date.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/publishers/publisher-object.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\ncreated_date: \"2017-08-08\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Retrieved API Fields in Python\nDESCRIPTION: Implicitly outputs the contents of the `api_valid_fields` list. This list contains dictionaries, each representing a valid field retrieved from the OpenAlex API, including the 'key' (field name) and its associated 'entityType'.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/scripts/notebooks/filters_align.ipynb#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\napi_valid_fields\n```\n\n----------------------------------------\n\nTITLE: Publisher Object: image_thumbnail_url Field (JSON)\nDESCRIPTION: Example of the 'image_thumbnail_url' field within an OpenAlex Publisher object. This string provides a URL to a smaller thumbnail image representing the publisher, often linking to Wikimedia Commons with adjustable width.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/publishers/publisher-object.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\nimage_thumbnail_url: \"https://commons.wikimedia.org/w/index.php?title=Special:Redirect/file/MIT%20Press%20logo.svg&width=300\"\n```\n\n----------------------------------------\n\nTITLE: Publisher Object: updated_date Field (JSON)\nDESCRIPTION: Example of the 'updated_date' field within an OpenAlex Publisher object. This string represents the timestamp of the last update to the publisher object in the OpenAlex dataset, formatted as an ISO 8601 datetime string. Any change, including count increments, updates this field.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/publishers/publisher-object.md#_snippet_16\n\nLANGUAGE: json\nCODE:\n```\nupdated_date: \"2021-12-25T14:04:30.578837\"\n```\n\n----------------------------------------\n\nTITLE: Updated Date Example (JSON)\nDESCRIPTION: This JSON snippet illustrates the `updated_date` property. It indicates the last time any information related to the institution changed. The date is formatted as an ISO 8601 date string, and reflects any change, including updates to counts and other properties.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/institutions/institution-object.md#_snippet_22\n\nLANGUAGE: json\nCODE:\n```\nupdated_date: \"2022-01-02T00:27:23.088909\"\n```\n\n----------------------------------------\n\nTITLE: Capturing Creation Date with 'created_date' in OpenAlex Source Object - JSON\nDESCRIPTION: Shows the 'created_date' field, which is a string in ISO 8601 format indicating when the Source was first added to OpenAlex. No extra dependencies. The input/output should be a valid date string. Can be used for auditing or sorting records.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/sources/source-object.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\ncreated_date: \"2017-08-08\"\n```\n\n----------------------------------------\n\nTITLE: Example Response for a List of Keywords (JSON)\nDESCRIPTION: Illustrates the structure of a JSON response when requesting a list of Keywords. It includes a `meta` object with pagination and count information, and a `results` array containing the individual keyword objects.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/keywords/README.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"meta\": {\n        \"count\": 4516,\n        \"db_response_time_ms\": 10,\n        \"page\": 1,\n        \"per_page\": 25,\n        \"groups_count\": null\n    },\n    \"results\": [\n        {\n            \"id\": \"https://openalex.org/T11475\",\n            \"display_name\": \"Territorial Governance and Environmental Participation\",\n            // more fields (removed to save space)\n        },\n        {\n            \"id\": \"https://openalex.org/T13445\",\n            \"display_name\": \"American Political Thought and History\",\n            // more fields (removed to save space)\n        },\n        // more results (removed to save space)\n    ],\n    \"group_by\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Publisher Object: alternate_titles Field (JSON)\nDESCRIPTION: Example of the 'alternate_titles' field within an OpenAlex Publisher object. This field is a list of strings representing alternative names or titles for the publisher, potentially including names in different languages or common abbreviations.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/publishers/publisher-object.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nalternate_titles: [\n  \"Elsevier\",\n  \"elsevier.com\",\n  \"Elsevier Science\",\n  \"Uitg. Elsevier\",\n\"السفیر\",  \n\"السویر\",  \n\"انتشارات الزویر\",  \n\"لودویک السفیر\",  \n  \"爱思唯尔\"\n]\n```\n\n----------------------------------------\n\nTITLE: Sampling Authors Results from OpenAlex API\nDESCRIPTION: This snippet retrieves a random batch of authors using the `sample` parameter from the OpenAlex API. It requests a sample of 25 random authors. The `sample` parameter takes an integer value representing the desired number of random entries.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/authors/get-lists-of-authors.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\nhttps://api.openalex.org/authors?sample=25\n```\n\n----------------------------------------\n\nTITLE: Sorting Works List OpenAlex API HTTP\nDESCRIPTION: Demonstrates how to sort the list of works using the 'sort' query parameter. This example sorts the results by the publication year ('sort=publication_year') in ascending order by default. The parameter value specifies the field by which to sort the results.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/get-lists-of-works.md#_snippet_3\n\nLANGUAGE: HTTP\nCODE:\n```\nhttps://api.openalex.org/works?sort=publication_year\n```\n\n----------------------------------------\n\nTITLE: Representing Alternative Display Names - JSON\nDESCRIPTION: Details `display_name_alternatives` as a list of strings representing alternative institution names used informally or regionally. This supports resolution for name variations in data uses.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/institutions/institution-object.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\ndisplay_name_alternatives: [\n    \"UNC-Chapel Hill\"\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Homepage URL with 'homepage_url' Field in OpenAlex Source Object - JSON\nDESCRIPTION: Illustrates 'homepage_url', a string representing the main webpage for the source. Field expects a valid URL. Outputs a string, commonly used for direct navigation or display.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/sources/source-object.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\nhomepage_url: \"http://www.peerj.com/\" \n```\n\n----------------------------------------\n\nTITLE: Initial OpenAlex Author Data Directory Structure\nDESCRIPTION: This snippet illustrates the directory structure for OpenAlex Author data immediately after the dataset is initialized. It shows the presence of the manifest file and a single date partition containing all records created on that initial date.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/download-all-data/snapshot-data-format.md#_snippet_0\n\nLANGUAGE: Directory Structure\nCODE:\n```\n/data/authors/\n├── manifest\n└── updated_date=2021-12-30 [1000 Authors]\n    ├── 0000_part_00.gz\n    ...\n    └── 0031_part_00.gz\n```\n\n----------------------------------------\n\nTITLE: Fetching Entity Field Names and Schemas from OpenAlex API in Python\nDESCRIPTION: Iterates through entity_names and fetches valid field names and flattened schema definitions for each entity from the OpenAlex API. Results are stored in fields_from_api, a dictionary mapping entity names to their corresponding filter and schema data. Requires network access and the requests module.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/scripts/notebooks/scrape_docs.ipynb#_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nfields_from_api = {}\nfor entity_name in entity_names:\n    filter_names = requests.get(f\"https://api.openalex.org/{entity_name}/valid_fields\").json()\n    schema_names = requests.get(f\"https://api.openalex.org/{entity_name}/flattened_schema\").json()\n    fields_from_api[entity_name] = {\n        'filter_names': filter_names,\n        'schema_names': schema_names,\n    }\n```\n\n----------------------------------------\n\nTITLE: Showing OpenAlex Work MeSH Tags List JSON Example\nDESCRIPTION: Example JSON structure for the `mesh` attribute of an OpenAlex Work object. This list contains objects representing MeSH (Medical Subject Headings) tags associated with the work, including descriptor and qualifier information. This field is populated only for works found in PubMed.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/work-object/README.md#_snippet_31\n\nLANGUAGE: JSON\nCODE:\n```\nmesh: [\n    {\n        descriptor_ui: \"D017712\",\n        descriptor_name: \"Peer Review, Research\",\n        qualifier_ui: \"Q000379\",\n        qualifier_name: \"methods\",\n        is_major_topic: false\n    },\n    {\n        descriptor_ui: \"D017712\",\n        descriptor_name: \"Peer Review, Research\",\n        qualifier_ui: \"Q000592\",\n        qualifier_name: \"standards\",\n        is_major_topic: true\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Filtering Keywords by Subfield ID (HTTP GET)\nDESCRIPTION: Example API request using the `filter` parameter to retrieve only Keywords associated with a specific subfield ID. In this case, it filters for keywords belonging to the subfield with ID `2713` (\"Epidemiology\").\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/keywords/README.md#_snippet_11\n\nLANGUAGE: http\nCODE:\n```\nhttps://api.openalex.org/keywords?filter=subfield.id:2713\n```\n\n----------------------------------------\n\nTITLE: Presenting Citation Metrics in 'summary_stats' Object in OpenAlex Source Object - JSON\nDESCRIPTION: Demonstrates the structure of 'summary_stats', which is an object containing citation metrics: '2yr_mean_citedness' (float), 'h_index' (integer), and 'i10_index' (integer). Used for performance analysis, this field expects well-formed numbers and may be omitted if metrics unavailable.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/sources/source-object.md#_snippet_21\n\nLANGUAGE: json\nCODE:\n```\nsummary_stats: {\n    2yr_mean_citedness: 1.5295340589458237,\n    h_index: 105,\n    i10_index: 5045\n}\n```\n\n----------------------------------------\n\nTITLE: Load Multiple JSON Line Files to BigQuery Table using bq CLI Loop (Bash)\nDESCRIPTION: Provides a practical bash loop to iterate through multiple gzipped JSON Lines files in a directory structure and load each one into the specified BigQuery table using the `bq load` command. It reuses the same loading options to treat each file line as a single string column entry.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/download-all-data/upload-to-your-database/load-to-a-data-warehouse.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nfor data_file in openalex-snapshot/data/works/*/*.gz;\ndo\n    bq load --source_format=CSV -F '\\t' \\\n        --schema 'work:string' \\\n        --project_id openalex-demo \\\n        openalex.works $data_file;\ndone\n```\n\n----------------------------------------\n\nTITLE: Displaying Concept Display Name - OpenAlex - JSON\nDESCRIPTION: Presents the 'display_name' attribute, providing the English display label of the concept as a simple string. This field is included in API results to support UI rendering and identification. Expects string output, no dependencies.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/concepts/concept-object.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\ndisplay_name: \"Altmetrics\"\n```\n\n----------------------------------------\n\nTITLE: JSON Example Illustrating Field Selection Limitation\nDESCRIPTION: Provides a sample JSON structure for a single OpenAlex entity to illustrate the limitation of the 'select' parameter. It shows that root-level fields like 'id' and 'open_access' can be selected, but nested fields within objects (e.g., 'open_access.is_oa') cannot be directly selected using this parameter.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/how-to-use-the-api/get-lists-of-entities/select-fields.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n\"id\": \"https://openalex.org/W2138270253\",\n\"open_access\": {\n  \"is_oa\": true,\n  \"oa_status\": \"bronze\",\n  \"oa_url\": \"http://www.pnas.org/content/74/12/5463.full.pdf\"\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Works by Source Publisher Lineage (OpenAlex API, HTTP)\nDESCRIPTION: Demonstrates filtering works where the source's host organization lineage includes a specific publisher ID. The filter requires an OpenAlex Publisher ID as its value.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/filter-works.md#_snippet_24\n\nLANGUAGE: HTTP\nCODE:\n```\nhttps://api.openalex.org/works?filter=locations.source.publisher_lineage:https://openalex.org/P4310320547\n```\n\n----------------------------------------\n\nTITLE: Filtering Keywords by Display Name Search (HTTP GET)\nDESCRIPTION: Demonstrates using the `display_name.search` convenience filter within the `filter` parameter to find Keywords whose display names contain specific terms. This example searches for keywords containing both \"artificial\" and \"intelligence\".\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/keywords/README.md#_snippet_12\n\nLANGUAGE: http\nCODE:\n```\nhttps://api.openalex.org/keywords?filter=display_name.search:artificial+intelligence\n```\n\n----------------------------------------\n\nTITLE: Displaying Related Concepts - OpenAlex - JSON\nDESCRIPTION: Shows the 'related_concepts' array, consisting of dehydrated concepts similar to the current one, each with a calculated score (float) indicating association strength. Used for recommendation and semantic search features. Output: list of objects with id, display_name, level, optional wikidata, score.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/concepts/concept-object.md#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\nrelated_concepts: [\n    {\n        id: \"https://openalex.org/C2778793908\",\n        wikidata: null,\n        display_name: \"Citation impact\",\n        level: 3,\n        score: 4.56749\n    },\n    {\n        id: \"https://openalex.org/C2779455604\",\n        wikidata: null,\n        display_name: \"Impact factor\",\n        level: 2,\n        score: 4.46396\n    }\n    \n    // and so forth\n]\n```\n\n----------------------------------------\n\nTITLE: Building Glossary Markdown Sections from DataFrame in Python\nDESCRIPTION: Groups the DataFrame by entity name and constructs markdown-format glossary sections for each entity, including field-level subsections and descriptions. Drops duplicate and missing entries, sorts by key, and assembles formatted markdown strings into a list for output.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/scripts/notebooks/scrape_docs.ipynb#_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\nglossary_sections = []\nfor entity_name, gdf in df.sort_values(\"entity_name\").groupby(\"entity_name\"):\n    subset = gdf[['docs_desc_key', 'docs_description']].dropna().drop_duplicates().sort_values('docs_desc_key')\n    this_section = f'## {entity_name.title()}\\n\\n'\n    for _, row in subset.iterrows():\n        subsection = f'### {row[\"docs_desc_key\"].replace(f\"{entity_name}.\", \"\")}\\n\\n{row[\"docs_description\"]}\\n\\n'\n        this_section += subsection\n    glossary_sections.append(this_section)\n```\n\n----------------------------------------\n\nTITLE: Extracting Potential Filters from Documentation using Regex in Python\nDESCRIPTION: Extracts potential filter names or related terms from the text content of the documentation files stored in `docs_txt`. It compiles a regular expression `p` to find all substrings enclosed in backticks (`)`). It then iterates through the `docs_txt` dictionary, applies the `p.findall()` method to each file's text content, and stores the resulting list of matches in the `docs_filters_candidates` dictionary, keyed by the original filename. Requires the `re` library and the `docs_txt` dictionary.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/scripts/notebooks/filters_align.ipynb#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\np = re.compile(r'`(.+?)`')\ndocs_filters_candidates = {}\nfor filename, txt in docs_txt.items():\n    docs_filters_candidates[filename] = p.findall(txt)\n```\n\n----------------------------------------\n\nTITLE: Listing Author-Associated Concepts in OpenAlex API (JSON)\nDESCRIPTION: This snippet demonstrates the 'x_concepts' array, listing concepts most strongly associated with the author's works. Each object includes concept id, wikidata, display_name, level, and an association score between 0 and 100. Will be deprecated in favor of Topics. Output is an array of concept objects; inputs not needed.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/authors/author-object.md#_snippet_14\n\nLANGUAGE: json\nCODE:\n```\nx_concepts: [\n    {\n        id: \"https://openalex.org/C41008148\",\n        wikidata: null,\n        display_name: \"Computer science\",\n        level: 0,\n        score: 97.4\n    },\n    {\n        id: \"https://openalex.org/C17744445\",\n        wikidata: null,\n        display_name: \"Political science\",\n        level: 0,\n        score: 78.9\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Paging Concepts Results in OpenAlex API\nDESCRIPTION: This example demonstrates how to use the `per-page` and `page` parameters to navigate through the list of concepts. The `per-page` parameter sets the number of results returned per page, and the `page` parameter specifies the page number to retrieve.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/concepts/get-lists-of-concepts.md#_snippet_1\n\nLANGUAGE: HTTP\nCODE:\n```\nhttps://api.openalex.org/concepts?per-page=50&page=2\n```\n\n----------------------------------------\n\nTITLE: Declaring OpenAlex Entity Names as a List in Python\nDESCRIPTION: Initializes a list named entity_names containing string identifiers for various OpenAlex entities (e.g., works, authors, institutions). This list is used to iterate over and fetch relevant metadata for each entity type.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/scripts/notebooks/scrape_docs.ipynb#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nentity_names = [\n    \"works\",\n    \"authors\",\n    \"sources\",\n    \"institutions\",\n    \"publishers\",\n    \"funders\",\n    \"concepts\",\n]\n```\n\n----------------------------------------\n\nTITLE: Counting Retrieved API Fields in Python\nDESCRIPTION: Calculates and implicitly displays the total number of valid field entries collected from the OpenAlex API across all entity types. It uses the built-in `len()` function on the `api_valid_fields` list, which was populated in the previous step.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/scripts/notebooks/filters_align.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nlen(api_valid_fields)\n```\n\n----------------------------------------\n\nTITLE: Example OpenAlex Autocomplete API Response JSON\nDESCRIPTION: This JSON snippet shows the structure of a typical successful response from the OpenAlex Autocomplete endpoint. It contains metadata about the request and a list of result objects representing matching entities, sorted by citation count.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/how-to-use-the-api/get-lists-of-entities/autocomplete-entities.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    meta: {\n        count: 183,\n        db_response_time_ms: 5,\n        page: 1,\n        per_page: 10\n    },\n    results: [\n        {\n            id: \"https://openalex.org/I33213144\",\n            display_name: \"University of Florida\",\n            hint: \"Gainesville, USA\",\n            cited_by_count: 17190001,\n            entity_type: \"institution\",\n            external_id: \"https://ror.org/02y3ad647\"\n        },\n        // more results...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering by PMC ID\nDESCRIPTION: This filter retrieves works based on the presence or absence of a PubMed Central identifier (PMCID). It utilizes the `has_pmcid` filter. The input is a boolean (`true` or `false`). The output returns a list of works having or lacking a PMCID.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/filter-works.md#_snippet_19\n\nLANGUAGE: API\nCODE:\n```\nhttps://api.openalex.org/works?filter=has_pmcid:true\n```\n\n----------------------------------------\n\nTITLE: Counts By Year Example (JSON)\nDESCRIPTION: Displays the `counts_by_year` structure, which is a list of objects containing `works_count` and `cited_by_count` for each of the last ten years. This provides a time-series view of the funder's research output and impact.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/funders/funder-object.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\ncounts_by_year: [\n    {\n        year: 2021,\n        works_count: 4211,\n        cited_by_count: 120939\n    },\n    {\n        year: 2020,\n        works_count: 4363,\n        cited_by_count: 119531\n    },\n    \n    // and so forth\n]\n```\n\n----------------------------------------\n\nTITLE: Exporting GUI Filters to CSV using Pandas in Python\nDESCRIPTION: Saves the extracted GUI filter data to a Comma Separated Values (CSV) file. It first converts the `gui_filters` list (containing dictionaries) into a pandas DataFrame. Then, it uses the DataFrame's `.to_csv()` method to write the data to 'gui_filters.csv'. The `index=False` argument ensures that the DataFrame's index is not included as a separate column in the output file. Requires `pandas` and the `gui_filters` list.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/scripts/notebooks/filters_align.ipynb#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\npd.DataFrame(gui_filters).to_csv('gui_filters.csv', index=False)\n```\n\n----------------------------------------\n\nTITLE: Text Search Across Titles\nDESCRIPTION: This snippet demonstrates how to perform a text search across titles for works. It uses the `display_name.search` filter, which is an alias for `title.search`.  The input is a search string (e.g., \"wombat\").  The output is a list of works whose titles match the search string.  It is recommended to use the `search` parameter for better search results.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/filter-works.md#_snippet_9\n\nLANGUAGE: API\nCODE:\n```\nhttps://api.openalex.org/works?filter=title.search:wombat\n```\n\n----------------------------------------\n\nTITLE: Creating the concepts table in PostgreSQL schema\nDESCRIPTION: Defines the 'concepts' table with an 'id' column to store concept identifiers as text strings; part of setting up the relational schema for concepts data.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/download-all-data/upload-to-your-database/load-to-a-relational-database/README.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE openalex.concepts (\n    id text NOT NULL,\n    -- plus some other columns ...\n);\n```\n\n----------------------------------------\n\nTITLE: Example 'field' Field in OpenAlex Topic Object (JSON)\nDESCRIPTION: Illustrates the 'field' field within an OpenAlex Topic object. This object contains the 'id' and 'display_name' for the topic's field, the second level in the topic hierarchy.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/topics/topic-object.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\nfield: {\n    id: 27,\n    display_name: \"Medicine\"\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching GUI Source Code from GitHub in Python\nDESCRIPTION: Specifies the URL for a JavaScript configuration file (`facetConfigs.js`) located in the `openalex-gui` repository on GitHub. It then uses the `requests` library to perform an HTTP GET request to this URL and retrieves the raw text content of the file, storing the response object in the variable `r`.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/scripts/notebooks/filters_align.ipynb#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nurl = \"https://raw.githubusercontent.com/ourresearch/openalex-gui/search/src/facetConfigs.js\"\nr = requests.get(url)\n```\n\n----------------------------------------\n\nTITLE: Example SQL query: Fetching work ID and OA status\nDESCRIPTION: Retrieves each work's OpenAlex ID along with its open access status by joining the 'works' and 'works_open_access' tables, demonstrating a basic data retrieval query.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/download-all-data/upload-to-your-database/load-to-a-relational-database/README.md#_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nselect w.id, oa.oa_status\nfrom openalex.works w \njoin openalex.works_open_access oa \non w.id = oa.work_id;\n```\n\n----------------------------------------\n\nTITLE: License Declaration for OpenAlex Works with Open Access in JSON\nDESCRIPTION: A JSON string indicating the license applied to the work on its host platform. Typically present when the work is open access (is_oa true), such as Creative Commons licenses (e.g., cc-by). Toll-access works often lack explicit licenses, producing an empty or missing field.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/work-object/README.md#_snippet_28\n\nLANGUAGE: JSON\nCODE:\n```\nlicense: \"cc-by\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single Institution by OpenAlex ID Using JSON\nDESCRIPTION: This code snippet demonstrates the structure of the JSON response returned when fetching a single institution from the OpenAlex API using its ID. The object contains fields such as 'id', 'ror', 'display_name', and 'country_code', describing detailed information about the institution.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/institutions/get-a-single-institution.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"id\": \"https://openalex.org/I27837315\",\n    \"ror\": \"https://ror.org/00jmfr291\",\n    \"display_name\": \"University of Michigan–Ann Arbor\",\n    \"country_code\": \"US\",\n    \"type\": \"education\",\n    // other fields removed for brevity\n}\n```\n\n----------------------------------------\n\nTITLE: Funder ID Example (JSON)\nDESCRIPTION: Demonstrates the `id` field, representing the OpenAlex ID for the funder.  This is a unique identifier within the OpenAlex system for the funder.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/funders/funder-object.md#_snippet_9\n\nLANGUAGE: JSON\nCODE:\n```\nid: \"https://openalex.org/F4320332161\"\n```\n\n----------------------------------------\n\nTITLE: Getting API Section\nDESCRIPTION: This snippet creates an instance of the `MarkdownDoc` class by reading the content of the `SUMMARY.md` file. It then retrieves a specific section titled \"The Api\" from the document using the `get_section_by_title` method.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/scripts/notebooks/moving_files.ipynb#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nmd = MarkdownDoc(basedir.joinpath(\"SUMMARY.md\").read_text())\napi_section = md.get_section_by_title(\"The Api\")\n```\n\n----------------------------------------\n\nTITLE: Filtering by Abstract Availability\nDESCRIPTION: This snippet filters works based on the availability of an abstract. It uses the `has_abstract` filter to retrieve works that either have or lack an abstract.  The input is a boolean value (`true` or `false`).  The output is a list of works that match the specified abstract availability.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/filter-works.md#_snippet_14\n\nLANGUAGE: API\nCODE:\n```\nhttps://api.openalex.org/works?filter=has_abstract:true\n```\n\n----------------------------------------\n\nTITLE: Reading and Parsing Markdown Files with MarkdownDoc in Python\nDESCRIPTION: Reads the content of each markdown file in markdown_files and creates a corresponding MarkdownDoc object for further parsing. Assumes MarkdownDoc's constructor takes the entire text of a markdown file as input.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/scripts/notebooks/scrape_docs.ipynb#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nmarkdown_docs = [MarkdownDoc(fp.read_text()) for fp in markdown_files]\n```\n\n----------------------------------------\n\nTITLE: Grouping Concepts by Level (URL)\nDESCRIPTION: This API call groups Concepts by their numerical 'level' property. When grouping by a raw value (not an entity), both `key` and `key_display_name` in the response will be that raw value.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/how-to-use-the-api/get-groups-of-entities.md#_snippet_5\n\nLANGUAGE: URL\nCODE:\n```\nhttps://api.openalex.org/concepts?group_by=level\n```\n\n----------------------------------------\n\nTITLE: Image Thumbnail URL Example (JSON)\nDESCRIPTION: Illustrates the `image_thumbnail_url` field, containing a URL for a smaller image representing the funder. This is usually a hotlink to a Wikimedia image and can be used as a thumbnail.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/funders/funder-object.md#_snippet_11\n\nLANGUAGE: JSON\nCODE:\n```\nimage_thumbnail_url: \"https://commons.wikimedia.org/w/index.php?title=Special:Redirect/file/NIH 2013 logo vertical.svg&width=300\"\n```\n\n----------------------------------------\n\nTITLE: Defining Entity Names\nDESCRIPTION: This snippet defines a list of entity names as strings, which are likely used throughout the project to refer to different data entities within the OpenAlex system. These names are used for creating paths and processing data related to these entities.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/scripts/notebooks/moving_files.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nentity_names = [\n    \"works\",\n    \"authors\",\n    \"sources\",\n    \"institutions\",\n    \"publishers\",\n    \"funders\",\n    \"concepts\",\n]\n```\n\n----------------------------------------\n\nTITLE: Showing OpenAlex Work Publication Year JSON Example\nDESCRIPTION: Example JSON for the `publication_year` attribute of an OpenAlex Work object. This integer value indicates the publication year of the work, corresponding to the year extracted from the `publication_date`.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/work-object/README.md#_snippet_36\n\nLANGUAGE: JSON\nCODE:\n```\npublication_year: 2018\n```\n\n----------------------------------------\n\nTITLE: Filtering Institutions by Continent\nDESCRIPTION: This endpoint filters institutions based on their continent. Replace `<continent>` with a valid continent value like `africa`, `europe`, etc. Refer to the table for available values.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/geo/continents.md#_snippet_1\n\nLANGUAGE: HTTP\nCODE:\n```\n/institutions?filter=continent:<continent>\n```\n\n----------------------------------------\n\nTITLE: Showing OpenAlex Work Related Works JSON Example\nDESCRIPTION: Example JSON structure for the `related_works` attribute of an OpenAlex Work object. This list contains OpenAlex IDs of works algorithmically determined to be related based on shared concepts and recency.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/work-object/README.md#_snippet_38\n\nLANGUAGE: JSON\nCODE:\n```\nrelated_works: [\n    \"https://openalex.org/W2753353163\",\n    \"https://openalex.org/W2785823074\",\n    \"https://openalex.org/W2511661767\",\n    \"https://openalex.org/W2115339903\",\n    \"https://openalex.org/W2031754690\"\n]\n```\n\n----------------------------------------\n\nTITLE: Query BigQuery Table Finding Author with Most OA Works (SQL)\nDESCRIPTION: A more complex BigQuery SQL query that uses Common Table Expressions (CTEs) and the `unnest` function to parse arrays within the JSON string. It identifies open access works, extracts authorship information, and aggregates to find the author with the highest count of distinct open access works.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/download-all-data/upload-to-your-database/load-to-a-data-warehouse.md#_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nwith work_authorships_oa as (\n   select\n       json_value(work, '$.id') as work_id,\n       json_query_array(work, '$.authorships') as authorships,\n       cast(json_value(work, '$.open_access.is_oa') as BOOL) as is_oa\n   from `openalex-demo.openalex.works`\n), flat_authorships as (\n   select work_id, authorship, is_oa\n   from work_authorships_oa,\n   unnest(authorships) as authorship\n)\nselect \n    json_value(authorship, '$.author.id') as author_id,\n    count(distinct work_id) as num_oa_works\nfrom flat_authorships\nwhere is_oa\ngroup by author_id\norder by num_oa_works desc\nlimit 1;\n```\n\n----------------------------------------\n\nTITLE: GET request for next page using cursor\nDESCRIPTION: Shows how to continue retrieving subsequent result pages by including the 'next_cursor' value from the previous response in the 'cursor' parameter of the next request. This iterative process continues until 'next_cursor' is null, signifying completion.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/how-to-use-the-api/get-lists-of-entities/paging.md#_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\nhttps://api.openalex.org/works?filter=publication_year:2020&per-page=100&cursor=IlsxNjA5MzcyODAwMDAwLCAnaHR0cHM6Ly9vcGVuYWxleC5vcmcvVzI0ODg0OTk3NjQnXSI=\n```\n\n----------------------------------------\n\nTITLE: OpenAlex Author Data Structure After Updates and New Records\nDESCRIPTION: This snippet illustrates the Author data structure after both existing records were updated and new records were added on the same later date. It shows that both updated and newly created records for a given date reside within that date's partition.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/download-all-data/snapshot-data-format.md#_snippet_2\n\nLANGUAGE: Directory Structure\nCODE:\n```\n/data/authors/\n├── manifest\n├── updated_date=2021-12-30 [950 Authors]\n│   ├── 0000_part_00.gz\n│   ...\n│   └── 0031_part_00.gz\n└── updated_date=2022-01-04 [100 Authors]\n    ├── 0000_part_00.gz\n    ...\n    └── 0031_part_00.gz\n```\n\n----------------------------------------\n\nTITLE: Filtering Works Originating Only from MAG (OpenAlex API, HTTP)\nDESCRIPTION: Demonstrates filtering works that were sourced exclusively from Microsoft Academic Graph (MAG) data. This allows users to isolate or exclude MAG-only content. The filter accepts a boolean value ('true' for MAG-only, 'false' for works from other sources or combined with MAG).\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/filter-works.md#_snippet_25\n\nLANGUAGE: HTTP\nCODE:\n```\nhttps://api.openalex.org/works?filter=mag_only:true\n```\n\n----------------------------------------\n\nTITLE: OpenAlex Author Data Structure After Updates (Example 1)\nDESCRIPTION: This snippet shows the Author data directory structure after some records originally in the initial partition have been updated. It demonstrates that updated records move out of their original partition and into a new one corresponding to their latest update date.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/download-all-data/snapshot-data-format.md#_snippet_1\n\nLANGUAGE: Directory Structure\nCODE:\n```\n/data/authors/\n├── manifest\n├── updated_date=2021-12-30 [950 Authors]\n│   ├── 0000_part_00.gz\n│   ...\n│   └── 0031_part_00.gz\n└── updated_date=2022-01-04 [50 Authors]\n    ├── 0000_part_00.gz\n    ...\n    └── 0031_part_00.gz\n```\n\n----------------------------------------\n\nTITLE: Request a cursor for cursor paging\nDESCRIPTION: Illustrates how to initiate cursor-based pagination by requesting a cursor with 'cursor=*' parameter. The response includes a 'next_cursor' value in the meta object, which is essential for fetching subsequent pages. This approach allows access to potentially unlimited data sets.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/how-to-use-the-api/get-lists-of-entities/paging.md#_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\nhttps://api.openalex.org/works?filter=publication_year:2020&per-page=100&cursor=*\n```\n\n----------------------------------------\n\nTITLE: Grouping Works Including Unknown Country (URL)\nDESCRIPTION: This API call demonstrates how to include the 'unknown' group in the response when grouping Works by authorship country by appending `:include_unknown` to the parameter.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/how-to-use-the-api/get-groups-of-entities.md#_snippet_3\n\nLANGUAGE: URL\nCODE:\n```\nhttps://api.openalex.org/works?group_by=authorships.countries:include_unknown\n```\n\n----------------------------------------\n\nTITLE: Example OpenAlex Merged Entity IDs CSV Content\nDESCRIPTION: This snippet provides an example of the data format found within the merged entity IDs CSV files. Each row indicates the date of the merge operation, the ID that was merged away, and the ID into which it was merged.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/download-all-data/snapshot-data-format.md#_snippet_4\n\nLANGUAGE: CSV\nCODE:\n```\nmerge_date,id,merge_into_id\n2022-06-07,A2257618939,A2208157607\n```\n\n----------------------------------------\n\nTITLE: Searching Works by Raw Affiliation Strings (OpenAlex API, HTTP)\nDESCRIPTION: Demonstrates performing a full-text search across the raw affiliation strings associated with authors of works. The filter value is the search string.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/filter-works.md#_snippet_28\n\nLANGUAGE: HTTP\nCODE:\n```\nhttps://api.openalex.org/works?filter=raw_affiliation_strings.search:department%20of%20political%20science%20university%20of%20amsterdam\n```\n\n----------------------------------------\n\nTITLE: Listing Topics: OpenAlex API - Sorted\nDESCRIPTION: This URL shows how to sort the list of topics using the `sort` query parameter. It sorts the results by `cited_by_count` in descending order.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/topics/get-lists-of-topics.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nhttps://api.openalex.org/topics?sort=cited_by_count:desc\n```\n\n----------------------------------------\n\nTITLE: Create BigQuery Table with String Column using bq CLI (Bash)\nDESCRIPTION: Creates a BigQuery table for a specific OpenAlex entity type (e.g., 'works') within the previously created dataset. The table is defined with a single column named after the entity type (e.g., 'work') with the STRING data type, intended to hold the full JSON object.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/download-all-data/upload-to-your-database/load-to-a-data-warehouse.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbq mk --table openalex-demo:openalex.works work:string\n```\n\n----------------------------------------\n\nTITLE: Checking OpenAlex Snapshot Size Before Downloading\nDESCRIPTION: Command to list and summarize the contents of the OpenAlex S3 bucket, providing the total size of the data before downloading. This helps users ensure they have sufficient disk space.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/download-all-data/download-to-your-machine.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\naws s3 ls --summarize --human-readable --no-sign-request --recursive \"s3://openalex/\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Random Works Samples with OpenAlex API\nDESCRIPTION: Examples of using the sample parameter to retrieve random works from the OpenAlex API, including both simple sampling and filtered sampling with specific criteria.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/how-to-use-the-api/get-lists-of-entities/sample-entity-lists.md#_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nhttps://api.openalex.org/works?sample=100&per-page=100\n```\n\nLANGUAGE: http\nCODE:\n```\nhttps://api.openalex.org/works?filter=open_access.is_oa:true,publication_year:2021&sample=50&per-page=50\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Sources List\nDESCRIPTION: Provides a sample JSON structure returned by the OpenAlex sources endpoint. It includes metadata about the query (count, response time, page info) and a list of source objects, each with basic identifying information like ID and display name.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/sources/get-lists-of-sources.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"meta\": {\n        \"count\": 226727,\n        \"db_response_time_ms\": 32,\n        \"page\": 1,\n        \"per_page\": 25\n    },\n    \"results\": [\n        {\n            \"id\": \"https://openalex.org/S2764455111\",\n            \"issn_l\": null,\n            \"issn\": null,\n            \"display_name\": \"PubMed Central\",\n            // more fields (removed to save space)\n        },\n        {\n            \"id\": \"https://openalex.org/S4306400806\",\n            \"issn_l\": null,\n            \"issn\": null,\n            \"display_name\": \"PubMed Central - Europe PMC\",\n            // more fields (removed to save space)\n        },\n        // more results (removed to save space)\n    ],\n    \"group_by\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries in Python\nDESCRIPTION: Imports standard Python libraries: `os` for operating system interactions, `re` for regular expressions, `pathlib` for object-oriented filesystem paths, and `requests` for making HTTP requests. These are foundational dependencies for fetching data, processing text, and interacting with files in subsequent snippets.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/scripts/notebooks/filters_align.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport re\nfrom pathlib import Path\nimport requests\n```\n\n----------------------------------------\n\nTITLE: Listing Topics: OpenAlex API - Sampled\nDESCRIPTION: This URL demonstrates how to retrieve a random sample of topics using the `sample` query parameter. It requests a sample of 10 random topics.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/topics/get-lists-of-topics.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nhttps://api.openalex.org/topics?sample=10\n```\n\n----------------------------------------\n\nTITLE: Querying Topics by Domain ID with OpenAlex API\nDESCRIPTION: This snippet demonstrates how to query topics and group them by the `domain.id` attribute using the OpenAlex API. It retrieves topic counts aggregated by domain identifiers. The API endpoint is specified in the URL, and no additional parameters are required other than `group_by=domain.id` to execute the grouping. The output is a list of grouped topics with their respective counts.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/topics/group-topics.md#_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nhttps://api.openalex.org/topics?group_by=domain.id\n```\n\n----------------------------------------\n\nTITLE: Comparing GUI Filters with API Fields using Pandas in Python\nDESCRIPTION: Performs a comparison between the filters extracted from the GUI (`gui_filters`) and the valid fields obtained from the API (`api_valid_fields`). It creates a pandas Series where each element indicates whether a corresponding `gui_filters` entry exists in the `api_valid_fields` list. Finally, `.value_counts()` is used to count and display how many GUI filters were found (`True`) and not found (`False`) in the API list. Requires `pandas`, `gui_filters`, and `api_valid_fields`.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/scripts/notebooks/filters_align.ipynb#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\npd.Series([x in api_valid_fields for x in gui_filters]).value_counts()\n```\n\n----------------------------------------\n\nTITLE: Grouping Institutions by Continent\nDESCRIPTION: This endpoint groups institutions by continent. The response includes the continent's Wikidata ID (`key`), display name (`key_display_name`), and the number of institutions in that continent (`count`).\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/geo/continents.md#_snippet_3\n\nLANGUAGE: HTTP\nCODE:\n```\nhttps://api.openalex.org/institutions?group-by=continent\n```\n\n----------------------------------------\n\nTITLE: Showing OpenAlex Work Primary Location JSON Example\nDESCRIPTION: Example JSON structure for the `primary_location` attribute of an OpenAlex Work object. This object identifies the single best location for accessing the work, typically the version of record, including its OA status, URLs, source details, and version information.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/work-object/README.md#_snippet_33\n\nLANGUAGE: JSON\nCODE:\n```\nprimary_location: {\n  is_oa: true,\n  landing_page_url: \"https://doi.org/10.1073/pnas.17.6.401\",\n  pdf_url: \"http://www.pnas.org/content/17/6/401.full.pdf\",\n  source: {\n    id: \"https://openalex.org/S125754415\",\n    display_name: \"Proceedings of the National Academy of Sciences of the United States of America\",\n    issn_l: \"0027-8424\",\n    issn: [\"1091-6490\", \"0027-8424\"],\n    host_organization: \"https://openalex.org/P4310320052\",\n    type: \"journal\"\n  },\n  license: null,\n  version: \"publishedVersion\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Standard and Third-Party Modules in Python\nDESCRIPTION: Imports both standard library modules (os, sys, json, pathlib.Path) and the third-party requests module required for HTTP requests. These imports are prerequisites for filesystem operations, system path manipulation, JSON handling, and interacting with web APIs. Ensure requests is installed in the environment.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/scripts/notebooks/scrape_docs.ipynb#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport os, sys, json\nfrom pathlib import Path\nimport requests\n```\n\n----------------------------------------\n\nTITLE: Grouping Authors by Institution Continent\nDESCRIPTION: This endpoint groups authors by the continent of their last known institution.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/geo/continents.md#_snippet_5\n\nLANGUAGE: HTTP\nCODE:\n```\n/authors?group-by=last_known_institution.continent\n```\n\n----------------------------------------\n\nTITLE: Displaying Concept External Identifiers - OpenAlex - JSON\nDESCRIPTION: Demonstrates the 'ids' composite object, mapping several external schema identifiers to this concept. Includes optional fields such as Microsoft Academic Graph ID, Wikidata, Wikipedia, and OpenAlex itself. Some keys may be omitted if information is not available. Output is a JSON object; dependencies: integration with external knowledgebases.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/concepts/concept-object.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\nids: {\n    openalex: \"https://openalex.org/C2778407487\",\n    wikidata: \"https://www.wikidata.org/wiki/Q14565201\",\n    wikipedia: \"https://en.wikipedia.org/wiki/Altmetrics\",\n    mag: 2778407487\n}\n```\n\n----------------------------------------\n\nTITLE: Representing Bibliographic Information (JSON)\nDESCRIPTION: Shows the JSON structure for the `biblio` field, containing traditional bibliographic details like volume, issue, first page, and last page as strings. These values are strings to accommodate non-numeric entries like \"Spring\".\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/work-object/README.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\nbiblio: {\n    volume: \"495\",\n    issue: \"7442\",\n    first_page: \"437\",\n    last_page: \"440\"\n}\n```\n\n----------------------------------------\n\nTITLE: Locating Markdown Documentation Files Using pathlib in Python\nDESCRIPTION: Uses pathlib to define a directory relative to the script (../../the-data/) and recursively locates all markdown (.md) files within the directory and its subdirectories. The resulting list, markdown_files, is used for batch processing documentation sources.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/scripts/notebooks/scrape_docs.ipynb#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\ndirpath = Path('../../the-data/')\nmarkdown_files = list(dirpath.rglob('*.md'))\n```\n\n----------------------------------------\n\nTITLE: Querying OpenAlex Works Autocomplete with Filter and Search URL\nDESCRIPTION: This advanced example shows how to combine the autocomplete query (`q`) with standard filtering (`filter`) and searching (`search`) parameters on the works endpoint. It finds works published in 2010 containing 'frogs' in their search fields that also match 'greenhou' for autocomplete.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/how-to-use-the-api/get-lists-of-entities/autocomplete-entities.md#_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nhttps://api.openalex.org/autocomplete/works?filter=publication_year:2010&search=frogs&q=greenhou\n```\n\n----------------------------------------\n\nTITLE: Defining a Generator for Yielding Attribute Names and Descriptions from MarkdownDoc in Python\nDESCRIPTION: Defines yield_attrs as a generator function that iterates through sections in a MarkdownDoc. For sections with 'attributes' in the title, it further subdivides the content and yields pairs of field names (with prefix) and their descriptions. Depends on MarkdownDoc and MarkdownSection classes, and expects sections to be properly parsed and structured.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/scripts/notebooks/scrape_docs.ipynb#_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\ndef yield_attrs(doc, prefix):\n    for sec in doc.sections:\n        if 'attributes' in sec.title.lower():\n            attrs_subdoc = MarkdownDoc(sec.content)\n            attrs_subsections = [\n                    MarkdownSection(sec, title, parent=attrs_subdoc, level=3)\n                    for title, sec in attrs_subdoc.split_into_sections(attrs_subdoc.txt, level=3)\n            ]\n            # attrs = {}\n            for sec in attrs_subsections:\n                if sec.title:\n                    title = sec.title.replace('\\\\', '').strip('`')\n                    desc = sec.lines[2]\n                    # attrs[f\"source.{title}\"] = desc\n                    yield f\"{prefix}.{title}\", desc\n    #         return attrs\n    # return None\n```\n\n----------------------------------------\n\nTITLE: Sorting Sources Alphabetically by Title in OpenAlex API (HTTP)\nDESCRIPTION: This snippet requests a list of sources from the OpenAlex API, sorted in ascending alphabetical order by their display name (title) using the sort parameter. The HTTP GET call requires no authentication or additional libraries. The expected output is a JSON object with sources in order by display_name; sorting is case-insensitive and applies to all listed entities.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/how-to-use-the-api/get-lists-of-entities/sort-entity-lists.md#_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.openalex.org/sources?sort=display_name\n```\n\n----------------------------------------\n\nTITLE: Printing Key-Value Pairs from Descriptions Dictionary in Python\nDESCRIPTION: Enumerates and prints each key-value pair from the descriptions dictionary to the console. This is primarily a debugging or verification step to review all parsed documentation descriptions.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/scripts/notebooks/scrape_docs.ipynb#_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nfor k, v in descriptions.items():\n    print(f\"{k}: {v}\")\n```\n\n----------------------------------------\n\nTITLE: Create BigQuery Table with String Column using bq CLI (Bash)\nDESCRIPTION: Creates a BigQuery table for the 'authors' entity type, following the same pattern as the 'works' table. It uses the `bq mk --table` command to define a table named 'authors' with a single STRING column 'author' for storing JSON data.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/download-all-data/upload-to-your-database/load-to-a-data-warehouse.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbq mk --table openalex-demo:openalex.authors author:string\n```\n\n----------------------------------------\n\nTITLE: Getting Description or Parent Attribute from Descriptions Dictionary in Python\nDESCRIPTION: Defines get_description_or_parent, a helper function that checks if a given name has a description, or recursively searches for the closest parent (dot-separated) with a description. Returns a tuple of the matched key and description, or (None, None) if not found.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/scripts/notebooks/scrape_docs.ipynb#_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\ndef get_description_or_parent(name):\n    if name in descriptions:\n        return name, descriptions[name]\n    parts = name.split('.')\n    if len(parts) > 1:\n        for i in range(len(parts)):\n            name = \".\".join(parts[:-i-1])\n            if name in descriptions:\n                return name, descriptions[name]\n    return None, None\n```\n\n----------------------------------------\n\nTITLE: Providing Author ID in OpenAlex API (JSON)\nDESCRIPTION: This snippet represents the 'id' attribute for the author, a required string holding the OpenAlex author identifier as a URI. Always present for valid author objects. Output is a URI string.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/authors/author-object.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\nid: \"https://openalex.org/A5023888391\"\n```\n\n----------------------------------------\n\nTITLE: Moving Entity Files\nDESCRIPTION: This snippet iterates through a list of entity names, constructs file paths, and moves files from one directory to another. It checks if a source file exists and, if so, moves it to a destination directory. This is used to reorganize the documentation files related to different entities.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/scripts/notebooks/moving_files.ipynb#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfor entity_name in entity_names:\n    entity_dir = basedir.joinpath(f\"the-data/{entity_name}\")\n    fp = entity_dir.joinpath(f\"group-{entity_name}.md\")\n    if fp.exists():\n        dest = basedir.joinpath(f\"the-api/get-groups-of-entities/group-{entity_name}.md\")\n        # if not dest.exists():\n        print(f\"moving {fp} to {dest}\")\n        shutil.move(fp, dest)\n```\n\n----------------------------------------\n\nTITLE: Constructing Data Dictionary from API Fields and Documentation Descriptions in Python\nDESCRIPTION: Builds a data dictionary correlating API field names with documentation descriptions. For each field in filter_names and schema_names per entity, it logs presence in either collection and appends documentation info (if available) through get_description_or_parent. The resulting values are loaded into a pandas DataFrame for downstream analysis.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/scripts/notebooks/scrape_docs.ipynb#_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\ndata = {}\nfor entity_name, v in fields_from_api.items():\n    for k, field_names in v.items():\n        for field_name in field_names:\n            this_name = f\"{entity_name}.{field_name}\"\n            if this_name in data:\n                data[this_name].update({\n                    f'in_{k}': True\n                })\n            else:\n                data[this_name] = {\n                    'name': this_name,\n                    'entity_name': entity_name,\n                    f'in_{k}': True,\n                }\n                desc_key, desc = get_description_or_parent(this_name)\n                if desc:\n                    data[this_name].update({\n                        'in_docs_scrape': True,\n                        'docs_description': desc,\n                        'docs_desc_key': desc_key,\n                    })\ndf = pd.DataFrame(data.values())\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAlex Entity Endpoints in Python\nDESCRIPTION: Initializes a Python list named `entity_endpoints`. This list stores the names of various entity types available through the OpenAlex API, such as 'works', 'authors', 'sources', etc. This list is used later to iterate through and query information specific to each entity type.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/scripts/notebooks/filters_align.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nentity_endpoints = [\n    'works',\n    'authors',\n    'sources',\n    'publishers',\n    'funders',\n    'institutions',\n    'concepts',\n]\n```\n\n----------------------------------------\n\nTITLE: Example: `updated_date` Field in OpenAlex Work Object (JSON)\nDESCRIPTION: Illustrates the `updated_date` field within an OpenAlex `Work` object. This field stores the timestamp of the last update to the Work object as an ISO 8601 date string in UTC. Any change, including count increments, triggers an update.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/work-object/README.md#_snippet_44\n\nLANGUAGE: json\nCODE:\n```\nupdated_date: \"2022-01-02T00:22:35.180390\"\n```\n\n----------------------------------------\n\nTITLE: Accessing DataFrame for Console Display in Python\nDESCRIPTION: References the DataFrame df, typically for viewing in an interactive Python session or console. Displays the tabular result of previously constructed mappings and merges.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/scripts/notebooks/scrape_docs.ipynb#_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\ndf\n```\n\n----------------------------------------\n\nTITLE: Counting Extracted GUI Filters in Python\nDESCRIPTION: Calculates and implicitly displays the total number of filter entries extracted from the GUI source code. It uses the built-in `len()` function on the `gui_filters` list, which contains the structured filter data.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/scripts/notebooks/filters_align.ipynb#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nlen(gui_filters)\n```\n\n----------------------------------------\n\nTITLE: Searching institutions by name using `display_name.search`\nDESCRIPTION: This snippet filters institutions whose display names contain the string 'technology'. It demonstrates the use of the `display_name.search` filter for text-based name searches, requiring a search string parameter.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/institutions/filter-institutions.md#_snippet_3\n\nLANGUAGE: URL\nCODE:\n```\nhttps://api.openalex.org/institutions?filter=display_name.search:technology\n```\n\n----------------------------------------\n\nTITLE: Python script for converting JSONL files to CSV\nDESCRIPTION: A script to parse OpenAlex JSON Lines files and flatten nested data into CSV format suitable for bulk database import; includes instructions for configuration, execution, and potential performance improvements.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/download-all-data/upload-to-your-database/load-to-a-relational-database/README.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nhttps://github.com/ourresearch/openalex-documentation-scripts/blob/main/flatten-openalex-jsonl.py\n```\n\n----------------------------------------\n\nTITLE: Importing Custom Markdown Processing Classes in Python\nDESCRIPTION: Imports MarkdownDoc and MarkdownSection from a module named markdown_edits. These classes are likely used for parsing and manipulating markdown documents and their sections, and must be available in the project or environment.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/scripts/notebooks/scrape_docs.ipynb#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom markdown_edits import MarkdownDoc, MarkdownSection\n```\n\n----------------------------------------\n\nTITLE: Querying OpenAlex /text Endpoint for All Tags (HTTP GET)\nDESCRIPTION: This demonstrates querying the base `/text` endpoint via HTTP GET to retrieve all associated OpenAlex Keywords, Topics, and Concepts for the provided text ('type 1 diabetes research for children') in a single request. The text is supplied using the URL-encoded `title` query parameter.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/aboutness-endpoint-text.md#_snippet_3\n\nLANGUAGE: HTTP\nCODE:\n```\nhttps://api.openalex.org/text?title=type%201%20diabetes%20research%20for%20children\n```\n\n----------------------------------------\n\nTITLE: Execute BigQuery SQL Query using bq CLI (Bash)\nDESCRIPTION: Shows how to execute a standard SQL query against a BigQuery table directly from the command line using the `bq query` command. It includes necessary flags for project ID and disabling legacy SQL, passing the SQL statement as a quoted string.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/download-all-data/upload-to-your-database/load-to-a-data-warehouse.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nbq query \\\n--project_id=openalex-demo \\\n--use_legacy_sql=false \\\n\"select json_value(work, '$.id') as work_id, json_value(work, '$.open_access.is_oa') as is_oa from openalex.works;\"\n```\n\n----------------------------------------\n\nTITLE: Example `created_date` Field Value (JSON)\nDESCRIPTION: Shows an example ISO 8601 date string for the `created_date` field in an OpenAlex Keyword object. This field indicates the date when this specific keyword entity was initially created in the OpenAlex dataset.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/keywords/README.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\ncreated_date: \"2024-04-10\"\n```\n\n----------------------------------------\n\nTITLE: Illustrating `landing_page_url` property (JSON)\nDESCRIPTION: Describes the `landing_page_url` string property. This is the URL for the landing page associated with this specific location where the work can be found.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/work-object/location-object.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\nlanding_page_url: \"https://doi.org/10.1590/s1678-77572010000100010\"\n```\n\n----------------------------------------\n\nTITLE: Filtering OpenAlex Works Results using Select Parameter\nDESCRIPTION: Demonstrates how to use the 'select' query parameter with the OpenAlex Works API endpoint to retrieve only the 'id', 'doi', and 'display_name' fields for each work in the results.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/how-to-use-the-api/get-lists-of-entities/select-fields.md#_snippet_0\n\nLANGUAGE: URL\nCODE:\n```\nhttps://api.openalex.org/works?select=id,doi,display_name\n```\n\n----------------------------------------\n\nTITLE: Exporting DataFrame to CSV File with pandas in Python\nDESCRIPTION: Saves the compiled DataFrame df to a CSV file named 'examine_docs_scrape.csv' without the row index. This file holds the consolidated mapping between attributes, API fields, and documentation descriptions for downstream usage.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/scripts/notebooks/scrape_docs.ipynb#_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\ndf.to_csv('examine_docs_scrape.csv', index=False)\n```\n\n----------------------------------------\n\nTITLE: ROR ID Example (JSON)\nDESCRIPTION: This JSON snippet provides an example of the `ror` property. It represents the ROR (Research Organization Registry) identifier for an institution. The ROR ID is a globally unique identifier for research organizations, and serves as the Canonical External ID for institutions.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/institutions/institution-object.md#_snippet_19\n\nLANGUAGE: json\nCODE:\n```\nror: \"https://ror.org/0130frc33\"\n```\n\n----------------------------------------\n\nTITLE: Recording Raw Author Name in OpenAlex Authorship (JSON)\nDESCRIPTION: Displays the capture of the author's name as received from source material, as a simple string. This value may differ from the canonical display_name field and is useful for provenance or disambiguation purposes. Only one string (raw_author_name) is expected.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/work-object/authorship-object.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\nraw_author_name: \"Juan Pablo Alperin\"\n```\n\n----------------------------------------\n\nTITLE: Representing Corresponding Institution IDs in OpenAlex JSON Records\nDESCRIPTION: Provides a JSON list of OpenAlex IDs for institutions identified as \"corresponding institutions\" within an authorship entry. These IDs reference institutions flagged with authorships.is_corresponding=true, helping to identify primary correspondence affiliations for the work. This snippet depends on the context of authorship objects and institutional records.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/work-object/README.md#_snippet_10\n\nLANGUAGE: JSON\nCODE:\n```\ncorresponding_institution_ids: [\"https://openalex.org/I4210123613\"]\n```\n\n----------------------------------------\n\nTITLE: Representing Creation Date of Work Objects in OpenAlex with ISO 8601 Format\nDESCRIPTION: A JSON string indicating when the Work object was first created within the OpenAlex dataset, formatted with the ISO 8601 standard date string. This assists in tracking dataset entry timing and versioning.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/work-object/README.md#_snippet_13\n\nLANGUAGE: JSON\nCODE:\n```\ncreated_date: \"2017-08-08\"\n```\n\n----------------------------------------\n\nTITLE: Filtering by Publication Date\nDESCRIPTION: This filter retrieves works published on or after a specified date using the `from_publication_date` filter.  The input is a date in the format `yyyy-mm-dd`.  The output is a list of works published on or after the given date.  The documentation advises using `from_created_date` or `from_updated_date` instead for retrieving recently updated works.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/filter-works.md#_snippet_11\n\nLANGUAGE: API\nCODE:\n```\nhttps://api.openalex.org/works?filter=from_publication_date:2001-03-14\n```\n\n----------------------------------------\n\nTITLE: Selecting Fields for Authors Results from OpenAlex API\nDESCRIPTION: This snippet demonstrates how to limit the fields returned in author results using the `select` parameter. It specifies to only return the `id`, `display_name`, and `orcid` fields. The API call uses the `select` parameter to filter and display only the requested fields.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/authors/get-lists-of-authors.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\nhttps://api.openalex.org/authors?select=id,display_name,orcid\n```\n\n----------------------------------------\n\nTITLE: Filtering OpenAlex Works by Author's Institution in Global South (HTTP)\nDESCRIPTION: This API call retrieves works where at least one author is affiliated with an institution located in the Global South. It uses the `filter` query parameter targeting the nested boolean field `institutions.is_global_south` and setting it to `true`.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/geo/README.md#_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nhttps://api.openalex.org/works?filter=institutions.is_global_south:true\n```\n\n----------------------------------------\n\nTITLE: Searching Sources via API - Example\nDESCRIPTION: This snippet demonstrates how to search for sources using the `search` query parameter, specifically for the abbreviated title \"jacs\". This parameter searches across `display_name`, `alternate_titles`, and `abbreviated_title` fields. The expected output is a list of sources matching the search term.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/sources/search-sources.md#_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nhttps://api.openalex.org/sources?search=jacs\n```\n\n----------------------------------------\n\nTITLE: Counting Citations with 'cited_by_count' Field in OpenAlex Source Object - JSON\nDESCRIPTION: This JSON snippet demonstrates the 'cited_by_count' parameter, indicating the total number of works that cite an item in this source. Driven by OpenAlex relationships, the field is an integer. No extra dependencies. Input/output is a whole number, possibly zero.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/sources/source-object.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\ncited_by_count: 133702 \n```\n\n----------------------------------------\n\nTITLE: Importing CSV data into PostgreSQL using copy commands\nDESCRIPTION: SQL script automates bulk loading of CSV files into their respective tables via PostgreSQL's \\\\copy command, requiring proper configuration of environment variables and file paths.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/download-all-data/upload-to-your-database/load-to-a-relational-database/README.md#_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\n\\copy openalex.concepts_ancestors (concept_id, ancestor_id) from 'csv-files/concepts_ancestors.csv' csv header\n```\n\n----------------------------------------\n\nTITLE: Referencing Display Name with 'display_name' Field in OpenAlex Source Object - JSON\nDESCRIPTION: Demonstrates the 'display_name' attribute, a string that denotes the full name of the Source object, such as the journal or platform name. No dependencies. Inputs/outputs are simple strings representing names. Always provided if source exists.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/sources/source-object.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\ndisplay_name: \"PeerJ\"\n```\n\n----------------------------------------\n\nTITLE: Subclassing MarkdownSection\nDESCRIPTION: This snippet defines a subclass of `MarkdownSection` called `SummarySection`. This class inherits all the properties and methods of `MarkdownSection` without adding any new functionality, which could be used for specific types of Markdown sections in the future.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/scripts/notebooks/moving_files.ipynb#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass SummarySection(MarkdownSection):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Example URL for Searching Authors by Name\nDESCRIPTION: Demonstrates how to construct a URL to search for authors named 'Carl Sagan' using the search query parameter. It shows basic search syntax and highlights handling of names with middle initials and diacritics.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/authors/search-authors.md#_snippet_0\n\nLANGUAGE: URL\nCODE:\n```\nhttps://api.openalex.org/authors?search=carl%20sagan\n```\n\n----------------------------------------\n\nTITLE: Example Response for a Single Keyword (JSON)\nDESCRIPTION: Shows a truncated JSON response structure returned when requesting a single Keyword object from the OpenAlex API. It includes essential fields like `id` and `display_name`, representing the data format for a single keyword entity.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/keywords/README.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"https://openalex.org/keywords/cardiac-imaging\",\n    \"display_name\": \"Cardiac Imaging\",\n    // other fields removed for brevity\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Valid Fields from OpenAlex API in Python\nDESCRIPTION: Retrieves the list of valid filter fields for each OpenAlex entity type directly from the API. It iterates through the `entity_endpoints` list, constructs the appropriate API URL (e.g., 'https://api.openalex.org/works/valid_fields'), sends a GET request using the `requests` library, parses the JSON response, and appends each field name along with its corresponding entity type to the `api_valid_fields` list. Requires the `requests` library and the `entity_endpoints` list.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/scripts/notebooks/filters_align.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\napi_valid_fields = []\nfor e in entity_endpoints:\n    r = requests.get(f\"https://api.openalex.org/{e}/valid_fields\")\n    for item in r.json():\n        api_valid_fields.append({\n            'key': item,\n            'entityType': e,\n        })\n```\n\n----------------------------------------\n\nTITLE: Displaying Entity Directory\nDESCRIPTION: This snippet displays the value of the `entity_dir` variable, which contains the `Path` object representing the directory for the last entity in `entity_names` after the loop has completed. This provides information about the final directory being used in the loop.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/scripts/notebooks/moving_files.ipynb#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nentity_dir\n```\n\n----------------------------------------\n\nTITLE: Retrieving All OpenAlex Sources (Default)\nDESCRIPTION: Provides the base URL for the OpenAlex API sources endpoint, which returns a list of sources with default pagination (25 results per page, first page). This is the simplest way to retrieve source data.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/sources/get-lists-of-sources.md#_snippet_0\n\nLANGUAGE: API Request\nCODE:\n```\nhttps://api.openalex.org/sources\n```\n\n----------------------------------------\n\nTITLE: Filtering Authors by Continent\nDESCRIPTION: This endpoint filters authors based on the continent of their last known institution. Replace `<continent>` with a valid continent value like `africa`, `europe`, etc. Refer to the table for available values.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/geo/continents.md#_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\n/authors?filter=last_known_institution.continent:<continent>\n```\n\n----------------------------------------\n\nTITLE: Example `updated_date` Field Value (JSON)\nDESCRIPTION: Shows an example ISO 8601 timestamp string for the `updated_date` field in an OpenAlex Keyword object. This timestamp indicates the last time any information within the keyword object was modified, including updates to counts.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/keywords/README.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\nupdated_date: \"2024-05-09T05:00:03.798420\"\n```\n\n----------------------------------------\n\nTITLE: Querying OpenAlex Institutions Autocomplete URL\nDESCRIPTION: This example demonstrates how to query the OpenAlex autocomplete endpoint for 'institutions' using a search string 'flori'. The `q` parameter holds the user's input string for which matching institutions are sought.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/how-to-use-the-api/get-lists-of-entities/autocomplete-entities.md#_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nhttps://api.openalex.org/autocomplete/institutions?q=flori\n```\n\n----------------------------------------\n\nTITLE: Parsing Markdown Documentation and Constructing Descriptions Dictionary in Python\nDESCRIPTION: Iterates through loaded MarkdownDoc objects, extracts section titles and first lines as descriptions, and applies filters based on ignore_docs. For each recognized section, also yields attribute-level names and descriptions using yield_attrs. Results are collected in the descriptions dictionary with keys as entity or field names.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/scripts/notebooks/scrape_docs.ipynb#_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\ndescriptions = {}\nfor doc in markdown_docs:\n    try:\n        sec = doc.sections[1]\n        content_lines = [line for line in sec.content.split(\"\\n\") if line]\n        desc = content_lines[0]\n        title = ''.join([char for char in sec.title if char.isascii()])\n        title = title.strip()\n        if title in ignore_docs:\n            print(f\"ignoring {doc}\")\n            continue\n        descriptions[title] = desc\n        for attr_name, attr_desc in yield_attrs(doc, prefix=title.lower()):\n            descriptions[attr_name] = attr_desc\n    except IndexError:\n        print(f\"skipping {doc}\")\n```\n\n----------------------------------------\n\nTITLE: Sampling OpenAlex Sources List\nDESCRIPTION: Shows an example API request URL to retrieve a random sample of 10 sources. This uses the `sample` query parameter to request a subset of the results, useful for exploring the data or testing.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/sources/get-lists-of-sources.md#_snippet_4\n\nLANGUAGE: API Request\nCODE:\n```\nhttps://api.openalex.org/sources?sample=10\n```\n\n----------------------------------------\n\nTITLE: Filtering Sources without ISSNs in OpenAlex API\nDESCRIPTION: Example showing how to filter for sources that don't have an ISSN using the has_issn convenience filter with false value. This is useful for finding sources that lack standard identification.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/sources/filter-sources.md#_snippet_3\n\nLANGUAGE: url\nCODE:\n```\nhttps://api.openalex.org/sources?filter=has_issn:false\n```\n\n----------------------------------------\n\nTITLE: Filtering OpenAlex Concepts by Level using HTTP\nDESCRIPTION: Demonstrates filtering OpenAlex concepts to retrieve only those at level 0 (top level) using the `filter` parameter with the `level` attribute in an API call. This requires making an HTTP GET request to the specified URL.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/concepts/filter-concepts.md#_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nhttps://api.openalex.org/concepts?filter=level:0\n```\n\n----------------------------------------\n\nTITLE: Fetching a Random Concept via OpenAlex API (HTTP)\nDESCRIPTION: Shows how to request a random concept entity from the OpenAlex API by substituting 'random' for a specific ID in the concepts endpoint URL. Repeated requests will yield different random concepts.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/how-to-use-the-api/get-single-entities/random-result.md#_snippet_1\n\nLANGUAGE: HTTP\nCODE:\n```\nhttps://api.openalex.org/concepts/random\n```\n\n----------------------------------------\n\nTITLE: Retrieving a List of All Keywords (HTTP GET)\nDESCRIPTION: API request URL to fetch the default list of all Keyword objects from the OpenAlex API. The response will be paginated, typically returning 25 keywords per page unless otherwise specified.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/keywords/README.md#_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nhttps://api.openalex.org/keywords\n```\n\n----------------------------------------\n\nTITLE: Filtering Works by N-grams Availability (OpenAlex API, HTTP)\nDESCRIPTION: Demonstrates filtering works that have n-grams available. This filter is deprecated; the recommended alternative is 'has_fulltext'. The filter accepts a boolean value.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/filter-works.md#_snippet_21\n\nLANGUAGE: HTTP\nCODE:\n```\nhttps://api.openalex.org/works?filter=has_ngrams:true\n```\n\n----------------------------------------\n\nTITLE: Using Seed Values for Reproducible Random Samples in OpenAlex API\nDESCRIPTION: Demonstrates how to use a seed value to retrieve the same set of random records multiple times, ensuring reproducibility of random samples.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/how-to-use-the-api/get-lists-of-entities/sample-entity-lists.md#_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nhttps://api.openalex.org/sources?sample=20&seed=123\n```\n\n----------------------------------------\n\nTITLE: Printing API Section Text\nDESCRIPTION: This snippet prints the text content of the `api_section` object, which was previously retrieved from the Markdown document. This displays the content of the \"The Api\" section.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/scripts/notebooks/moving_files.ipynb#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nprint(api_section.txt)\n```\n\n----------------------------------------\n\nTITLE: Referencing Host Organization Display Name in OpenAlex Source Object - JSON\nDESCRIPTION: Shows the 'host_organization_name', a string for the display name of the host organization. Output is a human-readable label for linking a source to its provider.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/sources/source-object.md#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\nhost_organization_name: \"Elsevier BV\" \n```\n\n----------------------------------------\n\nTITLE: Showing OpenAlex Work Type JSON Example\nDESCRIPTION: Example JSON for the `type` attribute of an OpenAlex Work object. This string specifies the work's type using the current OpenAlex controlled vocabulary, such as \"article\", \"preprint\", or \"paratext\", indicating the nature of the scholarly output.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/work-object/README.md#_snippet_42\n\nLANGUAGE: JSON\nCODE:\n```\ntype: \"article\"\n```\n\n----------------------------------------\n\nTITLE: Grouping Works by Type using OpenAlex API (URL)\nDESCRIPTION: This API call demonstrates the basic usage of the `group_by` parameter on the /works endpoint to count entities based on their 'type' property.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/how-to-use-the-api/get-groups-of-entities.md#_snippet_0\n\nLANGUAGE: URL\nCODE:\n```\nhttps://api.openalex.org/works?group_by=type\n```\n\n----------------------------------------\n\nTITLE: Filtering Works Available in a Specific Repository (OpenAlex API, HTTP)\nDESCRIPTION: Demonstrates filtering works based on their availability in a specific repository. The filter requires the OpenAlex ID of a source with 'type: repository'.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/filter-works.md#_snippet_30\n\nLANGUAGE: HTTP\nCODE:\n```\nhttps://api.openalex.org/works?filter=repository:S4306400393\n```\n\n----------------------------------------\n\nTITLE: Accessing Institutions API Endpoint in OpenAlex\nDESCRIPTION: A simple API endpoint URL to retrieve a list of all institutions indexed in OpenAlex. The endpoint returns institution data that can be further filtered or processed.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/institutions/README.md#_snippet_0\n\nLANGUAGE: url\nCODE:\n```\nhttps://api.openalex.org/institutions\n```\n\n----------------------------------------\n\nTITLE: Filtering Sources via API - Example\nDESCRIPTION: This snippet demonstrates how to filter sources by a specific field, `display_name`, using the `.search` suffix.  It retrieves sources with \"nature\" in their display name.  The URL specifies the filter parameter to refine the search based on a particular field.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/sources/search-sources.md#_snippet_1\n\nLANGUAGE: HTTP\nCODE:\n```\nhttps://api.openalex.org/sources?filter=display_name.search:nature\n```\n\n----------------------------------------\n\nTITLE: Displaying Extracted Documentation Filter Candidates in Python\nDESCRIPTION: Implicitly outputs the contents of the `docs_filters_candidates` dictionary. This dictionary maps the filenames of the documentation files to lists of strings that were extracted using the backtick regex pattern, representing potential filter keys or related terms mentioned in the documentation.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/scripts/notebooks/filters_align.ipynb#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ndocs_filters_candidates\n```\n\n----------------------------------------\n\nTITLE: Processing Extracted GUI Filters in Python\nDESCRIPTION: Transforms the list of matched pairs (`gui_matches`) obtained from the regex extraction into a structured list of dictionaries. It initializes an empty list `gui_filters` and iterates through `gui_matches`, creating a dictionary with 'key' and 'entityType' for each filter and appending it to the `gui_filters` list.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/scripts/notebooks/filters_align.ipynb#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ngui_filters = []\nfor key, entity_type in gui_matches:\n    gui_filters.append({\n        'key': key,\n        'entityType': entity_type,\n    })\n```\n\n----------------------------------------\n\nTITLE: Filtering Global South Sources in OpenAlex API\nDESCRIPTION: Example of using the is_global_south filter to find sources associated with the Global South region. This filter enables geographical filtering based on development classification.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/sources/filter-sources.md#_snippet_4\n\nLANGUAGE: url\nCODE:\n```\nhttps://api.openalex.org/sources?filter=is_global_south:true\n```\n\n----------------------------------------\n\nTITLE: Querying OpenAlex Autocomplete by ORCID ID URL\nDESCRIPTION: This URL example shows how the autocomplete endpoint can match entities when a standard external ID, such as an ORCID ID, is provided in the `q` parameter. The endpoint attempts to find the corresponding entity across all types.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/how-to-use-the-api/get-lists-of-entities/autocomplete-entities.md#_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nhttps://api.openalex.org/autocomplete?q=https://orcid.org/0000-0002-7436-3176\n```\n\n----------------------------------------\n\nTITLE: Downloading the Complete OpenAlex Snapshot using AWS CLI\nDESCRIPTION: Command to synchronize the entire OpenAlex S3 bucket to a local folder named 'openalex-snapshot', which requires approximately 300GB of disk space. No AWS account is needed as the --no-sign-request flag is used.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/download-all-data/download-to-your-machine.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naws s3 sync \"s3://openalex\" \"openalex-snapshot\" --no-sign-request\n```\n\n----------------------------------------\n\nTITLE: Retrieving Topic Entities Response Structure in JSON\nDESCRIPTION: Example response from the OpenAlex API when retrieving a list of topics. The response includes a meta object with pagination details, a results array containing Topic objects, and an empty group_by array.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/how-to-use-the-api/get-lists-of-entities/README.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nmeta: {\n    count: 4516,\n    db_response_time_ms: 81,\n    page: 1,\n    per_page: 25\n    },\nresults: [\n    // long list of Topic entities\n ],\ngroup_by: [] // empty\n```\n\n----------------------------------------\n\nTITLE: Reading Filter Documentation Files in Python\nDESCRIPTION: Reads the content of markdown documentation files related to filters for each OpenAlex entity. It iterates through `entity_endpoints`, uses `pathlib.Path` to search recursively (`rglob`) in the parent directory (`../../`) for files matching the pattern `filter-{entity}.md`, reads the text content of the first match found using `.read_text()`, and stores the text in the `docs_txt` dictionary with the filename as the key. Requires `pathlib` and `entity_endpoints`.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/scripts/notebooks/filters_align.ipynb#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndocs_txt = {}\nfor e in entity_endpoints:\n    fp = list(Path('../../').rglob(f'filter-{e}.md'))[0]\n    txt = fp.read_text()\n    docs_txt[fp.name] = txt\n```\n\n----------------------------------------\n\nTITLE: Declaring List of Documentation Sections to Ignore in Python\nDESCRIPTION: Defines ignore_docs as a list of strings naming markdown sections or documents to be excluded from processing. This is used to filter out irrelevant or redundant documentation sections during parsing.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/scripts/notebooks/scrape_docs.ipynb#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nignore_docs = [\n    'Geo',\n    'Get N-grams',\n    'Works with more than 100 authors are truncated',\n    'Location attributes',\n    'Authorship attributes',\n]\n```\n\n----------------------------------------\n\nTITLE: Sorting Concepts by Citation Count in OpenAlex API\nDESCRIPTION: This example shows how to sort concepts by their citation count in descending order using the `sort` parameter.  The `sort` parameter is set to `cited_by_count:desc` to achieve this.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/concepts/get-lists-of-concepts.md#_snippet_2\n\nLANGUAGE: HTTP\nCODE:\n```\nhttps://api.openalex.org/concepts?sort=cited_by_count:desc\n```\n\n----------------------------------------\n\nTITLE: Response Example of Global South Country Distribution in OpenAlex API\nDESCRIPTION: Example JSON response from the OpenAlex API showing the distribution of authors by country within the Global South region. The response includes country codes, display names, and author counts for countries like China, India, and Brazil.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/geo/regions.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n// all countries are in the Global South\n{\n  key: \"CN\",\n  key_display_name: \"China\",\n  count: 13926441\n},\n{\n  key: \"IN\",\n  key_display_name: \"India\",\n  count: 2632721\n},\n{\n  key: \"BR\",\n  key_display_name: \"Brazil\",\n  count: 2089957\n}...\n```\n\n----------------------------------------\n\nTITLE: Displaying Fetched GUI Source Code Text in Python\nDESCRIPTION: Implicitly outputs the raw text content (`r.text`) retrieved from the `facetConfigs.js` file hosted on GitHub. This allows inspection of the source text from which GUI filters are being extracted by the regular expression.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/scripts/notebooks/filters_align.ipynb#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nr.text\n```\n\n----------------------------------------\n\nTITLE: Illustrating `is_published` property (JSON)\nDESCRIPTION: Describes the `is_published` boolean property. It is true if this location's `version` is `publishedVersion`, indicating the version of record for the work.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/works/work-object/location-object.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\nis_published: true\n```\n\n----------------------------------------\n\nTITLE: Grouping Institutions by Continent - Response\nDESCRIPTION: This example shows the structure of a response when grouping institutions by continent. The `key` is the Wikidata ID, `key_display_name` the continent name, and `count` the number of institutions.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/api-entities/geo/continents.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  key: \"Q46\",\n  key_display_name: \"Europe\",\n  count: 41382\n},\n{\n  key: \"Q49\",\n  key_display_name: \"North America\",\n  count: 37458\n},\n{\n  key: \"Q48\",\n  key_display_name: \"Asia\",\n  count: 20432\n}...\n```\n\n----------------------------------------\n\nTITLE: OpenAlex Merged Entity IDs Directory Structure\nDESCRIPTION: This snippet displays the directory structure found within the `/data/merged_ids/` folder. It shows separate subfolders for different entity types, each containing date-stamped, gzip-compressed CSV files listing IDs that have been merged on specific dates.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/download-all-data/snapshot-data-format.md#_snippet_3\n\nLANGUAGE: Directory Structure\nCODE:\n```\n/data/merged_ids/\n├── authors\n│   └── 2022-06-07.csv.gz\n├── institutions\n│   └── 2022-06-01.csv.gz\n├── venues\n│   └── 2022-06-03.csv.gz\n└── works\n    └── 2022-06-06.csv.gz\n```\n\n----------------------------------------\n\nTITLE: Defining Base Directory Path\nDESCRIPTION: This snippet defines a base directory path using the `pathlib.Path` object. This path is used as the root directory for accessing files and directories related to the OpenAlex documentation.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/scripts/notebooks/moving_files.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nbasedir = Path(\"/home/hasone/code/ourresearch/openalex-docs\")\n```\n\n----------------------------------------\n\nTITLE: Reading and Parsing Markdown\nDESCRIPTION: This snippet reads the content of a Markdown file named `SUMMARY.md` and parses it using the `markdown` library. The resulting HTML content is stored in the variable `m`.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/scripts/notebooks/moving_files.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport markdown\nm = markdown.markdown(basedir.joinpath(\"SUMMARY.md\").read_text())\n```\n\n----------------------------------------\n\nTITLE: Regex Search and Length\nDESCRIPTION: This snippet uses a regular expression to search for whitespace at the beginning of a string. It compiles a regex pattern to find leading whitespace and then searches for the pattern in a specific string. The length of the captured whitespace group is then printed.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/scripts/notebooks/moving_files.ipynb#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\np = re.compile(r\"^(\\s*)\")\nm = p.search(\"    * [Postgres schema diagram](the-data-snapshot/upload-to-your-database/load-to-a-relational-database/postgres-schema-diagram.md)\")\nlen(m.group(1))\n```\n\n----------------------------------------\n\nTITLE: Displaying Loaded Documentation Filenames in Python\nDESCRIPTION: Implicitly outputs the keys of the `docs_txt` dictionary. This displays the names of the markdown documentation files (e.g., 'filter-works.md', 'filter-authors.md') whose contents were successfully read in the previous step.\nSOURCE: https://github.com/ourresearch/openalex-docs/blob/main/scripts/notebooks/filters_align.ipynb#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndocs_txt.keys()\n```"
  }
]