[
  {
    "owner": "wobsoriano",
    "repo": "svelte-clerk",
    "content": "TITLE: Wrapping SvelteKit App with ClerkProvider - Svelte\nDESCRIPTION: This Svelte snippet demonstrates how to wrap your application's root layout in ClerkProvider. This makes Clerk's authentication context available throughout the app to all children components and runes. To use, insert this in your main layout file and ensure all authentication-aware components are descendants of ClerkProvider. Requires the 'svelte-clerk' SDK.\nSOURCE: https://github.com/wobsoriano/svelte-clerk/blob/main/docs/ssr/quickstart.md#_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport type { Snippet } from 'svelte';\n\timport { ClerkProvider } from 'svelte-clerk';\n\n\tconst { children }: { children: Snippet } = $props();\n</script>\n\n<ClerkProvider>\n\t{@render children()}\n</ClerkProvider>\n```\n\n----------------------------------------\n\nTITLE: Integrating Clerk Authentication Handler in SvelteKit (TypeScript)\nDESCRIPTION: This snippet demonstrates how to register Clerk's authentication and authorization handler as a SvelteKit server hook using withClerkHandler from 'svelte-clerk/server'. It globally applies Clerk's middleware to handle authentication for all requests. Dependencies: svelte-clerk, SvelteKit. No parameters are required. The exported handle is provided to SvelteKit's server hooks. Options can be passed but environment variable configuration is recommended. Intended as a project-level integration step.\nSOURCE: https://github.com/wobsoriano/svelte-clerk/blob/main/docs/ssr/helpers.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { withClerkHandler } from 'svelte-clerk/server';\n\nexport const handle = withClerkHandler();\n```\n\n----------------------------------------\n\nTITLE: Protecting SvelteKit Routes on Server Side with Clerk - TypeScript\nDESCRIPTION: This TypeScript server loader checks for an authenticated userId from Clerk in locals.auth(). If userId is missing, it redirects the user to the sign-in page using a 307 status. Use this loader as part of any route that needs to be protected server-side. Requires SvelteKit's @sveltejs/kit and Clerk server integration.\nSOURCE: https://github.com/wobsoriano/svelte-clerk/blob/main/docs/ssr/quickstart.md#_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport { redirect } from '@sveltejs/kit';\n\nexport const load = async ({ locals }) => {\n\tconst { userId } = locals.auth();\n\n\tif (!userId) {\n\t\treturn redirect(307, '/sign-in');\n\t}\n\n\treturn {\n\t\tuserId\n\t};\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Clerk Request Handler in SvelteKit - TypeScript\nDESCRIPTION: This TypeScript snippet sets up a server-side request handler in SvelteKit using the withClerkHandler function provided by 'svelte-clerk/server'. Place this in hooks.server.ts to ensure authentication is processed on each server request. Requires that the 'svelte-clerk' SDK is installed and Clerk environment variables are set.\nSOURCE: https://github.com/wobsoriano/svelte-clerk/blob/main/docs/ssr/quickstart.md#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n// hooks.server.ts\nimport { withClerkHandler } from 'svelte-clerk/server';\n\nexport const handle = withClerkHandler();\n```\n\n----------------------------------------\n\nTITLE: Adding Clerk's Initial Auth State to SSR - TypeScript\nDESCRIPTION: This snippet defines a SvelteKit server layout loader that populates SSR context with Clerk auth state. By calling buildClerkProps(locals.auth()), you make the user's authentication state available for render and hydration, enabling SSR support. This loader should be placed in 'src/routes/+layout.server.ts' and requires 'svelte-clerk/server'.\nSOURCE: https://github.com/wobsoriano/svelte-clerk/blob/main/docs/ssr/quickstart.md#_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\n// src/routes/+layout.server.ts\nimport { buildClerkProps } from 'svelte-clerk/server';\nimport type { LayoutServerLoad } from './$types';\n\nexport const load: LayoutServerLoad = ({ locals }) => {\n\treturn {\n\t\t...buildClerkProps(locals.auth())\n\t};\n};\n```\n\n----------------------------------------\n\nTITLE: Adding ClerkProvider to Root Layout in Svelte\nDESCRIPTION: This Svelte component wraps the application with the ClerkProvider, providing context for authentication. It imports the ClerkProvider from 'svelte-clerk/client' and uses the PUBLIC_CLERK_PUBLISHABLE_KEY from environment variables.  All Clerk runes and components must be children of the ClerkProvider component.\nSOURCE: https://github.com/wobsoriano/svelte-clerk/blob/main/docs/spa/quickstart.md#_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport type { Snippet } from 'svelte';\n\timport { ClerkProvider } from 'svelte-clerk/client';\n\timport { PUBLIC_CLERK_PUBLISHABLE_KEY } from '$env/static/private';\n\n\tconst { children }: { children: Snippet } = $props();\n</script>\n\n<ClerkProvider publishableKey={PUBLIC_CLERK_PUBLISHABLE_KEY}>\n\t{@render children()}\n</ClerkProvider>\n```\n\n----------------------------------------\n\nTITLE: Checking Client-Side Authentication Status with Svelte Clerk (Svelte)\nDESCRIPTION: Uses `useClerkContext` from `svelte-clerk/client` to access the reactive Clerk context. Checks the `userId` derived from `ctx.auth` to determine if Clerk is loading, if the user is signed out (`null`), or signed in (string). Renders conditional UI based on the user's authentication state. Avoid destructuring the context (`ctx`) to maintain reactivity.\nSOURCE: https://github.com/wobsoriano/svelte-clerk/blob/main/docs/guides/read-session-data.md#_snippet_0\n\nLANGUAGE: Svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { useClerkContext } from 'svelte-clerk/client';\n\n\t// Do not destructure context to avoid losing reactivity\n\tconst ctx = useClerkContext();\n\n\tconst userId = $derived(ctx.auth.userId);\n</script>\n\n{#if isLoading}\n\t<p>Loading...</p>\n{:else if userId === null}\n\t<p>Sign in to view this page</p>\n{:else}\n\t<div>Hello, {userId}!</div>\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Building Clerk Props for SSR Authentication State (TypeScript)\nDESCRIPTION: This snippet illustrates using buildClerkProps from 'svelte-clerk/server' within a SvelteKit server load function to pass authentication state data to the client. It receives locals with user authentication info (from auth()), and returns an object with Clerk authentication props spread in. Dependencies: svelte-clerk/server. The locals parameter must include a valid auth function. Intended for use in root server load for SSR scenarios. Returns a props object suitable for Clerk client helpers.\nSOURCE: https://github.com/wobsoriano/svelte-clerk/blob/main/docs/ssr/helpers.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { buildClerkProps } from 'svelte-clerk/server';\n\nexport const load = async ({ locals }) => {\n\treturn {\n\t\t...buildClerkProps(locals.auth())\n\t};\n};\n```\n\n----------------------------------------\n\nTITLE: Using useClerkContext for Auth State & Token Retrieval (Svelte)\nDESCRIPTION: This snippet demonstrates how to use the `useClerkContext()` function from `svelte-clerk/client` to access the user ID and session token. It shows how to reactively derive the user ID and fetch a token using `ctx.session.getToken()` for authenticated API requests. The example uses conditional rendering based on authentication status.\nSOURCE: https://github.com/wobsoriano/svelte-clerk/blob/main/docs/spa/helpers.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { useClerkContext } from 'svelte-clerk/client';\n\n\t// Do not destructure context to avoid losing reactivity\n\tconst ctx = useClerkContext();\n\n\tconst userId = $derived(ctx.auth.userId);\n\n\tconst fetchDataFromExternalResource = async () => {\n\t\tconst token = await ctx.session.getToken();\n\t\tconst response = await fetch('https://api.example.com/data', {\n\t\t\theaders: {\n\t\t\t\tAuthorization: `Bearer ${token}`\n\t\t\t}\n\t\t});\n\t\treturn response.json();\n\t};\n</script>\n\n{#if userId === undefined}\n\t<p>Loading...</p>\n{:else if userId === null}\n\t<p>Sign in to view this page</p>\n{:else}\n\t<div>...</div>\n{/if}\n\n```\n\n----------------------------------------\n\nTITLE: Protecting SvelteKit Pages on Client Side with Clerk Components - Svelte\nDESCRIPTION: This Svelte snippet uses Clerk's prebuilt control components—SignedIn, SignedOut, SignInButton, and UserButton—to toggle UI elements based on the authentication state of the user. Place this code in a Svelte component, typically your layout or header, to selectively render sign-in/sign-out options. Requires the 'svelte-clerk' package and wrapping in ClerkProvider.\nSOURCE: https://github.com/wobsoriano/svelte-clerk/blob/main/docs/ssr/quickstart.md#_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { SignedIn, SignedOut, SignInButton, UserButton } from 'svelte-clerk';\n</script>\n\n<template>\n\t<header>\n\t\t<SignedOut>\n\t\t\t<SignInButton />\n\t\t</SignedOut>\n\t\t<SignedIn>\n\t\t\t<UserButton />\n\t\t</SignedIn>\n\t</header>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Fetching Clerk Backend User Object in SvelteKit Loader (TypeScript)\nDESCRIPTION: This code snippet shows how to use the clerkClient helper within a server load function to retrieve the currently signed-in user's details from Clerk's Backend SDK. It checks for user authentication using the auth() local, redirects to '/sign-in' if not authenticated, and fetches user data via clerkClient.users.getUser. Dependencies: svelte-clerk/server, @sveltejs/kit. Key parameter is locals, expected to contain auth information. Returns a user object (serialized via JSON). Only authenticated users can access, with 307 redirect fallback.\nSOURCE: https://github.com/wobsoriano/svelte-clerk/blob/main/docs/ssr/helpers.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { redirect } from '@sveltejs/kit';\nimport { clerkClient } from 'svelte-clerk/server';\n\nexport const load = async ({ locals }) => {\n\t// Use `auth()` local to get the user's ID\n\tconst { userId } = locals.auth();\n\n\t// Protect the route by checking if the user is signed in\n\tif (!userId) {\n\t\treturn redirect(307, '/sign-in');\n\t}\n\n\t// Use the Backend SDK's `getUser()` method to get the Backend User object\n\tconst user = await clerkClient.users.getUser(userId);\n\n\t// Return the Backend User object\n\treturn {\n\t\tuser: JSON.parse(JSON.stringify(user))\n\t};\n};\n```\n\n----------------------------------------\n\nTITLE: Fetching Server-Side User Data with Svelte Clerk (TypeScript)\nDESCRIPTION: Accesses the `userId` from `locals.auth()` within a SvelteKit load function to protect the route, redirecting unauthorized users. Uses the `clerkClient` from `svelte-clerk/server` to call the Clerk Backend API's `getUser` method, retrieving the full `Backend User` object for the authenticated user. Returns the user data for use in the Svelte component.\nSOURCE: https://github.com/wobsoriano/svelte-clerk/blob/main/docs/guides/read-session-data.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { redirect } from '@sveltejs/kit';\nimport { clerkClient } from 'svelte-clerk/server';\n\nexport const load = async ({ locals }) => {\n\tconst { userId } = locals.auth();\n\n\t// Protect the route by checking if the user is signed in\n\tif (!userId) {\n\t\treturn redirect(307, '/sign-in');\n\t}\n\n\t// Get the user's full `Backend User` object\n\tconst user = await clerkClient.users.getUser(userId);\n\n\treturn {\n\t\tuser: JSON.parse(JSON.stringify(user))\n\t};\n};\n```\n\n----------------------------------------\n\nTITLE: Using Clerk Components for SvelteKit Static Adapter\nDESCRIPTION: Demonstrates how to use Clerk components like ClerkProvider, SignedIn, SignedOut, UserButton, and SignInButton with the SvelteKit static adapter. It shows importing components from 'svelte-clerk/client' and conditionally rendering UI based on the user's authentication status.\nSOURCE: https://github.com/wobsoriano/svelte-clerk/blob/main/CHANGELOG.md#_snippet_0\n\nLANGUAGE: Svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport type { Snippet } from '@svelte';\n\timport {\n\t\tClerkProvider,\n\t\tSignedIn,\n\t\tSignedOut,\n\t\tUserButton,\n\t\tSignInButton\n\t} from 'svelte-clerk/client'; // import from /client\n</script>\n\n<ClerkProvider>\n\t<SignedIn>\n\t\t<UserButton />\n\t\t<p>Welcome back!</p>\n\t</SignedIn>\n\t<SignedOut>\n\t\t<SignInButton mode=\"modal\" />\n\t</SignedOut>\n</ClerkProvider>\n```\n\n----------------------------------------\n\nTITLE: Creating a Header with Clerk Components in Svelte\nDESCRIPTION: This snippet demonstrates how to create a header with Clerk components for signed-in and signed-out users.  It imports SignedIn, SignedOut, SignInButton, and UserButton from 'svelte-clerk/client'. The components conditionally render UI elements based on the user's authentication status.\nSOURCE: https://github.com/wobsoriano/svelte-clerk/blob/main/docs/spa/quickstart.md#_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { SignedIn, SignedOut, SignInButton, UserButton } from 'svelte-clerk/client';\n</script>\n\n<template>\n\t<header>\n\t\t<SignedOut>\n\t\t\t<SignInButton />\n\t\t</SignedOut>\n\t\t<SignedIn>\n\t\t\t<UserButton />\n\t\t</SignedIn>\n\t</header>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Redirects with Svelte Clerk\nDESCRIPTION: Illustrates the usage of the RedirectToSignIn component to automatically redirect unsigned-in users to the sign-in page. It uses SignedIn and SignedOut components to conditionally render content or trigger the redirect based on the authentication state.\nSOURCE: https://github.com/wobsoriano/svelte-clerk/blob/main/CHANGELOG.md#_snippet_2\n\nLANGUAGE: Svelte\nCODE:\n```\n<script>\n\timport { RedirectToSignIn, SignedIn, SignedOut } from 'svelte-clerk';\n</script>\n\n<SignedIn>\n\t<div>Signed in</div>\n</SignedIn>\n<SignedOut>\n\t<RedirectToSignIn />\n</SignedOut>\n```\n\n----------------------------------------\n\nTITLE: Adding Clerk Types to App Locals - TypeScript\nDESCRIPTION: This TypeScript declaration file snippet is added to 'app.d.ts' to augment the App namespace with Clerk types. Including '<reference types=\"svelte-clerk/env\" />' ensures proper type support for Clerk's additions to SvelteKit's server-side locals, enhancing type safety for authentication across the codebase.\nSOURCE: https://github.com/wobsoriano/svelte-clerk/blob/main/docs/ssr/quickstart.md#_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\n/// <reference types=\"svelte-clerk/env\" />\n\ndeclare global {\n\tnamespace App {...}\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Current User in SvelteKit Server Load Function\nDESCRIPTION: Demonstrates how to use the currentUser() helper function within a SvelteKit +page.server.ts load function. This function accesses the authenticated user information from event.locals, which can then be passed as data to the Svelte page component.\nSOURCE: https://github.com/wobsoriano/svelte-clerk/blob/main/CHANGELOG.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n// src/routes/user/+page.server.ts\nexport const load = async ({ locals }) => {\n\tconst user = await locals.currentUser();\n\n\treturn {\n\t\tuser\n\t};\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing the Protect Component in Svelte Clerk\nDESCRIPTION: An example showing how to use the Protect component with a custom fallback message. The component restricts access to content based on user permissions, displaying the fallback content when the user lacks the required permission.\nSOURCE: https://github.com/wobsoriano/svelte-clerk/blob/main/docs/spa/components.md#_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Protect } from 'svelte-clerk/client';\n</script>\n\n<template>\n\t<Protect permission=\"org:invoices:create\">\n\t\t{#snippet fallback()}\n\t\t\t<p>You do not have the permissions to create an invoice.</p>\n\t\t{/snippet}\n\t</Protect>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Adding OrganizationList Component in Svelte\nDESCRIPTION: Shows how to import and use the OrganizationList component provided by svelte-clerk within a Svelte template. This component is typically used to display a list of organizations the authenticated user belongs to.\nSOURCE: https://github.com/wobsoriano/svelte-clerk/blob/main/CHANGELOG.md#_snippet_1\n\nLANGUAGE: Svelte\nCODE:\n```\n<script>\n\timport { OrganizationList } from 'svelte-clerk';\n</script>\n\n<OrganizationList />\n```\n\n----------------------------------------\n\nTITLE: Configuring Clerk API Keys in .env - Shell\nDESCRIPTION: This example shows the environment variable assignments necessary for authenticating your application with Clerk. Place these lines in your .env file, substituting your actual publishable and secret keys from the Clerk dashboard. These keys allow the SDK to access Clerk APIs for authentication and session management.\nSOURCE: https://github.com/wobsoriano/svelte-clerk/blob/main/docs/ssr/quickstart.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nPUBLIC_CLERK_PUBLISHABLE_KEY=pk_test_xxxxxxxx\nCLERK_SECRET_KEY=sk_test_xxxxxxx\n```\n\n----------------------------------------\n\nTITLE: Setting Clerk Publishable Key in .env\nDESCRIPTION: This snippet demonstrates how to set the Clerk Publishable Key within a .env file.  This key is required for client-side authentication.  The value should be retrieved from the Clerk Dashboard. The .env file is typically used to store environment variables, making it easy to manage different configurations.\nSOURCE: https://github.com/wobsoriano/svelte-clerk/blob/main/docs/spa/quickstart.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nPUBLIC_CLERK_PUBLISHABLE_KEY=pk_test_xxxxxxxx\n```\n\n----------------------------------------\n\nTITLE: Installing Svelte Clerk SDK using npm - Shell\nDESCRIPTION: This snippet illustrates how to install the 'svelte-clerk' package using npm, which is the main dependency required for adding Clerk authentication to a SvelteKit project. Run this command in your project root before attempting any other Clerk integration steps. The output will install the SDK and all dependencies as defined in your package.json.\nSOURCE: https://github.com/wobsoriano/svelte-clerk/blob/main/docs/ssr/quickstart.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install svelte-clerk\n```\n\n----------------------------------------\n\nTITLE: Installing svelte-clerk via npm\nDESCRIPTION: This snippet installs the svelte-clerk SDK, which provides prebuilt components, runes, and helpers for user authentication.  The command uses npm, the Node Package Manager, to download and install the package.  This is a prerequisite for using Clerk features within the Svelte application.\nSOURCE: https://github.com/wobsoriano/svelte-clerk/blob/main/docs/spa/quickstart.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install svelte-clerk\n```\n\n----------------------------------------\n\nTITLE: Starting SvelteKit Development Server - Shell\nDESCRIPTION: This shell command starts the SvelteKit application in development mode, enabling live reloading and access to all authentication logic as configured with Clerk. Use this after completing setup to test your Clerk integration locally.\nSOURCE: https://github.com/wobsoriano/svelte-clerk/blob/main/docs/ssr/quickstart.md#_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Running the Svelte Development Server via npm\nDESCRIPTION: This snippet provides the command to run the Svelte development server.  The command `npm run dev` starts the development server, allowing you to view and test your Svelte application locally. This command typically leverages the Vite build tool which is configured for Svelte.\nSOURCE: https://github.com/wobsoriano/svelte-clerk/blob/main/docs/spa/quickstart.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```"
  }
]