[
  {
    "owner": "meltano",
    "repo": "meltano",
    "content": "TITLE: Set Metadata for Data Extraction with Meltano Config\nDESCRIPTION: These commands use `meltano config` to set metadata for entities. The first set of commands sets the `replication-method` for specific entities (`some_entity_id`, `other_entity`). The second set sets the `replication-method` for all entities and matching entities (ending in `_full`). This metadata controls how data is replicated (e.g., incremental or full table).\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/integration.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmeltano config <plugin> set _metadata <entity> replication-method <LOG_BASED|INCREMENTAL|FULL_TABLE>\n\n# For example:\nmeltano config tap-postgres set _metadata some_entity_id replication-method INCREMENTAL\nmeltano config tap-postgres set _metadata other_entity replication-method FULL_TABLE\n\n# Set replication-method metadata for all entities\nmeltano config tap-postgres set _metadata '*' replication-method INCREMENTAL\n\n# Set replication-method metadata for matching entities\nmeltano config tap-postgres set _metadata '*_full' replication-method FULL_TABLE\n```\n\n----------------------------------------\n\nTITLE: Setting Configuration with Environment Variable Bash\nDESCRIPTION: This bash snippet demonstrates how to configure a plugin setting by setting an environment variable. The environment variable name follows the pattern `<PLUGIN_NAME>_<SETTING_NAME>`, with non-alphanumeric characters replaced by underscores. For instance, `TAP_GITLAB_API_URL` is used to configure the `api_url` setting for the `tap-gitlab` extractor.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/configuration.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\nexport <PLUGIN_NAME>_<SETTING_NAME>=<value>\n\n# For example:\nexport TAP_GITLAB_API_URL=https://gitlab.example.com\n```\n\n----------------------------------------\n\nTITLE: Configure dbt settings interactively with Meltano\nDESCRIPTION: These commands configure dbt settings interactively for specific Meltano environments (e.g., `dev`, `prod`). It uses the `meltano config` command with the `--interactive` flag, guiding users through the configuration process.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/transformation.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# configure the `dev` environment interactively\nmeltano --environment=dev config dbt-snowflake set --interactive\n\n# configure the `prod` environment interactively\nmeltano --environment=prod config dbt-snowflake set --interactive\n```\n\n----------------------------------------\n\nTITLE: Running a Full Meltano Pipeline\nDESCRIPTION: This command runs the entire Meltano pipeline, including the tap (tap-github), target (target-postgres), and dbt transformation (dbt-postgres:run). The `--full-refresh` flag ensures that any previous state is ignored, forcing a complete re-extraction and loading of data.  The pipeline consists of extraction, loading, and transformation stages, and successful completion results in data being moved from the source (GitHub) to the destination (PostgreSQL) and transformed using dbt.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/getting-started/part3.mdx#_snippet_17\n\nLANGUAGE: console\nCODE:\n```\n$ meltano run --full-refresh tap-github target-postgres dbt-postgres:run\n[warning  ] Performing full refresh, ignoring state left behind by any previous runs.\n\n [info     ] INFO Starting sync of repository: sbalnojan/meltano-lightdash\n <font color=\"red\">[...]</font>\n[info     ] INFO METRIC: {\"type\": \"timer\", \"metric\": \"http_request_duration\",[...]\n\n[info     ] INFO METRIC: {\"type\": \"counter\", \"metric\": \"record_count\", \"value\": 21 [...]\n\n[info     ] time=2024-09-22 12:42:57 name=target_postgres level=INFO message=Table '\\\"commits\\\"' [...]\n\n[...]\n---> 100%\n[info     ] Incremental state has been updated at 2024-09-22 12:42:58.260520.\n[info     ] Block run completed.           block_type=ExtractLoadBlocks err=None set_number=0 success=True\n[info     ] 12:43:19  Running with dbt=1.1.2 cmd_type=command name=dbt-postgres stdio=stderr\n\n[info     ] 12:43:20  Found 1 model, [...]\n\n[info     ] 12:43:20                       cmd_type=command name=dbt-postgres stdio=stderr\n\n[info     ] 12:43:20  Concurrency: 2 threads (target='dev') cmd_type=command name=dbt-postgres stdio=stderr\n\n[info     ] 12:43:20                       cmd_type=command name=dbt-postgres stdio=stderr\n\n[info     ] 12:43:20  1 of 1 START table model analytics.authors ..................................... [RUN] [...]\n---> 100%\n[info     ] 12:43:21  1 of 1 OK created table model analytics.authors .........[...]\n\n[info     ] 12:43:21                       cmd_type=command name=dbt-postgres stdio=stderr\n\n[info     ] 12:43:21  Finished running 1 table model in 1.34s. cmd_type=command name=dbt-postgres stdio=stderr\n\n[info     ] 12:43:21                       cmd_type=command name=dbt-postgres stdio=stderr\n\n[info     ] 12:43:21  Completed successfully cmd_type=command name=dbt-postgres stdio=stderr\n\ninfo     ] 12:43:21                       cmd_type=command name=dbt-postgres stdio=stderr\n\n[info     ] 12:43:21  Done. PASS=1 WARN=0 ERROR=0 SKIP=0 TOTAL=1 cmd_type=command name=dbt-postgres stdio=stderr\n\n[info     ] Block run completed.           block_type=InvokerCommand err=None set_number=1 success=True\n```\n\n----------------------------------------\n\nTITLE: Setting Aliases Definition YAML\nDESCRIPTION: This YAML snippet shows how to define aliases for plugin settings using the `aliases` key. The `my_custom_tap_username` setting has two aliases: `custom_tap_username` and `username`. This allows the setting to be configured using any of these three names.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/configuration.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\n# meltano.yml\n---\nplugins:\n  extractors:\n  - name: my-custom-tap\n    namespace: my_custom_tap\n    pip_url: git+https://github.com/my-organization/my-custom-tap.git\n    executable: my-custom-tap\n    capabilities:\n    - discover\n    - catalog\n    settings:\n    - name: password\n      kind: string\n      sensitive: true\n    - name: my_custom_tap_username\n      aliases: [custom_tap_username, username]\n```\n\n----------------------------------------\n\nTITLE: Custom Plugin Definition in meltano.yml\nDESCRIPTION: This YAML snippet demonstrates a custom plugin definition within a `meltano.yml` file. It defines an extractor named `tap-covid-19` with specific properties such as `namespace`, `pip_url`, `executable`, `capabilities`, and `settings`. This configuration allows Meltano to use the specified package as a plugin.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/plugin-management.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nplugins:\n  extractors:\n  # highlight-start\n  - name: tap-covid-19\n    namespace: tap_covid_19\n    pip_url: tap-covid-19\n    executable: tap-covid-19\n    capabilities:\n    - catalog\n    - discover\n    - state\n    settings:\n    - name: api_token\n    - name: user_agent\n    - name: start_date\n  # highlight-end\n```\n\n----------------------------------------\n\nTITLE: Add dbt Transformer Utility - Meltano\nDESCRIPTION: This command adds the adapter-specific dbt variant (e.g., dbt-postgres) as a Meltano utility. This is a prerequisite for using dbt within Meltano to perform data transformations. Replace `<adapter_name>` with the appropriate adapter, such as `postgres` or `snowflake`.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/migrate-an-existing-dbt-project.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmeltano add utility dbt-<adapter_name>\n\n# For example\nmeltano add utility dbt-postgres\n```\n\n----------------------------------------\n\nTITLE: Plugin Config with Environment Variables in YAML\nDESCRIPTION: This YAML snippet demonstrates how to use environment variables within a plugin's `config` section in `meltano.yml`. It shows the different syntax options for variable expansion and how to reference environment variables like `MELTANO_EXTRACTOR_NAME`, `MELTANO_EXTRACTOR_NAMESPACE`, and `MELTANO_PROJECT_ROOT`.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/configuration.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nextractors:\n- name: tap-example\n  config:\n    simple_setting: $MELTANO_EXTRACTOR_NAME\n    multiple_words: $MELTANO_EXTRACTOR_NAMESPACE foo\n    part_of_a_path: $MELTANO_PROJECT_ROOT/example.txt\n    inside_a_word: ${MELTANO_EXTRACTOR_NAMESPACE}_foo\n```\n\n----------------------------------------\n\nTITLE: List dbt settings with Meltano CLI\nDESCRIPTION: This command lists the available configuration settings for a dbt utility plugin (e.g., dbt-snowflake) using the `meltano config` command. It allows users to inspect the configurable parameters of the plugin.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/transformation.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# list available settings\nmeltano config dbt-snowflake list\n```\n\n----------------------------------------\n\nTITLE: Running Custom Bash Script as Meltano Utility\nDESCRIPTION: This YAML configuration demonstrates how to define a custom utility in `meltano.yml` to run Bash scripts.  It defines a utility called `my_script_util` with two commands: `ls_directory` and `remove_directory`. The `executable` is set to `/bin/bash`, and the `args` specify the Bash commands to execute (listing the directory and removing the `target` directory recursively, respectively).\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/advanced-topics.mdx#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nutilities:\n- name: my_script_util\n  namespace: my_script_util\n  commands:\n    ls_directory:\n      executable: /bin/bash\n      args: -c ls\n    remove_directory:\n      executable: /bin/bash\n      args: -c \"rm -rf target\"\n```\n\n----------------------------------------\n\nTITLE: Configure Extractor Selection Rules in meltano.yml\nDESCRIPTION: This YAML snippet demonstrates how selection rules are stored within the `meltano.yml` project file. It shows examples of including specific attributes of the `commits` entity, including all attributes of the `tags` entity, and excluding attributes ending in `_url`.  These rules dictate which data is extracted by the tap.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/integration.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nextractors:\n          - name: tap-gitlab\n            config:\n              projects: meltano/meltano meltano/tap-gitlab\n              start_date: \"2024-03-01T00:00:00Z\"\n            select:\n              - commits.id\n              - commits.project_id\n              - commits.created_at\n              - commits.author_name\n              - commits.message\n              - tags.*\n              - \"!*.*_url\"\n```\n\n----------------------------------------\n\nTITLE: Configure setting values in meltano.yml using environment variables\nDESCRIPTION: This snippet demonstrates how to configure plugin settings by referencing environment variables in the `meltano.yml` file. This is recommended as a replacement for `env_aliases`, which are being deprecated in Meltano 2.0.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/v2-migration.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nplugins:\n  extractors:\n    - name: tap-gitlab\n      config:\n        ultimate_license: $GITLAB_API_ULTIMATE_LICENSE\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Mapping in meltano.yml\nDESCRIPTION: This snippet shows how to define an `env` mapping within an environment to inject environment variables into the plugin's runtime environment. Project-set environment variables referenced in the env mapping will be expanded.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/concepts/environments.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nenvironments:\n  - name: dev\n    env:\n      MY_ENV_VAR: $MELTANO_PROJECT_ROOT/path/to/a/file.json\n```\n\n----------------------------------------\n\nTITLE: Build Docker Image for Meltano Project\nDESCRIPTION: Builds a Docker image containing Meltano, the project, and all of its plugins using the `docker build` command. The image is tagged as `meltano-demo-project:dev`.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/containerization.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker build --tag meltano-demo-project:dev .\n```\n\n----------------------------------------\n\nTITLE: Plugin Configuration with Config and Extras in YAML\nDESCRIPTION: This snippet demonstrates how to define a plugin's configuration and extras within a YAML file. It shows the `config` property for configuration settings and the direct properties for plugin extras.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/concepts/project.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nextractors:\n- name: tap-example\n  # highlight-start\n  config:\n    # Configuration goes here!\n    example_setting: value\n  # Extras go here!\n  example_extra: value\n  # highlight-end\n```\n\n----------------------------------------\n\nTITLE: Explicit Plugin Inheritance with Meltano CLI\nDESCRIPTION: These commands illustrate how to explicitly inherit from a discoverable plugin using the `--inherit-from` or `--as` options with `meltano add`. This allows giving the plugin a more descriptive name.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/plugin-management.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmeltano add <type> <name> --inherit-from <discoverable-name>\n# Or equivalently:\nmeltano add <type> <discoverable-name> --as <name>\n\n# For example:\nmeltano add extractor tap-postgres--billing --inherit-from tap-postgres\nmeltano add extractor tap-postgres --as tap-postgres--billing\n```\n\n----------------------------------------\n\nTITLE: Example: Configuring target-snowflake for different environments\nDESCRIPTION: This snippet shows example configurations for the `target-snowflake` loader when using the `prod` and `dev` environments, demonstrating how environment-specific settings are applied when invoking a command with the `--environment` flag.  The configs show different database names, warehouses, and batch sizes for prod and dev.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/concepts/environments.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ meltano --environment=prod config target-snowflake\n{\n  \"dbname\": \"prod\",\n  \"warehouse\": \"prod_wh\",\n  \"batch_size_rows\": 100000\n}\n```\n\nLANGUAGE: console\nCODE:\n```\n$ meltano --environment=dev config target-snowflake\n{\n  \"dbname\": \"dev\",\n  \"warehouse\": \"dev_wh\",\n  \"batch_size_rows\": 1000\n}\n```\n\n----------------------------------------\n\nTITLE: Define a dbt plugin command in meltano.yml\nDESCRIPTION: This YAML snippet defines a custom plugin command for a dbt utility plugin within the `meltano.yml` file.  The command `my_models` is configured to run dbt with specific selection filters, enabling the execution of a subset of the dbt project. It leverages the dbt node selection syntax.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/transformation.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# meltano.yml\nplugins:\n  utilities:\n    - name: dbt-snowflake\n      commands:\n        my_models:\n          args: run --select +my_model_name\n          description: Run dbt, selecting model `my_model_name` and all upstream models. Read more about the dbt node selection syntax at https://docs.getdbt.com/reference/node-selection/syntax\n```\n\n----------------------------------------\n\nTITLE: Configure Extractor Metadata in meltano.yml\nDESCRIPTION: This YAML snippet demonstrates how metadata rules are stored within the `meltano.yml` project file. It shows examples of setting `replication-method` and `replication-key` for `some_entity_id` and `other_entity`, as well as applying rules to all entities and entities ending with `_full`.  These metadata settings influence the replication behavior of the tap.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/integration.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nextractors:\n          - name: tap-postgres\n            metadata:\n              some_entity_id:\n                replication-method: INCREMENTAL\n                replication-key: id\n              other_entity:\n                replication-method: FULL_TABLE\n              \"*\":\n                replication-method: INCREMENTAL\n              \"*_full\":\n                replication-method: FULL_TABLE\n```\n\n----------------------------------------\n\nTITLE: Install and Initialize Airflow with Meltano\nDESCRIPTION: These commands install the Airflow utility plugin in Meltano and initialize it.  It also creates an admin user for Airflow. This makes Airflow available for orchestration within the Meltano project.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/orchestration.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmeltano add utility airflow\nmeltano invoke airflow:initialize\nmeltano invoke airflow users create -u admin@localhost -p password --role Admin -e admin@localhost -f admin -l admin\n```\n\n----------------------------------------\n\nTITLE: Running Meltano for Full Refresh of GitHub to Postgres\nDESCRIPTION: This command executes a full refresh run in Meltano, extracting data from the 'tap-github' source and loading it into the 'target-postgres' destination. The `--full-refresh` flag ensures that all existing data in the target is replaced with the newly extracted data, guaranteeing data consistency.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/getting-started/part3.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmeltano run --full-refresh tap-github target-postgres\n```\n\n----------------------------------------\n\nTITLE: Start the Airflow Scheduler via Meltano\nDESCRIPTION: This command starts the Airflow scheduler through Meltano. The scheduler is responsible for running pipelines based on their defined schedules.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/orchestration.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmeltano invoke airflow scheduler\n```\n\n----------------------------------------\n\nTITLE: Add dbt transformer plugin with Meltano\nDESCRIPTION: This command adds a dbt transformer plugin to your Meltano project using the `meltano add transformer` command.  It specifies the name of the dbt adapter (e.g., `dbt-snowflake`) to be installed as a transformer.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/transformation.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmeltano add transformer dbt-<adapter-name>\n\n# For example:\n\nmeltano add transformer dbt-snowflake\n```\n\n----------------------------------------\n\nTITLE: Run a Meltano Schedule Manually\nDESCRIPTION: This command allows you to run a defined Meltano schedule immediately. This is useful for testing or for running a pipeline outside of its scheduled interval.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/orchestration.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmeltano schedule run daily-gitlab-load\n```\n\n----------------------------------------\n\nTITLE: Execute Jupyter Notebooks via nbconvert (YAML)\nDESCRIPTION: This YAML snippet configures the JupyterLab plugin to execute notebooks using `nbconvert`.  It adds an `execute` command to the plugin definition, specifying the arguments to convert the notebook to a notebook format and execute it. It requires nbconvert installed.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/tutorials/jupyter.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n  - name: jupyterlab\n    namespace: jupyterlab\n    pip_url: jupyterlab pandas matplotlib sqlalchemy psycopg2-binary papermill\n    executable: jupyter\n    commands:\n      launch_ip0:\n        args: lab --ip=0.0.0.0\n        description: Start lab server, on any ip range for Mac users inside docker.\n      launch:\n        args: lab\n        description: Start lab server\n      execute:\n        args: nbconvert --to notebook --execute notebook/sql_magic.ipynb\n        description: Start lab server\n\n```\n\n----------------------------------------\n\nTITLE: Invoking dbt with Meltano\nDESCRIPTION: This snippet demonstrates how to directly invoke dbt commands using Meltano. It requires the `dbt` transformer to be installed and configured within the Meltano project. The command executes dbt models within a specified directory, such as `tap_gitlab`.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/transformation.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nmeltano invoke dbt:<command>\n\n# For example:\nmeltano invoke dbt:run --models tap_gitlab.*\n```\n\n----------------------------------------\n\nTITLE: Listing Available Entities and Attributes with Meltano Select\nDESCRIPTION: This command lists all available entities and attributes for the specified tap (extractor). The `--list` flag enables listing, and `--all` ensures all attributes are shown. This helps in determining which data points can be extracted.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/getting-started/part1.mdx#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nmeltano select tap-github --list --all\n```\n\n----------------------------------------\n\nTITLE: Installing Meltano Using pipx\nDESCRIPTION: This snippet shows how to install Meltano using the `pipx` tool, which is a wrapper around pip that installs executable Python applications into their own virtual environments.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/getting-started/installation.mdx#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ pipx install \"meltano\"\n---> 100%\nsuccessfully installed meltano\n```\n\n----------------------------------------\n\nTITLE: Run a dbt plugin command with Meltano\nDESCRIPTION: This command executes a pre-defined dbt plugin command (e.g., `dbt-snowflake:my_models`) using the `meltano run` command. It triggers the execution of dbt with the configurations specified in the corresponding plugin command defined in `meltano.yml`.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/transformation.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmeltano --environment=dev run tap-gitlab target-snowflake dbt-snowflake:my_models\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Meltano Pipeline (bash)\nDESCRIPTION: This code snippet demonstrates how to set environment variables before running a Meltano pipeline. It exports environment variables for a tap and then executes the `meltano run` command. Alternatively, it shows how to set environment variables inline with the `meltano run` command. This allows for pipeline-specific configuration of extractors and loaders.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/integration.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nexport TAP_FOO_BAR=bar\nexport TAP_FOO_BAZ=baz\n\n# For example overriding a start date\nexport TAP_GITHUB_START_DATE=\"2023-01-01\"\n\nmeltano run ...\n\nTAP_FOO_BAR=bar TAP_FOO_BAZ=baz meltano run ...\n```\n\n----------------------------------------\n\nTITLE: Defining Jobs in meltano.yml\nDESCRIPTION: This YAML snippet illustrates how to define jobs within the `meltano.yml` file. Jobs define a sequence of tasks to be executed. Each job has a `name` and a list of `tasks`, where each task is a command to be run.  These jobs can be referenced by schedules.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/concepts/project.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  - name: tap-foo-to-target-bar-dbt\n    tasks:\n      - tap-foo target-bar dbt:run\n  - name: tap-foo-to-targets-bar-and-baz\n    tasks:\n      - tap-foo target-bar\n      - tap-foo target-baz\n```\n\n----------------------------------------\n\nTITLE: Overriding Discoverable Plugin Properties in meltano.yml\nDESCRIPTION: This YAML snippet demonstrates how to override properties of discoverable plugins in the `meltano.yml` file.  It shows how to override capabilities and extend default settings for an extractor plugin. The overrides replace the values stored in the lockfile, except for `settings`, which extend the base definitions.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/configuration.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nplugins:\n  extractors:\n  - name: tap-example\n    variant: meltanolabs\n    capabilities:  # This will override the capabilities declared in the lockfile\n    - state\n    - discover\n    - catalog\n    settings:  # These will be appended to the settings declared in the lockfile\n    - name: my-new-setting\n      kind: object\n      value:\n        key: value\n```\n\n----------------------------------------\n\nTITLE: Multiple Plugin Variants with Meltano CLI\nDESCRIPTION: These commands show how to add multiple variants of the same discoverable plugin using `--variant` and `--as` options. Each variant is added with a unique name.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/plugin-management.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmeltano add loader target-snowflake --variant=transferwise --as target-snowflake--transferwise\nmeltano add loader target-snowflake --variant=meltano --as target-snowflake--meltano\n```\n\n----------------------------------------\n\nTITLE: Reinstalling a Plugin Using Meltano CLI\nDESCRIPTION: Shows the usage of `meltano install` to reinstall the plugin after modification. Reinstalling the plugin will apply the changes made in `meltano.yml`.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/plugin-management.md#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nmeltano install [<type>|-] <name>\n\n# For example:\nmeltano install extractor tap-gitlab\n```\n\n----------------------------------------\n\nTITLE: Run a complete ELT pipeline with dbt\nDESCRIPTION: This command runs a complete ELT (Extract, Load, Transform) pipeline using the `meltano run` command. It specifies the extractor (e.g., `tap-gitlab`), loader (e.g., `target-snowflake`), and the dbt transformer (`dbt-snowflake:run`) to execute.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/transformation.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# run a complete ELT pipeline using the `dev` environment config\nmeltano --environment=dev run tap-gitlab target-snowflake dbt-snowflake:run\n```\n\n----------------------------------------\n\nTITLE: Activating an environment using the MELTANO_ENVIRONMENT variable\nDESCRIPTION: This snippet demonstrates how to activate a specific environment by setting the `MELTANO_ENVIRONMENT` environment variable. It sets the variable to 'dev' and then runs the `tap-github` extractor and `target-sqlite` loader.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/concepts/environments.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport MELTANO_ENVIRONMENT=dev\nmeltano run tap-github target-sqlite\n```\n\n----------------------------------------\n\nTITLE: Run Meltano Pipeline\nDESCRIPTION: This command runs a Meltano pipeline using the 'tap-github' extractor and the 'target-postgres' loader. It extracts data from GitHub and loads it into the configured PostgreSQL database.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/getting-started/part2.mdx#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ meltano run tap-github target-postgres\n2024-09-20T13:16:13.885045Z [warning  ] No state was found, complete import.\n2024-09-20T13:16:15.441183Z [info     ] INFO Starting sync of repository: [...]\n2024-09-20T13:16:15.901789Z [info     ] INFO METRIC: {\"type\": \"timer\", \"metric\": \"http_request_duration\",[...]\n---> 100%\n2024-09-20T13:16:15.933874Z [info     ] INFO METRIC: {\"type\": \"counter\", \"metric\": \"record_count\", \"value\": 21,[...]\n2024-09-20T13:16:16.435885Z [info     ] [...] message=Schema 'tap_github' does not exist. Creating... ...\n2024-09-20T13:16:16.632945Z [info     ] ... message=Table '\"commits\"' does not exist. Creating...\n2024-09-20T13:16:16.729076Z [info     ] ...message=Loading 21 rows into 'tap_github.\"commits\"' ...\n---> 100%\n2024-09-20T13:16:16.864812Z [info     ] ...Loading into tap_github.\"commits\": {\"inserts\": 21, \"updates\": 0, \"size_bytes\": 4641} ...\n2024-09-20T13:16:16.885846Z [info     ] Incremental state has been updated at 2024-09-20 13:16:16.885259.\n2024-09-20T13:16:16.960093Z [info     ] Block run completed.           ....\n```\n\n----------------------------------------\n\nTITLE: Pinning PyPI Package Version in Meltano\nDESCRIPTION: Demonstrates how to pin a specific version of a plugin installed from PyPI by adding a version specifier to the `pip_url` in the `meltano.yml` file. This ensures that a specific version is always installed.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/plugin-management.md#_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n# Before:\npip_url: tap-shopify\n\n# After:\n# highlight-next-line\npip_url: tap-shopify==1.2.6 # Always install version 1.2.6\n\n# Alternatively:\n# highlight-next-line\npip_url: tap-shopify~=1.2.6 # Install 1.2.6 or a newer version in the 1.2.x range\n```\n\n----------------------------------------\n\nTITLE: Example logging.yaml configuration\nDESCRIPTION: This is an example of a complete `logging.yaml` file demonstrating various formatters, handlers, loggers and root logger configurations.  It shows how to configure different output formats (e.g., colored console, JSON) and destinations (console, files) for log messages in Meltano.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/logging.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 1\ndisable_existing_loggers: false\n\nformatters:\n  default: # use a format similar to default generic python logging format\n    format: \"[%(asctime)s] [%(process)d|%(threadName)10s|%(name)s] [%(levelname)s] %(message)s\"\n  structured_colored:\n    (): meltano.core.logging.console_log_formatter\n    colors: true\n  structured_plain_no_locals: # log format for structured plain text logs without colored output and without local variables\n    (): meltano.core.logging.console_log_formatter\n    colors: false # also disables `rich` traceback formatting\n    show_locals: false # disables local variable logging in tracebacks (which be very verbose and leak sensitive data)\n  structured_locals: # log format for structured plain text logs WITH local variables\n    (): meltano.core.logging.console_log_formatter\n    colors: true # also enables traceback formatting with `rich`\n    show_locals: true # enables local variable logging in tracebacks (can be very verbose and leak sensitive data)\n  key_value: # log format for traditional key=value style logs\n    (): meltano.core.logging.key_value_formatter\n    sort_keys: false\n  json: # log format for json formatted logs\n    (): meltano.core.logging.json_formatter\n    callsite_parameters: true # adds `pathname`, `lineno`, `func_name` and `process` to each log entry\n    dict_tracebacks: false # removes the `exception` object that is added to each log entry\n    show_locals: true # enables local variable logging in tracebacks\n\nhandlers:\n  console: # log to the console (stderr) using structured_colored formatter, logging everything at DEBUG level and up\n    class: logging.StreamHandler\n    level: DEBUG\n    formatter: structured_colored\n    stream: \"ext://sys.stderr\"\n  meltano_log: # log everything INFO and above to a file in the project root called meltano.log in json format\n    class: logging.FileHandler\n    level: INFO\n    filename: meltano.log\n    formatter: json\n  my_warn_file_handler: # log everything WARNING and above to automatically rotating log file in key_value format\n    class: logging.handlers.RotatingFileHandler\n    level: WARN\n    formatter: key_value\n    filename: /tmp/meltano_warn.log\n    maxBytes: 10485760\n    backupCount: 20\n    encoding: utf8\n\nroot:\n  level: DEBUG # the root logger must always specify a level\n  propagate: yes # propagate to child loggers\n  handlers: [console, meltano_log, my_warn_file_handler] # by default use these three handlers\n\nloggers:\n  somespecific.module.logger: # if you want debug logs for a specific named logger or module\n    level: DEBUG\n    handlers: [console]\n    propogate: no\n  urllib3: # for example hide all urllib3 debug logs\n    level: WARNING\n    handlers: [console, meltano_log]\n    propogate: no\n```\n\n----------------------------------------\n\nTITLE: Running Meltano with GitLab, Postgres and dbt\nDESCRIPTION: Executes a complete pipeline consisting of extracting data from GitLab, loading it into Postgres, and then running and testing dbt transformations. It leverages a defined Meltano job.\nSOURCE: https://github.com/meltano/meltano/blob/main/integration/example-library/meltano-run/index.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nmeltano run gitlab-to-postgres dbt-postgres:test dbt-postgres:run\n```\n\n----------------------------------------\n\nTITLE: Running dbt Transformation with Meltano\nDESCRIPTION: This command invokes the `run` command of the `dbt-postgres` utility within Meltano, initiating the dbt transformation process. This process executes the dbt models defined in the project, transforming the raw data into meaningful information and storing it in the designated target tables.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/getting-started/part3.mdx#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nmeltano invoke dbt-postgres:run\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom Config Value with Meltano CLI\nDESCRIPTION: This bash snippet demonstrates how to use the `meltano config` command to set a custom setting value for a plugin. The command `meltano config tap-example set custom_setting value` sets the `custom_setting` for the `tap-example` plugin to `value`.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/configuration.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nmeltano config tap-example set custom_setting value\n```\n\n----------------------------------------\n\nTITLE: Defining Setting Aliases in Meltano\nDESCRIPTION: This YAML snippet illustrates how to define aliases for a setting within a Meltano plugin's configuration. Aliases provide alternative names for a setting, allowing flexibility in how settings are referenced.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/reference/plugin-definition-syntax.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nsettings:\n- name: setting_name\n  aliases:\n  - setting_name_alias\n  - setting_name_alias_2\n```\n\n----------------------------------------\n\nTITLE: Meltano Development Environment Setup\nDESCRIPTION: This bash script outlines the steps required to set up a development environment for Meltano. It includes cloning the Meltano repository, changing to the project directory, installing development tools like Nox and pre-commit, installing dependencies using uv, installing the pre-commit hook, and activating the virtual environment.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/contribute/prerequisites.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Clone the Meltano repo\ngit clone git@github.com:meltano/meltano.git\n\n# Change directory into the Meltano project\ncd meltano\n\n# Install the, Nox and pre-commit tools\nuv tool install nox\nuv tool install pre-commit\n\n# Install all the dependencies\nuv sync\n\n# Install the pre-commit hook\npre-commit install --install-hooks\n\n# Obtain a shell in the uv-managed virtual environment\nsource .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Add Docker Compose Files to Meltano Project\nDESCRIPTION: Adds the `docker-compose.prod.yml` file to the Meltano project by utilizing the `meltano add files` command with the `files-docker-compose` bundle. This file defines the services for a production-grade Meltano setup.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/containerization.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmeltano add files files-docker-compose\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Settings with Aliases, Value, and Env Variables\nDESCRIPTION: This YAML snippet demonstrates the configuration of plugin settings within Meltano. It showcases various setting properties, including setting names, aliases, default values, and environment variable overrides.  It also provides examples of properties like `label` that can be used for displaying human-friendly text.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/reference/plugin-definition-syntax.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsettings:\n- name: core.dags_folder\n  label: DAGs Folder\n  value: $MELTANO_PROJECT_ROOT/orchestrate/dags\n  env: AIRFLOW__CORE__DAGS_FOLDER\n- name: core.plugins_folder\n  label: Plugins Folder\n  value: $MELTANO_PROJECT_ROOT/orchestrate/plugins\n  env: AIRFLOW__CORE__PLUGINS_FOLDER\n```\n\n----------------------------------------\n\nTITLE: Setting Configuration via Aliases Bash\nDESCRIPTION: This bash snippet demonstrates how to set a configuration setting via the `meltano config set` command, using either the canonical name or one of its aliases. All three commands achieve the same result, setting the `my_custom_tap_username` using the canonical name, alias 1, and alias 2 respectively.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/configuration.md#_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\n# The canonical name\nmeltano config my-custom-tap set my_custom_tap_username some_value\n\n# Alias 1\nmeltano config my-custom-tap set custom_tap_username some_value\n\n# Alias 2\nmeltano config my-custom-tap set username some_value\n```\n\n----------------------------------------\n\nTITLE: Add DataHub utility with modules via command line in Meltano\nDESCRIPTION: This command adds the DataHub utility to the Meltano project, pre-configuring it with the s3, postgres, and dbt modules. These modules enable DataHub to ingest metadata from AWS S3, PostgreSQL databases, and dbt projects respectively.  It modifies the `meltano.yml` file.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/tutorials/datahub.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmeltano add utility datahub[s3,postgres,dbt]\n```\n\n----------------------------------------\n\nTITLE: Run ELT pipeline with transform\nDESCRIPTION: This command executes an ELT (Extract, Load, Transform) pipeline using the `meltano elt` command. It specifies the extractor (`tap`), loader (`target`), and the `--transform run` option to execute the dbt transform after the extract and load steps are completed.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/transformation.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nmeltano elt <tap> <target> --transform run\n\n# For example:\nmeltano elt tap-gitlab target-postgres --transform run\n```\n\n----------------------------------------\n\nTITLE: Setting state_backend.uri via meltano config (Bash)\nDESCRIPTION: This bash command shows how to set the `state_backend.uri` setting using the `meltano config` command. It configures Meltano to store state on the local filesystem, using the `$MELTANO_SYS_DIR_ROOT` environment variable to determine the base directory.  Single quotes are used to prevent early expansion of the environment variable.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/concepts/state_backends.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmeltano config meltano set state_backend.uri 'file:///${MELTANO_SYS_DIR_ROOT}/state'\n```\n\n----------------------------------------\n\nTITLE: Configuring dbt-postgres with Meltano config\nDESCRIPTION: These commands use the `meltano config` command to set configuration options for the `dbt-postgres` utility. These configuration options are crucial for establishing a connection between dbt and the PostgreSQL database, allowing dbt to access and transform the data loaded by Meltano.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/getting-started/part3.mdx#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nmeltano config dbt-postgres set host localhost\n```\n\nLANGUAGE: bash\nCODE:\n```\nmeltano config dbt-postgres set port 5432\n```\n\nLANGUAGE: bash\nCODE:\n```\nmeltano config dbt-postgres set user meltano\n```\n\nLANGUAGE: bash\nCODE:\n```\nmeltano config dbt-postgres set password password\n```\n\nLANGUAGE: bash\nCODE:\n```\nmeltano config dbt-postgres set dbname postgres\n```\n\nLANGUAGE: bash\nCODE:\n```\nmeltano config dbt-postgres set schema analytics\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Variables in Meltano Environment YAML\nDESCRIPTION: This YAML snippet demonstrates how to define environment variables within a Meltano environment using the `env` key.  These environment variables will be available to plugins run within that specific Meltano environment. The `AN_ENVIRONMENT_VARIABLE` is set to `dev` for the `dev` environment.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/configuration.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nenvironments:\n- name: dev\n  env:\n    AN_ENVIRONMENT_VARIABLE: dev\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Extractor with Meltano CLI\nDESCRIPTION: This command adds a custom extractor plugin to a Meltano project. It uses `docker run` to execute the `meltano add` command within a container, mounting the current directory as a project directory. The `--interactive` flag enables interactive mode, allowing Meltano to prompt the user for additional plugin details.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/plugin-management.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --interactive -v $(pwd):/project -w /project meltano/meltano add --custom extractor tap-covid-19\n```\n\n----------------------------------------\n\nTITLE: Environments Configuration in meltano.yml\nDESCRIPTION: This snippet demonstrates how to define environments within the `meltano.yml` file, including configurations for extractors, loaders, and environment variables specific to each environment. It shows the structure for defining 'prod' and 'dev' environments with different settings for tap-github and target-snowflake plugins.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/concepts/environments.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 1\ndefault_environment: dev\nproject_id: 9f8ac2b3-58ae-4db0-b20a-d9f5431c5d93\nenvironments:\n  - name: prod\n    config:\n      plugins:\n        extractors:\n          - name: tap-github\n            config:\n              organizations: [Meltano]\n            select: [\"*.*\"]\n        loaders:\n          - name: target-snowflake\n            config:\n              dbname: prod\n              warehouse: prod_wh\n              batch_size_rows: 100000\n    env:\n      SOME_PROD_ONLY_SETTING: abc\n  - name: dev\n    config:\n      plugins:\n        extractors:\n          - name: tap-github\n            config:\n              organizations: [MeltanoLabs]\n            select: [\"repositories.*\"]\n        loaders:\n          - name: target-snowflake\n            config:\n              dbname: dev\n              warehouse: dev_wh\n              batch_size_rows: 1000\n    state_id_suffix: ${CUSTOM_SUFFIX}\nplugins:\n  extractors:\n  - name: tap-github\n    variant: meltanolabs\n    pip_url: git+https://github.com/MeltanoLabs/tap-github.git\n    config:\n      start_date: '2024-01-01'\n  loaders:\n  - name: target-snowflake\n    variant: meltanolabs\n    pip_url: meltanolabs-target-snowflake\n    config:\n      account: meltano\n      add_record_metadata: true\n      password: ${SNOWFLAKE_PASSWORD}\n```\n\n----------------------------------------\n\nTITLE: Meltano Schedule Configuration in YAML\nDESCRIPTION: This YAML snippet shows how a Meltano schedule is defined in the `meltano.yml` file. It specifies the name of the schedule, the interval at which it should run, and the job to be executed.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/orchestration.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nschedules:\n- name: daily-gitlab-load\n  interval: '@daily'\n  job: tap-gitlab-to-target-postgres-with-dbt\n```\n\n----------------------------------------\n\nTITLE: Interactive dbt Configuration - Meltano\nDESCRIPTION: This command configures the dbt transformer with database names, connection credentials, and other settings interactively.  It uses the `meltano config` command with the `--interactive` flag, allowing the user to input the necessary configuration parameters via prompts. This avoids manually setting individual configuration options.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/migrate-an-existing-dbt-project.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmeltano config dbt-snowflake set --interactive\n```\n\n----------------------------------------\n\nTITLE: Specifying Executable for Plugin Commands\nDESCRIPTION: This YAML snippet demonstrates how to specify an alternative executable for a plugin command using the `executable` property. This allows overriding the default executable for a particular command. The `args` property defines the arguments passed to the specified executable. The description provides documentation displayed when listing commands.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/concepts/project.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- name: dagster\n  variant: quantile-development\n  commands:\n    start:\n      args: -f $REPOSITORY_DIR/repository.py\n      description: Start Dagster.\n      executable: dagit_invoker\n```\n\n----------------------------------------\n\nTITLE: Set UI Server Name\nDESCRIPTION: Sets the `ui.server_name` setting using the `meltano config` command and the `MELTANO_UI_SERVER_NAME` environment variable. This defines the host and port where the Meltano UI is accessible.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/reference/ui.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmeltano config meltano set ui server_name meltano.example.com\n\nexport MELTANO_UI_SERVER_NAME=meltano.example.com\n```\n\n----------------------------------------\n\nTITLE: JSON Console Output Logging Config\nDESCRIPTION: This `logging.yaml` configuration configures Meltano to log in JSON format directly to the console. This is useful if a logging solution is capturing console output directly.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/logging.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 1\ndisable_existing_loggers: false\n\nformatters:\n  json:\n    (): meltano.core.logging.json_formatter\n\nhandlers:\n  console:\n    class: logging.StreamHandler\n    formatter: json\n    stream: \"ext://sys.stderr\"\n\nroot:\n  level: INFO\n  propagate: yes\n  handlers: [console]\n```\n\n----------------------------------------\n\nTITLE: Define and Schedule a Meltano Job\nDESCRIPTION: These commands define a Meltano job and then schedule it to run daily. The `meltano job add` command defines the job with a set of tasks. The `meltano schedule add` command schedules the job to run at a specified interval.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/orchestration.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Define a job\nmeltano job add tap-gitlab-to-target-postgres-with-dbt --tasks \"tap-gitlab target-postgres dbt-postgres:run\"\n\n# Schedule the job\nmeltano schedule add daily-gitlab-load --job tap-gitlab-to-target-postgres-with-dbt --interval '@daily'\n```\n\n----------------------------------------\n\nTITLE: Discover Streams\nDESCRIPTION: Discovers streams using the `--discover` flag with `meltano invoke`. This shows details about the supported streams of the tap, providing information about available entities and attributes.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/tutorials/custom-extractor.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nmeltano invoke tap-my-custom-source --discover\n```\n\n----------------------------------------\n\nTITLE: Configure DataHub GMS host using Meltano CLI\nDESCRIPTION: This command configures the DataHub utility within the Meltano project by setting the GMS host. It modifies the `meltano.yml` file to include the GMS endpoint, which is essential for directing metadata to the DataHub GMS. It assumes no MSA is in use.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/tutorials/datahub.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmeltano config datahub set gms_host http://localhost:8080\n```\n\n----------------------------------------\n\nTITLE: Adding a Discoverable Plugin with Meltano CLI\nDESCRIPTION: This command shows how to add a discoverable plugin to your Meltano project using the `meltano add` command. It covers adding extractors, loaders, and utilities.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/plugin-management.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeltano add <type> <name>\n\n# For example:\nmeltano add extractor tap-gitlab\nmeltano add loader target-postgres\nmeltano add utility dbt-snowflake\nmeltano add utility airflow\n```\n\n----------------------------------------\n\nTITLE: List Configuration for tap-github with Meltano\nDESCRIPTION: This command uses `meltano config` with the `list` option to display the current configuration of the `tap-github` extractor. It shows the values of various settings, including those sourced from environment variables and the `meltano.yml` file.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/getting-started/part1.mdx#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nmeltano config tap-github list\n```\n\n----------------------------------------\n\nTITLE: Start Superset UI\nDESCRIPTION: This command invokes the `superset:ui` target to start the Superset web server.  This makes the Superset UI accessible through a web browser, typically at http://localhost:8088.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/analysis.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmeltano invoke superset:ui\n```\n\n----------------------------------------\n\nTITLE: Executing Meltano Run Command in Console\nDESCRIPTION: This console output shows the execution of the `meltano run tap-github target-jsonl` command, indicating the start of the pipeline, state management, data extraction, and metric reporting.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/getting-started/part1.mdx#_snippet_21\n\nLANGUAGE: console\nCODE:\n```\n$ meltano run tap-github target-jsonl\n2024-09-19T13:53:36.403099Z [info     ] Environment 'dev' is active\n2024-09-19T13:53:41.062802Z [info     ] Found state from 2024-09-19 13:53:17.415907.\n2024-09-19T13:53:41.071885Z [warning  ] No state was found, complete import.\n2024-09-19T13:53:43.054384Z [info     ] INFO Starting sync of repository: sbalnojan/meltano-lightdash cmd_type=elb consumer=False name=tap-github producer=True stdio=stderr string_id=tap-github\n2024-09-19T13:53:43.553171Z [info     ] INFO METRIC: {\"type\": \"timer\", \"metric\": \"http_request_duration\", \"value\": 0.4796161651611328, \"tags\": {\"endpoint\": \"commits\", \"http_status_code\": 200, \"status\": \"succeeded\"}} cmd_type=elb consumer=False name=tap-github producer=True stdio=stderr string_id=tap-github\n2024-09-19T13:53:43.561190Z [info     ] INFO METRIC: {\"type\": \"counter\", \"metric\": \"record_count\", \"value\": 1, \"tags\": {\"endpoint\": \"commits\"}} cmd_type=elb consumer=False name=tap-github producer=True stdio=stderr string_id=tap-github</span>\n2024-09-19T13:53:43.735250Z [info     ] Incremental state has been updated at 2024-09-19 13:53:43.734535.\n2024-09-19T13:53:43.820467Z [info     ] Block run completed.           block_type=ExtractLoadBlocks err=None set_number=0 success=True</span>\n\n```\n\n----------------------------------------\n\nTITLE: Pipeline-Specific Schedule Configuration (YAML)\nDESCRIPTION: This YAML snippet shows how to configure environment variables for a scheduled Meltano pipeline within the `meltano.yml` project file.  The `env` dictionary within a schedule definition allows you to specify environment variables that will be set when the pipeline is executed by the scheduler. This enables customized configurations for different scheduled pipelines.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/integration.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nschedules:\n- name: foo-to-bar\n  extractor: tap-foo\n  loader: target-bar\n  transform: skip\n  interval: '@hourly'\n  # highlight-start\n  env:\n    TAP_FOO_BAR: bar\n    TAP_FOO_BAZ: baz\n  # highlight-end\n```\n\n----------------------------------------\n\nTITLE: Running Custom Python Script with Meltano\nDESCRIPTION: These commands demonstrate how to run custom Python scripts defined as utilities within Meltano. `meltano run` executes the `run_script` command of the `my_script_util` utility, while `meltano invoke` executes the `run_another_script` command.  These commands allow you to execute Python scripts directly within the Meltano environment.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/advanced-topics.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmeltano run my_script_util:run_script\nmeltano invoke my_script_util:run_another_script\n```\n\n----------------------------------------\n\nTITLE: Installing Meltano with Postgres Component using uv\nDESCRIPTION: This command demonstrates how to install Meltano with the 'postgres' component using the 'uv' tool.  The `postgres` component provides support for PostgreSQL system databases using the modern `psycopg` driver. This installation allows Meltano to leverage PostgreSQL as the default state backend.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/advanced-topics.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nuv tool install --from \"meltano[postgres]\" meltano\n```\n\n----------------------------------------\n\nTITLE: Configure Target-postgres Settings\nDESCRIPTION: These commands configure the 'target-postgres' loader settings such as user, password, database, add_record_metadata, and host using the `meltano config target-postgres set` command.  The password is saved as a sensitive value in the `.env` file.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/getting-started/part2.mdx#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ meltano config target-postgres set user meltano\n&ensp;&ensp;Loader 'target-postgres' setting 'user' was set in `meltano.yml`: 'meltano'\n$ meltano config target-postgres set password password\n&ensp;&ensp;Loader 'target-postgres' setting 'password' was set in `.env`: (redacted)\n$ meltano config target-postgres set database postgres\n&ensp;&ensp;Loader 'target-postgres' setting 'database' was set in `meltano.yml`: 'postgres'\n$ meltano config target-postgres set add_record_metadata True\n&ensp;&ensp;Loader 'target-postgres' setting 'add_record_metadata' was set in `meltano.yml`: True\n$ meltano config target-postgres set host localhost\n&ensp;&ensp;Loader 'target-postgres' setting 'host' was set in `meltano.yml`: localhost\n```\n\n----------------------------------------\n\nTITLE: Defining Schedules with ELT Configuration\nDESCRIPTION: This YAML snippet demonstrates an alternative way to define pipeline schedules using `extractor`, `loader`, and `transform` properties instead of a `job`. This allows defining a simple ELT (Extract, Load, Transform) pipeline directly within the schedule. The `interval` property specifies the schedule's frequency.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/concepts/project.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n- name: foo-to-bar-elt\n  extractor: tap-foo\n  loader: target-bar\n  transform: skip\n  interval: \"@hourly\"\n```\n\n----------------------------------------\n\nTITLE: Pipeline-Specific Configuration using Environment Variables\nDESCRIPTION: This YAML snippet illustrates how to specify pipeline-specific configuration using environment variables within a schedule definition.  The `env` dictionary allows setting environment variables that will be available during the pipeline execution.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/concepts/project.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nschedules:\n- name: foo-to-bar\n  job: tap-foo-to-target-bat\n  interval: \"@hourly\"\n  # highlight-start\n  env:\n    TAP_FOO_BAR: bar\n    TAP_FOO_BAZ: baz\n  # highlight-end\n```\n\n----------------------------------------\n\nTITLE: Configure Meltano State Backend\nDESCRIPTION: These shell commands configure Meltano to use S3 for state management. They set the URI, access key, secret key, and endpoint URL for the S3 backend.  It assumes a local MinIO instance is running.\nSOURCE: https://github.com/meltano/meltano/blob/main/integration/example-library/meltano-state-s3/index.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nmeltano config meltano set state_backend.uri \"s3://meltano/state\"\n\nmeltano config meltano set state_backend.s3.aws_access_key_id \"minioadmin\"\nmeltano config meltano set state_backend.s3.aws_secret_access_key \"minioadmin\"\nmeltano config meltano set state_backend.s3.endpoint_url \"http://127.0.0.1:9000\"\n```\n\n----------------------------------------\n\nTITLE: Modifying Plugin Configuration in meltano.yml\nDESCRIPTION: Shows how to modify the plugin's configuration directly within the `meltano.yml` file by modifying the values in the `config` section. This is the most direct way of setting persistent configuration values.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/plugin-management.md#_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\n# Before:\nconfig:\n  postgres_host: postgres.example.com\n  postgres_port: 5432\n  postgres_username: my_user\n  postgres_database: my_database\n\n# After:\nconfig:\n  # highlight-start\n  host: postgres.example.com\n  port: 5432\n  user: my_user\n  dbname: my_database\n  # highlight-end\n```\n\n----------------------------------------\n\nTITLE: Adding a Discoverable Plugin via meltano.yml\nDESCRIPTION: This YAML snippet shows how to add discoverable plugins directly to your `meltano.yml` file.  It defines the `name`, `variant`, and `pip_url` for extractors, loaders and utilities.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/plugin-management.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nplugins:\n  extractors:\n  # highlight-start\n  - name: tap-gitlab\n    variant: meltano\n    pip_url: git+https://gitlab.com/meltano/tap-gitlab.git\n  # highlight-end\n  loaders:\n  # highlight-start\n  - name: target-postgres\n    variant: datamill-co\n    pip_url: singer-target-postgres\n  # highlight-end\n  utilities:\n  # highlight-start\n  - name: dbt-snowflake\n    variant: dbt-labs\n  # highlight-end\n  # highlight-start\n  - name: airflow\n    variant: apache\n  # highlight-end\n```\n\n----------------------------------------\n\nTITLE: Datadog Logging with logging.yaml\nDESCRIPTION: This `logging.yaml` configures Meltano to write logs to a file in JSON format. This is a common practice for collecting logs with the Datadog Agent.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/logging.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 1\ndisable_existing_loggers: false\n\nformatters:\n  structured_plain:\n    (): meltano.core.logging.console_log_formatter\n    colors: False\n  json:\n    (): meltano.core.logging.json_formatter\n\nhandlers:\n  console:\n    class: logging.StreamHandler\n    level: WARNING\n    formatter: structured_plain\n    stream: \"ext://sys.stderr\"\n  file:\n    class: logging.FileHandler\n    level: INFO\n    filename: meltano.log\n    formatter: json\n\nroot:\n  level: DEBUG\n  propagate: yes\n  handlers: [console, file]\n```\n\n----------------------------------------\n\nTITLE: Check Meltano Version with Command Line\nDESCRIPTION: This command is used to check the installed version of Meltano. It outputs the version number to the console, verifying that Meltano is installed correctly.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/getting-started/part1.mdx#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ meltano --version\nmeltano, version 3.4.0\n```\n\n----------------------------------------\n\nTITLE: Example dbt Configuration in Meltano YAML\nDESCRIPTION: This YAML snippet shows the dbt configuration settings in the meltano.yml file. It includes host, port, user, dbname, and schema, defining the connection parameters for dbt to access the PostgreSQL database.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/getting-started/part3.mdx#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nutilities:\n  - name: dbt-postgres\n    [...]\n    config:\n      host: localhost\n      port: 5432\n      user: meltano\n      dbname: postgres\n      schema: analytics\n```\n\n----------------------------------------\n\nTITLE: Write setting values into the plugins' runtime environment in meltano.yml\nDESCRIPTION: This snippet demonstrates how to write setting values into the plugins' runtime environment by defining the `env` key for a setting in the `meltano.yml` file. This replaces the second function provided by `env_aliases`, which are deprecated in Meltano 2.0.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/v2-migration.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nplugins:\n  extractors:\n    - name: tap-gitlab\n      settings:\n        - name: ultimate_license\n          env: GITLAB_API_ULTIMATE_LICENSE\n```\n\n----------------------------------------\n\nTITLE: Direct Plugin Inheritance in YAML\nDESCRIPTION: This YAML snippet demonstrates direct plugin inheritance from the discoverable plugin in `meltano.yml`. `tap-postgres--billing` and `tap-postgres--events` inherit directly from `tap-postgres`. Each plugin then defines its own specific configurations such as `host`, `user`, and `dbname`.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/configuration.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nplugins:\n  extractors:\n  - name: tap-postgres--billing\n    inherit_from: tap-postgres\n    config:\n      host: one.postgres.example.com\n      user: billing_user\n      dbname: billing_db\n  - name: tap-postgres--events\n    inherit_from: tap-postgres\n    config:\n      host: two.postgres.example.com\n      user: events_user\n      dbname: events_db\n```\n\n----------------------------------------\n\nTITLE: Overriding Inherited Configuration in meltano.yml\nDESCRIPTION: This snippet showcases how to override inherited configuration settings in a Meltano plugin defined with `inherit_from`. When inheriting, the plugin also inherits configuration settings, which can be selectively overridden. In this example, `view_id` is added while inheriting other settings, and `start_date` is overridden.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/concepts/project.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nplugins:\n  extractors:\n  - name: tap-google-analytics\n    variant: meltano\n    config:\n      key_file_location: client_secrets.json\n      start_date: '2020-10-01T00:00:00Z'\n  - name: tap-ga--view-foo\n    inherit_from: tap-google-analytics\n    # highlight-start\n    config:\n      # `key_file_location` and `start_date` are inherited\n      view_id: 123456\n    # highlight-end\n  - name: tap-ga--view-bar\n    inherit_from: tap-google-analytics\n    # highlight-start\n    config:\n      # `key_file_location` is inherited\n      start_date: '2020-12-01T00:00:00Z' # `start_date` is overridden\n      view_id: 789012\n    # highlight-end\n```\n\n----------------------------------------\n\nTITLE: Setting State from File\nDESCRIPTION: This command sets the state for a job using the data from a local JSON file, effectively migrating the state to the new backend.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/concepts/state_backends.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ meltano state set dev:tap-github-to-target-jsonl --input-file dev:tap-github-to-taget-jsonl.json\n```\n\n----------------------------------------\n\nTITLE: Add Postgres Loader with Meltano\nDESCRIPTION: This command adds the 'target-postgres' loader to the Meltano project, using the 'meltanolabs' variant. It installs the necessary dependencies to load data into a PostgreSQL database.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/getting-started/part2.mdx#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ meltano add loader target-postgres --variant=meltanolabs\nAdded loader 'target-postgres' to your Meltano project\nVariant:        meltanolabs (default)\nRepository:     https://github.com/MeltanoLabs/target-postgres\nDocumentation:  https://hub.meltano.com/loaders/target-postgres--meltanolabs\n\n2024-01-01T00:25:40.604941Z [info     ] Installing loader 'target-postgres'\n---> 100%\n\n2024-01-01T00:25:53.152127Z [info     ] Installed loader 'target-postgres'\n\nTo learn more about loader 'target-postgres', visit https://hub.meltano.com/loaders/target-postgres--meltanolabs\n```\n\n----------------------------------------\n\nTITLE: Interactive Configuration Prompt for tap-github\nDESCRIPTION: This shows an example of the interactive configuration prompts for the `tap-github` extractor. It illustrates the prompts for setting the `auth_token` and other settings.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/getting-started/part1.mdx#_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ meltano config tap-github set --interactive\nConfiguring Extractor 'tap-github' Interactively\n[...]\nSettings\n 1. additional_auth_tokens:                                                       [...]\n 2. auth_token: GitHub token to authenticate ...\n [...]\n 8. repositories: An array of strings containing the github repos to be ...\n [...]\n 11. start_date:\n [...]\nTo learn more about extractor 'tap-github' and its settings, visit https://hub.meltano.com/extractors/tap-github--meltanolabs\n\nLoop through all settings (all), select a setting by number (1 - 16), or exit (e)? [all]:\n$ 2\n[...]Description:\nGitHub token to authenticate with.\nNew value (redacted):\n$\nRepeat for confirmation:\n$\n<[... other 2 values...]\n```\n\n----------------------------------------\n\nTITLE: Including Multiple YAML Files in meltano.yml\nDESCRIPTION: This YAML snippet demonstrates how to include multiple YAML files into your `meltano.yml` configuration using the `include_paths` property. This allows breaking down a large configuration into smaller, more manageable files. Glob patterns can be used to specify multiple files at once.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/concepts/project.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ninclude_paths:\n  - \"./subconfig_[0-9].yml\"\n  - \"./*/subconfig_[0-9].yml\"\n  - \"./*/**/subconfig_[0-9].yml\"\n```\n\n----------------------------------------\n\nTITLE: Full meltano.yml example with JupyterLab and Papermill (YAML)\nDESCRIPTION: This is a complete example of a `meltano.yml` file, demonstrating how to configure both JupyterLab and Papermill as utility plugins.  It includes configurations for launching JupyterLab, executing notebooks with nbconvert, and executing notebooks with papermill, showcasing plugin inheritance and custom commands. It demonstrates the integration of Jupyter notebooks into the Meltano workflow.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/tutorials/jupyter.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nplugins:\n  utilities: # meltano invoke jupyter will start up the lab...\n  - name: jupyterlab\n    namespace: jupyterlab\n    pip_url: jupyterlab pandas matplotlib sqlalchemy psycopg2-binary papermill\n    executable: jupyter\n    commands:\n      launch_ip0:\n        args: lab --ip=0.0.0.0\n        description: Start lab server, on any ip range for Mac users inside docker.\n      launch:\n        args: lab\n        description: Start lab server\n      execute:\n        args: nbconvert --to notebook --execute notebook/sql_magic.ipynb\n        description: Start lab server\n\n  - name: papermill\n    inherit_from: jupyterlab\n    executable: papermill\n    commands:\n      execute:\n        args: notebook/sql_magic.ipynb output/output.ipynb -p price_1 1000\n        description: Start lab server, on any ip range for Mac users inside docker.\n\n```\n\n----------------------------------------\n\nTITLE: Defining dbt model: commits_last_7d.sql\nDESCRIPTION: Adds a dbt model that selects commits from the last 7 days from the `commits` table within the `tap_gitlab` source.  This is a basic example of a data transformation using dbt.\nSOURCE: https://github.com/meltano/meltano/blob/main/integration/example-library/meltano-run/index.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ntee -a ./transform/models/tap_gitlab/commits_last_7d.sql << END\n{{\n  config(\n    materialized='table'\n  )\n}}\n\nselect *\nfrom {{ source('tap_gitlab', 'commits') }}\nwhere created_at::date >= current_date - interval '7 days'\nEND\n```\n\n----------------------------------------\n\nTITLE: Setting select_filter Extra via Environment Variable\nDESCRIPTION: This command sets the `select_filter` extra for a specific tap by setting an environment variable. This allows running a tap with only a specific stream selected, which is useful for debugging issues with individual streams.  Replace `<TAP_NAME>` with the actual tap name and `<your_stream>` with the stream you want to select.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/troubleshooting.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nexport <TAP_NAME>__SELECT_FILTER='[\"<your_stream>\"]'\n```\n\n----------------------------------------\n\nTITLE: DataHub utility configuration in meltano.yml (example)\nDESCRIPTION: This YAML snippet shows how to configure the DataHub utility within the `meltano.yml` file.  It specifies the utility's name, variant, pip URL for installation, and initial configuration settings for the GMS host and authentication. The gms_host needs to be set for the datahub CLI to send the metadata to the correct endpoint.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/tutorials/datahub.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nutilities:\n  - name: datahub\n    variant: datahub-project[s3,postgres,dbt]\n    pip_url: acryl-datahub\n    config:\n      gms_host:\n      gms_auth:\n```\n\n----------------------------------------\n\nTITLE: Test dbt Connection - Meltano\nDESCRIPTION: This command invokes the dbt transformer utility in debug mode to test the connection and credentials. It confirms that Meltano can communicate with the data warehouse using the configured settings, and can be used to verify that the dbt setup is correct before running any transformations.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/migrate-an-existing-dbt-project.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmeltano invoke dbt-postgres debug\n```\n\n----------------------------------------\n\nTITLE: Running Custom Python Script as Meltano Utility\nDESCRIPTION: This YAML configuration demonstrates how to define a custom utility in `meltano.yml` to run a Python script. It sets up a utility named `my_script_util` with two commands: `run_script` and `run_another_script`, each executing a different Python script using the `python` executable. The `args` specify the script to be executed.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/advanced-topics.mdx#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nutilities:\n- name: my_script_util\n  namespace: my_script_util\n  commands:\n    run_script:\n      executable: python\n      args: my_script.py\n    run_another_script:\n      executable: python\n      args: my_other_script.py\n```\n\n----------------------------------------\n\nTITLE: Configure Airbyte Connector in meltano.yml\nDESCRIPTION: This YAML snippet demonstrates how to configure an Airbyte connector as a custom plugin in Meltano's `meltano.yml` file. It requires replacing placeholders for `name` and `airbyte_spec.image` with your specific connector details. It allows configuring the connector without defining all settings and metadata.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/advanced-topics.mdx#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n - name: tap-pokeapi # REPLACE THIS WITH YOUR CONNECTOR NAME\n   variant: airbyte\n   executable: tap-airbyte\n   namespace: tap_airbyte\n   pip_url: git+https://github.com/MeltanoLabs/tap-airbyte.git\n   capabilities:\n   - catalog\n   - state\n   - discover\n   - about\n   - stream-maps\n   - schema-flattening\n   settings:\n   - description: Airbyte image to run\n     kind: string\n     label: Airbyte Spec Image\n     name: airbyte_spec.image\n     value: airbyte/source-pokeapi # REPLACE THIS WITH YOUR IMAGE NAME\n   - description: Airbyte image tag\n     kind: string\n     label: Airbyte Spec Tag\n     name: airbyte_spec.tag\n     value: latest\n   - [INSERT OTHER SETTINGS HERE]\n```\n\n----------------------------------------\n\nTITLE: Azure Connection String Configuration\nDESCRIPTION: This bash code shows an example environment variable configuration for connecting to Azure Blob Storage using a connection string. It defines the `MELTANO_STATE_BACKEND_URI` to specify the Azure Blob Storage location and the `AZURE_STORAGE_CONNECTION_STRING` to authenticate with the storage account.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/concepts/state_backends.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nMELTANO_STATE_BACKEND_URI='azure://meltano-state'\nAZURE_STORAGE_CONNECTION_STRING='DefaultEndpointsProtocol=https;AccountName=mystorageaccount;AccountKey=gSAw....'\n```\n\n----------------------------------------\n\nTITLE: Unsetting and Setting Plugin Configuration Values\nDESCRIPTION: Shows the usage of `meltano config unset` and `meltano config set` to modify the configuration of a plugin. This allows you to change the values of specific settings.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/plugin-management.md#_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nmeltano config <name> unset <old_setting>\nmeltano config <name> set <setting> <value>\n\n# For example:\nmeltano config target-postgres unset postgres_password\nmeltano config target-postgres set password my_password\n```\n\n----------------------------------------\n\nTITLE: pip_url Environment Variable Expansion YAML\nDESCRIPTION: This YAML snippet shows how environment variables can be used within a plugin's `pip_url` to dynamically specify the Git branch or supply credentials for a private Python package index. The `TAP_GITHUB_GIT_REV`, `NEXUS_USERNAME`, and `NEXUS_PASSWORD` environment variables are used to construct the `pip_url`.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/configuration.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\npip_url: \"git+https://github.com/MeltanoLabs/tap-github.git@${TAP_GITHUB_GIT_REV}\"\n```\n\nLANGUAGE: YAML\nCODE:\n```\npip_url: \"https://${NEXUS_USERNAME}:${NEXUS_PASSWORD}@nexus.example.com/simple\"\n```\n\n----------------------------------------\n\nTITLE: Configure tap-github Interactively with Meltano\nDESCRIPTION: This command uses `meltano config` with the `set --interactive` option to configure the `tap-github` extractor in interactive mode. It prompts the user to input values for various settings like repositories, start_date, and auth_token.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/getting-started/part1.mdx#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nmeltano config tap-github set --interactive\n```\n\n----------------------------------------\n\nTITLE: Switching Plugin Variants in Meltano\nDESCRIPTION: Details the process of switching from one plugin variant to another in Meltano by modifying the `variant` and `pip_url` properties in the `meltano.yml` file and reinstalling the plugin. This allows adapting plugins to specific use cases.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/plugin-management.md#_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\n# Before:\nplugins:\n  loaders:\n  - name: target-postgres\n    variant: datamill-co\n    pip_url: singer-target-postgres\n\n# After:\nplugins:\n  loaders:\n  - name: target-postgres\n    # highlight-start\n    variant: meltano\n    pip_url: git+https://github.com/meltano/target-postgres.git # Optional\n    # highlight-end\n```\n\n----------------------------------------\n\nTITLE: Installing pipx (Unix)\nDESCRIPTION: These commands install pipx, a tool for installing Python applications in isolated virtual environments. The commands ensure that pipx is added to the system's PATH so that the installed applications can be executed directly.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/installation-guide.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# install pipx and ensure it is on the path\npython3 -m pip install --user pipx\npython3 -m pipx ensurepath\n# Be sure pipx is available on your path\nsource ~/.bashrc\n```\n\n----------------------------------------\n\nTITLE: Azure Blob Storage Environment Variables Configuration\nDESCRIPTION: This bash code shows an example environment variable configuration for connecting to Azure Blob Storage. It defines the `MELTANO_STATE_BACKEND_URI` to specify the Azure Blob Storage location, the `MELTANO_STATE_BACKEND_AZURE_STORAGE_ACCOUNT_URL` for the storage account URL. Optionally, it defines `AZURE_CLIENT_ID` for use with Managed Identity.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/concepts/state_backends.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nMELTANO_STATE_BACKEND_URI='azure://meltano-state'\nMELTANO_STATE_BACKEND_AZURE_STORAGE_ACCOUNT_URL='https://mystorageaccount.blob.core.windows.net/'\n# only necessary if using ManagedIdentity\nAZURE_CLIENT_ID='28a00fb0-67ee-4d11-81f8-10157e07c84f'\n```\n\n----------------------------------------\n\nTITLE: Initializing dbt-postgres within Meltano\nDESCRIPTION: This command invokes the `initialize` command of the `dbt-postgres` utility within Meltano. This command is responsible for setting up the project scaffold and configuration files necessary for dbt to operate correctly within the Meltano project structure.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/getting-started/part3.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmeltano invoke dbt-postgres:initialize\n```\n\n----------------------------------------\n\nTITLE: List Selected Entities/Attributes for Extraction\nDESCRIPTION: This command lists all selected entities and attributes for a given plugin using `meltano select`. The `--list` option specifies listing, and `--all` ensures all entities/attributes are included.  This allows users to see which data will be extracted by the plugin.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/integration.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeltano select <plugin> --list --all\n\n# For example:\nmeltano select tap-gitlab --list --all\n```\n\n----------------------------------------\n\nTITLE: Running tap-gitlab to target-postgres\nDESCRIPTION: Executes an EL (Extract and Load) task, extracting data from tap-gitlab and loading it into target-postgres. This is the core data pipeline execution.\nSOURCE: https://github.com/meltano/meltano/blob/main/integration/example-library/meltano-run/index.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmeltano run tap-gitlab target-postgres\n```\n\n----------------------------------------\n\nTITLE: DataHub utility config with GMS host and auth in meltano.yml\nDESCRIPTION: This YAML code configures the DataHub utility in the `meltano.yml` file, including both the `gms_host` and `gms_auth` parameters. The `gms_host` parameter specifies the DataHub GMS API endpoint, and the `gms_auth` parameter provides the authentication token required to access the API. The auth token is required if DataHub MSA is enabled.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/tutorials/datahub.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nutilities:\n  - name: datahub\n    variant: datahub-project\n    pip_url: acryl-datahub\n    config:\n      gms_host: http://localhost/gms/api\n      gms_auth: myToken\n```\n\n----------------------------------------\n\nTITLE: Installing pipx (Windows)\nDESCRIPTION: These commands install pipx, a tool for installing Python applications in isolated virtual environments on Windows. The commands ensure that pipx is added to the system's PATH so that the installed applications can be executed directly.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/installation-guide.mdx#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n# install pipx and ensure it is on the path\npython3 -m pip install --user pipx\npython3 -m pipx ensurepath\n# Be sure pipx is available on your path\nRefreshEnv\n```\n\n----------------------------------------\n\nTITLE: Activating an environment using the command line\nDESCRIPTION: This snippet demonstrates how to activate a specific environment using the `--environment` option when running a Meltano command. It runs the `tap-github` extractor and `target-sqlite` loader within the 'dev' environment.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/concepts/environments.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmeltano --environment=dev run tap-github target-sqlite\n```\n\n----------------------------------------\n\nTITLE: Tap Github Stream Map Configuration YAML\nDESCRIPTION: Configures the `tap-github` plugin to lowercase all repo names within the issues stream using the `stream_maps` configuration. It leverages the Meltano SDK's inline stream map functionality.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/mappers.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n  - name: tap-github\n    variant: meltanolabs\n    pip_url: meltanolabs-tap-github\n    config:\n      stream_maps:\n        issues:\n          repo: record['repo'].lower()\n```\n\n----------------------------------------\n\nTITLE: Configure Meltano State URI\nDESCRIPTION: Configures Meltano to use the local filesystem for state management. The `state_backend.uri` setting is set to a file path within the `.meltano/state` directory in the current working directory.\nSOURCE: https://github.com/meltano/meltano/blob/main/integration/example-library/meltano-state-local/index.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmeltano config meltano set state_backend.uri \"file:///`pwd`/.meltano/state\"\n```\n\n----------------------------------------\n\nTITLE: Meltano Project File Configuration\nDESCRIPTION: This YAML configuration file (`meltano.yml`) demonstrates how the selection rules defined with `meltano select` are stored. It shows the `select` configuration under the `tap-github` extractor, specifying the entities and attributes to extract.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/getting-started/part1.mdx#_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 1\ndefault_environment: dev\nenvironments:\n- name: dev\n- name: staging\n- name: prod\nproject_id: YOUR_ID\nplugins:\n  extractors:\n  - name: tap-github\n    variant: meltanolabs\n    pip_url: git+https://github.com/MeltanoLabs/tap-github.git\n    config:\n      start_date: '2024-01-01'\n      repositories:\n      - sbalnojan/meltano-lightdash\n    select:\n    - commits.url\n    - commits.sha\n    - commits.commit_timestamp\n\n```\n\n----------------------------------------\n\nTITLE: Run Meltano Pipeline in Docker Container\nDESCRIPTION: Runs a Meltano pipeline (tap-gitlab target-jsonl) inside a Docker container, mounting a local directory to access the target output. The volume mount ensures that the output data from the pipeline is accessible outside the container.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/containerization.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run \\\n  --volume $(pwd)/output:/project/output \\\n  meltano-demo-project:dev \\\n  run tap-gitlab target-jsonl\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom State Manager in Python\nDESCRIPTION: This code implements a custom state manager for Meltano by extending the `StateStoreManager` class. It includes settings definitions for username and password, and defines methods for setting, getting, and clearing state, as well as acquiring locks.  It expects a URI in the format `msm://<host>/<database>` and requires username and password for connection. The username and password settings are exposed as Meltano settings.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/custom-state-backend.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# my_state_manager/backend.py\nfrom contextlib import contextmanager\nfrom urllib.parse import urlparse\n\nfrom meltano.core.error import MeltanoError\nfrom meltano.core.setting_definition import SettingDefinition, SettingKind\nfrom meltano.core.state_store.base import MeltanoState, StateStoreManager\n\n\nUSERNAME = SettingDefinition(\n    key=\"username\",\n    label=\"Username\",\n    kind=SettingKind.STRING,\n    description=\"The username to use when connecting to the custom state manager\",\n)\n\nPASSWORD = SettingDefinition(\n    key=\"password\",\n    label=\"Password\",\n    kind=SettingKind.STRING,\n    sensitive=True,\n    description=\"The password to use when connecting to the custom state manager\",\n)\n\n\nclass MyStateManagerError(MeltanoError):\n    pass\n\n\nclass MyStateManager(StateStoreManager):\n    \"\"\"My Custom State Manager\"\"\"\n\n    label: str = \"My Custom State Manager\"\n\n    def __init__(\n        self,\n        uri: str,\n        *,\n        username: str | None = None,\n        password: str | None = None,\n        **kwargs,\n    ):\n        super().__init__(**kwargs)\n        self.uri = uri\n\n        # Parse the URI to extract the connection details\n        # Expecting `msm://<host>/<database>`, e.g. `msm://localhost/meltano`\n        parsed = urlparse(uri)\n        self.host = parsed.hostname\n        self.database = parsed.path.lstrip(\"/\")\n\n        self.username = username or parsed.username\n\n        if not self.username:\n            raise MyStateManagerError(\"Username is required\")\n\n        self.password = password or parsed.password\n\n        if not self.password:\n            raise MyStateManagerError(\"Password is required\")\n\n\n    def set(self, state: MeltanoState) -> None:\n        # Implement the logic to store the state in your custom backend\n\n    def get(self) -> MeltanoState | None:\n        # Implement the logic to retrieve the state from your custom backend\n\n    def clear(self) -> None:\n        # Implement the logic to clear the state from your custom backend\n\n    def get_state_ids(self) -> list[str]:\n        # Implement the logic to retrieve the list of state IDs from your custom backend\n\n    @contextmanager\n    def acquire_lock(self, state_id: str, *, retry_seconds: int = 1):\n        # Implement the logic to acquire a lock for the given state ID\n        # This method should be a context manager that acquires the lock\n        # and releases it when the context exits.\n        yield\n```\n\n----------------------------------------\n\nTITLE: Target-postgres Configuration in meltano.yml\nDESCRIPTION: This YAML snippet shows the configuration added to the `meltano.yml` file for the 'target-postgres' loader. It includes settings such as user, database, add_record_metadata, and host, defining how Meltano connects to the PostgreSQL database.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/getting-started/part2.mdx#_snippet_6\n\nLANGUAGE: yml\nCODE:\n```\nplugins:\n  loaders:\n    - name: target-postgres\n      variant: meltanolabs\n      pip_url: git+https://github.com/MeltanoLabs/target-postgres.git\n      config:\n        user: meltano\n        database: postgres\n        add_record_metadata: true\n        host: localhost\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Variables for a Meltano Plugin\nDESCRIPTION: This YAML snippet demonstrates how to define environment variables for a Meltano plugin. These variables are used during configuration expansion and when running the plugin.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/reference/plugin-definition-syntax.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nenv:\n  ENV_VAR_NAME: env var value\n  PATH: \"${PATH}:${MELTANO_PROJECT_ROOT}/bin\"\n```\n\n----------------------------------------\n\nTITLE: Run DataHub dbt ingestion in Meltano\nDESCRIPTION: This command invokes the DataHub utility within Meltano to run a metadata ingestion job specifically for dbt. The `:dbt-ingest` argument references a pre-configured job within the DataHub utility for dbt ingestion.  It requires that dbt docs have been generated beforehand.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/tutorials/datahub.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nmeltano invoke datahub :dbt-ingest\n```\n\n----------------------------------------\n\nTITLE: Adding a JSON Loader with Meltano\nDESCRIPTION: This command adds the `target-jsonl` loader to the Meltano project. This loader writes the extracted data to a JSONL file. It requires no additional configuration.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/getting-started/part1.mdx#_snippet_19\n\nLANGUAGE: console\nCODE:\n```\n$ meltano add loader target-jsonl</span>\nAdded loader 'target-jsonl' to your Meltano project\nVariant:        andyh1203 (default)\nRepository:     https://github.com/andyh1203/target-jsonl\nDocumentation:  https://hub.meltano.com/loaders/target-jsonl--andyh1203\n\n2024-01-01T00:25:40.604941Z [info     ] Installing loader 'target-jsonl'\n2024-01-01T00:25:53.152127Z [info     ] Installed loader 'target-jsonl'\n\nTo learn more about loader 'target-jsonl', visit https://hub.meltano.com/loaders/target-jsonl--andyh1203\n\n```\n\n----------------------------------------\n\nTITLE: Adding a Meltano Job\nDESCRIPTION: Adds a Meltano job named 'gitlab-to-postgres' that encapsulates the tap-gitlab to target-postgres extraction and loading process.  This allows you to reference the task as a single unit.\nSOURCE: https://github.com/meltano/meltano/blob/main/integration/example-library/meltano-run/index.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nmeltano job add gitlab-to-postgres --tasks \"tap-gitlab target-postgres\"\n```\n\n----------------------------------------\n\nTITLE: Invoke DataHub ingestion with a specific recipe\nDESCRIPTION: This command invokes the DataHub utility within Meltano to run a metadata ingestion job using a specified recipe file. The `-c` option specifies the path to the DataHub recipe file (e.g., `s3recipe.dhub.yaml`). This command triggers the ingestion process based on the configuration in the recipe.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/tutorials/datahub.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nmeltano invoke datahub ingest -c YOURRECIPE.dhub.yaml\n```\n\n----------------------------------------\n\nTITLE: Google Cloud Logging logging.yaml Example\nDESCRIPTION: This `logging.yaml` configures Meltano to log in JSON format to the console. This is suitable for Google Cloud Logging (Stackdriver) when capturing console output, for example, from Cloud Run.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/logging.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 1\ndisable_existing_loggers: false\n\nformatters:\n  json:\n    (): meltano.core.logging.json_formatter\n\nhandlers:\n  console:\n    class: logging.StreamHandler\n    level: INFO\n    formatter: json\n    stream: \"ext://sys.stderr\"\n\nroot:\n  level: INFO\n  propagate: yes\n  handlers: [console]\n```\n\n----------------------------------------\n\nTITLE: Generic Logging Config for Management Providers\nDESCRIPTION: This `logging.yaml` is a generic starting point for configuring Meltano's logging with log management providers. It sets up logging to a file in JSON format, while simultaneously reporting warnings and above on the console.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/logging.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 1\ndisable_existing_loggers: false\n\nformatters:\n  structured_plain:\n    (): meltano.core.logging.console_log_formatter\n    colors: False\n  json:\n    (): meltano.core.logging.json_formatter\n\nhandlers:\n  console:\n    class: logging.StreamHandler\n    level: WARNING\n    formatter: structured_plain\n    stream: \"ext://sys.stderr\"\n  file:\n    class: logging.FileHandler\n    level: INFO\n    filename: meltano.log\n    formatter: json\n\nroot:\n  level: DEBUG\n  propagate: yes\n  handlers: [console, file]\n```\n\n----------------------------------------\n\nTITLE: Set Meltano Job Tasks\nDESCRIPTION: This command sets the tasks for a specific Meltano job named `gitlab-to-jsonl`. It defines the execution pipeline, specifying `tap-gitlab` as the data source and `target-jsonl` as the destination.\nSOURCE: https://github.com/meltano/meltano/blob/main/integration/example-library/meltano-annotations/index.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmeltano job set gitlab-to-jsonl --tasks '[tap-gitlab target-jsonl]'\n```\n\n----------------------------------------\n\nTITLE: Install adapter-specific dbt with Meltano\nDESCRIPTION: This command installs an adapter-specific dbt utility plugin (e.g., for Snowflake) to your Meltano project. It utilizes the `meltano add utility` command, specifying the desired dbt adapter.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/transformation.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# install adapter-specific dbt, e.g. for snowflake\nmeltano add utility dbt-snowflake\n```\n\n----------------------------------------\n\nTITLE: Sample DataHub dbt recipe (YAML)\nDESCRIPTION: This YAML code defines a DataHub ingestion recipe specifically for dbt. It configures the source type as \"dbt\" and specifies the paths to the `manifest.json`, `catalog.json`, and `sources.json` files generated by dbt. The `target_platform` parameter must be updated to reflect the actual data platform used (e.g., \"bigquery\", \"postgres\").\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/tutorials/datahub.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nsource:\n  type: \"dbt\"\n  config:\n    # Coordinates\n    manifest_path: ${MELTANO_PROJECT_ROOT}/.meltano/transformers/dbt/target/manifest.json\n    catalog_path: ${MELTANO_PROJECT_ROOT}/.meltano/transformers/dbt/target/catalog.json\n    sources_path: ${MELTANO_PROJECT_ROOT}/.meltano/transformers/dbt/target/sources.json\n\n    # TODO: Change me to the appropriate platform, ie. bigquery, postgres, etc.\n    # https://github.com/datahub-project/datahub/blob/master/metadata-service/war/src/main/resources/boot/data_platforms.json\n    target_platform: \"CHANGE ME\"\nsink:\n  type: datahub-rest\n  config:\n    server: ${DATAHUB_GMS_HOST}\n    token: ${DATAHUB_GMS_TOKEN}\n```\n\n----------------------------------------\n\nTITLE: Select Specific Entities/Attributes for Extraction\nDESCRIPTION: These commands use `meltano select` to include or exclude specific entities and attributes for extraction. The first set includes `id`, `project_id`, `created_at`, `author_name`, and `message` attributes from the `commits` entity and all attributes from the `tags` entity. The second set excludes attributes ending with `_url` from all entities. This allows users to fine-tune the data extracted by the plugin.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/integration.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmeltano select <plugin> <entity> <attribute>\nmeltano select <plugin> --exclude <entity> <attribute>\n\n# For example:\nmeltano select tap-gitlab commits id\nmeltano select tap-gitlab commits project_id\nmeltano select tap-gitlab commits created_at\nmeltano select tap-gitlab commits author_name\nmeltano select tap-gitlab commits message\n\n# Include all attributes of an entity\nmeltano select tap-gitlab tags \"*\"\n\n# Exclude matching attributes of all entities\nmeltano select tap-gitlab --exclude \"*\" \"*_url\"\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Airflow (Python)\nDESCRIPTION: This Python snippet demonstrates how to set environment variables using Airflow's `BashOperator`. The `env` parameter allows you to pass a dictionary of environment variables to the Bash command that is executed by the operator. This is useful for configuring Meltano pipelines when running them within an Airflow DAG.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/integration.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nBashOperator(\n    # ...\n    bash_command=\"meltano elt ...\",\n    env={\n        \"TAP_FOO_BAR\": \"bar\",\n        \"TAP_FOO_BAZ\": \"baz\",\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Configure dbt settings with Meltano CLI\nDESCRIPTION: This command configures a dbt setting (e.g., `target`) using the `meltano config` command. It allows users to modify dbt's configuration parameters, such as the target database, directly from the command line.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/transformation.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nmeltano config dbt set target <target>\n\n# For example:\nmeltano config dbt set target postgres\n```\n\n----------------------------------------\n\nTITLE: Pulling Meltano Docker Image\nDESCRIPTION: This command pulls the latest version of the Meltano Docker image from Docker Hub. You can also specify a specific version of Meltano and/or Python using tags.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/installation-guide.mdx#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# download or update to the latest version\ndocker pull meltano/meltano\n\n# Or choose a specific version of Meltano and/or Python:\n# docker pull meltano/meltano:v3.5.4\n# docker pull meltano/meltano:latest-python3.11\n# docker pull meltano/meltano:v3.5.4-python3.12\n\n# check the currently installed version\ndocker run meltano/meltano --version\n```\n\n----------------------------------------\n\nTITLE: Linking Documentation for a Meltano Setting\nDESCRIPTION: This YAML snippet demonstrates how to include a link to external documentation for a setting in a Meltano plugin configuration. The documentation property directs users to supplemental information.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/reference/plugin-definition-syntax.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nsettings:\n- name: setting_name\n  documentation: https://docs.meltano.com/reference/configuration#setting_name\n```\n\n----------------------------------------\n\nTITLE: Explicit Plugin Inheritance in meltano.yml\nDESCRIPTION: This YAML snippet shows how explicit inheritance is represented in the `meltano.yml` file using the `inherit_from` property, along with `variant` and `pip_url`.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/plugin-management.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nplugins:\n  extractors:\n  - name: tap-postgres--billing\n    # highlight-next-line\n    inherit_from: tap-postgres\n    variant: transferwise\n    pip_url: pipelinewise-tap-postgres\n```\n\n----------------------------------------\n\nTITLE: Installing Meltano with uv and Python Version\nDESCRIPTION: This command installs Meltano using the `uv` package manager, specifying a particular Python version. It downloads the requested Python version (if not already installed).\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/installation-guide.mdx#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nuv tool install --python 3.13 meltano\n```\n\n----------------------------------------\n\nTITLE: Generate dbt docs using Meltano\nDESCRIPTION: This command invokes the dbt-postgres transformer within Meltano to generate dbt documentation.  This is a prerequisite for ingesting metadata from dbt into DataHub using the DataHub dbt ingestion recipe.  This command should be run prior to running the dbt ingestion.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/tutorials/datahub.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nmeltano invoke dbt-postgres:docs-generate\n```\n\n----------------------------------------\n\nTITLE: Setting Airflow Database Connection via Meltano Config\nDESCRIPTION: This command sets the Airflow database connection string using the Meltano configuration. It configures Airflow to use a PostgreSQL database instead of the default SQLite database. Replace `<username>`, `<password>`, `<host>`, `<port>`, and `<database>` with your actual PostgreSQL credentials.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/production.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmeltano config airflow set core.sql_alchemy_conn postgresql://<username>:<password>@<host>:<port>/<database>\n```\n\n----------------------------------------\n\nTITLE: Defining Shadowing Plugin in meltano.yml\nDESCRIPTION: This snippet demonstrates defining a shadowing plugin within `meltano.yml`. A shadowing plugin implicitly inherits its configuration from the discoverable plugin with the same name. Here, `tap-gitlab` is defined as a shadowing plugin, inheriting from the discoverable `tap-gitlab` plugin.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/concepts/project.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nplugins:\n  extractors:\n  # highlight-next-line\n  - name: tap-gitlab\n```\n\n----------------------------------------\n\nTITLE: Defining Inheriting Plugin in meltano.yml\nDESCRIPTION: This snippet demonstrates how to define an inheriting plugin within the `meltano.yml` file. The `inherit_from` property specifies the name of the plugin to inherit configuration from, which can be another plugin in the project or a discoverable plugin. This example shows inheriting from both a project-defined plugin and a discoverable plugin.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/concepts/project.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nplugins:\n  extractors:\n  - name: tap-postgres          # Shadows discoverable `tap-postgres` (see below)\n  - name: tap-postgres--billing\n    # highlight-next-line\n    inherit_from: tap-postgres  # Inherits from project's `tap-postgres`\n  - name: tap-bigquery--events\n    # highlight-next-line\n    inherit_from: tap-bigquery  # Inherits from discoverable `tap-bigquery`\n```\n\n----------------------------------------\n\nTITLE: Defining dbt Packages in packages.yml\nDESCRIPTION: This YAML snippet shows an example of how to define a dbt package within a Meltano project.  This configuration resides in `/transform/packages.yml` and specifies the git repository and revision for the dbt project.  Running `meltano invoke dbt:deps` will install these packages.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/transformation.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\npackages:\n  - git: https://gitlab.com/your_repo/your-dbt-project.git\n    revision: 1.0.0\n```\n\n----------------------------------------\n\nTITLE: Manually Set State\nDESCRIPTION: These shell commands manually set and retrieve state for a given job. The first command sets the state, and the second gets the state and saves it to a file.\nSOURCE: https://github.com/meltano/meltano/blob/main/integration/example-library/meltano-state-s3/index.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nmeltano state set --force dev:tap-gitlab-to-target-jsonl '{\"singer_state\": {\"bookmark-1\": 0}}'\nmeltano state get dev:tap-gitlab-to-target-jsonl > new_state.json\n```\n\n----------------------------------------\n\nTITLE: Add GitHub Extractor with Meltano CLI\nDESCRIPTION: This command adds the `tap-github` extractor plugin to the Meltano project. This plugin is responsible for extracting data from GitHub repositories.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/getting-started/part1.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmeltano add extractor tap-github\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Plugin in meltano.yml\nDESCRIPTION: This snippet illustrates how to define a custom plugin in `meltano.yml` by using the `namespace` property. Custom plugins explicitly define their base plugin description, including `pip_url`, `executable`, `capabilities`, and `settings`. In this example, `tap-covid-19` is defined as a custom plugin.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/concepts/project.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nplugins:\n  extractors:\n  - name: tap-covid-19\n    # highlight-start\n    namespace: tap_covid_19\n    pip_url: tap-covid-19\n    executable: tap-covid-19\n    capabilities:\n    - catalog\n    - discover\n    - state\n    settings:\n    - name: api_token\n    - name: user_agent\n    - name: start_date\n    # highlight-end\n```\n\n----------------------------------------\n\nTITLE: Add Superset utility using Meltano\nDESCRIPTION: This command adds the Superset utility to a Meltano project, making it available for use via `meltano invoke`. It's a necessary first step to using Superset within the Meltano environment.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/analysis.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeltano add utility superset\n```\n\n----------------------------------------\n\nTITLE: Installing Custom State Manager via uv in Bash\nDESCRIPTION: This command shows how to install the custom state manager using `uv tool install`. It fetches the custom state manager from a Git repository and installs it alongside Meltano.  The `--with` flag allows the package to be installed directly from a git repository.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/custom-state-backend.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nuv tool install --with git+https://github.com/your-username/my-state-manager.git meltano\n```\n\n----------------------------------------\n\nTITLE: Setting state_backend.uri in meltano.yml\nDESCRIPTION: This YAML snippet demonstrates how to configure the state backend URI directly within the `meltano.yml` file. It specifies the `state_backend` setting and its `uri` attribute, which determines the backend used for storing pipeline state. The `<URI for desired state backend>` placeholder needs to be replaced with the actual URI for the desired backend.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/concepts/state_backends.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nstate_backend:\n    uri: <URI for desired state backend>\n```\n\n----------------------------------------\n\nTITLE: Set API Base URL in client.py\nDESCRIPTION: Sets the `url_base` in the `jsonplaceholderStream` class to the JSONPlaceholder API URL. This is the base URL that will be used for making API requests.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/tutorials/custom-extractor.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n...\n\nclass jsonplaceholderStream(RESTStream):\n\n    \"\"\"jsonplaceholder stream class.\"\"\"\n\n    # TODO: Set the API's base URL here:\n\n    url_base = \"https://jsonplaceholder.typicode.com\"\n\n...\n```\n\n----------------------------------------\n\nTITLE: Specifying Plugin Variant in meltano.yml\nDESCRIPTION: This snippet shows how to specify a particular variant of a discoverable plugin using the `variant` property in `meltano.yml`. The example uses the `meltano` variant of `tap-gitlab`. If no variant is specified, the original variant supported by Meltano is used.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/concepts/project.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nplugins:\n  extractors:\n  - name: tap-gitlab\n    # highlight-next-line\n    variant: meltano\n```\n\n----------------------------------------\n\nTITLE: Add Custom Extractor Using Meltano Add (Bash)\nDESCRIPTION: This command adds a custom extractor to the Meltano project, specifying that it's not hosted on MeltanoHub. It prompts for the namespace URL and pip_url. The pip_url points to the local extractor project.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/tutorials/custom-extractor.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nmeltano add --custom extractor tap-jsonplaceholder\n```\n\n----------------------------------------\n\nTITLE: Setting Airflow Database Connection via Environment Variable\nDESCRIPTION: This command sets the Airflow database connection string via an environment variable. It configures Airflow to use a PostgreSQL database instead of the default SQLite database. Replace `<username>`, `<password>`, `<host>`, `<port>`, and `<database>` with your actual PostgreSQL credentials.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/production.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql://<username>:<password>@<host>:<port>/<database>\n```\n\n----------------------------------------\n\nTITLE: Initializing Meltano Project in Docker\nDESCRIPTION: This command initializes a new Meltano project inside a Docker container. It mounts the current working directory to `/projects` inside the container and then runs the `meltano init` command.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/installation-guide.mdx#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncd /your/projects/directory\n\ndocker run -v \"$(pwd)\":/projects \\\n             -w /projects \\\n             meltano/meltano init yourprojectname\n```\n\n----------------------------------------\n\nTITLE: Datadog Agent conf.yaml example\nDESCRIPTION: This snippet shows a sample `conf.yaml` file for the Datadog Agent. This configuration tells the agent to collect the Meltano log file, define the service as 'meltano', the source as 'python', and the source category as 'sourcecode'.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/logging.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ninit_config:\n\ninstances:\n\n##Log section\nlogs:\n  - type: file\n    path: \"<PATH_TO_MELTANO>.log\"\n    service: \"meltano\"\n    source: python\n    sourcecategory: sourcecode\n```\n\n----------------------------------------\n\nTITLE: Excluding Plugin Stdout Logs (YAML)\nDESCRIPTION: This YAML configuration snippet demonstrates how to exclude plugin stdout logs by setting the `meltano.core.block.extract_load` logger to `INFO` level. This reduces verbosity when DEBUG level logging is enabled for the root logger. The configuration also keeps the root logger level at DEBUG.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/logging.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 1\ndisable_existing_loggers: no\n\nloggers:\n  # Disable logging of tap and target stdout\n  meltano.core.block.extract_load:\n    level: INFO\n  root:\n    level: DEBUG\n    handlers: [console]\n```\n\n----------------------------------------\n\nTITLE: Installing Meltano with Postgres Component using pipx\nDESCRIPTION: This command demonstrates how to install Meltano with the 'postgres' component using 'pipx'. The `postgres` component provides support for PostgreSQL system databases using the modern `psycopg` driver.  This allows Meltano to use PostgreSQL as the default state backend.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/advanced-topics.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npipx install \"meltano[postgres]\"\n```\n\n----------------------------------------\n\nTITLE: Pinning Git Repository Plugin Version in Meltano\nDESCRIPTION: Shows how to pin a specific version of a plugin installed from a Git repository by adding a tag or commit SHA to the `pip_url` in the `meltano.yml` file. This allows for precise control over the plugin version.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/plugin-management.md#_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\n# Before:\npip_url: git+https://gitlab.com/meltano/tap-gitlab.git\npip_url: git+https://github.com/adswerve/target-bigquery.git\n\n# After:\n# highlight-start\npip_url: git+https://gitlab.com/meltano/tap-gitlab.git@v0.9.11\npip_url: git+https://github.com/adswerve/target-bigquery.git@v0.10.2\n# highlight-end\n\n# Alternatively:\n# highlight-start\npip_url: git+https://gitlab.com/meltano/tap-gitlab.git@2657b89e8896face4ce320a03b8413bbc196cec9\npip_url: git+https://github.com/adswerve/target-bigquery.git@3df97b951b7eebdfa331a1ff570f1fe3487d632f\n# highlight-end\n```\n\n----------------------------------------\n\nTITLE: Output of Listing Configuration for tap-github\nDESCRIPTION: This shows the output of the `meltano config tap-github list` command. It displays the current values of the `additional_auth_tokens`, `auth_token`, `repositories`, and `start_date` settings, indicating their sources (environment variables or the `meltano.yml` file).\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/getting-started/part1.mdx#_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n$ meltano config tap-github list\n2024-07-08T16:27:36.433823Z [info     ] The default environment 'dev' will be ignored for `meltano config`. To configure a specific environment, please use the option `--environment=<environment name>`.\n\nadditional_auth_tokens [env: TAP_GITHUB_ADDITIONAL_AUTH_TOKENS] current value: None (default)\n        Additional Auth Tokens: List of GitHub tokens to authenticate with. Streams will loop through them when hitting rate limits.\nauth_token [env: TAP_GITHUB_AUTH_TOKEN] current value: (redacted) (from the TAP_GITHUB_AUTH_TOKEN variable in `.env`)\n        Auth Token: GitHub token to authenticate with.\n...\nrepositories [env: TAP_GITHUB_REPOSITORIES] current value: ['meltano/meltnao', 'meltano/hub', 'meltano/sdk'] (from `meltano.yml`)\n        Repositories: An array of strings containing the github repos to be included\n...\nstart_date [env: TAP_GITHUB_START_DATE] current value: '2024-01-01' (from `meltano.yml`)\n```\n\n----------------------------------------\n\nTITLE: Filtering Meltano Logs with jq (Bash)\nDESCRIPTION: This snippet demonstrates how to use jq to filter Meltano logs. It selects log entries where `string_id` is \"tap-gitlab\" and `stdio` is \"stderr\", then extracts the `event` field. This is useful for isolating specific log messages from a particular plugin and stream.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/logging.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncat meltano.log | jq -c 'select(.string_id == \"tap-gitlab\" and .stdio == \"stderr\") | .event'\n```\n\n----------------------------------------\n\nTITLE: Configuring dbt-postgres (dev environment)\nDESCRIPTION: Configures dbt-postgres for a development environment, setting the host, user, password, port, database name, and schema for the Postgres connection. These settings allow dbt to connect to the data warehouse.\nSOURCE: https://github.com/meltano/meltano/blob/main/integration/example-library/meltano-run/index.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nmeltano --environment=dev config dbt-postgres set host localhost\n```\n\nLANGUAGE: shell\nCODE:\n```\nmeltano --environment=dev config dbt-postgres set user postgres\n```\n\nLANGUAGE: shell\nCODE:\n```\nmeltano --environment=dev config dbt-postgres set password postgres\n```\n\nLANGUAGE: shell\nCODE:\n```\nmeltano --environment=dev config dbt-postgres set port 5432\n```\n\nLANGUAGE: shell\nCODE:\n```\nmeltano --environment=dev config dbt-postgres set dbname warehouse\n```\n\nLANGUAGE: shell\nCODE:\n```\nmeltano --environment=dev config dbt-postgres set schema analytics\n```\n\n----------------------------------------\n\nTITLE: Upgrading Meltano\nDESCRIPTION: This command upgrades Meltano to the latest version within an existing Meltano project.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/installation-guide.mdx#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nmeltano upgrade\n```\n\n----------------------------------------\n\nTITLE: Setting a Default Value for a Setting in Meltano\nDESCRIPTION: This YAML snippet demonstrates how to set a default value for a setting in Meltano. The default value is used if no other value is provided.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/reference/plugin-definition-syntax.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nsettings:\n- name: setting_name\n  value: default_value\n```\n\n----------------------------------------\n\nTITLE: Custom Settings in Plugin Config YAML\nDESCRIPTION: This YAML snippet demonstrates adding a custom setting to a plugin's `config` in `meltano.yml`. The `custom_setting` is defined alongside a `known_setting` for the `tap-example` extractor, showing how to include settings not predefined in the plugin's metadata.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/configuration.md#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nextractors:\n- name: tap-example\n  config:\n    known_setting: value\n    custom_setting: value\n```\n\n----------------------------------------\n\nTITLE: Adding a Schedule with Meltano CLI\nDESCRIPTION: This command adds a schedule named run_gitlab to the Meltano project. The schedule is configured to run the gitlab_to_jsonl job daily.\nSOURCE: https://github.com/meltano/meltano/blob/main/integration/example-library/meltano-objects/index.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmeltano schedule add run_gitlab --job gitlab_to_jsonl --interval \"@daily\"\n```\n\n----------------------------------------\n\nTITLE: Configure Transform Plugins (YAML)\nDESCRIPTION: This YAML snippet shows how to configure transform plugins, specifically the `tap-gitlab` dbt package, within the `meltano.yml` file. It demonstrates setting the values of variables (`entry_table`, `generationmix_table`, `region_table`) that are used by the dbt models, either from environment variables or directly within the configuration file.  The use of `{% raw %}` and `{% endraw %}` is to prevent Jinja templating.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/transformation.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n{% raw %}\ntransforms:\n- name: tap-gitlab\n  pip_url: https://gitlab.com/meltano/dbt-tap-gitlab.git\n  vars:\n    entry_table: \"{{ env_var('PG_SCHEMA') }}.entry\"\n    generationmix_table: \"{{ env_var('PG_SCHEMA') }}.generationmix\"\n    region_table: \"{{ env_var('PG_SCHEMA') }}.region\"\n{% endraw %}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntransforms:\n  - name: tap-gitlab\n    pip_url: https://gitlab.com/meltano/dbt-tap-gitlab.git\n    vars:\n      entry_table: \"my_raw_schema.entry\"\n      generationmix_table: \"my_raw_schema.generationmix\"\n      region_table: \"my_raw_schema.region\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Plugin Variant with Meltano CLI\nDESCRIPTION: This command demonstrates how to specify a plugin variant when adding a discoverable plugin using the `--variant` option with `meltano add`.  It shows how to add a specific variant of a loader.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/plugin-management.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmeltano add <type> <name> --variant <variant>\n\n# For example:\nmeltano add loader target-postgres --variant=transferwise\n```\n\n----------------------------------------\n\nTITLE: Show Target-postgres Configuration\nDESCRIPTION: This command shows the full configuration of the 'target-postgres' loader, including settings from `meltano.yml`, environment variables, and default values. This allows verification of the final configuration used for the data loading process.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/getting-started/part2.mdx#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ meltano config target-postgres\n{\n&ensp;&ensp;&ensp;&ensp;\"add_record_metadata\": true,\n&ensp;&ensp;&ensp;&ensp;\"database\": \"postgres\",\n&ensp;&ensp;&ensp;&ensp;\"dialect+driver\": \"postgresql+psycopg2\",\n&ensp;&ensp;&ensp;&ensp;\"host\": \"localhost\",\n&ensp;&ensp;&ensp;&ensp;\"password\": \"password\",\n&ensp;&ensp;&ensp;&ensp;\"port\": 5432,\n&ensp;&ensp;&ensp;&ensp;\"user\": \"meltano\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example Adding dbt-postgres Output\nDESCRIPTION: Example terminal output showing the addition of the dbt-postgres utility to the meltano project.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/getting-started/part3.mdx#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nInstalled utility 'dbt-postgres'\n2024-01-01T00:25:53.152127Z [info     ] Installed utility 'dbt-postgres'\n2024-01-01T00:25:53.152894Z [info     ] Installed 1/1 plugins\n```\n\n----------------------------------------\n\nTITLE: Local Development logging.yaml example\nDESCRIPTION: This `logging.yaml` configuration is tailored for local development.  It configures a more terse logging output to the console (INFO level) along with full DEBUG level logs written to a file. This file is useful for debugging purposes while minimizing console noise.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/logging.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 1\ndisable_existing_loggers: false\n\nformatters:\n  structured_colored:\n    (): meltano.core.logging.console_log_formatter\n    colors: True\n  json:\n    (): meltano.core.logging.json_formatter\n\nhandlers:\n  console:\n    class: logging.StreamHandler\n    level: INFO\n    formatter: structured_colored\n    stream: \"ext://sys.stderr\"\n  file:\n    class: logging.FileHandler\n    level: DEBUG\n    filename: meltano.log\n    formatter: json\n\nroot:\n  level: DEBUG\n  propagate: yes\n  handlers: [console, file]\n```\n\n----------------------------------------\n\nTITLE: Checking Git Installation\nDESCRIPTION: This command verifies if Git is installed on the system. Git is a prerequisite for many Meltano plugins.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/installation-guide.mdx#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngit --version\n```\n\n----------------------------------------\n\nTITLE: Extract Single Stream With State Merging\nDESCRIPTION: Runs a full refresh pipeline for a single stream (`stream_1`) with state merging enabled.  It merges the current pipeline's state with the latest stored state, preserving bookmarks from other streams. Uses environment variables to configure the timestamp, selected stream, and merge behavior.\nSOURCE: https://github.com/meltano/meltano/blob/main/integration/example-library/meltano-run-merge-states/index.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nTAP_WITH_STATE_TS='2023-01-01T01:00:00+00:00' \\\nTAP_WITH_STATE__SELECT_FILTER='[\"stream_1\"]' \\\nmeltano run tap-with-state target-jsonl --full-refresh --state-id-suffix=merge --merge-state\n```\n\n----------------------------------------\n\nTITLE: Add Main Block to tap.py (Python)\nDESCRIPTION: This snippet adds a main block to the `tap.py` file of a custom extractor. It allows the tap to be run as a standalone script, which is useful for debugging. `TapCustomExtractor` should be replaced with the actual class name of the tap.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/debugging-custom-extractor.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == \"__main__\":\n    # TapCustomExtractor is the class name of your tap in tap.py\n    TapCustomExtractor.cli()\n```\n\n----------------------------------------\n\nTITLE: Feature Flag Usage in Python\nDESCRIPTION: This Python code demonstrates how to use feature flags in Meltano to enable or disable code blocks based on a project setting. It shows how to wrap code in a `feature_flag` context using the `ProjectSettingsService`, allowing for experimental features or deprecated behavior to be toggled without removing the code.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/contribute/style.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n# Example feature flag usage\nfrom meltano.core.project import Project\nfrom meltano.core.settings_service import FeatureFlags\n\nclass ExistingClass:\n\n    def __init__(self):\n        self.project = Project.find()\n\n    # If this method is called elsewhere in the code and the NEW_BEHAVIOR\n    # feature flag is not set to 'true' it will throw an error:\n    def experimental_method(self):\n        with self.project.settings.feature_flag(FeatureFlags.NEW_BEHAVIOR):\n            print(\"Doing new behavior...\")\n\n    # If this method is called elsewhere, its behavior will vary based on whether\n    # the feature flag is set in the project\n    # The same pattern can be used to deprecate existing behavior\n    # Notice the \"raise_error=False\" in the feature_flag method call\n    def existing_method_with_new_behavior(self):\n        with self.project.settings.feature_flag(FeatureFlags.NEW_BEHAVIOR, raise_error=False) as new_behavior:\n            if new_behavior:\n                print(\"Doing the new behavior...\")\n            else:\n                print(\"Doing the existing behavior...\")\n```\n\n----------------------------------------\n\nTITLE: Dropping Tables in PostgreSQL\nDESCRIPTION: This command is used to remove the `tap_github.commits` and `analytics.authors` tables from a PostgreSQL database. It connects to the `postgres` database as the `meltano` user and executes a SQL DROP TABLE command for each specified table. This is typically done to ensure a clean slate before running a full pipeline refresh.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/getting-started/part3.mdx#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec meltano_postgres psql -d postgres -U meltano -c 'DROP TABLE tap_github.commits; DROP TABLE analytics.authors;'\n```\n\n----------------------------------------\n\nTITLE: Set Superset SECRET_KEY\nDESCRIPTION: This command generates and sets a new `SECRET_KEY` for the Superset instance using `openssl`.  Setting a strong secret key enhances the security of the Superset deployment.  The key is stored in the Meltano configuration.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/analysis.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmeltano config superset set SECRET_KEY $(openssl rand -base64 42)\n```\n\n----------------------------------------\n\nTITLE: VSCode launch.json Configuration\nDESCRIPTION: This JSON snippet provides a sample launch configuration for VSCode to debug a custom extractor.  It specifies the program to run, arguments to pass (including the config file location), environment variables, and debugging options.  Replace `tap_foobar` with the actual name of the custom extractor library. The `config.json` file path needs to be valid and the `config.json` file should contain all the required configurations.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/debugging-custom-extractor.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Python: Current File\",\n            \"type\": \"python\",\n            \"request\": \"launch\",\n            # Replace tap_foobar below with the actual name of your custom extractors library\n            \"program\": \"${workspaceRoot}/tap_foobar/tap.py\",\n            \"console\": \"integratedTerminal\",\n            \"args\": [\"--config\", \".secrets/config.json\"],\n            \"env\": { \"PYTHONPATH\": \"${workspaceRoot}\"},\n            # Change this to false if you wish to debug and add breakpoints outside of your code e.g. the singer-sdk package\n            \"justMyCode\": true\n\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running an Extraction Pipeline with Meltano\nDESCRIPTION: This command runs a Meltano pipeline, using the `tap-github` extractor to extract data and the `target-jsonl` loader to load it into a JSONL file. This initiates the data extraction and loading process.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/getting-started/part1.mdx#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nmeltano run tap-github target-jsonl\n```\n\n----------------------------------------\n\nTITLE: Updating a Plugin with Meltano CLI\nDESCRIPTION: This command updates a plugin in a Meltano project. The `--update` option re-adds the plugin, updating the plugin lock file and the entry in the `meltano.yml` file, without overwriting user-defined configurations or extras.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/plugin-management.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nmeltano add --update <type> <name>\n\n# For example:\nmeltano add --update extractor tap-gitlab\n```\n\n----------------------------------------\n\nTITLE: Setting CLI Log Level via Meltano Config\nDESCRIPTION: This command sets the Meltano CLI log level to 'debug' using the `meltano config` command.  This increases the verbosity of Meltano's logs, providing more detailed information for troubleshooting.  It persists the setting in the meltano.yml file.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/troubleshooting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeltano config meltano set cli log_level debug\n```\n\n----------------------------------------\n\nTITLE: Defining Settings Group Validation for Redshift\nDESCRIPTION: This YAML snippet illustrates how to define settings group validation for a Meltano connector. It provides a list of minimal valid groups of settings required to use the connector, catering to different authorization methods, such as using passwords, AWS access keys, or AWS session tokens for Redshift.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/reference/plugin-definition-syntax.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsettings_group_validation:\n- - host\n  - port\n  - user\n  - password\n  - dbname\n  - s3_bucket\n  - default_target_schema\n  - aws_profile\n- - host\n  - port\n  - user\n  - password\n  - dbname\n  - s3_bucket\n  - default_target_schema\n  - aws_access_key_id\n  - aws_secret_access_key\n- - host\n  - port\n  - user\n  - password\n  - dbname\n  - s3_bucket\n  - default_target_schema\n  - aws_session_token\n```\n\n----------------------------------------\n\nTITLE: Configure Docker Mount for Airbyte Connector\nDESCRIPTION: This YAML snippet demonstrates how to configure a Docker mount for an Airbyte connector to access local files within a Meltano project. It shows how to set the `docker_mounts` setting in the connector's configuration to bind a local directory to a directory within the Airbyte connector's Docker container. Requires the correct local path and Airbyte image details.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/advanced-topics.mdx#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n   config:\n     docker_mounts: [{\"source\": \"/<YOUR_FULL_LOCAL_PATH>/\", \"target\": \"/local/\", \"type\": \"bind\"}]\n     airbyte_spec:\n       image: airbyte/source-file\n     airbyte_config:\n       dataset_name: test_file\n       format: csv\n       url: /local/data/test.csv\n```\n\n----------------------------------------\n\nTITLE: dbt Model for Extracting Author Names\nDESCRIPTION: This SQL script defines a dbt model that extracts distinct author names from the `commits` table in the `tap_github` schema. It uses the `source` function to reference the source data and the `materialized='table'` configuration to create a new table in the `analytics` schema.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/getting-started/part3.mdx#_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\n{{ config(\n    materialized='table'\n  )\n}}\n\nwith base as (\n    select *\n    from {{ source('tap_github', 'commits') }}\n)\nselect distinct (commit -> 'author' -> 'name') as authors\nfrom base\n\n```\n\n----------------------------------------\n\nTITLE: Invoke dbt directly with Meltano\nDESCRIPTION: These commands demonstrate how to invoke dbt directly using the `meltano invoke` command.  They showcase different ways of running dbt, including running the entire project, running with node selection criteria, and executing a command specified in `meltano.yml`.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/transformation.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# run your entire dbt project\nmeltano invoke dbt-snowflake run\n\n# run with node selection criteria\nmeltano invoke dbt-snowflake run --select +my_model_name\n\n# run with a command specified in meltano.yml\nmeltano invoke dbt-snowflake:my_models\n```\n\n----------------------------------------\n\nTITLE: Install Meltano Project Dependencies (Bash)\nDESCRIPTION: This command installs the dependencies for the Meltano project, ensuring that all plugins and their dependencies are properly installed and configured.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/tutorials/custom-extractor.md#_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nmeltano install\n```\n\n----------------------------------------\n\nTITLE: Initialize New Meltano Project with CLI\nDESCRIPTION: The `meltano init` command initializes a new Meltano project in the specified directory. It creates necessary project files and directories, setting up the basic structure for a Meltano project.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/getting-started/part1.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmeltano init my-meltano-project\n```\n\n----------------------------------------\n\nTITLE: Meltano Run Command Required Inputs\nDESCRIPTION: Demonstrates the convention of using uppercase names for required input parameters in the `meltano run` command. This helps users quickly identify mandatory arguments.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/contribute/cli.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n# TAP and TARGET are upper case since they are required inputs\nmeltano run <TAP_NAME> <TARGET_NAME>\n```\n\n----------------------------------------\n\nTITLE: Plugin Extras in YAML\nDESCRIPTION: This YAML snippet demonstrates how to define plugin extras in `meltano.yml`.  Plugin extras, like `example_extra`, are defined outside the `config` block and are treated as special settings that Meltano handles separately from regular plugin configurations.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/configuration.md#_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nextractors:\n- name: tap-example\n  config:\n    # Configuration goes here!\n    example_setting: value\n  # Extras go here!\n  example_extra: value\n```\n\n----------------------------------------\n\nTITLE: Output of Meltano Project Initialization\nDESCRIPTION: This shows the output of the `meltano init` command. It confirms the creation of the project and lists the files and directories created within the new project.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/getting-started/part1.mdx#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ meltano init my-new-project\nCreated my-new-project\nCreating project files...\n  my-new-project/\n  |-- .meltano\n  |-- meltano.yml\n  |-- README.md\n  |-- requirements.txt\n  |-- output/.gitignore\n  |-- .gitignore\n  |-- extract/.gitkeep\n  |-- load/.gitkeep\n  |-- transform/.gitkeep\n  |-- analyze/.gitkeep\n  |-- notebook/.gitkeep\n  |-- orchestrate/.gitkeep\nCreating system database...  Done!\n... Project my-new-project has been created!\n\nMeltano Environments initialized with dev, staging, and prod.\nTo learn more about Environments visit: https://docs.meltano.com/concepts/environments\n\nNext steps:\n  cd my-new-project\n  Visit https://docs.meltano.com/getting-started#create-your-meltano-project to learn where to go from here.\n```\n\n----------------------------------------\n\nTITLE: Expose Database Connection Variables (YAML)\nDESCRIPTION: This YAML snippet shows how to expose database connection details as environment variables within a Meltano project. It defines environment-specific configurations for database host, port, database name, user, and password, making them accessible to Jupyter notebooks. It assumes a database named \"demo\" is present.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/tutorials/jupyter.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 1\ndefault_environment: dev\nenvironments:\n- name: dev\n  config:\n  env:\n      PG_HOST: postgres\n      PG_PORT: \"5432\"\n      PG_DB: demo\n      PG_USER: admin\n      PG_PWD: password\n\n```\n\n----------------------------------------\n\nTITLE: Overriding Custom Setting with Environment Variable\nDESCRIPTION: This bash snippet shows how to override a custom plugin setting using an environment variable. `export TAP_EXAMPLE_CUSTOM_SETTING=overridden_value` sets the environment variable which will override the custom setting defined in `meltano.yml`.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/configuration.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nexport TAP_EXAMPLE_CUSTOM_SETTING=overridden_value\n```\n\n----------------------------------------\n\nTITLE: Compiling Manifest Files for All Environments\nDESCRIPTION: This example shows how to compile manifest files for each configured environment. The `--indent` option is used to format the output with an indentation of 2 spaces for readability.\nSOURCE: https://github.com/meltano/meltano/blob/main/integration/example-library/meltano-manifest/index.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmeltano compile --indent 2\n```\n\n----------------------------------------\n\nTITLE: Trigger an Airflow DAG Run via Meltano\nDESCRIPTION: This command triggers a specific Airflow DAG to run through Meltano. This example shows how to trigger the 'meltano' DAG.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/orchestration.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nmeltano invoke airflow dags trigger meltano\n```\n\n----------------------------------------\n\nTITLE: Delegating to an Environment Variable for a Setting Value\nDESCRIPTION: This YAML snippet demonstrates how to delegate to an environment variable for overriding a setting's value in Meltano. This allows settings to be configured using environment variables.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/reference/plugin-definition-syntax.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nsettings:\n- name: setting_name\n  env: SOME_API_KEY\n```\n\n----------------------------------------\n\nTITLE: Sample DataHub PostgreSQL recipe (YAML)\nDESCRIPTION: This YAML code defines a DataHub ingestion recipe for PostgreSQL. It specifies the connection details such as `host_port`, `database`, `username`, and `password`.  The values should be replaced by proper credentials to allow DataHub to connect and ingest metadata from the specified PostgreSQL database.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/tutorials/datahub.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nsource:\n  type: postgres\n  config:\n    # Coordinates\n    host_port: host.docker.internal:5432\n    database: demo\n\n    # Credentials\n    username: admin\n    password: password\n```\n\n----------------------------------------\n\nTITLE: Setting up Meltano Project\nDESCRIPTION: These commands are used to set up a new Meltano project. It activates the poetry environment (if needed), initializes a new Meltano project, and changes the current directory into the newly created project.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/contribute/api.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Activate your poetry created virtual environment if needed.\n# If you manage your virtualenv activation through other means you can omit this command.\npoetry shell\n\n# Create a new Meltano project\nmeltano init $PROJECT_DIRECTORY\n\n# Change directory into your newly created project\ncd $PROJECT_DIRECTORY\n```\n\n----------------------------------------\n\nTITLE: Start the Airflow Webserver via Meltano\nDESCRIPTION: This command starts the Airflow webserver through Meltano. The webserver provides a UI for interacting with Airflow, monitoring pipelines, and viewing logs.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/orchestration.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmeltano invoke airflow webserver\n```\n\n----------------------------------------\n\nTITLE: Listing tap-gitlab configuration\nDESCRIPTION: Lists the configuration settings for the tap-gitlab extractor. This allows you to verify the current settings.\nSOURCE: https://github.com/meltano/meltano/blob/main/integration/example-library/meltano-run/index.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmeltano config tap-gitlab list\n```\n\n----------------------------------------\n\nTITLE: Defining Container Specification for a Meltano Plugin (dbt)\nDESCRIPTION: This YAML snippet demonstrates how to define a container specification for a Meltano plugin command. It includes the command to execute, the Docker image to use, environment variables, volumes, and port mappings, allowing commands to be run in a containerized environment, such as `dbt compile`.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/reference/plugin-definition-syntax.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- name: dbt\n  pip_url: dbt-core~=1.0.1 dbt-postgres~=1.0.1\n  commands:\n    compile:\n      args: compile\n      container_spec:\n        command: compile\n        image: ghcr.io/dbt-labs/dbt-postgres:latest\n        env:\n          DBT_PROFILES_DIR: /usr/app/profile/\n        volumes:\n        - \"$MELTANO_PROJECT_ROOT/transform/:/usr/app/\"\n    docs-generate:\n      args: docs generate\n      container_spec:\n        command: docs generate\n        image: ghcr.io/dbt-labs/dbt-postgres:latest\n        env:\n          DBT_PROFILES_DIR: /usr/app/profile/\n        volumes:\n         - \"$MELTANO_PROJECT_ROOT/transform/:/usr/app/\"\n    docs-serve:\n      args: docs serve\n      container_spec:\n        command: docs serve --no-browser\n        image: ghcr.io/dbt-labs/dbt-postgres:latest\n        env:\n          DBT_PROFILES_DIR: /usr/app/profile/\n        volumes:\n        - \"$MELTANO_PROJECT_ROOT/transform/:/usr/app/\"\n        ports:\n          \"8080\": \"8080/tcp\"\n```\n\n----------------------------------------\n\nTITLE: dbt Source YAML Configuration\nDESCRIPTION: This YAML file defines the source data location for dbt. It specifies the name, schema (`tap_github`), and table (`commits`) where the raw data is loaded, allowing dbt to reference and use this data for transformations.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/getting-started/part3.mdx#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nconfig-version: 2\nversion: 2\nsources:\n  - name: tap_github     # the name we want to reference this source by\n    schema: tap_github   # the schema the raw data was loaded into\n    tables:\n      - name: commits\n```\n\n----------------------------------------\n\nTITLE: Meltano Extractor Plugin Configuration (YAML)\nDESCRIPTION: This YAML snippet shows how to configure an extractor plugin within the `meltano.yml` file. It includes settings for installation, execution, capabilities, configuration, and sensitive information.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/tutorials/custom-extractor.md#_snippet_21\n\nLANGUAGE: yml\nCODE:\n```\n# ...\nplugins:\n  extractors:\n    # Insert a new entry:\n    - name: tap-my-custom-source\n      namespace: tap_my_custom_source\n      # Installs the plugin from a local path\n      # in 'editable' mode (https://pip.pypa.io/en/stable/topics/local-project-installs/#editable-installs).\n      # Can point to '.' if it's in the same directory as `meltano.yml`\n      pip_url: -e /path/to/tap-my-custom-source\n      # Name of custom tap that will be invoked.\n      # Can be found in the pyproject.toml of your custom tap under CLI declaration\n      executable: tap-my-custom-source\n      capabilities:\n        # For a reference of plugin capabilities, see:\n        # https://docs.meltano.com/reference/plugin-definition-syntax#capabilities\n        - state\n        - catalog\n        - discover\n      config:\n        # Configured values:\n        username: me@example.com\n        start_date: '2024-01-01'\n      settings:\n        - name: username\n        - name: password\n          sensitive: true\n        - name: start_date\n          # Default value for the plugin:\n          value: '2010-01-01T00:00:00Z'\n  loaders:\n    # your loaders here:\n    - name: target-jsonl\n      variant: andyh1203\n      pip_url: target-jsonl\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Inheriting with Variants in meltano.yml\nDESCRIPTION: This example demonstrates inheriting plugin configuration with different variants. It highlights that the `variant` property is crucial when inheriting from a plugin to specify which variant is being inherited. The snippet shows how `target-snowflake--transferwise` inherits from a `target-snowflake` with `variant: transferwise`.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/concepts/project.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nplugins:\n  loaders:\n  - name: target-snowflake          # Shadows discoverable `target-snowflake` (see below)\n    variant: datamill-co            # using variant `datamill-co`\n  - name: target-snowflake--derived\n    # highlight-next-line\n    inherit_from: target-snowflake  # Inherits from project's `target-snowflake`\n  - name: target-snowflake--transferwise\n    # highlight-start\n    inherit_from: target-snowflake  # Inherits from discoverable `target-snowflake`\n    variant: transferwise           # using variant `transferwise`\n    # highlight-end\n```\n\n----------------------------------------\n\nTITLE: View Meltano Version in Docker Container\nDESCRIPTION: Runs a Docker container based on the `meltano-demo-project:dev` image and executes the `meltano --version` command within the container. This displays the Meltano version used in the container.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/containerization.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run meltano-demo-project:dev --version\n```\n\n----------------------------------------\n\nTITLE: Configuring target-postgres (dev environment)\nDESCRIPTION: Configures the target-postgres loader for a development environment, setting the user, password, database name, and default target schema. Ensure Postgres is running and accessible.\nSOURCE: https://github.com/meltano/meltano/blob/main/integration/example-library/meltano-run/index.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmeltano --environment=dev config target-postgres set user postgres\n```\n\nLANGUAGE: shell\nCODE:\n```\nmeltano --environment=dev config target-postgres set password postgres\n```\n\nLANGUAGE: shell\nCODE:\n```\nmeltano --environment=dev config target-postgres set dbname warehouse\n```\n\nLANGUAGE: shell\nCODE:\n```\nmeltano --environment=dev config target-postgres set default_target_schema public\n```\n\n----------------------------------------\n\nTITLE: Selecting GitHub Commits Data with Meltano\nDESCRIPTION: This command instructs Meltano to select all data from the 'commits' stream of the 'tap-github' extractor, effectively including all attributes from the GitHub commits data source in the subsequent data extraction process.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/getting-started/part3.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeltano select tap-github commits \"*\"\n```\n\n----------------------------------------\n\nTITLE: Access Environment Variables in Jupyter Notebook (Python)\nDESCRIPTION: This Python snippet demonstrates how to access environment variables within a Jupyter notebook using the `os.getenv()` function.  It retrieves the database connection details (host, port, database name, user, and password) from the environment and assigns them to Python variables. It requires the `os` module.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/tutorials/jupyter.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nPG_HOST = os.getenv(\"PG_HOST\", default=None)\nPG_PORT = os.getenv(\"PG_PORT\", default=None)\nPG_DB = os.getenv(\"PG_DB\", default=None)\nPG_USER = os.getenv(\"PG_USER\", default=None)\nPG_PWD = os.getenv(\"PG_PWD\", default=None)\n\n```\n\n----------------------------------------\n\nTITLE: Adding a Job with Meltano CLI\nDESCRIPTION: This command adds a job named gitlab_to_jsonl to the Meltano project. The job is configured to run the tap-gitlab extractor and the target-jsonl loader.\nSOURCE: https://github.com/meltano/meltano/blob/main/integration/example-library/meltano-objects/index.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmeltano job add gitlab_to_jsonl --tasks '[\"tap-gitlab target-jsonl\"]'\n```\n\n----------------------------------------\n\nTITLE: Run a Specific Airflow Task via Meltano\nDESCRIPTION: This command runs a specific Airflow task manually through Meltano's invoke command. This example shows how to run the 'extract_load' task with the current date.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/orchestration.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nmeltano invoke airflow tasks run --raw meltano extract_load $(date -I)\n```\n\n----------------------------------------\n\nTITLE: Re-install Superset utility\nDESCRIPTION: This command re-installs the Superset utility after the `pip_url` has been updated in the `meltano.yml` file. This ensures that the newly added database dependencies are installed and available for use with Superset.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/analysis.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmeltano install utility superset\n```\n\n----------------------------------------\n\nTITLE: Listing Selected Entities and Attributes with Meltano Select\nDESCRIPTION: This command re-lists the currently selected entities and attributes for the specified tap after applying the `meltano select` commands. It's used to verify the selections are correct.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/getting-started/part1.mdx#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nmeltano select tap-github --list\n```\n\n----------------------------------------\n\nTITLE: Installing Meltano in a Virtual Environment\nDESCRIPTION: This command installs the `meltano` package into the currently activated virtual environment.  Any dependencies of Meltano will also be installed within this environment, isolating them from the system-wide Python installation and other virtual environments.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/concepts/python_virtual_environments.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install meltano\n```\n\n----------------------------------------\n\nTITLE: Install Meltano dependencies\nDESCRIPTION: This command installs the necessary dependencies for the Meltano project, preparing it for further operations and tests. It ensures that all required packages and resources are available for the Meltano instance to function correctly.\nSOURCE: https://github.com/meltano/meltano/blob/main/integration/example-library/meltano-migrations/index.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmeltano install\n```\n\n----------------------------------------\n\nTITLE: Adding an Inheriting Plugin with Meltano CLI\nDESCRIPTION: These commands demonstrate how to add plugins that inherit from existing plugins in a Meltano project. The `--inherit-from` option is used to specify the base plugin from which the new plugin inherits its configuration. The type and name of the new plugin are specified along with the inherit-from argument.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/plugin-management.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nmeltano add <type> <name> --inherit-from <existing-name>\n\n# For example:\nmeltano add extractor tap-ga--client-foo --inherit-from tap-google-analytics\nmeltano add extractor tap-ga--client-bar --inherit-from tap-google-analytics\nmeltano add extractor tap-ga--client-foo--project-baz --inherit-from tap-ga--client-foo\n```\n\n----------------------------------------\n\nTITLE: Scheduling ELT Pipeline with Meltano CLI\nDESCRIPTION: This code snippet demonstrates how to schedule an ELT pipeline using the Meltano CLI. It adds a schedule named 'gitlab-to-postgres' that extracts data from a GitLab source using the 'tap-gitlab' extractor and loads it into a PostgreSQL target using the 'target-postgres' loader. The pipeline is scheduled to run daily.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/getting-started/meltano-at-a-glance.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeltano schedule add gitlab-to-postgres --extractor tap-gitlab --loader target-postgres --interval @daily\n```\n\n----------------------------------------\n\nTITLE: Run dbt source freshness using Meltano\nDESCRIPTION: This command invokes the dbt-postgres transformer within Meltano to run a source freshness check.  This updates the sources.json file which is used for ingestion into DataHub.  It is a prerequisite for the dbt DataHub ingestion.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/tutorials/datahub.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nmeltano invoke dbt-postgres:freshness\n```\n\n----------------------------------------\n\nTITLE: Inspect Loaded Data (Bash)\nDESCRIPTION: This command uses the `head` utility to display the first five lines of the `comments.jsonl` file in the `output` directory, allowing inspection of the loaded data.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/tutorials/custom-extractor.md#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nhead -n 5 output/comments.jsonl\n```\n\n----------------------------------------\n\nTITLE: Input CSV for Mapper Plugin\nDESCRIPTION: This CSV file serves as input data for a `meltano-map-transformer` example. It contains sample data for fields such as `id`, `first_name`, `last_name`, `email`, and `ip_address`.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/mappers.md#_snippet_3\n\nLANGUAGE: csv\nCODE:\n```\nid,first_name,last_name,email,ip_address\n1,Ethe,Book,ebook0@twitter.com,67.61.243.220\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin Commands in meltano.yml\nDESCRIPTION: This YAML snippet shows how to define custom commands for a plugin within the `meltano.yml` file. The `commands` property maps command names to argument lists, allowing dynamic references to configuration using environment variables. The `description` provides documentation displayed when listing commands.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/concepts/project.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nutilities:\n- name: dbt-snowflake\n  variant: dbt-labs\n  commands:\n    my_models:\n      args: run --select +my_model_name\n      description: Run dbt, selecting model `my_model_name` and all upstream models. Read more about the dbt node selection syntax at https://docs.getdbt.com/reference/node-selection/syntax\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Plugin with Meltano CLI\nDESCRIPTION: These commands illustrate how to add a custom plugin to your Meltano project using the `--custom` option with `meltano add`.  It demonstrates adding a custom extractor and loader.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/plugin-management.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmeltano add --custom <type> <name>\n\n# For example:\nmeltano add --custom extractor tap-covid-19\nmeltano add --custom loader target-bigquery--custom\n\n# If you're using Docker, don't forget to mount the project directory,\n```\n\n----------------------------------------\n\nTITLE: Run Meltano Job\nDESCRIPTION: Executes a Meltano job using `tap-gitlab` as the source and `target-jsonl` as the destination. This command initiates the data pipeline.\nSOURCE: https://github.com/meltano/meltano/blob/main/integration/example-library/meltano-state-local/index.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmeltano run tap-gitlab target-jsonl\n```\n\n----------------------------------------\n\nTITLE: Creating dbt model file\nDESCRIPTION: Creates the file for a new dbt model.  This model will contain the SQL transformation.\nSOURCE: https://github.com/meltano/meltano/blob/main/integration/example-library/meltano-run/index.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ntouch  ./transform/models/tap_gitlab/commits_last_7d.sql\n```\n\n----------------------------------------\n\nTITLE: Invoking a Tap and Redirecting Output\nDESCRIPTION: This command invokes a Singer tap using `meltano invoke` and redirects its raw output to a file named `output.json`. This allows for inspection of the tap's output and can be used to confirm that the tap is working correctly. It is part of isolating connectors during debugging.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/troubleshooting.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmeltano invoke tap-csv > output.json\n```\n\n----------------------------------------\n\nTITLE: Creating a Python Virtual Environment\nDESCRIPTION: This command uses the `venv` module to create a new virtual environment in the specified directory. The directory `.venv/meltano/` is commonly used to store virtual environments within a Meltano project. This allows for isolated Python environments with specific dependencies.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/concepts/python_virtual_environments.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m venv .venv/meltano/\n```\n\n----------------------------------------\n\nTITLE: Example Initialize dbt Output\nDESCRIPTION: Example terminal output showing the result of the dbt initialization process. Shows the creation of the dbt profiles directory and indicates successful initialization.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/getting-started/part3.mdx#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ meltano invoke dbt-postgres:initialize\n2024-09-22T07:36:52.985090Z [info     ] Environment 'dev' is active\ncreating dbt profiles directory path=PosixPath('/[...]/my-meltano-project/transform/profiles/postgres')\ndbt initialized                dbt_ext_type=postgres dbt_profiles_dir=PosixPath('/[...]/my-meltano-project/transform/profiles/postgres') dbt_project_dir=PosixPath('/[...]/my-meltano-project/transform')\n```\n\n----------------------------------------\n\nTITLE: List Entities and Attributes\nDESCRIPTION: Lists all available entities and attributes from the tap's catalog using `meltano select`. The `--list --all` flags are used to display all entities and attributes without requiring a selection.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/tutorials/custom-extractor.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nmeltano select --list --all\n```\n\n----------------------------------------\n\nTITLE: Meltano Project File Update with Selected Commits Data\nDESCRIPTION: This YAML snippet shows the result of the `meltano select` command, adding all commits fields to the selected attributes. The extractors block now includes commits.* to select all commit data for extraction.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/getting-started/part3.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nextractors:\n      - name: tap-github\n        [...]\n        select:\n        - commits.url # <== technically not necessary anymore, but no need to delete\n        - commits.sha # <== technically not necessary anymore, but no need to delete\n        - commits.commit_timestamp # <== technically not necessary anymore, but no need to delete\n        - commits.* # <== new data.\n```\n\n----------------------------------------\n\nTITLE: Add Extractor from YAML Definition (Bash)\nDESCRIPTION: This command adds a custom extractor to the Meltano project, using a YAML file containing the plugin definition. It uses the `--from-ref` option to specify the YAML file.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/tutorials/custom-extractor.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nmeltano add --from-ref tap-jsonplaceholder.yml extractor tap-jsonplaceholder\n```\n\n----------------------------------------\n\nTITLE: Run PostgreSQL Docker Container\nDESCRIPTION: This command starts a Docker container running PostgreSQL. It maps port 5432 on the host to port 5432 in the container, sets the POSTGRES_USER environment variable to 'meltano', sets the POSTGRES_PASSWORD environment variable to 'password', names the container 'meltano_postgres', and runs the 'postgres' image in detached mode.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/getting-started/part2.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --name meltano_postgres -p 5432:5432 -e POSTGRES_USER=meltano -e POSTGRES_PASSWORD=password -d postgres\n```\n\n----------------------------------------\n\nTITLE: Get Specific Run API Example\nDESCRIPTION: This example shows how to retrieve a specific run using the Meltano API's GET method. It fetches a specific resource from the provided endpoint.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/contribute/api.md#_snippet_3\n\nLANGUAGE: null\nCODE:\n```\nGET meltano/core/v2/envs/prod/jobs/tap-gitlab-target-jsonl/runs/ff643ba2\nResponse: {A run}\n```\n\n----------------------------------------\n\nTITLE: Add GitLab CI/CD Files to Meltano Project\nDESCRIPTION: Adds `.gitlab-ci.yml` and `.gitlab/ci/docker.gitlab-ci.yml` files to the Meltano project, enabling GitLab CI/CD.  These files configure the CI/CD pipeline for building and pushing the Docker image to the GitLab Container Registry.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/containerization.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmeltano add files files-gitlab-ci\n```\n\n----------------------------------------\n\nTITLE: Python Debugging with breakpoint()\nDESCRIPTION: This snippet describes how to use the Python debugger. By adding `breakpoint()` to your Python code, you can drop into the debugger at that specific location.  From there, you can use the `interact` command to enter a Python interactive console.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/contribute/api.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nbreakpoint()\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom Plugin Fork in Meltano\nDESCRIPTION: Explains how to configure Meltano to use a custom fork of a plugin by modifying the `pip_url` in the `meltano.yml` file to point to the fork's Git repository. This allows using modified or enhanced versions of plugins.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/plugin-management.md#_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nplugins:\n  extractors:\n  - name: tap-gitlab\n    variant: meltano\n    # highlight-start\n    pip_url: git+https://gitlab.com/meltano/tap-gitlab.git\n    # pip_url: git+https://gitlab.com/meltano/tap-gitlab.git@ref-name\n    # highlight-end\n```\n\n----------------------------------------\n\nTITLE: Defining Schedules in meltano.yml\nDESCRIPTION: This YAML snippet shows how to define pipeline schedules within the `meltano.yml` file. Schedules define when and how jobs are executed. Each schedule has a `name`, `job`, and `interval`. The `job` property references an existing job defined in the `jobs` section.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/concepts/project.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nschedules:\n  - name: foo-to-bar\n    job: tap-foo-to-target\n    interval: \"@hourly\"\n```\n\n----------------------------------------\n\nTITLE: Interacting with Snowplow Micro REST API\nDESCRIPTION: These snippets show how to interact with the Snowplow Micro REST API using `http`.  It lists a schema, summarizes events, lists good and bad events, and resets counters.  Requires `http` command-line tool.\nSOURCE: https://github.com/meltano/meltano/blob/main/src/meltano/core/tracking/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# list a known schema\nhttp localhost:9090/micro/iglu/com.meltano/environment_context/jsonschema/1-0-0\n\n# list a summary\nhttp localhost:9090/micro/all\n\n# good events\nhttp localhost:9090/micro/good\n\n# bad events\nhttp localhost:9090/micro/bad\n\n# reset counters\nhttp localhost:9090/micro/reset\n```\n\n----------------------------------------\n\nTITLE: Defining dbt source.yml\nDESCRIPTION: Adds the source configuration to the dbt source.yml file, specifying the source name, schema, and tables. This allows dbt to understand where the data is coming from.\nSOURCE: https://github.com/meltano/meltano/blob/main/integration/example-library/meltano-run/index.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ntee -a ./transform/models/tap_gitlab/source.yml << END\nconfig-version: 2\nversion: 2\nsources:\n  - name: tap_gitlab\n    schema: public\n    tables:\n      - name: commits\nEND\n```\n\n----------------------------------------\n\nTITLE: Running a Meltano Job (Dry Run)\nDESCRIPTION: Executes the 'gitlab-to-postgres' job in dry-run mode, which simulates the execution without actually performing the data extraction and loading. Used for testing.\nSOURCE: https://github.com/meltano/meltano/blob/main/integration/example-library/meltano-run/index.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nmeltano run --dry-run gitlab-to-postgres\n```\n\n----------------------------------------\n\nTITLE: Install Custom Tap with `uv` (Bash)\nDESCRIPTION: This command installs a custom tap using `uv`, a tool for managing Python dependencies, helping to avoid dependency conflicts.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/tutorials/custom-extractor.md#_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nuv tool install tap-my-custom-source\n```\n\n----------------------------------------\n\nTITLE: Compiling a Meltano Manifest for a Specific Environment\nDESCRIPTION: This example demonstrates how to compile a Meltano manifest for a single, specified environment using the `--environment` option. This is useful for generating manifests tailored to specific deployment environments.\nSOURCE: https://github.com/meltano/meltano/blob/main/integration/example-library/meltano-manifest/index.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmeltano --environment=prod compile\n```\n\n----------------------------------------\n\nTITLE: Install Python Dependencies\nDESCRIPTION: Navigates to the project directory and installs Python dependencies using `uv sync`. This ensures that all necessary packages for the custom extractor are installed.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/tutorials/custom-extractor.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd tap-jsonplaceholder\n\nuv sync\n```\n\n----------------------------------------\n\nTITLE: Install Meltano and Cookiecutter\nDESCRIPTION: Installs Meltano and Cookiecutter using the `uv tool install` command. Meltano is used for running the ELT pipeline, and Cookiecutter is used for creating the project files from a template.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/tutorials/custom-extractor.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nuv tool install meltano\n\nuv tool install cookiecutter\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Inheritance Example YAML\nDESCRIPTION: This YAML snippet demonstrates how environment variables are inherited across different levels in `meltano.yml`, including terminal environment, root-level, environment-level, root-level plugin-level, and environment-level plugin-level configurations. The STACKED variable shows the cumulative effect of this inheritance, with values being appended at each level.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/configuration.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nenv:\n  # Level 2: top-level `env:`\n  # Inherits from terminal context\n  LEVEL_NUM: \"2\"                  #  '2'\n  STACKED: \"${STACKED}2\"          # '12'\nplugins:\n  extractors:\n    - name: tap-foobar\n      env:\n        # Level 4: plugin-level `env:`\n        # Inherits from a environment-level `env:` if an environment is active\n        # Inherits directly from top-level `env:` if no environment is active\n        LEVEL_NUM: \"4\"            #    '4'\n        STACKED: \"${STACKED}4\"    # '1234'\nenvironments:\n  - name: prod\n    env:\n      # Level 3: environment-level `env:`\n      # Inherits from top-level `env:`\n      LEVEL_NUM: \"3\"              #   '3'\n      STACKED: \"${STACKED}3\"      # '123'\n    config:\n      plugins:\n        extractors:\n          - name: tap-foobar\n            env:\n              # Level 5: environment-level plugin `env:`\n              # Inherits from (global) plugin-level `env:`\n              LEVEL_NUM: \"5\"          #     '5'\n              STACKED: \"${STACKED}5\"  # '12345'\n```\n\n----------------------------------------\n\nTITLE: Adding dbt-postgres utility\nDESCRIPTION: Adds dbt-postgres as a utility to Meltano. dbt is used for data transformation.\nSOURCE: https://github.com/meltano/meltano/blob/main/integration/example-library/meltano-run/index.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nmeltano add utility dbt-postgres\n```\n\n----------------------------------------\n\nTITLE: Meltano Schedule Configuration with Environment Variables\nDESCRIPTION: This YAML snippet demonstrates how to include schedule-specific environment variables. These variables will be available to the plugins invoked by the schedule.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/orchestration.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nschedules:\n- name: daily-gitlab-load\n  interval: '@daily'\n  job: tap-gitlab-to-target-postgres-with-dbt\n  env:\n    SCHEDULE_SPECIFIC_ENV_VAR: schedule_specific_value\n```\n\n----------------------------------------\n\nTITLE: Setting CLI Log Level via Command-Line Option\nDESCRIPTION: This command sets the Meltano CLI log level to 'debug' using the `--log-level` command-line option.  This option overrides any other log level settings for the specific command execution. Useful for targeted debugging.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/troubleshooting.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmeltano --log-level=debug <command> ...\n```\n\n----------------------------------------\n\nTITLE: Run ELT Pipeline (Bash)\nDESCRIPTION: This command runs an ELT (Extract, Load, Transform) pipeline, extracting data from `tap-jsonplaceholder` and loading it into `target-jsonl`.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/tutorials/custom-extractor.md#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nmeltano run tap-jsonplaceholder target-jsonl\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Conflict Error Messages Shell\nDESCRIPTION: These shell examples demonstrate the error messages that appear when a setting's value is set via multiple environment variables or conflicting values are provided for the same setting through different environment variables. It shows how Meltano identifies the conflicting variables and their values.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/configuration.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\n$ export MY_CUSTOM_TAP_USERNAME=some_username\n$ export MY_CUSTOM_TAP_CUSTOM_TAP_USERNAME=some_username\n$ meltano config my-custom-tap\nSetting value set via multiple environment variables: ['MY_CUSTOM_TAP_CUSTOM_TAP_USERNAME', 'MY_CUSTOM_TAP_USERNAME']\n```\n\nLANGUAGE: Shell\nCODE:\n```\n$ export MY_CUSTOM_TAP_USERNAME=some_username\n$ export MY_CUSTOM_TAP_CUSTOM_TAP_USERNAME=some_other_username\n$ meltano config my-custom-tap\nConflicting values for setting found in: ['MY_CUSTOM_TAP_CUSTOM_TAP_USERNAME', 'MY_CUSTOM_TAP_USERNAME']\n```\n\n----------------------------------------\n\nTITLE: Setting State Backend URI\nDESCRIPTION: These commands configure the Meltano project to use an S3 bucket for state storage, specifying the URI and AWS credentials.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/concepts/state_backends.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ meltano config meltano set state_backend.uri \"s3://meltano/state\"\nMeltano setting 'state_backend.uri' was set in `.env`: 's3://meltano/state'\n\n$ meltano config meltano set state_backend.s3.aws_access_key_id <AWS_ACCESS_KEY_ID>\nMeltano setting 'state_backend.s3.aws_access_key_id' was set in `.env`: '(redacted)'\n\n$ meltano config meltano set state_backend.s3.aws_secret_access_key <AWS_SECRET_ACCESS_KEY>\nMeltano setting 'state_backend.s3.aws_secret_access_key' was set in `.env`: '(redacted)'\n```\n\n----------------------------------------\n\nTITLE: Update Extractor from YAML Definition (Bash)\nDESCRIPTION: This command updates an existing custom extractor in the Meltano project using a YAML file containing the plugin definition. It utilizes the `--update` and `--from-ref` flags to update from the specified YAML file.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/tutorials/custom-extractor.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nmeltano add --update --from-ref tap-jsonplaceholder.yml extractor tap-jsonplaceholder\n```\n\n----------------------------------------\n\nTITLE: Initialize Git Repository\nDESCRIPTION: Initializes a Git repository in the Meltano project directory if one doesn't already exist. This is necessary for tracking changes and pushing the project to GitLab.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/containerization.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngit init\n```\n\n----------------------------------------\n\nTITLE: Install Tap and Loader\nDESCRIPTION: Installs the newly created tap (`tap-jsonplaceholder`) and a target loader (`target-jsonl`) to the Meltano project. The `target-jsonl` loader is used to write the extracted data to JSONL files.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/tutorials/custom-extractor.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmeltano install\n\nmeltano add loader target-jsonl\n```\n\n----------------------------------------\n\nTITLE: Initializing dbt-postgres\nDESCRIPTION: Initializes the dbt-postgres utility, setting up the necessary directory structure and configuration files for dbt projects.\nSOURCE: https://github.com/meltano/meltano/blob/main/integration/example-library/meltano-run/index.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nmeltano invoke dbt-postgres:initialize\n```\n\n----------------------------------------\n\nTITLE: Add Airflow DAG Generator to Meltano Project\nDESCRIPTION: This command adds the Airflow DAG generator to your Meltano project without installing the entire Airflow orchestrator plugin. It installs the `files-airflow` bundle, which contains the DAG generator.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/orchestration.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmeltano add files files-airflow\n```\n\n----------------------------------------\n\nTITLE: Looping Through State Files and Setting State\nDESCRIPTION: This shell script loops through all JSON files created in the previous steps and sets the state for each job using the corresponding JSON file.  The `--force` flag bypasses confirmation prompts.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/concepts/state_backends.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nfor state_file in *-state.json; do meltano state set --force ${state_file%-state.json} --input-file $state_file; done\n```\n\n----------------------------------------\n\nTITLE: Installing Meltano\nDESCRIPTION: Installs Meltano dependencies as defined in the meltano.yml file.\nSOURCE: https://github.com/meltano/meltano/blob/main/integration/example-library/meltano-run/index.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmeltano install\n```\n\n----------------------------------------\n\nTITLE: Checking Python Version\nDESCRIPTION: This command checks the installed Python version. Meltano supports Python versions 3.9, 3.10, 3.11, 3.12 and 3.13. Some plugins do not yet support Python 3.13.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/installation-guide.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython --version\n```\n\n----------------------------------------\n\nTITLE: Setting Airflow Executor via Meltano Config\nDESCRIPTION: This command sets the Airflow executor to LocalExecutor using the Meltano configuration. This improves performance over the default SequentialExecutor in production environments. It uses the `meltano config` command.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/production.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeltano config airflow set core.executor LocalExecutor\n```\n\n----------------------------------------\n\nTITLE: Example Meltano Run Output\nDESCRIPTION: Example output from running meltano to extract and load the data. Shows the logs and data being transferred.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/getting-started/part3.mdx#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n{\"type\": \"STATE\", \"value\": {\"bookmarks\": {\"sbalnojan/meltano-lightdash\": {\"commits\": {\"since\": \"2024-09-22T07:37:06.289545Z\"}}}}}\n\n```\n\n----------------------------------------\n\nTITLE: Plugin Inheritance in YAML\nDESCRIPTION: This YAML snippet demonstrates plugin inheritance in `meltano.yml`. `tap-ga--view-foo` and `tap-ga--view-bar` inherit configurations from `tap-google-analytics`. Inherited settings can be overridden, as demonstrated with the `start_date` setting in `tap-ga--view-bar`.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/configuration.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nplugins:\n  extractors:\n  - name: tap-google-analytics\n    variant: meltano\n    config:\n      key_file_location: client_secrets.json\n      start_date: \"2020-10-01T00:00:00Z\"\n  - name: tap-ga--view-foo\n    inherit_from: tap-google-analytics\n    config:\n      # `key_file_location` and `start_date` are inherited\n      view_id: 123456\n  - name: tap-ga--view-bar\n    inherit_from: tap-google-analytics\n    config:\n      # `key_file_location` is inherited\n      start_date: \"2020-12-01T00:00:00Z\" # `start_date` is overridden\n      view_id: 789012\n```\n\n----------------------------------------\n\nTITLE: Looping Through State IDs with Pattern\nDESCRIPTION: This shell script loops through state IDs matching a specific pattern, retrieves the state for each, and writes it to a separate JSON file. The `--pattern` flag filters the state IDs.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/concepts/state_backends.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nfor job_id in $(meltano state list --pattern 'dev:*'); do meltano state get $job_id > $job_id-state.json; done\n```\n\n----------------------------------------\n\nTITLE: dbt Run Output Example\nDESCRIPTION: Example terminal output from running the dbt transformation process.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/getting-started/part3.mdx#_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n20:45:15  Done. PASS=1 WARN=0 ERROR=0 SKIP=0 TOTAL=1\n#\n```\n\n----------------------------------------\n\nTITLE: Optional DBT_CLEAN_PROJECT_FILES_ONLY configuration\nDESCRIPTION: This YAML snippet shows an optional configuration setting in the meltano.yml file to allow dbt to clean files outside the project directory. It addresses potential errors related to dbt's file cleaning behavior.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/getting-started/part3.mdx#_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 1\nenv:\n  DBT_CLEAN_PROJECT_FILES_ONLY: \"false\"\n```\n\n----------------------------------------\n\nTITLE: Setting the Kind of a Setting in Meltano\nDESCRIPTION: This YAML snippet demonstrates setting the kind for a Meltano setting. It allows for defining the type of input control to be used for a setting, such as `integer`.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/reference/plugin-definition-syntax.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nsettings:\n- name: setting_name\n  kind: integer\n```\n\n----------------------------------------\n\nTITLE: Example Front Matter\nDESCRIPTION: This example demonstrates the required front matter for a documentation page. It sets the layout, title, permalink, and sidebar position.  Front matter is essential for Jekyll to properly render the page.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/contribute/docs.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: doc\ntitle: My New Doc\npermalink: /tutorials/new-doc\nsidebar_position: 2\n---\n```\n\n----------------------------------------\n\nTITLE: Removing a Plugin using Meltano CLI\nDESCRIPTION: Demonstrates how to remove a plugin from a Meltano project using the `meltano remove` command-line interface. It shows how to specify the plugin type and name to remove.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/plugin-management.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nmeltano remove <type> <name>\nmeltano remove <type> <name> <name_two>\n\n# For example:\nmeltano remove extractor tap-gitlab\nmeltano remove loader target-postgres target-csv\n```\n\n----------------------------------------\n\nTITLE: Piping Tap Output to a Target\nDESCRIPTION: This command reads the contents of `output.json` (assumed to contain the raw output of a Singer tap) and pipes it as input to a Singer target using `meltano invoke`. This allows testing the target independently of the tap. It is part of isolating connectors during debugging.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/troubleshooting.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncat output.json | meltano invoke target-postgres\n```\n\n----------------------------------------\n\nTITLE: View Extracted Data\nDESCRIPTION: Displays the first five lines of the extracted comments JSONL file. This command allows you to verify that the data was extracted and loaded correctly.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/tutorials/custom-extractor.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nhead -n 5 output/comments.jsonl\n```\n\n----------------------------------------\n\nTITLE: Checking for Broken Links\nDESCRIPTION: This command builds the Jekyll site and uses htmlproofer to check for broken links. It ignores specific URLs and HTTP status codes.  This ensures that the deployed documentation doesn't contain broken links.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/contribute/docs.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbundle exec jekyll build && bundle exec htmlproofer --log-level :debug ./_site/ --assume_extension --http_status_ignore 503 --url-ignore \"/www.linkedin.com/,/localhost/\"\n```\n\n----------------------------------------\n\nTITLE: Checking Python Version\nDESCRIPTION: This snippet demonstrates how to check the installed Python version using the `python --version` command. It is used to ensure that a supported Python version is installed before proceeding with Meltano installation.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/getting-started/installation.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython --version\n```\n\n----------------------------------------\n\nTITLE: Installing Meltano with pipx\nDESCRIPTION: This command installs Meltano using pipx. Pipx creates a virtual environment for Meltano and its dependencies, ensuring a clean and isolated installation.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/installation-guide.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npipx install meltano\n```\n\n----------------------------------------\n\nTITLE: Specifying Environment Variables in meltano.yml\nDESCRIPTION: This YAML snippet illustrates how to specify environment variables at various configuration levels within the `meltano.yml` file, including root, plugin, environment, and schedule levels.  It demonstrates how to define and override environment variables for different plugins and environments.  These configurations are used by Meltano to manage settings and when invoking plugin executables.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/configuration.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nenv:\n  # root level env\n  MY_ENV_VAR: top_level_env_var\nplugins:\n  extractors:\n  - name: tap-google-analytics\n    variant: meltano\n    env:\n      # root level plugin env\n      MY_ENV_VAR: plugin_level_env_var\n  loaders:\n  - name: target-postgres\n    variant: transferwise\n    pip_url: pipelinewise-target-postgres\nenvironments:\n- name: dev\n  env:\n    # environment level env\n    MY_ENV_VAR: environment_level_env_var\n  config:\n    plugins:\n      extractors:\n        - name: tap-google-analytics\n          variant: meltano\n          env:\n            # environment level plugin env\n            MY_ENV_VAR: environment_level_plugin_env_var\nschedules:\n- name: daily-google-analytics-load\n  interval: '@daily'\n  extractor: tap-google-analytics\n  loader: target-postgres\n  transform: skip\n  start_date: 2024-08-24 00:00:00\n  env:\n    SCHEDULE_SPECIFIC_ENV_VAR: schedule_specific_value\n```\n\n----------------------------------------\n\nTITLE: Installing Meltano Plugins\nDESCRIPTION: This snippet demonstrates how to install the plugins specified in the meltano.yml file using the `meltano install` command. It ensures that all necessary connectors and targets are available for data extraction and loading.\nSOURCE: https://github.com/meltano/meltano/blob/main/integration/example-library/meltano-basics/index.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmeltano install\n```\n\n----------------------------------------\n\nTITLE: Adding a Mapper Plugin Bash\nDESCRIPTION: Shows how to add a standalone mapper plugin to a Meltano project using the `meltano add mapper` command. The example demonstrates adding the `meltano-map-transformer` plugin.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/mappers.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmeltano add mapper <mapper name>\n\n# Example\nmeltano add mapper meltano-map-transformer\n```\n\n----------------------------------------\n\nTITLE: Install Meltano Dependencies\nDESCRIPTION: Installs the necessary dependencies for the Meltano project. This command should be run after downloading or copying the `meltano.yml` file to an empty directory.\nSOURCE: https://github.com/meltano/meltano/blob/main/integration/example-library/meltano-state-local/index.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmeltano install\n```\n\n----------------------------------------\n\nTITLE: Load Superset example data\nDESCRIPTION: This command invokes the `superset:load-examples` target to load example datasets into Superset. These datasets provide a starting point for exploring Superset's features and creating visualizations.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/analysis.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmeltano invoke superset:load-examples\n# This is equivalent to `superset load_examples` in the Superset documentation\n```\n\n----------------------------------------\n\nTITLE: Building the Meltano Documentation\nDESCRIPTION: This command is used to generate the static content of the Meltano documentation website. It creates a `build` directory containing the static assets that can be served by any static content hosting service.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/README.md#_snippet_0\n\nLANGUAGE: Shell Script\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Setting GitLab Client Secret - Bash\nDESCRIPTION: These commands demonstrate how to configure the `oauth.gitlab.client_secret` setting using the `meltano config` command and environment variables. This setting specifies the client secret for the GitLab OAuth provider. An alias is also demonstrated.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/reference/ui.md#_snippet_34\n\nLANGUAGE: bash\nCODE:\n```\nmeltano config meltano set oauth gitlab client_secret <gitlab-client-secret>\nexport OAUTH_GITLAB_CLIENT_SECRET=<gitlab-client-secret>\nexport OAUTH_GITLAB_SECRET=<gitlab-client-secret>\n```\n\n----------------------------------------\n\nTITLE: Installing Meltano with uv\nDESCRIPTION: This command installs Meltano using the `uv` package manager. `uv` simplifies the installation process in an isolated virtual environment.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/installation-guide.mdx#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nuv tool install meltano\n```\n\n----------------------------------------\n\nTITLE: Run a Meltano Job\nDESCRIPTION: This command executes a specific Meltano job named `gitlab-to-jsonl`. It triggers the data extraction and loading process defined in the job configuration.\nSOURCE: https://github.com/meltano/meltano/blob/main/integration/example-library/meltano-annotations/index.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nmeltano run gitlab-to-jsonl\n```\n\n----------------------------------------\n\nTITLE: Set Meltano Schedule\nDESCRIPTION: This command sets a schedule named `daily-gitlab-to-jsonl`. It defines the interval for automated job execution using a cron-like syntax. The provided example schedules the job to run at 4:05 AM every day.\nSOURCE: https://github.com/meltano/meltano/blob/main/integration/example-library/meltano-annotations/index.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nmeltano schedule set daily-gitlab-to-jsonl --interval '5 4 * * *'\n```\n\n----------------------------------------\n\nTITLE: Configuring Meltano Plugins\nDESCRIPTION: This snippet illustrates how to adjust the configuration of Meltano plugins using the `meltano config` command.  Specifically, it sets the `start_date` for `tap-gitlab` and disables timestamping for `target-jsonl` file names.\nSOURCE: https://github.com/meltano/meltano/blob/main/integration/example-library/meltano-basics/index.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmeltano config tap-gitlab set start_date 2022-04-25T00:00:01Z\nmeltano config target-jsonl set do_timestamp_file false\n```\n\n----------------------------------------\n\nTITLE: Deleting Meltano Cloud State\nDESCRIPTION: This command deletes the Meltano Cloud state for a specific state ID. It allows users to clear the state of incremental runs, which is useful for performing backfills. Requires access to the Meltano Cloud CLI and a valid state ID.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/blog/2023-09-27-changelog.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeltano cloud state delete --state-id <id>\n```\n\n----------------------------------------\n\nTITLE: Setting Cloud Notification Configuration via CLI\nDESCRIPTION: This snippet demonstrates how to configure cloud notifications using the Meltano CLI. It allows users to customize how they receive notifications regarding their Meltano Cloud projects, including specifying the notification destination (e.g., email, webhook) and filtering the notification payload (e.g., failures only, successes only).\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/blog/2023-08-24-changelog.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeltano cloud config notification set\n```\n\n----------------------------------------\n\nTITLE: JSON Output Format for Meltano Schedule List\nDESCRIPTION: This JSON snippet illustrates the new output format for the `meltano schedule list --format=json` command in Meltano.  It includes a top-level `schedules` field with nested `job` and `elt` arrays, describing scheduled jobs and ELT schedules respectively. The `job` array contains details about scheduled tasks, including their names, intervals, cron expressions, environment variables, and the tasks they execute.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/v2-migration.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"schedules\": {\n    \"job\": [\n      {\n        \"name\": \"daily-doit\",\n        \"interval\": \"@daily\",\n        \"cron_interval\": \"0 0 * * *\",\n        \"env\": {},\n        \"job\": {\n          \"name\": \"simple-demo\",\n          \"tasks\": [\n            \"tap-gitlab hide-gitlab-secrets target-jsonl\",\n            \"tap-gitlab target-csv\"\n          ]\n        }\n      }\n    ],\n    \"elt\": [\n      { \"legacy elt schedule entry remains unchanged\" },\n      ...\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Run an EL task and list states post migration\nDESCRIPTION: This set of commands performs an EL (Extract and Load) task using the 'tap-gitlab' and 'target-sqlite' plugins in the 'dev' environment and then lists the states after the task. It validates the ability to perform EL tasks after a migration event and verifies the outcome of the migration.\nSOURCE: https://github.com/meltano/meltano/blob/main/integration/example-library/meltano-migrations/index.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmeltano --environment=dev run tap-gitlab target-sqlite\nmeltano --environment=dev state list\n```\n\n----------------------------------------\n\nTITLE: Fixing Liquid Syntax Errors with Raw Tags\nDESCRIPTION: This code snippet demonstrates how to use `{% raw %}` and `{% endraw %}` tags to prevent Liquid syntax errors when using fenced code blocks in documentation. This is often required when the code block contains characters that Liquid might interpret as Liquid syntax.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/contribute/docs.md#_snippet_6\n\nLANGUAGE: liquid\nCODE:\n```\n{% raw %}\nmeltano config <transform> set _vars <key> <value>\n\nexport <TRANSFORM>__VARS='{\"<key>\": \"<value>\"}'\n\n# For example\nmeltano config --plugin-type=transform tap-gitlab set _vars schema \"{{ env_var('DBT_SOURCE_SCHEMA') }}\"\n\nexport TAP_GITLAB__VARS='{\"schema\": \"{{ env_var(''DBT_SOURCE_SCHEMA'') }}\"}'\n{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Meltano Run Equivalent API Example\nDESCRIPTION: This example illustrates how to perform a Meltano run equivalent action using the API's POST method with a custom verb. It sends a command and arguments in the request body and receives a response containing the run details.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/contribute/api.md#_snippet_4\n\nLANGUAGE: null\nCODE:\n```\nPOST meltano/core/v2/envs/prod/jobs:run\n{\"command\": \"tap mapper target dbt:run\", \"args\"...}\nReponse: {The run, with run_id , and \"inprogress\" status field}\n```\n\n----------------------------------------\n\nTITLE: Checking Plugin Settings (Shell)\nDESCRIPTION: This shell command uses the `meltano config` command to display the current configuration settings for the 'example' plugin. It outputs the settings in JSON format to the console.  Requires the 'example' plugin to be defined in `meltano.yml` and settings to be set using `meltano config set`.\nSOURCE: https://github.com/meltano/meltano/blob/main/integration/example-library/meltano-config/index.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmeltano config example\n```\n\n----------------------------------------\n\nTITLE: List Target-postgres Configuration\nDESCRIPTION: This command lists the configuration options for the 'target-postgres' loader using `meltano config target-postgres list`. It displays the available settings, their current values, and descriptions, allowing users to understand the available customization options.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/getting-started/part2.mdx#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ meltano config target-postgres list\n\n[...]\nhost [env: TARGET_POSTGRES_HOST] current value: 'postgres' (from `meltano.yml`)\n&ensp;&ensp;Host: Hostname for postgres instance. Note if sqlalchemy_url is set this will be ignored.\nport [env: TARGET_POSTGRES_PORT] current value: None (default)\n&ensp;&ensp;Port: The port on which postgres is awaiting connection. Note if sqlalchemy_url is set this will be ignored. Defaults to 5432\nuser [env: TARGET_POSTGRES_USER] current value: 'meltano' (from `meltano.yml`)\n &ensp;&ensp;User: User name used to authenticate. Note if sqlalchemy_url is set this will be ignored.\npassword [env: TARGET_POSTGRES_PASSWORD] current value: None (default)\n&ensp;&ensp;Password: Password used to authenticate. Note if sqlalchemy_url is set this will be ignored.\ndatabase [env: TARGET_POSTGRES_DATABASE] current value: 'postgres' (from `meltano.yml`)\n&ensp;&ensp;Database: Database name. Note if sqlalchemy_url is set this will be ignored.\n[...]\nadd_record_metadata [env: TARGET_POSTGRES_ADD_RECORD_METADATA] current value: None (default)\n&ensp;&ensp;Add Record Metadata: Note that this must be enabled for activate_version to work!This adds _sdc_extracted_at, _sdc_batched_at, and more to every table. See https://sdk.meltano.com/en/latest/implementation/record_metadata.html for more information.\n[...]\n\nTo learn more about loader 'target-postgres' and its settings, visit https://hub.meltano.com/loaders/target-postgres--meltanolabs\n```\n\n----------------------------------------\n\nTITLE: Debugging a Mapper Plugin Bash\nDESCRIPTION: Demonstrates how to debug a mapper plugin in isolation by piping Singer messages into it using `meltano invoke`. It first outputs raw Singer messages to a file and then pipes the contents of that file into the mapper.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/mappers.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Output raw Singer messages to a file\nmeltano invoke tap-x > output.json\n\n# Pipe them into the mapper using invoke\ncat output.json | meltano invoke mapping_name\n```\n\n----------------------------------------\n\nTITLE: Invoke Tap\nDESCRIPTION: Invokes the custom tap in isolation using `meltano invoke`. This allows you to run the tap without running the entire ELT pipeline, useful for testing and debugging.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/tutorials/custom-extractor.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nmeltano invoke tap-my-custom-source\n```\n\n----------------------------------------\n\nTITLE: Install adapter-specific dbt utility plugin in Meltano\nDESCRIPTION: This snippet demonstrates how to install an adapter-specific dbt utility plugin, such as dbt-snowflake, using the meltano add utility command. This is a recommended migration step when transitioning to Meltano 2.0.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/v2-migration.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# install adapter-specific dbt, e.g. for snowflake\nmeltano add utility dbt-snowflake\n```\n\n----------------------------------------\n\nTITLE: Configure Tap and Target Settings\nDESCRIPTION: Configures specific settings for the `tap-gitlab` and `target-jsonl` components. `tap-gitlab`'s `start_date` is set, and `target-jsonl`'s `do_timestamp_file` is disabled.\nSOURCE: https://github.com/meltano/meltano/blob/main/integration/example-library/meltano-state-local/index.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmeltano config tap-gitlab set start_date 2022-11-01T00:00:01Z\nmeltano config target-jsonl set do_timestamp_file false\n```\n\n----------------------------------------\n\nTITLE: JavaScript Import Sorting Example\nDESCRIPTION: This JavaScript code demonstrates the import sorting convention used in Meltano, prioritizing third-party imports over local imports and then sorting alphabetically within each group. Default imports are placed before partial imports. A single blank line separates third-party and local imports.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/contribute/style.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport lodash from 'lodash'                  // 1: third-party, 2: default, 3: [l]odash\nimport Vue from 'vue'                        // 1: third-party, 2: default, 3: [v]ue\nimport { bar, foo } from 'alib'              // 1: third-party, 2: partial, 3: [a]lib\nimport { mapAction, mapState } from 'vuex'   // 1: third-party, 2: partial, 3: [v]uex\n\n// 1 blank line to split import groups\nimport Widget from '@/component/Widget'      // 1: local, 2: default, 3: @/[c]omponent/Widget\nimport poller from '@/utils/poller'          // 1: local, 2: default, 3: @/[u]tils/poller\nimport { Medal } from '@/component/globals'  // 1: local, 2: partial, 3: @/[c]omponent/globals\nimport { bar, thing } from '@/utils/utils'   // 1: local, 2: partial, 3: @/[u]tils/utils\n```\n\n----------------------------------------\n\nTITLE: List Runs API Example\nDESCRIPTION: This example demonstrates how to list all runs using the Meltano API's GET method. It fetches a resource list from the specified endpoint.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/contribute/api.md#_snippet_2\n\nLANGUAGE: null\nCODE:\n```\nGET meltano/core/v2/envs/prod/jobs/tap-gitlab-target-jsonl/runs\nResponse: {[the runs]}\n```\n\n----------------------------------------\n\nTITLE: Verify Python Version for Extractor (Shell)\nDESCRIPTION: Checks the Python version used by the `tap-gitlab` extractor's virtual environment. It prints the path of the Python executable and exits with a non-zero code if it does not end with `/python3.Y`, ensuring that the correct Python version, specified during installation, is being used.  This assumes that the `tap-gitlab` extractor has been previously installed.\nSOURCE: https://github.com/meltano/meltano/blob/main/integration/example-library/meltano-custom-python/index.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n.meltano/extractors/tap-gitlab/venv/bin/python -c 'import os, sys; exe = os.path.realpath(sys.executable); print(exe); exit(not exe.endswith(\"/python3.Y\"))'\n```\n\n----------------------------------------\n\nTITLE: Specifying Plugin Variant in meltano.yml\nDESCRIPTION: This YAML snippet shows how the `variant` and `pip_url` properties are reflected in the `meltano.yml` file when a specific variant is chosen using the `--variant` option during plugin addition.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/plugin-management.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nplugins:\n  loaders:\n  - name: target-postgres\n  # highlight-start\n    variant: transferwise\n    pip_url: pipelinewise-target-postgres\n  # highlight-end\n```\n\n----------------------------------------\n\nTITLE: Meltano Project File Updated with Extractor\nDESCRIPTION: This shows the `meltano.yml` file after adding the `tap-github` extractor. The `extractors` section includes the name, variant, and pip_url for the GitHub extractor plugin.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/getting-started/part1.mdx#_snippet_7\n\nLANGUAGE: yml\nCODE:\n```\nplugins:\nextractors:\n  - name: tap-github\n    variant: meltanolabs\n    pip_url: git+https://github.com/MeltanoLabs/tap-github.git\n```\n\n----------------------------------------\n\nTITLE: Setting Plugin Settings (Shell)\nDESCRIPTION: These shell commands use the `meltano config` command to set the values of the plugin settings defined in the `meltano.yml` file.  The commands demonstrate setting a string, an integer, an object (JSON string), and an array (JSON string) setting for the 'example' plugin. Requires the 'example' plugin to be defined in `meltano.yml`.\nSOURCE: https://github.com/meltano/meltano/blob/main/integration/example-library/meltano-config/index.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmeltano config example set a_string -- -86.75\nmeltano config example set an_integer '42'\nmeltano config example set an_object '{\"foo\": \"bar\"}'\nmeltano config example set an_array '[\"foo\", \"bar\"]'\n```\n\n----------------------------------------\n\nTITLE: Listing Meltano Configuration\nDESCRIPTION: This command lists the current Meltano configuration, allowing you to check the current value of `state_backend.uri` and other settings.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/concepts/state_backends.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ meltano config meltano list | grep state_backend.uri\n\nstate_backend.uri [env: MELTANO_STATE_BACKEND_URI] current value: 'systemdb' (default)\n```\n\n----------------------------------------\n\nTITLE: Invoke Target-postgres Loader Help\nDESCRIPTION: This command invokes the 'target-postgres' loader with the '--help' option to display its available options and usage instructions.  It helps verify the installation and understand the loader's parameters.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/getting-started/part2.mdx#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ meltano invoke target-postgres --help\nUsage: target-postgres [OPTIONS]\n\n  Execute the Singer target.\n\nOptions:\n  --input FILENAME          A path to read messages from instead of from\n                            standard in.\n  --config TEXT             Configuration file location or 'ENV' to use\n                            environment variables.\n  --format [json|markdown]  Specify output style for --about\n  --about                   Display package metadata and settings.\n  --version                 Display the package version.\n  --help                    Show this message and exit.\n```\n\n----------------------------------------\n\nTITLE: Getting State and Writing to File\nDESCRIPTION: This command retrieves the state for a specific job (identified by its state ID) and writes it to a local JSON file.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/concepts/state_backends.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ meltano state get dev:tap-github-to-target-jsonl > dev:tap-github-to-target-jsonl.json\n```\n\n----------------------------------------\n\nTITLE: Marking a Setting as Sensitive in Meltano\nDESCRIPTION: This YAML snippet demonstrates how to mark a setting as sensitive in Meltano, indicating that it contains sensitive information like passwords or tokens. Sensitive settings are handled with extra security precautions.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/reference/plugin-definition-syntax.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nsettings:\n- name: setting_name\n  kind: string\n  sensitive: true\n```\n\n----------------------------------------\n\nTITLE: Get Meltano State With State Merging\nDESCRIPTION: Retrieves the Meltano state for a specific environment, pipeline, and state ID suffix using the `meltano state get` command after merging states. This fetches the combined state from the previous runs.\nSOURCE: https://github.com/meltano/meltano/blob/main/integration/example-library/meltano-run-merge-states/index.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nmeltano --environment=dev state get dev:tap-with-state-to-target-jsonl:merge\n```\n\n----------------------------------------\n\nTITLE: Adding dbt-postgres Utility to Meltano Project\nDESCRIPTION: This command uses the `meltano add` command to add the `dbt-postgres` utility to the Meltano project. This utility enables dbt transformations to be executed on a PostgreSQL database.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/getting-started/part3.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmeltano add utility dbt-postgres\n```\n\n----------------------------------------\n\nTITLE: Hiding a Setting in Meltano\nDESCRIPTION: This YAML snippet demonstrates how to hide a setting from a Meltano plugin. Hidden settings are not displayed in the UI.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/reference/plugin-definition-syntax.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nsettings:\n- name: setting_name\n  hidden: true\n```\n\n----------------------------------------\n\nTITLE: Configure Tap and Target\nDESCRIPTION: This command configures the `tap-gitlab` and `target-jsonl` extractors. It sets the `start_date` for `tap-gitlab` and disables timestamping for `target-jsonl` to manage data extraction and loading processes.\nSOURCE: https://github.com/meltano/meltano/blob/main/integration/example-library/meltano-annotations/index.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmeltano config tap-gitlab set start_date 2022-11-01T00:00:01Z\nmeltano config target-jsonl set do_timestamp_file false\n```\n\n----------------------------------------\n\nTITLE: Meltano Project Configuration File Example\nDESCRIPTION: This is an example of a `meltano.yml` file, which contains the project configuration including the Meltano version, default environment, project ID, and defined environments (dev, staging, prod).\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/getting-started/part1.mdx#_snippet_3\n\nLANGUAGE: yml\nCODE:\n```\nversion: 1\ndefault_environment: dev\nproject_id: <unique-GUID>\nenvironments:\n- name: dev\n- name: staging\n- name: prod\n```\n\n----------------------------------------\n\nTITLE: Optimizing Migration with SQLAlchemy\nDESCRIPTION: This entry refers to optimizing a migration file related to creating a dedicated state table in Meltano. The optimization likely involves changes to the SQLAlchemy code within the migration to improve performance during database schema updates.\nSOURCE: https://github.com/meltano/meltano/blob/main/CHANGELOG.md#_snippet_0\n\nLANGUAGE: SQLAlchemy\nCODE:\n```\nOptimize migration 6828cc5b1a4f_create_dedicated_state_table.py\n```\n\n----------------------------------------\n\nTITLE: Add Docker Files to Meltano Project\nDESCRIPTION: Adds the `Dockerfile` and `.dockerignore` files to the Meltano project by utilizing the `meltano add files` command with the `files-docker` bundle. These files are essential for building the Docker image.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/containerization.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmeltano add files files-docker\n```\n\n----------------------------------------\n\nTITLE: HTML Button Element\nDESCRIPTION: This HTML snippet defines a button element that links to a specified URL. The button is styled using CSS classes 'btn' and 'main-btn'.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/blog/2023-07-21-welcome-to-the-changelog.mdx#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<p>\n<a href=\"#\" className=\"btn main-btn\">\n  Request Access to the Meltano Cloud Beta\n</a>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Configure DataHub GMS auth token using Meltano CLI\nDESCRIPTION: This command configures the DataHub utility in the Meltano project by setting the GMS authentication token (`gms_auth`). The GMS authentication token is needed when DataHub's metadata service authentication (MSA) is enabled. It modifies the `meltano.yml` file.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/tutorials/datahub.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nmeltano config datahub set gms_auth myToken\n```\n\n----------------------------------------\n\nTITLE: Add Python Libraries to JupyterLab Plugin (YAML)\nDESCRIPTION: This snippet demonstrates how to add additional Python libraries required for Jupyter notebooks, such as pandas, matplotlib, sqlalchemy, and psycopg2-binary, by extending the `pip_url` property in the meltano.yml definition.  These libraries are installed alongside JupyterLab within the plugin's virtual environment. It assumes JupyterLab is already configured as custom utility plugin.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/tutorials/jupyter.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nplugins:\n utilities: # meltano invoke jupyter will start up the lab...\n - name: jupyterlab\n   namespace: jupyterlab\n   pip_url: jupyterlab pandas matplotlib sqlalchemy psycopg2-binary\n   executable: jupyter\n   commands:\n     launch_ip0: #important for Mac users running Meltano inside Docker.\n       args: lab --ip=0.0.0.0\n       description: Start lab server, on any ip range for Mac users inside docker.\n     launch:\n       args: lab\n       description: Start lab server\n\n```\n\n----------------------------------------\n\nTITLE: Extract All Streams With State Merging\nDESCRIPTION: Executes a Meltano pipeline to extract all streams with state merging enabled, using a timestamp and a specific state ID suffix. This pipeline ensures the initial state is captured for all streams.\nSOURCE: https://github.com/meltano/meltano/blob/main/integration/example-library/meltano-run-merge-states/index.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nTAP_WITH_STATE_TS='2023-01-01T00:00:00+00:00' \\\nmeltano run tap-with-state target-jsonl --state-id-suffix=merge\n```\n\n----------------------------------------\n\nTITLE: Defining Annotations in meltano.yml\nDESCRIPTION: This YAML snippet shows how to define annotations in `meltano.yml`. Annotations allow integrating with third-party tools by providing a dictionary that maps from tool/vendor names to arbitrary dictionaries with custom configuration. The core Meltano library and CLI do not access this field.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/concepts/project.md#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nannotations:\n  arbitrary-third-party-tool: {\n    # Configuration for the third party tool\n  }\n  # etc.\n```\n\n----------------------------------------\n\nTITLE: Install Meltano\nDESCRIPTION: Installs Meltano and its dependencies using the `meltano install` command. This command ensures that all necessary components are available for running Meltano pipelines.\nSOURCE: https://github.com/meltano/meltano/blob/main/integration/example-library/meltano-run-merge-states/index.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmeltano install\n```\n\n----------------------------------------\n\nTITLE: Create Superset admin user\nDESCRIPTION: This command invokes the `superset:create-admin` target to create an admin user for the Superset UI.  This admin user is necessary for logging into and managing the Superset instance through its web interface.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/analysis.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmeltano invoke superset:create-admin\n# This is equivalent to `superset fab create-admin` in the Superset documentation\n```\n\n----------------------------------------\n\nTITLE: Extractor Plugin Definition (YAML)\nDESCRIPTION: This YAML defines the basic structure for a custom extractor plugin, specifying the name, namespace, and pip URL. This configuration is saved in a separate file and then referenced by the Meltano CLI.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/tutorials/custom-extractor.md#_snippet_25\n\nLANGUAGE: yml\nCODE:\n```\nname: tap-jsonplaceholder\nnamespace: tap_jsonplaceholder\npip_url: -e ../tap-jsonplaceholder\n```\n\n----------------------------------------\n\nTITLE: Meltano Command Optional Inputs\nDESCRIPTION: Illustrates the convention of using square brackets `[]` to indicate optional input parameters and the ellipsis `...` to indicate a series of inputs for Meltano commands.  Helps users understand what arguments are not strictly required.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/contribute/cli.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n# MAPPER1 is wrapped in [] since its optional and a series\nmeltano <TAP> [MAPPER1 ...] <TARGET>\n```\n\n----------------------------------------\n\nTITLE: Checking Meltano Installation\nDESCRIPTION: This command verifies that Meltano has been installed successfully by printing the installed version.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/installation-guide.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmeltano --version\n```\n\n----------------------------------------\n\nTITLE: List Airflow DAGs via Meltano\nDESCRIPTION: This command lists all available Airflow DAGs through Meltano's invoke command. This can be useful for verifying that DAGs are being generated correctly.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/orchestration.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmeltano invoke airflow dags list\n```\n\n----------------------------------------\n\nTITLE: Run ELT Pipeline\nDESCRIPTION: Executes the ELT pipeline to extract data from the JSONPlaceholder API using `tap-jsonplaceholder` and load it into JSONL files using `target-jsonl`. This command orchestrates the entire data extraction and loading process.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/tutorials/custom-extractor.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmeltano run tap-jsonplaceholder target-jsonl\n```\n\n----------------------------------------\n\nTITLE: Add JupyterLab as Custom Utility Plugin to Meltano (YAML)\nDESCRIPTION: This snippet shows how to add JupyterLab as a custom utility plugin to a Meltano project by directly modifying the meltano.yml file.  It defines the plugin name, namespace, pip URL, executable, and commands to launch JupyterLab, including a specific command for Mac users running Meltano inside Docker. It allows to execute Jupyter notebooks inside Meltano.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/tutorials/jupyter.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nplugins:\n  utilities: # meltano invoke jupyter will start up the lab...\n  - name: jupyterlab\n    namespace: jupyterlab\n    pip_url: jupyterlab\n    executable: jupyter\n    commands:\n      launch_ip0: #important for Mac users running Meltano inside Docker.\n        args: lab --ip=0.0.0.0\n        description: Start lab server, on any ip range for Mac users inside docker.\n      launch:\n        args: lab\n        description: Start lab server\n\n```\n\n----------------------------------------\n\nTITLE: Disable Meltano Anonymous Usage Stats\nDESCRIPTION: This bash script shows how to disable Meltano's anonymous usage data tracking globally by setting the `MELTANO_SEND_ANONYMOUS_USAGE_STATS` environment variable to `False`.  This is useful for contributors who prefer not to send usage data during development. It should be added to the shell configuration file.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/contribute/prerequisites.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Add to `~/.bashrc`, `~/.zshrc`, etc, depending on the shell you use:\nexport MELTANO_SEND_ANONYMOUS_USAGE_STATS=False\n```\n\n----------------------------------------\n\nTITLE: Help Message for tap-github Extractor\nDESCRIPTION: This shows the output of invoking `tap-github` with the `--help` option. It lists the available options and arguments for the `tap-github` extractor, such as `--state`, `--catalog`, `--config`, and `--version`.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/getting-started/part1.mdx#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ meltano invoke tap-github --help\n2024-09-19T09:32:05.162591Z [info     ] Environment 'dev' is active\nUsage: tap-github [OPTIONS]\n\n  Execute the Singer tap.\n\nOptions:\n  --state PATH              Use a bookmarks file for incremental replication.\n  --catalog PATH            Use a Singer catalog file with the tap.\n  --test TEXT               Use --test to sync a single record for each\n                            stream. Use --test=schema to test schema output\n                            without syncing records.\n  --discover                Run the tap in discovery mode.\n  --config TEXT             Configuration file location or 'ENV' to use\n                            environment variables.\n  --format [json|markdown]  Specify output style for --about\n  --about                   Display package metadata and settings.\n  --version                 Display the package version.\n  --help                    Show this message and exit.\n```\n\n----------------------------------------\n\nTITLE: Modifying MyPy Configuration for Type Checking\nDESCRIPTION: This code snippet demonstrates how to modify the `pyproject.toml` file to enable MyPy type checking for specific Python modules. By de-globbing a sub-package and enumerating the files that are not being touched, developers can focus type checking efforts on the relevant files during development. This allows for incremental adoption of MyPy within the existing codebase.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/contribute/style.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[[tool.mypy.overrides]]\nmodule = [\n  ...\n  \"meltano.core.m5o.*\",\n-   \"meltano.core.plugin.*\",\n+   \"meltano.core.plugin.airflow\",\n+   \"meltano.core.plugin.base\",\n+   # Note that meltano.core.plugin.command is not included here\n+   \"meltano.core.plugin.config_service\",\n+   \"meltano.core.plugin.dbt.*\",\n+   \"meltano.core.plugin.error\",\n+   \"meltano.core.plugin.factory\",\n+   \"meltano.core.plugin.file\",\n+   \"meltano.core.plugin.meltano_file\",\n+   \"meltano.core.plugin.model.*\",\n+   \"meltano.core.plugin.project_plugin\",\n+   \"meltano.core.plugin.requirements\",\n+   \"meltano.core.plugin.settings_service\",\n+   \"meltano.core.plugin.singer.*\",\n+   \"meltano.core.plugin.superset\",\n+   \"meltano.core.plugin.utility\",\n  \"meltano.core.runner.*\",\n  ...\n]\n```\n\n----------------------------------------\n\nTITLE: Invoke tap-github with Meltano to Display Help\nDESCRIPTION: This command uses `meltano invoke` to execute the `tap-github` extractor with the `--help` option. This displays the help message for the extractor, verifying its installation and functionality.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/getting-started/part1.mdx#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ meltano invoke tap-github --help\n```\n\n----------------------------------------\n\nTITLE: Setting Log Format via CLI in Meltano\nDESCRIPTION: This command sets the log format to JSON for a Meltano run command. It uses the `--log-format` global option to control the output format of the command-line output.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/logging.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeltano --log-format=json run my-job\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Entities and Attributes with Meltano Select\nDESCRIPTION: These commands select specific entities and attributes for extraction.  Multiple `meltano select` commands are used to add selection rules for `commits.url`, `commits.sha`, and `commits.commit_timestamp` from the `tap-github` extractor.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/getting-started/part1.mdx#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nmeltano select tap-github commits url\nmeltano select tap-github commits sha\nmeltano select tap-github commits commit_timestamp\n```\n\n----------------------------------------\n\nTITLE: Execute Jupyter Notebooks via Papermill (YAML)\nDESCRIPTION: This YAML snippet defines a papermill plugin that inherits from the jupyterlab plugin and executes notebooks using papermill. It configures the plugin by specifying the executable, arguments to execute a notebook, output path, and override a parameter 'price_1'.  It reuses the virtual environment from jupyterlab to avoid redundant installations. It assumes the JupyterLab plugin is already configured.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/tutorials/jupyter.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n  - name: papermill\n    inherit_from: jupyterlab\n    executable: papermill\n    commands:\n      execute:\n        args: notebook/sql_magic.ipynb output/output.ipynb -p price_1 1000\n        description: Start lab server, on any ip range for Mac users inside docker.\n\n```\n\n----------------------------------------\n\nTITLE: Running a Meltano EL Task\nDESCRIPTION: This snippet shows how to execute an EL (Extract and Load) task using the `meltano run` command. It specifies `tap-gitlab` as the extractor and `target-jsonl` as the loader, effectively transferring data from GitLab to JSONL files.\nSOURCE: https://github.com/meltano/meltano/blob/main/integration/example-library/meltano-basics/index.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nmeltano run tap-gitlab target-jsonl\n```\n\n----------------------------------------\n\nTITLE: Ambiguous CLI Flag Example\nDESCRIPTION: Illustrates an ambiguous use of short flags that should be avoided.  Reusing `-t` for both `--test` and `--task` in different subcommands of `somecommand` can lead to confusion and unexpected behavior.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/contribute/cli.md#_snippet_3\n\nLANGUAGE: None\nCODE:\n```\n# ambiguous use that should be avoided\nmeltano somecommand run SOME_TASK [-t/--test SOME_TEST]\nmeltano somecommand set [-t/--task SOME_TASK]\n```\n\n----------------------------------------\n\nTITLE: Define mdsh function in bash\nDESCRIPTION: This defines a bash function `mdsh-lang-python` which executes the `python` command. This appears to be used within a testing or documentation framework that uses `mdsh` to execute code snippets.\nSOURCE: https://github.com/meltano/meltano/blob/main/integration/example-library/meltano-state-s3/index.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmdsh-lang-python() { python; }\n```\n\n----------------------------------------\n\nTITLE: Check Docker Version\nDESCRIPTION: Verifies that Docker is installed and accessible on the system. This is a prerequisite for subsequent Docker-related commands.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/containerization.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker --version\n```\n\n----------------------------------------\n\nTITLE: HTML Table Structure for Contributors\nDESCRIPTION: This snippet represents a row in an HTML table displaying contributor information. It includes the contributor's avatar, name, and links to their contributions like code, documentation, bug reports, and ideas. The table uses a fixed width for each cell.\nSOURCE: https://github.com/meltano/meltano/blob/main/CONTRIBUTORS.md#_snippet_18\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/andyoneal\"><img src=\"https://avatars.githubusercontent.com/u/2807932?v=4?s=100\" width=\"100px;\" alt=\"andyoneal\"/><br /><sub><b>andyoneal</b></sub></a><br /><a href=\"https://github.com/meltano/meltano/commits?author=andyoneal\" title=\"Code\">💻</a></td>\n```\n\n----------------------------------------\n\nTITLE: CLI Usage Example (meltano job)\nDESCRIPTION: Illustrates the expected help and usage documentation for a Meltano CLI feature group (e.g., 'meltano job'). It includes basic invocation examples, option descriptions, and command listings, linking to more detailed documentation.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/contribute/cli.md#_snippet_1\n\nLANGUAGE: None\nCODE:\n```\nUsage: meltano job [OPTIONS] COMMAND [ARGS]...\n\n  Manage jobs.\n\n  Example usage:\n\n      # This help\n      meltano job --help\n      # List all jobs in JSON format\n      meltano job list --format json\n      # List a named job\n      meltano job list [JOB_NAME]\n\n      # Create a new job with a single task representing a single run command.\n      meltano job add NAME --tasks 'tap mapper target command:arg1'\n\n      # Create a new job with multiple tasks each representing a run command.\n      # The list of tasks must be yaml formatted and consist of a list of strings, list of string lists, or mix of both.\n      meltano job add NAME --tasks '[\"tap mapper target\", \"tap2 target2\", ...\"]'\n      meltano job add NAME --tasks '[[\"tap target dbt:run\", \"tap2 target2\", ...], ...\"]'\n\n      # Remove a named job\n      meltano job remove NAME\n\n Read more at https://docs.meltano.com/reference/command-line-interface#jobs\n\nOptions:\n  --database-uri TEXT  System database URI.\n  --help               Show this message and exit.\n\nCommands:\n  add     Add a new job with tasks.\n  list    List job(s).\n  remove  Remove a job.\n  set     Update an existing jobs tasks\n```\n\n----------------------------------------\n\nTITLE: HTML Table Structure for Contributors\nDESCRIPTION: This snippet represents a row in an HTML table displaying contributor information. It includes the contributor's avatar, name, and links to their contributions like code, documentation, bug reports, and ideas. The table uses a fixed width for each cell.\nSOURCE: https://github.com/meltano/meltano/blob/main/CONTRIBUTORS.md#_snippet_12\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/JulesHuisman\"><img src=\"https://avatars.githubusercontent.com/u/26525996?v=4?s=100\" width=\"100px;\" alt=\"Jules Huisman\"/><br /><sub><b>Jules Huisman</b></sub></a><br /><a href=\"https://github.com/meltano/meltano/commits?author=JulesHuisman\" title=\"Code\">💻</a> <a href=\"#ideas-JulesHuisman\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"https://github.com/meltano/meltano/issues?q=author%3AJulesHuisman\" title=\"Bug reports\">🐛</a></td>\n```\n\n----------------------------------------\n\nTITLE: Setting Airflow Executor via Environment Variable\nDESCRIPTION: This command sets the Airflow executor to LocalExecutor via an environment variable. This is an alternative to using the Meltano configuration directly. This improves performance over the default SequentialExecutor in production environments.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/production.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport AIRFLOW__CORE__EXECUTOR=LocalExecutor\n```\n\n----------------------------------------\n\nTITLE: Running Meltano ELT Commands with Various Options\nDESCRIPTION: These are examples of how to execute the `meltano elt` command with various command line arguments, including specifying state ID, performing a full refresh, using catalog or state files, selecting and excluding entities, and dumping the state file to STDOUT.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/troubleshooting.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmeltano elt tap-gitlab target-postgres --transform=run --state-id=gitlab-to-postgres\n\nmeltano elt tap-gitlab target-postgres --state-id=gitlab-to-postgres --full-refresh\n\nmeltano elt tap-gitlab target-postgres --catalog extract/tap-gitlab.catalog.json\nmeltano elt tap-gitlab target-postgres --state extract/tap-gitlab.state.json\n\nmeltano elt tap-gitlab target-postgres --select commits\nmeltano elt tap-gitlab target-postgres --exclude project_members\n\nmeltano elt tap-gitlab target-postgres --state-id=gitlab-to-postgres --dump=state > extract/tap-gitlab.state.json\n```\n\n----------------------------------------\n\nTITLE: Generating all lock files\nDESCRIPTION: Generates all lock files for the project using the `meltano lock` command with the `--all` flag. This ensures all plugins have lock files.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/v3-migration.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmeltano lock --all\n```\n\n----------------------------------------\n\nTITLE: Mapper Plugin Configuration YAML\nDESCRIPTION: Configures the `meltano-map-transformer` plugin to perform various transformations on the input data. It aliases a stream, lowercases the `first_name` and `last_name` fields, uppercases the `email` field, adds a new field called `count_t`, and nullifies the `ip_address` field.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/mappers.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nplugins\n  mapper:\n  - name: meltano-map-transformer\n    variant: meltano\n    pip_url: meltano-map-transform\n    mappings:\n    - name: lower\n      config:\n        stream_maps:\n          customers:\n            __alias__: customers_v5\n            first_name: first_name.lower() # three different ways of accessing the variable\n            last_name: record['last_name'].lower()\n            email:  _['email'].upper()\n            count_t: str(last_name.count(\"t\")) # need to cast to str because it could be NULL!\n            ip_address: __NULL__\n```\n\n----------------------------------------\n\nTITLE: HTML Table Structure for Contributors\nDESCRIPTION: This snippet represents a row in an HTML table displaying contributor information. It includes the contributor's avatar, name, and links to their contributions like code, documentation, bug reports, and ideas. The table uses a fixed width for each cell.\nSOURCE: https://github.com/meltano/meltano/blob/main/CONTRIBUTORS.md#_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/acarter24\"><img src=\"https://avatars.githubusercontent.com/u/126154605?v=4?s=100\" width=\"100px;\" alt=\"acarter24\"/><br /><sub><b>acarter24</b></sub></a><br /><a href=\"https://github.com/meltano/meltano/commits?author=acarter24\" title=\"Documentation\">📖</a> <a href=\"https://github.com/meltano/meltano/issues?q=author%3Aacarter24\" title=\"Bug reports\">🐛</a> <a href=\"#ideas-acarter24\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n```\n\n----------------------------------------\n\nTITLE: HTML Table Structure for Contributors\nDESCRIPTION: This snippet represents a row in an HTML table displaying contributor information. It includes the contributor's avatar, name, and links to their contributions like code, documentation, bug reports, and ideas. The table uses a fixed width for each cell.\nSOURCE: https://github.com/meltano/meltano/blob/main/CONTRIBUTORS.md#_snippet_22\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/raiatul14\"><img src=\"https://avatars.githubusercontent.com/u/17046074?v=4?s=100\" width=\"100px;\" alt=\"Atul Rai\"/><br /><sub><b>Atul Rai</b></sub></a><br /><a href=\"https://github.com/meltano/meltano/commits?author=raiatul14\" title=\"Code\">💻</a></td>\n```\n\n----------------------------------------\n\nTITLE: Pulling and Running Meltano Docker Image\nDESCRIPTION: This snippet demonstrates how to pull the latest Meltano Docker image from Docker Hub and run it to check the installed Meltano version.  The `docker pull` command downloads the image, and the `docker run` command executes Meltano to display its version.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/getting-started/installation.mdx#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker pull meltano/meltano\nlatest: Pulling from meltano/meltano\n---> 100%\nStatus: Downloaded newer image for meltano/meltano:latest\ndocker.io/meltano/meltano:latest\n\n$ docker run meltano/meltano --version\nmeltano, version 2.19.0\n```\n\n----------------------------------------\n\nTITLE: HTML Table Structure for Contributors\nDESCRIPTION: This snippet represents a row in an HTML table displaying contributor information. It includes the contributor's avatar, name, and links to their contributions like code, documentation, bug reports, and ideas. The table uses a fixed width for each cell.\nSOURCE: https://github.com/meltano/meltano/blob/main/CONTRIBUTORS.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://thdpth.com/\"><img src=\"https://avatars.githubusercontent.com/u/43072233?v=4?s=100\" width=\"100px;\" alt=\"Sven Balnojan\"/><br /><sub><b>Sven Balnojan</b></sub></a><br /><a href=\"#ideas-sbalnojan\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"#content-sbalnojan\" title=\"Content\">🖋</a> <a href=\"https://github.com/meltano/meltano/commits?author=sbalnojan\" title=\"Documentation\">📖</a></td>\n```\n\n----------------------------------------\n\nTITLE: Adding Plugins with Meltano CLI\nDESCRIPTION: This command adds an extractor plugin named tap-gitlab and a loader plugin named target-jsonl to the Meltano project. These plugins can then be used to define data pipelines.\nSOURCE: https://github.com/meltano/meltano/blob/main/integration/example-library/meltano-objects/index.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmeltano add extractor tap-gitlab\nmeltano add loader target-jsonl\n```\n\n----------------------------------------\n\nTITLE: Inheriting Plugin Definitions in meltano.yml\nDESCRIPTION: This YAML snippet shows how inheriting plugin definitions are represented in the `meltano.yml` file. The `inherit_from` property specifies the name of the plugin from which the current plugin inherits its configuration. This allows reusing the same package with different configurations.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/plugin-management.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nplugins:\n  extractors:\n  - name: tap-google-analytics\n    variant: meltano\n    pip_url: git+https://gitlab.com/meltano/tap-google-analytics.git\n  # highlight-start\n  - name: tap-ga--client-foo\n    inherit_from: tap-google-analytics\n  - name: tap-ga--client-bar\n    inherit_from: tap-google-analytics\n  - name: tap-ga--client-foo--project-baz\n    inherit_from: tap-ga--client-foo\n  # highlight-end\n```\n\n----------------------------------------\n\nTITLE: CLI Command Structure Example (feature-group)\nDESCRIPTION: Demonstrates the recommended structure for Meltano CLI commands, using a feature-group followed by verbs like 'add', 'delete', and 'get' to operate on resources. This structure promotes consistency and discoverability.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/contribute/cli.md#_snippet_0\n\nLANGUAGE: None\nCODE:\n```\nmeltano <feature-group> add <something>\nmeltano <feature-group> delete <something>\nmeltano <feature-group> get <something>\n```\n\n----------------------------------------\n\nTITLE: Creating dbt model directories and source file\nDESCRIPTION: Creates the directory structure and source file required to start building dbt models. This organizes dbt models and defines data sources.\nSOURCE: https://github.com/meltano/meltano/blob/main/integration/example-library/meltano-run/index.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nmkdir ./transform/models/tap_gitlab\n```\n\nLANGUAGE: shell\nCODE:\n```\ntouch  ./transform/models/tap_gitlab/source.yml\n```\n\n----------------------------------------\n\nTITLE: Extract All Streams Without State Merging\nDESCRIPTION: Executes a Meltano pipeline to extract all streams without state merging, using a timestamp and a specific state ID suffix. The pipeline runs the `tap-with-state` tap and `target-jsonl` target.\nSOURCE: https://github.com/meltano/meltano/blob/main/integration/example-library/meltano-run-merge-states/index.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nTAP_WITH_STATE_TS='2023-01-01T00:00:00+00:00' \\\nmeltano run tap-with-state target-jsonl --state-id-suffix=no-merge\n```\n\n----------------------------------------\n\nTITLE: Meltano State Set Equivalent API Example\nDESCRIPTION: This example demonstrates setting the Meltano state equivalent using the API's PUT method. It sends a new state message in the request body and gets a response indicating the update.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/contribute/api.md#_snippet_5\n\nLANGUAGE: null\nCODE:\n```\nPUT meltano/core/v2/envs/stage/jobs/tap-gh-to-target-sql/state\n{new state message}\nReponse: {\"The new state after update\"}\n```\n\n----------------------------------------\n\nTITLE: Add JSONL Loader (Bash)\nDESCRIPTION: This command adds the `target-jsonl` loader to the Meltano project. This loader is used to load data into JSONL files.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/tutorials/custom-extractor.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nmeltano add loader target-jsonl\n```\n\n----------------------------------------\n\nTITLE: Adding a custom plugin to meltano.yml (Shell)\nDESCRIPTION: This shell command appends a custom plugin definition to the `meltano.yml` file. The plugin is defined as a utility with a namespace and several settings, including string, integer, object, and array types. This snippet requires `meltano.yml` to exist in the current directory.\nSOURCE: https://github.com/meltano/meltano/blob/main/integration/example-library/meltano-config/index.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\necho 'plugins:\n  utilities:\n  - name: example\n    namespace: example\n    settings:\n    - name: a_string\n    - name: an_integer\n      kind: integer\n    - name: an_object\n      kind: object\n    - name: an_array\n      kind: array' >> meltano.yml\n```\n\n----------------------------------------\n\nTITLE: Adding a Setting Description in Meltano\nDESCRIPTION: This YAML snippet shows how to add a description to a setting in a Meltano plugin's configuration file. The description provides inline contextual help for the setting.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/reference/plugin-definition-syntax.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nsettings:\n- name: setting_name\n  description: |\n    This is a setting description.\n```\n\n----------------------------------------\n\nTITLE: Configure Meltano State Backend\nDESCRIPTION: This command configures Meltano to use the local filesystem for storing state information. It sets the `state_backend.uri` configuration option to a file path within the `.meltano/state` directory relative to the current working directory.\nSOURCE: https://github.com/meltano/meltano/blob/main/integration/example-library/meltano-annotations/index.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmeltano config meltano set state_backend.uri \"file:///`pwd`/.meltano/state\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom State Manager in pyproject.toml\nDESCRIPTION: This configuration snippet shows how to configure the custom state manager in the `pyproject.toml` file. It defines the entry points for the custom settings (username and password) and the state backend itself. These settings allow Meltano to recognize and use the custom state manager.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/custom-state-backend.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[project.entry-points.\"meltano.settings\"]\nmy_state_manager_username = \"my_state_manager.backend:USERNAME\"\nmy_state_manager_password = \"my_state_manager.backend:PASSWORD\"\n\n[project.entry-points.\"meltano.state_backends\"]\n# These keys should match the expected scheme for URIs of\n# the given type. E.g., filesystem state backends have a\n# file://<path>/<to>/<state directory> URI\nmsm = \"my_state_manager.backend:MyStateManager\"\n```\n\n----------------------------------------\n\nTITLE: Meltano State Copy Equivalent API Example\nDESCRIPTION: This example shows how to copy the Meltano state using the API's POST method with a custom verb.  It sends the destination for the copy and receives a reference to the destination in the response.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/contribute/api.md#_snippet_6\n\nLANGUAGE: null\nCODE:\n```\nPOST meltano/core/v2/envs/stage/jobs/tap-gh-to-target-sql/state/copy\n{destination: \"different-state-id\"}\nResponse: {\"ref to the dest\")\n```\n\n----------------------------------------\n\nTITLE: Changing Directory to Meltano Project\nDESCRIPTION: Changes the current directory to the newly created Meltano project directory.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/installation-guide.mdx#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncd yourprojectname\n```\n\n----------------------------------------\n\nTITLE: Optional pip_url configuration for dbt-postgres\nDESCRIPTION: This YAML snippet shows an optional configuration in the meltano.yml to constrain dbt-postgres pip_url. This is a workaround for issues building psycopg2 from source during installation. `dbt-core dbt-postgres meltano-dbt-ext~=0.3.0` are required dependencies.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/getting-started/part3.mdx#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nutilities:\n  - name: dbt-postgres\n    pip_url: dbt-core dbt-postgres meltano-dbt-ext~=0.3.0\n```\n\n----------------------------------------\n\nTITLE: Check State Output\nDESCRIPTION: These shell commands check the state output. The first lists available state, and the second gets state and saves it to a file.\nSOURCE: https://github.com/meltano/meltano/blob/main/integration/example-library/meltano-state-s3/index.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nmeltano state list\nmeltano state get dev:tap-gitlab-to-target-jsonl > state.json\n```\n\n----------------------------------------\n\nTITLE: Extract Single Stream Without State Merging\nDESCRIPTION: Runs a full refresh pipeline for a single stream (`stream_1`) without state merging. It uses environment variables to specify the timestamp and the selected stream. The resulting state will only contain the bookmark for `stream_1`.\nSOURCE: https://github.com/meltano/meltano/blob/main/integration/example-library/meltano-run-merge-states/index.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nTAP_WITH_STATE_TS='2023-01-01T01:00:00+00:00' \\\nTAP_WITH_STATE__SELECT_FILTER='[\"stream_1\"]' \\\nmeltano run tap-with-state target-jsonl --full-refresh --state-id-suffix=no-merge\n```\n\n----------------------------------------\n\nTITLE: Example Plugin Configuration Output (JSON)\nDESCRIPTION: This JSON output represents the expected configuration of the 'example' plugin after setting the settings 'a_string', 'an_integer', 'an_object', and 'an_array' using the `meltano config` command. This example shows the values and data types that are configured.\nSOURCE: https://github.com/meltano/meltano/blob/main/integration/example-library/meltano-config/index.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"a_string\": \"-86.75\",\n  \"an_integer\": 42,\n  \"an_object\": {\n    \"foo\": \"bar\"\n  },\n  \"an_object.foo\": \"bar\",\n  \"an_array\": [\n    \"foo\",\n    \"bar\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Label for a Setting in Meltano\nDESCRIPTION: This YAML snippet demonstrates how to set a human-friendly label for a setting. The label is used for displaying the setting in a user interface.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/reference/plugin-definition-syntax.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nsettings:\n- name: setting_name\n  label: Setting Name\n```\n\n----------------------------------------\n\nTITLE: Example PostgreSQL Docker Run Output\nDESCRIPTION: This example shows the output of running the PostgreSQL Docker container.  It confirms the container ID and that the container is running and accessible on port 5432.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/getting-started/part2.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -p 5432:5432 -e POSTGRES_USER=meltano -e POSTGRES_PASSWORD=password --name meltano_postgres -d postgres\n\n504e2b416874dd6a5db3fe6dd3ff63f1d42095bbc4e87314f1f708f69c8188de\n$ docker container ls\n    CONTAINER ID   IMAGE      COMMAND                  CREATED         STATUS         PORTS                    NAMES\n    504e2b416874   postgres   \"docker-entrypoint.s…\"   3 seconds ago   Up 3 seconds   0.0.0.0:5432->5432/tcp   kind_rosalind\n```\n\n----------------------------------------\n\nTITLE: Installing Meltano Using uv\nDESCRIPTION: This snippet shows how to install Meltano using the `uv` package manager. It installs Meltano into an isolated virtual environment.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/getting-started/installation.mdx#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ uv tool install meltano\n---> 100%\nInstalled 1 executable: meltano\n```\n\n----------------------------------------\n\nTITLE: Configuring a Setting Name in a Meltano Plugin\nDESCRIPTION: This YAML snippet demonstrates how to define the name of a setting for a Meltano plugin.  The `name` property is a required property for all settings.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/reference/plugin-definition-syntax.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nsettings:\n- name: setting_name\n```\n\n----------------------------------------\n\nTITLE: Configure Development UI URL - Bash\nDESCRIPTION: This command shows how to configure the URL where the web app will be located when working locally in development. This is especially important since it provides the redirect after authentication. It is not required for production environments.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/reference/ui.md#_snippet_38\n\nLANGUAGE: bash\nCODE:\n```\n# The URL where the web app will be located when working locally in development\n# since it provides the redirect after authentication.\n# Not require for production\nexport MELTANO_UI_URL = \"\"\n```\n\n----------------------------------------\n\nTITLE: Listing Plugin Configuration\nDESCRIPTION: Shows the usage of `meltano config` to view the plugin's current configuration, used for validating changes.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/plugin-management.md#_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nmeltano config <name> list\n\n# For example:\nmeltano config target-postgres list\n```\n\n----------------------------------------\n\nTITLE: Copy Python Executable for Testing (Shell)\nDESCRIPTION: Copies the current Python executable to `./python3.X` and `./python3.Y` to simulate different Python versions for testing purposes. The PATH environment variable is also modified to include the current directory, ensuring the copied executables can be found. This requires an existing Python installation.\nSOURCE: https://github.com/meltano/meltano/blob/main/integration/example-library/meltano-custom-python/index.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nPATH=\"$PWD:$PATH\"\ncp \"$(python -c 'import os, sys; print(os.path.realpath(sys.executable))')\" ./python3.X\ncp \"$(python -c 'import os, sys; print(os.path.realpath(sys.executable))')\" ./python3.Y\nchmod u+x ./python3.X ./python3.Y\n```\n\n----------------------------------------\n\nTITLE: Toggle MELTANO_EMBED for Embed App - Bash\nDESCRIPTION: These commands are used to toggle the `MELTANO_EMBED` environment variable to develop for either the embeddable `iframe` app or the main app.  The environment variable impacts which version of the UI is served.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/reference/ui.md#_snippet_37\n\nLANGUAGE: bash\nCODE:\n```\n# Develop for the embed app\nexport MELTANO_EMBED=1\n\n# Develop for the main app (this is the default)\nexport MELTANO_EMBED=0\n\n# Start local development environment\nyarn serve\n```\n\n----------------------------------------\n\nTITLE: Meltano ELT Command Example\nDESCRIPTION: Illustrates the use of angle brackets as placeholders for user-provided tap and target names in the `meltano elt` command. This example is used in documentation and help output to indicate expected user input.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/contribute/cli.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nmeltano elt <tap_name> <target_name>\n```\n\n----------------------------------------\n\nTITLE: Updating Collections in _config.yml\nDESCRIPTION: This configuration snippet demonstrates how to add a new section to the Meltano documentation by updating the `collections` section in the `_config.yml` file.  This step is necessary to make the new section visible on the site.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/contribute/docs.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nnewsection:\n    output: true\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Meltano Exception in Python\nDESCRIPTION: This code snippet demonstrates how to create a custom exception class in Meltano by inheriting from `MeltanoError`. It defines the `ScheduleDoesNotExistError` exception, which is raised when a specified schedule does not exist. The constructor takes the schedule name as input and initializes the exception message with a reason and instruction for troubleshooting.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/contribute/errors.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom meltano.core.error import MeltanoError\n\n\nclass ScheduleDoesNotExistError(MeltanoError):\n    \"\"\"Occurs when a schedule does not exist.\"\"\"\n\n    def __init__(self, name: str):\n        \"\"\"Initialize the exception.\n\n        Args:\n            name: The name of the schedule that does not exist.\n        \"\"\"\n        super().__init__(\n            reason=f\"Schedule '{name}' does not exist\",\n            instruction=\"Use `meltano schedule add` to add a schedule\",\n        )\n```\n\n----------------------------------------\n\nTITLE: Set Mail Use TLS with Meltano Config and Environment Variable\nDESCRIPTION: This snippet configures whether to use TLS encryption for sending emails with Meltano using both the `meltano config` command and an environment variable.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/reference/ui.md#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nmeltano config meltano set mail use_tls true\nexport MELTANO_MAIL_USE_TLS=true\n```\n\n----------------------------------------\n\nTITLE: Multiple Plugin Variants in meltano.yml\nDESCRIPTION: This YAML snippet demonstrates how multiple variants of the same plugin are represented in the `meltano.yml` file, each with its own `name`, `inherit_from`, `variant`, and `pip_url`.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/plugin-management.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nplugins:\n  loaders:\n  - name: target-snowflake\n    variant: datamill-co\n    pip_url: target-snowflake\n  # highlight-start\n  - name: target-snowflake--transferwise\n    inherit_from: target-snowflake\n    variant: transferwise\n  # highlight-end\n    pip_url: pipelinewise-target-snowflake\n  # highlight-start\n  - name: target-snowflake--meltano\n    inherit_from: target-snowflake\n    variant: meltano\n  # highlight-end\n    pip_url: git+https://gitlab.com/meltano/target-snowflake.git\n```\n\n----------------------------------------\n\nTITLE: Create Project with Cookiecutter\nDESCRIPTION: Creates a new project directory using the Meltano SDK Cookiecutter template. This template provides boilerplate code for developing a custom tap.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/tutorials/custom-extractor.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncookiecutter https://github.com/meltano/sdk --directory=\"cookiecutter/tap-template\"\n```\n\n----------------------------------------\n\nTITLE: Defining a default environment in meltano.yml\nDESCRIPTION: This snippet shows how to set a default environment in the `meltano.yml` file. When a default environment is defined, it will be used automatically unless explicitly overridden by the `--environment` option or the `MELTANO_ENVIRONMENT` variable. This setting doesn't apply to the `meltano config` command.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/concepts/environments.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndefault_environment: <ENV>\n```\n\n----------------------------------------\n\nTITLE: Meltano UI Setup Command - Bash\nDESCRIPTION: This command demonstrates how to generate secrets for the Meltano UI using the `meltano ui setup` command.  It generates secrets for the `ui.secret_key` and `ui.password_salt` settings and stores them in the project's `.env` file.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/reference/ui.md#_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\n# Format\nmeltano ui setup [--bits=256] <server_name>\n\nmeltano ui setup meltano.example.com\n```\n\n----------------------------------------\n\nTITLE: Meltano Project Config After Interactive Configuration\nDESCRIPTION: This is an example of how the `meltano.yml` file is updated after configuring the `tap-github` extractor. It shows the `start_date` and `repositories` settings within the `config` section of the `tap-github` extractor.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/getting-started/part1.mdx#_snippet_12\n\nLANGUAGE: yml\nCODE:\n```\n  plugins:\n    extractors:\n      - name: tap-github\n        config:\n          start_date: '2024-01-01'\n          repositories:\n          - meltano/meltano\n```\n\n----------------------------------------\n\nTITLE: Start Meltano System Database with Docker Compose\nDESCRIPTION: Starts the `meltano-system-db` service defined in the `docker-compose.prod.yml` file in detached mode (`-d`). This sets up the database required for Meltano to function in a production environment.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/containerization.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose -f docker-compose.prod.yml up -d\n```\n\n----------------------------------------\n\nTITLE: Remove the legacy dbt Transformer plugin\nDESCRIPTION: This snippet shows how to remove the legacy `dbt` Transformer plugin and associated file bundle after migrating to an adapter-specific `dbt` utility plugin in Meltano. It also reminds to manually remove the old profiles.yml file.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/v2-migration.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# remove the transformer `dbt`\nmeltano remove transformer dbt\n\n# remove the file bundle `dbt`\nmeltano remove files dbt\n```\n\n----------------------------------------\n\nTITLE: List Meltano states in the dev environment\nDESCRIPTION: This command lists the Meltano states for the specified 'dev' environment. It provides information about the current state of Meltano's configuration and execution within that environment, allowing for inspection and verification.\nSOURCE: https://github.com/meltano/meltano/blob/main/integration/example-library/meltano-migrations/index.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmeltano --environment=dev state list\n```\n\n----------------------------------------\n\nTITLE: HTML Table Structure for Contributors\nDESCRIPTION: This snippet represents a row in an HTML table displaying contributor information. It includes the contributor's avatar, name, and links to their contributions like code, documentation, bug reports, and ideas. The table uses a fixed width for each cell.\nSOURCE: https://github.com/meltano/meltano/blob/main/CONTRIBUTORS.md#_snippet_10\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/BraedonLeonard\"><img src=\"https://avatars.githubusercontent.com/u/10601513?v=4?s=100\" width=\"100px;\" alt=\"Braedon Leonard\"/><br /><sub><b>Braedon Leonard</b></sub></a><br /><a href=\"#ideas-BraedonLeonard\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"https://github.com/meltano/meltano/issues?q=author%3ABraedonLeonard\" title=\"Bug reports\">🐛</a></td>\n```\n\n----------------------------------------\n\nTITLE: Install Custom Tap with `pip3` (Bash)\nDESCRIPTION: This command installs a custom tap using `pip3`, the Python package installer. This is an alternative to using `uv`.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/tutorials/custom-extractor.md#_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\npip3 install tap-my-custom-source\n```\n\n----------------------------------------\n\nTITLE: Removing a Plugin with Meltano CLI\nDESCRIPTION: This command removes the extractor plugin named tap-gitlab from the Meltano project. This operation can be used to clean up unused or outdated plugins.\nSOURCE: https://github.com/meltano/meltano/blob/main/integration/example-library/meltano-objects/index.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nmeltano remove extractor tap-gitlab\n```\n\n----------------------------------------\n\nTITLE: Run Meltano Pipeline with Environment Variable\nDESCRIPTION: These shell commands demonstrate how to run a Meltano pipeline with the `ANIMAL_GROUP` environment variable set to different values. This allows the pipeline to be executed with varying configurations based on the environment variable.\nSOURCE: https://github.com/meltano/meltano/blob/main/integration/example-library/meltano-expand-envvars-in-array/index.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nANIMAL_GROUP=birds meltano run tap-smoke-test target-csv\nANIMAL_GROUP=reptiles meltano run tap-smoke-test target-csv\nANIMAL_GROUP=mammals meltano run tap-smoke-test target-csv\n```\n\n----------------------------------------\n\nTITLE: HTML Table Structure for Contributors\nDESCRIPTION: This snippet represents a row in an HTML table displaying contributor information. It includes the contributor's avatar, name, and links to their contributions like code, documentation, bug reports, and ideas. The table uses a fixed width for each cell.\nSOURCE: https://github.com/meltano/meltano/blob/main/CONTRIBUTORS.md#_snippet_14\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/sabino\"><img src=\"https://avatars.githubusercontent.com/u/982190?v=4?s=100\" width=\"100px;\" alt=\"Felipe Guilherme Sabino\"/><br /><sub><b>Felipe Guilherme Sabino</b></sub></a><br /><a href=\"https://github.com/meltano/meltano/commits?author=sabino\" title=\"Code\">💻</a></td>\n```\n\n----------------------------------------\n\nTITLE: Checking for Broken Links (Skipping External)\nDESCRIPTION: This command builds the Jekyll site and uses htmlproofer to check for broken links, skipping external links. It also ignores specific URLs and HTTP status codes. This is useful when external links are causing verification issues.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/contribute/docs.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbundle exec jekyll build && bundle exec htmlproofer --log-level :debug ./_site/ --assume_extension --http_status_ignore 503 --url-ignore \"/www.linkedin.com/,/localhost/\" --disable-external\n```\n\n----------------------------------------\n\nTITLE: Activating a Python Virtual Environment\nDESCRIPTION: These commands activate the created virtual environment and upgrade pip. Activating the venv modifies the shell environment so that subsequent commands use the Python interpreter and packages installed within the venv. Upgrading pip ensures the latest package installation tools are used.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/concepts/python_virtual_environments.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsource .venv/meltano/bin/activate\npip install --upgrade pip\n```\n\n----------------------------------------\n\nTITLE: Get Meltano State Without State Merging\nDESCRIPTION: Retrieves the Meltano state for a specific environment, pipeline, and state ID suffix using the `meltano state get` command. The retrieved state is then displayed in JSON format.\nSOURCE: https://github.com/meltano/meltano/blob/main/integration/example-library/meltano-run-merge-states/index.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmeltano --environment=dev state get dev:tap-with-state-to-target-jsonl:no-merge\n```\n\n----------------------------------------\n\nTITLE: HTML Table Structure for Contributors\nDESCRIPTION: This snippet represents a row in an HTML table displaying contributor information. It includes the contributor's avatar, name, and links to their contributions like code, documentation, bug reports, and ideas. The table uses a fixed width for each cell.\nSOURCE: https://github.com/meltano/meltano/blob/main/CONTRIBUTORS.md#_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/jx2lee\"><img src=\"https://avatars.githubusercontent.com/u/63435794?v=4?s=100\" width=\"100px;\" alt=\"Jaejun\"/><br /><sub><b>Jaejun</b></sub></a><br /><a href=\"https://github.com/meltano/meltano/issues?q=author%3Ajx2lee\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/meltano/meltano/commits?author=jx2lee\" title=\"Code\">💻</a> <a href=\"https://github.com/meltano/meltano/commits?author=jx2lee\" title=\"Documentation\">📖</a></td>\n```\n\n----------------------------------------\n\nTITLE: Check Meltano State Output\nDESCRIPTION: Retrieves and displays the state output for a specific Meltano job (`dev:tap-gitlab-to-target-jsonl`). This command allows you to inspect the persistent state managed by Meltano.\nSOURCE: https://github.com/meltano/meltano/blob/main/integration/example-library/meltano-state-local/index.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nmeltano state get dev:tap-gitlab-to-target-jsonl\n```\n\n----------------------------------------\n\nTITLE: Install generic dbt transformer plugin with Meltano\nDESCRIPTION: This command adds the generic `dbt` transformer plugin to your Meltano project. Note that adapter-specific dbt utilities are now the preferred method.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/transformation.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmeltano add transformer dbt\n```\n\n----------------------------------------\n\nTITLE: Deploying Meltano Docs without SSH\nDESCRIPTION: This command deploys the Meltano documentation website without using SSH. It requires specifying the GitHub username via the GIT_USER environment variable. This approach is typically used when SSH is not configured or available.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/README.md#_snippet_2\n\nLANGUAGE: Shell Script\nCODE:\n```\nGIT_USER=<Your GitHub username> npm deploy\n```\n\n----------------------------------------\n\nTITLE: Deploying Meltano Docs with SSH\nDESCRIPTION: This command deploys the Meltano documentation website using SSH. Ensure SSH is properly configured for authentication with the remote repository. The USE_SSH environment variable is set to true to indicate that SSH should be used for deployment.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/README.md#_snippet_1\n\nLANGUAGE: Shell Script\nCODE:\n```\nUSE_SSH=true npm deploy\n```\n\n----------------------------------------\n\nTITLE: Run MinIO Docker Container\nDESCRIPTION: This command runs a MinIO Docker container, exposing ports 9001 for the console and 9000 for the API. MinIO provides S3-compatible storage.\nSOURCE: https://github.com/meltano/meltano/blob/main/integration/example-library/meltano-state-s3/index.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -d  --name minio -p 9001:9001 -p 9000:9000 quay.io/minio/minio server /data --console-address \":9001\"\n```\n\n----------------------------------------\n\nTITLE: Set UI Forwarded Allow IPs with Meltano Config and Environment Variable\nDESCRIPTION: This snippet demonstrates how to set the `ui.forwarded_allow_ips` using both the `meltano config` command and an environment variable. It allows specifying the front-end proxy IPs that are allowed to set secure headers, or disabling the check completely.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/reference/ui.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nmeltano config meltano set ui forwarded_allow_ips \"*\"\n\nexport MELTANO_UI_FORWARDED_ALLOW_IPS=\"*\"\n```\n\n----------------------------------------\n\nTITLE: Stream Configuration in streams.py\nDESCRIPTION: Configures the Comments stream, setting its primary keys, path, name, and schema.  The path determines the API endpoint for retrieving comments, and the schema defines the properties of the extracted fields.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/tutorials/custom-extractor.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"Stream type classes for tap-jsonplaceholder.\"\"\"\n\nfrom singer_sdk import typing as th # JSON Schema typing helpers\n\nfrom tap_jsonplaceholder.client import jsonplaceholderStream\n\n\nclass CommentsStream(jsonplaceholderStream):\n    primary_keys = [\"id\"]\n    path = '/comments'\n    name = \"comments\"\n    schema = th.PropertiesList(\n        th.Property(\"postId\", th.IntegerType),\n        th.Property(\"id\", th.IntegerType),\n        th.Property(\"name\", th.StringType),\n        th.Property(\"email\", th.StringType),\n        th.Property(\"body\", th.StringType),\n    ).to_dict()\n```\n\n----------------------------------------\n\nTITLE: Setting CLI Log Level via Environment Variable\nDESCRIPTION: This command sets the Meltano CLI log level to 'debug' using the `MELTANO_CLI_LOG_LEVEL` environment variable. This also increases the verbosity of Meltano's logs, providing more detailed information for troubleshooting, but only for the current shell session.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/troubleshooting.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport MELTANO_CLI_LOG_LEVEL=debug\n```\n\n----------------------------------------\n\nTITLE: Set UI Authentication with Meltano Config and Environment Variable\nDESCRIPTION: This snippet demonstrates how to enable authentication for the Meltano UI using both the `meltano config` command and an environment variable. Enabling authentication requires setting up secure configuration and creating users.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/reference/ui.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nmeltano config meltano set ui authentication true\n\nexport MELTANO_UI_AUTHENTICATION=true\n```\n\n----------------------------------------\n\nTITLE: Looping Through State IDs\nDESCRIPTION: This shell script loops through all state IDs listed by `meltano state list`, retrieves the state for each, and writes it to a separate JSON file.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/concepts/state_backends.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nfor job_id in $(meltano state list); do meltano state get $job_id > $job_id-state.json; done\n```\n\n----------------------------------------\n\nTITLE: Output of Adding GitHub Extractor\nDESCRIPTION: This is the console output after adding the `tap-github` extractor. It shows the variant used, the repository URL, and the documentation link. It also confirms the successful installation of the extractor plugin.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/getting-started/part1.mdx#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ meltano add extractor tap-github\nAdded extractor 'tap-github' to your Meltano project\nVariant:        meltanolabs (default)\nRepository:     https://github.com/meltanolabs/tap-github\nDocumentation:  https://hub.meltano.com/extractors/tap-github--meltanolabs\n\n2024-01-01T00:25:40.604941Z [info     ] Installing extractor 'tap-github'\n2024-01-01T00:25:53.152127Z [info     ] Installed extractor 'tap-github'\n\nTo learn more about extractor 'tap-github', visit https://hub.meltano.com/extractors/tap-github--meltanolabs\n```\n\n----------------------------------------\n\nTITLE: Install Meltano\nDESCRIPTION: This shell command installs Meltano. It assumes that the `meltano.yml` file is already present in the current directory.\nSOURCE: https://github.com/meltano/meltano/blob/main/integration/example-library/meltano-state-s3/index.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmeltano install\n```\n\n----------------------------------------\n\nTITLE: HTML Table Structure for Contributors\nDESCRIPTION: This snippet represents a row in an HTML table displaying contributor information. It includes the contributor's avatar, name, and links to their contributions like code, documentation, bug reports, and ideas. The table uses a fixed width for each cell.\nSOURCE: https://github.com/meltano/meltano/blob/main/CONTRIBUTORS.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://rabid.audio/\"><img src=\"https://avatars.githubusercontent.com/u/3444382?v=4?s=100\" width=\"100px;\" alt=\"Julien (CJK)\"/><br /><sub><b>Julien (CJK)</b></sub></a><br /><a href=\"#ideas-rabidaudio\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"https://github.com/meltano/meltano/issues?q=author%3Arabidaudio\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/meltano/meltano/commits?author=rabidaudio\" title=\"Code\">💻</a></td>\n```\n\n----------------------------------------\n\nTITLE: Initialize Meltano Project (Bash)\nDESCRIPTION: This command initializes a new Meltano project. It prompts the user for a project name and sets up the basic project structure.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/tutorials/custom-extractor.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nmeltano init\n```\n\n----------------------------------------\n\nTITLE: Verify Python Version for Extractor (Shell)\nDESCRIPTION: Checks the Python version used by the `tap-github` extractor's virtual environment. It prints the path of the Python executable and exits with a non-zero code if it does not end with `/python3.X`, indicating that the correct Python version is being used.  This assumes that the `tap-github` extractor has been previously installed.\nSOURCE: https://github.com/meltano/meltano/blob/main/integration/example-library/meltano-custom-python/index.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n.meltano/extractors/tap-github/venv/bin/python -c 'import os, sys; exe = os.path.realpath(sys.executable); print(exe); exit(not exe.endswith(\"/python3.X\"))'\n```\n\n----------------------------------------\n\nTITLE: Install Meltano Project Dependencies\nDESCRIPTION: This shell command installs the dependencies required for the Meltano project, ensuring that all necessary packages and libraries are available for the pipeline to run.\nSOURCE: https://github.com/meltano/meltano/blob/main/integration/example-library/meltano-expand-envvars-in-array/index.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmeltano install\n```\n\n----------------------------------------\n\nTITLE: HTML Table Structure for Contributors\nDESCRIPTION: This snippet represents a row in an HTML table displaying contributor information. It includes the contributor's avatar, name, and links to their contributions like code, documentation, bug reports, and ideas. The table uses a fixed width for each cell.\nSOURCE: https://github.com/meltano/meltano/blob/main/CONTRIBUTORS.md#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/menzenski\"><img src=\"https://avatars.githubusercontent.com/u/4371752?v=4?s=100\" width=\"100px;\" alt=\"Matt Menzenski\"/><br /><sub><b>Matt Menzenski</b></sub></a><br /><a href=\"#ideas-menzenski\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"https://github.com/meltano/meltano/issues?q=author%3Amenzenski\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/meltano/meltano/commits?author=menzenski\" title=\"Documentation\">📖</a></td>\n```\n\n----------------------------------------\n\nTITLE: Add and Commit Files to Git\nDESCRIPTION: Adds all files in the project directory to the Git staging area and commits them with a message. This prepares the project for pushing to GitLab.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/containerization.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngit add -A\ngit commit -m \"Set up Meltano project with Docker and GitLab CI\"\n```\n\n----------------------------------------\n\nTITLE: Add Meltano Extractor with Python Version (Shell)\nDESCRIPTION: Adds the `tap-gitlab` extractor to the Meltano project, explicitly specifying the Python version to use via the `--python` flag. This overrides any default Python version settings.\nSOURCE: https://github.com/meltano/meltano/blob/main/integration/example-library/meltano-custom-python/index.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmeltano add extractor tap-gitlab --python python3.Y\n```\n\n----------------------------------------\n\nTITLE: HTML Table Structure for Contributors\nDESCRIPTION: This snippet represents a row in an HTML table displaying contributor information. It includes the contributor's avatar, name, and links to their contributions like code, documentation, bug reports, and ideas. The table uses a fixed width for each cell.\nSOURCE: https://github.com/meltano/meltano/blob/main/CONTRIBUTORS.md#_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://akkio.com/\"><img src=\"https://avatars.githubusercontent.com/u/131684844?v=4?s=100\" width=\"100px;\" alt=\"Anden Acitelli\"/><br /><sub><b>Anden Acitelli</b></sub></a><br /><a href=\"https://github.com/meltano/meltano/commits?author=anden-akkio\" title=\"Documentation\">📖</a> <a href=\"https://github.com/meltano/meltano/issues?q=author%3Aanden-akkio\" title=\"Bug reports\">🐛</a> <a href=\"#ideas-anden-akkio\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n```\n\n----------------------------------------\n\nTITLE: Escaping Special Characters in YAML Plugin Config\nDESCRIPTION: This YAML snippet demonstrates how to escape special characters, specifically the `$` character, in a plugin's `config` section in `meltano.yml` when you don't want variable expansion to occur.  Escaping with a backslash (`\\`) prevents the variable from being interpreted.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/configuration.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nextractors:\n- name: tap-example\n  config:\n    special_character_setting: MY_$VAR\n```\n\n----------------------------------------\n\nTITLE: Redirecting Meltano Events to Snowplow Micro\nDESCRIPTION: This snippet configures Meltano to send anonymous usage statistics to a local Snowplow Micro instance.  It sets the `MELTANO_SEND_ANONYMOUS_USAGE_STATS` and `MELTANO_SNOWPLOW_COLLECTOR_ENDPOINTS` environment variables before invoking a Meltano command.\nSOURCE: https://github.com/meltano/meltano/blob/main/src/meltano/core/tracking/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nMELTANO_SEND_ANONYMOUS_USAGE_STATS=True MELTANO_SNOWPLOW_COLLECTOR_ENDPOINTS='[\"http://localhost:9090\"]' meltano invoke something\n```\n\n----------------------------------------\n\nTITLE: Install Python with uv\nDESCRIPTION: Installs Python version 3.13 using the `uv` package manager. This is a prerequisite for running Python-based scripts in the custom extractor.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/tutorials/custom-extractor.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuv python install 3.13\n```\n\n----------------------------------------\n\nTITLE: Setting up Postgres with URI scheme\nDESCRIPTION: Install Meltano with the `postgres` extra and sets the `database_uri` configuration setting.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/v3-migration.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npipx install \"meltano[postgres]\"\nmeltano config meltano set database_uri postgresql+psycopg://<username>:<password>@<host>:<port>/<database>\n```\n\n----------------------------------------\n\nTITLE: Check Docker Compose Version\nDESCRIPTION: Verifies that Docker Compose is installed and accessible on the system. This is a prerequisite for subsequent Docker Compose-related commands.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/containerization.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose --version\n```\n\n----------------------------------------\n\nTITLE: HTML Table Structure for Contributors\nDESCRIPTION: This snippet represents a row in an HTML table displaying contributor information. It includes the contributor's avatar, name, and links to their contributions like code, documentation, bug reports, and ideas. The table uses a fixed width for each cell.\nSOURCE: https://github.com/meltano/meltano/blob/main/CONTRIBUTORS.md#_snippet_17\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/arorarohan981\"><img src=\"https://avatars.githubusercontent.com/u/66269929?v=4?s=100\" width=\"100px;\" alt=\"Rohan Arora\"/><br /><sub><b>Rohan Arora</b></sub></a><br /><a href=\"https://github.com/meltano/meltano/commits?author=arorarohan981\" title=\"Code\">💻</a></td>\n```\n\n----------------------------------------\n\nTITLE: Push Project to GitLab\nDESCRIPTION: Pushes the local Git repository to a new private project on GitLab. The `NAMESPACE` variable needs to be replaced with the user's GitLab username or group.  This triggers the CI/CD pipeline defined in `.gitlab-ci.yml`.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/containerization.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nNAMESPACE=\"<your-gitlab-username-or-group>\"\ngit push git@gitlab.com:$NAMESPACE/meltano-demo-project.git master\n```\n\n----------------------------------------\n\nTITLE: Configure pip_url for Superset\nDESCRIPTION: This YAML configuration updates the `pip_url` property for the Superset utility in the `meltano.yml` file.  It allows users to add database-specific packages to their Meltano project, enabling Superset to connect to various data sources.  The example includes the `snowflake-sqlalchemy` package for Snowflake connectivity.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/analysis.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nutilities:\n- name: superset\n  variant: apache\n  pip_url: apache-superset==1.5.0 snowflake-sqlalchemy\n```\n\n----------------------------------------\n\nTITLE: HTML Table Structure for Contributors\nDESCRIPTION: This snippet represents a row in an HTML table displaying contributor information. It includes the contributor's avatar, name, and links to their contributions like code, documentation, bug reports, and ideas. The table uses a fixed width for each cell.\nSOURCE: https://github.com/meltano/meltano/blob/main/CONTRIBUTORS.md#_snippet_19\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://galarne.fr/\"><img src=\"https://avatars.githubusercontent.com/u/3693868?v=4?s=100\" width=\"100px;\" alt=\"Emmanuel\"/><br /><sub><b>Emmanuel</b></sub></a><br /><a href=\"https://github.com/meltano/meltano/commits?author=EChaffraix\" title=\"Documentation\">📖</a></td>\n```\n\n----------------------------------------\n\nTITLE: Navigate to Meltano Project Directory (Bash)\nDESCRIPTION: This command changes the current directory to the newly created Meltano project directory.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/tutorials/custom-extractor.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncd meltano-demo\n```\n\n----------------------------------------\n\nTITLE: Create S3 Bucket using boto3\nDESCRIPTION: This Python script uses the boto3 library to create an S3 bucket named 'meltano' in MinIO. It requires boto3 to be installed and uses the default MinIO credentials.\nSOURCE: https://github.com/meltano/meltano/blob/main/integration/example-library/meltano-state-s3/index.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom boto3.session import Session\n\nsession = Session(aws_access_key_id=\"minioadmin\", aws_secret_access_key=\"minioadmin\")\n\nclient = session.client(\"s3\", endpoint_url=\"http://127.0.0.1:9000\")\n\nclient.create_bucket(Bucket=\"meltano\")\n```\n\n----------------------------------------\n\nTITLE: Run a Meltano Job\nDESCRIPTION: This shell command executes a Meltano job using the tap-gitlab and target-jsonl plugins.\nSOURCE: https://github.com/meltano/meltano/blob/main/integration/example-library/meltano-state-s3/index.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nmeltano run tap-gitlab target-jsonl\n```\n\n----------------------------------------\n\nTITLE: Change Directory to the New Meltano Project\nDESCRIPTION: This command navigates the user into the newly created Meltano project directory. This step is essential to execute subsequent commands within the project's context.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/getting-started/part1.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd my-meltano-project\n```\n\n----------------------------------------\n\nTITLE: Compiling Manifests with Unredacted Secret Values\nDESCRIPTION: This example demonstrates how to compile a Meltano manifest with secret values left unredacted.  The `--unsafe` flag is used to disable redaction.  This option should be used with caution and only in secure environments.\nSOURCE: https://github.com/meltano/meltano/blob/main/integration/example-library/meltano-manifest/index.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmeltano --environment=jigsaw compile --indent 2 --unsafe\n```\n\n----------------------------------------\n\nTITLE: Installing Meltano Using pip\nDESCRIPTION: This snippet demonstrates how to install Meltano using `pip` inside a virtual environment. First, it upgrades `pip`, then it installs the meltano package. The snippet emphasizes the importance of using a virtual environment to avoid dependency conflicts.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/getting-started/installation.mdx#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ pip install --upgrade pip\nRequirement already satisfied.\n$ pip install \"meltano\"\n---> 100%\nsuccessfully installed meltano\n```\n\n----------------------------------------\n\nTITLE: Installing all plugins\nDESCRIPTION: Installs all plugins to ensure project works as expected after enabling plugin locks. This verifies functionality before generating lock files.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/v3-migration.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmeltano install\n```\n\n----------------------------------------\n\nTITLE: Cleanup Temporary Files (Shell)\nDESCRIPTION: Removes the temporary Python executable copies created earlier in the example. This ensures a clean environment after the tests are completed.\nSOURCE: https://github.com/meltano/meltano/blob/main/integration/example-library/meltano-custom-python/index.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nrm ./python3.X ./python3.Y\n```\n\n----------------------------------------\n\nTITLE: Running Local Development Server with npm\nDESCRIPTION: This command starts the local development server for the Meltano documentation. It allows previewing changes made to the documentation in real-time.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/contribute/docs.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Setup UI with Server Name (meltano ui setup)\nDESCRIPTION: Uses the `meltano ui setup` command to generate secrets for the `ui.secret_key` and `ui.password_salt` settings, and stores them along with the specified `server_name` in the project's `.env` file.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/reference/ui.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmeltano ui setup meltano.example.com\n```\n\n----------------------------------------\n\nTITLE: Installing Meltano with Postgres extra\nDESCRIPTION: Install Meltano with the `psycopg2` extra if you are already using Postgres or the `postgres` extra for first-time setup using the `postgresql+psycopg` URI scheme.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/v3-migration.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npipx install \"meltano[psycopg2]\"\n```\n\n----------------------------------------\n\nTITLE: Add Meltano Extractor (Shell)\nDESCRIPTION: Adds the `tap-github` extractor to the Meltano project using the default Python version specified in `meltano.yml`. The `python` property in `meltano.yml` should be set to a specific Python version (e.g., `python3.X`) before running this command.\nSOURCE: https://github.com/meltano/meltano/blob/main/integration/example-library/meltano-custom-python/index.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmeltano add extractor tap-github\n```\n\n----------------------------------------\n\nTITLE: Install Meltano Dependencies\nDESCRIPTION: This command installs the necessary dependencies for the Meltano project, based on the configuration defined in the `meltano.yml` file.\nSOURCE: https://github.com/meltano/meltano/blob/main/integration/example-library/meltano-annotations/index.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmeltano install\n```\n\n----------------------------------------\n\nTITLE: Setting GitLab Client ID - Bash\nDESCRIPTION: These commands demonstrate how to configure the `oauth.gitlab.client_id` setting using the `meltano config` command and environment variables. This setting specifies the client ID for the GitLab OAuth provider. An alias is also demonstrated.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/reference/ui.md#_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\nmeltano config meltano set oauth gitlab client_id <gitlab-client-id>\nexport OAUTH_GITLAB_CLIENT_ID=<gitlab-client-id>\nexport OAUTH_GITLAB_APPLICATION_ID=<gitlab-client-id>\n```\n\n----------------------------------------\n\nTITLE: HTML Table Structure for Contributors\nDESCRIPTION: This snippet represents a row in an HTML table displaying contributor information. It includes the contributor's avatar, name, and links to their contributions like code, documentation, bug reports, and ideas. The table uses a fixed width for each cell.\nSOURCE: https://github.com/meltano/meltano/blob/main/CONTRIBUTORS.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/DanielPDWalker\"><img src=\"https://avatars.githubusercontent.com/u/34437496?v=4?s=100\" width=\"100px;\" alt=\"Daniel Walker\"/><br /><sub><b>Daniel Walker</b></sub></a><br /><a href=\"#ideas-DanielPDWalker\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"https://github.com/meltano/meltano/commits?author=DanielPDWalker\" title=\"Code\">💻</a> <a href=\"https://github.com/meltano/meltano/commits?author=DanielPDWalker\" title=\"Documentation\">📖</a></td>\n```\n\n----------------------------------------\n\nTITLE: Add Docker Compose files for Meltano UI\nDESCRIPTION: Adds Docker Compose files to your Meltano project to manage the Meltano UI application lifecycle using Docker Compose.  This enables you to start the `meltano-ui` service in the background.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/reference/ui.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# For these examples to work, ensure that\n# Docker Compose has been installed\ndocker-compose --version\n\n# Add Docker Compose files to your project\nmeltano add files files-docker-compose\n\n# Start the `meltano-ui` service in the background\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: JSONL Output Example\nDESCRIPTION: This is an example of the JSONL output produced by the `target-jsonl` loader. It shows a single line containing JSON data representing a commit from the GitHub repository.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/getting-started/part1.mdx#_snippet_22\n\nLANGUAGE: console\nCODE:\n```\n$ cat output/commits.jsonl\n{\"sha\": \"409bdd601e0531833665f538bccecd0f69e101c0\", \"node_id\": \"C_kwDOH_twHNoAKDQwOWJkZDYwMWUwNTMxODMzNjY1ZjUzOGJjY2VjZDBmNjllMTAxYzA\", \"url\": \"https://api.github.com/repos/sbalnojan/meltano-lightdash/commits/409bdd601e0531833665f538bccecd0f69e101c0\", \"commit_timestamp\": \"2024-09-14T12:41:21Z\"}\n\n```\n\n----------------------------------------\n\nTITLE: Setting OAuth Service Providers - Bash\nDESCRIPTION: These commands demonstrate how to configure the `oauth_service.providers` setting using the `meltano config` command and environment variables. This setting specifies which OAuth providers are enabled, either specific providers or all providers.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/reference/ui.md#_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\nmeltano config meltano set oauth_service providers facebook,google_adwords\nexport MELTANO_OAUTH_SERVICE_PROVIDERS=facebook,google_adwords\n```\n\n----------------------------------------\n\nTITLE: State JSON Without State Merging\nDESCRIPTION: Represents the JSON structure of the Meltano state after extracting a single stream without state merging. It contains the bookmark for `stream_1` with its corresponding timestamp.\nSOURCE: https://github.com/meltano/meltano/blob/main/integration/example-library/meltano-run-merge-states/index.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"singer_state\": {\n    \"bookmarks\": {\n      \"stream_1\": {\n        \"created_at\": \"2023-01-01T01:00:00+00:00\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Table Structure for Contributors\nDESCRIPTION: This snippet represents a row in an HTML table displaying contributor information. It includes the contributor's avatar, name, and links to their contributions like code, documentation, bug reports, and ideas. The table uses a fixed width for each cell.\nSOURCE: https://github.com/meltano/meltano/blob/main/CONTRIBUTORS.md#_snippet_9\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/haleemur\"><img src=\"https://avatars.githubusercontent.com/u/6108231?v=4?s=100\" width=\"100px;\" alt=\"Hal Ali\"/><br /><sub><b>Hal Ali</b></sub></a><br /><a href=\"https://github.com/meltano/meltano/commits?author=haleemur\" title=\"Code\">💻</a> <a href=\"#ideas-haleemur\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n```\n\n----------------------------------------\n\nTITLE: Set UI Workers with Meltano Config and Environment Variable\nDESCRIPTION: This snippet demonstrates how to set the number of worker processes for the Meltano UI using both the `meltano config` command and an environment variable. The number of workers determines how many concurrent requests the UI can handle.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/reference/ui.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nmeltano config meltano set ui workers 1\n\nexport MELTANO_UI_WORKERS=1\n```\n\n----------------------------------------\n\nTITLE: Meltano Add Custom Extractor Interaction\nDESCRIPTION: This snippet simulates the interactive prompts and responses when adding a custom extractor in Meltano. The prompts request the plugin's namespace, pip_url, executable, capabilities, and settings. The user input is provided after each prompt.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/plugin-management.md#_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ meltano add --custom extractor tap-covid-19\nAdding new custom extractor with name 'tap-covid-19'...\n\nSpecify the plugin's namespace, which will serve as the:\n- identifier to find related/compatible plugins\n- default database schema (`load_schema` extra),\n  for use by loaders that support a target schema\n\nHit Return to accept the default: plugin name with underscores instead of dashes\n\n# highlight-next-line\n(namespace) [tap_covid_19]: tap_covid_19\n\nSpecify the plugin's `pip install` argument, for example:\n- PyPI package name:\n  tap-covid-19\n- Git repository URL:\n  git+https://gitlab.com/meltano/tap-covid-19.git\n- local directory, in editable/development mode:\n  -e extract/tap-covid-19\n- 'n' if using a local executable (nothing to install)\n\nDefault: plugin name as PyPI package name\n\n# highlight-next-line\n(pip_url) [tap-covid-19]: -e extract/tap-covid-19\n\nSpecify the plugin's executable name\n\nDefault: name derived from `pip_url`\n\n# highlight-next-line\n(executable) [tap-covid-19]: tap-covid-19\n\nSpecify the tap's supported Singer features (executable flags), for example:\n  `catalog`: supports the `--catalog` flag\n  `discover`: supports the `--discover` flag\n  `properties`: supports the `--properties` flag\n  `state`: supports the `--state` flag\n\nTo find out what features a tap supports, reference its documentation or try one\nof the tricks under [how to test a tap](/contribute/plugins#how-to-test-a-tap).\n\nMultiple capabilities can be separated using commas.\n\nDefault: no capabilities\n\n# highlight-next-line\n(capabilities) [[]]: catalog,discover,state\n\nSpecify the tap's supported settings (`config.json` keys)\n\nMultiple setting names (keys) can be separated using commas.\n\nA setting kind can be specified alongside the name (key) by using the `:` delimiter,\ne.g. `port:integer` to set the kind `integer` for the name `port`\n\nSupported setting kinds:\nstring | integer | boolean | date_iso8601 | email | password | oauth | options | file | array | object | hidden\n\n- Credentials and other sensitive setting types should use the password kind.\n- If not specified, setting kind defaults to string.\n- Nested properties can be represented using the `.` separator, e.g. `auth.username` for `{ \"auth\": { \"username\": value } }`.\n- To find out what settings a tap supports, reference its documentation.\n\nDefault: no settings\n\n# highlight-next-line\n(settings) [[]]: api_token:password,user_agent:string,start_date:date_iso8601\nAdded extractor 'tap-covid-19' to your Meltano project\n\nInstalling extractor 'tap-covid-19'...\nInstalled extractor 'tap-covid-19'\n```\n\n----------------------------------------\n\nTITLE: Enabling plugin locks required feature flag\nDESCRIPTION: Enables the `ff.plugin_locks_required` feature flag. This feature flag is required before upgrading to Meltano v3.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/v3-migration.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmeltano config meltano set ff.plugin_locks_required true\n```\n\n----------------------------------------\n\nTITLE: Running Snowplow Micro with Docker\nDESCRIPTION: This snippet demonstrates how to run Snowplow Micro using Docker for local development and testing. It mounts the current directory as a volume and maps port 9090.  It requires Docker to be installed.\nSOURCE: https://github.com/meltano/meltano/blob/main/src/meltano/core/tracking/README.md#_snippet_1\n\nLANGUAGE: docker\nCODE:\n```\ndocker run \\\n  --mount type=bind,source=$(pwd),destination=/config \\\n  -p 9090:9090 \\\n  snowplow/snowplow-micro:1.2.1 \\\n  --collector-config /config/micro.conf \\\n  --iglu /config/iglu.json\n```\n\n----------------------------------------\n\nTITLE: HTML Table Structure for Contributors\nDESCRIPTION: This snippet represents a row in an HTML table displaying contributor information. It includes the contributor's avatar, name, and links to their contributions like code, documentation, bug reports, and ideas. The table uses a fixed width for each cell.\nSOURCE: https://github.com/meltano/meltano/blob/main/CONTRIBUTORS.md#_snippet_15\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/nkclemson\"><img src=\"https://avatars.githubusercontent.com/u/83767876?v=4?s=100\" width=\"100px;\" alt=\"Narayan Kandel\"/><br /><sub><b>Narayan Kandel</b></sub></a><br /><a href=\"https://github.com/meltano/meltano/commits?author=nkclemson\" title=\"Code\">💻</a></td>\n```\n\n----------------------------------------\n\nTITLE: Configure Tap and Target\nDESCRIPTION: These shell commands configure the tap-gitlab and target-jsonl plugins. The first command sets the start date for the tap-gitlab plugin. The second disables timestamping for the target-jsonl output file.\nSOURCE: https://github.com/meltano/meltano/blob/main/integration/example-library/meltano-state-s3/index.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nmeltano config tap-gitlab set start_date 2022-11-01T00:00:01Z\nmeltano config target-jsonl set do_timestamp_file false\n```\n\n----------------------------------------\n\nTITLE: HTML Table Structure for Contributors\nDESCRIPTION: This snippet represents a row in an HTML table displaying contributor information. It includes the contributor's avatar, name, and links to their contributions like code, documentation, bug reports, and ideas. The table uses a fixed width for each cell.\nSOURCE: https://github.com/meltano/meltano/blob/main/CONTRIBUTORS.md#_snippet_20\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/XshubhamX\"><img src=\"https://avatars.githubusercontent.com/u/63532716?v=4?s=100\" width=\"100px;\" alt=\"Shubham\"/><br /><sub><b>Shubham</b></sub></a><br /><a href=\"https://github.com/meltano/meltano/commits?author=XshubhamX\" title=\"Code\">💻</a> <a href=\"https://github.com/meltano/meltano/issues?q=author%3AXshubhamX\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/meltano/meltano/commits?author=XshubhamX\" title=\"Documentation\">📖</a></td>\n```\n\n----------------------------------------\n\nTITLE: Using a Custom PyPI Index in Dockerfile\nDESCRIPTION: Illustrates how to configure Meltano to use a custom Python Package Index (PyPI) by setting the `PIP_INDEX_URL` environment variable in a Dockerfile. This allows installing plugins from private or internal PyPI repositories.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/guide/plugin-management.md#_snippet_17\n\nLANGUAGE: dockerfile\nCODE:\n```\nARG PIP_INDEX_URL=<your_custom_pypi_url>\nRUN meltano install\n```\n\n----------------------------------------\n\nTITLE: Setting Facebook Client ID - Bash\nDESCRIPTION: These commands demonstrate how to configure the `oauth_service.facebook.client_id` setting using the `meltano config` command and environment variables.  This setting specifies the client ID for the Facebook OAuth provider.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/reference/ui.md#_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\nmeltano config meltano set oauth_service facebook client_id <facebook-client-id>\nexport OAUTH_FACEBOOK_CLIENT_ID=<facebook-client-id>\n```\n\n----------------------------------------\n\nTITLE: Setting OAuth Service URL - Bash\nDESCRIPTION: These commands demonstrate how to configure the `oauth_service.url` setting using the `meltano config` command and environment variables. This URL points to the local OAuth service, primarily used for development purposes.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/reference/ui.md#_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\nmeltano config meltano set oauth_service url https://oauth.svc.meltanodata.com\nexport MELTANO_OAUTH_SERVICE_URL=https://oauth.svc.meltanodata.com\n```\n\n----------------------------------------\n\nTITLE: Tap Class Definition in tap.py\nDESCRIPTION: Defines the tap class and sets up the stream discovery method. The `discover_streams` function returns a list of discovered streams, which in this case is the `CommentsStream`.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/tutorials/custom-extractor.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"jsonplaceholder tap class.\"\"\"\n\nfrom typing import List\n\nfrom singer_sdk import Tap, Stream\n\nfrom singer_sdk import typing as th  # JSON schema typing helpers\n\nfrom tap_jsonplaceholder.streams import jsonplaceholderStream, CommentsStream\n\n\nSTREAM_TYPES = [CommentsStream]\n\n\nclass Tapjsonplaceholder(Tap):\n    \"\"\"jsonplaceholder tap class.\"\"\"\n\n    name = \"tap-jsonplaceholder\"\n\n    def discover_streams(self) -> List[Stream]:\n        \"\"\"Return a list of discovered streams.\"\"\"\n\n        return [stream_class(tap=self) for stream_class in STREAM_TYPES]\n```\n\n----------------------------------------\n\nTITLE: Installing Node Dependencies with npm\nDESCRIPTION: This command installs the necessary Node.js dependencies for the Meltano documentation project. It's required to set up the local development environment.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/contribute/docs.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Sample DataHub AWS S3 recipe (YAML)\nDESCRIPTION: This YAML code defines a DataHub ingestion recipe for AWS S3.  It specifies the `path_specs` to include CSV files from a specific S3 bucket. The `aws_config` section contains the AWS credentials and region, and aws_endpoint_url, which may be necessary for local testing with a mock S3 service.  The credentials should be replaced by proper values.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/tutorials/datahub.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nsource:\n  type: s3\n  config:\n    path_specs:\n      -\n        include: \"s3://test/*.csv\"\n\n    aws_config:\n      aws_access_key_id: XXX\n      aws_secret_access_key: XXX\n      aws_region: us-east-1\n      aws_endpoint_url: http://host.docker.internal:5005 #mock, replace with yours!\n    env: \"PROD\"\n    profiling:\n      enabled: false\n```\n\n----------------------------------------\n\nTITLE: State JSON With State Merging\nDESCRIPTION: Represents the JSON structure of the Meltano state after extracting a single stream with state merging. It contains the new bookmark for `stream_1` along with the old bookmarks for `stream_2` and `stream_3`, demonstrating the merged state.\nSOURCE: https://github.com/meltano/meltano/blob/main/integration/example-library/meltano-run-merge-states/index.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"singer_state\": {\n    \"bookmarks\": {\n      \"stream_1\": {\n        \"created_at\": \"2023-01-01T01:00:00+00:00\"\n      },\n      \"stream_2\": {\n        \"created_at\": \"2023-01-01T00:00:00+00:00\"\n      },\n      \"stream_3\": {\n        \"created_at\": \"2023-01-01T00:00:00+00:00\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Set Mail Port with Meltano Config and Environment Variable\nDESCRIPTION: This snippet configures the mail server port used for sending emails with Meltano using both the `meltano config` command and an environment variable.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/reference/ui.md#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nmeltano config meltano set mail port 25\nexport MELTANO_MAIL_PORT=25\n```\n\n----------------------------------------\n\nTITLE: Set UI Anonymous Readonly with Meltano Config and Environment Variable\nDESCRIPTION: This snippet demonstrates how to enable anonymous read-only access for the Meltano UI when authentication is enabled, using both the `meltano config` command and an environment variable.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/reference/ui.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nmeltano config meltano set ui anonymous_readonly true\n\nexport MELTANO_UI_ANONYMOUS_READONLY=true\n```\n\n----------------------------------------\n\nTITLE: Set UI Bind Port\nDESCRIPTION: Sets the `ui.bind_port` setting using the `meltano config` command, the `MELTANO_UI_BIND_PORT` environment variable, and the `meltano ui` command-line option.  This configures the port to which the Meltano UI server will bind.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/reference/ui.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmeltano config meltano set ui bind_port 80\n\nexport MELTANO_UI_BIND_PORT=80\n\nmeltano ui --bind-port=80\n```\n\n----------------------------------------\n\nTITLE: Set UI Password Salt with Meltano Config and Environment Variable\nDESCRIPTION: This snippet demonstrates how to set the `ui.password_salt` using both the `meltano config` command and an environment variable. A randomly generated secret is used for increased security during password hashing.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/reference/ui.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nmeltano config meltano set ui password_salt <randomly-generated-secret>\n\nexport MELTANO_UI_PASSWORD_SALT=<randomly-generated-secret>\n```\n\n----------------------------------------\n\nTITLE: Set Mail Server with Meltano Config and Environment Variable\nDESCRIPTION: This snippet configures the mail server used for sending emails with Meltano using both the `meltano config` command and an environment variable.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/reference/ui.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nmeltano config meltano set mail server smtp.example.com\nexport MELTANO_MAIL_SERVER=smtp.example.com\n```\n\n----------------------------------------\n\nTITLE: Set Mail Username with Meltano Config and Environment Variable\nDESCRIPTION: This snippet configures the username for authenticating with the mail server using both the `meltano config` command and an environment variable.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/reference/ui.md#_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nmeltano config meltano set mail username meltano\nexport MELTANO_MAIL_USERNAME=meltano\n```\n\n----------------------------------------\n\nTITLE: Adding Environments with Meltano CLI\nDESCRIPTION: This command adds two environments, qa and prod, to the Meltano project. Environments allow for different configurations for development, testing, and production.\nSOURCE: https://github.com/meltano/meltano/blob/main/integration/example-library/meltano-objects/index.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmeltano environment add qa\nmeltano environment add prod\n```\n\n----------------------------------------\n\nTITLE: Set Mail Sendgrid Unsubscribe Group ID with Meltano Config and Environment Variable\nDESCRIPTION: This snippet configures the SendGrid unsubscribe group ID for emails sent by Meltano using both the `meltano config` command and an environment variable.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/reference/ui.md#_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nmeltano config meltano set mail sendgrid_unsubscribe_group_id 42\nexport MELTANO_MAIL_SENDGRID_UNSUBSCRIBE_GROUP_ID=42\n```\n\n----------------------------------------\n\nTITLE: Set Mail Debug with Meltano Config and Environment Variable\nDESCRIPTION: This snippet configures whether to enable debug mode for email sending with Meltano using both the `meltano config` command and an environment variable.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/reference/ui.md#_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nmeltano config meltano set mail debug true\nexport MELTANO_MAIL_DEBUG=true\n```\n\n----------------------------------------\n\nTITLE: Linting Schemas with igluctl\nDESCRIPTION: This snippet shows how to use `igluctl` to validate JSON schemas in the `src/meltano/core/tracking` directory.  `igluctl` is a Java program and requires a local Java runtime. The output shows the number of valid and invalid schemas.\nSOURCE: https://github.com/meltano/meltano/blob/main/src/meltano/core/tracking/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n $ $PATH_TO/igluctl lint ./src/meltano/core/tracking\nOK: com.meltano/cli_context/jsonschema/1-0-0\nOK: com.meltano/environment_context/jsonschema/1-0-0\nOK: com.meltano/plugins_context/jsonschema/1-0-0\nOK: com.meltano/project_context/jsonschema/1-0-0\nTOTAL: 4 valid schemas\nTOTAL: 0 schemas didn't pass validation\n```\n\n----------------------------------------\n\nTITLE: HTML Table Structure for Contributors\nDESCRIPTION: This snippet represents a row in an HTML table displaying contributor information. It includes the contributor's avatar, name, and links to their contributions like code, documentation, bug reports, and ideas. The table uses a fixed width for each cell.\nSOURCE: https://github.com/meltano/meltano/blob/main/CONTRIBUTORS.md#_snippet_16\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/abastola0\"><img src=\"https://avatars.githubusercontent.com/u/41137160?v=4?s=100\" width=\"100px;\" alt=\"Ashish Bastola\"/><br /><sub><b>Ashish Bastola</b></sub></a><br /><a href=\"https://github.com/meltano/meltano/commits?author=abastola0\" title=\"Code\">💻</a></td>\n```\n\n----------------------------------------\n\nTITLE: HTML Table Structure for Contributors\nDESCRIPTION: This snippet represents a row in an HTML table displaying contributor information. It includes the contributor's avatar, name, and links to their contributions like code, documentation, bug reports, and ideas. The table uses a fixed width for each cell.\nSOURCE: https://github.com/meltano/meltano/blob/main/CONTRIBUTORS.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/BuzzCutNorman\"><img src=\"https://avatars.githubusercontent.com/u/55715401?v=4?s=100\" width=\"100px;\" alt=\"Dan Norman\"/><br /><sub><b>Dan Norman</b></sub></a><br /><a href=\"https://github.com/meltano/meltano/commits?author=BuzzCutNorman\" title=\"Code\">💻</a> <a href=\"https://github.com/meltano/meltano/issues?q=author%3ABuzzCutNorman\" title=\"Bug reports\">🐛</a> <a href=\"#ideas-BuzzCutNorman\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n```\n\n----------------------------------------\n\nTITLE: HTML Table Structure for Contributors\nDESCRIPTION: This snippet represents a row in an HTML table displaying contributor information. It includes the contributor's avatar, name, and links to their contributions like code, documentation, bug reports, and ideas. The table uses a fixed width for each cell.\nSOURCE: https://github.com/meltano/meltano/blob/main/CONTRIBUTORS.md#_snippet_13\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://about.me/stevehulet\"><img src=\"https://avatars.githubusercontent.com/u/18347?v=4?s=100\" width=\"100px;\" alt=\"Steve Hulet\"/><br /><sub><b>Steve Hulet</b></sub></a><br /><a href=\"https://github.com/meltano/meltano/commits?author=hulet\" title=\"Documentation\">📖</a></td>\n```\n\n----------------------------------------\n\nTITLE: CLI Flag Casing Example\nDESCRIPTION: Demonstrates the recommended casing convention for global and argument-level flags in the Meltano CLI. Global flags should use uppercase short options (e.g., `-L`), while argument-level options use lowercase (e.g., `-l`).\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/contribute/cli.md#_snippet_2\n\nLANGUAGE: None\nCODE:\n```\nmeltano [-L/--log-level LEVEL] SOME_COMMAND [-l/--last-thing]\n```\n\n----------------------------------------\n\nTITLE: Get Meltano State\nDESCRIPTION: This command retrieves the state information for a specific Meltano job within a defined environment (dev). It allows checking the progress and status of the data extraction and loading process.\nSOURCE: https://github.com/meltano/meltano/blob/main/integration/example-library/meltano-annotations/index.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nmeltano state get dev:tap-gitlab-to-target-jsonl\n```\n\n----------------------------------------\n\nTITLE: Start Meltano UI Server\nDESCRIPTION: Starts the Meltano UI web server using the `meltano ui` command. The UI will be available at http://localhost:5000 unless configured otherwise via `ui.bind_port` setting.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/reference/ui.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeltano ui\n```\n\n----------------------------------------\n\nTITLE: Set UI Bind Host\nDESCRIPTION: Sets the `ui.bind_host` setting using the `meltano config` command, the `MELTANO_UI_BIND_HOST` environment variable, and the `meltano ui` command-line option. This configures the host to which the Meltano UI server will bind.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/reference/ui.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmeltano config meltano set ui bind_host 127.0.0.1\n\nexport MELTANO_UI_BIND_HOST=127.0.0.1\n\nmeltano ui --bind=127.0.0.1\n```\n\n----------------------------------------\n\nTITLE: Set UI Session Cookie Domain\nDESCRIPTION: Sets the `ui.session_cookie_domain` setting using the `meltano config` command and the `MELTANO_UI_SESSION_COOKIE_DOMAIN` environment variable. This configures the domain for which the session cookie will be valid.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/reference/ui.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmeltano config meltano set ui session_cookie_domain meltano.example.com\n\nexport MELTANO_UI_SESSION_COOKIE_DOMAIN=meltano.example.com\n```\n\n----------------------------------------\n\nTITLE: Set UI Session Cookie Secure\nDESCRIPTION: Sets the `ui.session_cookie_secure` setting using the `meltano config` command and the `MELTANO_UI_SESSION_COOKIE_SECURE` environment variable. This enables the `Secure` flag on the session cookie, so that the client only sends it over HTTPS.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/reference/ui.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmeltano config meltano set ui session_cookie_secure true\n\nexport MELTANO_UI_SESSION_COOKIE_SECURE=true\n```\n\n----------------------------------------\n\nTITLE: Set UI Secret Key with Meltano Config and Environment Variable\nDESCRIPTION: This snippet demonstrates how to set the `ui.secret_key` using both the `meltano config` command and an environment variable. A randomly generated secret key is used for security purposes. The secret key is essential for securing sessions and cookies.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/reference/ui.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmeltano config meltano set ui secret_key <randomly-generated-secret>\n\nexport MELTANO_UI_SECRET_KEY=<randomly-generated-secret>\n```\n\n----------------------------------------\n\nTITLE: Set UI Logo URL with Meltano Config and Environment Variable\nDESCRIPTION: This snippet demonstrates how to customize the logo used in the Meltano UI using both the `meltano config` command and an environment variable. The logo is displayed in the navigation bar and sign-in page.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/reference/ui.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nmeltano config meltano set ui logo_url https://meltano.com/meltano-logo-with-text.svg\n\nexport MELTANO_UI_LOGO_URL=https://meltano.com/meltano-logo-with-text.svg\n```\n\n----------------------------------------\n\nTITLE: Set up Meltano UI with a Server Name\nDESCRIPTION: This snippet shows how to set up the Meltano UI with a specified server name using the `meltano ui setup` command. This command generates necessary secrets and stores them in the project's `.env` file along with the server name.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/reference/ui.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nmeltano ui setup meltano.example.com\n```\n\n----------------------------------------\n\nTITLE: Set Mail Password with Meltano Config and Environment Variable\nDESCRIPTION: This snippet configures the password for authenticating with the mail server using both the `meltano config` command and an environment variable.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/reference/ui.md#_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nmeltano config meltano set mail password meltano\nexport MELTANO_MAIL_PASSWORD=meltano\n```\n\n----------------------------------------\n\nTITLE: Set UI Readonly with Meltano Config and Environment Variable\nDESCRIPTION: This snippet demonstrates how to enable read-only mode for the Meltano UI using both the `meltano config` command and an environment variable. This blocks all write actions in the UI.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/reference/ui.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nmeltano config meltano set ui readonly true\n\nexport MELTANO_UI_READONLY=true\n```\n\n----------------------------------------\n\nTITLE: Setting Facebook Client Secret - Bash\nDESCRIPTION: These commands demonstrate how to configure the `oauth_service.facebook.client_secret` setting using the `meltano config` command and environment variables. This setting specifies the client secret for the Facebook OAuth provider.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/reference/ui.md#_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\nmeltano config meltano set oauth_service facebook client_secret <facebook-client-secret>\nexport OAUTH_FACEBOOK_CLIENT_SECRET=<facebook-client-secret>\n```\n\n----------------------------------------\n\nTITLE: Set UI Notification with Meltano Config and Environment Variable\nDESCRIPTION: This snippet demonstrates how to enable email notifications for the Meltano UI using both the `meltano config` command and an environment variable. This requires configuring the outgoing mail server settings.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/reference/ui.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nmeltano config meltano set ui notification true\n\nexport MELTANO_UI_NOTIFICATION=true\n```\n\n----------------------------------------\n\nTITLE: Setting Google Adwords Client ID - Bash\nDESCRIPTION: These commands demonstrate how to configure the `oauth_service.google_adwords.client_id` setting using the `meltano config` command and environment variables.  This setting specifies the client ID for the Google Adwords OAuth provider.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/reference/ui.md#_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\nmeltano config meltano set oauth_service google_adwords client_id <google-adwords-client-id>\nexport OAUTH_GOOGLE_ADWORDS_CLIENT_ID=<google-adwords-client-id>\n```\n\n----------------------------------------\n\nTITLE: Set Mail Default Sender with Meltano Config and Environment Variable\nDESCRIPTION: This snippet configures the default sender address for emails sent by Meltano using both the `meltano config` command and an environment variable.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/reference/ui.md#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nmeltano config meltano set mail default_sender '\"Example Meltano\" <bot@meltano.example.com>'\nexport MELTANO_MAIL_DEFAULT_SENDER='\"Example Meltano\" <bot@meltano.example.com>'\n```\n\n----------------------------------------\n\nTITLE: Setting Google Adwords Client Secret - Bash\nDESCRIPTION: These commands demonstrate how to configure the `oauth_service.google_adwords.client_secret` setting using the `meltano config` command and environment variables. This setting specifies the client secret for the Google Adwords OAuth provider.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/reference/ui.md#_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\nmeltano config meltano set oauth_service google_adwords client_secret <google-adwords-client-secret>\nexport OAUTH_GOOGLE_ADWORDS_CLIENT_SECRET=<google-adwords-client-secret>\n```\n\n----------------------------------------\n\nTITLE: Running OAuth Service Standalone - Bash\nDESCRIPTION: This snippet demonstrates how to run the Meltano OAuth service as a standalone Flask application using the command line. It sets the environment variables for the Flask environment and the application itself, then executes the Flask run command to start the service on port 9999.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/reference/ui.md#_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\nFLASK_ENV=production FLASK_APP=meltano.oauth python -m flask run --port 9999\n```\n\n----------------------------------------\n\nTITLE: HTML Table Structure for Contributors\nDESCRIPTION: This snippet represents a row in an HTML table displaying contributor information. It includes the contributor's avatar, name, and links to their contributions like code, documentation, bug reports, and ideas. The table uses a fixed width for each cell.\nSOURCE: https://github.com/meltano/meltano/blob/main/CONTRIBUTORS.md#_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.bencodezen.io/\"><img src=\"https://avatars.githubusercontent.com/u/4836334?v=4?s=100\" width=\"100px;\" alt=\"Ben Hong\"/><br /><sub><b>Ben Hong</b></sub></a><br /><a href=\"https://github.com/meltano/meltano/commits?author=bencodezen\" title=\"Code\">💻</a></td>\n```\n\n----------------------------------------\n\nTITLE: UI Development Environment Setup - Bash\nDESCRIPTION: These commands outline the steps to set up a local development environment for the Meltano UI. This involves activating a virtual environment, creating a new Meltano project, installing frontend infrastructure, and starting both the Meltano API and the development UI.\nSOURCE: https://github.com/meltano/meltano/blob/main/docs/docs/reference/ui.md#_snippet_36\n\nLANGUAGE: bash\nCODE:\n```\n# Activate your poetry created virtual environment if needed.\n# If you manage your virtualenv activation through other means you can omit this command.\npoetry shell\n# Create a new Meltano project\nmeltano init $PROJECT_DIRECTORY\n# Change directory into your newly created project\ncd $PROJECT_DIRECTORY\n# Start the Meltano API and a production build of Meltano UI that you can ignore\nmeltano ui\n# Open a new terminal tab and go to the directory you cloned meltano into\ncd $WHEREVER_YOU_CLONED_MELTANO/src/webapp\n# Install frontend infrastructure at the root directory\nyarn\n# Start local development environment\nyarn serve\n```\n\n----------------------------------------\n\nTITLE: HTML Table Structure for Contributors\nDESCRIPTION: This snippet represents a row in an HTML table displaying contributor information. It includes the contributor's avatar, name, and links to their contributions like code, documentation, bug reports, and ideas. The table uses a fixed width for each cell.\nSOURCE: https://github.com/meltano/meltano/blob/main/CONTRIBUTORS.md#_snippet_11\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/z3z1ma\"><img src=\"https://avatars.githubusercontent.com/u/41213451?v=4?s=100\" width=\"100px;\" alt=\"Alexander Butler\"/><br /><sub><b>Alexander Butler</b></sub></a><br /><a href=\"https://github.com/meltano/meltano/commits?author=z3z1ma\" title=\"Code\">💻</a> <a href=\"https://github.com/meltano/meltano/issues?q=author%3Az3z1ma\" title=\"Bug reports\">🐛</a></td>\n```\n\n----------------------------------------\n\nTITLE: HTML Table Structure for Contributors\nDESCRIPTION: This snippet represents a row in an HTML table displaying contributor information. It includes the contributor's avatar, name, and links to their contributions like code, documentation, bug reports, and ideas. The table uses a fixed width for each cell.\nSOURCE: https://github.com/meltano/meltano/blob/main/CONTRIBUTORS.md#_snippet_21\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://diegoquintanav.github.io/\"><img src=\"https://avatars.githubusercontent.com/u/16281387?v=4?s=100\" width=\"100px;\" alt=\"Diego Quintana\"/><br /><sub><b>Diego Quintana</b></sub></a><br /><a href=\"https://github.com/meltano/meltano/commits?author=diegoquintanav\" title=\"Documentation\">📖</a></td>\n```"
  }
]