[
  {
    "owner": "fastapi",
    "repo": "typer.git",
    "content": "TITLE: Defining Typer SubCommands Structure\nDESCRIPTION: Shows how to create and organize Typer apps with subcommands for users and items management. The code creates a hierarchical CLI structure with nested commands for operations like create, delete, and sell.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/subcommands/single-file.md#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\napp = typer.Typer()\nusers_app = typer.Typer()\nitems_app = typer.Typer()\napp.add_typer(users_app, name=\"users\")\napp.add_typer(items_app, name=\"items\")\n\n@users_app.command(name=\"create\")\ndef users_create(username: str):\n    typer.echo(f\"Creating user: {username}\")\n\n@users_app.command(name=\"delete\")\ndef users_delete(username: str):\n    typer.echo(f\"Deleting user: {username}\")\n\n@items_app.command(name=\"create\")\ndef items_create(item: str):\n    typer.echo(f\"Creating item: {item}\")\n\n@items_app.command(name=\"delete\")\ndef items_delete(item: str):\n    typer.echo(f\"Deleting item: {item}\")\n\n@items_app.command(name=\"sell\")\ndef items_sell(item: str):\n    typer.echo(f\"Selling item: {item}\")\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Advanced Typer Implementation with Subcommands\nDESCRIPTION: Extended Typer example showing multiple subcommands, optional parameters, and command decorators.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/README.md#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\napp = typer.Typer()\n\n\n@app.command()\ndef hello(name: str):\n    print(f\"Hello {name}\")\n\n\n@app.command()\ndef goodbye(name: str, formal: bool = False):\n    if formal:\n        print(f\"Goodbye Ms. {name}. Have a good day.\")\n    else:\n        print(f\"Bye {name}!\")\n\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Configuring Help Panels for CLI Parameters in Typer\nDESCRIPTION: This code demonstrates how to organize both CLI arguments and options into custom panels using the 'rich_help_panel' parameter. Arguments are grouped into 'Arguments' and 'Secondary Arguments', while options are grouped into 'Options' and 'Additional Data'.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/commands/help.md#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport typer\nfrom typing import Optional\n\napp = typer.Typer()\n\n\n@app.command()\ndef create(\n    username: str = typer.Argument(\n        ...,\n        help=\"The username to create\",\n    ),\n    lastname: Optional[str] = typer.Argument(\n        None,\n        help=\"The last name of the new user\",\n        rich_help_panel=\"Secondary Arguments\",\n        show_default=False,\n    ),\n    force: bool = typer.Option(\n        False,\n        help=\"Force the creation of the user\",\n    ),\n    age: Optional[int] = typer.Option(\n        None,\n        help=\"The age of the new user\",\n        rich_help_panel=\"Additional Data\",\n    ),\n    favorite_color: Optional[str] = typer.Option(\n        None,\n        help=\"The favorite color of the new user\",\n        rich_help_panel=\"Additional Data\",\n    ),\n):\n    \"\"\"Create a new user. ✨\"\"\"\n    typer.echo(f\"Creating user: {username}\")\n\n\n@app.command(rich_help_panel=\"Utils and Configs\")\ndef config(config_file: str):\n    \"\"\"Configure the system. 🔧\"\"\"\n    typer.echo(f\"Configuring with: {config_file}\")\n\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Adding a Required CLI Argument to Typer Application\nDESCRIPTION: An example showing how to add a required CLI argument to a Typer application. The 'name' parameter becomes a command-line argument that must be provided when running the application.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/first-steps.md#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\ndef main(name: str):\n    print(f\"Hello {name}\")\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Typer Apps as Subcommands in a Main CLI Application\nDESCRIPTION: This snippet demonstrates how to import separate Typer applications and combine them as subcommands in a main application. The app.add_typer() method is used to add each app with a specific command name that will group its subcommands.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/subcommands/add-typer.md#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport typer\nimport users\nimport items\n\napp = typer.Typer()\napp.add_typer(users.app, name=\"users\")\napp.add_typer(items.app, name=\"items\")\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Advanced Typer Application with Subcommands\nDESCRIPTION: Extended example demonstrating a Typer application with multiple subcommands, command decorators, and optional parameters. Shows how to create separate hello and goodbye commands with different options.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/index.md#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\napp = typer.Typer()\n\n\n@app.command()\ndef hello(name: str):\n    print(f\"Hello {name}\")\n\n\n@app.command()\ndef goodbye(name: str, formal: bool = False):\n    if formal:\n        print(f\"Goodbye Ms. {name}. Have a good day.\")\n    else:\n        print(f\"Bye {name}!\")\n\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Creating a Typer CLI with Multiple Commands\nDESCRIPTION: Example of a CLI application with two commands (create and delete) for user management. Each command is defined as a separate function with the app.command() decorator.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/commands/index.md#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\napp = typer.Typer()\n\n@app.command()\ndef create():\n    print(\"Creating user: Hiro Hamada\")\n\n@app.command()\ndef delete():\n    print(\"Deleting user: Hiro Hamada\")\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Testing Typer Application with CliRunner\nDESCRIPTION: Example showing how to test a Typer application using pytest and CliRunner, including assertions for exit code and output text.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/testing.md#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom typer.testing import CliRunner\nfrom .main import app\n\nrunner = CliRunner()\n\ndef test_app():\n    result = runner.invoke(app, [\"Camila\", \"--city\", \"Berlin\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila\" in result.stdout\n    assert \"Let's have a coffee in Berlin\" in result.stdout\n```\n\n----------------------------------------\n\nTITLE: Combining Docstring and Argument Help\nDESCRIPTION: Shows how to combine function docstrings with argument-specific help text for comprehensive documentation\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/arguments/help.md#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\ndef main(name: str = typer.Argument(..., help=\"The name of the user to greet\")):\n    \"\"\"Say hi to NAME very gently, like Dirk.\"\"\"\n    typer.echo(f\"Hello {name}\")\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: List of Enum Values as CLI Parameters\nDESCRIPTION: Demonstrates how to accept multiple enum values as a list in a CLI parameter. The parameter 'groceries' can accept multiple values from predefined enum choices.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/parameter-types/enum.md#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef main(groceries: List[Groceries] = [Groceries.eggs, Groceries.cheese]):\n```\n\n----------------------------------------\n\nTITLE: Documenting CLI Application with Docstrings\nDESCRIPTION: Illustrates how to add documentation to a Typer CLI application using Python docstrings. The documentation appears in the help text when users run the command with --help.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/first-steps.md#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef main(name: str, lastname: str = \"\", formal: bool = False):\n    \"\"\"Say hi to NAME, optionally with a --lastname.\n\n    If --formal is used, say hi very formally.\n    \"\"\"\n    pass\n```\n\n----------------------------------------\n\nTITLE: Building a Complete CLI Application with Deeply Nested Commands in Typer\nDESCRIPTION: A main CLI application that integrates multiple command groups (users, items, lands) with deeply nested subcommands. This demonstrates how to organize complex command hierarchies in a Typer application.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/subcommands/nested-subcommands.md#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\nimport items\nimport lands\nimport users\n\napp = typer.Typer()\napp.add_typer(users.app, name=\"users\")\napp.add_typer(items.app, name=\"items\")\napp.add_typer(lands.app, name=\"lands\")\n\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Basic Python Script for Typer CLI\nDESCRIPTION: Minimal example showing a basic function that can be run using the Typer CLI tool. Takes a name parameter and prints a greeting.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/index.md#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef main(name: str):\n    print(f\"Hello {name}\")\n```\n\n----------------------------------------\n\nTITLE: Defining CLI Option with Multiple Values using Typer and typing.Tuple in Python\nDESCRIPTION: This snippet shows how to declare a CLI option that takes multiple values of different types using Typer and typing.Tuple. It defines a 'user' option that accepts a string, an integer, and a boolean value.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/multiple-values/options-with-multiple-values.md#2025-04-14_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import Tuple\nfrom typer import Option, Typer\n\napp = Typer()\n\n@app.command()\ndef cli(user: Tuple[str, int, bool] = Option((None, None, None))):\n    # Function implementation here\n```\n\n----------------------------------------\n\nTITLE: Path Parameter with Validations in Typer CLI Application\nDESCRIPTION: Shows how to use Path parameter validations in Typer, such as requiring a file to exist, specifying if it should be a file (not a directory), and ensuring it's readable. These validations are performed before the function is called.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/parameter-types/path.md#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pathlib import Path\n\nimport typer\n\n\napp = typer.Typer()\n\n\n@app.command()\ndef main(\n    config: Path = typer.Option(\n        ...,\n        exists=True,\n        file_okay=True,\n        dir_okay=False,\n        readable=True,\n        resolve_path=True,\n    ),\n):\n    text = config.read_text()\n    typer.echo(f\"Config file contents: {text}\")\n\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Typer Application in Python\nDESCRIPTION: The most basic Typer application that prints 'Hello World' to the console. This demonstrates the minimal setup required for a Typer application with no arguments or options.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/first-steps.md#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\ndef main():\n    print(\"Hello World\")\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Implementing Commands with Different CLI Options using Typer in Python\nDESCRIPTION: This code demonstrates how to create a command-line interface with Typer that has multiple commands with different parameters. It shows how to implement required arguments, optional flags, and user confirmation prompts. The example includes commands for creating users, deleting users (with confirmation), deleting all users (with optional force flag), and initializing a database.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/commands/options.md#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport typer\nfrom typing import Optional\n\napp = typer.Typer()\n\n\n@app.command()\ndef create(username: str):\n    typer.echo(f\"Creating user: {username}\")\n\n\n@app.command()\ndef delete(\n    username: str,\n    force: bool = typer.Option(\n        ...,\n        prompt=\"Are you sure you want to delete the user?\",\n        help=\"Force deletion without confirmation.\",\n    ),\n):\n    if force:\n        typer.echo(f\"Deleting user: {username}\")\n    else:\n        typer.echo(\"Operation cancelled\")\n\n\n@app.command()\ndef delete_all(\n    force: bool = typer.Option(\n        ...,\n        prompt=\"Are you sure you want to delete ALL users?\",\n        help=\"Force deletion without confirmation.\",\n    ),\n):\n    if force:\n        typer.echo(\"Deleting all users\")\n    else:\n        typer.echo(\"Operation cancelled\")\n\n\n@app.command()\ndef init():\n    typer.echo(\"Initializing user database\")\n\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Typer CLI Application in Python\nDESCRIPTION: This code implements a basic portal gun CLI application with Typer. It defines two commands ('shoot' and 'load') along with their documentation and functionality. The app structure follows the Typer pattern with a main app instance and decorated command functions.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/package.md#2025-04-14_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport typer\n\n\napp = typer.Typer()\n\n\n@app.callback()\ndef callback():\n    \"\"\"\n    Awesome Portal Gun\n    \"\"\"\n\n\n@app.command()\ndef shoot():\n    \"\"\"\n    Shoot the portal gun\n    \"\"\"\n    typer.echo(\"Shooting portal gun\")\n\n\n@app.command()\ndef load():\n    \"\"\"\n    Load the portal gun\n    \"\"\"\n    typer.echo(\"Loading portal gun\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Reign Management CLI with Typer in Python\nDESCRIPTION: A simple CLI application for managing reigns with conquer and destroy commands. This standalone script demonstrates basic Typer command structure that can later be integrated into a larger application.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/subcommands/nested-subcommands.md#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\napp = typer.Typer()\n\n\n@app.command()\ndef conquer(reign_name: str):\n    \"\"\"Conquer a reign.\"\"\"\n    print(f\"Conquering reign: {reign_name}\")\n\n\n@app.command()\ndef destroy(reign_name: str):\n    \"\"\"Destroy a reign.\"\"\"\n    print(f\"Destroying reign: {reign_name}\")\n\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Multiple Commands CLI Application in Python with Typer\nDESCRIPTION: Implementation of a CLI application with multiple commands (create and delete) using Typer. Each function becomes a separate subcommand in the CLI interface.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/commands/one-or-multiple.md#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@app.command()\ndef create():\n    print(\"Creating user: Hiro Hamada\")\n\n@app.command()\ndef delete():\n    print(\"Deleting user: Hiro Hamada\")\n```\n\n----------------------------------------\n\nTITLE: Declaring Boolean Flag CLI Option in Python with Typer\nDESCRIPTION: Shows how to declare a boolean flag CLI option using Python type hints with Typer. This allows for easy creation of on/off flags in the command-line interface.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/README.md#2025-04-14_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nforce: bool\n```\n\n----------------------------------------\n\nTITLE: Creating a CLI Program to Manage Items with Typer in Python\nDESCRIPTION: This snippet demonstrates a simple Typer application for managing items with create, delete, and sell commands. Each command takes an item name as a parameter and performs an action on it.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/subcommands/add-typer.md#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\napp = typer.Typer()\n\n\n@app.command()\ndef create(item: str):\n    typer.echo(f\"Creating item: {item}\")\n\n\n@app.command()\ndef delete(item: str):\n    typer.echo(f\"Deleting item: {item}\")\n\n\n@app.command()\ndef sell(item: str):\n    typer.echo(f\"Selling item: {item}\")\n\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Creating a CLI Program to Manage Users with Typer in Python\nDESCRIPTION: This snippet shows a Typer application for managing users with create and delete commands. Each command takes a username as a parameter and performs an action on it.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/subcommands/add-typer.md#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\napp = typer.Typer()\n\n\n@app.command()\ndef create(user: str):\n    typer.echo(f\"Creating user: {user}\")\n\n\n@app.command()\ndef delete(user: str):\n    typer.echo(f\"Deleting user: {user}\")\n\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Defining CLI Parameters with Different Data Types in Typer\nDESCRIPTION: This code snippet demonstrates how to define CLI parameters with different data types in Typer. It includes a string argument, integer and float options with default values, and a boolean flag option that creates --female/--no-female flags.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/parameter-types/index.md#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef main(name: str, age: int = 20, height_meters: float = 1.89, female: bool = True):\n    print(f\"NAME is {name}, of type: {type(name)}\")\n    print(f\"--age is {age}, of type: {type(age)}\")\n    print(f\"--height-meters is {height_meters}, of type: {type(height_meters)}\")\n    print(f\"--female is {female}, of type: {type(female)}\")\n\n```\n\n----------------------------------------\n\nTITLE: Creating Rich Tables for Structured Output\nDESCRIPTION: Demonstrates how to create and display a table using Rich's Console and Table objects in a Typer application.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/printing.md#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom rich.console import Console\nfrom rich.table import Table\n\nconsole = Console()\n\n\ndef main():\n    table = Table(title=\"Items\")\n    table.add_column(\"Name\", style=\"cyan\")\n    table.add_column(\"Item\", style=\"magenta\")\n    table.add_row(\"Rick\", \"Portal Gun\")\n    table.add_row(\"Morty\", \"Plumbus\")\n    console.print(table)\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Fixing Shell Completion with Context Object in Typer Callbacks\nDESCRIPTION: Demonstrates how to use the typer.Context object to detect when the callback is being executed during shell completion, allowing you to conditionally skip operations that would interfere with completion.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/options/callback-and-context.md#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef name_callback(ctx: typer.Context, value: str):\n    if ctx.resilient_parsing:\n        return value\n    print(\"Validating name\")\n    if value != \"Camila\":\n        raise typer.BadParameter(\"Only Camila is allowed\")\n    return value\n\n\ndef main(name: str = typer.Option(..., callback=name_callback)):\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Typer CLI Help with Markdown Support\nDESCRIPTION: Implements a CLI app using typer.Typer() with rich_markup_mode='markdown' to enable Markdown formatting in command help text. Shows how to use markdown syntax for bold text, lists, and emojis in help documentation.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/commands/help.md#2025-04-14_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ python main.py create --help\n\n Usage: main.py create [OPTIONS] USERNAME\n\n Create a new shiny user. ✨\n\n • Create a username\n • Show that the username is created\n\n ───────────────────────────────────────────────────────────────────\n Learn more at the Typer docs website\n\n╭─ Arguments ───────────────────────────────────────────────────────╮\n│ *    username      TEXT  The username to be created               │\n│                          [default: None]                          │\n│                          [required]                               │\n╰───────────────────────────────────────────────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Documented CLI Application with Callback in Python using Typer\nDESCRIPTION: Enhanced version of the single command CLI application that uses the callback's docstring to provide documentation in the help text.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/commands/one-or-multiple.md#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@app.callback()\ndef callback():\n    \"\"\"Creates a single user Hiro Hamada.\n\n    In the next version it will create 5 more users.\n    \"\"\"\n    pass\n```\n\n----------------------------------------\n\nTITLE: Adding Typer Callback on App Creation in Python\nDESCRIPTION: This code shows how to add a callback when creating a Typer app. The callback function is executed before any command runs.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/commands/callback.md#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef callback():\n    print(\"Running a command\")\n\napp = typer.Typer(callback=callback)\n```\n\n----------------------------------------\n\nTITLE: Simple Typer Application Implementation\nDESCRIPTION: Basic Typer application that uses typer.run() to convert a simple function into a CLI application. Shows the minimal setup needed to create a Typer-based CLI.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/index.md#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\n\ndef main(name: str):\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Working with Multiple CLI Arguments in Typer\nDESCRIPTION: An example demonstrating how to use multiple required CLI arguments in a Typer application. The function accepts both 'name' and 'lastname' parameters, which must be provided in the correct order when running the application.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/first-steps.md#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\ndef main(name: str, lastname: str):\n    print(f\"Hello {name} {lastname}\")\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic CLI Function in Python\nDESCRIPTION: This snippet shows a basic CLI function definition in Python using Typer. The function name 'create' will be used as the default command name.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/commands/name.md#2025-04-14_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ndef create(username: str):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Implementing an Item Management Module with Typer for a CLI Application\nDESCRIPTION: A CLI module for item management with create, delete, and sell commands. This demonstrates how to create multiple commands within a single Typer app that can be integrated into a larger CLI structure.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/subcommands/nested-subcommands.md#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\napp = typer.Typer()\n\n\n@app.command()\ndef create(item_name: str):\n    \"\"\"Create an item.\"\"\"\n    print(f\"Creating item: {item_name}\")\n\n\n@app.command()\ndef delete(item_name: str):\n    \"\"\"Delete an item.\"\"\"\n    print(f\"Deleting item: {item_name}\")\n\n\n@app.command()\ndef sell(item_name: str, price: float):\n    \"\"\"Sell an item.\"\"\"\n    print(f\"Selling item: {item_name} for {price}\")\n\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Implementing User Add Command\nDESCRIPTION: Defines the user add command functionality in a separate module, creating a standalone Typer app instance for adding users.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/one-file-per-command.md#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\napp = typer.Typer()\n\n@app.command()\ndef add(name: str):\n    \"\"\"Add a new user.\"\"\"\n    print(f\"Adding user: {name}\")\n```\n\n----------------------------------------\n\nTITLE: Basic User Input Prompt in Typer\nDESCRIPTION: Demonstrates how to use typer.prompt() to ask for user input interactively in a Typer application.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/prompt.md#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\ndef main():\n    name = typer.prompt(\"What's your name?\")\n    print(f\"Hello {name}\")\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Command Names in Typer\nDESCRIPTION: This example demonstrates how to set custom command names using the @app.command() decorator in Typer. It overrides the default naming derived from function names.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/commands/name.md#2025-04-14_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport typer\n\napp = typer.Typer()\n\n@app.command(\"create\")\ndef cli_create_user(username: str):\n    print(f\"Creating user: {username}\")\n\n@app.command(\"delete\")\ndef cli_delete_user(username: str):\n    print(f\"Deleting user: {username}\")\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Creating Executable Callbacks in Typer\nDESCRIPTION: This snippet shows how to create a callback that executes even when no subcommand is provided using invoke_without_command=True. The callback initializes a database regardless of whether a command is specified.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/commands/context.md#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\napp = typer.Typer()\n\n\n@app.command()\ndef create(username: str):\n    \"\"\"Create a new user.\"\"\"\n    typer.echo(f\"Creating user: {username}\")\n\n\n@app.command()\ndef delete(username: str):\n    \"\"\"Delete a user.\"\"\"\n    typer.echo(f\"Deleting user: {username}\")\n\n\n@app.callback(invoke_without_command=True)\ndef callback():\n    \"\"\"Common stuff for the CLI app.\"\"\"\n    typer.echo(\"Initializing database\")\n\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Typer CLI Help with Rich Console Markup\nDESCRIPTION: Creates a CLI app using typer.Typer() with rich_markup_mode='rich' to enable Rich Console Markup formatting in command help text and arguments. Demonstrates usage of colors, bold text, and emojis in help documentation.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/commands/help.md#2025-04-14_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ python main.py create --help\n\n Usage: main.py create [OPTIONS] USERNAME\n\n Create a new shiny user. ✨\n This requires a username.\n\n╭─ Arguments ───────────────────────────────────────────────────────╮\n│ *    username      TEXT  The username to be created               │\n│                          [default: None]                          │\n│                          [required]                               │\n╰───────────────────────────────────────────────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Basic Path Parameter in Typer CLI Application\nDESCRIPTION: Demonstrates how to declare a CLI parameter as a pathlib.Path object, allowing for proper handling of file paths in a Typer application. The example shows how to check if a configuration file exists and read its contents.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/parameter-types/path.md#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pathlib import Path\n\nimport typer\n\n\napp = typer.Typer()\n\n\n@app.command()\ndef main(config: Path = None):\n    if config is None:\n        typer.echo(\"No config file\")\n        raise typer.Abort()\n    if not config.exists():\n        typer.echo(\"The config doesn't exist\")\n        return\n    if config.is_dir():\n        typer.echo(\"Config is a directory, will use all its config files\")\n        return\n    if config.is_file():\n        text = config.read_text()\n        typer.echo(f\"Config file contents: {text}\")\n        return\n\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Implementing Main CLI Module\nDESCRIPTION: Main entry point that imports and combines version and users modules using add_typer(). Creates the primary CLI application structure.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/one-file-per-command.md#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport typer\nfrom mycli.version import version_app\nfrom mycli.users import users_app\n\napp = typer.Typer()\n\n# Add version and users apps\napp.add_typer(version_app)\napp.add_typer(users_app, name=\"users\")\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Creating a User Management Typer App for a CLI Application\nDESCRIPTION: A simple CLI module for user management with create and delete commands. This is designed to be integrated into a larger CLI application structure as a command group.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/subcommands/nested-subcommands.md#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\napp = typer.Typer()\n\n\n@app.command()\ndef create(user_name: str):\n    \"\"\"Create a user.\"\"\"\n    print(f\"Creating user: {user_name}\")\n\n\n@app.command()\ndef delete(user_name: str):\n    \"\"\"Delete a user.\"\"\"\n    print(f\"Deleting user: {user_name}\")\n\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple Float CLI Options in Typer (Python)\nDESCRIPTION: This snippet shows how to handle multiple float CLI options in Typer. It demonstrates type conversion from string input to float, and performs a sum operation on the provided numbers.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/multiple-values/multiple-options.md#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List\n\nimport typer\n\n\ndef main(number: List[float] = None):\n    if number:\n        typer.echo(f\"The sum is {sum(number)}\")\n    else:\n        typer.echo(\"The sum is 0\")\n\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Command Groups into a Land Management CLI with Typer\nDESCRIPTION: A CLI application that combines reign and town management into a single lands management tool. This demonstrates how to import and add Typer apps as sub-applications with their own command groups.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/subcommands/nested-subcommands.md#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\nimport reigns\nimport towns\n\napp = typer.Typer()\napp.add_typer(reigns.app, name=\"reigns\")\napp.add_typer(towns.app, name=\"towns\")\n\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Basic Typer Application with typer.run()\nDESCRIPTION: A simple Typer CLI application using the typer.run() shortcut function to create a CLI with a single command that takes a name argument.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/commands/index.md#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef main(name: str):\n    print(f\"Hello {name}\")\n\nif __name__ == \"__main__\":\n    import typer\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Combining Typer and Click in Python CLI Application\nDESCRIPTION: Demonstrates how to include a Click app as a subcommand in a Typer app. It uses typer.main.get_command() to generate a Click object from a Typer app.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/using-click.md#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport typer\nimport click\nfrom typer.main import get_command\n\napp = typer.Typer()\n\n@app.callback()\ndef callback():\n    \"\"\"A Typer app with a Click subcommand\"\"\"\n\n@app.command()\ndef top():\n    print(\"The Typer app is at the top level\")\n\ntyper_click_object = get_command(app)\n\n@click.command()\n@click.option(\"--name\", prompt=\"Your name\", help=\"The person to greet.\")\ndef hello(name):\n    click.echo(f\"Hello {name}!\")\n\ntyper_click_object.add_command(hello)\n\nif __name__ == \"__main__\":\n    typer_click_object()\n```\n\n----------------------------------------\n\nTITLE: CLI Option Help with Custom Panels\nDESCRIPTION: Example showing how to organize CLI options into custom help panels using rich_help_panel parameter\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/options/help.md#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef main(\n    name: Annotated[str, typer.Argument()],\n    lastname: Annotated[str, typer.Option(help=\"Last name of person to greet.\")] = \"\",\n    formal: Annotated[bool, typer.Option(\n        help=\"Say hi formally.\",\n        rich_help_panel=\"Customization and Utils\"\n    )] = False,\n    debug: Annotated[bool, typer.Option(\n        help=\"Enable debugging.\",\n        rich_help_panel=\"Customization and Utils\"\n    )] = False,\n) -> None:\n    \"\"\"Say hi to NAME, optionally with a --lastname.\n\n    If --formal is used, say hi very formally.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Basic Enum CLI Parameter Implementation in Python\nDESCRIPTION: Demonstrates how to create a basic CLI parameter using Python's enum.Enum class. The parameter 'network' can only accept predefined values of 'simple', 'conv', or 'lstm'.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/parameter-types/enum.md#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom enum import Enum\n\nclass NeuralNetwork(str, Enum):\n    simple = \"simple\"\n    conv = \"conv\"\n    lstm = \"lstm\"\n\ndef main(network: NeuralNetwork = NeuralNetwork.simple):\n    print(f\"Training neural network of type: {network.value}\")\n```\n\n----------------------------------------\n\nTITLE: Customizing CLI Option Name in Python with Typer\nDESCRIPTION: Demonstrates how to customize the CLI option name from the default --user-name to --name using typer.Option().\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/options/name.md#2025-04-14_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ndef main(user_name: Annotated[str, typer.Option(\"--name\")] = None):\n    if user_name:\n        typer.echo(f\"Hello {user_name}\")\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Number Clamping in Typer CLI\nDESCRIPTION: Demonstrates using the clamp parameter to automatically adjust out-of-range values to the nearest valid value instead of raising an error.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/parameter-types/number.md#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef main(\n    id: int = typer.Argument(..., min=0, max=1000),\n    rank: int = typer.Option(5, min=0, max=10, clamp=True),\n    score: float = typer.Option(0, min=0, max=100, clamp=True)\n):\n```\n\n----------------------------------------\n\nTITLE: Validating CLI Parameters with Callbacks in Python using Typer\nDESCRIPTION: Implements a function that validates the --name parameter, only allowing 'Camila' as a valid value. Uses a callback function with typer.Option() to perform the validation before the main function executes.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/options/callback-and-context.md#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef name_callback(value: str):\n    if value != \"Camila\":\n        raise typer.BadParameter(\"Only Camila is allowed\")\n    return value\n\n\ndef main(name: str = typer.Option(..., callback=name_callback)):\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Using Click Custom Types in Typer\nDESCRIPTION: Shows how to integrate existing Click custom types into Typer applications using the click_type parameter in typer.Argument and typer.Option.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/parameter-types/custom-types.md#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nhl[14:18,22:25]\n```\n\n----------------------------------------\n\nTITLE: Basic CLI Option Prompt in Typer\nDESCRIPTION: Shows how to set up a CLI option with prompt=True to ask for missing values instead of showing an error. This allows users to provide required options interactively when they're not specified in the command line.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/options/prompt.md#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndocs_src/options/prompt/tutorial001_an.py hl[5]\n```\n\n----------------------------------------\n\nTITLE: Customizing DateTime Formats in Typer CLI (Python)\nDESCRIPTION: This snippet demonstrates how to customize the accepted datetime formats for a CLI parameter in a Typer application. It uses the 'formats' parameter to specify additional date formats, including a custom month/day/year format.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/parameter-types/datetime.md#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime\n\nimport typer\n\n\ndef main(\n    launch: datetime = typer.Argument(\n        ...,\n        formats=[\n            \"%Y-%m-%d\",\n            \"%Y-%m-%dT%H:%M:%S\",\n            \"%Y-%m-%d %H:%M:%S\",\n            \"%m/%d/%Y\",\n        ],\n    )\n):\n    typer.echo(f\"Launch will be at: {launch}\")\n```\n\n----------------------------------------\n\nTITLE: Using Typer Callback for Documentation in Python\nDESCRIPTION: This code shows how to use a Typer callback solely for adding documentation. The callback's docstring is used as the help text for the CLI application.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/commands/callback.md#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@app.callback()\ndef callback():\n    \"\"\"Manage users CLI app.\n\n    Use it with the create command.\n\n    A new user with the given NAME will be created.\n    \"\"\"\n    pass\n```\n\n----------------------------------------\n\nTITLE: Using Typer's secho() for Styled Output\nDESCRIPTION: Shows how to use Typer's secho() function to style and print text in a single step for a CLI application.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/printing.md#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\n\ndef main(name: str):\n    typer.secho(f\"Welcome here {name}\", fg=typer.colors.MAGENTA)\n\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Defining CLI Commands with Arguments in Python\nDESCRIPTION: This code snippet defines two CLI commands, 'create' and 'delete', each accepting a 'username' argument. It demonstrates how to structure a CLI application with subcommands using Python.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/commands/arguments.md#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\napp = typer.Typer()\n\n@app.command()\ndef create(username: str):\n    print(f\"Creating user: {username}\")\n\n@app.command()\ndef delete(username: str):\n    print(f\"Deleting user: {username}\")\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Type Parser in Typer\nDESCRIPTION: Demonstrates how to use a parser callable with typer.Argument and typer.Option to handle custom parameter types. The parser function receives input as a string and returns the parsed custom type value.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/parameter-types/custom-types.md#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nhl[13:14,18:19]\n```\n\n----------------------------------------\n\nTITLE: Terminating a Python CLI Program with typer.Exit()\nDESCRIPTION: This example demonstrates how to terminate a CLI program using `typer.Exit()`. It shows a user creation scenario where the program exits early if a user already exists, preventing any subsequent code from running.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/terminating.md#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\n\ndef maybe_create_user(username: str):\n    # Simulate checking if user exists\n    if username == \"rick\":\n        print(f\"The user already exists\")\n        # This will terminate the program\n        raise typer.Exit()\n    return username\n\n\ndef send_new_user_notification(username: str):\n    print(f\"Notification sent for new user: {username}\")\n\n\ndef main(username: str):\n    new_user = maybe_create_user(username)\n    print(f\"User created: {new_user}\")\n    send_new_user_notification(username)\n\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Multiple CLI Arguments using List Type in Python\nDESCRIPTION: Example showing how to define CLI arguments that can accept multiple values using typing.List. The script processes multiple file paths and prints if they exist along with a celebration message.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/multiple-values/arguments-with-multiple-values.md#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef main(files: List[Path], celebration: str):\n    for file in files:\n        if file.exists():\n            print(f\"This file exists: {file.name}\")\n            print(celebration)\n```\n\n----------------------------------------\n\nTITLE: Using Typer's Run Function for Simple CLI Apps\nDESCRIPTION: Demonstrates how to use typer.run() to create a simple command line application from a function, inspired by Plac's simplicity.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/alternatives.md#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ntyper.run(some_function)\n```\n\n----------------------------------------\n\nTITLE: Accessing Command Name in Typer Callback using Context\nDESCRIPTION: This snippet demonstrates how to access the subcommand name in a Typer callback function using the typer.Context parameter. The callback prints which command is about to be executed.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/commands/context.md#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\napp = typer.Typer()\n\n\n@app.command()\ndef create(username: str):\n    \"\"\"Create a new user.\"\"\"\n    typer.echo(f\"Creating user: {username}\")\n\n\n@app.command()\ndef delete(username: str):\n    \"\"\"Delete a user.\"\"\"\n    typer.echo(f\"Deleting user: {username}\")\n\n\n@app.callback()\ndef callback(ctx: typer.Context):\n    \"\"\"Common stuff for the CLI app.\"\"\"\n    typer.echo(f\"About to execute command: {ctx.invoked_subcommand}\")\n\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Defining a UUID Parameter in Typer CLI Application\nDESCRIPTION: This code demonstrates how to create a Typer CLI function that accepts a UUID parameter. The function imports uuid and typer modules, defines a main function that takes a user_id parameter annotated as uuid.UUID type, and displays the UUID along with its version.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/parameter-types/uuid.md#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport uuid\nimport typer\n\n\ndef main(user_id: uuid.UUID):\n    print(f\"USER_ID is {user_id}\")\n    print(f\"UUID version is: {user_id.version}\")\n\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Testing Simple Typer Function\nDESCRIPTION: Test case showing how to test a Typer function by creating an app instance during testing.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/testing.md#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom typer.testing import CliRunner\nimport typer\nfrom .main import main\n\nrunner = CliRunner()\napp = typer.Typer()\napp.command()(main)\n\ndef test_app():\n    result = runner.invoke(app, [\"Camila\"])\n    assert result.exit_code == 0\n    assert \"Hello Camila\" in result.stdout\n```\n\n----------------------------------------\n\nTITLE: Implementing Typer Callback with Verbose Option in Python\nDESCRIPTION: This snippet demonstrates how to create a Typer callback with a --verbose CLI option. It modifies a global state based on the verbose flag and uses it in other commands.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/commands/callback.md#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.callback()\ndef callback(verbose: bool = typer.Option(False, \"--verbose\", \"-v\")):\n    \"\"\"Manage users in the awesome CLI app.\"\"\"\n    if verbose:\n        print(\"Will write verbose output\")\n    state.verbose = verbose\n```\n\n----------------------------------------\n\nTITLE: Including a Typer App in a Click Application in Python\nDESCRIPTION: Shows how to include a Typer app as a subcommand in a larger Click application. It generates a Click object from a Typer app and includes it in the Click CLI.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/using-click.md#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport click\nimport typer\nfrom typer.main import get_command\n\n@click.group()\ndef cli():\n    \"\"\"An example CLI for a database.\"\"\"\n    pass\n\n@cli.command()\ndef initdb():\n    click.echo('Initialized the database')\n\n@cli.command()\ndef dropdb():\n    click.echo('Dropped the database')\n\napp = typer.Typer()\n\n@app.command()\ndef sub():\n    print(\"Typer is now below Click, the Click app is the top level\")\n\ntyper_click_object = get_command(app)\n\ncli.add_command(typer_click_object, name=\"sub\")\n\nif __name__ == '__main__':\n    cli()\n```\n\n----------------------------------------\n\nTITLE: Styling Output with Typer's style() and echo()\nDESCRIPTION: Demonstrates how to use Typer's style() and echo() functions to create and print colored text in a CLI application.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/printing.md#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\n\ndef main(no_good: bool = False):\n    if no_good:\n        message = typer.style(\n            \"bad\", fg=typer.colors.WHITE, bg=typer.colors.RED, bold=True\n        )\n    else:\n        message = typer.style(\"good\", fg=typer.colors.GREEN, bold=True)\n    typer.echo(f\"everything is {message}\")\n\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Adding a Typer App with Custom Name\nDESCRIPTION: Example showing how to add a Typer app as a subcommand with a custom name.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/subcommands/name-and-help.md#2025-04-14_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\napp.add_typer(users.app, name=\"users\")\n```\n\n----------------------------------------\n\nTITLE: Help Text with Default Values\nDESCRIPTION: Example of adding help text to a CLI argument with a default value\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/arguments/help.md#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\ndef main(name: str = typer.Argument(\"World\", help=\"Who to greet\")):\n    \"\"\"Say hi to NAME very gently, like Dirk.\"\"\"\n    typer.echo(f\"Hello {name}\")\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Adding Short Flag Names for Boolean CLI Options\nDESCRIPTION: Shows how to add short flag versions (-f and -F) for boolean CLI options in addition to the standard long flag versions (--force and --no-force).\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/parameter-types/bool.md#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\n\ndef main(force: bool = typer.Option(False, \"-f, --force/-F, --no-force\")):\n    if force:\n        print(\"Forcing operation\")\n    else:\n        print(\"Not forcing\")\n\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Implementing Boolean CLI Option in Typer\nDESCRIPTION: Demonstrates how to add a --formal boolean CLI option to a Typer application that modifies the greeting output. The formal parameter defaults to False and can be toggled using --formal or --no-formal flags.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/first-steps.md#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef main(name: str, lastname: str, formal: bool = False):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Declaring Integer CLI Parameter in Python with Typer\nDESCRIPTION: Demonstrates how to declare an integer CLI parameter using Typer's type annotation approach. This simple declaration enables automatic CLI argument parsing and type checking.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/index.md#2025-04-14_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ntotal: int\n```\n\n----------------------------------------\n\nTITLE: Organizing Commands into Help Panels with Typer in Python\nDESCRIPTION: This code demonstrates how to organize CLI commands into custom panels by using the 'rich_help_panel' parameter. Commands are grouped into three panels: default (Commands), 'Utils and Configs', and 'Help and Others'.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/commands/help.md#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\napp = typer.Typer()\n\n\n@app.command()\ndef create(username: str):\n    \"\"\"Create a new user. ✨\"\"\"\n    typer.echo(f\"Creating user: {username}\")\n\n\n@app.command()\ndef delete(username: str):\n    \"\"\"Delete a user. 🔥\"\"\"\n    typer.echo(f\"Deleting user: {username}\")\n\n\n@app.command(rich_help_panel=\"Utils and Configs\")\ndef config(config_file: str):\n    \"\"\"Configure the system. 🔧\"\"\"\n    typer.echo(f\"Configuring with: {config_file}\")\n\n\n@app.command(rich_help_panel=\"Utils and Configs\")\ndef sync(username: str):\n    \"\"\"Synchronize the system or something fancy like that. ♻\"\"\"\n    typer.echo(f\"Syncing user: {username}\")\n\n\n@app.command(rich_help_panel=\"Help and Others\")\ndef help(topic: str):\n    \"\"\"Get help with the system. ❓\"\"\"\n    typer.echo(f\"Showing help for: {topic}\")\n\n\n@app.command(rich_help_panel=\"Help and Others\")\ndef report(issue: str):\n    \"\"\"Report an issue. 🐛\"\"\"\n    typer.echo(f\"Reporting issue: {issue}\")\n\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Adding Epilog to Typer Command in Python\nDESCRIPTION: This snippet shows how to add an epilog to a Typer command. The epilog is a string that appears at the end of the help output for the command.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/commands/help.md#2025-04-14_snippet_7\n\nLANGUAGE: python\nCODE:\n```\napp.add_typer(user, epilog=\"Made with ❤ in Venus\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Rich Progress Bar in Python\nDESCRIPTION: Uses Rich's track() function to display a progress bar while processing items. Demonstrates how to integrate Rich's progress display with a simple loop.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/progressbar.md#2025-04-14_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom rich.progress import track\n\nfor _ in track(range(100), description=\"Processing...\"):\n    # Fake processing time\n    time.sleep(0.01)\n\nprint(\"Processed 100 things.\")\n```\n\n----------------------------------------\n\nTITLE: Opening URL with Typer Launch\nDESCRIPTION: Demonstrates how to use typer.launch() to open a URL in the default web browser. Shows basic usage of Typer's launch functionality with a URL parameter.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/launch.md#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\ndef main():\n    print(\"Opening Typer docs\")\n    typer.launch(\"https://typer.tiangolo.com\")\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Version CLI Option in Python with Typer\nDESCRIPTION: A basic implementation of a --version CLI option using a callback function that prints the version and exits the program when the option is used.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/options/version.md#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef version_callback(value: bool):\n    if value:\n        typer.echo(f\"Awesome CLI Version: {__version__}\")\n        raise typer.Exit()\n\n\n@app.command()\ndef main(\n    version: bool = typer.Option(\n        False, \"--version\", callback=version_callback, is_flag=True, help=\"Show the version and exit\"\n    ),\n    name: str = typer.Option(...),\n):\n    \"\"\"Print a nice message\"\"\"\n    typer.echo(f\"Hello {name}\")\n\n```\n\n----------------------------------------\n\nTITLE: Custom Default Value Display in Help Text\nDESCRIPTION: Demonstrates how to customize the default value string shown in the help text\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/options/help.md#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef main(\n    fullname: Annotated[\n        str,\n        typer.Option(show_default=\"(Deadpoolio the amazing's name)\")\n    ] = \"Wade Wilson\",\n) -> None:\n    print(f\"Hello {fullname}\")\n\n```\n\n----------------------------------------\n\nTITLE: Declaring Boolean Flag in Python with Typer\nDESCRIPTION: Shows the declaration of a boolean flag for a CLI command using Typer. This syntax allows for easy creation of toggle options in CLI applications.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/index.md#2025-04-14_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nforce: bool\n```\n\n----------------------------------------\n\nTITLE: Fixed-Length Tuple CLI Arguments in Python\nDESCRIPTION: Demonstrates using tuple typing to require a specific number of CLI arguments with default values. The script expects exactly three character names and provides default values of Harry, Hermione, and Ron.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/multiple-values/arguments-with-multiple-values.md#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef main(\n    names: Tuple[str, str, str] = (\"Harry\", \"Hermione\", \"Ron\")\n):\n    for name in names:\n        print(f\"Hello {name}\")\n```\n\n----------------------------------------\n\nTITLE: Printing to Standard Error with Rich\nDESCRIPTION: Shows how to use Rich's Console object to print output to standard error instead of standard output.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/printing.md#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom rich.console import Console\n\nerr_console = Console(stderr=True)\n\n\ndef main():\n    err_console.print(\"Here is something written to standard error\")\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Introducing typer.Option() Usage in Python\nDESCRIPTION: This snippet shows the basic concept of using typer.Option() for modifying CLI options in Typer applications. It mentions that typer.Option() is similar to typer.Argument() but with additional features.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/options/index.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CLI Options\n\nIn the next short sections we will see how to modify *CLI options* using `typer.Option()`.\n\n`typer.Option()` works very similarly to `typer.Argument()`, but has some extra features that we'll see next.\n```\n\n----------------------------------------\n\nTITLE: Defining Sub-Typer Callback in Python\nDESCRIPTION: This snippet demonstrates how to define a callback for a sub-Typer application. The callback function runs before any command and can handle CLI parameters or execute extra code.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/subcommands/callback-override.md#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nusers_app = typer.Typer()\n\n@users_app.callback()\ndef users_callback():\n    print(\"Running a users command\")\n```\n\n----------------------------------------\n\nTITLE: Implementing a Secure Password Prompt with Hidden Input in Typer\nDESCRIPTION: This example shows how to create a secure password input field that hides user typing (hide_input=True) and requires confirmation (confirmation_prompt=True). The combination provides a standard password entry experience where the input is not visible on screen.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/options/password.md#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndocs_src/options/password/tutorial002_an.py hl[8]\n```\n\n----------------------------------------\n\nTITLE: Custom Help Panels\nDESCRIPTION: Example of organizing CLI arguments into different help panels using rich_help_panel parameter\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/arguments/help.md#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\ndef main(\n    name: str = typer.Argument(..., help=\"Who to greet\"),\n    lastname: str = typer.Argument(\n        None,\n        help=\"The last name\",\n        rich_help_panel=\"Secondary Arguments\"\n    ),\n    age: int = typer.Argument(\n        None,\n        help=\"The user's age\",\n        rich_help_panel=\"Secondary Arguments\"\n    ),\n):\n    \"\"\"Say hi to NAME very gently, like Dirk.\"\"\"\n    typer.echo(f\"Hello {name}\")\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Single Command with Callback in Python using Typer\nDESCRIPTION: Example of creating a CLI application with a single command using a callback function. The callback helps maintain the command/subcommand structure even with just one command.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/commands/one-or-multiple.md#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.callback()\ndef callback():\n    pass\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Command Help in Typer CLI\nDESCRIPTION: Demonstrates setting up command help using docstrings and the help parameter in a Typer CLI application with commands for user management.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/commands/help.md#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ntyper.Typer(help=\"Awesome CLI user manager.\")\n\n@app.command()\ndef create(username: str):\n    \"\"\"Create a new user with USERNAME.\"\"\"\n\n@app.command()\ndef delete(username: str, force: bool):\n    \"\"\"Delete a user with USERNAME.\n\n    If --force is not used, will ask for confirmation.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Basic Typer Implementation\nDESCRIPTION: Simple Typer implementation showing how to integrate Typer into a Python script with minimal configuration.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/README.md#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\n\ndef main(name: str):\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Multiple Short Options with Typer in Python\nDESCRIPTION: Demonstrates how to use multiple short options together (-n and -f) with their corresponding long options (--name and --formal) in a Typer CLI application.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/options/name.md#2025-04-14_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\ndef main(\n    name: Annotated[str, typer.Option(\"--name\", \"-n\")],\n    formal: Annotated[bool, typer.Option(\"--formal\", \"-f\")] = False,\n):\n    if formal:\n        typer.echo(f\"Good day Ms. {name}.\")\n    else:\n        typer.echo(f\"Hello {name}\")\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Writing Binary Files with FileBinaryWrite in Typer\nDESCRIPTION: Demonstrates using typer.FileBinaryWrite to write binary data to a file. This example creates a simple binary file with encoded data and shows how to convert strings to bytes before writing to a binary file.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/parameter-types/file.md#2025-04-14_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nimport typer\n\n\ndef main(file: typer.FileBinaryWrite = typer.Option(...)):\n    content = b\"\\x02\\x08\\x17\\x00\\x19\\x12\"\n    file.write(content)\n    file.write(\"\\n\".encode(\"utf-8\"))\n    typer.echo(\"Binary file written\")\n\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Showing Help Text When No Arguments Are Provided\nDESCRIPTION: Setting no_args_is_help=True when creating the Typer application displays the help message automatically when the CLI is run without any arguments.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/commands/index.md#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\napp = typer.Typer(no_args_is_help=True)\n\n@app.command()\ndef create():\n    print(\"Creating user: Hiro Hamada\")\n\n@app.command()\ndef delete():\n    print(\"Deleting user: Hiro Hamada\")\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Hide Default Value in Help Text\nDESCRIPTION: Shows how to hide the default value from appearing in the help text using show_default=False\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/options/help.md#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef main(\n    fullname: Annotated[str, typer.Option(show_default=False)] = \"Wade Wilson\",\n) -> None:\n    print(f\"Hello {fullname}\")\n\n```\n\n----------------------------------------\n\nTITLE: Installing Shell Completion Example\nDESCRIPTION: Example of CLI completion installation commands showing both standard and slim installation options. These commands enable shell autocompletion for Typer CLI applications.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/features.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--install-completion bash\n--show-completion powershell\n```\n\n----------------------------------------\n\nTITLE: Using is_eager Flag for Version CLI Option in Python with Typer\nDESCRIPTION: A solution using is_eager=True to ensure the version option is processed before other parameters, regardless of their order in the command line.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/options/version.md#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef name_callback(value: str):\n    if value != \"Camila\":\n        raise typer.BadParameter(\"Only Camila is allowed\")\n    return value\n\n\ndef version_callback(value: bool):\n    if value:\n        typer.echo(f\"Awesome CLI Version: {__version__}\")\n        raise typer.Exit()\n\n\n@app.command()\ndef main(\n    name: str = typer.Option(\n        ..., callback=name_callback, help=\"The name to say hi to\"\n    ),\n    version: bool = typer.Option(\n        False,\n        \"--version\",\n        callback=version_callback,\n        is_flag=True,\n        is_eager=True,\n        help=\"Show the version and exit\",\n    ),\n):\n    \"\"\"Print a nice message\"\"\"\n    typer.echo(f\"Hello {name}\")\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Typer to Hide Local Variables in Error Output\nDESCRIPTION: Example code demonstrating how to create a Typer application with pretty exceptions but with local variable display disabled for security, useful when handling sensitive information like passwords.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/exceptions.md#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\n\napp = typer.Typer(pretty_exceptions_show_locals=False)\n\n\n@app.command()\ndef main(password: str):\n    print(password + 3)\n\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Exiting with an Error Code using typer.Exit()\nDESCRIPTION: This snippet shows how to exit a CLI program with an error code using `typer.Exit(code)`. It sets code=1 to indicate an error condition when a reserved username is provided, which can be checked by other programs that execute this CLI.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/terminating.md#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\n\ndef main(username: str):\n    if username == \"root\":\n        print(\"The root user is reserved\")\n        raise typer.Exit(code=1)\n    print(f\"New user created: {username}\")\n\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Adding Callback on Typer Creation in Python\nDESCRIPTION: This code shows how to add a callback when creating a Typer app that will be added to another Typer app. The callback is defined as a parameter in the Typer constructor.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/subcommands/callback-override.md#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef users_callback():\n    print(\"Running a users command\")\n\nusers_app = typer.Typer(callback=users_callback)\n```\n\n----------------------------------------\n\nTITLE: Case-Insensitive Enum CLI Parameter\nDESCRIPTION: Shows how to implement a case-insensitive enum parameter by setting case_sensitive=False. This allows the CLI to accept values regardless of their case.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/parameter-types/enum.md#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef main(network: NeuralNetwork = NeuralNetwork.simple, case_sensitive=False):\n```\n\n----------------------------------------\n\nTITLE: Required CLI Option Using Explicit Ellipsis\nDESCRIPTION: Demonstrates creating a required --lastname CLI option by explicitly passing the Ellipsis (...) to typer.Option(). This approach clearly indicates the absence of a default value.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/options/required.md#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\ndef main(\n    name: str, lastname: str = typer.Option(default=...)\n):\n    print(f\"Hello {name} {lastname}\")\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Using the hi subcommand with optional user argument\nDESCRIPTION: Shows how to use the 'hi' subcommand which accepts an optional user argument defaulting to 'World'.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/tests/assets/cli/multiapp-docs.md#2025-04-14_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ multiapp sub hi [OPTIONS] [USER]\n```\n\n----------------------------------------\n\nTITLE: Required CLI Option Using Annotated Type Hints\nDESCRIPTION: Demonstrates how to create a required --lastname CLI option using Python's Annotated type hints with Typer.Option(). This is the preferred modern approach for defining required CLI options.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/options/required.md#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Annotated\nimport typer\n\ndef main(\n    name: str,\n    lastname: Annotated[str, typer.Option()] = ...\n):\n    print(f\"Hello {name} {lastname}\")\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Explicitly Required CLI Argument Using Ellipsis\nDESCRIPTION: Making a CLI argument explicitly required using the Python Ellipsis syntax.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/arguments/optional.md#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef main(name: str = typer.Argument(default=...)):\n    print(f\"Hello {name}!\")\n```\n\n----------------------------------------\n\nTITLE: Custom Default Value String\nDESCRIPTION: Demonstrates how to customize the default value string shown in help text\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/arguments/help.md#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\ndef main(\n    name: str = typer.Argument(\n        \"Wade Wilson\",\n        help=\"Who to greet\",\n        show_default=\"(Deadpoolio the amazing's name)\"\n    )\n):\n    typer.echo(f\"Hello {name}\")\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Sample Typer CLI Application\nDESCRIPTION: Example Python script using Typer to create a simple CLI with hello and bye commands\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/typer-command.md#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Optional\n\nimport typer\n\napp = typer.Typer()\n\n\n@app.command()\ndef hello(name: Optional[str] = None):\n    if name:\n        typer.echo(f\"Hello {name}\")\n    else:\n        typer.echo(\"Hello World!\")\n\n\n@app.command()\ndef bye(name: Optional[str] = None):\n    if name:\n        typer.echo(f\"Bye {name}\")\n    else:\n        typer.echo(\"Goodbye!\")\n\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Rich-enhanced Prompt in Typer\nDESCRIPTION: Shows how to use Rich library integration with Typer to create more visually appealing prompts with emoji support.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/prompt.md#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport typer\nfrom rich.prompt import Prompt\n\ndef main():\n    name = Prompt.ask(\"Enter your name :sunglasses:\")\n    print(f\"Hello {name}\")\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Converting CLI Argument to Option with Default Value\nDESCRIPTION: Shows how to convert a required lastname argument to an optional CLI option by providing a default empty string value. This changes how the parameter is specified in the command line interface.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/first-steps.md#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef main(name: str, lastname: str = \"\", formal: bool = False):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Accessing CallbackParam Object in Typer Callbacks\nDESCRIPTION: Shows how to access the parameter information in a callback using the typer.CallbackParam object, which provides details about which parameter triggered the callback - useful for callbacks shared between multiple parameters.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/options/callback-and-context.md#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef name_callback(param: typer.CallbackParam, ctx: typer.Context, value: str):\n    if ctx.resilient_parsing:\n        return value\n    print(f\"Validating param: {param.name}\")\n    if value != \"Camila\":\n        raise typer.BadParameter(\"Only Camila is allowed\")\n    return value\n\n\ndef main(name: str = typer.Option(..., callback=name_callback)):\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Installing Typer-slim with Standard Dependencies\nDESCRIPTION: Command to install Typer-slim with standard extra dependencies. This is equivalent to installing the full Typer package but allows for more granular control over dependencies.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/index.md#2025-04-14_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\npip install \"typer-slim[standard]\"\n```\n\n----------------------------------------\n\nTITLE: Defining DateTime CLI Parameter in Typer (Python)\nDESCRIPTION: This snippet shows how to define a CLI parameter as a Python datetime object in a Typer application. It demonstrates the use of the datetime type hint and how to access the datetime object's attributes.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/parameter-types/datetime.md#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime\n\nimport typer\n\n\ndef main(birth: datetime):\n    typer.echo(f\"Interesting day to be born: {birth}\")\n    typer.echo(f\"Birth hour: {birth.hour}\")\n```\n\n----------------------------------------\n\nTITLE: Overriding Help Text with add_typer Callback\nDESCRIPTION: Example showing how to override help text by providing a new callback when adding a Typer app as a subcommand.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/subcommands/name-and-help.md#2025-04-14_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\ndef main_users_callback():\n    \"\"\"\n    I have the highland! Create some users.\n    \"\"\"\n    pass\n\napp.add_typer(users_app, name=\"new-users\", callback=main_users_callback)\n```\n\n----------------------------------------\n\nTITLE: Using Typer's Built-in Progress Bar in Python\nDESCRIPTION: Demonstrates the use of typer.progressbar() to create a simple progress bar. This method is used when Rich is not available, providing a basic progress indicator.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/progressbar.md#2025-04-14_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nimport typer\nimport time\n\ndef main():\n    total = 100\n    with typer.progressbar(range(total)) as progress:\n        for value in progress:\n            # Fake processing time\n            time.sleep(0.01)\n    \n    typer.echo(f\"Processed {total} things.\")\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Smart Value Completion with Incomplete Value Checking\nDESCRIPTION: Enhanced autocompletion that filters suggestions based on partially typed input.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/options-autocompletion.md#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\ndef complete_name(incomplete: str) -> list[str]:\n    names = [\"Camila\", \"Carlos\", \"Sebastian\"]\n    completion = []\n    for name in names:\n        if name.startswith(incomplete):\n            completion.append(name)\n    return completion\n\napp = typer.Typer()\n\n@app.command()\ndef main(\n    name: str = typer.Option(\n        ...,\n        help=\"The name to say hi to.\",\n        autocompletion=complete_name,\n    )\n):\n    typer.echo(f\"Hello {name}\")\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Basic CLI Option Help Text with Annotated Type\nDESCRIPTION: Demonstrates how to add help text to a CLI option using the Annotated type syntax with typer.Option()\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/options/help.md#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nlastname: Annotated[str, typer.Option(help=\"this option does this and that\")] = \"\"\n```\n\n----------------------------------------\n\nTITLE: Counter Options in Typer CLI\nDESCRIPTION: Shows how to implement a counter option that increments based on the number of times a flag is used in the command.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/parameter-types/number.md#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef main(verbose: int = typer.Option(0, \"--verbose\", \"-v\", count=True)):\n```\n\n----------------------------------------\n\nTITLE: Hidden CLI Argument\nDESCRIPTION: Demonstrates how to hide a CLI argument from the help text using hidden parameter\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/arguments/help.md#2025-04-14_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\ndef main(name: str = typer.Argument(\"World\", hidden=True)):\n    \"\"\"Say hi to NAME very gently, like Dirk.\"\"\"\n    typer.echo(f\"Hello {name}\")\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Numeric Range Validation in Typer CLI\nDESCRIPTION: Example showing how to validate numeric arguments and options with min and max constraints in a Typer CLI application. Validates an ID, age, and score with specific ranges.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/parameter-types/number.md#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef main(\n    id: int = typer.Argument(..., min=0, max=1000),\n    age: int = typer.Option(20, min=18),\n    score: float = typer.Option(0, max=100)\n):\n    print(f\"ID is {id}\")\n    print(f\"--age is {age}\")\n    print(f\"--score is {score}\")\n```\n\n----------------------------------------\n\nTITLE: Confirmation Prompt for Typer CLI Options\nDESCRIPTION: Implements a confirmation prompt that requires users to enter the same value twice before proceeding. This is useful for destructive operations where an extra verification step is needed to prevent accidental actions.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/options/prompt.md#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndocs_src/options/prompt/tutorial003_an.py hl[6]\n```\n\n----------------------------------------\n\nTITLE: Traditional CLI Option Help Text\nDESCRIPTION: Shows the traditional way of adding help text to a CLI option using the function parameter default value\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/options/help.md#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nlastname: str = typer.Option(default=\"\", help=\"this option does this and that\")\n```\n\n----------------------------------------\n\nTITLE: Setting Progress Bar Length in Typer\nDESCRIPTION: Shows how to set an explicit length for a Typer progress bar when the iterable's length is not known in advance. Uses a generator function to simulate fetching data from an API.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/progressbar.md#2025-04-14_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nimport typer\nimport time\n\ndef iterate_user_ids():\n    # Let's imagine this is a web API\n    for i in range(100):\n        time.sleep(0.01)\n        yield i\n\ndef main():\n    total = 100\n    with typer.progressbar(iterate_user_ids(), length=total) as progress:\n        for value in progress:\n            # Process each user ID\n            pass\n    \n    typer.echo(f\"Processed {total} user IDs.\")\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Typer Application with User Input\nDESCRIPTION: Typer application that prompts for user email input using the prompt function.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/testing.md#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\napp = typer.Typer()\n\n@app.command()\ndef main(name: str):\n    email = typer.prompt(\"Email\")\n    print(f\"Hello {name}, your email is: {email}\")\n\nif __name__ == \"__main__\":\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Custom Help Display Name\nDESCRIPTION: Shows how to customize the argument name display in help text using metavar parameter\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/arguments/help.md#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\ndef main(name: str = typer.Argument(\"World\", metavar=\"✨username✨\")):\n    typer.echo(f\"Hello {name}\")\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Implementing Optional CLI Argument with Static Default Value in Python Typer\nDESCRIPTION: This code creates a CLI command with an optional name argument that defaults to 'Wade Wilson' when not provided by the user. The function prints a greeting message using either the provided name or the default value.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/arguments/default.md#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef main(name: str = typer.Argument(\"Wade Wilson\")):\n    print(f\"Hello {name}\")\n```\n\n----------------------------------------\n\nTITLE: Required CLI Option Using Function Parameter Default\nDESCRIPTION: Shows how to create a required --lastname CLI option using the traditional approach with function parameter defaults. This method is supported for backward compatibility.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/options/required.md#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\ndef main(\n    name: str, lastname: str = typer.Option()\n):\n    print(f\"Hello {name} {lastname}\")\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Adding a Typer App with Help Text\nDESCRIPTION: Example showing how to add a Typer app as a subcommand with both a name and help text.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/subcommands/name-and-help.md#2025-04-14_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\napp.add_typer(users.app, name=\"users\", help=\"Manage users in the app.\")\n```\n\n----------------------------------------\n\nTITLE: Adding a Label to Typer Progress Bar\nDESCRIPTION: Demonstrates how to add a descriptive label to a Typer progress bar, enhancing the user interface by providing context for the progress being shown.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/progressbar.md#2025-04-14_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nimport typer\nimport time\n\ndef main():\n    total = 100\n    with typer.progressbar(range(total), label=\"Processing\") as progress:\n        for value in progress:\n            # Fake processing time\n            time.sleep(0.01)\n    \n    typer.echo(f\"Processed {total} things.\")\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Basic Required CLI Argument in Typer\nDESCRIPTION: A simple example of a required CLI argument in Typer using standard type annotation.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/arguments/optional.md#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef main(name: str):\n    print(f\"Hello {name}!\")\n```\n\n----------------------------------------\n\nTITLE: Click Group with Subcommands Example in Python\nDESCRIPTION: Shows a Click Group with subcommands for initializing and dropping a database. The main function becomes a Group object.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/using-click.md#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport click\n\n@click.group()\ndef cli():\n    \"\"\"An example CLI for a database.\"\"\"\n    pass\n\n@cli.command()\ndef initdb():\n    click.echo('Initialized the database')\n\n@cli.command()\ndef dropdb():\n    click.echo('Dropped the database')\n\nif __name__ == '__main__':\n    cli()\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple String CLI Options in Typer (Python)\nDESCRIPTION: This snippet demonstrates how to declare and process multiple string CLI options using Typer. It uses typing.List to define a list of strings as the option type.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/multiple-values/multiple-options.md#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List\n\nimport typer\n\n\ndef main(user: List[str] = None):\n    if user:\n        for u in user:\n            typer.echo(f\"Processing user: {u}\")\n    else:\n        typer.echo(f\"No provided users (raw input = {user})\")\n        raise typer.Abort()\n\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Default Values for CLI Arguments with Typer in Python\nDESCRIPTION: This code demonstrates using a function as a default_factory to dynamically generate default values for a CLI argument. The get_name function randomly selects a character name when no argument is provided by the user.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/arguments/default.md#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef get_name():\n    return random.choice([\"Wade Wilson\", \"Peter Parker\", \"Deadpool\", \"Spiderman\", \"Hiro\", \"Rick\"])\n\ndef main(name: str = typer.Argument(default_factory=get_name)):\n    print(f\"Hello {name}\")\n```\n\n----------------------------------------\n\nTITLE: Using the multiapp CLI base command\nDESCRIPTION: Shows the basic usage pattern for the multiapp command-line interface, including available options for installation completion and help.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/tests/assets/cli/multiapp-docs.md#2025-04-14_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ multiapp [OPTIONS] COMMAND [ARGS]...\n```\n\n----------------------------------------\n\nTITLE: Optional CLI Argument Using Annotated\nDESCRIPTION: Making a CLI argument optional by providing a default value with Annotated syntax.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/arguments/optional.md#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef main(name: Annotated[str, typer.Argument()] = \"World\"):\n    print(f\"Hello {name}!\")\n```\n\n----------------------------------------\n\nTITLE: Executing CLI Application in Console\nDESCRIPTION: This snippet demonstrates how to use the 'hello' CLI application. It shows the basic command structure with optional arguments and options.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/tests/assets/cli/richformattedapp-docs.md#2025-04-14_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ hello [OPTIONS] USER_1 [USER_2]\n```\n\n----------------------------------------\n\nTITLE: Unpacking Tuple Values in Python\nDESCRIPTION: This snippet demonstrates how to unpack the values from a tuple into separate variables. It shows two equivalent ways of accessing the tuple elements: through unpacking and through indexing.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/multiple-values/options-with-multiple-values.md#2025-04-14_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nusername, coins, is_wizard = user\n```\n\nLANGUAGE: Python\nCODE:\n```\nusername = user[0]\ncoins = user[1]\nis_wizard = user[2]\n```\n\n----------------------------------------\n\nTITLE: Setting an Environment Variable for a CLI Argument in Python with Typer\nDESCRIPTION: This snippet demonstrates how to set up a CLI argument that reads from an environment variable (AWESOME_NAME) when no value is provided in the command line. The argument has a default value of 'World'.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/arguments/envvar.md#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\n\ndef main(name: str = typer.Argument(\"World\", envvar=\"AWESOME_NAME\")):\n    print(f\"Hello Mr. {name}\")\n\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: MultiApp Sub Command Usage\nDESCRIPTION: Usage syntax for the sub command which contains nested commands for greetings\nSOURCE: https://github.com/fastapi/typer.git/blob/master/tests/assets/cli/multiapp-docs-title.md#2025-04-14_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ multiapp sub [OPTIONS] COMMAND [ARGS]...\n```\n\n----------------------------------------\n\nTITLE: Required CLI Argument Using Annotated\nDESCRIPTION: An alternative way to declare a required CLI argument using Python's Annotated type hint.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/arguments/optional.md#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef main(name: Annotated[str, typer.Argument()]):\n    print(f\"Hello {name}!\")\n```\n\n----------------------------------------\n\nTITLE: Locating File with Typer Launch\nDESCRIPTION: Shows how to use typer.launch() with locate=True to open the system file browser at a specific file location. Includes setup code for creating a config directory and file.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/launch.md#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport typer\nfrom pathlib import Path\n\ndef main():\n    app_dir = Path(typer.get_app_dir(\"awesome-cli\"))\n    if not app_dir.exists():\n        app_dir.mkdir(parents=True)\n    \n    config_file = app_dir / \"config.txt\"\n    if not config_file.exists():\n        config_file.write_text(\"\"\"some settings here\n        some more settings\n        \"\"\")\n    \n    config_file_str = str(config_file)\n    print(\"Opening config directory\")\n    typer.launch(config_file_str, locate=True)\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Testing Typer Application with User Input\nDESCRIPTION: Test case demonstrating how to simulate user input during testing using the input parameter.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/testing.md#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom typer.testing import CliRunner\nfrom .main import app\n\nrunner = CliRunner()\n\ndef test_app():\n    result = runner.invoke(app, [\"Camila\"], input=\"camila@example.com\\n\")\n    assert result.exit_code == 0\n    assert \"Hello Camila, your email is: camila@example.com\" in result.stdout\n```\n\n----------------------------------------\n\nTITLE: Creating a CLI Option with Email Confirmation Prompt in Typer\nDESCRIPTION: This snippet demonstrates how to create a CLI option that prompts the user for an email address and requires confirmation with a second input. The confirmation_prompt=True parameter ensures the user is asked to enter the same value twice.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/options/password.md#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndocs_src/options/password/tutorial001_an.py hl[7]\n```\n\n----------------------------------------\n\nTITLE: Configuring a Python Package with Poetry in pyproject.toml\nDESCRIPTION: This TOML configuration sets up a Python package with Poetry, defining metadata and a CLI script entry point. The highlighted section configures the package to expose a command-line interface named 'rick-portal-gun' that executes the Typer app.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/package.md#2025-04-14_snippet_2\n\nLANGUAGE: TOML\nCODE:\n```\n[tool.poetry]\nname = \"rick-portal-gun\"\nversion = \"0.1.0\"\ndescription = \"\"\nauthors = [\"Rick Sanchez <rick@example.com>\"]\nreadme = \"README.md\"\n\n[tool.poetry.scripts]\nrick-portal-gun = \"rick_portal_gun.main:app\"\n\n[tool.poetry.dependencies]\npython = \"^3.10\"\ntyper = \"^0.12.0\"\n\n[build-system]\nrequires = [\"poetry-core\"]\nbuild-backend = \"poetry.core.masonry.api\"\n```\n\n----------------------------------------\n\nTITLE: Basic Typer Command with Type Error\nDESCRIPTION: Example showing a command that triggers a TypeError by attempting to concatenate a string with an integer. Demonstrates Typer's error handling.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/exceptions.md#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@app.command()\ndef main(name: str = \"morty\"):\n    print(name + 3)\n```\n\n----------------------------------------\n\nTITLE: Reading Environment Variables in Python\nDESCRIPTION: Example Python code showing how to read environment variables using os.getenv() with a default fallback value.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/environment-variables.md#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nname = os.getenv(\"MY_NAME\", \"World\")\nprint(f\"Hello {name} from Python\")\n```\n\n----------------------------------------\n\nTITLE: Overriding Callback Help Text\nDESCRIPTION: Example showing how to override a callback set in Typer constructor with a new callback using the decorator syntax.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/subcommands/name-and-help.md#2025-04-14_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\ndef old_callback():\n    \"\"\"\n    Old callback help.\n    \"\"\"\n    pass\n\nusers_app = typer.Typer(callback=old_callback)\n\n@users_app.callback()\ndef users_callback():\n    \"\"\"\n    Manage users in the app.\n    \"\"\"\n    pass\n```\n\n----------------------------------------\n\nTITLE: Autocompletion with Help Text Support\nDESCRIPTION: Implements autocompletion with help text for supported shells (Zsh, Fish, PowerShell).\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/options-autocompletion.md#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\nnames = [\n    (\"Camila\", \"The reader of books.\"),\n    (\"Carlos\", \"The writer of scripts.\"),\n    (\"Sebastian\", \"The type hints guy.\")\n]\n\ndef complete_name(incomplete: str) -> list[tuple[str, str]]:\n    completion = []\n    for name, help_text in names:\n        if name.startswith(incomplete):\n            completion.append((name, help_text))\n    return completion\n\napp = typer.Typer()\n\n@app.command()\ndef main(\n    name: str = typer.Option(\n        ...,\n        help=\"The name to say hi to.\",\n        autocompletion=complete_name,\n    )\n):\n    typer.echo(f\"Hello {name}\")\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Complete pyproject.toml Configuration for Typer Package\nDESCRIPTION: Full pyproject.toml configuration for a package using Typer, including package metadata, dependencies, and script entry points. This example shows a version update from 0.1.0 to 0.2.0.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/package.md#2025-04-14_snippet_6\n\nLANGUAGE: TOML\nCODE:\n```\n[tool.poetry]\nname = \"rick-portal-gun\"\nversion = \"0.2.0\"\ndescription = \"\"\nauthors = [\"Rick Sanchez <rick@example.com>\"]\nreadme = \"README.md\"\n\n[tool.poetry.scripts]\nrick-portal-gun = \"rick_portal_gun.main:app\"\n\n[tool.poetry.dependencies]\npython = \"^3.10\"\ntyper = \"^0.12.0\"\n\n[build-system]\nrequires = [\"poetry-core\"]\nbuild-backend = \"poetry.core.masonry.api\"\n```\n\n----------------------------------------\n\nTITLE: Aborting CLI Program Execution with typer.Abort()\nDESCRIPTION: This example demonstrates how to abort a CLI program using `typer.Abort()`. Unlike a normal exit, this prints an explicit \"Aborted!\" message to the terminal, making it clear that the execution was deliberately stopped.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/terminating.md#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\n\ndef main(username: str):\n    if username == \"root\":\n        print(\"The root user is reserved\")\n        raise typer.Abort()\n    print(f\"New user created: {username}\")\n\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Running CLI Command with Help Flag\nDESCRIPTION: Shows the command-line interface with a renamed subcommand 'cake-sith-users' and customized help text. Demonstrates the effect of explicitly setting name and help parameters in app.add_typer().\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/subcommands/name-and-help.md#2025-04-14_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n// Check the help\n$ python main.py --help\n\n// Notice the command name cake-sith-users and the new help text \"Unlimited powder! Eh, users.\"\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or customize the installation.\n  --help                Show this message and exit.\n\nCommands:\n  cake-sith-users  Unlimited powder! Eh, users.\n\n// And check the help for the command cake-sith-users\n$ python main.py cake-sith-users --help\n\n// Notice the main help text\nUsage: main.py cake-sith-users [OPTIONS] COMMAND [ARGS]...\n\n  Unlimited powder! Eh, users.\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  create\n```\n\n----------------------------------------\n\nTITLE: Custom Value Completion for CLI Options in Python\nDESCRIPTION: Implements basic autocompletion by returning a list of predefined values for the --name option.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/options-autocompletion.md#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\ndef complete_name():\n    return [\"Camila\", \"Carlos\", \"Sebastian\"]\n\napp = typer.Typer()\n\n@app.command()\ndef main(\n    name: str = typer.Option(\n        ...,\n        help=\"The name to say hi to.\",\n        autocompletion=complete_name,\n    )\n):\n    typer.echo(f\"Hello {name}\")\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Using Callback Docstring for Help Text\nDESCRIPTION: Example showing how to use a callback function's docstring to set the help text for a Typer app.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/subcommands/name-and-help.md#2025-04-14_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n@users_app.callback()\ndef users_callback():\n    \"\"\"\n    Manage users in the app.\n    \"\"\"\n    pass\n```\n\n----------------------------------------\n\nTITLE: MultiApp Top Command Usage\nDESCRIPTION: Usage syntax for the top-level command with help option\nSOURCE: https://github.com/fastapi/typer.git/blob/master/tests/assets/cli/multiapp-docs-title.md#2025-04-14_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ multiapp top [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Running Python Scripts Directly\nDESCRIPTION: Example of running a Typer script directly with Python. This is the standard way to execute Python scripts but doesn't provide auto-completion features.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/first-steps.md#2025-04-14_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ python main.py\n\nHello World\n```\n\n----------------------------------------\n\nTITLE: Referencing typer.Argument() in Python for FastAPI\nDESCRIPTION: This snippet demonstrates how to reference the typer.Argument() function in a Python script, likely for use in a FastAPI application. It's used for defining command-line arguments with various capabilities such as data validation.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/arguments/other-uses.md#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ntyper.Argument()\n```\n\n----------------------------------------\n\nTITLE: Installing Typer with standard dependencies using pip\nDESCRIPTION: This snippet shows how to install Typer with standard dependencies using pip. It's equivalent to the default installation but explicitly specifies the 'standard' extra.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/install.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install \"typer-slim[standard]\"\n```\n\n----------------------------------------\n\nTITLE: Basic CLI Name Option Implementation in Python\nDESCRIPTION: Simple Typer CLI app example demonstrating option completion with a --name parameter.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/options-autocompletion.md#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\napp = typer.Typer()\n\n@app.command()\ndef main(name: str = typer.Option(..., help=\"The name to say hi to.\")):\n    typer.echo(f\"Hello {name}\")\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Simple Typer Function\nDESCRIPTION: Basic Typer function without explicit app creation, using typer.run() directly.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/testing.md#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\ndef main(name: str = \"World\"):\n    print(f\"Hello {name}\")\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Overriding Callback in Sub-Typer App in Python\nDESCRIPTION: This snippet illustrates how to override a callback that was added when creating the Typer app. The new callback is defined using the @app.callback() decorator, which takes precedence over the callback defined in the constructor.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/subcommands/callback-override.md#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef callback():\n    print(\"Running users command\")\n\nusers_app = typer.Typer(callback=callback)\n\n@users_app.callback()\ndef user_callback():\n    print(\"Callback override, running users command\")\n```\n\n----------------------------------------\n\nTITLE: Installing Typer with pip in Bash\nDESCRIPTION: Command to install the Typer package using pip. This installs Typer with its standard dependencies, including rich for formatted output and shellingham for shell detection.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/README.md#2025-04-14_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\npip install typer\n```\n\n----------------------------------------\n\nTITLE: Reading Text Files with FileText in Typer\nDESCRIPTION: Example showing how to use typer.FileText to read a text file line by line through a command-line parameter. The file is opened in text mode, giving access to a file-like object that returns string content.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/parameter-types/file.md#2025-04-14_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nwith open('file.txt') as f:\n    # Here f is the file-like object\n    read_data = f.read()\n    print(read_data)\n```\n\nLANGUAGE: Python\nCODE:\n```\nimport typer\n\n\ndef main(config: typer.FileText = typer.Option(...)):\n    for line in config:\n        typer.echo(f\"Config line: {line.strip()}\")\n\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Multiple Values CLI Option Implementation\nDESCRIPTION: Implementation of a CLI option that accepts multiple values using List type hint.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/options-autocompletion.md#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List\nimport typer\n\napp = typer.Typer()\n\n@app.command()\ndef main(\n    names: List[str] = typer.Option(\n        ..., help=\"The name to say hi to.\"\n    )\n):\n    for name in names:\n        typer.echo(f\"Hello {name}\")\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: MultiApp Hi Subcommand Usage\nDESCRIPTION: Usage syntax for the hi subcommand with optional user argument\nSOURCE: https://github.com/fastapi/typer.git/blob/master/tests/assets/cli/multiapp-docs-title.md#2025-04-14_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ multiapp sub hi [OPTIONS] [USER]\n```\n\n----------------------------------------\n\nTITLE: Overriding Typer Callback in Python\nDESCRIPTION: This snippet demonstrates how to override a callback that was added during Typer app creation. The new callback function replaces the original one.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/commands/callback.md#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.callback()\ndef new_callback():\n    print(\"Override callback, running a command\")\n```\n\n----------------------------------------\n\nTITLE: Installing Typer-slim with Standard Dependencies in Bash\nDESCRIPTION: Command to install the Typer-slim package with standard extra dependencies using pip. This is equivalent to installing the full Typer package but allows for more granular control over dependencies.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/README.md#2025-04-14_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\npip install \"typer-slim[standard]\"\n```\n\n----------------------------------------\n\nTITLE: Custom Default Help Display\nDESCRIPTION: Shows how to customize or hide default value display in help text using show_default parameter\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/arguments/help.md#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\ndef main(\n    name: str = typer.Argument(\n        \"World\",\n        help=\"Who to greet\",\n        show_default=False\n    )\n):\n    \"\"\"Say hi to NAME very gently, like Dirk.\"\"\"\n    typer.echo(f\"Hello {name}\")\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Python Main Entry Point\nDESCRIPTION: Standard Python main entry point pattern used in Typer scripts\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/typer-command.md#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Installing Minimal Typer Package\nDESCRIPTION: Installing Typer without CLI support using typer-slim package\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/typer-command.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install typer-slim\n```\n\n----------------------------------------\n\nTITLE: Running Scripts with Typer Command\nDESCRIPTION: Example of using the `typer` command to run scripts with auto-completion support. This method enables TAB completion for all commands in your Typer CLI application.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/first-steps.md#2025-04-14_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ typer main.py run\n\nHello World\n```\n\n----------------------------------------\n\nTITLE: Using the multiapp sub command group\nDESCRIPTION: Shows the usage pattern for the 'sub' command group which contains nested subcommands for different greeting operations.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/tests/assets/cli/multiapp-docs.md#2025-04-14_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ multiapp sub [OPTIONS] COMMAND [ARGS]...\n```\n\n----------------------------------------\n\nTITLE: Creating Rich Spinners in Python\nDESCRIPTION: Illustrates how to use Rich to display multiple spinners for concurrent processes. This example shows two spinners for different operations running simultaneously.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/progressbar.md#2025-04-14_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom rich.progress import Progress\n\nwith Progress() as progress:\n    task1 = progress.add_task(\"[red]Processing...\", total=100)\n    task2 = progress.add_task(\"[green]Preparing...\", total=100)\n\n    while not progress.finished:\n        progress.update(task1, advance=0.5)\n        progress.update(task2, advance=0.3)\n        time.sleep(0.02)\n```\n\n----------------------------------------\n\nTITLE: Hiding Environment Variables from Help Text in Python with Typer\nDESCRIPTION: This example shows how to configure a CLI argument that reads from an environment variable but hides this information from the help text using show_envvar=False. The argument will still read from AWESOME_NAME but won't display this in help.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/arguments/envvar.md#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\n\ndef main(\n    name: str = typer.Argument(\"World\", envvar=\"AWESOME_NAME\", show_envvar=False)\n):\n    print(f\"Hello Mr. {name}\")\n\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Basic Python Script without Typer\nDESCRIPTION: Minimal Python script that can be run with Typer CLI tool, demonstrating basic parameter handling.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/README.md#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef main(name: str):\n    print(f\"Hello {name}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Pretty Exceptions Display in Typer\nDESCRIPTION: Shows how to configure Typer to display full exception traces by setting pretty_exceptions_short to False in the Typer app initialization. This enables complete stack traces including internal Typer and Click framework details.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/exceptions.md#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npretty_exceptions_short=False\n```\n\n----------------------------------------\n\nTITLE: Using the hello subcommand with customizable name and age\nDESCRIPTION: Demonstrates the 'hello' subcommand which accepts optional name and age parameters with default values.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/tests/assets/cli/multiapp-docs.md#2025-04-14_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ multiapp sub hello [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Customizing Boolean CLI Option with Single Flag\nDESCRIPTION: Shows how to create a boolean CLI option with only a positive flag (--force) without the automatic negative counterpart (--no-force).\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/parameter-types/bool.md#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\n\ndef main(force: bool = typer.Option(False, \"--force\")):\n    if force:\n        print(\"Forcing operation\")\n    else:\n        print(\"Not forcing\")\n\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Running Typer CLI Application\nDESCRIPTION: Console command example showing how to execute a Typer application from the command line by running a Python script.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/index.md#2025-04-14_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ python main.py\n\n✨ The magic happens here ✨\n```\n\n----------------------------------------\n\nTITLE: Disabling Pretty Exceptions Configuration\nDESCRIPTION: Code snippet showing how to disable Typer's pretty exception formatting using the pretty_exceptions_enable parameter.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/exceptions.md#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndocs_src/exceptions/tutorial004.py hl[3]\n```\n\n----------------------------------------\n\nTITLE: Using the multiapp top command\nDESCRIPTION: Demonstrates how to use the 'top' command within the multiapp CLI application.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/tests/assets/cli/multiapp-docs.md#2025-04-14_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ multiapp top [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Implementing Exclusive Executable Callbacks in Typer\nDESCRIPTION: This snippet demonstrates how to create a callback that only executes when no subcommand is specified by checking if ctx.invoked_subcommand is None. The callback initializes a database only when run directly.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/commands/context.md#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\napp = typer.Typer()\n\n\n@app.command()\ndef create(username: str):\n    \"\"\"Create a new user.\"\"\"\n    typer.echo(f\"Creating user: {username}\")\n\n\n@app.command()\ndef delete(username: str):\n    \"\"\"Delete a user.\"\"\"\n    typer.echo(f\"Deleting user: {username}\")\n\n\n@app.callback(invoke_without_command=True)\ndef callback(ctx: typer.Context):\n    \"\"\"Common stuff for the CLI app.\"\"\"\n    if ctx.invoked_subcommand is None:\n        typer.echo(\"Initializing database\")\n\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Creating Alternative Boolean CLI Option Names\nDESCRIPTION: Demonstrates how to create a boolean CLI option with custom alternative names (--accept and --reject) instead of the default pattern.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/parameter-types/bool.md#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\n\ndef main(accept: bool = typer.Option(None, \"--accept/--reject\")):\n    if accept is None:\n        print(\"I don't know what you want yet\")\n    elif accept:\n        print(\"Accepting!\")\n    else:\n        print(\"Rejecting!\")\n\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Directory Structure\nDESCRIPTION: Shows the file and directory organization for the CLI project, including main modules and subpackages.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/one-file-per-command.md#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmycli/\n├── __init__.py\n├── main.py\n├── users/\n│   ├── __init__.py\n│   ├── add.py\n│   └── delete.py\n└── version.py\n```\n\n----------------------------------------\n\nTITLE: Basic Click Command Example in Python\nDESCRIPTION: Demonstrates a simple Click command that prints a greeting. The function is converted to a Click Command object.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/using-click.md#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport click\n\n@click.command()\n@click.option(\"--name\", prompt=\"Your name\", help=\"The person to greet.\")\ndef hello(name):\n    click.echo(f\"Hello {name}!\")\n\nif __name__ == \"__main__\":\n    hello()\n```\n\n----------------------------------------\n\nTITLE: MultiApp Main Command Usage\nDESCRIPTION: Main command syntax for the multiapp CLI tool with options for completion installation and help\nSOURCE: https://github.com/fastapi/typer.git/blob/master/tests/assets/cli/multiapp-docs-title.md#2025-04-14_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ multiapp [OPTIONS] COMMAND [ARGS]...\n```\n\n----------------------------------------\n\nTITLE: Generator-based Autocompletion Implementation\nDESCRIPTION: Simplified autocompletion using Python generators with yield statements instead of building lists.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/options-autocompletion.md#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\nnames = [\n    (\"Camila\", \"The reader of books.\"),\n    (\"Carlos\", \"The writer of scripts.\"),\n    (\"Sebastian\", \"The type hints guy.\")\n]\n\ndef complete_name(incomplete: str):\n    for name, help_text in names:\n        if name.startswith(incomplete):\n            yield (name, help_text)\n\napp = typer.Typer()\n\n@app.command()\ndef main(\n    name: str = typer.Option(\n        ...,\n        help=\"The name to say hi to.\",\n        autocompletion=complete_name,\n    )\n):\n    typer.echo(f\"Hello {name}\")\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Package Installation Command\nDESCRIPTION: Command to install the slim version of Typer without shellingham dependency\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/features.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install typer-slim\n```\n\n----------------------------------------\n\nTITLE: MultiApp Bye Subcommand Usage\nDESCRIPTION: Usage syntax for the bye subcommand with help option\nSOURCE: https://github.com/fastapi/typer.git/blob/master/tests/assets/cli/multiapp-docs-title.md#2025-04-14_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ multiapp sub bye [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Optional CLI Argument Using Old Syntax\nDESCRIPTION: Making a CLI argument optional by providing None as the default value in typer.Argument().\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/arguments/optional.md#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef main(name: str = typer.Argument(\"World\")):\n    print(f\"Hello {name}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Linux/macOS Bash\nDESCRIPTION: Demonstrates how to create and use environment variables in Linux or macOS terminal using Bash commands.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/environment-variables.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport MY_NAME=\"Wade Wilson\"\necho \"Hello $MY_NAME\"\n```\n\n----------------------------------------\n\nTITLE: Custom Prompt Text in Typer CLI Options\nDESCRIPTION: Demonstrates how to customize the prompt message by passing a string instead of True to the prompt parameter. This provides a more user-friendly experience with clear instructions about what information is being requested.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/options/prompt.md#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndocs_src/options/prompt/tutorial002_an.py hl[7]\n```\n\n----------------------------------------\n\nTITLE: Context-Aware Multiple Value Completion\nDESCRIPTION: Advanced autocompletion that uses Typer context to filter out already selected values.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/options-autocompletion.md#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List\nimport typer\n\nnames_data = [\n    (\"Camila\", \"The reader of books.\"),\n    (\"Carlos\", \"The writer of scripts.\"),\n    (\"Sebastian\", \"The type hints guy.\")\n]\n\ndef complete_name(\n    ctx: typer.Context,\n    incomplete: str,\n):\n    names = ctx.params.get(\"names\") or []\n    for name, help_text in names_data:\n        if name.startswith(incomplete) and name not in names:\n            yield (name, help_text)\n\napp = typer.Typer()\n\n@app.command()\ndef main(\n    names: List[str] = typer.Option(\n        ...,\n        help=\"The name to say hi to.\",\n        autocompletion=complete_name,\n    )\n):\n    for name in names:\n        typer.echo(f\"Hello {name}\")\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Referencing Python Package Manager\nDESCRIPTION: Reference to pipx, a tool for installing and running Python applications in isolated environments.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/package.md#2025-04-14_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\npipx\n```\n\n----------------------------------------\n\nTITLE: Implementing User Delete Command\nDESCRIPTION: Defines the user delete command functionality in a separate module, creating a standalone Typer app instance for deleting users.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/one-file-per-command.md#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\napp = typer.Typer()\n\n@app.command()\ndef delete(name: str):\n    \"\"\"Delete a user.\"\"\"\n    print(f\"Deleting user: {name}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Windows PowerShell\nDESCRIPTION: Shows how to create and use environment variables in Windows PowerShell.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/environment-variables.md#2025-04-14_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n$Env:MY_NAME = \"Wade Wilson\"\necho \"Hello $Env:MY_NAME\"\n```\n\n----------------------------------------\n\nTITLE: Version CLI Option with Required Parameters in Python with Typer\nDESCRIPTION: An example showing how a version option might not work as expected when used with required parameters that have their own validation callbacks.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/options/version.md#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef name_callback(value: str):\n    if value != \"Camila\":\n        raise typer.BadParameter(\"Only Camila is allowed\")\n    return value\n\n\ndef version_callback(value: bool):\n    if value:\n        typer.echo(f\"Awesome CLI Version: {__version__}\")\n        raise typer.Exit()\n\n\n@app.command()\ndef main(\n    name: str = typer.Option(\n        ..., callback=name_callback, help=\"The name to say hi to\"\n    ),\n    version: bool = typer.Option(\n        False, \"--version\", callback=version_callback, is_flag=True, help=\"Show the version and exit\"\n    ),\n):\n    \"\"\"Print a nice message\"\"\"\n    typer.echo(f\"Hello {name}\")\n\n```\n\n----------------------------------------\n\nTITLE: Installing Python Documentation Dependencies with pip\nDESCRIPTION: Requirements file specifying Python packages needed for documentation generation using MkDocs Material theme with specific version constraints. Includes dependencies for Markdown processing, image handling, and documentation plugins.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/requirements-docs.txt#2025-04-14_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n-e .\n\nmkdocs-material==9.5.50\nmdx-include >=1.4.1,<2.0.0\nmkdocs-redirects>=1.2.1,<1.3.0\npyyaml >=5.3.1,<7.0.0\n# For Material for MkDocs, Chinese search\n# jieba==0.42.1\n# For image processing by Material for MkDocs\npillow==11.1.0\n# For image processing by Material for MkDocs\ncairosvg==2.7.1\n# mkdocstrings[python]==0.25.1\n# Enable griffe-typingdoc once dropping Python 3.7 and upgrading typing-extensions\n# griffe-typingdoc==0.2.5\n# For griffe, it formats with black\n# black==24.3.0\nmkdocs-macros-plugin==1.3.7\nmarkdown-include-variants==0.0.4\n```\n\n----------------------------------------\n\nTITLE: Configuring Context to Accept Extra CLI Parameters in Typer\nDESCRIPTION: This snippet shows how to configure a Typer command to accept additional CLI parameters not declared in the function signature using ignore_unknown_options and allow_extra_args, then accessing them via ctx.args.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/commands/context.md#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\napp = typer.Typer()\n\n\n@app.callback(\n    invoke_without_command=True, ignore_unknown_options=True, allow_extra_args=True\n)\ndef main(ctx: typer.Context):\n    for extra_arg in ctx.args:\n        typer.echo(f\"Got extra arg: {extra_arg}\")\n\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Console Output Example\nDESCRIPTION: Shows the console output when running the main script, indicating that the config file does not exist yet.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/app-dir.md#2025-04-14_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ python main.py\n\nConfig file doesn't exist yet\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Environment Variables for a CLI Argument in Python with Typer\nDESCRIPTION: This code shows how to configure a CLI argument to read from multiple environment variables (AWESOME_NAME and GOD_NAME) when no value is provided in the command line. It will check each environment variable in order.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/arguments/envvar.md#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\n\ndef main(name: str = typer.Argument(\"World\", envvar=[\"AWESOME_NAME\", \"GOD_NAME\"])):\n    print(f\"Hello Mr. {name}\")\n\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Defining a CLI Function with Underscores in Python\nDESCRIPTION: This snippet shows a CLI function definition with underscores in its name. Typer will automatically convert underscores to dashes in the command name.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/commands/name.md#2025-04-14_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ndef create_user(username: str):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Writing Text Files with FileTextWrite in Typer\nDESCRIPTION: Demonstrates using typer.FileTextWrite to write text content to a file through a command-line parameter. This class opens files in write mode ('w') and provides a file-like object for writing string data.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/parameter-types/file.md#2025-04-14_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport typer\n\n\ndef main(config: typer.FileTextWrite = typer.Option(...)):\n    config.write(\"Some config written by the app\\n\")\n    typer.echo(\"Config written\")\n\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Installing Development Dependencies with pip\nDESCRIPTION: Command to install all required dependencies for Typer development using pip. This installs packages listed in requirements.txt including the local Typer in editable mode.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/contributing.md#2025-04-14_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ pip install -r requirements.txt\n\n---> 100%\n```\n\n----------------------------------------\n\nTITLE: Complete Context and Parameters Handler\nDESCRIPTION: Demonstrates handling context, raw CLI parameters, and incomplete string in an autocompletion function, showing how Typer automatically matches parameters based on type hints\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/options-autocompletion.md#2025-04-14_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List\nimport typer\nfrom rich.console import Console\n\nconsole = Console(stderr=True)\n\n\ndef complete_name(\n    ctx: typer.Context,\n    args: List[str],\n    incomplete: str,\n) -> None:\n    console.print(args)\n```\n\n----------------------------------------\n\nTITLE: Running Typer Documentation Server\nDESCRIPTION: Python command to start a live-reloading documentation server during local development, which serves the documentation on http://127.0.0.1:8008.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/contributing.md#2025-04-14_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ python ./scripts/docs.py live\n\n[INFO] Serving on http://127.0.0.1:8008\n[INFO] Start watching changes\n[INFO] Start detecting changes\n```\n\n----------------------------------------\n\nTITLE: Reading Binary Files with FileBinaryRead in Typer\nDESCRIPTION: Shows how to use typer.FileBinaryRead to read binary data from a file in chunks. This example processes a binary file (like an image) by reading 512 bytes at a time and keeping track of the total bytes processed.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/parameter-types/file.md#2025-04-14_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nimport typer\n\n\ndef main(file: typer.FileBinaryRead = typer.Option(...)):\n    processed = 0\n    while chunk := file.read(512):\n        processed += len(chunk)\n        typer.echo(f\"Processed bytes total: {processed}\")\n\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Automatic Abort on Confirmation in Typer\nDESCRIPTION: Demonstrates the use of typer.confirm() with the abort parameter to automatically exit the application if the user doesn't confirm.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/prompt.md#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\ndef main():\n    delete = typer.confirm(\"Are you sure you want to delete it?\", abort=True)\n    print(\"Deleting it!\")\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Using Path Objects for File Paths in Python\nDESCRIPTION: Demonstrates how to use Path objects to create system-independent file paths by combining Path objects with strings using the forward slash operator. Shows type hinting for better IDE support.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/app-dir.md#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nPath(app_dir) / \"config.json\"\n```\n\nLANGUAGE: python\nCODE:\n```\nconfig_path: Path = Path(app_dir) / \"config.json\"\n```\n\n----------------------------------------\n\nTITLE: Defining Development Dependencies for Typer Project\nDESCRIPTION: This requirements file defines the development dependencies for the Typer project. It includes packages for testing (pytest, pytest-cov, pytest-xdist, pytest-sugar), code coverage (coverage), type checking (mypy), linting (ruff), and runtime dependencies (rich, shellingham).\nSOURCE: https://github.com/fastapi/typer.git/blob/master/requirements-tests.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e .\n\npytest >=4.4.0,<9.0.0\npytest-cov >=2.10.0,<7.0.0\ncoverage[toml] >=6.2,<8.0\npytest-xdist >=1.32.0,<4.0.0\npytest-sugar >=0.9.4,<1.1.0\nmypy ==1.4.1\nruff ==0.11.2\n# Needed explicitly by typer-slim\nrich >=10.11.0\nshellingham >=1.3.0\n```\n\n----------------------------------------\n\nTITLE: Creating a Command with Docstring for Help Text\nDESCRIPTION: Example of creating a command where the help text is automatically inferred from the function's docstring.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/subcommands/name-and-help.md#2025-04-14_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n@app.command()\ndef create(item: str):\n    \"\"\"\n    Create an item.\n    \"\"\"\n    typer.echo(f\"Creating item: {item}\")\n```\n\n----------------------------------------\n\nTITLE: Confirmation Prompt in Typer\nDESCRIPTION: Shows how to use typer.confirm() to ask for user confirmation before performing an action in a Typer application.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/prompt.md#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\ndef main():\n    delete = typer.confirm(\"Are you sure you want to delete it?\")\n    if delete:\n        print(\"Deleting it!\")\n    else:\n        print(\"Not deleting\")\n        raise typer.Abort()\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Breaking Shell Completion with Print Statements in Callback Functions\nDESCRIPTION: Shows how adding print statements in callback functions can break shell completion. This example demonstrates the issue by adding a 'Validating name' message that interrupts the completion process.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/options/callback-and-context.md#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef name_callback(value: str):\n    print(\"Validating name\")\n    if value != \"Camila\":\n        raise typer.BadParameter(\"Only Camila is allowed\")\n    return value\n\n\ndef main(name: str = typer.Option(..., callback=name_callback)):\n    print(f\"Hello {name}\")\n\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Explicit Typer Application Creation\nDESCRIPTION: Creating an explicit Typer application instance with the app.command() decorator to define a command function. This approach allows for more flexibility and is required for multiple commands.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/commands/index.md#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\napp = typer.Typer()\n\n@app.command()\ndef main(name: str):\n    print(f\"Hello {name}\")\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Configuring Entry Points in pyproject.toml for Typer CLI\nDESCRIPTION: Example of how to configure a Poetry script entry point in pyproject.toml to make the Typer application callable directly from the command line.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/package.md#2025-04-14_snippet_5\n\nLANGUAGE: TOML\nCODE:\n```\n[tool.poetry.scripts]\nrick-portal-gun = \"rick_portal_gun.main:app\"\n```\n\n----------------------------------------\n\nTITLE: Adding Short Option Name in Python with Typer\nDESCRIPTION: Shows how to define both long (--name) and short (-n) option names for a CLI parameter using typer.Option().\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/options/name.md#2025-04-14_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndef main(user_name: Annotated[str, typer.Option(\"--name\", \"-n\")] = None):\n    if user_name:\n        typer.echo(f\"Hello {user_name}\")\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Setting Program Name in __main__.py for Typer CLI\nDESCRIPTION: Updates the __main__.py implementation to specify a program name, which improves the help text when the package is invoked as a module with `python -m`.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/package.md#2025-04-14_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfrom .main import app\napp(prog_name=\"rick-portal-gun\")\n```\n\n----------------------------------------\n\nTITLE: Installing Typer with pip\nDESCRIPTION: Command to install the Typer package using pip. This installs Typer with its standard dependencies including rich and shellingham.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/index.md#2025-04-14_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\npip install typer\n```\n\n----------------------------------------\n\nTITLE: Single Command CLI Application in Python with Typer\nDESCRIPTION: A basic example showing a single command CLI application that takes a NAME argument and greets the user. The function is automatically treated as the main CLI application.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/commands/one-or-multiple.md#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef main(name: str):\n    print(f\"Hello {name}\")\n```\n\n----------------------------------------\n\nTITLE: Overwriting Command Help in Typer\nDESCRIPTION: Shows how to override default docstring help text by passing a help parameter directly to the command decorator.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/commands/help.md#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@app.command(help=\"Create a new user with USERNAME.\")\ndef create(username: str):\n    \"\"\"Some internal utility function to create.\"\"\"\n\n@app.command(help=\"Delete a user with USERNAME.\")\ndef delete(username: str):\n```\n\n----------------------------------------\n\nTITLE: Contributing Guidelines Documentation\nDESCRIPTION: Markdown formatted documentation explaining various ways to help and contribute to the Typer project, including GitHub stars, issue management, code reviews, and pull requests.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/help-typer.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Help Typer - Get Help\n\nAre you liking **Typer**?\n\nWould you like to help Typer, other users, and the author?\n\nOr would you like to get help with **Typer**?\n\nThere are very simple ways to help (several involve just one or two clicks).\n\nAnd there are several ways to get help too.\n```\n\n----------------------------------------\n\nTITLE: Rich Markup for Styled Text Output\nDESCRIPTION: Shows how to use Rich's markup syntax to add colors and styles to text output in a Typer application.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/printing.md#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom rich import print\n\n\ndef main():\n    print(\n        \"[bold red]Alert![/bold red] [green]Portal gun[/green] shooting! 💥\"\n    )\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Running the Code Formatting Script\nDESCRIPTION: Bash command to run the formatting script that cleans and formats all code, including auto-sorting imports.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/contributing.md#2025-04-14_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ bash scripts/format.sh\n```\n\n----------------------------------------\n\nTITLE: Setting Explicit Name and Help in Typer Constructor\nDESCRIPTION: Example showing how to explicitly set the name and help text when creating a Typer app, which takes precedence over inferred values.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/subcommands/name-and-help.md#2025-04-14_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nusers_app = typer.Typer(name=\"exp-users\", help=\"Explicit help.\")\n```\n\n----------------------------------------\n\nTITLE: Installing Typer with pip in console\nDESCRIPTION: This snippet shows how to install Typer using pip in a console environment. It includes the successful installation message showing related packages like click, shellingham, and rich.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/install.md#2025-04-14_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ pip install typer\n---> 100%\nSuccessfully installed typer click shellingham rich\n```\n\n----------------------------------------\n\nTITLE: Manual Documentation Server Setup\nDESCRIPTION: Alternative commands to manually start the MkDocs documentation server by navigating to the docs directory and running mkdocs serve.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/contributing.md#2025-04-14_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ cd docs/\n$ mkdocs serve --dev-addr 8008\n```\n\n----------------------------------------\n\nTITLE: Installing Typer Package with pip\nDESCRIPTION: Command to install Typer and its dependencies (rich and shellingham) using pip package manager.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/README.md#2025-04-14_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ pip install typer\n---> 100%\nSuccessfully installed typer rich shellingham\n```\n\n----------------------------------------\n\nTITLE: Simple Python Function Example\nDESCRIPTION: Basic Python function that can be run with Typer CLI without explicit Typer usage\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/typer-command.md#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef main(name: str = \"World\"):\n    \"\"\"\n    Say hi to someone, by default to the World.\n    \"\"\"\n    print(f\"Hello {name}\")\n```\n\n----------------------------------------\n\nTITLE: Using Default Long Name with Short Option in Python with Typer\nDESCRIPTION: Shows how to retain the default long option name (--user-name) while adding a short option name (-n) using typer.Option().\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/options/name.md#2025-04-14_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ndef main(user_name: Annotated[str, typer.Option(\"--user-name\", \"-n\")] = None):\n    if user_name:\n        typer.echo(f\"Hello {user_name}\")\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Installing Typer without extra dependencies using pip\nDESCRIPTION: This code snippet demonstrates how to install Typer without extra dependencies using pip. It's meant for advanced users who want to opt out of default extra dependencies.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/install.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install typer\n```\n\n----------------------------------------\n\nTITLE: Setting Help Text with Callback Parameter\nDESCRIPTION: Example showing how to set help text by passing a callback function when creating a Typer app.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/subcommands/name-and-help.md#2025-04-14_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\ndef users_callback():\n    \"\"\"\n    Manage users in the app.\n    \"\"\"\n    pass\n\nusers_app = typer.Typer(callback=users_callback)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Python Type Hints in Typer\nDESCRIPTION: Example showing how to declare function parameters with type hints, including required string parameter, boolean with default value, and optional string parameter. These type hints enable editor autocompletion and Typer's functionality.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/index.md#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Optional\n\ndef type_example(name: str, formal: bool = False, intro: Optional[str] = None):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining Only Short Option Name in Python with Typer\nDESCRIPTION: Demonstrates how to define only a short option name (-n) without any long option names using typer.Option().\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/options/name.md#2025-04-14_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ndef main(user_name: Annotated[str, typer.Option(\"-n\")] = None):\n    if user_name:\n        typer.echo(f\"Hello {user_name}\")\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Creating False-Only Boolean CLI Options\nDESCRIPTION: Demonstrates how to define a boolean option where only the negative value has a flag, while the positive value is the default without a flag.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/parameter-types/bool.md#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\n\ndef main(production: bool = typer.Option(True, \" /-d, --demo\")):\n    if production:\n        print(\"Running in production\")\n    else:\n        print(\"Running demo\")\n\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Creating a Broken Typer Application with Type Error\nDESCRIPTION: Example code showing a Typer application with a type error where a string is attempted to be added to an integer, which will raise an exception.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/exceptions.md#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\n\ndef main(name: str = \"morty\"):\n    print(name + 3)\n\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Installing Typer Package\nDESCRIPTION: Basic pip install command for Typer with CLI support\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/typer-command.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install typer\n```\n\n----------------------------------------\n\nTITLE: Printing CLI Parameters to Standard Error\nDESCRIPTION: Example showing how to print raw CLI parameters to standard error using Rich console with stderr=True to avoid interfering with autocompletion output\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/options-autocompletion.md#2025-04-14_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List\nfrom rich.console import Console\n\nconsole = Console(stderr=True)\n\n\ndef complete_name(\n    args: List[str],\n) -> None:\n    console.print(args)\n```\n\n----------------------------------------\n\nTITLE: Installing Typer Package with CLI Command\nDESCRIPTION: Command to install the recommended typer package which includes the typer command functionality that was previously in typer-cli.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/typer-cli/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install typer\n```\n\n----------------------------------------\n\nTITLE: Adding Help Text to CLI Argument\nDESCRIPTION: Demonstrates how to add help text to a CLI argument using the help parameter in typer.Argument()\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/arguments/help.md#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\ndef main(name: str = typer.Argument(..., help=\"The name of the user to greet\")):\n    typer.echo(f\"Hello {name}\")\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Coverage Report\nDESCRIPTION: Bash command to run all tests and generate HTML coverage reports that can be viewed in a browser to identify code regions covered by tests.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/contributing.md#2025-04-14_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ bash scripts/test-cov-html.sh\n```\n\n----------------------------------------\n\nTITLE: Installing Typer with all dependencies via pip\nDESCRIPTION: Command for installing Typer with all optional dependencies, including Rich which provides enhanced terminal formatting and display features.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/release-notes.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install \"typer[all]\"\n```\n\n----------------------------------------\n\nTITLE: Creating a README for a Python CLI Package\nDESCRIPTION: A simple README markdown file for the portal gun CLI application. It provides a basic title and description for the project documentation.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/package.md#2025-04-14_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n# Portal Gun\n\nThe awesome Portal Gun\n```\n\n----------------------------------------\n\nTITLE: Installing MkDocs Material Insiders from GitHub\nDESCRIPTION: This Git URL installs a specific version of MkDocs Material Insiders from a private GitHub repository. It requires a token for authentication.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/requirements-docs-insiders.txt#2025-04-14_snippet_0\n\nLANGUAGE: git\nCODE:\n```\ngit+https://${TOKEN}@github.com/squidfunk/mkdocs-material-insiders.git@9.5.30-insiders-4.53.11\n```\n\n----------------------------------------\n\nTITLE: Deprecating Commands in Typer\nDESCRIPTION: Demonstrates how to mark a command as deprecated using the deprecated parameter in the command decorator.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/commands/help.md#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.command(deprecated=True)\ndef delete(username: str):\n    \"\"\"Delete a user.\n    This is deprecated and will stop being supported soon.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Referencing Python Project Configuration File\nDESCRIPTION: Reference to the Poetry configuration file used for Python package metadata and dependencies.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/package.md#2025-04-14_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\npyproject.toml\n```\n\n----------------------------------------\n\nTITLE: Installing Custom MkDocstrings Python Plugin from GitHub\nDESCRIPTION: This Git URL installs a custom MkDocstrings Python plugin from a private GitHub repository. It requires a token for authentication.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/requirements-docs-insiders.txt#2025-04-14_snippet_2\n\nLANGUAGE: git\nCODE:\n```\ngit+https://${TOKEN}@github.com/pawamoy-insiders/mkdocstrings-python.git\n```\n\n----------------------------------------\n\nTITLE: Manual Progress Bar Updates in Typer\nDESCRIPTION: Illustrates how to manually update a Typer progress bar when processing occurs in irregular intervals. This is useful for batch processing or when progress can't be determined by simple iteration.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/progressbar.md#2025-04-14_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nimport typer\nimport time\n\ndef main():\n    total = 1000\n    with typer.progressbar(length=total, label=\"Batches\") as progress:\n        batch_size = 100\n        for _ in range(0, total, batch_size):\n            # Fake processing time\n            time.sleep(0.1)\n            # Update progress\n            progress.update(batch_size)\n    \n    typer.echo(f\"Processed {total} things in batches.\")\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Required CLI Argument Using Old Syntax\nDESCRIPTION: Using typer.Argument() as the default value to create a required CLI argument.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/arguments/optional.md#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef main(name: str = typer.Argument()):\n    print(f\"Hello {name}!\")\n```\n\n----------------------------------------\n\nTITLE: Using Append Mode with FileText in Typer\nDESCRIPTION: Shows how to customize the file open mode by using mode='a' (append) with typer.FileText. This allows adding content to the end of a file instead of overwriting it, which is the default behavior with FileTextWrite.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/parameter-types/file.md#2025-04-14_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nimport typer\n\n\ndef main(config: typer.FileText = typer.Option(..., mode=\"a\")):\n    config.write(\"This is a single line\\n\")\n    typer.echo(\"Config line written\")\n\n\nif __name__ == \"__main__\":\n    typer.run(main)\n```\n\n----------------------------------------\n\nTITLE: Overriding Callback when Adding Sub-Typer in Python\nDESCRIPTION: This code demonstrates how to override a callback when adding a sub-Typer using app.add_typer(). This method has the highest priority and will override callbacks defined elsewhere.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/subcommands/callback-override.md#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef callback_for_add_typer():\n    print(\"I have the high land! Running users command\")\n\napp.add_typer(users_app, name=\"users\", callback=callback_for_add_typer)\n```\n\n----------------------------------------\n\nTITLE: Using Rich print for Structured Data Output\nDESCRIPTION: Demonstrates how to use Rich's print function to display structured data with automatic color and formatting.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/printing.md#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom rich import print\n\ndata = {\n    \"name\": \"Rick\",\n    \"age\": 42,\n    \"items\": [{\"name\": \"Portal Gun\"}, {\"name\": \"Plumbus\"}],\n    \"active\": True,\n    \"affiliation\": None,\n}\n\n\ndef main():\n    print(\"Here's the data\")\n    print(data)\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Printing Hello World in Python\nDESCRIPTION: A simple example of using Python's built-in print() function to display 'Hello World' in a Typer application.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/printing.md#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nprint(\"Hello World\")\n```\n\n----------------------------------------\n\nTITLE: Implementing __main__.py for Python Module Execution with Typer\nDESCRIPTION: Creates a simple __main__.py file that imports and executes a Typer app from the main module, enabling package invocation with `python -m`.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/package.md#2025-04-14_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom .main import app\napp()\n```\n\n----------------------------------------\n\nTITLE: Main Application Entry Point\nDESCRIPTION: Standard Python main block for executing the Typer application.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/exceptions.md#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == \"__main__\":\n```\n\n----------------------------------------\n\nTITLE: Implementing Users Package Init\nDESCRIPTION: Initializes the users package by combining add and delete commands into a single Typer app instance.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/one-file-per-command.md#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport typer\nfrom mycli.users.add import app as add_app\nfrom mycli.users.delete import app as delete_app\n\nusers_app = typer.Typer()\nusers_app.add_typer(add_app)\nusers_app.add_typer(delete_app)\n```\n\n----------------------------------------\n\nTITLE: Basic Typer CLI Application\nDESCRIPTION: Simple Typer application that takes a name and city parameter and prints a greeting message.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/testing.md#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\napp = typer.Typer()\n\n@app.command()\ndef main(name: str, city: str):\n    print(f\"Hello {name}\")\n    print(f\"Let's have a coffee in {city}\")\n\nif __name__ == \"__main__\":\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Building a Town Management CLI with Typer in Python\nDESCRIPTION: A CLI application for town management with found and burn commands. This standalone script demonstrates how to create command functions with Typer decorators and string parameters.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/subcommands/nested-subcommands.md#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\napp = typer.Typer()\n\n\n@app.command()\ndef found(town_name: str):\n    \"\"\"Found a new town.\"\"\"\n    print(f\"Founding town: {town_name}\")\n\n\n@app.command()\ndef burn(town_name: str):\n    \"\"\"Burn a town.\"\"\"\n    print(f\"Burning town: {town_name}\")\n\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Git Remote Commands in Console\nDESCRIPTION: This snippet shows various git remote commands to illustrate the concept of subcommands. It demonstrates listing remotes, adding a new remote, and viewing verbose output.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/subcommands/index.md#2025-04-14_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n// git remote alone shows the current remote repositories\n$ git remote\n\norigin\n\n// Use -v to make it verbose and show more info\n$ git remote -v\n\norigin  git@github.com:yourusername/typer.git (fetch)\norigin  git@github.com:yourusername/typer.git (push)\n\n// git remote add takes 2 CLI arguments, a name and URL\n$ git remote add upstream https://github.com/fastapi/typer.git\n\n// Doesn't output anything, but now you have another remote repository called upstream\n\n// Now check again\n$ git remote -v\n\norigin  git@github.com:yourusername/typer.git (fetch)\norigin  git@github.com:yourusername/typer.git (push)\nupstream        https://github.com/fastapi/typer.git (fetch)\nupstream        https://github.com/fastapi/typer.git (push)\n```\n\n----------------------------------------\n\nTITLE: Displaying Command Help with Epilog in Console\nDESCRIPTION: This console output demonstrates the result of running the command with the --help option, showing the full help text including the added epilog at the bottom.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/commands/help.md#2025-04-14_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ python main.py --help\n\n Usage: main.py [OPTIONS] USERNAME                            \n                                                                     \n Create a new user. ✨\n\n╭─ Arguments ───────────────────────────────────────────────────────╮\n│ *    username      TEXT  [default: None] [required]               │\n╰───────────────────────────────────────────────────────────────────╯\n╭─ Options ─────────────────────────────────────────────────────────╮\n│ --install-completion          Install completion for the current  │\n│                               shell.                              │\n│ --show-completion             Show completion for the current     │\n│                               shell, to copy it or customize the  │\n│                               installation.                       │\n│ --help                        Show this message and exit.         │\n╰───────────────────────────────────────────────────────────────────╯\n\n Made with ❤ in Venus\n```\n\n----------------------------------------\n\nTITLE: Full Exception Trace Output Example\nDESCRIPTION: Example console output showing the complete exception stack trace when pretty_exceptions_short is set to False. Displays the full call stack including local variables and framework internals.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/exceptions.md#2025-04-14_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ python main.py\n\n╭──────────────── Traceback (most recent call last) ────────────────╮\n│ /home/user/code/superapp/main.py:12 in <module>                   │\n│                                                                   │\n│    9                                                              │\n│   10                                                              │\n│   11 if __name__ == \"__main__\":                                   │\n│ ❱ 12 │   app()                                                    │\n│   13                                                              │\n│                                                                   │\n│ ╭─────────────────────────── locals ────────────────────────────╮ │\n│ │ __annotations__ = {}                                          │ │\n│ │    __builtins__ = <module 'builtins' (built-in)>              │ │\n│ │      __cached__ = None                                        │ │\n│ │         __doc__ = None                                        │ │\n│ │        __file__ = 'main.py'                                   │ │\n│ │      __loader__ = <_frozen_importlib_external.SourceFileLoad… │ │\n│ │                   object at 0x7f047db1c050>                   │ │\n│ │        __name__ = '__main__'                                  │ │\n│ │     __package__ = None                                        │ │\n│ │        __spec__ = None                                        │ │\n│ │             app = <typer.main.Typer object at 0x7f047db51d90> │ │\n│ │            main = <function main at 0x7f047db56830>           │ │\n│ │           typer = <module 'typer' from                        │ │\n│ │                   '/home/user/code/superapp/env/lib/python3.…' │ │\n│ ╰───────────────────────────────────────────────────────────────╯ │\n```\n\n----------------------------------------\n\nTITLE: Sample Typer Application for Testing\nDESCRIPTION: A simple Typer application with two commands (hello and goodbye) that can be used to test shell completion functionality.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/contributing.md#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\napp = typer.Typer()\n\n\n@app.command()\ndef hello():\n    print(\"Hello\")\n\n\n@app.command()\ndef goodbye():\n    print(\"Goodbye\")\n\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Team Members Template Loop in Markdown/Jinja\nDESCRIPTION: A Jinja template loop that renders a list of team members with their GitHub avatars and usernames. The template iterates through a 'members' array and creates a user card with a link to each member's GitHub profile.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/management.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% for user in members[\"members\"] %}\n\n<div class=\"user\"><a href=\"https://github.com/{{ user.login }}\" target=\"_blank\"><div class=\"avatar-wrapper\"><img src=\"https://github.com/{{ user.login }}.png\"/></div><div class=\"title\">@{{ user.login }}</div></a></div>\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Installing Typer CLI Completion\nDESCRIPTION: Command to install shell completion for Typer CLI, which enables autocompletion for Typer commands in the terminal.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/contributing.md#2025-04-14_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ typer --install-completion\n\nzsh completion installed in /home/user/.bashrc.\nCompletion will take effect once you restart the terminal.\n```\n\n----------------------------------------\n\nTITLE: Overriding Help Text in Callback Decorator\nDESCRIPTION: Example showing how to override the help text using the callback decorator, which takes precedence over values set in the Typer constructor.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/subcommands/name-and-help.md#2025-04-14_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\n@users_app.callback(help=\"Help from callback for users.\")\n```\n\n----------------------------------------\n\nTITLE: Command Order in Typer CLI Applications\nDESCRIPTION: Demonstrates how the order of command definitions in the code affects the order they appear in the help text. Commands are displayed in the order they are defined.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/commands/index.md#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\napp = typer.Typer()\n\n@app.command()\ndef delete():\n    print(\"Deleting user: Hiro Hamada\")\n\n@app.command()\ndef create():\n    print(\"Creating user: Hiro Hamada\")\n\nif __name__ == \"__main__\":\n    app()\n```\n\n----------------------------------------\n\nTITLE: Updating Command Group Naming in Typer (Python)\nDESCRIPTION: Demonstrates the breaking change in Typer where auto-naming of command groups based on callback function names is removed. Users now need to explicitly set the command group name when using add_typer().\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/release-notes.md#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\napp = typer.Typer()\nusers_app = typer.Typer()\n\napp.add_typer(users_app)\n\n\n@users_app.callback()\ndef users():  # <-- This was the inferred command group name\n    \"\"\"\n    Manage users in the app.\n    \"\"\"\n\n\n@users_app.command()\ndef create(name: str):\n    print(f\"Creating user: {name}\")\n```\n\nLANGUAGE: python\nCODE:\n```\nimport typer\n\napp = typer.Typer()\nusers_app = typer.Typer()\n\napp.add_typer(users_app, name=\"users\")  # <-- Explicitly set the command group name\n\n\n@users_app.callback()\ndef users():\n    \"\"\"\n    Manage users in the app.\n    \"\"\"\n\n\n@users_app.command()\ndef create(name: str):\n    print(f\"Creating user: {name}\")\n```\n\n----------------------------------------\n\nTITLE: MultiApp Hello Subcommand Usage\nDESCRIPTION: Usage syntax for the hello subcommand with options for name and age parameters\nSOURCE: https://github.com/fastapi/typer.git/blob/master/tests/assets/cli/multiapp-docs-title.md#2025-04-14_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ multiapp sub hello [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Using the bye subcommand\nDESCRIPTION: Demonstrates how to use the 'bye' subcommand which provides a farewell message.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/tests/assets/cli/multiapp-docs.md#2025-04-14_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ multiapp sub bye [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Declaring Integer CLI Parameter in Python with Typer\nDESCRIPTION: Demonstrates how to declare an integer CLI parameter using Python type hints with Typer. This simple syntax allows for automatic CLI argument parsing and type checking.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/README.md#2025-04-14_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\ntotal: int\n```\n\n----------------------------------------\n\nTITLE: Updating Package Version in __init__.py\nDESCRIPTION: Sets the package version in the __init__.py file to match the version specified in pyproject.toml for consistent versioning.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/docs/tutorial/package.md#2025-04-14_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\n__version__ = '0.2.0'\n```\n\n----------------------------------------\n\nTITLE: Installing FastAPI/Typer Development Dependencies\nDESCRIPTION: Configures development environment dependencies including local package install, test requirements, documentation requirements and pre-commit hooks.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/requirements.txt#2025-04-14_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n-e .\n\n-r requirements-tests.txt\n-r requirements-docs.txt\n\npre-commit >=2.17.0,<5.0.0\n```\n\n----------------------------------------\n\nTITLE: Package Dependencies Configuration\nDESCRIPTION: Defines Python package dependencies with version constraints. Uses semver format to specify compatible versions.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/requirements-github-actions.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nPyGithub>=2.3.0,<3.0.0\npydantic>=2.5.3,<3.0.0\npydantic-settings>=2.1.0,<3.0.0\nhttpx>=0.27.0,<0.29.0\nsmokeshow\n```\n\n----------------------------------------\n\nTITLE: Installing Custom Griffe Plugin from GitHub\nDESCRIPTION: This Git URL installs a custom Griffe plugin for handling deprecated typing from a private GitHub repository. It requires a token for authentication.\nSOURCE: https://github.com/fastapi/typer.git/blob/master/requirements-docs-insiders.txt#2025-04-14_snippet_1\n\nLANGUAGE: git\nCODE:\n```\ngit+https://${TOKEN}@github.com/pawamoy-insiders/griffe-typing-deprecated.git\n```"
  }
]