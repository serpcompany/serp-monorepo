[
  {
    "owner": "googlechrome",
    "repo": "chrome-extensions-samples",
    "content": "TITLE: Manifest file background configuration\nDESCRIPTION: This diff snippet shows how to declare the service worker as an ES Module in the manifest.json file. This is necessary to import the script generated by wasm-pack.\nSOURCE: https://github.com/googlechrome/chrome-extensions-samples/blob/main/functional-samples/cookbook.wasm-helloworld-print/README.md#_snippet_2\n\nLANGUAGE: Diff\nCODE:\n```\n // manifest.json\n ...\n \"background\": {\n     \"service_worker\": \"background.js\",\n+    \"type\": \"module\"\n },\n ...\n```\n\n----------------------------------------\n\nTITLE: Install wasm-pack using cargo\nDESCRIPTION: Installs the wasm-pack tool using cargo, Rust's package manager. wasm-pack is used to build Rust code into WebAssembly modules that can be used in web applications and extensions.\nSOURCE: https://github.com/googlechrome/chrome-extensions-samples/blob/main/functional-samples/cookbook.wasm-helloworld-print-nomodule/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo install wasm-pack\n```\n\n----------------------------------------\n\nTITLE: Install wasm-pack using cargo\nDESCRIPTION: This command installs the wasm-pack tool using cargo, the Rust package manager. Wasm-pack is used to build Rust code into WebAssembly modules.\nSOURCE: https://github.com/googlechrome/chrome-extensions-samples/blob/main/functional-samples/cookbook.wasm-helloworld-print/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ncargo install wasm-pack\n```\n\n----------------------------------------\n\nTITLE: Build WASM using wasm-pack\nDESCRIPTION: This command builds the WASM module from the Rust source code in the 'wasm' directory. The '--target web' flag specifies that the output should be compatible with web browsers.\nSOURCE: https://github.com/googlechrome/chrome-extensions-samples/blob/main/functional-samples/cookbook.wasm-helloworld-print/README.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\ncd wasm\nwasm-pack build --target web\n```\n\n----------------------------------------\n\nTITLE: Build WASM with wasm-pack\nDESCRIPTION: Builds the WASM module using wasm-pack, targeting the `no-modules` configuration. This configuration generates a WASM file suitable for use in environments without ES module support.\nSOURCE: https://github.com/googlechrome/chrome-extensions-samples/blob/main/functional-samples/cookbook.wasm-helloworld-print-nomodule/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd wasm\nwasm-pack build --target no-modules\n```\n\n----------------------------------------\n\nTITLE: Subscribing with userVisibleOnly set to false in JavaScript\nDESCRIPTION: This snippet demonstrates how to subscribe to push notifications with the `userVisibleOnly` option set to `false`. This allows the extension to receive push messages without being required to display a notification to the user. This is possible in Chrome 132+ without the `notification` permission.\nSOURCE: https://github.com/googlechrome/chrome-extensions-samples/blob/main/functional-samples/cookbook.push/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait subscribeUserVisibleOnlyFalse();\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies\nDESCRIPTION: This command uses npm to install the necessary dependencies for the Gemini API client. It is a prerequisite for using the API in the extension.\nSOURCE: https://github.com/googlechrome/chrome-extensions-samples/blob/main/functional-samples/ai.gemini-in-the-cloud/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Build JS Bundle\nDESCRIPTION: This command compiles the JavaScript bundle for the sidepanel implementation. This is necessary for the extension to function correctly.\nSOURCE: https://github.com/googlechrome/chrome-extensions-samples/blob/main/functional-samples/ai.gemini-in-the-cloud/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Setting Google Analytics Measurement ID and API Secret in JavaScript\nDESCRIPTION: This code snippet defines constants for the Google Analytics Measurement ID and API Secret. These values are required to send data to Google Analytics 4 using the Measurement Protocol. Replace '<measurement_id>' and '<api_secret>' with your actual credentials obtained from Google Analytics.\nSOURCE: https://github.com/googlechrome/chrome-extensions-samples/blob/main/functional-samples/tutorial.google-analytics/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst MEASUREMENT_ID = '<measurement_id>';\nconst API_SECRET = '<api_secret>';\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting up Chrome Extension Samples\nDESCRIPTION: This shell script snippet guides contributors in cloning their forked repository, navigating into the project directory, and installing necessary dependencies using npm. This setup is essential before making any changes or contributions to the project.\nSOURCE: https://github.com/googlechrome/chrome-extensions-samples/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: Shell Script\nCODE:\n```\n# clone your fork to your local machine\ngit clone https://github.com/your-fork/chrome-extensions-samples.git\n\ncd chrome-extensions-samples\n\n# install dependencies\nnpm install\n```"
  }
]