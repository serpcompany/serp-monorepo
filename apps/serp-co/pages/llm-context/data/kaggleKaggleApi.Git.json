[
  {
    "owner": "kaggle",
    "repo": "kaggle-api.git",
    "content": "TITLE: Installing Kaggle API via pip\nDESCRIPTION: Command to install the Kaggle API using pip package manager. User-level installation is recommended to avoid permission issues, especially on Mac/Linux systems.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install kaggle\n```\n\n----------------------------------------\n\nTITLE: Listing Competitions with Kaggle API in Python\nDESCRIPTION: This code snippet demonstrates how to use the Kaggle API to list available competitions with various filtering options. It supports filtering by group, category, sorting, pagination, and searching for specific terms.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/KaggleApi.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport kaggle\nfrom kaggle.rest import ApiException\nfrom pprint import pprint\n\n# Configure HTTP basic authorization: basicAuth\nconfiguration = kaggle.Configuration()\nconfiguration.username = 'YOUR_USERNAME'\nconfiguration.password = 'YOUR_PASSWORD'\n\n# create an instance of the API class\napi_instance = kaggle.KaggleApi(kaggle.ApiClient(configuration))\ngroup = 'general' # str | Filter competitions by a particular group (optional) (default to general)\ncategory = 'all' # str | Filter competitions by a particular category (optional) (default to all)\nsort_by = 'latestDeadline' # str | Sort the results (optional) (default to latestDeadline)\npage = 1 # int | Page number (optional) (default to 1)\nsearch = '' # str | Search terms (optional) (default to )\n\ntry:\n    # List competitions\n    api_response = api_instance.competitions_list(group=group, category=category, sort_by=sort_by, page=page, search=search)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling KaggleApi->competitions_list: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Downloading Dataset File with Kaggle API\nDESCRIPTION: This snippet shows how to download a dataset file using the Kaggle API. It sets up the API client with authentication, specifies the dataset owner and slug, and optionally includes a version number.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/KaggleApi.md#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n# Configure HTTP basic authorization: basicAuth\nconfiguration = kaggle.Configuration()\nconfiguration.username = 'YOUR_USERNAME'\nconfiguration.password = 'YOUR_PASSWORD'\n\n# create an instance of the API class\napi_instance = kaggle.KaggleApi(kaggle.ApiClient(configuration))\nowner_slug = 'owner_slug_example' # str | Dataset owner\ndataset_slug = 'dataset_slug_example' # str | Dataset name\ndataset_version_number = 'dataset_version_number_example' # str | Dataset version number (optional)\n\ntry:\n    # Download dataset file\n    api_response = api_instance.datasets_download(owner_slug, dataset_slug, dataset_version_number=dataset_version_number)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling KaggleApi->datasets_download: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Listing Datasets with Kaggle API\nDESCRIPTION: This command lists available datasets on Kaggle with various filtering and sorting options. It supports pagination and CSV output format.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/README.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nusage: kaggle datasets list [-h] [--sort-by SORT_BY] [--min-size MIN_SIZE] [--max-size MAX_SIZE] [--file-type FILE_TYPE] [--license LICENSE_NAME] [--tags TAG_IDS] [-s SEARCH] [-m] [--user USER] [-p PAGE] [-v]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --sort-by SORT_BY     Sort list results. Default is 'hottest'. Valid options are 'hottest', 'votes', 'updated', and 'active'\n  --max-size MAX_SIZE   Specify the maximum size of the dataset to return (bytes)\n  --min-size MIN_SIZE   Specify the minimum size of the dataset to return (bytes)\n  --file-type FILE_TYPE Search for datasets with a specific file type. Default is 'all'. Valid options are 'all', 'csv', 'sqlite', 'json', and 'bigQuery'. Please note that bigQuery datasets cannot be downloaded\n  --license LICENSE_NAME \n                        Search for datasets with a specific license. Default is 'all'. Valid options are 'all', 'cc', 'gpl', 'odb', and 'other'\n  --tags TAG_IDS        Search for datasets that have specific tags. Tag list should be comma separated                      \n  -s SEARCH, --search SEARCH\n                        Term(s) to search for\n  -m, --mine            Display only my items\n  --user USER           Find public datasets owned by a specific user or organization\n  -p PAGE, --page PAGE  Page number for results paging. Page size is 20 by default\n  -v, --csv             Print results in CSV format (if not set then print in table format)\n```\n\n----------------------------------------\n\nTITLE: Creating New Datasets with Kaggle API in Python\nDESCRIPTION: This code shows how to create a new dataset using the Kaggle API. It requires authentication and a DatasetNewRequest object that contains information about the dataset to be created.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/KaggleApi.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport kaggle\nfrom kaggle.rest import ApiException\nfrom pprint import pprint\n\n# Configure HTTP basic authorization: basicAuth\nconfiguration = kaggle.Configuration()\nconfiguration.username = 'YOUR_USERNAME'\nconfiguration.password = 'YOUR_PASSWORD'\n\n# create an instance of the API class\napi_instance = kaggle.KaggleApi(kaggle.ApiClient(configuration))\ndataset_new_request = kaggle.DatasetNewRequest() # DatasetNewRequest | Information for creating a new dataset\n\ntry:\n    # Create a new dataset\n    api_response = api_instance.datasets_create_new(dataset_new_request)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling KaggleApi->datasets_create_new: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Downloading Competition Data File with Kaggle API in Python\nDESCRIPTION: This code snippet demonstrates how to use the Kaggle API to download a specific file from a competition dataset. It creates an API instance, specifies the competition ID and filename, and handles exceptions when downloading the file.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/KaggleApi.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# create an instance of the API class\napi_instance = kaggle.KaggleApi(kaggle.ApiClient(configuration))\nid = 'id_example' # str | Competition name\nfile_name = 'file_name_example' # str | Competition name\n\ntry:\n    # Download competition data file\n    api_response = api_instance.competitions_data_download_file(id, file_name)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling KaggleApi->competitions_data_download_file: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Listing Datasets with Kaggle API\nDESCRIPTION: This snippet demonstrates how to list datasets using the Kaggle API with various filter options. It includes parameters for grouping, sorting, file type, license, tags, search terms, and pagination.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/KaggleApi.md#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n# Configure HTTP basic authorization: basicAuth\nconfiguration = kaggle.Configuration()\nconfiguration.username = 'YOUR_USERNAME'\nconfiguration.password = 'YOUR_PASSWORD'\n\n# create an instance of the API class\napi_instance = kaggle.KaggleApi(kaggle.ApiClient(configuration))\ngroup = 'public' # str | Display datasets by a particular group (optional) (default to public)\nsort_by = 'hottest' # str | Sort the results (optional) (default to hottest)\nsize = 'all' # str | (DEPRECATED). Please use --max-size and --min-size to filter dataset sizes. (optional) (default to all)\nfiletype = 'all' # str | Display datasets of a specific file type (optional) (default to all)\nlicense = 'all' # str | Display datasets with a specific license (optional) (default to all)\ntagids = 'tagids_example' # str | A comma separated list of tags to filter by (optional)\nsearch = '' # str | Search terms (optional) (default to )\nuser = 'user_example' # str | Display datasets by a specific user or organization (optional)\npage = 1 # int | Page number (optional) (default to 1)\nmax_size = 789 # int | Max Dataset Size (bytes) (optional)\nmin_size = 789 # int | Max Dataset Size (bytes) (optional)\n\ntry:\n    # List datasets\n    api_response = api_instance.datasets_list(group=group, sort_by=sort_by, size=size, filetype=filetype, license=license, tagids=tagids, search=search, user=user, page=page, max_size=max_size, min_size=min_size)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling KaggleApi->datasets_list: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Creating a New Dataset with Kaggle API\nDESCRIPTION: This command creates a new dataset on Kaggle. It requires a metadata file and supports options for public/private datasets, quiet mode, and handling of tabular files and directories.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/README.md#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nusage: kaggle datasets create [-h] [-p FOLDER] [-u] [-q] [-t] [-r {skip,zip,tar}]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -p FOLDER, --path FOLDER\n                        Folder for upload, containing data files and a special dataset-metadata.json file (https://github.com/Kaggle/kaggle-api/wiki/Dataset-Metadata). Defaults to current working directory\n  -u, --public          Create publicly (default is private)\n  -q, --quiet           Suppress printing information about the upload/download progress\n  -t, --keep-tabular    Do not convert tabular files to CSV (default is to convert)\n  -r {skip,zip,tar}, --dir-mode {skip,zip,tar}\n                        What to do with directories: \"skip\" - ignore; \"zip\" - compressed upload; \"tar\" - uncompressed upload\n```\n\n----------------------------------------\n\nTITLE: Downloading Competition Data File with Python Kaggle API\nDESCRIPTION: This code demonstrates how to download a specific competition data file using the Kaggle API. It shows the setup for authentication, creating an API instance, and using the competitions_data_download_file method with competition ID and filename parameters.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/KaggleApi.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport kaggle\nfrom kaggle.rest import ApiException\nfrom pprint import pprint\n\n# Configure HTTP basic authorization: basicAuth\nconfiguration = kaggle.Configuration()\nconfiguration.username = 'YOUR_USERNAME'\nconfiguration.password = 'YOUR_PASSWORD'\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Kaggle API Authentication\nDESCRIPTION: Bash commands to export Kaggle username and API key as environment variables for authentication without using the kaggle.json file.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport KAGGLE_USERNAME=datadinosaur\nexport KAGGLE_KEY=xxxxxxxxxxxxxx\n```\n\n----------------------------------------\n\nTITLE: Creating New Dataset Versions by ID with Kaggle API in Python\nDESCRIPTION: This code snippet shows how to create a new version of a dataset using its ID with the Kaggle API. It requires authentication and a DatasetNewVersionRequest object containing the version details.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/KaggleApi.md#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport kaggle\nfrom kaggle.rest import ApiException\nfrom pprint import pprint\n\n# Configure HTTP basic authorization: basicAuth\nconfiguration = kaggle.Configuration()\nconfiguration.username = 'YOUR_USERNAME'\nconfiguration.password = 'YOUR_PASSWORD'\n```\n\n----------------------------------------\n\nTITLE: Submitting a File to a Kaggle Competition\nDESCRIPTION: Command example showing how to submit a file to a Kaggle competition with a description message.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/README.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nkaggle competitions submit favorita-grocery-sales-forecasting \\\n    -f sample_submission_favorita.csv.7z -m \"My submission message\"\n```\n\n----------------------------------------\n\nTITLE: Checking Kernel Status with Kaggle API in Python\nDESCRIPTION: This snippet demonstrates how to check the status of the latest kernel version using the Kaggle API. It requires the kernel owner's username and the kernel slug. The code handles authentication and error handling.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/KaggleApi.md#2025-04-23_snippet_29\n\nLANGUAGE: python\nCODE:\n```\n# create an instance of the API class\napi_instance = kaggle.KaggleApi(kaggle.ApiClient(configuration))\nuser_name = 'user_name_example' # str | Kernel owner\nkernel_slug = 'kernel_slug_example' # str | Kernel name\n\ntry:\n    # Get the status of the latest kernel version\n    api_response = api_instance.kernel_status(user_name, kernel_slug)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling KaggleApi->kernel_status: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Creating Detailed Dataset Metadata in JSON\nDESCRIPTION: A comprehensive example of dataset-metadata.json, including optional fields like subtitle, description, resources with schema definitions, and keywords. This metadata provides more detailed information about the dataset and its contents.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/datasets_metadata.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"My Awesome Dataset\", \n  \"subtitle\": \"My awesomer subtitle\",\n  \"description\": \"My awesomest description\",\n  \"id\": \"timoboz/my-awesome-dataset\", \n  \"id_no\": 12345,\n  \"licenses\": [{\"name\": \"CC0-1.0\"}],\n  \"resources\": [\n    {\n      \"path\": \"my-awesome-data.csv\",\n      \"description\": \"This is my awesome data!\",\n      \"schema\": {\n        \"fields\": [\n          {\n            \"name\": \"StringField\",\n            \"description\": \"String field description\",\n            \"type\": \"string\"\n          },\n          {\n            \"name\": \"NumberField\",\n            \"description\": \"Number field description\",\n            \"type\": \"number\"\n          },\n          {\n            \"name\": \"DateTimeField\",\n            \"description\": \"Date time field description\",\n            \"type\": \"datetime\"\n          }\n        ]\n      }\n    },\n    {\n      \"path\": \"my-awesome-extra-file.txt\",\n      \"description\": \"This is my awesome extra file!\"\n    }\n  ],\n  \"keywords\": [\n    \"beginner\",\n    \"tutorial\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Competition Data Files with Kaggle API in Python\nDESCRIPTION: This code snippet demonstrates how to use the Kaggle API to list all files available in a competition dataset. It supports pagination with page tokens and page size parameters, and handles exceptions during the API call.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/KaggleApi.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport kaggle\nfrom kaggle.rest import ApiException\nfrom pprint import pprint\n\n# Configure HTTP basic authorization: basicAuth\nconfiguration = kaggle.Configuration()\nconfiguration.username = 'YOUR_USERNAME'\nconfiguration.password = 'YOUR_PASSWORD'\n\n# create an instance of the API class\napi_instance = kaggle.KaggleApi(kaggle.ApiClient(configuration))\nid = 'id_example' # str | Competition name\npage_token = 'page_token_example' # str | Page token for pagination (optional)\npage_size = 20 # int | Number of items per page (default 20) (optional) (default to 20)\n\ntry:\n    # List competition data files\n    api_response = api_instance.competitions_data_list_files(id, page_token=page_token, page_size=page_size)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling KaggleApi->competitions_data_list_files: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Kernel Commands Overview - Kaggle API\nDESCRIPTION: Command overview showing all available kernel operations in the Kaggle API including list, init, push, pull, output, and status commands.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/README.md#2025-04-23_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nusage: kaggle kernels [-h] {list,init,push,pull,output,status} ...\n\noptional arguments:\n  -h, --help            show this help message and exit\n\ncommands:\n  {list,init,push,pull,output,status}\n    list                List available kernels\n    init                Initialize metadata file for a kernel\n    push                Push new code to a kernel and run the kernel\n    pull                Pull down code from a kernel\n    output              Get data output from the latest kernel run\n    status              Display the status of the latest kernel run\n```\n\n----------------------------------------\n\nTITLE: Creating Model Metadata Configuration in JSON\nDESCRIPTION: Basic configuration template for model-metadata.json file that defines the core model properties including owner, title, slug, and visibility settings. This file is required for creating a new model on Kaggle.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/models_metadata.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ownerSlug\": \"INSERT_OWNER_SLUG_HERE\",\n  \"title\": \"INSERT_TITLE_HERE\",\n  \"slug\": \"INSERT_SLUG_HERE\",\n  \"subtitle\": \"\",\n  \"isPrivate\": true,\n  \"description\": \"Model Card Markdown, see below\",\n  \"publishTime\": \"\",\n  \"provenanceSources\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Dataset Version with Kaggle API\nDESCRIPTION: This command creates a new version of an existing Kaggle dataset. It requires a version message and supports options for handling files and directories, as well as deleting old versions.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/README.md#2025-04-23_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nusage: kaggle datasets version [-h] -m VERSION_NOTES [-p FOLDER] [-q] [-t]\n                               [-r {skip,zip,tar}] [-d]\n\nrequired arguments:\n  -m VERSION_NOTES, --message VERSION_NOTES\n                        Message describing the new version\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -p FOLDER, --path FOLDER\n                        Folder for upload, containing data files and a special dataset-metadata.json file (https://github.com/Kaggle/kaggle-api/wiki/Dataset-Metadata). Defaults to current working directory\n  -q, --quiet           Suppress printing information about the upload/download progress\n  -t, --keep-tabular    Do not convert tabular files to CSV (default is to convert)\n  -r {skip,zip,tar}, --dir-mode {skip,zip,tar}\n                        What to do with directories: \"skip\" - ignore; \"zip\" - compressed upload; \"tar\" - uncompressed upload\n  -d, --delete-old-versions\n                        Delete old versions of this dataset\n```\n\n----------------------------------------\n\nTITLE: Model Commands Overview - Kaggle API\nDESCRIPTION: Command overview showing available operations for Kaggle Models including get, list, init, and create commands.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/README.md#2025-04-23_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\nusage: kaggle models [-h]\n                     {get, list, init, create} ...\n\noptional arguments:\n  -h, --help            show this help message and exit\n\ncommands:\n  {get, list, init, create}\n    get                 Get the model\n    list                List models\n    init                Initialize metadata file for model creation\n    create              Create a new model\n```\n\n----------------------------------------\n\nTITLE: Creating New Model Instance Version with Kaggle API in Python\nDESCRIPTION: Example demonstrating creation of a new version for an existing model instance via Kaggle API. Takes parameters for model owner, slug, framework and instance details. Returns version creation response.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/KaggleApi.md#2025-04-23_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport kaggle\nfrom kaggle.rest import ApiException\nfrom pprint import pprint\n\n# Configure HTTP basic authorization: basicAuth\nconfiguration = kaggle.Configuration()\nconfiguration.username = 'YOUR_USERNAME'\nconfiguration.password = 'YOUR_PASSWORD'\n\n# create an instance of the API class\napi_instance = kaggle.KaggleApi(kaggle.ApiClient(configuration))\nowner_slug = 'owner_slug_example' # str | Model owner\nmodel_slug = 'model_slug_example' # str | Model slug\nframework = 'framework_example' # str | Model instance framework\ninstance_slug = 'instance_slug_example' # str | Model instance slug\nmodel_instance_new_version_request = kaggle.ModelInstanceNewVersionRequest() # ModelInstanceNewVersionRequest | Information for creating a new model instance version\n\ntry:\n    # Create a new model instance version\n    api_response = api_instance.models_create_instance_version(owner_slug, model_slug, framework, instance_slug, model_instance_new_version_request)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling KaggleApi->models_create_instance_version: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Creating New Dataset Versions with Kaggle API in Python\nDESCRIPTION: This code demonstrates how to create a new version of an existing dataset using the Kaggle API. It requires authentication, the dataset owner and name slugs, and a DatasetNewVersionRequest object with version details.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/KaggleApi.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport kaggle\nfrom kaggle.rest import ApiException\nfrom pprint import pprint\n\n# Configure HTTP basic authorization: basicAuth\nconfiguration = kaggle.Configuration()\nconfiguration.username = 'YOUR_USERNAME'\nconfiguration.password = 'YOUR_PASSWORD'\n\n# create an instance of the API class\napi_instance = kaggle.KaggleApi(kaggle.ApiClient(configuration))\nowner_slug = 'owner_slug_example' # str | Dataset owner\ndataset_slug = 'dataset_slug_example' # str | Dataset name\ndataset_new_version_request = kaggle.DatasetNewVersionRequest() # DatasetNewVersionRequest | Information for creating a new dataset version\n\ntry:\n    # Create a new dataset version\n    api_response = api_instance.datasets_create_version(owner_slug, dataset_slug, dataset_new_version_request)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling KaggleApi->datasets_create_version: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Model Instances Commands Overview - Kaggle API\nDESCRIPTION: Command overview showing all available operations for Kaggle Model Instances including get, init, create, delete, and update commands.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/README.md#2025-04-23_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\nusage: kaggle models instances [-h]\n                             {init, create, delete, update} ...\n\noptional arguments:\n  -h, --help            show this help message and exit\n\ncommands:\n  {get, init, create, delete}\n    get                 Get a model instance\n    init                Initialize metadata file for model instance creation\n    create              Create a new model instance\n    delete              Delete a model instance\n    update              Update a model instance\n```\n\n----------------------------------------\n\nTITLE: Initializing Model Metadata - Kaggle API\nDESCRIPTION: Command for initializing a model-metadata.json file which is required for model creation. Accepts a path parameter to specify where the file should be created.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/README.md#2025-04-23_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\nusage: kaggle models init [-h] [-p FOLDER]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -p FOLDER, --path FOLDER\n                        Folder to create the model-metadata.json file (https://github.com/Kaggle/kaggle-api/wiki/Model-Metadata). Defaults to current working directory\n```\n\n----------------------------------------\n\nTITLE: Managing Datasets with Kaggle API\nDESCRIPTION: This command provides various subcommands for managing Kaggle datasets, including listing, downloading, creating, and versioning datasets.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/README.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nusage: kaggle datasets [-h]\n                       {list,files,download,create,version,init,metadata, status} ...\n\noptional arguments:\n  -h, --help            show this help message and exit\n\ncommands:\n  {list,files,download,create,version,init,metadata, status}\n    list                List available datasets\n    files               List dataset files\n    download            Download dataset files\n    create              Create a new dataset\n    version             Create a new dataset version\n    init                Initialize metadata file for dataset creation\n    metadata            Download metadata about a dataset\n    status              Get the creation status for a dataset\n```\n\n----------------------------------------\n\nTITLE: Downloading All Competition Data Files with Kaggle API in Python\nDESCRIPTION: This code snippet demonstrates how to use the Kaggle API to download all files from a competition dataset. It creates an API instance, specifies the competition ID, and handles exceptions when downloading the files.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/KaggleApi.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport kaggle\nfrom kaggle.rest import ApiException\nfrom pprint import pprint\n\n# Configure HTTP basic authorization: basicAuth\nconfiguration = kaggle.Configuration()\nconfiguration.username = 'YOUR_USERNAME'\nconfiguration.password = 'YOUR_PASSWORD'\n\n# create an instance of the API class\napi_instance = kaggle.KaggleApi(kaggle.ApiClient(configuration))\nid = 'id_example' # str | Competition name\n\ntry:\n    # Download all competition data files\n    api_response = api_instance.competitions_data_download_files(id)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling KaggleApi->competitions_data_download_files: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Initializing Model Instance Metadata File\nDESCRIPTION: Command for initializing a metadata file for a new model instance. The -p option allows specifying the folder where the metadata file will be created.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/README.md#2025-04-23_snippet_38\n\nLANGUAGE: bash\nCODE:\n```\nusage: kaggle models instances init [-h] [-p FOLDER]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -p FOLDER, --path FOLDER\n                        Folder to create the model-instance-metadata.json file (https://github.com/Kaggle/kaggle-api/wiki/Model-Metadata). Defaults to current working directory\n```\n\n----------------------------------------\n\nTITLE: Listing Competition Submissions with Kaggle API in Python\nDESCRIPTION: This code snippet demonstrates how to use the Kaggle API to list your submissions for a specific competition. It supports pagination and handles exceptions that may occur during the API call.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/KaggleApi.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport kaggle\nfrom kaggle.rest import ApiException\nfrom pprint import pprint\n\n# Configure HTTP basic authorization: basicAuth\nconfiguration = kaggle.Configuration()\nconfiguration.username = 'YOUR_USERNAME'\nconfiguration.password = 'YOUR_PASSWORD'\n\n# create an instance of the API class\napi_instance = kaggle.KaggleApi(kaggle.ApiClient(configuration))\nid = 'id_example' # str | Competition name\npage = 1 # int | Page number (optional) (default to 1)\n\ntry:\n    # List competition submissions\n    api_response = api_instance.competitions_submissions_list(id, page=page)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling KaggleApi->competitions_submissions_list: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Pushing Kernels - Kaggle API\nDESCRIPTION: Command for pushing kernel code to Kaggle and running the kernel. Requires a path to a folder containing kernel-metadata.json and code files, with option to set timeout limits.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/README.md#2025-04-23_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nusage: kaggle kernels push [-h] -p FOLDER\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -t N, --timeout N     Limit the run time of a kernel to the given number  of seconds.\n                        The global maximum time will not be exceeded.\n  -p FOLDER, --path FOLDER\n                        Folder for upload, containing data files and a special kernel-metadata.json file (https://github.com/Kaggle/kaggle-api/wiki/Kernel-Metadata). Defaults to current working directory\n```\n\n----------------------------------------\n\nTITLE: Updating Models - Kaggle API\nDESCRIPTION: Command for updating an existing model on Kaggle. Requires a path to a folder containing the updated model-metadata.json file with the new configuration.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/README.md#2025-04-23_snippet_34\n\nLANGUAGE: bash\nCODE:\n```\nusage: kaggle models update [-h] [-p FOLDER]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -p FOLDER, --path FOLDER\n                        Folder containing the special model-metadata.json file (https://github.com/Kaggle/kaggle-api/wiki/Model-Metadata). Defaults to current working directory\n```\n\n----------------------------------------\n\nTITLE: Retrieving Competition Leaderboard with Kaggle API\nDESCRIPTION: This command fetches the leaderboard for a Kaggle competition. It offers options to show or download the leaderboard, specify output path, and control output format.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/README.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nusage: kaggle competitions leaderboard [-h] [-s] [-d] [-p PATH] [-v] [-q]\n                                       [competition]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  competition           Competition URL suffix (use \"kaggle competitions list\" to show options)\n                        If empty, the default competition will be used (use \"kaggle config set competition\")\"\n  -s, --show            Show the top of the leaderboard\n  -d, --download        Download entire leaderboard\n  -p PATH, --path PATH  Folder where file(s) will be downloaded, defaults to current working directory\n  -v, --csv             Print results in CSV format (if not set then print in table format)\n  -q, --quiet           Suppress printing information about the upload/download progress\n```\n\n----------------------------------------\n\nTITLE: Creating New Dataset Version with Kaggle API\nDESCRIPTION: This snippet demonstrates how to create a new version of a dataset using the Kaggle API. It initializes the API client, sets up the request parameters, and handles potential exceptions.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/KaggleApi.md#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n# create an instance of the API class\napi_instance = kaggle.KaggleApi(kaggle.ApiClient(configuration))\nid = 56 # int | Dataset ID\ndataset_new_version_request = kaggle.DatasetNewVersionRequest() # DatasetNewVersionRequest | Information for creating a new dataset version\n\ntry:\n    # Create a new dataset version by id\n    api_response = api_instance.datasets_create_version_by_id(id, dataset_new_version_request)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling KaggleApi->datasets_create_version_by_id: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Example of Creating a Model Instance\nDESCRIPTION: Example showing how to create a new model instance using a previously initialized metadata file located in a specific folder.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/README.md#2025-04-23_snippet_41\n\nLANGUAGE: bash\nCODE:\n```\nkaggle models instances create -p /path/to/modelinstance\n```\n\n----------------------------------------\n\nTITLE: Creating New Model Instance with Kaggle API in Python\nDESCRIPTION: Example showing how to create a new model instance through the Kaggle API. Takes parameters for model owner, slug and instance details in the request body. Returns creation response.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/KaggleApi.md#2025-04-23_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport kaggle\nfrom kaggle.rest import ApiException\nfrom pprint import pprint\n\n# Configure HTTP basic authorization: basicAuth\nconfiguration = kaggle.Configuration()\nconfiguration.username = 'YOUR_USERNAME'\nconfiguration.password = 'YOUR_PASSWORD'\n\n# create an instance of the API class\napi_instance = kaggle.KaggleApi(kaggle.ApiClient(configuration))\nowner_slug = 'owner_slug_example' # str | Model owner\nmodel_slug = 'model_slug_example' # str | Model slug\nmodel_new_instance_request = kaggle.ModelNewInstanceRequest() # ModelNewInstanceRequest | Information for creating a new model instance\n\ntry:\n    # Create a new model instance\n    api_response = api_instance.models_create_instance(owner_slug, model_slug, model_new_instance_request)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling KaggleApi->models_create_instance: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Initializing Dataset Metadata with Kaggle API\nDESCRIPTION: This command initializes a metadata file for dataset creation. It allows specifying the folder where the metadata file will be created.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/README.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nusage: kaggle datasets init [-h] [-p FOLDER]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -p FOLDER, --path FOLDER\n                        Folder where the special dataset-metadata.json file (https://github.com/Kaggle/kaggle-api/wiki/Dataset-Metadata) will be created. Defaults to current working directory\n```\n\n----------------------------------------\n\nTITLE: Example of Initializing Model Instance Metadata\nDESCRIPTION: Example showing how to initialize a model instance metadata file in a specific folder using the Kaggle API.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/README.md#2025-04-23_snippet_39\n\nLANGUAGE: bash\nCODE:\n```\nkaggle models instances init -p /path/to/modelinstance\n```\n\n----------------------------------------\n\nTITLE: Downloading Model Instance Version Files with Kaggle API in Python\nDESCRIPTION: Example demonstrating how to download files for a specific model instance version using the Kaggle API. Takes parameters for model owner, name, framework and instance details. Returns downloaded file content.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/KaggleApi.md#2025-04-23_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport kaggle\nfrom kaggle.rest import ApiException\nfrom pprint import pprint\n\n# Configure HTTP basic authorization: basicAuth\nconfiguration = kaggle.Configuration()\nconfiguration.username = 'YOUR_USERNAME'\nconfiguration.password = 'YOUR_PASSWORD'\n\n# create an instance of the API class\napi_instance = kaggle.KaggleApi(kaggle.ApiClient(configuration))\nowner_slug = 'owner_slug_example' # str | Model owner\nmodel_slug = 'model_slug_example' # str | Model name\nframework = 'framework_example' # str | Model instance framework\ninstance_slug = 'instance_slug_example' # str | Model instance slug\nversion_number = 'version_number_example' # str | Model instance version number\n\ntry:\n    # Download model instance version files\n    api_response = api_instance.model_instance_versions_download(owner_slug, model_slug, framework, instance_slug, version_number)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling KaggleApi->model_instance_versions_download: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Creating a New Model Instance Version\nDESCRIPTION: Command for creating a new version of an existing model instance. Requires the model instance URL suffix and supports options for specifying the folder containing model files, adding version notes, and controlling directory handling.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/README.md#2025-04-23_snippet_47\n\nLANGUAGE: bash\nCODE:\n```\nusage: kaggle models instances versions create [-h] [modelInstance] [-p FOLDER] [-n NOTES]\n\nrequired arguments:\n  modelInstance         Model Instance URL suffix in format <owner>/<model-name>/<framework>/<instance-slug>\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -p FOLDER, --path FOLDER\n                        Folder containing the model files to upload\n  -n, --version-notes NOTES\n                        Version notes to record for this new version\n  -q, --quiet           Suppress printing information about the upload progress\n  -r {skip,zip,tar}, --dir-mode {skip,zip,tar}\n                        What to do with directories: \"skip\" - ignore; \"zip\" - compressed upload; \"tar\" - uncompressed upload\n```\n\n----------------------------------------\n\nTITLE: Pushing New Kernel Version with Kaggle API in Python\nDESCRIPTION: This snippet shows how to push a new kernel version or create a new kernel using the Kaggle API. It requires a KernelPushRequest object containing the necessary information. The code handles authentication and error handling.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/KaggleApi.md#2025-04-23_snippet_28\n\nLANGUAGE: python\nCODE:\n```\n# create an instance of the API class\napi_instance = kaggle.KaggleApi(kaggle.ApiClient(configuration))\nkernel_push_request = kaggle.KernelPushRequest() # KernelPushRequest | Information for pushing a new kernel version\n\ntry:\n    # Push a new kernel version.  Can be used to create a new kernel and update an existing one.\n    api_response = api_instance.kernel_push(kernel_push_request)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling KaggleApi->kernel_push: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Listing Model Instance Version Files with Kaggle API in Python\nDESCRIPTION: Example showing how to use the Kaggle API to list files for a specific model instance version. Takes parameters for model owner, name, framework, instance details and pagination options. Returns file listing response.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/KaggleApi.md#2025-04-23_snippet_34\n\nLANGUAGE: python\nCODE:\n```\n# create an instance of the API class\napi_instance = kaggle.KaggleApi(kaggle.ApiClient(configuration))\nowner_slug = 'owner_slug_example' # str | Model owner\nmodel_slug = 'model_slug_example' # str | Model name\nframework = 'framework_example' # str | Model instance framework\ninstance_slug = 'instance_slug_example' # str | Model instance slug\nversion_number = 'version_number_example' # str | Model instance version number\npage_size = 20 # int | Number of items per page (default 20) (optional) (default to 20)\npage_token = 'page_token_example' # str | Page token for pagination (optional)\n\ntry:\n    # List model instance version files\n    api_response = api_instance.model_instance_version_files(owner_slug, model_slug, framework, instance_slug, version_number, page_size=page_size, page_token=page_token)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling KaggleApi->model_instance_version_files: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Downloading a Model Instance Version\nDESCRIPTION: Command for downloading a specific version of a model instance. Requires the model instance version URL suffix and supports options for specifying the download path, untarring downloaded files, and controlling download behavior.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/README.md#2025-04-23_snippet_49\n\nLANGUAGE: bash\nCODE:\n```\nusage: kaggle models instances versions download [-h] [-p PATH] [--untar] [-f] [-q] [modelInstanceVersion]\n\nrequired arguments:\n  modelInstanceVersion  Model Instance version URL suffix in format <owner>/<model-name>/<framework>/<instance-slug>/<version_number>\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -p PATH, --path PATH  Folder where file(s) will be downloaded, defaults to current working directory\n  --untar               Untar the downloaded file. Will delete the tar file when completed.\n  -f, --force           Skip check whether local version of file is up to date, force file download\n  -q, --quiet           Suppress printing information about the download progress\n```\n\n----------------------------------------\n\nTITLE: Submitting a Kernel to a Kaggle Code Competition\nDESCRIPTION: Command example showing how to submit a kernel (notebook) to a Kaggle code competition with version and message.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/README.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nkaggle competitions submit llms-you-cant-please-them-all \\\n    -k username/llms-can-t-please-all-submission -v 9 -f submission.csv -m \"My submission message\"'\n```\n\n----------------------------------------\n\nTITLE: Getting Dataset Metadata with Kaggle API - Python\nDESCRIPTION: Example code showing how to retrieve metadata for a dataset using the Kaggle API. Requires basic authentication and takes dataset owner and name as parameters.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/KaggleApi.md#2025-04-23_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport kaggle\nfrom kaggle.rest import ApiException\nfrom pprint import pprint\n\n# Configure HTTP basic authorization: basicAuth\nconfiguration = kaggle.Configuration()\nconfiguration.username = 'YOUR_USERNAME'\nconfiguration.password = 'YOUR_PASSWORD'\n\n# create an instance of the API class\napi_instance = kaggle.KaggleApi(kaggle.ApiClient(configuration))\nowner_slug = 'owner_slug_example' # str | Dataset owner\ndataset_slug = 'dataset_slug_example' # str | Dataset name\n\ntry:\n    # Get the metadata for a dataset\n    api_response = api_instance.metadata_get(owner_slug, dataset_slug)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling KaggleApi->metadata_get: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Pulling Latest Kernel Code with Kaggle API in Python\nDESCRIPTION: This snippet demonstrates how to pull the latest code from a Kaggle kernel using the API. It requires the kernel owner's username and the kernel slug. The code handles authentication and error handling.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/KaggleApi.md#2025-04-23_snippet_27\n\nLANGUAGE: python\nCODE:\n```\n# create an instance of the API class\napi_instance = kaggle.KaggleApi(kaggle.ApiClient(configuration))\nuser_name = 'user_name_example' # str | Kernel owner\nkernel_slug = 'kernel_slug_example' # str | Kernel name\n\ntry:\n    # Pull the latest code from a kernel\n    api_response = api_instance.kernel_pull(user_name, kernel_slug)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling KaggleApi->kernel_pull: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Submitting to Competition with Kaggle API in Python\nDESCRIPTION: This code snippet demonstrates how to use the Kaggle API to submit results to a competition. It requires a token identifying the uploaded submission file, a description of the submission, and the competition ID.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/KaggleApi.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport kaggle\nfrom kaggle.rest import ApiException\nfrom pprint import pprint\n\n# Configure HTTP basic authorization: basicAuth\nconfiguration = kaggle.Configuration()\nconfiguration.username = 'YOUR_USERNAME'\nconfiguration.password = 'YOUR_PASSWORD'\n\n# create an instance of the API class\napi_instance = kaggle.KaggleApi(kaggle.ApiClient(configuration))\nblob_file_tokens = 'blob_file_tokens_example' # str | Token identifying location of uploaded submission file\nsubmission_description = 'submission_description_example' # str | Description of competition submission\nid = 'id_example' # str | Competition name\n\ntry:\n    # Submit to competition\n    api_response = api_instance.competitions_submissions_submit(blob_file_tokens, submission_description, id)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling KaggleApi->competitions_submissions_submit: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Kernel Output - Kaggle API\nDESCRIPTION: Command for downloading output files from a kernel run. Requires a kernel identifier and offers options for download path, force download, and quiet mode.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/README.md#2025-04-23_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\nusage: kaggle kernels output [-h] [-p PATH] [-w] [-o] [-q] [kernel]\n\nrequired arguments:\n  kernel      Kernel URL suffix in format <owner>/<kernel-name> (use \"kaggle kernels list\" to show options)\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -p PATH, --path PATH  Folder where file(s) will be downloaded, defaults to current working directory\n  -w, --wp              Download files to current working path\n  -o, --force           Skip check whether local version of file is up to date, force file download\n  -q, --quiet           Suppress printing information about the upload/download progress\n```\n\n----------------------------------------\n\nTITLE: Listing Models - Kaggle API\nDESCRIPTION: Command for listing available models with filtering options including sort order, search terms, owner, and pagination parameters.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/README.md#2025-04-23_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\nusage: kaggle models list [--sort-by SORT_BY] [-s SEARCH] [--owner OWNER] [--page-token PAGE_TOKEN] [--page-size PAGE_SIZE] [--csv]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --sort-by SORT_BY     Sort list results. Default is 'hotness'. Valid options are 'hotness', 'downloadCount', 'voteCount', 'notebookCount' and 'createTime'\n  -s SEARCH, --search SEARCH\n                        Term(s) to search for\n  --owner OWNER         Find models owned by a specific user or organization\n  --page-token PAGE_TOKEN  \n                        Page token for pagination\n  --page-size PAGE_SIZE Number of items to show on a page. Default size is 20, max is 50\n  -v, --csv             Print results in CSV format (if not set then print in table format)\n```\n\n----------------------------------------\n\nTITLE: Pulling Kernels - Kaggle API\nDESCRIPTION: Command for pulling down kernel code from Kaggle. Requires a kernel identifier and accepts options for download path, working path, and metadata generation.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/README.md#2025-04-23_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nusage: kaggle kernels pull [-h] [-p PATH] [-w] [-m] [kernel]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  kernel                Kernel URL suffix in format <owner>/<kernel-name> (use \"kaggle kernels list\" to show options)\n  -p PATH, --path PATH  Folder where file(s) will be downloaded, defaults to current working directory\n  -w, --wp              Download files to current working path\n  -m, --metadata        Generate metadata when pulling kernel\n```\n\n----------------------------------------\n\nTITLE: Retrieving Model Instance with Kaggle API in Python\nDESCRIPTION: This snippet demonstrates how to use the Kaggle API to retrieve a specific model instance. It requires the model owner, name, framework, and instance slug as parameters. The code handles authentication and error handling.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/KaggleApi.md#2025-04-23_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n# create an instance of the API class\napi_instance = kaggle.KaggleApi(kaggle.ApiClient(configuration))\nowner_slug = 'owner_slug_example' # str | Model owner\nmodel_slug = 'model_slug_example' # str | Model name\nframework = 'framework_example' # str | Model instance framework\ninstance_slug = 'instance_slug_example' # str | Model instance slug\n\ntry:\n    # Get a model instance\n    api_response = api_instance.get_model_instance(owner_slug, model_slug, framework, instance_slug)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling KaggleApi->get_model_instance: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Listing Dataset Files with Kaggle API\nDESCRIPTION: This snippet shows how to list files within a specific dataset using the Kaggle API. It includes parameters for the dataset owner, slug, version number, and pagination options.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/KaggleApi.md#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n# Configure HTTP basic authorization: basicAuth\nconfiguration = kaggle.Configuration()\nconfiguration.username = 'YOUR_USERNAME'\nconfiguration.password = 'YOUR_PASSWORD'\n\n# create an instance of the API class\napi_instance = kaggle.KaggleApi(kaggle.ApiClient(configuration))\nowner_slug = 'owner_slug_example' # str | Dataset owner\ndataset_slug = 'dataset_slug_example' # str | Dataset name\ndataset_version_number = 'dataset_version_number_example' # str | Dataset version number (optional)\npage_token = 'page_token_example' # str | Page token for pagination (optional)\npage_size = 20 # int | Number of items per page (default 20) (optional) (default to 20)\n\ntry:\n    # List dataset files\n    api_response = api_instance.datasets_list_files(owner_slug, dataset_slug, dataset_version_number=dataset_version_number, page_token=page_token, page_size=page_size)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling KaggleApi->datasets_list_files: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Getting Models - Kaggle API\nDESCRIPTION: Command for retrieving a model from Kaggle. Requires a model identifier in the format owner/model-name and offers an option to specify a download path.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/README.md#2025-04-23_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\nusage: kaggle models get [-h] [-p FOLDER] [model]\n\nrequired arguments:\n  model                 Model URL suffix in format <owner>/<model-name>\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -p PATH, --path PATH  Folder where the special model-metadata.json file (https://github.com/Kaggle/kaggle-api/wiki/Model-Metadata) will be downloaded (if specified).\n```\n\n----------------------------------------\n\nTITLE: Retrieving Model Instance Information using Kaggle API in Python\nDESCRIPTION: This snippet shows how to retrieve information about a specific model instance using the Kaggle API. It requires owner slug, model slug, framework, and instance slug as parameters. The API returns detailed information about the specified model instance.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/KaggleApi.md#2025-04-23_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport kaggle\nfrom kaggle.rest import ApiException\nfrom pprint import pprint\n\n# Configure HTTP basic authorization: basicAuth\nconfiguration = kaggle.Configuration()\nconfiguration.username = 'YOUR_USERNAME'\nconfiguration.password = 'YOUR_PASSWORD'\n```\n\n----------------------------------------\n\nTITLE: Creating a New Model Instance\nDESCRIPTION: Command for creating a new model instance on Kaggle. Requires a metadata file that can be initialized using the 'init' command. Options include specifying the folder containing the metadata file and controlling directory handling.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/README.md#2025-04-23_snippet_40\n\nLANGUAGE: bash\nCODE:\n```\nusage: kaggle models instances create [-h] [-p FOLDER]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -p FOLDER, --path FOLDER\n                        Folder containing the special model-instance-metadata.json file (https://github.com/Kaggle/kaggle-api/wiki/Model-Metadata). Defaults to current working directory\n  -q, --quiet           Suppress printing information about the upload progress\n  -r {skip,zip,tar}, --dir-mode {skip,zip,tar}\n                        What to do with directories: \"skip\" - ignore; \"zip\" - compressed upload; \"tar\" - uncompressed upload\n```\n\n----------------------------------------\n\nTITLE: Listing Model Instance Files with Kaggle API - Python\nDESCRIPTION: Example code demonstrating how to list files for a model instance using the Kaggle API. Includes pagination support and requires authentication.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/KaggleApi.md#2025-04-23_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport kaggle\nfrom kaggle.rest import ApiException\nfrom pprint import pprint\n\n# Configure HTTP basic authorization: basicAuth\nconfiguration = kaggle.Configuration()\nconfiguration.username = 'YOUR_USERNAME'\nconfiguration.password = 'YOUR_PASSWORD'\n\n# create an instance of the API class\napi_instance = kaggle.KaggleApi(kaggle.ApiClient(configuration))\nowner_slug = 'owner_slug_example' # str | Model owner\nmodel_slug = 'model_slug_example' # str | Model name\nframework = 'framework_example' # str | Model instance framework\ninstance_slug = 'instance_slug_example' # str | Model instance slug\npage_size = 20 # int | Number of items per page (default 20) (optional) (default to 20)\npage_token = 'page_token_example' # str | Page token for pagination (optional)\n\ntry:\n    # List model instance files for the current version\n    api_response = api_instance.model_instance_files(owner_slug, model_slug, framework, instance_slug, page_size=page_size, page_token=page_token)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling KaggleApi->model_instance_files: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Model Information using Kaggle API in Python\nDESCRIPTION: This snippet demonstrates how to retrieve information about a model using the Kaggle API. It requires owner slug and model slug as parameters and returns details about the specified model. Authentication is required via username and password.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/KaggleApi.md#2025-04-23_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport kaggle\nfrom kaggle.rest import ApiException\nfrom pprint import pprint\n\n# Configure HTTP basic authorization: basicAuth\nconfiguration = kaggle.Configuration()\nconfiguration.username = 'YOUR_USERNAME'\nconfiguration.password = 'YOUR_PASSWORD'\n\n# create an instance of the API class\napi_instance = kaggle.KaggleApi(kaggle.ApiClient(configuration))\nowner_slug = 'owner_slug_example' # str | Model owner\nmodel_slug = 'model_slug_example' # str | Model name\n\ntry:\n    # Get a model\n    api_response = api_instance.get_model(owner_slug, model_slug)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling KaggleApi->get_model: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Updating a Model Instance with Kaggle API in Python\nDESCRIPTION: This snippet demonstrates how to update a specific model instance using the Kaggle API. It includes authentication setup, API instance creation, and a call to update_model_instance with the required parameters and model instance update information.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/KaggleApi.md#2025-04-23_snippet_41\n\nLANGUAGE: python\nCODE:\n```\n# Configure HTTP basic authorization: basicAuth\nconfiguration = kaggle.Configuration()\nconfiguration.username = 'YOUR_USERNAME'\nconfiguration.password = 'YOUR_PASSWORD'\n\n# create an instance of the API class\napi_instance = kaggle.KaggleApi(kaggle.ApiClient(configuration))\nowner_slug = 'owner_slug_example' # str | Model owner\nmodel_slug = 'model_slug_example' # str | Model name\nframework = 'framework_example' # str | Model instance framework\ninstance_slug = 'instance_slug_example' # str | Model instance slug\nmodel_instance_update_request = kaggle.ModelInstanceUpdateRequest() # ModelInstanceUpdateRequest | Information for updating a model instance\n\ntry:\n    # Update a model\n    api_response = api_instance.update_model_instance(owner_slug, model_slug, framework, instance_slug, model_instance_update_request)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling KaggleApi->update_model_instance: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Deleting a Model using Kaggle API in Python\nDESCRIPTION: This snippet shows how to delete a model using the Kaggle API. It requires authentication and takes model owner and name as parameters. The API returns a Result object indicating the success or failure of the operation.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/KaggleApi.md#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport kaggle\nfrom kaggle.rest import ApiException\nfrom pprint import pprint\n\n# Configure HTTP basic authorization: basicAuth\nconfiguration = kaggle.Configuration()\nconfiguration.username = 'YOUR_USERNAME'\nconfiguration.password = 'YOUR_PASSWORD'\n\n# create an instance of the API class\napi_instance = kaggle.KaggleApi(kaggle.ApiClient(configuration))\nowner_slug = 'owner_slug_example' # str | Model owner\nmodel_slug = 'model_slug_example' # str | Model name\n\ntry:\n    # Delete a model\n    api_response = api_instance.delete_model(owner_slug, model_slug)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling KaggleApi->delete_model: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Creating Models - Kaggle API\nDESCRIPTION: Command for creating a new model on Kaggle. Requires a path to a folder containing the model-metadata.json file with all necessary model configuration.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/README.md#2025-04-23_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\nusage: kaggle models create [-h] [-p FOLDER]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -p FOLDER, --path FOLDER\n                        Folder containing the special model-metadata.json file (https://github.com/Kaggle/kaggle-api/wiki/Model-Metadata). Defaults to current working directory\n```\n\n----------------------------------------\n\nTITLE: Getting Model Instance Usage and Example\nDESCRIPTION: Command for retrieving a model instance from Kaggle. Requires the model instance URL suffix in the format <owner>/<model-name>/<framework>/<instance-slug>. The -p option allows downloading the metadata file to a specified folder.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/README.md#2025-04-23_snippet_36\n\nLANGUAGE: bash\nCODE:\n```\nusage: kaggle models instances get [-h] [-p FOLDER] [modelInstance]\n\nrequired arguments:\n  modelInstance         Model Instance URL suffix in format <owner>/<model-name>/<framework>/<instance-slug>\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -p PATH, --path PATH  Folder where the special model-instance-metadata.json file (https://github.com/Kaggle/kaggle-api/wiki/Model-Metadata) will be downloaded (if specified).\n```\n\n----------------------------------------\n\nTITLE: Deleting a Model Instance\nDESCRIPTION: Command for deleting a model instance from Kaggle. Requires the model instance URL suffix in the format <owner>/<model-name>/<framework>/<instance-slug>.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/README.md#2025-04-23_snippet_42\n\nLANGUAGE: bash\nCODE:\n```\nusage: kaggle models instances delete [-h] [modelInstance]\n\nrequired arguments:\n  modelInstance         Model Instance URL suffix in format <owner>/<model-name>/<framework>/<instance-slug>\n\noptional arguments:\n  -h, --help     show this help message and exit\n```\n\n----------------------------------------\n\nTITLE: Listing Kernel Files with Kaggle API - Python\nDESCRIPTION: Example code demonstrating how to list kernel files using the Kaggle API. Requires basic authentication with username and password. Returns a paginated list of files for a specified kernel.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/KaggleApi.md#2025-04-23_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport kaggle\nfrom kaggle.rest import ApiException\nfrom pprint import pprint\n\n# Configure HTTP basic authorization: basicAuth\nconfiguration = kaggle.Configuration()\nconfiguration.username = 'YOUR_USERNAME'\nconfiguration.password = 'YOUR_PASSWORD'\n\n# create an instance of the API class\napi_instance = kaggle.KaggleApi(kaggle.ApiClient(configuration))\nuser_name = 'user_name_example' # str | Kernel owner\nkernel_slug = 'kernel_slug_example' # str | Kernel name\nkernel_version_number = 'kernel_version_number_example' # str | Kernel version number (optional)\npage_size = 20 # int | Number of items per page (default 20) (optional) (default to 20)\npage_token = 'page_token_example' # str | Page token for pagination (optional)\n\ntry:\n    # List kernel files\n    api_response = api_instance.kernels_list_files(user_name, kernel_slug, kernel_version_number=kernel_version_number, page_size=page_size, page_token=page_token)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling KaggleApi->kernels_list_files: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Listing Files in a Kaggle Competition\nDESCRIPTION: Command example showing how to list available files in a specific Kaggle competition.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkaggle competitions files favorita-grocery-sales-forecasting\n```\n\n----------------------------------------\n\nTITLE: Example of Deleting a Model Instance\nDESCRIPTION: Example showing how to delete a model instance from Kaggle, specifically the TensorFlow toxicity TFJS default model.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/README.md#2025-04-23_snippet_43\n\nLANGUAGE: bash\nCODE:\n```\nkaggle models instances delete tensorflow/toxicity/tfjs/default\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication and Listing Models with Kaggle API in Python\nDESCRIPTION: This snippet demonstrates how to configure HTTP basic authentication for the Kaggle API and use it to list models. It includes setting up the API client, specifying optional parameters for the models_list method, and handling the API response.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/KaggleApi.md#2025-04-23_snippet_39\n\nLANGUAGE: python\nCODE:\n```\n# Configure HTTP basic authorization: basicAuth\nconfiguration = kaggle.Configuration()\nconfiguration.username = 'YOUR_USERNAME'\nconfiguration.password = 'YOUR_PASSWORD'\n\n# create an instance of the API class\napi_instance = kaggle.KaggleApi(kaggle.ApiClient(configuration))\nsearch = '' # str | Search terms (optional) (default to )\nsort_by = 'hotness' # str | Sort the results (optional) (default to hotness)\nowner = 'owner_example' # str | Display models by a specific user or organization (optional)\npage_size = 20 # int | Number of items per page (default 20) (optional) (default to 20)\npage_token = 'page_token_example' # str | Page token for pagination (optional)\n\ntry:\n    # Lists models\n    api_response = api_instance.models_list(search=search, sort_by=sort_by, owner=owner, page_size=page_size, page_token=page_token)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling KaggleApi->models_list: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Downloading All Competition Files\nDESCRIPTION: Command example showing how to download all files from a specific Kaggle competition.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkaggle competitions download favorita-grocery-sales-forecasting\n```\n\n----------------------------------------\n\nTITLE: Deleting a Model Instance Version using Kaggle API in Python\nDESCRIPTION: This snippet shows how to delete a specific version of a model instance using the Kaggle API. It requires owner slug, model slug, framework, instance slug, and version number as parameters. The API returns a Result object indicating success or failure.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/KaggleApi.md#2025-04-23_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport kaggle\nfrom kaggle.rest import ApiException\nfrom pprint import pprint\n\n# Configure HTTP basic authorization: basicAuth\nconfiguration = kaggle.Configuration()\nconfiguration.username = 'YOUR_USERNAME'\nconfiguration.password = 'YOUR_PASSWORD'\n\n# create an instance of the API class\napi_instance = kaggle.KaggleApi(kaggle.ApiClient(configuration))\nowner_slug = 'owner_slug_example' # str | Model owner\nmodel_slug = 'model_slug_example' # str | Model name\nframework = 'framework_example' # str | Model instance framework\ninstance_slug = 'instance_slug_example' # str | Model instance slug\nversion_number = 'version_number_example' # str | Model instance version number\n\ntry:\n    # Delete a model instance version\n    api_response = api_instance.delete_model_instance_version(owner_slug, model_slug, framework, instance_slug, version_number)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling KaggleApi->delete_model_instance_version: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Creating New Model with Kaggle API in Python\nDESCRIPTION: Example showing how to create a new model through the Kaggle API. Takes model details in the request body. Returns model creation response.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/KaggleApi.md#2025-04-23_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport kaggle\nfrom kaggle.rest import ApiException\nfrom pprint import pprint\n\n# Configure HTTP basic authorization: basicAuth\nconfiguration = kaggle.Configuration()\nconfiguration.username = 'YOUR_USERNAME'\nconfiguration.password = 'YOUR_PASSWORD'\n\n# create an instance of the API class\napi_instance = kaggle.KaggleApi(kaggle.ApiClient(configuration))\nmodel_new_request = kaggle.ModelNewRequest() # ModelNewRequest | Information for creating a new model\n\ntry:\n    # Create a new model\n    api_response = api_instance.models_create_new(model_new_request)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling KaggleApi->models_create_new: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Downloading Specific Competition File\nDESCRIPTION: Command example showing how to download a specific file from a Kaggle competition.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkaggle competitions download favorita-grocery-sales-forecasting -f test.csv.7z\n```\n\n----------------------------------------\n\nTITLE: Deleting a Model Instance Version\nDESCRIPTION: Command for deleting a specific version of a model instance. Requires the model instance version URL suffix in the format <owner>/<model-name>/<framework>/<instance-slug>/<version_number>.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/README.md#2025-04-23_snippet_51\n\nLANGUAGE: bash\nCODE:\n```\nusage: kaggle models instances versions delete [-h] [modelInstanceVersion]\n\nrequired arguments:\n  modelInstanceVersion  Model Instance version URL suffix in format <owner>/<model-name>/<framework>/<instance-slug>/<version_number>\n\noptional arguments:\n  -h, --help            show this help message and exit\n```\n\n----------------------------------------\n\nTITLE: Example of Getting a Model Instance\nDESCRIPTION: Example showing how to get a model instance using the Kaggle API, specifically retrieving the TensorFlow toxicity TFJS default model.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/README.md#2025-04-23_snippet_37\n\nLANGUAGE: bash\nCODE:\n```\nkaggle models instances get tensorflow/toxicity/tfjs/default\n```\n\n----------------------------------------\n\nTITLE: Uploading Competition Submission Files with Kaggle API in Python\nDESCRIPTION: This code demonstrates how to upload a competition submission file using the Kaggle API. It requires configuring HTTP basic authentication with username and password, and providing the file path, GUID, content length, and last modified date.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/KaggleApi.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport kaggle\nfrom kaggle.rest import ApiException\nfrom pprint import pprint\n\n# Configure HTTP basic authorization: basicAuth\nconfiguration = kaggle.Configuration()\nconfiguration.username = 'YOUR_USERNAME'\nconfiguration.password = 'YOUR_PASSWORD'\n\n# create an instance of the API class\napi_instance = kaggle.KaggleApi(kaggle.ApiClient(configuration))\nfile = '/path/to/file.txt' # file | Competition submission file\nguid = 'guid_example' # str | Location where submission should be uploaded\ncontent_length = 56 # int | Content length of file in bytes\nlast_modified_date_utc = 56 # int | Last modified date of file in seconds since epoch in UTC\n\ntry:\n    # Upload competition submission file\n    api_response = api_instance.competitions_submissions_upload(file, guid, content_length, last_modified_date_utc)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling KaggleApi->competitions_submissions_upload: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Downloading Dataset Files with Kaggle API\nDESCRIPTION: This command downloads files from a Kaggle dataset. It offers options to specify file name, download path, unzip files, and force download.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/README.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nusage: kaggle datasets download [-h] [-f FILE_NAME] [-p PATH] [-w] [--unzip]\n                                [-o] [-q]\n                                [dataset]\n\nrequired arguments:\n  dataset               Dataset URL suffix in format <owner>/<dataset-name> (use \"kaggle datasets list\" to show options), or <owner>/<dataset-name>/<version-number> for a specific version\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -f FILE_NAME, --file FILE_NAME\n                        File name, all files downloaded if not provided\n                        (use \"kaggle datasets files -d <dataset>\" to show options)\n  -p PATH, --path PATH  Folder where file(s) will be downloaded, defaults to current working directory\n  -w, --wp              Download files to current working path\n  --unzip               Unzip the downloaded file. Will delete the zip file when completed.\n  -o, --force           Skip check whether local version of file is up to date, force file download\n  -q, --quiet           Suppress printing information about the upload/download progress\n```\n\n----------------------------------------\n\nTITLE: Updating a Model Instance\nDESCRIPTION: Command for updating an existing model instance on Kaggle. Requires a metadata file that can be retrieved using the 'get' command. The -p option allows specifying the folder containing the metadata file.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/README.md#2025-04-23_snippet_44\n\nLANGUAGE: bash\nCODE:\n```\nusage: kaggle models instances update [-h] [-p FOLDER]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -p FOLDER, --path FOLDER\n                        Folder containing the special model-instance-metadata.json file (https://github.com/Kaggle/kaggle-api/wiki/Model-Metadata). Defaults to current working directory\n```\n\n----------------------------------------\n\nTITLE: Creating Inbox Files with Kaggle API in Python\nDESCRIPTION: This code demonstrates how to create a new file in the Kaggle inbox using the API. It requires authentication and a CreateInboxFileRequest object that contains the file specifications.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/KaggleApi.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport kaggle\nfrom kaggle.rest import ApiException\nfrom pprint import pprint\n\n# Configure HTTP basic authorization: basicAuth\nconfiguration = kaggle.Configuration()\nconfiguration.username = 'YOUR_USERNAME'\nconfiguration.password = 'YOUR_PASSWORD'\n\n# create an instance of the API class\napi_instance = kaggle.KaggleApi(kaggle.ApiClient(configuration))\ncreate_inbox_file_request = kaggle.CreateInboxFileRequest() # CreateInboxFileRequest | \n\ntry:\n    # Creates (aka \"drops\") a new file into the inbox.\n    api_response = api_instance.create_inbox_file(create_inbox_file_request)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling KaggleApi->create_inbox_file: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Listing Dataset Files with Kaggle API\nDESCRIPTION: This command lists files for a specific Kaggle dataset. It supports specifying a dataset version and CSV output format.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/README.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nusage: kaggle datasets files [-h] [-v] [dataset]\n\nrequired arguments:\n  dataset               Dataset URL suffix in format <owner>/<dataset-name> (use \"kaggle datasets list\" to show options), or <owner>/<dataset-name>/<version-number> for a specific version\n\noptional arguments:\n  -h, --help  show this help message and exit\n  -v, --csv   Print results in CSV format (if not set then print in table format)\n```\n\n----------------------------------------\n\nTITLE: Updating a Model with Kaggle API in Python\nDESCRIPTION: This snippet shows how to update a model using the Kaggle API. It includes setting up authentication, creating an API instance, and making a call to update_model with the required parameters and model update information.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/KaggleApi.md#2025-04-23_snippet_40\n\nLANGUAGE: python\nCODE:\n```\n# Configure HTTP basic authorization: basicAuth\nconfiguration = kaggle.Configuration()\nconfiguration.username = 'YOUR_USERNAME'\nconfiguration.password = 'YOUR_PASSWORD'\n\n# create an instance of the API class\napi_instance = kaggle.KaggleApi(kaggle.ApiClient(configuration))\nowner_slug = 'owner_slug_example' # str | Model owner\nmodel_slug = 'model_slug_example' # str | Model name\nmodel_update_request = kaggle.ModelUpdateRequest() # ModelUpdateRequest | Information for updating a model\n\ntry:\n    # Update a model\n    api_response = api_instance.update_model(owner_slug, model_slug, model_update_request)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling KaggleApi->update_model: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Checking Dataset Creation Status with Kaggle API\nDESCRIPTION: This command retrieves the creation status for a Kaggle dataset. It requires the dataset URL suffix as an argument.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/README.md#2025-04-23_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nusage: kaggle datasets status [-h] [dataset]\n\nrequired arguments:\n  dataset     Dataset URL suffix in format <owner>/<dataset-name> (use \"kaggle datasets list\" to show options)\n\noptional arguments:\n  -h, --help  show this help message and exit\n```\n\n----------------------------------------\n\nTITLE: Downloading Dataset Metadata with Kaggle API\nDESCRIPTION: This command downloads metadata for an existing Kaggle dataset. It allows specifying the download path for the metadata file.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/README.md#2025-04-23_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nusage: kaggle datasets metadata [-h] [-p PATH] [dataset]\n\nrequired arguments:\n  dataset               Dataset URL suffix in format <owner>/<dataset-name> (use \"kaggle datasets list\" to show options)\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -p PATH, --path PATH  Location to download dataset metadata to. Defaults to current working directory\n```\n\n----------------------------------------\n\nTITLE: Uploading a File with Kaggle API in Python\nDESCRIPTION: This snippet shows how to start uploading a file using the Kaggle API. It includes setting up authentication, creating an API instance, and making a call to upload_file with the required start_blob_upload_request parameter.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/KaggleApi.md#2025-04-23_snippet_42\n\nLANGUAGE: python\nCODE:\n```\n# Configure HTTP basic authorization: basicAuth\nconfiguration = kaggle.Configuration()\nconfiguration.username = 'YOUR_USERNAME'\nconfiguration.password = 'YOUR_PASSWORD'\n\n# create an instance of the API class\napi_instance = kaggle.KaggleApi(kaggle.ApiClient(configuration))\nstart_blob_upload_request = kaggle.StartBlobUploadRequest() # StartBlobUploadRequest | \n\ntry:\n    # Start uploading a file\n    api_response = api_instance.upload_file(start_blob_upload_request)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling KaggleApi->upload_file: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Dataset Creation Status using Kaggle API in Python\nDESCRIPTION: This snippet demonstrates how to check the creation status of a dataset using the Kaggle API. It requires basic HTTP authentication with username and password, and takes dataset owner and name as parameters.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/KaggleApi.md#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport kaggle\nfrom kaggle.rest import ApiException\nfrom pprint import pprint\n\n# Configure HTTP basic authorization: basicAuth\nconfiguration = kaggle.Configuration()\nconfiguration.username = 'YOUR_USERNAME'\nconfiguration.password = 'YOUR_PASSWORD'\n\n# create an instance of the API class\napi_instance = kaggle.KaggleApi(kaggle.ApiClient(configuration))\nowner_slug = 'owner_slug_example' # str | Dataset owner\ndataset_slug = 'dataset_slug_example' # str | Dataset name\n\ntry:\n    # Get dataset creation status\n    api_response = api_instance.datasets_status(owner_slug, dataset_slug)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling KaggleApi->datasets_status: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: DatasetColumn Properties Table in Markdown\nDESCRIPTION: Markdown table defining the properties of the DatasetColumn class including field names, types, descriptions and optional status. Properties include order (float), name (string), type (string), original_type (string), and description (string).\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/DatasetColumn.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**order** | **float** | The order that the column comes in, 0-based. (The first column is 0, second is 1, etc.) | [optional] \n**name** | **str** | The column name | [optional] \n**type** | **str** | The type of all of the fields in the column. Please see the data types on https://github.com/Kaggle/kaggle-api/wiki/Dataset-Metadata | [optional] \n**original_type** | **str** | Used to store the original type of the column, which will be converted to Kaggle's types. For example, an `originalType` of `\\\"integer\\\"` would convert to a `type` of `\\\"numeric\\\"` | [optional] \n**description** | **str** | The description of the column | [optional]\n```\n\n----------------------------------------\n\nTITLE: Example kernel-metadata.json Configuration for Kaggle\nDESCRIPTION: A basic example of a kernel-metadata.json file used to define a Kaggle kernel's configuration. This file specifies properties like the kernel ID, title, language, type, privacy settings, resource requirements, and data source dependencies.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/kernels_metadata.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"timoboz/my-awesome-kernel\",\n  \"id_no\": 12345,\n  \"title\": \"My Awesome Kernel\",\n  \"code_file\": \"my-awesome-kernel.ipynb\",\n  \"language\": \"python\",\n  \"kernel_type\": \"notebook\",\n  \"is_private\": \"false\",\n  \"enable_gpu\": \"false\",\n  \"enable_internet\": \"false\",\n  \"dataset_sources\": [\"timoboz/my-awesome-dataset\"],\n  \"competition_sources\": [],\n  \"kernel_sources\": [],\n  \"model_sources\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Kaggle Competitions by Category\nDESCRIPTION: Command example showing how to list Kaggle competitions filtered by category.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkaggle competitions list --category gettingStarted\n```\n\n----------------------------------------\n\nTITLE: Dataset Settings Properties Schema Documentation\nDESCRIPTION: Markdown table documenting the properties, types and descriptions for the DatasetUpdateSettingsRequest model. Includes optional fields for configuring dataset metadata, permissions, and content.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/DatasetUpdateSettingsRequest.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**title** | **str** | Title of the dataset | [optional] \n**subtitle** | **str** | Subtitle of the dataset | [optional] \n**description** | **str** | Decription of the dataset | [optional] \n**is_private** | **bool** | Whether or not the dataset should be private | [optional] \n**licenses** | **list[object]** | A list of licenses that apply to this dataset | [optional] \n**keywords** | **list[str]** | A list of keywords that apply to this dataset | [optional] \n**collaborators** | **list[object]** | A list of collaborators that may read or edit this dataset | [optional] \n**data** | **list[object]** | A list containing metadata for each file in the dataset | [optional]\n```\n\n----------------------------------------\n\nTITLE: Initializing Kernel Metadata - Kaggle API\nDESCRIPTION: Command for initializing a kernel-metadata.json file which is required for kernel creation. The command accepts a path parameter to specify where the file should be created.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/README.md#2025-04-23_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nusage: kaggle kernels init [-h] [-p FOLDER]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -p FOLDER, --path FOLDER\n                        Folder where the special kernel-metadata.json file (https://github.com/Kaggle/kaggle-api/wiki/Kernel-Metadata) will be created. Defaults to current working directory\n```\n\n----------------------------------------\n\nTITLE: Example of Creating a Model Instance Version\nDESCRIPTION: Example showing how to create a new version of the TensorFlow toxicity TFJS default model with updated weights and files from a specific folder.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/README.md#2025-04-23_snippet_48\n\nLANGUAGE: bash\nCODE:\n```\nkaggle models instances versions create tensorflow/toxicity/tfjs/default -p /path/to/files -n \"updated weights\"\n```\n\n----------------------------------------\n\nTITLE: Defining Properties of StartBlobUploadRequest Model in Markdown\nDESCRIPTION: Documentation table that specifies the properties, types, descriptions, and notes for the StartBlobUploadRequest model class. This model is used to initiate blob uploads in the Kaggle API for datasets, models, or inbox items.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/StartBlobUploadRequest.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# StartBlobUploadRequest\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**type** | **object** | The type of the blob (one of \\\"dataset\\\", \\\"model\\\", \\\"inbox\\\") | [optional] \n**name** | **str** | Name of the file | \n**content_length** | **int** | Content length of the file in bytes | \n**content_type** | **str** | Content/MIME type (e.g. \\\"text/plain\\\") of the file | [optional] \n**last_modified_epoch_seconds** | **int** | Last modified date of file in seconds since epoch in UTC | [optional] \n\n[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)\n```\n\n----------------------------------------\n\nTITLE: Setting a Configuration Value\nDESCRIPTION: Command for setting a configuration value for the Kaggle API. Requires the name of the configuration parameter (competition, path, or proxy) and the value to set.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/README.md#2025-04-23_snippet_58\n\nLANGUAGE: bash\nCODE:\n```\nusage: kaggle config set [-h] -n NAME -v VALUE\n\nrequired arguments:\n  -n NAME, --name NAME  Name of the configuration parameter\n                        (one of competition, path, proxy)\n  -v VALUE, --value VALUE\n                        Value of the configuration parameter, valid values depending on name\n                        - competition: Competition URL suffix (use \"kaggle competitions list\" to show options)\n                        - path: Folder where file(s) will be downloaded, defaults to current working directory\n                        - proxy: Proxy for HTTP requests\n```\n\n----------------------------------------\n\nTITLE: Example of Downloading a Model Instance Version\nDESCRIPTION: Example showing how to download version 1 of the TensorFlow toxicity TFJS default model.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/README.md#2025-04-23_snippet_50\n\nLANGUAGE: bash\nCODE:\n```\nkaggle models instances versions download tensorflow/toxicity/tfjs/default/1\n```\n\n----------------------------------------\n\nTITLE: Listing Kernels - Kaggle API\nDESCRIPTION: Command for listing available kernels with numerous filtering options including search, language, user, competition, dataset, kernel type, output type, and sorting parameters.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/README.md#2025-04-23_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nusage: kaggle kernels list [-h] [-m] [-p PAGE] [--page-size PAGE_SIZE] [-s SEARCH] [-v]\n                           [--parent PARENT] [--competition COMPETITION]\n                           [--dataset DATASET]\n                           [--user USER] [--language LANGUAGE]\n                           [--kernel-type KERNEL_TYPE]\n                           [--output-type OUTPUT_TYPE] [--sort-by SORT_BY]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -m, --mine            Display only my items\n  -p PAGE, --page PAGE  Page number for results paging. Page size is 20 by default\n  --page-size PAGE_SIZE Number of items to show on a page. Default size is 20, max is 100\n  -s SEARCH, --search SEARCH\n                        Term(s) to search for\n  -v, --csv             Print results in CSV format (if not set then print in table format)\n  --parent PARENT       Find children of the specified parent kernel\n  --competition COMPETITION\n                        Find kernels for a given competition\n  --dataset DATASET     Find kernels for a given dataset\n  --user USER           Find kernels created by a given user\n  --language LANGUAGE   Specify the language the kernel is written in. Default is 'all'. Valid options are 'all', 'python', 'r', 'sqlite', and 'julia'\n  --kernel-type KERNEL_TYPE\n                        Specify the type of kernel. Default is 'all'. Valid options are 'all', 'script', and 'notebook'\n  --output-type OUTPUT_TYPE\n                        Search for specific kernel output types. Default is 'all'. Valid options are 'all', 'visualizations', and 'data'\n  --sort-by SORT_BY     Sort list results. Default is 'hotness'.  Valid options are 'hotness', 'commentCount', 'dateCreated', 'dateRun', 'relevance', 'scoreAscending', 'scoreDescending', 'viewCount', and 'voteCount'. 'relevance' is only applicable if a search term is specified.\n```\n\n----------------------------------------\n\nTITLE: Example of Setting Configuration Path\nDESCRIPTION: Example showing how to set the default download path for the Kaggle API to C:\\ on Windows.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/README.md#2025-04-23_snippet_55\n\nLANGUAGE: bash\nCODE:\n```\nkaggle config path -p C:\\\n```\n\n----------------------------------------\n\nTITLE: Example of Deleting a Model Instance Version\nDESCRIPTION: Example showing how to delete version 1 of the TensorFlow toxicity TFJS default model.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/README.md#2025-04-23_snippet_52\n\nLANGUAGE: bash\nCODE:\n```\nkaggle models instances versions delete tensorflow/toxicity/tfjs/default/1\n```\n\n----------------------------------------\n\nTITLE: Listing Kernels with Kaggle API in Python\nDESCRIPTION: This snippet shows how to list kernels using various filters and parameters with the Kaggle API. It demonstrates pagination, searching, filtering by language, type, and more. The code handles authentication and error handling.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/KaggleApi.md#2025-04-23_snippet_30\n\nLANGUAGE: python\nCODE:\n```\n# create an instance of the API class\napi_instance = kaggle.KaggleApi(kaggle.ApiClient(configuration))\npage = 1 # int | Page number (optional) (default to 1)\npage_size = 20 # int | Number of items per page (default 20) (optional) (default to 20)\nsearch = '' # str | Search terms (optional) (default to )\ngroup = 'everyone' # str | Display only your kernels (optional) (default to everyone)\nuser = 'user_example' # str | Display kernels by a particular group (optional)\nlanguage = 'all' # str | Display kernels in a specific language (optional) (default to all)\nkernel_type = 'all' # str | Display kernels of a specific type (optional) (default to all)\noutput_type = 'all' # str | Display kernels with a specific output type (optional) (default to all)\nsort_by = 'hotness' # str | Sort the results. 'relevance' only works if there is a search query (optional) (default to hotness)\ndataset = 'dataset_example' # str | Display kernels using the specified dataset (optional)\ncompetition = 'competition_example' # str | Display kernels using the specified competition (optional)\nparent_kernel = 'parent_kernel_example' # str | Display kernels that have forked the specified kernel (optional)\n\ntry:\n    # List kernels\n    api_response = api_instance.kernels_list(page=page, page_size=page_size, search=search, group=group, user=user, language=language, kernel_type=kernel_type, output_type=output_type, sort_by=sort_by, dataset=dataset, competition=competition, parent_kernel=parent_kernel)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling KaggleApi->kernels_list: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Defining ModelNewInstanceRequest Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the ModelNewInstanceRequest class using a markdown table. It includes property names, types, descriptions, and additional notes such as optional flags and default values.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/ModelNewInstanceRequest.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**instance_slug** | **str** | The slug that the model instance should be created with | \n**framework** | **str** | The framework of the model instance | \n**overview** | **str** | The overview of the model instance (markdown) | [optional] \n**usage** | **str** | The description of how to use the model instance (markdown) | [optional] \n**license_name** | **str** | The license that should be associated with the model instance | [default to 'Apache 2.0']\n**fine_tunable** | **bool** | Whether the model instance is fine tunable | [optional] [default to True]\n**training_data** | **list[str]** | A list of training data (urls or names) | [optional] \n**model_instance_type** | **str** | Whether the model instance is a base model, external variant, internal variant, or unspecified | [optional] \n**base_model_instance** | **str** | If this is an internal variant, the \\`{owner-slug}/{model-slug}/{framework}/{instance-slug}\\` of the base model instance | [optional] \n**external_base_model_url** | **int** | If this is an external variant, a URL to the base model | [optional] \n**files** | [**list[UploadFile]**](UploadFile.md) | A list of files that should be associated with the model instance version | [optional] \n```\n\n----------------------------------------\n\nTITLE: Example of Updating a Model Instance\nDESCRIPTION: Example showing how to update a model instance using a metadata file located in a specific folder.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/README.md#2025-04-23_snippet_45\n\nLANGUAGE: bash\nCODE:\n```\nkaggle models instances update -p /path/to/model\n```\n\n----------------------------------------\n\nTITLE: Listing Competition Submissions with Kaggle API\nDESCRIPTION: This command allows users to list submissions for a Kaggle competition. It supports optional arguments for CSV output and quiet mode.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/README.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nusage: kaggle competitions submissions [-h] [-v] [-q] [competition]\n\noptional arguments:\n  -h, --help   show this help message and exit\n  competition  Competition URL suffix (use \"kaggle competitions list\" to show options)\n               If empty, the default competition will be used (use \"kaggle config set competition\")\"\n  -v, --csv    Print results in CSV format (if not set then print in table format)\n  -q, --quiet  Suppress printing information about the upload/download progress\n```\n\n----------------------------------------\n\nTITLE: One-line Command to Execute Kaggle API Python Code\nDESCRIPTION: Shell command combining Hatch with Python to run Kaggle API operations in a single line, authenticating and listing models.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/README.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nhatch run python -c \"import kaggle; from kaggle.api.kaggle_api_extended import KaggleApi; api = KaggleApi(); api.authenticate(); api.model_list_cli()\"\n```\n\n----------------------------------------\n\nTITLE: Deleting a Model Instance using Kaggle API in Python\nDESCRIPTION: This snippet demonstrates how to delete a specific instance of a model using the Kaggle API. It requires owner slug, model slug, framework, and instance slug parameters. Authentication is required via username and password.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/KaggleApi.md#2025-04-23_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport kaggle\nfrom kaggle.rest import ApiException\nfrom pprint import pprint\n\n# Configure HTTP basic authorization: basicAuth\nconfiguration = kaggle.Configuration()\nconfiguration.username = 'YOUR_USERNAME'\nconfiguration.password = 'YOUR_PASSWORD'\n\n# create an instance of the API class\napi_instance = kaggle.KaggleApi(kaggle.ApiClient(configuration))\nowner_slug = 'owner_slug_example' # str | Model owner\nmodel_slug = 'model_slug_example' # str | Model name\nframework = 'framework_example' # str | Model instance framework\ninstance_slug = 'instance_slug_example' # str | Model instance slug\n\ntry:\n    # Delete a model instance\n    api_response = api_instance.delete_model_instance(owner_slug, model_slug, framework, instance_slug)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling KaggleApi->delete_model_instance: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Generating Competition Submission URL with Kaggle API in Python\nDESCRIPTION: This code shows how to generate a competition submission URL using the Kaggle API. It requires authentication and competition details such as competition ID, file content length, last modified date, and optionally the file name.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/KaggleApi.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport kaggle\nfrom kaggle.rest import ApiException\nfrom pprint import pprint\n\n# Configure HTTP basic authorization: basicAuth\nconfiguration = kaggle.Configuration()\nconfiguration.username = 'YOUR_USERNAME'\nconfiguration.password = 'YOUR_PASSWORD'\n\n# create an instance of the API class\napi_instance = kaggle.KaggleApi(kaggle.ApiClient(configuration))\nid = 'id_example' # str | Competition name, as it appears in the competition's URL\ncontent_length = 56 # int | Content length of file in bytes\nlast_modified_date_utc = 56 # int | Last modified date of file in seconds since epoch in UTC\nfile_name = 'file_name_example' # str | Competition submission file name (optional)\n\ntry:\n    # Generate competition submission URL\n    api_response = api_instance.competitions_submissions_url(id, content_length, last_modified_date_utc, file_name=file_name)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling KaggleApi->competitions_submissions_url: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Compiling Kaggle API Source Code\nDESCRIPTION: Command to compile the Kaggle API source code using Hatch, which generates compiled files in the kaggle/ directory from the src/ directory.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nhatch run compile\n```\n\n----------------------------------------\n\nTITLE: Viewing Current Configuration Values\nDESCRIPTION: Command for viewing the current configuration values for the Kaggle API.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/README.md#2025-04-23_snippet_56\n\nLANGUAGE: bash\nCODE:\n```\nusage: kaggle config view [-h]\n\noptional arguments:\n  -h, --help  show this help message and exit\n```\n\n----------------------------------------\n\nTITLE: Checking Kernel Status - Kaggle API\nDESCRIPTION: Command for displaying the status of the latest run of a specified kernel. Requires a kernel identifier in the format owner/kernel-name.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/README.md#2025-04-23_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\nusage: kaggle kernels status [-h] [kernel]\n\nrequired arguments:\n  kernel      Kernel URL suffix in format <owner>/<kernel-name> (use \"kaggle kernels list\" to show options)\n\noptional arguments:\n  -h, --help  show this help message and exit\n```\n\n----------------------------------------\n\nTITLE: License Model Properties Table in Markdown\nDESCRIPTION: Markdown table defining the properties of the License model, including the name field which stores the license name as a string value.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/License.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Description | Notes |\n| ------------ | ------------- | ------------- | ------------- |\n| **name** | **str** | Name of the license |\n```\n\n----------------------------------------\n\nTITLE: Example of Viewing Configuration\nDESCRIPTION: Example showing how to view the current configuration values for the Kaggle API.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/README.md#2025-04-23_snippet_57\n\nLANGUAGE: bash\nCODE:\n```\nkaggle config view\n```\n\n----------------------------------------\n\nTITLE: Downloading Kernel Output with Kaggle API in Python\nDESCRIPTION: This snippet shows how to download the latest output from a Kaggle kernel using the API. It requires the kernel owner's username and the kernel slug. The code handles authentication and error handling.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/KaggleApi.md#2025-04-23_snippet_26\n\nLANGUAGE: python\nCODE:\n```\n# create an instance of the API class\napi_instance = kaggle.KaggleApi(kaggle.ApiClient(configuration))\nuser_name = 'user_name_example' # str | Kernel owner\nkernel_slug = 'kernel_slug_example' # str | Kernel name\n\ntry:\n    # Download the latest output from a kernel\n    api_response = api_instance.kernel_output(user_name, kernel_slug)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling KaggleApi->kernel_output: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Installing autogen.sh for Kaggle Internal Development\nDESCRIPTION: Bash commands to download, extract, and set up the autogen.sh script for internal Kaggle development environment.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf /tmp/autogen && mkdir -p /tmp/autogen && unzip -qo /tmp/autogen.zip -d /tmp/autogen &&\nmv /tmp/autogen/autogen-*/* /tmp/autogen && rm -rf /tmp/autogen/autogen-* &&\nsudo chmod a+rx /tmp/autogen/autogen.sh\n```\n\n----------------------------------------\n\nTITLE: Example of Setting a Configuration Value\nDESCRIPTION: Example showing how to set the default competition for the Kaggle API to 'titanic'.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/README.md#2025-04-23_snippet_59\n\nLANGUAGE: bash\nCODE:\n```\nkaggle config set -n competition -v titanic\n```\n\n----------------------------------------\n\nTITLE: Downloading Competition Leaderboard with Python Kaggle API\nDESCRIPTION: This snippet demonstrates how to use the Kaggle API to download a competition leaderboard. It configures authentication using username and password, creates an API instance, and calls the competition_download_leaderboard method with a competition ID parameter.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/KaggleApi.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport kaggle\nfrom kaggle.rest import ApiException\nfrom pprint import pprint\n\n# Configure HTTP basic authorization: basicAuth\nconfiguration = kaggle.Configuration()\nconfiguration.username = 'YOUR_USERNAME'\nconfiguration.password = 'YOUR_PASSWORD'\n\n# create an instance of the API class\napi_instance = kaggle.KaggleApi(kaggle.ApiClient(configuration))\nid = 'id_example' # str | Competition name\n\ntry:\n    # Download competition leaderboard\n    api_response = api_instance.competition_download_leaderboard(id)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling KaggleApi->competition_download_leaderboard: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Clearing a Configuration Value\nDESCRIPTION: Command for clearing a configuration value for the Kaggle API. Requires the name of the configuration parameter (competition, path, or proxy) to clear.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/README.md#2025-04-23_snippet_60\n\nLANGUAGE: bash\nCODE:\n```\nusage: kaggle config unset [-h] -n NAME\n\nrequired arguments:\n  -n NAME, --name NAME  Name of the configuration parameter\n                        (one of competition, path, proxy)\n```\n\n----------------------------------------\n\nTITLE: Viewing Competition Leaderboard with Python Kaggle API\nDESCRIPTION: This snippet shows how to view a competition leaderboard using the Kaggle API. It configures authentication, creates an API instance, and calls the competition_view_leaderboard method with a competition ID parameter to retrieve leaderboard data.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/KaggleApi.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport kaggle\nfrom kaggle.rest import ApiException\nfrom pprint import pprint\n\n# Configure HTTP basic authorization: basicAuth\nconfiguration = kaggle.Configuration()\nconfiguration.username = 'YOUR_USERNAME'\nconfiguration.password = 'YOUR_PASSWORD'\n\n# create an instance of the API class\napi_instance = kaggle.KaggleApi(kaggle.ApiClient(configuration))\nid = 'id_example' # str | Competition name\n\ntry:\n    # VIew competition leaderboard\n    api_response = api_instance.competition_view_leaderboard(id)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling KaggleApi->competition_view_leaderboard: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Dataset Metadata in JSON\nDESCRIPTION: A minimal example of dataset-metadata.json for creating a new dataset. It includes the required fields: title, id, and licenses.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/datasets_metadata.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"My Awesome Dataset\", \n  \"id\": \"timoboz/my-awesome-dataset\", \n  \"licenses\": [{\"name\": \"CC0-1.0\"}]\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Models - Kaggle API\nDESCRIPTION: Command for deleting a model from Kaggle. Requires a model identifier in the format owner/model-name.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/README.md#2025-04-23_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\nusage: kaggle models delete [-h] [model]\n\nrequired arguments:\n  model       Model URL suffix in format <owner>/<model-name>\n\noptional arguments:\n  -h, --help  show this help message and exit\n```\n\n----------------------------------------\n\nTITLE: Creating Model Instance Metadata Configuration in JSON\nDESCRIPTION: Template for model-instance-metadata.json that specifies instance-specific properties including framework, licensing, and training data information. Required for creating model instances.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/models_metadata.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ownerSlug\": \"INSERT_OWNER_SLUG_HERE\",\n  \"modelSlug\": \"INSERT_EXISTING_MODEL_SLUG_HERE\",\n  \"instanceSlug\": \"INSERT_INSTANCE_SLUG_HERE\",\n  \"framework\": \"INSERT_FRAMEWORK_HERE\",\n  \"overview\": \"\",\n  \"usage\": \"Usage Markdown, see below\",\n  \"licenseName\": \"Apache 2.0\",\n  \"fineTunable\": False,\n  \"trainingData\": [],\n  \"modelInstanceType\": \"Unspecified\",\n  \"baseModelInstance\": \"\",\n  \"externalBaseModelUrl\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Kaggle Competitions with Search Term\nDESCRIPTION: Command example showing how to list Kaggle competitions filtered by a search term.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkaggle competitions list -s health\n```\n\n----------------------------------------\n\nTITLE: Creating Kaggle CLI ArgumentParser in Python\nDESCRIPTION: This code snippet defines a function 'create_parser' that sets up the command-line interface for the Kaggle API using the argparse module. It includes various subcommands and options for different Kaggle operations.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. argparse::\n   :filename: extended/cli.py\n   :func: create_parser\n   :prog: kaggle\n```\n\n----------------------------------------\n\nTITLE: Model Instance Versions Commands Overview\nDESCRIPTION: Overview of commands available for managing Kaggle Model Instance Versions, including creating, downloading, and deleting versions.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/README.md#2025-04-23_snippet_46\n\nLANGUAGE: bash\nCODE:\n```\nusage: kaggle models instances versions [-h]\n                             {init, create, download, delete} ...\n\noptional arguments:\n  -h, --help            show this help message and exit\n\ncommands:\n  {create, download, delete}\n    create              Create a new model instance version\n    download            Download a model instance version\n    delete              Delete a model instance version\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Hatch\nDESCRIPTION: Command to install project dependencies using Hatch, the project management tool for the Kaggle API repository.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nhatch run install-deps\n```\n\n----------------------------------------\n\nTITLE: Authenticating and Using Kaggle API in Python\nDESCRIPTION: Python code example showing how to import the Kaggle API, authenticate with your credentials, and list models using the API.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport kaggle\nfrom kaggle.api.kaggle_api_extended import KaggleApi\napi = KaggleApi()\napi.authenticate()\napi.model_list_cli()\n\nNext Page Token = [...]\n[...]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Source Code Changes and Compilation\nDESCRIPTION: Example showing how to modify the Kaggle API source code, compile it, and verify the changes by running a test command.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/README.md#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\n❯ git diff src/kaggle/api/kaggle_api_extended.py\n[...]\n+        print('hello Kaggle CLI update')^M\n         models = self.model_list(sort_by, search, owner, page_size, page_token)\n[...]\n\n❯ hatch run compile\n[...]\n\n❯ hatch run python -c \"import kaggle; from kaggle.api.kaggle_api_extended import KaggleApi; api = KaggleApi(); api.authenticate(); api.model_list_cli()\"\nhello Kaggle CLI update\nNext Page Token = [...]\n```\n\n----------------------------------------\n\nTITLE: Running Kaggle API in Python Interactive Session\nDESCRIPTION: Command to launch a Python interactive session using Hatch, allowing direct interaction with the Kaggle API library.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/README.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nhatch run python\n```\n\n----------------------------------------\n\nTITLE: Defining DatasetNewRequest Properties in Markdown\nDESCRIPTION: This snippet outlines the properties of the DatasetNewRequest model, including their names, types, descriptions, and optional status. It covers essential fields for creating a new dataset on Kaggle, such as title, slug, license, and file information.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/DatasetNewRequest.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**title** | **str** | The title of the new dataset | \n**slug** | **str** | The slug that the dataset should be created with | [optional] \n**owner_slug** | **str** | The owner&#39;s username | [optional] \n**license_name** | **str** | The license that should be associated with the dataset | [optional] [default to 'unknown']\n**subtitle** | **str** | The subtitle to be set on the dataset | [optional] \n**description** | **str** | The description to be set on the dataset | [optional] [default to '']\n**files** | [**list[UploadFile]**](UploadFile.md) | A list of files that should be associated with the dataset | \n**is_private** | **bool** | Whether or not the dataset should be private | [optional] [default to True]\n**convert_to_csv** | **bool** | Whether or not a tabular dataset should be converted to csv | [optional] [default to True]\n**category_ids** | **list[str]** | A list of tag IDs to associated with the dataset | [optional] \n```\n\n----------------------------------------\n\nTITLE: Installing Kaggle API via pip\nDESCRIPTION: Command to install the Kaggle API package using pip package manager, providing command-line access to Kaggle services.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install kaggle\n```\n\n----------------------------------------\n\nTITLE: Defining ModelUpdateRequest Properties in Python\nDESCRIPTION: Defines the property structure for the ModelUpdateRequest class used to update Kaggle model metadata. Includes properties for title, subtitle, privacy settings, description, publish time, provenance sources, and update mask specification.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/ModelUpdateRequest.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ntitle: str         # The title of the new model\nsubtitle: str      # The subtitle of the new model\nis_private: bool    # Whether or not the model should be private (default: True)\ndescription: str    # The description to be set on the model (default: '')\npublish_time: date  # When the model was initially published\nprovenance_sources: str  # The provenance sources to be set on the model (default: '')\nupdate_mask: str    # Describes which fields to update\n```\n\n----------------------------------------\n\nTITLE: Setting Configuration Path\nDESCRIPTION: Command for setting the default download path for the Kaggle API. The -p option allows specifying the folder where files will be downloaded.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/README.md#2025-04-23_snippet_54\n\nLANGUAGE: bash\nCODE:\n```\nusage: kaggle config path [-h] [-p PATH]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -p PATH, --path PATH  folder where file(s) will be downloaded, defaults to current working directory\n```\n\n----------------------------------------\n\nTITLE: Defining UploadFile Model Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the UploadFile model using a markdown table. It includes the property names, types, descriptions, and optional notes.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/UploadFile.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**token** | **str** | A token referencing a specific file upload that can be used across requests | [optional] \n**description** | **str** | The file description | [optional] \n**columns** | [**list[DatasetColumn]**](DatasetColumn.md) | A list of dataset column metadata | [optional] \n```\n\n----------------------------------------\n\nTITLE: Kaggle API Configuration Commands Overview\nDESCRIPTION: Overview of commands available for managing Kaggle API configuration, including viewing, setting, and unsetting configuration values.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/README.md#2025-04-23_snippet_53\n\nLANGUAGE: bash\nCODE:\n```\nusage: kaggle config [-h] {view,set,unset} ...\n\noptional arguments:\n  -h, --help        show this help message and exit\n\ncommands:\n  {view,set,unset}\n    view            View current config values\n    set             Set a configuration value\n    unset           Clear a configuration value\n```\n\n----------------------------------------\n\nTITLE: Defining Error Object Properties in Markdown\nDESCRIPTION: This markdown table defines the properties of an Error object, including their names, types, descriptions, and optional status. It specifies two properties: 'code' as an integer and 'message' as a string.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/Error.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**code** | **int** | The server error code returned | [optional] \n**message** | **str** | The error message generated by the server | [optional] \n```\n\n----------------------------------------\n\nTITLE: Example of Clearing a Configuration Value\nDESCRIPTION: Example showing how to clear the default competition setting for the Kaggle API.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/README.md#2025-04-23_snippet_61\n\nLANGUAGE: bash\nCODE:\n```\nkaggle config unset -n competition\n```\n\n----------------------------------------\n\nTITLE: Generating Requirements with pip-compile Command\nDESCRIPTION: The command used to generate the requirements file with exact package versions and cryptographic hashes, allowing for secure and reproducible installations.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip-compile --allow-unsafe --generate-hashes requirements.in\n```\n\n----------------------------------------\n\nTITLE: Securing Kaggle API Credentials File\nDESCRIPTION: Unix command to set proper permissions on the Kaggle API credentials file, ensuring only the current user can read it.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/docs/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nchmod 600 ~/.config/kaggle/kaggle.json\n```\n\n----------------------------------------\n\nTITLE: Kaggle API Dependencies with Cryptographic Hashes\nDESCRIPTION: A comprehensive list of pinned dependencies for the Kaggle API, including certifi, python-dateutil, six, and urllib3, each with specific versions and cryptographic hashes for security verification.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/requirements.txt#2025-04-23_snippet_1\n\nLANGUAGE: pip\nCODE:\n```\ncertifi==2025.1.31 \\\n    --hash=sha256:3d5da6925056f6f18f119200434a4780a94263f10d1c21d032a6f6b2baa20651 \\\n    --hash=sha256:ca78db4565a652026a4db2bcdf68f2fb589ea80d0be70e03929ed730746b84fe\n    # via -r requirements.in\npython-dateutil==2.9.0.post0 \\\n    --hash=sha256:37dd54208da7e1cd875388217d5e00ebd4179249f90fb72437e91a35459a0ad3 \\\n    --hash=sha256:a8b2bc7bffae282281c8140a97d3aa9c14da0b136dfe83f850eea9a5f7470427\n    # via -r requirements.in\nsix==1.17.0 \\\n    --hash=sha256:4721f391ed90541fddacab5acf947aa0d3dc7d27b2e1e8eda2be8970586c3274 \\\n    --hash=sha256:ff70335d468e7eb6ec65b95b99d3a2836546063f63acc5171de367e834932a81\n    # via\n    #   -r requirements.in\n    #   python-dateutil\nurllib3==2.3.0 \\\n    --hash=sha256:1cee9ad369867bfdbbb48b7dd50374c0967a0bb7710050facf0dd6911440e3df \\\n    --hash=sha256:f8c5449b3cf0861679ce7e0503c7b44b5ec981bec0d1d3795a07f1ba96f0204d\n    # via -r requirements.in\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests for Kaggle API\nDESCRIPTION: Command to execute all integration tests for the Kaggle API using Hatch. Requires proper API credentials to be set up beforehand.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/README.md#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\n# Run all tests\nhatch run integration-test\n```\n\n----------------------------------------\n\nTITLE: Generating Requirements File with Hashes using pip-compile\nDESCRIPTION: This code snippet shows the command used to generate the requirements file with hashes. It uses pip-compile, a tool for compiling package requirements, specifying Python 3.11 as the target version.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/tools/releases/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n#    pip-compile --generate-hashes requirements.in\n```\n\n----------------------------------------\n\nTITLE: Python Package Requirements with Hashes\nDESCRIPTION: Dependency specifications listing required Python packages with exact versions and SHA256 hash verification. Includes comments indicating dependency relationships between packages.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/tools/releases/requirements.txt#2025-04-23_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\n--hash=sha256:146a90b3b6b47cac4a73c12866a499e9817426423f57c5a66949c086191a8808 \\\n--hash=sha256:fb9d6c0a0f643c99eed3875b5377a184132ba9be4d61516a55273d3554d75a39\n# via twine\nsecretstorage==3.3.3 \\\n--hash=sha256:2403533ef369eca6d2ba81718576c5e0f564d5cca1b58f73a8b23e7d4eeebd77 \\\n--hash=sha256:f356e6628222568e3af06f2eba8df495efa13b3b63081dafd4f7d9a7b7bc9f99\n# via keyring\ntwine==6.0.1 \\\n--hash=sha256:36158b09df5406e1c9c1fb8edb24fc2be387709443e7376689b938531582ee27 \\\n--hash=sha256:9c6025b203b51521d53e200f4a08b116dee7500a38591668c6a6033117bdc218\n# via -r requirements.in\nurllib3==2.2.2 \\\n--hash=sha256:a448b2f64d686155468037e1ace9f2d2199776e17f0a46610480d311f73e3472 \\\n--hash=sha256:dd505485549a7a552833da5e6063639d0d177c04f23bc3864e41e5dc5f612168\n# via\n#   requests\n#   twine\nzipp==3.19.1 \\\n--hash=sha256:2828e64edb5386ea6a52e7ba7cdb17bb30a73a858f5eb6eb93d8d36f5ea26091 \\\n--hash=sha256:35427f6d5594f4acf82d25541438348c26736fa9b3afa2754bcd63cdb99d8e8f\n# via importlib-metadata\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies with Hashes\nDESCRIPTION: This snippet shows how to specify Python package dependencies with exact versions and SHA256 hashes for integrity verification. It includes entries for certifi, cffi, and charset-normalizer packages.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/tools/releases/requirements.txt#2025-04-23_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\ncertifi==2024.7.4 \\\n    --hash=sha256:5a1e7645bc0ec61a09e26c36f6106dd4cf40c6db3a1fb6352b0244e7fb057c7b \\\n    --hash=sha256:c198e21b1289c2ab85ee4e67bb4b4ef3ead0892059901a8d5b622f24a1101e90\n    # via requests\ncffi==1.15.1 \\\n    --hash=sha256:00a9ed42e88df81ffae7a8ab6d9356b371399b91dbdf0c3cb1e84c03a13aceb5 \\\n    --hash=sha256:03425bdae262c76aad70202debd780501fabeaca237cdfddc008987c0e0f59ef \\\n    # ... (additional hashes omitted for brevity)\n    # via cryptography\ncharset-normalizer==3.2.0 \\\n    --hash=sha256:04e57ab9fbf9607b77f7d057974694b4f6b142da9ed4a199859d9d4d5c63fe96 \\\n    --hash=sha256:09393e1b2a9461950b1c9a45d5fd251dc7c6f228acab64da1c9c0165d9c7765c \\\n    # ... (additional hashes omitted for brevity)\n```\n\n----------------------------------------\n\nTITLE: Initializing Kaggle Python Environment with Data Science Libraries\nDESCRIPTION: This code snippet initializes a standard Kaggle Python environment by importing common data science libraries (NumPy and Pandas) and demonstrates how to list all input files in the Kaggle environment. It also includes comments about storage options in the Kaggle environment.\nSOURCE: https://github.com/kaggle/kaggle-api.git/blob/main/tests/kernel/testing.ipynb#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session\n```"
  }
]