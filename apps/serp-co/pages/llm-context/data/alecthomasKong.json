[
  {
    "owner": "alecthomas",
    "repo": "kong",
    "content": "TITLE: Defining CLI Structure in Go with Kong\nDESCRIPTION: Example of defining a CLI structure for a shell-like application with 'rm' and 'ls' commands using Kong tags and structs.\nSOURCE: https://github.com/alecthomas/kong/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"github.com/alecthomas/kong\"\n\nvar CLI struct {\n  Rm struct {\n    Force     bool `help:\"Force removal.\"`\n    Recursive bool `help:\"Recursively remove files.\"`\n\n    Paths []string `arg:\"\" name:\"path\" help:\"Paths to remove.\" type:\"path\"`\n  } `cmd:\"\" help:\"Remove files.\"`\n\n  Ls struct {\n    Paths []string `arg:\"\" optional:\"\" name:\"path\" help:\"Paths to list.\" type:\"path\"`\n  } `cmd:\"\" help:\"List paths.\"`\n}\n\nfunc main() {\n  ctx := kong.Parse(&CLI)\n  switch ctx.Command() {\n  case \"rm <path>\":\n  case \"ls\":\n  default:\n    panic(ctx.Command())\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Commands and Sub-commands in Kong\nDESCRIPTION: Example demonstrating how to structure nested commands in Kong using the 'cmd' tag. This allows for creating hierarchical command-line interfaces with nested subcommands.\nSOURCE: https://github.com/alecthomas/kong/blob/master/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ntype CLI struct {\n  Command struct {\n    Flag string\n\n    SubCommand struct {\n    } `cmd`\n  } `cmd`\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Flags in Kong CLI Structure\nDESCRIPTION: Example showing how to define command-line flags in a Kong CLI structure. Any mapped field in the command structure not tagged with 'cmd' or 'arg' will be treated as a flag.\nSOURCE: https://github.com/alecthomas/kong/blob/master/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype CLI struct {\n  Flag string\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Command Handlers with Run Methods in Kong\nDESCRIPTION: Example of implementing command handlers using Run methods attached to command structs, demonstrating a more robust approach to handling CLI commands.\nSOURCE: https://github.com/alecthomas/kong/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype Context struct {\n  Debug bool\n}\n\ntype RmCmd struct {\n  Force     bool `help:\"Force removal.\"`\n  Recursive bool `help:\"Recursively remove files.\"`\n\n  Paths []string `arg:\"\" name:\"path\" help:\"Paths to remove.\" type:\"path\"`\n}\n\nfunc (r *RmCmd) Run(ctx *Context) error {\n  fmt.Println(\"rm\", r.Paths)\n  return nil\n}\n\ntype LsCmd struct {\n  Paths []string `arg:\"\" optional:\"\" name:\"path\" help:\"Paths to list.\" type:\"path\"`\n}\n\nfunc (l *LsCmd) Run(ctx *Context) error {\n  fmt.Println(\"ls\", l.Paths)\n  return nil\n}\n\nvar cli struct {\n  Debug bool `help:\"Enable debug mode.\"`\n\n  Rm RmCmd `cmd:\"\" help:\"Remove files.\"`\n  Ls LsCmd `cmd:\"\" help:\"List paths.\"`\n}\n\nfunc main() {\n  ctx := kong.Parse(&cli)\n  // Call the Run() method of the selected parsed command.\n  err := ctx.Run(&Context{Debug: cli.Debug})\n  ctx.FatalIfErrorf(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Using Kong's Bind Option for Dependency Injection\nDESCRIPTION: Example showing how to use the Bind() option to provide dependencies to command handlers. This demonstrates injecting both CLI structure and custom values into Run methods of commands.\nSOURCE: https://github.com/alecthomas/kong/blob/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype CLI struct {\n  Debug bool `help:\"Enable debug mode.\"`\n\n  Rm RmCmd `cmd:\"\" help:\"Remove files.\"`\n  Ls LsCmd `cmd:\"\" help:\"List paths.\"`\n}\n\ntype AuthorName string\n\n// ...\nfunc (l *LsCmd) Run(cli *CLI) error {\n// use cli.Debug here !!\n  return nil\n}\n\nfunc (r *RmCmD) Run(author AuthorName) error{\n// use binded author here\n  return nil\n}\n\nfunc main() {\n  var cli CLI\n  \n  ctx := kong.Parse(&cli, Bind(AuthorName(\"penguin\")))\n  err := ctx.Run()\n```\n\n----------------------------------------\n\nTITLE: Implementing Branching Positional Arguments in Kong\nDESCRIPTION: Example demonstrating how to create complex command structures with branching positional arguments. This pattern allows for commands with multiple nested positional parameters in a specific sequence.\nSOURCE: https://github.com/alecthomas/kong/blob/master/README.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nvar CLI struct {\n  Rename struct {\n    Name struct {\n      Name string `arg` // <-- NOTE: identical name to enclosing struct field.\n      To struct {\n        Name struct {\n          Name string `arg`\n        } `arg`\n      } `cmd`\n    } `arg`\n  } `cmd`\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Slice Arguments in Kong\nDESCRIPTION: Example showing how to handle slice arguments in Kong, which can accept multiple values for the same parameter. This is useful for commands that accept a variable number of arguments of the same type.\nSOURCE: https://github.com/alecthomas/kong/blob/master/README.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nvar CLI struct {\n  Ls struct {\n    Files []string `arg:\"\" type:\"existingfile\"`\n  } `cmd`\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Map Arguments in Kong\nDESCRIPTION: Example showing how to handle map arguments in Kong, which accept key-value pairs. This is useful for configuration commands that take multiple named parameters with values.\nSOURCE: https://github.com/alecthomas/kong/blob/master/README.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nvar CLI struct {\n  Config struct {\n    Set struct {\n      Config map[string]float64 `arg:\"\" type:\"file:\"`\n    } `cmd`\n  } `cmd`\n}\n```\n\n----------------------------------------\n\nTITLE: Using Pointer Fields in Kong for Optional Values\nDESCRIPTION: Example showing how to use pointer fields in Kong to differentiate between zero values and missing values. This allows distinguishing between parameters that weren't provided and those provided with a zero value.\nSOURCE: https://github.com/alecthomas/kong/blob/master/README.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nvar CLI struct {\n\tFoo *int\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Data Structures with Embedding in Kong\nDESCRIPTION: Example showing how to create nested configuration structures with the 'embed' tag. This allows for grouping related configuration options with custom prefixes in the command-line interface.\nSOURCE: https://github.com/alecthomas/kong/blob/master/README.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nvar CLI struct {\n  Logging struct {\n    Level string `enum:\"debug,info,warn,error\" default:\"info\"`\n    Type string `enum:\"json,console\" default:\"console\"`\n  } `embed:\"\" prefix:\"logging.\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Kong CLI with Plugins\nDESCRIPTION: Demonstrates how to extend Kong CLI by embedding the kong.Plugin type and populating it with pointers to Kong annotated structs. This allows for modular extension of command-line interfaces.\nSOURCE: https://github.com/alecthomas/kong/blob/master/README.md#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nvar pluginOne struct {\n  PluginOneFlag string\n}\nvar pluginTwo struct {\n  PluginTwoFlag string\n}\nvar cli struct {\n  BaseFlag string\n  kong.Plugins\n}\ncli.Plugins = kong.Plugins{&pluginOne, &pluginTwo}\n```\n\n----------------------------------------\n\nTITLE: Variable Interpolation in Configuration Fields\nDESCRIPTION: Shows how to use variable interpolation in Kong CLI configuration. Variables can be defined using the Vars option and then referenced in field defaults, allowing for dynamic configuration values.\nSOURCE: https://github.com/alecthomas/kong/blob/master/README.md#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\ntype cli struct {\n  Config string `type:\"path\" default:\"${config_file}\"`\n}\n\nfunc main() {\n  kong.Parse(&cli,\n    kong.Vars{\n      \"config_file\": \"~/.app.conf\",\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a BeforeApply Hook for Debug Logging in Kong\nDESCRIPTION: Example showing how to create a custom flag type with a BeforeApply hook that sets a logger's output to stdout when enabled. This demonstrates Kong's hook functionality for modifying behavior during CLI parsing.\nSOURCE: https://github.com/alecthomas/kong/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// A flag with a hook that, if triggered, will set the debug loggers output to stdout.\ntype debugFlag bool\n\nfunc (d debugFlag) BeforeApply(logger *log.Logger) error {\n  logger.SetOutput(os.Stdout)\n  return nil\n}\n\nvar cli struct {\n  Debug debugFlag `help:\"Enable debug logging.\"`\n}\n\nfunc main() {\n  // Debug logger going to discard.\n  logger := log.New(io.Discard, \"\", log.LstdFlags)\n\n  ctx := kong.Parse(&cli, kong.Bind(logger))\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Kong Tag Syntax Example\nDESCRIPTION: Examples of the two supported tag formats in Kong: standard Go syntax tags and bare tags. Both forms can coexist with standard Tag parsing.\nSOURCE: https://github.com/alecthomas/kong/blob/master/README.md#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nkong:\"required,name='foo'\"\n```\n\n----------------------------------------\n\nTITLE: Using SSH to connect to Kong interactive server\nDESCRIPTION: Example session showing how to connect to the Kong SSH server and interact with its commands. The session demonstrates using help, status commands and handling command flags.\nSOURCE: https://github.com/alecthomas/kong/blob/master/_examples/server/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ ssh -p 6740 127.0.0.1\nWelcome!\n> ?\n\nExample using Kong for interactive command parsing.\n\nCommands:\n  help [<command> ...]\n    Show help.\n\n  status\n    Show server status.\n\n> status\nOK\n> help status\n\nShow server status.\n\nFlags:\n  -v, --verbose    Show verbose status information.\n\n> status \nOK\n> status -v\nOK\n> status foo\nerror: unexpected argument foo\n\nShow server status.\n\nFlags:\n> ^D\n```"
  }
]