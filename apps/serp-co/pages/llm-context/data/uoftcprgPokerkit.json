[
  {
    "owner": "uoftcprg",
    "repo": "pokerkit",
    "content": "TITLE: Short Deck Hold'em Hand State Management\nDESCRIPTION: Initializes and manages a Short Deck Hold'em poker game state with multiple players, including dealing hole cards, handling betting actions, and tracking stacks.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/docs/examples.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> state = NoLimitShortDeckHoldem.create_state(\n...     (\n...         Automation.ANTE_POSTING,\n...         Automation.BET_COLLECTION,\n...         Automation.BLIND_OR_STRADDLE_POSTING,\n...         Automation.HOLE_CARDS_SHOWING_OR_MUCKING,\n...         Automation.HAND_KILLING,\n...         Automation.CHIPS_PUSHING,\n...         Automation.CHIPS_PULLING,\n...     ),\n...     True,\n...     3000,\n...     {-1: 3000},\n...     3000,\n...     (495000, 232000, 362000, 403000, 301000, 204000),\n...     6,\n... )\n```\n\n----------------------------------------\n\nTITLE: Initializing a Multi-Runout No-Limit Texas Hold'em Game in Python\nDESCRIPTION: Creates a No-Limit Texas Hold'em game state for a cash game with 6 players, featuring multiple automations. The game is configured with an ante of 600, blinds of 200/400/800, and starting stacks for each player, with some set to infinity as they aren't mentioned in the scenario.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/docs/examples.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom math import inf\nfrom pokerkit import Automation, Mode, NoLimitTexasHoldem\nstate = NoLimitTexasHoldem.create_state(\n    (\n        Automation.ANTE_POSTING,\n        Automation.BET_COLLECTION,\n        Automation.BLIND_OR_STRADDLE_POSTING,\n        Automation.HOLE_CARDS_SHOWING_OR_MUCKING,\n        Automation.HAND_KILLING,\n        Automation.CHIPS_PUSHING,\n        Automation.CHIPS_PULLING,\n    ),\n    False,\n    {-1: 600},\n    (200, 400, 800),\n    400,\n    (inf, 116400, 86900, inf, 50000, inf),\n    6,\n    mode=Mode.CASH_GAME,\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing a Fixed-Limit Texas Hold'em Game in Python\nDESCRIPTION: Creates a Fixed-Limit Texas Hold'em game state with various automation options, including ante posting, bet collection, and card actions. The game is configured with a small blind of 1, big blind of 2, small bet of 2, big bet of 4, and starting stacks of 200.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/docs/examples.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pokerkit import *\nstate = FixedLimitTexasHoldem.create_state(\n    (\n        Automation.ANTE_POSTING,\n        Automation.BET_COLLECTION,\n        Automation.BLIND_OR_STRADDLE_POSTING,\n        Automation.CARD_BURNING,\n        Automation.HOLE_CARDS_SHOWING_OR_MUCKING,\n        Automation.HAND_KILLING,\n        Automation.CHIPS_PUSHING,\n        Automation.CHIPS_PULLING,\n    ),\n    True,\n    0,\n    (1, 2),\n    2,\n    4,\n    200,\n    2,\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Full Manual Usage in PokerKit (Python)\nDESCRIPTION: This code snippet demonstrates how to manually handle each operation step-by-step in PokerKit without using automation. It creates a game state and iterates through various possible actions, prompting for user input when no automated action is available.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/docs/tips.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pokerkit import *\n\ndef create_state(): ...\n\nstate = create_state()\n\nwhile state.status:\n    if state.can_post_ante():\n        state.post_ante()\n    elif state.can_collect_bets():\n        state.collect_bets()\n    elif state.can_post_blind_or_straddle():\n        state.post_blind_or_straddle()\n    elif state.can_burn_card():\n        state.burn_card('??')\n    elif state.can_deal_hole():\n        state.deal_hole()\n    elif state.can_deal_board():\n        state.deal_board()\n    elif state.can_kill_hand():\n        state.kill_hand()\n    elif state.can_push_chips():\n        state.push_chips()\n    elif state.can_pull_chips():\n        state.pull_chips()\n    else:\n        action = input('Action: ')\n\n        parse_action(state, action)\n```\n\n----------------------------------------\n\nTITLE: Equity Calculations with PokerKit Python\nDESCRIPTION: Shows how to perform Monte Carlo simulations for calculating poker hand equities using ProcessPoolExecutor for concurrent processing. Includes examples with different hand ranges and board scenarios.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/docs/analysis.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> from concurrent.futures import ProcessPoolExecutor\n>>> from pokerkit import *\n>>> with ProcessPoolExecutor() as executor:\n...     calculate_equities(\n...         (\n...             parse_range('AK'),\n...             parse_range('22'),\n...         ),\n...         (),\n...         2,\n...         5,\n...         Deck.STANDARD,\n...         (StandardHighHand,),\n...         sample_count=10000,\n...         executor=executor,\n...     )\n... \n[0.4807, 0.5193]\n>>> with ProcessPoolExecutor() as executor:\n...     calculate_equities(\n...         (\n...             parse_range('AsKs'),\n...             parse_range('AcJc'),\n...         ),\n...         Card.parse('Js8s5d'),\n...         2,\n...         5,\n...         Deck.STANDARD,\n...         (StandardHighHand,),\n...         sample_count=1000,\n...         executor=executor,\n...     )\n... \n[0.485, 0.515]\n>>> with ProcessPoolExecutor() as executor:\n...     calculate_equities(\n...         (\n...             parse_range('2h2c'),\n...             parse_range('3h3c'),\n...             parse_range('AsKs'),\n...         ),\n...         Card.parse('QsJsTs'),\n...         2,\n...         5,\n...         Deck.STANDARD,\n...         (StandardHighHand,),\n...         sample_count=1000,\n...         executor=executor,\n...     )\n...\n[0.0, 0.0, 1.0]\n>>> calculate_equities(\n...     (\n...         parse_range('33'),\n...         parse_range('33'),\n...     ),\n...     Card.parse('Tc8d6h4s'),\n...     2,\n...     5,\n...     Deck.STANDARD,\n...     (StandardHighHand,),\n...     sample_count=1000,\n... )\n[0.5, 0.5]\n```\n\n----------------------------------------\n\nTITLE: Short-Deck Hold'em Hand Simulation\nDESCRIPTION: Demonstrates simulation of a Short-Deck Hold'em hand between Xuan and Phua, including state initialization and betting sequences.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/README.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom pokerkit import Automation, NoLimitShortDeckHoldem\n\nstate = NoLimitShortDeckHoldem.create_state(\n    (Automation.ANTE_POSTING,\n     Automation.BET_COLLECTION,\n     Automation.BLIND_OR_STRADDLE_POSTING,\n     Automation.HOLE_CARDS_SHOWING_OR_MUCKING,\n     Automation.HAND_KILLING,\n     Automation.CHIPS_PUSHING,\n     Automation.CHIPS_PULLING,),\n    True,\n    3000,\n    {-1: 3000},\n    3000,\n    (495000, 232000, 362000, 403000, 301000, 204000),\n    6)\n```\n\n----------------------------------------\n\nTITLE: Creating Poker Hands in PokerKit\nDESCRIPTION: Demonstrates how to create different types of poker hands using PokerKit's hand classes and validation.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/docs/evaluation.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> from pokerkit import *\n>>> h0 = ShortDeckHoldemHand('6s7s8s9sTs')\n>>> h1 = ShortDeckHoldemHand('7c8c9cTcJc')\n>>> h2 = ShortDeckHoldemHand('2c2d2h2s3h')\nTraceback (most recent call last):\n    ...\nValueError: The cards '2c2d2h2s3h' form an invalid ShortDeckHoldemHand hand.\n>>> h0\n6s7s8s9sTs\n>>> h1\n7c8c9cTcJc\n```\n\n----------------------------------------\n\nTITLE: Evaluating Short-Deck Hold'em Hands in Python\nDESCRIPTION: This snippet demonstrates how to evaluate and compare Short-Deck Hold'em hands using the PokerKit library. It shows hand creation, comparison, and error handling for invalid hands.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/docs/examples.rst#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n>>> from pokerkit import *\n>>> h0 = ShortDeckHoldemHand('6s7s8s9sTs')\n>>> h1 = ShortDeckHoldemHand('7c8c9cTcJc')\n>>> h2 = ShortDeckHoldemHand('2c2d2h2s3h')  # doctest: +ELLIPSIS\nTraceback (most recent call last):\n    ...\nValueError: The cards '2c2d2h2s3h' form an invalid ShortDeckHoldemHand h...\n>>> h0\n6s7s8s9sTs\n>>> h1\n7c8c9cTcJc\n>>> print(h0)\nStraight flush (6s7s8s9sTs)\n>>> h0 < h1\nTrue\n```\n\n----------------------------------------\n\nTITLE: Multi-Runout Poker Hand Simulation\nDESCRIPTION: Simulates a 4-runout hand between Phil Hellmuth and Ernest Wiggins, demonstrating state initialization and pre-flop actions in No-Limit Texas Hold'em.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom math import inf\n\nfrom pokerkit import Automation, Mode, NoLimitTexasHoldem\n\nstate = NoLimitTexasHoldem.create_state(\n    (Automation.ANTE_POSTING,\n     Automation.BET_COLLECTION,\n     Automation.BLIND_OR_STRADDLE_POSTING,\n     Automation.HOLE_CARDS_SHOWING_OR_MUCKING,\n     Automation.HAND_KILLING,\n     Automation.CHIPS_PUSHING,\n     Automation.CHIPS_PULLING,),\n    False,\n    {-1: 600},\n    (200, 400, 800),\n    400,\n    (inf, 116400, 86900, inf, 50000, inf),\n    6,\n    mode=Mode.CASH_GAME,)\n```\n\n----------------------------------------\n\nTITLE: Range Parsing in PokerKit Python\nDESCRIPTION: Demonstrates parsing poker hand range notations into sets of hole card combinations using PokerKit's parse_range function. Shows various notation formats and set operations.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/docs/analysis.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from pokerkit import *\n>>> parse_range('AKs')\n{frozenset({As, Ks}), frozenset({Kd, Ad}), frozenset({Kh, Ah}), frozenset({Ac, Kc})}\n>>> parse_range('22')\n{frozenset({2s, 2d}), frozenset({2d, 2h}), frozenset({2c, 2d}), frozenset({2s, 2h}), frozenset({2c, 2s}), frozenset({2c, 2h})}\n>>> parse_range('T9o') | parse_range('T9s') == parse_range('T9')\nTrue\n>>> parse_range('33', '44;55') == parse_range('33-55')\nTrue\n>>> parse_range('T9s') | parse_range('JTs') | parse_range('QJs') == parse_range('T9s-QJs')\nTrue\n>>> parse_range('T9s-QJs') | parse_range('T9o-QJo') == parse_range('T9-QJ')\nTrue\n>>> parse_range('J8s,J9s JTs') == parse_range('J8s+')\nTrue\n>>> parse_range('T9') - parse_range('T9s') == parse_range('T9o')\nTrue\n>>> parse_range('AdAh') < parse_range('AA')\nTrue\n```\n\n----------------------------------------\n\nTITLE: Hand Strength Calculations with PokerKit Python\nDESCRIPTION: Demonstrates Monte Carlo simulations for calculating poker hand strengths against random opponents. Uses ProcessPoolExecutor for parallel processing and includes various game scenarios.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/docs/analysis.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> from concurrent.futures import ProcessPoolExecutor\n>>> from pokerkit import *\n>>> with ProcessPoolExecutor() as executor:\n...     calculate_hand_strength(\n...         2,\n...         parse_range('AsKs'),\n...         Card.parse('Kc8h8d'),\n...         2,\n...         5,\n...         Deck.STANDARD,\n...         (StandardHighHand,),\n...         sample_count=1000,\n...         executor=executor,\n...     )\n... \n0.885\n>>> with ProcessPoolExecutor() as executor:\n...     calculate_hand_strength(\n...         3,\n...         parse_range('AsKs'),\n...         Card.parse('QsJsTs'),\n...         2,\n...         5,\n...         Deck.STANDARD,\n...         (StandardHighHand,),\n...         sample_count=1000,\n...         executor=executor,\n...     )\n...\n1.0\n>>> calculate_hand_strength(\n...     3,\n...     parse_range('3h3c'),\n...     Card.parse('3s3d2c'),\n...     2,\n...     5,\n...     Deck.STANDARD,\n...     (StandardHighHand,),\n...     sample_count=1000,\n... )\n1.0\n```\n\n----------------------------------------\n\nTITLE: Writing Single Hand History\nDESCRIPTION: Demonstrates creating and saving a poker hand history with detailed game state progression including pre-flop, flop, turn, and river actions.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/docs/notation.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom pokerkit import *\n\n# Game state construction\ngame = PotLimitOmahaHoldem(\n    (\n        Automation.ANTE_POSTING,\n        Automation.BET_COLLECTION,\n        Automation.BLIND_OR_STRADDLE_POSTING,\n        Automation.CARD_BURNING,\n        Automation.HOLE_CARDS_SHOWING_OR_MUCKING,\n        Automation.HAND_KILLING,\n        Automation.CHIPS_PUSHING,\n        Automation.CHIPS_PULLING,\n    ),\n    True,\n    0,\n    (500, 1000),\n    1000,\n)\nstate = game((1259450.25, 678473.5), 2)\n\n# State progression; Pre-flop\nstate.deal_hole(\"Ah3sKsKh\")  # Antonius\nstate.deal_hole(\"6d9s7d8h\")  # Blom\nstate.complete_bet_or_raise_to(3000)  # Blom\nstate.complete_bet_or_raise_to(9000)  # Antonius\nstate.complete_bet_or_raise_to(27000)  # Blom\nstate.complete_bet_or_raise_to(81000)  # Antonius\nstate.check_or_call()  # Blom\n\n# Flop\nstate.deal_board(\"4s5c2h\")\nstate.complete_bet_or_raise_to(91000)  # Antonius\nstate.complete_bet_or_raise_to(435000)  # Blom\nstate.complete_bet_or_raise_to(779000)  # Antonius\nstate.check_or_call()  # Blom\n\n# Turn & River\nstate.deal_board(\"5h\")\nstate.deal_board(\"9c\")\n\n# Creating hand history\nhh = HandHistory.from_game_state(game, state)\nhh.players = [\"Patrik Antonius\", \"Viktor Blom\"]\n\n# Dump hand\nwith open(\"path/to/file.phh\", \"wb\") as file:\n    hh.dump(file)\n```\n\n----------------------------------------\n\nTITLE: Card Representation in Python using PokerKit\nDESCRIPTION: Demonstrates different ways to represent poker cards using PokerKit, including using Card objects and string representations.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/docs/evaluation.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pokerkit import *\n\ncards = Card(Rank.ACE, Suit.SPADE), Card(Rank.KING, Suit.SPADE)\ncards = [Card(Rank.ACE, Suit.SPADE), Card(Rank.KING, Suit.SPADE)]\ncards = {Card(Rank.ACE, Suit.SPADE), Card(Rank.KING, Suit.SPADE)}\ncards = Card.parse('AsKs')\ncards = 'AsKs'\n```\n\n----------------------------------------\n\nTITLE: Player Statistics Analysis in PokerKit Python\nDESCRIPTION: Shows how to analyze hand histories and calculate player statistics using PokerKit. Includes examples of accessing individual player statistics and merging multiple statistics objects.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/docs/analysis.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom pokerkit import *\n\nhh0 = ...\nhh1 = ...\nhh2 = ...\n...\n\nss = Statistics.from_hand_history(hh0, hh1, hh2, ...)\n\nprint(ss['John Smith'].payoff_mean)\nprint(ss['John Smith'].payoff_stdev)\nprint(ss['Jane Doe'].payoff_mean)\nprint(ss['Jane Doe'].payoff_stdev)\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom pokerkit import *\n\ns0 = ...\ns1 = ...\ns2 = ...\n...\n\ns = Statistics.merge(s0, s1, s2, ...)\n```\n\n----------------------------------------\n\nTITLE: Calculating Poker Statistics from Hand Histories in Python\nDESCRIPTION: Demonstrates loading multiple poker hand histories and using the Statistics class to analyze player performance metrics. Shows how to access mean payoff and standard deviation statistics for a specific player.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/docs/examples.rst#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom pokerkit import *\n\nhh0 = ...\nhh1 = ...\nhh2 = ...\n...\n\nss = Statistics.from_hand_history(hh0, hh1, hh2, ...)\n\nprint(ss['John Doe'].payoff_mean)  # in chips/hand\nprint(ss['John Doe'].payoff_stdev)  # in chips/hand\n```\n\n----------------------------------------\n\nTITLE: Pot-Limit Omaha Hold'em Hand Simulation\nDESCRIPTION: Simulates the largest online poker pot between Patrik Antonius and Viktor Blom in Pot-Limit Omaha format.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/README.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom pokerkit import Automation, PotLimitOmahaHoldem\n\nstate = PotLimitOmahaHoldem.create_state(\n    (Automation.ANTE_POSTING,\n     Automation.BET_COLLECTION,\n     Automation.BLIND_OR_STRADDLE_POSTING,\n     Automation.HOLE_CARDS_SHOWING_OR_MUCKING,\n     Automation.HAND_KILLING,\n     Automation.CHIPS_PUSHING,\n     Automation.CHIPS_PULLING,),\n    True,\n    0,\n    (500, 1000),\n    1000,\n    (1259450.25, 678473.5),\n    2)\n```\n\n----------------------------------------\n\nTITLE: Performing Monte Carlo Equity Calculations in Python\nDESCRIPTION: This snippet shows how to use PokerKit's statistical analysis tools to calculate player equities and hand strengths using Monte Carlo simulations with parallel processing.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/docs/examples.rst#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n>>> from concurrent.futures import ProcessPoolExecutor\n>>> from pokerkit import *\n>>> with ProcessPoolExecutor() as executor:\n...     calculate_equities(\n...         (\n...             parse_range('AK'),\n...             parse_range('22'),\n...         ),\n...         (),\n...         2,\n...         5,\n...         Deck.STANDARD,\n...         (StandardHighHand,),\n...         sample_count=10000,\n...         executor=executor,\n...     )\n... \n[0.4807, 0.5193]\n>>> with ProcessPoolExecutor() as executor:\n...     calculate_hand_strength(\n...         2,\n...         parse_range('AsKs'),\n...         Card.parse('Kc8h8d'),\n...         2,\n...         5,\n...         Deck.STANDARD,\n...         (StandardHighHand,),\n...         sample_count=1000,\n...         executor=executor,\n...     )\n... \n0.885\n```\n\n----------------------------------------\n\nTITLE: Dealing Hole Cards and Making Pre-flop Actions in Fixed-Limit Texas Hold'em\nDESCRIPTION: Demonstrates dealing hole cards to players and performing pre-flop betting actions in a Fixed-Limit Texas Hold'em game. Player 0 receives pocket aces while Player 1 gets 7-6 suited, followed by betting, raising, and folding actions.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/docs/examples.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nstate.deal_hole('AcAs')  # doctest: +ELLIPSIS\nstate.deal_hole('7h6h')  # doctest: +ELLIPSIS\n\nstate.complete_bet_or_raise_to()\nstate.complete_bet_or_raise_to()\nstate.fold()\n```\n\n----------------------------------------\n\nTITLE: Simulating Badugi Game State in Python\nDESCRIPTION: This snippet shows how to set up and simulate a Badugi poker game using the PokerKit library. It includes game initialization, dealing, and player actions for multiple rounds.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/docs/examples.rst#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n>>> from math import inf\n>>> from pokerkit import *\n>>> state = FixedLimitBadugi.create_state(\n...     (\n...         Automation.ANTE_POSTING,\n...         Automation.BET_COLLECTION,\n...         Automation.BLIND_OR_STRADDLE_POSTING,\n...         Automation.HAND_KILLING,\n...         Automation.CHIPS_PUSHING,\n...         Automation.CHIPS_PULLING,\n...     ),\n...     True,\n...     0,\n...     (1, 2),\n...     2,\n...     4,\n...     inf,\n...     4,\n... )\n\n>>> state.deal_hole('????????')  # Bob  # doctest: +ELLIPSIS\nHoleDealing(commentary=None, player_index=0, cards=(??, ??, ??, ??),...\n>>> state.deal_hole('????????')  # Carol  # doctest: +ELLIPSIS\nHoleDealing(commentary=None, player_index=1, cards=(??, ??, ??, ??),...\n>>> state.deal_hole('????????')  # Ted  # doctest: +ELLIPSIS\nHoleDealing(commentary=None, player_index=2, cards=(??, ??, ??, ??),...\n>>> state.deal_hole('????????')  # Alice  # doctest: +ELLIPSIS\nHoleDealing(commentary=None, player_index=3, cards=(??, ??, ??, ??),...\n\n>>> state.fold()  # Ted\nFolding(commentary=None, player_index=2)\n>>> state.check_or_call()  # Alice\nCheckingOrCalling(commentary=None, player_index=3, amount=2)\n>>> state.check_or_call()  # Bob\nCheckingOrCalling(commentary=None, player_index=0, amount=1)\n>>> state.check_or_call()  # Carol\nCheckingOrCalling(commentary=None, player_index=1, amount=0)\n```\n\n----------------------------------------\n\nTITLE: Creating Game-Based Hands in PokerKit\nDESCRIPTION: Shows how to create poker hands from game scenarios using hole cards and board cards.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/docs/evaluation.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> from pokerkit import *\n>>> h0 = OmahaHoldemHand.from_game('6c7c8c9c', '8s9sTc')\n>>> h1 = OmahaHoldemHand('6c7c8s9sTc')\n>>> h0 == h1\nTrue\n>>> h0 = OmahaEightOrBetterLowHand.from_game('As2s3s4s', '2c3c4c5c6c')\n>>> h1 = OmahaEightOrBetterLowHand('Ad2d3d4d5d')\n>>> h0 == h1\nTrue\n>>> hole = 'AsAc'\n>>> board = 'Kh3sAdAh'\n>>> hand = StandardHighHand.from_game(hole, board)\n>>> hand.cards\n(As, Ac, Kh, Ad, Ah)\n```\n\n----------------------------------------\n\nTITLE: Initializing Badugi Game\nDESCRIPTION: Sets up a Badugi poker game state with infinite stacks and specified betting limits. Includes automation settings for game mechanics.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/README.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom math import inf\n\nfrom pokerkit import Automation, FixedLimitBadugi\n\nstate = FixedLimitBadugi.create_state(\n    # Automations\n    (\n        Automation.ANTE_POSTING,\n        Automation.BET_COLLECTION,\n        Automation.BLIND_OR_STRADDLE_POSTING,\n        Automation.HAND_KILLING,\n        Automation.CHIPS_PUSHING,\n        Automation.CHIPS_PULLING,\n    ),\n    True,  # Uniform antes?\n    0,  # Antes\n    (1, 2),  # Blinds or straddles\n    2,  # Small-bet\n    4,  # Big-bet\n    inf,  # Starting stacks\n    4,  # Number of players\n)\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Board Runouts in No-Limit Texas Hold'em\nDESCRIPTION: Shows how to execute multiple board runouts for turn and river cards in an all-in situation. The example demonstrates four complete runouts, each with card burning and dealing of turn and river cards.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/docs/examples.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# First runout\nstate.burn_card('??')\nstate.deal_board('Jh')  # Turn\nstate.burn_card('??')\nstate.deal_board('Ad')  # River\n\n# Second runout\nstate.burn_card('??')\nstate.deal_board('Kh')  # Turn\nstate.burn_card('??')\nstate.deal_board('3c')  # River\n\n# Third runout\nstate.burn_card('??')\nstate.deal_board('7s')  # Turn\nstate.burn_card('??')\nstate.deal_board('8s')  # River\n\n# Fourth runout\nstate.burn_card('??')\nstate.deal_board('Qc')  # Turn\nstate.burn_card('??')\nstate.deal_board('Kd')  # River\n```\n\n----------------------------------------\n\nTITLE: Comparing High Hands in PokerKit\nDESCRIPTION: Demonstrates how to compare standard high poker hands using comparison operators.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/docs/evaluation.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> from pokerkit import *\n>>> h0 = StandardHighHand('7c5d4h3s2c')\n>>> h1 = StandardHighHand('7c6d4h3s2c')\n>>> h2 = StandardHighHand('8c7d6h4s2c')\n>>> h3 = StandardHighHand('AcAsAd2s4s')\n>>> h4 = StandardHighHand('TsJsQsKsAs')\n>>> h0 < h1 < h2 < h3 < h4\nTrue\n```\n\n----------------------------------------\n\nTITLE: Card Parsing Examples in PokerKit\nDESCRIPTION: Shows how to parse card strings into Card objects using PokerKit's parsing functionality, including handling unknown cards.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/docs/evaluation.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> Card.parse('AsKsQsJsTs')  # doctest: +ELLIPSIS\n<generator object Card.parse at 0x...>\n>>> list(Card.parse('2c8d5sKh'))\n[2c, 8d, 5s, Kh]\n>>> next(Card.parse('AcAh'))\nAc\n>>> tuple(Card.parse('??2?3??c'))\n(??, 2?, 3?, ?c)\n```\n\n----------------------------------------\n\nTITLE: Reading Single Hand History in PHH Format\nDESCRIPTION: Demonstrates loading a single hand history from a PHH file, creating a game and state object, and iterating through action steps.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/docs/notation.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pokerkit import *\n\n# Load hand\nwith open(\"path/to/file.phh\", \"rb\") as file:\n    hh = HandHistory.load(file)\n\n# Create game\ngame = hh.create_game()\n\n# Create state\nstate = hh.create_state()\n\n# Iterate through each action step\nfor state in hh:\n    ...\n\n# Iterate through each action step\nfor state, action in hh.state_actions:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Calculating Poker Hand Strength in Python\nDESCRIPTION: Function for calculating the strength of poker hands.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/CHANGELOG.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\npokerkit.analysis.calculate_hand_strength\n```\n\n----------------------------------------\n\nTITLE: Loading Hand Histories from Various Platforms\nDESCRIPTION: Demonstrates loading hand histories from different poker platforms including Absolute Poker, Full Tilt Poker, iPoker Network, and others.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/docs/notation.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom pokerkit import *\n\n# Hand loading\nwith open(\"...\", \"rb\") as file:\n    content = file.read()\n\n    # Absolute Poker\n    for hh in HandHistory.from_absolute_poker(content):\n        ...\n\n    # Full Tilt Poker\n    for hh in HandHistory.from_full_tilt_poker(content):\n        ...\n\n    # iPoker Network\n    for hh in HandHistory.from_ipoker_network(content):\n        ...\n\n    # OnGame Network\n    for hh in HandHistory.from_ongame_network(content):\n        ...\n\n    # PartyPoker\n    for hh in HandHistory.from_partypoker(content):\n        ...\n\n    # PokerStars\n    for hh in HandHistory.from_pokerstars(content):\n        ...\n\n    # ACPC Protocol\n    for hh in HandHistory.from_acpc_protocol(\n            content,\n            NoLimitTexasHoldem((), True, 0, (50, 100), 100),\n            20000,\n    ):\n        ...\n```\n\n----------------------------------------\n\nTITLE: No-Limit Texas Hold'em Hand Simulation\nDESCRIPTION: Simulates the first televised million-dollar pot between Tom Dwan and Phil Ivey, showing game state initialization and betting actions.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom math import inf\n\nfrom pokerkit import Automation, NoLimitTexasHoldem\n\nstate = NoLimitTexasHoldem.create_state(\n    (Automation.ANTE_POSTING,\n     Automation.BET_COLLECTION,\n     Automation.BLIND_OR_STRADDLE_POSTING,\n     Automation.HOLE_CARDS_SHOWING_OR_MUCKING,\n     Automation.HAND_KILLING,\n     Automation.CHIPS_PUSHING,\n     Automation.CHIPS_PULLING,),\n    True,\n    500,\n    (1000, 2000),\n    2000,\n    (1125600, inf, 553500),\n    3)\n```\n\n----------------------------------------\n\nTITLE: Customizing Hand History Loading\nDESCRIPTION: Shows how to customize hand history loading with custom parsing functions for chip values, divmod operations, and rake calculations.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/docs/notation.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom pokerkit import *\n\nhh = HandHistory.load(\n    ...,\n    automations=...,\n    divmod=...,\n    rake=...,\n    parse_value=...,\n)\n\nhh = HandHistory.loads(\n    ...,\n    automations=...,\n    divmod=...,\n    rake=...,\n    parse_value=...,\n)\n```\n\n----------------------------------------\n\nTITLE: Simulating Draw Poker Game State in Python\nDESCRIPTION: This snippet demonstrates the simulation of a draw poker game state, including player actions, card dealing, and betting rounds. It uses the PokerKit library to manage the game flow.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/docs/examples.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n>>> state.stand_pat_or_discard()  # Yockey\nStandingPatOrDiscarding(commentary=None, player_index=0, cards=())\n>>> state.stand_pat_or_discard('AsQs')  # Arieh  # doctest: +ELLIPSIS\nStandingPatOrDiscarding(commentary=None, player_index=3, cards=(As, ...\n>>> state.burn_card('??')\nCardBurning(commentary=None, card=??)\n>>> state.deal_hole('2hQh')  # Arieh  # doctest: +ELLIPSIS\nHoleDealing(commentary=None, player_index=3, cards=(2h, Qh), statuse...\n\n>>> state.complete_bet_or_raise_to()  # Yockey  # doctest: +ELLIPSIS\nCompletionBettingOrRaisingTo(commentary=None, player_index=0, amount...\n>>> state.check_or_call()  # Arieh\nCheckingOrCalling(commentary=None, player_index=3, amount=150000)\n```\n\n----------------------------------------\n\nTITLE: Initializing Million-Dollar Pot No-Limit Texas Hold'em Game\nDESCRIPTION: Creates a No-Limit Texas Hold'em game state representing the first televised million-dollar pot between Tom Dwan and Phil Ivey. The game is configured with various automations, an ante of 500, blinds of 1000/2000, and substantial starting stacks.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/docs/examples.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom math import inf\nfrom pokerkit import *\nstate = NoLimitTexasHoldem.create_state(\n    (\n        Automation.ANTE_POSTING,\n        Automation.BET_COLLECTION,\n        Automation.BLIND_OR_STRADDLE_POSTING,\n        Automation.HOLE_CARDS_SHOWING_OR_MUCKING,\n        Automation.HAND_KILLING,\n        Automation.CHIPS_PUSHING,\n        Automation.CHIPS_PULLING,\n    ),\n    True,\n    500,\n    (1000, 2000),\n    2000,\n    (1125600, inf, 553500),\n    3,\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Final Stacks After Multi-Runout All-In Situation\nDESCRIPTION: Shows how to check the final stack values of all players after completing the multi-runout all-in situation between Hellmuth and Wiggins. The example displays the updated stacks for all six players.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/docs/examples.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nstate.stacks\n```\n\n----------------------------------------\n\nTITLE: Selecting Multiple Runouts in an All-In Situation\nDESCRIPTION: Demonstrates how to select multiple runouts in an all-in situation in No-Limit Texas Hold'em. Hellmuth selects 4 runouts while Wiggins defers the selection, illustrating PokerKit's support for multi-runout scenarios.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/docs/examples.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nstate.select_runout_count(4)  # Hellmuth\nstate.select_runout_count(None)  # Wiggins  # doctest: +ELLIPSIS\n```\n\n----------------------------------------\n\nTITLE: Reading Multiple Hand Histories\nDESCRIPTION: Shows how to load multiple hand histories from a single file and iterate through them.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/docs/notation.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pokerkit import *\n\n# Load hands\nwith open(\"path/to/file.phhs\", \"rb\") as file:\n    hhs = HandHistory.load_all(file)\n\n# Iterate through each hand history\nfor hh in hhs:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Retrieving Board Cards in Python\nDESCRIPTION: Method for getting the cards of a specific board in a multi-board poker game state.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/CHANGELOG.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\npokerkit.state.State.get_board_cards(board_index: int)\n```\n\n----------------------------------------\n\nTITLE: Initializing Fixed-Limit Deuce-To-Seven Lowball Triple Draw Game\nDESCRIPTION: Creates and initializes a game state for Fixed-Limit Deuce-To-Seven Lowball Triple Draw with specified automations, betting limits, and player stacks.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/README.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom pokerkit import Automation, FixedLimitDeuceToSevenLowballTripleDraw\n\nstate = FixedLimitDeuceToSevenLowballTripleDraw.create_state(\n    # Automations\n    (\n        Automation.ANTE_POSTING,\n        Automation.BET_COLLECTION,\n        Automation.BLIND_OR_STRADDLE_POSTING,\n        Automation.HOLE_CARDS_SHOWING_OR_MUCKING,\n        Automation.HAND_KILLING,\n        Automation.CHIPS_PUSHING,\n        Automation.CHIPS_PULLING,\n    ),\n    True,  # Uniform antes?\n    0,  # Antes\n    (75000, 150000),  # Blinds or straddles\n    150000,  # Small-bet\n    300000,  # Big-bet\n    (1180000, 4340000, 5910000, 10765000),  # Starting stacks\n    4,  # Number of players\n)\n```\n\n----------------------------------------\n\nTITLE: Pot-Limit Omaha Hold'em Game State\nDESCRIPTION: Sets up and manages a Pot-Limit Omaha Hold'em game state between two players, including initial stack sizes and betting structures.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/docs/examples.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n>>> state = PotLimitOmahaHoldem.create_state(\n...     (\n...         Automation.ANTE_POSTING,\n...         Automation.BET_COLLECTION,\n...         Automation.BLIND_OR_STRADDLE_POSTING,\n...         Automation.HOLE_CARDS_SHOWING_OR_MUCKING,\n...         Automation.HAND_KILLING,\n...         Automation.CHIPS_PUSHING,\n...         Automation.CHIPS_PULLING,\n...     ),\n...     True,\n...     0,\n...     (500, 1000),\n...     1000,\n...     (1259450.25, 678473.5),\n...     2,\n... )\n```\n\n----------------------------------------\n\nTITLE: Generating ACPC Protocol Logs\nDESCRIPTION: Demonstrates how to convert hand histories to ACPC protocol format and save them.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/docs/notation.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nhh = ...\nlines = [\n    f'{sender} {message}' for sender, message in hh.to_acpc_protocol(0, 0)\n]\n\nwith open(\"...\", \"w\") as file:\n    file.write(\"\".join(lines))\n```\n\n----------------------------------------\n\nTITLE: Pre-flop Dealings and Actions in Million-Dollar Pot Simulation\nDESCRIPTION: Demonstrates dealing hole cards and executing pre-flop betting actions in a high-stakes No-Limit Texas Hold'em hand. The example shows Ivey with Ac2d and Dwan with 7h6h, followed by raising and calling actions.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/docs/examples.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nstate.deal_hole('Ac2d')  # Ivey  # doctest: +ELLIPSIS\nstate.deal_hole('????')  # Antonius  # doctest: +ELLIPSIS\nstate.deal_hole('7h6h')  # Dwan  # doctest: +ELLIPSIS\n\nstate.complete_bet_or_raise_to(7000)  # Dwan  # doctest: +ELLIPSIS\nstate.complete_bet_or_raise_to(23000)  # Ivey  # doctest: +ELLIPSIS\nstate.fold()  # Antonius\nstate.check_or_call()  # Dwan\n```\n\n----------------------------------------\n\nTITLE: Selecting Runout Count in Python\nDESCRIPTION: Method for selecting the runout count in a poker game state, with optional commentary.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/CHANGELOG.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npokerkit.state.State.select_runout_count(player_index: int | None = None, runout_count: int | None = None, *, commentary: str | None = None)\n```\n\n----------------------------------------\n\nTITLE: Flop Dealing and Betting Actions in No-Limit Texas Hold'em\nDESCRIPTION: Shows burning a card, dealing the flop (9h, Ts, 9s), and subsequent betting actions in a No-Limit Texas Hold'em game. The example includes checking, raising, and folding, culminating in an all-in situation between Hellmuth and Wiggins.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/docs/examples.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nstate.burn_card('??')\nstate.deal_board('9hTs9s')\nstate.check_or_call()  # Tony G\nstate.complete_bet_or_raise_to(\n    17000,\n)  # Hellmuth  # doctest: +ELLIPSIS\nstate.complete_bet_or_raise_to(\n    36000,\n)  # Wiggins  # doctest: +ELLIPSIS\nstate.fold()  # Brunson\nstate.fold()  # Tony G\nstate.complete_bet_or_raise_to(\n    103800,\n)  # Hellmuth  # doctest: +ELLIPSIS\nstate.check_or_call()  # Wiggins\n```\n\n----------------------------------------\n\nTITLE: Pre-flop Dealings and Actions in Multi-player No-Limit Texas Hold'em\nDESCRIPTION: Demonstrates dealing hole cards to six players and executing pre-flop betting actions in a No-Limit Texas Hold'em cash game. The snippet shows folding, raising, and calling actions through a realistic poker hand scenario.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/docs/examples.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nstate.deal_hole('JsTh')  # Tony G  # doctest: +ELLIPSIS\nstate.deal_hole('Ah9d')  # Hellmuth  # doctest: +ELLIPSIS\nstate.deal_hole('KsKc')  # Wiggins  # doctest: +ELLIPSIS\nstate.deal_hole('5c2h')  # Negreanu  # doctest: +ELLIPSIS\nstate.deal_hole('6h5h')  # Brunson  # doctest: +ELLIPSIS\nstate.deal_hole('6s3s')  # Laak  # doctest: +ELLIPSIS\nstate.fold()  # Negreanu\nstate.complete_bet_or_raise_to(\n    2800,\n)  # Brunson  # doctest: +ELLIPSIS\nstate.fold()  # Laak\nstate.check_or_call()  # Tony G\nstate.complete_bet_or_raise_to(\n    12600,\n)  # Hellmuth  # doctest: +ELLIPSIS\nstate.check_or_call()  # Wiggins\nstate.check_or_call()  # Brunson\nstate.check_or_call()  # Tony G\n```\n\n----------------------------------------\n\nTITLE: Installing PokerKit Dependencies\nDESCRIPTION: Command to install all required dependencies for PokerKit development from the requirements file. This ensures you have all necessary packages to develop and test the project.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/CONTRIBUTING.rst#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Installing PokerKit via pip\nDESCRIPTION: Command to install the PokerKit library using pip package manager. Requires Python 3.11 or above.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install pokerkit\n```\n\n----------------------------------------\n\nTITLE: Starting Flop Dealing in Million-Dollar Pot Simulation\nDESCRIPTION: Shows the beginning of the flop dealing process in the famous million-dollar pot hand. The example only includes burning a card before the flop, as the full hand continuation is not shown in the provided code snippet.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/docs/examples.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nstate.burn_card('??')\n```\n\n----------------------------------------\n\nTITLE: Comparing Low Hands in PokerKit\nDESCRIPTION: Shows how to compare standard low poker hands using comparison operators.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/docs/evaluation.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> from pokerkit import *\n>>> h0 = StandardLowHand('TsJsQsKsAs')\n>>> h1 = StandardLowHand('AcAsAd2s4s')\n>>> h2 = StandardLowHand('8c7d6h4s2c')\n>>> h3 = StandardLowHand('7c6d4h3s2c')\n>>> h4 = StandardLowHand('7c5d4h3s2c')\n>>> h0 < h1 < h2 < h3 < h4\nTrue\n```\n\n----------------------------------------\n\nTITLE: Importing PokerKit Modules for Hand Evaluation in Python\nDESCRIPTION: These import statements reference the key modules in PokerKit for working with lookups and hand types. Users can use these modules to define custom hand types or leverage existing lookups.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/docs/evaluation.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport pokerkit.lookups\nimport pokerkit.hands\n```\n\n----------------------------------------\n\nTITLE: Fixed-Limit Triple Draw Game State\nDESCRIPTION: Initializes a Fixed-Limit Deuce-To-Seven Lowball Triple Draw poker game state with four players and specific betting limits.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/docs/examples.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n>>> from pokerkit import *\n>>> state = FixedLimitDeuceToSevenLowballTripleDraw.create_state(\n...     (\n...         Automation.ANTE_POSTING,\n...         Automation.BET_COLLECTION,\n...         Automation.BLIND_OR_STRADDLE_POSTING,\n...         Automation.HOLE_CARDS_SHOWING_OR_MUCKING,\n...         Automation.HAND_KILLING,\n...         Automation.CHIPS_PUSHING,\n...         Automation.CHIPS_PULLING,\n...     ),\n...     True,\n...     0,\n...     (75000, 150000),\n...     150000,\n...     300000,\n...     (1180000, 4340000, 5910000, 10765000),\n...     4,\n... )\n```\n\n----------------------------------------\n\nTITLE: Calculating Poker Hand Equities in Python\nDESCRIPTION: Function for calculating equities of poker hands.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/CHANGELOG.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\npokerkit.analysis.calculate_equities\n```\n\n----------------------------------------\n\nTITLE: Writing Multiple Hand Histories\nDESCRIPTION: Shows how to save multiple hand histories to a single file.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/docs/notation.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom pokerkit import *\n\nhhs = [...]\n\n# Dump hands\nwith open(\"path/to/file.phhs\", \"wb\") as file:\n    HandHistory.dump_all(hhs, file)\n```\n\n----------------------------------------\n\nTITLE: Parsing Poker Hand Ranges in Python\nDESCRIPTION: Function for parsing poker hand ranges using a specific notation.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/CHANGELOG.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\npokerkit.analysis.parse_range(\"AKs,T8o-KJo,6h5h,A2+\")\n```\n\n----------------------------------------\n\nTITLE: Checking Final Stacks in Fixed-Limit Texas Hold'em\nDESCRIPTION: Shows how to retrieve the final stack values of players after the completion of a Fixed-Limit Texas Hold'em hand. The example displays the updated stacks after the previous betting actions and fold.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/docs/examples.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nstate.stacks\n```\n\n----------------------------------------\n\nTITLE: Retrieving Censored Hole Cards in Python\nDESCRIPTION: Method for get censored hole cards in a poker game state.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/CHANGELOG.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\npokerkit.state.State.get_censored_hole_cards()\n```\n\n----------------------------------------\n\nTITLE: Converting to Pluribus Protocol Format\nDESCRIPTION: Shows how to convert hand histories to the Pluribus protocol format used in Brown and Sandholm's research.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/docs/notation.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nhh = ...\nline = hh.to_pluribus_protocol(10)\n\nwith open(\"...\", \"w\") as file:\n    file.write(line)\n```\n\n----------------------------------------\n\nTITLE: Initializing State Mode Enum in Python\nDESCRIPTION: Defines a new enum class State.Mode for setting tournament or cash-game mode when initializing poker states.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/CHANGELOG.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npokerkit.state.State.Mode.TOURNAMENT\npokerkit.state.State.Mode.CASH_GAME\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests\nDESCRIPTION: Command to execute the PokerKit unit test suite. This validates that your changes don't break existing functionality and that new features work correctly.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/CONTRIBUTING.rst#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npython -m unittest\n```\n\n----------------------------------------\n\nTITLE: Querying Runout Count Selection in Python\nDESCRIPTION: Method for querying if a player can select the runout count in a poker game state.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/CHANGELOG.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npokerkit.state.State.can_select_runout_count(player_index: int | None = None, runout_count: int | None = None)\n```\n\n----------------------------------------\n\nTITLE: Running Doctests\nDESCRIPTION: Command to run doctests on all Python files in the PokerKit package. This ensures that code examples in documentation strings are correct and functional.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/CONTRIBUTING.rst#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npython -m doctest pokerkit/*.py\n```\n\n----------------------------------------\n\nTITLE: Validating Runout Count Selection in Python\nDESCRIPTION: Method for validating a runout count selection in a poker game state.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/CHANGELOG.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npokerkit.state.State.verify_runout_count_selection(player_index: int | None = None, runout_count: int | None = None)\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for PokerKit\nDESCRIPTION: This snippet lists the required Python packages and their version constraints for the PokerKit project. It includes tools for various development tasks such as building, testing, code quality checks, and documentation.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nbuild~=1.2.2post1\ncoverage~=7.6.9\nflake8~=7.1.1\ninterrogate~=1.7.0\nmypy~=1.13.0\nSphinx~=8.1.3\nsphinx-rtd-theme~=3.0.2\ntwine~=6.0.1\n```\n\n----------------------------------------\n\nTITLE: Checking for Missing Docstrings with Interrogate\nDESCRIPTION: Command to verify that all code has proper documentation with the interrogate tool. The parameters enforce 100% documentation coverage with various filtering options.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/CONTRIBUTING.rst#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ninterrogate -f 100 -i -m -n -p -s -r '^\\w+TestCase' pokerkit\n```\n\n----------------------------------------\n\nTITLE: Importing Operation Class in Python\nDESCRIPTION: Makes the pokerkit.state.Operation class available as pokerkit.Operation by importing it in the pokerkit.__init__ file.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/CHANGELOG.rst#2025-04-21_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nfrom pokerkit.state import Operation as Operation\n```\n\n----------------------------------------\n\nTITLE: Running Style Checking with Flake8\nDESCRIPTION: Command to run the Flake8 linter on the PokerKit codebase. This validates that your code follows PEP8 and other style guidelines.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/CONTRIBUTING.rst#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nflake8 pokerkit\n```\n\n----------------------------------------\n\nTITLE: Running Static Type Checking with Mypy\nDESCRIPTION: Command to run static type checking with the strict flag enabled. This ensures all code has proper type annotations and type safety.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/CONTRIBUTING.rst#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmypy --strict pokerkit\n```\n\n----------------------------------------\n\nTITLE: Cloning the PokerKit Repository with Git\nDESCRIPTION: Command to clone the PokerKit repository from GitHub to your local machine. This is the first step in setting up your development environment after forking the repository.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/CONTRIBUTING.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:uoftcprg/pokerkit.git\n```\n\n----------------------------------------\n\nTITLE: Setting up Python Virtual Environment\nDESCRIPTION: Command to create a new Python virtual environment for isolated development. This ensures your PokerKit development dependencies don't conflict with other projects.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/CONTRIBUTING.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython -m venv venv\n```\n\n----------------------------------------\n\nTITLE: Activating Python Virtual Environment\nDESCRIPTION: Command to activate the virtual environment on Unix-like systems. This makes the virtual environment's Python interpreter and packages available for use.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/CONTRIBUTING.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsource venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Creating a Git Branch for Development\nDESCRIPTION: Command to create and switch to a new Git branch for your changes. This isolates your work from the main branch until it's ready to be merged.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/CONTRIBUTING.rst#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b branch-name\n```\n\n----------------------------------------\n\nTITLE: Citation Information in BibTeX\nDESCRIPTION: BibTeX citation entry for the PokerKit library publication in IEEE Transactions on Games.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/README.rst#2025-04-21_snippet_7\n\nLANGUAGE: bibtex\nCODE:\n```\n@ARTICLE{10287546,\n  author={Kim, Juho},\n  journal={IEEE Transactions on Games}, \n  title={PokerKit: A Comprehensive Python Library for Fine-Grained Multivariant Poker Game Simulations}, \n  year={2025},\n  volume={17},\n  number={1},\n  pages={32-39},\n  keywords={Games;Libraries;Automation;Artificial intelligence;Python;Computational modeling;Engines;Board games;card games;game design;games of chance;multiagent systems;Poker;rule-based systems;scripting;strategy games},\n  doi={10.1109/TG.2023.3325637}}\n```\n\n----------------------------------------\n\nTITLE: Setting up Sphinx Documentation Structure with toctree in ReStructuredText\nDESCRIPTION: Configures the documentation table of contents using the toctree directive. It sets the maximum depth to 1 and includes various documentation sections such as examples, simulation, evaluation, and more.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/docs/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n   :caption: Contents\n\n   examples\n   simulation\n   evaluation\n   notation\n   analysis\n   tips\n   contributing\n   changelog\n   reference\n```\n\n----------------------------------------\n\nTITLE: Adding Navigation Indices in Sphinx Documentation\nDESCRIPTION: Defines the navigation indices section that provides links to the general index, module index, and search functionality in the documentation.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/docs/index.rst#2025-04-21_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n```\n\n----------------------------------------\n\nTITLE: Committing Changes to Git\nDESCRIPTION: Command to commit your changes to the local Git repository with a descriptive message. This records your changes in version control with appropriate documentation.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/CONTRIBUTING.rst#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -am 'Add some feature'\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to GitHub\nDESCRIPTION: Command to push your branch with commits to your remote GitHub repository. This makes your changes available online for creating a pull request.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/CONTRIBUTING.rst#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin branch-name\n```\n\n----------------------------------------\n\nTITLE: Updating Local Repository from Upstream\nDESCRIPTION: Command to update your local main branch with the latest changes from the upstream repository. This keeps your fork in sync with the official project.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/CONTRIBUTING.rst#2025-04-21_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ngit pull upstream main\n```\n\n----------------------------------------\n\nTITLE: Including CHANGELOG.rst File in RST Documentation\nDESCRIPTION: This directive includes the content of the CHANGELOG.rst file from the parent directory into the current document. The include directive is used in Sphinx documentation to import content from other files.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/docs/changelog.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: ../CHANGELOG.rst\n```\n\n----------------------------------------\n\nTITLE: Deleting Remote Git Branch After Merge\nDESCRIPTION: Command to delete the remote branch on GitHub after your pull request is merged. This keeps the repository clean by removing branches that are no longer needed.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/CONTRIBUTING.rst#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin --delete branch-name\n```\n\n----------------------------------------\n\nTITLE: Checking Out Main Branch\nDESCRIPTION: Command to switch back to the main branch after your feature branch has been merged. This prepares you for cleaning up and starting new work.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/CONTRIBUTING.rst#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout main\n```\n\n----------------------------------------\n\nTITLE: Including External RST File\nDESCRIPTION: ReStructuredText include directive to import content from a parent directory's CONTRIBUTING.rst file\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/docs/contributing.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: ../CONTRIBUTING.rst\n```\n\n----------------------------------------\n\nTITLE: Deleting Local Git Branch After Merge\nDESCRIPTION: Command to delete your local feature branch after it has been merged. This keeps your local repository organized by removing completed branches.\nSOURCE: https://github.com/uoftcprg/pokerkit/blob/main/CONTRIBUTING.rst#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ngit branch -d branch-name\n```"
  }
]