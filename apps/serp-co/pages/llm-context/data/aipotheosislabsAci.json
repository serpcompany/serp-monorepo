[
  {
    "owner": "aipotheosis-labs",
    "repo": "aci",
    "content": "TITLE: Starting Services with Docker Compose (Bash)\nDESCRIPTION: This command starts the services defined in the `docker-compose.yml` file, including the backend API service, PostgreSQL database, LocalStack for mocking AWS services, and a runner container for running commands like tests or database seeds. The `--build` flag ensures that the Docker images are built if they don't exist.\nSOURCE: https://github.com/aipotheosis-labs/aci/blob/main/backend/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up --build\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server\nDESCRIPTION: Runs the Next.js development server using the 'dev' script defined in `package.json`. This command starts the frontend application locally, typically making it accessible at `http://localhost:3000`. It enables features like hot module replacement.\nSOURCE: https://github.com/aipotheosis-labs/aci/blob/main/frontend/README.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing Frontend Dependencies using npm\nDESCRIPTION: Installs the project's Node.js dependencies using npm. The `--legacy-peer-deps` flag is required to bypass peer dependency conflicts arising from the use of Next.js 15 and React 19 before all libraries have updated. This command should be run in the 'frontend' directory.\nSOURCE: https://github.com/aipotheosis-labs/aci/blob/main/frontend/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install --legacy-peer-deps\n```\n\n----------------------------------------\n\nTITLE: Creating a Branch - Bash\nDESCRIPTION: This snippet shows how to create a new branch for a feature or bugfix in a Git repository. It requires the user to have git installed and a local copy of the repository. The command 'git checkout -b' is used to create and switch to the new branch.  The branch name should be descriptive of the change being made.\nSOURCE: https://github.com/aipotheosis-labs/aci/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b feature/your-feature-name\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Development Environment Variables\nDESCRIPTION: Example configuration for essential environment variables in a `.env` file for local development. Sets the backend API URL (localhost:8000), the developer portal URL (localhost:3000), the environment identifier ('local'), and the PropelAuth test authentication endpoint. These variables are required to run the frontend application locally.\nSOURCE: https://github.com/aipotheosis-labs/aci/blob/main/frontend/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nNEXT_PUBLIC_API_URL=http://localhost:8000\nNEXT_PUBLIC_DEV_PORTAL_URL=http://localhost:3000\nNEXT_PUBLIC_ENVIRONMENT=local\nNEXT_PUBLIC_AUTH_URL=https://8367878.propelauthtest.com # or your own auth url if you created your own PropelAuth org\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Activating Virtual Environment (Bash)\nDESCRIPTION: These commands install the project dependencies using `uv` and activate the virtual environment.  The `uv sync` command installs dependencies specified in the project's lockfile or pyproject.toml.  Activating the virtual environment ensures that the correct Python interpreter and packages are used.\nSOURCE: https://github.com/aipotheosis-labs/aci/blob/main/backend/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nuv sync\nsource .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Cloning Repository and Navigating to Backend Directory (Bash)\nDESCRIPTION: These commands clone the ACI repository from GitHub and navigate to the backend directory. This is the first step in setting up the development environment.\nSOURCE: https://github.com/aipotheosis-labs/aci/blob/main/backend/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/aipotheosis-labs/aci.git\ncd aci/backend\n```\n\n----------------------------------------\n\nTITLE: Running Tests (Bash)\nDESCRIPTION: This command executes the pytest test suite within the `runner` container. Ensure the database service is running and empty before executing.\nSOURCE: https://github.com/aipotheosis-labs/aci/blob/main/backend/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose exec runner pytest\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Environment in Python\nDESCRIPTION: This snippet demonstrates how to create a virtual environment using the `venv` module in Python.  It's intended for MacOS and Linux environments. It creates a directory named `.venv` within the current project to isolate project dependencies. The prerequisite is having python3 installed and accessible in your PATH. The output is a virtual environment directory structure ready to hold project-specific packages.\nSOURCE: https://github.com/aipotheosis-labs/aci/blob/main/backend/deployment/README.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n$ python3 -m venv .venv\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests in Watch Mode (Vitest)\nDESCRIPTION: Executes the 'test' npm script, which runs the Vitest unit testing framework in watch mode. This continuously monitors files for changes and re-runs relevant tests, providing immediate feedback during development.\nSOURCE: https://github.com/aipotheosis-labs/aci/blob/main/frontend/README.md#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Installing Pre-commit Hooks\nDESCRIPTION: Installs pre-commit hooks using the `pre-commit` tool, which must be installed separately. This sets up automated checks (like formatting, linting, and tests defined in a configuration file) that run before each Git commit, ensuring code quality and consistency before code is committed.\nSOURCE: https://github.com/aipotheosis-labs/aci/blob/main/frontend/README.md#_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\npre-commit install\n```\n\n----------------------------------------\n\nTITLE: Installing Pre-commit Hooks (Bash)\nDESCRIPTION: This command installs the pre-commit hooks, which automatically run checks and linters before each commit. This helps maintain code quality and consistency.\nSOURCE: https://github.com/aipotheosis-labs/aci/blob/main/backend/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npre-commit install\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Pip\nDESCRIPTION: This command installs project dependencies specified in the `requirements.txt` file. It utilizes pip, the Python package installer. The dependencies are installed within the activated virtual environment. A prerequisite is an activated virtual environment and a `requirements.txt` file present in the project root. The output includes installation logs for the specified packages, populating the virtual environment with the necessary modules.\nSOURCE: https://github.com/aipotheosis-labs/aci/blob/main/backend/deployment/README.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\n$ pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Configuring Ruff Formatter in VS Code (JSON)\nDESCRIPTION: This JSON snippet configures the Ruff formatter for Python files in VS Code. It enables format-on-save and automatically organizes imports using Ruff. This ensures consistent code style across the project.\nSOURCE: https://github.com/aipotheosis-labs/aci/blob/main/backend/README.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"[python]\": {\n      \"editor.formatOnSave\": true,\n      \"editor.defaultFormatter\": \"charliermarsh.ruff\",\n      \"editor.codeActionsOnSave\": {\n        \"source.organizeImports.ruff\": \"always\"\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Activating Virtual Environment on MacOS/Linux\nDESCRIPTION: This command activates the virtual environment previously created.  It uses the `source` command, common in Unix-like systems, and activates the virtual environment by modifying environment variables to point to the project-specific Python installation and libraries. The prerequisite is a created virtual environment in the `.venv` directory.  The result of execution is the activation of the virtual environment, indicated by a change in the shell prompt, enabling the use of project-specific dependencies.\nSOURCE: https://github.com/aipotheosis-labs/aci/blob/main/backend/deployment/README.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n$ source .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Activating Virtual Environment on Windows\nDESCRIPTION: This command activates the virtual environment on Windows. It uses the `activate.bat` batch script located in the `.venv\\Scripts` directory of the project. It modifies environment variables to use project-specific Python and libraries. The prerequisite is a virtual environment created using `venv`. Executing this command activates the virtual environment within the current command prompt, setting the correct paths for dependencies.\nSOURCE: https://github.com/aipotheosis-labs/aci/blob/main/backend/deployment/README.md#_snippet_2\n\nLANGUAGE: Batchfile\nCODE:\n```\n% .venv\\Scripts\\activate.bat\n```\n\n----------------------------------------\n\nTITLE: Copying Environment Variables (Bash)\nDESCRIPTION: This command copies the example environment variables file to a `.env` file, which can then be modified with the required values. This is necessary to configure the backend application.\nSOURCE: https://github.com/aipotheosis-labs/aci/blob/main/backend/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.example .env\n```\n\n----------------------------------------\n\nTITLE: Running Linters\nDESCRIPTION: Executes the 'lint' npm script to run code linters (e.g., ESLint via `next lint`) to identify potential code quality issues, style violations, and errors. This command helps enforce coding standards.\nSOURCE: https://github.com/aipotheosis-labs/aci/blob/main/frontend/README.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\nnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Formatting Code with Prettier\nDESCRIPTION: Executes the 'format' npm script, which typically runs Prettier to automatically format the project's codebase according to defined style rules. This helps maintain consistent code style across the project.\nSOURCE: https://github.com/aipotheosis-labs/aci/blob/main/frontend/README.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nnpm run format\n```\n\n----------------------------------------\n\nTITLE: Synthesizing CloudFormation Template with CDK\nDESCRIPTION: This command synthesizes a CloudFormation template from the CDK code.  It uses the `cdk synth` command to translate the code into a deployable template that can be used to provision infrastructure. The prerequisite is an activated virtual environment with CDK installed. The output is a JSON or YAML CloudFormation template to be deployed to AWS.\nSOURCE: https://github.com/aipotheosis-labs/aci/blob/main/backend/deployment/README.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\n$ cdk synth\n```\n\n----------------------------------------\n\nTITLE: Applying Database Migration (Bash)\nDESCRIPTION: This command applies the latest Alembic migration to the local database, bringing the database schema up to date.\nSOURCE: https://github.com/aipotheosis-labs/aci/blob/main/backend/README.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose exec runner alembic upgrade head\n```\n\n----------------------------------------\n\nTITLE: Generating Database Migration (Bash)\nDESCRIPTION: This command generates a new Alembic migration based on the detected changes in the database models. The `-m` flag provides a description of the changes.\nSOURCE: https://github.com/aipotheosis-labs/aci/blob/main/backend/README.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose exec runner alembic revision --autogenerate -m \"description of changes\"\n```\n\n----------------------------------------\n\nTITLE: Frontend Project Directory Structure\nDESCRIPTION: Illustrates the main directory structure for the frontend source code (`src`). It highlights key folders: `app` for Next.js App Router pages/routes, `components` for reusable UI elements (including custom and `shadcn/ui` components), `hooks` for custom React hooks, `lib` for API interaction logic, type definitions, and utilities, and `__test__` mirroring the `src/app` structure for test files.\nSOURCE: https://github.com/aipotheosis-labs/aci/blob/main/frontend/README.md#_snippet_8\n\nLANGUAGE: Text\nCODE:\n```\nsrc\n├── app (Next.js App Router folder)\n│   ├── ... (different pages of the dev portal)\n├── components\n│   ├── ... (components we created for use in the pages of dev portal)\n│   └── ui  (shadcn/ui components we installed)\n├── hooks\n│   └── use-mobile.tsx\n└── lib\n│   ├── api          (functions for interacting with the Aipolabs backend API)\n│   ├── types        (types of the Aipolabs backend API response)\n│   └── utils.ts\n└── __test__ (test files, the structure of this folder should be the same as the structure of the src/app folder)\n    ├── apps\n    ├── linked-accounts\n    ├── project-setting\n    └── ...\n```\n\n----------------------------------------\n\nTITLE: Generating Test Coverage Report\nDESCRIPTION: Executes the 'test:coverage' npm script to run unit tests using Vitest and generate a report detailing the code coverage achieved by the tests. This helps assess the thoroughness of the test suite.\nSOURCE: https://github.com/aipotheosis-labs/aci/blob/main/frontend/README.md#_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\nnpm run test:coverage\n```\n\n----------------------------------------\n\nTITLE: Seeding the Database with Sample Data (Bash)\nDESCRIPTION: This command executes a script within the `runner` container to seed the database with sample data. This is optional but can be helpful for development and testing.\nSOURCE: https://github.com/aipotheosis-labs/aci/blob/main/backend/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose exec runner ./scripts/seed_db.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring Production Environment Variables (Vercel Example)\nDESCRIPTION: Example environment variable configuration for a production deployment, specifically shown for Vercel. Specifies the production backend API URL (`https://api.aci.dev`), the public developer portal URL (`https://platform.aci.dev`), the environment identifier ('production'), and a placeholder indicating the need for the actual production PropelAuth endpoint URL.\nSOURCE: https://github.com/aipotheosis-labs/aci/blob/main/frontend/README.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\nNEXT_PUBLIC_API_URL=https://api.aci.dev\nNEXT_PUBLIC_DEV_PORTAL_URL=https://platform.aci.dev\nNEXT_PUBLIC_ENVIRONMENT=production\nNEXT_PUBLIC_AUTH_URL=<actual_production_propelauth_endpoint>\n```\n\n----------------------------------------\n\nTITLE: Reverting Database Migration (Bash)\nDESCRIPTION: This command reverts the latest Alembic migration, downgrading the database schema to the previous version.\nSOURCE: https://github.com/aipotheosis-labs/aci/blob/main/backend/README.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose exec runner alembic downgrade -1\n```\n\n----------------------------------------\n\nTITLE: Checking for Database Changes (Bash)\nDESCRIPTION: This command checks for detected changes in the database models using Alembic. It is used before generating a migration.\nSOURCE: https://github.com/aipotheosis-labs/aci/blob/main/backend/README.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose exec runner alembic check\n```\n\n----------------------------------------\n\nTITLE: Upserting App via CLI (Bash)\nDESCRIPTION: This command uses the admin CLI to upsert an app, using the specified app definition file and secrets file. It's run within the `runner` container.\nSOURCE: https://github.com/aipotheosis-labs/aci/blob/main/backend/README.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose exec runner python -m aci.cli upsert-app --app-file ./apps/brave_search/app.json --secrets-file ./apps/brave_search/.app.secrets.json\n```\n\n----------------------------------------\n\nTITLE: Creating a Random API Key (Bash)\nDESCRIPTION: This command creates a random API key for local development using the `aci.cli` module. The `--visibility-access public` flag sets the key's visibility to public.\nSOURCE: https://github.com/aipotheosis-labs/aci/blob/main/backend/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose exec runner python -m aci.cli create-random-api-key --visibility-access public\n```"
  }
]