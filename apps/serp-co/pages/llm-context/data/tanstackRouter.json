[
  {
    "owner": "tanstack",
    "repo": "router",
    "content": "TITLE: Creating a Basic Route with TanStack Router\nDESCRIPTION: Shows how to create a basic route using the createRoute function, specifying the parent route and path.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/routing/code-based-routing.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst route = createRoute({\n  getParentRoute: () => rootRoute,\n  path: '/posts',\n  component: PostsComponent,\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Server Function with Validation in TanStack Start\nDESCRIPTION: This example demonstrates how to create a type-safe server function that can be called from both server and client. It uses Zod for input validation and shows the pattern for querying a database based on a user ID parameter.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/learn-the-basics.md#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createServerFn } from '@tanstack/react-start'\nimport * as fs from 'node:fs'\nimport { z } from 'zod'\n\nconst getUserById = createServerFn({ method: 'GET' })\n  // Always validate data sent to the function, here we use Zod\n  .validator(z.string())\n  // The handler function is where you perform the server-side logic\n  .handler(async ({ data }) => {\n    return db.query.users.findFirst({ where: eq(users.id, data) })\n  })\n\n// Somewhere else in your application\nconst user = await getUserById({ data: '1' })\n```\n\n----------------------------------------\n\nTITLE: Initializing TanStack Router with Generated Route Tree\nDESCRIPTION: Main entry point that imports the auto-generated route tree, creates a router instance, and renders the application with the RouterProvider. Includes type registration for TypeScript support.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/quick-start.md#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StrictMode } from 'react'\nimport ReactDOM from 'react-dom/client'\nimport { RouterProvider, createRouter } from '@tanstack/react-router'\n\n// Import the generated route tree\nimport { routeTree } from './routeTree.gen'\n\n// Create a new router instance\nconst router = createRouter({ routeTree })\n\n// Register the router instance for type safety\ndeclare module '@tanstack/react-router' {\n  interface Register {\n    router: typeof router\n  }\n}\n\n// Render the app\nconst rootElement = document.getElementById('root')!\nif (!rootElement.innerHTML) {\n  const root = ReactDOM.createRoot(rootElement)\n  root.render(\n    <StrictMode>\n      <RouterProvider router={router} />\n    </StrictMode>,\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Virtual File Routes in TypeScript\nDESCRIPTION: Example showing how to create a basic virtual file route structure using rootRoute, index, layout, and physical route types.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/routing/virtual-file-routes.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  rootRoute,\n  route,\n  index,\n  layout,\n  physical,\n} from '@tanstack/virtual-file-routes'\n\nexport const routes = rootRoute('root.tsx', [\n  index('index.tsx'),\n  layout('pathlessLayout.tsx', [\n    route('/dashboard', 'app/dashboard.tsx', [\n      index('app/dashboard-index.tsx'),\n      route('/invoices', 'app/dashboard-invoices.tsx', [\n        index('app/invoices-index.tsx'),\n        route('$id', 'app/invoice-detail.tsx'),\n      ]),\n    ]),\n    physical('/posts', 'posts'),\n  ]),\n])\n```\n\n----------------------------------------\n\nTITLE: Implementing a Pathless Layout Route in TanStack Router\nDESCRIPTION: Shows how to create a pathless layout route that wraps child routes without requiring a matching path in the URL.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/routing/routing-concepts.md#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Outlet, createFileRoute } from '@tanstack/react-router'\n\nexport const Route = createFileRoute('/_pathlessLayout')({\n  component: PathlessLayoutComponent,\n})\n\nfunction PathlessLayoutComponent() {\n  return (\n    <div>\n      <h1>Pathless layout</h1>\n      <Outlet />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Link Component in React with TanStack Router\nDESCRIPTION: This example demonstrates how to use the Link component from TanStack Router in a React application. It shows how to create a link with a dynamic path, params, and search query modification.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/linkComponent.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Link } from '@tanstack/react-router'\n\nfunction Component() {\n  return (\n    <Link\n      to=\"/somewhere/$somewhereId\"\n      params={{ somewhereId: 'baz' }}\n      search={(prev) => ({ ...prev, foo: 'bar' })}\n    >\n      Click me\n    </Link>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing TanStack Router Dependencies\nDESCRIPTION: Commands to install TanStack Router, the Vite plugin, and the router devtools using various package managers including npm, pnpm, yarn, bun, and deno.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/quick-start.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @tanstack/react-router @tanstack/react-router-devtools\nnpm install -D @tanstack/router-plugin\n# or\npnpm add @tanstack/react-router @tanstack/react-router-devtools\npnpm add -D @tanstack/router-plugin\n# or\nyarn add @tanstack/react-router @tanstack/react-router-devtools\nyarn add -D @tanstack/router-plugin\n# or\nbun add @tanstack/react-router @tanstack/react-router-devtools\nbun add -D @tanstack/router-plugin\n# or\ndeno add npm:@tanstack/react-router npm:@tanstack/router-plugin npm:@tanstack/react-router-devtools\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Route with TanStack Router in TypeScript\nDESCRIPTION: Demonstrates how to create a basic route using the createFileRoute function from TanStack Router. This example shows the structure of a route definition for a '/posts' path.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/routing/routing-concepts.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createFileRoute } from '@tanstack/react-router'\n\nexport const Route = createFileRoute('/posts')({\n  component: PostsComponent,\n})\n```\n\n----------------------------------------\n\nTITLE: Defining ToOptions Interface in TypeScript\nDESCRIPTION: Core interface definition for navigation and route matching APIs in TanStack Router. Specifies options for path navigation including from/to paths, params, search, hash and state.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/navigation.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype ToOptions<\n  TRouteTree extends AnyRoute = AnyRoute,\n  TFrom extends RoutePaths<TRouteTree> | string = string,\n  TTo extends string = '',\n> = {\n  from: string\n  to: string\n  params:\n    | Record<string, unknown>\n    | ((prevParams: Record<string, unknown>) => Record<string, unknown>)\n  search:\n    | Record<string, unknown>\n    | ((prevSearch: Record<string, unknown>) => Record<string, unknown>)\n  hash?: string | ((prevHash: string) => string)\n  state?:\n    | Record<string, any>\n    | ((prevState: Record<string, unknown>) => Record<string, unknown>)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Type-Safe Router Context in TypeScript\nDESCRIPTION: Demonstrates how to create a type-safe router context using createRootRouteWithContext and fulfill the type contract in the router creation.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/type-safety.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst rootRoute = createRootRouteWithContext<{ whateverYouWant: true }>()({\n  component: App,\n})\n\nconst routeTree = rootRoute.addChildren([\n  // ... all child routes will have access to `whateverYouWant` in their context\n])\n\nconst router = createRouter({\n  routeTree,\n  context: {\n    // This will be required to be passed now\n    whateverYouWant: true,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Flat Route Structure in TanStack Router\nDESCRIPTION: Example demonstrating flat routing using dot notation for route nesting. Shows how file naming conventions map to URL paths and component hierarchy without using directories.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/routing/file-based-routing.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nʦ __root.tsx\nʦ index.tsx                   | / (exact)\nʦ about.tsx                   | /about\nʦ posts.tsx                   | /posts\nʦ posts.index.tsx             | /posts (exact)\nʦ posts.$postId.tsx           | /posts/$postId\nʦ posts_.$postId.edit.tsx     | /posts/$postId/edit\n```\n\n----------------------------------------\n\nTITLE: Implementing Search Middleware in TanStack Router Root Route\nDESCRIPTION: Shows how to implement a custom search middleware that ensures specific search parameters are retained across navigation. Uses Zod for search parameter validation.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/search-params.md#2025-04-21_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nimport { z } from 'zod'\nimport { createFileRoute } from '@tanstack/react-router'\nimport { zodValidator } from '@tanstack/zod-adapter'\n\nconst searchSchema = z.object({\n  rootValue: z.string().optional(),\n})\n\nexport const Route = createRootRoute({\n  validateSearch: zodValidator(searchSchema),\n  search: {\n    middlewares: [\n      ({search, next}) => {\n        const result = next(search)\n        return {\n          rootValue: search.rootValue\n          ...result\n        }\n      }\n    ]\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Zod Validator with Fallback Values\nDESCRIPTION: Implementation of a Zod validator with fallback values to retain proper typing when validation fails, ensuring type safety for search parameters.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/search-params.md#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createFileRoute } from '@tanstack/react-router'\nimport { fallback, zodValidator } from '@tanstack/zod-adapter'\nimport { z } from 'zod'\n\nconst productSearchSchema = z.object({\n  page: fallback(z.number(), 1).default(1),\n  filter: fallback(z.string(), '').default(''),\n  sort: fallback(z.enum(['newest', 'oldest', 'price']), 'newest').default(\n    'newest',\n  ),\n})\n\nexport const Route = createFileRoute('/shop/products/')({  \n  validateSearch: zodValidator(productSearchSchema),\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Errors with onCatch in TanStack Router (TSX)\nDESCRIPTION: Shows how to use the routeOptions.onCatch function to handle errors caught by the router's CatchBoundary, providing access to both the error and errorInfo.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/data-loading.md#2025-04-21_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Route = createFileRoute('/posts')({\\n  onCatch: ({ error, errorInfo }) => {\\n    // Log the error\\n    console.error(error)\\n  },\\n})\n```\n\n----------------------------------------\n\nTITLE: Invalidating TanStack Router after a mutation in TypeScript React\nDESCRIPTION: Demonstrates how to use the router.invalidate method to force reloading of current route matches after a mutation. It includes an example of both asynchronous and synchronous invalidation.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/data-mutations.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst router = useRouter()\n\nconst addTodo = async (todo: Todo) => {\n  try {\n    await api.addTodo()\n    router.invalidate()\n  } catch {\n    //\n  }\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nconst router = useRouter()\n\nconst addTodo = async (todo: Todo) => {\n  try {\n    await api.addTodo()\n    await router.invalidate({ sync: true })\n  } catch {\n    //\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming Loader Data with useLoaderData Hook (TypeScript/React)\nDESCRIPTION: This example shows how to use the useLoaderData hook to access data returned by a route's loader function within a component.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/data-loading.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst posts = Route.useLoaderData()\n```\n\n----------------------------------------\n\nTITLE: Defining a Route Loader in TanStack Router (TypeScript/React)\nDESCRIPTION: This snippet demonstrates how to create a basic route loader function for a '/posts' route. The loader fetches posts data when the route is loaded.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/data-loading.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// routes/posts.tsx\nexport const Route = createFileRoute('/posts')({\n  loader: () => fetchPosts(),\n})\n```\n\n----------------------------------------\n\nTITLE: Using Router Invalidation in errorComponent for TanStack Router (TSX)\nDESCRIPTION: Demonstrates how to use router.invalidate() within the errorComponent to coordinate both a router reload and an error boundary reset when an error occurs during route loading.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/data-loading.md#2025-04-21_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Route = createFileRoute('/posts')({\\n  loader: () => fetchPosts(),\\n  errorComponent: ({ error, reset }) => {\\n    const router = useRouter()\\n\\n    return (\\n      <div>\\n        {error.message}\\n        <button\\n          onClick={() => {\\n            // Invalidate the route to reload the loader, which will also reset the error boundary\\n            router.invalidate()\\n          }}\\n        >\\n          retry\\n        </button>\\n      </div>\\n    )\\n  },\\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Route API with getRouteApi (TypeScript/React)\nDESCRIPTION: This snippet demonstrates how to use getRouteApi to access route hooks, including useLoaderData, when you don't have direct access to the Route object.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/data-loading.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getRouteApi } from '@tanstack/react-router'\n\n// in your component\n\nconst routeApi = getRouteApi('/posts')\nconst data = routeApi.useLoaderData()\n```\n\n----------------------------------------\n\nTITLE: Creating a Layout Route in TanStack Router\nDESCRIPTION: Demonstrates how to implement a layout route that wraps child routes with additional components and logic.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/routing/routing-concepts.md#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Outlet, createFileRoute } from '@tanstack/react-router'\n\nexport const Route = createFileRoute('/app')({\n  component: AppLayoutComponent,\n})\n\nfunction AppLayoutComponent() {\n  return (\n    <div>\n      <h1>App Layout</h1>\n      <Outlet />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Router Instance in TanStack Router\nDESCRIPTION: This snippet demonstrates how to create a new Router instance using the createRouter function from TanStack Router.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/creating-a-router.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createRouter } from '@tanstack/react-router'\n\nconst router = createRouter({\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Root Route with TanStack Router in TypeScript\nDESCRIPTION: Shows how to create a root route using the createRootRoute function. It also includes an example of creating a root route with context using createRootRouteWithContext.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/routing/routing-concepts.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// Standard root route\nimport { createRootRoute } from '@tanstack/react-router'\n\nexport const Route = createRootRoute()\n\n// Root route with Context\nimport { createRootRouteWithContext } from '@tanstack/react-router'\nimport type { QueryClient } from '@tanstack/react-query'\n\nexport interface MyRouterContext {\n  queryClient: QueryClient\n}\nexport const Route = createRootRouteWithContext<MyRouterContext>()\n```\n\n----------------------------------------\n\nTITLE: Creating Router for SSR in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a router that can be used in both server and client environments for SSR. It exports a createRouter function and declares the router type for TypeScript.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/ssr.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react'\nimport { createRouter as createTanstackRouter } from '@tanstack/react-router'\nimport { routeTree } from './routeTree.gen'\n\nexport function createRouter() {\n  return createTanstackRouter({ routeTree })\n}\n\ndeclare module '@tanstack/react-router' {\n  interface Register {\n    router: ReturnType<typeof createRouter>\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Preload Flag in TanStack Router Loader (TSX)\nDESCRIPTION: Shows how to use the preload property in a loader function to handle preloading differently from standard fetching, adjusting cache duration based on the preload state.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/data-loading.md#2025-04-21_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Route = createFileRoute('/posts')({\\n  loader: async ({ preload }) =>\\n    fetchPosts({\\n      maxAge: preload ? 10_000 : 0, // Preloads should hang around a bit longer\\n    }),\\n})\n```\n\n----------------------------------------\n\nTITLE: Using Abort Signal with Loader in TanStack Router (TSX)\nDESCRIPTION: Demonstrates how to use the abortController property in a loader function to cancel network requests when a route is unloaded or params change.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/data-loading.md#2025-04-21_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Route = createFileRoute('/posts')({\\n  loader: ({ abortController }) =>\\n    fetchPosts({\\n      // Pass this to an underlying fetch call or anything that supports signals\\n      signal: abortController.signal,\\n    }),\\n})\n```\n\n----------------------------------------\n\nTITLE: Injecting Data Fetching Function into Router Context\nDESCRIPTION: Demonstrates how to inject a data fetching function into the router context and use it in a route loader. The example includes defining the fetch function and using it in the router context and route definition.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/router-context.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst fetchTodosByUserId = async ({ userId }) => {\n  const response = await fetch(`/api/todos?userId=${userId}`)\n  const data = await response.json()\n  return data\n}\n\nconst router = createRouter({\n  routeTree: rootRoute,\n  context: {\n    userId: '123',\n    fetchTodosByUserId,\n  },\n})\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// src/routes/todos.tsx\nexport const Route = createFileRoute('/todos')({\n  component: Todos,\n  loader: ({ context }) => context.fetchTodosByUserId(context.userId),\n})\n```\n\n----------------------------------------\n\nTITLE: Integrating Zod Validator with TanStack Router\nDESCRIPTION: Example of using the Zod validator adapter to validate search parameters in a route definition. This approach pipes through the correct input and output types for search params.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/search-params.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createFileRoute } from '@tanstack/react-router'\nimport { zodValidator } from '@tanstack/zod-adapter'\nimport { z } from 'zod'\n\nconst productSearchSchema = z.object({\n  page: z.number().default(1),\n  filter: z.string().default(''),\n  sort: z.enum(['newest', 'oldest', 'price']).default('newest'),\n})\n\nexport const Route = createFileRoute('/shop/products/')({  \n  validateSearch: zodValidator(productSearchSchema),\n})\n```\n\n----------------------------------------\n\nTITLE: Using errorComponent for Error Handling in TanStack Router (TSX)\nDESCRIPTION: Demonstrates how to use the routeOptions.errorComponent to render a custom component when an error occurs during route loading or rendering, including access to the error object.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/data-loading.md#2025-04-21_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Route = createFileRoute('/posts')({\\n  loader: () => fetchPosts(),\\n  errorComponent: ({ error }) => {\\n    // Render an error message\\n    return <div>{error.message}</div>\\n  },\\n})\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a Router with TanStack React Router\nDESCRIPTION: This example demonstrates how to create a router instance using createRouter function and use it with RouterProvider in a React application. It configures the router with a route tree and sets the default preload behavior.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/createRouterFunction.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createRouter, RouterProvider } from '@tanstack/react-router'\nimport { routeTree } from './routeTree.gen'\n\nconst router = createRouter({\n  routeTree,\n  defaultPreload: 'intent',\n})\n\nexport default function App() {\n  return <RouterProvider router={router} />\n}\n```\n\n----------------------------------------\n\nTITLE: Using Path Params in Components with useParams Hook (TSX)\nDESCRIPTION: This snippet demonstrates how to access path params in a component using the route's useParams hook. It shows both the route definition and the component implementation.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/path-params.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Route = createFileRoute('/posts/$postId')({\n  component: PostComponent,\n})\n\nfunction PostComponent() {\n  const { postId } = Route.useParams()\n  return <div>Post {postId}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Using useSearch Hook in TanStack Router with TypeScript/TSX\nDESCRIPTION: Demonstrates different ways to use the useSearch hook in a React component, including strict mode with route-specific search params, selecting specific search parameters, and loose mode for accessing all search parameters.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/useSearchHook.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSearch } from '@tanstack/react-router'\n\nfunction Component() {\n  const search = useSearch({ from: '/posts/$postId' })\n  //    ^ FullSearchSchema\n\n  // OR\n\n  const selected = useSearch({\n    from: '/posts/$postId',\n    select: (search) => search.postView,\n  })\n  //    ^ string\n\n  // OR\n\n  const looseSearch = useSearch({ strict: false })\n  //    ^ Partial<FullSearchSchema>\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using useMatches Hook in TypeScript React Component\nDESCRIPTION: Demonstrates how to import and use the useMatches hook in a React component. The hook returns an array of RouteMatch objects, providing access to all route matches regardless of the component's position in the React tree.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/useMatchesHook.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useMatches } from '@tanstack/react-router'\n\nfunction Component() {\n  const matches = useMatches()\n  //     ^? [RouteMatch, RouteMatch, ...]\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Converting File Structure to Code-Based Routing in TanStack Router\nDESCRIPTION: Demonstrates how a file-based routing structure can be converted to equivalent code-based routing using createRootRoute and createRoute functions. Each route is defined with its parent relationship and path.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/routing/code-based-routing.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createRootRoute, createRoute } from '@tanstack/react-router'\n\nconst rootRoute = createRootRoute()\n\nconst indexRoute = createRoute({\n  getParentRoute: () => rootRoute,\n  path: '/',\n})\n\nconst aboutRoute = createRoute({\n  getParentRoute: () => rootRoute,\n  path: 'about',\n})\n\nconst postsRoute = createRoute({\n  getParentRoute: () => rootRoute,\n  path: 'posts',\n})\n\nconst postsIndexRoute = createRoute({\n  getParentRoute: () => postsRoute,\n  path: '/',\n})\n\nconst postRoute = createRoute({\n  getParentRoute: () => postsRoute,\n  path: '$postId',\n})\n\nconst postEditorRoute = createRoute({\n  getParentRoute: () => rootRoute,\n  path: 'posts/$postId/edit',\n})\n\nconst settingsRoute = createRoute({\n  getParentRoute: () => rootRoute,\n  path: 'settings',\n})\n\nconst profileRoute = createRoute({\n  getParentRoute: () => settingsRoute,\n  path: 'profile',\n})\n\nconst notificationsRoute = createRoute({\n  getParentRoute: () => settingsRoute,\n  path: 'notifications',\n})\n\nconst pathlessLayoutRoute = createRoute({\n  getParentRoute: () => rootRoute,\n  id: 'pathlessLayout',\n})\n\nconst pathlessLayoutARoute = createRoute({\n  getParentRoute: () => pathlessLayoutRoute,\n  path: 'route-a',\n})\n\nconst pathlessLayoutBRoute = createRoute({\n  getParentRoute: () => pathlessLayoutRoute,\n  path: 'route-b',\n})\n\nconst filesRoute = createRoute({\n  getParentRoute: () => rootRoute,\n  path: 'files/$',\n})\n```\n\n----------------------------------------\n\nTITLE: Scaffolding a TanStack Router Project\nDESCRIPTION: Command to create a new TanStack Router project using the file-router template via create-tsrouter-app CLI tool.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/quick-start.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx create-tsrouter-app@latest my-app --template file-router\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using RouteApi Class in TanStack Router\nDESCRIPTION: Example of how to create a RouteApi instance for a specific route and use its hooks within a component. This demonstrates creating a RouteApi instance bound to the '/posts' route and using the useLoaderData hook to access route data.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/RouteApiClass.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RouteApi } from '@tanstack/react-router'\n\nconst routeApi = new RouteApi({ id: '/posts' })\n\nexport function PostsPage() {\n  const posts = routeApi.useLoaderData()\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Hook-Based Navigation Blocking in React with TanStack Router\nDESCRIPTION: This snippet demonstrates how to use the useBlocker hook to prevent navigation when a form is dirty. It shows a basic implementation with a confirmation dialog.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/navigation-blocking.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useBlocker } from '@tanstack/react-router'\n\nfunction MyComponent() {\n  const [formIsDirty, setFormIsDirty] = useState(false)\n\n  useBlocker({\n    shouldBlockFn: () => {\n      if (!formIsDirty) return false\n\n      const shouldLeave = confirm('Are you sure you want to leave?')\n      return !shouldLeave\n    },\n  })\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Redirecting Unauthenticated Users in TanStack Router\nDESCRIPTION: This code snippet demonstrates how to use the `beforeLoad` option in a route definition to check authentication status and redirect unauthenticated users to a login page. It also includes a search parameter for post-login redirection.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/authenticated-routes.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Route = createFileRoute('/_authenticated')({\n  beforeLoad: async ({ location }) => {\n    if (!isAuthenticated()) {\n      throw redirect({\n        to: '/login',\n        search: {\n          redirect: location.href,\n        },\n      })\n    }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Handling with CatchNotFound Component in React\nDESCRIPTION: This example demonstrates how to use the CatchNotFound component to handle not-found errors in a React application. It wraps a potentially error-throwing component and provides a fallback UI for displaying error information.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/catchNotFoundComponent.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CatchNotFound } from '@tanstack/react-router'\n\nfunction Component() {\n  return (\n    <CatchNotFound\n      fallback={(error) => <p>Not found error! {JSON.stringify(error)}</p>}\n    >\n      <ComponentThatMightThrowANotFoundError />\n    </CatchNotFound>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Search Params Validation with TypeScript\nDESCRIPTION: Implementation of search parameter validation using TypeScript types and basic validation logic.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/search-params.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\ntype ProductSearchSortOptions = 'newest' | 'oldest' | 'price'\n\ntype ProductSearch = {\n  page: number\n  filter: string\n  sort: ProductSearchSortOptions\n}\n\nexport const Route = createFileRoute('/shop/products')({\n  validateSearch: (search: Record<string, unknown>): ProductSearch => {\n    // validate and parse the search params into a typed state\n    return {\n      page: Number(search?.page ?? 1),\n      filter: (search.filter as string) || '',\n      sort: (search.sort as ProductSearchSortOptions) || 'newest',\n    }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using Search Parameters with loaderDeps for Route-Specific Data\nDESCRIPTION: Demonstrates how to validate and use search parameters with the validateSearch and loaderDeps options to uniquely identify the data being loaded by a route, specifically for a user route that uses userId as a search parameter.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/data-loading.md#2025-04-21_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\n// /routes/users.user.tsx\nexport const Route = createFileRoute('/users/user')({\n  validateSearch: (search) =>\n    search as {\n      userId: string\n    },\n  loaderDeps: ({ search: { userId } }) => ({\n    userId,\n  }),\n  loader: async ({ deps: { userId } }) => getUser(userId),\n})\n```\n\n----------------------------------------\n\nTITLE: Disabling Stale-While-Revalidate Caching for a Route\nDESCRIPTION: Shows how to disable stale-while-revalidate caching for a specific route by setting staleTime to Infinity, which prevents the route data from being considered stale and reloaded in the background.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/data-loading.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// /routes/posts.tsx\nexport const Route = createFileRoute('/posts')({\n  loader: () => fetchPosts(),\n  staleTime: Infinity,\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Protected Route with Authentication Check in TanStack Router\nDESCRIPTION: This snippet shows how to create a protected route that checks the authentication state before loading. It redirects unauthenticated users to a login page with a redirect parameter for post-login navigation.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/authenticated-routes.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createFileRoute, redirect } from '@tanstack/react-router'\n\nexport const Route = createFileRoute('/dashboard')({\n  beforeLoad: ({ context, location }) => {\n    if (!context.auth.isAuthenticated) {\n      throw redirect({\n        to: '/login',\n        search: {\n          redirect: location.href,\n        },\n      })\n    }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Typed Router Context in TypeScript\nDESCRIPTION: Demonstrates how to create a typed router context using createRootRouteWithContext and createRouter functions. It defines a MyRouterContext interface and uses it to type the root route and router.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/router-context.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  createRootRouteWithContext,\n  createRouter,\n} from '@tanstack/react-router'\n\ninterface MyRouterContext {\n  user: User\n}\n\n// Use the routerContext to create your root route\nconst rootRoute = createRootRouteWithContext<MyRouterContext>()({\n  component: App,\n})\n\nconst routeTree = rootRoute.addChildren([\n  // ...\n])\n\n// Use the routerContext to create your router\nconst router = createRouter({\n  routeTree,\n})\n```\n\n----------------------------------------\n\nTITLE: Using Type-Safe Hooks in Route Components with TypeScript\nDESCRIPTION: Illustrates how to use type-safe hooks within a route component, including those that require context hints.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/type-safety.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Route = createFileRoute('/posts')({\n  component: PostsComponent,\n})\n\nfunction PostsComponent() {\n  // Each route has type-safe versions of most of the built-in hooks from TanStack Router\n  const params = Route.useParams()\n  const search = Route.useSearch()\n\n  // Some hooks require context from the *entire* router, not just the current route. To achieve type-safety here,\n  // we must pass the `from` param to tell the hook our relative position in the route hierarchy.\n  const navigate = useNavigate({ from: Route.fullPath })\n  // ... etc\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing TanStack Router with Router Class in React\nDESCRIPTION: Example demonstrating how to create a new Router instance and implement it with RouterProvider in a React application. The router is configured with a route tree and default preload setting of 'intent'.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/RouterClass.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Router, RouterProvider } from '@tanstack/react-router'\nimport { routeTree } from './routeTree.gen'\n\nconst router = new Router({\n  routeTree,\n  defaultPreload: 'intent',\n})\n\nexport default function App() {\n  return <RouterProvider router={router} />\n}\n```\n\n----------------------------------------\n\nTITLE: Using useChildMatches Hook in TanStack Router\nDESCRIPTION: This example demonstrates how to import and use the useChildMatches hook in a React component. The hook returns all child RouteMatch objects from the closest match down to the leaf-most match, excluding the current match.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/useChildMatchesHook.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useChildMatches } from '@tanstack/react-router'\n\nfunction Component() {\n  const childMatches = useChildMatches()\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Providing Authentication Context to TanStack Router\nDESCRIPTION: This code demonstrates how to wrap the RouterProvider with an AuthProvider and pass the authentication state to the router context. It uses a custom hook to access the auth state.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/authenticated-routes.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RouterProvider } from '@tanstack/react-router'\n\nimport { AuthProvider, useAuth } from './auth'\n\nimport { router } from './router'\n\nfunction InnerApp() {\n  const auth = useAuth()\n  return <RouterProvider router={router} context={{ auth }} />\n}\n\nfunction App() {\n  return (\n    <AuthProvider>\n      <InnerApp />\n    </AuthProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TanStack Router in Start Application\nDESCRIPTION: This code snippet shows how to set up the router.tsx file which configures TanStack Router functionality within a Start application. It enables scrollRestoration and exports a createRouter function that other parts of the application will use.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/learn-the-basics.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// app/router.tsx\nimport { createRouter as createTanStackRouter } from '@tanstack/react-router'\nimport { routeTree } from './routeTree.gen'\n\nexport function createRouter() {\n  const router = createTanStackRouter({\n    routeTree,\n    scrollRestoration: true,\n  })\n\n  return router\n}\n\ndeclare module '@tanstack/react-router' {\n  interface Register {\n    router: ReturnType<typeof createRouter>\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Root Route with Context in TanStack Router\nDESCRIPTION: This example demonstrates how to use createRootRouteWithContext to create a root route that requires a QueryClient context. It shows the setup of the route, defining the context interface, and creating the router with the required context.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/createRootRouteWithContextFunction.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  createRootRouteWithContext,\n  createRouter,\n} from '@tanstack/react-router'\nimport { QueryClient } from '@tanstack/react-query'\n\ninterface MyRouterContext {\n  queryClient: QueryClient\n}\n\nconst rootRoute = createRootRouteWithContext<MyRouterContext>()({ \n  component: () => <Outlet />,\n  // ... root route options\n})\n\nconst routeTree = rootRoute.addChildren([\n  // ... other routes\n])\n\nconst queryClient = new QueryClient()\n\nconst router = createRouter({\n  routeTree,\n  context: {\n    queryClient,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Server Function with Zod Transformation and Inference\nDESCRIPTION: This example demonstrates how a server function can infer input and output types based on the `validator` and `handler` functions, respectively, when using Zod for data validation and transformation. The `validator` transforms the input string to an integer, which then becomes the type of `data.amount` in the handler.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/server-functions.md#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createServerFn } from '@tanstack/react-start'\nimport { z } from 'zod'\n\nconst transactionSchema = z.object({\n  amount: z.string().transform((val) => parseInt(val, 10)),\n})\n\nconst createTransaction = createServerFn()\n  .validator(transactionSchema)\n  .handler(({ data }) => {\n    return data.amount // Returns a number\n  })\n\ncreateTransaction({\n  data: {\n    amount: '123', // Accepts a string\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using Component-Based Navigation Blocking in React with TanStack Router\nDESCRIPTION: This example shows how to use the Block component for navigation blocking. It provides two approaches: one with a simple confirmation and another with a custom UI using render props.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/navigation-blocking.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Block } from '@tanstack/react-router'\n\nfunction MyComponent() {\n  const [formIsDirty, setFormIsDirty] = useState(false)\n\n  return (\n    <Block\n      shouldBlockFn={() => {\n        if (!formIsDirty) return false\n\n        const shouldLeave = confirm('Are you sure you want to leave?')\n        return !shouldLeave\n      }}\n    />\n  )\n\n  // OR\n\n  return (\n    <Block shouldBlockFn={() => !formIsDirty} withResolver>\n      {({ status, proceed, reset }) => <>{/* ... */}</>}\n    </Block>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Client Context to Server in TanStack Router\nDESCRIPTION: This snippet shows how to send client context to the server using middleware. It demonstrates sending a workspaceId from the client to the server.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/middleware.md#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst requestLogger = createMiddleware()\n  .client(async ({ next, context }) => {\n    return next({\n      sendContext: {\n        // Send the workspace ID to the server\n        workspaceId: context.workspaceId,\n      },\n    })\n  })\n  .server(async ({ next, data, context }) => {\n    // Woah! We have the workspace ID from the client!\n    console.log('Workspace ID:', context.workspaceId)\n    return next()\n  })\n```\n\n----------------------------------------\n\nTITLE: Creating Root Route with Authentication Context in TanStack Router\nDESCRIPTION: This code defines a root route with a custom router context that includes an authentication state. It uses TypeScript to ensure type safety for the context object.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/authenticated-routes.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createRootRouteWithContext } from '@tanstack/react-router'\n\ninterface MyRouterContext {\n  auth: AuthState\n}\n\nexport const Route = createRootRouteWithContext<MyRouterContext>()({ component: () => <Outlet /> })\n```\n\n----------------------------------------\n\nTITLE: Implementing Deferred Data Loading with TanStack Query (TypeScript)\nDESCRIPTION: This snippet demonstrates how to implement deferred data loading using TanStack Query in a TanStack Router loader function. It prefetches slow data and ensures fast data is loaded.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/deferred-data-loading.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// src/routes/posts.$postId.tsx\nimport { createFileRoute } from '@tanstack/react-router'\nimport { slowDataOptions, fastDataOptions } from '~/api/query-options'\n\nexport const Route = createFileRoute('/posts/$postId')({\n  loader: async ({ context: { queryClient } }) => {\n    // Kick off the fetching of some slower data, but do not await it\n    queryClient.prefetchQuery(slowDataOptions())\n\n    // Fetch and await some data that resolves quickly\n    await queryClient.ensureQueryData(fastDataOptions())\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Route-Specific Context with beforeLoad\nDESCRIPTION: Shows how to provide route-specific context using the beforeLoad option, which runs before the loader and can inject additional context data that will be available to the loader function.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/data-loading.md#2025-04-21_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n// /routes/posts.tsx\nimport { createFileRoute } from '@tanstack/react-router'\n\nexport const Route = createFileRoute('/posts')({\n  // Pass the fetchPosts function to the route context\n  beforeLoad: () => ({\n    fetchPosts: () => console.info('foo'),\n  }),\n  loader: ({ context: { fetchPosts } }) => {\n    console.info(fetchPosts()) // 'foo'\n\n    // ...\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Search Param Link in TanStack Router with TSX\nDESCRIPTION: Shows how to create a link with search parameters, providing additional context to a route. The example creates a search link with a query parameter.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/navigation.md#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nconst link = (\n  <Link\n    to=\"/search\"\n    search={{\n      query: 'tanstack',\n    }}\n  >\n    Search\n  </Link>\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Search Params in Generic Components\nDESCRIPTION: Example of updating search parameters in a generic component that could be rendered on multiple routes using the to=\".\" approach for accessing loosely typed search params.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/search-params.md#2025-04-21_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\n// `page` is a search param that is defined in the __root route and hence available on all routes.\nconst PageSelector = () => {\n  return (\n    <div>\n      <Link to=\".\" search={(prev) => ({ ...prev, page: prev.page + 1 })}>\n        Next Page\n      </Link>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using useNavigate Hook in React Components with TanStack Router\nDESCRIPTION: Demonstrates various ways to use the useNavigate hook in React components. It shows how to navigate to different routes, set search parameters, hash, and state using the navigate function.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/useNavigateHook.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useNavigate } from '@tanstack/react-router'\n\nfunction PostsPage() {\n  const navigate = useNavigate({ from: '/posts' })\n  const handleClick = () => navigate({ search: { page: 2 } })\n  // ...\n}\n\nfunction Component() {\n  const navigate = useNavigate()\n  return (\n    <div>\n      <button\n        onClick={() =>\n          navigate({\n            to: '/posts',\n          })\n        }\n      >\n        Posts\n      </button>\n      <button\n        onClick={() =>\n          navigate({\n            to: '/posts',\n            search: { page: 2 },\n          })\n        }\n      >\n        Posts (Page 2)\n      </button>\n      <button\n        onClick={() =>\n          navigate({\n            to: '/posts',\n            hash: 'my-hash',\n          })\n        }\n      >\n        Posts (Hash)\n      </button>\n      <button\n        onClick={() =>\n          navigate({\n            to: '/posts',\n            state: { from: 'home' },\n          })\n        }\n      >\n        Posts (State)\n      </button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Stripping Default Search Parameters in TanStack Router with Zod\nDESCRIPTION: This example demonstrates how to use `stripSearchParams` middleware to remove search parameters that match default values. It uses Zod for schema validation and defines a route that will strip parameters 'one' and 'two' when they match their default values.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/stripSearchParamsFunction.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { z } from 'zod'\nimport { createFileRoute, stripSearchParams } from '@tanstack/react-router'\nimport { zodValidator } from '@tanstack/zod-adapter'\n\nconst defaultValues = {\n  one: 'abc',\n  two: 'xyz',\n}\n\nconst searchSchema = z.object({\n  one: z.string().default(defaultValues.one),\n  two: z.string().default(defaultValues.two),\n})\n\nexport const Route = createFileRoute('/hello')({\n  validateSearch: zodValidator(searchSchema),\n  search: {\n    // strip default values\n    middlewares: [stripSearchParams(defaultValues)],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Router with Context in TanStack Router\nDESCRIPTION: Shows how to initialize a router with context, fulfilling the type requirements defined in the root route. This injects the fetchPosts function into the router context for use by routes.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/data-loading.md#2025-04-21_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport { routeTree } from './routeTree.gen'\n\n// Use your routerContext to create a new router\n// This will require that you fullfil the type requirements of the routerContext\nconst router = createRouter({\n  routeTree,\n  context: {\n    // Supply the fetchPosts function to the router context\n    fetchPosts,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Directory-Based Route Structure in TanStack Router\nDESCRIPTION: Example showing the mapping between filesystem structure and route paths using directory-based routing. Demonstrates how directories and files correspond to URL paths and component hierarchy.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/routing/file-based-routing.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nʦ __root.tsx\nʦ index.tsx           | / (exact)\nʦ about.tsx           | /about\nʦ posts.tsx           | /posts\n📂 posts\n┄ ʦ index.tsx         | /posts (exact)\n┄ ʦ $postId.tsx       | /posts/$postId\n📂 posts_\n┄ 📂 $postId\n┄ ┄ ʦ edit.tsx        | /posts/$postId/edit\n```\n\n----------------------------------------\n\nTITLE: Controlling Route Reloading with shouldReload and gcTime\nDESCRIPTION: Example of configuring a route to only reload on entry or when critical loader dependencies change using shouldReload and gcTime options. This controls both caching behavior and when data should be refreshed.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/data-loading.md#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n// /routes/posts.tsx\nexport const Route = createFileRoute('/posts')({\n  loaderDeps: ({ search: { offset, limit } }) => ({ offset, limit }),\n  loader: ({ deps }) => fetchPosts(deps),\n  // Do not cache this route's data after it's unloaded\n  gcTime: 0,\n  // Only reload the route when the user navigates to it or when deps change\n  shouldReload: false,\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Loader Dependencies for Search Params (TypeScript/React)\nDESCRIPTION: This example shows how to use loaderDeps to access search parameters for pagination in a '/posts' route. It ensures unique caching for different pagination states and triggers reloads when dependencies change.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/data-loading.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// /routes/posts.tsx\nexport const Route = createFileRoute('/posts')({\n  loaderDeps: ({ search: { offset, limit } }) => ({ offset, limit }),\n  loader: ({ deps: { offset, limit } }) =>\n    fetchPosts({\n      offset,\n      limit,\n    }),\n})\n```\n\n----------------------------------------\n\nTITLE: Using mutation keys for state management in TypeScript React\nDESCRIPTION: Illustrates the use of mutation keys to reset mutation state when route parameters change. This example uses a hypothetical 'useCoolMutation' hook to manage mutation state for sending messages in a chat application.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/data-mutations.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst routeApi = getRouteApi('/posts/$postId/edit')\n\nfunction EditPost() {\n  const { roomId } = routeApi.useParams()\n\n  const sendMessageMutation = useCoolMutation({\n    fn: sendMessage,\n    // Clear the mutation state when the roomId changes\n    // including any submission state\n    key: ['sendMessage', roomId],\n  })\n\n  // Fire off a bunch of messages\n  const test = () => {\n    sendMessageMutation.mutate({ roomId, message: 'Hello!' })\n    sendMessageMutation.mutate({ roomId, message: 'How are you?' })\n    sendMessageMutation.mutate({ roomId, message: 'Goodbye!' })\n  }\n\n  return (\n    <>\n      {sendMessageMutation.submissions.map((submission) => {\n        return (\n          <div>\n            <div>{submission.status}</div>\n            <div>{submission.message}</div>\n          </div>\n        )\n      })}\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using useParams Hook in TanStack Router (TSX)\nDESCRIPTION: Demonstrates various ways to use the useParams hook in a React component. It shows how to retrieve all params, use route-specific params, select specific params, and use loose params.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/useParamsHook.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useParams } from '@tanstack/react-router'\n\nconst routeApi = getRouteApi('/posts/$postId')\n\nfunction Component() {\n  const params = useParams({ from: '/posts/$postId' })\n\n  // OR\n\n  const routeParams = routeApi.useParams()\n\n  // OR\n\n  const postId = useParams({\n    from: '/posts/$postId',\n    select: (params) => params.postId,\n  })\n\n  // OR\n\n  const looseParams = useParams({ strict: false })\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using ClientOnly Component in TanStack Router with TypeScript React\nDESCRIPTION: This example demonstrates how to use the ClientOnly component in a dashboard route. It renders a Charts component only on the client-side, with a FallbackCharts component for server-side rendering. The component is imported from @tanstack/react-router along with createFileRoute for route creation.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/clientOnlyComponent.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// src/routes/dashboard.tsx\nimport { ClientOnly, createFileRoute } from '@tanstack/react-router'\nimport {\n  Charts,\n  FallbackCharts,\n} from './charts-that-break-server-side-rendering'\n\nexport const Route = createFileRoute('/dashboard')({\n  component: Dashboard,\n  // ... other route options\n})\n\nfunction Dashboard() {\n  return (\n    <div>\n      <p>Dashboard</p>\n      <ClientOnly fallback={<FallbackCharts />}>\n        <Charts />\n      </ClientOnly>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing LinkProps Usage with 'as const satisfies'\nDESCRIPTION: A performance-optimized approach using 'as const satisfies' to create a precisely typed object that conforms to LinkProps without actually being assigned that type directly, reducing type checking overhead.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/type-safety.md#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nconst props = {\n  to: '/posts/',\n} as const satisfies LinkProps\n\nreturn (\n  <Link {...props}>\n)\n```\n\n----------------------------------------\n\nTITLE: TanStack Query Integration with Route Loader (TypeScript/TSX)\nDESCRIPTION: A realistic example of integrating TanStack Query with TanStack Router. It demonstrates how to use the loader to ensure data is loaded and how to read the data from the cache in the component.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/external-data-loading.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// src/routes/posts.tsx\nconst postsQueryOptions = queryOptions({\n  queryKey: ['posts'],\n  queryFn: () => fetchPosts(),\n})\n\nexport const Route = createFileRoute('/posts')({\n  // Use the `loader` option to ensure that the data is loaded\n  loader: () => queryClient.ensureQueryData(postsQueryOptions),\n  component: () => {\n    // Read the data from the cache and subscribe to updates\n    const {\n      data: { posts },\n    } = useSuspenseQuery(postsQueryOptions)\n\n    return (\n      <div>\n        {posts.map((post) => (\n          <Post key={post.id} post={post} />\n        ))}\n      </div>\n    )\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Removing Specific Search Parameters in TanStack Router\nDESCRIPTION: This example shows how to strip specific search parameters by providing an array of parameter names to the `stripSearchParams` middleware. It configures a root route that always removes the 'hello' parameter while keeping other parameters like the required 'requiredParam'.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/stripSearchParamsFunction.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { z } from 'zod'\nimport { createRootRoute, stripSearchParams } from '@tanstack/react-router'\nimport { zodValidator } from '@tanstack/zod-adapter'\n\nconst searchSchema = z.object({\n  hello: z.string().default('world'),\n  requiredParam: z.string(),\n})\n\nexport const Route = createRootRoute({\n  validateSearch: zodValidator(searchSchema),\n  search: {\n    // always remove `hello`\n    middlewares: [stripSearchParams(['hello'])],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Registering Router Types for Module-Wide Type Safety in TypeScript\nDESCRIPTION: Shows how to use declaration merging to register router types with the @tanstack/react-router module for global type safety.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/type-safety.md#2025-04-21_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nconst router = createRouter({\n  // ...\n})\n\ndeclare module '@tanstack/react-router' {\n  interface Register {\n    router: typeof router\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using useNavigate Hook with Search Parameters in TanStack Router\nDESCRIPTION: Demonstrates how to use the useNavigate hook to update search parameters in a product list component. Shows handling of page navigation through search state updates.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/search-params.md#2025-04-21_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Route = createFileRoute('/shop/products/$productId')({\n  validateSearch: productSearchSchema,\n})\n\nconst ProductList = () => {\n  const navigate = useNavigate({ from: Route.fullPath })\n\n  return (\n    <div>\n      <button\n        onClick={() => {\n          navigate({\n            search: (prev) => ({ page: prev.page + 1 }),\n          })\n        }}\n      >\n        Next Page\n      </button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Navigate Component in TanStack Router with TSX\nDESCRIPTION: Shows how to use the Navigate component for immediate navigation when a component mounts. This is useful for client-side redirects without needing useEffect.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/navigation.md#2025-04-21_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Component() {\n  return <Navigate to=\"/posts/$postId\" params={{ postId: 'my-first-post' }} />\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Search Params Outside of Route Components\nDESCRIPTION: Demonstration of how to access route search parameters from anywhere in the application using the useSearch hook with the from parameter for better type safety.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/search-params.md#2025-04-21_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n// /routes/shop.products.tsx\nexport const Route = createFileRoute('/shop/products')({  \n  validateSearch: productSearchSchema,\n  // ...\n})\n\n// Somewhere else...\n\n// /components/product-list-sidebar.tsx\nconst routeApi = getRouteApi('/shop/products')\n\nconst ProductList = () => {\n  const routeSearch = routeApi.useSearch()\n\n  // OR\n\n  const { page, filter, sort } = useSearch({\n    from: Route.fullPath,\n  })\n\n  return <div>...</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Route Tree Hierarchy Example - TSX Route Structure\nDESCRIPTION: Demonstrates a basic route tree hierarchy structure for a blog post URL pattern showing the nested folder structure.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/routing/route-trees.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n├── blog\n│   ├── posts\n│   │   ├── $postId\n```\n\n----------------------------------------\n\nTITLE: Accessing Router Instance with useRouter Hook in React\nDESCRIPTION: This snippet demonstrates how to use the useRouter hook to obtain the current Router instance within a React component. The hook returns the Router object, which can be used to access router-related functionality.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/useRouterHook.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useRouter } from '@tanstack/react-router'\n\nfunction Component() {\n  const router = useRouter()\n  //    ^ Router\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RouterEvents Type in TanStack Router\nDESCRIPTION: The RouterEvents type definition that includes all possible router events and their payloads. Each event contains information about navigation state, locations, and path/href changes.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/RouterEventsType.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ntype RouterEvents = {\n  onBeforeNavigate: {\n    type: 'onBeforeNavigate'\n    fromLocation?: ParsedLocation\n    toLocation: ParsedLocation\n    pathChanged: boolean\n    hrefChanged: boolean\n  }\n  onBeforeLoad: {\n    type: 'onBeforeLoad'\n    fromLocation?: ParsedLocation\n    toLocation: ParsedLocation\n    pathChanged: boolean\n    hrefChanged: boolean\n  }\n  onLoad: {\n    type: 'onLoad'\n    fromLocation?: ParsedLocation\n    toLocation: ParsedLocation\n    pathChanged: boolean\n    hrefChanged: boolean\n  }\n  onResolved: {\n    type: 'onResolved'\n    fromLocation?: ParsedLocation\n    toLocation: ParsedLocation\n    pathChanged: boolean\n    hrefChanged: boolean\n  }\n  onBeforeRouteMount: {\n    type: 'onBeforeRouteMount'\n    fromLocation?: ParsedLocation\n    toLocation: ParsedLocation\n    pathChanged: boolean\n    hrefChanged: boolean\n  }\n  onInjectedHtml: {\n    type: 'onInjectedHtml'\n    promise: Promise<string>\n  }\n  onRendered: {\n    type: 'onRendered'\n    fromLocation?: ParsedLocation\n    toLocation: ParsedLocation\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Dynamic Route Segment in TanStack Router\nDESCRIPTION: Demonstrates how to create a route with a dynamic segment for '/posts/$postId', including usage of the dynamic parameter in both loader and component.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/routing/routing-concepts.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createFileRoute } from '@tanstack/react-router'\n\nexport const Route = createFileRoute('/posts/$postId')({\n  // In a loader\n  loader: ({ params }) => fetchPost(params.postId),\n  // Or in a component\n  component: PostComponent,\n})\n\nfunction PostComponent() {\n  // In a component!\n  const { postId } = Route.useParams()\n  return <div>Post ID: {postId}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Root Route with Outlet in TanStack Router (TSX)\nDESCRIPTION: This snippet demonstrates how to create a root route component that includes an Outlet for rendering child routes. It imports necessary functions from TanStack Router, defines a root route, and creates a RootComponent that renders a title and an Outlet.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/outlets.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createRootRoute, Outlet } from '@tanstack/react-router'\n\nexport const Route = createRootRoute({\n  component: RootComponent,\n})\n\nfunction RootComponent() {\n  return (\n    <div>\n      <h1>My App</h1>\n      <Outlet /> {/* This is where child routes will render */}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using router.subscribe to reset mutation state in TypeScript\nDESCRIPTION: Shows how to use the router.subscribe method to clear mutation states when the user navigates to a different route. This approach is useful for libraries that don't have a built-in keying mechanism.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/data-mutations.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst router = createRouter()\nconst coolMutationCache = createCoolMutationCache()\n\nconst unsubscribeFn = router.subscribe('onResolved', () => {\n  // Reset mutation states when the route changes\n  coolMutationCache.clear()\n})\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a Route Mask in TanStack Router with TypeScript\nDESCRIPTION: Example showing how to create a route mask using createRouteMask and pass it to a router instance. This mask maps from a modal route to its parent photo route, preserving route parameters.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/createRouteMaskFunction.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createRouteMask, createRouter } from '@tanstack/react-router'\n\nconst photoModalToPhotoMask = createRouteMask({\n  routeTree,\n  from: '/photos/$photoId/modal',\n  to: '/photos/$photoId',\n  params: true,\n})\n\n// Set up a Router instance\nconst router = createRouter({\n  routeTree,\n  routeMasks: [photoModalToPhotoMask],\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Link Components with TanStack SolidJS Router\nDESCRIPTION: This snippet demonstrates how to create a custom link component in SolidJS using TanStack Router's createLink utility. It creates a basic link component with custom styling and preloading behavior, extending the standard anchor element.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/solid/guide/custom-link.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as Solid from 'solid-js'\nimport { createLink, LinkComponent } from '@tanstack/solid-router'\n\nexport const Route = createRootRoute({\n  component: RootComponent,\n})\n\ntype BasicLinkProps = Solid.JSX.IntrinsicElements['a'] & {\n  // Add any additional props you want to pass to the anchor element\n}\n\nconst BasicLinkComponent: Solid.Component<BasicLinkProps> = (props) => (\n  <a {...props} class=\"block px-3 py-2 text-red-700\">\n    {props.children}\n  </a>\n)\n\nconst CreatedLinkComponent = createLink(BasicLinkComponent)\n\nexport const CustomLink: LinkComponent<typeof BasicLinkComponent> = (props) => {\n  return <CreatedLinkComponent preload={'intent'} {...props} />\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Search Middlewares in TanStack Router\nDESCRIPTION: Demonstrates how to combine multiple search middlewares (retainSearchParams and stripSearchParams) to both retain specific parameters and strip default values simultaneously.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/search-params.md#2025-04-21_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  Link,\n  createFileRoute,\n  retainSearchParams,\n  stripSearchParams,\n} from '@tanstack/react-router'\nimport { z } from 'zod'\nimport { zodValidator } from '@tanstack/zod-adapter'\n\nconst defaultValues = ['foo', 'bar']\n\nexport const Route = createFileRoute('/search')({\n  validateSearch: zodValidator(\n    z.object({\n      retainMe: z.string().optional(),\n      arrayWithDefaults: z.string().array().default(defaultValues),\n      required: z.string(),\n    }),\n  ),\n  search: {\n    middlewares: [\n      retainSearchParams(['retainMe']),\n      stripSearchParams({ arrayWithDefaults: defaultValues }),\n    ],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using getRouteApi to Create Type-Safe Route Hooks in React Router\nDESCRIPTION: This example demonstrates how to use the getRouteApi function to create a route-specific API for accessing loader data with proper typing. The function binds to a specific route ID ('/posts') and returns an API instance that provides type-safe hooks.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/getRouteApiFunction.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getRouteApi } from '@tanstack/react-router'\n\nconst routeApi = getRouteApi('/posts')\n\nexport function PostsPage() {\n  const posts = routeApi.useLoaderData()\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Data Loading Pattern in notFoundComponent with TanStack Router in TSX\nDESCRIPTION: Demonstrates how to properly handle data loading within a notFoundComponent, showing which data access methods work and which don't. It illustrates passing data via the notFound function and accessing route parameters safely.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/not-found-errors.md#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Route = createFileRoute('/posts/$postId')({\n  loader: async ({ params: { postId } }) => {\n    const post = await getPost(postId)\n    if (!post)\n      throw notFound({\n        // Forward some data to the notFoundComponent\n        // data: someIncompleteLoaderData\n      })\n    return { post }\n  },\n  // `data: unknown` is passed to the component via the `data` option when calling `notFound`\n  notFoundComponent: ({ data }) => {\n    // ❌ useLoaderData is not valid here: const { post } = Route.useLoaderData()\n\n    // ✅:\n    const { postId } = Route.useParams()\n    const search = Route.useSearch()\n    const context = Route.useRouteContext()\n\n    return <p>Post with id {postId} not found!</p>\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Zod Schema Validation for Search Params\nDESCRIPTION: Advanced search parameter validation using Zod schema with type inference and error handling.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/search-params.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { z } from 'zod'\n\nconst productSearchSchema = z.object({\n  page: z.number().catch(1),\n  filter: z.string().catch(''),\n  sort: z.enum(['newest', 'oldest', 'price']).catch('newest'),\n})\n\ntype ProductSearch = z.infer<typeof productSearchSchema>\n\nexport const Route = createFileRoute('/shop/products')({\n  validateSearch: (search) => productSearchSchema.parse(search),\n})\n```\n\n----------------------------------------\n\nTITLE: Managing Document Head with TanStack Router in TSX\nDESCRIPTION: This snippet demonstrates how to use the routeOptions.head property to manage the document head in a TanStack Router application. It shows how to set meta tags, title, links, and scripts for a route.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/document-head-management.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Route = createRootRoute({\n  head: () => ({\n    meta: [\n      {\n        name: 'description',\n        content: 'My App is a web application',\n      },\n      {\n        title: 'My App',\n      },\n    ],\n    links: [\n      {\n        rel: 'icon',\n        href: '/favicon.ico',\n      },\n    ],\n    scripts: [\n      {\n        src: 'https://www.google-analytics.com/analytics.js',\n      },\n    ],\n  }),\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Route Definition with TanStack Router\nDESCRIPTION: Shows how to create a route definition using createRoute from TanStack Router, including path configuration, loader function, and component reference.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/code-splitting.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createRoute } from '@tanstack/react-router'\nimport { MyComponent } from './MyComponent'\n\nconst route = createRoute({\n  path: '/my-route',\n  loader: () => ({\n    foo: 'bar',\n  }),\n  component: MyComponent,\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Root Route with Context Type in TanStack Router\nDESCRIPTION: Demonstrates how to create a root route with a strongly typed context using createRootRouteWithContext. This establishes the type structure for the router context that will be available throughout the route tree.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/data-loading.md#2025-04-21_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createRootRouteWithContext } from '@tanstack/react-router'\n\n// Create a root route using the createRootRouteWithContext<{...}>() function and pass it whatever types you would like to be available in your router context.\nexport const Route = createRootRouteWithContext<{\n  fetchPosts: typeof fetchPosts\n}>()() // NOTE: the double call is on purpose, since createRootRouteWithContext is a factory ;)\n```\n\n----------------------------------------\n\nTITLE: Creating a Route with the createRoute Function in React Router\nDESCRIPTION: This example demonstrates how to create a route using the createRoute function from TanStack Router. It creates a route with a path, loader function that returns data, and a component that displays that data using the useLoaderData hook.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/createRouteFunction.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createRoute } from '@tanstack/react-router'\nimport { rootRoute } from './__root'\n\nconst Route = createRoute({\n  getParentRoute: () => rootRoute,\n  path: '/',\n  loader: () => {\n    return 'Hello World'\n  },\n  component: IndexComponent,\n})\n\nfunction IndexComponent() {\n  const data = Route.useLoaderData()\n  return <div>{data}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Data Loader Splitting in TanStack Router\nDESCRIPTION: This example shows how to split data loading logic in TanStack Router using the lazyFn function. It demonstrates splitting the loader into a separate file while maintaining type safety.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/code-splitting.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { lazyFn } from '@tanstack/react-router'\n\nconst route = createRoute({\n  path: '/my-route',\n  component: MyComponent,\n  loader: lazyFn(() => import('./loader'), 'loader'),\n})\n\n// In another file...a\nexport const loader = async (context: LoaderContext) => {\n  /// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a File-Based Route with createFileRoute in TanStack Router\nDESCRIPTION: This example demonstrates how to use the createFileRoute function to create a file-based route for the root path ('/') with a loader and a component. The Route is exported for use with tsr generate and tsr watch commands.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/createFileRouteFunction.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createFileRoute } from '@tanstack/react-router'\n\nexport const Route = createFileRoute('/')({\n  loader: () => {\n    return 'Hello World'\n  },\n  component: IndexComponent,\n})\n\nfunction IndexComponent() {\n  const data = Route.useLoaderData()\n  return <div>{data}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Type-Safe HeadingLink Component with ValidateLinkOptions\nDESCRIPTION: Demonstrates how to create a reusable HeadingLink component with type-safe link options using ValidateLinkOptions utility.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/type-utilities.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport interface HeaderLinkProps<\n  TRouter extends RegisteredRouter = RegisteredRouter,\n  TOptions = unknown,\n> {\n  title: string\n  linkOptions: ValidateLinkOptions<TRouter, TOptions>\n}\n\nexport function HeadingLink<TRouter extends RegisteredRouter, TOptions>(\n  props: HeaderLinkProps<TRouter, TOptions>,\n): React.ReactNode\nexport function HeadingLink(props: HeaderLinkProps): React.ReactNode {\n  return (\n    <>\n      <h1>{props.title}</h1>\n      <Link {...props.linkOptions} />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Hash History and Router in TypeScript\nDESCRIPTION: This code snippet shows how to create a hash history instance and use it to initialize a TanStack router. It's useful when the server doesn't support rewrites to index.html for HTTP requests.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/history-types.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createHashHistory, createRouter } from '@tanstack/react-router'\n\nconst hashHistory = createHashHistory()\n\nconst router = createRouter({ routeTree, history: hashHistory })\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Link Components with MUI\nDESCRIPTION: Provides examples of creating custom Link components using MUI's Link and Button components with TanStack Router. It includes options for basic wrapping and more customized implementations.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/custom-link.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createLink } from '@tanstack/react-router'\nimport { Link } from '@mui/material'\n\nexport const CustomLink = createLink(Link)\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react'\nimport { createLink } from '@tanstack/react-router'\nimport { Link } from '@mui/material'\nimport type { LinkProps } from '@mui/material'\nimport type { LinkComponent } from '@tanstack/react-router'\n\ninterface MUILinkProps extends LinkProps {\n  // Add any additional props you want to pass to the Link\n}\n\nconst MUILinkComponent = React.forwardRef<HTMLAnchorElement, MUILinkProps>(\n  (props, ref) => <Link ref={ref} {...props} />,\n)\n\nconst CreatedLinkComponent = createLink(MUILinkComponent)\n\nexport const CustomLink: LinkComponent<typeof MUILinkComponent> = (props) => {\n  return <CreatedLinkComponent preload={'intent'} {...props} />\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react'\nimport { createLink } from '@tanstack/react-router'\nimport { Button } from '@mui/material'\nimport type { ButtonProps } from '@mui/material'\nimport type { LinkComponent } from '@tanstack/react-router'\n\ninterface MUIButtonLinkProps extends ButtonProps<'a'> {\n  // Add any additional props you want to pass to the Button\n}\n\nconst MUIButtonLinkComponent = React.forwardRef<\n  HTMLAnchorElement,\n  MUIButtonLinkProps\n>((props, ref) => <Button ref={ref} component=\"a\" {...props} />)\n\nconst CreatedButtonLinkComponent = createLink(MUIButtonLinkComponent)\n\nexport const CustomButtonLink: LinkComponent<typeof MUIButtonLinkComponent> = (\n  props,\n) => {\n  return <CreatedButtonLinkComponent preload={'intent'} {...props} />\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { css, styled } from '@mui/material'\nimport { CustomLink } from './CustomLink'\n\nconst StyledCustomLink = styled(CustomLink)(\n  ({ theme }) => css`\n    color: ${theme.palette.common.white};\n  `,\n)\n```\n\n----------------------------------------\n\nTITLE: Error Handling with TanStack Query and Router (TypeScript/TSX)\nDESCRIPTION: Demonstrates error handling when using TanStack Query with suspense. It uses the useQueryErrorResetBoundary hook to reset queries on error and provides a retry mechanism.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/external-data-loading.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Route = createFileRoute('/posts')({\n  loader: () => queryClient.ensureQueryData(postsQueryOptions),\n  errorComponent: ({ error, reset }) => {\n    const router = useRouter()\n    const queryErrorResetBoundary = useQueryErrorResetBoundary()\n\n    useEffect(() => {\n      // Reset the query error boundary\n      queryErrorResetBoundary.reset()\n    }, [queryErrorResetBoundary])\n\n    return (\n      <div>\n        {error.message}\n        <button\n          onClick={() => {\n            // Invalidate the route to reload the loader, and reset any router error boundaries\n            router.invalidate()\n          }}\n        >\n          retry\n        </button>\n      </div>\n    )\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Up Server-Side Rendering Entry Point\nDESCRIPTION: Server entry point that creates a handler for server-side rendering using TanStack Start's built-in functionality and router integration.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/build-from-scratch.md#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n// app/ssr.tsx\nimport {\n  createStartHandler,\n  defaultStreamHandler,\n} from '@tanstack/react-start/server'\nimport { getRouterManifest } from '@tanstack/react-start/router-manifest'\n\nimport { createRouter } from './router'\n\nexport default createStartHandler({\n  createRouter,\n  getRouterManifest,\n})(defaultStreamHandler)\n```\n\n----------------------------------------\n\nTITLE: Fallback to Default ErrorComponent in TanStack Router (TSX)\nDESCRIPTION: Shows how to use a custom error component while still falling back to the default ErrorComponent for uncaught errors, providing a robust error handling strategy.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/data-loading.md#2025-04-21_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createFileRoute, ErrorComponent } from '@tanstack/react-router'\\n\\nexport const Route = createFileRoute('/posts')({\\n  loader: () => fetchPosts(),\\n  errorComponent: ({ error }) => {\\n    if (error instanceof MyCustomError) {\\n      // Render a custom error message\\n      return <div>{error.message}</div>\\n    }\\n\\n    // Fallback to the default ErrorComponent\\n    return <ErrorComponent error={error} />\\n  },\\n})\n```\n\n----------------------------------------\n\nTITLE: Client-Side Entry Point for SSR with TanStack Router\nDESCRIPTION: This snippet illustrates the client-side entry point for SSR. It creates a router instance and renders the application using the StartClient component for hydration.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/ssr.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react'\nimport ReactDOM from 'react-dom/client'\n\nimport { StartClient } from '@tanstack/react-start'\nimport { createRouter } from './router'\n\nconst router = createRouter()\n\nReactDOM.hydrateRoot(document, <StartClient router={router} />)\n```\n\n----------------------------------------\n\nTITLE: Accessing Server Function Return Value in TypeScript\nDESCRIPTION: Demonstrates how to create and use a server function, accessing its return value when JavaScript is enabled.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/server-functions.md#2025-04-21_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nconst yourFn = createServerFn().handler(async () => {\n  return 'Hello, world!'\n})\n\n// `.then` is not available when JavaScript is disabled\nyourFn().then(console.log)\n```\n\n----------------------------------------\n\nTITLE: Accessing Path Params in Loader and BeforeLoad Functions (TSX)\nDESCRIPTION: This snippet shows how to access path params in both the loader and beforeLoad functions of a route. The params object contains the values parsed from the URL.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/path-params.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Route = createFileRoute('/posts/$postId')({\n  loader: async ({ params }) => {\n    return fetchPost(params.postId)\n  },\n})\n\nexport const Route = createFileRoute('/posts/$postId')({\n  beforeLoad: async ({ params }) => {\n    // do something with params.postId\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Router with Default Not Found Component\nDESCRIPTION: Setting up a default not found component at the router level for handling 404 errors across the application\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/not-found-errors.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst router = createRouter({\\n  defaultNotFoundComponent: () => {\\n    return (\\n      <div>\\n        <p>Not found!</p>\\n        <Link to=\\\"/\\\">Go home</Link>\\n      </div>\\n    )\\n  },\\n})\n```\n\n----------------------------------------\n\nTITLE: Using useParentMatches Hook in React Component\nDESCRIPTION: This example demonstrates how to import and use the useParentMatches hook in a React component. It shows the basic usage without any options, returning an array of RouteMatch objects.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/useParentMatchesHook.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useParentMatches } from '@tanstack/react-router'\n\nfunction Component() {\n  const parentMatches = useParentMatches()\n  //    ^ [RouteMatch, RouteMatch, ...]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Server Function with React Query Hook\nDESCRIPTION: Shows how to use server functions in components using useServerFn hook and React Query for data fetching.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/server-functions.md#2025-04-21_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useServerFn } from '@tanstack/react-start'\nimport { useQuery } from '@tanstack/react-query'\nimport { getServerTime } from './getServerTime'\n\nexport function Time() {\n  const getTime = useServerFn(getServerTime)\n\n  const timeQuery = useQuery({\n    queryKey: 'time',\n    queryFn: () => getTime(),\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using Await Component for Deferred Data in TanStack Router (TypeScript/React)\nDESCRIPTION: This snippet shows how to use the Await component in a React component to handle deferred data loading. It renders fast data immediately and provides a loading state for slow data.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/deferred-data-loading.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// src/routes/posts.$postId.tsx\nimport { createFileRoute, Await } from '@tanstack/react-router'\n\nexport const Route = createFileRoute('/posts/$postId')({\n  // ...\n  component: PostIdComponent,\n})\n\nfunction PostIdComponent() {\n  const { deferredSlowData, fastData } = Route.useLoaderData()\n\n  // do something with fastData\n\n  return (\n    <Await promise={deferredSlowData} fallback={<div>Loading...</div>}>\n      {(data) => {\n        return <div>{data}</div>\n      }}\n    </Await>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Link Component with React Aria Components\nDESCRIPTION: Shows how to create a custom Link component using React Aria Components' useLink hook with TanStack Router. This approach works around the lack of standard mouse events in React Aria's Link component.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/custom-link.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react'\nimport { createLink, LinkComponent } from '@tanstack/react-router'\nimport {\n  mergeProps,\n  useFocusRing,\n  useHover,\n  useLink,\n  useObjectRef,\n} from 'react-aria'\nimport type { AriaLinkOptions } from 'react-aria'\n\ninterface RACLinkProps extends Omit<AriaLinkOptions, 'href'> {\n  children?: React.ReactNode\n}\n\nconst RACLinkComponent = React.forwardRef<HTMLAnchorElement, RACLinkProps>(\n  (props, forwardedRef) => {\n    const ref = useObjectRef(forwardedRef)\n\n    const { isPressed, linkProps } = useLink(props, ref)\n    const { isHovered, hoverProps } = useHover(props)\n    const { isFocusVisible, isFocused, focusProps } = useFocusRing(props)\n\n    return (\n      <a\n        {...mergeProps(linkProps, hoverProps, focusProps, props)}\n        ref={ref}\n        data-hovered={isHovered || undefined}\n        data-pressed={isPressed || undefined}\n        data-focus-visible={isFocusVisible || undefined}\n        data-focused={isFocused || undefined}\n      />\n    )\n  },\n)\n\nconst CreatedLinkComponent = createLink(RACLinkComponent)\n\nexport const CustomLink: LinkComponent<typeof RACLinkComponent> = (props) => {\n  return <CreatedLinkComponent preload={'intent'} {...props} />\n}\n```\n\n----------------------------------------\n\nTITLE: Using useMatchRoute Hook Programmatically in React\nDESCRIPTION: Demonstrates how to use the useMatchRoute hook to programmatically check if a route is matched or pending. This example uses the hook within a useEffect to log when the /users route is matched and pending.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/navigation.md#2025-04-21_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Component() {\n  const matchRoute = useMatchRoute()\n\n  useEffect(() => {\n    if (matchRoute({ to: '/users', pending: true })) {\n      console.info('The /users route is matched and pending')\n    }\n  })\n\n  return (\n    <div>\n      <Link to=\"/users\">Users</Link>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing No-JS Server Function with TanStack Router in TypeScript/TSX\nDESCRIPTION: Shows how to create a server function that works without JavaScript, using TanStack Router's loader to provide a single-page application-like experience.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/server-functions.md#2025-04-21_snippet_32\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as fs from 'fs'\nimport { createFileRoute } from '@tanstack/react-router'\nimport { createServerFn } from '@tanstack/react-start'\n\nconst filePath = 'count.txt'\n\nasync function readCount() {\n  return parseInt(\n    await fs.promises.readFile(filePath, 'utf-8').catch(() => '0'),\n  )\n}\n\nconst getCount = createServerFn({\n  method: 'GET',\n}).handler(() => {\n  return readCount()\n})\n\nconst updateCount = createServerFn({ method: 'POST' })\n  .validator((formData) => {\n    if (!(formData instanceof FormData)) {\n      throw new Error('Invalid form data')\n    }\n\n    const addBy = formData.get('addBy')\n\n    if (!addBy) {\n      throw new Error('addBy is required')\n    }\n\n    return parseInt(addBy.toString())\n  })\n  .handler(async ({ data: addByAmount }) => {\n    const count = await readCount()\n    await fs.promises.writeFile(filePath, `${count + addByAmount}`)\n    // Reload the page to trigger the loader again\n    return new Response('ok', { status: 301, headers: { Location: '/' } })\n  })\n\nexport const Route = createFileRoute('/')({\n  component: Home,\n  loader: async () => await getCount(),\n})\n\nfunction Home() {\n  const state = Route.useLoaderData()\n\n  return (\n    <div>\n      <form\n        action={updateCount.url}\n        method=\"POST\"\n        encType=\"multipart/form-data\"\n      >\n        <input type=\"number\" name=\"addBy\" defaultValue=\"1\" />\n        <button type=\"submit\">Add</button>\n      </form>\n      <pre>{state}</pre>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Pathname-Based Scroll Restoration Keying\nDESCRIPTION: This snippet demonstrates how to customize the cache key for scroll restoration to use the pathname instead of the default history key. This causes the same scroll position to be used for the same URL path regardless of navigation history.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/scroll-restoration.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createRouter } from '@tanstack/react-router'\n\nconst router = createRouter({\n  getScrollRestorationKey: (location) => location.pathname,\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Validation Middleware in TanStack Router\nDESCRIPTION: This snippet illustrates how to create a middleware that validates input data using Zod. It defines a schema and uses the zodValidator to ensure the data meets the specified requirements.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/middleware.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createMiddleware } from '@tanstack/react-start'\nimport { zodValidator } from '@tanstack/zod-adapter'\nimport { z } from 'zod'\n\nconst mySchema = z.object({\n  workspaceId: z.string(),\n})\n\nconst workspaceMiddleware = createMiddleware()\n  .validator(zodValidator(mySchema))\n  .server(({ next, data }) => {\n    console.log('Workspace ID:', data.workspaceId)\n    return next()\n  })\n```\n\n----------------------------------------\n\nTITLE: Using CatchBoundary Component in TanStack Router\nDESCRIPTION: Example of implementing the CatchBoundary component to catch errors thrown by child components. The component is configured with a reset key and an error handler that logs errors to the console.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/catchBoundaryComponent.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CatchBoundary } from '@tanstack/react-router'\n\nfunction Component() {\n  return (\n    <CatchBoundary\n      getResetKey={() => 'reset'}\n      onCatch={(error) => console.error(error)}\n    >\n      <div>My Component</div>\n    </CatchBoundary>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Deferred Data Loading in TanStack Router (TypeScript)\nDESCRIPTION: This snippet demonstrates how to implement deferred data loading in a TanStack Router loader function. It fetches fast data immediately and defers slow data loading.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/deferred-data-loading.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// src/routes/posts.$postId.tsx\nimport { createFileRoute, defer } from '@tanstack/react-router'\n\nexport const Route = createFileRoute('/posts/$postId')({\n  loader: async () => {\n    // Fetch some slower data, but do not await it\n    const slowDataPromise = fetchSlowData()\n\n    // Fetch and await some data that resolves quickly\n    const fastData = await fetchFastData()\n\n    return {\n      fastData,\n      deferredSlowData: slowDataPromise,\n    }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using Await Component with Deferred Promise in TanStack Router (TSX)\nDESCRIPTION: This example demonstrates how to use the Await component to handle a deferred promise in a React component. It uses the useLoaderData hook to access the deferred promise and renders the resolved data.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/awaitComponent.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Await } from '@tanstack/react-router'\n\nfunction Component() {\n  const { deferredPromise } = route.useLoaderData()\n\n  return (\n    <Await promise={deferredPromise}>\n      {(data) => <div>{JSON.stringify(data)}</div>}\n    </Await>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Inversion of Control with Render Props\nDESCRIPTION: An alternative approach that avoids LinkProps entirely by using render props pattern to invert control, allowing consumers to specify exact Link components with narrowed types, resulting in optimal TypeScript performance.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/type-safety.md#2025-04-21_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nexport interface MyComponentProps {\n  readonly renderLink: () => React.ReactNode\n}\n\nconst MyComponent = (props: MyComponentProps) => {\n  return <div>{props.renderLink()}</div>\n}\n\nconst Page = () => {\n  return <MyComponent renderLink={() => <Link to=\"/absolute\" />} />\n}\n```\n\n----------------------------------------\n\nTITLE: Using React Hooks with Router Context\nDESCRIPTION: Demonstrates how to use React hooks with router context by passing the hook result through the context. It shows the setup in the root route, router creation, and usage in the main component and a route loader.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/router-context.md#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n// src/routes/__root.tsx\nimport { createRootRouteWithContext } from '@tanstack/react-router'\nimport { useNetworkStrength } from '@/hooks/useNetworkStrength'\n\ninterface MyRouterContext {\n  networkStrength: ReturnType<typeof useNetworkStrength>\n}\n\nexport const Route = createRootRouteWithContext<MyRouterContext>()({ component: App,\n})\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// src/router.tsx\nimport { createRouter } from '@tanstack/react-router'\n\nimport { routeTree } from './routeTree.gen'\n\nexport const router = createRouter({\n  routeTree,\n  context: {\n    networkStrength: undefined!, // We'll set this in React-land\n  },\n})\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// src/main.tsx\nimport { RouterProvider } from '@tanstack/react-router'\nimport { router } from './router'\n\nimport { useNetworkStrength } from '@/hooks/useNetworkStrength'\n\nfunction App() {\n  const networkStrength = useNetworkStrength()\n  // Inject the returned value from the hook into the router context\n  return <RouterProvider router={router} context={{ networkStrength }} />\n}\n\n// ...\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// src/routes/posts.tsx\nimport { createFileRoute } from '@tanstack/react-router'\n\nexport const Route = createFileRoute('/posts')({\n  component: Posts,\n  loader: ({ context }) => {\n    if (context.networkStrength === 'STRONG') {\n      // Do something\n    }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Code Splitting with .lazy.tsx in TanStack Router\nDESCRIPTION: This example demonstrates how to split a route file into two parts using the .lazy.tsx suffix in TanStack Router. It shows the before and after state of code splitting for a posts route.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/code-splitting.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// Before (Single File)\n// src/routes/posts.tsx\nimport { createFileRoute } from '@tanstack/react-router'\nimport { fetchPosts } from './api'\n\nexport const Route = createFileRoute('/posts')({\n  loader: fetchPosts,\n  component: Posts,\n})\n\nfunction Posts() {\n  // ...\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// After (Split into two files)\n// src/routes/posts.tsx\n\nimport { createFileRoute } from '@tanstack/react-router'\nimport { fetchPosts } from './api'\n\nexport const Route = createFileRoute('/posts')({\n  loader: fetchPosts,\n})\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// src/routes/posts.lazy.tsx\nimport { createLazyFileRoute } from '@tanstack/react-router'\n\nexport const Route = createLazyFileRoute('/posts')({\n  component: Posts,\n})\n\nfunction Posts() {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing retainSearchParams to Keep All Parameters in TanStack Router (TSX)\nDESCRIPTION: This example shows how to use retainSearchParams middleware to keep all search parameters in a file route. It uses Zod for search schema validation and passes true to retainSearchParams to retain all parameters.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/retainSearchParamsFunction.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { z } from 'zod'\nimport { createFileRoute, retainSearchParams } from '@tanstack/react-router'\nimport { zodValidator } from '@tanstack/zod-adapter'\n\nconst searchSchema = z.object({\n  one: z.string().optional(),\n  two: z.string().optional(),\n})\n\nexport const Route = createFileRoute('/hello')({\n  validateSearch: zodValidator(searchSchema),\n  search: {\n    middlewares: [retainSearchParams(true)],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication in Pathless Layout Routes with TanStack Router\nDESCRIPTION: This code snippet demonstrates how to create a pathless layout route with authentication checks. It uses the beforeLoad hook to verify if a user is authenticated and redirects to the login page if not, otherwise rendering the protected content through an Outlet component.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/faq.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// src/routes/_pathless-layout.tsx\nimport { createFileRoute, Outlet } from '@tanstack/react-router'\nimport { isAuthenticated } from '../utils/auth'\n\nexport const Route = createFileRoute('/_pathless-layout', {\n  beforeLoad: async () => {\n    // Check if the user is authenticated\n    const authed = await isAuthenticated()\n    if (!authed) {\n      // Redirect the user to the login page\n      return '/login'\n    }\n  },\n  component: PathlessLayoutRouteComponent,\n  // ...\n})\n\nfunction PathlessLayoutRouteComponent() {\n  return (\n    <div>\n      <h1>You are authed</h1>\n      <Outlet />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Router Configuration with TanStack Query Dehydration/Hydration (TypeScript/TSX)\nDESCRIPTION: Configures the TanStack Router to work with TanStack Query for SSR dehydration and hydration. It demonstrates how to create a router with a QueryClient, dehydrate data on the server, and hydrate it on the client.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/external-data-loading.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// src/router.tsx\n\nexport function createRouter() {\n  // Make sure you create your loader client or similar data\n  // stores inside of your `createRouter` function. This ensures\n  // that your data stores are unique to each request and\n  // always present on both server and client.\n  const queryClient = new QueryClient()\n\n  return createRouter({\n    routeTree,\n    // Optionally provide your loaderClient to the router context for\n    // convenience (you can provide anything you want to the router\n    // context!)\n    context: {\n      queryClient,\n    },\n    // On the server, dehydrate the loader client so the router\n    // can serialize it and send it to the client for us\n    dehydrate: () => {\n      return {\n        queryClientState: dehydrate(queryClient),\n      }\n    },\n    // On the client, hydrate the loader client with the data\n    // we dehydrated on the server\n    hydrate: (dehydrated) => {\n      hydrate(queryClient, dehydrated.queryClientState)\n    },\n    // Optionally, we can use `Wrap` to wrap our router in the loader client provider\n    Wrap: ({ children }) => {\n      return (\n        <QueryClientProvider client={queryClient}>\n          {children}\n        </QueryClientProvider>\n      )\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Invalidating Router Context in React\nDESCRIPTION: Demonstrates how to invalidate the router context using the invalidate method. This example shows a useAuth hook that updates the user state and invalidates the router context when the auth state changes.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/router-context.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction useAuth() {\n  const router = useRouter()\n  const [user, setUser] = useState<User | null>(null)\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged((user) => {\n      setUser(user)\n      router.invalidate()\n    })\n\n    return unsubscribe\n  }, [])\n\n  return user\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Context-Aware Middleware in TanStack Router\nDESCRIPTION: This example demonstrates how to create middleware that provides context to subsequent middleware in the chain. It shows two middleware functions: one that sets a context value and another that uses it.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/middleware.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createMiddleware } from '@tanstack/react-start'\n\nconst awesomeMiddleware = createMiddleware().server(({ next }) => {\n  return next({\n    context: {\n      isAwesome: Math.random() > 0.5,\n    },\n  })\n})\n\nconst loggingMiddleware = createMiddleware().server(\n  async ({ next, context }) => {\n    console.log('Is awesome?', context.isAwesome)\n    return next()\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Register Type with Declaration Merging in TypeScript\nDESCRIPTION: An example showing how to use declaration merging to add the type of your router instance to the Register interface. This enables full type safety for router-related functions and components.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/RegisterType.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst router = createRouter({\n  // ...\n})\n\ndeclare module '@tanstack/react-router' {\n  interface Register {\n    router: typeof router\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Route Matching Process - /blog URL\nDESCRIPTION: Illustrates the route matching process for the /blog URL, showing how each route is evaluated until a match is found.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/routing/route-matching.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nRoot\n    ❌ /\n    ❌ about/us\n    ❌ about\n    ⏩ blog\n      ✅ /\n      - new\n      - $postId\n    - *\n```\n\n----------------------------------------\n\nTITLE: Static Data Type Declaration in TanStack Router\nDESCRIPTION: Demonstrates how to enforce static data types using declaration merging with the StaticDataRouteOption interface.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/static-route-data.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\ndeclare module '@tanstack/react-router' {\n  interface StaticDataRouteOption {\n    customData: string\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using isNotFound Function in TanStack Router\nDESCRIPTION: Example demonstrating how to use the isNotFound function to check if an object is a NotFoundError in a TypeScript React environment. The function takes an unknown input and returns a boolean indicating whether the object is a NotFoundError.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/isNotFoundFunction.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { isNotFound } from '@tanstack/react-router'\n\nfunction somewhere(obj: unknown) {\n  if (isNotFound(obj)) {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Route Tree Structure - File System Layout\nDESCRIPTION: Illustrates a comprehensive route tree configuration showing various routing patterns including index routes, dynamic routes, and nested directories.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/routing/route-trees.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n/routes\n├── __root.tsx\n├── index.tsx\n├── about.tsx\n├── posts/\n│   ├── index.tsx\n│   ├── $postId.tsx\n├── posts.$postId.edit.tsx\n├── settings/\n│   ├── profile.tsx\n│   ├── notifications.tsx\n├── _pathlessLayout/\n│   ├── route-a.tsx\n├── ├── route-b.tsx\n├── files/\n│   ├── $.tsx\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Data Serializer for TanStack Router\nDESCRIPTION: This code snippet shows how to configure a custom data serializer (SuperJSON in this example) for TanStack Router to handle complex data types during SSR.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/ssr.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SuperJSON } from 'superjson'\n\nconst router = createRouter({\n  serializer: SuperJSON,\n})\n```\n\n----------------------------------------\n\nTITLE: Using Router Context in Route Definition\nDESCRIPTION: Shows how to use the router context in a route definition. The example demonstrates accessing the user id from the context in the loader function.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/router-context.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// src/routes/todos.tsx\nexport const Route = createFileRoute('/todos')({\n  component: Todos,\n  loader: ({ context }) => fetchTodosByUserId(context.user.id),\n})\n```\n\n----------------------------------------\n\nTITLE: Using the Link Component for Navigation in TypeScript\nDESCRIPTION: This snippet shows how to use the Link component from TanStack Router for navigation to a specific route within the application.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/solid/learn-the-basics.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Link } from '@tanstack/solid-router'\n\nfunction Home() {\n  return <Link to=\"/about\">About</Link>\n}\n```\n\n----------------------------------------\n\nTITLE: Using useNavigate Hook in TanStack Router with TSX\nDESCRIPTION: Demonstrates how to use the useNavigate hook for imperative navigation after an async action. This example navigates to a post page after successfully creating a post.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/navigation.md#2025-04-21_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Component() {\n  const navigate = useNavigate({ from: '/posts/$postId' })\n\n  const handleSubmit = async (e: FrameworkFormEvent) => {\n    e.preventDefault()\n\n    const response = await fetch('/posts', {\n      method: 'POST',\n      body: JSON.stringify({ title: 'My First Post' }),\n    })\n\n    const { id: postId } = await response.json()\n\n    if (response.ok) {\n      navigate({ to: '/posts/$postId', params: { postId } })\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom UI Navigation Blocking without Resolver in React with TanStack Router\nDESCRIPTION: This example shows how to implement a custom UI for navigation blocking using the useBlocker hook without a resolver. It uses a modal manager to display a custom confirmation dialog.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/navigation-blocking.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useBlocker } from '@tanstack/react-router'\n\nfunction MyComponent() {\n  const [formIsDirty, setFormIsDirty] = useState(false)\n\n  useBlocker({\n    shouldBlockFn: () => {\n      if (!formIsDirty) {\n        return false\n      }\n\n      const shouldBlock = new Promise<boolean>((resolve) => {\n        // Using a modal manager of your choice\n        modals.open({\n          title: 'Are you sure you want to leave?',\n          children: (\n            <SaveBlocker\n              confirm={() => {\n                modals.closeAll()\n                resolve(false)\n              }}\n              reject={() => {\n                modals.closeAll()\n                resolve(true)\n              }}\n            />\n          ),\n          onClose: () => resolve(true),\n        })\n      })\n      return shouldBlock\n    },\n  })\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Declarative Route Masking in TanStack Router\nDESCRIPTION: This example demonstrates how to set up declarative route masking using the createRouteMask function and configuring it in the router creation.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/route-masking.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createRouteMask } from '@tanstack/react-router'\n\nconst photoModalToPhotoMask = createRouteMask({\n  routeTree,\n  from: '/photos/$photoId/modal',\n  to: '/photos/$photoId',\n  params: (prev) => ({\n    photoId: prev.photoId,\n  }),\n})\n\nconst router = createRouter({\n  routeTree,\n  routeMasks: [photoModalToPhotoMask],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Preload Intent in TanStack Router\nDESCRIPTION: Sets up default intent-based preloading for all Link components in a TanStack Router application. This enables preloading when users hover over or touch link elements.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/preloading.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createRouter } from '@tanstack/react-router'\n\nconst router = createRouter({\n  // ...\n  defaultPreload: 'intent',\n})\n```\n\n----------------------------------------\n\nTITLE: Utilizing useRouteContext Hook in React Components with TanStack Router\nDESCRIPTION: This snippet demonstrates how to use the useRouteContext hook in a React component. It shows two use cases: one retrieving the full route context, and another using a select function to extract specific data from the context.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/useRouteContextHook.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useRouteContext } from '@tanstack/react-router'\n\nfunction Component() {\n  const context = useRouteContext({ from: '/posts/$postId' })\n  //    ^ RouteContext\n\n  // OR\n\n  const selected = useRouteContext({\n    from: '/posts/$postId',\n    select: (context) => context.postId,\n  })\n  //    ^ string\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Scroll Restoration in TanStack Router\nDESCRIPTION: This code snippet shows how to enable the built-in scroll restoration feature in TanStack Router. When enabled, the router will automatically monitor, cache, and restore scroll positions for scrollable areas.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/scroll-restoration.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createRouter } from '@tanstack/react-router'\n\nconst router = createRouter({\n  scrollRestoration: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Using Redirect Function in TanStack Router (TSX)\nDESCRIPTION: This snippet demonstrates two ways of using the redirect function in a route loader. It shows how to throw a redirect object directly and how to use the 'throw' option to force the redirect function to throw itself.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/redirectFunction.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { redirect } from '@tanstack/react-router'\n\nconst route = createRoute({\n  // throwing a redirect object\n  loader: () => {\n    if (!user) {\n      throw redirect({\n        to: '/login',\n      })\n    }\n  },\n  // or forcing `redirect` to throw itself\n  loader: () => {\n    if (!user) {\n      redirect({\n        to: '/login',\n        throw: true,\n      })\n    }\n  },\n  // ... other route options\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite Plugin for TanStack Router\nDESCRIPTION: Vite configuration file setup that adds the TanStack Router plugin before the React plugin. Enables the file-based route generation with automatic code splitting.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/quick-start.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// vite.config.ts\nimport { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\nimport { TanStackRouterVite } from '@tanstack/router-plugin/vite'\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [\n    // Please make sure that '@tanstack/router-plugin' is passed before '@vitejs/plugin-react'\n    TanStackRouterVite({ target: 'react', autoCodeSplitting: true }),\n    react(),\n    // ...,\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Dynamic Link Component Example\nDESCRIPTION: Example demonstrating how to create a dynamic link with path parameters using the Link component.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/navigation.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst link = (\n  <Link\n    to=\"/blog/post/$postId\"\n    params={{\n      postId: 'my-first-blog-post',\n    }}\n  >\n    Blog Post\n  </Link>\n)\n```\n\n----------------------------------------\n\nTITLE: Router.commitLocation Method Type Definition in TypeScript\nDESCRIPTION: Type definition for the commitLocation method of the Router, which commits a new location to the browser history. It includes parameters for location details, replacement behavior, scroll management, and navigation blocker settings.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/RouterType.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ntype commitLocation = (\n  location: ParsedLocation & {\n    replace?: boolean\n    resetScroll?: boolean\n    hashScrollIntoView?: boolean | ScrollIntoViewOptions\n    ignoreBlocker?: boolean\n  },\n) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Using Wildcard Parameters in API Routes (TypeScript)\nDESCRIPTION: Demonstrates the use of wildcard parameters in API routes. This example creates a route that captures any path after '/file/' and returns it in the response.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/api-routes.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// routes/api/file/$.ts\nimport { createAPIFileRoute } from '@tanstack/react-start/api'\n\nexport const APIRoute = createAPIFileRoute('/file/$')({\n  GET: async ({ params }) => {\n    const { _splat } = params\n    return new Response(`File: ${_splat}`)\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Root Application Component\nDESCRIPTION: Root component that serves as the entry point for all routes, providing HTML structure, metadata, and outlet for nested routes to render into.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/build-from-scratch.md#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n// app/routes/__root.tsx\nimport type { ReactNode } from 'react'\nimport {\n  Outlet,\n  createRootRoute,\n  HeadContent,\n  Scripts,\n} from '@tanstack/react-router'\n\nexport const Route = createRootRoute({\n  head: () => ({\n    meta: [\n      {\n        charSet: 'utf-8',\n      },\n      {\n        name: 'viewport',\n        content: 'width=device-width, initial-scale=1',\n      },\n      {\n        title: 'TanStack Start Starter',\n      },\n    ],\n  }),\n  component: RootComponent,\n})\n\nfunction RootComponent() {\n  return (\n    <RootDocument>\n      <Outlet />\n    </RootDocument>\n  )\n}\n\nfunction RootDocument({ children }: Readonly<{ children: ReactNode }>) {\n  return (\n    <html>\n      <head>\n        <HeadContent />\n      </head>\n      <body>\n        {children}\n        <Scripts />\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Code-Based Splitting in TanStack Router\nDESCRIPTION: This snippet illustrates how to implement code-based splitting in TanStack Router using the createLazyRoute function and the .lazy method on route definitions.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/code-splitting.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// src/posts.tsx\nexport const Route = createLazyRoute('/posts')({\n  component: MyComponent,\n})\n\nfunction MyComponent() {\n  return <div>My Component</div>\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// src/app.tsx\nconst postsRoute = createRoute({\n  getParentRoute: () => rootRoute,\n  path: '/posts',\n}).lazy(() => import('./posts.lazy').then((d) => d.Route))\n```\n\n----------------------------------------\n\nTITLE: Using notFound Function in TanStack Router Loaders (TSX)\nDESCRIPTION: This snippet demonstrates how to use the notFound function in route loaders to handle cases where data is not found. It shows two scenarios: throwing a not-found error for a specific route and for the entire page.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/notFoundFunction.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { notFound, createFileRoute, rootRouteId } from '@tanstack/react-router'\n\nconst Route = new createFileRoute('/posts/$postId')({\n  // throwing a not-found object\n  loader: ({ context: { post } }) => {\n    if (!post) {\n      throw notFound()\n    }\n  },\n  // or if you want to show a not-found on the whole page\n  loader: ({ context: { team } }) => {\n    if (!team) {\n      throw notFound({ routeId: rootRouteId })\n    }\n  },\n  // ... other route options\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom UI for Navigation Blocking with Hook in React\nDESCRIPTION: This snippet demonstrates how to create a custom UI for navigation blocking using the useBlocker hook with a resolver. It shows a more integrated approach to blocking confirmation.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/navigation-blocking.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useBlocker } from '@tanstack/react-router'\n\nfunction MyComponent() {\n  const [formIsDirty, setFormIsDirty] = useState(false)\n\n  const { proceed, reset, status } = useBlocker({\n    shouldBlockFn: () => formIsDirty,\n    withResolver: true,\n  })\n\n  // ...\n\n  return (\n    <>\n      {/* ... */}\n      {status === 'blocked' && (\n        <div>\n          <p>Are you sure you want to leave?</p>\n          <button onClick={proceed}>Yes</button>\n          <button onClick={reset}>No</button>\n        </div>\n      )}\n    </>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Router for External Data Caching\nDESCRIPTION: Shows how to configure the router to work with external caching systems like TanStack Query by setting defaultPreloadStaleTime to 0, ensuring every preload, load, and reload event triggers loader functions.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/data-loading.md#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nconst router = createRouter({\n  routeTree,\n  defaultPreloadStaleTime: 0,\n})\n```\n\n----------------------------------------\n\nTITLE: Demonstrating useLocation Hook Usage in TanStack Router with TypeScript and React\nDESCRIPTION: This code snippet illustrates two ways to use the useLocation hook from TanStack Router. It shows how to get the full location object and how to select a specific property using the select option.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/useLocationHook.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLocation } from '@tanstack/react-router'\n\nfunction Component() {\n  const location = useLocation()\n  //    ^ ParsedLocation\n\n  // OR\n\n  const pathname = useLocation({\n    select: (location) => location.pathname,\n  })\n  //    ^ string\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Scroll Behavior in TanStack Router\nDESCRIPTION: This code snippet shows how to configure the scroll behavior when navigating between pages. Setting scrollBehavior to 'instant' makes the transition between pages instant instead of a smooth scroll.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/scroll-restoration.md#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createRouter } from '@tanstack/react-router'\n\nconst router = createRouter({\n  scrollBehavior: 'instant',\n})\n```\n\n----------------------------------------\n\nTITLE: Using Active Props with Links in TanStack Router with TSX\nDESCRIPTION: Demonstrates how to style active links differently using the activeProps property. This example applies bold font weight to a link when it's active.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/navigation.md#2025-04-21_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nconst link = (\n  <Link\n    to=\"/blog/post/$postId\"\n    params={{\n      postId: 'my-first-blog-post',\n    }}\n    activeProps={{\n      style: {\n        fontWeight: 'bold',\n      },\n    }}\n  >\n    Section 1\n  </Link>\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Route Segments in TanStack Router\nDESCRIPTION: Shows how to create dynamic route segments by prefixing a segment with '$', allowing parameter capture in loaders and components.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/routing/code-based-routing.md#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst postIdRoute = createRoute({\n  getParentRoute: () => postsRoute,\n  path: '$postId',\n  // In a loader\n  loader: ({ params }) => fetchPost(params.postId),\n  // Or in a component\n  component: PostComponent,\n})\n\nfunction PostComponent() {\n  const { postId } = postIdRoute.useParams()\n  return <div>Post ID: {postId}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Matching Current Route with useMatchRoute in TanStack Router (TSX)\nDESCRIPTION: This snippet demonstrates how to use the useMatchRoute hook to match the current route '/posts/123' against a specified path '/posts/$postId'. It shows how to extract route parameters.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/useMatchRouteHook.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useMatchRoute } from '@tanstack/react-router'\n\n// Current location: /posts/123\nfunction Component() {\n  const matchRoute = useMatchRoute()\n  const params = matchRoute({ to: '/posts/$postId' })\n  //    ^ { postId: '123' }\n}\n```\n\n----------------------------------------\n\nTITLE: Server-Side Entry Point for SSR with TanStack Router\nDESCRIPTION: This code snippet shows the server-side entry point for SSR. It creates a router, sets up memory history, loads critical data, renders the application, and handles not found errors.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/ssr.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react'\nimport ReactDOMServer from 'react-dom/server'\nimport { createMemoryHistory } from '@tanstack/react-router'\nimport { StartServer } from '@tanstack/react-start/server'\nimport { createRouter } from './router'\n\nexport async function render(url, response) {\n  const router = createRouter()\n\n  const memoryHistory = createMemoryHistory({\n    initialEntries: [url],\n  })\n\n  router.update({\n    history: memoryHistory,\n  })\n\n  await router.load()\n\n  const appHtml = ReactDOMServer.renderToString(<StartServer router={router} />)\n\n  response.statusCode = router.hasNotFoundMatch() ? 404 : 200\n  response.setHeader('Content-Type', 'text/html')\n  response.end(`<!DOCTYPE html>${appHtml}`)\n}\n```\n\n----------------------------------------\n\nTITLE: Search Params Inheritance in Parent Routes\nDESCRIPTION: Example demonstrating how search parameters and their types are inherited by child routes, allowing access to parent search params in child routes.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/search-params.md#2025-04-21_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nconst productSearchSchema = z.object({\n  page: z.number().catch(1),\n  filter: z.string().catch(''),\n  sort: z.enum(['newest', 'oldest', 'price']).catch('newest'),\n})\n\ntype ProductSearch = z.infer<typeof productSearchSchema>\n\nexport const Route = createFileRoute('/shop/products')({  \n  validateSearch: productSearchSchema,\n})\n```\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Route = createFileRoute('/shop/products/$productId')({  \n  beforeLoad: ({ search }) => {\n    search\n    // ^? ProductSearch ✅\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using Zod to Validate Search Parameters for Pagination\nDESCRIPTION: Shows how to use Zod to validate and parse search parameters, then pass them to the loader via the loaderDeps function. This pattern ensures type safety and proper dependency handling for pagination.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/data-loading.md#2025-04-21_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\n// /routes/posts.tsx\nexport const Route = createFileRoute('/posts')({\n  // Use zod to validate and parse the search params\n  validateSearch: z.object({\n    offset: z.number().int().nonnegative().catch(0),\n  }),\n  // Pass the offset to your loader deps via the loaderDeps function\n  loaderDeps: ({ search: { offset } }) => ({ offset }),\n  // Use the offset from context in the loader function\n  loader: async ({ deps: { offset } }) =>\n    fetchPosts({\n      offset,\n    }),\n})\n```\n\n----------------------------------------\n\nTITLE: Router Configuration Setup\nDESCRIPTION: TanStack Router configuration with type declarations\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/tanstack-start.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// app/router.tsx\nimport { createRouter as createTanStackRouter } from '@tanstack/react-router'\nimport { routeTree } from './routeTree.gen'\n\nexport function createRouter() {\n  const router = createTanStackRouter({\n    routeTree,\n  })\n\n  return router\n}\n\ndeclare module '@tanstack/react-router' {\n  interface Register {\n    router: ReturnType<typeof createRouter>\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Effect/Schema for Search Param Validation\nDESCRIPTION: Example of implementing search parameter validation with Effect/Schema, which implements Standard Schema and doesn't require an adapter.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/search-params.md#2025-04-21_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createFileRoute } from '@tanstack/react-router'\nimport { Schema as S } from 'effect'\n\nconst productSearchSchema = S.standardSchemaV1(\n  S.Struct({\n    page: S.NumberFromString.pipe(\n      S.optional,\n      S.withDefaults({\n        constructor: () => 1,\n        decoding: () => 1,\n      }),\n    ),\n    filter: S.String.pipe(\n      S.optional,\n      S.withDefaults({\n        constructor: () => '',\n        decoding: () => '',\n      }),\n    ),\n    sort: S.Literal('newest', 'oldest', 'price').pipe(\n      S.optional,\n      S.withDefaults({\n        constructor: () => 'newest' as const,\n        decoding: () => 'newest' as const,\n      }),\n    ),\n  }),\n)\n\nexport const Route = createFileRoute('/shop/products/')({  \n  validateSearch: productSearchSchema,\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Up Server Entry Point with TanStack Start\nDESCRIPTION: This snippet creates the server-side rendering handler for TanStack Start applications. It configures the server entry point responsible for rendering the initial HTML payload using stream handling.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/learn-the-basics.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// app/ssr.tsx\nimport {\n  createStartHandler,\n  defaultStreamHandler,\n} from '@tanstack/react-start/server'\nimport { getRouterManifest } from '@tanstack/react-start/router-manifest'\n\nimport { createRouter } from './router'\n\nexport default createStartHandler({\n  createRouter,\n  getRouterManifest,\n})(defaultStreamHandler)\n```\n\n----------------------------------------\n\nTITLE: Configuring Route-Specific Preload Stale Time\nDESCRIPTION: Demonstrates setting preload stale time for a specific route using route options. Includes a loader function for data fetching.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/preloading.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Route = createFileRoute('/posts/$postId')({\n  loader: async ({ params }) => fetchPost(params.postId),\n  // Preload the route again if the preload cache is older than 10 seconds\n  preloadStaleTime: 10_000,\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Dynamic Path Parameters in API Routes (TypeScript)\nDESCRIPTION: Demonstrates how to use dynamic path parameters in API routes. This example creates a route that accepts a user ID and returns it in the response.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/api-routes.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// routes/api/users/$id.ts\nimport { createAPIFileRoute } from '@tanstack/react-start/api'\n\nexport const APIRoute = createAPIFileRoute('/users/$id')({\n  GET: async ({ params }) => {\n    const { id } = params\n    return new Response(`User ID: ${id}`)\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useBlocker Hook in React\nDESCRIPTION: This example demonstrates the basic usage of the useBlocker hook in a React component. It blocks navigation when a form is dirty.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/useBlockerHook.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useBlocker } from '@tanstack/react-router'\n\nfunction MyComponent() {\n  const [formIsDirty, setFormIsDirty] = useState(false)\n\n  useBlocker({\n    shouldBlockFn: () => formIsDirty,\n  })\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-Side Validation in TanStack Router\nDESCRIPTION: This snippet shows how to enable client-side validation in middleware. It uses the validateClient option to perform validation on both client and server sides.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/middleware.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createMiddleware } from '@tanstack/react-start'\nimport { zodValidator } from '@tanstack/zod-adapter'\nimport { z } from 'zod'\n\nconst workspaceMiddleware = createMiddleware({ validateClient: true })\n  .validator(zodValidator(mySchema))\n  .server(({ next, data }) => {\n    console.log('Workspace ID:', data.workspaceId)\n    return next()\n  })\n```\n\n----------------------------------------\n\nTITLE: Defining BeforeLoad Function in TypeScript for TanStack Router\nDESCRIPTION: This code snippet defines the type for the beforeLoad function in RouteOptions. It's an optional async function called before a route is loaded, handling authentication, redirects, and context setup.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/RouteOptionsType.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype beforeLoad = (\n  opts: RouteMatch & {\n    search: TFullSearchSchema\n    abortController: AbortController\n    preload: boolean\n    params: TAllParams\n    context: TParentContext\n    location: ParsedLocation\n    navigate: NavigateFn<AnyRoute> // @deprecated\n    buildLocation: BuildLocationFn<AnyRoute>\n    cause: 'enter' | 'stay'\n  },\n) => Promise<TRouteContext> | TRouteContext | void\n```\n\n----------------------------------------\n\nTITLE: Modifying Router Context in Route Definition\nDESCRIPTION: Shows how to modify the router context in a route definition using the beforeLoad function. The example demonstrates adding a new property to the context that can be accessed in the loader function.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/router-context.md#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n// src/routes/__root.tsx\nimport { createRootRouteWithContext } from '@tanstack/react-router'\n\ninterface MyRouterContext {\n  foo: boolean\n}\n\nexport const Route = createRootRouteWithContext<MyRouterContext>()({ component: App,\n})\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// src/router.tsx\nimport { createRouter } from '@tanstack/react-router'\n\nimport { routeTree } from './routeTree.gen'\n\nconst router = createRouter({\n  routeTree,\n  context: {\n    foo: true,\n  },\n})\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// src/routes/todos.tsx\nimport { createFileRoute } from '@tanstack/react-router'\n\nexport const Route = createFileRoute('/todos')({\n  component: Todos,\n  beforeLoad: () => {\n    return {\n      bar: true,\n    }\n  },\n  loader: ({ context }) => {\n    context.foo // true\n    context.bar // true\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Adding a Not Found Component to Root Route in TanStack Router\nDESCRIPTION: This snippet shows how to add a notFoundComponent to the root route for handling 404 Not Found scenarios in TanStack Router.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/creating-a-router.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Route = createRootRoute({\n  component: () => (\n    // ...\n  ),\n  notFoundComponent: () => <div>404 Not Found</div>,\n});\n```\n\n----------------------------------------\n\nTITLE: Using MatchRoute Component for Pending Navigation Indicator in React\nDESCRIPTION: Demonstrates how to use the MatchRoute component to display a spinner when navigation to a specific route is pending. This allows for optimistic UI feedback during navigation transitions.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/navigation.md#2025-04-21_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Component() {\n  return (\n    <div>\n      <Link to=\"/users\">\n        Users\n        <MatchRoute to=\"/users\" pending>\n          <Spinner />\n        </MatchRoute>\n      </Link>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Relative Link in TanStack Router with TSX\nDESCRIPTION: Demonstrates how to create a link relative to the current route by providing a 'from' route path. This example shows linking to a parent route from a blog post.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/navigation.md#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst postIdRoute = createRoute({\n  path: '/blog/post/$postId',\n})\n\nconst link = (\n  <Link from={postIdRoute.fullPath} to=\"../categories\">\n    Categories\n  </Link>\n)\n```\n\n----------------------------------------\n\nTITLE: Reusing linkOptions in Various TanStack Router Scenarios (TypeScript)\nDESCRIPTION: This snippet demonstrates how linkOptions can be used across different scenarios in TanStack Router, including route creation, navigation, and Link components.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/link-options.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst dashboardLinkOptions = linkOptions({\n  to: '/dashboard',\n  search: { search: '' },\n})\n\nexport const Route = createFileRoute('/dashboard')({\n  component: DashboardComponent,\n  validateSearch: (input) => ({ search: input.search }),\n  beforeLoad: () => {\n    // can used in redirect\n    throw redirect(dashboardLinkOptions)\n  },\n})\n\nfunction DashboardComponent() {\n  const navigate = useNavigate()\n\n  return (\n    <div>\n      {/** can be used in navigate */}\n      <button onClick={() => navigate(dashboardLinkOptions)} />\n\n      {/** can be used in Link */}\n      <Link {...dashboardLinkOptions} />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating from NotFoundRoute to notFoundComponent in TanStack Router in TSX\nDESCRIPTION: Shows how to migrate from the deprecated NotFoundRoute API to the recommended notFoundComponent approach. The example demonstrates the required changes to router configuration and root route definition.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/not-found-errors.md#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n// router.tsx\nimport { createRouter } from '@tanstack/react-router'\nimport { routeTree } from './routeTree.gen.'\n- import { notFoundRoute } from './notFoundRoute'  // [!code --]\n\nexport const router = createRouter({\n  routeTree,\n- notFoundRoute // [!code --]\n})\n\n// routes/__root.tsx\nimport { createRootRoute } from '@tanstack/react-router'\n\nexport const Route = createRootRoute({\n  // ...\n+ notFoundComponent: () => {  // [!code ++]\n+   return <p>Not found!</p>  // [!code ++]\n+ } // [!code ++]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Root Route Component for File-Based Routing\nDESCRIPTION: Implementation of the root route component that defines the layout structure with navigation links and router outlet. This serves as the parent component for all routes in the application.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/solid/quick-start.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createRootRoute, Link, Outlet } from '@tanstack/solid-router'\nimport { TanStackRouterDevtools } from '@tanstack/solid-router-devtools'\n\nexport const Route = createRootRoute({\n  component: () => (\n    <>\n      <div class=\"p-2 flex gap-2\">\n        <Link to=\"/\" class=\"[&.active]:font-bold\">\n          Home\n        </Link>{' '}\n        <Link to=\"/about\" class=\"[&.active]:font-bold\">\n          About\n        </Link>\n      </div>\n      <hr />\n      <Outlet />\n      <TanStackRouterDevtools />\n    </>\n  ),\n})\n```\n\n----------------------------------------\n\nTITLE: Using Reset Function in errorComponent for TanStack Router (TSX)\nDESCRIPTION: Shows how to use the reset function provided to the errorComponent to allow users to retry rendering the error boundary's normal children after an error occurs.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/data-loading.md#2025-04-21_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Route = createFileRoute('/posts')({\\n  loader: () => fetchPosts(),\\n  errorComponent: ({ error, reset }) => {\\n    return (\\n      <div>\\n        {error.message}\\n        <button\\n          onClick={() => {\\n            // Reset the router error boundary\\n            reset()\\n          }}\\n        >\\n          retry\\n        </button>\\n      </div>\\n    )\\n  },\\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Rspack/Rsbuild with TanStack Router\nDESCRIPTION: Configuration setup for integrating TanStack Router plugin with Rspack/Rsbuild, including React plugin and router plugin configuration with auto code splitting.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/routing/installation-with-rspack.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// rsbuild.config.ts\nimport { defineConfig } from '@rsbuild/core'\nimport { pluginReact } from '@rsbuild/plugin-react'\nimport { TanStackRouterRspack } from '@tanstack/router-plugin/rspack'\n\nexport default defineConfig({\n  plugins: [pluginReact()],\n  tools: {\n    rspack: {\n      plugins: [\n        TanStackRouterRspack({ target: 'react', autoCodeSplitting: true }),\n      ],\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Processing Accumulated Route Context for Breadcrumbs\nDESCRIPTION: Demonstrates how to process accumulated route context to generate breadcrumbs. It uses the useRouterState hook to access matched routes and their contexts.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/router-context.md#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n// src/routes/__root.tsx\nexport const Route = createRootRoute({\n  component: () => {\n    const matches = useRouterState({ select: (s) => s.matches })\n\n    const breadcrumbs = matches\n      .filter((match) => match.context.getTitle)\n      .map(({ pathname, context }) => {\n        return {\n          title: context.getTitle(),\n          path: pathname,\n        }\n      })\n\n    // ...\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Narrowed Type Alias from LinkProps\nDESCRIPTION: A technique for creating a narrowed type alias derived from concrete examples using a readonly array of LinkProps objects, which can then be used as a more efficient type for component props.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/type-safety.md#2025-04-21_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nexport const myLinkProps = [\n  {\n    to: '/posts',\n  },\n  {\n    to: '/posts/$postId',\n    params: { postId: 'postId' },\n  },\n] as const satisfies ReadonlyArray<LinkProps>\n\nexport type MyLinkProps = (typeof myLinkProps)[number]\n\nconst MyComponent = (props: { linkProps: MyLinkProps }) => {\n  return <Link {...props.linkProps} />\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Active Links in TanStack Router with TSX\nDESCRIPTION: Demonstrates which links will be considered active when on a specific route. The example shows three links that would be active when on the '/blog/post/my-first-blog-post' route.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/navigation.md#2025-04-21_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nconst link1 = (\n  <Link to=\"/blog/post/$postId\" params={{ postId: 'my-first-blog-post' }}>\n    Blog Post\n  </Link>\n)\nconst link2 = <Link to=\"/blog/post\">Blog Post</Link>\nconst link3 = <Link to=\"/blog\">Blog Post</Link>\n```\n\n----------------------------------------\n\nTITLE: Implementing Code-Based TanStack Router Configuration\nDESCRIPTION: Complete example showing how to configure routes using code-based approach instead of file-based. Includes root route, child routes, router creation, and app rendering in a single file.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/quick-start.md#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StrictMode } from 'react'\nimport ReactDOM from 'react-dom/client'\nimport {\n  Outlet,\n  RouterProvider,\n  Link,\n  createRouter,\n  createRoute,\n  createRootRoute,\n} from '@tanstack/react-router'\nimport { TanStackRouterDevtools } from '@tanstack/react-router-devtools'\n\nconst rootRoute = createRootRoute({\n  component: () => (\n    <>\n      <div className=\"p-2 flex gap-2\">\n        <Link to=\"/\" className=\"[&.active]:font-bold\">\n          Home\n        </Link>{' '}\n        <Link to=\"/about\" className=\"[&.active]:font-bold\">\n          About\n        </Link>\n      </div>\n      <hr />\n      <Outlet />\n      <TanStackRouterDevtools />\n    </>\n  ),\n})\n\nconst indexRoute = createRoute({\n  getParentRoute: () => rootRoute,\n  path: '/',\n  component: function Index() {\n    return (\n      <div className=\"p-2\">\n        <h3>Welcome Home!</h3>\n      </div>\n    )\n  },\n})\n\nconst aboutRoute = createRoute({\n  getParentRoute: () => rootRoute,\n  path: '/about',\n  component: function About() {\n    return <div className=\"p-2\">Hello from About!</div>\n  },\n})\n\nconst routeTree = rootRoute.addChildren([indexRoute, aboutRoute])\n\nconst router = createRouter({ routeTree })\n\ndeclare module '@tanstack/react-router' {\n  interface Register {\n    router: typeof router\n  }\n}\n\nconst rootElement = document.getElementById('app')!\nif (!rootElement.innerHTML) {\n  const root = ReactDOM.createRoot(rootElement)\n  root.render(\n    <StrictMode>\n      <RouterProvider router={router} />\n    </StrictMode>,\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using MatchRoute Component with Conditional Rendering in TanStack Router\nDESCRIPTION: Example showing how to use the MatchRoute component to conditionally render a Spinner component based on route matching. The example demonstrates using the children function pattern to access match information.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/matchRouteComponent.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MatchRoute } from '@tanstack/react-router'\n\nfunction Component() {\n  return (\n    <div>\n      <MatchRoute to=\"/posts/$postId\" params={{ postId: '123' }} pending>\n        {(match) => <Spinner show={!!match} wait=\"delay-50\" />}\n      </MatchRoute>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Link with Structured Search Params in TSX\nDESCRIPTION: Example showing how to create a Link component with structured search parameters including arrays and primitive types.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/search-params.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst link = (\n  <Link\n    to=\"/shop\"\n    search={{\n      pageIndex: 3,\n      includeCategories: ['electronics', 'gifts'],\n      sortBy: 'price',\n      desc: true,\n    }}\n  />\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Root Route with TanStack Router\nDESCRIPTION: Implementation of the root route component that provides layout, navigation links, and serves as the parent for child routes. Includes the TanStack Router devtools for debugging.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/quick-start.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createRootRoute, Link, Outlet } from '@tanstack/react-router'\nimport { TanStackRouterDevtools } from '@tanstack/react-router-devtools'\n\nexport const Route = createRootRoute({\n  component: () => (\n    <>\n      <div className=\"p-2 flex gap-2\">\n        <Link to=\"/\" className=\"[&.active]:font-bold\">\n          Home\n        </Link>{' '}\n        <Link to=\"/about\" className=\"[&.active]:font-bold\">\n          About\n        </Link>\n      </div>\n      <hr />\n      <Outlet />\n      <TanStackRouterDevtools />\n    </>\n  ),\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Post Route Not Found Component with Loader\nDESCRIPTION: Implementation of a post route with loader validation and notFoundComponent for handling non-existent posts\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/not-found-errors.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Route = createFileRoute('/posts/$postId')({\\n  loader: async ({ params: { postId } }) => {\\n    const post = await getPost(postId)\\n    if (!post) throw notFound()\\n    return { post }\\n  },\\n  component: ({ post }) => {\\n    return (\\n      <div>\\n        <h1>{post.title}</h1>\\n        <p>{post.body}</p>\\n      </div>\\n    )\\n  },\\n  notFoundComponent: () => {\\n    return <p>Post not found!</p>\\n  },\\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing useLoaderData Hook in TanStack Router\nDESCRIPTION: Type-safe version of useLoaderData hook pre-bound to a specific route ID. Supports data selection and structural sharing features.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/RouteApiType.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n  useLoaderData<TSelected = TLoaderData>(opts?: {\n    select?: (search: TLoaderData) => TSelected\n  }): TSelected\n```\n\n----------------------------------------\n\nTITLE: Implementing a Counter Route with Server Functions\nDESCRIPTION: Implementation of the index route with a persistent counter that uses server functions to read and update a count stored in a file, demonstrating data fetching and state invalidation.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/build-from-scratch.md#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n// app/routes/index.tsx\nimport * as fs from 'node:fs'\nimport { createFileRoute, useRouter } from '@tanstack/react-router'\nimport { createServerFn } from '@tanstack/react-start'\n\nconst filePath = 'count.txt'\n\nasync function readCount() {\n  return parseInt(\n    await fs.promises.readFile(filePath, 'utf-8').catch(() => '0'),\n  )\n}\n\nconst getCount = createServerFn({\n  method: 'GET',\n}).handler(() => {\n  return readCount()\n})\n\nconst updateCount = createServerFn({ method: 'POST' })\n  .validator((d: number) => d)\n  .handler(async ({ data }) => {\n    const count = await readCount()\n    await fs.promises.writeFile(filePath, `${count + data}`)\n  })\n\nexport const Route = createFileRoute('/')({ \n  component: Home,\n  loader: async () => await getCount(),\n})\n\nfunction Home() {\n  const router = useRouter()\n  const state = Route.useLoaderData()\n\n  return (\n    <button\n      type=\"button\"\n      onClick={() => {\n        updateCount({ data: 1 }).then(() => {\n          router.invalidate()\n        })\n      }}\n    >\n      Add 1 to {state}?\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Route Type Properties and Methods in TypeScript\nDESCRIPTION: This snippet outlines the structure and methods of the Route type in TanStack Router. It includes methods for adding children, updating route options, and lazy loading, as well as inheriting methods from RouteApi.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/RouteType.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Route {\n  addChildren: (children: Route[]) => this;\n  update: (options: Partial<UpdatableRouteOptions>) => this;\n  lazy: (lazyImporter: () => Promise<Partial<UpdatableRouteOptions>>) => this;\n  // ...RouteApi methods\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Path Params Outside Routes with Global useParams Hook (TSX)\nDESCRIPTION: This snippet shows how to use the globally exported useParams hook to access path params from any component in the app, using the strict: false option.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/path-params.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nfunction PostComponent() {\n  const { postId } = useParams({ strict: false })\n  return <div>Post {postId}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Default Router Configuration with JSON Serialization\nDESCRIPTION: Implementation of default search parameter serialization behavior using JSON.parse and JSON.stringify.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/custom-search-param-serialization.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  createRouter,\n  parseSearchWith,\n  stringifySearchWith,\n} from '@tanstack/react-router'\n\nconst router = createRouter({\n  // ...\n  parseSearch: parseSearchWith(JSON.parse),\n  stringifySearch: stringifySearchWith(JSON.stringify),\n})\n```\n\n----------------------------------------\n\nTITLE: Advanced Navigation Blocking with Custom Modal UI in TanStack Router and SolidJS\nDESCRIPTION: This example shows how to implement navigation blocking with a custom modal UI without using the resolver pattern. It uses a Promise-based approach to control navigation flow and integrates with a modal manager system.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/solid/guide/navigation-blocking.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useBlocker } from '@tanstack/solid-router'\n\nfunction MyComponent() {\n  const [formIsDirty, setFormIsDirty] = createSignal(false)\n\n  useBlocker({\n    shouldBlockFn: () => {\n      if (!formIsDirty()) {\n        return false\n      }\n\n      const shouldBlock = new Promise<boolean>((resolve) => {\n        // Using a modal manager of your choice\n        modals.open({\n          title: 'Are you sure you want to leave?',\n          children: (\n            <SaveBlocker\n              confirm={() => {\n                modals.closeAll()\n                resolve(false)\n              }}\n              reject={() => {\n                modals.closeAll()\n                resolve(true)\n              }}\n            />\n          ),\n          onClose: () => resolve(true),\n        })\n      })\n      return shouldBlock\n    },\n  })\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Database Operations with TanStack Start Server Functions\nDESCRIPTION: This code snippet demonstrates how to create server functions for database operations in TanStack Start. It shows the implementation of getUser and createUser functions using a hypothetical database client.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/databases.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createServerFn } from '@tanstack/react-start'\n\nconst db = createMyDatabaseClient()\n\nexport const getUser = createServerFn(async ({ ctx }) => {\n  const user = await db.getUser(ctx.userId)\n  return user\n})\n\nexport const createUser = createServerFn(async ({ ctx, input }) => {\n  const user = await db.createUser(input)\n  return user\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Route Loader Example with External Cache (TypeScript/TSX)\nDESCRIPTION: A naive illustration of using a Route's loader option to seed an external cache for data. This example demonstrates the concept but is not recommended for production use.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/external-data-loading.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// src/routes/posts.tsx\nlet postsCache = []\n\nexport const Route = createFileRoute('/posts')({\n  loader: async () => {\n    postsCache = await fetchPosts()\n  },\n  component: () => {\n    return (\n      <div>\n        {postsCache.map((post) => (\n          <Post key={post.id} post={post} />\n        ))}\n      </div>\n    )\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Preloading Route Chunks Manually\nDESCRIPTION: Demonstrates how to manually preload multiple route chunks using the router's loadRouteChunk method.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/preloading.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Component() {\n  const router = useRouter()\n\n  useEffect(() => {\n    async function preloadRouteChunks() {\n      try {\n        const postsRoute = router.routesByPath['/posts']\n        await Promise.all([\n          router.loadRouteChunk(router.routesByPath['/']),\n          router.loadRouteChunk(postsRoute),\n          router.loadRouteChunk(postsRoute.parentRoute),\n        ])\n      } catch (err) {\n        // Failed to preload route chunk\n      }\n    }\n\n    preloadRouteChunks()\n  }, [router])\n\n  return <div />\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Back Button with useCanGoBack in React Component\nDESCRIPTION: This snippet demonstrates how to use the useCanGoBack hook in a React component to conditionally render a back button. It imports necessary functions from TanStack Router, checks if going back is possible, and renders a button that triggers the router's back navigation when clicked.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/useCanGoBack.md#2025-04-21_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nimport { useRouter, useCanGoBack } from '@tanstack/react-router'\n\nfunction Component() {\n  const router = useRouter()\n  const canGoBack = useCanGoBack()\n\n  return (\n    <div>\n      {canGoBack ? (\n        <button onClick={() => router.history.back()}>Go back</button>\n      ) : null}\n\n      {/* ... */}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Layout Routes with TanStack Router in TSX\nDESCRIPTION: Shows how to create layout routes that wrap child components in a layout component. Demonstrates creating parent and child routes with proper nesting structure.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/routing/code-based-routing.md#2025-04-21_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nconst postsRoute = createRoute({\n  getParentRoute: () => rootRoute,\n  path: 'posts',\n  component: PostsLayoutComponent, // The layout component\n})\n\nfunction PostsLayoutComponent() {\n  return (\n    <div>\n      <h1>Posts</h1>\n      <Outlet />\n    </div>\n  )\n}\n\nconst postsIndexRoute = createRoute({\n  getParentRoute: () => postsRoute,\n  path: '/',\n})\n\nconst postsCreateRoute = createRoute({\n  getParentRoute: () => postsRoute,\n  path: 'create',\n})\n\nconst routeTree = rootRoute.addChildren([\n  // The postsRoute is the layout route\n  // Its children will be nested under the PostsLayoutComponent\n  postsRoute.addChildren([postsIndexRoute, postsCreateRoute]),\n])\n```\n\n----------------------------------------\n\nTITLE: Creating a Lazy File Route with Component in React\nDESCRIPTION: This example demonstrates how to use the createLazyFileRoute function to create a lazy file route for the root path ('/') with an IndexComponent. It also shows how to access loader data within the component.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/createLazyFileRouteFunction.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createLazyFileRoute } from '@tanstack/react-router'\n\nexport const Route = createLazyFileRoute('/')({\n  component: IndexComponent,\n})\n\nfunction IndexComponent() {\n  const data = Route.useLoaderData()\n  return <div>{data}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Root Route Match with useMatch in TanStack Router (TSX)\nDESCRIPTION: This snippet shows how to use the useMatch hook to access the root route's match. It demonstrates the usage of the rootRouteId token to specify the root route.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/useMatchHook.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  useMatch,\n  rootRouteId, // <<<< use this token!\n} from '@tanstack/react-router'\n\nfunction Component() {\n  const match = useMatch({ from: rootRouteId })\n  //     ^? strict match for RouteMatch\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering HeadContent in Full-Stack TanStack Router Application\nDESCRIPTION: This code snippet shows how to render the HeadContent component in the head tag of a full-stack TanStack Router application. It's crucial for managing the document head in server-rendered applications.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/document-head-management.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { HeadContent } from '@tanstack/react-router'\n\nexport const Route = createRootRoute({\n  component: () => (\n    <html>\n      <head>\n        <HeadContent />\n      </head>\n      <body>\n        <Outlet />\n      </body>\n    </html>\n  ),\n})\n```\n\n----------------------------------------\n\nTITLE: Mixed Flat and Directory Route Structure in TanStack Router\nDESCRIPTION: Example showing how to combine both flat and directory-based routing approaches. Demonstrates flexible route organization using both file naming patterns and directory structures.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/routing/file-based-routing.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nʦ __root.tsx\nʦ index.tsx                  | / (exact)\nʦ about.tsx                  | /about\nʦ posts.tsx                  | /posts\n📂 posts\n┄ ʦ index.tsx                | /posts (exact)\n┄ ʦ $postId.tsx              | /posts/$postId\n┄ ʦ $postId.edit.tsx         | /posts/$postId/edit\n```\n\n----------------------------------------\n\nTITLE: Rendering HeadContent in Single-Page TanStack Router Application\nDESCRIPTION: This snippet demonstrates how to render the HeadContent component in a single-page application using TanStack Router. It's placed at the top of the component tree to manage the document head.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/document-head-management.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { HeadContent } from '@tanstack/react-router'\n\nconst rootRoute = createRootRoute({\n  component: () => (\n    <>\n      <HeadContent />\n      <Outlet />\n    </>\n  ),\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Redirect in Server Function\nDESCRIPTION: Example of implementing a redirect within a server function using the redirect utility.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/server-functions.md#2025-04-21_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\nimport { redirect } from '@tanstack/react-router'\nimport { createServerFn } from '@tanstack/react-start'\n\nexport const doStuff = createServerFn({ method: 'GET' }).handler(async () => {\n  // Redirect the user to the home page\n  throw redirect({\n    to: '/',\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing useParams Hook in TanStack Router\nDESCRIPTION: Type-safe version of useParams hook pre-bound to a specific route ID. Supports parameter selection and structural sharing options.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/RouteApiType.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n  useParams<TSelected = TAllParams>(opts?: {\n    select?: (params: TAllParams) => TSelected\n  }): TSelected\n```\n\n----------------------------------------\n\nTITLE: Defining Register Type Template in TypeScript\nDESCRIPTION: The basic template for the Register type that is used to register a route tree with a router instance. This type unlocks the full type safety features of TanStack Router.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/RegisterType.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport type Register = {\n  // router: [Your router type here]\n}\n```\n\n----------------------------------------\n\nTITLE: Using linkOptions for Link Component in TanStack Router (TSX)\nDESCRIPTION: This example demonstrates how to use the linkOptions function to create a typed object for use with the Link component. It sets up options for a user dashboard link with search parameters.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/linkOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst userLinkOptions = linkOptions({\n  to: '/dashboard/users/user',\n  search: {\n    usersView: {\n      sortBy: 'email',\n      filterBy: 'filter',\n    },\n    userId: 0,\n  },\n})\n\nfunction DashboardComponent() {\n  return <Link {...userLinkOptions} />\n}\n```\n\n----------------------------------------\n\nTITLE: Default TanStack Router Plugin Configuration\nDESCRIPTION: Default configuration options for TanStack Router Plugin when used with Rspack/Rsbuild, including routes directory and file naming conventions.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/routing/installation-with-rspack.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"routesDirectory\": \"./src/routes\",\n  \"generatedRouteTree\": \"./src/routeTree.gen.ts\",\n  \"routeFileIgnorePrefix\": \"-\",\n  \"quoteStyle\": \"single\"\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Router Types for TypeScript in TanStack Router\nDESCRIPTION: This code extends the Register interface to provide type safety for the router instance across the entire project using TypeScript's Declaration Merging.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/creating-a-router.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\ndeclare module '@tanstack/react-router' {\n  interface Register {\n    // This infers the type of our router and registers it across your entire project\n    router: typeof router\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: No-JS Form Data Handling Implementation\nDESCRIPTION: Comprehensive example of handling form data submission without JavaScript including validation.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/server-functions.md#2025-04-21_snippet_30\n\nLANGUAGE: tsx\nCODE:\n```\nconst yourFn = createServerFn({ method: 'POST' })\n  .validator((formData) => {\n    if (!(formData instanceof FormData)) {\n      throw new Error('Invalid form data')\n    }\n\n    const age = formData.get('age')\n\n    if (!age) {\n      throw new Error('age is required')\n    }\n\n    return age.toString()\n  })\n  .handler(async ({ data: formData }) => {\n    // `age` will be '123'\n    const age = formData.get('age')\n    // ...\n  })\n\nfunction Component() {\n  return (\n    //  We need to tell the server that our data type is `multipart/form-data` by setting the `encType` attribute on the form.\n    <form action={yourFn.url} method=\"POST\" encType=\"multipart/form-data\">\n      <input name=\"age\" defaultValue=\"34\" />\n      <button type=\"submit\">Click me!</button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using linkOptions for Type-Safe Link Configuration in TanStack Router (TypeScript)\nDESCRIPTION: This snippet shows how to use the linkOptions function to create type-safe and reusable options for Link components, providing early type checking.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/link-options.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst dashboardLinkOptions = linkOptions({\n  to: '/dashboard',\n  search: { search: '' },\n})\n\nfunction DashboardComponent() {\n  return <Link {...dashboardLinkOptions} />\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Root Routes in TanStack Router\nDESCRIPTION: Shows how to create standard root routes and root routes with context using createRootRoute and createRootRouteWithContext functions.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/routing/code-based-routing.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// Standard root route\nimport { createRootRoute } from '@tanstack/react-router'\n\nconst rootRoute = createRootRoute()\n\n// Root route with Context\nimport { createRootRouteWithContext } from '@tanstack/react-router'\nimport type { QueryClient } from '@tanstack/react-query'\n\nexport interface MyRouterContext {\n  queryClient: QueryClient\n}\nconst rootRoute = createRootRouteWithContext<MyRouterContext>()\n```\n\n----------------------------------------\n\nTITLE: Implementing File-Based Route with Server Functions in TanStack Start\nDESCRIPTION: This code demonstrates creating an index route using file-based routing with TanStack Router. It includes server functions for reading and updating a count value from a file, along with a React component that displays and updates this count.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/learn-the-basics.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// app/routes/index.tsx\nimport * as fs from 'node:fs'\nimport { createFileRoute, useRouter } from '@tanstack/react-router'\nimport { createServerFn } from '@tanstack/react-start'\n\nconst filePath = 'count.txt'\n\nasync function readCount() {\n  return parseInt(\n    await fs.promises.readFile(filePath, 'utf-8').catch(() => '0'),\n  )\n}\n\nconst getCount = createServerFn({\n  method: 'GET',\n}).handler(() => {\n  return readCount()\n})\n\nconst updateCount = createServerFn({ method: 'POST' })\n  .validator((d: number) => d)\n  .handler(async ({ data }) => {\n    const count = await readCount()\n    await fs.promises.writeFile(filePath, `${count + data}`)\n  })\n\nexport const Route = createFileRoute('/')({ \n  component: Home,\n  loader: async () => await getCount(),\n})\n\nfunction Home() {\n  const router = useRouter()\n  const state = Route.useLoaderData()\n\n  return (\n    <button\n      type=\"button\"\n      onClick={() => {\n        updateCount({ data: 1 }).then(() => {\n          router.invalidate()\n        })\n      }}\n    >\n      Add 1 to {state}?\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Utility Function for Fetching Posts\nDESCRIPTION: Defines a utility function fetchPosts that makes an API request to fetch posts based on a page index. This function will be injected via the router context system.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/data-loading.md#2025-04-21_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nexport const fetchPosts = async () => {\n  const res = await fetch(`/api/posts?page=${pageIndex}`)\n  if (!res.ok) throw new Error('Failed to fetch posts')\n  return res.json()\n}\n```\n\n----------------------------------------\n\nTITLE: Raw Response Handling in TanStack Router\nDESCRIPTION: Examples of returning raw Response objects and implementing streaming responses in server functions.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/server-functions.md#2025-04-21_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createServerFn } from '@tanstack/react-start'\n\nexport const getServerTime = createServerFn({\n  method: 'GET',\n  response: 'raw',\n}).handler(async () => {\n  return fetch('https://example.com/time.txt')\n})\n\nexport const streamEvents = createServerFn({\n  method: 'GET',\n  response: 'raw',\n}).handler(async ({ signal }) => {\n  const stream = new ReadableStream({\n    async start(controller) {\n      controller.enqueue(new TextEncoder().encode('Connection established\\n'))\n\n      let count = 0\n      const interval = setInterval(() => {\n        if (signal.aborted) {\n          clearInterval(interval)\n          controller.close()\n          return\n        }\n        controller.enqueue(\n          new TextEncoder().encode(\n            `Event ${++count}: ${new Date().toISOString()}\\n`,\n          ),\n        )\n        if (count >= 10) {\n          clearInterval(interval)\n          controller.close()\n        }\n      }, 1000)\n\n      signal.addEventListener('abort', () => {\n        clearInterval(interval)\n        controller.close()\n      })\n    },\n  })\n\n  return new Response(stream, {\n    headers: {\n      'Content-Type': 'text/event-stream',\n      'Cache-Control': 'no-cache',\n      Connection: 'keep-alive',\n    },\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Using defer Function with TanStack Router in TSX\nDESCRIPTION: Demonstrates how to use the defer function to wrap an API fetch promise and handle it using either useAwaited hook or Await component. The example shows implementation within a route configuration and component usage.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/deferFunction.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defer } from '@tanstack/react-router'\n\nconst route = createRoute({\n  loader: () => {\n    const deferredPromise = defer(fetch('/api/data'))\n    return { deferredPromise }\n  },\n  component: MyComponent,\n})\n\nfunction MyComponent() {\n  const { deferredPromise } = Route.useLoaderData()\n\n  const data = useAwaited({ promise: deferredPromise })\n\n  // or\n\n  return (\n    <Await promise={deferredPromise}>\n      {(data) => <div>{JSON.stringify(data)}</div>}\n    </Await>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FetchOrRedirect with ValidateRedirectOptions\nDESCRIPTION: Demonstrates implementation of a fetchOrRedirect function that uses ValidateRedirectOptions for type-safe redirects on failed requests.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/type-utilities.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport async function fetchOrRedirect<\n  TRouter extends RegisteredRouter = RegisteredRouter,\n  TOptions,\n>(\n  url: string,\n  redirectOptions: ValidateRedirectOptions<TRouter, TOptions>,\n): Promise<unknown>\nexport async function fetchOrRedirect(\n  url: string,\n  redirectOptions: ValidateRedirectOptions,\n): Promise<unknown> {\n  const response = await fetch(url)\n\n  if (!response.ok && response.status === 401) {\n    throw redirect(redirectOptions)\n  }\n\n  return await response.json()\n}\n```\n\n----------------------------------------\n\nTITLE: Using useLoaderData Hook in TanStack Router with TypeScript\nDESCRIPTION: This example demonstrates how to use the useLoaderData hook in a React component with TanStack Router. It shows the basic usage with the 'from' option to specify the route ID, providing type safety for the returned loader data.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/useLoaderDataHook.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLoaderData } from '@tanstack/react-router'\n\nfunction Component() {\n  const loaderData = useLoaderData({ from: '/posts/$postId' })\n  //     ^? { postId: string, body: string, ... }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring staleTime for Route Data in TanStack Router\nDESCRIPTION: This snippet shows how to configure staleTime for a route to control how long data is considered fresh before reloading. Setting staleTime to 10_000 means data will remain fresh for 10 seconds before being reloaded in the background.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/data-loading.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// /routes/posts.tsx\nexport const Route = createFileRoute('/posts')({\n  loader: () => fetchPosts(),\n  // Consider the route's data fresh for 10 seconds\n  staleTime: 10_000,\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing useLoaderDeps Hook in TanStack Router\nDESCRIPTION: Type-safe version of useLoaderDeps hook pre-bound to a specific route ID. Supports dependency selection and structural sharing.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/RouteApiType.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n  useLoaderDeps<TSelected = TLoaderDeps>(opts?: {\n    select?: (search: TLoaderDeps) => TSelected\n  }): TSelected\n```\n\n----------------------------------------\n\nTITLE: No-JS Form Component Implementation\nDESCRIPTION: React component implementation for no-JavaScript form submission handling.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/server-functions.md#2025-04-21_snippet_29\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Component() {\n  return (\n    <form action={yourFn.url} method=\"POST\">\n      <input name=\"name\" defaultValue=\"John\" />\n      <button type=\"submit\">Click me!</button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: External URL Redirect Implementation\nDESCRIPTION: Demonstrates how to implement an external URL redirect in a server function.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/server-functions.md#2025-04-21_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\nimport { redirect } from '@tanstack/react-router'\nimport { createServerFn } from '@tanstack/react-start'\n\nexport const auth = createServerFn({ method: 'GET' }).handler(async () => {\n  // Redirect the user to the auth provider\n  throw redirect({\n    href: 'https://authprovider.com/login',\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Cloudflare Wrangler Configuration\nDESCRIPTION: Wrangler configuration file setup for Cloudflare Pages deployment with Node.js compatibility settings.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/hosting.md#2025-04-21_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\nname = \"your-cloudflare-project-name\"\npages_build_output_dir = \"./dist\"\ncompatibility_flags = [\"nodejs_compat\"]\ncompatibility_date = \"2024-11-13\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Custom Link Component with TanStack Router\nDESCRIPTION: Demonstrates how to create a basic custom Link component using the createLink function from TanStack Router. The custom component adds additional styling and sets the preload behavior to 'intent'.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/custom-link.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react'\nimport { createLink, LinkComponent } from '@tanstack/react-router'\n\ninterface BasicLinkProps extends React.AnchorHTMLAttributes<HTMLAnchorElement> {\n  // Add any additional props you want to pass to the anchor element\n}\n\nconst BasicLinkComponent = React.forwardRef<HTMLAnchorElement, BasicLinkProps>(\n  (props, ref) => {\n    return (\n      <a ref={ref} {...props} className={'block px-3 py-2 text-blue-700'} />\n    )\n  },\n)\n\nconst CreatedLinkComponent = createLink(BasicLinkComponent)\n\nexport const CustomLink: LinkComponent<typeof BasicLinkComponent> = (props) => {\n  return <CreatedLinkComponent preload={'intent'} {...props} />\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Settings Route Not Found Component in TSX\nDESCRIPTION: Example of setting up a notFoundComponent for a settings route to handle non-existing settings pages\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/not-found-errors.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Route = createFileRoute('/settings')({\\n  component: () => {\\n    return (\\n      <div>\\n        <p>Settings page</p>\\n        <Outlet />\\n      </div>\\n    )\\n  },\\n  notFoundComponent: () => {\\n    return <p>This setting page doesn't exist!</p>\\n  },\\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering Scripts Component in Single-Page TanStack Router Application\nDESCRIPTION: This code shows how to render the Scripts component in a single-page application using TanStack Router. It's placed at the bottom of the component tree to render body scripts defined in route options.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/document-head-management.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Scripts, createRootRoute } from '@tanstack/react-router'\n\nexport const Route = createRootRoute({\n  component: () => (\n    <>\n      <Outlet />\n      <Scripts />\n    </>\n  ),\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Type-Safe Menu Component with ValidateLinkOptionsArray\nDESCRIPTION: Shows how to create a Menu component that accepts an array of type-safe link options using ValidateLinkOptionsArray utility.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/type-utilities.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport interface MenuProps<\n  TRouter extends RegisteredRouter = RegisteredRouter,\n  TItems extends ReadonlyArray<unknown> = ReadonlyArray<unknown>,\n> {\n  items: ValidateLinkOptionsArray<TRouter, TItems>\n}\n\nexport function Menu<\n  TRouter extends RegisteredRouter = RegisteredRouter,\n  TItems extends ReadonlyArray<unknown>,\n>(props: MenuProps<TRouter, TItems>): React.ReactNode\nexport function Menu(props: MenuProps): React.ReactNode {\n  return (\n    <ul>\n      {props.items.map((item) => (\n        <li>\n          <Link {...item} />\n        </li>\n      ))}\n    </ul>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Search Parameters\nDESCRIPTION: Example of reading search parameters using the useSearch hook in TanStack Router\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/migrate-from-react-router.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst { page } = useSearch({ from: productPage.fullPath })\n```\n\n----------------------------------------\n\nTITLE: Implementing Route Masking with Link Component in React\nDESCRIPTION: This example demonstrates how to use the mask option with the Link component to create a masked route. It navigates to a modal route while displaying a different URL.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/route-masking.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Link\n  to=\"/photos/$photoId/modal\"\n  params={{ photoId: 5 }}\n  mask={{\n    to: '/photos/$photoId',\n    params: {\n      photoId: 5,\n    },\n  }}\n>\n  Open Photo\n</Link>\n```\n\n----------------------------------------\n\nTITLE: Creating Server Functions for Data Fetching in TypeScript\nDESCRIPTION: This snippet explains how to create a server function using createServerFn to fetch user data by user ID, incorporating validation with Zod.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/solid/learn-the-basics.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServerFn } from '@tanstack/solid-start'\nimport * as fs from 'node:fs'\nimport { z } from 'zod'\n\nconst getUserById = createServerFn({ method: 'GET' })\n  .validator(z.string())\n  .handler(async ({ data }) => {\n    return db.query.users.findFirst({ where: eq(users.id, data) })\n  })\n\n// Somewhere else in your application\nconst user = await getUserById({ data: '1' })\n```\n\n----------------------------------------\n\nTITLE: Defining Parent Route in Code-based Routing with TypeScript\nDESCRIPTION: Demonstrates how to define a parent route using the Route class to ensure proper type inheritance for child routes.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/type-safety.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst parentRoute = createRoute({\n  getParentRoute: () => parentRoute,\n})\n```\n\n----------------------------------------\n\nTITLE: Custom UI Navigation Blocking with useBlocker and Resolver in TanStack Router and SolidJS\nDESCRIPTION: This example demonstrates how to implement a custom UI for navigation blocking using the useBlocker hook with the withResolver option. It renders a custom dialog when navigation is blocked, allowing users to proceed or cancel.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/solid/guide/navigation-blocking.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useBlocker } from '@tanstack/solid-router'\n\nfunction MyComponent() {\n  const [formIsDirty, setFormIsDirty] = createSignal(false)\n\n  const { proceed, reset, status } = useBlocker({\n    shouldBlockFn: () => formIsDirty(),\n    withResolver: true,\n  })\n\n  // ...\n\n  return (\n    <>\n      {/* ... */}\n      {status === 'blocked' && (\n        <div>\n          <p>Are you sure you want to leave?</p>\n          <button onClick={proceed}>Yes</button>\n          <button onClick={reset}>No</button>\n        </div>\n      )}\n    </>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Root Route and Router with TanStack Router\nDESCRIPTION: Example of creating a root route with the createRootRoute function, adding child routes to create a route tree, and then initializing a router. The root route includes a component that renders an Outlet component.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/createRootRouteFunction.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createRootRoute, createRouter, Outlet } from '@tanstack/react-router'\n\nconst rootRoute = createRootRoute({\n  component: () => <Outlet />,\n  // ... root route options\n})\n\nconst routeTree = rootRoute.addChildren([\n  // ... other routes\n])\n\nconst router = createRouter({\n  routeTree,\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing useMatch Hook in TanStack Router\nDESCRIPTION: Type-safe version of useMatch hook pre-bound to a specific route ID. Supports selection and structural sharing options for optimized rendering.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/RouteApiType.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n  useMatch<TSelected = TAllContext>(opts?: {\n    select?: (match: TAllContext) => TSelected\n  }): TSelected\n```\n\n----------------------------------------\n\nTITLE: Implementing Server Function in Route Loader\nDESCRIPTION: Demonstrates how to call a server function within a route loader to fetch server time data.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/server-functions.md#2025-04-21_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getServerTime } from './getServerTime'\n\nexport const Route = createFileRoute('/time')({\n  loader: async () => {\n    const time = await getServerTime()\n\n    return {\n      time,\n    }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using Fine-Grained Selectors in TanStack Router\nDESCRIPTION: Shows how to use fine-grained selectors with the useSearch hook to subscribe to specific subsets of the router state, preventing unnecessary re-renders.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/render-optimizations.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst foo = Route.useSearch({ select: ({ foo }) => foo })\n```\n\n----------------------------------------\n\nTITLE: Configuration Reference - TanStack Router Framework\nDESCRIPTION: YAML-style frontmatter configuration for documentation page, specifying the reference path and replacement directive for router naming.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/solid/guide/data-loading.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nref: docs/router/framework/react/guide/data-loading.md\nreplace: { 'react-router': 'solid-router' }\n---\n```\n\n----------------------------------------\n\nTITLE: Managing Body Scripts in TanStack Router\nDESCRIPTION: This code shows how to add scripts to the body of the document using the routeOptions.scripts property in TanStack Router. It's useful for loading scripts that require the DOM to be loaded before execution.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/document-head-management.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Route = createRootRoute({\n  scripts: [\n    {\n      children: 'console.log(\"Hello, world!\")',\n    },\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack with TanStack Router Plugin\nDESCRIPTION: Webpack configuration setup showing how to add and configure the TanStack Router plugin with React target and auto code splitting enabled.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/routing/installation-with-webpack.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// webpack.config.ts\nimport { TanStackRouterWebpack } from '@tanstack/router-plugin/webpack'\n\nexport default {\n  plugins: [\n    TanStackRouterWebpack({ target: 'react', autoCodeSplitting: true }),\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Cancellation Support in TanStack Router Server Functions\nDESCRIPTION: Implements cancellation handling in server functions using AbortSignal, including both client and server-side abort handling.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/server-functions.md#2025-04-21_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createServerFn } from '@tanstack/react-start'\n\nexport const abortableServerFn = createServerFn().handler(\n  async ({ signal }) => {\n    return new Promise<string>((resolve, reject) => {\n      if (signal.aborted) {\n        return reject(new Error('Aborted before start'))\n      }\n      const timerId = setTimeout(() => {\n        console.log('server function finished')\n        resolve('server function result')\n      }, 1000)\n      const onAbort = () => {\n        clearTimeout(timerId)\n        console.log('server function aborted')\n        reject(new Error('Aborted'))\n      }\n      signal.addEventListener('abort', onAbort, { once: true })\n    })\n  },\n)\n\n// Usage\nfunction Test() {\n  const controller = new AbortController()\n  const serverFnPromise = abortableServerFn({\n    signal: controller.signal,\n  })\n  await new Promise((resolve) => setTimeout(resolve, 500))\n  controller.abort()\n  try {\n    const serverFnResult = await serverFnPromise\n    console.log(serverFnResult)\n  } catch (error) {\n    console.error(error)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite with TanStack Router Plugin\nDESCRIPTION: Vite configuration file setup to include the TanStack Router plugin. This snippet shows how to add the plugin to the Vite config, ensuring it's placed before the React plugin.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/routing/installation-with-vite.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// vite.config.ts\nimport { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\nimport { TanStackRouterVite } from '@tanstack/router-plugin/vite'\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [\n    // Please make sure that '@tanstack/router-plugin' is passed before '@vitejs/plugin-react'\n    TanStackRouterVite({ target: 'react', autoCodeSplitting: true }),\n    react(),\n    // ...\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Importing File-Based Route Tree in TanStack Router\nDESCRIPTION: This code shows how to import a generated route tree file for file-based routing in TanStack Router.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/creating-a-router.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { routeTree } from './routeTree.gen'\n```\n\n----------------------------------------\n\nTITLE: Using navigate Function for Route Masking in React\nDESCRIPTION: This snippet shows how to use the navigate function with the mask option to programmatically navigate to a masked route.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/route-masking.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst navigate = useNavigate()\n\nfunction onOpenPhoto() {\n  navigate({\n    to: '/photos/$photoId/modal',\n    params: { photoId: 5 },\n    mask: {\n      to: '/photos/$photoId',\n      params: {\n        photoId: 5,\n      },\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Logging Middleware in TanStack Router\nDESCRIPTION: This snippet demonstrates how to create a simple logging middleware using the createMiddleware function. It logs the request and response of a server function.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/middleware.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createMiddleware } from '@tanstack/react-start'\n\nconst loggingMiddleware = createMiddleware().server(async ({ next, data }) => {\n  console.log('Request received:', data)\n  const result = await next()\n  console.log('Response processed:', result)\n  return result\n})\n```\n\n----------------------------------------\n\nTITLE: Link Preloading in TanStack Router with TSX\nDESCRIPTION: Demonstrates how to enable preloading of routes on user intent (hover or touchstart). This improves perceived performance by loading route data before navigation.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/navigation.md#2025-04-21_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nconst link = (\n  <Link to=\"/blog/post/$postId\" preload=\"intent\">\n    Blog Post\n  </Link>\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Input and Output Types for Zod Validator\nDESCRIPTION: Advanced configuration for Zod validator to specify input and output type inference, providing flexibility in type inference for navigation versus reading search params.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/search-params.md#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nconst productSearchSchema = z.object({\n  page: fallback(z.number(), 1).default(1),\n  filter: fallback(z.string(), '').default(''),\n  sort: fallback(z.enum(['newest', 'oldest', 'price']), 'newest').default(\n    'newest',\n  ),\n})\n\nexport const Route = createFileRoute('/shop/products/')({  \n  validateSearch: zodValidator({\n    schema: productSearchSchema,\n    input: 'output',\n    output: 'input',\n  }),\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Root Route with Context in TanStack Router\nDESCRIPTION: This example demonstrates how to use the rootRouteWithContext function to create a root route that requires a context type. It also shows how to create a router with the necessary context.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/rootRouteWithContextFunction.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { rootRouteWithContext, createRouter } from '@tanstack/react-router'\nimport { QueryClient } from '@tanstack/react-query'\n\ninterface MyRouterContext {\n  queryClient: QueryClient\n}\n\nconst rootRoute = rootRouteWithContext<MyRouterContext>()({ \n  component: () => <Outlet />,\n  // ... root route options\n})\n\nconst routeTree = rootRoute.addChildren([\n  // ... other routes\n])\n\nconst queryClient = new QueryClient()\n\nconst router = createRouter({\n  routeTree,\n  context: {\n    queryClient,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining ParsedLocation Interface in TanStack Router\nDESCRIPTION: This interface defines the ParsedLocation type which contains properties for handling location data in TanStack Router. It includes the complete URL, pathname, search parameters, state information, hash, and route masking capabilities.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/ParsedLocationType.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ninterface ParsedLocation {\n  href: string\n  pathname: string\n  search: TFullSearchSchema\n  searchStr: string\n  state: ParsedHistoryState\n  hash: string\n  maskedLocation?: ParsedLocation\n  unmaskOnReload?: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Using Path Parameters in Route Loaders\nDESCRIPTION: Demonstrates how to access path parameters in a route loader function via the params property, which extracts values from dynamic segments in the URL path.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/data-loading.md#2025-04-21_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n// routes/posts.$postId.tsx\nexport const Route = createFileRoute('/posts/$postId')({\n  loader: ({ params: { postId } }) => fetchPostById(postId),\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a Server Function with createServerFn\nDESCRIPTION: This code snippet demonstrates how to define a server function using `createServerFn` from the `@tanstack/react-start` package. It defines a simple server function called `getServerTime` that waits for 1 second and returns the current time as an ISO string. The `handler` method is used to define the server-side logic.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/server-functions.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// getServerTime.ts\nimport { createServerFn } from '@tanstack/react-start'\n\nexport const getServerTime = createServerFn().handler(async () => {\n  // Wait for 1 second\n  await new Promise((resolve) => setTimeout(resolve, 1000))\n  // Return the current time\n  return new Date().toISOString()\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring TanStack Router with Custom Wrap Component\nDESCRIPTION: Example of creating a router instance with a custom Wrap component to provide context to the entire router.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/RouterOptionsType.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createRouter } from '@tanstack/react-router'\n\nconst router = createRouter({\n  // ...\n  Wrap: ({ children }) => {\n    return <MyContext.Provider value={myContext}>{children}</MyContext>\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Framework Replacement Configuration in Markdown Frontmatter\nDESCRIPTION: YAML frontmatter configuration that specifies file reference path and framework replacement mapping from 'react' to 'solid'.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/solid/ssr.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nref: docs/start/framework/react/ssr.md\nreplace: { 'react': 'solid' }\n```\n\n----------------------------------------\n\nTITLE: Base64 Search Parameter Serialization\nDESCRIPTION: Implementation of Base64 encoding for URL search parameters with binary encoding/decoding utilities.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/custom-search-param-serialization.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  Router,\n  parseSearchWith,\n  stringifySearchWith,\n} from '@tanstack/react-router'\n\nconst router = createRouter({\n  parseSearch: parseSearchWith((value) => JSON.parse(decodeFromBinary(value))),\n  stringifySearch: stringifySearchWith((value) =>\n    encodeToBinary(JSON.stringify(value)),\n  ),\n})\n\nfunction decodeFromBinary(str: string): string {\n  return decodeURIComponent(\n    Array.prototype.map\n      .call(atob(str), function (c) {\n        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)\n      })\n      .join(''),\n  )\n}\n\nfunction encodeToBinary(str: string): string {\n  return btoa(\n    encodeURIComponent(str).replace(/%([0-9A-F]{2})/g, function (match, p1) {\n      return String.fromCharCode(parseInt(p1, 16))\n    }),\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing a Route Match with useMatch in TanStack Router (TSX)\nDESCRIPTION: This example demonstrates how to use the useMatch hook to access a route match for a specific route. It shows the basic usage of the hook with the 'from' option set to a route path.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/useMatchHook.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useMatch } from '@tanstack/react-router'\n\nfunction Component() {\n  const match = useMatch({ from: '/posts/$postId' })\n  //     ^? strict match for RouteMatch\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Scroll Restoration for Virtualized Window Content\nDESCRIPTION: This example shows how to implement manual scroll restoration for virtualized content within the browser window. It uses the useElementScrollRestoration hook to get the saved scroll position and passes it to the virtualizer as the initial offset.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/scroll-restoration.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Component() {\n  const scrollEntry = useElementScrollRestoration({\n    getElement: () => window,\n  })\n\n  // Let's use TanStack Virtual to virtualize some content!\n  const virtualizer = useWindowVirtualizer({\n    count: 10000,\n    estimateSize: () => 100,\n    // We pass the scrollY from the scroll restoration entry to the virtualizer\n    // as the initial offset\n    initialOffset: scrollEntry?.scrollY,\n  })\n\n  return (\n    <div>\n      {virtualizer.getVirtualItems().map(item => (\n        ...\n      ))}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using stripSearchParams Middleware in TanStack Router\nDESCRIPTION: Shows how to use the stripSearchParams middleware to remove default search parameter values from URLs. Helps in maintaining cleaner URLs by excluding default values.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/search-params.md#2025-04-21_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\nimport { z } from 'zod'\nimport { createFileRoute, stripSearchParams } from '@tanstack/react-router'\nimport { zodValidator } from '@tanstack/zod-adapter'\n\nconst defaultValues = {\n  one: 'abc',\n  two: 'xyz',\n}\n\nconst searchSchema = z.object({\n  one: z.string().default(defaultValues.one),\n  two: z.string().default(defaultValues.two),\n})\n\nexport const Route = createFileRoute('/hello')({\n  validateSearch: zodValidator(searchSchema),\n  search: {\n    middlewares: [stripSearchParams(defaultValues)],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Server Function Using Zod for Validation\nDESCRIPTION: This code snippet demonstrates how to use the Zod validation library to validate input data for a server function.  It defines a Zod schema for a `Person` object and uses it in the `validator` method to parse the input. The parsed data is then passed to the handler.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/server-functions.md#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createServerFn } from '@tanstack/react-start'\n\nimport { z } from 'zod'\n\nconst Person = z.object({\n  name: z.string(),\n})\n\nexport const greet = createServerFn({ method: 'GET' })\n  .validator((person: unknown) => {\n    return Person.parse(person)\n  })\n  .handler(async (ctx) => {\n    return `Hello, ${ctx.data.name}!`\n  })\n\ngreet({\n  data: {\n    name: 'John',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Home Route with TanStack Router\nDESCRIPTION: Implementation of the index route component that renders the home page content. Uses createLazyFileRoute for automatic code splitting in file-based routing.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/quick-start.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createLazyFileRoute } from '@tanstack/react-router'\n\nexport const Route = createLazyFileRoute('/')({  \n  component: Index,\n})\n\nfunction Index() {\n  return (\n    <div className=\"p-2\">\n      <h3>Welcome Home!</h3>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Context in TanStack Router Server Functions\nDESCRIPTION: Demonstrates how to access the web request context within a server function using getWebRequest utility. Shows basic request property access.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/server-functions.md#2025-04-21_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createServerFn } from '@tanstack/react-start'\nimport { getWebRequest } from '@tanstack/react-start/server'\n\nexport const getServerTime = createServerFn({ method: 'GET' }).handler(\n  async () => {\n    const request = getWebRequest()\n\n    console.log(request.method) // GET\n\n    console.log(request.headers.get('User-Agent')) // Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Defining LinkOptions Type in TypeScript for TanStack Router\nDESCRIPTION: This code snippet defines the LinkOptions type, which extends NavigateOptions and includes additional properties for anchor element attributes. It specifies options for targeting, active state, preloading, and disabling links.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/LinkOptionsType.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ntype LinkOptions = NavigateOptions & {\n  target?: HTMLAnchorElement['target']\n  activeOptions?: ActiveOptions\n  preload?: false | 'intent'\n  preloadDelay?: number\n  disabled?: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Specific Route Rendering with useMatch in TanStack Router (TSX)\nDESCRIPTION: This example illustrates how to use the useMatch hook to check if a specific route is currently rendered. It uses the 'shouldThrow' option set to false to handle cases where the route might not be rendered.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/useMatchHook.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useMatch } from '@tanstack/react-router'\n\nfunction Component() {\n  const match = useMatch({ from: '/posts', shouldThrow: false })\n  //     ^? RouteMatch | undefined\n  if (match !== undefined) {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Component Tree Rendering Example - TSX Component Structure\nDESCRIPTION: Shows how the route hierarchy translates into nested React components with props being passed down.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/routing/route-trees.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Blog>\n  <Posts>\n    <Post postId=\"123\" />\n  </Posts>\n</Blog>\n```\n\n----------------------------------------\n\nTITLE: Accessing Router Context in a Route Loader\nDESCRIPTION: Shows how to access the router context within a route loader function. This demonstrates the dependency injection pattern where the fetchPosts function is made available through context.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/data-loading.md#2025-04-21_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createFileRoute } from '@tanstack/react-router'\n\n// Notice how our postsRoute references context to get our fetchPosts function\n// This can be a powerful tool for dependency injection across your router\n// and routes.\nexport const Route = createFileRoute('/posts')({\n  loader: ({ context: { fetchPosts } }) => fetchPosts(),\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Lazy Route Components with lazyRouteComponent in TanStack Router\nDESCRIPTION: Demonstrates how to use the lazyRouteComponent function to create code-split route components in TanStack Router. It shows examples of using both default and named exports.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/lazyRouteComponentFunction.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { lazyRouteComponent } from '@tanstack/react-router'\n\nconst route = createRoute({\n  path: '/posts/$postId',\n  component: lazyRouteComponent(() => import('./Post')), // default export\n})\n\n// or\n\nconst route = createRoute({\n  path: '/posts/$postId',\n  component: lazyRouteComponent(\n    () => import('./Post'),\n    'PostByIdPageComponent', // named export\n  ),\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Status Code with setResponseStatus in TanStack Router\nDESCRIPTION: This snippet demonstrates how to set the HTTP status code of a response using the `setResponseStatus` helper function from `@tanstack/react-start/server` within a TanStack Router API route. It checks if a user is found and sets a 404 status code if not found, otherwise returns the user data. Requires `@tanstack/react-start`, `@tanstack/react-start/api`, and `@tanstack/react-start/server`.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/api-routes.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// routes/api/hello.ts\nimport { json } from '@tanstack/react-start'\nimport { createAPIFileRoute } from '@tanstack/react-start/api'\nimport { setResponseStatus } from '@tanstack/react-start/server'\n\nexport const APIRoute = createAPIFileRoute('/users/$id')({\n  GET: async ({ request, params }) => {\n    const user = await findUser(params.id)\n    if (!user) {\n      setResponseStatus(404)\n      return new Response('User not found')\n    }\n    return json(user)\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Documentation Configuration for TanStack Router\nDESCRIPTION: YAML-style frontmatter configuration for a documentation page that specifies the reference path and replacement instructions.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/solid/guide/data-mutations.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nref: docs/router/framework/react/guide/data-mutations.md\nreplace: { 'react-router': 'solid-router' }\n---\n```\n\n----------------------------------------\n\nTITLE: Matching Multiple Parameters with useMatchRoute in TanStack Router (TSX)\nDESCRIPTION: This snippet demonstrates matching a route with multiple parameters using useMatchRoute. It extracts both 'postId' and 'fooId' from the current route.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/useMatchRouteHook.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// Current location: /posts/123/foo/456\nfunction Component() {\n  const matchRoute = useMatchRoute()\n  const params = matchRoute({ to: '/posts/$postId/foo/$fooId' })\n  //    ^ { postId: '123', fooId: '456' }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Scrollable Areas in TanStack Router\nDESCRIPTION: This snippet demonstrates how to configure TanStack Router to scroll specific nested scrollable areas in addition to the window when navigating between pages. It uses the scrollToTopSelectors option to target elements by CSS selector.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/scroll-restoration.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst router = createRouter({\n  scrollToTopSelectors: ['#main-scrollable-area'],\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Route with FileRoute in React\nDESCRIPTION: Example of using the FileRoute class to create a route for the root path with a loader and component. The loader returns a simple string that is then displayed by the component using the useLoaderData hook.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/FileRouteClass.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FileRoute } from '@tanstack/react-router'\n\nexport const Route = new FileRoute('/').createRoute({\n  loader: () => {\n    return 'Hello World'\n  },\n  component: IndexComponent,\n})\n\nfunction IndexComponent() {\n  const data = Route.useLoaderData()\n  return <div>{data}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Type Narrowing with useBlocker Hook in React\nDESCRIPTION: This example demonstrates type narrowing with the useBlocker hook in a React component. It blocks navigation based on specific route and parameter conditions.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/useBlockerHook.md#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useBlocker } from '@tanstack/react-router'\n\nfunction MyComponent() {\n  const [formIsDirty, setFormIsDirty] = useState(false)\n\n  // block going from editor-1 to /foo/123?hello=world\n  const { proceed, reset, status } = useBlocker({\n    shouldBlockFn: ({ current, next }) => {\n      if (\n        current.routeId === '/editor-1' &&\n        next.fullPath === '/foo/$id' &&\n        next.params.id === '123' &&\n        next.search.hello === 'world'\n      ) {\n        return true\n      }\n      return false\n    },\n    enableBeforeUnload: false,\n    withResolver: true,\n  })\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Root Layout Route in TanStack Start\nDESCRIPTION: This snippet defines the root route that wraps all other routes in the application. It sets up document metadata, provides the HTML document structure, and includes necessary components for head content and scripts.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/learn-the-basics.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// app/routes/__root.tsx\nimport {\n  Outlet,\n  createRootRoute,\n  HeadContent,\n  Scripts,\n} from '@tanstack/react-router'\nimport type { ReactNode } from 'react'\n\nexport const Route = createRootRoute({\n  head: () => ({\n    meta: [\n      {\n        charSet: 'utf-8',\n      },\n      {\n        name: 'viewport',\n        content: 'width=device-width, initial-scale=1',\n      },\n      {\n        title: 'TanStack Start Starter',\n      },\n    ],\n  }),\n  component: RootComponent,\n})\n\nfunction RootComponent() {\n  return (\n    <RootDocument>\n      <Outlet />\n    </RootDocument>\n  )\n}\n\nfunction RootDocument({ children }: Readonly<{ children: ReactNode }>) {\n  return (\n    <html>\n      <head>\n        <HeadContent />\n      </head>\n      <body>\n        {children}\n        <Scripts />\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Layout Route Component Rendering Example in TSX\nDESCRIPTION: Illustrates how layout components wrap their child components in the rendered output for different URLs.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/routing/code-based-routing.md#2025-04-21_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n// URL: /posts\n<PostsLayoutComponent>\n  <PostsIndexComponent />\n</PostsLayoutComponent>\n\n// URL: /posts/create\n<PostsLayoutComponent>\n  <PostsCreateComponent />\n</PostsLayoutComponent>\n```\n\n----------------------------------------\n\nTITLE: Optimizing TypeScript Performance in Route Loaders\nDESCRIPTION: Shows how to optimize TypeScript performance by avoiding unnecessary type inference in route loaders.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/type-safety.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Route = createFileRoute('/posts/$postId/deep')({\n  loader: async ({ context: { queryClient }, params: { postId } }) => {\n    await queryClient.ensureQueryData(postQueryOptions(postId))\n  },\n  component: PostDeepComponent,\n})\n\nfunction PostDeepComponent() {\n  const params = Route.useParams()\n  const data = useSuspenseQuery(postQueryOptions(params.postId))\n\n  return <></>\n}\n```\n\n----------------------------------------\n\nTITLE: Route Matching Process - Non-existent Route\nDESCRIPTION: Shows how the router handles non-existent routes by falling back to the wildcard route.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/routing/route-matching.md#2025-04-21_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nRoot\n    ❌ /\n    ❌ about/us\n    ❌ about\n    ❌ blog\n      - /\n      - new\n      - $postId\n    ✅ *\n```\n\n----------------------------------------\n\nTITLE: useBlocker Hook without Resolver in React\nDESCRIPTION: This example shows how to use the useBlocker hook without a resolver in a React component. It handles the blocking logic directly in the shouldBlockFn.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/useBlockerHook.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useBlocker } from '@tanstack/react-router'\n\nfunction MyComponent() {\n  const [formIsDirty, setFormIsDirty] = useState(false)\n\n  useBlocker({\n    shouldBlockFn: ({ next }) => {\n      if (next.pathname.includes('step/')) {\n        return false\n      }\n\n      const shouldLeave = confirm('Are you sure you want to leave?')\n      return !shouldLeave\n    },\n  })\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Index Route for '/posts' in TanStack Router\nDESCRIPTION: Shows how to implement an index route for the '/posts' path, which is matched when the URL is exactly '/posts'.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/routing/routing-concepts.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// posts.index.tsx\nimport { createFileRoute } from '@tanstack/react-router'\n\n// Note the trailing slash, which is used to target index routes\nexport const Route = createFileRoute('/posts/')({\n  component: PostsIndexComponent,\n})\n\nfunction PostsIndexComponent() {\n  return <div>Please select a post!</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Client Entry Point with TanStack Start\nDESCRIPTION: This code sets up the client-side entry point that hydrates the React application after server-side rendering. It creates a router instance and uses the StartClient component to begin client-side routing.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/learn-the-basics.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// app/client.tsx\nimport { hydrateRoot } from 'react-dom/client'\nimport { StartClient } from '@tanstack/react-start'\nimport { createRouter } from './router'\n\nconst router = createRouter()\n\nhydrateRoot(document, <StartClient router={router} />)\n```\n\n----------------------------------------\n\nTITLE: Configuring SSR Handler in TanStack Router\nDESCRIPTION: Creates a server-side rendering handler using TanStack Start. The handler is configured with a router creation function and router manifest, enabling streaming of rendered HTML to the client. This setup is essential for implementing SSR functionality in TanStack applications.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/ssr.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  createStartHandler,\n  defaultStreamHandler,\n} from '@tanstack/react-start/server'\nimport { getRouterManifest } from '@tanstack/react-start/router-manifest'\n\nimport { createRouter } from './router'\n\nexport default createStartHandler({\n  createRouter,\n  getRouterManifest,\n})(defaultStreamHandler)\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Link Component with Chakra UI\nDESCRIPTION: Demonstrates how to create a custom Link component using Chakra UI's Link component with TanStack Router. The custom component adds styling and sets the preload behavior to 'intent'.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/custom-link.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react'\nimport { createLink, LinkComponent } from '@tanstack/react-router'\nimport { Link } from '@chakra-ui/react'\n\ninterface ChakraLinkProps\n  extends Omit<React.ComponentPropsWithoutRef<typeof Link>, 'href'> {\n  // Add any additional props you want to pass to the link\n}\n\nconst ChakraLinkComponent = React.forwardRef<\n  HTMLAnchorElement,\n  ChakraLinkProps\n>((props, ref) => {\n  return <Link ref={ref} {...props} />\n})\n\nconst CreatedLinkComponent = createLink(ChakraLinkComponent)\n\nexport const CustomLink: LinkComponent<typeof ChakraLinkComponent> = (\n  props,\n) => {\n  return (\n    <CreatedLinkComponent\n      textDecoration={'underline'}\n      _hover={{ textDecoration: 'none' }}\n      _focus={{ textDecoration: 'none' }}\n      preload={'intent'}\n      {...props}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RouteMatch Interface Type in TypeScript for TanStack Router\nDESCRIPTION: This interface defines the RouteMatch type which represents a route match in TanStack Router. It includes properties for route identification, parameters, status tracking, error handling, and navigation context information.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/RouteMatchType.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ninterface RouteMatch {\n  id: string\n  routeId: string\n  pathname: string\n  params: Route['allParams']\n  status: 'pending' | 'success' | 'error'\n  isFetching: boolean\n  showPending: boolean\n  error: unknown\n  paramsError: unknown\n  searchError: unknown\n  updatedAt: number\n  loadPromise?: Promise<void>\n  loaderData?: Route['loaderData']\n  context: Route['allContext']\n  search: Route['fullSearchSchema']\n  fetchedAt: number\n  abortController: AbortController\n  cause: 'enter' | 'stay'\n}\n```\n\n----------------------------------------\n\nTITLE: Default TanStack Router Plugin Configuration\nDESCRIPTION: Default configuration options for the TanStack Router Plugin when used with Vite for file-based routing. These settings define the routes directory, generated route tree file location, and other options.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/routing/installation-with-vite.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"routesDirectory\": \"./src/routes\",\n  \"generatedRouteTree\": \"./src/routeTree.gen.ts\",\n  \"routeFileIgnorePrefix\": \"-\",\n  \"quoteStyle\": \"single\"\n}\n```\n\n----------------------------------------\n\nTITLE: Matching with Full Params using useMatchRoute in TanStack Router (TSX)\nDESCRIPTION: This example demonstrates using useMatchRoute with all parameters provided. It shows a successful match when all params match the current route.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/useMatchRouteHook.md#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n// Current location: /posts/123/foo/456\nfunction Component() {\n  const matchRoute = useMatchRoute()\n  const params = matchRoute({\n    to: '/posts/$postId/foo/$fooId',\n    params: { postId: '123', fooId: '456' },\n  })\n  //    ^ { postId: '123', fooId: '456' }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TanStack Router with Custom InnerWrap Component\nDESCRIPTION: Example of creating a router instance with a custom InnerWrap component to provide context to the inner contents of the router, with access to router context and hooks.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/RouterOptionsType.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createRouter } from '@tanstack/react-router'\n\nconst router = createRouter({\n  // ...\n  InnerWrap: ({ children }) => {\n    const routerState = useRouterState()\n\n    return (\n      <MyContext.Provider value={myContext}>\n        {children}\n      </MyContext>\n    )\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Search Parameters in TanStack Router\nDESCRIPTION: Demonstrates how to access search parameters in a route using the useSearch hook. This snippet showcases the structural sharing optimization for URL state.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/render-optimizations.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst search = Route.useSearch()\n```\n\n----------------------------------------\n\nTITLE: Further Optimizing with Narrowed LinkProps Type Parameters\nDESCRIPTION: An enhanced approach that narrows the LinkProps type with specific generic parameters including the router type and route path, resulting in even faster type checking by creating a more precise type.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/type-safety.md#2025-04-21_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nconst props = {\n  to: '/posts/',\n} as const satisfies LinkProps<RegisteredRouter, string '/posts/'>\n\nreturn (\n  <Link {...props}>\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Automatic Code Splitting in Vite for TanStack Router\nDESCRIPTION: This snippet shows how to enable automatic code splitting in the Vite configuration for TanStack Router. It demonstrates setting up the TanStackRouterVite plugin with the autoCodeSplitting option.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/code-splitting.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// vite.config.ts\nimport { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\nimport { TanStackRouterVite } from '@tanstack/router-plugin/vite'\n\nexport default defineConfig({\n  plugins: [\n    TanStackRouterVite({\n      // ...\n      autoCodeSplitting: true,\n    }),\n    react(), // Make sure to add this plugin after the TanStack Router Bundler plugin\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Route Path Prefixing with Virtual Routes\nDESCRIPTION: Demonstrates how to define virtual routes with common path prefixes for child routes.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/routing/virtual-file-routes.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { route } from '@tanstack/virtual-file-routes'\n\nexport const routes = rootRoute('root.tsx', [\n  route('/hello', [\n    route('/world', 'world.tsx'), // full path will be \"/hello/world\"\n    route('/universe', 'universe.tsx'), // full path will be \"/hello/universe\"\n  ]),\n])\n```\n\n----------------------------------------\n\nTITLE: Type Definition for Default Remount Dependencies in TanStack Router\nDESCRIPTION: Defines the type signature for the defaultRemountDeps property, which controls when route components should remount after navigation. It includes the RemountDepsOptions interface that provides access to route ID, search parameters, URL params, and loader dependencies.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/RouterOptionsType.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\ntype defaultRemountDeps = (opts: RemountDepsOptions) => any\n\ninterface RemountDepsOptions<\n  in out TRouteId,\n  in out TFullSearchSchema,\n  in out TAllParams,\n  in out TLoaderDeps,\n> {\n  routeId: TRouteId\n  search: TFullSearchSchema\n  params: TAllParams\n  loaderDeps: TLoaderDeps\n}\n```\n\n----------------------------------------\n\nTITLE: Using isRedirect Function in TanStack Router\nDESCRIPTION: Example demonstrating how to use the isRedirect function to check if an object is a redirect object. The function accepts an unknown input and returns a boolean value indicating whether the object is a redirect object.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/isRedirectFunction.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { isRedirect } from '@tanstack/react-router'\n\nfunction somewhere(obj: unknown) {\n  if (isRedirect(obj)) {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Blocking with useBlocker Hook in React\nDESCRIPTION: This example demonstrates conditional blocking using the useBlocker hook in a React component. It blocks navigation except for paths containing 'step/'.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/useBlockerHook.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useBlocker } from '@tanstack/react-router'\n\nfunction MyComponent() {\n  const { proceed, reset, status } = useBlocker({\n    shouldBlockFn: ({ next }) => {\n      return !next.pathname.includes('step/')\n    },\n    withResolver: true,\n  })\n\n  // ...\n\n  return (\n    <>\n      {/* ... */}\n      {status === 'blocked' && (\n        <div>\n          <p>Are you sure you want to leave?</p>\n          <button onClick={proceed}>Yes</button>\n          <button onClick={reset}>No</button>\n        </div>\n      )}\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Property Order in TanStack Router createFileRoute (TSX)\nDESCRIPTION: An example showing the correct property ordering in createFileRoute where beforeLoad appears before loader, preserving proper type inference for the context property.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/eslint/create-route-property-order.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n/* eslint \"@tanstack/router/create-route-property-order\": \"warn\" */\nimport { createFileRoute } from '@tanstack/react-router'\n\nexport const Route = createFileRoute('/foo/bar/$id')({\n  beforeLoad: () => ({hello: 'world'}),\n  loader: async ({context}) => {\n    await context.queryClient.ensureQueryData(getQueryOptions(context.hello)),\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining the Root Route in TypeScript\nDESCRIPTION: This snippet illustrates the definition of the root route of the application using TanStack Router, including meta data setup and rendering of nested routes.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/solid/learn-the-basics.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// app/routes/__root.tsx\nimport {\n  Outlet,\n  createRootRoute,\n  HeadContent,\n  Scripts,\n} from '@tanstack/solid-router'\n\nexport const Route = createRootRoute({\n  head: () => ({\n    meta: [\n      {\n        charSet: 'utf-8',\n      },\n      {\n        name: 'viewport',\n        content: 'width=device-width, initial-scale=1',\n      },\n      {\n        title: 'TanStack Start Starter',\n      },\n    ],\n  }),\n  component: RootComponent,\n})\n\nfunction RootComponent() {\n  return <Outlet />\n}\n```\n\n----------------------------------------\n\nTITLE: JSURL2 Library Integration\nDESCRIPTION: Implementation using the JSURL2 library for URL compression while maintaining readability.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/custom-search-param-serialization.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  Router,\n  parseSearchWith,\n  stringifySearchWith,\n} from '@tanstack/react-router'\nimport { parse, stringify } from 'jsurl2'\n\nconst router = createRouter({\n  // ...\n  parseSearch: parseSearchWith(parse),\n  stringifySearch: stringifySearchWith(stringify),\n})\n```\n\n----------------------------------------\n\nTITLE: Disabling Stale-While-Revalidate Caching Globally\nDESCRIPTION: Demonstrates how to turn off stale-while-revalidate caching for all routes by setting defaultStaleTime to Infinity at the router level, ensuring no routes automatically reload data in the background.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/data-loading.md#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst router = createRouter({\n  routeTree,\n  defaultStaleTime: Infinity,\n})\n```\n\n----------------------------------------\n\nTITLE: FormData Parameter Handling in TanStack Router\nDESCRIPTION: Implements a server function that processes FormData parameters with validation and form submission handling. Includes form component implementation with FormData processing.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/server-functions.md#2025-04-21_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createServerFn } from '@tanstack/react-start'\n\nexport const greetUser = createServerFn({ method: 'POST' })\n  .validator((data) => {\n    if (!(data instanceof FormData)) {\n      throw new Error('Invalid form data')\n    }\n    const name = data.get('name')\n    const age = data.get('age')\n\n    if (!name || !age) {\n      throw new Error('Name and age are required')\n    }\n\n    return {\n      name: name.toString(),\n      age: parseInt(age.toString(), 10),\n    }\n  })\n  .handler(async ({ data: { name, age } }) => {\n    return `Hello, ${name}! You are ${age} years old.`\n  })\n\n// Usage\nfunction Test() {\n  return (\n    <form\n      onSubmit={async (event) => {\n        event.preventDefault()\n        const formData = new FormData(event.currentTarget)\n        const response = await greetUser({ data: formData })\n        console.log(response)\n      }}\n    >\n      <input name=\"name\" />\n      <input name=\"age\" />\n      <button type=\"submit\">Submit</button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NavigateOptions Type in TanStack Router\nDESCRIPTION: Type definition for NavigateOptions, which extends ToOptions and includes properties for controlling navigation behavior such as history replacement, scroll management, view transitions, and more.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/NavigateOptionsType.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ntype NavigateOptions = ToOptions & {\n  replace?: boolean\n  resetScroll?: boolean\n  hashScrollIntoView?: boolean | ScrollIntoViewOptions\n  viewTransition?: boolean | ViewTransitionOptions\n  ignoreBlocker?: boolean\n  reloadDocument?: boolean\n  href?: string\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Inactive Links in TanStack Router with TSX\nDESCRIPTION: Shows an example of a link that would not be active when on '/blog/post/my-first-blog-post'. This link points to a different blog post.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/navigation.md#2025-04-21_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nconst link4 = (\n  <Link to=\"/blog/post/$postId\" params={{ postId: 'my-second-blog-post' }}>\n    Blog Post\n  </Link>\n)\n```\n\n----------------------------------------\n\nTITLE: Not Found Error Handling in Server Function\nDESCRIPTION: Example of implementing not found error handling in a server function and route loader.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/server-functions.md#2025-04-21_snippet_26\n\nLANGUAGE: tsx\nCODE:\n```\nimport { notFound } from '@tanstack/react-router'\nimport { createServerFn } from '@tanstack/react-start'\n\nconst getStuff = createServerFn({ method: 'GET' }).handler(async () => {\n  // Randomly return a not found error\n  if (Math.random() < 0.5) {\n    throw notFound()\n  }\n\n  // Or return some stuff\n  return {\n    stuff: 'stuff',\n  }\n})\n\nexport const Route = createFileRoute('/stuff')({\n  loader: async () => {\n    const stuff = await getStuff()\n\n    return {\n      stuff,\n    }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Global Middleware Registration\nDESCRIPTION: Demonstrates registering global middleware that runs automatically for every server function in the application, typically used for cross-cutting concerns like authentication.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/middleware.md#2025-04-21_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n// app/global-middleware.ts\nimport { registerGlobalMiddleware } from '@tanstack/react-start'\nimport { authMiddleware } from './middleware'\n\nregisterGlobalMiddleware({\n  middleware: [authMiddleware],\n})\n```\n\n----------------------------------------\n\nTITLE: Importing and Using NotFoundRoute Class in TanStack Router\nDESCRIPTION: This example demonstrates how to create a NotFoundRoute instance and pass it to the createRouter function as the notFoundRoute option. The NotFoundRoute is configured with a parent route and a component that renders when a route is not found.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/NotFoundRouteClass.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NotFoundRoute, createRouter } from '@tanstack/react-router'\nimport { Route as rootRoute } from './routes/__root'\nimport { routeTree } from './routeTree.gen'\n\nconst notFoundRoute = new NotFoundRoute({\n  getParentRoute: () => rootRoute,\n  component: () => <div>Not found!!!</div>,\n})\n\nconst router = createRouter({\n  routeTree,\n  notFoundRoute,\n})\n\n// ... other code\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Navigation Hook in TypeScript with TanStack Router\nDESCRIPTION: Defines a custom hook useConditionalNavigate that provides controlled navigation functionality with enable/disable capabilities. The hook returns methods to enable, disable, and trigger navigation based on an enabled state flag.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/solid/guide/type-utilities.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport interface UseConditionalNavigateResult {\n  enable: () => void\n  disable: () => void\n  navigate: () => void\n}\n\nexport function useConditionalNavigate<\n  TRouter extends RegisteredRouter,\n  TOptions,\n>(\n  navigateOptions: ValidateNavigateOptions<TRouter, TOptions>,\n): UseConditionalNavigateResult\nexport function useConditionalNavigate(\n  navigateOptions: ValidateNavigateOptions,\n): UseConditionalNavigateResult {\n  const [enabled, setEnabled] = createSignal(false)\n  const navigate = useNavigate()\n  return {\n    enable: () => setEnabled(true),\n    disable: () => setEnabled(false),\n    navigate: () => {\n      if (enabled) {\n        navigate(navigateOptions)\n      }\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LinkProps Type in TanStack Router\nDESCRIPTION: This code snippet defines the LinkProps type which extends ActiveLinkOptions and React.AnchorHTMLAttributes. It adds a children prop that can either be a React node or a function that returns a React node based on whether the link is active.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/LinkPropsType.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ntype LinkProps = ActiveLinkOptions &\n  Omit<React.AnchorHTMLAttributes<HTMLAnchorElement>, 'children'> & {\n    children?:\n      | React.ReactNode\n      | ((state: { isActive: boolean }) => React.ReactNode)\n  }\n```\n\n----------------------------------------\n\nTITLE: Accessing Search Params in Route Components\nDESCRIPTION: Example of using the useSearch hook to access validated search parameters within a route component.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/search-params.md#2025-04-21_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n// /routes/shop.products.tsx\n\nexport const Route = createFileRoute('/shop/products')({  \n  validateSearch: productSearchSchema,\n})\n\nconst ProductList = () => {\n  const { page, filter, sort } = Route.useSearch()\n\n  return <div>...</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint with custom rules using flat config\nDESCRIPTION: Example of how to set up the TanStack Router ESLint plugin with custom rule configuration using the new flat config format in eslint.config.js.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/eslint/eslint-plugin-router.md#2025-04-21_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n// eslint.config.js\nimport pluginRouter from '@tanstack/eslint-plugin-router'\n\nexport default [\n  {\n    plugins: {\n      '@tanstack/router': pluginRouter,\n    },\n    rules: {\n      '@tanstack/router/create-route-property-order': 'error',\n    },\n  },\n  // Any other config...\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Lazy Loading with createLazyRoute in TanStack Router\nDESCRIPTION: Example demonstrating how to use createLazyRoute to define a lazy-loaded route component and integrate it with the router's route tree.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/createLazyRouteFunction.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// src/route-pages/index.tsx\nimport { createLazyRoute } from '@tanstack/react-router'\n\nexport const Route = createLazyRoute('/')({ \n  component: IndexComponent,\n})\n\nfunction IndexComponent() {\n  const data = Route.useLoaderData()\n  return <div>{data}</div>\n}\n\n// src/routeTree.tsx\nimport {\n  createRootRouteWithContext,\n  createRoute,\n  Outlet,\n} from '@tanstack/react-router'\n\ninterface MyRouterContext {\n  foo: string\n}\n\nconst rootRoute = createRootRouteWithContext<MyRouterContext>()({ \n  component: () => <Outlet />,\n})\n\nconst indexRoute = createRoute({\n  getParentRoute: () => rootRoute,\n  path: '/',\n}).lazy(() => import('./route-pages/index').then((d) => d.Route))\n\nexport const routeTree = rootRoute.addChildren([indexRoute])\n```\n\n----------------------------------------\n\nTITLE: Extending HistoryState Interface in TypeScript for TanStack Router\nDESCRIPTION: This code snippet shows how to extend the HistoryState interface from @tanstack/react-router to add custom properties. It demonstrates adding both required and optional properties to the interface.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/historyStateInterface.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// src/main.tsx\ndeclare module '@tanstack/react-router' {\n  // ...\n\n  interface HistoryState {\n    additionalRequiredProperty: number\n    additionalProperty?: string\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Component-Based Custom UI for Navigation Blocking in React with TanStack Router\nDESCRIPTION: This snippet demonstrates how to use the Block component to create a custom UI for navigation blocking. It utilizes render props to access blocking status and control functions.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/navigation-blocking.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Block } from '@tanstack/react-router'\n\nfunction MyComponent() {\n  const [formIsDirty, setFormIsDirty] = useState(false)\n\n  return (\n    <Block shouldBlockFn={() => formIsDirty} withResolver>\n      {({ status, proceed, reset }) => (\n        <>\n          {/* ... */}\n          {status === 'blocked' && (\n            <div>\n              <p>Are you sure you want to leave?</p>\n              <button onClick={proceed}>Yes</button>\n              <button onClick={reset}>No</button>\n            </div>\n          )}\n        </>\n      )}\n    </Block>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MatchRouteOptions Interface in TypeScript\nDESCRIPTION: The MatchRouteOptions interface specifies configuration options for route matching in TanStack Router. It includes boolean flags for pending location matching, case sensitivity, search parameter inclusion, and fuzzy path matching.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/MatchRouteOptionsType.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ninterface MatchRouteOptions {\n  pending?: boolean\n  caseSensitive?: boolean\n  includeSearch?: boolean\n  fuzzy?: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pathless Layout Routes in TSX\nDESCRIPTION: Demonstrates how to create pathless layout routes using an id instead of a path, allowing for route organization without URL path segments.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/routing/code-based-routing.md#2025-04-21_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nconst pathlessLayoutRoute = createRoute({\n  getParentRoute: () => rootRoute,\n  id: 'pathlessLayout',\n  component: PathlessLayoutComponent,\n})\n\nfunction PathlessLayoutComponent() {\n  return (\n    <div>\n      <h1>Pathless Layout</h1>\n      <Outlet />\n    </div>\n  )\n}\n\nconst pathlessLayoutARoute = createRoute({\n  getParentRoute: () => pathlessLayoutRoute,\n  path: 'route-a',\n})\n\nconst pathlessLayoutBRoute = createRoute({\n  getParentRoute: () => pathlessLayoutRoute,\n  path: 'route-b',\n})\n\nconst routeTree = rootRoute.addChildren([\n  // The pathless layout route has no path, only an id\n  // So its children will be nested under the pathless layout route\n  pathlessLayoutRoute.addChildren([pathlessLayoutARoute, pathlessLayoutBRoute]),\n])\n```\n\n----------------------------------------\n\nTITLE: Defining NotFoundError Type in TypeScript for TanStack Router\nDESCRIPTION: This code snippet defines the NotFoundError type used in TanStack Router. It specifies optional properties for customizing the behavior of not-found errors, including global handling, custom data, throwing behavior, and route ID specification.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/NotFoundErrorType.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport type NotFoundError = {\n  global?: boolean\n  data?: any\n  throw?: boolean\n  routeId?: string\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useRouteContext Hook in TanStack Router\nDESCRIPTION: Type-safe version of useRouteContext hook pre-bound to a specific route ID. Allows selection of specific context data.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/RouteApiType.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n  useRouteContext<TSelected = TAllContext>(opts?: {\n    select?: (search: TAllContext) => TSelected\n  }): TSelected\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Server Function\nDESCRIPTION: Demonstrates error handling pattern in server functions and route loaders.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/server-functions.md#2025-04-21_snippet_27\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createServerFn } from '@tanstack/react-start'\n\nexport const doStuff = createServerFn({ method: 'GET' }).handler(async () => {\n  undefined.foo()\n})\n\nexport const Route = createFileRoute('/stuff')({\n  loader: async () => {\n    try {\n      await doStuff()\n    } catch (error) {\n      // Handle the error:\n      // error === {\n      //   message: \"Cannot read property 'foo' of undefined\",\n      //   stack: \"TypeError: Cannot read property 'foo' of undefined\\n    at doStuff (file:///path/to/file.ts:3:3)\"\n    }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Error Handling in TanStack Router Server Functions\nDESCRIPTION: Shows how to throw and handle errors in server functions with error serialization and client-side handling.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/server-functions.md#2025-04-21_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createServerFn } from '@tanstack/react-start'\n\nexport const doStuff = createServerFn({ method: 'GET' }).handler(async () => {\n  throw new Error('Something went wrong!')\n})\n\n// Usage\nfunction Test() {\n  try {\n    await doStuff()\n  } catch (error) {\n    console.error(error)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Parameters\nDESCRIPTION: Example of accessing a specific parameter from the params object in TanStack Router\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/migrate-from-react-router.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nparams.orderId\n```\n\n----------------------------------------\n\nTITLE: Navigation with Link Component in TanStack Router\nDESCRIPTION: This snippet shows how to implement navigation between routes using the Link component from TanStack Router. It creates a simple link that navigates to the '/about' route when clicked.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/learn-the-basics.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Link } from '@tanstack/react-router'\n\nfunction Home() {\n  return <Link to=\"/about\">About</Link>\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Scroll Restoration Key Selection\nDESCRIPTION: This code shows how to conditionally determine the scroll restoration key based on the pathname. For specific paths, it uses the pathname itself as the key, while for other paths it falls back to using the default history key.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/scroll-restoration.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createRouter } from '@tanstack/react-router'\n\nconst router = createRouter({\n  getScrollRestorationKey: (location) => {\n    const paths = ['/', '/chat']\n    return paths.includes(location.pathname)\n      ? location.pathname\n      : location.state.key!\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Integrating Devtools in Root Route\nDESCRIPTION: Example of adding devtools inside the RouterProvider through root route configuration.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/devtools.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst rootRoute = createRootRoute({\n  component: () => (\n    <>\n      <Outlet />\n      <TanStackRouterDevtools />\n    </>\n  ),\n})\n\nconst routeTree = rootRoute.addChildren([\n  // ... other routes\n])\n\nconst router = createRouter({\n  routeTree,\n})\n\nfunction App() {\n  return <RouterProvider router={router} />\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Manual Scroll Restoration with React and TanStack Virtual\nDESCRIPTION: This code snippet shows a React component that implements manual scroll restoration for a virtualized list. It uses the useElementScrollRestoration hook from TanStack Router and createVirtualizer from TanStack Virtual. The component assigns a unique scroll restoration ID to the virtualized content and initializes the virtualizer with the restored scroll position.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/solid/guide/scroll-restoration.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Component() {\n  // We need a unique ID for manual scroll restoration on a specific element\n  // It should be as unique as possible for this element across your app\n  const scrollRestorationId = 'myVirtualizedContent'\n\n  // We use that ID to get the scroll entry for this element\n  const scrollEntry = useElementScrollRestoration({\n    id: scrollRestorationId,\n  })\n\n  // Let's use TanStack Virtual to virtualize some content!\n  let virtualizerParentRef: any\n  const virtualizer = createVirtualizer({\n    count: 10000,\n    getScrollElement: () => virtualizerParentRef,\n    estimateSize: () => 100,\n    // We pass the scrollY from the scroll restoration entry to the virtualizer\n    // as the initial offset\n    initialOffset: scrollEntry?.scrollY,\n  })\n\n  return (\n    <div\n      ref={virtualizerParentRef}\n      // We pass the scroll restoration ID to the element\n      // as a custom attribute that will get picked up by the\n      // scroll restoration watcher\n      data-scroll-restoration-id={scrollRestorationId}\n      class=\"flex-1 border rounded-lg overflow-auto relative\"\n    >\n      ...\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Solid.js with TanStack Router\nDESCRIPTION: TypeScript compiler options configuration required for using TanStack Router with Solid.js. Sets the JSX handling and import source for proper TypeScript compilation.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/solid/routing/installation-with-router-cli.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"jsx\": \"preserve\",\n    \"jsxImportSource\": \"solid-js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Path Parameters in TanStack Router\nDESCRIPTION: Example of creating a dynamic route parameter using the $postId syntax in the filename, which will be accessible as a route parameter when the URL path matches.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/routing/file-naming-conventions.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nposts.$postId.tsx\n```\n\n----------------------------------------\n\nTITLE: Fuzzy Matching with useMatchRoute in TanStack Router (TSX)\nDESCRIPTION: This snippet demonstrates fuzzy matching using the useMatchRoute hook. It matches '/posts/123' against '/posts' with the fuzzy option set to true.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/useMatchRouteHook.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// Current location: /posts/123\nfunction Component() {\n  const matchRoute = useMatchRoute()\n  const params = matchRoute({ to: '/posts', fuzzy: true })\n  //    ^ {}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Default 404 Page in TanStack Router with TSX\nDESCRIPTION: The DefaultGlobalNotFound component renders a simple paragraph element displaying \"Not Found\". This component is used as the default fallback when no routes match and no custom notFoundComponent is provided to the router.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/defaultGlobalNotFoundComponent.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<p>Not Found</p>\n```\n\n----------------------------------------\n\nTITLE: Route Tree Structure Example - After Sorting\nDESCRIPTION: Demonstrates how TanStack Router sorts the route tree based on specificity, from most specific to least specific routes.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/routing/route-matching.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nRoot\n  - /\n  - about/us\n  - about\n  - blog\n    - /\n    - new\n    - $postId\n  - *\n```\n\n----------------------------------------\n\nTITLE: Defining LoaderDeps Function in TypeScript for TanStack Router\nDESCRIPTION: This code snippet defines the type for the loaderDeps function in RouteOptions. It's an optional function that provides additional unique identification for route matches and dependencies for reloading.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/RouteOptionsType.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype loaderDeps = (opts: { search: TFullSearchSchema }) => Record<string, any>\n```\n\n----------------------------------------\n\nTITLE: Using retainSearchParams Middleware in TanStack Router\nDESCRIPTION: Demonstrates the use of the built-in retainSearchParams middleware to maintain specific search parameters across navigation. Simplifies the process of preserving search parameters.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/search-params.md#2025-04-21_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nimport { z } from 'zod'\nimport { createFileRoute, retainSearchParams } from '@tanstack/react-router'\nimport { zodValidator } from '@tanstack/zod-adapter'\n\nconst searchSchema = z.object({\n  rootValue: z.string().optional(),\n})\n\nexport const Route = createRootRoute({\n  validateSearch: zodValidator(searchSchema),\n  search: {\n    middlewares: [retainSearchParams(['rootValue'])],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Up Server Entry Point for TanStack Start\nDESCRIPTION: Server-side entry point that creates a start handler with router configuration and manifest retrieval for server-side rendering.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/solid/build-from-scratch.md#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n// app/ssr.tsx\nimport {\n  createStartHandler,\n  defaultStreamHandler,\n} from '@tanstack/solid-start/server'\nimport { getRouterManifest } from '@tanstack/solid-start/router-manifest'\n\nimport { createRouter } from './router'\n\nexport default createStartHandler({\n  createRouter,\n  getRouterManifest,\n})(defaultStreamHandler)\n```\n\n----------------------------------------\n\nTITLE: Creating an Array of Link Options with linkOptions in TanStack Router (TypeScript)\nDESCRIPTION: This snippet shows how to use linkOptions to create and type-check an array of object literals for Link props, useful for constructing navigation bars.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/link-options.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst options = linkOptions([\n  {\n    to: '/dashboard',\n    label: 'Summary',\n    activeOptions: { exact: true },\n  },\n  {\n    to: '/dashboard/invoices',\n    label: 'Invoices',\n  },\n  {\n    to: '/dashboard/users',\n    label: 'Users',\n  },\n])\n\nfunction DashboardComponent() {\n  return (\n    <>\n      <div className=\"flex items-center border-b\">\n        <h2 className=\"text-xl p-2\">Dashboard</h2>\n      </div>\n\n      <div className=\"flex flex-wrap divide-x\">\n        {options.map((option) => {\n          return (\n            <Link\n              {...option}\n              key={option.to}\n              activeProps={{ className: `font-bold` }}\n              className=\"p-2\"\n            >\n              {option.label}\n            </Link>\n          )\n        })}\n      </div>\n      <hr />\n\n      <Outlet />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Router with Authentication Context in TanStack Router\nDESCRIPTION: This snippet shows how to create a router instance with a context that includes an authentication state. The auth state is initially undefined and will be populated later.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/authenticated-routes.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createRouter } from '@tanstack/react-router'\n\nimport { routeTree } from './routeTree.gen'\n\nexport const router = createRouter({\n  routeTree,\n  context: {\n    auth: undefined!,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple Dynamic Path Parameters in API Routes (TypeScript)\nDESCRIPTION: Shows how to handle multiple dynamic path parameters in a single API route. This example creates a route for user posts with both user ID and post ID parameters.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/api-routes.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// routes/api/users/$id/posts/$postId.ts\nimport { createAPIFileRoute } from '@tanstack/react-start/api'\n\nexport const APIRoute = createAPIFileRoute('/users/$id/posts/$postId')({\n  GET: async ({ params }) => {\n    const { id, postId } = params\n    return new Response(`User ID: ${id}, Post ID: ${postId}`)\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring TanStack Router Plugin with Virtual Routes in Vite\nDESCRIPTION: Configuration example for setting up virtual routes using the TanStack Router plugin in a Vite project.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/routing/virtual-file-routes.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\nimport { TanStackRouterVite } from '@tanstack/router-plugin/vite'\n\nexport default defineConfig({\n  plugins: [\n    TanStackRouterVite({\n      target: 'react',\n      virtualRouteConfig: './routes.ts',\n    }),\n    react(),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Virtual Routes Subtree Configuration\nDESCRIPTION: Shows how to configure virtual routes for a specific subtree using defineVirtualSubtreeConfig.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/routing/virtual-file-routes.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  defineVirtualSubtreeConfig,\n  index,\n  route,\n} from '@tanstack/virtual-file-routes'\n\nexport default defineVirtualSubtreeConfig([\n  index('home.tsx'),\n  route('$id', 'details.tsx'),\n])\n```\n\n----------------------------------------\n\nTITLE: Handling Errors with onError in TanStack Router (TSX)\nDESCRIPTION: Demonstrates how to use the routeOptions.onError function to handle errors that occur during route loading, such as logging the error.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/data-loading.md#2025-04-21_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Route = createFileRoute('/posts')({\\n  loader: () => fetchPosts(),\\n  onError: ({ error }) => {\\n    // Log the error\\n    console.error(error)\\n  },\\n})\n```\n\n----------------------------------------\n\nTITLE: Custom UI with useBlocker Hook in React\nDESCRIPTION: This example shows how to use the useBlocker hook with a custom UI in a React component. It provides a confirmation dialog when navigation is blocked.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/useBlockerHook.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useBlocker } from '@tanstack/react-router'\n\nfunction MyComponent() {\n  const [formIsDirty, setFormIsDirty] = useState(false)\n\n  const { proceed, reset, status, next } = useBlocker({\n    shouldBlockFn: () => formIsDirty,\n    withResolver: true,\n  })\n\n  // ...\n\n  return (\n    <>\n      {/* ... */}\n      {status === 'blocked' && (\n        <div>\n          <p>You are navigating to {next.pathname}</p>\n          <p>Are you sure you want to leave?</p>\n          <button onClick={proceed}>Yes</button>\n          <button onClick={reset}>No</button>\n        </div>\n      )}\n    </>\n}\n```\n\n----------------------------------------\n\nTITLE: Vercel Deployment Configuration\nDESCRIPTION: Configuration setup for deploying a TanStack Start application to Vercel using the server preset configuration.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/hosting.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// app.config.ts\nimport { defineConfig } from '@tanstack/react-start/config'\n\nexport default defineConfig({\n  server: {\n    preset: 'vercel',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Pathless Routes in TanStack Router\nDESCRIPTION: Examples of pathless routes that use the _app prefix to wrap child routes without altering the URL path. These routes can provide shared layouts or logic for their children.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/routing/file-naming-conventions.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n_app.tsx\n```\n\nLANGUAGE: tsx\nCODE:\n```\n_app.a.tsx\n```\n\nLANGUAGE: tsx\nCODE:\n```\n_app.b.tsx\n```\n\n----------------------------------------\n\nTITLE: Passing isActive to Link Children in TanStack Router with TSX\nDESCRIPTION: Shows how to use a function as children for Link to access the isActive state. This allows styling child components based on the link's active state.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/navigation.md#2025-04-21_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nconst link = (\n  <Link to=\"/blog/post\">\n    {({ isActive }) => {\n      return (\n        <>\n          <span>My Blog Post</span>\n          <icon className={isActive ? 'active' : 'inactive'} />\n        </>\n      )\n    }}\n  </Link>\n)\n```\n\n----------------------------------------\n\nTITLE: Complex Selector with Structural Sharing in TanStack Router\nDESCRIPTION: Illustrates a more complex selector that returns an object. This example highlights the potential re-rendering issue and introduces the concept of structural sharing for fine-grained selectors.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/render-optimizations.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst result = Route.useSearch({\n  select: (search) => {\n    return {\n      foo: search.foo,\n      hello: `hello ${search.foo}`,\n    }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with npm or yarn\nDESCRIPTION: Commands to install project dependencies using either npm or yarn package managers.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/react/with-trpc/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Implementing useSearch Hook in TanStack Router\nDESCRIPTION: Type-safe version of useSearch hook pre-bound to a specific route ID. Supports data selection and structural sharing optimization.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/RouteApiType.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n  useSearch<TSelected = TFullSearchSchema>(opts?: {\n    select?: (search: TFullSearchSchema) => TSelected\n  }): TSelected\n```\n\n----------------------------------------\n\nTITLE: Defining Route Options Type for createLazyRoute in TanStack Router\nDESCRIPTION: Code showing the TypeScript type definition for the options that createLazyRoute can accept, limited to component-related properties.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/createLazyRouteFunction.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nPick<\n  RouteOptions,\n  'component' | 'pendingComponent' | 'errorComponent' | 'notFoundComponent'\n>\n```\n\n----------------------------------------\n\nTITLE: Creating Client Entry Point for Hydration\nDESCRIPTION: Client-side entry point that hydrates the application using the router configuration and the StartClient component.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/solid/build-from-scratch.md#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n// app/client.tsx\n/// <reference types=\"vinxi/types/client\" />\nimport { hydrate } from 'solid-js/web'\nimport { StartClient } from '@tanstack/solid-start'\nimport { createRouter } from './router'\n\nconst router = createRouter()\n\nhydrate(() => <StartClient router={router} />, document.body)\n```\n\n----------------------------------------\n\nTITLE: Implementing retainSearchParams with Specific Parameters in TanStack Router (TSX)\nDESCRIPTION: This snippet demonstrates how to use retainSearchParams middleware to retain specific search parameters in a root route. It uses Zod for search schema validation and specifies 'rootValue' as the parameter to retain.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/retainSearchParamsFunction.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { z } from 'zod'\nimport { createRootRoute, retainSearchParams } from '@tanstack/react-router'\nimport { zodValidator } from '@tanstack/zod-adapter'\n\nconst searchSchema = z.object({\n  rootValue: z.string().optional(),\n})\n\nexport const Route = createRootRoute({\n  validateSearch: zodValidator(searchSchema),\n  search: {\n    middlewares: [retainSearchParams(['rootValue'])],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Loader Function in TypeScript for TanStack Router\nDESCRIPTION: This code snippet defines the type for the loader function in RouteOptions. It's an optional async function called when a route is matched, responsible for loading data and handling route-specific logic.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/RouteOptionsType.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype loader = (\n  opts: RouteMatch & {\n    search: TFullSearchSchema\n    abortController: AbortController\n    preload: boolean\n    params: TAllParams\n    context: TAllContext\n    location: ParsedLocation\n    navigate: NavigateFn<AnyRoute> // @deprecated\n    buildLocation: BuildLocationFn<AnyRoute>\n    cause: 'enter' | 'stay'\n  },\n) => Promise<TLoaderData> | TLoaderData | void\n```\n\n----------------------------------------\n\nTITLE: Initializing API Handler in TanStack Start (TypeScript)\nDESCRIPTION: Sets up the entry handler for API routes in a TanStack Start project. This code creates the API handler that routes incoming requests to the appropriate API route handler.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/api-routes.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// app/api.ts\nimport {\n  createStartAPIHandler,\n  defaultAPIFileRouteHandler,\n} from '@tanstack/react-start/api'\n\nexport default createStartAPIHandler(defaultAPIFileRouteHandler)\n```\n\n----------------------------------------\n\nTITLE: Cloudflare Pages Configuration\nDESCRIPTION: Configuration setup for deploying a TanStack Start application to Cloudflare Pages with unenv integration.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/hosting.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// app.config.ts\nimport { defineConfig } from '@tanstack/react-start/config'\nimport { cloudflare } from 'unenv'\n\nexport default defineConfig({\n  server: {\n    preset: 'cloudflare-pages',\n    unenv: cloudflare,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining ToOptions and Related Types in TypeScript for TanStack Router\nDESCRIPTION: This code snippet defines the ToOptions type and its related types SearchParamOptions and PathParamOptions. ToOptions is used to describe a router destination with properties for from, to, hash, state, search, and path. It combines SearchParamOptions and PathParamOptions using intersection types.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/ToOptionsType.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype ToOptions = {\n  from?: ValidRoutePath | string\n  to?: ValidRoutePath | string\n  hash?: true | string | ((prev?: string) => string)\n  state?: true | HistoryState | ((prev: HistoryState) => HistoryState)\n} & SearchParamOptions &\n  PathParamOptions\n\ntype SearchParamOptions = {\n  search?: true | TToSearch | ((prev: TFromSearch) => TToSearch)\n}\n\ntype PathParamOptions = {\n  path?: true | Record<string, TPathParam> | ((prev: TFromParams) => TToParams)\n}\n```\n\n----------------------------------------\n\nTITLE: Header Access in TanStack Router Server Functions\nDESCRIPTION: Shows different methods for accessing request headers in server functions using getHeaders and getHeader utilities.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/server-functions.md#2025-04-21_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createServerFn } from '@tanstack/react-start'\nimport { getHeaders, getHeader } from '@tanstack/react-start/server'\n\nexport const getServerTime = createServerFn({ method: 'GET' }).handler(\n  async () => {\n    console.log(getHeaders())\n    // Headers object\n\n    console.log(getHeader('User-Agent')) // User agent string\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Path Aliases in TypeScript\nDESCRIPTION: Configuration for tsconfig.json to enable path aliases. Sets up the baseUrl and maps the ~/* alias to the src directory.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/path-aliases.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"~/*\": [\"./src/*\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pathless Layout Component Rendering Example in TSX\nDESCRIPTION: Shows how pathless layout components wrap their children in the rendered output for different URLs.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/routing/code-based-routing.md#2025-04-21_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n// URL: /route-a\n<PathlessLayoutComponent>\n  <RouteAComponent />\n</PathlessLayoutComponent>\n\n// URL: /route-b\n<PathlessLayoutComponent>\n  <RouteBComponent />\n</PathlessLayoutComponent>\n```\n\n----------------------------------------\n\nTITLE: Organizing Non-Nested Routes with Underscore Prefix in TanStack Router\nDESCRIPTION: Shows the file structure for non-nested routes using the underscore prefix. This structure allows the 'edit' route to not inherit the component tree from its parent routes, rendering only its own component.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/routing/routing-concepts.md#2025-04-21_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nroutes/\n├── posts.tsx\n├── posts.$postId.tsx\n├── posts_.$postId.edit.tsx\n```\n\n----------------------------------------\n\nTITLE: Starting TanStack Router Example Project (Shell)\nDESCRIPTION: Commands to start the TanStack Router example project using either npm or yarn package managers.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/react/authenticated-routes/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm start\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Running TanStack.com Locally\nDESCRIPTION: Commands to navigate to the tanstack.com directory, install dependencies, and start the development server. The app will run on localhost:3000 by default.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/react/start-clerk-basic/README.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncd tanstack.com\npnpm i\n# The app will run on https://localhost:3000 by default\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Link Preload Timeout in TanStack Router with TSX\nDESCRIPTION: Shows how to configure the timeout for intent-based preloading. This example sets a 100ms hover delay before triggering preloading of the route.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/navigation.md#2025-04-21_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nconst link = (\n  <Link to=\"/blog/post/$postId\" preload=\"intent\" preloadTimeout={100}>\n    Blog Post\n  </Link>\n)\n```\n\n----------------------------------------\n\nTITLE: Defining AsyncRouteComponent Type in TypeScript for TanStack Router\nDESCRIPTION: This type definition describes a code-split route component that can be preloaded. It extends SyncRouteComponent and adds an optional preload method that returns a Promise<void>.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/AsyncRouteComponentType.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ntype AsyncRouteComponent<TProps> = SyncRouteComponent<TProps> & {\n  preload?: () => Promise<void>\n}\n```\n\n----------------------------------------\n\nTITLE: Targeting Root Route for Not Found Handling\nDESCRIPTION: Example of throwing not found errors that target the root route using rootRouteId\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/not-found-errors.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { rootRouteId } from '@tanstack/react-router'\\n\\nexport const Route = createFileRoute('/posts/$postId')({\\n  loader: async ({ params: { postId } }) => {\\n    const post = await getPost(postId)\\n    if (!post) throw notFound({ routeId: rootRouteId })\\n    return { post }\\n  },\\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Route with Static Data in TanStack Router\nDESCRIPTION: Demonstrates how to create a route with static data using createFileRoute. Shows implementation of a posts route with custom static data.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/static-route-data.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createFileRoute } from '@tanstack/react-router'\n\nexport const Route = createFileRoute('/posts')({ \n  staticData: {\n    customData: 'Hello!',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Non-Redirected Authentication in TanStack Router\nDESCRIPTION: This snippet shows how to implement non-redirected authentication by conditionally rendering either a login component or the route's content based on the authentication status.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/authenticated-routes.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Route = createFileRoute('/_authenticated')({\n  component: () => {\n    if (!isAuthenticated()) {\n      return <Login />\n    }\n\n    return <Outlet />\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: No-JS Form Submission Handler\nDESCRIPTION: Implementation of server function handling form submissions without JavaScript.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/server-functions.md#2025-04-21_snippet_28\n\nLANGUAGE: ts\nCODE:\n```\nconst yourFn = createServerFn({ method: 'POST' })\n  .validator((formData) => {\n    if (!(formData instanceof FormData)) {\n      throw new Error('Invalid form data')\n    }\n\n    const name = formData.get('name')\n\n    if (!name) {\n      throw new Error('Name is required')\n    }\n\n    return name\n  })\n  .handler(async ({ data: name }) => {\n    console.log(name) // 'John'\n  })\n\nconsole.info(yourFn.url)\n```\n\n----------------------------------------\n\nTITLE: Configuring External Virtual Routes File in TanStack Router CLI\nDESCRIPTION: A simple configuration that specifies the path to an external routes file where virtual routes are defined. This approach is more common and keeps the configuration clean.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/routing/virtual-file-routes.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n// tsr.config.json\n{\n  \"virtualRouteConfig\": \"./routes.ts\"\n}\n```\n\n----------------------------------------\n\nTITLE: Responding with JSON in API Routes (TypeScript)\nDESCRIPTION: Demonstrates how to return a JSON response from an API route. This example manually sets the Content-Type header and stringifies the JSON object.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/api-routes.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// routes/api/hello.ts\nimport { createAPIFileRoute } from '@tanstack/react-start/api'\n\nexport const APIRoute = createAPIFileRoute('/api/hello')({\n  GET: async ({ request }) => {\n    return new Response(JSON.stringify({ message: 'Hello, World!' }), {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing JSON Parameter Server Function in TanStack Router\nDESCRIPTION: Creates a server function that accepts JSON parameters with type validation for a Person object. Demonstrates parameter typing and basic handler implementation.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/server-functions.md#2025-04-21_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createServerFn } from '@tanstack/react-start'\n\ntype Person = {\n  name: string\n  age: number\n}\n\nexport const greet = createServerFn({ method: 'GET' })\n  .validator((data: Person) => data)\n  .handler(async ({ data }) => {\n    return `Hello, ${data.name}! You are ${data.age} years old.`\n  })\n\ngreet({\n  data: {\n    name: 'John',\n    age: 34,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Redirect Type in TypeScript\nDESCRIPTION: TypeScript type definition for the Redirect object that extends NavigateOptions. It includes optional properties for status code, throw behavior, and HTTP headers.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/RedirectType.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Redirect = {\n  statusCode?: number\n  throw?: any\n  headers?: HeadersInit\n} & NavigateOptions\n```\n\n----------------------------------------\n\nTITLE: Rendering Scripts Component in Full-Stack TanStack Router Application\nDESCRIPTION: This snippet demonstrates how to render the Scripts component in the body tag of a full-stack TanStack Router application. It's necessary for rendering body scripts defined in route options.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/document-head-management.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createFileRoute, Scripts } from '@tanstack/react-router'\nexport const Router = createFileRoute('/')({ \n  component: () => (\n    <html>\n      <head />\n      <body>\n        <Outlet />\n        <Scripts />\n      </body>\n    </html>\n  ),\n})\n```\n\n----------------------------------------\n\nTITLE: Active Options Interface in TanStack Router with TSX\nDESCRIPTION: Defines the interface for active link options, controlling how links determine their active state. Options include exact matching, hash inclusion, search params matching, and explicit undefined handling.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/navigation.md#2025-04-21_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nexport interface ActiveOptions {\n  // If true, the link will be active if the current route matches the `to` route path exactly (no children routes)\n  // Defaults to `false`\n  exact?: boolean\n  // If true, the link will only be active if the current URL hash matches the `hash` prop\n  // Defaults to `false`\n  includeHash?: boolean // Defaults to false\n  // If true, the link will only be active if the current URL search params inclusively match the `search` prop\n  // Defaults to `true`\n  includeSearch?: boolean\n  // This modifies the `includeSearch` behavior.\n  // If true,  properties in `search` that are explicitly `undefined` must NOT be present in the current URL search params for the link to be active.\n  // defaults to `false`\n  explicitUndefined?: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Commands to install project dependencies using npm or yarn package managers. Handles initial setup for the TanStack Router project.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/react/kitchen-sink-react-query-file-based/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Package Managers\nDESCRIPTION: Commands for installing project dependencies using either npm or yarn package manager.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/solid/basic-devtools-panel/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: NavigateOptions Interface Definition\nDESCRIPTION: Extended interface for navigation operations that builds upon ToOptions, adding navigation-specific options like replace, resetScroll, and viewTransition.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/navigation.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport type NavigateOptions<\n  TRouteTree extends AnyRoute = AnyRoute,\n  TFrom extends RoutePaths<TRouteTree> | string = string,\n  TTo extends string = '',\n> = ToOptions<TRouteTree, TFrom, TTo> & {\n  replace?: boolean\n  resetScroll?: boolean\n  hashScrollIntoView?: boolean | ScrollIntoViewOptions\n  viewTransition?: boolean | ViewTransitionOptions\n  ignoreBlocker?: boolean\n  reloadDocument?: boolean\n  href?: string\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Memory History and Router in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a memory history instance and use it to initialize a TanStack router. It imports necessary functions, creates a memory history with an initial entry, and passes it to the router constructor.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/history-types.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMemoryHistory, createRouter } from '@tanstack/react-router'\n\nconst memoryHistory = createMemoryHistory({\n  initialEntries: ['/'], // Pass your initial url\n})\n\nconst router = createRouter({ routeTree, history: memoryHistory })\n```\n\n----------------------------------------\n\nTITLE: Using MatchRoute Component with Function Children in React\nDESCRIPTION: Shows how to use the MatchRoute component with a function as children to conditionally render UI based on whether a route is matched. The function receives the match state as a parameter.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/navigation.md#2025-04-21_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Component() {\n  return (\n    <div>\n      <Link to=\"/users\">\n        Users\n        <MatchRoute to=\"/users\" pending>\n          {(match) => {\n            return <Spinner show={match} />\n          }}\n        </MatchRoute>\n      </Link>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic API Route in TanStack Start (TypeScript)\nDESCRIPTION: Creates a simple API route that responds to GET requests. This example demonstrates how to use createAPIFileRoute to define a route and handle HTTP methods.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/api-routes.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// routes/api/hello.ts\nimport { createAPIFileRoute } from '@tanstack/react-start/api'\n\nexport const APIRoute = createAPIFileRoute('/api/hello')({\n  GET: async ({ request }) => {\n    return new Response('Hello, World! from ' + request.url)\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring TanStack Router\nDESCRIPTION: Router configuration file that creates and exports a router function using TanStack Router with specified route tree and scroll restoration.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/build-from-scratch.md#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n// app/router.tsx\nimport { createRouter as createTanStackRouter } from '@tanstack/react-router'\nimport { routeTree } from './routeTree.gen'\n\nexport function createRouter() {\n  const router = createTanStackRouter({\n    routeTree,\n    scrollRestoration: true,\n  })\n\n  return router\n}\n\ndeclare module '@tanstack/react-router' {\n  interface Register {\n    router: ReturnType<typeof createRouter>\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Static Server Function in TanStack Router\nDESCRIPTION: Demonstrates how to create a static server function using createServerFn with the 'static' type option. This function will be executed at build time and its result cached as a static asset.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/static-server-functions.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst myServerFn = createServerFn({ type: 'static' }).handler(async () => {\n  return 'Hello, world!'\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Search Params in TanStack Router with TSX\nDESCRIPTION: Demonstrates how to update a single search parameter while preserving existing ones. This example updates the page number for pagination without changing other parameters.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/navigation.md#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nconst link = (\n  <Link\n    to=\".\"\n    search={(prev) => ({\n      ...prev,\n      page: prev.page + 1,\n    })}\n  >\n    Next Page\n  </Link>\n)\n```\n\n----------------------------------------\n\nTITLE: Customizing Server Function Static Cache in TanStack Router\nDESCRIPTION: Shows how to create and set a custom static cache implementation for server functions. This allows for custom storage, retrieval, and fetching of static data during build time and runtime.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/static-server-functions.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  createServerFnStaticCache,\n  setServerFnStaticCache,\n} from '@tanstack/react-start/client'\n\nconst myCustomStaticCache = createServerFnStaticCache({\n  setItem: async (ctx, data) => {\n    // Store the static data in your custom cache\n  },\n  getItem: async (ctx) => {\n    // Retrieve the static data from your custom cache\n  },\n  fetchItem: async (ctx) => {\n    // During runtime, fetch the static data from your custom cache\n  },\n})\n\nsetServerFnStaticCache(myCustomStaticCache)\n```\n\n----------------------------------------\n\nTITLE: Creating Splat/Catch-All Routes in TanStack Router\nDESCRIPTION: Demonstrates how to create splat/catch-all routes using '$' as the path, which captures all remaining segments into the _splat parameter.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/routing/code-based-routing.md#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nconst filesRoute = createRoute({\n  getParentRoute: () => rootRoute,\n  path: 'files',\n})\n\nconst fileRoute = createRoute({\n  getParentRoute: () => filesRoute,\n  path: '$',\n})\n```\n\n----------------------------------------\n\nTITLE: Router.navigate Method Type Definition in TypeScript\nDESCRIPTION: Type definition for the navigate method of the Router, which navigates to a new location based on the provided NavigateOptions parameter. Returns a Promise that resolves once navigation is complete.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/RouterType.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\ntype navigate = (options: NavigateOptions) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Optimizing TypeScript Performance with Narrowed Route Types\nDESCRIPTION: Demonstrates how to improve TypeScript performance by narrowing route types when using Link components.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/type-safety.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<Link from={Route.fullPath} to=\"..\" search={{page: 0}} />\n<Link from=\"/posts\" to=\"..\" search={{page: 0}} />\n```\n\n----------------------------------------\n\nTITLE: Configuring WorkOS Environment Variables\nDESCRIPTION: Environment variables configuration for WorkOS integration, including client ID, API key, cookie password, and redirect URI settings.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/react/start-workos/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nWORKOS_CLIENT_ID=<YOUR_CLIENT_ID>\nWORKOS_API_KEY=<YOUR_API_SECRET_KEY>\nWORKOS_COOKIE_PASSWORD=<YOUR_COOKIE_PASSWORD>\nWORKOS_REDIRECT_URI=http://localhost:3000/callback\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Running TanStack.com Locally\nDESCRIPTION: Commands to navigate to the TanStack.com directory, install dependencies, and run the app in development mode for local documentation preview.\nSOURCE: https://github.com/tanstack/router/blob/main/e2e/react-start/basic-tsr-config/README.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncd tanstack.com\npnpm i\n# The app will run on https://localhost:3000 by default\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Type-Safe Route Reference Example\nDESCRIPTION: Example showing how to use type-safe route references with the Link component instead of plain strings.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/navigation.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Route as aboutRoute } from './routes/about.tsx'\n\nfunction Comp() {\n  return <Link to={aboutRoute.to}>About</Link>\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Structural Sharing by Default in TanStack Router\nDESCRIPTION: Shows how to enable structural sharing by default in the router options when creating a new router instance.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/render-optimizations.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst router = createRouter({\n  routeTree,\n  defaultStructuralSharing: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Primitive and JSON Response Handling in TanStack Router\nDESCRIPTION: Examples of returning primitive values and JSON objects from server functions. Demonstrates basic return value handling.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/server-functions.md#2025-04-21_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createServerFn } from '@tanstack/react-start'\n\nexport const getServerTime = createServerFn({ method: 'GET' }).handler(\n  async () => {\n    return new Date().toISOString()\n  },\n)\n\nexport const getServerData = createServerFn({ method: 'GET' }).handler(\n  async () => {\n    return {\n      message: 'Hello, World!',\n    }\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Building a Route Tree Manually in TanStack Router\nDESCRIPTION: Demonstrates how to manually construct a route tree by adding child routes to their parent routes using the addChildren method.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/routing/code-based-routing.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n/* prettier-ignore */\nconst routeTree = rootRoute.addChildren([\n  indexRoute,\n  aboutRoute,\n  postsRoute.addChildren([\n    postsIndexRoute,\n    postRoute,\n  ]),\n  postEditorRoute,\n  settingsRoute.addChildren([\n    profileRoute,\n    notificationsRoute,\n  ]),\n  pathlessLayoutRoute.addChildren([\n    pathlessLayoutARoute,\n    pathlessLayoutBRoute,\n  ]),\n  filesRoute.addChildren([\n    fileRoute,\n  ]),\n])\n/* prettier-ignore-end */\n```\n\n----------------------------------------\n\nTITLE: Zipson Library Integration\nDESCRIPTION: Implementation using the Zipson library for JSON compression with binary encoding/decoding.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/custom-search-param-serialization.md#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  Router,\n  parseSearchWith,\n  stringifySearchWith,\n} from '@tanstack/react-router'\nimport { stringify, parse } from 'zipson'\n\nconst router = createRouter({\n  parseSearch: parseSearchWith((value) => parse(decodeFromBinary(value))),\n  stringifySearch: stringifySearchWith((value) =>\n    encodeToBinary(stringify(value)),\n  ),\n})\n\nfunction decodeFromBinary(str: string): string {\n  return decodeURIComponent(\n    Array.prototype.map\n      .call(atob(str), function (c) {\n        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)\n      })\n      .join(''),\n  )\n}\n\nfunction encodeToBinary(str: string): string {\n  return btoa(\n    encodeURIComponent(str).replace(/%([0-9A-F]{2})/g, function (match, p1) {\n      return String.fromCharCode(parseInt(p1, 16))\n    }),\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Removing All Search Parameters in TanStack Router\nDESCRIPTION: This example illustrates how to remove all search parameters by passing `true` to the `stripSearchParams` middleware. It defines a route with optional search parameters that will have all search params stripped from the URL.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/stripSearchParamsFunction.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { z } from 'zod'\nimport { createFileRoute, stripSearchParams } from '@tanstack/react-router'\nimport { zodValidator } from '@tanstack/zod-adapter'\n\nconst searchSchema = z.object({\n  one: z.string().default('abc'),\n  two: z.string().default('xyz'),\n})\n\nexport const Route = createFileRoute('/hello')({\n  validateSearch: zodValidator(searchSchema),\n  search: {\n    // remove all search params\n    middlewares: [stripSearchParams(true)],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining ViewTransitionOptions Interface in TSX for TanStack Router\nDESCRIPTION: The ViewTransitionOptions interface defines the structure for configuring view transitions in TanStack Router. It contains a 'types' property which accepts an array of strings that will be passed to the document.startViewTransition method.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/ViewTransitionOptionsType.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ninterface ViewTransitionOptions {\n  types: Array<string>\n}\n```\n\n----------------------------------------\n\nTITLE: First Route Implementation\nDESCRIPTION: Example route implementation with server functions and counter functionality\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/tanstack-start.md#2025-04-21_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n// app/routes/index.tsx\nimport * as fs from 'fs'\nimport { createFileRoute, useRouter } from '@tanstack/react-router'\nimport { createServerFn } from '@tanstack/react-start'\n\nconst filePath = 'count.txt'\n\nasync function readCount() {\n  return parseInt(\n    await fs.promises.readFile(filePath, 'utf-8').catch(() => '0'),\n  )\n}\n\nconst getCount = createServerFn({\n  method: 'GET',\n}).handler(() => {\n  return readCount()\n})\n\nconst updateCount = createServerFn({ method: 'POST' })\n  .validator((d: number) => d)\n  .handler(async ({ data }) => {\n    const count = await readCount()\n    await fs.promises.writeFile(filePath, `${count + data}`)\n  })\n\nexport const Route = createFileRoute('/')({ \n  component: Home,\n  loader: async () => await getCount(),\n})\n\nfunction Home() {\n  const router = useRouter()\n  const state = Route.useLoaderData()\n\n  return (\n    <button\n      onClick={() => {\n        updateCount({ data: 1 }).then(() => {\n          router.invalidate()\n        })\n      }}\n    >\n      Add 1 to {state}?\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Preload Delay in TanStack Router\nDESCRIPTION: Configures the delay before preloading starts after a user interaction with a Link component. Default is 50ms, this example sets it to 100ms.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/preloading.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createRouter } from '@tanstack/react-router'\n\nconst router = createRouter({\n  // ...\n  defaultPreloadDelay: 100,\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Non-Nested Routes in TSX\nDESCRIPTION: Shows how to create non-nested routes by specifying complete paths from the root, allowing for route organization independent of the URL structure.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/routing/code-based-routing.md#2025-04-21_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n// The posts editor route is nested under the root route\nconst postEditorRoute = createRoute({\n  getParentRoute: () => rootRoute,\n  // The path includes the entire path we need to match\n  path: 'posts/$postId/edit',\n})\n\nconst postsRoute = createRoute({\n  getParentRoute: () => rootRoute,\n  path: 'posts',\n})\n\nconst postRoute = createRoute({\n  getParentRoute: () => postsRoute,\n  path: '$postId',\n})\n\nconst routeTree = rootRoute.addChildren([\n  // The post editor route is nested under the root route\n  postEditorRoute,\n  postsRoute.addChildren([postRoute]),\n])\n```\n\n----------------------------------------\n\nTITLE: Creating a Router with RootRoute in React\nDESCRIPTION: Example of how to create a root route instance, build a route tree, and initialize a router in a React application using TanStack Router.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/RootRouteClass.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RootRoute, createRouter, Outlet } from '@tanstack/react-router'\n\nconst rootRoute = new RootRoute({\n  component: () => <Outlet />,\n  // ... root route options\n})\n\nconst routeTree = rootRoute.addChildren([\n  // ... other routes\n])\n\nconst router = createRouter({\n  routeTree,\n})\n```\n\n----------------------------------------\n\nTITLE: Defining remountDeps Method in TanStack Router\nDESCRIPTION: The remountDeps method is used to determine whether a route component should be remounted after navigation. It takes an options object with route information and returns a value that, if changed, triggers a remount. This example shows how to configure remounting based on params changes.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/RouteOptionsType.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nremountDeps: ({ params }) => params\n```\n\n----------------------------------------\n\nTITLE: Navigating with Path Params Using Link Component (TSX)\nDESCRIPTION: These snippets demonstrate how to navigate to a route with path params using the Link component. It shows both object and function styles for passing params.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/path-params.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Component() {\n  return (\n    <Link to=\"/blog/$postId\" params={{ postId: '123' }}>\n      Post 123\n    </Link>\n  )\n}\n\nfunction Component() {\n  return (\n    <Link to=\"/blog/$postId\" params={(prev) => ({ ...prev, postId: '123' })}>\n      Post 123\n    </Link>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript and React Type Definitions\nDESCRIPTION: Command to install TypeScript and React type definitions as development dependencies.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/build-from-scratch.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm i -D typescript @types/react @types/react-dom\n```\n\n----------------------------------------\n\nTITLE: Installing TanStack Router Plugin for Vite\nDESCRIPTION: Command to install the TanStack Router plugin package for Vite using npm.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/routing/installation-with-vite.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -D @tanstack/router-plugin\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Preload Stale Time\nDESCRIPTION: Sets the default duration for how long preloaded data is considered fresh. After this time, subsequent preload attempts will trigger new data fetching.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/preloading.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createRouter } from '@tanstack/react-router'\n\nconst router = createRouter({\n  // ...\n  defaultPreloadStaleTime: 10_000,\n})\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Router Events in TanStack Router\nDESCRIPTION: Example showing how to subscribe to router events using the router.subscribe method. This demonstrates subscribing to the 'onResolved' event and handling the event payload.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/RouterEventsType.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createRouter } from '@tanstack/react-router'\nimport { routeTree } from './routeTree.gen'\n\nconst router = createRouter({ routeTree })\n\nconst unsub = router.subscribe('onResolved', (evt) => {\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Server Function with Basic Input Validation\nDESCRIPTION: This example shows a server function that validates its input using a custom validator function. It checks if the input is an object and if it has a `name` property that is a string. If the validation fails, it throws an error.  The validated data is then used in the handler.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/server-functions.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createServerFn } from '@tanstack/react-start'\n\ntype Person = {\n  name: string\n}\n\nexport const greet = createServerFn({ method: 'GET' })\n  .validator((person: unknown): Person => {\n    if (typeof person !== 'object' || person === null) {\n      throw new Error('Person must be an object')\n    }\n\n    if ('name' in person && typeof person.name !== 'string') {\n      throw new Error('Person.name must be a string')\n    }\n\n    return person as Person\n  })\n  .handler(async ({ data }) => {\n    return `Hello, ${data.name}!`\n  })\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Route in TanStack Router\nDESCRIPTION: Shows how to create a basic route by providing a path string to the createRoute function.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/routing/code-based-routing.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst aboutRoute = createRoute({\n  getParentRoute: () => rootRoute,\n  path: 'about',\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Embedded Mode Devtools\nDESCRIPTION: Example of using embedded mode devtools with custom styling options.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/devtools.md#2025-04-23_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nimport { TanStackRouterDevtoolsPanel } from '@tanstack/react-router-devtools'\n\nfunction App() {\n  return (\n    <>\n      <Router router={router} />\n      <TanStackRouterDevtoolsPanel\n        router={router}\n        style={styles}\n        className={className}\n      />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Optional Static Data Type Declaration\nDESCRIPTION: Shows how to define optional static data types using the optional property modifier in TypeScript.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/static-route-data.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\ndeclare module '@tanstack/react-router' {\n  interface StaticDataRouteOption {\n    customData?: string\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Function Options\nDESCRIPTION: This code snippet shows how to configure a server function with options such as the HTTP method and response type. The `method` option specifies the HTTP method to use, and the `response` option controls how responses are processed.  The `handler` method then implements the core server function logic.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/server-functions.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createServerFn } from '@tanstack/react-start'\n\nexport const getData = createServerFn({\n  method: 'GET', // HTTP method to use\n  response: 'data', // Response handling mode\n}).handler(async () => {\n  // Function implementation\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Hook-Based Navigation Blocking in TanStack Router with SolidJS\nDESCRIPTION: This example demonstrates how to use the useBlocker hook from TanStack Router to prevent navigation when a form has unsaved changes. It uses a simple confirmation dialog to ask the user if they want to leave the page.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/solid/guide/navigation-blocking.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useBlocker } from '@tanstack/solid-router'\n\nfunction MyComponent() {\n  const [formIsDirty, setFormIsDirty] = createSignal(false)\n\n  useBlocker({\n    shouldBlockFn: () => {\n      if (!formIsDirty()) return false\n\n      const shouldLeave = confirm('Are you sure you want to leave?')\n      return !shouldLeave\n    },\n  })\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using HeadingLink Component with Type-Safe Options\nDESCRIPTION: Shows example usage of the HeadingLink component with type-safe link options for different routing scenarios.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/type-utilities.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<HeadingLink title=\"Posts\" linkOptions={{ to: '/posts' }} />\n<HeadingLink title=\"Post\" linkOptions={{ to: '/posts/$postId', params: {postId: 'postId'} }} />\n```\n\n----------------------------------------\n\nTITLE: Setting Up Client-Side Hydration\nDESCRIPTION: Client entry point that hydrates the React application using the router configuration, enabling client-side routing after initial server request.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/build-from-scratch.md#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n// app/client.tsx\n/// <reference types=\"vinxi/types/client\" />\nimport { hydrateRoot } from 'react-dom/client'\nimport { StartClient } from '@tanstack/react-start'\nimport { createRouter } from './router'\n\nconst router = createRouter()\n\nhydrateRoot(document, <StartClient router={router} />)\n```\n\n----------------------------------------\n\nTITLE: Implementing Not Found Error Handling in Post Loader\nDESCRIPTION: Example of throwing not found errors in a loader function when a resource cannot be found\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/not-found-errors.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Route = createFileRoute('/posts/$postId')({\\n  loader: async ({ params: { postId } }) => {\\n    const post = await getPost(postId)\\n    if (!post) {\\n      throw notFound()\\n      // Alternatively, you can make the notFound function throw:\\n      // notFound({ throw: true })\\n    }\\n    return { post }\\n  },\\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Code-Split Route in TanStack Router\nDESCRIPTION: Demonstrates route configuration with code splitting using lazy loading of components.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/decisions-on-dx.md#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createRoute, lazyRouteComponent } from '@tanstack/react-router'\nimport { postsRoute } from './postsRoute'\n\nexport const postsIndexRoute = createRoute({\n  getParentRoute: () => postsRoute,\n  path: '/',\n  component: lazyRouteComponent(() => import('../page-components/posts/index')),\n})\n```\n\n----------------------------------------\n\nTITLE: Running TanStack Router Development Watcher\nDESCRIPTION: Command to run the development watcher that rebuilds code when changes are detected.\nSOURCE: https://github.com/tanstack/router/blob/main/CONTRIBUTING.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Installing and Starting TanStack Router in Development Mode\nDESCRIPTION: Basic commands to install dependencies and start the TanStack Router application in development mode. This enables rebuilding of assets on file changes.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/react/start-basic-react-query/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm install\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Manual Route Preloading Implementation\nDESCRIPTION: Shows how to manually preload a route using the router's preloadRoute method within a React component.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/preloading.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Component() {\n  const router = useRouter()\n\n  useEffect(() => {\n    async function preload() {\n      try {\n        const matches = await router.preloadRoute({\n          to: postRoute,\n          params: { id: 1 },\n        })\n      } catch (err) {\n        // Failed to preload route\n      }\n    }\n\n    preload()\n  }, [router])\n\n  return <div />\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ActiveLinkOptions Type in TanStack Router\nDESCRIPTION: The ActiveLinkOptions type extends LinkOptions and adds activeProps and inactiveProps properties to control styling of links based on their active state. Both properties can be either React anchor HTML attributes or functions returning such attributes.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/ActiveLinkOptionsType.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ntype ActiveLinkOptions = LinkOptions & {\n  activeProps?:\n    | React.AnchorHTMLAttributes<HTMLAnchorElement>\n    | (() => React.AnchorHTMLAttributes<HTMLAnchorElement>)\n  inactiveProps?:\n    | React.AnchorHTMLAttributes<HTMLAnchorElement>\n    | (() => React.AnchorHTMLAttributes<HTMLAnchorElement>)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HTTP Method Type\nDESCRIPTION: This snippet defines the possible values for the `method` configuration option when creating a server function. It shows that the method can be either `GET` or `POST`. By default, server functions use `GET` if not specified.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/server-functions.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nmethod?: 'GET' | 'POST'\n```\n\n----------------------------------------\n\nTITLE: Creating a Route with Path Param in TanStack Router (TSX)\nDESCRIPTION: This snippet demonstrates how to create a file route with a path param for a post ID. It includes a loader function that fetches the post using the param.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/path-params.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createFileRoute } from '@tanstack/react-router'\n\nexport const Route = createFileRoute('/posts/$postId')({\n  loader: async ({ params }) => {\n    return fetchPost(params.postId)\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using useAwaited Hook in React Component\nDESCRIPTION: Demonstrates how to use the useAwaited hook within a React component to handle a deferred promise from route loader data.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/useAwaitedHook.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAwaited } from '@tanstack/react-router'\n\nfunction Component() {\n  const { deferredPromise } = route.useLoaderData()\n\n  const data = useAwaited({ promise: myDeferredPromise })\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Link Options with Object Literal in TanStack Router (TypeScript)\nDESCRIPTION: This snippet demonstrates the problem with using a simple object literal for Link options, which lacks type checking and can lead to errors.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/link-options.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst dashboardLinkOptions = {\n  to: '/dashboard',\n  search: { search: '' },\n}\n\nfunction DashboardComponent() {\n  return <Link {...dashboardLinkOptions} />\n}\n```\n\n----------------------------------------\n\nTITLE: Creating About Route with TanStack Router\nDESCRIPTION: Implementation of the about route component that renders the about page content. Uses createLazyFileRoute for file-based routing with automatic code splitting.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/quick-start.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createLazyFileRoute } from '@tanstack/react-router'\n\nexport const Route = createLazyFileRoute('/about')({\n  component: About,\n})\n\nfunction About() {\n  return <div className=\"p-2\">Hello from About!</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Default Plugin Configuration\nDESCRIPTION: Default configuration options for TanStack Router Plugin including routes directory, generated route tree path, and other settings.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/routing/installation-with-webpack.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"routesDirectory\": \"./src/routes\",\n  \"generatedRouteTree\": \"./src/routeTree.gen.ts\",\n  \"routeFileIgnorePrefix\": \"-\",\n  \"quoteStyle\": \"single\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Index Routes in TanStack Router\nDESCRIPTION: Demonstrates how to create index routes using a single slash '/' as the path, which will match the parent route's path directly.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/routing/code-based-routing.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst postsRoute = createRoute({\n  getParentRoute: () => rootRoute,\n  path: 'posts',\n})\n\nconst postsIndexRoute = createRoute({\n  getParentRoute: () => postsRoute,\n  // Notice the single slash `/` here\n  path: '/',\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Routes in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a route for the homepage using the createFileRoute function, which incorporates server functions for data fetching and state manipulation.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/solid/learn-the-basics.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// app/routes/index.tsx\nimport * as fs from 'node:fs'\nimport { createFileRoute, useRouter } from '@tanstack/solid-router'\nimport { createServerFn } from '@tanstack/solid-start'\n\nconst filePath = 'count.txt'\n\nasync function readCount() {\n  return parseInt(\n    await fs.promises.readFile(filePath, 'utf-8').catch(() => '0'),\n  )\n}\n\nconst getCount = createServerFn({\n  method: 'GET',\n}).handler(() => {\n  return readCount()\n})\n\nconst updateCount = createServerFn({ method: 'POST' })\n  .validator((d: number) => d)\n  .handler(async ({ data }) => {\n    const count = await readCount()\n    await fs.promises.writeFile(filePath, `${count + data}`)\n  })\n\nexport const Route = createFileRoute('/')({\n  component: Home,\n  loader: async () => await getCount(),\n})\n\nfunction Home() {\n  const router = useRouter()\n  const state = Route.useLoaderData()\n\n  return (\n    <button\n      type=\"button\"\n      onClick={() => {\n        updateCount({ data: 1 }).then(() => {\n          router.invalidate()\n        })\n      }}\n    >\n      Add 1 to {state}?\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React and Development Dependencies\nDESCRIPTION: Commands to install React, React DOM, and development dependencies including Vite React plugin and path resolution.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/build-from-scratch.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm i react react-dom\nnpm i -D @vitejs/plugin-react vite-tsconfig-paths\n```\n\n----------------------------------------\n\nTITLE: Client Context Validation with Zod Middleware\nDESCRIPTION: Demonstrates secure client context transmission with runtime validation using Zod middleware. Validates workspaceId from client context before server processing.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/middleware.md#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { zodValidator } from '@tanstack/zod-adapter'\nimport { z } from 'zod'\n\nconst requestLogger = createMiddleware()\n  .client(async ({ next, context }) => {\n    return next({\n      sendContext: {\n        workspaceId: context.workspaceId,\n      },\n    })\n  })\n  .server(async ({ next, data, context }) => {\n    // Validate the workspace ID before using it\n    const workspaceId = zodValidator(z.number()).parse(context.workspaceId)\n    console.log('Workspace ID:', workspaceId)\n    return next()\n  })\n```\n\n----------------------------------------\n\nTITLE: Inline Virtual Routes Configuration in Vite\nDESCRIPTION: Example of defining virtual routes directly in the Vite configuration using rootRoute.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/routing/virtual-file-routes.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\nimport { TanStackRouterVite } from '@tanstack/router-plugin/vite'\nimport { rootRoute } from '@tanstack/virtual-file-routes'\n\nconst routes = rootRoute('root.tsx', [\n  // ... the rest of your virtual route tree\n])\n\nexport default defineConfig({\n  plugins: [TanStackRouterVite({ virtualRouteConfig: routes }), react()],\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Path Alias Plugin\nDESCRIPTION: NPM command to install the vite-tsconfig-paths plugin as a development dependency.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/path-aliases.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -D vite-tsconfig-paths\n```\n\n----------------------------------------\n\nTITLE: Installing TanStack Router Plugin\nDESCRIPTION: Command to install the TanStack Router plugin package as a development dependency.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/routing/installation-with-webpack.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -D @tanstack/router-plugin\n```\n\n----------------------------------------\n\nTITLE: Accessing Route API in Separate Component File\nDESCRIPTION: Demonstrates how to use getRouteApi to access route APIs in a separate component file, specifically showing how to access loader data with type safety.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/code-splitting.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getRouteApi } from '@tanstack/react-router'\n\nconst route = getRouteApi('/my-route')\n\nexport function MyComponent() {\n  const loaderData = route.useLoaderData()\n  //    ^? { foo: string }\n\n  return <div>...</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Route Masking Structure in TypeScript\nDESCRIPTION: This snippet shows the structure of a masked route location object, illustrating how the actual route is stored in the __tempLocation property of the state object.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/route-masking.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst location = {\n  pathname: '/photos/5',\n  search: '',\n  hash: '',\n  state: {\n    key: 'wesdfs',\n    __tempKey: 'sadfasd',\n    __tempLocation: {\n      pathname: '/photo/5/modal',\n      search: '',\n      hash: '',\n      state: {},\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Static Prerendering in TanStack Router\nDESCRIPTION: Basic configuration setup for static prerendering using Nitro in TanStack Router. Defines prerender routes and crawling behavior in app.config.js.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/static-prerendering.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// app.config.js\n\nimport { defineConfig } from '@tanstack/react-start/config'\n\nexport default defineConfig({\n  server: {\n    prerender: {\n      routes: ['/'],\n      crawlLinks: true,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Middleware Execution Order Demonstration\nDESCRIPTION: Illustrates the order of middleware execution, showing how global and function-specific middleware are chained and executed.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/middleware.md#2025-04-21_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nconst globalMiddleware1 = createMiddleware().server(async ({ next }) => {\n  console.log('globalMiddleware1')\n  return next()\n})\n\nconst globalMiddleware2 = createMiddleware().server(async ({ next }) => {\n  console.log('globalMiddleware2')\n  return next()\n})\n\nregisterGlobalMiddleware({\n  middleware: [globalMiddleware1, globalMiddleware2],\n})\n\nconst a = createMiddleware().server(async ({ next }) => {\n  console.log('a')\n  return next()\n})\n\nconst b = createMiddleware()\n  .middleware([a])\n  .server(async ({ next }) => {\n    console.log('b')\n    return next()\n  })\n\nconst c = createMiddleware()\n  .middleware()\n  .server(async ({ next }) => {\n    console.log('c')\n    return next()\n  })\n\nconst d = createMiddleware()\n  .middleware([b, c])\n  .server(async () => {\n    console.log('d')\n  })\n\nconst fn = createServerFn()\n  .middleware([d])\n  .server(async () => {\n    console.log('fn')\n  })\n```\n\n----------------------------------------\n\nTITLE: Defining ParsedHistoryState Type in TypeScript for TanStack Router\nDESCRIPTION: This code snippet defines the ParsedHistoryState type, which extends the HistoryState type. It adds two properties: an optional 'key' of type string and a required '__TSR_index' of type number. This type is used to represent a parsed state object in the TanStack Router, including the index and unique key of the route.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/ParsedHistoryStateType.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport type ParsedHistoryState = HistoryState & {\n  key?: string\n  __TSR_index: number\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UseLinkPropsOptions Type in TypeScript\nDESCRIPTION: This snippet defines the UseLinkPropsOptions type, which combines ActiveLinkOptions with React's anchor element attributes. It's used to specify the options for the useLinkProps hook.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/useLinkPropsHook.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ntype UseLinkPropsOptions = ActiveLinkOptions &\n  React.AnchorHTMLAttributes<HTMLAnchorElement>\n```\n\n----------------------------------------\n\nTITLE: Invalid Structural Sharing Example in TanStack Router\nDESCRIPTION: Illustrates an invalid use of structural sharing with non-JSON-compatible data, which will result in a TypeScript error.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/render-optimizations.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst result = Route.useSearch({\n  select: (search) => {\n    return {\n      date: new Date(),\n    }\n  },\n  structuralSharing: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Defining RouteMask Type Properties in TypeScript\nDESCRIPTION: The RouteMask type extends ToOptions and includes additional properties for route masking. It requires a routeTree property for mask support and offers an optional unmaskOnReload flag to control mask behavior on page reloads.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/RouteMaskType.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype RouteMask = ToOptions & {\n  options: {\n    routeTree: TRouteTree;\n    unmaskOnReload?: boolean;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Component-Based Navigation Blocking in TanStack Router with SolidJS\nDESCRIPTION: This example shows how to use the Block component from TanStack Router to prevent navigation. It includes two approaches: one with a simple confirmation dialog and another using the withResolver prop for custom UI rendering.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/solid/guide/navigation-blocking.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Block } from '@tanstack/solid-router'\n\nfunction MyComponent() {\n  const [formIsDirty, setFormIsDirty] = createSignal(false)\n\n  return (\n    <Block\n      shouldBlockFn={() => {\n        if (!formIsDirty()) return false\n\n        const shouldLeave = confirm('Are you sure you want to leave?')\n        return !shouldLeave\n      }}\n    />\n  )\n\n  // OR\n\n  return (\n    <Block shouldBlockFn={() => !formIsDirty} withResolver>\n      {({ status, proceed, reset }) => <>{/* ... */}</>}\n    </Block>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Middleware with Server Functions in TanStack Router\nDESCRIPTION: This example shows how to apply middleware to a server function using the createServerFn function. It combines the previously defined logging middleware with a server function handler.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/middleware.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createServerFn } from '@tanstack/react-start'\nimport { loggingMiddleware } from './middleware'\n\nconst fn = createServerFn()\n  .middleware([loggingMiddleware])\n  .handler(async () => {\n    // ...\n  })\n```\n\n----------------------------------------\n\nTITLE: Implementing useNavigate Hook in TanStack Router\nDESCRIPTION: Type-safe version of useNavigate hook pre-bound to a specific route ID. Returns a navigation function.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/RouteApiType.md#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n  useNavigate(): // navigate function\n```\n\n----------------------------------------\n\nTITLE: Matching Pending Route with useMatchRoute in TanStack Router (TSX)\nDESCRIPTION: This example shows how to use useMatchRoute to match against a pending route instead of the current one. It matches '/posts/123' when it's the pending location.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/useMatchRouteHook.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// Current location: /posts\n// Pending location: /posts/123\nfunction Component() {\n  const matchRoute = useMatchRoute()\n  const params = matchRoute({ to: '/posts/$postId', pending: true })\n  //    ^ { postId: '123' }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing TanStack Router Dependencies\nDESCRIPTION: Commands for installing TanStack Router core packages and development tools while removing React Location dependencies.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/migrate-from-react-location.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @tanstack/react-router @tanstack/router-devtools\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpm uninstall @tanstack/react-location @tanstack/react-location-devtools\n```\n\n----------------------------------------\n\nTITLE: Creating Directory for TanStack Projects\nDESCRIPTION: Command to create a new directory called 'tanstack' where TanStack projects will be cloned for local development.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/react/start-basic-react-query/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmkdir tanstack\n```\n\n----------------------------------------\n\nTITLE: Creating Code-Based Route Tree in TanStack Router\nDESCRIPTION: This snippet illustrates how to manually create a route tree for code-based routing using the root route's addChildren method.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/creating-a-router.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst routeTree = rootRoute.addChildren([\n  // ...\n])\n```\n\n----------------------------------------\n\nTITLE: Defining UseMatchRouteOptions Type in TanStack Router\nDESCRIPTION: This code snippet defines the UseMatchRouteOptions type which extends both ToOptions and MatchRouteOptions types. This type is used when configuring the useMatchRoute hook in TanStack Router.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/UseMatchRouteOptionsType.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport type UseMatchRouteOptions = ToOptions & MatchRouteOptions\n```\n\n----------------------------------------\n\nTITLE: Server Context Transmission to Client\nDESCRIPTION: Shows how to send server-side context to the client using middleware, including transmitting the current server time as context.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/middleware.md#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nconst serverTimer = createMiddleware().server(async ({ next }) => {\n  return next({\n    sendContext: {\n      // Send the current time to the client\n      timeFromServer: new Date(),\n    },\n  })\n})\n\nconst requestLogger = createMiddleware()\n  .middleware([serverTimer])\n  .client(async ({ next }) => {\n    const result = await next()\n    // Woah! We have the time from the server!\n    console.log('Time from the server:', result.context.timeFromServer)\n\n    return result\n  })\n```\n\n----------------------------------------\n\nTITLE: Configuring TanStack Server Functions Plugin in TypeScript\nDESCRIPTION: Creates a new instance of the TanStack Server Functions Plugin with options for manifest import ID and runtime code generation for client, SSR, and server environments.\nSOURCE: https://github.com/tanstack/router/blob/main/packages/server-functions-plugin/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst TanStackServerFnsPlugin = createTanStackServerFnPlugin({\n  manifestVirtualImportId: 'tsr:server-fn-manifest',\n  client: {\n    getRuntimeCode: () =>\n      `import { createClientRpc } from '@tanstack/react-start/client-runtime'`,\n    replacer: (opts) => `createClientRpc(${JSON.stringify(opts.functionId)})`,\n  },\n  ssr: {\n    getRuntimeCode: () =>\n      `import { createSsrRpc } from '@tanstack/react-start/ssr-runtime'`,\n    replacer: (opts) => `createSsrRpc(${JSON.stringify(opts.functionId)})`,\n  },\n  server: {\n    getRuntimeCode: () =>\n      `import { createServerRpc } from '@tanstack/react-start/server-runtime'`,\n    replacer: (opts) =>\n      `createServerRpc(${JSON.stringify(opts.functionId)}, ${opts.fn})`,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Code-Based Route Configuration in SolidJS\nDESCRIPTION: Complete implementation of TanStack Router using code-based route configuration in a single file. Defines routes programmatically with their components and renders the application with RouterProvider.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/solid/quick-start.md#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { render } from 'solid-js/web'\nimport {\n  Outlet,\n  RouterProvider,\n  Link,\n  createRouter,\n  createRoute,\n  createRootRoute,\n} from '@tanstack/solid-router'\nimport { TanStackRouterDevtools } from '@tanstack/solid-router-devtools'\n\nconst rootRoute = createRootRoute({\n  component: () => (\n    <>\n      <div class=\"p-2 flex gap-2\">\n        <Link to=\"/\" class=\"[&.active]:font-bold\">\n          Home\n        </Link>{' '}\n        <Link to=\"/about\" class=\"[&.active]:font-bold\">\n          About\n        </Link>\n      </div>\n      <hr />\n      <Outlet />\n      <TanStackRouterDevtools />\n    </>\n  ),\n})\n\nconst indexRoute = createRoute({\n  getParentRoute: () => rootRoute,\n  path: '/',\n  component: function Index() {\n    return (\n      <div class=\"p-2\">\n        <h3>Welcome Home!</h3>\n      </div>\n    )\n  },\n})\n\nconst aboutRoute = createRoute({\n  getParentRoute: () => rootRoute,\n  path: '/about',\n  component: function About() {\n    return <div class=\"p-2\">Hello from About!</div>\n  },\n})\n\nconst routeTree = rootRoute.addChildren([indexRoute, aboutRoute])\n\nconst router = createRouter({ routeTree })\n\ndeclare module '@tanstack/solid-router' {\n  interface Register {\n    router: typeof router\n  }\n}\n\nconst rootElement = document.getElementById('app')!\nif (!rootElement.innerHTML) {\n  render(() => <RouterProvider router={router} />, rootElement)\n}\n```\n\n----------------------------------------\n\nTITLE: RootRoute Constructor Options Type Definition in TypeScript\nDESCRIPTION: TypeScript type definition showing the constructor options for RootRoute, which excludes several fields from the RouteOptions type.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/RootRouteClass.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nOmit<\n  RouteOptions,\n  | 'path'\n  | 'id'\n  | 'getParentRoute'\n  | 'caseSensitive'\n  | 'parseParams'\n  | 'stringifyParams'\n>\n```\n\n----------------------------------------\n\nTITLE: Defining createLazyFileRoute Return Type in TypeScript\nDESCRIPTION: This code snippet shows the TypeScript type definition for the return value of the createLazyFileRoute function. It specifies that the function returns a subset of RouteOptions properties.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/createLazyFileRouteFunction.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nPick<\n  RouteOptions,\n  'component' | 'pendingComponent' | 'errorComponent' | 'notFoundComponent'\n>\n```\n\n----------------------------------------\n\nTITLE: Safe Binary Encoding/Decoding Utilities\nDESCRIPTION: Utility functions for safe binary encoding and decoding of strings with UTF-8 support.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/custom-search-param-serialization.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport function encodeToBinary(str: string): string {\n  return btoa(\n    encodeURIComponent(str).replace(/%([0-9A-F]{2})/g, function (match, p1) {\n      return String.fromCharCode(parseInt(p1, 16))\n    }),\n  )\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport function decodeFromBinary(str: string): string {\n  return decodeURIComponent(\n    Array.prototype.map\n      .call(atob(str), function (c) {\n        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)\n      })\n      .join(''),\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Pathless Route Group Directories in TanStack Router\nDESCRIPTION: Demonstrates how to use parentheses to create pathless route group directories. These directories are purely organizational and don't affect the route or component tree structure.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/routing/routing-concepts.md#2025-04-21_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\nroutes/\n├── index.tsx\n├── (app)/\n│   ├── dashboard.tsx\n│   ├── settings.tsx\n│   ├── users.tsx\n├── (auth)/\n│   ├── login.tsx\n│   ├── register.tsx\n```\n\n----------------------------------------\n\nTITLE: Using Object Syntax for Improved TypeScript Performance in Route Trees\nDESCRIPTION: Shows how to use object syntax when creating route trees for better TypeScript performance in large applications.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/type-safety.md#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst routeTree = rootRoute.addChildren({\n  postsRoute: postsRoute.addChildren({ postRoute, postsIndexRoute }),\n  indexRoute,\n})\n```\n\n----------------------------------------\n\nTITLE: Root Application Component\nDESCRIPTION: Root component setup with routing and document structure\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/tanstack-start.md#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n// app/routes/__root.tsx\nimport { createRootRoute, HeadContent, Scripts } from '@tanstack/react-router'\nimport { Outlet } from '@tanstack/react-router'\nimport * as React from 'react'\n\nexport const Route = createRootRoute({\n  head: () => ({\n    meta: [\n      {\n        charSet: 'utf-8',\n      },\n      {\n        name: 'viewport',\n        content: 'width=device-width, initial-scale=1',\n      },\n      {\n        title: 'TanStack Start Starter',\n      },\n    ],\n  }),\n  component: RootComponent,\n})\n\nfunction RootComponent() {\n  return (\n    <RootDocument>\n      <Outlet />\n    </RootDocument>\n  )\n}\n\nfunction RootDocument({ children }: { children: React.ReactNode }) {\n  return (\n    <html>\n      <head>\n        <HeadContent />\n      </head>\n      <body>\n        {children}\n        <Scripts />\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Static Data in Root Route Component\nDESCRIPTION: Shows how to access static data from route matches within a root route component using useMatches hook.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/static-route-data.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createRootRoute } from '@tanstack/react-router'\n\nexport const Route = createRootRoute({\n  component: () => {\n    const matches = useMatches()\n\n    return (\n      <div>\n        {matches.map((match) => {\n          return <div key={match.id}>{match.staticData.customData}</div>\n        })}\n      </div>\n    )\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using Link Component with Validated Search Params\nDESCRIPTION: Example showing how the Link component can be used without requiring search params after validation has been set up.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/search-params.md#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<Link to=\"/shop/products\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Directory for TanStack Projects\nDESCRIPTION: Command to create a new directory called 'tanstack' for storing TanStack projects.\nSOURCE: https://github.com/tanstack/router/blob/main/e2e/react-start/basic-tsr-config/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmkdir tanstack\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Link Component with Mantine\nDESCRIPTION: Shows how to create a custom Link component using Mantine's Anchor component with TanStack Router. The custom component sets the preload behavior to 'intent'.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/custom-link.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react'\nimport { createLink, LinkComponent } from '@tanstack/react-router'\nimport { Anchor, AnchorProps } from '@mantine/core'\n\ninterface MantineAnchorProps extends Omit<AnchorProps, 'href'> {\n  // Add any additional props you want to pass to the anchor\n}\n\nconst MantineLinkComponent = React.forwardRef<\n  HTMLAnchorElement,\n  MantineAnchorProps\n>((props, ref) => {\n  return <Anchor ref={ref} {...props} />\n})\n\nconst CreatedLinkComponent = createLink(MantineLinkComponent)\n\nexport const CustomLink: LinkComponent<typeof MantineLinkComponent> = (\n  props,\n) => {\n  return <CreatedLinkComponent preload=\"intent\" {...props} />\n}\n```\n\n----------------------------------------\n\nTITLE: TanStack Start Configuration\nDESCRIPTION: Basic TanStack Start configuration file setup\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/tanstack-start.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// app.config.ts\nimport { defineConfig } from '@tanstack/react-start/config'\n\nexport default defineConfig({})\n```\n\n----------------------------------------\n\nTITLE: Installing @tanstack/eslint-plugin-router with bun\nDESCRIPTION: Command to install the TanStack Router ESLint plugin as a development dependency using bun.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/eslint/eslint-plugin-router.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nbun add -D @tanstack/eslint-plugin-router\n```\n\n----------------------------------------\n\nTITLE: Configuring Route Component Remounting Based on Parameters in TanStack Router\nDESCRIPTION: Example showing how to configure the remountDeps property to remount all route components whenever URL parameters change. The function takes the parameters object and returns it, causing components to remount when params differ.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/RouterOptionsType.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nremountDeps: ({ params }) => params\n```\n\n----------------------------------------\n\nTITLE: Using Server Functions to Perform Mutations in TypeScript\nDESCRIPTION: This snippet provides an example of creating a server function to update user details, including validation and data mutation using createServerFn.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/solid/learn-the-basics.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServerFn } from '@tanstack/solid-start'\n\nconst UserSchema = z.object({\n  id: z.string(),\n  name: z.string(),\n})\n\nconst updateUser = createServerFn({ method: 'POST' })\n  .validator(UserSchema)\n  .handler(async ({ data }) => {\n    return db\n      .update(users)\n      .set({ name: data.name })\n      .where(eq(users.id, data.id))\n  })\n\n// Somewhere else in your application\nawait updateUser({ data: { id: '1', name: 'John' } })\n```\n\n----------------------------------------\n\nTITLE: File-Based Route Configuration in TanStack Router\nDESCRIPTION: Shows the simplified file-based routing approach using createFileRoute, demonstrating reduced boilerplate.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/decisions-on-dx.md#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n// src/routes/posts/index.ts\nimport { createFileRoute } from '@tanstack/react-router'\n\nexport const Route = createFileRoute('/posts/')({\n  component: () => 'Posts index component goes here!!!',\n})\n```\n\n----------------------------------------\n\nTITLE: Using Router Types with Module Declaration\nDESCRIPTION: This example shows how to benefit from auto-completion in components after implementing the module declaration approach for the Router instance.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/decisions-on-dx.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nexport const PostsIdLink = () => {\n  return (\n    <Link\n      to=\"/posts/$postId\"\n      // ^? TypeScript will auto-complete this for you\n      params={{ postId: '123' }} // and this too!\n    >\n      Go to post 123\n    </Link>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Root Route Component\nDESCRIPTION: Root route component that serves as the entry point for all routes, defining the head content and wrapping all child routes in an Outlet.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/solid/build-from-scratch.md#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n// app/routes/__root.tsx\nimport {\n  Outlet,\n  createRootRoute,\n  HeadContent,\n  Scripts,\n} from '@tanstack/solid-router'\n\nexport const Route = createRootRoute({\n  head: () => ({\n    meta: [\n      {\n        charset: 'utf-8',\n      },\n      {\n        name: 'viewport',\n        content: 'width=device-width, initial-scale=1',\n      },\n      {\n        title: 'TanStack Start Starter',\n      },\n    ],\n  }),\n  component: RootComponent,\n})\n\nfunction RootComponent() {\n  return <Outlet />\n}\n```\n\n----------------------------------------\n\nTITLE: Installing TanStack Router Dependencies\nDESCRIPTION: Package installation commands for TanStack Router, its Vite plugin, and devtools using various package managers including npm, pnpm, yarn, bun, and deno.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/solid/quick-start.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @tanstack/solid-router @tanstack/solid-router-devtools\nnpm install -D @tanstack/router-plugin\n# or\npnpm add @tanstack/solid-router @tanstack/solid-router-devtools\npnpm add -D @tanstack/router-plugin\n# or\nyarn add @tanstack/solid-router @tanstack/solid-router-devtools\nyarn add -D @tanstack/router-plugin\n# or\nbun add @tanstack/solid-router @tanstack/solid-router-devtools\nbun add -D @tanstack/router-plugin\n# or\ndeno add npm:@tanstack/solid-router npm:@tanstack/router-plugin npm:@tanstack/solid-router-devtools\n```\n\n----------------------------------------\n\nTITLE: Performing Mutations with TanStack Router in TypeScript\nDESCRIPTION: This code snippet demonstrates how to perform a server-side mutation using TanStack Router and invalidate affected client-side data. The example uses `createServerFn` to define a mutation function that updates a user's data on the server and invalidates the client cache using TanStack Router and TanStack Query methods. Dependencies include `@tanstack/react-start`, `zod` for validation, `@tanstack/react-query`, and `@tanstack/react-router`. Key inputs include a user object conforming to `UserSchema`, and the expected output is validation and update of user data followed by client cache invalidation.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/learn-the-basics.md#2025-04-21_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createServerFn } from '@tanstack/react-start'\nimport { z } from 'zod'\nimport { dbUpdateUser } from '...'\n\nconst UserSchema = z.object({\n  id: z.string(),\n  name: z.string(),\n})\nexport type User = z.infer<typeof UserSchema>\n\nexport const updateUser = createServerFn({ method: 'POST' })\n  .validator(UserSchema)\n  .handler(({ data }) => dbUpdateUser(data))\n\n// Somewhere else in your application\nimport { useQueryClient } from '@tanstack/react-query'\nimport { useRouter } from '@tanstack/react-router'\nimport { useServerFunction } from '@tanstack/react-start'\nimport { updateUser, type User } from '...'\n\nexport function useUpdateUser() {\n  const router = useRouter()\n  const queryClient = useQueryClient()\n  const _updateUser = useServerFunction(updateUser)\n\n  return useCallback(\n    async (user: User) => {\n      const result = await _updateUser({ data: user })\n\n      router.invalidate()\n      queryClient.invalidateQueries({\n        queryKey: ['users', 'updateUser', user.id],\n      })\n\n      return result\n    },\n    [router, queryClient, _updateUser],\n  )\n}\n\n// Somewhere else in your application\nimport { useUpdateUser } from '...'\n\nfunction MyComponent() {\n  const updateUser = useUpdateUser()\n  const onClick = useCallback(async () => {\n    await updateUser({ id: '1', name: 'John' })\n    console.log('Updated user')\n  }, [updateUser])\n\n  return <button onClick={onClick}>Click Me</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Headers with setHeaders in TanStack Router\nDESCRIPTION: This snippet demonstrates how to set headers in the response using the `setHeaders` helper function from `@tanstack/react-start/server` within a TanStack Router API route. It sets the `Content-Type` header to `text/plain`. Requires `@tanstack/react-start/api` and `@tanstack/react-start/server`.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/api-routes.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// routes/api/hello.ts\nimport { createAPIFileRoute } from '@tanstack/react-start/api'\nimport { setHeaders } from '@tanstack/react-start/server'\n\nexport const APIRoute = createAPIFileRoute('/api/hello')({\n  GET: async ({ request }) => {\n    setHeaders({\n      'Content-Type': 'text/plain',\n    })\n    return new Response('Hello, World!')\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Router Entry Point\nDESCRIPTION: Main application entry point setup with router instance creation and provider configuration.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/migrate-from-react-location.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { createRouter, RouterProvider } from '@tanstack/react-router'\n\nimport { routeTree } from './routeTree.gen'\n\nconst router = createRouter({ routeTree })\n\ndeclare module '@tanstack/react-router' {\n  interface Register {\n    router: typeof router\n  }\n}\n\nconst domElementId = 'root'\n\nconst rootElement = document.getElementById(domElementId)\nif (!rootElement) {\n  throw new Error(`Element with id ${domElementId} not found`)\n}\n\nReactDOM.createRoot(rootElement).render(\n  <React.StrictMode>\n    <RouterProvider router={router} />\n  </React.StrictMode>,\n)\n```\n\n----------------------------------------\n\nTITLE: Importing Production Devtools\nDESCRIPTION: Import statement for using devtools in production environment.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/devtools.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TanStackRouterDevtoolsInProd } from '@tanstack/react-router-devtools'\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter block defining document reference path and replacement mapping for router documentation\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/solid/decisions-on-dx.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nref: docs/router/framework/react/decisions-on-dx.md\nreplace: { 'react-router': 'solid-router' }\n---\n```\n\n----------------------------------------\n\nTITLE: Creating Memory History for Server-Side Rendering in TypeScript\nDESCRIPTION: This snippet demonstrates creating a memory history instance for use in non-browser environments or when you don't want components to interact with the URL. It's particularly useful for server-side rendering scenarios.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/history-types.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMemoryHistory, createRouter } from '@tanstack/react-router'\n\nconst memoryHistory = createMemoryHistory({\n  initialEntries: ['/'], // Pass your initial url\n})\n\nconst router = createRouter({ routeTree, history: memoryHistory })\n```\n\n----------------------------------------\n\nTITLE: Defining Response Type\nDESCRIPTION: This snippet defines the possible values for the `response` configuration option for server functions.  It allows specifying how the response is processed, with options for returning just the data (`'data'`), a full response object (`'full'`), or the raw Response object (`'raw'`).\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/server-functions.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nresponse?: 'data' | 'full' | 'raw'\n```\n\n----------------------------------------\n\nTITLE: Typescript Interface for RemountDepsOptions in TanStack Router\nDESCRIPTION: This snippet defines the TypeScript interface for the RemountDepsOptions used in the remountDeps method. It specifies the structure of the options object, including routeId, search, params, and loaderDeps.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/RouteOptionsType.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\ntype remountDeps = (opts: RemountDepsOptions) => any\n\ninterface RemountDepsOptions<\n  in out TRouteId,\n  in out TFullSearchSchema,\n  in out TAllParams,\n  in out TLoaderDeps,\n> {\n  routeId: TRouteId\n  search: TFullSearchSchema\n  params: TAllParams\n  loaderDeps: TLoaderDeps\n}\n```\n\n----------------------------------------\n\nTITLE: Using Non-Strict Search Params Type Checking\nDESCRIPTION: Example showing how to use looser type checking with optional search parameters by setting strict: false in the useSearch hook.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/search-params.md#2025-04-21_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nfunction ProductList() {\n  const search = useSearch({\n    strict: false,\n  })\n  // {\n  //   page: number | undefined\n  //   filter: string | undefined\n  //   sort: 'newest' | 'oldest' | 'price' | undefined\n  // }\n\n  return <div>...</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for TanStack Start\nDESCRIPTION: TypeScript configuration settings recommended for use with TanStack Start, including JSX support, module settings, and strict null checks.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/build-from-scratch.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"jsx\": \"react-jsx\",\n    \"moduleResolution\": \"Bundler\",\n    \"module\": \"ESNext\",\n    \"target\": \"ES2022\",\n    \"skipLibCheck\": true,\n    \"strictNullChecks\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Search Params JSON Structure Example\nDESCRIPTION: Example of how search parameters are parsed into a structured JSON object with preserved data types.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/search-params.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"pageIndex\": 3,\n  \"includeCategories\": [\"electronics\", \"gifts\"],\n  \"sortBy\": \"price\",\n  \"desc\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Home Route Component for File-Based Routing\nDESCRIPTION: Implementation of the index route component that renders the home page content. This uses createLazyFileRoute for automatic code splitting and lazy loading.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/solid/quick-start.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createLazyFileRoute } from '@tanstack/solid-router'\n\nexport const Route = createLazyFileRoute('/')({ \n  component: Index,\n})\n\nfunction Index() {\n  return (\n    <div class=\"p-2\">\n      <h3>Welcome Home!</h3>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Running the TanStack Website Locally\nDESCRIPTION: Commands to navigate to the tanstack.com directory, install dependencies, and run the website in development mode for previewing documentation changes.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/react/start-basic/README.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncd tanstack.com\npnpm i\n# The app will run on https://localhost:3000 by default\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Handling POST Requests with JSON Body in API Routes (TypeScript)\nDESCRIPTION: Shows how to handle POST requests with a JSON body in API routes. This example demonstrates accessing and using the request body data.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/api-routes.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// routes/api/hello.ts\nimport { createAPIFileRoute } from '@tanstack/react-start/api'\n\nexport const APIRoute = createAPIFileRoute('/api/hello')({\n  POST: async ({ request }) => {\n    const body = await request.json()\n    return new Response(`Hello, ${body.name}!`)\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Route Matching Process - /blog/my-post URL\nDESCRIPTION: Shows the route matching process for a dynamic route with the /blog/my-post URL.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/routing/route-matching.md#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nRoot\n    ❌ /\n    ❌ about/us\n    ❌ about\n    ⏩ blog\n      ❌ /\n      ❌ new\n      ✅ $postId\n    - *\n```\n\n----------------------------------------\n\nTITLE: Setting Status Code with Response Constructor in TanStack Router\nDESCRIPTION: This snippet demonstrates how to set the HTTP status code of a response using the `Response` constructor within a TanStack Router API route. It checks if a user is found and returns a 404 status code if not found, otherwise returns the user data.  Requires `@tanstack/react-start` and `@tanstack/react-start/api`.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/api-routes.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// routes/api/hello.ts\nimport { json } from '@tanstack/react-start'\nimport { createAPIFileRoute } from '@tanstack/react-start/api'\n\nexport const APIRoute = createAPIFileRoute('/users/$id')({\n  GET: async ({ request, params }) => {\n    const user = await findUser(params.id)\n    if (!user) {\n      return new Response('User not found', {\n        status: 404,\n      })\n    }\n    return json(user)\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Installing @tanstack/eslint-plugin-router with npm\nDESCRIPTION: Command to install the TanStack Router ESLint plugin as a development dependency using npm.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/eslint/eslint-plugin-router.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -D @tanstack/eslint-plugin-router\n```\n\n----------------------------------------\n\nTITLE: Creating a New TanStack Router Project with CLI\nDESCRIPTION: Command to scaffold a new TanStack Router project using the create-tsrouter-app utility, creating a SolidJS-based application with file-router template.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/solid/quick-start.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx create-tsrouter-app@latest my-app --framework solid --template file-router\n```\n\n----------------------------------------\n\nTITLE: Using useRouterState Hook in React Component (TypeScript/TSX)\nDESCRIPTION: Demonstrates how to use the useRouterState hook in a React component. It shows two usage patterns: one for accessing the full RouterState and another for selecting a specific part of the state using the select option.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/useRouterStateHook.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useRouterState } from '@tanstack/react-router'\n\nfunction Component() {\n  const state = useRouterState()\n  //    ^ RouterState\n\n  // OR\n\n  const selected = useRouterState({\n    select: (state) => state.location,\n  })\n  //    ^ ParsedLocation\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: VSCode Settings for Route Tree File\nDESCRIPTION: VSCode configuration to handle the generated route tree file, including readonly settings and exclusion from search and file watching.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/routing/installation-with-rspack.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"files.readonlyInclude\": {\n    \"**/routeTree.gen.ts\": true\n  },\n  \"files.watcherExclude\": {\n    \"**/routeTree.gen.ts\": true\n  },\n  \"search.exclude\": {\n    \"**/routeTree.gen.ts\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Monorepo Package Structure\nDESCRIPTION: Describes the package organization for a type-safe router implementation with separate libraries for routing, features, and the main application\nSOURCE: https://github.com/tanstack/router/blob/main/examples/react/router-monorepo-simple/README.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n- packages/router: Router library\n- packages/post-feature: Posts UI library\n- packages/app: Main application\n```\n\n----------------------------------------\n\nTITLE: Defining RouterState Type in TypeScript for TanStack Router\nDESCRIPTION: This code snippet defines the RouterState type, which represents the internal state of the TanStack Router. It includes properties for router status, loading state, transitions, matches, and locations.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/RouterStateType.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ntype RouterState = {\n  status: 'pending' | 'idle'\n  isLoading: boolean\n  isTransitioning: boolean\n  matches: Array<RouteMatch>\n  pendingMatches: Array<RouteMatch>\n  location: ParsedLocation\n  resolvedLocation: ParsedLocation\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Infeasible JSX-based Route Definition in TypeScript\nDESCRIPTION: This snippet shows why using JSX to define routes is not possible in TanStack Router due to TypeScript's inability to infer route configuration types.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/decisions-on-dx.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// ⛔️ This is not possible\nfunction App() {\n  return (\n    <Router>\n      <Route path=\"/posts\" component={PostsPage} />\n      <Route path=\"/posts/$postId\" component={PostIdPage} />\n      {/* ... */}\n    </Router>\n    // ^? TypeScript cannot infer the routes in this configuration\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing TanStack Start Core Dependencies\nDESCRIPTION: Command to install the primary dependencies for TanStack Start including React Start, React Router, and Vinxi.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/build-from-scratch.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @tanstack/react-start @tanstack/react-router vinxi\n```\n\n----------------------------------------\n\nTITLE: Installing TanStack Router with NPM Package Managers\nDESCRIPTION: Commands for installing TanStack Router using different package managers including npm, pnpm, yarn, bun, and deno. Each command installs the @tanstack/react-router package.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/installation.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @tanstack/react-router\n# or\npnpm add @tanstack/react-router\n# or\nyarn add @tanstack/react-router\n# or\nbun add @tanstack/react-router\n# or\ndeno add npm:@tanstack/react-router\n```\n\n----------------------------------------\n\nTITLE: Implementing Client RPC Function for TanStack Server Functions\nDESCRIPTION: Provides an example implementation of the createClientRpc function, which creates a remote procedure call (RPC) function for the client runtime. It uses fetch to call the server function at a specified endpoint.\nSOURCE: https://github.com/tanstack/router/blob/main/packages/server-functions-plugin/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createClientRpc(functionId: string) {\n  const url = `${process.env.YOUR_SERVER_BASE}/_server-fn/${functionId}`\n\n  const fn = async (...args: any[]) => {\n    const res = await fetch(url, {\n      method: 'POST',\n      // You'll likely want to use a better serializer here\n      body: JSON.stringify(args),\n    })\n\n    return await res.json()\n  }\n\n  // You can also assign any other properties you want to the function\n  // for things like form actions, or debugging\n  Object.assign(fn, {\n    url: url,\n  })\n\n  return fn\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Local Development Environment for TanStack Documentation\nDESCRIPTION: Commands to navigate to the tanstack.com directory, install dependencies, and start the development server to preview documentation changes locally.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/react/start-basic-rsc/README.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncd tanstack.com\npnpm i\n# The app will run on https://localhost:3000 by default\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Esbuild with TanStack Router Plugin\nDESCRIPTION: Configuration for adding TanStack Router plugin to Esbuild with React target and auto code splitting enabled\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/routing/installation-with-esbuild.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// esbuild.config.js\nimport { TanStackRouterEsbuild } from '@tanstack/router-plugin/esbuild'\n\nexport default {\n  // ...\n  plugins: [\n    TanStackRouterEsbuild({ target: 'react', autoCodeSplitting: true }),\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Query Function in Convex with TypeScript\nDESCRIPTION: This snippet demonstrates how to create a query function in Convex that takes two validated arguments. The function reads data from a database table and returns the collected documents.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/react/start-convex-trellaux/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from './_generated/server'\nimport { v } from 'convex/values'\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query('tablename').collect()\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second)\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: LinkOptions Interface Definition\nDESCRIPTION: Interface for Link component configuration, extending NavigateOptions with additional link-specific properties like target, activeOptions, and preload settings.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/navigation.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport type LinkOptions<\n  TRouteTree extends AnyRoute = AnyRoute,\n  TFrom extends RoutePaths<TRouteTree> | string = string,\n  TTo extends string = '',\n> = NavigateOptions<TRouteTree, TFrom, TTo> & {\n  target?: HTMLAnchorElement['target']\n  activeOptions?: {\n    exact?: boolean\n    includeHash?: boolean\n    includeSearch?: boolean\n    explicitUndefined?: boolean\n  }\n  preload?: false | 'intent'\n  preloadDelay?: number\n  disabled?: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: TanStack Router Configuration File\nDESCRIPTION: JSON configuration file for TanStack Router specifying routes directory and generated route tree location.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/migrate-from-react-location.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"routesDirectory\": \"./src/routes\",\n  \"generatedRouteTree\": \"./src/routeTree.gen.ts\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Client-Side Logging Middleware in TanStack Router\nDESCRIPTION: This example demonstrates how to create a client-side middleware for logging. It logs when a request is sent and when a response is received.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/middleware.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst loggingMiddleware = createMiddleware().client(async ({ next }) => {\n  console.log('Request sent')\n  const result = await next()\n  console.log('Response received')\n  return result\n})\n```\n\n----------------------------------------\n\nTITLE: Installing TanStack Router Package\nDESCRIPTION: Command to install the TanStack Router package using npm\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/migrate-from-react-router.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @tanstack/react-router\n```\n\n----------------------------------------\n\nTITLE: Defining Navigate Component Props and Return in TanStack Router\nDESCRIPTION: The Navigate component in TanStack Router accepts NavigateOptions as props and returns null. The navigation happens inside a useEffect hook when the component renders successfully.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/navigateComponent.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### `...options`\n\n- Type: [`NavigateOptions`](./NavigateOptionsType.md)\n\n## Navigate returns\n\n- `null`\n```\n\n----------------------------------------\n\nTITLE: Route Matching Process - Root URL\nDESCRIPTION: Demonstrates the route matching process for the root URL (/).\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/routing/route-matching.md#2025-04-21_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nRoot\n    ✅ /\n    - about/us\n    - about\n    - blog\n      - /\n      - new\n      - $postId\n    - *\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint with recommended rules using flat config\nDESCRIPTION: Example of how to set up the TanStack Router ESLint plugin with recommended rules using the new flat config format in eslint.config.js.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/eslint/eslint-plugin-router.md#2025-04-21_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n// eslint.config.js\nimport pluginRouter from '@tanstack/eslint-plugin-router'\n\nexport default [\n  ...pluginRouter.configs['flat/recommended'],\n  // Any other config...\n]\n```\n\n----------------------------------------\n\nTITLE: Route Tree Structure Example - Initial\nDESCRIPTION: Shows the initial structure of a route tree before TanStack Router's sorting process.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/routing/route-matching.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nRoot\n  - blog\n    - $postId\n    - /\n    - new\n  - /\n  - *\n  - about\n  - about/us\n```\n\n----------------------------------------\n\nTITLE: Parameter Structure for Splat Routes in TanStack Router\nDESCRIPTION: Shows the structure of the params object for a splat route, where the captured path segments are stored under the _splat key.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/routing/code-based-routing.md#2025-04-21_snippet_8\n\nLANGUAGE: js\nCODE:\n```\n{\n  '_splat': 'documents/hello-world'\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning TanStack Repositories for Local Documentation Development\nDESCRIPTION: Commands to navigate to the tanstack directory and clone the TanStack website repository along with a specific project repository (using form as an example).\nSOURCE: https://github.com/tanstack/router/blob/main/examples/react/start-basic-rsc/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncd tanstack\ngit clone git@github.com:TanStack/tanstack.com.git\ngit clone git@github.com:TanStack/form.git\n```\n\n----------------------------------------\n\nTITLE: Generating Page Title from Route Context\nDESCRIPTION: Shows how to generate a page title using accumulated route context. It uses the useRouterState hook to find the last matched route with a title and sets it as the page title.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/router-context.md#2025-04-21_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n// src/routes/__root.tsx\nexport const Route = createRootRoute({\n  component: () => {\n    const matches = useRouterState({ select: (s) => s.matches })\n\n    const matchWithTitle = [...matches]\n      .reverse()\n      .find((d) => d.context.getTitle)\n\n    const title = matchWithTitle?.context.getTitle() || 'My App'\n\n    return (\n      <html>\n        <head>\n          <title>{title}</title>\n        </head>\n        <body>{/* ... */}</body>\n      </html>\n    )\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining ToMaskOptions Type in TanStack Router\nDESCRIPTION: Definition of the ToMaskOptions type that extends ToOptions with the unmaskOnReload property to control masking behavior during page reloads.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/ToMaskOptionsType.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ntype ToMaskOptions = ToOptions & {\n  unmaskOnReload?: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TanStack Start for Cloudflare Pages Deployment\nDESCRIPTION: This snippet shows how to configure a TanStack Start application for deployment to Cloudflare Pages by setting the server preset and unenv property in the app.config.ts file.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/solid/hosting.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// app.config.ts\nimport { defineConfig } from '@tanstack/solid-start/config'\nimport { cloudflare } from 'unenv'\n\nexport default defineConfig({\n  server: {\n    preset: 'cloudflare-pages',\n    unenv: cloudflare,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint with custom rules using .eslintrc\nDESCRIPTION: Example of how to set up the TanStack Router ESLint plugin with custom rule configuration using the legacy .eslintrc configuration format.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/eslint/eslint-plugin-router.md#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@tanstack/eslint-plugin-router\"],\n  \"rules\": {\n    \"@tanstack/router/create-route-property-order\": \"error\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing TanStack Start CLI Help Documentation\nDESCRIPTION: Command to display all available options and help information for the TanStack Start CLI tool.\nSOURCE: https://github.com/tanstack/router/blob/main/packages/create-start/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm create @tanstack/start --help\n```\n\n----------------------------------------\n\nTITLE: Using Valibot for Search Param Validation\nDESCRIPTION: Example of implementing search parameter validation with Valibot, which implements Standard Schema and doesn't require an adapter.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/search-params.md#2025-04-21_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createFileRoute } from '@tanstack/react-router'\nimport * as v from 'valibot'\n\nconst productSearchSchema = v.object({\n  page: v.optional(v.fallback(v.number(), 1), 1),\n  filter: v.optional(v.fallback(v.string(), ''), ''),\n  sort: v.optional(\n    v.fallback(v.picklist(['newest', 'oldest', 'price']), 'newest'),\n    'newest',\n  ),\n})\n\nexport const Route = createFileRoute('/shop/products/')({  \n  validateSearch: productSearchSchema,\n})\n```\n\n----------------------------------------\n\nTITLE: Specifying Route-Level Not Found Error Handling\nDESCRIPTION: Demonstration of targeting specific routes for not found error handling using routeId\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/not-found-errors.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Route = createFileRoute('/_pathlessLayout')({\\n  notFoundComponent: () => {\\n    return <p>Not found (in _pathlessLayout)</p>\\n  },\\n  component: () => {\\n    return (\\n      <div>\\n        <p>This is a pathless layout route!</p>\\n        <Outlet />\\n      </div>\\n    )\\n  },\\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring TanStack Start for Vercel Deployment\nDESCRIPTION: This snippet demonstrates how to configure a TanStack Start application for deployment to Vercel by setting the server preset in the app.config.ts file.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/solid/hosting.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// app.config.ts\nimport { defineConfig } from '@tanstack/solid-start/config'\n\nexport default defineConfig({\n  server: {\n    preset: 'vercel',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with npm or yarn\nDESCRIPTION: Command to install project dependencies using either npm or yarn package managers.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/react/with-framer-motion/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Accessing Splat Route Parameters in TanStack Router\nDESCRIPTION: Shows how to access the captured pathname in a splat route using the special '_splat' property in the params object.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/routing/routing-concepts.md#2025-04-21_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n{\n  '_splat': 'documents/hello-world'\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Headers with Response Constructor in TanStack Router\nDESCRIPTION: This snippet demonstrates how to set headers in the response using the `Response` constructor within a TanStack Router API route.  It sets the `Content-Type` header to `text/plain`. Requires `@tanstack/react-start/api`.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/api-routes.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// routes/api/hello.ts\nimport { createAPIFileRoute } from '@tanstack/react-start/api'\n\nexport const APIRoute = createAPIFileRoute('/api/hello')({\n  GET: async ({ request }) => {\n    return new Response('Hello, World!', {\n      headers: {\n        'Content-Type': 'text/plain',\n      },\n    })\n  },\n})\n\n// Visit /api/hello to see the response\n// Hello, World!\n```\n\n----------------------------------------\n\nTITLE: Illustrating Limitations of Nested Object-based Route Definition\nDESCRIPTION: This example demonstrates why defining routes as a tree of nested objects is not ideal for large applications due to scalability and code-splitting issues.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/decisions-on-dx.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// ⛔️ This file will just keep growing and growing...\nconst router = createRouter({\n  routes: {\n    posts: {\n      component: PostsPage, // /posts\n      children: {\n        $postId: {\n          component: PostIdPage, // /posts/$postId\n        },\n      },\n    },\n    // ...\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint with recommended rules using .eslintrc\nDESCRIPTION: Example of how to set up the TanStack Router ESLint plugin with recommended rules using the legacy .eslintrc configuration format.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/eslint/eslint-plugin-router.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": [\"plugin:@tanstack/eslint-plugin-router/recommended\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning TanStack Repositories for Local Documentation Editing\nDESCRIPTION: Commands to navigate to the tanstack directory and clone both the main website repository and a project repository (using 'form' as an example).\nSOURCE: https://github.com/tanstack/router/blob/main/examples/react/start-clerk-basic/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncd tanstack\ngit clone git@github.com:TanStack/tanstack.com.git\ngit clone git@github.com:TanStack/form.git\n```\n\n----------------------------------------\n\nTITLE: Defining createRootRoute Options Type in TypeScript/TSX\nDESCRIPTION: TypeScript type definition for the options accepted by the createRootRoute function. It extends RouteOptions but omits several properties including path, id, getParentRoute, caseSensitive, parseParams, and stringifyParams.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/createRootRouteFunction.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nOmit<\n  RouteOptions,\n  | 'path'\n  | 'id'\n  | 'getParentRoute'\n  | 'caseSensitive'\n  | 'parseParams'\n  | 'stringifyParams'\n>\n```\n\n----------------------------------------\n\nTITLE: Creating wrangler.toml Configuration for Cloudflare Pages\nDESCRIPTION: This configuration file is required for deploying a TanStack Start application to Cloudflare Pages. It sets the project name, build output directory, and Node.js compatibility flags.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/solid/hosting.md#2025-04-21_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n# wrangler.toml\nname = \"your-cloudflare-project-name\"\npages_build_output_dir = \"./dist\"\ncompatibility_flags = [\"nodejs_compat\"]\ncompatibility_date = \"2024-11-13\"\n```\n\n----------------------------------------\n\nTITLE: Installing TanStack Dependencies\nDESCRIPTION: Commands to install core TanStack and React dependencies\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/tanstack-start.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @tanstack/react-start @tanstack/react-router vinxi\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm i react react-dom @vitejs/plugin-react\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm i -D typescript @types/react @types/react-dom\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for TanStack Start\nDESCRIPTION: Updated package.json configuration with scripts for Vinxi and module type settings.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/solid/build-from-scratch.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ...\n  \"type\": \"module\",\n  \"scripts\": {\n    \"dev\": \"vinxi dev\",\n    \"build\": \"vinxi build\",\n    \"start\": \"vinxi start\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Arktype for Search Param Validation\nDESCRIPTION: Implementation of search parameter validation using Arktype, which implements Standard Schema and doesn't require an adapter.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/search-params.md#2025-04-21_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createFileRoute } from '@tanstack/react-router'\nimport { type } from 'arktype'\n\nconst productSearchSchema = type({\n  page: 'number = 1',\n  filter: 'string = \"\"',\n  sort: '\"newest\" | \"oldest\" | \"price\" = \"newest\"',\n})\n\nexport const Route = createFileRoute('/shop/products/')({  \n  validateSearch: productSearchSchema,\n})\n```\n\n----------------------------------------\n\nTITLE: Matching with Partial Params (2) using useMatchRoute in TanStack Router (TSX)\nDESCRIPTION: Another example of using useMatchRoute with partial params, this time providing the 'fooId' parameter and extracting 'postId' from the current route.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/useMatchRouteHook.md#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n// Current location: /posts/123/foo/456\nfunction Component() {\n  const matchRoute = useMatchRoute()\n  const params = matchRoute({\n    to: '/posts/$postId/foo/$fooId',\n    params: { fooId: '456' },\n  })\n  //    ^ { postId: '123', fooId: '456' }\n}\n```\n\n----------------------------------------\n\nTITLE: Building TanStack Router Packages\nDESCRIPTION: Commands for building the TanStack Router packages, including options for building all packages or using cached builds with nx affected.\nSOURCE: https://github.com/tanstack/router/blob/main/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm build:all\n```\n\n----------------------------------------\n\nTITLE: Configuring VSCode settings for TanStack Router generated files\nDESCRIPTION: JSON configuration for VSCode settings to mark the generated route tree file as readonly and exclude it from search results and file watcher.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/routing/installation-with-router-cli.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"files.readonlyInclude\": {\n    \"**/routeTree.gen.ts\": true\n  },\n  \"files.watcherExclude\": {\n    \"**/routeTree.gen.ts\": true\n  },\n  \"search.exclude\": {\n    \"**/routeTree.gen.ts\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Route Prerendering with Nitro Hooks\nDESCRIPTION: Implementation of dynamic route prerendering using Nitro's prerender:routes hook. Demonstrates how to fetch and prerender dynamic blog post routes.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/static-prerendering.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// app.config.ts\nimport { defineConfig } from '@tanstack/react-start/config'\n\nexport default defineConfig({\n  server: {\n    hooks: {\n      'prerender:routes': async (routes) => {\n        // fetch the pages you want to render\n        const posts = await fetch('https://api.example.com/posts')\n        const postsData = await posts.json()\n\n        // add each post path to the routes set\n        postsData.forEach((post) => {\n          routes.add(`/posts/${post.id}`)\n        })\n      },\n    },\n    prerender: {\n      routes: ['/'],\n      crawlLinks: true,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using External Data Fetching Library with Router Context\nDESCRIPTION: Shows how to use an external data fetching library (QueryClient) with router context. It demonstrates creating a typed context with QueryClient and using it in a route loader.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/router-context.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  createRootRouteWithContext,\n  createRouter,\n} from '@tanstack/react-router'\n\ninterface MyRouterContext {\n  queryClient: QueryClient\n}\n\nconst rootRoute = createRootRouteWithContext<MyRouterContext>()({ component: App,\n})\n\nconst queryClient = new QueryClient()\n\nconst router = createRouter({\n  routeTree: rootRoute,\n  context: {\n    queryClient,\n  },\n})\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// src/routes/todos.tsx\nexport const Route = createFileRoute('/todos')({\n  component: Todos,\n  loader: async ({ context }) => {\n    await context.queryClient.ensureQueryData({\n      queryKey: ['todos', { userId: user.id }],\n      queryFn: fetchTodos,\n    })\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Default TanStack Router Plugin Configuration\nDESCRIPTION: Default configuration options for TanStack Router Plugin including routes directory, generated route tree file location, and other settings\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/routing/installation-with-esbuild.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"routesDirectory\": \"./src/routes\",\n  \"generatedRouteTree\": \"./src/routeTree.gen.ts\",\n  \"routeFileIgnorePrefix\": \"-\",\n  \"quoteStyle\": \"single\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using TanStack Router Params Hook\nDESCRIPTION: Example of using the useParams hook with TanStack Router to access route parameters for an order detail page\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/migrate-from-react-router.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst params = useParams({ from: \"/orders/$orderId\" })\n```\n\n----------------------------------------\n\nTITLE: Cloning TanStack Repositories for Local Development\nDESCRIPTION: These commands navigate to the 'tanstack' directory and clone the tanstack.com and form repositories for local development and documentation editing.\nSOURCE: https://github.com/tanstack/router/blob/main/e2e/solid-start/basic-tsr-config/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncd tanstack\ngit clone git@github.com:TanStack/tanstack.com.git\ngit clone git@github.com:TanStack/form.git\n```\n\n----------------------------------------\n\nTITLE: Manual Scroll Restoration for Virtualized Element Content\nDESCRIPTION: This snippet demonstrates how to implement manual scroll restoration for a specific virtualized scrollable element. It uses a unique ID with the data-scroll-restoration-id attribute and the useElementScrollRestoration hook to restore the scroll position.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/scroll-restoration.md#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Component() {\n  // We need a unique ID for manual scroll restoration on a specific element\n  // It should be as unique as possible for this element across your app\n  const scrollRestorationId = 'myVirtualizedContent'\n\n  // We use that ID to get the scroll entry for this element\n  const scrollEntry = useElementScrollRestoration({\n    id: scrollRestorationId,\n  })\n\n  // Let's use TanStack Virtual to virtualize some content!\n  const virtualizerParentRef = React.useRef<HTMLDivElement>(null)\n  const virtualizer = useVirtualizer({\n    count: 10000,\n    getScrollElement: () => virtualizerParentRef.current,\n    estimateSize: () => 100,\n    // We pass the scrollY from the scroll restoration entry to the virtualizer\n    // as the initial offset\n    initialOffset: scrollEntry?.scrollY,\n  })\n\n  return (\n    <div\n      ref={virtualizerParentRef}\n      // We pass the scroll restoration ID to the element\n      // as a custom attribute that will get picked up by the\n      // scroll restoration watcher\n      data-scroll-restoration-id={scrollRestorationId}\n      className=\"flex-1 border rounded-lg overflow-auto relative\"\n    >\n      ...\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Path Aliases in Imports\nDESCRIPTION: Example showing how to use the configured path alias in import statements, comparing the new syntax with traditional relative imports.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/path-aliases.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// app/routes/posts/$postId/edit.tsx\nimport { Input } from '~/components/ui/input'\n\n// instead of\n\nimport { Input } from '../../../components/ui/input'\n```\n\n----------------------------------------\n\nTITLE: Bun Server Configuration\nDESCRIPTION: Configuration setup for deploying a TanStack Start application to a Bun server environment.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/hosting.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// app.config.ts\nimport { defineConfig } from '@tanstack/react-start/config'\n\nexport default defineConfig({\n  server: {\n    preset: 'bun',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Replacement Configuration\nDESCRIPTION: YAML-style frontmatter configuration defining text replacement rules for converting React-specific documentation to Solid-specific documentation. Includes mappings for terminology and syntax differences between the frameworks.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/solid/server-functions.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nref: docs/start/framework/react/server-functions.md\nreplace:\n  {\n    'react': 'solid',\n    'React Server Functions': 'Solid Server Functions',\n    '{state}': '{state()}',\n    'While React 19': 'For context, while React 19',\n  }\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for TanStack Start\nDESCRIPTION: Updates to the package.json file to set module type to ESM and add scripts for Vinxi development, build, and start commands.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/build-from-scratch.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ...\n  \"type\": \"module\",\n  \"scripts\": {\n    \"dev\": \"vinxi dev\",\n    \"build\": \"vinxi build\",\n    \"start\": \"vinxi start\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Type Safety with Validation\nDESCRIPTION: This snippet illustrates how type safety is achieved through validation in server functions. The return type of the `validator` function becomes the input type of the `handler` function.  This ensures that the data being passed to the handler is of the correct type and has been validated at runtime.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/server-functions.md#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createServerFn } from '@tanstack/react-start'\n\ntype Person = {\n  name: string\n}\n\nexport const greet = createServerFn({ method: 'GET' })\n  .validator((person: unknown): Person => {\n    if (typeof person !== 'object' || person === null) {\n      throw new Error('Person must be an object')\n    }\n\n    if ('name' in person && typeof person.name !== 'string') {\n      throw new Error('Person.name must be a string')\n    }\n\n    return person as Person\n  })\n  .handler(\n    async ({\n      data, // Person\n    }) => {\n      return `Hello, ${data.name}!`\n    },\n  )\n\nfunction test() {\n  greet({ data: { name: 'John' } }) // OK\n  greet({ data: { name: 123 } }) // Error: Argument of type '{ name: number; }' is not assignable to parameter of type 'Person'.\n}\n```\n\n----------------------------------------\n\nTITLE: Matching with Partial Params using useMatchRoute in TanStack Router (TSX)\nDESCRIPTION: This example shows how to use useMatchRoute with partial params. It matches the route when one parameter is provided and extracts the other from the current route.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/useMatchRouteHook.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// Current location: /posts/123/foo/456\nfunction Component() {\n  const matchRoute = useMatchRoute()\n  const params = matchRoute({\n    to: '/posts/$postId/foo/$fooId',\n    params: { postId: '123' },\n  })\n  //    ^ { postId: '123', fooId: '456' }\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Mutation Function in a React Component\nDESCRIPTION: This example demonstrates how to use the useMutation hook to call a Convex mutation function from a React component, including both fire-and-forget pattern and handling the result with a promise.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/react/start-convex-trellaux/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction)\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: 'Hello!', second: 'me' })\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: 'Hello!', second: 'me' }).then((result) =>\n    console.log(result),\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating About Route Component for File-Based Routing\nDESCRIPTION: Implementation of the about route component that renders the about page content. Uses the createLazyFileRoute API for automatic code splitting and route generation.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/solid/quick-start.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createLazyFileRoute } from '@tanstack/solid-router'\n\nexport const Route = createLazyFileRoute('/about')({\n  component: About,\n})\n\nfunction About() {\n  return <div class=\"p-2\">Hello from About!</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Basic TanStack Router Example\nDESCRIPTION: Commands to clone and run the basic TanStack Router example project using gitpick, including installation and development server startup.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/quick-start.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx gitpick TanStack/router/tree/main/examples/react/start-basic start-basic\ncd start-basic\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Cloning and Running TanStack Router Basic Example\nDESCRIPTION: Command sequence for cloning the start-basic example repository using degit, navigating to the project directory, installing dependencies, and starting the development server.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/solid/quick-start.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx degit https://github.com/tanstack/router/examples/solid/start-basic start-basic\ncd start-basic\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Configuring TanStack Start for Node.js Server Deployment\nDESCRIPTION: This snippet demonstrates how to configure a TanStack Start application for deployment to a Node.js server by setting the server preset in the app.config.ts file.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/solid/hosting.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// app.config.ts\nimport { defineConfig } from '@tanstack/solid-start/config'\n\nexport default defineConfig({\n  server: {\n    preset: 'node-server',\n  },\n})\n\n// Or you can use the --preset flag with the build command\n// to specify the deployment target when building the application:\n// npm run build --preset node-server\n```\n\n----------------------------------------\n\nTITLE: Installing TanStack Router Plugin\nDESCRIPTION: Command to install the TanStack Router plugin package for Rspack/Rsbuild integration.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/routing/installation-with-rspack.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -D @tanstack/router-plugin\n```\n\n----------------------------------------\n\nTITLE: Building and Starting TanStack Start App on Node.js\nDESCRIPTION: These commands show how to build a TanStack Start application and start it on a Node.js server after deployment.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/solid/hosting.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build\nnode .output/server/index.mjs\n```\n\n----------------------------------------\n\nTITLE: Node.js Server Configuration\nDESCRIPTION: Configuration setup for deploying a TanStack Start application to a Node.js server environment.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/hosting.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// app.config.ts\nimport { defineConfig } from '@tanstack/react-start/config'\n\nexport default defineConfig({\n  server: {\n    preset: 'node-server',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Header Response in TanStack Router\nDESCRIPTION: Shows how to set custom response headers in server functions using the setHeader utility.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/server-functions.md#2025-04-21_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createServerFn } from '@tanstack/react-start'\nimport { setHeader } from '@tanstack/react-start/server'\n\nexport const getServerTime = createServerFn({ method: 'GET' }).handler(\n  async () => {\n    setHeader('X-Custom-Header', 'value')\n    return new Date().toISOString()\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Non-Matching Params with useMatchRoute in TanStack Router (TSX)\nDESCRIPTION: This snippet demonstrates how useMatchRoute returns false when provided params don't match the current route, even if the path structure matches.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/useMatchRouteHook.md#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n// Current location: /posts/123/foo/456\nfunction Component() {\n  const matchRoute = useMatchRoute()\n  const params = matchRoute({\n    to: '/posts/$postId/foo/$fooId',\n    params: { postId: '789' },\n  })\n  //    ^ false\n}\n```\n\n----------------------------------------\n\nTITLE: Framework Translation Mappings for Router Parameters\nDESCRIPTION: YAML-style configuration for translating React Router syntax to Solid Router syntax, specifically for path parameter usage and access patterns.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/solid/guide/path-params.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n{\n  'react-router': 'solid-router',\n  '{ postId } = Route.useParams()': 'params = Route.useParams()',\n  '{postId}': '{params.postId()}'\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Home Route with Persistent Counter\nDESCRIPTION: Home route component with a counter that persists data to a file using server functions, demonstrating data fetching, persistence, and client-side invalidation.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/solid/build-from-scratch.md#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n// app/routes/index.tsx\nimport * as fs from 'node:fs'\nimport { createFileRoute, useRouter } from '@tanstack/solid-router'\nimport { createServerFn } from '@tanstack/solid-start'\n\nconst filePath = 'count.txt'\n\nasync function readCount() {\n  return parseInt(\n    await fs.promises.readFile(filePath, 'utf-8').catch(() => '0'),\n  )\n}\n\nconst getCount = createServerFn({\n  method: 'GET',\n}).handler(() => {\n  return readCount()\n})\n\nconst updateCount = createServerFn({ method: 'POST' })\n  .validator((d: number) => d)\n  .handler(async ({ data }) => {\n    const count = await readCount()\n    await fs.promises.writeFile(filePath, `${count + data}`)\n  })\n\nexport const Route = createFileRoute('/')({ \n  component: Home,\n  loader: async () => await getCount(),\n})\n\nfunction Home() {\n  const router = useRouter()\n  const state = Route.useLoaderData()\n\n  return (\n    <button\n      type=\"button\"\n      onClick={() => {\n        updateCount({ data: 1 }).then(() => {\n          router.invalidate()\n        })\n      }}\n    >\n      Add 1 to {state()}?\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Documentation Reference Configuration in Markdown\nDESCRIPTION: This snippet defines metadata for a documentation file, specifying the reference path and replacement instructions for converting React Router docs to Solid Router.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/solid/guide/history-types.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nref: docs/router/framework/react/guide/history-types.md\nreplace: { 'react-router': 'solid-router' }\n---\n```\n\n----------------------------------------\n\nTITLE: Node.js Server Start Commands\nDESCRIPTION: Commands for building and starting a TanStack application on a Node.js server.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/hosting.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build\nnode .output/server/index.mjs\n```\n\n----------------------------------------\n\nTITLE: Using Exact Matching for Active Links in TanStack Router with TSX\nDESCRIPTION: Demonstrates how to create a link that is only active when there's an exact route match. This is useful for home page links that shouldn't be active on child routes.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/navigation.md#2025-04-21_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nconst link = (\n  <Link to=\"/\" activeOptions={{ exact: true }}>\n    Home\n  </Link>\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Search Params with Link Component\nDESCRIPTION: Example of updating search parameters using the Link component with the from prop when the current page's search needs to be updated.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/search-params.md#2025-04-21_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\n// /routes/shop.products.tsx\nexport const Route = createFileRoute('/shop/products')({  \n  validateSearch: productSearchSchema,\n})\n\nconst ProductList = () => {\n  return (\n    <div>\n      <Link from={Route.fullPath} search={(prev) => ({ page: prev.page + 1 })}>\n        Next Page\n      </Link>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Starting TanStack Router in Development Mode\nDESCRIPTION: Commands to install dependencies and start the TanStack Router application in development mode. This rebuilds assets on file changes.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/react/start-counter/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm install\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Updating Search Params with Specific Route Subtree\nDESCRIPTION: Example of updating search parameters in a component rendered within a specific route subtree, using the from prop to specify the subtree and access its search params.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/search-params.md#2025-04-21_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\n// `page` is a search param that is defined in the /posts route and hence available on all of its child routes.\nconst PageSelector = () => {\n  return (\n    <div>\n      <Link\n        from=\"/posts\"\n        to=\".\"\n        search={(prev) => ({ ...prev, page: prev.page + 1 })}\n      >\n        Next Page\n      </Link>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running TanStack.com Locally\nDESCRIPTION: Commands to navigate to the tanstack.com directory, install dependencies, and start the development server. The app will run on localhost:3000 by default.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/react/start-counter/README.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncd tanstack.com\npnpm i\n# The app will run on https://localhost:3000 by default\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Initializing Project Directory with npm\nDESCRIPTION: Commands to create a new project directory, navigate into it, and initialize an npm package with default settings.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/build-from-scratch.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmkdir myApp\ncd myApp\nnpm init -y\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration for TanStack Router with Solid.js\nDESCRIPTION: Required TypeScript configuration options in tsconfig.json for using TanStack Router with Solid.js, specifying JSX handling and import source.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/solid/routing/installation-with-vite.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"jsx\": \"preserve\",\n    \"jsxImportSource\": \"solid-js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ShouldBlockFn Interface in TypeScript\nDESCRIPTION: This snippet defines the TypeScript interface for the ShouldBlockFn function and its arguments, which are used in the useBlocker hook to determine if navigation should be blocked.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/useBlockerHook.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ShouldBlockFnLocation<...> {\n  routeId: TRouteId\n  fullPath: TFullPath\n  pathname: string\n  params: TAllParams\n  search: TFullSearchSchema\n}\n\ntype ShouldBlockFnArgs = {\n  current: ShouldBlockFnLocation\n  next: ShouldBlockFnLocation\n  action: HistoryAction\n}\n```\n\n----------------------------------------\n\nTITLE: Non-Matching Full Params with useMatchRoute in TanStack Router (TSX)\nDESCRIPTION: This final example shows how useMatchRoute returns false when all provided params don't match the current route, even if some params are correct.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/useMatchRouteHook.md#2025-04-21_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n// Current location: /posts/123/foo/456\nfunction Component() {\n  const matchRoute = useMatchRoute()\n  const params = matchRoute({\n    to: '/posts/$postId/foo/$fooId',\n    params: { postId: '789', fooId: '456' },\n  })\n  //    ^ false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite Plugin for TanStack Router\nDESCRIPTION: Vite configuration file that sets up TanStack Router Vite plugin with SolidJS, enabling automatic code splitting for optimized routing.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/solid/quick-start.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// vite.config.ts\nimport { defineConfig } from 'vite'\nimport solid from 'vite-plugin-solid'\nimport { TanStackRouterVite } from '@tanstack/router-plugin/vite'\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [\n    TanStackRouterVite({ target: 'solid', autoCodeSplitting: true }),\n    solid(),\n    // ...,\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Default Routes Directory in TanStack Router\nDESCRIPTION: Specifies the default path for the routes directory relative to the current working directory. This setting is required and cannot be empty or undefined.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/api/file-based-routing.md#2025-04-21_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n./src/routes\n```\n\n----------------------------------------\n\nTITLE: Defining a Mutation Function in Convex with TypeScript\nDESCRIPTION: This snippet demonstrates how to create a mutation function in Convex that modifies database data. It inserts a new message document and returns the inserted data.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/react/start-convex-trellaux/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from './_generated/server'\nimport { v } from 'convex/values'\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second }\n    const id = await ctx.db.insert('messages', message)\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id)\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Bun Server Build and Start Commands\nDESCRIPTION: Commands for building and starting a TanStack application on a Bun server.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/hosting.md#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nbun run build\nbun run .output/server/index.mjs\n```\n\n----------------------------------------\n\nTITLE: Server Function with Type Safety and No Validation\nDESCRIPTION: This snippet demonstrates how to achieve type safety in server functions without explicit validation by using an identity function as the `validator`. This function simply returns the input, but provides type information to the server function, ensuring that the handler receives data of the expected type.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/server-functions.md#2025-04-21_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createServerFn } from '@tanstack/react-start'\n\ntype Person = {\n  name: string\n}\n\nexport const greet = createServerFn({ method: 'GET' })\n  .validator((d: Person) => d)\n  .handler(async (ctx) => {\n    return `Hello, ${ctx.data.name}!`\n  })\n\ngreet({\n  data: {\n    name: 'John',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Installing TanStack Start Core Dependencies\nDESCRIPTION: Command to install the core dependencies for TanStack Start, including Vinxi and TanStack Router.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/solid/build-from-scratch.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @tanstack/solid-start @tanstack/solid-router vinxi\n```\n\n----------------------------------------\n\nTITLE: Starting TanStack Router Example Application\nDESCRIPTION: Commands for starting the example application using either npm or yarn package managers.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/react/with-trpc-react-query/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Installing TanStack Router Plugin\nDESCRIPTION: Command to install the TanStack Router plugin for Esbuild using npm\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/routing/installation-with-esbuild.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -D @tanstack/router-plugin\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration Setup\nDESCRIPTION: Basic TypeScript configuration for React JSX and modern JavaScript features\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/tanstack-start.md#2025-04-21_snippet_1\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"jsx\": \"react-jsx\",\n    \"moduleResolution\": \"Bundler\",\n    \"module\": \"Preserve\",\n    \"target\": \"ES2022\",\n    \"skipLibCheck\": true,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Default TanStack Router CLI configuration\nDESCRIPTION: Default JSON configuration for TanStack Router CLI, specifying routes directory, generated route tree file, ignore prefix, and quote style.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/routing/installation-with-router-cli.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"routesDirectory\": \"./src/routes\",\n  \"generatedRouteTree\": \"./src/routeTree.gen.ts\",\n  \"routeFileIgnorePrefix\": \"-\",\n  \"quoteStyle\": \"single\"\n}\n```\n\n----------------------------------------\n\nTITLE: Query-String Library Integration\nDESCRIPTION: Implementation using the query-string library for search parameter serialization.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/custom-search-param-serialization.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createRouter } from '@tanstack/react-router'\nimport qs from 'query-string'\n\nconst router = createRouter({\n  // ...\n  stringifySearch: stringifySearchWith((value) =>\n    qs.stringify(value, {\n      // ...options\n    }),\n  ),\n  parseSearch: parseSearchWith((value) =>\n    qs.parse(value, {\n      // ...options\n    }),\n  ),\n})\n```\n\n----------------------------------------\n\nTITLE: Installing TanStack Router Devtools Package\nDESCRIPTION: Installation commands for adding TanStack Router devtools using different package managers.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/devtools.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @tanstack/react-router-devtools\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @tanstack/react-router-devtools\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @tanstack/react-router-devtools\n```\n\nLANGUAGE: sh\nCODE:\n```\nbun add @tanstack/react-router-devtools\n```\n\n----------------------------------------\n\nTITLE: Creating the Server Entry Point in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a server entry handler for server-side rendering (SSR) using TanStack Start, specifying the router creation and router manifest generation.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/solid/learn-the-basics.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// app/ssr.tsx\nimport {\n  createStartHandler,\n  defaultStreamHandler,\n} from '@tanstack/solid-start/server'\nimport { getRouterManifest } from '@tanstack/solid-start/router-manifest'\n\nimport { createRouter } from './router'\n\nexport default createStartHandler({\n  createRouter,\n  getRouterManifest,\n})(defaultStreamHandler)\n```\n\n----------------------------------------\n\nTITLE: Configuring Generated Route Tree Path in TanStack Router\nDESCRIPTION: Defines the default path where the generated route tree file will be saved, relative to the current working directory. This setting is required and cannot be empty or undefined.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/api/file-based-routing.md#2025-04-21_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n./src/routeTree.gen.ts\n```\n\n----------------------------------------\n\nTITLE: Package.json Configuration\nDESCRIPTION: Updated package.json configuration with Vinxi CLI scripts\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/tanstack-start.md#2025-04-21_snippet_3\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  // ...\n  \"type\": \"module\",\n  \"scripts\": {\n    \"dev\": \"vinxi dev\",\n    \"build\": \"vinxi build\",\n    \"start\": \"vinxi start\",\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Directory for TanStack Projects\nDESCRIPTION: Command to create a new directory called 'tanstack' for hosting TanStack projects locally.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/react/start-basic-auth/README.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmkdir tanstack\n```\n\n----------------------------------------\n\nTITLE: NotFoundRoute Constructor Type Definition in TanStack Router\nDESCRIPTION: This code snippet shows the TypeScript type definition for the NotFoundRoute constructor options. It extends RouteOptions with certain properties omitted, including path, id, getParentRoute, caseSensitive, parseParams, and stringifyParams.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/NotFoundRouteClass.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nOmit<\n  RouteOptions,\n  | 'path'\n  | 'id'\n  | 'getParentRoute'\n  | 'caseSensitive'\n  | 'parseParams'\n  | 'stringifyParams'\n>\n```\n\n----------------------------------------\n\nTITLE: Injecting TanStack Server Functions Plugin into Vite Config\nDESCRIPTION: Demonstrates how to inject the TanStack Server Functions Plugin into the appropriate Vite configuration plugin arrays for client, SSR, and server environments.\nSOURCE: https://github.com/tanstack/router/blob/main/packages/server-functions-plugin/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclientVitePlugins: [TanStackServerFnsPlugin.client]\nssrVitePlugins: [TanStackServerFnsPlugin.ssr]\nserverVitePlugins: [TanStackServerFnsPlugin.server]\n```\n\n----------------------------------------\n\nTITLE: Starting TanStack Router Example Project (Shell)\nDESCRIPTION: Commands to start the TanStack Router example project using either npm or yarn package managers.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/solid/basic-file-based/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm start\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Implementing Floating Mode Devtools\nDESCRIPTION: Setup for floating mode devtools with toggle functionality.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/devtools.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport { TanStackRouterDevtools } from '@tanstack/react-router-devtools'\n\nfunction App() {\n  return (\n    <>\n      <Router />\n      <TanStackRouterDevtools initialIsOpen={false} />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Starting TanStack Router Development Server\nDESCRIPTION: Commands to install dependencies with pnpm and start the development server, which rebuilds assets on file changes.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/react/start-basic-auth/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm install\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with NPM or Yarn\nDESCRIPTION: Commands for installing project dependencies using either npm or yarn package manager.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/solid/basic-solid-query/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for TanStack Router Example with npm or yarn\nDESCRIPTION: Commands for installing project dependencies using either npm or yarn package managers.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/react/scroll-restoration/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Default Search Object Example in TanStack Router\nDESCRIPTION: Example of a search object structure that will be serialized into URL parameters.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/custom-search-param-serialization.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst search = {\n  page: 1,\n  sort: 'asc',\n  filters: { author: 'tanner', min_words: 800 },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Fixed Mode Devtools\nDESCRIPTION: Example of using fixed mode devtools with shadow DOM integration.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/devtools.md#2025-04-23_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport { TanStackRouterDevtoolsPanel } from '@tanstack/react-router-devtools'\n```\n\nLANGUAGE: js\nCODE:\n```\n<TanStackRouterDevtoolsPanel\n  shadowDOMTarget={shadowContainer}\n  router={router}\n/>\n```\n\n----------------------------------------\n\nTITLE: VSCode Settings for TanStack Router Generated Files\nDESCRIPTION: VSCode settings to mark the generated route tree file as readonly and exclude it from search results and file watcher. This helps prevent unexpected file openings and errors after route renaming.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/routing/installation-with-vite.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"files.readonlyInclude\": {\n    \"**/routeTree.gen.ts\": true\n  },\n  \"files.watcherExclude\": {\n    \"**/routeTree.gen.ts\": true\n  },\n  \"search.exclude\": {\n    \"**/routeTree.gen.ts\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for TanStack Router\nDESCRIPTION: Command to install all dependencies for the TanStack Router monorepo using pnpm.\nSOURCE: https://github.com/tanstack/router/blob/main/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json scripts for TanStack Router CLI\nDESCRIPTION: JSON configuration for package.json scripts to use TanStack Router CLI for generating and watching routes.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/routing/installation-with-router-cli.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"generate-routes\": \"tsr generate\",\n    \"watch-routes\": \"tsr watch\",\n    \"build\": \"npm run generate-routes && ...\",\n    \"dev\": \"npm run watch-routes && ...\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Directory for TanStack Projects\nDESCRIPTION: Command to create a new directory called 'tanstack' where TanStack repositories will be cloned.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/react/start-counter/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmkdir tanstack\n```\n\n----------------------------------------\n\nTITLE: Setting Default Route Tree File Header in TanStack Router\nDESCRIPTION: Specifies the default content to be prepended to the start of the generated route tree file. It includes ESLint disable, TypeScript ignore, and IntelliJ inspection ignore comments.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/api/file-based-routing.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  \"/* eslint-disable */\",\n  \"// @ts-nocheck\",\n  \"// noinspection JSUnusedGlobalSymbols\"\n]\n```\n\n----------------------------------------\n\nTITLE: Cloudflare Pages Dependency Installation\nDESCRIPTION: Command to install the required unenv dependency for Cloudflare Pages deployment.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/hosting.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm install unenv\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server with NPM or Yarn\nDESCRIPTION: Commands for starting the development server using either npm or yarn package manager.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/solid/basic-solid-query/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm start\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Installing TanStack Router CLI via npm\nDESCRIPTION: Command to install the @tanstack/router-cli package as a development dependency using npm.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/routing/installation-with-router-cli.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -D @tanstack/router-cli\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for TanStack Router Example using npm or yarn\nDESCRIPTION: Commands for installing project dependencies using either npm or yarn package managers.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/react/basic-default-search-params/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Cloning TanStack Repositories for Local Documentation Editing\nDESCRIPTION: Commands to enter the tanstack directory and clone both the tanstack.com website repo and a TanStack project repo (in this example, form) for local documentation editing.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/react/start-basic/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncd tanstack\ngit clone git@github.com:TanStack/tanstack.com.git\ngit clone git@github.com:TanStack/form.git\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite with TanStack Router Plugin\nDESCRIPTION: Configuration for Vite to use TanStack Router, including the router plugin setup with the Solid.js target and enabling automatic code splitting.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/solid/routing/installation-with-vite.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// vite.config.ts\nimport { defineConfig } from 'vite'\nimport solid from 'vite-plugin-solid'\nimport { TanStackRouterVite } from '@tanstack/router-plugin/vite'\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [\n    TanStackRouterVite({ target: 'solid', autoCodeSplitting: true }),\n    solid(),\n    // ...\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Manual Router Instance Integration\nDESCRIPTION: Example of manually passing router instance to devtools outside RouterProvider.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/devtools.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nfunction App() {\n  return (\n    <>\n      <RouterProvider router={router} />\n      <TanStackRouterDevtools router={router} />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Hash Link in TanStack Router with TSX\nDESCRIPTION: Shows how to create a link that navigates to a specific section of a page using hash fragments. This example links to a specific section of a blog post.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/navigation.md#2025-04-21_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nconst link = (\n  <Link\n    to=\"/blog/post/$postId\"\n    params={{\n      postId: 'my-first-blog-post',\n    }}\n    hash=\"section-1\"\n  >\n    Section 1\n  </Link>\n)\n```\n\n----------------------------------------\n\nTITLE: Server Entry Point Setup\nDESCRIPTION: SSR server entry point configuration for TanStack Start\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/tanstack-start.md#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n// app/ssr.tsx\nimport {\n  createStartHandler,\n  defaultStreamHandler,\n} from '@tanstack/react-start/server'\nimport { getRouterManifest } from '@tanstack/react-start/router-manifest'\n\nimport { createRouter } from './router'\n\nexport default createStartHandler({\n  createRouter,\n  getRouterManifest,\n})(defaultStreamHandler)\n```\n\n----------------------------------------\n\nTITLE: Configuring Netlify Deployment in TanStack\nDESCRIPTION: Configuration setup for deploying a TanStack Start application to Netlify using the server preset configuration.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/hosting.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// app.config.ts\nimport { defineConfig } from '@tanstack/react-start/config'\n\nexport default defineConfig({\n  server: {\n    preset: 'netlify',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Trello-like Example with pnpm\nDESCRIPTION: Commands to install dependencies and start the development server using pnpm package manager. The commands will install required packages and launch the development environment.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/react/start-trellaux/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm install\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Bun Server React Installation\nDESCRIPTION: Command to install React 19 dependencies required for Bun server deployment.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/hosting.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnpm install react@rc react-dom@rc\n```\n\n----------------------------------------\n\nTITLE: Netlify Build Command Configuration\nDESCRIPTION: Command line instruction for building a TanStack application for Netlify deployment using the preset flag.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/hosting.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build --preset netlify\n```\n\n----------------------------------------\n\nTITLE: Starting TanStack Router Example with npm or yarn\nDESCRIPTION: Commands for starting the TanStack Router example application using either npm or yarn package managers.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/react/scroll-restoration/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Defining Inline Virtual Routes Configuration in TanStack Router CLI\nDESCRIPTION: A comprehensive example of defining the virtual routes structure directly in the configuration file. This approach is less common but allows for complete configuration through the CLI without an external routes file.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/routing/virtual-file-routes.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n// tsr.config.json\n{\n  \"virtualRouteConfig\": {\n    \"type\": \"root\",\n    \"file\": \"root.tsx\",\n    \"children\": [\n      {\n        \"type\": \"index\",\n        \"file\": \"home.tsx\"\n      },\n      {\n        \"type\": \"route\",\n        \"file\": \"posts/posts.tsx\",\n        \"path\": \"/posts\",\n        \"children\": [\n          {\n            \"type\": \"index\",\n            \"file\": \"posts/posts-home.tsx\"\n          },\n          {\n            \"type\": \"route\",\n            \"file\": \"posts/posts-detail.tsx\",\n            \"path\": \"$postId\"\n          }\n        ]\n      },\n      {\n        \"type\": \"layout\",\n        \"id\": \"first\",\n        \"file\": \"layout/first-pathless-layout.tsx\",\n        \"children\": [\n          {\n            \"type\": \"layout\",\n            \"id\": \"second\",\n            \"file\": \"layout/second-pathless-layout.tsx\",\n            \"children\": [\n              {\n                \"type\": \"route\",\n                \"file\": \"a.tsx\",\n                \"path\": \"/route-a\"\n              },\n              {\n                \"type\": \"route\",\n                \"file\": \"b.tsx\",\n                \"path\": \"/route-b\"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Running TanStack Router in Development Mode\nDESCRIPTION: Commands for installing dependencies and starting the TanStack Router application in development mode. This rebuilds assets automatically when files are changed.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/react/start-basic/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm install\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Running an Example Application\nDESCRIPTION: Command to start the development server for an example application.\nSOURCE: https://github.com/tanstack/router/blob/main/CONTRIBUTING.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Cloning TanStack Repositories\nDESCRIPTION: Commands to navigate to the tanstack directory and clone both the tanstack.com website and the form project repositories.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/react/start-counter/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncd tanstack\ngit clone git@github.com:TanStack/tanstack.com.git\ngit clone git@github.com:TanStack/form.git\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Router Import Approach for Type Inference\nDESCRIPTION: This snippet shows an approach where the Router instance is imported directly, which can lead to increased bundle sizes and management complexity.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/decisions-on-dx.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { router } from '@/src/app'\nexport const PostsIdLink = () => {\n  return (\n    <Link<typeof router> to=\"/posts/$postId\" params={{ postId: '123' }}>\n      Go to post 123\n    </Link>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using TanStack Router CLI watch command\nDESCRIPTION: Shell command to continuously watch specified directories and regenerate routes as needed using the TanStack Router CLI.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/routing/installation-with-router-cli.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ntsr watch\n```\n\n----------------------------------------\n\nTITLE: Using Server Function Manifest in Request Handler\nDESCRIPTION: Demonstrates how to use the server function manifest in a server request handler. It imports the manifest, looks up the requested function, dynamically imports it, and executes it with the provided arguments.\nSOURCE: https://github.com/tanstack/router/blob/main/packages/server-functions-plugin/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport serverFnManifest from 'tsr:server-fn-manifest'\n\nexport const handler = async (req: Request) => {\n  const functionId = req.url.split('/').pop()\n  invariant(functionId, 'No function ID provided')\n\n  const fnInfo = serverFnManifest[functionId]\n  invariant(fn, `Server function ${functionId} not found`)\n\n  const fnModule = await fnInfo.importer()\n  invariant(fnModule, `Server function ${functionId} could not be imported`)\n\n  const args = await req.json()\n\n  return await fnModule(...args)\n\n```\n\n----------------------------------------\n\nTITLE: Creating TanStack Start Configuration File\nDESCRIPTION: Configuration file for TanStack Start that sets up Vite with TypeScript path resolution plugin.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/build-from-scratch.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// app.config.ts\nimport { defineConfig } from '@tanstack/react-start/config'\nimport tsConfigPaths from 'vite-tsconfig-paths'\n\nexport default defineConfig({\n  vite: {\n    plugins: [\n      tsConfigPaths({\n        projects: ['./tsconfig.json'],\n      }),\n    ],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Installing TanStack Router Plugin for Vite\nDESCRIPTION: Command to install the TanStack Router plugin as a development dependency for Vite integration.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/solid/routing/installation-with-vite.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -D @tanstack/router-plugin\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for TanStack Router Example (Shell)\nDESCRIPTION: Commands to install project dependencies using either npm or yarn package managers.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/react/authenticated-routes/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Framework Documentation\nDESCRIPTION: YAML configuration block that specifies the documentation reference path and replacement mapping to convert React documentation to Solid.js documentation.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/solid/api-routes.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nref: docs/start/framework/react/api-routes.md\nreplace: { 'react': 'solid' }\n---\n```\n\n----------------------------------------\n\nTITLE: Building TanStack Start App for Netlify Using Command Line Flag\nDESCRIPTION: This command shows how to build a TanStack Start application for Netlify deployment using the --preset flag in the build command.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/solid/hosting.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build --preset netlify\n```\n\n----------------------------------------\n\nTITLE: Building and Starting TanStack Start App on Bun\nDESCRIPTION: These commands show how to build a TanStack Start application and start it on a Bun server after deployment.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/solid/hosting.md#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nbun run build\nbun run .output/server/index.mjs\n```\n\n----------------------------------------\n\nTITLE: Starting TanStack Router Example Project (Shell)\nDESCRIPTION: Commands to start the TanStack Router example project using either npm or yarn package managers.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/solid/basic/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm start\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Navigating to Example Directory\nDESCRIPTION: Command to navigate to a specific example in the repository, in this case the basic React example.\nSOURCE: https://github.com/tanstack/router/blob/main/CONTRIBUTING.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd examples/react/basic\n```\n\n----------------------------------------\n\nTITLE: Installing and Running TanStack Router Example\nDESCRIPTION: Commands for setting up and starting the TanStack Router example project. It shows how to install dependencies using either npm or yarn, and then how to start the development server.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/solid/quickstart-file-based/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm start\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Manual Deployment of TanStack Router Examples\nDESCRIPTION: Commands for manually cloning and deploying any TanStack Router example by replacing EXAMPLE_SLUG with the desired example slug, installing dependencies, and starting the development server.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/solid/quick-start.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx degit https://github.com/tanstack/router/examples/solid/EXAMPLE_SLUG my-new-project\ncd my-new-project\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: VSCode Settings Configuration\nDESCRIPTION: VSCode settings to manage the generated route tree file, including marking it as readonly and excluding it from search results and file watcher.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/routing/installation-with-webpack.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"files.readonlyInclude\": {\n    \"**/routeTree.gen.ts\": true\n  },\n  \"files.watcherExclude\": {\n    \"**/routeTree.gen.ts\": true\n  },\n  \"search.exclude\": {\n    \"**/routeTree.gen.ts\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TanStack Start for Bun Server Deployment\nDESCRIPTION: This snippet shows how to configure a TanStack Start application for deployment to a Bun server by setting the server preset in the app.config.ts file.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/solid/hosting.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// app.config.ts\nimport { defineConfig } from '@tanstack/solid-start/config'\n\nexport default defineConfig({\n  server: {\n    preset: 'bun',\n  },\n})\n\n// Or you can use the --preset flag with the build command\n// to specify the deployment target when building the application:\n// npm run build --preset bun\n```\n\n----------------------------------------\n\nTITLE: Creating Vite Configuration for TanStack Start\nDESCRIPTION: Configuration file for Vite that sets up TypeScript path aliases using the vite-tsconfig-paths plugin.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/solid/build-from-scratch.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// app.config.ts\nimport { defineConfig } from '@tanstack/solid-start/config'\nimport tsConfigPaths from 'vite-tsconfig-paths'\n\nexport default defineConfig({\n  vite: {\n    plugins: [\n      tsConfigPaths({\n        projects: ['./tsconfig.json'],\n      }),\n    ],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Directory for TanStack Projects\nDESCRIPTION: Command to create a new directory called 'tanstack' which will hold the TanStack projects for local documentation development.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/react/start-basic-rsc/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmkdir tanstack\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Command to start the development server using pnpm package manager.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/react/start-workos/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Starting TanStack Router Example using npm or yarn\nDESCRIPTION: Commands for starting the TanStack Router example application using either npm or yarn package managers.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/react/basic-default-search-params/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for TanStack Router Example (npm/yarn)\nDESCRIPTION: Commands to install project dependencies using either npm or yarn package managers.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/react/basic/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `npm install` or `yarn`\n```\n\n----------------------------------------\n\nTITLE: Starting the Project\nDESCRIPTION: Commands to start the development server or launch the project using npm or yarn. Initializes the TanStack Router application environment.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/react/kitchen-sink-react-query-file-based/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Installing unenv for Cloudflare Pages Deployment\nDESCRIPTION: This command installs the unenv package which is required for deploying TanStack Start applications to Cloudflare Pages.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/solid/hosting.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm install unenv\n```\n\n----------------------------------------\n\nTITLE: Absolute Link Component Example\nDESCRIPTION: Simple example showing how to create a static link using the Link component.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/navigation.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Link } from '@tanstack/react-router'\n\nconst link = <Link to=\"/about\">About</Link>\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite Plugin for TanStack Router\nDESCRIPTION: Installation and configuration of the TanStack Router Vite plugin for automatic route updates.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/migrate-from-react-location.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -D @tanstack/router-plugin\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\nimport { TanStackRouterVite } from '@tanstack/router-plugin/vite'\n\nexport default defineConfig({\n  // ...\n  plugins: [TanStackRouterVite(), react()],\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Directory for TanStack Projects\nDESCRIPTION: Command to create a new directory called 'tanstack' that will contain the TanStack.com repo and any TanStack project repos for local documentation editing.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/solid/start-basic/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmkdir tanstack\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for TanStack Router Example (Shell)\nDESCRIPTION: Command to install project dependencies using either npm or yarn package managers.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/solid/basic-non-nested-devtools/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite with TanStack Router Plugin\nDESCRIPTION: Configuration setup for Vite to enable file-based routing with TanStack Router. Includes plugin configuration with Solid.js integration and auto code splitting enabled.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/solid/routing/file-based-routing.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// vite.config.ts\nimport { defineConfig } from 'vite'\nimport solid from 'vite-plugin-solid'\nimport { TanStackRouterVite } from '@tanstack/router-plugin/vite'\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [\n    TanStackRouterVite({ target: 'solid', autoCodeSplitting: true }),\n    solid(),\n    // ...\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Incorrect Property Order in TanStack Router createFileRoute (TSX)\nDESCRIPTION: An example showing incorrect property ordering in createFileRoute where loader appears before beforeLoad, which breaks type inference for the context property.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/eslint/create-route-property-order.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n/* eslint \"@tanstack/router/create-route-property-order\": \"warn\" */\nimport { createFileRoute } from '@tanstack/react-router'\n\nexport const Route = createFileRoute('/foo/bar/$id')({\n  loader: async ({context}) => {\n    await context.queryClient.ensureQueryData(getQueryOptions(context.hello)),\n  },\n  beforeLoad: () => ({hello: 'world'})\n})\n```\n\n----------------------------------------\n\nTITLE: Building TanStack Start App for Vercel Using Command Line Flag\nDESCRIPTION: This command shows how to build a TanStack Start application for Vercel deployment using the --preset flag in the build command.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/solid/hosting.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build --preset vercel\n```\n\n----------------------------------------\n\nTITLE: Generating Cookie Password with OpenSSL\nDESCRIPTION: Command to generate a secure random string using OpenSSL for the cookie password. Creates a base64-encoded 24-byte random string.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/react/start-workos/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nopenssl rand -base64 24\n```\n\n----------------------------------------\n\nTITLE: Starting the TanStack Router Example with npm or yarn\nDESCRIPTION: Command to start the TanStack Router example project after installing dependencies, using either npm or yarn package managers.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/react/with-framer-motion/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Installing and Starting TanStack Router in Development Mode\nDESCRIPTION: Commands to install dependencies and start the TanStack Router application in development mode, which rebuilds assets on file changes.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/react/start-basic-rsc/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm install\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Cloning TanStack Repositories\nDESCRIPTION: Commands to clone the TanStack website and form repositories for local development. These commands should be executed from within the tanstack directory.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/react/start-basic-static/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd tanstack\ngit clone git@github.com:TanStack/tanstack.com.git\ngit clone git@github.com:TanStack/form.git\n```\n\n----------------------------------------\n\nTITLE: Configuring Documentation Reference\nDESCRIPTION: YAML frontmatter configuration specifying the documentation reference path and replacement instructions.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/solid/guide/static-route-data.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nref: docs/router/framework/react/guide/static-route-data.md\nreplace: { 'react-router': 'solid-router' }\n---\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Scroll Restoration Testing Sandbox\nDESCRIPTION: Commands to install dependencies and start the testing sandbox for scroll restoration behavior.\nSOURCE: https://github.com/tanstack/router/blob/main/e2e/solid-router/scroll-restoration-sandbox-vite/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `npm install`\n- `npm start`\n```\n\n----------------------------------------\n\nTITLE: Cloning TanStack Repositories\nDESCRIPTION: Commands to navigate to the 'tanstack' directory and clone the TanStack.com and Form repositories for local development and documentation editing.\nSOURCE: https://github.com/tanstack/router/blob/main/e2e/react-start/basic-tsr-config/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncd tanstack\ngit clone git@github.com:TanStack/tanstack.com.git\ngit clone git@github.com:TanStack/form.git\n```\n\n----------------------------------------\n\nTITLE: Creating Directory for TanStack Projects\nDESCRIPTION: Command to create a new directory called 'tanstack' where you'll clone the TanStack repositories for local development.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/react/start-clerk-basic/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmkdir tanstack\n```\n\n----------------------------------------\n\nTITLE: Cloning TanStack Repositories for Local Development\nDESCRIPTION: Commands to navigate to the tanstack directory and clone both the tanstack.com repo and a specific project repo (form in this example) for local documentation development.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/react/start-basic-auth/README.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncd tanstack\ngit clone git@github.com:TanStack/tanstack.com.git\ngit clone git@github.com:TanStack/form.git\n```\n\n----------------------------------------\n\nTITLE: Installing and Running TanStack Router Example\nDESCRIPTION: Commands for installing dependencies and starting the example project using either npm or yarn package managers.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/react/view-transitions/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\nnpm start\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Installing @tanstack/eslint-plugin-router with yarn\nDESCRIPTION: Command to install the TanStack Router ESLint plugin as a development dependency using yarn.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/eslint/eslint-plugin-router.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add -D @tanstack/eslint-plugin-router\n```\n\n----------------------------------------\n\nTITLE: Starting the TanStack Router Example Project\nDESCRIPTION: Commands to start the example project using either npm or yarn package managers.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/react/with-trpc/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Installing and Running TanStack Router Dev Environment\nDESCRIPTION: Commands to install dependencies and start the development server for TanStack Router website.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/react/start-basic-static/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm install\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server\nDESCRIPTION: Commands for starting the development server using either npm or yarn package manager.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/solid/basic-devtools-panel/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm start\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Running TanStack.com Project Locally\nDESCRIPTION: These commands navigate to the tanstack.com directory, install dependencies, and start the development server. This allows for local previewing of documentation changes.\nSOURCE: https://github.com/tanstack/router/blob/main/e2e/solid-start/basic-tsr-config/README.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncd tanstack.com\npnpm i\n# The app will run on https://localhost:3000 by default\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running TanStack Router Example\nDESCRIPTION: Commands to install project dependencies using pnpm and start the development server for a TanStack Router example.\nSOURCE: https://github.com/tanstack/router/blob/main/e2e/solid-router/rspack-basic-virtual-named-export-config-file-based/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm install\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Creating Directory for TanStack Projects\nDESCRIPTION: Command to create a directory named 'tanstack' that will house the TanStack.com repo and other TanStack project repos for local documentation editing.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/react/start-basic/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmkdir tanstack\n```\n\n----------------------------------------\n\nTITLE: Starting the Example Application\nDESCRIPTION: Commands for starting the example application using either npm or yarn package manager.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/react/quickstart-webpack-file-based/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm start\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Enabling Structural Sharing Per Hook in TanStack Router\nDESCRIPTION: Demonstrates how to enable structural sharing for a specific hook usage, allowing for fine-grained control over the optimization.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/render-optimizations.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst result = Route.useSearch({\n  select: (search) => {\n    return {\n      foo: search.foo,\n      hello: `hello ${search.foo}`,\n    }\n  },\n  structuralSharing: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Up Local Documentation Development Environment\nDESCRIPTION: Commands to navigate to the tanstack.com directory, install dependencies, and start the development server for previewing documentation changes locally.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/react/start-basic-auth/README.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncd tanstack.com\npnpm i\n# The app will run on https://localhost:3000 by default\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Avoiding Direct Usage of LinkProps (Anti-Pattern)\nDESCRIPTION: An example showing a performance-degrading pattern where LinkProps is directly used as a type annotation without narrowing, causing TypeScript to perform expensive structural comparisons with a large union type.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/type-safety.md#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nconst props: LinkProps = {\n  to: '/posts/',\n}\n\nreturn (\n  <Link {...props}>\n)\n```\n\n----------------------------------------\n\nTITLE: Installing and Running TanStack Router Example with npm or yarn\nDESCRIPTION: Commands to install dependencies and start the TanStack Router example application using either npm or yarn package managers.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/react/search-validator-adapters/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n- `npm install` or `yarn`\n- `npm start` or `yarn start`\n```\n\n----------------------------------------\n\nTITLE: Setting up Local Development Environment\nDESCRIPTION: Commands to enter the TanStack website directory, install dependencies, and start the development server running on localhost:3000.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/react/start-basic-static/README.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncd tanstack.com\npnpm i\n# The app will run on https://localhost:3000 by default\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Component-Based Navigation Blocking with Custom UI in TanStack Router and SolidJS\nDESCRIPTION: This example demonstrates how to implement a component-based navigation blocking solution with a custom UI. It uses the Block component with a render prop pattern to display a custom confirmation dialog when navigation is blocked.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/solid/guide/navigation-blocking.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Block } from '@tanstack/solid-router'\n\nfunction MyComponent() {\n  const [formIsDirty, setFormIsDirty] = createSignal(false)\n\n  return (\n    <Block shouldBlockFn={() => formIsDirty()} withResolver>\n      {({ status, proceed, reset }) => (\n        <>\n          {/* ... */}\n          {status === 'blocked' && (\n            <div>\n              <p>Are you sure you want to leave?</p>\n              <button onClick={proceed}>Yes</button>\n              <button onClick={reset}>No</button>\n            </div>\n          )}\n        </>\n      )}\n    </Block>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Starting TanStack Router Example Project (Shell)\nDESCRIPTION: Command to start the TanStack Router example project using either npm or yarn package managers.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/solid/basic-non-nested-devtools/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm start\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for TanStack Router Example (Shell)\nDESCRIPTION: This command installs the necessary dependencies for the TanStack Router example project using pnpm package manager.\nSOURCE: https://github.com/tanstack/router/blob/main/e2e/react-router/rspack-basic-virtual-named-export-config-file-based/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Running the Monorepo Example\nDESCRIPTION: Installation and development commands for setting up and running the monorepo project\nSOURCE: https://github.com/tanstack/router/blob/main/examples/react/router-monorepo-simple/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm dev\n```\n\n----------------------------------------\n\nTITLE: Installing TanStack Start CLI with PNPM\nDESCRIPTION: Command to install and create a new TanStack Start project using PNPM package manager.\nSOURCE: https://github.com/tanstack/router/blob/main/packages/create-start/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm create @tanstack/start\n```\n\n----------------------------------------\n\nTITLE: Setting Solid.js Target in TanStack Router Configuration\nDESCRIPTION: Target configuration for TanStack Router specifying Solid.js as the framework target in the router configuration file.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/solid/routing/installation-with-router-cli.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"target\": \"solid\"\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning TanStack Repositories for Local Documentation Editing\nDESCRIPTION: Commands to navigate to the tanstack directory and clone both the tanstack.com website repository and a specific project repository (in this case, form) for local documentation editing.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/react/start-basic-react-query/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncd tanstack\ngit clone git@github.com:TanStack/tanstack.com.git\ngit clone git@github.com:TanStack/form.git\n```\n\n----------------------------------------\n\nTITLE: Configuring Replacements for Documentation\nDESCRIPTION: This YAML-like snippet defines replacements to be made in the documentation, specifically replacing 'react-router' with 'solid-router'. This is likely used for generating docs for different frameworks.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/solid/routing/routing-concepts.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nref: docs/router/framework/react/routing/routing-concepts.md\nreplace: { 'react-router': 'solid-router' }\n---\n```\n\n----------------------------------------\n\nTITLE: Installing TanStack Router Plugin with npm\nDESCRIPTION: Command to install the TanStack Router plugin as a development dependency using npm.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/solid/routing/file-based-routing.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -D @tanstack/router-plugin\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Commands to launch the development server for the project using npm or yarn\nSOURCE: https://github.com/tanstack/router/blob/main/examples/react/quickstart-file-based/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Installing and Starting TanStack Router in Development Mode\nDESCRIPTION: Commands to install dependencies and start the TanStack Router application in development mode. This rebuilds assets automatically on file changes.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/react/start-clerk-basic/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm install\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Installing and Running the TanStack Router Convex Demo\nDESCRIPTION: Commands to install dependencies and start the development server for the Trello-like demo application using Convex DB. This initializes the project and runs the development environment.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/react/start-convex-trellaux/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm install\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for TanStack Start with Solid.js\nDESCRIPTION: TypeScript configuration file setup with recommended settings for TanStack Start and Solid.js, including JSX preservation and module settings.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/solid/build-from-scratch.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"jsx\": \"preserve\",\n    \"jsxImportSource\": \"solid-js\",\n    \"moduleResolution\": \"Bundler\",\n    \"module\": \"ESNext\",\n    \"target\": \"ES2022\",\n    \"skipLibCheck\": true,\n    \"strictNullChecks\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Variables for Firebase\nDESCRIPTION: This snippet illustrates the structure of environment variables necessary for Firebase configuration in a web application. Developers need to replace the placeholder values with their actual Firebase credentials to properly integrate Firebase services.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/react/authenticated-routes-firebase/README.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n````VITE_FIREBASE_API_KEY=\nVITE_FIREBASE_AUTH_DOMAIN=\nVITE_FIREBASE_PROJECT_ID=\nVITE_FIREBASE_STORAGE_BUCKET=\nVITE_FIREBASE_MESSAGING_SENDER_ID=\nVITE_FIREBASE_APP_ID=````\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for TanStack Router Example (Shell)\nDESCRIPTION: Command to install project dependencies using pnpm package manager.\nSOURCE: https://github.com/tanstack/router/blob/main/e2e/solid-router/rspack-basic-file-based/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Starting Development Server for TanStack Router\nDESCRIPTION: These commands install the project dependencies using pnpm and start the development server. This allows for real-time rebuilding of assets on file changes.\nSOURCE: https://github.com/tanstack/router/blob/main/e2e/solid-start/basic-tsr-config/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm install\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Configuration Frontmatter for Navigation Documentation\nDESCRIPTION: YAML frontmatter configuration specifying the documentation reference path and replacement instructions for router framework mentions\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/solid/guide/navigation.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nref: docs/router/framework/react/guide/navigation.md\nreplace: { 'react-router': 'solid-router' }\n---\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Package Managers\nDESCRIPTION: Commands for installing project dependencies using either npm or yarn package manager.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/react/quickstart-webpack-file-based/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Manual Deployment of TanStack Router Examples\nDESCRIPTION: Commands for manually cloning and deploying any TanStack Router example project, where EXAMPLE_SLUG should be replaced with the desired example name.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/quick-start.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx gitpick TanStack/router/tree/main/examples/react/EXAMPLE_SLUG my-new-project\ncd my-new-project\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Route Framework Configuration Template\nDESCRIPTION: YAML frontmatter configuration for documentation that specifies replacement of React Router references with Solid Router references.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/solid/guide/not-found-errors.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nref: docs/router/framework/react/guide/not-found-errors.md\nreplace: { 'react-router': 'solid-router' }\n---\n```\n\n----------------------------------------\n\nTITLE: Passing Initial Router Context in TypeScript\nDESCRIPTION: Shows how to pass the initial router context when creating a router. The context includes a user object with id and name properties.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/router-context.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createRouter } from '@tanstack/react-router'\n\n// Use the routerContext you created to create your router\nconst router = createRouter({\n  routeTree,\n  context: {\n    user: {\n      id: '123',\n      name: 'John Doe',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Route Tree Documentation Replacement\nDESCRIPTION: YAML-style frontmatter configuration that specifies the documentation reference path and defines a replacement rule to convert react-router references to solid-router.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/solid/routing/route-trees.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nref: docs/router/framework/react/routing/route-trees.md\nreplace: { 'react-router': 'solid-router' }\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Route Tree File Footer in TanStack Router\nDESCRIPTION: Sets the default content to be appended to the end of the generated route tree file. By default, it's an empty array, allowing for custom content to be added if needed.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/api/file-based-routing.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[]\n```\n\n----------------------------------------\n\nTITLE: Using JSON Helper Function in API Routes (TypeScript)\nDESCRIPTION: Shows how to use the json helper function to simplify JSON responses in API routes. This function automatically sets the Content-Type header and serializes the JSON object.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/api-routes.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// routes/api/hello.ts\nimport { json } from '@tanstack/react-start'\nimport { createAPIFileRoute } from '@tanstack/react-start/api'\n\nexport const APIRoute = createAPIFileRoute('/api/hello')({\n  GET: async ({ request }) => {\n    return json({ message: 'Hello, World!' })\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: TanStack Router Documentation Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for a documentation page, specifying the reference path and replacement mapping\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/solid/guide/preloading.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nref: docs/router/framework/react/guide/preloading.md\nreplace: { 'react-router': 'solid-router' }\n---\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for TanStack Router Example\nDESCRIPTION: Commands for installing project dependencies using either npm or yarn package managers.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/react/with-trpc-react-query/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Running Development Server for TanStack Router Example (Shell)\nDESCRIPTION: This command starts the development server for the TanStack Router example project, allowing you to view and interact with the example in a local environment.\nSOURCE: https://github.com/tanstack/router/blob/main/e2e/react-router/rspack-basic-virtual-named-export-config-file-based/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: HTML Image Embedding in Markdown\nDESCRIPTION: Embeds a tracking pixel image from Scarf analytics platform with a unique project identifier.\nSOURCE: https://github.com/tanstack/router/blob/main/packages/solid-router-devtools/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<img src=\"https://static.scarf.sh/a.png?x-pxid=d988eb79-b0fc-4a2b-8514-6a1ab932d188\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Module Declaration for Router Type Inference\nDESCRIPTION: This code demonstrates how to use TypeScript's module declaration to make the Router instance available for type inference throughout the application without imports.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/decisions-on-dx.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// src/app.tsx\ndeclare module '@tanstack/react-router' {\n  interface Register {\n    router: typeof router\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Local Documentation Preview Environment\nDESCRIPTION: Commands to navigate to the tanstack.com directory, install dependencies, and start the development server to preview documentation changes locally at http://localhost:3000.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/solid/start-basic/README.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncd tanstack.com\npnpm i\n# The app will run on https://localhost:3000 by default\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Using Cached Build with NX Affected\nDESCRIPTION: Command for using NX affected to perform cached builds of only changed packages.\nSOURCE: https://github.com/tanstack/router/blob/main/CONTRIBUTING.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Client Entry Point Setup\nDESCRIPTION: Client-side hydration setup for TanStack Start\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/tanstack-start.md#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n// app/client.tsx\nimport { hydrateRoot } from 'react-dom/client'\nimport { StartClient } from '@tanstack/react-start'\nimport { createRouter } from './router'\n\nconst router = createRouter({\n  scrollRestoration: true,\n})\n\nhydrateRoot(document!, <StartClient router={router} />)\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright Test Dependencies\nDESCRIPTION: Command to install Playwright test dependencies required for end-to-end testing.\nSOURCE: https://github.com/tanstack/router/blob/main/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm exec playwright install\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Route for '/about' in TanStack Router\nDESCRIPTION: Demonstrates how to create a basic route for the '/about' path, including the component definition within the same file.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/routing/routing-concepts.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// about.tsx\nimport { createFileRoute } from '@tanstack/react-router'\n\nexport const Route = createFileRoute('/about')({\n  component: AboutComponent,\n})\n\nfunction AboutComponent() {\n  return <div>About</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Authentication Middleware with Custom Headers\nDESCRIPTION: Implements client-side middleware to automatically add an Authorization header to requests using a token retrieval function.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/middleware.md#2025-04-21_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getToken } from 'my-auth-library'\n\nconst authMiddleware = createMiddleware().client(async ({ next }) => {\n  return next({\n    headers: {\n      Authorization: `Bearer ${getToken()}`,\n    },\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Framework Documentation\nDESCRIPTION: YAML configuration block that defines documentation reference path and framework replacement mapping. Specifies that 'react' should be replaced with 'solid' throughout the document.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/solid/static-prerendering.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nref: docs/start/framework/react/static-prerendering.md\nreplace: { 'react': 'solid' }\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Characters for Path Params in TanStack Router (TSX)\nDESCRIPTION: This snippet shows how to configure the router to allow specific characters in path params. It demonstrates setting the pathParamsAllowedCharacters option in the router creation.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/path-params.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst router = createRouter({\n  ...\n  pathParamsAllowedCharacters: ['@']\n})\n```\n\n----------------------------------------\n\nTITLE: Installing solid-js for Bun Deployment\nDESCRIPTION: This command ensures the solid-js package is installed, which is required for deploying TanStack Start applications to a Bun server.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/solid/hosting.md#2025-04-21_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nnpm install solid-js\n```\n\n----------------------------------------\n\nTITLE: Zod Default Transforms Example\nDESCRIPTION: Example of using Zod transforms with default values for search parameter validation.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/search-params.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createFileRoute } from '@tanstack/react-router'\nimport { z } from 'zod'\n\nconst productSearchSchema = z.object({\n  page: z.number().default(1),\n  filter: z.string().default(''),\n  sort: z.enum(['newest', 'oldest', 'price']).default('newest'),\n})\n\nexport const Route = createFileRoute('/shop/products/')({ \n  validateSearch: productSearchSchema,\n})\n```\n\n----------------------------------------\n\nTITLE: Server Function Accepting String Parameter\nDESCRIPTION: This code demonstrates a server function that accepts a simple string parameter.  It uses the `validator` method to ensure the input is a string and then uses it in the `handler` to return a greeting. The `method` is set to `GET`.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/server-functions.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createServerFn } from '@tanstack/react-start'\n\nexport const greet = createServerFn({\n  method: 'GET',\n})\n  .validator((data: string) => data)\n  .handler(async (ctx) => {\n    return `Hello, ${ctx.data}!`\n  })\n\ngreet({\n  data: 'John',\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Status Code Response in TanStack Router\nDESCRIPTION: Demonstrates setting custom HTTP status codes in server function responses using setResponseStatus utility.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/server-functions.md#2025-04-21_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createServerFn } from '@tanstack/react-start'\nimport { setResponseStatus } from '@tanstack/react-start/server'\n\nexport const getServerTime = createServerFn({ method: 'GET' }).handler(\n  async () => {\n    setResponseStatus(201)\n    return new Date().toISOString()\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Solid.js and Vite Dependencies\nDESCRIPTION: Commands to install Solid.js and the necessary Vite plugins for the project.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/solid/build-from-scratch.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm i solid-js\nnpm i -D vite-plugin-solid vite-tsconfig-paths\n```\n\n----------------------------------------\n\nTITLE: Custom Headers Redirect Implementation\nDESCRIPTION: Shows how to add custom headers to a redirect response in a server function.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/server-functions.md#2025-04-21_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\nimport { redirect } from '@tanstack/react-router'\nimport { createServerFn } from '@tanstack/react-start'\n\nexport const doStuff = createServerFn({ method: 'GET' }).handler(async () => {\n  // Redirect the user to the home page with a custom header\n  throw redirect({\n    to: '/',\n    headers: {\n      'X-Custom-Header': 'value',\n    },\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Up Main Entry Point for File-Based Routing\nDESCRIPTION: Main application entry point that imports the auto-generated route tree, creates a router instance, and renders the application with RouterProvider. Includes type registration for TypeScript safety.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/solid/quick-start.md#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { render } from 'solid-js/web'\nimport { RouterProvider, createRouter } from '@tanstack/solid-router'\n\n// Import the generated route tree\nimport { routeTree } from './routeTree.gen'\n\n// Create a new router instance\nconst router = createRouter({ routeTree })\n\n// Register the router instance for type safety\ndeclare module '@tanstack/solid-router' {\n  interface Register {\n    router: typeof router\n  }\n}\n\n// Render the app\nconst rootElement = document.getElementById('root')!\nif (!rootElement.innerHTML) {\n  render(() => <RouterProvider router={router} />, rootElement)\n}\n```\n\n----------------------------------------\n\nTITLE: Using TanStack Query for Deferred Data in Components (TypeScript/React)\nDESCRIPTION: This snippet shows how to use TanStack Query hooks in React components to handle deferred data loading. It demonstrates suspense-based loading for both fast and slow data.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/deferred-data-loading.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// src/routes/posts.$postId.tsx\nimport { createFileRoute } from '@tanstack/react-router'\nimport { useSuspenseQuery } from '@tanstack/react-query'\nimport { slowDataOptions, fastDataOptions } from '~/api/query-options'\n\nexport const Route = createFileRoute('/posts/$postId')({\n  // ...\n  component: PostIdComponent,\n})\n\nfunction PostIdComponent() {\n  const fastData = useSuspenseQuery(fastDataOptions())\n\n  // do something with fastData\n\n  return (\n    <Suspense fallback={<div>Loading...</div>}>\n      <SlowDataComponent />\n    </Suspense>\n  )\n}\n\nfunction SlowDataComponent() {\n  const data = useSuspenseQuery(slowDataOptions())\n\n  return <div>{data}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Root Route Component\nDESCRIPTION: Implementation of the root route component with navigation links and router devtools.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/migrate-from-react-location.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createRootRoute, Outlet, Link } from '@tanstack/react-router'\nimport { TanStackRouterDevtools } from '@tanstack/router-devtools'\n\nexport const Route = createRootRoute({\n  component: () => {\n    return (\n      <>\n        <div>\n          <Link to=\"/\" activeOptions={{ exact: true }}>\n            Home\n          </Link>\n          <Link to=\"/posts\">Posts</Link>\n        </div>\n        <hr />\n        <Outlet />\n        <TanStackRouterDevtools />\n      </>\n    )\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Installing and Running TanStack Router in Development Mode\nDESCRIPTION: Commands to install dependencies and start the TanStack Router app in development mode. This allows for rebuilding assets on file changes.\nSOURCE: https://github.com/tanstack/router/blob/main/e2e/react-start/basic-tsr-config/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm install\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Installing @tanstack/eslint-plugin-router with pnpm\nDESCRIPTION: Command to install the TanStack Router ESLint plugin as a development dependency using pnpm.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/eslint/eslint-plugin-router.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add -D @tanstack/eslint-plugin-router\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a Route Instance in React with TanStack Router\nDESCRIPTION: This example demonstrates how to create a Route instance for the index route, configure it with a parent route, path, loader, and component. It also shows how to use the route's loader data in a React component.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/RouteClass.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Route } from '@tanstack/react-router'\nimport { rootRoute } from './__root'\n\nconst indexRoute = new Route({\n  getParentRoute: () => rootRoute,\n  path: '/',\n  loader: () => {\n    return 'Hello World'\n  },\n  component: IndexComponent,\n})\n\nfunction IndexComponent() {\n  const data = indexRoute.useLoaderData()\n  return <div>{data}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Directory for TanStack Projects\nDESCRIPTION: This command creates a new directory called 'tanstack' to house the TanStack projects for local development and documentation editing.\nSOURCE: https://github.com/tanstack/router/blob/main/e2e/solid-start/basic-tsr-config/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmkdir tanstack\n```\n\n----------------------------------------\n\nTITLE: Using TanStack Router CLI generate command\nDESCRIPTION: Shell command to generate routes for a project based on the provided configuration using the TanStack Router CLI.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/routing/installation-with-router-cli.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ntsr generate\n```\n\n----------------------------------------\n\nTITLE: Starting TanStack Router Example Project (npm/yarn)\nDESCRIPTION: Commands to start the TanStack Router example project using either npm or yarn package managers.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/react/basic/README.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- `npm start` or `yarn start`\n```\n\n----------------------------------------\n\nTITLE: Installation and Running of the Application\nDESCRIPTION: This snippet provides the commands to install dependencies and start the web application. It's essential for developers to ensure they have the appropriate package manager installed (npm or yarn) before executing these commands.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/react/authenticated-routes-firebase/README.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n- `npm install` or `yarn`\n- `npm start` or `yarn start`\n```\n\n----------------------------------------\n\nTITLE: Creating the Router with TanStack Router in TypeScript\nDESCRIPTION: This snippet defines a function to create a router using TanStack Router, specifying the route tree and enabling scroll restoration for better user experience during navigation.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/solid/learn-the-basics.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// app/router.tsx\nimport { createRouter as createTanStackRouter } from '@tanstack/solid-router'\nimport { routeTree } from './routeTree.gen'\n\nexport function createRouter() {\n  const router = createTanStackRouter({\n    routeTree,\n    scrollRestoration: true,\n  })\n\n  return router\n}\n\ndeclare module '@tanstack/solid-router' {\n  interface Register {\n    router: ReturnType<typeof createRouter>\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: VSCode Settings for Route Tree File\nDESCRIPTION: VSCode configuration to handle the generated route tree file, including read-only settings and exclusion from search and file watching\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/routing/installation-with-esbuild.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"files.readonlyInclude\": {\n    \"**/routeTree.gen.ts\": true\n  },\n  \"files.watcherExclude\": {\n    \"**/routeTree.gen.ts\": true\n  },\n  \"search.exclude\": {\n    \"**/routeTree.gen.ts\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Navigation Hook with ValidateNavigateOptions\nDESCRIPTION: Shows how to create a custom hook for conditional navigation using ValidateNavigateOptions utility.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/type-utilities.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nexport interface UseConditionalNavigateResult {\n  enable: () => void\n  disable: () => void\n  navigate: () => void\n}\n\nexport function useConditionalNavigate<\n  TRouter extends RegisteredRouter = RegisteredRouter,\n  TOptions,\n>(\n  navigateOptions: ValidateNavigateOptions<TRouter, TOptions>,\n): UseConditionalNavigateResult\nexport function useConditionalNavigate(\n  navigateOptions: ValidateNavigateOptions,\n): UseConditionalNavigateResult {\n  const [enabled, setEnabled] = useState(false)\n  const navigate = useNavigate()\n  return {\n    enable: () => setEnabled(true),\n    disable: () => setEnabled(false),\n    navigate: () => {\n      if (enabled) {\n        navigate(navigateOptions)\n      }\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript as Development Dependency\nDESCRIPTION: Command to install TypeScript as a development dependency for the project.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/solid/build-from-scratch.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm i -D typescript\n```\n\n----------------------------------------\n\nTITLE: Importing TanStack Router Devtools\nDESCRIPTION: Basic import statement for the devtools component.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/devtools.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { TanStackRouterDevtools } from '@tanstack/react-router-devtools'\n```\n\n----------------------------------------\n\nTITLE: Hydrating Client-Side Application in TypeScript\nDESCRIPTION: This snippet showcases how to hydrate the client-side React application using the StartClient component, enabling client-side routing after the server-side rendering is completed.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/solid/learn-the-basics.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// app/client.tsx\n/// <reference types=\"vinxi/types/client\" />\nimport { hydrate } from 'solid-js/web'\nimport { StartClient } from '@tanstack/solid-start'\nimport { createRouter } from './router'\n\nconst router = createRouter()\n\nhydrate(() => <StartClient router={router} />, document)\n```\n\n----------------------------------------\n\nTITLE: Creating TanStack Directory Structure\nDESCRIPTION: Command to create the base directory for TanStack projects local development.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/react/start-basic-static/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmkdir tanstack\n```\n\n----------------------------------------\n\nTITLE: Matching Non-Matching Route with useMatchRoute in TanStack Router (TSX)\nDESCRIPTION: This example shows how the useMatchRoute hook returns false when the current route '/posts/123' doesn't match the specified path '/posts'.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/useMatchRouteHook.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// Current location: /posts/123\nfunction Component() {\n  const matchRoute = useMatchRoute()\n  const params = matchRoute({ to: '/posts' })\n  //    ^ false\n}\n```\n\n----------------------------------------\n\nTITLE: Creating TanStack Router Configuration\nDESCRIPTION: Router configuration file that sets up TanStack Router with the generated route tree and scroll restoration.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/solid/build-from-scratch.md#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n// app/router.tsx\nimport { createRouter as createTanStackRouter } from '@tanstack/solid-router'\nimport { routeTree } from './routeTree.gen'\n\nexport function createRouter() {\n  const router = createTanStackRouter({\n    routeTree,\n    scrollRestoration: true,\n  })\n\n  return router\n}\n\ndeclare module '@tanstack/solid-router' {\n  interface Register {\n    router: ReturnType<typeof createRouter>\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for Path Aliases\nDESCRIPTION: Configuration in app.config.ts to enable path aliases using the vite-tsconfig-paths plugin.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/path-aliases.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// app.config.ts\nimport { defineConfig } from '@tanstack/react-start/config'\nimport viteTsConfigPaths from 'vite-tsconfig-paths'\n\nexport default defineConfig({\n  vite: {\n    plugins: [\n      // this is the plugin that enables path aliases\n      viteTsConfigPaths({\n        projects: ['./tsconfig.json'],\n      }),\n    ],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Installation commands for project dependencies using npm or yarn package managers\nSOURCE: https://github.com/tanstack/router/blob/main/examples/react/quickstart-file-based/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server for TanStack Router Example (Shell)\nDESCRIPTION: Command to start the development server for the TanStack Router example project.\nSOURCE: https://github.com/tanstack/router/blob/main/e2e/solid-router/rspack-basic-file-based/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Documentation Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration block specifying the documentation reference path and content replacement instructions.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/solid/guide/type-safety.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nref: docs/router/framework/react/guide/type-safety.md\nreplace: { 'react-router': 'solid-router' }\n---\n```\n\n----------------------------------------\n\nTITLE: Cloning TanStack Repositories for Local Documentation Development\nDESCRIPTION: Commands to navigate to the tanstack directory and clone both the TanStack.com website repository and a specific project repository (form in this example) for local documentation editing.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/solid/start-basic/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncd tanstack\ngit clone git@github.com:TanStack/tanstack.com.git\ngit clone git@github.com:TanStack/form.git\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Query Function in a React Component\nDESCRIPTION: This example shows how to use the useQuery hook to call a Convex query function from a React component, passing the required arguments.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/react/start-convex-trellaux/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: 'hello',\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Route with Parent Reference in TanStack Router\nDESCRIPTION: Demonstrates how to create a basic route configuration with parent route reference using code-based routing approach.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/decisions-on-dx.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createRoute } from '@tanstack/react-router'\nimport { postsRoute } from './postsRoute'\n\nexport const postsIndexRoute = createRoute({\n  getParentRoute: () => postsRoute,\n  path: '/',\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Status Code Redirect Implementation\nDESCRIPTION: Shows how to implement a redirect with a custom status code in a server function.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/react/server-functions.md#2025-04-21_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\nimport { redirect } from '@tanstack/react-router'\nimport { createServerFn } from '@tanstack/react-start'\n\nexport const doStuff = createServerFn({ method: 'GET' }).handler(async () => {\n  // Redirect the user to the home page with a 301 status code\n  throw redirect({\n    to: '/',\n    status: 301,\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Framework Documentation\nDESCRIPTION: YAML front matter configuration that specifies documentation reference path and replacement mapping to convert React documentation to Solid framework.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/solid/static-server-functions.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nref: docs/start/framework/react/static-server-functions.md\nreplace: { 'react': 'solid' }\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring TanStack Start for Netlify Deployment\nDESCRIPTION: This snippet shows how to configure a TanStack Start application for deployment to Netlify by setting the server preset in the app.config.ts file.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/solid/hosting.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// app.config.ts\nimport { defineConfig } from '@tanstack/solid-start/config'\n\nexport default defineConfig({\n  server: {\n    preset: 'netlify',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Documentation\nDESCRIPTION: YAML frontmatter configuration specifying documentation settings and string replacements for framework-specific terms.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/solid/devtools.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Devtools\nref: docs/router/framework/react/devtools.md\nreplace:\n  {\n    'react-router-devtools': 'solid-router-devtools',\n    'React': 'Solid',\n    'className': 'class',\n    'react/examples/basic-devtools-panel': 'solid/examples/basic-devtools-panel',\n  }\n```\n\n----------------------------------------\n\nTITLE: Building Route Tree in TanStack Router\nDESCRIPTION: Shows how to stitch together routes into a route tree structure for router initialization.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/decisions-on-dx.md#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst routeTree = rootRoute.addChildren([\n  postsRoute.addChildren([postsIndexRoute, postsIdRoute]),\n])\n```\n\n----------------------------------------\n\nTITLE: Initializing a New Project with NPM\nDESCRIPTION: Commands to create a new directory for the project and initialize an NPM package.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/start/framework/solid/build-from-scratch.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmkdir myApp\ncd myApp\nnpm init -y\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Running the TanStack.com Website Locally\nDESCRIPTION: Commands to navigate to the tanstack.com directory, install dependencies, and start the development server to preview documentation changes locally. The app will run on port 3000 by default.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/react/start-basic-react-query/README.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncd tanstack.com\npnpm i\n# The app will run on https://localhost:3000 by default\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Installing and Running TanStack Router Example\nDESCRIPTION: Commands for installing dependencies and starting the TanStack Router example application. The steps include package installation using either npm or yarn, followed by starting the development server.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/react/basic-virtual-inside-file-based/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm start\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Cloning the TanStack Router Repository with GitHub CLI\nDESCRIPTION: Command to clone the TanStack Router repository using GitHub CLI.\nSOURCE: https://github.com/tanstack/router/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngh repo clone TanStack/router\n```\n\n----------------------------------------\n\nTITLE: Installing and Starting TanStack Development Environment\nDESCRIPTION: Commands for installing dependencies and starting the development server for TanStack.com. This enables rebuilding assets on file changes in development mode.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/solid/start-basic/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm install\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Starting TanStack Router Example in Bash\nDESCRIPTION: Commands to set up and run the example application using either npm or yarn. First install all dependencies, then start the development server.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/solid/kitchen-sink-file-based/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for TanStack Router Example (Shell)\nDESCRIPTION: Commands to install project dependencies using either npm or yarn package managers.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/solid/basic-file-based/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for TanStack Router Example (Shell)\nDESCRIPTION: Commands to install project dependencies using either npm or yarn package managers.\nSOURCE: https://github.com/tanstack/router/blob/main/examples/solid/basic/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Installing TanStack Router Plugin via NPM\nDESCRIPTION: Command to install the TanStack Router Plugin as a development dependency using npm package manager.\nSOURCE: https://github.com/tanstack/router/blob/main/packages/router-plugin/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D @tanstack/router-plugin\n```\n\n----------------------------------------\n\nTITLE: Updating Route Files for Scroll Restoration Testing\nDESCRIPTION: Instructions for creating route files and updating necessary arrays in specific files to ensure proper testing of scroll restoration behavior.\nSOURCE: https://github.com/tanstack/router/blob/main/e2e/solid-router/scroll-restoration-sandbox-vite/README.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- Create your files in `src/routes` directory.\n- Make sure you update the arrays in the following files with the expected routes\n  - `tests/app.spec.ts` > routes array\n  - `src/routes/__root.tsx` > Nav component, routes array\n  - `src/routes/index.tsx` > Navigation test suite, routes array\n```\n\n----------------------------------------\n\nTITLE: Creating New Project Directory in Shell\nDESCRIPTION: Commands to create a new project directory and initialize npm project\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/guide/tanstack-start.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmkdir myApp\ncd myApp\nnpm init -y\n```\n\n----------------------------------------\n\nTITLE: Using useLoaderDeps Hook in TanStack Router (TSX)\nDESCRIPTION: This snippet demonstrates various ways to use the useLoaderDeps hook in a React component. It shows how to use the hook with different options and how to use it with a route API.\nSOURCE: https://github.com/tanstack/router/blob/main/docs/router/framework/react/api/router/useLoaderDepsHook.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLoaderDeps } from '@tanstack/react-router'\n\nconst routeApi = getRouteApi('/posts/$postId')\n\nfunction Component() {\n  const deps = useLoaderDeps({ from: '/posts/$postId' })\n\n  // OR\n\n  const routeDeps = routeApi.useLoaderDeps()\n\n  // OR\n\n  const postId = useLoaderDeps({\n    from: '/posts',\n    select: (deps) => deps.view,\n  })\n\n  // ...\n}\n```"
  }
]