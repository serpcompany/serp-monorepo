[
  {
    "owner": "ddev",
    "repo": "ddev",
    "content": "TITLE: Setting up WordPress with DDEV using Bedrock\nDESCRIPTION: Commands to create a WordPress site using Bedrock and configure DDEV. This sets up a modern, Composer-based WordPress installation with appropriate database settings.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/quickstart.md#2025-04-19_snippet_48\n\nLANGUAGE: bash\nCODE:\n```\nmkdir my-wp-site && cd my-wp-site\nddev config --project-type=wordpress --docroot=web\nddev start\nddev composer create roots/bedrock\n```\n\n----------------------------------------\n\nTITLE: Setting up Node.js Web Server with DDEV\nDESCRIPTION: This script configures a basic Node.js Express web server in DDEV using the generic webserver type. It sets up the necessary exposed ports and daemons to run a Node.js application on port 3000.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/quickstart.md#2025-04-19_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nexport NODEJS_SITENAME=my-nodejs-site\nmkdir ${NODEJS_SITENAME} && cd ${NODEJS_SITENAME}\nddev config --project-type=generic --webserver-type=generic\nddev start\nddev npm install express\n\ncat <<EOF > .ddev/config.nodejs.yaml\nweb_extra_exposed_ports:\n- name: node-example\n  container_port: 3000\n  http_port: 80\n  https_port: 443\n\nweb_extra_daemons:\n- name: \"node-example\"\n  command: \"node server.js\"\n  directory: /var/www/html\nEOF\n\nddev exec curl -s -O https://raw.githubusercontent.com/ddev/test-nodejs/main/server.js\nddev restart\nddev launch\n```\n\n----------------------------------------\n\nTITLE: Installing DDEV via Homebrew on macOS\nDESCRIPTION: Commands to install DDEV using Homebrew package manager on macOS and initialize mkcert for SSL certificates.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/install/ddev-installation.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install DDEV\nbrew install ddev/ddev/ddev\n\n# One-time initialization of mkcert\nmkcert -install\n```\n\n----------------------------------------\n\nTITLE: Snapshotting and Restoring a Database in DDEV\nDESCRIPTION: Demonstrates how to create and restore database snapshots using DDEV commands. Snapshots are stored as gzipped files in the project's .ddev/db_snapshots directory.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/cli.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nddev snapshot\nCreating database snapshot d9_20220107124831-mariadb_10.3.gz\nCreated database snapshot d9_20220107124831-mariadb_10.3.gz\n\nddev snapshot restore d9_20220107124831\nStopping db container for snapshot restore of 'd9_20220107124831-mariadb_10.3.gz'...\nRestored database snapshot d9_20220107124831-mariadb_10.3.gz\n```\n\n----------------------------------------\n\nTITLE: Setting PHP Version in config.yaml (YAML)\nDESCRIPTION: Example of setting the PHP version to 8.3 in the project's config.yaml file.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/configuration/config.md#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nphp_version: \"8.3\"\n```\n\n----------------------------------------\n\nTITLE: Initializing DDEV Project in Bash\nDESCRIPTION: Commands to set up a new DDEV project. This includes changing to the project directory, configuring the project, starting it, and launching it in a browser.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/project.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd project-directory\nddev config\nddev start\nddev launch\n```\n\n----------------------------------------\n\nTITLE: Installing Drupal 11 with DDEV\nDESCRIPTION: Sets up a new Drupal 11 project using DDEV with Composer and Drush. Includes project configuration, dependency installation, and site initialization.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/quickstart.md#2025-04-19_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nmkdir my-drupal-site && cd my-drupal-site\nddev config --project-type=drupal11 --docroot=web\nddev start\nddev composer create drupal/recommended-project:^11\nddev composer require drush/drush\nddev drush site:install --account-name=admin --account-pass=admin -y\nddev launch\n# or automatically log in with\nddev launch $(ddev drush uli)\n```\n\n----------------------------------------\n\nTITLE: Describing a DDEV Project\nDESCRIPTION: Output of the 'ddev describe' command showing detailed information about a specific project. This includes service status, URLs, ports, database credentials, and other configuration details.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/managing-projects.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ ddev describe drup\n┌──────────────────────────────────────────────────────────────────────────────────┐\n│ Project: drup ~/workspace/drup https://drup.ddev.site                            │\n│ Docker platform: orbstack                                                        │\n│ Router: traefik                                                                  │\n├──────────┬──────┬───────────────────────────────────────────┬────────────────────┤\n│ SERVICE  │ STAT │ URL/PORT                                  │ INFO               │\n├──────────┼──────┼───────────────────────────────────────────┼────────────────────┤\n│ web      │ OK   │ https://drup.ddev.site                    │ drupal PHP8.3      │\n│          │      │ InDocker: web:8025,443,80                 │ nginx-fpm          │\n│          │      │ Host: 127.0.0.1:33016,33017               │ docroot:'web'      │\n│          │      │                                           │ Perf mode: mutagen │\n│          │      │                                           │ NodeJS:20          │\n├──────────┼──────┼───────────────────────────────────────────┼────────────────────┤\n│ db       │ OK   │ InDocker: db:3306                         │ mariadb:10.11      │\n│          │      │ Host: 127.0.0.1:33018                     │ User/Pass: 'db/db' │\n│          │      │                                           │ or 'root/root'     │\n├──────────┼──────┼───────────────────────────────────────────┼────────────────────┤\n│ Mailpit  │      │ Mailpit: https://drup.ddev.site:8026      │                    │\n│          │      │ `ddev mailpit`                            │                    │\n├──────────┼──────┼───────────────────────────────────────────┼────────────────────┤\n│ All URLs │      │ https://drup.ddev.site,                   │                    │\n│          │      │ https://127.0.0.1:33016,                  │                    │\n│          │      │ http://drup.ddev.site,                    │                    │\n│          │      │ http://127.0.0.1:33017                    │                    │\n└──────────┴──────┴───────────────────────────────────────────┴────────────────────┘\n```\n\n----------------------------------------\n\nTITLE: Database Import Commands in DDEV CLI\nDESCRIPTION: Examples of using the ddev import-db command to import SQL files into a project database. Supports various formats including .sql, .tar, .gz and handles both compressed and uncompressed files.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/commands.md#2025-04-19_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\n# Start the interactive import utility\nddev import-db\n\n# Import the `.tarballs/db.sql` dump to the project database\nddev import-db --file=.tarballs/db.sql\n\n# Import the compressed `.tarballs/db.sql.gz` dump to the project database\nddev import-db --file=.tarballs/db.sql.gz\n\n# Import the compressed `.tarballs/db.sql.gz` dump to a `other_db` database\nddev import-db --database=additional_db --file=.tarballs/db.sql.gz\n\n# Import the `db.sql` dump to the project database\nddev import-db < db.sql\n\n# Import the `db.sql` dump to the `my-project` default database\nddev import-db my-project < db.sql\n\n# Uncompress `db.sql.gz` and pipe the result to the `import-db` command\ngzip -dc db.sql.gz | ddev import-db\n```\n\n----------------------------------------\n\nTITLE: Setting up WordPress with DDEV using WP-CLI\nDESCRIPTION: Commands to create a new WordPress site using WP-CLI and configure DDEV. This downloads WordPress core and provides options for installation via browser or command line.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/quickstart.md#2025-04-19_snippet_47\n\nLANGUAGE: bash\nCODE:\n```\nmkdir my-wp-site && cd my-wp-site\n\n# Create a new DDEV project inside the newly-created folder\n# (Primary URL automatically set to `https://<folder>.ddev.site`)\nddev config --project-type=wordpress\nddev start\n\n# Download WordPress\nddev wp core download\n\n# Launch in browser to finish installation\nddev launch\n\n# OR use the following installation command\n# (we need to use single quotes to get the primary site URL from `.ddev/config.yaml` as variable)\nddev wp core install --url='$DDEV_PRIMARY_URL' --title='My WordPress site' --admin_user=admin --admin_password=admin --admin_email=admin@example.com\n\n# Launch WordPress admin dashboard in your browser\nddev launch wp-admin/\n```\n\n----------------------------------------\n\nTITLE: Exporting Database in ddev\nDESCRIPTION: Examples of using the ddev export-db command to export a database to different formats. The command can output to stdout or to a file, with options to control gzip compression.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/cli.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddev export-db --file=/tmp/db.sql.gz\nddev export-db --gzip=false --file=/tmp/db.sql\nddev export-db >/tmp/db.sql.gz\n```\n\n----------------------------------------\n\nTITLE: Executing Composer Commands in DDEV\nDESCRIPTION: Examples of running Composer commands within DDEV containers using the 'ddev composer' wrapper. This allows using Composer without installing it on the host machine.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/developer-tools.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddev composer help\nddev composer require <package>\n```\n\n----------------------------------------\n\nTITLE: Setting up Magento 2 in DDEV\nDESCRIPTION: Configures and installs Magento 2 using Composer with OpenSearch integration. Includes database setup, admin user creation, and optional sample data installation.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/quickstart.md#2025-04-19_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nexport MAGENTO_HOSTNAME=my-magento2-site\nmkdir ${MAGENTO_HOSTNAME} && cd ${MAGENTO_HOSTNAME}\nddev config --project-type=magento2 --docroot=pub --upload-dirs=media --disable-settings-management\nddev add-on get ddev/ddev-opensearch\nddev start\nddev composer create --repository https://repo.magento.com/ magento/project-community-edition\nrm -f app/etc/env.php\n\nddev magento setup:install --base-url=\"https://${MAGENTO_HOSTNAME}.ddev.site/\" \\\n    --cleanup-database --db-host=db --db-name=db --db-user=db --db-password=db \\\n    --opensearch-host=opensearch --search-engine=opensearch --opensearch-port=9200 \\\n    --admin-firstname=Magento --admin-lastname=User --admin-email=user@example.com \\\n    --admin-user=admin --admin-password=Password123 --language=en_US\n\nddev magento deploy:mode:set developer\nddev magento module:disable Magento_TwoFactorAuth Magento_AdminAdobeImsTwoFactorAuth\nddev config --disable-settings-management=false\nddev magento setup:config:set --backend-frontname=\"admin_ddev\" --no-interaction\nddev launch /admin_ddev\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Server Type in DDEV YAML\nDESCRIPTION: This snippet demonstrates how to change the web server type from the default nginx-fpm to apache-fpm in a DDEV project's configuration file. After making this change, a restart is required for it to take effect.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/configuration/config.md#2025-04-19_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nwebserver_type: apache-fpm\n```\n\n----------------------------------------\n\nTITLE: DDEV Project Configuration Commands\nDESCRIPTION: Examples of project configuration commands including auto-configuration and specific settings.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/commands.md#2025-04-19_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n# Start interactive project configuration\nddev config\n\n# Accept defaults on a new project. This is the same as hitting <RETURN>\n# on every question in `ddev config`\nddev config --auto\n\n# Detect docroot, project type (except for `generic` type),\n# and expected defaults for an existing project\nddev config --update\n\n# Configure a Drupal project with a `web` document root\nddev config --docroot=web --project-type=drupal\n```\n\n----------------------------------------\n\nTITLE: Setting up Symfony with DDEV using Composer\nDESCRIPTION: Commands to create a new Symfony project using Composer and configure DDEV. This installs Symfony with the webapp package and configures the necessary environment.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/quickstart.md#2025-04-19_snippet_40\n\nLANGUAGE: bash\nCODE:\n```\nmkdir my-symfony-site && cd my-symfony-site\nddev config --project-type=symfony --docroot=public\nddev start\nddev composer create symfony/skeleton\nddev composer require webapp\n# When it asks if you want to include docker configuration, say \"no\" with \"x\"\nddev launch\n```\n\n----------------------------------------\n\nTITLE: Creating Database Snapshots in DDEV\nDESCRIPTION: Examples of creating database snapshots for DDEV projects, including options for naming snapshots, cleaning up existing snapshots, listing available snapshots, and creating snapshots for all projects.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/commands.md#2025-04-19_snippet_36\n\nLANGUAGE: shell\nCODE:\n```\n# Take a database snapshot for the current project\nddev snapshot\n\n# Take a database snapshot for the current project, named `my_snapshot_name`\nddev snapshot --name my_snapshot_name\n\n# Take a snapshot for the current project, cleaning up existing snapshots\nddev snapshot --cleanup\n\n# Take a snapshot for the current project, cleaning existing snapshots and skipping prompt\nddev snapshot --cleanup -y\n\n# List the current project's snapshots\nddev snapshot --list\n\n# Take a snapshot for each project\nddev snapshot --all\n```\n\n----------------------------------------\n\nTITLE: Basic DDEV Command Usage\nDESCRIPTION: Shows the basic DDEV command output listing available commands and basic usage information.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/commands.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n→  ddev\nCreate and maintain a local web development environment.\nDocs: https://ddev.readthedocs.io\nSupport: https://ddev.readthedocs.io/en/stable/users/support\n\nUsage:\n  ddev [command]\n\nAvailable Commands:\n  auth             A collection of authentication commands\n  blackfire        Enable or disable blackfire.io profiling (global shell web container command)\n  clean            Removes items ddev has created\n  composer         Executes a composer command within the web container\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Extra Daemons in DDEV YAML\nDESCRIPTION: Example YAML configuration for running additional daemons inside the DDEV web container using web_extra_daemons. This snippet demonstrates how to set up two instances of a Node.js HTTP server on different directories and ports.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/extend/customization-extendibility.md#2025-04-19_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nweb_extra_daemons:\n  - name: \"http-1\"\n    command: \"/var/www/html/node_modules/.bin/http-server -p 3000\"\n    directory: /var/www/html\n  - name: \"http-2\"\n    command: \"/var/www/html/node_modules/.bin/http-server /var/www/html/sub -p 3000\"\n    directory: /var/www/html\n```\n\n----------------------------------------\n\nTITLE: Web Container Dockerfile Configuration\nDESCRIPTION: Dockerfile snippet for installing custom supervisord configuration files in the web container.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/extend/customization-extendibility.md#2025-04-19_snippet_19\n\nLANGUAGE: dockerfile\nCODE:\n```\nADD daemonname.conf /etc/supervisor/conf.d\n```\n\n----------------------------------------\n\nTITLE: Using SSH in DDEV Containers\nDESCRIPTION: Examples of using the SSH command to start shell sessions in DDEV service containers, including options for specifying services, destination directories, and targeting specific projects.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/commands.md#2025-04-19_snippet_38\n\nLANGUAGE: shell\nCODE:\n```\n# SSH into the current project's web container\nddev ssh\n\n# SSH into the current project's database container\nddev ssh -s db\n\n# SSH into the web container for my-project\nddev ssh my-project\n\n# SSH into the docroot of the current project's web container\nddev ssh -d /var/www/html\n```\n\n----------------------------------------\n\nTITLE: Setting up Symfony with DDEV using Symfony CLI\nDESCRIPTION: Commands to create a new Symfony project using Symfony CLI and configure DDEV. This installs Symfony in a temporary directory and moves it to the project root.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/quickstart.md#2025-04-19_snippet_41\n\nLANGUAGE: bash\nCODE:\n```\nmkdir my-symfony-site && cd my-symfony-site\nddev config --project-type=symfony --docroot=public\nddev start\nddev exec symfony check:requirements\nddev exec symfony new temp --version=\"7.1.*\" --webapp\n# 'symfony new' can't install in the current directory right away,\n# so we use 'rsync' to move the installed files one level up\nddev exec 'rsync -rltgopD temp/ ./ && rm -rf temp'\nddev launch\n```\n\n----------------------------------------\n\nTITLE: Starting DDEV Projects\nDESCRIPTION: Examples of starting DDEV projects, including starting the current project, multiple specific projects, or all projects simultaneously using the --all flag.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/commands.md#2025-04-19_snippet_39\n\nLANGUAGE: shell\nCODE:\n```\n# Start the current project\nddev start\n\n# Start my-project and my-other-project\nddev start my-project my-other-project\n\n# Start all projects\nddev start --all\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables with DDEV Config Command\nDESCRIPTION: Commands for setting web environment variables using the ddev config command, demonstrating both project-level and global configuration.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/extend/customization-extendibility.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Set MY_ENV_VAR for the project\nddev config --web-environment-add=\"MY_ENV_VAR=someval\"\n\n# Set MY_ENV_VAR globally\nddev config global --web-environment-add=\"MY_ENV_VAR=someval\"\n```\n\n----------------------------------------\n\nTITLE: DDEV Project Setup Script\nDESCRIPTION: Bash script for automated DDEV project setup, including Docker readiness check, project initialization, and additional setup steps.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/install/ddev-installation.md#2025-04-19_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/env bash\nset -ex\n\nwait_for_docker() {\n  while true; do\n    docker ps > /dev/null 2>&1 && break\n    sleep 1\n  done\n  echo \"Docker is ready.\"\n}\n\nwait_for_docker\n\n# download images beforehand, optional\nddev debug download-images\n\n# avoid errors on rebuilds\nddev poweroff\n\n# start ddev project automatically\nddev start -y\n\n# further automated install / setup steps, e.g.\nddev composer install\n```\n\n----------------------------------------\n\nTITLE: Supervisord Daemon Configuration\nDESCRIPTION: Example configuration for setting up custom daemons using supervisord in the web container. Specifies daemon execution parameters and logging settings.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/extend/customization-extendibility.md#2025-04-19_snippet_18\n\nLANGUAGE: ini\nCODE:\n```\n[program:daemonname]\ncommand=/var/www/html/path/to/daemon\ndirectory=/var/www/html/\nautorestart=true\nstartretries=3\nstdout_logfile=/var/tmp/logpipe\nstdout_logfile_maxbytes=0\nredirect_stderr=true\n```\n\n----------------------------------------\n\nTITLE: Setting up WordPress with DDEV using Git Clone\nDESCRIPTION: Commands to set up a WordPress site from a Git repository and configure DDEV. This clones a test repository and installs WordPress with admin credentials.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/quickstart.md#2025-04-19_snippet_49\n\nLANGUAGE: bash\nCODE:\n```\nPROJECT_GIT_URL=https://github.com/ddev/test-wordpress.git\ngit clone ${PROJECT_GIT_URL} my-wp-site\ncd my-wp-site\nddev config --project-type=wordpress\nddev start\nddev wp core install --url='$DDEV_PRIMARY_URL' --title='My WordPress site' --admin_user=admin --admin_password=admin --admin_email=admin@example.com\nddev launch wp-admin/\n```\n\n----------------------------------------\n\nTITLE: Setting up Statamic with DDEV using Git Clone\nDESCRIPTION: Commands to set up an existing Statamic project from a Git repository using the Laravel project type in DDEV. This clones, configures, and initializes a Statamic site with its control panel.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/quickstart.md#2025-04-19_snippet_34\n\nLANGUAGE: bash\nCODE:\n```\ngit clone <my-statamic-repo> my-statamic-site\ncd my-statamic-site\nddev config --project-type=laravel --docroot=public\nddev start\nddev composer install\nddev exec \"php artisan key:generate\"\nddev launch /cp\n```\n\n----------------------------------------\n\nTITLE: Restoring DDEV Project Snapshot\nDESCRIPTION: Commands to start a DDEV project and restore the latest snapshot.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/faq.md#2025-04-19_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nddev start && ddev snapshot restore --latest\n```\n\n----------------------------------------\n\nTITLE: Configuring DDEV to Use Alternative Ports in Bash\nDESCRIPTION: This code snippet shows how to configure DDEV to use non-default ports globally and for a specific project. It sets the global router ports and removes project-specific port settings before restarting DDEV.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/troubleshooting.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nddev config global --router-http-port=8080 --router-https-port=8443\nddev config --router-http-port=\"\" --router-https-port=\"\"\nddev restart\n```\n\n----------------------------------------\n\nTITLE: Project Management Commands in DDEV CLI\nDESCRIPTION: Examples of using power management and pull commands for managing project state and importing data from providers.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/commands.md#2025-04-19_snippet_24\n\nLANGUAGE: shell\nCODE:\n```\n# Stop all projects and containers\nddev poweroff\n\n# Pull a backup from the configured Pantheon project to use locally\nddev pull pantheon\n\n# Pull a backup from the configured Platform.sh project to use locally\nddev pull platform\n\n# Pull the Platform.sh database archive *only* without confirming\nddev pull platform --skip-files -y\n```\n\n----------------------------------------\n\nTITLE: Browser Launch Commands in DDEV CLI\nDESCRIPTION: Examples of using the ddev launch command to open project URLs and Mailpit in the default browser.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/commands.md#2025-04-19_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\n# Open your project's base URL in the default browser\nddev launch\n\n# Open Mailpit in the default browser\nddev launch --mailpit\n\n# Open your project's base URL appended with `temp/phpinfo.php`\nddev launch temp/phpinfo.php\n\n# Open the full URL (any website) in the default browser\nddev launch https://your.ddev.site\n\n# Open your project's base URL using a specific port\nddev launch :3000\n```\n\n----------------------------------------\n\nTITLE: Installing Drupal CMS with DDEV\nDESCRIPTION: Quick setup for Drupal CMS using DDEV with minimal configuration.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/quickstart.md#2025-04-19_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nmkdir my-drupal-site && cd my-drupal-site\nddev config --project-type=drupal11 --docroot=web\nddev start\nddev composer create drupal/cms\nddev launch\n```\n\n----------------------------------------\n\nTITLE: Setting PHP Version with ddev config Command (Shell)\nDESCRIPTION: Example of using the ddev config command to set the PHP version to 8.3 from the command line.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/configuration/config.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nddev config --php-version 8.3\n```\n\n----------------------------------------\n\nTITLE: DDEV Version Constraint Example for Add-ons\nDESCRIPTION: Example of a version constraint in an add-on's install.yaml file to ensure compatibility with specific DDEV versions.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/extend/additional-services.md#2025-04-19_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nddev_version_constraint: '>= v1.23.4'\n```\n\n----------------------------------------\n\nTITLE: Stopping DDEV Projects\nDESCRIPTION: Examples of stopping DDEV projects, including options for stopping specific projects, all projects, removing data, and unregistering projects from the global project list.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/commands.md#2025-04-19_snippet_40\n\nLANGUAGE: shell\nCODE:\n```\n# Stop the current project\nddev stop\n\n# Stop my-project, my-other-project, and my-third-project\nddev stop my-project my-other-project my-third-project\n\n# Stop all projects\nddev stop --all\n\n# Stop all projects and the `ddev-ssh-agent` container\nddev stop --all --stop-ssh-agent\n\n# Stop all projects and remove their data\nddev stop --remove-data\n```\n\n----------------------------------------\n\nTITLE: Installing ProcessWire with Composer and DDEV\nDESCRIPTION: This script sets up a ProcessWire installation using Composer and DDEV with Apache FPM. It provides a streamlined approach to getting ProcessWire running in a local development environment.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/quickstart.md#2025-04-19_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\nmkdir my-processwire-site && cd my-processwire-site\nddev config --project-type=php --webserver-type=apache-fpm\nddev start\nddev composer create \"processwire/processwire:^3\"\nddev launch\n```\n\n----------------------------------------\n\nTITLE: Importing DDEV Project Database\nDESCRIPTION: Command to import a database dump into a DDEV project.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/faq.md#2025-04-19_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nddev import-db --file=/path/to/db.sql.gz\n```\n\n----------------------------------------\n\nTITLE: Installing DDEV with WSL2 Docker Inside Script\nDESCRIPTION: PowerShell script to download and execute the DDEV WSL2 Docker inside installation script. Sets execution policy and security protocol for download.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/install/ddev-installation.md#2025-04-19_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nSet-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072;\niex ((New-Object System.Net.WebClient).DownloadString('https://raw.githubusercontent.com/ddev/ddev/main/scripts/install_ddev_wsl2_docker_inside.ps1'))\n```\n\n----------------------------------------\n\nTITLE: Running WP-CLI Commands in WordPress Projects\nDESCRIPTION: Example of using the ddev wp command to run WP-CLI commands in WordPress projects, demonstrating how to install WordPress using wp core install with dynamic variables.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/commands.md#2025-04-19_snippet_44\n\nLANGUAGE: shell\nCODE:\n```\n# Install WordPress site using `wp core install`\nddev wp core install --url='$DDEV_PRIMARY_URL' --title='New-WordPress' --admin_user=admin --admin_email=admin@example.com --prompt=admin_password\n```\n\n----------------------------------------\n\nTITLE: Non-Interactive Database Import Commands\nDESCRIPTION: Examples of using 'ddev import-db' non-interactively with various flags and methods, including importing from a file, piping from gzip, and redirecting from a file.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/managing-projects.md#2025-04-19_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nddev import-db --file=/tmp/mydb.sql.gz\ngzip -dc /tmp/mydb.sql.gz | ddev import-db\nddev import-db <mydb.sql\n```\n\n----------------------------------------\n\nTITLE: Running Craft CMS Commands in DDEV Shell\nDESCRIPTION: This example demonstrates how to run Craft CMS commands inside the DDEV web container. It shows running pending Craft migrations and applying pending project config changes.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/commands.md#2025-04-19_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nddev craft up\n```\n\n----------------------------------------\n\nTITLE: Setting up a new CakePHP project with DDEV using Composer\nDESCRIPTION: This snippet demonstrates how to create a new CakePHP project using DDEV and Composer. It includes steps for initializing the project, starting DDEV, and creating a new CakePHP application.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/quickstart.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmkdir my-cakephp-site && cd my-cakephp-site\nddev config --project-type=cakephp --docroot=webroot\nddev start\nddev composer create --prefer-dist --no-interaction cakephp/app:~5.0\nddev launch\n```\n\n----------------------------------------\n\nTITLE: Installing DDEV on Debian/Ubuntu Linux\nDESCRIPTION: Commands to install DDEV on Debian-based Linux distributions including repository setup and package installation.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/install/ddev-installation.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Add DDEV's GPG key to your keyring\nsudo sh -c 'echo \"\"'\nsudo apt-get update && sudo apt-get install -y curl\nsudo install -m 0755 -d /etc/apt/keyrings\ncurl -fsSL https://pkg.ddev.com/apt/gpg.key | gpg --dearmor | sudo tee /etc/apt/keyrings/ddev.gpg > /dev/null\nsudo chmod a+r /etc/apt/keyrings/ddev.gpg\n\n# Add DDEV releases to your package repository\nsudo sh -c 'echo \"\"'\necho \"deb [signed-by=/etc/apt/keyrings/ddev.gpg] https://pkg.ddev.com/apt/ * *\" | sudo tee /etc/apt/sources.list.d/ddev.list >/dev/null\n\n# Update package information and install DDEV\nsudo sh -c 'echo \"\"'\nsudo apt-get update && sudo apt-get install -y ddev\n\n# One-time initialization of mkcert\nmkcert -install\n```\n\n----------------------------------------\n\nTITLE: Installing DDEV on Ubuntu WSL\nDESCRIPTION: Bash commands to install DDEV on Ubuntu WSL2 distribution. Sets up package repository and installs DDEV using apt.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/install/ddev-installation.md#2025-04-19_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update && sudo apt-get install -y curl\nsudo install -m 0755 -d /etc/apt/keyrings\ncurl -fsSL https://pkg.ddev.com/apt/gpg.key | gpg --dearmor | sudo tee /etc/apt/keyrings/ddev.gpg > /dev/null\necho \"deb [signed-by=/etc/apt/keyrings/ddev.gpg] https://pkg.ddev.com/apt/ * *\" | sudo tee /etc/apt/sources.list.d/ddev.list >/dev/null\nsudo apt-get update && sudo apt-get install -y ddev\n```\n\n----------------------------------------\n\nTITLE: Removing a DDEV Project\nDESCRIPTION: Commands for removing projects from DDEV. The 'ddev delete' command is destructive and removes the project completely, while 'ddev stop --unlist' just hides the project from the list without destroying it.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/managing-projects.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nddev delete <projectname>\nor\nddev delete --omit-snapshot <projectname>\n```\n\nLANGUAGE: bash\nCODE:\n```\nddev stop --unlist <projectname>\n```\n\n----------------------------------------\n\nTITLE: Managing Home Directory Installations in DDEV\nDESCRIPTION: Demonstrates how to handle installations that require access to the home directory by switching between users. Includes example of Playwright installation.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/extend/customizing-images.md#2025-04-19_snippet_10\n\nLANGUAGE: dockerfile\nCODE:\n```\nUSER $username\n# This is an example of creating a file in the home directory\nRUN touch ~/${username}-was-here\n# `npx playwright` installs lots of things in ~/.cache\nRUN npx playwright install\nRUN npx playwright install-deps\nUSER root\n```\n\n----------------------------------------\n\nTITLE: Building and Testing DDEV Commands in Bash\nDESCRIPTION: Common make commands for building DDEV across different architectures, running tests, and performing static analysis. Includes options for build arguments and platform-specific builds.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/developers/building-contributing.md#2025-04-19_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nmake # Builds on current os/architecture\nmake BUILDARGS=-race\nmake linux_amd64\nmake linux_arm64\nmake darwin_amd64\nmake darwin_arm64\nmake windows_amd64\nmake windows_arm64\nmake test\nmake clean\nmake staticrequired\n```\n\n----------------------------------------\n\nTITLE: Deleting DDEV Project\nDESCRIPTION: Command to delete a DDEV project, which creates a snapshot by default for safety.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/faq.md#2025-04-19_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nddev delete <project>\n```\n\n----------------------------------------\n\nTITLE: Setting up TYPO3 with DDEV using Composer\nDESCRIPTION: Commands to create a new TYPO3 project using Composer and configure DDEV. This sets up TYPO3 with PHP 8.3 and launches the installer interface.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/quickstart.md#2025-04-19_snippet_45\n\nLANGUAGE: bash\nCODE:\n```\nmkdir my-typo3-site && cd my-typo3-site\nddev config --project-type=typo3 --docroot=public --php-version=8.3\nddev start\nddev composer create \"typo3/cms-base-distribution\"\nddev exec touch public/FIRST_INSTALL\nddev launch /typo3/install.php\n```\n\n----------------------------------------\n\nTITLE: Setting up Contao with DDEV using Contao Manager\nDESCRIPTION: This snippet shows how to set up a Contao project using DDEV and Contao Manager. It covers configuring DDEV, setting environment variables, and downloading the Contao Manager for further installation steps.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/quickstart.md#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmkdir my-contao-site && cd my-contao-site\nddev config --project-type=php --docroot=public --webserver-type=apache-fpm --php-version=8.2\n\n# set DATABASE_URL and MAILER_DSN in .env.local\nddev dotenv set .env.local --database-url=mysql://db:db@db:3306/db --mailer-dsn=smtp://localhost:1025\n\n# Download the Contao Manager\nddev start\nddev exec \"wget -O public/contao-manager.phar.php https://download.contao.org/contao-manager/stable/contao-manager.phar\"\n\n# Follow the further steps within the Contao Manager\nddev launch contao-manager.phar.php\n```\n\n----------------------------------------\n\nTITLE: Implementing YAML Marshaling and Unmarshaling in Go\nDESCRIPTION: Demonstrates how to marshal and unmarshal YAML data in Go using both struct and map types. Shows struct tag usage for YAML field mapping and includes error handling patterns.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/gopkg.in/yaml.v3/README.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n        \"fmt\"\n        \"log\"\n\n        \"gopkg.in/yaml.v3\"\n)\n\nvar data = `\na: Easy!\nb:\n  c: 2\n  d: [3, 4]\n`\n\n// Note: struct fields must be public in order for unmarshal to\n// correctly populate the data.\ntype T struct {\n        A string\n        B struct {\n                RenamedC int   `yaml:\"c\"`\n                D        []int `yaml:\",flow\"`\n        }\n}\n\nfunc main() {\n        t := T{}\n    \n        err := yaml.Unmarshal([]byte(data), &t)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- t:\\n%v\\n\\n\", t)\n    \n        d, err := yaml.Marshal(&t)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- t dump:\\n%s\\n\\n\", string(d))\n    \n        m := make(map[interface{}]interface{})\n    \n        err = yaml.Unmarshal([]byte(data), &m)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- m:\\n%v\\n\\n\", m)\n    \n        d, err = yaml.Marshal(&m)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- m dump:\\n%s\\n\\n\", string(d))\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\n--- t:\n{Easy! {2 [3 4]}}\n\n--- t dump:\na: Easy!\nb:\n  c: 2\n  d: [3, 4]\n\n\n--- m:\nmap[a:Easy! b:map[c:2 d:[3 4]]]\n\n--- m dump:\na: Easy!\nb:\n  c: 2\n  d:\n  - 3\n  - 4\n```\n\n----------------------------------------\n\nTITLE: Setting up a new Backdrop CMS project with DDEV\nDESCRIPTION: This snippet demonstrates how to create a new Backdrop CMS project using DDEV. It includes steps for initializing the project, adding the Bee CLI add-on, downloading Backdrop core, and setting up an admin user.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/quickstart.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir my-backdrop-site && cd my-backdrop-site\nddev config --project-type=backdrop\n# Add the official Bee CLI add-on\nddev add-on get backdrop-ops/ddev-backdrop-bee\nddev start\n# Download Backdrop core\nddev bee download-core\n# Create admin user\nddev bee si --username=admin --password=Password123 --db-name=db --db-user=db --db-pass=db --db-host=db --auto\n# Login using `admin` user and `Password123` password\nddev launch\n```\n\n----------------------------------------\n\nTITLE: Upgrading DDEV on WSL2 for Windows\nDESCRIPTION: Commands to update package information and upgrade all packages including DDEV on WSL2 (Windows Subsystem for Linux).\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/install/ddev-upgrade.md#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Upgrade the DDEV package\nsudo apt-get update && sudo apt-get upgrade -y\n```\n\n----------------------------------------\n\nTITLE: Installing Moodle with DDEV\nDESCRIPTION: Sets up a Moodle installation using Composer with Apache FPM webserver. Includes database configuration and initial admin user setup.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/quickstart.md#2025-04-19_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nmkdir my-moodle-site && cd my-moodle-site\nddev config --composer-root=public --docroot=public --webserver-type=apache-fpm\nddev start\nddev composer create moodle/moodle\nddev exec 'php public/admin/cli/install.php --non-interactive --agree-license --wwwroot=$DDEV_PRIMARY_URL --dbtype=mariadb --dbhost=db --dbname=db --dbuser=db --dbpass=db --fullname=\"DDEV Moodle Demo\" --shortname=Demo --adminpass=password'\nddev launch /login\n```\n\n----------------------------------------\n\nTITLE: Adding Platform.sh API Token to DDEV Global Configuration (YAML)\nDESCRIPTION: This snippet shows how to add your Platform.sh API token to the global DDEV configuration file to enable authentication with Platform.sh.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/providers/platform.md#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nweb_environment:\n    - PLATFORMSH_CLI_TOKEN=abcdeyourtoken\n```\n\n----------------------------------------\n\nTITLE: Executing Commands in DDEV Containers\nDESCRIPTION: Shows how to use the 'ddev exec' command to run shell commands in DDEV service containers. Examples include running 'ls' in the web container and using MySQL client in the database container.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/cli.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nddev exec ls\nddev . ls\nddev exec --service db mysql\nddev exec --dir /usr/bin ls\nddev exec sudo apt-get update\nddev exec 'ls -l ${DDEV_FILES_DIR} | grep x >/tmp/junk.out'\nddev exec --raw ls -l \"dir1\" \"dir2\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Hostnames in DDEV YAML Config\nDESCRIPTION: Example configuration showing how to set up multiple additional hostnames in the .ddev/config.yaml file. This allows creating multiple accessible URLs for a single DDEV project using the .ddev.site domain.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/extend/additional-hostnames.md#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: mysite\n\nadditional_hostnames:\n  - \"extraname\"\n  - \"fr.mysite\"\n  - \"es.mysite\"\n  - \"it.mysite\"\n  - \"*.lotsofnames\"\n```\n\n----------------------------------------\n\nTITLE: File Import Commands in DDEV CLI\nDESCRIPTION: Examples of using the ddev import-files command to import uploaded files directories. Supports various archive formats and allows specifying source and target directories.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/commands.md#2025-04-19_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\n# Extract+import `/path/to/files.tar.gz` to the project's first upload directory\nddev import-files --source=/path/to/files.tar.gz\n\n# Import `/path/to/dir` contents to the project's first upload directory\nddev import-files --source=/path/to/dir\n\n# Import `.tarballs/files.tar.xz` contents to the project's `../private` upload directory\nddev import-files --source=.tarballs/files.tar.xz --target=../private\n\n# Import `/path/to/dir` contents to the project's `sites/default/files` upload directory\nddev import-files -s=.tarballs/files.tar.gz -t=sites/default/files\n```\n\n----------------------------------------\n\nTITLE: Adding Pantheon Machine Token to DDEV Global Configuration\nDESCRIPTION: This snippet shows how to add a Pantheon machine token to the global DDEV configuration file. The token is added to the web_environment section, allowing DDEV to authenticate with Pantheon services.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/providers/pantheon.md#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nweb_environment:\n    - TERMINUS_MACHINE_TOKEN=your_token\n```\n\n----------------------------------------\n\nTITLE: Importing Database Without Dropping Existing Tables in DDEV\nDESCRIPTION: Command to import database dump while preserving existing tables. Content will be added to existing database structure.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/managing-projects.md#2025-04-19_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nddev import-db --no-drop\n```\n\n----------------------------------------\n\nTITLE: Creating Symlink to Node Version File via Dockerfile\nDESCRIPTION: Example Dockerfile configuration that creates a symbolic link from a Node.js version file located in a subdirectory to the user's home directory, allowing tools to properly detect the Node.js version specification.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/configuration/config.md#2025-04-19_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\nRUN ln -sf /var/www/html/frontend/.nvmrc /var/www/.nvmrc\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Debian Packages in DDEV Configuration\nDESCRIPTION: Example of adding extra packages to web and database containers using webimage_extra_packages and dbimage_extra_packages in the DDEV config.yaml file.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/extend/customizing-images.md#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwebimage_extra_packages: [\"php${DDEV_PHP_VERSION}-yaml\", \"php${DDEV_PHP_VERSION}-tidy\"]\ndbimage_extra_packages: [telnet, netcat, sudo]\n```\n\n----------------------------------------\n\nTITLE: Third-Party Service Configuration with HTTPS Trust\nDESCRIPTION: A docker-compose configuration for a third-party service that needs to trust the DDEV webserver's self-signed certificates. This example includes mkcert installation and necessary environment and volume configurations.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/extend/custom-compose-files.md#2025-04-19_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  example:\n    container_name: ddev-${DDEV_SITENAME}-example\n    command: \"bash -c 'mkcert -install && original-start-command-from-image'\"\n    # Add a build stage so we can add `mkcert`, etc.\n    # The Dockerfile for the build stage goes in the `.ddev/example directory` here\n    build:\n      context: example\n    environment:\n      - HTTP_EXPOSE=3001:3000\n      - HTTPS_EXPOSE=3000:3000\n      - VIRTUAL_HOST=$DDEV_HOSTNAME\n    # Adding external_links allows connections to `https://example.ddev.site`,\n    # which then can go through `ddev-router`\n    external_links:\n      - ddev-router:${DDEV_SITENAME}.${DDEV_TLD}\n    labels:\n      com.ddev.approot: $DDEV_APPROOT\n      com.ddev.site-name: ${DDEV_SITENAME}\n    restart: 'no'\n    volumes:\n      - .:/mnt/ddev_config\n      # `ddev-global-cache` gets mounted so we have the CAROOT\n      # This is required so that the CA is available for `mkcert` to install\n      # and for custom commands to work\n      - ddev-global-cache:/mnt/ddev-global-cache\n```\n\n----------------------------------------\n\nTITLE: Setting up a new Contao project with DDEV using Composer\nDESCRIPTION: This snippet demonstrates how to create a new Contao project using DDEV and Composer. It includes steps for initializing the project, setting environment variables, creating the database, and setting up an admin user.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/quickstart.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmkdir my-contao-site && cd my-contao-site\nddev config --project-type=php --docroot=public --webserver-type=apache-fpm --php-version=8.2\nddev composer create contao/managed-edition:5.3\n\n# Set DATABASE_URL and MAILER_DSN in .env.local\nddev dotenv set .env.local --database-url=mysql://db:db@db:3306/db --mailer-dsn=smtp://localhost:1025\n\n# Create the database\nddev exec contao-console contao:migrate --no-interaction\n\n# Create backend user\nddev exec contao-console contao:user:create --username=admin --name=Administrator --email=admin@example.com --language=en --password=Password123 --admin\n\n# Access the administration area\nddev launch contao\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL 14 Database in DDEV YAML\nDESCRIPTION: This YAML snippet illustrates the configuration for a PostgreSQL 14 database in the DDEV configuration file. It sets the database type to PostgreSQL and specifies version 14.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/extend/database-types.md#2025-04-19_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndatabase:\n  type: postgres\n  version: 14\n```\n\n----------------------------------------\n\nTITLE: Configuring Lagoon Environment Variables in DDEV YAML\nDESCRIPTION: This snippet shows how to add LAGOON_PROJECT and LAGOON_ENVIRONMENT variables to a DDEV project's YAML configuration file. These variables are essential for establishing the connection between DDEV and the specific Lagoon project and environment.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/providers/lagoon.md#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nweb_environment:\n    - LAGOON_PROJECT=<project-name>\n    - LAGOON_ENVIRONMENT=<environment-name>\n```\n\n----------------------------------------\n\nTITLE: Custom PHP Configuration in DDEV\nDESCRIPTION: Example of a custom PHP configuration file (.ddev/php/my-php.ini) to override default PHP settings in a DDEV project. This snippet demonstrates how to increase the max_execution_time.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/extend/customization-extendibility.md#2025-04-19_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n[PHP]\nmax_execution_time = 240;\n```\n\n----------------------------------------\n\nTITLE: Deleting and Re-downloading Docker Images in DDEV\nDESCRIPTION: This set of commands is used to completely remove all Docker containers and images, forcing a fresh download of images when DDEV is restarted. It's a troubleshooting step for corrupt Docker images.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/troubleshooting.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nddev poweroff\ndocker rm -f $(docker ps -aq) # Stop any other random containers that may be running\ndocker rmi -f $(docker images -q) # You might have to repeat this to get rid of all images\n```\n\n----------------------------------------\n\nTITLE: Installing DDEV on Arch Linux\nDESCRIPTION: Commands to install DDEV on Arch Linux systems using the AUR package manager.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/install/ddev-installation.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Install DDEV\nyay -S ddev-bin\n\n# One-time initialization of mkcert\nmkcert -install\n```\n\n----------------------------------------\n\nTITLE: Managing Additional Services in DDEV\nDESCRIPTION: Examples of enabling and disabling additional services in DDEV projects, demonstrating how to add or remove services like Solr using the service command.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/commands.md#2025-04-19_snippet_33\n\nLANGUAGE: shell\nCODE:\n```\n# Disable the Solr service\nddev service disable solr\n```\n\n----------------------------------------\n\nTITLE: Allowing Xdebug Port Through UFW Firewall\nDESCRIPTION: This command allows incoming connections on port 9003 through the UFW firewall, which is necessary for Xdebug to connect to the IDE.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/debugging-profiling/step-debugging.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo ufw allow 9003\n```\n\n----------------------------------------\n\nTITLE: Implementing PhpStorm Launch Command in DDEV\nDESCRIPTION: A host command script that opens PhpStorm IDE with the current project. The script uses OS type and host binary existence checks to ensure compatibility.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/extend/custom-commands.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/env bash\n\n## Description: Open PhpStorm with the current project\n## Usage: phpstorm\n## Example: \"ddev phpstorm\"\n## OSTypes: darwin\n## HostBinaryExists: \"/Applications/PhpStorm.app\"\n\n# Example is macOS-specific, but easy to adapt to any OS\nopen -a PhpStorm.app ${DDEV_APPROOT}\n```\n\n----------------------------------------\n\nTITLE: Installing DDEV with Docker Desktop Script\nDESCRIPTION: PowerShell script to download and execute the DDEV WSL2 Docker Desktop installation script. Configures system for Docker Desktop integration.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/install/ddev-installation.md#2025-04-19_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nSet-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072;\niex ((New-Object System.Net.WebClient).DownloadString('https://raw.githubusercontent.com/ddev/ddev/main/scripts/install_ddev_wsl2_docker_desktop.ps1'))\n```\n\n----------------------------------------\n\nTITLE: Configuring Upsun API Token in Global DDEV Configuration\nDESCRIPTION: Add the Upsun API token to the web_environment section in the global DDEV configuration file. This token allows DDEV to authenticate with Upsun's services.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/providers/upsun.md#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nweb_environment:\n    - UPSUN_CLI_TOKEN=abcdeyourtoken\n```\n\n----------------------------------------\n\nTITLE: Installing PHP CodeSniffer and Drupal Coding Standards in DDEV\nDESCRIPTION: Comprehensive Dockerfile example for installing phpcs, phpcbf, and Drupal coding standards globally in the DDEV web container.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/extend/customizing-images.md#2025-04-19_snippet_6\n\nLANGUAGE: dockerfile\nCODE:\n```\nENV COMPOSER_HOME=/usr/local/composer\n\n# We try to avoid relying on Composer to download global, so in `phpcs` case we can use the PHAR.\nRUN curl -L https://squizlabs.github.io/PHP_CodeSniffer/phpcs.phar -o /usr/local/bin/phpcs && chmod +x /usr/local/bin/phpcs\nRUN curl -L https://squizlabs.github.io/PHP_CodeSniffer/phpcbf.phar -o /usr/local/bin/phpcbf && chmod +x /usr/local/bin/phpcbf\n\n# If however we need to download a package, we use `cgr` for that.\nRUN composer global require consolidation/cgr\nRUN $COMPOSER_HOME/vendor/bin/cgr drupal/coder:^8.3.1\nRUN $COMPOSER_HOME/vendor/bin/cgr dealerdirect/phpcodesniffer-composer-installer\n\n# Register Drupal's code sniffer rules.\nRUN phpcs --config-set installed_paths $COMPOSER_HOME/global/drupal/coder/vendor/drupal/coder/coder_sniffer --verbose\n# Make Codesniffer config file writable for ordinary users in container.\nRUN chmod 666 /usr/local/bin/CodeSniffer.conf\n# Make `COMPOSER_HOME` writable if regular users need to use it.\nRUN chmod -R ugo+rw $COMPOSER_HOME\n# Now turn it off, because ordinary users will want to be using the default.\nENV COMPOSER_HOME=\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional FQDNs in DDEV YAML Config\nDESCRIPTION: Configuration example for setting up additional fully qualified domain names (FQDNs) that don't use the .ddev.site domain. Requires careful consideration to avoid conflicts with real internet domains.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/extend/additional-hostnames.md#2025-04-19_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: somename\n\nadditional_fqdns:\n- example.com\n- somesite.example.com\n- anothersite.example.com\n```\n\n----------------------------------------\n\nTITLE: Configuring Xdebug for Profiling in DDEV\nDESCRIPTION: This configuration enables Xdebug profiling mode, setting it to automatically start with each request and specifying the output directory and naming pattern for profiler output files. These settings should be added to the .ddev/php/xdebug.ini file.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/debugging-profiling/xdebug-profiling.md#2025-04-19_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nxdebug.mode=profile\nxdebug.start_with_request=yes\nxdebug.output_dir=/var/www/html/.ddev/xdebug\nxdebug.profiler_output_name=trace.%c%p%r%u.out\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Settings with Custom CNF\nDESCRIPTION: Example MySQL configuration file that sets collation, character set, and InnoDB settings. This configuration should be placed in .ddev/mysql/no_utf8mb4.cnf.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/extend/customization-extendibility.md#2025-04-19_snippet_16\n\nLANGUAGE: ini\nCODE:\n```\n[mysqld]\ncollation-server = utf8_general_ci\ncharacter-set-server = utf8\ninnodb_large_prefix=false\n```\n\n----------------------------------------\n\nTITLE: Installing Laravel with MariaDB in DDEV\nDESCRIPTION: Sets up a new Laravel project using Composer with MariaDB database configuration. Creates project directory, configures DDEV, and initializes Laravel installation.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/quickstart.md#2025-04-19_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nmkdir my-laravel-site && cd my-laravel-site\nddev config --project-type=laravel --docroot=public\nddev start\nddev composer create \"laravel/laravel:^12\"\nddev launch\n```\n\n----------------------------------------\n\nTITLE: Setting Xdebug IDE Location for WSL2\nDESCRIPTION: This command configures DDEV to use the WSL2 environment for Xdebug connections, which is necessary when running PhpStorm inside WSL2.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/debugging-profiling/step-debugging.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nddev config global --xdebug-ide-location=wsl2\n```\n\n----------------------------------------\n\nTITLE: Exposing Non-HTTP Ports in DDEV Docker Compose\nDESCRIPTION: Docker Compose configuration for exposing non-HTTP ports in DDEV. This example shows how to expose port 5900 for a VNC server in the web container.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/extend/customization-extendibility.md#2025-04-19_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  web:\n    ports:\n      - \"5900:5900\"\n```\n\n----------------------------------------\n\nTITLE: Configuring an existing Backdrop CMS project with DDEV\nDESCRIPTION: This snippet shows how to set up DDEV for an existing Backdrop CMS project. It covers cloning a repository, configuring DDEV, adding the Bee CLI add-on, and importing database and files backups.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/quickstart.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir my-backdrop-site && cd my-backdrop-site\n\n# Use your own repository URL, this is an example\ngit clone https://github.com/ddev/test-backdrop.git .\n\n# Set up the DDEV environment:\nddev config --project-type=backdrop\n\n# Add the official Bee CLI add-on\nddev add-on get backdrop-ops/ddev-backdrop-bee\n\n# Start the project\nddev start\n\n# Import a database backup:\nddev import-db --file=/path/to/db.sql.gz\n\n# Import files backup\nddev import-files --source=/path/to/files.tar.gz\n\n# open the site in your browser\nddev launch\n```\n\n----------------------------------------\n\nTITLE: Checking Xdebug Configuration in Container\nDESCRIPTION: This command checks the Xdebug configuration inside the DDEV container, verifying if Xdebug is enabled and its mode.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/debugging-profiling/step-debugging.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nphp -i | grep -i xdebug\n```\n\n----------------------------------------\n\nTITLE: Setting Acquia Environment ID via Command Line (Bash)\nDESCRIPTION: This bash command shows how to set the ACQUIA_ENVIRONMENT_ID using the DDEV command line interface. It uses the ddev config command with the --web-environment-add flag.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/providers/acquia.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nddev config --web-environment-add=\"ACQUIA_ENVIRONMENT_ID=yoursite.dev\"\n```\n\n----------------------------------------\n\nTITLE: Database Client Commands in DDEV CLI\nDESCRIPTION: Examples of using various database client commands (mysql, mariadb, psql) to interact with different types of databases.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/commands.md#2025-04-19_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\n# Run the database container's MySQL client as root user\nddev mysql\n\n# Run the database container's MySQL client as db user\nddev mysql -udb -pdb\n\n# Run the database container's MariaDB client as root user\nddev mariadb\n\n# List available PostgreSQL databases\nddev psql -l\n\n# List tables in the default 'db' database\necho \"\\dt;\" | ddev psql\n```\n\n----------------------------------------\n\nTITLE: Managing Xdebug in DDEV\nDESCRIPTION: Examples of using the ddev xdebug command to manage Xdebug for PHP debugging, including checking status, enabling, disabling, and toggling the debugger.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/commands.md#2025-04-19_snippet_45\n\nLANGUAGE: shell\nCODE:\n```\n# Display whether Xdebug is running\nddev xdebug status\n\n# Turn Xdebug on\nddev xdebug\n\n# Turn Xdebug on\nddev xdebug on\n\n# Turn Xdebug off\nddev xdebug off\n\n# Toggle Xdebug on and off\nddev xdebug toggle\n```\n\n----------------------------------------\n\nTITLE: Implementing Solr Log Tail Command in DDEV\nDESCRIPTION: A container command script that tails the Solr log file within a Solr service container.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/extend/custom-commands.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/env bash\n\n## Description: Tail the main solr log\n## Usage: solrtail\n## Example: ddev solrtail\n\ntail -f /opt/solr/server/logs/solr.log\n```\n\n----------------------------------------\n\nTITLE: Restarting DDEV Projects\nDESCRIPTION: Examples of using the ddev restart command to restart one or multiple projects, including options for restarting all projects simultaneously using the --all flag.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/commands.md#2025-04-19_snippet_28\n\nLANGUAGE: shell\nCODE:\n```\n# Restart the current project\nddev restart\n\n# Restart my-project and my-other-project\nddev restart my-project my-other-project\n\n# Restart all projects\nddev restart --all\n```\n\n----------------------------------------\n\nTITLE: Setting up TYPO3 with DDEV using Git Clone\nDESCRIPTION: Commands to set up a TYPO3 project from a Git repository and configure DDEV. This clones a test repository and sets up TYPO3 with PHP 8.3.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/quickstart.md#2025-04-19_snippet_46\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/ddev/test-typo3.git my-typo3-site\ncd my-typo3-site\nddev config --project-type=typo3 --docroot=public --php-version=8.3\nddev start\nddev composer install\nddev exec touch public/FIRST_INSTALL\nddev launch /typo3/install.php\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform.sh Project Variables in YAML\nDESCRIPTION: This YAML snippet adds the required Platform.sh project identifier and environment name to your project configuration to enable DDEV to connect to the correct Platform.sh project.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/providers/platform.md#2025-04-19_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nweb_environment:\n    - PLATFORM_PROJECT=nf4amudfn23biyourproject\n    - PLATFORM_ENVIRONMENT=main\n```\n\n----------------------------------------\n\nTITLE: Making HTTP Requests Between DDEV Projects Using Container Hostnames\nDESCRIPTION: Example of how to make HTTP requests from one DDEV project to another using the direct container hostname approach.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/faq.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# call from project A web container to project B's web container\ncurl https://ddev-projectb-web\n```\n\n----------------------------------------\n\nTITLE: Configuring Global DDEV Settings in Shell\nDESCRIPTION: These commands demonstrate how to configure global DDEV settings. The first command opts out of sharing anonymized usage information, while the second skips the SSH agent for all projects.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/commands.md#2025-04-19_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n# Opt out of sharing anonymized usage information\nddev config global --instrumentation-opt-in=false\n\n# Skip the SSH agent for all projects\nddev config global --omit-containers=ddev-ssh-agent\n```\n\n----------------------------------------\n\nTITLE: Sharing DDEV Projects via Ngrok\nDESCRIPTION: Examples of sharing DDEV projects on the internet using ngrok, including options for customizing the domain, adding authentication, and sharing specific projects.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/commands.md#2025-04-19_snippet_35\n\nLANGUAGE: shell\nCODE:\n```\n# Share the current project with ngrok\nddev share\n\n# Share the current project with ngrok, using domain `foo.ngrok-free.app`\nddev share --ngrok-args \"--domain foo.ngrok-free.app\"\n\n# Share the current project using ngrok's basic-auth argument\nddev share --ngrok-args \"--basic-auth username:pass1234\"\n\n# Share my-project with ngrok\nddev share my-project\n```\n\n----------------------------------------\n\nTITLE: Advanced Logrus Configuration\nDESCRIPTION: Demonstrates comprehensive Logrus setup including custom formatting, output configuration, and log levels with field reuse.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-19_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"os\"\n  log \"github.com/sirupsen/logrus\"\n)\n\nfunc init() {\n  // Log as JSON instead of the default ASCII formatter.\n  log.SetFormatter(&log.JSONFormatter{})\n\n  // Output to stdout instead of the default stderr\n  // Can be any io.Writer, see below for File example\n  log.SetOutput(os.Stdout)\n\n  // Only log the warning severity or above.\n  log.SetLevel(log.WarnLevel)\n}\n\nfunc main() {\n  log.WithFields(log.Fields{\n    \"animal\": \"walrus\",\n    \"size\":   10,\n  }).Info(\"A group of walrus emerges from the ocean\")\n\n  log.WithFields(log.Fields{\n    \"omg\":    true,\n    \"number\": 122,\n  }).Warn(\"The group's number increased tremendously!\")\n\n  log.WithFields(log.Fields{\n    \"omg\":    true,\n    \"number\": 100,\n  }).Fatal(\"The ice breaks!\")\n\n  // A common pattern is to re-use fields between logging statements by re-using\n  // the logrus.Entry returned from WithFields()\n  contextLogger := log.WithFields(log.Fields{\n    \"common\": \"this is a common field\",\n    \"other\": \"I also should be logged always\",\n  })\n\n  contextLogger.Info(\"I'll be logged with common and other field\")\n  contextLogger.Info(\"Me too\")\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading DDEV using Install Script on macOS\nDESCRIPTION: Command to download and run the DDEV installation script to upgrade to the latest version on macOS.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/install/ddev-upgrade.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Download and run the script to replace the DDEV binary\ncurl -fsSL https://ddev.com/install.sh | bash\n```\n\n----------------------------------------\n\nTITLE: Importing Database to a Secondary Database\nDESCRIPTION: Command to import a SQL dump file into a secondary database in DDEV, automatically creating the database if it doesn't exist.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/faq.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nddev import-db --database=extradb --file=.tarballs/extradb.sql.gz\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in .env Files for DDEV Containers\nDESCRIPTION: Example of a .ddev/.env file that provides environment variables to all DDEV containers, including additional services or add-ons. These variables are accessible in all containers.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/extend/customization-extendibility.md#2025-04-19_snippet_0\n\nLANGUAGE: dotenv\nCODE:\n```\nMY_ENV_VAR=\"someval\"\nMY_OTHER_ENV_VAR=\"someotherval\"\n```\n\n----------------------------------------\n\nTITLE: Upgrading DDEV on GitHub Codespaces\nDESCRIPTION: Commands to update package information and upgrade all packages including DDEV when using GitHub Codespaces.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/install/ddev-upgrade.md#2025-04-19_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Update package information and all packages including DDEV\nsudo apt-get update && sudo apt-get upgrade -y\n```\n\n----------------------------------------\n\nTITLE: Configuring DDEV Project Webserver Type in Shell\nDESCRIPTION: This command switches the project's default webserver from nginx-fpm to apache-fpm. It demonstrates how to use the ddev config command to change project settings.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/commands.md#2025-04-19_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nddev config --webserver-type=apache-fpm\n```\n\n----------------------------------------\n\nTITLE: Installing Ibexa DXP with DDEV\nDESCRIPTION: Sets up Ibexa DXP OSS Edition using DDEV with custom database configuration and GraphQL schema generation.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/quickstart.md#2025-04-19_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nmkdir my-ibexa-site && cd my-ibexa-site\nddev config --project-type=php --docroot=public --web-environment-add DATABASE_URL=mysql://db:db@db:3306/db\nddev start\nddev composer create ibexa/oss-skeleton\nddev exec console ibexa:install\nddev exec console ibexa:graphql:generate-schema\nddev launch /admin/login\n```\n\n----------------------------------------\n\nTITLE: Upgrading DDEV using Homebrew on macOS\nDESCRIPTION: Command to upgrade DDEV to the latest version using Homebrew package manager on macOS.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/install/ddev-upgrade.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Upgrade DDEV to the latest version\nbrew upgrade ddev/ddev/ddev\n```\n\n----------------------------------------\n\nTITLE: Using DDEV Push Command with Provider Plugins\nDESCRIPTION: Shows various examples of using the ddev push command to push local files and database to configured provider platforms like Pantheon, Platform.sh, and Acquia, with options for skipping files or database.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/commands.md#2025-04-19_snippet_26\n\nLANGUAGE: shell\nCODE:\n```\n# Push local files and database to the configured Pantheon project\nddev push pantheon\n\n# Push local files and database to the configured Platform.sh project\nddev push platform\n\n# Push files and database to Pantheon without confirming\nddev push pantheon -y\n\n# Push database only to Platform.sh without confirming\nddev push platform --skip-files -y\n\n# Push files only to Acquia without confirming\nddev push acquia --skip-db -y\n```\n\n----------------------------------------\n\nTITLE: Configuring Acquia API Keys in DDEV Global Config (YAML)\nDESCRIPTION: This snippet shows how to add Acquia API keys to the web_environment section of the DDEV global configuration file. It sets the ACQUIA_API_KEY and ACQUIA_API_SECRET environment variables.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/providers/acquia.md#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nweb_environment:\n    - ACQUIA_API_KEY=xxxxxxxx\n    - ACQUIA_API_SECRET=xxxxx\n```\n\n----------------------------------------\n\nTITLE: Running TYPO3 CLI Commands in DDEV\nDESCRIPTION: Example of using the ddev typo3 command to run TYPO3 CLI commands within a TYPO3 project, showing how to display site configuration information.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/commands.md#2025-04-19_snippet_42\n\nLANGUAGE: shell\nCODE:\n```\n# Show typo3 site configuration\nddev typo3 site:show\n```\n\n----------------------------------------\n\nTITLE: Using Sprig Functions in Templates\nDESCRIPTION: Example demonstrating the use of Sprig functions in Go templates using pipe syntax. Shows function chaining with upper and repeat functions.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/Masterminds/sprig/v3/README.md#2025-04-19_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n{{ \"hello!\" | upper | repeat 5 }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Environment Variables in DDEV\nDESCRIPTION: Example of setting environment variables globally in .ddev/global_config.yaml. These variables will be available in all projects using this global configuration.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/extend/customization-extendibility.md#2025-04-19_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nweb_environment:\n    - MY_ENV_VAR=someval\n    - MY_OTHER_ENV_VAR=someotherval\n```\n\n----------------------------------------\n\nTITLE: Configuring MariaDB Server Settings for DDEV Environment\nDESCRIPTION: This configuration disables host cache, symbolic links, and query cache for better performance in development environments. It also explicitly sets innodb-use-native-aio to 0 to prevent issues when running in unprivileged containers, particularly with MariaDB 10.8 and higher.\nSOURCE: https://github.com/ddev/ddev/blob/main/containers/ddev-dbserver/files/etc/mysql/version-conf.d/mariadb_10.11.cnf.txt#2025-04-19_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[mysqld]\n\nskip-host-cache\nsymbolic-links=0\nquery-cache-type               = 0\nquery-cache-size               = 0\n\n# mariadb 10.8 and higher don't seem to be able to work with innodb_use_native_aio\n# without a privileged container, which seems like too much risk\ninnodb-use-native-aio=0\n\n# Message on start is like this:\n#  [Warning] mysqld: io_uring_queue_init() failed with errno 1\n#  [Warning] InnoDB: liburing disabled: falling back to innodb_use_native_aio=OFF\n# These docker-compose overrides were able to make innodb-use-native-aio work\n# For innodb_use_native_aio=ON mariadb versions need this, see\n# https://github.com/MariaDB/mariadb-docker/issues/454#issuecomment-1212040735\n#privileged: true\n#ulimits:\n#  memlock:\n#    soft: \"-1\"\n#    hard: \"-1\"\n```\n\n----------------------------------------\n\nTITLE: Exposing Extra Ports in DDEV YAML\nDESCRIPTION: YAML configuration for exposing additional HTTP ports from the web container through ddev-router. This example shows how to expose a Node.js Vite server running on port 3000 internally to external HTTP and HTTPS ports.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/extend/customization-extendibility.md#2025-04-19_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nweb_extra_exposed_ports:\n  - name: node-vite\n    container_port: 3000\n    http_port: 9998\n    https_port: 9999\n```\n\n----------------------------------------\n\nTITLE: Implementing XZ Compression and Decompression in Go\nDESCRIPTION: Example program demonstrating how to compress text into XZ format and decompress it back using the xz package. Shows buffer handling, error management, and stream processing using the Writer and Reader interfaces.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/ulikunitz/xz/README.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"bytes\"\n    \"io\"\n    \"log\"\n    \"os\"\n\n    \"github.com/ulikunitz/xz\"\n)\n\nfunc main() {\n    const text = \"The quick brown fox jumps over the lazy dog.\\n\"\n    var buf bytes.Buffer\n    // compress text\n    w, err := xz.NewWriter(&buf)\n    if err != nil {\n        log.Fatalf(\"xz.NewWriter error %s\", err)\n    }\n    if _, err := io.WriteString(w, text); err != nil {\n        log.Fatalf(\"WriteString error %s\", err)\n    }\n    if err := w.Close(); err != nil {\n        log.Fatalf(\"w.Close error %s\", err)\n    }\n    // decompress buffer and write output to stdout\n    r, err := xz.NewReader(&buf)\n    if err != nil {\n        log.Fatalf(\"NewReader error %s\", err)\n    }\n    if _, err = io.Copy(os.Stdout, r); err != nil {\n        log.Fatalf(\"io.Copy error %s\", err)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing XHGui Profiler in DDEV\nDESCRIPTION: Examples of using the ddev xhgui command to manage XHGui PHP profiling, including checking status, enabling, disabling, and launching the XHGui interface.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/commands.md#2025-04-19_snippet_46\n\nLANGUAGE: shell\nCODE:\n```\n# Display whether XHGui is enabled and running\nddev xhgui status\n\n# Turn XHGui on\nddev xhgui\n\n# Launch the XHGui UI\nddev xhgui launch\n\n# Turn XHGui on\nddev xhgui on\n\n# Turn XHGui off\nddev xhgui off\n```\n\n----------------------------------------\n\nTITLE: Building Sulu Database with Admin User\nDESCRIPTION: Commands to set environment variables and build the Sulu database with a default admin user. This configures the database connection and creates an admin user with the password 'admin'.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/quickstart.md#2025-04-19_snippet_38\n\nLANGUAGE: bash\nCODE:\n```\n# Set APP_ENV and DATABASE_URL in .env.local\nddev dotenv set .env.local --app-env=dev --database-url=\"mysql://db:db@db:3306/db?serverVersion=8.0&charset=utf8mb4\"\nddev exec bin/adminconsole sulu:build dev --no-interaction\n# Login using `admin` user and `admin` password\nddev launch /admin\n```\n\n----------------------------------------\n\nTITLE: Removing Database Data in DDEV\nDESCRIPTION: Command to stop DDEV and remove all database data, useful before importing a fresh database dump.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/managing-projects.md#2025-04-19_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nddev stop --remove-data\n```\n\n----------------------------------------\n\nTITLE: Creating Archive for ddev import-files\nDESCRIPTION: Example of creating a tar archive suitable for ddev import-files. The command shows how to properly create an archive containing only the contents of a files directory.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/cli.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd web/sites/default/files\ntar -czf ~/Downloads/files.tgz .\n```\n\n----------------------------------------\n\nTITLE: Configuring Drupal Multisite Settings\nDESCRIPTION: PHP code snippet for Drupal multisite settings.php to load DDEV-specific settings while in the DDEV environment.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/cms-settings.md#2025-04-19_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n/**\n * DDEV environments will have $databases (and other settings) set\n * by an auto-generated file. Make alterations here for this site\n * in a multisite environment.\n */\nelseif (getenv('IS_DDEV_PROJECT') == 'true') {\n  /**\n   * Alter database settings and credentials for DDEV environment.\n   * Includes loading the DDEV-generated `default/settings.ddev.php`.\n   */\n  include $app_root . '/' . $site_path . '/settings.databases.ddev.inc';\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Lima for Docker with DDEV on macOS\nDESCRIPTION: Command sequence to create and configure a Lima VM for Docker usage with DDEV. Sets up a 100GB VM with 4 CPUs, 6GB memory, and configures the Docker context to use this Lima instance.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/install/docker-installation.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nlimactl create --name=default --vm-type=vz --mount-type=virtiofs --mount-writable --memory=6 --cpus=4 --disk=100 template://docker\ndocker context create lima-default --docker \"host=unix://$HOME/.lima/default/sock/docker.sock\"\ndocker context use lima-default\n```\n\n----------------------------------------\n\nTITLE: Creating Drupal Multisite Database Settings\nDESCRIPTION: PHP code for Drupal multisite database settings to override the default database with a site-specific one in DDEV environment.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/cms-settings.md#2025-04-19_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Fetch DDEV-generated database credentials and other settings.\n */\nrequire $app_root . '/sites/default/settings.ddev.php';\n\n/**\n * Alter default database for this site. `settings.ddev.php` will have\n * \"reset\" this to 'db'.\n */\n$databases['default']['default']['database'] = 'site_name';\n```\n\n----------------------------------------\n\nTITLE: Setting up a new Craft CMS project with DDEV\nDESCRIPTION: This snippet demonstrates how to create a new Craft CMS project using DDEV. It includes steps for initializing the project, installing Craft CMS using Composer, and setting up the initial admin user.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/quickstart.md#2025-04-19_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Create a project directory and move into it:\nmkdir my-craft-site && cd my-craft-site\n\n# Set up the DDEV environment:\nddev config --project-type=craftcms --docroot=web\n\n# Boot the project and install the starter project:\nddev start\nddev composer create --no-scripts craftcms/craft\nddev craft install/craft \\\n    --username=admin \\\n    --password=Password123 \\\n    --email=admin@example.com \\\n    --site-name='$DDEV_PROJECT' \\\n    --language=en \\\n    --site-url='$DDEV_PRIMARY_URL'\n\n# Login using `admin` user and `Password123` password\nddev launch\n```\n\n----------------------------------------\n\nTITLE: Importing Database to Non-Default Database in DDEV\nDESCRIPTION: Command to import database dump into a specific target database other than the default 'db' database. Creates the target database if it doesn't exist.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/managing-projects.md#2025-04-19_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nddev import-db --target-db <some_database>\n```\n\n----------------------------------------\n\nTITLE: Project List Commands in DDEV CLI\nDESCRIPTION: Examples of using the ddev list command to display project information with various filtering options.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/commands.md#2025-04-19_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\n# List all projects\nddev list\n\n# List all running projects\nddev list --active-only\n\n# List all WordPress projects\nddev list --type wordpress\n```\n\n----------------------------------------\n\nTITLE: Using yarn Command in DDEV\nDESCRIPTION: The yarn command runs Yarn package manager commands inside the web container. It can be used with various Yarn subcommands and options, including specifying a different working directory.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/commands.md#2025-04-19_snippet_48\n\nLANGUAGE: shell\nCODE:\n```\n# Use Yarn to install JavaScript packages\nddev yarn install\n\n# Use Yarn to add the Lerna package\nddev yarn add lerna\n\n# Use yarn in a relative directory\ncd web/core && ddev yarn add lerna\n\n# Use Yarn to add the Lerna package from the `web/core` directory\nddev yarn --cwd web/core add lerna\n\n# Use latest yarn or specified yarn\nddev config --corepack-enable && ddev restart\nddev yarn set version stable\nddev yarn --version\n```\n\n----------------------------------------\n\nTITLE: Installing Mapstructure using Go Get\nDESCRIPTION: This snippet shows how to install the mapstructure library using the standard Go get command.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/mitchellh/mapstructure/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ go get github.com/mitchellh/mapstructure\n```\n\n----------------------------------------\n\nTITLE: Adding Project-Level Platform.sh API Token (YAML)\nDESCRIPTION: This YAML configuration shows how to add a Platform.sh API token to a specific project using the .ddev/config.local.yaml file, useful when working with multiple tokens for different projects.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/providers/platform.md#2025-04-19_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nweb_environment:\n    - PLATFORMSH_CLI_TOKEN=abcdeyourtoken\n```\n\n----------------------------------------\n\nTITLE: Drupal 10 Hook Configuration\nDESCRIPTION: Example of Drupal 10 specific hooks for dependency management and database operations\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/configuration/hooks.md#2025-04-19_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nhooks:\n  post-start:\n    - composer: install\n    - exec: \"drush user:login\"\n  post-import-db:\n    - exec: \"drush sql:sanitize\"\n    - exec: \"drush updatedb\"\n    - exec: \"drush cache:rebuild\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Blackfire Environment Variables in DDEV Global Configuration\nDESCRIPTION: This YAML configuration shows how to add Blackfire credentials to the DDEV global configuration file. These environment variables are required for Blackfire profiling to work with your DDEV projects.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/debugging-profiling/blackfire-profiling.md#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nweb_environment:\n    - OTHER_ENV=something\n    - BLACKFIRE_SERVER_ID=dde5f66d-xxxxxx\n    - BLACKFIRE_SERVER_TOKEN=09b0ec-xxxxx\n    - BLACKFIRE_CLIENT_ID=f5e88b7e-xxxxx\n    - BLACKFIRE_CLIENT_TOKEN=00cee15-xxxxx1\n```\n\n----------------------------------------\n\nTITLE: Error Wrapping Example\nDESCRIPTION: Shows how to add context to an error using errors.Wrap function when handling a file read operation.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/pkg/errors/README.md#2025-04-19_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n_, err := ioutil.ReadAll(r)\nif err != nil {\n        return errors.Wrap(err, \"read failed\")\n}\n```\n\n----------------------------------------\n\nTITLE: Pulling Data from Upsun to DDEV\nDESCRIPTION: Command to download and import database and files from Upsun to your local DDEV environment. This synchronizes your local development environment with the specified Upsun environment.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/providers/upsun.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nddev pull upsun\n```\n\n----------------------------------------\n\nTITLE: Running Platform.sh Pull Command\nDESCRIPTION: This bash command pulls the current upstream databases and files from Platform.sh into your local DDEV environment.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/providers/platform.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nddev pull platform\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for Inter-Project Communication\nDESCRIPTION: YAML configuration for docker-compose.communicate.yaml that enables one DDEV project to communicate with another through the ddev-router using the project's domain name.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/faq.md#2025-04-19_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# add this to project A, allows connection to project B\nservices:\n  web:\n    external_links:\n      - \"ddev-router:projectb.ddev.site\"\n```\n\n----------------------------------------\n\nTITLE: Importing Files with ddev import-files\nDESCRIPTION: Example of using the ddev import-files command to import static assets into a project. The interactive prompt asks for the source location and extraction path for archived files.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/cli.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ ddev import-files\nProvide the path to the source directory or archive you wish to import.\nPlease note: if the destination directory exists, it will be emptied and replaced with the\nimport assets specified here.\nPath to file(s): ~/workspace/d10/.tarballs/files.tgz\nYou provided an archive. Do you want to extract from a specific path in your\narchive? You may leave this blank if you wish to use the full archive contents.\nArchive extraction path:\nSuccessfully imported files for d10\n```\n\n----------------------------------------\n\nTITLE: Adding Project-Specific Pantheon Token to DDEV Configuration\nDESCRIPTION: This code demonstrates how to add a Pantheon machine token to a project-specific DDEV configuration file. This approach is useful when managing multiple projects with different Pantheon accounts.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/providers/pantheon.md#2025-04-19_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nweb_environment:\n    - TERMINUS_MACHINE_TOKEN=your_token\n```\n\n----------------------------------------\n\nTITLE: Project-Specific HTTPS Redirect Middleware\nDESCRIPTION: YAML configuration for implementing HTTPS redirect middleware for a specific project\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/extend/traefik-router.md#2025-04-19_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  middlewares:\n    example-redirectHttps:\n      redirectScheme:\n        scheme: https\n        permanent: true\n```\n\n----------------------------------------\n\nTITLE: Importing a Database from an Archive\nDESCRIPTION: Example of importing a database from a compressed archive file. The system prompts for both the archive path and the specific path within the archive to use for the import.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/managing-projects.md#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nddev import-db\nProvide the path to the database you wish to import.\nImport path:\n~/Downloads/site-backup.tar.gz\nYou provided an archive. Do you want to extract from a specific path in your archive? You may leave this blank if you wish to use the full archive contents\nArchive extraction path:\ndata.sql\nImporting database...\nA settings file already exists for your application, so ddev did not generate one.\nRun 'ddev describe' to find the database credentials for this application.\nSuccessfully imported database for drupal8\n```\n\n----------------------------------------\n\nTITLE: Importing a Database with Interactive Prompts\nDESCRIPTION: Example of using the 'ddev import-db' command interactively, where the system prompts for the file path. This shows importing a SQL file directly into the project's database.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/managing-projects.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nddev import-db\nProvide the path to the database you wish to import.\nImport path:\n~/Downloads/db.sql\nImporting database...\nSuccessfully imported database for drupal8\n```\n\n----------------------------------------\n\nTITLE: DDEV Describe Command Help\nDESCRIPTION: Demonstrates the help output for the describe command, showing usage information and available flags.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/commands.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n→  ddev help describe\nGet a detailed description of a running ddev project. Describe provides basic\ninformation about a ddev project, including its name, location, url, and status.\nIt also provides details for MySQL connections, and connection information for\nadditional services like Mailpit. You can run 'ddev describe' from\na project directory to describe that project, or you can specify a project to describe by\nrunning 'ddev describe <projectname>'.\n\nUsage:\n  ddev describe [projectname] [flags]\n\nAliases:\n  describe, status, st, desc\n\nExamples:\nddev describe\nddev describe <projectname>\nddev status\nddev st\n\nFlags:\n  -h, --help   help for describe\n\nGlobal Flags:\n  -j, --json-output   If true, user-oriented output will be in JSON format.\n```\n\n----------------------------------------\n\nTITLE: Custom Port Configuration in YAML\nDESCRIPTION: Example of overriding default HTTP port settings using a custom config.ports.yaml file. Demonstrates how to modify router settings for individual development environments.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/extend/customization-extendibility.md#2025-04-19_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\n# My machine can't use port 80 so override with port 8080, but don't check this in!\nrouter_http_port: 8080\n```\n\n----------------------------------------\n\nTITLE: Logging Pattern Example - Converting Format String to Structured Logging\nDESCRIPTION: Examples demonstrating how to convert traditional format string logging to structured logging patterns in Go, showing the transformation from klog to logr style logging.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/go-logr/logr/README.md#2025-04-19_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Old format string style:\nklog.V(4).Infof(\"Client is returning errors: code %v, error %v\", responseCode, err)\n\n// New structured logging style:\nlogger.Error(err, \"client returned an error\", \"code\", responseCode)\n\n// Another example:\n// Old style:\nklog.V(4).Infof(\"Got a Retry-After %ds response for attempt %d to %v\", seconds, retries, url)\n\n// New style:\nlogger.V(4).Info(\"got a retry-after response when requesting url\", \"attempt\", retries, \"after seconds\", seconds, \"url\", url)\n```\n\n----------------------------------------\n\nTITLE: Displaying DDEV Version Information\nDESCRIPTION: Example of using the ddev version command to print DDEV and component versions, useful for debugging and support purposes.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/commands.md#2025-04-19_snippet_43\n\nLANGUAGE: shell\nCODE:\n```\n# Print DDEV and platform version details\nddev version\n```\n\n----------------------------------------\n\nTITLE: Setting up Statamic with DDEV using Composer\nDESCRIPTION: Commands to create a new Statamic project using Composer, configure DDEV with Laravel project type, and create an admin user. This sets up Statamic with access to the control panel at /cp.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/quickstart.md#2025-04-19_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\nmkdir my-statamic-site && cd my-statamic-site\nddev config --project-type=laravel --docroot=public\nddev composer create --prefer-dist statamic/statamic\nddev php please make:user admin@example.com --password=admin1234 --super --no-interaction\nddev launch /cp\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache HTTP to HTTPS Redirects for DDEV\nDESCRIPTION: This Apache configuration snippet handles HTTP to HTTPS redirects for both proxy and plain setups, avoiding infinite loops in DDEV environments. It's designed to work in most scenarios, even outside of DDEV.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/faq.md#2025-04-19_snippet_5\n\nLANGUAGE: apache\nCODE:\n```\n# http:// -> https:// plain or behind proxy for Apache 2.2 and 2.4\n# behind proxy\nRewriteCond %{HTTP:X-FORWARDED-PROTO} ^http$\nRewriteRule (.*) https://%{HTTP_HOST}/$1 [R=301,L]\n\n# plain\nRewriteCond %{HTTP:X-FORWARDED-PROTO} ^$\nRewriteCond %{REQUEST_SCHEME} ^http$ [NC,OR]\nRewriteCond %{HTTPS} off\nRewriteRule (.*) https://%{HTTP_HOST}/$1 [R=301,L]\n```\n\n----------------------------------------\n\nTITLE: Implementing Single-Line Input Prompt with Validation in Go\nDESCRIPTION: This snippet demonstrates how to create a single-line input prompt using Promptui. It includes a custom validation function to ensure the input is a valid number.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/manifoldco/promptui/README.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"strconv\"\n\n\t\"github.com/manifoldco/promptui\"\n)\n\nfunc main() {\n\tvalidate := func(input string) error {\n\t\t_, err := strconv.ParseFloat(input, 64)\n\t\tif err != nil {\n\t\t\treturn errors.New(\"Invalid number\")\n\t\t}\n\t\treturn nil\n\t}\n\n\tprompt := promptui.Prompt{\n\t\tLabel:    \"Number\",\n\t\tValidate: validate,\n\t}\n\n\tresult, err := prompt.Run()\n\n\tif err != nil {\n\t\tfmt.Printf(\"Prompt failed %v\\n\", err)\n\t\treturn\n\t}\n\n\tfmt.Printf(\"You choose %q\\n\", result)\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading DDEV on Fedora/Red Hat Linux\nDESCRIPTION: Command to upgrade the DDEV package on Fedora, Red Hat, and similar Linux distributions using the DNF package manager.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/install/ddev-upgrade.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Upgrade the DDEV package\nsudo dnf upgrade ddev\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in DDEV Config\nDESCRIPTION: YAML configuration for inheriting Codespaces environment variables in DDEV configuration.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/install/ddev-installation.md#2025-04-19_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nweb_environment:\n    - CODESPACES\n    - CODESPACE_NAME\n    - GITHUB_CODESPACES_PORT_FORWARDING_DOMAIN\n```\n\n----------------------------------------\n\nTITLE: Deleting DDEV Project Without Snapshot\nDESCRIPTION: Command to delete a DDEV project without creating a snapshot.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/faq.md#2025-04-19_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nddev delete --omit-snapshot\n```\n\n----------------------------------------\n\nTITLE: Configuring Optional DDEV Service with Docker Compose Profile\nDESCRIPTION: Example configuration for defining an optional busybox service that will only start when explicitly requested using the busybox profile. The service is configured with basic container settings including image, command, container name, and DDEV-specific labels.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/extend/custom-compose-files.md#2025-04-19_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  busybox:\n    image: busybox:stable\n    command: tail -f /dev/null\n    profiles:\n      - busybox\n    container_name: ddev-${DDEV_SITENAME}-busybox\n    labels:\n      com.ddev.site-name: ${DDEV_SITENAME}\n      com.ddev.approot: ${DDEV_APPROOT}\n```\n\n----------------------------------------\n\nTITLE: Listing All DDEV Projects\nDESCRIPTION: Output of the 'ddev list' command showing all projects in the DDEV environment. The output displays project name, status, location, URL, and project type for both active and inactive projects.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/managing-projects.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n➜  ddev list\n NAME            STATUS        LOCATION                    URL                           TYPE\n d10             stopped       ~/workspace/d10                                           drupal10\n drup            running (ok)  ~/workspace/drup            https://drup.ddev.site        drupal\n my-cakephp-app  stopped       ~/workspace/my-cakephp-app                                cakephp\n Router          healthy       ~/.ddev                     http://127.0.0.1:10999        traefik\n```\n\n----------------------------------------\n\nTITLE: Configuring ngrok domain in DDEV config\nDESCRIPTION: This YAML snippet shows how to set a custom ngrok domain in the DDEV configuration file. It's used to maintain a stable ngrok URL for sharing the project.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/topics/sharing.md#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nngrok_args: --domain wp23.ngrok-free.app\n```\n\n----------------------------------------\n\nTITLE: Restoring Database Snapshots in DDEV\nDESCRIPTION: Examples of restoring database snapshots in DDEV projects, including options for restoring the latest snapshot or a specific named snapshot.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/commands.md#2025-04-19_snippet_37\n\nLANGUAGE: shell\nCODE:\n```\n# Restore the most recent snapshot\nddev snapshot restore --latest\n\n# Restore the previously-taken `my_snapshot_name` snapshot\nddev snapshot restore my_snapshot_name\n```\n\n----------------------------------------\n\nTITLE: Installing DDEV via Install Script on macOS\nDESCRIPTION: Commands to download and run the DDEV install script on macOS.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/install/ddev-installation.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Download and run the install script\ncurl -fsSL https://ddev.com/install.sh | bash\n```\n\n----------------------------------------\n\nTITLE: Opening Querious Database Manager in DDEV\nDESCRIPTION: Example of using the ddev querious command to open the Querious database manager for the current project's MariaDB or MySQL database. This command is only available if Querious.app is installed in the Applications directory.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/commands.md#2025-04-19_snippet_27\n\nLANGUAGE: shell\nCODE:\n```\n# Open the current project's database in Querious\nddev querious\n```\n\n----------------------------------------\n\nTITLE: Configuring Acquia API Keys in Project-Specific Config (YAML)\nDESCRIPTION: This snippet shows how to add Acquia API keys to the web_environment section of a project-specific DDEV configuration file. It's useful for projects requiring different API keys.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/providers/acquia.md#2025-04-19_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nweb_environment:\n    - ACQUIA_API_KEY=xxxxxxxx\n    - ACQUIA_API_SECRET=xxxxx\n```\n\n----------------------------------------\n\nTITLE: Installing PHP Extension with Dynamic Version in DDEV\nDESCRIPTION: Demonstrates installing a PHP extension (xhprof) using the DDEV_PHP_VERSION environment variable to ensure compatibility with the configured PHP version. Includes compilation from source with necessary dependencies.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/extend/customizing-images.md#2025-04-19_snippet_7\n\nLANGUAGE: dockerfile\nCODE:\n```\nENV extension=xhprof\nENV extension_repo=https://github.com/longxinH/xhprof\nENV extension_version=v2.3.8\n\nRUN (apt-get update || true) && DEBIAN_FRONTEND=noninteractive apt-get install -y -o Dpkg::Options::=\"--force-confnew\" --no-install-recommends --no-install-suggests autoconf build-essential libc-dev php-pear php${DDEV_PHP_VERSION}-dev pkg-config zlib1g-dev\nRUN mkdir -p /tmp/php-${extension} && cd /tmp/php-${extension} && git clone ${extension_repo} .\nWORKDIR /tmp/php-${extension}/extension\nRUN git checkout ${extension_version}\nRUN phpize\nRUN ./configure\nRUN make install\nRUN echo \"extension=${extension}.so\" > /etc/php/${DDEV_PHP_VERSION}/mods-available/${extension}.ini\n```\n\n----------------------------------------\n\nTITLE: DDEV Systemd Service Configuration\nDESCRIPTION: Systemd unit file for automatically starting DDEV sites when the system boots, requiring Docker service and configured with specific user permissions.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/topics/hosting.md#2025-04-19_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\n# Start DDEV when system starts (after Docker)\n# Stop DDEV when Docker shuts down\n# Start with `sudo systemctl start ddev`\n# Enable on boot with `sudo systemctl enable ddev`\n# Make sure to edit the User= for your user and the\n# full path to `ddev` on your system.\n# Optionally give a list of sites instead of --all\n[Unit]\nDescription=DDEV sites\nAfter=multi-user.target\nRequires=docker.service\nPartOf=docker.service\n[Service]\nUser=rfay\nType=oneshot\nExecStart=/usr/local/bin/ddev start --all\nRemainAfterExit=true\nExecStop=/usr/local/bin/ddev poweroff\n\n[Install]\nWantedBy=multi-user.target\n```\n\n----------------------------------------\n\nTITLE: Configuring DDEV Internet Detection Timeout\nDESCRIPTION: Command to set the global internet detection timeout for DDEV.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/faq.md#2025-04-19_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nddev config global --internet-detection-timeout-ms=3000\n```\n\n----------------------------------------\n\nTITLE: Using Decimal Library for Financial Calculations in Go\nDESCRIPTION: Example demonstrating basic usage of the decimal library for financial calculations including price, quantity, fees, and tax calculations. Shows how to create decimal numbers from strings and integers, perform mathematical operations, and format output.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/shopspring/decimal/README.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/shopspring/decimal\"\n)\n\nfunc main() {\n\tprice, err := decimal.NewFromString(\"136.02\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tquantity := decimal.NewFromInt(3)\n\n\tfee, _ := decimal.NewFromString(\".035\")\n\ttaxRate, _ := decimal.NewFromString(\".08875\")\n\n\tsubtotal := price.Mul(quantity)\n\n\tpreTax := subtotal.Mul(fee.Add(decimal.NewFromFloat(1)))\n\n\ttotal := preTax.Mul(taxRate.Add(decimal.NewFromFloat(1)))\n\n\tfmt.Println(\"Subtotal:\", subtotal)                      // Subtotal: 408.06\n\tfmt.Println(\"Pre-tax:\", preTax)                         // Pre-tax: 422.3421\n\tfmt.Println(\"Taxes:\", total.Sub(preTax))                // Taxes: 37.482861375\n\tfmt.Println(\"Total:\", total)                            // Total: 459.824961375\n\tfmt.Println(\"Tax rate:\", total.Sub(preTax).Div(preTax)) // Tax rate: 0.08875\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Colima with Custom Configuration for DDEV on macOS\nDESCRIPTION: Command to start Colima with specific resource allocations for optimal DDEV performance. Configures Colima with 4 CPUs, 6GB memory, 100GB storage, virtualization type, mount type, and DNS settings.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/install/docker-installation.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncolima start --cpu 4 --memory 6 --disk 100 --vm-type=vz --mount-type=virtiofs --dns=1.1.1.1\n```\n\n----------------------------------------\n\nTITLE: Installing OpenMage with Composer in DDEV\nDESCRIPTION: This script sets up an OpenMage (fork of Magento) installation using Composer. It configures the necessary Composer dependencies, installs OpenMage, and provides options for a silent installation with sample data.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/quickstart.md#2025-04-19_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nmkdir my-openmage-site && cd my-openmage-site\nddev config --project-type=magento --docroot=public_test --php-version=8.1 --web-environment-add=MAGE_IS_DEVELOPER_MODE=1\nddev start\nddev composer init --name \"openmage/composer-test\" --description \"OpenMage starter project\" --type \"project\" -l \"OSL-3.0\" -s \"dev\" -q\nddev composer config extra.magento-root-dir \"public_test\"\nddev composer config extra.enable-patching true\nddev composer config extra.magento-core-package-type \"magento-source\"\nddev composer config allow-plugins.cweagans/composer-patches true\nddev composer config allow-plugins.magento-hackathon/magento-composer-installer true\nddev composer config allow-plugins.aydin-hassan/magento-core-composer-installer true\nddev composer config allow-plugins.openmage/composer-plugin true\nddev composer require --no-update \"aydin-hassan/magento-core-composer-installer\":\"^2.1.0\" \"openmage/magento-lts\":\"^20.13\"\nddev exec wget -O .ddev/commands/web/openmage-install https://raw.githubusercontent.com/OpenMage/magento-lts/refs/heads/main/.ddev/commands/web/openmage-install\nddev composer install\n# Silent OpenMage install with sample data\n# See `ddev openmage-install -h` for more options\nddev openmage-install -q\n# Login using `admin` user and `veryl0ngpassw0rd` password\nddev launch /admin\n```\n\n----------------------------------------\n\nTITLE: Configuring DDEV Message Ticker Interval in YAML\nDESCRIPTION: Example YAML configuration to disable or modify the 'Tip of the Day' ticker interval in global configuration. A value of -1 disables the ticker completely, while positive integers set the interval in hours.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/configuration/config.md#2025-04-19_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nmessages:\n  ticker_interval: -1\n```\n\nLANGUAGE: yaml\nCODE:\n```\nmessages:\n  ticker_interval: 2\n```\n\n----------------------------------------\n\nTITLE: Including DDEV Configuration in WordPress Config\nDESCRIPTION: PHP code to include DDEV-managed settings in wp-config.php for WordPress projects. This allows WordPress to use the database connection settings provided by DDEV.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/quickstart.md#2025-04-19_snippet_50\n\nLANGUAGE: php\nCODE:\n```\n// Include for DDEV-managed settings in wp-config-ddev.php.\n$ddev_settings = __DIR__ . '/wp-config-ddev.php';\nif (is_readable($ddev_settings) && !defined('DB_USER')) {\nrequire_once($ddev_settings);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing MCRYPT PHP Extension via PECL in DDEV\nDESCRIPTION: Dockerfile example for installing the mcrypt PHP extension via PECL when it's not available through standard package management.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/extend/customizing-images.md#2025-04-19_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\nENV extension=mcrypt\nSHELL [\"/bin/bash\", \"-c\"]\n# Install the needed development packages\nRUN (apt-get update || true) && DEBIAN_FRONTEND=noninteractive apt-get install -y -o Dpkg::Options::=\"--force-confnew\" --no-install-recommends --no-install-suggests build-essential php-pear php${DDEV_PHP_VERSION}-dev\n# mcrypt happens to require libmcrypt-dev\nRUN apt-get install -y libmcrypt-dev\nRUN pecl install ${extension}\nRUN echo \"extension=${extension}.so\" > /etc/php/${DDEV_PHP_VERSION}/mods-available/${extension}.ini && chmod 666 /etc/php/${DDEV_PHP_VERSION}/mods-available/${extension}.ini\nRUN phpenmod ${extension}\n```\n\n----------------------------------------\n\nTITLE: Installing XDEBUG from PECL instead of Package Repository in DDEV\nDESCRIPTION: Dockerfile example for overriding the default xdebug package by installing a version from PECL instead of using the standard deb.sury.org package.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/extend/customizing-images.md#2025-04-19_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\n# This example installs xdebug from pecl instead of the standard deb.sury.org package\nENV extension=xdebug\nSHELL [\"/bin/bash\", \"-c\"]\nRUN phpdismod xdebug\n# Install the needed development packages\nRUN (apt-get update || true) && DEBIAN_FRONTEND=noninteractive apt-get install -y -o Dpkg::Options::=\"--force-confnew\" --no-install-recommends --no-install-suggests build-essential php-pear php${DDEV_PHP_VERSION}-dev\n# Remove the standard Xdebug provided by deb.sury.org\nRUN apt-get remove php${DDEV_PHP_VERSION}-xdebug || true\nRUN pecl install ${extension}\n# Use the standard xdebug.ini from source\nADD https://raw.githubusercontent.com/ddev/ddev/main/containers/ddev-php-base/ddev-php-files/etc/php/8.2/mods-available/xdebug.ini /etc/php/${DDEV_PHP_VERSION}/mods-available\nRUN chmod 666 /etc/php/${DDEV_PHP_VERSION}/mods-available/xdebug.ini\n# ddev xdebug handles enabling module so we don't enable here\n#RUN phpenmod ${extension}\n```\n\n----------------------------------------\n\nTITLE: Uninstall DDEV Package\nDESCRIPTION: Package manager commands for removing the DDEV binary across different operating systems\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/uninstall.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbrew uninstall ddev\nsudo rm /usr/local/bin/ddev\nsudo apt-get remove ddev\n```\n\n----------------------------------------\n\nTITLE: Remove Global DDEV Directories\nDESCRIPTION: Commands for removing DDEV's global configuration and Mutagen data directories\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/uninstall.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrm -r ~/.ddev\nddev poweroff && rm -r ~/.ddev_mutagen_data_directory\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Database and Application\nDESCRIPTION: This snippet defines environment variables for database connection settings, application URL, and other configuration parameters. It includes host, port, database name, credentials, and additional application-specific settings.\nSOURCE: https://github.com/ddev/ddev/blob/main/pkg/ddevapp/testdata/TestWriteProjectEnvFile/env-normalthings.txt#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nDB_HOST=old_somehost\nDB_PORT=old_9999\nDB_DATABASE=old_somerandomdb\nDB_USERNAME=old_root\nDB_PASSWORD=old_root\nSOMEENV=old_someenvval\nAPP_URL=old_http://some.ddev.site\nDB_CONNECTION=old_mysql://x:x@x/x\n```\n\n----------------------------------------\n\nTITLE: Checking for Processes Listening on Xdebug Port\nDESCRIPTION: This command checks for any processes listening on the Xdebug port (9003) on the host machine, which can help identify conflicts.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/debugging-profiling/step-debugging.md#2025-04-19_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo lsof -i :9003 -sTCP:LISTEN\n```\n\n----------------------------------------\n\nTITLE: Basic DDEV Hook Configuration\nDESCRIPTION: Basic example showing how to define post-start and post-import-db hooks in DDEV config.yaml\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/configuration/hooks.md#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhooks:\n  post-start:\n    - exec: \"simple command expression\"\n    - exec: \"ls >/dev/null && touch /var/www/html/somefile.txt\"\n    - exec-host: \"simple command expression\"\n  post-import-db:\n    - exec: \"drush uli\"\n```\n\n----------------------------------------\n\nTITLE: Database Version Check Command\nDESCRIPTION: Command to verify database version matches configuration\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/commands.md#2025-04-19_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nddev debug check-db-match\n```\n\n----------------------------------------\n\nTITLE: Configuring Mutagen to Exclude Paths in YAML\nDESCRIPTION: YAML configuration that excludes specific paths (like node_modules) from Mutagen synchronization to improve performance. This is added to the .ddev/mutagen/mutagen.yml file.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/install/performance.md#2025-04-19_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nignore:\n  paths:\n  - \"/web/core/node_modules\"\n```\n\n----------------------------------------\n\nTITLE: Adding Locales to DDEV Web Image\nDESCRIPTION: Configuration example for adding all locales to the DDEV web image by installing the locales-all package.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/extend/customizing-images.md#2025-04-19_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nwebimage_extra_packages: [locales-all]\n```\n\n----------------------------------------\n\nTITLE: Configuring DNS Usage in DDEV Config\nDESCRIPTION: YAML configuration setting in .ddev/config.yaml to disable DNS usage and force hostfile entries for name resolution when working offline.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/offline.md#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nuse_dns_when_possible: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Xdebug Port\nDESCRIPTION: INI configuration file to override the default Xdebug client port from 9003 to 9000. This should be placed in .ddev/php/xdebug_client_port.ini\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/debugging-profiling/step-debugging.md#2025-04-19_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[PHP]\nxdebug.client_port=9000\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik Routing for DDEV Project\nDESCRIPTION: This YAML configuration sets up Traefik routing rules for a DDEV project. It defines HTTP and HTTPS endpoints, configures TLS with automatic certificate generation, and sets up middleware for security headers and redirects.\nSOURCE: https://github.com/ddev/ddev/blob/main/cmd/ddev/cmd/testdata/TestCmdAddon/example-repo/projectextras/okfile.txt#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  routers:\n    {{$routerName}}:\n      rule: \"{{$rule}}\"\n      {{if not $noTls}}entrypoints:\n        - https\n      tls: {}\n      {{end}}\n      service: {{$routerName}}\n    {{$routerName}}-http:\n      rule: \"{{$rule}}\"\n      entrypoints:\n        - http\n      {{if not $noTls}}middlewares:\n        - redirect-to-https\n      {{end}}\n      service: {{$routerName}}\n\n  services:\n    {{$routerName}}:\n      loadbalancer:\n        servers:\n          - url: {{$serviceURL}}\n\n{{if eq $useDNSWhenPossible \"true\"}}\ntls:\n  certificates:\n    - certFile: /mnt/ddev-global-cache/traefik/certs/{{ $certBase }}.crt\n      keyFile: /mnt/ddev-global-cache/traefik/certs/{{ $certBase }}.key\n{{end}}\n\n{{if not $noTls}}\nhttp:\n  middlewares:\n    redirect-to-https:\n      redirectscheme:\n        scheme: https\n        permanent: true\n    securityHeaders:\n      headers:\n        sslRedirect: true\n        forceSTSHeader: true\n        stsIncludeSubdomains: true\n        stsPreload: true\n        stsSeconds: 31536000\n{{end}}\n```\n\n----------------------------------------\n\nTITLE: Adding Lagoon Environment Variables via DDEV CLI\nDESCRIPTION: This command demonstrates how to add Lagoon environment variables to a DDEV project using the command-line interface. It's an alternative to manually editing the YAML configuration file.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/providers/lagoon.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nddev config --web-environment-add=\"LAGOON_PROJECT=<project-name>,LAGOON_ENVIRONMENT=<environment-name>\"\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in .env Files for Add-ons in DDEV\nDESCRIPTION: Example showing how to set a custom Redis version tag using DDEV's dotenv command to override the default configuration in an add-on.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/extend/additional-services.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddev dotenv set .ddev/.env.redis --redis-tag 7-bookworm\nddev restart\n```\n\n----------------------------------------\n\nTITLE: Testing Docker Mount and Port Access for DDEV\nDESCRIPTION: This command tests Docker's ability to mount the project directory and access ports 80 and 443. It uses a busybox container to list the contents of the mounted project directory.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/install/docker-installation.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -t -p 80:80 -p 443:443 -v \"//$PWD:/tmp/projdir\" busybox sh -c \"echo ---- Project Directory && ls /tmp/projdir\"\n```\n\n----------------------------------------\n\nTITLE: DDEV Version Constraint Check\nDESCRIPTION: Script to check if installed DDEV version matches specified constraints\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/commands.md#2025-04-19_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nif ddev debug match-constraint \"< 1.25\" >/dev/null 2>&1; then\n  # do something for ddev versions below 1.25\n  ...\nelse\n  # do something for ddev versions 1.25+\n  ...\nfi\n```\n\n----------------------------------------\n\nTITLE: Configuring an existing Craft CMS project with DDEV\nDESCRIPTION: This snippet shows how to set up DDEV for an existing Craft CMS project. It covers cloning a repository, configuring DDEV, installing dependencies, and importing a database backup.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/quickstart.md#2025-04-19_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# Clone an existing repository (or navigate to a local project directory):\ngit clone https://github.com/example/example-site my-craft-site\ncd my-craft-site\n\n# Set up the DDEV environment:\nddev config --project-type=craftcms\n\n# Boot the project and install Composer packages:\nddev start\nddev composer install\n\n# Import a database backup and open the site in your browser:\nddev import-db --file=/path/to/db.sql.gz\nddev launch\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Ports in DDEV Compose File\nDESCRIPTION: YAML configuration for exposing additional ports in Docker Compose when using DDEV with Codespaces.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/install/ddev-installation.md#2025-04-19_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n    web:\n        ports:\n            - \"5174:5174\"\n```\n\n----------------------------------------\n\nTITLE: TYPO3 Hook Configuration\nDESCRIPTION: Simple TYPO3 hook configuration for installing composer dependencies\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/configuration/hooks.md#2025-04-19_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nhooks:\n    post-start:\n      - composer: install\n```\n\n----------------------------------------\n\nTITLE: Defining WordPress Environment Type Constant in PHP\nDESCRIPTION: PHP code snippet to define the WP_ENVIRONMENT_TYPE constant in wp-config-ddev.php, setting the environment type to 'local' if not already defined\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/cms-settings.md#2025-04-19_snippet_8\n\nLANGUAGE: php\nCODE:\n```\ndefined( 'WP_ENVIRONMENT_TYPE' ) || define( 'WP_ENVIRONMENT_TYPE', 'local' );\n```\n\n----------------------------------------\n\nTITLE: Starting DDEV Project\nDESCRIPTION: Command to start a DDEV project.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/faq.md#2025-04-19_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nddev start\n```\n\n----------------------------------------\n\nTITLE: Initializing New Projects with Composer in DDEV\nDESCRIPTION: Using 'ddev composer create-project' to initialize new projects in DDEV. This command supports limited options and installs the project to the Composer root.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/developer-tools.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nddev composer create-project [options] [--] [<package> [<directory> [<version>]]]\n\nddev composer create-project --no-dev typo3/cms-base-distribution . \"^9\"\n```\n\n----------------------------------------\n\nTITLE: Running Daemons with DDEV Post-Start Hook\nDESCRIPTION: Example of a post-start hook in .ddev/config.yaml that runs a PHP server as a background daemon process. This demonstrates how to run additional services when the container starts.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/extend/customization-extendibility.md#2025-04-19_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nhooks:\n  post-start:\n    - exec: \"nohup php --docroot=/var/www/html/something -S 0.0.0.0:6666 &\"\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration\nDESCRIPTION: Commands to print docker-compose configuration for projects\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/commands.md#2025-04-19_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\n# Print docker-compose config for the current project\nddev debug compose-config\n\n# Print docker-compose config for `my-project`\nddev debug compose-config my-project\n```\n\n----------------------------------------\n\nTITLE: Adding Git Post-Checkout Hook for Mutagen Sync in Bash\nDESCRIPTION: This script creates a Git post-checkout hook that automatically runs 'ddev mutagen sync' after a git checkout operation, helping to maintain file synchronization when switching branches.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/install/performance.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/env bash\nddev mutagen sync || true\n```\n\n----------------------------------------\n\nTITLE: Configuring Laravel for Mailpit in DDEV\nDESCRIPTION: Environment variables for configuring Laravel to use Mailpit for email capture in DDEV. These settings should be added to the .env file.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/developer-tools.md#2025-04-19_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nMAIL_MAILER=smtp\nMAIL_HOST=localhost\nMAIL_PORT=1025\nMAIL_USERNAME=null\nMAIL_PASSWORD=null\nMAIL_ENCRYPTION=null\n```\n\n----------------------------------------\n\nTITLE: Configuring DDEV Usage Data Sharing in YAML Configuration\nDESCRIPTION: Shows how to edit the global configuration file to enable or disable the sending of instrumentation data to DDEV developers.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/diagnostics.md#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ninstrumentation_opt_in: true\n```\n\nLANGUAGE: yaml\nCODE:\n```\ninstrumentation_opt_in: false\n```\n\n----------------------------------------\n\nTITLE: Listing Only Active DDEV Projects\nDESCRIPTION: Output of the 'ddev list --active-only' command showing only currently running projects in the DDEV environment. This filters the list to show only active projects.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/managing-projects.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n➜  ddev list --active-only\n NAME        STATUS        LOCATION                URL                           TYPE\n drup        running (ok)  ~/workspace/drup        https://drup.ddev.site        drupal\n Router      healthy       ~/.ddev                 http://127.0.0.1:10999        traefik\n```\n\n----------------------------------------\n\nTITLE: ReactPHP Server Binding to All Network Interfaces\nDESCRIPTION: Example of a ReactPHP server binding to all network interfaces (0.0.0.0) to allow external access from the host machine, which is necessary when running services inside DDEV containers.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/extend/customization-extendibility.md#2025-04-19_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$socket = new React\\Socket\\SocketServer('0.0.0.0:3000');\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Compose Override File for Redis in DDEV\nDESCRIPTION: Example showing how to create a custom docker-compose override file that changes the Redis image version without modifying the original add-on files.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/extend/additional-services.md#2025-04-19_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  redis:\n    image: redis:7-bookworm\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Daemon Base Settings\nDESCRIPTION: Core MySQL configuration that improves security by disabling symbolic links and optimizes performance by disabling query and host caching.\nSOURCE: https://github.com/ddev/ddev/blob/main/containers/ddev-dbserver/files/etc/mysql/version-conf.d/mariadb.cnf.txt#2025-04-19_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[mysqld]\n\nskip-host-cache\nsymbolic-links=0\nquery-cache-type               = 0\nquery-cache-size               = 0\n```\n\n----------------------------------------\n\nTITLE: Building Custom Dockerfile in DDEV\nDESCRIPTION: This snippet shows an example of a custom Dockerfile command for installing a global npm package. It demonstrates how to test the command manually before adding it to the Dockerfile.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/troubleshooting.md#2025-04-19_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\nRUN npm install --global forever\n```\n\n----------------------------------------\n\nTITLE: Opening DBeaver with DDEV Project Database in Shell\nDESCRIPTION: This command opens DBeaver with the current project's database. It's available if DBeaver is installed in the specified locations for macOS, WSL2, or Linux.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/commands.md#2025-04-19_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nddev dbeaver\n```\n\n----------------------------------------\n\nTITLE: Setting Service-Specific Environment Variables in DDEV\nDESCRIPTION: Example of a .ddev/.env.redis file that provides environment variables specifically to the Redis service or add-on. This allows for service-specific configuration.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/extend/customization-extendibility.md#2025-04-19_snippet_1\n\nLANGUAGE: dotenv\nCODE:\n```\nREDIS_TAG=\"7-bookworm\"\nREDIS_FOO=\"bar\"\n```\n\n----------------------------------------\n\nTITLE: Listing Symfony Console Commands in Shell\nDESCRIPTION: This command shows all available Symfony console subcommands in a DDEV project of type 'symfony' where bin/console exists.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/commands.md#2025-04-19_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nddev console list\n```\n\n----------------------------------------\n\nTITLE: Configuring WP-CLI Path for Non-Root Docroots\nDESCRIPTION: YAML configuration for wp-cli.yml to specify the WordPress core location when the docroot is not at the project root.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/cms-settings.md#2025-04-19_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\npath: public\n```\n\n----------------------------------------\n\nTITLE: Example YAML File for Add-on Template Replacements\nDESCRIPTION: A simple YAML example that can be referenced in an add-on's install.yaml for template-based replacements.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/extend/additional-services.md#2025-04-19_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nvalue1: xxx\n```\n\n----------------------------------------\n\nTITLE: Configuring MariaDB 10.11 Database in DDEV YAML\nDESCRIPTION: This YAML snippet shows the configuration for a MariaDB 10.11 database in the DDEV configuration file. It sets the database type to MariaDB and specifies version 10.11.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/extend/database-types.md#2025-04-19_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndatabase:\n  type: mariadb\n  version: 10.11\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Apps in Platform.sh Integration\nDESCRIPTION: This YAML configuration adds the PLATFORM_APP variable to specify which application to use when your Platform.sh environment contains multiple apps.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/providers/platform.md#2025-04-19_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nweb_environment:\n    - ...\n    - PLATFORM_APP=app\n```\n\n----------------------------------------\n\nTITLE: Exposing Multiple HTTP Ports in DDEV YAML\nDESCRIPTION: Example of exposing multiple HTTP ports from the web container in DDEV. This configuration exposes a Node.js server on port 3000 and another server on port 4000 to specific external HTTP and HTTPS ports.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/extend/customization-extendibility.md#2025-04-19_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nweb_extra_exposed_ports:\n  - name: nodejs\n    container_port: 3000\n    http_port: 2999\n    https_port: 3000\n  - name: something\n    container_port: 4000\n    https_port: 4000\n    http_port: 3999\n```\n\n----------------------------------------\n\nTITLE: Architecture-Specific Binary Download in DDEV\nDESCRIPTION: Shows how to download architecture-specific binaries using the TARGETARCH environment variable for cross-platform compatibility.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/extend/customizing-images.md#2025-04-19_snippet_8\n\nLANGUAGE: dockerfile\nCODE:\n```\nRUN curl --fail -JL -s -o /usr/local/bin/mkcert \"https://dl.filippo.io/mkcert/latest?for=linux/${TARGETARCH}\"\n```\n\n----------------------------------------\n\nTITLE: Modifying PATH in DDEV Containers with Bash Script\nDESCRIPTION: Bash script to add a custom directory to the PATH environment variable in DDEV containers. This can be placed in .ddev/homeadditions/.bashrc.d/ for project-specific or global PATH modifications.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/extend/customization-extendibility.md#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nexport PATH=$PATH:/var/www/html/somewhereelse/vendor/bin\n```\n\n----------------------------------------\n\nTITLE: Custom Nginx Configuration for HTTPS Redirection\nDESCRIPTION: Nginx configuration snippet to redirect all HTTP requests to their HTTPS equivalents in a DDEV project. This can be added as a custom nginx snippet in .ddev/nginx/redirect.conf.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/extend/customization-extendibility.md#2025-04-19_snippet_14\n\nLANGUAGE: nginx\nCODE:\n```\n    if ($http_x_forwarded_proto = \"http\") {\n      return 301 https://$host$request_uri;\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring TYPO3 Context in DDEV\nDESCRIPTION: YAML configuration for setting a TYPO3 application context environment variable in DDEV's config.yaml to enable environment-specific behaviors.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/cms-settings.md#2025-04-19_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nweb_environment:\n    - TYPO3_CONTEXT=Development/DDEV\n```\n\n----------------------------------------\n\nTITLE: Testing Container-Level SSL Trust\nDESCRIPTION: Commands to restart DDEV and test if the container properly trusts the corporate CA by making an HTTPS request to Google. A 200 OK response indicates success.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/networking.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nddev restart\nddev exec curl -I https://www.google.com\n# ✅ Expect: HTTP/2 200\n# ❌ If not trusted: curl: (60) SSL certificate problem\n```\n\n----------------------------------------\n\nTITLE: Dockerfile for mkcert Installation in Third-Party Service\nDESCRIPTION: A Dockerfile that installs mkcert in a third-party service container to enable HTTPS trust with the DDEV webserver. It configures the certificate authority root and sets up necessary permissions.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/extend/custom-compose-files.md#2025-04-19_snippet_3\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM example/example\n\n# CAROOT for `mkcert` to use, has the CA config\nENV CAROOT=/mnt/ddev-global-cache/mkcert\n\n# If the image build does not run as the default `root` user,\n# temporarily change to root. If the image already has the default setup\n# where it builds as `root`, then\n# there is no need to change user here.\nUSER root\n# Give the `example` user full `sudo` privileges\nRUN echo \"example ALL=(ALL) NOPASSWD: ALL\" >> /etc/sudoers.d/example && chmod 0440 /etc/sudoers.d/example\n# Install the correct architecture binary of `mkcert`\nRUN export TARGETPLATFORM=linux/$(uname -m | sed 's/x86_64/amd64/;s/aarch64/arm64/') && mkdir -p /usr/local/bin && curl --fail -JL -s -o /usr/local/bin/mkcert \"https://dl.filippo.io/mkcert/latest?for=${TARGETPLATFORM}\"\nRUN chmod +x /usr/local/bin/mkcert\nUSER original_user\n```\n\n----------------------------------------\n\nTITLE: Environment File Format Examples\nDESCRIPTION: Examples of valid .env file formats including basic key-value pairs, comments, and exports.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/joho/godotenv/README.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nS3_BUCKET=YOURS3BUCKET\nSECRET_KEY=YOURSECRETKEYGOESHERE\n```\n\nLANGUAGE: shell\nCODE:\n```\n# I am a comment and that is OK\nSOME_VAR=someval\nFOO=BAR # comments at line end are OK too\nexport BAR=BAZ\n```\n\n----------------------------------------\n\nTITLE: Configuring DDEV Performance Mode in YAML\nDESCRIPTION: Example showing how to configure performance mode for Mutagen in DDEV's config.performance.yaml file. This allows selective Mutagen enablement for specific users without affecting the main config.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/install/performance.md#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nperformance_mode: \"mutagen\"\n```\n\n----------------------------------------\n\nTITLE: Resetting Xdebug IDE Location in DDEV Global Config\nDESCRIPTION: This command resets the global Xdebug IDE location to default, which is recommended for most users before troubleshooting.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/debugging-profiling/step-debugging.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nddev config global --xdebug-ide-location=\"\"\n```\n\n----------------------------------------\n\nTITLE: Installing WSL on Windows Using PowerShell\nDESCRIPTION: Command to install Windows Subsystem for Linux (WSL) using PowerShell. This is the first step in setting up DDEV with WSL2.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/install/ddev-installation.md#2025-04-19_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nwsl --install\n```\n\n----------------------------------------\n\nTITLE: Testing Network Connectivity to IDE\nDESCRIPTION: This command tests the network connectivity from the DDEV container to the IDE using telnet on the Xdebug port.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/debugging-profiling/step-debugging.md#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ntelnet host.docker.internal 9003\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for SSH Agent\nDESCRIPTION: Docker Compose YAML snippet demonstrating how to configure a service to use the SSH agent container by mounting its volumes and setting the SSH_AUTH_SOCK environment variable.\nSOURCE: https://github.com/ddev/ddev/blob/main/containers/ddev-ssh-agent/README.md#2025-04-19_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n  volumes_from:\n    - ssh-agent\n  environment:\n    - SSH_AUTH_SOCK=/.ssh-agent/socket\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Project Upsun API Token\nDESCRIPTION: For projects requiring different API tokens, add the token to the project's configuration file. This allows different projects to use different Upsun accounts or credentials.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/providers/upsun.md#2025-04-19_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nweb_environment:\n    - UPSUN_CLI_TOKEN=abcdeyourtoken\n```\n\n----------------------------------------\n\nTITLE: DDEV Add-on Management Commands\nDESCRIPTION: Examples of various add-on management commands including installation, removal, and listing of add-ons.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/commands.md#2025-04-19_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# Download the official Redis add-on\nddev add-on get ddev/ddev-redis\n\n# Get debug info about `ddev add-on get` failure\nddev add-on get ddev/ddev-redis --verbose\n\n# Download the official Redis add-on, version v1.0.4\nddev add-on get ddev/ddev-redis --version v1.0.4\n\n# Download the Drupal Solr add-on from its v1.2.3 release tarball\nddev add-on get https://github.com/ddev/ddev-drupal-solr/archive/refs/tags/v1.2.3.tar.gz\n\n# Copy an add-on available in another directory\nddev add-on get /path/to/package\n\n# Copy an add-on from a tarball in another directory\nddev add-on get /path/to/tarball.tar.gz\n\n# Download the official Redis add-on and install it into a project named \"my-project\"\nddev add-on get ddev/ddev-redis --project my-project\n```\n\n----------------------------------------\n\nTITLE: Enabling Additional Services in DDEV\nDESCRIPTION: Example of enabling a service in DDEV, demonstrating how to add the Solr service to a project using the service enable command.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/commands.md#2025-04-19_snippet_34\n\nLANGUAGE: shell\nCODE:\n```\n# Enable the Solr service\nddev service enable solr\n```\n\n----------------------------------------\n\nTITLE: Exposing HTTP Service with DDEV Router\nDESCRIPTION: A sustainable approach to expose a service port through the DDEV router with both HTTP and HTTPS access. This avoids port conflicts between projects by using the DDEV router's virtual host system.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/extend/custom-compose-files.md#2025-04-19_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  someservice:\n    container_name: \"ddev-${DDEV_SITENAME}-someservice\"\n    labels:\n      com.ddev.site-name: ${DDEV_SITENAME}\n      com.ddev.approot: ${DDEV_APPROOT}\n    expose:\n      - \"9999\"\n    environment:\n      - VIRTUAL_HOST=$DDEV_HOSTNAME\n      - HTTP_EXPOSE=9998:9999\n      - HTTPS_EXPOSE=9999:9999\n```\n\n----------------------------------------\n\nTITLE: Configuring Project-Level Environment Variables in DDEV\nDESCRIPTION: Example of setting environment variables at the project level in .ddev/config.yaml. These variables will be available only in the specific project.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/extend/customization-extendibility.md#2025-04-19_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nweb_environment:\n    - MY_ENV_VAR=someval\n    - MY_OTHER_ENV_VAR=someotherval\n```\n\n----------------------------------------\n\nTITLE: Adding Upsun API Token via DDEV Command\nDESCRIPTION: Alternative method to add the Upsun API token to the global DDEV configuration using the command line. This accomplishes the same result as editing the global_config.yaml file directly.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/providers/upsun.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nddev config global --web-environment-add=\"UPSUN_CLI_TOKEN=abcdeyourtoken\"\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Server Settings\nDESCRIPTION: Core MySQL configuration settings including cache parameters, InnoDB settings, and security options. Disables host cache, symbolic links, and query cache while enabling large prefix support and barracuda file format for InnoDB.\nSOURCE: https://github.com/ddev/ddev/blob/main/containers/ddev-dbserver/files/etc/mysql/version-conf.d/mysql_5.cnf.txt#2025-04-19_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[mysqld]\n\n# skip-host-cache is no longer valid in mysql 8.x, but still works in mysql 5\nskip-host-cache\nsymbolic-links=0\nquery-cache-type               = 0\nquery-cache-size               = 0\n\ninnodb_large_prefix=true\ninnodb_file_format=barracuda\nsecure_file_priv=\"\"\n```\n\n----------------------------------------\n\nTITLE: Adding Bash Completion to Profile on macOS with Homebrew\nDESCRIPTION: Code for including bash completion in the user's profile file on macOS. This should be added to ~/.bash_profile or ~/.profile to enable Homebrew-installed bash completions for DDEV.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/install/shell-completion.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n[[ -r \"$(brew --prefix)/etc/profile.d/bash_completion.sh\" ]] && . \"$(brew --prefix)/etc/profile.d/bash_completion.sh\"\n```\n\n----------------------------------------\n\nTITLE: Adding TYPO3 Base Variant Configuration\nDESCRIPTION: YAML configuration for TYPO3 site configuration to set up a base variant that applies only in the DDEV development environment.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/cms-settings.md#2025-04-19_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nbaseVariants:\n  -\n    base: 'https://example.com.ddev.site/'\n    condition: 'applicationContext == \"Development/DDEV\"'\n```\n\n----------------------------------------\n\nTITLE: Configuring Upsun Project Environment Variables\nDESCRIPTION: Add Upsun project and environment identifiers to DDEV project configuration. These variables specify which Upsun project and environment to connect with for database and file operations.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/providers/upsun.md#2025-04-19_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nweb_environment:\n    - PLATFORM_PROJECT=nf4amudfn23biyourproject\n    - PLATFORM_ENVIRONMENT=main\n```\n\n----------------------------------------\n\nTITLE: Adding Platform.sh API Token via DDEV CLI Command\nDESCRIPTION: This bash command adds your Platform.sh API token to the DDEV global configuration using the command line interface.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/providers/platform.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nddev config global --web-environment-add=\"PLATFORMSH_CLI_TOKEN=abcdeyourtoken\"`\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik Debug Logging\nDESCRIPTION: YAML configuration to enable detailed error and access logging in Traefik router\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/extend/traefik-router.md#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Enable extensive error and access logging\nlog:\n  level: DEBUG\naccessLog:\n  filters:\n    statusCodes: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring ProcessWire Upload Directories in DDEV\nDESCRIPTION: This script configures DDEV to properly handle ProcessWire's user-generated file uploads by setting the upload-dirs parameter, ensuring proper file permissions and management.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/quickstart.md#2025-04-19_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\nddev config --upload-dirs=sites/assets/files && ddev restart\n```\n\n----------------------------------------\n\nTITLE: Launching XHGui Interface in DDEV\nDESCRIPTION: Command to launch the XHGui web interface for profiling analysis after enabling XHProf in XHGui mode.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/debugging-profiling/xhprof-profiling.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddev xhgui\n```\n\n----------------------------------------\n\nTITLE: Debugging NFS Mount in DDEV\nDESCRIPTION: This command demonstrates how to use the 'ddev debug nfsmount' command to verify NFS mounting in a DDEV project directory and display mount details.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/install/performance.md#2025-04-19_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ ddev debug nfsmount\nSuccessfully accessed NFS mount of /Users/rfay/workspace/d8composer\nTARGET    SOURCE                                                FSTYPE OPTIONS\n/nfsmount :/System/Volumes/Data/Users/rfay/workspace/d8composer nfs    rw,relatime,vers=3,rsize=65536,wsize=65536,namlen=255,hard,    nolock,proto=tcp,timeo=600,retrans=2,sec=sys,mountaddr=192.168.65.2,mountvers=3,mountproto=tcp,local_lock=all,addr=192.168.65.2\n/nfsmount/.ddev\n```\n\n----------------------------------------\n\nTITLE: Debugging Provider Integrations in DDEV\nDESCRIPTION: Instructions for debugging provider integrations by uncommenting debug flags and testing commands individually in the web container before adding them to the YAML file.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/providers/index.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nset -x\n```\n\n----------------------------------------\n\nTITLE: Multiple Flags Definition in DDEV\nDESCRIPTION: Example showing how to define multiple flags with different configurations including shorthand notation.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/extend/custom-commands.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nFlags:\n  -h, --help          help for ddev\n  -f, --flag1         flag1 usage\n      --flag2         flag2 usage\n```\n\n----------------------------------------\n\nTITLE: Configuring DevContainer for DDEV\nDESCRIPTION: JSON configuration for devcontainer setup including DDEV installation, port attributes, and post-creation commands.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/install/ddev-installation.md#2025-04-19_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"image\": \"mcr.microsoft.com/devcontainers/universal:2\",\n    \"features\": {\n        \"ghcr.io/ddev/ddev/install-ddev:latest\": {}\n    },\n    \"portsAttributes\": {\n        \"3306\": {\n            \"label\": \"database\"\n        },\n        \"8027\": {\n            \"label\": \"mailpit\"\n        },\n        \"8080\": {\n            \"label\": \"web http\"\n        },\n        \"8443\": {\n            \"label\": \"web https\"\n        }\n    },\n    \"postCreateCommand\": \"bash .devcontainer/setup_project.sh\"\n}\n```\n\n----------------------------------------\n\nTITLE: Log Viewing Commands in DDEV CLI\nDESCRIPTION: Examples of using the ddev logs command to view and follow service logs with various options for filtering and formatting.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/commands.md#2025-04-19_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\n# Display recent logs from the current project's web server\nddev logs\n\n# Stream logs from the current project's web server in real time\nddev logs -f\n\n# Display recent logs from the current project's database server\nddev logs -s db\n\n# Display recent logs from my-project's database server\nddev logs -s db my-project\n```\n\n----------------------------------------\n\nTITLE: Configuring Cloudflare DNS Challenge\nDESCRIPTION: YAML configuration for setting up Cloudflare DNS challenge resolver in Traefik\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/extend/traefik-router.md#2025-04-19_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncertificatesResolvers:\n  acme-dnsChallenge:\n    acme:\n      email: admin@example.com\n      dnsChallenge:\n        provider: cloudflare\n```\n\n----------------------------------------\n\nTITLE: Setting WSL2 systemd Configuration\nDESCRIPTION: Configuration snippet for enabling systemd support in WSL2, which is required for installing PhpStorm via snap package manager.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/install/phpstorm.md#2025-04-19_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[boot]\nsystemd=true\n```\n\n----------------------------------------\n\nTITLE: Let's Encrypt Staging Configuration\nDESCRIPTION: YAML configuration for using Let's Encrypt staging server to avoid rate limits while testing, placed in ~/.ddev/traefik/static_config.staging.yaml.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/topics/hosting.md#2025-04-19_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ncertificatesResolvers:\n    acme-tlsChallenge:\n        acme:\n            caServer: \"https://acme-staging-v02.api.letsencrypt.org/directory\"\n```\n\n----------------------------------------\n\nTITLE: Installing DDEV HEAD Using Curl Script\nDESCRIPTION: Downloads and executes the install script to get the latest unreleased version of DDEV directly from the main branch.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/developers/building-contributing.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Download and run the install script\ncurl -fsSL https://raw.githubusercontent.com/ddev/ddev/main/scripts/install_ddev_head.sh | bash\n```\n\n----------------------------------------\n\nTITLE: Displaying DDEV Upgrade Instructions\nDESCRIPTION: Shows how to use the self-upgrade command to get instructions for updating DDEV to the latest version, outputting the appropriate update method based on installation type.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/commands.md#2025-04-19_snippet_30\n\nLANGUAGE: shell\nCODE:\n```\n→  ddev self-upgrade\n\nDDEV appears to have been installed with install_ddev.sh, you can run that script again to update.\ncurl -fsSL https://ddev.com/install.sh | bash\n```\n\n----------------------------------------\n\nTITLE: Project Management Commands\nDESCRIPTION: Commands for managing DDEV projects including deletion and status checks\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/commands.md#2025-04-19_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\n# Delete my-project and my-other-project\nddev delete my-project my-other-project\n\n# Delete the current project without taking a snapshot or confirming\nddev delete --omit-snapshot --yes\n```\n\n----------------------------------------\n\nTITLE: Progress Bar Settings Configuration\nDESCRIPTION: Shows various configuration options for the progress bar including refresh rate, output writer, and number formatting\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/cheggaaa/pb/README.md#2025-04-19_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// create bar\nbar := pb.New(count)\n\n// refresh info every second (default 200ms)\nbar.SetRefreshRate(time.Second)\n\n// force set io.Writer, by default it's os.Stderr\nbar.SetWriter(os.Stdout)\n\n// bar will format numbers as bytes (B, KiB, MiB, etc)\nbar.Set(pb.Byte, true)\n\n// bar use SI bytes prefix names (B, kB) instead of IEC (B, KiB)\nbar.Set(pb.SIBytesPrefix, true)\n\n// set custom bar template\nbar.SetTemplateString(myTemplate)\n\n// check for error after template set\nif err = bar.Err(); err != nil {\n    return\n}\n\n// start bar\nbar.Start()\n```\n\n----------------------------------------\n\nTITLE: GitHub Codespaces DDEV Configuration\nDESCRIPTION: JSON configuration for setting up DDEV in GitHub Codespaces environment. Defines container image and installation features.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/install/ddev-installation.md#2025-04-19_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"image\": \"mcr.microsoft.com/devcontainers/universal:2\",\n  \"features\": {\n    \"ghcr.io/ddev/ddev/install-ddev:latest\": {}\n  },\n  \"postCreateCommand\": \"echo 'it should all be set up'\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Laravel via Laravel Installer in DDEV\nDESCRIPTION: Sets up Laravel using the official Laravel installer with support for starter kits. Includes temporary Dockerfile configuration and post-installation steps.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/quickstart.md#2025-04-19_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nmkdir my-laravel-site && cd my-laravel-site\n\n# To use MariaDB, apply the following command\nddev config --project-type=laravel --docroot=public\n\n# To use SQLite, uncomment and use the following command instead\n#ddev config --project-type=laravel --docroot=public --omit-containers=db --disable-settings-management=true\n\ncat <<'DOCKERFILEEND' >.ddev/web-build/Dockerfile.laravel\nARG COMPOSER_HOME=/usr/local/composer\nRUN composer global require laravel/installer\nRUN ln -s $COMPOSER_HOME/vendor/bin/laravel /usr/local/bin/laravel\nDOCKERFILEEND\n\nddev start\nddev exec laravel new temp --database=sqlite\nddev exec 'rsync -rltgopD temp/ ./ && rm -rf temp'\nrm -f .ddev/web-build/Dockerfile.laravel .env\nddev restart\nddev composer run-script post-root-package-install\nddev composer run-script post-create-project-cmd\nddev launch\n```\n\n----------------------------------------\n\nTITLE: Updating DDEV Project Configuration\nDESCRIPTION: Command to update DDEV project configuration based on existing code.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/faq.md#2025-04-19_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nddev config --update\n```\n\n----------------------------------------\n\nTITLE: Moving DDEV Global Configuration on Linux/WSL2\nDESCRIPTION: Bash command to move DDEV's global configuration directory to ~/.config/ddev on Linux or WSL2 systems.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/architecture.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmv ~/.ddev ~/.config/ddev\n```\n\n----------------------------------------\n\nTITLE: Setting up Silverstripe CMS with DDEV using Git Clone\nDESCRIPTION: Commands to set up an existing Silverstripe CMS project from a Git repository, configure DDEV, and initialize the site. This clones the repository and configures the necessary environment.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/quickstart.md#2025-04-19_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\ngit clone <my-silverstripe-repo> my-silverstripe-site\ncd my-silverstripe-site\nddev config --project-type=silverstripe --docroot=public\nddev start\nddev composer install\nddev sake dev/build flush=all\n```\n\n----------------------------------------\n\nTITLE: Configuring an existing CakePHP project with DDEV\nDESCRIPTION: This snippet shows how to set up DDEV for an existing CakePHP project. It covers cloning a repository, configuring DDEV, and installing dependencies using Composer.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/quickstart.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit clone <my-cakephp-repo> my-cakephp-site\ncd my-cakephp-site\nddev config --project-type=cakephp --docroot=webroot\nddev start\nddev composer install\nddev cake\nddev launch\n```\n\n----------------------------------------\n\nTITLE: WordPress Hook Configuration\nDESCRIPTION: Example showing WordPress-specific hooks for installation and database management\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/configuration/hooks.md#2025-04-19_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nhooks:\n  post-start:\n    - exec: \"wp config create --dbname=db --dbuser=db --dbpass=db --dbhost=db\"\n    - exec: \"wp core install --url=http://mysite.ddev.site --title=MySite --admin_user=admin --admin_email=admin@mail.test\"\n  post-import-db:\n    - exec: \"wp search-replace https://www.myproductionsite.com http://mydevsite.ddev.site\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Fail2ban Plugin\nDESCRIPTION: YAML configuration for enabling the Fail2ban plugin in Traefik\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/extend/traefik-router.md#2025-04-19_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nexperimental:\n  plugins:\n    fail2ban:\n      moduleName: \"github.com/tomMoulard/fail2ban\"\n      version: \"v0.8.1\"\n```\n\n----------------------------------------\n\nTITLE: SSH Config Settings for DDEV Containers\nDESCRIPTION: Required SSH configuration settings for DDEV containers to handle host key verification and known hosts file location.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/extend/in-container-configuration.md#2025-04-19_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nUserKnownHostsFile=/home/.ssh-agent/known_hosts\nStrictHostKeyChecking=accept-new\n```\n\n----------------------------------------\n\nTITLE: Opening Sequel Pro Database Manager in DDEV\nDESCRIPTION: Example of using the ddev sequelpro command to open Sequel Pro with the current project's database. This command is available only if Sequel Pro.app is installed in the Applications directory, though the tool is abandoned and incompatible with MySQL 8.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/commands.md#2025-04-19_snippet_32\n\nLANGUAGE: shell\nCODE:\n```\n# Open the current project's database in Sequel Pro\nddev sequelpro\n```\n\n----------------------------------------\n\nTITLE: Setting up FrankenPHP with DDEV\nDESCRIPTION: Experimental setup of FrankenPHP with DDEV using generic webserver type. Includes custom configuration for PHP 8.4 and Drupal 11.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/quickstart.md#2025-04-19_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nexport FRANKENPHP_SITENAME=my-frankenphp-site\nmkdir ${FRANKENPHP_SITENAME} && cd ${FRANKENPHP_SITENAME}\nddev config --project-type=drupal11 --webserver-type=generic --docroot=web --php-version=8.4\nddev start\n\ncat <<'EOF' > .ddev/config.frankenphp.yaml\nweb_extra_daemons:\n    - name: \"frankenphp\"\n      command: \"frankenphp php-server --listen=0.0.0.0:80 --root=\\\"/var/www/html/${DDEV_DOCROOT:-}\\\" -v -a\"\n      directory: /var/www/html\nweb_extra_exposed_ports:\n    - name: \"frankenphp\"\n      container_port: 80\n      http_port: 80\n      https_port: 443\nEOF\n\ncat <<'DOCKERFILEEND' >.ddev/web-build/Dockerfile.frankenphp\nRUN curl -s https://frankenphp.dev/install.sh | sh\nRUN mv frankenphp /usr/local/bin/\nRUN mkdir -p /usr/local/etc && ln -s /etc/php/${DDEV_PHP_VERSION}/fpm /usr/local/etc/php\nDOCKERFILEEND\n\nddev composer create drupal/recommended-project\nddev composer require drush/drush\nddev restart\nddev drush site:install demo_umami --account-name=admin --account-pass=admin -y\nddev launch\n# or automatically log in with\nddev launch $(ddev drush uli)\n```\n\n----------------------------------------\n\nTITLE: Using Sake Command with Silverstripe CMS in DDEV\nDESCRIPTION: Examples of running the sake command for Silverstripe CMS projects, including database build operations and listing available tasks, showing syntax differences across Silverstripe versions.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/commands.md#2025-04-19_snippet_29\n\nLANGUAGE: shell\nCODE:\n```\nddev sake dev/build\n```\n\n----------------------------------------\n\nTITLE: Installing Grav CMS with DDEV\nDESCRIPTION: Sets up Grav CMS using Composer with DDEV, including admin plugin installation.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/quickstart.md#2025-04-19_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nmkdir my-grav-site && cd my-grav-site\nddev config --omit-containers=db\nddev start\nddev composer create getgrav/grav\nddev exec gpm install admin -y\nddev launch\n```\n\n----------------------------------------\n\nTITLE: DDEV Configuration for Subdomain Project\nDESCRIPTION: YAML configuration example for setting up a project that uses a subdomain structure (stories.example.org).\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/topics/hosting.md#2025-04-19_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nname: stories\nproject_tld: example.org\n```\n\n----------------------------------------\n\nTITLE: Downloading and Executing macOS NFS Setup Script\nDESCRIPTION: This command downloads the macOS DDEV NFS setup script, makes it executable, and runs it to configure NFS for DDEV.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/install/performance.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -O https://raw.githubusercontent.com/ddev/ddev/main/scripts/macos_ddev_nfs_setup.sh && chmod +x macos_ddev_nfs_setup.sh && ./macos_ddev_nfs_setup.sh\n```\n\n----------------------------------------\n\nTITLE: Monitoring Mutagen Sync Performance in Bash\nDESCRIPTION: A Bash loop that continually checks and displays Mutagen synchronization status, useful for debugging slow sync operations by identifying large files or directories being synchronized.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/install/performance.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nwhile true; do ddev mutagen st -l | grep \"^Current\"; sleep 1; done\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Engine Trust on Linux\nDESCRIPTION: Commands to install a corporate CA certificate for Docker Engine on Linux systems. This allows Docker to trust the corporate CA when pulling images from remote registries.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/networking.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo mkdir -p /etc/docker/certs.d/\nsudo cp mycorp-ca.crt /etc/docker/certs.d/\nsudo systemctl restart docker\n```\n\n----------------------------------------\n\nTITLE: Setting up OpenMage via Git Clone for Contributors\nDESCRIPTION: This script clones the OpenMage repository from GitHub and configures DDEV for it. It's intended for contributors who want to work on the OpenMage codebase directly, with additional custom DDEV commands.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/quickstart.md#2025-04-19_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nmkdir my-openmage-site && cd my-openmage-site\ngit clone https://github.com/OpenMage/magento-lts .\nddev config --project-type=magento --php-version=8.1 --web-environment-add=MAGE_IS_DEVELOPER_MODE=1\nddev start\nddev composer install\n# Silent OpenMage install with sample data\n# See `ddev openmage-install -h` for more options\nddev openmage-install -q\n# Login using `admin` user and `veryl0ngpassw0rd` password\nddev launch /admin\n```\n\n----------------------------------------\n\nTITLE: Defining WordPress home URL in PHP configuration\nDESCRIPTION: This PHP code snippet demonstrates how to set the WP_HOME constant in the WordPress configuration file. It's used to update the base URL when sharing the project via ngrok.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/topics/sharing.md#2025-04-19_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndefine('WP_HOME', 'https://wp23.ngrok-free.app');\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Compose Bind Mount Configuration in YAML\nDESCRIPTION: Docker Compose configuration that creates a direct bind mount for excluded directories, allowing access to directories that are excluded from Mutagen syncing.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/install/performance.md#2025-04-19_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  web:\n    volumes:\n    - \"../web/core/node_modules:/var/www/html/web/core/node_modules\"\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Server for DDEV Environment\nDESCRIPTION: This configuration snippet sets up MySQL server parameters for use in a DDEV environment. It specifies the InnoDB redo log capacity and includes a commented-out authentication plugin setting. The configuration is compatible with MySQL 8.0 and later versions.\nSOURCE: https://github.com/ddev/ddev/blob/main/containers/ddev-dbserver/files/etc/mysql/version-conf.d/mysql_8.0.cnf.txt#2025-04-19_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[mysqld]\n\n# caching_sha2_password is the default for mysql 8.0, no config required\n# default-authentication-plugin=caching_sha2_password\n\n# In mysql 8+ innodb-redo-log-capacity replaces innodb-log-file-size etc.\n# Unfortunately, we can't get rid of the obsolete innodb-log-file-size\n# which now does nothing, because it's used by all types in create-base-db.sh\ninnodb-redo-log-capacity=100663296\n```\n\n----------------------------------------\n\nTITLE: Creating DDEV Project Snapshot\nDESCRIPTION: Commands to start a DDEV project and create a snapshot.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/faq.md#2025-04-19_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nddev start && ddev snapshot\n```\n\n----------------------------------------\n\nTITLE: Moving DDEV Global Configuration to XDG_CONFIG_HOME\nDESCRIPTION: Bash commands to move DDEV's global configuration directory to follow the XDG Base Directory Specification, using the XDG_CONFIG_HOME environment variable.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/architecture.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddev poweroff\n# permanently set environment variable using a directory that works for you\nexport XDG_CONFIG_HOME=\"$HOME/.config\"\n# restart the terminal and run:\nmv ~/.ddev ${XDG_CONFIG_HOME}/ddev\n```\n\n----------------------------------------\n\nTITLE: Basic DDEV Navigation Commands\nDESCRIPTION: Commands for navigating between DDEV projects and checking project status\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/commands.md#2025-04-19_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nddev debug cd\nddevcd some-project\n```\n\n----------------------------------------\n\nTITLE: Configuring DDEV Custom Command Scripts\nDESCRIPTION: This snippet outlines the purpose and usage of custom command scripts in DDEV projects. It specifies that scripts in this directory are executed on the host but can interact with containers using 'ddev exec'. It also provides a link to documentation for available environment variables.\nSOURCE: https://github.com/ddev/ddev/blob/main/pkg/ddevapp/global_dotddev_assets/commands/host/README.txt#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#ddev-generated\nScripts in this directory will be executed on the host\nbut they can take easily take action on containers by using\n`ddev exec`.\n\nSee https://ddev.readthedocs.io/en/stable/users/extend/custom-commands/#environment-variables-provided for a list of environment variables that can be used in the scripts.\n```\n\n----------------------------------------\n\nTITLE: Using Logrus Level Logging in Go\nDESCRIPTION: Shows the usage of different logging levels in Logrus from Trace to Panic, and how to set global logging levels.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-19_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nlog.Trace(\"Something very low level.\")\nlog.Debug(\"Useful debugging information.\")\nlog.Info(\"Something noteworthy happened!\")\nlog.Warn(\"You should probably take a look at this.\")\nlog.Error(\"Something failed but I'm not quitting.\")\n// Calls os.Exit(1) after logging\nlog.Fatal(\"Bye.\")\n// Calls panic() after logging\nlog.Panic(\"I'm bailing.\")\n```\n\nLANGUAGE: go\nCODE:\n```\n// Will log anything that is info or above (warn, error, fatal, panic). Default.\nlog.SetLevel(log.InfoLevel)\n```\n\n----------------------------------------\n\nTITLE: Testing Docker Engine Trust Configuration\nDESCRIPTION: Command to test if Docker Engine properly trusts the corporate CA by attempting to pull an Alpine image. Success indicates the CA is trusted correctly.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/networking.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull alpine\n# ✅ Should succeed if CA is trusted\n# ❌ If not trusted: x509: certificate signed by unknown authority\n```\n\n----------------------------------------\n\nTITLE: Setting host webserver port in DDEV config\nDESCRIPTION: This YAML snippet demonstrates how to set a custom host webserver port and bind it to all interfaces in the DDEV configuration, useful for direct URL access.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/topics/sharing.md#2025-04-19_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nhost_webserver_port: \"8080\"\nbind_all_interfaces: true\n```\n\n----------------------------------------\n\nTITLE: Upgrading DDEV on Debian/Ubuntu Linux\nDESCRIPTION: Commands to update package information and upgrade all packages including DDEV on Debian/Ubuntu-based Linux distributions.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/install/ddev-upgrade.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Update package information and all packages including DDEV\nsudo apt-get update && sudo apt-get upgrade\n```\n\n----------------------------------------\n\nTITLE: Using GoUtils Random Function with Error Handling in Go\nDESCRIPTION: Shows how to use the Random function from GoUtils package with proper error handling. This example demonstrates handling invalid parameters and checking for errors in the returned values.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/Masterminds/goutils/README.md#2025-04-19_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"github.com/Masterminds/goutils\"\n)\n\nfunc main() {\n\n    // EXAMPLE 2: A goutils function which returns an error\n    rand1, err1 := goutils.Random (-1, 0, 0, true, true)  \n\n    if err1 != nil {\n        fmt.Println(err1) // Prints out error message because -1 was entered as the first parameter in goutils.Random(...)\n    } else {\n        fmt.Println(rand1)\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Laravel with SQLite in DDEV\nDESCRIPTION: Creates a new Laravel project configured to use SQLite database instead of MariaDB. Includes commands for both new installations and converting existing projects.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/quickstart.md#2025-04-19_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nmkdir my-laravel-site && cd my-laravel-site\nddev config --project-type=laravel --docroot=public --omit-containers=db --disable-settings-management=true\nddev start\nddev composer create \"laravel/laravel:^12\"\nddev launch\n```\n\n----------------------------------------\n\nTITLE: Drupal 7 Hook Configuration\nDESCRIPTION: Example of Drupal 7 specific hooks for site installation and post-import tasks\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/configuration/hooks.md#2025-04-19_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nhooks:\n  post-start:\n    - exec: \"(drush status bootstrap | grep -q Successful) || drush site-install -y --db-url=db:db@db/db\"\n    - exec: \"drush uli\"\n  post-import-db:\n    - exec: \"drush vset site_name MyDevSite\"\n    - exec: \"drush en -y environment_indicator\"\n    - exec: \"drush cc all\"\n```\n\n----------------------------------------\n\nTITLE: Disabling DDEV Usage Data Sharing via Command Line\nDESCRIPTION: Demonstrates the command line approach to disable instrumentation data sharing using the ddev config global command.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/diagnostics.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nddev config global --instrumentation-opt-in=false\n```\n\n----------------------------------------\n\nTITLE: DDEV-Generated PHP Comment for Managed Settings Files\nDESCRIPTION: A comment DDEV adds to settings files it generates. The presence of this comment indicates that DDEV is managing the file and may overwrite it. Removing this comment prevents DDEV from managing the file.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/managing-projects.md#2025-04-19_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/**\n #ddev-generated: Automatically generated Drupal settings.php file.\n ddev manages this file and may delete or overwrite the file unless this comment is removed.\n */\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Database and Application Configuration\nDESCRIPTION: This snippet defines environment variables for database connection details, application URL, and other custom settings. It includes host, port, database name, credentials, and additional configuration parameters.\nSOURCE: https://github.com/ddev/ddev/blob/main/pkg/ddevapp/testdata/TestWriteProjectEnvFile/env-ambiguousvar.txt#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nDB_HOST=old_somehost\nDB_PORT=old_9999\nDB_DATABASE=old_somerandomdb\nDB_USERNAME=old_root\nDB_PASSWORD=old_root\nSOMEENV=old_someenvval\nAPP_URL=old_http://some.ddev.site\nDB_CONNECTION=old_mysql://x:x@x/x\nDYNAMODB_CONNECTION=old_dynamodb-something\n```\n\n----------------------------------------\n\nTITLE: Setting up Symfony with DDEV using Git Clone\nDESCRIPTION: Commands to set up an existing Symfony project from a Git repository and configure DDEV. This clones the repository and sets up the necessary environment for Symfony.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/quickstart.md#2025-04-19_snippet_42\n\nLANGUAGE: bash\nCODE:\n```\ngit clone <my-symfony-repo> my-symfony-site\ncd my-symfony-site\nddev config --project-type=symfony --docroot=public\nddev start\nddev composer install\nddev launch\n```\n\n----------------------------------------\n\nTITLE: Setting Primary Database Relationship via DDEV CLI\nDESCRIPTION: This bash command configures which Platform.sh database should be used as DDEV's primary 'db' database when your project has multiple databases.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/providers/platform.md#2025-04-19_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nddev config --web-environment-add=\"PLATFORM_PRIMARY_RELATIONSHIP=main\"\n```\n\n----------------------------------------\n\nTITLE: Configuring DDEV for network-wide access\nDESCRIPTION: This YAML snippet shows how to configure DDEV to bind to all network interfaces, allowing access from other devices on the local network.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/topics/sharing.md#2025-04-19_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nrouter-bind-all-interfaces: true\n```\n\n----------------------------------------\n\nTITLE: Exposing Additional Port in Docker Compose for DDEV\nDESCRIPTION: A simple configuration to expose port 9999 from a service to host port 9999, added via a docker-compose file like docker-compose.ports.yaml.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/extend/custom-compose-files.md#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  someservice:\n    ports:\n    - \"9999:9999\"\n```\n\n----------------------------------------\n\nTITLE: Installing DDEV PR Build for Linux and WSL2 ARM64\nDESCRIPTION: Downloads, extracts, and installs a PR build of DDEV for Linux and WSL2 with ARM64 architecture for testing purposes.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/developers/building-contributing.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Example for Linux and WSL2 ARM64:\nunzip ddev-linux-arm64.zip\nchmod +x ddev && mv ddev ~/bin/ddev\nrm -f ddev-linux-arm64.zip\n```\n\n----------------------------------------\n\nTITLE: Custom Logger Instance Creation\nDESCRIPTION: Shows how to create and configure a custom logger instance for advanced use cases like logging to multiple locations.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-19_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"os\"\n  \"github.com/sirupsen/logrus\"\n)\n\n// Create a new instance of the logger. You can have any number of instances.\nvar log = logrus.New()\n\nfunc main() {\n  // The API for setting attributes is a little different than the package level\n  // exported logger. See Godoc.\n  log.Out = os.Stdout\n\n  log.WithFields(logrus.Fields{\n    \"animal\": \"walrus\",\n    \"size\":   10,\n  }).Info(\"A group of walrus emerges from the ocean\")\n}\n```\n\n----------------------------------------\n\nTITLE: Running DDEV PHP Base Container\nDESCRIPTION: Command to run the DDEV PHP base container in interactive mode with automatic removal after exit. The command provides shell access to the container for debugging or exploration purposes.\nSOURCE: https://github.com/ddev/ddev/blob/main/containers/ddev-php-base/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm ddev/php-base:<tag> bash\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Drupal Multisite\nDESCRIPTION: YAML configuration for web_environment to persist Drush site aliases across all Drush connections in a DDEV environment.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/cms-settings.md#2025-04-19_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nweb_environment:\n    # Make DDEV Drush shell PIDs last for entire life of the container\n    # so `ddev drush site:set @alias` persists for all Drush connections.\n    # https://chrisfromredfin.dev/posts/drush-use-ddev/\n    - DRUSH_SHELL_PID=PERMANENT\n```\n\n----------------------------------------\n\nTITLE: Clean Docker Resources\nDESCRIPTION: Series of commands to remove DDEV-related Docker containers, images, and volumes\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/uninstall.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nddev delete images\ndocker rm $(docker ps -a | awk '/ddev/ { print $1 }')\ndocker rmi $(docker images | awk '/ddev/ {print $3}')\ndocker rmi -f $(docker images -q)\ndocker volume rm $(docker volume ls | awk '/ddev|-mariadb/ { print $2 }')\n```\n\n----------------------------------------\n\nTITLE: Protected Machine ID Retrieval in Go\nDESCRIPTION: Example demonstrating how to get a securely hashed machine ID using ProtectedID()\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/denisbrodbeck/machineid/README.md#2025-04-19_snippet_2\n\nLANGUAGE: golang\nCODE:\n```\npackage main\n\nimport (\n  \"fmt\"\n  \"log\"\n  \"github.com/denisbrodbeck/machineid\"\n)\n\nfunc main() {\n  id, err := machineid.ProtectedID(\"myAppName\")\n  if err != nil {\n    log.Fatal(err)\n  }\n  fmt.Println(id)\n}\n```\n\n----------------------------------------\n\nTITLE: PHP Error Reporting Configuration\nDESCRIPTION: PHP configuration snippet that shows less verbose error reporting settings for production environments, which expose less information publicly.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/topics/hosting.md#2025-04-19_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n; Error handling and logging\nerror_reporting = E_ALL\ndisplay_errors = On\ndisplay_startup_errors = On\nlog_errors = On\n```\n\n----------------------------------------\n\nTITLE: Configuring Zsh Completions with Oh My Zsh on macOS\nDESCRIPTION: Code for adding Homebrew completion paths to Oh My Zsh. This line should be added before sourcing oh-my-zsh.sh in the ~/.zshrc file.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/install/shell-completion.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nFPATH=\"$(brew --prefix)/share/zsh/site-functions:${FPATH}\"\n```\n\n----------------------------------------\n\nTITLE: Setting Docker Compose Project Name Variable for PhpStorm CLI Interpreter\nDESCRIPTION: This configuration example shows how to set the COMPOSE_PROJECT_NAME environment variable when configuring PhpStorm's remote CLI interpreter. The variable must be set to 'ddev-' followed by the lowercase project name.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/install/phpstorm.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nCOMPOSE_PROJECT_NAME=ddev-drup\n```\n\n----------------------------------------\n\nTITLE: Opening SequelAce Database Manager in DDEV\nDESCRIPTION: Example of using the ddev sequelace command to open the SequelAce database manager for the current project. This command is only available if Sequel Ace.app is installed in the Applications directory.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/commands.md#2025-04-19_snippet_31\n\nLANGUAGE: shell\nCODE:\n```\n# Open the current project's database in SequelAce\nddev sequelace\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Apps via DDEV CLI\nDESCRIPTION: This bash command adds the PLATFORM_APP variable to your DDEV project configuration using the command line interface.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/providers/platform.md#2025-04-19_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nddev config --web-environment-add=\"PLATFORM_APP=app\"\n```\n\n----------------------------------------\n\nTITLE: Installing ProcessWire via ZIP File with DDEV\nDESCRIPTION: This script downloads ProcessWire as a ZIP file, extracts it, and sets up DDEV with Apache FPM for ProcessWire development. It configures the necessary file structure and provides instructions for database setup.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/quickstart.md#2025-04-19_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\nmkdir my-processwire-site && cd my-processwire-site\ncurl -LJOf https://github.com/processwire/processwire/archive/master.zip\nunzip processwire-master.zip && rm -f processwire-master.zip && mv processwire-master/* . && mv processwire-master/.* . 2>/dev/null && rm -rf processwire-master\nddev config --project-type=php --webserver-type=apache-fpm\nddev start\nddev launch\n```\n\n----------------------------------------\n\nTITLE: Disabling PHP Errors in Production\nDESCRIPTION: PHP configuration file (.ddev/php/noerrors.ini) that turns off error display to screen for production environments to prevent leaking sensitive information.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/topics/hosting.md#2025-04-19_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\ndisplay_errors = Off\ndisplay_startup_errors = Off\n```\n\n----------------------------------------\n\nTITLE: Configuring WSL Network Hostname\nDESCRIPTION: WSL2 configuration file snippet for setting up custom network hostname in /etc/wsl.conf\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/developers/buildkite-testmachine-setup.md#2025-04-19_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[network]\nhostname=tb-wsl-16-dockerce\n```\n\n----------------------------------------\n\nTITLE: Creating an Option Selection Prompt with Promptui in Go\nDESCRIPTION: This example shows how to implement an option selection prompt using Promptui. It creates a list of days of the week for the user to choose from.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/manifoldco/promptui/README.md#2025-04-19_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/manifoldco/promptui\"\n)\n\nfunc main() {\n\tprompt := promptui.Select{\n\t\tLabel: \"Select Day\",\n\t\tItems: []string{\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\",\n\t\t\t\"Saturday\", \"Sunday\"},\n\t}\n\n\t_, result, err := prompt.Run()\n\n\tif err != nil {\n\t\tfmt.Printf(\"Prompt failed %v\\n\", err)\n\t\treturn\n\t}\n\n\tfmt.Printf(\"You choose %q\\n\", result)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing DDEV PR Build for Linux and WSL2\nDESCRIPTION: Downloads, extracts, and installs a PR build of DDEV for Linux and WSL2 with AMD64 architecture for testing purposes.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/developers/building-contributing.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Example for Linux and WSL2:\nunzip ddev-linux-amd64.zip\nchmod +x ddev && mv ddev ~/bin/ddev\nrm -f ddev-linux-amd64.zip\n```\n\n----------------------------------------\n\nTITLE: Custom Type Validation in Go\nDESCRIPTION: Shows how to implement custom type validation including context-aware validators and dependent field validation.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-19_snippet_18\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/asaskevich/govalidator\"\n\ntype CustomByteArray [6]byte // custom types are supported and can be validated\n\ntype StructWithCustomByteArray struct {\n  ID              CustomByteArray `valid:\"customByteArrayValidator,customMinLengthValidator\"` // multiple custom validators are possible as well and will be evaluated in sequence\n  Email           string          `valid:\"email\"`\n  CustomMinLength int             `valid:\"-\"`\n}\n\ngovalidator.CustomTypeTagMap.Set(\"customByteArrayValidator\", func(i interface{}, context interface{}) bool {\n  switch v := context.(type) { // you can type switch on the context interface being validated\n  case StructWithCustomByteArray:\n    // you can check and validate against some other field in the context,\n    // return early or not validate against the context at all – your choice\n  case SomeOtherType:\n    // ...\n  default:\n    // expecting some other type? Throw/panic here or continue\n  }\n\n  switch v := i.(type) { // type switch on the struct field being validated\n  case CustomByteArray:\n    for _, e := range v { // this validator checks that the byte array is not empty, i.e. not all zeroes\n      if e != 0 {\n        return true\n      }\n    }\n  }\n  return false\n})\ngovalidator.CustomTypeTagMap.Set(\"customMinLengthValidator\", func(i interface{}, context interface{}) bool {\n  switch v := context.(type) { // this validates a field against the value in another field, i.e. dependent validation\n  case StructWithCustomByteArray:\n    return len(v.ID) >= v.CustomMinLength\n  }\n  return false\n})\n```\n\n----------------------------------------\n\nTITLE: Renaming DDEV Project\nDESCRIPTION: Command to rename a DDEV project by updating the project configuration.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/faq.md#2025-04-19_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nddev config --project-name=<new_name>\n```\n\n----------------------------------------\n\nTITLE: Custom Flag Definition in Go\nDESCRIPTION: Example of creating custom flags that implement the Value interface.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-19_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nflag.Var(&flagVal, \"name\", \"help message for flagname\")\n```\n\n----------------------------------------\n\nTITLE: Installing DDEV PR Build for macOS Apple Silicon\nDESCRIPTION: Downloads, extracts, and installs a PR build of DDEV for macOS with Apple Silicon architecture for testing purposes.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/developers/building-contributing.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Example for macOS Apple Silicon:\nunzip ddev-macos-arm64.zip\nchmod +x ddev && mv ddev ~/bin/ddev\nrm -f ddev-macos-arm64.zip\n```\n\n----------------------------------------\n\nTITLE: DDEV Configuration for Apex Domain\nDESCRIPTION: Example YAML configuration for setting up a project with an apex domain (example.com) along with www subdomain and an additional FQDN.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/topics/hosting.md#2025-04-19_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nproject_tld: com\nname: example\nadditional_hostnames:\n    - www.example\nadditional_fqdns:\n    - mysite.com\n```\n\n----------------------------------------\n\nTITLE: Restarting Docker Daemon in Bash\nDESCRIPTION: Command to restart the Docker daemon after configuring proxy settings. This is necessary for the new proxy configuration to take effect.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/networking.md#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl restart docker\n```\n\n----------------------------------------\n\nTITLE: Installing mkdocs locally on macOS with Homebrew\nDESCRIPTION: Commands for installing mkdocs on macOS using Homebrew, including setting up pipx and installing necessary dependencies for the documentation system.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/developers/testing-docs.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew install pipx\nexport PIPX_BIN_DIR=/usr/local/bin\npipx install mkdocs\npipx runpip mkdocs install -r docs/mkdocs-pip-requirements\npipx ensurepath\n```\n\n----------------------------------------\n\nTITLE: Exporting DDEV Project Database\nDESCRIPTION: Command to export a DDEV project's database to a file.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/faq.md#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nddev export-db --file=/path/to/db.sql.gz\n```\n\n----------------------------------------\n\nTITLE: Node.js Commands in DDEV CLI\nDESCRIPTION: Examples of using npm and nvm commands within the web container for managing Node.js packages and versions.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/commands.md#2025-04-19_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\n# Install JavaScript packages using `npm`\nddev npm install\n\n# Update JavaScript packages using `npm`\nddev npm update\n\n# Use `nvm` to switch to Node.js v20\nddev nvm install 20\n\n# Check the installed Node.js version\nddev nvm current\n```\n\n----------------------------------------\n\nTITLE: Adding Upsun Project Variables via DDEV Command\nDESCRIPTION: Alternative method to add Upsun project and environment variables using the command line. This configures the connection details needed for DDEV to communicate with the correct Upsun project.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/providers/upsun.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nddev config --web-environment-add=\"PLATFORM_PROJECT=nf4amudfn23bi,PLATFORM_ENVIRONMENT=main\"\n```\n\n----------------------------------------\n\nTITLE: Installing ProcessWire via Git with DDEV\nDESCRIPTION: This script clones the ProcessWire repository from GitHub and sets up DDEV with Apache FPM. It provides options for either the stable main branch or the development branch with latest features.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/quickstart.md#2025-04-19_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\nmkdir my-processwire-site && cd my-processwire-site\n\n# clone the main branch (stable release) into the current directory\ngit clone https://github.com/processwire/processwire.git .\n\n# clone the dev branch (latest features) into the current directory\n# git clone -b dev https://github.com/processwire/processwire.git .\n\nddev config --webserver-type=apache-fpm\nddev start\nddev launch\n```\n\n----------------------------------------\n\nTITLE: Testing GoReleaser Configuration for DDEV Releases\nDESCRIPTION: Commands to test the GoReleaser configuration without deploying to production. Creates artifacts in the dist directory for manual testing.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/developers/release-management.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport REPOSITORY_OWNER=ddev-test\ngit tag <tagname> # Try to include context like PR number, for example v1.22.8-PR5824\nmake windows_amd64 windows_arm64 darwin_amd64 darwin_arm64 linux_amd64 linux_arm64 completions\ngoreleaser release --prepare --nightly --clean\n```\n\n----------------------------------------\n\nTITLE: Installing GoDotEnv Library and CLI\nDESCRIPTION: Commands for installing GoDotEnv as either a library dependency or command line tool, with different instructions for Go versions before and after 1.17.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/joho/godotenv/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/joho/godotenv\n```\n\nLANGUAGE: shell\nCODE:\n```\ngo install github.com/joho/godotenv/cmd/godotenv@latest\n```\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/joho/godotenv/cmd/godotenv\n```\n\n----------------------------------------\n\nTITLE: Configuring NFS Server Verbosity in macOS\nDESCRIPTION: This configuration snippet adjusts NFS server settings in macOS to disable reserved port requirement and increase verbosity for debugging purposes.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/install/performance.md#2025-04-19_snippet_6\n\nLANGUAGE: conf\nCODE:\n```\nnfs.server.mount.require_resv_port = 0\nnfs.server.verbose = 3\n```\n\n----------------------------------------\n\nTITLE: Installing xstrings Package in Go\nDESCRIPTION: Command to install the xstrings library using Go's package manager. This snippet shows how to use 'go get' to add the package to your Go project.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/huandu/xstrings/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/huandu/xstrings\n```\n\n----------------------------------------\n\nTITLE: Installing DDEV on Fedora/RedHat Linux\nDESCRIPTION: Commands to install DDEV on RedHat-based Linux distributions by setting up the repository and installing the package.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/install/ddev-installation.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Add DDEV releases to your package repository\nsudo sh -c 'echo \"\"'\necho '[ddev]\nname=ddev\nbaseurl=https://pkg.ddev.com/yum/\ngpgcheck=0\nenabled=1' | perl -p -e 's/^ +//' | sudo tee /etc/yum.repos.d/ddev.repo >/dev/null\n\n# Install DDEV\nsudo sh -c 'echo \"\"'\nsudo dnf install --refresh ddev\n\n# One-time initialization of mkcert\nmkcert -install\n```\n\n----------------------------------------\n\nTITLE: Progress Bar for IO Operations with Writer in Go\nDESCRIPTION: Shows how to use the progress bar with IO operations for writing data. It creates a multi-writer to track progress during writing.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/cheggaaa/pb/README_V1.md#2025-04-19_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\n// create and start bar\nbar := pb.New(myDataLen).SetUnits(pb.U_BYTES)\nbar.Start()\n\n// my io.Reader\nr := myReader\n\n// my io.Writer\nw := myWriter\n\n// create multi writer\nwriter := io.MultiWriter(w, bar)\n\n// and copy\nio.Copy(writer, r)\n\nbar.Finish()\n```\n\n----------------------------------------\n\nTITLE: Activating Bash Aliases in DDEV Web Container\nDESCRIPTION: Commands to activate the example bash aliases file in the DDEV web container's home directory. Users can either copy the example file or create a symbolic link.\nSOURCE: https://github.com/ddev/ddev/blob/main/pkg/ddevapp/dotddev_assets/homeadditions/README.txt#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncp bash_aliases.example .bash_aliases\n```\n\nLANGUAGE: bash\nCODE:\n```\nln -s bash_aliases.example .bash_aliases\n```\n\n----------------------------------------\n\nTITLE: Setting Acquia Environment ID in Project Config (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to set the ACQUIA_ENVIRONMENT_ID in the project's DDEV configuration file. It specifies the Acquia environment to be used for the project.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/providers/acquia.md#2025-04-19_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nweb_environment:\n    - ACQUIA_ENVIRONMENT_ID=yoursite.dev\n```\n\n----------------------------------------\n\nTITLE: Defining Docker Compose Services for DDEV Environment\nDESCRIPTION: This YAML configuration defines the services and networks for a DDEV local development environment. It includes web, db, dba, and mailhog services, along with custom configurations and volume mappings.\nSOURCE: https://github.com/ddev/ddev/blob/main/cmd/ddev/cmd/testdata/TestCmdAddonComplex/recipe/junk_linux_amd64.txt#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n#ddev-generated\nversion: '3.6'\nservices:\n  web:\n    container_name: ddev-${DDEV_SITENAME}-web\n    build:\n      context: '${DDEV_APPROOT}'\n      dockerfile: '${DDEV_APPROOT}/.ddev/web-build/Dockerfile'\n      args:\n        BASE_IMAGE: ${DDEV_WEBIMAGE}\n        username: '${USER}'\n        uid: '${DDEV_UID}'\n        gid: '${DDEV_GID}'\n    cap_add:\n      - SYS_PTRACE\n    environment:\n      - VIRTUAL_HOST=${DDEV_HOSTNAME}\n      - SECURE_VIRTUAL_HOST=https://${DDEV_HOSTNAME}\n      - TZ=${DDEV_PROJECT_TZ}\n      - DOCROOT=${DDEV_DOCROOT}\n      - DDEV_PHP_VERSION=${DDEV_PHP_VERSION}\n      - DDEV_WEBSERVER_TYPE=${DDEV_WEBSERVER_TYPE}\n      - DDEV_PROJECT_TYPE=${DDEV_PROJECT_TYPE}\n      - DDEV_ROUTER_HTTP_PORT=${DDEV_ROUTER_HTTP_PORT}\n      - DDEV_ROUTER_HTTPS_PORT=${DDEV_ROUTER_HTTPS_PORT}\n      - DDEV_XDEBUG_ENABLED=${DDEV_XDEBUG_ENABLED:-}\n      - DEPLOY_NAME=local\n      - VIRTUAL_PORT=${DDEV_ROUTER_HTTP_PORT}\n      - DOCKER_IP=127.0.0.1\n      - HOST_DOCKER_INTERNAL_IP=\n      - IS_DDEV_PROJECT=true\n      - DDEV_PROJECT=${DDEV_PROJECT}\n      - DDEV_SITENAME=${DDEV_SITENAME}\n      - DDEV_PRIMARY_URL=${DDEV_PRIMARY_URL}\n      - DDEV_HOSTNAME=${DDEV_HOSTNAME}\n      - DDEV_SERVER_SOCK=\n      - DDEV_HOST_DB_PORT=${DDEV_HOST_DB_PORT}\n      - DDEV_HOST_WEBSERVER_PORT=${DDEV_HOST_WEBSERVER_PORT}\n      - DDEV_HOST_HTTPS_PORT=${DDEV_HOST_HTTPS_PORT}\n      - DDEV_COMPOSER_ROOT=${DDEV_COMPOSER_ROOT}\n      - DDEV_REPO_SLUG=${DDEV_REPO_SLUG}\n      - DDEV_VERSION=${DDEV_VERSION}\n      - DDEV_WEBIMAGE=${DDEV_WEBIMAGE}\n      - DDEV_PROJECT_TYPE=${DDEV_PROJECT_TYPE}\n      - DDEV_ROUTER_HTTP_PORT=${DDEV_ROUTER_HTTP_PORT}\n      - DDEV_ROUTER_HTTPS_PORT=${DDEV_ROUTER_HTTPS_PORT}\n      - DDEV_DOCROOT=${DDEV_DOCROOT}\n      - DDEV_MAILHOG_PORT=${DDEV_MAILHOG_PORT}\n      - DDEV_MAILHOG_HTTPS_PORT=${DDEV_MAILHOG_HTTPS_PORT}\n      - DDEV_PHPMyAdmin_PORT=${DDEV_PHPMyAdmin_PORT}\n      - DDEV_PHPMyAdmin_HTTPS_PORT=${DDEV_PHPMyAdmin_HTTPS_PORT}\n      - DDEV_PHPMYADMIN_PORT=${DDEV_PHPMYADMIN_PORT}\n      - DDEV_PHPMYADMIN_HTTPS_PORT=${DDEV_PHPMYADMIN_HTTPS_PORT}\n      - DDEV_MAILPIT_PORT=${DDEV_MAILPIT_PORT}\n      - DDEV_MAILPIT_HTTPS_PORT=${DDEV_MAILPIT_HTTPS_PORT}\n      - COLUMNS=\n      - LINES=\n      - DDEV_BIND_TO_HOST_PORT=0\n    labels:\n      com.ddev.site-name: ${DDEV_SITENAME}\n      com.ddev.platform: ddev\n      com.ddev.app-type: ${DDEV_PROJECT_TYPE}\n      com.ddev.approot: $DDEV_APPROOT\n      com.ddev.app-url: ${DDEV_URL}\n    extra_hosts: [\"host.docker.internal:host-gateway\"]\n    volumes:\n      - type: \"volume\"\n        source: \"web\"\n        target: \"/var/www/html\"\n        volume:\n          nocopy: true\n      - type: \"bind\"\n        source: \"${DDEV_COMPOSER_ROOT}\"\n        target: \"/var/www/html\"\n        consistency: \"cached\"\n      - \"./:/mnt/ddev_config:ro\"\n      - \"ddev-global-cache:/mnt/ddev-global-cache\"\n    restart: \"no\"\n    user: \"$DDEV_UID:$DDEV_GID\"\n    healthcheck:\n      interval: 4s\n      retries: 6\n      start_period: 10s\n      timeout: 120s\n  db:\n    container_name: ddev-${DDEV_SITENAME}-db\n    build:\n      context: '${DDEV_DBIMAGE_FULL}'\n      args:\n        BASE_IMAGE: ${DDEV_DBIMAGE}\n        username: '${USER}'\n        uid: '${DDEV_UID}'\n        gid: '${DDEV_GID}'\n    image: ${DDEV_DBIMAGE_FULL}\n    stop_grace_period: 60s\n    volumes:\n      - type: \"volume\"\n        source: \"mariadb-database\"\n        target: \"/var/lib/mysql\"\n        volume:\n          nocopy: true\n      - \"./:/mnt/ddev_config:ro\"\n      - \"ddev-global-cache:/mnt/ddev-global-cache\"\n    restart: \"no\"\n    user: \"$DDEV_UID:$DDEV_GID\"\n    hostname: \"db\"\n    ports:\n      - \"${DDEV_HOST_DB_PORT}:3306\"\n    labels:\n      com.ddev.site-name: ${DDEV_SITENAME}\n      com.ddev.platform: ddev\n      com.ddev.app-type: ${DDEV_PROJECT_TYPE}\n      com.ddev.approot: $DDEV_APPROOT\n      com.ddev.app-url: ${DDEV_URL}\n    environment:\n      - TZ=${DDEV_PROJECT_TZ}\n      - COLUMNS=\n      - LINES=\n    command: \"sudo /usr/sbin/mysqld --sql-mode=''\"\n    healthcheck:\n      interval: 1s\n      retries: 120\n      start_period: 120s\n      timeout: 120s\n  dba:\n    container_name: ddev-${DDEV_SITENAME}-dba\n    image: ${DDEV_DBAIMAGE}\n    restart: \"no\"\n    labels:\n      com.ddev.site-name: ${DDEV_SITENAME}\n      com.ddev.platform: ddev\n      com.ddev.app-type: ${DDEV_PROJECT_TYPE}\n      com.ddev.approot: $DDEV_APPROOT\n      com.ddev.app-url: ${DDEV_URL}\n    links:\n      - db:db\n    ports:\n      - \"${DDEV_PHPMYADMIN_PORT}:80\"\n    environment:\n      - PMA_USER=db\n      - PMA_PASSWORD=db\n      - UPLOAD_LIMIT=1024M\n      - TZ=${DDEV_PROJECT_TZ}\n    healthcheck:\n      interval: 120s\n      timeout: 2s\n      retries: 1\n  mailhog:\n    container_name: ddev-${DDEV_SITENAME}-mailhog\n    image: ${DDEV_MAILHOG_IMAGE}\n    restart: \"no\"\n    labels:\n      com.ddev.site-name: ${DDEV_SITENAME}\n      com.ddev.platform: ddev\n      com.ddev.app-type: ${DDEV_PROJECT_TYPE}\n      com.ddev.approot: $DDEV_APPROOT\n      com.ddev.app-url: ${DDEV_URL}\n    ports:\n      - \"${DDEV_MAILHOG_PORT}:8025\"\n    environment:\n      - TZ=${DDEV_PROJECT_TZ}\n      - MH_STORAGE=maildir\n      - MH_MAILDIR_PATH=/mailhog\n    healthcheck:\n      interval: 11s\n      retries: 10\n      start_period: 10s\n      timeout: 10s\n    volumes:\n      - type: \"volume\"\n        source: \"mailhog\"\n        target: \"/mailhog\"\n        volume:\n          nocopy: true\nnetworks:\n  default:\n    external: true\n    name: ddev_default\nvolumes:\n  web:\n    name: \"${DDEV_SITENAME}-web\"\n  mariadb-database:\n    name: \"${DDEV_SITENAME}-mariadb\"\n  mailhog:\n    name: \"${DDEV_SITENAME}-mailhog\"\n  ddev-global-cache:\n    name: ddev-global-cache\n\n```\n\n----------------------------------------\n\nTITLE: Bash Alias Configuration for ls Command\nDESCRIPTION: Bash alias configuration to create the 'll' shorthand for 'ls -lhA' command in DDEV containers.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/extend/in-container-configuration.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nalias ll=\"ls -lhA\"\n```\n\n----------------------------------------\n\nTITLE: Setting up DDEV Remote Config Testing Environment\nDESCRIPTION: YAML configuration for testing remote config changes, specifying update intervals and repository details in the global config file.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/developers/remote-config.md#2025-04-19_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nremote_config:\n  update_interval: 1\n  remote:\n    owner: rfay\n    repo: remote-config\n    ref: 20240215_note_about_key_exp\n    filepath: remote-config.jsonc\n```\n\n----------------------------------------\n\nTITLE: Setting up SvelteKit with DDEV using Generic Webserver\nDESCRIPTION: This bash script demonstrates how to set up a SvelteKit demo site in DDEV using the generic webserver type. It configures the necessary exposed ports, daemons, and installs required dependencies to run a SvelteKit application.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/quickstart.md#2025-04-19_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nexport SVELTEKIT_SITENAME=my-sveltekit-site\nmkdir ${SVELTEKIT_SITENAME} && cd ${SVELTEKIT_SITENAME}\nddev config --project-type=generic --webserver-type=generic\nddev start\n\ncat <<EOF > .ddev/config.sveltekit.yaml\nweb_extra_exposed_ports:\n- name: svelte\n  container_port: 3000\n  http_port: 80\n  https_port: 443\nweb_extra_daemons:\n- name: \"sveltekit-demo\"\n  command: \"node build\"\n  directory: /var/www/html\nEOF\n\nddev exec \"npx sv create --template=demo --types=ts --no-add-ons --no-install .\"\n# When it prompts \"Directory not empty. Continue?\", choose Yes.\n\n# Install an example svelte.config.js that uses adapter-node\nddev exec curl -s -OL https://raw.githubusercontent.com/ddev/test-sveltekit/main/svelte.config.js\n# Install an example vite.config.ts that sets the port and allows all hostnames\nddev exec curl -s -OL https://raw.githubusercontent.com/ddev/test-sveltekit/main/vite.config.ts\nddev npm install @sveltejs/adapter-node\nddev npm install\nddev npm run build\nddev restart\nddev launch\n```\n\n----------------------------------------\n\nTITLE: Installing Pimcore with DDEV using Composer\nDESCRIPTION: This script sets up a Pimcore environment using DDEV and the Pimcore skeleton repository. It configures the necessary PHP extensions, installs Pimcore, and adds an extra daemon for handling background tasks.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/quickstart.md#2025-04-19_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nmkdir my-pimcore-site && cd my-pimcore-site\nddev config --project-type=php --docroot=public --webimage-extra-packages='php${DDEV_PHP_VERSION}-amqp'\n\nddev start\nddev composer create pimcore/skeleton\nddev exec pimcore-install --mysql-username=db --mysql-password=db --mysql-host-socket=db --mysql-database=db --admin-password=admin --admin-username=admin --no-interaction\necho \"web_extra_daemons:\n  - name: consumer\n    command: 'while true; do /var/www/html/bin/console messenger:consume pimcore_core pimcore_maintenance pimcore_scheduled_tasks pimcore_image_optimize pimcore_asset_update --memory-limit=250M --time-limit=3600; done'\n    directory: /var/www/html\" >.ddev/config.pimcore.yaml\n\nddev restart\nddev launch /admin\n```\n\n----------------------------------------\n\nTITLE: Installing pyspelling and aspell for documentation spell checking\nDESCRIPTION: Commands for installing pyspelling and aspell packages required for running the spell check on documentation files.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/developers/testing-docs.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo -H pip3 install pyspelling pymdown-extensions\nsudo apt-get install aspell\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Tag Validator in Go\nDESCRIPTION: Shows how to add a custom validator to the TagMap for struct validation. The example adds a 'duck' validator that checks if a string equals 'duck'.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-19_snippet_14\n\nLANGUAGE: go\nCODE:\n```\ngovalidator.TagMap[\"duck\"] = govalidator.Validator(func(str string) bool {\n\treturn str == \"duck\"\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Proxy Socket for Non-Root Users\nDESCRIPTION: Commands to create a proxy socket for non-root users to access the SSH agent socket. Includes setting up socat to forward requests and setting appropriate permissions.\nSOURCE: https://github.com/ddev/ddev/blob/main/containers/ddev-ssh-agent/README.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo socat UNIX-LISTEN:~/.ssh/socket,fork UNIX-CONNECT:/.ssh-agent/socket &\n```\n\n----------------------------------------\n\nTITLE: Installing Gatsby CLI in DDEV Web Image\nDESCRIPTION: Simple Dockerfile example for adding the Gatsby CLI globally to the DDEV web image using npm.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/extend/customizing-images.md#2025-04-19_snippet_5\n\nLANGUAGE: dockerfile\nCODE:\n```\nRUN npm install -g gatsby-cli\n```\n\n----------------------------------------\n\nTITLE: Setting PHP Configuration Parameters in DDEV\nDESCRIPTION: Example PHP .ini configuration file that sets the maximum execution time to 240 seconds. This configuration can be enabled by placing it in the .ddev/php directory of a DDEV project.\nSOURCE: https://github.com/ddev/ddev/blob/main/pkg/ddevapp/dotddev_assets/php/README.txt#2025-04-19_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[PHP]\nmax_execution_time = 240;\n```\n\n----------------------------------------\n\nTITLE: Adding Twig Debugging for Drupal\nDESCRIPTION: Code to enable Twig template debugging in Drupal by specifying a development services configuration file in settings.php or settings.local.php.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/cms-settings.md#2025-04-19_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$settings['container_yamls'][] = DRUPAL_ROOT . '/sites/development.services.yml';\n```\n\n----------------------------------------\n\nTITLE: Renaming Example Script for NGINX Reload Command\nDESCRIPTION: Example command showing how to rename a sample script file to create a custom DDEV command for reloading NGINX.\nSOURCE: https://github.com/ddev/ddev/blob/main/pkg/ddevapp/global_dotddev_assets/commands/web/README.txt#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmv reload-nginx.example reload-nginx\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform.sh Project Variables via DDEV CLI\nDESCRIPTION: This bash command adds the Platform.sh project identifier and environment name to your DDEV project using the command line interface.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/providers/platform.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nddev config --web-environment-add=\"PLATFORM_PROJECT=nf4amudfn23bi,PLATFORM_ENVIRONMENT=main\"\n```\n\n----------------------------------------\n\nTITLE: Installing DDEV PR Build for macOS Intel\nDESCRIPTION: Downloads, extracts, and installs a PR build of DDEV for macOS with Intel architecture for testing purposes.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/developers/building-contributing.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Example for macOS Intel:\nunzip ddev-macos-amd64.zip\nchmod +x ddev && mv ddev ~/bin/ddev\nrm -f ddev-macos-amd64.zip\n```\n\n----------------------------------------\n\nTITLE: Setting up Silverstripe CMS with DDEV using Composer\nDESCRIPTION: Commands to create a new Silverstripe CMS project using Composer, configure DDEV, and initialize the site. This installs the CMS and sets up the admin interface accessible at /admin.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/quickstart.md#2025-04-19_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\nmkdir my-silverstripe-site && cd my-silverstripe-site\nddev config --project-type=silverstripe --docroot=public\nddev start\nddev composer create --prefer-dist silverstripe/installer\nddev sake dev/build flush=all\nddev launch /admin\n```\n\n----------------------------------------\n\nTITLE: Debugging DDEV Rebuild Process\nDESCRIPTION: These commands allow users to debug the DDEV rebuild process by showing the full Docker build output. They are useful for troubleshooting Dockerfile build issues.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/troubleshooting.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nddev debug rebuild\n```\n\nLANGUAGE: bash\nCODE:\n```\n~/.ddev/bin/docker-compose -f .ddev/.ddev-docker-compose-full.yaml --progress=plain build --no-cache\n```\n\n----------------------------------------\n\nTITLE: Installing Shopware 6 with DDEV using Composer\nDESCRIPTION: This script sets up a Shopware 6 environment with DDEV and Composer. It configures the necessary project settings, installs Shopware, and provides instructions for accessing the admin interface.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/quickstart.md#2025-04-19_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\nmkdir my-shopware-site && cd my-shopware-site\nddev config --project-type=shopware6 --docroot=public\nddev start\nddev composer create shopware/production:^v6.5\n# If it asks `Do you want to include Docker configuration from recipes?`\n# answer `x`, as we're using DDEV for this rather than its recipes.\nddev exec console system:install --basic-setup\nddev launch /admin\n# Default username and password are `admin` and `shopware`\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Directories in DDEV\nDESCRIPTION: This snippet demonstrates how to configure upload directories in DDEV, specifically for projects that include folders accepting public files such as images.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/developers/quickstart-maintenance.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddev config ... --upload-dirs=public/media\n```\n\n----------------------------------------\n\nTITLE: Installing OpenMage via Git\nDESCRIPTION: Git commands for setting up a development environment to contribute to the OpenMage project. Includes initializing repository, adding remotes and pulling code.\nSOURCE: https://github.com/ddev/ddev/blob/main/pkg/ddevapp/testdata/TestDetectAppType/magento/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit init\ngit remote add origin https://github.com/<YOUR GIT USERNAME>/magento-lts\ngit pull origin master\ngit remote add upstream https://github.com/OpenMage/magento-lts\ngit pull upstream 1.9.4.x\ngit add -A && git commit\n```\n\n----------------------------------------\n\nTITLE: Custom Machine ID Protection Implementation\nDESCRIPTION: Example showing how to implement custom machine ID protection using HMAC-SHA256\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/denisbrodbeck/machineid/README.md#2025-04-19_snippet_3\n\nLANGUAGE: golang\nCODE:\n```\npackage main\n\nimport (\n  \"crypto/hmac\"\n  \"crypto/sha256\"\n  \"fmt\"\n  \"github.com/denisbrodbeck/machineid\"\n)\n\nconst appKey = \"WowSuchNiceApp\"\n\nfunc main() {\n  id, _ := machineid.ID()\n  fmt.Println(protect(appKey, id))\n  // Output: dbabdb7baa54845f9bec96e2e8a87be2d01794c66fdebac3df7edd857f3d9f97\n}\n\nfunc protect(appID, id string) string {\n  mac := hmac.New(sha256.New, []byte(id))\n  mac.Write([]byte(appID))\n  return fmt.Sprintf(\"%x\", mac.Sum(nil))\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Authentication and InnoDB Settings\nDESCRIPTION: MySQL configuration that sets up authentication plugin settings for backwards compatibility with PHP 7.3 and configures InnoDB redo log capacity. Includes commented references to MySQL 8.4 changes regarding authentication plugins.\nSOURCE: https://github.com/ddev/ddev/blob/main/containers/ddev-dbserver/files/etc/mysql/version-conf.d/mysql_8.4.cnf.txt#2025-04-19_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[mysqld]\n\n# caching_sha2_password is the default for mysql 8.4\n# This config is removed in MySQL 8.4\n# default-authentication-plugin=caching_sha2_password\n\n# load mysql-native-password, but do not make it the default (needed for php 7.3 and below)\n# This config is removed in MySQL 9\nmysql-native-password=2\n\n# In mysql 8+ this replaces innodb-log-file-size etc\ninnodb-redo-log-capacity=100663296\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Mode for DDEV\nDESCRIPTION: This command enables debug mode for DDEV, which provides additional information about how host.docker.internal is determined.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/debugging-profiling/step-debugging.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nDDEV_DEBUG=true ddev start\n```\n\n----------------------------------------\n\nTITLE: Basic Flag Definition in DDEV\nDESCRIPTION: Example of minimal flag definition showing single flag configuration with help output.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/extend/custom-commands.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nFlags:\n  -h, --help          help for ddev\n  -f, --flag          sets the flag option\n```\n\n----------------------------------------\n\nTITLE: Basic Machine ID Retrieval in Go\nDESCRIPTION: Basic example showing how to retrieve the machine ID using the library's ID() function\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/denisbrodbeck/machineid/README.md#2025-04-19_snippet_1\n\nLANGUAGE: golang\nCODE:\n```\npackage main\n\nimport (\n  \"fmt\"\n  \"log\"\n  \"github.com/denisbrodbeck/machineid\"\n)\n\nfunc main() {\n  id, err := machineid.ID()\n  if err != nil {\n    log.Fatal(err)\n  }\n  fmt.Println(id)\n}\n```\n\n----------------------------------------\n\nTITLE: Building Custom DDEV Webserver Docker Image\nDESCRIPTION: Creates a custom tagged version of the DDEV webserver Docker image with specific modifications for testing purposes.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/developers/building-contributing.md#2025-04-19_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncd containers/ddev-webserver\nmake VERSION=20210424_fix_dockerfile\n```\n\n----------------------------------------\n\nTITLE: Running the test-ssh-server Docker Container\nDESCRIPTION: Command to run the test-ssh-server container interactively with bash. This snippet shows how to start the container as a standalone instance for testing purposes.\nSOURCE: https://github.com/ddev/ddev/blob/main/containers/test-ssh-server/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm ddev/test-ssh-server:<tag> bash\n```\n\n----------------------------------------\n\nTITLE: Router Compose Cloudflare Environment Configuration\nDESCRIPTION: Docker Compose configuration for setting Cloudflare credentials in the router container\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/extend/traefik-router.md#2025-04-19_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  ddev-router:\n    environment:\n      - CLOUDFLARE_EMAIL=you@example.com\n      - CLOUDFLARE_API_KEY=some-key\n```\n\n----------------------------------------\n\nTITLE: Fixing Zsh Insecure Directories Warnings\nDESCRIPTION: Command to fix permissions for Homebrew share directory to resolve 'zsh compinit: insecure directories' warnings when using completions.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/install/shell-completion.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nchmod -R go-w \"$(brew --prefix)/share\"\n```\n\n----------------------------------------\n\nTITLE: Stopping and Unlisting DDEV Project\nDESCRIPTION: Command to stop a DDEV project and remove it from the project list.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/faq.md#2025-04-19_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nddev stop --unlist\n```\n\n----------------------------------------\n\nTITLE: Automating Sulu Webspace Configuration\nDESCRIPTION: Bash commands to automatically adjust Sulu webspace configuration files with environment variables. This sets the project name and key values in the XML configuration file.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/quickstart.md#2025-04-19_snippet_37\n\nLANGUAGE: bash\nCODE:\n```\nexport SULU_PROJECT_NAME=\"My Sulu Site\"\nexport SULU_PROJECT_KEY=\"my-sulu-site\"\nexport SULU_PROJECT_CONFIG_FILE=\"config/webspaces/my-sulu-site.xml\"\nddev exec \"mv config/webspaces/website.xml ${SULU_PROJECT_CONFIG_FILE}\"\nddev exec \"sed -i -e 's|<name>.*</name>|<name>${SULU_PROJECT_NAME}</name>|g' -e 's|<key>.*</key>|<key>${SULU_PROJECT_KEY}</key>|g' ${SULU_PROJECT_CONFIG_FILE}\"\n```\n\n----------------------------------------\n\nTITLE: Git Commands for Contributing to Cobra\nDESCRIPTION: Step-by-step commands for forking, cloning, and submitting changes to the Cobra project via Git. Includes branch creation, testing, committing, and pull request preparation.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/spf13/cobra/CONTRIBUTING.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/your_username/cobra && cd cobra\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b my-new-feature\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake test\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit add .\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -m 'Add some feature'\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin my-new-feature\n```\n\n----------------------------------------\n\nTITLE: Reading and Modifying System Hosts File in Go\nDESCRIPTION: This snippet demonstrates how to read the system's hosts file, add a new entry, and save the changes. It uses the hostsfile package to create a new Hosts object, add an IP and hostname, and flush the changes to disk.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/goodhosts/hostsfile/README.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"log\"\n\t\n\t\"github.com/goodhosts/hostsfile\"\n)\n\nfunc main() {\n    hosts, err := hostsfile.NewHosts()\n    if err != nil {\n        log.Fatal(err.Error())\n    }\n    if err := hosts.Add(\"192.168.1.1\", \"my-hostname\"); err != nil {\n        log.Fatal(err.Error())\n    }\n    if err := hosts.Flush(); err != nil {\n        log.Fatal(err.Error())\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL/MariaDB Server Settings\nDESCRIPTION: Essential MySQL/MariaDB configuration settings that disable various caching mechanisms and native AIO support. Includes settings for host cache, symbolic links, query cache, and InnoDB AIO configuration with notes about MariaDB 10.8+ compatibility.\nSOURCE: https://github.com/ddev/ddev/blob/main/containers/ddev-dbserver/files/etc/mysql/version-conf.d/mariadb_10.8.cnf.txt#2025-04-19_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[mysqld]\n\nskip-host-cache\nsymbolic-links=0\nquery-cache-type               = 0\nquery-cache-size               = 0\n\n# mariadb 10.8 and higher don't seem to be able to work with innodb_use_native_aio\n# without a privileged container, which seems like too much risk\ninnodb-use-native-aio=0\n\n# These docker-compose overrides were able to make innodb-use-native-aio work\n# For innodb_use_native_aio=ON mariadb versions need this, see\n# https://github.com/MariaDB/mariadb-docker/issues/454#issuecomment-1212040735\n#privileged: true\n#ulimits:\n#  memlock:\n#    soft: \"-1\"\n#    hard: \"-1\"\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Zsh Completion Index\nDESCRIPTION: Command to remove and rebuild the .zcompdump file, which is the index for Zsh completions. Helps resolve caching issues with completions.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/install/shell-completion.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrm -f ~/.zcompdump; compinit\n```\n\n----------------------------------------\n\nTITLE: Initializing Root Logger in Go Main Function\nDESCRIPTION: Example showing how to initialize the root logger in the main function using a logging implementation called 'logimpl'. Demonstrates basic logger setup pattern.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/go-logr/logr/README.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n    // ... other setup code ...\n\n    // Create the \"root\" logger.  We have chosen the \"logimpl\" implementation,\n    // which takes some initial parameters and returns a logr.Logger.\n    logger := logimpl.New(param1, param2)\n\n    // ... other setup code ...\n```\n\n----------------------------------------\n\nTITLE: Pulling from Platform.sh with Environment Variables in DDEV\nDESCRIPTION: Demonstrates how to pull data from Platform.sh by specifying environment variables directly on the command line, including PLATFORM_ENVIRONMENT and PLATFORMSH_CLI_TOKEN.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/commands.md#2025-04-19_snippet_25\n\nLANGUAGE: shell\nCODE:\n```\nddev pull platform --environment=PLATFORM_ENVIRONMENT=main,PLATFORMSH_CLI_TOKEN=abcdef\n```\n\n----------------------------------------\n\nTITLE: Building DDEV with Custom Webserver Image\nDESCRIPTION: Builds DDEV using a custom webserver image tag by first modifying the versionconstants.go file and then running make.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/developers/building-contributing.md#2025-04-19_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncd /workspace/ddev\nmake\n```\n\n----------------------------------------\n\nTITLE: DDEV Additional FQDNs Configuration\nDESCRIPTION: YAML configuration example showing how to add fully qualified domain names (FQDNs) to a DDEV project configuration file. This allows the site to be accessed via custom domain names.\nSOURCE: https://github.com/ddev/ddev/blob/main/version-history.md#2025-04-19_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nadditional_fqdns: [\"mysite.example.com\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Host Port in DDEV Config\nDESCRIPTION: Example of setting a fixed database port in DDEV configuration to ensure consistent database connection ports across project restarts. This configuration is done in the project's .ddev/config.yaml file.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/developer-tools.md#2025-04-19_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nhost_db_port: \"49156\"\n```\n\n----------------------------------------\n\nTITLE: Building and Publishing DDEV Chocolatey Package\nDESCRIPTION: Commands to build a DDEV Chocolatey package with a specific version and push it to the Chocolatey repository using the Docker-based approach.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/developers/release-management.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake chocolatey VERSION=<tag>\nexport CHOCOLATEY_API_KEY=key33333\ncd .gotmp/bin/windows_amd64/chocolatey\ndocker run --rm -v $PWD:/tmp/chocolatey -w /tmp/chocolatey linuturk/mono-choco push -s https://push.chocolatey.org/ --api-key \"${CHOCOLATEY_API_KEY}\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple DDEV Test Project in Bash\nDESCRIPTION: This snippet demonstrates how to create a basic DDEV project for testing purposes. It creates a new directory, configures DDEV, adds a simple PHP file, and starts the project.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/troubleshooting.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddev poweroff\nmkdir ~/tmp/testddev\ncd ~/tmp/testddev\nddev config --auto\nprintf \"<?php\\nphpinfo();\\n\" > index.php\nddev start\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables with DDEV Command Line\nDESCRIPTION: Command for setting environment variables using the ddev dotenv set command. This provides a convenient way to set variables without directly editing files.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/extend/customization-extendibility.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nddev dotenv set .ddev/.env.redis --redis-tag 7-bookworm --redis-foo bar\n```\n\n----------------------------------------\n\nTITLE: Running Symfony Console Commands with DDEV\nDESCRIPTION: Example commands for running Symfony Console through DDEV. This demonstrates how to list available commands and run doctrine schema updates.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/quickstart.md#2025-04-19_snippet_43\n\nLANGUAGE: bash\nCODE:\n```\nddev console list\n# ddev console doctrine:schema:update --force\n```\n\n----------------------------------------\n\nTITLE: Running Cobra Tests and Formatting\nDESCRIPTION: Commands for running tests and ensuring proper code formatting in the Cobra project. Uses Go test suite and make commands for verification.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/spf13/cobra/CONTRIBUTING.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo test ./...\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake test\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake all\n```\n\n----------------------------------------\n\nTITLE: Calculating String Width in Go using Runewidth\nDESCRIPTION: Demonstrates how to use the runewidth package to calculate the fixed display width of a string containing Japanese characters and special symbols.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/mattn/go-runewidth/README.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nrunewidth.StringWidth(\"つのだ☆HIRO\") == 12\n```\n\n----------------------------------------\n\nTITLE: Testing HTTPS Proxy with Curl (Explicit Proxy)\nDESCRIPTION: Command to test HTTPS connectivity through the Squid proxy using curl with explicit proxy configuration.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/developers/network-test-environments.md#2025-04-19_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl -I https://www.google.com --proxy http://squid.host-only:3128\n```\n\n----------------------------------------\n\nTITLE: Using Logger in Go Application Object\nDESCRIPTION: Example of using the logger within an application object structure. Shows how to embed and use the logger in application code.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/go-logr/logr/README.md#2025-04-19_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype appObject struct {\n    // ... other fields ...\n    logger logr.Logger\n    // ... other fields ...\n}\n\nfunc (app *appObject) Run() {\n    app.logger.Info(\"starting up\", \"timestamp\", time.Now())\n\n    // ... app code ...\n```\n\n----------------------------------------\n\nTITLE: Environment Loading Precedence Example\nDESCRIPTION: Example showing the conventional order of loading multiple environment files based on environment type.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/joho/godotenv/README.md#2025-04-19_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nenv := os.Getenv(\"FOO_ENV\")\nif \"\" == env {\n  env = \"development\"\n}\n\ngodotenv.Load(\".env.\" + env + \".local\")\nif \"test\" != env {\n  godotenv.Load(\".env.local\")\n}\ngodotenv.Load(\".env.\" + env)\ngodotenv.Load() // The Original .env\n```\n\n----------------------------------------\n\nTITLE: Generating Root CA Certificate for Squid SSL Interception\nDESCRIPTION: Creates a self-signed root CA certificate that Squid will use to resign intercepted HTTPS traffic. The certificate is valid for 365 days with a 2048-bit RSA key.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/developers/network-test-environments.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo openssl req -new -newkey rsa:2048 -days 365 -nodes -x509 \\\n  -keyout /etc/squid/mitm.key \\\n  -out /etc/squid/mitm.crt \\\n  -subj \"/CN=SquidMITMTest\"\n```\n\n----------------------------------------\n\nTITLE: Basic Provider Recipe Structure in YAML\nDESCRIPTION: Defines the core structure of a DDEV provider recipe file, showing the main configuration stanzas for environment variables, database operations, and file handling.\nSOURCE: https://github.com/ddev/ddev/blob/main/pkg/ddevapp/dotddev_assets/providers/README.txt#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nenvironment_variables:\n  # Variables for provider context\n\ndb_pull_command:\n  # Script to download database\n\ndb_import_command:\n  # Optional: custom database import logic\n\nfiles_pull_command:\n  # Script to download files\n\nfiles_import_command:\n  # Optional: custom files import logic\n\ndb_push_command:\n  # Script to push database upstream\n\nfiles_push_command:\n  # Script to push files upstream\n```\n\n----------------------------------------\n\nTITLE: Running DDEV Webserver Docker Container\nDESCRIPTION: Command to run the ddev-webserver Docker container in interactive mode with a bash shell. This is useful for debugging or exploring the container environment.\nSOURCE: https://github.com/ddev/ddev/blob/main/containers/ddev-webserver/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm ddev/ddev-webserver:<tag> bash\n```\n\n----------------------------------------\n\nTITLE: Initializing Squid's SSL Certificate Store\nDESCRIPTION: Commands to initialize and set proper permissions for Squid's SSL certificate database, which is required for dynamic certificate generation.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/developers/network-test-environments.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo /usr/lib/squid/security_file_certgen -c -s /var/lib/ssl_db -M 4MB\nsudo chown -R proxy: /var/lib/ssl_db\n```\n\n----------------------------------------\n\nTITLE: Adding JSON Parsing Functions in Go\nDESCRIPTION: Added new fromJson and mustFromJson functions to parse JSON data.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/Masterminds/sprig/v3/CHANGELOG.md#2025-04-19_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n- #223: Added fromJson and mustFromJson functions\n```\n\n----------------------------------------\n\nTITLE: Using xhprof Command in DDEV\nDESCRIPTION: The xhprof command is used to enable, disable, or check the status of Xhprof profiling in DDEV. It can be used with arguments 'on', 'off', or 'status'.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/commands.md#2025-04-19_snippet_47\n\nLANGUAGE: shell\nCODE:\n```\n# Display whether Xhprof is running\nddev xhprof status\n\n# Turn Xhprof on\nddev xhprof\n\n# Turn Xhprof on\nddev xhprof on\n\n# Turn Xhprof off\nddev xhprof off\n```\n\n----------------------------------------\n\nTITLE: Disabling DDEV WordPress Config Inclusion\nDESCRIPTION: PHP comment to disable DDEV configuration for WordPress when using alternative configuration methods. This prevents DDEV from looking for its config file when not needed.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/quickstart.md#2025-04-19_snippet_51\n\nLANGUAGE: php\nCODE:\n```\n// wp-config-ddev.php not needed\n```\n\n----------------------------------------\n\nTITLE: Struct Validation with Type Tags\nDESCRIPTION: Example of using type validation tags in struct fields and validating the struct.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-19_snippet_9\n\nLANGUAGE: go\nCODE:\n```\ntype User\tstruct {\n  Name string      `valid:\"type(string)\"`\n  Age  int         `valid:\"type(int)\"`\n  Meta interface{} `valid:\"type(string)\"`\n}\nresult, err := govalidator.ValidateStruct(User{\"Bob\", 20, \"meta\"})\nif err != nil {\n\tprintln(\"error: \" + err.Error())\n}\nprintln(result)\n```\n\n----------------------------------------\n\nTITLE: Advanced Copy Usage Example in Go\nDESCRIPTION: Shows how to use the Options struct to configure advanced copying behavior, specifically demonstrating how to skip .git directories during copying.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/otiai10/copy/README.md#2025-04-19_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// For example...\nopt := Options{\n\tSkip: func(info os.FileInfo, src, dest string) (bool, error) {\n\t\treturn strings.HasSuffix(src, \".git\"), nil\n\t},\n}\nerr := Copy(\"your/directory\", \"your/directory.copy\", opt)\n```\n\n----------------------------------------\n\nTITLE: Creating a Digest from Bytes in Go\nDESCRIPTION: Demonstrates how to create a content identifier (digest) from a byte slice using the go-digest package. This is useful for Content Addressable Storage systems.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/opencontainers/go-digest/README.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nid := digest.FromBytes([]byte(\"my content\"))\n```\n\n----------------------------------------\n\nTITLE: Testing HTTPS Proxy with Curl (Environment Variable)\nDESCRIPTION: Commands to test HTTPS connectivity through the Squid proxy using curl with the HTTPS_PROXY environment variable.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/developers/network-test-environments.md#2025-04-19_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nexport HTTPS_PROXY=http://squid.host-only:3128\ncurl -I https://www.google.com\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Mergo for Merging Structs\nDESCRIPTION: Demonstrates the basic usage of Mergo to merge two structs.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/dario.cat/mergo/README.md#2025-04-19_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nif err := mergo.Merge(&dst, src); err != nil {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting DDEV PAGER Environment Variable\nDESCRIPTION: Shell configuration to set the PAGER environment variable for web and db containers across all DDEV projects.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/extend/in-container-configuration.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport DDEV_PAGER=\"less -SFXR\"\n```\n\n----------------------------------------\n\nTITLE: Monitoring Squid Logs for Docker Requests\nDESCRIPTION: Commands to watch Squid access logs in real-time, filtering for Docker-related requests to verify proxy usage.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/developers/network-test-environments.md#2025-04-19_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull alpine\n```\n\n----------------------------------------\n\nTITLE: Changing Socket Ownership for Non-Root Access\nDESCRIPTION: Command to change the ownership of the proxy socket to the current user, allowing non-root access to the SSH agent.\nSOURCE: https://github.com/ddev/ddev/blob/main/containers/ddev-ssh-agent/README.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo chown $(id -u) ~/.ssh/socket\n```\n\n----------------------------------------\n\nTITLE: Installing Required Software with Homebrew in macOS\nDESCRIPTION: This command installs various tools and applications needed for the DDEV test environment using Homebrew. It includes buildkite-agent, bats-core, composer, ddev, git, golang, jq, mysql-client, mkcert, netcat, p7zip, docker, iterm2, and ngrok.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/developers/buildkite-testmachine-setup.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbrew install buildkite/buildkite/buildkite-agent bats-core composer ddev/ddev/ddev git golang jq mysql-client@8.0 mkcert netcat p7zip  && brew install --cask docker iterm2 ngrok && brew link --force mysql-client\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL 5.7 Database in DDEV YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure a MySQL 5.7 database in the DDEV configuration file. It sets the database type to MySQL and specifies version 5.7.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/extend/database-types.md#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndatabase:\n  type: mysql\n  version: 5.7\n```\n\n----------------------------------------\n\nTITLE: Making HTTP Requests Between DDEV Projects Using Project Domains\nDESCRIPTION: Example of making HTTP requests between DDEV projects using the project's domain name after configuring external_links in docker-compose.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/faq.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# call from project A web container to project B's web container\ncurl https://projectb.ddev.site\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration Example for Extra Packages\nDESCRIPTION: Example showing how to specify additional Debian packages in DDEV configuration using webimage_extra_packages.\nSOURCE: https://github.com/ddev/ddev/blob/main/version-history.md#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwebimage_extra_packages: [package1, package2]\n```\n\n----------------------------------------\n\nTITLE: Configuring VSCode for golangci-lint\nDESCRIPTION: JSON configuration for setting up golangci-lint in Visual Studio Code. This enables automatic linting on save for Go packages.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/Microsoft/go-winio/README.md#2025-04-19_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"go.lintTool\": \"golangci-lint\",\n    \"go.lintOnSave\": \"package\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Config with Options in Go\nDESCRIPTION: Implementation of a configuration factory function that applies default values and processes option parameters.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-19_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// newConfig returns an appropriately configured config.\nfunc newConfig(options ...Option) config {\n\t// Set default values for config.\n\tconfig := config{/* […] */}\n\tfor _, option := range options {\n\t\tconfig = option.apply(config)\n\t}\n\t// Perform any validation here.\n\treturn config\n}\n```\n\n----------------------------------------\n\nTITLE: Remove DDEV Project and Hostnames\nDESCRIPTION: Commands for removing a specific DDEV project and cleaning up hostname entries\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/uninstall.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddev delete <project>\nddev delete --omit-snapshot <project>\nddev hostname --remove-inactive\n```\n\n----------------------------------------\n\nTITLE: Advanced Column Configuration in Golang\nDESCRIPTION: Shows comprehensive column configuration including alignment, colors, content transformation, visibility, and width constraints.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/jedib0t/go-pretty/v6/table/README.md#2025-04-19_snippet_7\n\nLANGUAGE: golang\nCODE:\n```\n    nameTransformer := text.Transformer(func(val interface{}) string {\n        return text.Bold.Sprint(val)\n    })\n\n    t.SetColumnConfigs([]ColumnConfig{\n        {\n            Name:              \"First Name\",\n            Align:             text.AlignLeft,\n            AlignFooter:       text.AlignLeft,\n            AlignHeader:       text.AlignLeft,\n            Colors:            text.Colors{text.BgBlack, text.FgRed},\n            ColorsHeader:      text.Colors{text.BgRed, text.FgBlack, text.Bold},\n            ColorsFooter:      text.Colors{text.BgRed, text.FgBlack},\n            Hidden:            false,\n            Transformer:       nameTransformer,\n            TransformerFooter: nameTransformer,\n            TransformerHeader: nameTransformer,\n            VAlign:            text.VAlignMiddle,\n            VAlignFooter:      text.VAlignTop,\n            VAlignHeader:      text.VAlignBottom,\n            WidthMin:          6,\n            WidthMax:          64,\n        }\n    })\n```\n\n----------------------------------------\n\nTITLE: Basic Table Creation in Go using go-pretty\nDESCRIPTION: Demonstrates basic table creation with headers, rows, separators and footers using the go-pretty library. Shows how to initialize a table writer, add content, and render to stdout.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/jedib0t/go-pretty/v6/table/README.md#2025-04-19_snippet_0\n\nLANGUAGE: golang\nCODE:\n```\npackage main\n\nimport (\n    \"os\"\n\n    \"github.com/jedib0t/go-pretty/v6/table\"\n)\n\nfunc main() {\n    t := table.NewWriter()\n    t.SetOutputMirror(os.Stdout)\n    t.AppendHeader(table.Row{\"#\", \"First Name\", \"Last Name\", \"Salary\"})\n    t.AppendRows([]table.Row{\n        {1, \"Arya\", \"Stark\", 3000},\n        {20, \"Jon\", \"Snow\", 2000, \"You know nothing, Jon Snow!\"},\n    })\n    t.AppendSeparator()\n    t.AppendRow([]interface{}{300, \"Tyrion\", \"Lannister\", 5000})\n    t.AppendFooter(table.Row{\"\", \"\", \"Total\", 10000})\n    t.Render()\n```\n\n----------------------------------------\n\nTITLE: Configuring DDEV Custom Scripts\nDESCRIPTION: This snippet outlines the purpose of the script directory in DDEV projects. It specifies that scripts placed here will be executed on the host machine, but can interact with containers using 'ddev exec'. It also provides a link to documentation for available environment variables.\nSOURCE: https://github.com/ddev/ddev/blob/main/pkg/ddevapp/dotddev_assets/commands/host/README.txt#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#ddev-generated\nScripts in this directory will be executed on the host\nbut they can take easily take action on containers by using\n`ddev exec`.\n\nSee https://ddev.readthedocs.io/en/stable/users/extend/custom-commands/#environment-variables-provided for a list of environment variables that can be used in the scripts.\n```\n\n----------------------------------------\n\nTITLE: Configuring DDEV Notifications JSON Structure\nDESCRIPTION: Demonstrates the JSON structure for configuring notification messages in DDEV's remote config. Includes version-specific targeting and supports both info and warning message types with configurable intervals.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/developers/remote-config.md#2025-04-19_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"messages\": {\n    \"notifications\": {\n      \"interval\": 20,\n      \"infos\": [\n        {\n          \"message\": \"This is a message to users of DDEV before v1.22.7\",\n          \"versions\": \"<=v1.22.6\"\n        }\n      ],\n      \"warnings\": []\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: DDEV Database Script Directory Configuration\nDESCRIPTION: Comment header indicating generated DDEV configuration and instructions for script execution within database containers.\nSOURCE: https://github.com/ddev/ddev/blob/main/pkg/ddevapp/global_dotddev_assets/commands/db/README.txt#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#ddev-generated\\nScripts in this directory will be executed inside the db\\ncontainer.\\n\\nSee https://ddev.readthedocs.io/en/stable/users/extend/custom-commands/#environment-variables-provided for a list of environment variables that can be used in the scripts.\n```\n\n----------------------------------------\n\nTITLE: Running DDEV Container Image in Bash Shell\nDESCRIPTION: Command to run a DDEV container image in interactive mode with a bash shell. The container is removed after exit, making it suitable for temporary usage and testing.\nSOURCE: https://github.com/ddev/ddev/blob/main/containers/image_readme_template.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n{{ INSTRUCTIONS GO HERE }}\ndocker run -it --rm ddev/ddev-{{ CONTAINER NAME }}:<tag> bash\n```\n\n----------------------------------------\n\nTITLE: Restarting Squid Service\nDESCRIPTION: Command to restart the Squid proxy service after configuration changes.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/developers/network-test-environments.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl restart squid\n```\n\n----------------------------------------\n\nTITLE: Configuring Zsh Completions with Homebrew on macOS\nDESCRIPTION: Code block for setting up Homebrew completions in Zsh shell. This adds the Homebrew-managed path to FPATH and initializes the completion system.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/install/shell-completion.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nif type brew &>/dev/null\nthen\n  FPATH=\"$(brew --prefix)/share/zsh/site-functions:${FPATH}\"\n  autoload -Uz compinit\n  compinit\nfi\n```\n\n----------------------------------------\n\nTITLE: Deploying Package to Chocolatey using Docker\nDESCRIPTION: Commands for setting up API key and pushing the package to Chocolatey repository using Docker. Uses the linuturk/mono-choco image to handle Chocolatey operations in a containerized environment.\nSOURCE: https://github.com/ddev/ddev/blob/main/winpkg/chocolatey/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd <packagedir>\ndocker run --rm -v $PWD:/tmp/chocolatey -w /tmp/chocolatey linuturk/mono-choco apikey -k [API_KEY_HERE] -source https://push.chocolatey.org/\ndocker run --rm -v $PWD:/tmp/chocolatey -w /tmp/chocolatey linuturk/mono-choco push -s https://push.chocolatey.org/ --api-key=[API_KEY_HERE]\n```\n\n----------------------------------------\n\nTITLE: Table Sorting Configuration in Golang\nDESCRIPTION: Implements multi-column sorting functionality for tables, allowing sorting by multiple columns with specified sort modes (ascending/descending).\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/jedib0t/go-pretty/v6/table/README.md#2025-04-19_snippet_5\n\nLANGUAGE: golang\nCODE:\n```\n    t.SortBy([]table.SortBy{\n\t    {Name: \"First Name\", Mode: table.Asc},\n\t    {Name: \"Last Name\", Mode: table.Asc},\n    })\n```\n\n----------------------------------------\n\nTITLE: Implementing Boolean Options in Go\nDESCRIPTION: Shows implementation of boolean configuration options with both default true and false patterns.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-19_snippet_9\n\nLANGUAGE: go\nCODE:\n```\ntype defaultFalseOption bool\n\nfunc (o defaultFalseOption) apply(c config) config {\n\tc.Bool = bool(o)\n    return c\n}\n\n// WithOption sets a T to have an option included.\nfunc WithOption() Option {\n\treturn defaultFalseOption(true)\n}\n```\n\nLANGUAGE: go\nCODE:\n```\ntype defaultTrueOption bool\n\nfunc (o defaultTrueOption) apply(c config) config {\n\tc.Bool = bool(o)\n    return c\n}\n\n// WithoutOption sets a T to have Bool option excluded.\nfunc WithoutOption() Option {\n\treturn defaultTrueOption(false)\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading and Extracting Shell Completion Scripts\nDESCRIPTION: Commands to download and extract the DDEV shell completion scripts archive for manual deployment. Replace VERSION with your DDEV version number.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/install/shell-completion.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nVERSION=v1.24.0\ncurl -sSLf https://github.com/ddev/ddev/releases/download/${VERSION}/ddev_shell_completion_scripts.${VERSION}.tar.gz\ntar -zxf ddev_shell_completion_scripts.${VERSION}.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Expanding Tilde in Path with go-homedir in Go\nDESCRIPTION: Shows how to use the go-homedir library to expand the tilde (~) in a path to the full home directory path. The Expand() function takes a path string and returns the expanded version.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/mitchellh/go-homedir/README.md#2025-04-19_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nhomedir.Expand()\n```\n\n----------------------------------------\n\nTITLE: Running BATS Tests for DDEV Documentation\nDESCRIPTION: This snippet demonstrates how to run BATS tests for DDEV documentation, either for all tests or for a specific test file.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/developers/quickstart-maintenance.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd docs && bats tests\n```\n\nLANGUAGE: bash\nCODE:\n```\nbats tests/backdrop.bats\n```\n\n----------------------------------------\n\nTITLE: HTML Table Rendering in Golang\nDESCRIPTION: Shows how to render table data as HTML with custom CSS classes and HTML options for empty columns and text escaping.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/jedib0t/go-pretty/v6/table/README.md#2025-04-19_snippet_9\n\nLANGUAGE: golang\nCODE:\n```\n    t.Style().HTML = table.HTMLOptions{\n        CSSClass:    \"game-of-thrones\",\n        EmptyColumn: \"&nbsp;\",\n        EscapeText:  true,\n        Newline:     \"<br/>\",\n    }\n    t.RenderHTML()\n```\n\n----------------------------------------\n\nTITLE: Testing SSL Connection Through Proxy with OpenSSL\nDESCRIPTION: Command to test raw SSL certificate validation through the Squid proxy using OpenSSL.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/developers/network-test-environments.md#2025-04-19_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nopenssl s_client -connect www.google.com:443 -proxy squid.host-only:3128 -CAfile /etc/squid/mitm.crt\n```\n\n----------------------------------------\n\nTITLE: Configuring Database and Environment Variables\nDESCRIPTION: Sets environment variables for database connection parameters including host, port, credentials, and application URL. Includes commented lines at the beginning and end of the file.\nSOURCE: https://github.com/ddev/ddev/blob/main/pkg/ddevapp/testdata/TestWriteProjectEnvFile/env-commentsnewlines.txt#2025-04-19_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\n# this is a comment in the first line\n\nDB_HOST=old_somehost\nDB_PORT=old_9999\nDB_DATABASE=old_somerandomdb\nDB_USERNAME=old_root\nDB_PASSWORD=old_root\nSOMEENV=old_someenvval\nAPP_URL=old_http://some.ddev.site\nDB_CONNECTION=old_mysql://x:x@x/x\n# this is a comment in the last line\n```\n\n----------------------------------------\n\nTITLE: Removing Custom DDEV Installation\nDESCRIPTION: Removes the custom DDEV executable from the bin directory to revert to the standard installed version.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/developers/building-contributing.md#2025-04-19_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nrm ~/bin/ddev\n```\n\n----------------------------------------\n\nTITLE: Generating PNG Logo Variants with Inkscape and OxiPNG in Bash\nDESCRIPTION: This script generates PNG variants of DDEV logos at different resolutions using Inkscape for SVG conversion and OxiPNG for optimization. It creates 1x, 2x, 3x, and 4x versions for high pixel density displays.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/developers/brand-guide.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# brew install --cask inkscape\n# brew install oxipng\nsvg_dir=\"docs/content/developers/logos/SVG\"\noutput_dirs=(\"1x\" \"2x\" \"3x\" \"4x\")\ndpis=(96 192 288 384)\nfor file in \"$svg_dir\"/*.svg; do\n  base_name=$(basename \"${file%.svg}\")\n  for i in \"${!dpis[@]}\"; do\n    dpi=\"${dpis[$i]}\"\n    output_dir=\"${svg_dir}/../${output_dirs[$i]}\"\n    mkdir -p \"$output_dir\"\n    if [[ \"${dpi}\" == \"96\" ]]; then\n      # No @1x for 1x resolution\n      output_filename=\"$output_dir/${base_name}.png\"\n    else\n      output_filename=\"$output_dir/${base_name}@${output_dirs[$i]}.png\"\n    fi\n    # Export PNG at the specified DPI\n    inkscape \"$file\" --export-dpi \"$dpi\" --export-filename \"$output_filename\"\n    # Optimize the PNG file (lossless)\n    oxipng -o max --strip safe --alpha \"$output_filename\"\n  done\ndone\n```\n\n----------------------------------------\n\nTITLE: Auto-configuring DDEV Project\nDESCRIPTION: Command to automatically configure a DDEV project based on discovered code.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/faq.md#2025-04-19_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nddev config --auto\n```\n\n----------------------------------------\n\nTITLE: Provider YAML Structure for DDEV Hosting Integration\nDESCRIPTION: The structure of a provider YAML file that defines how DDEV integrates with hosting providers. Each file includes stanzas for environment variables, database operations, and file handling commands.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/providers/index.md#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- environment_variables: Environment variables will be created in the web container for each of these during pull or push operations. They're used to provide context (project ID, environment name, etc.) for each of the other stanzas. This stanza is not used in more recent hosting integrations, since providing the environment variables in `config.yaml` or via `ddev pull xxx --environment=VARIABLE=value` is preferred.\n- db_pull_command: A script that determines how DDEV should obtain a database. Its job is to create a gzipped database dump in `/var/www/html/.ddev/.downloads/db.sql.gz`. This is optional; if nothing has to be done to obtain the database dump, this step can be omitted.\n- db_import_command: (optional) A script that imports the downloaded database. This is for advanced usages like multiple databases. The default behavior only imports a single database into the `db` database. The [localfile example](https://github.com/ddev/ddev/blob/main/pkg/ddevapp/dotddev_assets/providers/localfile.yaml.example) uses this technique.\n- files_pull_command: A script that determines how DDEV can get user-generated files from upstream. Its job is to copy the files from upstream to `/var/www/html/.ddev/.downloads/files`. If nothing has to be done to obtain the files, this step can run `true`.\n- files_import_command: (optional) A script that imports the downloaded files. There are a number of situations where it's messy to push a directory of files around, and one can put it directly where it's needed. The [localfile example](https://github.com/ddev/ddev/blob/main/pkg/ddevapp/dotddev_assets/providers/localfile.yaml.example) uses this technique.\n- db_push_command: A script that determines how DDEV should push a database. Its job is to take a gzipped database dump from `/var/www/html/.ddev/.downloads/db.sql.gz` and load it on the hosting provider.\n- files_push_command: A script that determines how DDEV push user-generated files to upstream. Its job is to copy the files from the project's user-files directories (`$DDEV_FILES_DIRS`) to the correct places on the upstream provider.\n```\n\n----------------------------------------\n\nTITLE: Struct Validation Example in Go\nDESCRIPTION: Demonstrates how to validate a struct using various validation tags including custom validators. Shows usage of built-in and custom validation rules.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-19_snippet_15\n\nLANGUAGE: go\nCODE:\n```\ntype Post struct {\n\tTitle    string `valid:\"alphanum,required\"`\n\tMessage  string `valid:\"duck,ascii\"`\n\tMessage2 string `valid:\"animal(dog)\"`\n\tAuthorIP string `valid:\"ipv4\"`\n\tDate     string `valid:\"-\"`\n}\npost := &Post{\n\tTitle:   \"My Example Post\",\n\tMessage: \"duck\",\n\tMessage2: \"dog\",\n\tAuthorIP: \"123.234.54.3\",\n}\n\n// Add your own struct validation tags\ngovalidator.TagMap[\"duck\"] = govalidator.Validator(func(str string) bool {\n\treturn str == \"duck\"\n})\n\n// Add your own struct validation tags with parameter\ngovalidator.ParamTagMap[\"animal\"] = govalidator.ParamValidator(func(str string, params ...string) bool {\n    species := params[0]\n    return str == species\n})\ngovalidator.ParamTagRegexMap[\"animal\"] = regexp.MustCompile(\"^animal\\\\((\\\\w+)\\\\)$\")\n\nresult, err := govalidator.ValidateStruct(post)\nif err != nil {\n\tprintln(\"error: \" + err.Error())\n}\nprintln(result)\n```\n\n----------------------------------------\n\nTITLE: Configuring Logrus Environment-Specific Formatting in Go\nDESCRIPTION: Example of setting up environment-specific log formatting, using JSON formatter for production and text formatter for other environments.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-19_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  log \"github.com/sirupsen/logrus\"\n)\n\nfunc init() {\n  // do something here to set environment depending on an environment variable\n  // or command-line flag\n  if Environment == \"production\" {\n    log.SetFormatter(&log.JSONFormatter{})\n  } else {\n    // The TextFormatter is default, you don't actually have to do this.\n    log.SetFormatter(&log.TextFormatter{})\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Struct Validation Examples in Go\nDESCRIPTION: These code snippets demonstrate different struct definitions and their validation behavior. They show how to mark fields as exempt from validation or optional.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-19_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// this struct definition will fail govalidator.ValidateStruct() (and the field values do not matter):\ntype exampleStruct struct {\n  Name  string ``\n  Email string `valid:\"email\"`\n}\n\n// this, however, will only fail when Email is empty or an invalid email address:\ntype exampleStruct2 struct {\n  Name  string `valid:\"-\"`\n  Email string `valid:\"email\"`\n}\n\n// lastly, this will only fail when Email is an invalid email address but not when it's empty:\ntype exampleStruct2 struct {\n  Name  string `valid:\"-\"`\n  Email string `valid:\"email,optional\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Specific DDEV Version on macOS\nDESCRIPTION: Command to download and run the DDEV installation script to install a specific version (v1.23.5 in this example) on macOS.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/install/ddev-upgrade.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Download and run the script to update to DDEV v1.23.5\ncurl -fsSL https://ddev.com/install.sh | bash -s v1.23.5\n```\n\n----------------------------------------\n\nTITLE: Running Go Code Formatter\nDESCRIPTION: Command to format Go code according to standard conventions using gofmt with simplification flag\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/developers/building-contributing.md#2025-04-19_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\ngofmt -s\n```\n\n----------------------------------------\n\nTITLE: Installing mkdocs locally on Debian/Ubuntu Linux or WSL2\nDESCRIPTION: Commands for installing mkdocs on Debian/Ubuntu Linux or WSL2 with Ubuntu, including setting up Python, pipx, and necessary dependencies for the documentation system.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/developers/testing-docs.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update && sudo apt install python3-full python-is-python3 pipx\nexport PIPX_BIN_DIR=/usr/local/bin\nexport PIPX_HOME=/usr/local/pipx\nsudo --preserve-env pipx install mkdocs --pip-args \"-r docs/mkdocs-pip-requirements\"\n```\n\n----------------------------------------\n\nTITLE: MySQL/MariaDB Server Configuration\nDESCRIPTION: Core MySQL/MariaDB configuration settings that disable caching mechanisms and handle innodb_use_native_aio compatibility issues in containerized environments. Includes commented Docker compose overrides for enabling native AIO if needed.\nSOURCE: https://github.com/ddev/ddev/blob/main/containers/ddev-dbserver/files/etc/mysql/version-conf.d/mariadb_11.cnf.txt#2025-04-19_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[mysqld]\n\nskip-host-cache\nsymbolic-links=0\nquery-cache-type               = 0\nquery-cache-size               = 0\n\n# mariadb 10.8 and higher don't seem to be able to work with innodb_use_native_aio\n# without a privileged container, which seems like too much risk\ninnodb-use-native-aio=0\n\n# These docker-compose overrides were able to make innodb-use-native-aio work\n# For innodb_use_native_aio=ON mariadb versions need this, see\n# https://github.com/MariaDB/mariadb-docker/issues/454#issuecomment-1212040735\n#privileged: true\n#ulimits:\n#  memlock:\n#    soft: \"-1\"\n#    hard: \"-1\"\n```\n\n----------------------------------------\n\nTITLE: Testing Certificate Without System-Wide Installation\nDESCRIPTION: Command to test the Squid CA certificate with curl without installing it system-wide.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/developers/network-test-environments.md#2025-04-19_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ncurl -I https://www.google.com --proxy http://squid.host-only:3128 --cacert /etc/squid/mitm.crt\n```\n\n----------------------------------------\n\nTITLE: DDEV Configuration Header\nDESCRIPTION: Marker indicating this is a DDEV-generated configuration file. The comment is used to identify files that are automatically generated by DDEV.\nSOURCE: https://github.com/ddev/ddev/blob/main/cmd/ddev/cmd/testdata/TestCmdAddonComplex/recipe/junk_windows_amd64.txt#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n#ddev-generated\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Server Settings\nDESCRIPTION: This configuration disables host caching and symbolic links in MySQL, while also setting the query cache type and size to zero. These settings help optimize MySQL performance by eliminating potentially inefficient caching mechanisms.\nSOURCE: https://github.com/ddev/ddev/blob/main/containers/ddev-dbserver/files/etc/mysql/version-conf.d/mariadb_10.cnf.txt#2025-04-19_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[mysqld]\n\nskip-host-cache\nsymbolic-links=0\nquery-cache-type               = 0\nquery-cache-size               = 0\n\n```\n\n----------------------------------------\n\nTITLE: Empty Static Configuration Example for Traefik in YAML\nDESCRIPTION: Demonstrates the format for adding custom static configuration to DDEV's Traefik setup. This example shows an empty configuration that would be appended to the main .static_config.yaml file.\nSOURCE: https://github.com/ddev/ddev/blob/main/pkg/ddevapp/global_dotddev_assets/traefik/README.md#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# there is nothing here\n```\n\n----------------------------------------\n\nTITLE: Installing Joomla with DDEV\nDESCRIPTION: Downloads and installs latest Joomla using DDEV with Apache FPM configuration and automated installation script.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/quickstart.md#2025-04-19_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nmkdir my-joomla-site && cd my-joomla-site\ncurl -o joomla.zip -L $(curl -sL https://api.github.com/repos/joomla/joomla-cms/releases/latest | docker run -i --rm ddev/ddev-utilities jq -r '.assets | map(select(.name | test(\"^Joomla.*Stable-Full_Package\\\\.zip$\")))[0].browser_download_url')\nunzip joomla.zip && rm -f joomla.zip\nddev config --project-type=php --webserver-type=apache-fpm --upload-dirs=images\nddev start\nddev php installation/joomla.php install --site-name=\"My Joomla Site\" --admin-user=\"Administrator\" --admin-username=admin --admin-password=AdminAdmin1! --admin-email=admin@example.com --db-type=mysql --db-encryption=0 --db-host=db --db-user=db --db-pass=\"db\" --db-name=db --db-prefix=ddev_ --public-folder=\"\"\nddev launch /administrator\n```\n\n----------------------------------------\n\nTITLE: Map Validation Example in Go\nDESCRIPTION: Shows how to validate maps using template-based validation rules. The example validates user data including nested address information.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-19_snippet_16\n\nLANGUAGE: go\nCODE:\n```\nvar mapTemplate = map[string]interface{}{\n\t\"name\":\"required,alpha\",\n\t\"family\":\"required,alpha\",\n\t\"email\":\"required,email\",\n\t\"cell-phone\":\"numeric\",\n\t\"address\":map[string]interface{}{\n\t\t\"line1\":\"required,alphanum\",\n\t\t\"line2\":\"alphanum\",\n\t\t\"postal-code\":\"numeric\",\n\t},\n}\n\nvar inputMap = map[string]interface{}{\n\t\"name\":\"Bob\",\n\t\"family\":\"Smith\",\n\t\"email\":\"foo@bar.baz\",\n\t\"address\":map[string]interface{}{\n\t\t\"line1\":\"\",\n\t\t\"line2\":\"\",\n\t\t\"postal-code\":\"\",\n\t},\n}\n\nresult, err := govalidator.ValidateMap(inputMap, mapTemplate)\nif err != nil {\n\tprintln(\"error: \" + err.Error())\n}\nprintln(result)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Validator in Go\nDESCRIPTION: This code demonstrates the old and new ways of adding a custom validator to GoValidator. The new method uses a Set function to prevent data races when accessing custom validators.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-19_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/asaskevich/govalidator\"\n\n// before\ngovalidator.CustomTypeTagMap[\"customByteArrayValidator\"] = func(i interface{}, o interface{}) bool {\n  // ...\n}\n\n// after\ngovalidator.CustomTypeTagMap.Set(\"customByteArrayValidator\", func(i interface{}, o interface{}) bool {\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Progress Bar for IO Operations with Reader in Go\nDESCRIPTION: Demonstrates how to use the progress bar with IO operations, specifically for reading data. It creates a proxy reader to track progress.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/cheggaaa/pb/README_V1.md#2025-04-19_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\n// create and start bar\nbar := pb.New(myDataLen).SetUnits(pb.U_BYTES)\nbar.Start()\n\n// my io.Reader\nr := myReader\n\n// my io.Writer\nw := myWriter\n\n// create proxy reader\nreader := bar.NewProxyReader(r)\n\n// and copy from pb reader\nio.Copy(w, reader)\n```\n\n----------------------------------------\n\nTITLE: Running DDEV Traefik Router Container\nDESCRIPTION: Command to run the ddev-traefik-router container in interactive mode with automatic removal after exit. The <tag> should be replaced with the desired version tag.\nSOURCE: https://github.com/ddev/ddev/blob/main/containers/ddev-traefik-router/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm ddev/ddev-traefik-router:<tag> bash\n```\n\n----------------------------------------\n\nTITLE: Running Static Analysis Check in Go\nDESCRIPTION: Command to run required static analysis tests before submitting code\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/developers/building-contributing.md#2025-04-19_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nmake staticrequired\n```\n\n----------------------------------------\n\nTITLE: Creating Lima VM for Docker in macOS\nDESCRIPTION: This command creates a Lima VM named 'lima-vz' with specific configurations for VM type, mount type, memory, CPUs, and disk space. It uses a Docker template.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/developers/buildkite-testmachine-setup.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nlimactl create --name=lima-vz --vm-type=vz --mount-type=virtiofs --mount-writable --mount=\"~/:w\" --memory=6 --cpus=4 --disk=60 template://docker\n```\n\n----------------------------------------\n\nTITLE: Setting up CiviCRM Standalone with DDEV\nDESCRIPTION: This snippet demonstrates how to set up a standalone CiviCRM installation using DDEV. It includes steps for configuring the project, downloading CiviCRM, and installing it either manually or automatically.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/quickstart.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmkdir my-civicrm-site && cd my-civicrm-site\nddev config --project-type=php --composer-root=core --upload-dirs=public/media\nddev start\nddev exec \"curl -LsS https://download.civicrm.org/latest/civicrm-STABLE-standalone.tar.gz -o /tmp/civicrm-standalone.tar.gz\"\nddev exec \"tar --strip-components=1 -xzf /tmp/civicrm-standalone.tar.gz\"\nddev composer require civicrm/cli-tools --no-scripts\n# You can now install CiviCRM manually in your browser using `ddev launch`\n# and selecting `db` for the server and `db` for database/username/password\n# or do the same automatically using the command below:\n# The parameter `-m loadGenerated=1` includes sample data\nddev exec cv core:install \\\n    --cms-base-url='$DDEV_PRIMARY_URL' \\\n    --db=mysql://db:db@db/db \\\n    -m loadGenerated=1 \\\n    -m extras.adminUser=admin \\\n    -m extras.adminPass=admin \\\n    -m extras.adminEmail=admin@example.com\nddev launch\n```\n\n----------------------------------------\n\nTITLE: Starting Colima with VZ VM Type in macOS\nDESCRIPTION: This command starts Colima with specific configurations for CPU, memory, disk space, VM type, mount type, and DNS. It's part of the additional Colima macOS setup.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/developers/buildkite-testmachine-setup.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncolima start vz --cpu 4 --memory 6 --disk 60 --vm-type=vz --mount-type=virtiofs --dns=1.1.1.1\n```\n\n----------------------------------------\n\nTITLE: DDEV Generated Gitignore Configuration\nDESCRIPTION: Generated gitignore configuration with marker indicating it was created by DDEV. Used to specify files and directories that should be ignored by version control.\nSOURCE: https://github.com/ddev/ddev/blob/main/cmd/ddev/cmd/testdata/TestCmdAddonComplex/recipe/extra/has-ddev-generated.txt#2025-04-19_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n#ddev-generated\n```\n\n----------------------------------------\n\nTITLE: Configuring Sulu Webspace XML\nDESCRIPTION: XML configuration for Sulu webspace settings. This defines the name and key for a Sulu project, which are essential for proper site functioning.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/quickstart.md#2025-04-19_snippet_36\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<webspace xmlns=\"http://schemas.sulu.io/webspace/webspace\"\n          xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n          xsi:schemaLocation=\"http://schemas.sulu.io/webspace/webspace http://schemas.sulu.io/webspace/webspace-1.1.xsd\">\n    <!-- See: http://docs.sulu.io/en/latest/book/webspaces.html how to configure your webspace-->\n\n    <name>My Sulu Site</name>\n    <key>my-sulu-site</key>\n```\n\n----------------------------------------\n\nTITLE: DDEV Webserver Type Configuration\nDESCRIPTION: YAML configuration example demonstrating how to specify the webserver type in DDEV's configuration file, allowing users to choose between Apache with PHP-FPM or Apache with CGI.\nSOURCE: https://github.com/ddev/ddev/blob/main/version-history.md#2025-04-19_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nwebserver_type: apache-fpm\n```\n\n----------------------------------------\n\nTITLE: Connecting to MySQL in Another DDEV Project\nDESCRIPTION: Example of how to connect to another project's database from within a DDEV project using the hostname format ddev-projectname-db.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/faq.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmysql -h ddev-projectb-db\n```\n\n----------------------------------------\n\nTITLE: Converting Certificate Formats\nDESCRIPTION: Command to rename exported certificate files to the .crt format expected by Docker and Linux trust configurations. Valid for PEM or CER files that are already in the correct base64-encoded X.509 format.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/networking.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmv your-cert.pem your-cert.crt\n# or\nmv your-cert.cer your-cert.crt\n```\n\n----------------------------------------\n\nTITLE: Error Handling Example in Go\nDESCRIPTION: Shows how to iterate over multiple validation errors returned by the validator.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-19_snippet_19\n\nLANGUAGE: go\nCODE:\n```\n  if err != nil {\n    errs := err.(govalidator.Errors).Errors()\n    for _, e := range errs {\n      fmt.Println(e.Error())\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Installing Squid with OpenSSL Support on Debian/Ubuntu\nDESCRIPTION: Command for installing Squid proxy server with OpenSSL support on Debian/Ubuntu systems.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/developers/network-test-environments.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install squid-openssl ssl-cert\n```\n\n----------------------------------------\n\nTITLE: Running Pre-release Steps for OpenTelemetry Go\nDESCRIPTION: Make command to create a pre-release branch containing version updates for specified module sets.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/go.opentelemetry.io/otel/RELEASING.md#2025-04-19_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmake prerelease MODSET=<module set>\n```\n\n----------------------------------------\n\nTITLE: Connecting to a Container with SSH Agent Access\nDESCRIPTION: Command to run a container with SSH agent access by mounting volumes from the SSH agent container and setting the appropriate environment variable.\nSOURCE: https://github.com/ddev/ddev/blob/main/containers/ddev-ssh-agent/README.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --volumes-from=ssh-agent -e SSH_AUTH_SOCK=/.ssh-agent/socket ubuntu:latest /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Installing Squid CA Certificate for Docker\nDESCRIPTION: Commands to make Docker trust the Squid CA certificate by placing it in Docker's certificate directory and restarting the Docker service.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/developers/network-test-environments.md#2025-04-19_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo mkdir -p /etc/docker/certs.d/\nsudo cp /etc/squid/mitm.crt /etc/docker/certs.d/\nsudo systemctl restart docker\n```\n\n----------------------------------------\n\nTITLE: Renaming Windows Computer for GitHub Agent\nDESCRIPTION: Renames the Windows computer using a standardized naming convention for test environments based on the Windows version and purpose.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/developers/github-selfhosted-setup.md#2025-04-19_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nRename-Computer <testbot-win10(home|pro)-<description>-1\n```\n\n----------------------------------------\n\nTITLE: Basic Logrus Usage Example\nDESCRIPTION: Simple example showing how to use Logrus with fields to log structured data.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  log \"github.com/sirupsen/logrus\"\n)\n\nfunc main() {\n  log.WithFields(log.Fields{\n    \"animal\": \"walrus\",\n  }).Info(\"A walrus appears\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring zsh Environment in macOS\nDESCRIPTION: This snippet shows the content to be added to /etc/zshenv to ensure that /usr/local/bin/docker is included in the PATH. This is necessary when zsh is the configured shell.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/developers/buildkite-testmachine-setup.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nPATH=$PATH:/usr/local/bin:/opt/homebrew/bin\n```\n\n----------------------------------------\n\nTITLE: Documenting DDEV Web Container Script Execution in Markdown\nDESCRIPTION: This markdown snippet explains that scripts in the current directory will be executed inside the DDEV web container. It also provides a link to documentation on environment variables available for use in these scripts.\nSOURCE: https://github.com/ddev/ddev/blob/main/pkg/ddevapp/dotddev_assets/commands/web/README.txt#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#ddev-generated\nScripts in this directory will be executed inside the web container.\n\nSee https://ddev.readthedocs.io/en/stable/users/extend/custom-commands/#environment-variables-provided for a list of environment variables that can be used in the scripts.\n```\n\n----------------------------------------\n\nTITLE: Adding SSH Keys to the Agent Container\nDESCRIPTION: Command to add private SSH keys from the host to the running SSH agent container. This mounts the local SSH directory and adds the specified key.\nSOURCE: https://github.com/ddev/ddev/blob/main/containers/ddev-ssh-agent/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm --volumes-from=ssh-agent -v ~/.ssh:/.ssh -it nardeas/ssh-agent ssh-add /root/.ssh/id_rsa\n```\n\n----------------------------------------\n\nTITLE: Slice Mapping Operation\nDESCRIPTION: Demonstrates transforming slice elements using the Map function.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-19_snippet_12\n\nLANGUAGE: go\nCODE:\n```\ndata := []interface{}{1, 2, 3, 4, 5}\nvar fn govalidator.ResultIterator = func(value interface{}, index int) interface{} {\n\treturn value.(int) * 3\n}\n_ = govalidator.Map(data, fn) // result = []interface{}{1, 6, 9, 12, 15}\n```\n\n----------------------------------------\n\nTITLE: Detecting and Removing BOM in Go using utfbom package\nDESCRIPTION: This example demonstrates how to use the utfbom package to skip BOMs and detect encodings. It processes input data with and without a BOM, showing the results of both operations.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/dimchansky/utfbom/README.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\n\t\"github.com/dimchansky/utfbom\"\n)\n\nfunc main() {\n\ttrySkip([]byte(\"\\xEF\\xBB\\xBFhello\"))\n\ttrySkip([]byte(\"hello\"))\n}\n\nfunc trySkip(byteData []byte) {\n\tfmt.Println(\"Input:\", byteData)\n\n\t// just skip BOM\n\toutput, err := ioutil.ReadAll(utfbom.SkipOnly(bytes.NewReader(byteData)))\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\tfmt.Println(\"ReadAll with BOM skipping\", output)\n\n\t// skip BOM and detect encoding\n\tsr, enc := utfbom.Skip(bytes.NewReader(byteData))\n\tfmt.Printf(\"Detected encoding: %s\\n\", enc)\n\toutput, err = ioutil.ReadAll(sr)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\tfmt.Println(\"ReadAll with BOM detection and skipping\", output)\n\tfmt.Println()\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Release Tags in OpenTelemetry Go\nDESCRIPTION: Make command to add release tags for specified module sets using a commit hash.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/go.opentelemetry.io/otel/RELEASING.md#2025-04-19_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nmake add-tags MODSET=<module set> COMMIT=<commit hash>\n```\n\n----------------------------------------\n\nTITLE: Sulu Production Build Command\nDESCRIPTION: Alternative command for building Sulu database without creating an admin user. This is suitable for production environments where you'll create admin users separately.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/quickstart.md#2025-04-19_snippet_39\n\nLANGUAGE: bash\nCODE:\n```\nddev execute bin/adminconsole sulu:build prod\n```\n\n----------------------------------------\n\nTITLE: Converting Certificate File Formats\nDESCRIPTION: Commands to rename certificate files from .pem or .cer extensions to .crt format.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/developers/network-test-environments.md#2025-04-19_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nmv my-cert.pem my-cert.crt\nmv my-cert.cer my-cert.crt\n```\n\n----------------------------------------\n\nTITLE: Running SSH Agent Container\nDESCRIPTION: Command to run the SSH agent container as a daemon with a specific name that will hold SSH keys.\nSOURCE: https://github.com/ddev/ddev/blob/main/containers/ddev-ssh-agent/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --name=ssh-agent nardeas/ssh-agent\n```\n\n----------------------------------------\n\nTITLE: Specifying Primary Database During Pull Operation\nDESCRIPTION: This bash command specifies which Platform.sh database should be used as DDEV's primary 'db' database during a pull operation using the environment flag.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/providers/platform.md#2025-04-19_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nddev pull platform --environment=\"PLATFORM_PRIMARY_RELATIONSHIP=main\"\n```\n\n----------------------------------------\n\nTITLE: Validating Semantic Versions Against Constraints in Go\nDESCRIPTION: Demonstrates how to validate a semantic version against a constraint using the semver package. The example shows constraint creation, version parsing, and validation that returns detailed error messages for validation failures.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/Masterminds/semver/v3/README.md#2025-04-19_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nc, err := semver.NewConstraint(\"<= 1.2.3, >= 1.4\")\nif err != nil {\n    // Handle constraint not being parseable.\n}\n\nv, err := semver.NewVersion(\"1.3\")\nif err != nil {\n    // Handle version not being parseable.\n}\n\n// Validate a version against a constraint.\na, msgs := c.Validate(v)\n// a is false\nfor _, m := range msgs {\n    fmt.Println(m)\n\n    // Loops over the errors which would read\n    // \"1.3 is greater than 1.2.3\"\n    // \"1.3 is less than 1.4\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Go Error Handling Pattern\nDESCRIPTION: Demonstrates the traditional error handling idiom in Go using nil checking.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/pkg/errors/README.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nif err != nil {\n        return err\n}\n```\n\n----------------------------------------\n\nTITLE: Installing XLSWRITER PHP Extension via PECL in DDEV\nDESCRIPTION: Dockerfile example for adding the xlswriter PHP extension via PECL when it's not available through standard package management.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/extend/customizing-images.md#2025-04-19_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\nENV extension=xlswriter\nSHELL [\"/bin/bash\", \"-c\"]\n# Install the needed development packages\nRUN (apt-get update || true) && DEBIAN_FRONTEND=noninteractive apt-get install -y -o Dpkg::Options::=\"--force-confnew\" --no-install-recommends --no-install-suggests build-essential php-pear php${DDEV_PHP_VERSION}-dev\n# xlswriter requires libz-dev\nRUN sudo apt-get install -y libz-dev\nRUN echo | pecl install ${extension}\nRUN echo \"extension=${extension}.so\" > /etc/php/${DDEV_PHP_VERSION}/mods-available/${extension}.ini && chmod 666 /etc/php/${DDEV_PHP_VERSION}/mods-available/${extension}.ini\nRUN phpenmod ${extension}\n```\n\n----------------------------------------\n\nTITLE: Installing Sulu CMS with DDEV\nDESCRIPTION: Commands to create a new Sulu CMS project using Composer and configure DDEV with appropriate settings. This sets up a basic Sulu installation with PHP 8.0 and MySQL 8.0.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/quickstart.md#2025-04-19_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\nmkdir my-sulu-site && cd my-sulu-site\nddev config --project-type=php --docroot=public --upload-dirs=uploads --database=mysql:8.0\nddev start\nddev composer create sulu/skeleton\n```\n\n----------------------------------------\n\nTITLE: Slice Filtering and Counting\nDESCRIPTION: Shows how to filter and count slice elements using Filter and Count functions.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-19_snippet_13\n\nLANGUAGE: go\nCODE:\n```\ndata := []interface{}{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\nvar fn govalidator.ConditionIterator = func(value interface{}, index int) bool {\n\treturn value.(int)%2 == 0\n}\n_ = govalidator.Filter(data, fn) // result = []interface{}{2, 4, 6, 8, 10}\n_ = govalidator.Count(data, fn) // result = 5\n```\n\n----------------------------------------\n\nTITLE: Structured Field Logging\nDESCRIPTION: Demonstrates the recommended approach of using structured fields for better log discoverability and parsing.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-19_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nlog.WithFields(log.Fields{\n  \"event\": event,\n  \"topic\": topic,\n  \"key\": key,\n}).Fatal(\"Failed to send event\")\n```\n\n----------------------------------------\n\nTITLE: Importing Cobra in Go Application\nDESCRIPTION: Go import statement to include Cobra library in your application.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/spf13/cobra/README.md#2025-04-19_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/spf13/cobra\"\n```\n\n----------------------------------------\n\nTITLE: Running Go Tests\nDESCRIPTION: Command to run Go tests without external testing frameworks\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/developers/building-contributing.md#2025-04-19_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\ngo test\n```\n\n----------------------------------------\n\nTITLE: Running the DDEV Nginx Proxy Router Container in Bash\nDESCRIPTION: Command for running the ddev-nginx-proxy-router container interactively. This allows direct access to the container's shell for debugging or custom configurations.\nSOURCE: https://github.com/ddev/ddev/blob/main/containers/ddev-nginx-proxy-router/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm ddev/ddev-nginx-proxy-router:<tag> bash\n```\n\n----------------------------------------\n\nTITLE: Removing All SSH Keys from the Agent\nDESCRIPTION: Command to delete all SSH keys currently stored in the SSH agent container, useful for security or troubleshooting purposes.\nSOURCE: https://github.com/ddev/ddev/blob/main/containers/ddev-ssh-agent/README.md#2025-04-19_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm --volumes-from=ssh-agent -it docker-ssh-agent:latest ssh-add -D\n```\n\n----------------------------------------\n\nTITLE: Setting HTTPS_PROXY Environment Variable\nDESCRIPTION: Exports the HTTPS_PROXY environment variable to route HTTPS traffic through the Squid proxy.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/developers/network-test-environments.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nexport HTTPS_PROXY=http://squid.host-only:3128\n```\n\n----------------------------------------\n\nTITLE: Adding Single IP and Host Combination to Hosts File in Go\nDESCRIPTION: This snippet demonstrates how to add a single IP and host combination to the hosts file using the Add method of the Hosts object.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/goodhosts/hostsfile/README.md#2025-04-19_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nerr := hosts.Add(\"192.168.1.1\", \"my-hostname\")\n```\n\n----------------------------------------\n\nTITLE: Installing ExpressionEngine via ZIP with DDEV\nDESCRIPTION: Downloads and installs ExpressionEngine using ZIP file with DDEV configuration. Sets up MySQL 8.0 database.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/quickstart.md#2025-04-19_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nmkdir my-ee-site && cd my-ee-site\ncurl -o ee.zip -L $(curl -sL https://api.github.com/repos/ExpressionEngine/ExpressionEngine/releases/latest | docker run -i --rm ddev/ddev-utilities jq -r '.assets | map(select(.name | test(\"^ExpressionEngine.*\\\\.zip$\")))[0].browser_download_url')\nunzip ee.zip && rm -f ee.zip\nddev config --database=mysql:8.0\nddev start\nddev launch /admin.php\n```\n\n----------------------------------------\n\nTITLE: Importing GoValidator Package in Go\nDESCRIPTION: This snippet demonstrates how to import the GoValidator package in a Go file. It shows two methods: importing with the full package name and using an alias for shorter reference.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-19_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/asaskevich/govalidator\"\n```\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  valid \"github.com/asaskevich/govalidator\"\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Directory Copy Example in Go\nDESCRIPTION: Demonstrates the basic usage of the copy package to recursively copy a directory from source to destination.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/otiai10/copy/README.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\tcp \"github.com/otiai10/copy\"\n)\n\nfunc main() {\n\terr := cp.Copy(\"your/src\", \"your/dest\")\n\tfmt.Println(err) // nil\n}\n```\n\n----------------------------------------\n\nTITLE: Direct Git Clone of OpenTelemetry Go\nDESCRIPTION: Alternative direct git clone command for setting up the repository.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-19_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/open-telemetry/opentelemetry-go\n```\n\n----------------------------------------\n\nTITLE: Bypassing macOS Security for Unsigned DDEV Binaries\nDESCRIPTION: Removes the quarantine attribute from downloaded DDEV binaries on macOS to allow execution of unsigned PR builds.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/developers/building-contributing.md#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nxattr -r -d com.apple.quarantine ~/bin/ddev\n```\n\n----------------------------------------\n\nTITLE: Viewing Symfony Message Worker Logs\nDESCRIPTION: Command to view logs from Symfony message workers after enabling them in the DDEV config. This helps monitor messenger:consume command execution.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/quickstart.md#2025-04-19_snippet_44\n\nLANGUAGE: bash\nCODE:\n```\nddev exec symfony server:log\n```\n\n----------------------------------------\n\nTITLE: Generating PhpStorm Metadata\nDESCRIPTION: Command to generate PhpStorm metadata for installed Magento extensions using N98-magerun tool.\nSOURCE: https://github.com/ddev/ddev/blob/main/pkg/ddevapp/testdata/TestDetectAppType/magento/README.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nn98-magerun dev:ide:phpstorm:meta\n```\n\n----------------------------------------\n\nTITLE: Viewing Filtered Squid Access Logs\nDESCRIPTION: Command to monitor Squid access logs and filter for Docker-related entries.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/developers/network-test-environments.md#2025-04-19_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsudo tail -f /var/log/squid/access.log | grep docker\n```\n\n----------------------------------------\n\nTITLE: Detecting Terminal Type using go-isatty in Go\nDESCRIPTION: This snippet demonstrates how to use the go-isatty library to detect if the standard output is connected to a terminal, Cygwin/MSYS2 terminal, or neither. It imports the necessary packages and uses IsTerminal and IsCygwinTerminal functions to determine the terminal type.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/mattn/go-isatty/README.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/mattn/go-isatty\"\n\t\"os\"\n)\n\nfunc main() {\n\tif isatty.IsTerminal(os.Stdout.Fd()) {\n\t\tfmt.Println(\"Is Terminal\")\n\t} else if isatty.IsCygwinTerminal(os.Stdout.Fd()) {\n\t\tfmt.Println(\"Is Cygwin/MSYS2 Terminal\")\n\t} else {\n\t\tfmt.Println(\"Is Not Terminal\")\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Single IP and Host Combination from Hosts File in Go\nDESCRIPTION: This snippet demonstrates how to remove a single IP and host combination from the hosts file using the Remove method of the Hosts object.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/goodhosts/hostsfile/README.md#2025-04-19_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nerr := hosts.Remove(\"192.168.1.1\", \"my-hostname\")\n```\n\n----------------------------------------\n\nTITLE: Database Migration Command\nDESCRIPTION: Command to migrate MySQL/MariaDB database to different version\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/commands.md#2025-04-19_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nddev debug migrate-database mariadb:10.7\n```\n\n----------------------------------------\n\nTITLE: Opening TablePlus Database Manager in DDEV\nDESCRIPTION: Example of using the ddev tableplus command to open TablePlus with the current project's database. This command is only available if TablePlus.app is installed in the Applications directory.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/commands.md#2025-04-19_snippet_41\n\nLANGUAGE: shell\nCODE:\n```\n# Open the current project's database in TablePlus\nddev tableplus\n```\n\n----------------------------------------\n\nTITLE: Basic Progress Bar Implementation\nDESCRIPTION: Demonstrates basic usage of the progress bar including initialization, increment, and completion\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/cheggaaa/pb/README.md#2025-04-19_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"time\"\n\t\n\t\"github.com/cheggaaa/pb/v3\"\n)\n\nfunc main() {\n\tcount := 100000\n\t// create and start new bar\n\tbar := pb.StartNew(count)\n\t\n\t// start bar from 'default' template\n\t// bar := pb.Default.Start(count)\n\t\n\t// start bar from 'simple' template\n\t// bar := pb.Simple.Start(count)\n\t\n\t// start bar from 'full' template\n\t// bar := pb.Full.Start(count)\n\t\n\tfor i := 0; i < count; i++ {\n\t\tbar.Increment()\n\t\ttime.Sleep(time.Millisecond)\n\t}\n\tbar.Finish()\n}\n```\n\n----------------------------------------\n\nTITLE: Setting PowerShell Execution Policy for GitHub Agent Setup\nDESCRIPTION: Sets the PowerShell execution policy to RemoteSigned for the current user, allowing the execution of local scripts while requiring downloaded scripts to be signed by a trusted publisher.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/developers/github-selfhosted-setup.md#2025-04-19_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-ExecutionPolicy -Scope \"CurrentUser\" -ExecutionPolicy \"RemoteSigned\"\n```\n\n----------------------------------------\n\nTITLE: Viewing Git Commit History for Release Notes\nDESCRIPTION: Git command to view commits between the last tag and HEAD for changelog verification.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/go.opentelemetry.io/otel/RELEASING.md#2025-04-19_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngit --no-pager log --pretty=oneline \"<last tag>..HEAD\"\n```\n\n----------------------------------------\n\nTITLE: Pulling Updated Amplitude Definitions\nDESCRIPTION: Updates the local implementation with the latest event definitions from the Amplitude platform.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/developers/building-contributing.md#2025-04-19_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nampli pull\n```\n\n----------------------------------------\n\nTITLE: Activating Default Field Validation in Go\nDESCRIPTION: This code snippet shows how to activate the behavior that requires all fields to have a validation tag by default. It demonstrates setting this option in an init function.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-19_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/asaskevich/govalidator\"\n\nfunc init() {\n  govalidator.SetFieldsRequiredByDefault(true)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting BATS Library Path for Testing\nDESCRIPTION: This snippet shows how to set the BATS_LIB_PATH environment variable when installing BATS libraries manually for running automated tests.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/developers/quickstart-maintenance.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport BATS_LIB_PATH=/path/to/bats\n```\n\n----------------------------------------\n\nTITLE: Pushing a Custom DDEV Docker Image to a Different Repository\nDESCRIPTION: Pushes a custom DDEV Docker image to a specified repository with a custom tag for testing Docker image changes.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/developers/building-contributing.md#2025-04-19_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncd containers/ddev-webserver\nmake push VERSION=<tag> DOCKER_REPO=your/dockerrepo\n```\n\n----------------------------------------\n\nTITLE: Using go-homedir to Get User's Home Directory in Go\nDESCRIPTION: Demonstrates how to use the go-homedir library to retrieve the user's home directory. The Dir() function returns the home directory path as a string.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/mitchellh/go-homedir/README.md#2025-04-19_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nhomedir.Dir()\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose Volume for Custom Container Commands\nDESCRIPTION: YAML configuration for mounting the ddev-global-cache volume in custom service containers to enable command execution.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/extend/custom-commands.md#2025-04-19_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n    volumes:\n      - ddev-global-cache:/mnt/ddev-global-cache\n```\n\n----------------------------------------\n\nTITLE: Custom Progress Bar Template\nDESCRIPTION: Example of creating a custom progress bar template with colored output and custom elements\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/cheggaaa/pb/README.md#2025-04-19_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntmpl := `{{ red \"With funcs:\" }} {{ bar . \"<\" \"-\" (cycle . \"↖\" \"↗\" \"↘\" \"↙\" ) \".\" \">\"}} {{speed . | rndcolor }} {{percent .}} {{string . \"my_green_string\" | green}} {{string . \"my_blue_string\" | blue}}`\n// start bar based on our template\nbar := pb.ProgressBarTemplate(tmpl).Start64(limit)\n// set values for string elements\nbar.Set(\"my_green_string\", \"green\").\n\tSet(\"my_blue_string\", \"blue\")\n```\n\n----------------------------------------\n\nTITLE: Installing pb Library in Go\nDESCRIPTION: Command to install the 'pb' library using Go's package manager.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/cheggaaa/pb/README_V1.md#2025-04-19_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngo get github.com/cheggaaa/pb\n```\n\n----------------------------------------\n\nTITLE: Switching to Main Branch in Amplitude\nDESCRIPTION: Checks out the main branch in Amplitude to ensure the implementation is synced with the production definitions.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/developers/building-contributing.md#2025-04-19_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nampli checkout main\n```\n\n----------------------------------------\n\nTITLE: Calculating Monospace String Width in Go\nDESCRIPTION: Demonstrates how to calculate the display width of a string containing Unicode characters in a monospace font context\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/rivo/uniseg/README.md#2025-04-19_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nwidth := uniseg.StringWidth(\"🇩🇪🏳️‍🌈!\")\nfmt.Println(width)\n// 5\n```\n\n----------------------------------------\n\nTITLE: Custom Error Messages in Go\nDESCRIPTION: Demonstrates how to specify custom error messages in struct validation tags using the tilde separator.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-19_snippet_20\n\nLANGUAGE: go\nCODE:\n```\ntype Ticket struct {\n  Id        int64     `json:\"id\"`\n  FirstName string    `json:\"firstname\" valid:\"required~First name is blank\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Windows Machine ID Retrieval\nDESCRIPTION: Command to retrieve MachineGuid from Windows registry\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/denisbrodbeck/machineid/README.md#2025-04-19_snippet_7\n\nLANGUAGE: batch\nCODE:\n```\nreg query HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography /v MachineGuid\n```\n\n----------------------------------------\n\nTITLE: Basic GoDotEnv Usage in Go\nDESCRIPTION: Example of loading and accessing environment variables in a Go application using GoDotEnv.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/joho/godotenv/README.md#2025-04-19_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"log\"\n    \"os\"\n\n    \"github.com/joho/godotenv\"\n)\n\nfunc main() {\n  err := godotenv.Load()\n  if err != nil {\n    log.Fatal(\"Error loading .env file\")\n  }\n\n  s3Bucket := os.Getenv(\"S3_BUCKET\")\n  secretKey := os.Getenv(\"SECRET_KEY\")\n\n  // now do something with s3 or whatever\n}\n```\n\n----------------------------------------\n\nTITLE: Type Checking with IsType\nDESCRIPTION: Shows various ways to check variable types using the IsType function, including pointer types.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-19_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nprintln(govalidator.IsType(\"Bob\", \"string\"))\nprintln(govalidator.IsType(1, \"int\"))\ni := 1\nprintln(govalidator.IsType(&i, \"*int\"))\n```\n\n----------------------------------------\n\nTITLE: Checking Version Constraints in Go\nDESCRIPTION: Illustrates how to create a version constraint and check if a version meets that constraint. This example creates a constraint of '>= 1.2.3' and checks if version '1.3' satisfies it.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/Masterminds/semver/v3/README.md#2025-04-19_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nc, err := semver.NewConstraint(\">= 1.2.3\")\nif err != nil {\n    // Handle constraint not being parsable.\n}\n\nv, err := semver.NewVersion(\"1.3\")\nif err != nil {\n    // Handle version not being parsable.\n}\n// Check if the version meets the constraints. The variable a will be true.\na := c.Check(v)\n```\n\n----------------------------------------\n\nTITLE: Debugging DDEV Capabilities in Shell\nDESCRIPTION: These commands show how to list the capabilities of the current DDEV project or a specific project named 'my-project'.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/commands.md#2025-04-19_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n# List capabilities of the current project\nddev debug capabilities\n\n# List capabilities of `my-project`\nddev debug capabilities my-project\n```\n\n----------------------------------------\n\nTITLE: Example Production Configuration Override\nDESCRIPTION: Sample YAML configuration for a production environment override file (.ddev/config.prod.yaml) that sets project TLD, additional hostnames, and timezone.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/topics/hosting.md#2025-04-19_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nproject_tld: com\nadditional_hostnames:\n    - hobobiker\n    - www.hobobiker\ntimezone: America/Denver\n```\n\n----------------------------------------\n\nTITLE: Installing machineid Library\nDESCRIPTION: Commands to install the machineid library and CLI tool using go get\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/denisbrodbeck/machineid/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/denisbrodbeck/machineid\ngo get github.com/denisbrodbeck/machineid/cmd/machineid\n```\n\n----------------------------------------\n\nTITLE: Checking Windows Process Invocation Method in Go\nDESCRIPTION: This code snippet shows the single function interface exposed by the mousetrap library. The StartedByExplorer() function returns a boolean indicating whether the process was started by double-clicking in Windows Explorer.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/inconshreveable/mousetrap/README.md#2025-04-19_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nfunc StartedByExplorer() (bool)\n```\n\n----------------------------------------\n\nTITLE: Logging Pattern Example - Format String in Structured Logging\nDESCRIPTION: Example showing how to handle cases where format strings are absolutely necessary within structured logging, using fmt.Sprintf within a key-value pair.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/go-logr/logr/README.md#2025-04-19_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// Old printf style:\nlog.Printf(\"unable to reflect over type %T\")\n\n// New structured logging style:\nlogger.Info(\"unable to reflect over type\", \"type\", fmt.Sprintf(\"%T\"))\n```\n\n----------------------------------------\n\nTITLE: Markdown Table Rendering in Golang\nDESCRIPTION: Demonstrates rendering table data in Markdown format with proper column alignment indicators.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/jedib0t/go-pretty/v6/table/README.md#2025-04-19_snippet_10\n\nLANGUAGE: golang\nCODE:\n```\n    t.RenderMarkdown()\n```\n\n----------------------------------------\n\nTITLE: Basic Flag Import in Go\nDESCRIPTION: Shows how to import pflag as a drop-in replacement for Go's native flag package.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport flag \"github.com/spf13/pflag\"\n```\n\n----------------------------------------\n\nTITLE: Manually Updating Chocolatey Packages for DDEV\nDESCRIPTION: Steps to manually update the Chocolatey package for DDEV when the automated release process fails. Involves setting up the environment, modifying checksums, and pushing the package to Chocolatey.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/developers/release-management.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd /workspace/ddev\ngit checkout <tag>\nsudo apt-get update && sudo apt-get install -y nsis\nsudo .ci-scripts/nsis_setup.sh /usr/share/nsis\n```\n\n----------------------------------------\n\nTITLE: Flag Deprecation in Go\nDESCRIPTION: Shows how to mark flags or their shorthands as deprecated.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-19_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nflags.MarkDeprecated(\"badflag\", \"please use --good-flag instead\")\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of pb Progress Bar in Go\nDESCRIPTION: Demonstrates how to create and use a simple progress bar in a Go program. It initializes a bar, increments it in a loop, and finishes with a message.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/cheggaaa/pb/README_V1.md#2025-04-19_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"github.com/cheggaaa/pb\"\n\t\"time\"\n)\n\nfunc main() {\n\tcount := 100000\n\tbar := pb.StartNew(count)\n\tfor i := 0; i < count; i++ {\n\t\tbar.Increment()\n\t\ttime.Sleep(time.Millisecond)\n\t}\n\tbar.FinishPrint(\"The End!\")\n}\n```\n\n----------------------------------------\n\nTITLE: DDEV Add-on Usage with GitHub Token\nDESCRIPTION: Shows how to use DDEV add-on commands with GitHub authentication token for API access.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/commands.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport DDEV_GITHUB_TOKEN=<your github token>\nddev add-on list --all\n```\n\n----------------------------------------\n\nTITLE: BSD Machine ID Retrieval\nDESCRIPTION: Commands to retrieve machine ID on BSD systems using hostid or smbios.system.uuid\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/denisbrodbeck/machineid/README.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncat /etc/hostid\n# or (might be empty)\nkenv -q smbios.system.uuid\n```\n\n----------------------------------------\n\nTITLE: Installing GoValidator Package in Go\nDESCRIPTION: This snippet shows how to install the GoValidator package using the go get command. It includes options for getting the latest version or a specific release using gopkg.in.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/asaskevich/govalidator\n```\n\nLANGUAGE: bash\nCODE:\n```\ngo get gopkg.in/asaskevich/govalidator.v10\n```\n\n----------------------------------------\n\nTITLE: Disabling thread-safety locking in Logger\nDESCRIPTION: A code snippet showing how to disable the default mutex protection for concurrent writes in a Logger instance. This should only be used when you are certain that locking is not needed.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-19_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nlogger.SetNoLock()\n```\n\n----------------------------------------\n\nTITLE: CSV Table Rendering in Golang\nDESCRIPTION: Demonstrates rendering table data in CSV format with proper escaping of special characters.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/jedib0t/go-pretty/v6/table/README.md#2025-04-19_snippet_8\n\nLANGUAGE: golang\nCODE:\n```\n    t.RenderCSV()\n```\n\n----------------------------------------\n\nTITLE: Installing Mergo in Go\nDESCRIPTION: Shows how to install Mergo using go get and import it in Go code.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/dario.cat/mergo/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get dario.cat/mergo\n```\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"dario.cat/mergo\"\n)\n```\n\n----------------------------------------\n\nTITLE: Downloading Windows BuildKite Start Script\nDESCRIPTION: Downloads the windows_buildkite_start.ps1 script using curl in PowerShell. This script is used as part of the GitHub self-hosted agent setup process.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/developers/github-selfhosted-setup.md#2025-04-19_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\ncurl <url> -O windows_buildkite_start.ps1\n```\n\n----------------------------------------\n\nTITLE: Hidden Flags in Go\nDESCRIPTION: Demonstrates how to hide flags from help text while maintaining functionality.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-19_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nflags.MarkHidden(\"secretFlag\")\n```\n\n----------------------------------------\n\nTITLE: Converting Values to Integer with ToInt in Go\nDESCRIPTION: Examples of using cast.ToInt() to convert various data types to integer values. Shows conversion of integers, floats, strings, booleans, interfaces, and nil values.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/spf13/cast/README.md#2025-04-19_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ncast.ToInt(8)                  // 8\ncast.ToInt(8.31)               // 8\ncast.ToInt(\"8\")                // 8\ncast.ToInt(true)               // 1\ncast.ToInt(false)              // 0\n\nvar eight interface{} = 8\ncast.ToInt(eight)              // 8\ncast.ToInt(nil)                // 0\n```\n\n----------------------------------------\n\nTITLE: Template Dictionary Creation Example\nDESCRIPTION: Example showing how to create a dictionary inside a template using the dict function, introduced in v2.0.0.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/Masterminds/sprig/v3/CHANGELOG.md#2025-04-19_snippet_14\n\nLANGUAGE: go\nCODE:\n```\n{{$d := dict \"key1\" \"val1\" \"key2\" \"val2\"}}\n```\n\n----------------------------------------\n\nTITLE: Setting Additional Hostnames via DDEV CLI Command\nDESCRIPTION: Command line approach to configure additional hostnames using the ddev config command. Achieves the same result as the YAML configuration.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/extend/additional-hostnames.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nddev config --additional-hostnames extraname,fr.mysite,es.mysite,it.mysite,*.lotsofnames\n```\n\n----------------------------------------\n\nTITLE: Running DDEV Database Server Container in Docker\nDESCRIPTION: Command to run the ddev-dbserver container directly using Docker. This allows you to interact with the database server container in isolation, with a bash shell as the entry point. The command specifies the appropriate Docker image based on database type and version.\nSOURCE: https://github.com/ddev/ddev/blob/main/containers/ddev-dbserver/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm --entrypoint=bash ddev/ddev-db-server-<mariadb|mysql>-<version>:<tag>\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Hosts for Single IP to Hosts File in Go\nDESCRIPTION: This snippet shows how to add multiple hosts for a single IP address to the hosts file using the variadic Add method of the Hosts object.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/goodhosts/hostsfile/README.md#2025-04-19_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nerr := hosts.Add(\"192.168.1.1\", \"my-hostname\", \"another-hostname\")\n```\n\n----------------------------------------\n\nTITLE: Installing Squid CA Certificate on Linux\nDESCRIPTION: Commands to install the Squid CA certificate system-wide on Linux systems.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/developers/network-test-environments.md#2025-04-19_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nsudo cp mitm.crt /usr/local/share/ca-certificates/\nsudo update-ca-certificates\n```\n\n----------------------------------------\n\nTITLE: Default Fields Configuration\nDESCRIPTION: Shows how to set up default fields that will be included in all log entries for a given context.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-19_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nrequestLogger := log.WithFields(log.Fields{\"request_id\": request_id, \"user_ip\": user_ip})\nrequestLogger.Info(\"something happened on that request\") # will log request_id and user_ip\nrequestLogger.Warn(\"something not great happened\")\n```\n\n----------------------------------------\n\nTITLE: Testing with Logrus in Go\nDESCRIPTION: Demonstrates how to use Logrus's built-in testing facilities with the test hook for asserting log messages.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-19_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nimport(\n  \"github.com/sirupsen/logrus\"\n  \"github.com/sirupsen/logrus/hooks/test\"\n  \"github.com/stretchr/testify/assert\"\n  \"testing\"\n)\n\nfunc TestSomething(t*testing.T){\n  logger, hook := test.NewNullLogger()\n  logger.Error(\"Helloerror\")\n\n  assert.Equal(t, 1, len(hook.Entries))\n  assert.Equal(t, logrus.ErrorLevel, hook.LastEntry().Level)\n  assert.Equal(t, \"Helloerror\", hook.LastEntry().Message)\n\n  hook.Reset()\n  assert.Nil(t, hook.LastEntry())\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Uniseg Package with Go\nDESCRIPTION: Command to install the uniseg package using go get\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/rivo/uniseg/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/rivo/uniseg\n```\n\n----------------------------------------\n\nTITLE: Windows Chocolatey Installation Command\nDESCRIPTION: Command to install DDEV and its dependencies using the Chocolatey package manager on Windows.\nSOURCE: https://github.com/ddev/ddev/blob/main/version-history.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nchoco install -y git mysql-cli golang make docker-desktop nssm GoogleChrome zip jq composer cmder netcat ddev\n```\n\n----------------------------------------\n\nTITLE: Go Flag Integration in Go\nDESCRIPTION: Demonstrates how to add Go's standard flag package flags to pflag.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-19_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\tgoflag \"flag\"\n\tflag \"github.com/spf13/pflag\"\n)\n\nvar ip *int = flag.Int(\"flagname\", 1234, \"help message for flagname\")\n\nfunc main() {\n\tflag.CommandLine.AddGoFlagSet(goflag.CommandLine)\n\tflag.Parse()\n}\n```\n\n----------------------------------------\n\nTITLE: Flushing Changes to Hosts File in Go\nDESCRIPTION: This snippet demonstrates how to save the changes made to the Hosts object back to the disk using the Flush method.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/goodhosts/hostsfile/README.md#2025-04-19_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nerr := hosts.Flush()\n```\n\n----------------------------------------\n\nTITLE: Using Heredoc Package in Go\nDESCRIPTION: This example demonstrates how to use the heredoc package to create a here-document while preserving indentation. It uses the Doc function to process a multi-line string.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/MakeNowJust/heredoc/v2/README.md#2025-04-19_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/MakeNowJust/heredoc/v2\"\n)\n\nfunc main() {\n\tfmt.Println(heredoc.Doc(`\n\t\tLorem ipsum dolor sit amet, consectetur adipisicing elit,\n\t\tsed do eiusmod tempor incididunt ut labore et dolore magna\n\t\taliqua. Ut enim ad minim veniam, ...\n\t`))\n\t// Output:\n\t// Lorem ipsum dolor sit amet, consectetur adipisicing elit,\n\t// sed do eiusmod tempor incididunt ut labore et dolore magna\n\t// aliqua. Ut enim ad minim veniam, ...\n\t//\n}\n```\n\n----------------------------------------\n\nTITLE: Adding ~/bin to PATH for Custom DDEV Installation\nDESCRIPTION: Creates a bin directory in the home folder and adds it to the PATH environment variable to allow custom DDEV executable placement and testing.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/developers/building-contributing.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir ~/bin\necho 'export PATH=\"$HOME/bin:$PATH\"' >>~/.bashrc\nsource ~/.bashrc\n# Verify that `$HOME/bin` is the first entry in your `$PATH`\necho $PATH\n```\n\n----------------------------------------\n\nTITLE: Installing copystructure Go Library\nDESCRIPTION: This snippet shows how to install the copystructure library using the standard go get command.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/mitchellh/copystructure/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ go get github.com/mitchellh/copystructure\n```\n\n----------------------------------------\n\nTITLE: Adding bcrypt Hashing Function in Go\nDESCRIPTION: Added a new bcrypt function for password hashing using the bcrypt algorithm.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/Masterminds/sprig/v3/CHANGELOG.md#2025-04-19_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n- #242: Added a bcrypt function\n```\n\n----------------------------------------\n\nTITLE: Running golangci-lint from Command Line\nDESCRIPTION: Shell command to run golangci-lint on all packages in the repository. It includes an option to show all lint errors by adjusting max issues settings.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/Microsoft/go-winio/README.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# use . or specify a path to only lint a package\n# to show all lint errors, use flags \"--max-issues-per-linter=0 --max-same-issues=0\"\n> golangci-lint run ./...\n```\n\n----------------------------------------\n\nTITLE: Listing All Docker Containers Using Go Client\nDESCRIPTION: This snippet demonstrates how to use the Docker Engine API Go client to list all containers, equivalent to the 'docker ps --all' command. It initializes the API client, retrieves the container list, and prints basic information for each container.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/docker/docker/client/README.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/docker/docker/api/types/container\"\n\t\"github.com/docker/docker/client\"\n)\n\nfunc main() {\n\tapiClient, err := client.NewClientWithOpts(client.FromEnv)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer apiClient.Close()\n\n\tcontainers, err := apiClient.ContainerList(context.Background(), container.ListOptions{All: true})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfor _, ctr := range containers {\n\t\tfmt.Printf(\"%s %s (status: %s)\\n\", ctr.ID, ctr.Image, ctr.Status)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Slice Iteration with Each Function\nDESCRIPTION: Shows how to iterate over a slice using the Each function with a custom iterator.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-19_snippet_11\n\nLANGUAGE: go\nCODE:\n```\ndata := []interface{}{1, 2, 3, 4, 5}\nvar fn govalidator.Iterator = func(value interface{}, index int) {\n\tprintln(value.(int))\n}\ngovalidator.Each(data, fn)\n```\n\n----------------------------------------\n\nTITLE: Implementing Functional Options in Go\nDESCRIPTION: Demonstrates implementation of functional configuration options using closures.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-19_snippet_11\n\nLANGUAGE: go\nCODE:\n```\ntype optionFunc func(config) config\n\nfunc (fn optionFunc) apply(c config) config {\n\treturn fn(c)\n}\n\n// WithMyType sets t as MyType.\nfunc WithMyType(t MyType) Option {\n\treturn optionFunc(func(c config) config {\n\t\tc.MyType = t\n        return c\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: DDEV Certificate Installation Command\nDESCRIPTION: Command to install HTTPS certificates for DDEV sites using mkcert.\nSOURCE: https://github.com/ddev/ddev/blob/main/version-history.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmkcert -install\n```\n\n----------------------------------------\n\nTITLE: Example JSON for Mapstructure Usage\nDESCRIPTION: This JSON snippet demonstrates a scenario where mapstructure would be useful. It contains a 'type' field that determines the structure of the data, which is not known until runtime.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/mitchellh/mapstructure/README.md#2025-04-19_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"person\",\n  \"name\": \"Mitchell\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Logrus Hooks in Go\nDESCRIPTION: Demonstrates how to set up Logrus hooks for Airbrake error reporting and syslog integration. Shows initialization of multiple logging destinations with error handling.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-19_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  log \"github.com/sirupsen/logrus\"\n  \"gopkg.in/gemnasium/logrus-airbrake-hook.v2\" // the package is named \"airbrake\"\n  logrus_syslog \"github.com/sirupsen/logrus/hooks/syslog\"\n  \"log/syslog\"\n)\n\nfunc init() {\n\n  // Use the Airbrake hook to report errors that have Error severity or above to\n  // an exception tracker. You can create custom hooks, see the Hooks section.\n  log.AddHook(airbrake.NewHook(123, \"xyz\", \"production\"))\n\n  hook, err := logrus_syslog.NewSyslogHook(\"udp\", \"localhost:514\", syslog.LOG_INFO, \"\")\n  if err != nil {\n    log.Error(\"Unable to connect to local syslog daemon\")\n  } else {\n    log.AddHook(hook)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: IO Operations Progress Bar\nDESCRIPTION: Example of using progress bar with IO operations, demonstrating proxy reader implementation\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/cheggaaa/pb/README.md#2025-04-19_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"crypto/rand\"\n\t\"io\"\n\t\"io/ioutil\"\n\n\t\"github.com/cheggaaa/pb/v3\"\n)\n\nfunc main() {\n\n\tvar limit int64 = 1024 * 1024 * 500\n\t// we will copy 200 Mb from /dev/rand to /dev/null\n\treader := io.LimitReader(rand.Reader, limit)\n\twriter := ioutil.Discard\n\n\t// start new bar\n\tbar := pb.Full.Start64(limit)\n\t// create proxy reader\n\tbarReader := bar.NewProxyReader(reader)\n\t// copy from proxy reader\n\tio.Copy(writer, barReader)\n\t// finish bar\n\tbar.Finish()\n}\n```\n\n----------------------------------------\n\nTITLE: Go Module Path Example with Versioning\nDESCRIPTION: Example showing how version numbers (v2+) are incorporated into Go module paths and package imports following semantic import versioning.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/go.opentelemetry.io/auto/sdk/VERSIONING.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n/vN\n```\n\n----------------------------------------\n\nTITLE: Setting WordPress Environment Type via DDEV Config Command\nDESCRIPTION: Uses DDEV's config command to set the WP_ENVIRONMENT_TYPE environment variable to 'local' for the web container\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/cms-settings.md#2025-04-19_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nddev config --web-environment-add=\"WP_ENVIRONMENT_TYPE=local\"\n```\n\n----------------------------------------\n\nTITLE: Running DDEV-Gitpod Base Docker Container\nDESCRIPTION: This command demonstrates how to run the ddev/ddev-gitpod-base Docker container interactively. It launches a bash shell within the container, allowing for exploration and testing of the environment.\nSOURCE: https://github.com/ddev/ddev/blob/main/containers/ddev-gitpod-base/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm ddev/ddev-gitpod-base:<tag> bash\n```\n\n----------------------------------------\n\nTITLE: Verifying a Digest in Go\nDESCRIPTION: Shows how to verify if a given digest matches the content it's supposed to represent. This is essential for ensuring data integrity in content distribution systems.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/opencontainers/go-digest/README.md#2025-04-19_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nif id != digest.FromBytes([]byte(\"my content\")) {\n  return errors.New(\"the content has changed!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Graphemes Using Graphemes Class in Go\nDESCRIPTION: Shows how to use the Graphemes class to iterate over Unicode grapheme clusters and print their rune values\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/rivo/uniseg/README.md#2025-04-19_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ngr := uniseg.NewGraphemes(\"👍🏼!\")\nfor gr.Next() {\n\tfmt.Printf(\"%x \", gr.Runes())\n}\n// [1f44d 1f3fc] [21]\n```\n\n----------------------------------------\n\nTITLE: Adding sha512sum Function in Go\nDESCRIPTION: Added a new sha512sum function to generate SHA-512 hashes.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/Masterminds/sprig/v3/CHANGELOG.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n- #400: added sha512sum function\n```\n\n----------------------------------------\n\nTITLE: Table Style Modification in Go using go-pretty\nDESCRIPTION: Demonstrates how to modify an existing table style by changing specific style properties like colors, formatting and border options.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/jedib0t/go-pretty/v6/table/README.md#2025-04-19_snippet_2\n\nLANGUAGE: golang\nCODE:\n```\nt.SetStyle(table.StyleLight)\nt.Style().Color.Header = text.Colors{text.BgHiCyan, text.FgBlack}\nt.Style().Color.IndexColumn = text.Colors{text.BgHiCyan, text.FgBlack}\nt.Style().Format.Footer = text.FormatLower\nt.Style().Options.DrawBorder = false\n```\n\n----------------------------------------\n\nTITLE: Using Regular Expression Functions in Go Templates\nDESCRIPTION: New regex functions added in v2.13.0 including regexMatch, regexFindAll, regexFind, regexReplaceAll, regexReplaceAllLiteral, and regexSplit for pattern matching and text manipulation.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/Masterminds/sprig/v3/CHANGELOG.md#2025-04-19_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nregexMatch\nregexFindAll\nregexFind\nregexReplaceAll\nregexReplaceAllLiteral\nregexSplit\n```\n\n----------------------------------------\n\nTITLE: Cloning OpenTelemetry Go Repository\nDESCRIPTION: Instructions for cloning the OpenTelemetry Go repository to start contributing.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/open-telemetry/opentelemetry-go.git\n```\n\n----------------------------------------\n\nTITLE: Running Go Tests with Mint\nDESCRIPTION: This command demonstrates how to run Go tests that use Mint assertions. It uses the 'go test' command to run all tests in the current package and its subpackages.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/otiai10/mint/README.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo test ./...\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Logrus Formatter in Go\nDESCRIPTION: Example of creating a custom JSON formatter by implementing the Formatter interface with a Format method.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-19_snippet_8\n\nLANGUAGE: go\nCODE:\n```\ntype MyJSONFormatter struct {\n}\n\nlog.SetFormatter(new(MyJSONFormatter))\n\nfunc (f *MyJSONFormatter) Format(entry *Entry) ([]byte, error) {\n  // Note this doesn't include Time, Level and Message which are available on\n  // the Entry. Consult `godoc` on information about those fields or read the\n  // source of the official loggers.\n  serialized, err := json.Marshal(entry.Data)\n    if err != nil {\n      return nil, fmt.Errorf(\"Failed to marshal fields to JSON, %w\", err)\n    }\n  return append(serialized, '\\n'), nil\n}\n```\n\n----------------------------------------\n\nTITLE: Using Logrus as io.Writer in Go\nDESCRIPTION: Examples of using Logrus as an io.Writer and overriding the standard library logger with Logrus.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-19_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nw := logger.Writer()\ndefer w.Close()\n\nsrv := http.Server{\n    // create a stdlib log.Logger that writes to\n    // logrus.Logger.\n    ErrorLog: log.New(w, \"\", 0),\n}\n```\n\nLANGUAGE: go\nCODE:\n```\nlogger := logrus.New()\nlogger.Formatter = &logrus.JSONFormatter{}\n\n// Use logrus for standard log output\n// Note that `log` here references stdlib's log\n// Not logrus imported under the name `log`.\nlog.SetOutput(logger.Writer())\n```\n\n----------------------------------------\n\nTITLE: Registering Fatal Handlers in Logrus\nDESCRIPTION: Shows how to register handlers that execute before Logrus performs os.Exit(1) on fatal level messages.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/sirupsen/logrus/README.md#2025-04-19_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nhandler := func() {\n  // gracefully shutdown something...\n}\nlogrus.RegisterExitHandler(handler)\n```\n\n----------------------------------------\n\nTITLE: Importing Hash Implementations in Go\nDESCRIPTION: Shows how to import necessary hash implementations to avoid panics when using the go-digest package. This should be done in the main function or other entry point of the application.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/opencontainers/go-digest/README.md#2025-04-19_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    _ \"crypto/sha256\"\n    _ \"crypto/sha512\"\n)\n```\n\n----------------------------------------\n\nTITLE: Monitoring Squid Access Logs\nDESCRIPTION: Command to monitor the Squid access log in real-time to verify proxy traffic.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/developers/network-test-environments.md#2025-04-19_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nsudo tail -f /var/log/squid/access.log\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Natural Sort on Raspberry Pi 3\nDESCRIPTION: Benchmark results for the natural sort implementation on a Raspberry Pi 3. This demonstrates the performance on ARM architecture.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/maruel/natural/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ go test -bench=. -cpu 1\ngoos: linux\ngoarch: arm\npkg: github.com/maruel/natural\nBenchmarkLessDigitsTwoGroupsNative  14181789    86.57 ns/op    0 B/op   0 allocs/op\nBenchmarkLessDigitsTwoGroups         1600195   748.9 ns/op     0 B/op   0 allocs/op\nBenchmarkLessStringOnly              8286034   142.3 ns/op     0 B/op   0 allocs/op\nBenchmarkLessDigitsOnly              3653055   331.4 ns/op     0 B/op   0 allocs/op\nBenchmarkLess10Blocks                 310687  3838 ns/op       0 B/op   0 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Causer Interface Definition\nDESCRIPTION: Defines the interface for error types that can provide their underlying cause.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/pkg/errors/README.md#2025-04-19_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype causer interface {\n        Cause() error\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting Semantic Versions in Go\nDESCRIPTION: Shows how to parse a list of version strings into Version objects and sort them using the sort package from the standard library. This example demonstrates converting strings to Version objects and sorting them.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/Masterminds/semver/v3/README.md#2025-04-19_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nraw := []string{\"1.2.3\", \"1.0\", \"1.3\", \"2\", \"0.4.2\",}\nvs := make([]*semver.Version, len(raw))\nfor i, r := range raw {\n    v, err := semver.NewVersion(r)\n    if err != nil {\n        t.Errorf(\"Error parsing version: %s\", err)\n    }\n\n    vs[i] = v\n}\n\nsort.Sort(semver.Collection(vs))\n```\n\n----------------------------------------\n\nTITLE: Example of Merging Structs with Mergo\nDESCRIPTION: Provides a complete example of merging two structs using Mergo.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/dario.cat/mergo/README.md#2025-04-19_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"dario.cat/mergo\"\n)\n\ntype Foo struct {\n\tA string\n\tB int64\n}\n\nfunc main() {\n\tsrc := Foo{\n\t\tA: \"one\",\n\t\tB: 2,\n\t}\n\tdest := Foo{\n\t\tA: \"two\",\n\t}\n\tmergo.Merge(&dest, src)\n\tfmt.Println(dest)\n\t// Will print\n\t// {two 2}\n}\n```\n\n----------------------------------------\n\nTITLE: Pushing Release Tags to Upstream\nDESCRIPTION: Git commands to push new release tags and submodule tags to the upstream repository.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/go.opentelemetry.io/otel/RELEASING.md#2025-04-19_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ngit push upstream <new tag>\ngit push upstream <submodules-path/new tag>\n...\n```\n\n----------------------------------------\n\nTITLE: Setting SSH_AUTH_SOCK Environment Variable for Non-Root Users\nDESCRIPTION: Environment variable setting that specifies the custom socket location for non-root users to connect to the SSH agent.\nSOURCE: https://github.com/ddev/ddev/blob/main/containers/ddev-ssh-agent/README.md#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nSSH_AUTH_SOCK=~/.ssh/socket\n```\n\n----------------------------------------\n\nTITLE: Git Commit Sign-off Example in Markdown\nDESCRIPTION: This snippet demonstrates how to add a sign-off line to a git commit message, which is required for contributions to the project. It includes an example of the format and mentions the use of real names.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/distribution/reference/CONTRIBUTING.md#2025-04-19_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n    Signed-off-by: Joe Smith <joe.smith@email.com>\n```\n\n----------------------------------------\n\nTITLE: Function Signatures in Go Validator Package\nDESCRIPTION: Complete list of available functions in the govalidator package including validation, conversion, and utility functions.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-19_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc Abs(value float64) float64\nfunc BlackList(str, chars string) string\n// ... [truncated for brevity]\n```\n\n----------------------------------------\n\nTITLE: Custom Transformer for time.Time in Mergo\nDESCRIPTION: Shows how to create and use a custom transformer for merging time.Time values with Mergo.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/dario.cat/mergo/README.md#2025-04-19_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"dario.cat/mergo\"\n    \"reflect\"\n    \"time\"\n)\n\ntype timeTransformer struct {\n}\n\nfunc (t timeTransformer) Transformer(typ reflect.Type) func(dst, src reflect.Value) error {\n\tif typ == reflect.TypeOf(time.Time{}) {\n\t\treturn func(dst, src reflect.Value) error {\n\t\t\tif dst.CanSet() {\n\t\t\t\tisZero := dst.MethodByName(\"IsZero\")\n\t\t\t\tresult := isZero.Call([]reflect.Value{})\n\t\t\t\tif result[0].Bool() {\n\t\t\t\t\tdst.Set(src)\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn nil\n\t\t}\n\t}\n\treturn nil\n}\n\ntype Snapshot struct {\n\tTime time.Time\n\t// ...\n}\n\nfunc main() {\n\tsrc := Snapshot{time.Now()}\n\tdest := Snapshot{}\n\tmergo.Merge(&dest, src, mergo.WithTransformers(timeTransformer{}))\n\tfmt.Println(dest)\n\t// Will print\n\t// { 2018-01-12 01:15:00 +0000 UTC m=+0.000000001 }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Acquia API Keys to DDEV Global Config (Bash)\nDESCRIPTION: This command demonstrates how to add Acquia API keys to the DDEV global configuration using the command line. It uses the ddev config global command with the --web-environment-add flag.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/providers/acquia.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nddev config global --web-environment-add=\"ACQUIA_API_KEY=xxxxxxxx,ACQUIA_API_SECRET=xxxxx\"\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Mint Usage in Go Tests\nDESCRIPTION: This snippet showcases how to use Mint for assertions in Go tests. It demonstrates various assertion methods including ToBe, TypeOf, Not, and Exit. The example also shows how to use Dry assertions and create a blended mint instance.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/otiai10/mint/README.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage your_test\n\nimport (\n    \"testing\"\n    \"pkg/your\"\n    . \"github.com/otiai10/mint\"\n)\n\nfunc TestFoo(t *testing.T) {\n\n    foo := your.Foo()\n    Expect(t, foo).ToBe(1234)\n    Expect(t, foo).TypeOf(\"int\")\n    Expect(t, foo).Not().ToBe(nil)\n    Expect(t, func() { yourFunc() }).Exit(1)\n\n    // If assertion failed, exit 1 with message.\n    Expect(t, foo).ToBe(\"foobarbuz\")\n\n    // You can run assertions without os.Exit\n    res := Expect(t, foo).Dry().ToBe(\"bar\")\n    // res.OK() == false\n\n    // You can omit repeated `t`.\n    m := mint.Blend(t)\n    m.Expect(foo).ToBe(1234)\n}\n```\n\n----------------------------------------\n\nTITLE: Monitoring Filtered Squid Access Logs\nDESCRIPTION: Command to monitor Squid access logs filtered for Docker-related entries.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/developers/network-test-environments.md#2025-04-19_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nsudo tail -f /var/log/squid/access.log | grep docker\n```\n\n----------------------------------------\n\nTITLE: API Structure Reference - File Paths\nDESCRIPTION: Lists the key components of the Engine API including the Swagger definition, types, client, and daemon directories. These paths represent the core structure of the API implementation.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/docker/docker/api/README.md#2025-04-19_snippet_0\n\nLANGUAGE: text\nCODE:\n```\napi/swagger.yaml\napi/types/\ncli/\nclient/\ndaemon/\n```\n\n----------------------------------------\n\nTITLE: Activating DDEV Bash Aliases Configuration\nDESCRIPTION: Commands to activate the example bash aliases file by either copying or creating a symbolic link to the example file.\nSOURCE: https://github.com/ddev/ddev/blob/main/pkg/ddevapp/global_dotddev_assets/homeadditions/README.txt#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncp bash_aliases.example .bash_aliases\n```\n\nLANGUAGE: bash\nCODE:\n```\nln -s bash_aliases.example .bash_aliases\n```\n\n----------------------------------------\n\nTITLE: Mapping Between Structs and Maps with Mergo\nDESCRIPTION: Demonstrates how to use Mergo to map between structs and maps.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/dario.cat/mergo/README.md#2025-04-19_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nif err := mergo.Map(&dst, srcMap); err != nil {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Initial Module Versions\nDESCRIPTION: Lists the initial version state of OpenTelemetry modules before stability considerations.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/go.opentelemetry.io/otel/VERSIONING.md#2025-04-19_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n* `otel`: `v0.14.0`\n* `otel/trace`: `v0.14.0`\n* `otel/metric`: `v0.14.0`\n* `otel/baggage`: `v0.14.0`\n* `otel/sdk/trace`: `v0.14.0`\n* `otel/sdk/metric`: `v0.14.0`\n```\n\n----------------------------------------\n\nTITLE: Implementing Interface Extension Pattern in Go\nDESCRIPTION: Demonstrates how to safely extend interfaces by adding new functionality through additional interfaces.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-19_snippet_13\n\nLANGUAGE: go\nCODE:\n```\ntype Exporter interface {\n\tExport()\n}\n\ntype Closer interface {\n\tClose()\n}\n\nfunc caller(e Exporter) {\n\t/* ... */\n\tif c, ok := e.(Closer); ok {\n\t\tc.Close()\n\t}\n\t/* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Table Styling in Go using go-pretty\nDESCRIPTION: Shows how to create a custom table style by defining box characters, colors, formatting options and general table rendering options.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/jedib0t/go-pretty/v6/table/README.md#2025-04-19_snippet_1\n\nLANGUAGE: golang\nCODE:\n```\nt.SetStyle(table.Style{\n    Name: \"myNewStyle\",\n    Box: table.BoxStyle{\n        BottomLeft:       \"\\\\\",\n        BottomRight:      \"/\",\n        BottomSeparator:  \"v\",\n        Left:             \"[\",\n        LeftSeparator:    \"{\",\n        MiddleHorizontal: \"-\",\n        MiddleSeparator:  \"+\",\n        MiddleVertical:   \"|\",\n        PaddingLeft:      \"<\",\n        PaddingRight:     \">\",\n        Right:            \"]\",\n        RightSeparator:   \"}\",\n        TopLeft:          \"(\",\n        TopRight:         \")\",\n        TopSeparator:     \"^\",\n        UnfinishedRow:    \" ~~~\",\n    },\n    Color: table.ColorOptions{\n        IndexColumn:     text.Colors{text.BgCyan, text.FgBlack},\n        Footer:          text.Colors{text.BgCyan, text.FgBlack},\n        Header:          text.Colors{text.BgHiCyan, text.FgBlack},\n        Row:             text.Colors{text.BgHiWhite, text.FgBlack},\n        RowAlternate:    text.Colors{text.BgWhite, text.FgBlack},\n    },\n    Format: table.FormatOptions{\n        Footer: text.FormatUpper,\n        Header: text.FormatUpper,\n        Row:    text.FormatDefault,\n    },\n    Options: table.Options{\n        DrawBorder:      true,\n        SeparateColumns: true,\n        SeparateFooter:  true,\n        SeparateHeader:  true,\n        SeparateRows:    false,\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Word Segmentation Using FirstWordInString in Go\nDESCRIPTION: Shows how to segment text into words using the FirstWordInString function\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/rivo/uniseg/README.md#2025-04-19_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nstr := \"Hello, world!\"\nstate := -1\nvar c string\nfor len(str) > 0 {\n\tc, str, state = uniseg.FirstWordInString(str, state)\n\tfmt.Printf(\"(%s)\\n\", c)\n}\n// (Hello)\n// (,)\n// ( )\n// (world)\n// (!)\n```\n\n----------------------------------------\n\nTITLE: Installing Cobra Library in Go\nDESCRIPTION: Command to install the latest version of the Cobra library using go get.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/spf13/cobra/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get -u github.com/spf13/cobra@latest\n```\n\n----------------------------------------\n\nTITLE: Constant Declaration Example - Correct Type Assignment\nDESCRIPTION: Corrected version of the constant declaration where both constants a and b are explicitly typed as byte.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/ulikunitz/xz/TODO.md#2025-04-19_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nconst (\n  a byte = 0x1\n  b byte = 0x2\n)\n```\n\n----------------------------------------\n\nTITLE: Developer Certificate of Origin Text\nDESCRIPTION: The full text of the Developer Certificate of Origin (DCO) version 1.1 that contributors must agree to when submitting patches. This certificate ensures contributors have the right to submit their code under the project's open source license.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/docker/go-units/CONTRIBUTING.md#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nDeveloper Certificate of Origin\nVersion 1.1\n\nCopyright (C) 2004, 2006 The Linux Foundation and its contributors.\n660 York Street, Suite 102,\nSan Francisco, CA 94110 USA\n\nEveryone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed.\n\nDeveloper's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n\n(a) The contribution was created in whole or in part by me and I\n    have the right to submit it under the open source license\n    indicated in the file; or\n\n(b) The contribution is based upon previous work that, to the best\n    of my knowledge, is covered under an appropriate open source\n    license and I have the right under that license to submit that\n    work with modifications, whether created in whole or in part\n    by me, under the same open source license (unless I am\n    permitted to submit under a different license), as indicated\n    in the file; or\n\n(c) The contribution was provided directly to me by some other\n    person who certified (a), (b) or (c) and I have not modified\n    it.\n\n(d) I understand and agree that this project and the contribution\n    are public and that a record of the contribution (including all\n    personal information I submit with it, including my sign-off) is\n    maintained indefinitely and may be redistributed consistent with\n    this project or the open source license(s) involved.\n```\n\n----------------------------------------\n\nTITLE: Writing Environment Files\nDESCRIPTION: Examples of writing environment variables to files or strings using GoDotEnv.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/joho/godotenv/README.md#2025-04-19_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nenv, err := godotenv.Unmarshal(\"KEY=value\")\nerr := godotenv.Write(env, \"./.env\")\n```\n\nLANGUAGE: go\nCODE:\n```\nenv, err := godotenv.Unmarshal(\"KEY=value\")\ncontent, err := godotenv.Marshal(env)\n```\n\n----------------------------------------\n\nTITLE: YAML-style Environment Configuration\nDESCRIPTION: Example of YAML-style environment variable configuration format supported by GoDotEnv.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/joho/godotenv/README.md#2025-04-19_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nFOO: bar\nBAR: baz\n```\n\n----------------------------------------\n\nTITLE: Final Stable Release Versions\nDESCRIPTION: Lists the final stable release versions for all modules.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/go.opentelemetry.io/otel/VERSIONING.md#2025-04-19_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n* `otel`: `v1.1.0`\n* `otel/trace`: `v1.1.0`\n* `otel/metric`: `v1.1.0`\n* `otel/baggage`: `v1.1.0`\n* `otel/sdk/trace`: `v1.1.0`\n* `otel/sdk/metric`: `v1.1.0`\n```\n\n----------------------------------------\n\nTITLE: Disable Flag Sorting in Go\nDESCRIPTION: Shows how to disable automatic sorting of flags in help output.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-19_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nflags.BoolP(\"verbose\", \"v\", false, \"verbose output\")\nflags.String(\"coolflag\", \"yeaah\", \"it's really cool flag\")\nflags.Int(\"usefulflag\", 777, \"sometimes it's very useful\")\nflags.SortFlags = false\nflags.PrintDefaults()\n```\n\n----------------------------------------\n\nTITLE: Auto-Merging Table Cells in Golang\nDESCRIPTION: Demonstrates how to auto-merge table cells both horizontally and vertically using RowConfig and ColumnConfig settings. Includes configuration for column alignment and table styling.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/jedib0t/go-pretty/v6/table/README.md#2025-04-19_snippet_3\n\nLANGUAGE: golang\nCODE:\n```\n    rowConfigAutoMerge := table.RowConfig{AutoMerge: true}\n\n    t := table.NewWriter()\n    t.AppendHeader(table.Row{\"Node IP\", \"Pods\", \"Namespace\", \"Container\", \"RCE\", \"RCE\"}, rowConfigAutoMerge)\n    t.AppendHeader(table.Row{\"Node IP\", \"Pods\", \"Namespace\", \"Container\", \"EXE\", \"RUN\"})\n    t.AppendRow(table.Row{\"1.1.1.1\", \"Pod 1A\", \"NS 1A\", \"C 1\", \"Y\", \"Y\"}, rowConfigAutoMerge)\n    t.AppendRow(table.Row{\"1.1.1.1\", \"Pod 1A\", \"NS 1A\", \"C 2\", \"Y\", \"N\"}, rowConfigAutoMerge)\n    t.AppendRow(table.Row{\"1.1.1.1\", \"Pod 1A\", \"NS 1B\", \"C 3\", \"N\", \"N\"}, rowConfigAutoMerge)\n    t.AppendRow(table.Row{\"1.1.1.1\", \"Pod 1B\", \"NS 2\", \"C 4\", \"N\", \"N\"}, rowConfigAutoMerge)\n    t.AppendRow(table.Row{\"1.1.1.1\", \"Pod 1B\", \"NS 2\", \"C 5\", \"Y\", \"N\"}, rowConfigAutoMerge)\n    t.AppendRow(table.Row{\"2.2.2.2\", \"Pod 2\", \"NS 3\", \"C 6\", \"Y\", \"Y\"}, rowConfigAutoMerge)\n    t.AppendRow(table.Row{\"2.2.2.2\", \"Pod 2\", \"NS 3\", \"C 7\", \"Y\", \"Y\"}, rowConfigAutoMerge)\n    t.AppendFooter(table.Row{\"\", \"\", \"\", 7, 5, 3})\n    t.SetAutoIndex(true)\n    t.SetColumnConfigs([]table.ColumnConfig{\n        {Number: 1, AutoMerge: true},\n        {Number: 2, AutoMerge: true},\n        {Number: 3, AutoMerge: true},\n        {Number: 4, AutoMerge: true},\n        {Number: 5, Align: text.AlignCenter, AlignFooter: text.AlignCenter, AlignHeader: text.AlignCenter},\n        {Number: 6, Align: text.AlignCenter, AlignFooter: text.AlignCenter, AlignHeader: text.AlignCenter},\n    })\n    t.SetStyle(table.StyleLight)\n    t.Style().Options.SeparateRows = true\n    fmt.Println(t.Render())\n```\n\n----------------------------------------\n\nTITLE: Table Row Width Restriction in Golang\nDESCRIPTION: Demonstrates how to set maximum row width limitations with text truncation indicated by tildes.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/jedib0t/go-pretty/v6/table/README.md#2025-04-19_snippet_6\n\nLANGUAGE: golang\nCODE:\n```\n    t.SetAllowedRowLength(50)\n    t.Render()\n```\n\n----------------------------------------\n\nTITLE: Copy Options Structure Definition in Go\nDESCRIPTION: Defines the Options struct that provides advanced configuration for the copy operation, including symlink handling, permission control, error handling, and concurrent copying settings.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/otiai10/copy/README.md#2025-04-19_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Options specifies optional actions on copying.\ntype Options struct {\n\n\t// OnSymlink can specify what to do on symlink\n\tOnSymlink func(src string) SymlinkAction\n\n\t// OnDirExists can specify what to do when there is a directory already existing in destination.\n\tOnDirExists func(src, dest string) DirExistsAction\n\n\t// OnError can let users decide how to handle errors (e.g., you can suppress specific error).\n\tOnError func(src, dest, string, err error) error\n\n\t// Skip can specify which files should be skipped\n\tSkip func(srcinfo os.FileInfo, src, dest string) (bool, error)\n\n\t// RenameDestination can rename destination.\n\t// If not set, nil, it does nothing.\n\tRenameDestination func(src, dest string) (string, error)\n\n\t// PermissionControl can control permission of\n\t// every entry.\n\t// When you want to add permission 0222, do like\n\t//\n\t//\t\tPermissionControl = AddPermission(0222)\n\t//\n\t// or if you even don't want to touch permission,\n\t//\n\t//\t\tPermissionControl = DoNothing\n\t//\n\t// By default, PermissionControl = PreservePermission\n\tPermissionControl PermissionControlFunc\n\n\t// Sync file after copy.\n\t// Useful in case when file must be on the disk\n\t// (in case crash happens, for example),\n\t// at the expense of some performance penalty\n\tSync bool\n\n\t// Preserve the atime and the mtime of the entries\n\t// On linux we can preserve only up to 1 millisecond accuracy\n\tPreserveTimes bool\n\n\t// Preserve the uid and the gid of all entries.\n\tPreserveOwner bool\n\n\t// The byte size of the buffer to use for copying files.\n\t// If zero, the internal default buffer of 32KB is used.\n\t// See https://golang.org/pkg/io/#CopyBuffer for more information.\n\tCopyBufferSize uint\n\n\t// If you want to add some limitation on reading src file,\n\t// you can wrap the src and provide new reader,\n\t// such as `RateLimitReader` in the test case.\n\tWrapReader func(src io.Reader) io.Reader\n\n\t// If given, copy.Copy refers to this fs.FS instead of the OS filesystem.\n\t// e.g., You can use embed.FS to copy files from embedded filesystem.\n\tFS fs.FS\n\n\t// NumOfWorkers represents the number of workers used for\n\t// concurrent copying contents of directories.\n\t// If 0 or 1, it does not use goroutine for copying directories.\n\t// Please refer to https://pkg.go.dev/golang.org/x/sync/semaphore for more details.\n\tNumOfWorkers int64\n\n\t// PreferConcurrent is a function to determine whether or not\n\t// to use goroutine for copying contents of directories.\n\t// If PreferConcurrent is nil, which is default, it does concurrent\n\t// copying for all directories.\n\t// If NumOfWorkers is 0 or 1, this function will be ignored.\n\tPreferConcurrent func(srcdir, destdir string) (bool, error)\n}\n```\n\n----------------------------------------\n\nTITLE: DDEV Generated Config Marker\nDESCRIPTION: A simple marker indicating that this file was generated by DDEV\nSOURCE: https://github.com/ddev/ddev/blob/main/cmd/ddev/cmd/testdata/TestCmdAddon/example-repo/globalextras/okfile.txt#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n#ddev-generated\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Daemon Proxy in JSON\nDESCRIPTION: Example configuration for the Docker daemon's proxy settings in /etc/docker/daemon.json. This setup allows Docker to use a proxy for pulling images and other network operations.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/networking.md#2025-04-19_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"proxies\": {\n    \"http-proxy\": \"http://squid.host-only:3128\",\n    \"https-proxy\": \"http://squid.host-only:3128\",\n    \"no-proxy\": \"localhost,127.0.0.0/8\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Making Changes and Submitting PR\nDESCRIPTION: Sequence of commands for creating a branch, making changes, and pushing to your fork.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-19_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ngit checkout -b <YOUR_BRANCH_NAME>\n# edit files\n# update changelog\nmake precommit\ngit add -p\ngit commit\ngit push <YOUR_FORK> <YOUR_BRANCH_NAME>\n```\n\n----------------------------------------\n\nTITLE: Installing go-isatty using Go Get\nDESCRIPTION: This command installs the go-isatty library using the go get command. It fetches the package from the GitHub repository and installs it in the Go workspace.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/mattn/go-isatty/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ go get github.com/mattn/go-isatty\n```\n\n----------------------------------------\n\nTITLE: DDEV Generated File Marker\nDESCRIPTION: Header marker used to indicate that a file was automatically generated by DDEV. This helps identify system-generated files versus manually created ones.\nSOURCE: https://github.com/ddev/ddev/blob/main/cmd/ddev/cmd/testdata/TestCmdAddonComplex/recipe/junk_linux_arm64.txt#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n#ddev-generated\n```\n\n----------------------------------------\n\nTITLE: Defining Security Policy in Markdown\nDESCRIPTION: This snippet provides instructions for reporting security vulnerabilities in the DDEV project. It emphasizes the importance of privately reporting issues to a specific email address rather than creating public issues.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/distribution/reference/SECURITY.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Security Policy\n\n## Reporting a Vulnerability\n\nThe maintainers take security seriously. If you discover a security issue, please bring it to their attention right away!\n\nPlease DO NOT file a public issue, instead send your report privately to cncf-distribution-security@lists.cncf.io.\n```\n\n----------------------------------------\n\nTITLE: Adding Array Chunking Function in Go\nDESCRIPTION: Added a new chunk function to split arrays into smaller arrays.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/Masterminds/sprig/v3/CHANGELOG.md#2025-04-19_snippet_10\n\nLANGUAGE: go\nCODE:\n```\n- #265: Added chunk function to split array into smaller arrays\n```\n\n----------------------------------------\n\nTITLE: First Release Candidate Versions\nDESCRIPTION: Shows the first release candidate versions for modules ready for stability.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/go.opentelemetry.io/otel/VERSIONING.md#2025-04-19_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n* `otel`: `v1.0.0-RC1`\n* `otel/trace`: `v1.0.0-RC1`\n* `otel/baggage`: `v1.0.0-RC1`\n* `otel/sdk/trace`: `v1.0.0-RC1`\n```\n\n----------------------------------------\n\nTITLE: Formatting Quoted Text in Markdown for DDEV Documentation\nDESCRIPTION: Demonstrates how to properly format quoted text in Markdown using blockquote syntax rather than code blocks. This ensures copied text from external sources is styled appropriately in the rendered documentation.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/developers/writing-style-guide.md#2025-04-19_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n> Error: your quote style should not always be in a fenced block.\n```\n\n----------------------------------------\n\nTITLE: Table Paging Implementation in Golang\nDESCRIPTION: Shows how to implement table paging functionality by limiting the number of rows displayed per page. Handles multi-line rows and maintains header/footer on each page.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/jedib0t/go-pretty/v6/table/README.md#2025-04-19_snippet_4\n\nLANGUAGE: golang\nCODE:\n```\n    t.SetPageSize(1)\n    t.Render()\n```\n\n----------------------------------------\n\nTITLE: Adding Fork Remote and Creating PR Branch\nDESCRIPTION: Commands for adding your fork as a remote and creating a new branch for contributions.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-19_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngit remote add <YOUR_FORK> git@github.com:<YOUR_GITHUB_USERNAME>/opentelemetry-go\n```\n\n----------------------------------------\n\nTITLE: Upgrading DDEV on Arch Linux\nDESCRIPTION: Command to upgrade the DDEV package on Arch Linux using the Yay AUR helper.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/install/ddev-upgrade.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Upgrade the DDEV package\nyay -Syu ddev-bin\n```\n\n----------------------------------------\n\nTITLE: Example Go Module Path with Major Version v2\nDESCRIPTION: Example showing how to properly format Go module paths and imports for versions v2 and higher, including the required /vN suffix in module names and import paths.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/go.opentelemetry.io/otel/VERSIONING.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule go.opentelemetry.io/otel/v2\nrequire go.opentelemetry.io/otel/v2 v2.0.1\nimport \"go.opentelemetry.io/otel/v2/trace\"\n```\n\n----------------------------------------\n\nTITLE: Customizing pb Progress Bar in Go\nDESCRIPTION: Shows various customization options for the progress bar, including refresh rate, display options, width settings, and units configuration.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/cheggaaa/pb/README_V1.md#2025-04-19_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\n// create bar\nbar := pb.New(count)\n\n// refresh info every second (default 200ms)\nbar.SetRefreshRate(time.Second)\n\n// show percents (by default already true)\nbar.ShowPercent = true\n\n// show bar (by default already true)\nbar.ShowBar = true\n\n// no counters\nbar.ShowCounters = false\n\n// show \"time left\"\nbar.ShowTimeLeft = true\n\n// show average speed\nbar.ShowSpeed = true\n\n// sets the width of the progress bar\nbar.SetWidth(80)\n\n// sets the width of the progress bar, but if terminal size smaller will be ignored\nbar.SetMaxWidth(80)\n\n// convert output to readable format (like KB, MB)\nbar.SetUnits(pb.U_BYTES)\n\n// and start\nbar.Start()\n```\n\n----------------------------------------\n\nTITLE: HTML Table Layout for Project Contributors\nDESCRIPTION: HTML table structure that displays contributor information including GitHub profile images, usernames, and contribution types. Each cell contains a centered profile image, username link, and contribution indicator.\nSOURCE: https://github.com/ddev/ddev/blob/main/pkg/ddevapp/testdata/TestDetectAppType/magento/README.md#2025-04-19_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\"><a href=\"https://github.com/sebastianwagner\"><img src=\"https://avatars0.githubusercontent.com/u/1701745?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>sebastianwagner</b></sub></a><br /><a href=\"https://github.com/OpenMage/magento-lts/commits?author=sebastianwagner\" title=\"Code\">💻</a></td>\n```\n\n----------------------------------------\n\nTITLE: Adding randInt Function in Go\nDESCRIPTION: Added a new randInt function to generate random integers.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/Masterminds/sprig/v3/CHANGELOG.md#2025-04-19_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n- #211: Added randInt function\n```\n\n----------------------------------------\n\nTITLE: Error Cause Type Switch\nDESCRIPTION: Demonstrates how to use errors.Cause to retrieve and handle the original error using type switching.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/pkg/errors/README.md#2025-04-19_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nswitch err := errors.Cause(err).(type) {\ncase *MyError:\n        // handle specifically\ndefault:\n        // unknown error\n}\n```\n\n----------------------------------------\n\nTITLE: Template Tuple Creation Example\nDESCRIPTION: Example showing how to create a tuple inside a template using the tuple function, introduced in v2.0.0.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/Masterminds/sprig/v3/CHANGELOG.md#2025-04-19_snippet_15\n\nLANGUAGE: go\nCODE:\n```\n{{$t := tuple \"a\", \"b\" \"c\"}}\n```\n\n----------------------------------------\n\nTITLE: Markdown Badge for Go Package Documentation\nDESCRIPTION: Markdown code that displays a PkgGoDev badge linking to the OpenTelemetry no-op tracer package documentation.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/go.opentelemetry.io/otel/trace/noop/README.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/trace/noop)](https://pkg.go.dev/go.opentelemetry.io/otel/trace/noop)\n```\n\n----------------------------------------\n\nTITLE: Adding Regex Metadata Quoting Function in Go\nDESCRIPTION: Added a new regexQuoteMeta function to quote regex metadata characters.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/Masterminds/sprig/v3/CHANGELOG.md#2025-04-19_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n- #257: Added regexQuoteMeta for quoting regex metadata\n```\n\n----------------------------------------\n\nTITLE: Defining Option Interface in Go\nDESCRIPTION: Creates an interface for configuration options with an unexported apply method to ensure type safety and encapsulation.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-19_snippet_8\n\nLANGUAGE: go\nCODE:\n```\ntype Option interface {\n\tapply(config) config\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Verifier with io.Reader in Go\nDESCRIPTION: Demonstrates how to use a Verifier type to handle cases where content is provided as an io.Reader. This is useful for verifying larger content or streaming data.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/opencontainers/go-digest/README.md#2025-04-19_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nrd := getContent()\nverifier := id.Verifier()\nio.Copy(verifier, rd)\n\nif !verifier.Verified() {\n  return errors.New(\"the content has changed!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Second Release Candidate Versions\nDESCRIPTION: Lists the second release candidate versions after addressing compatibility issues.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/go.opentelemetry.io/otel/VERSIONING.md#2025-04-19_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n* `otel`: `v1.0.0-RC2`\n* `otel/trace`: `v1.0.0-RC2`\n* `otel/baggage`: `v1.0.0-RC2`\n* `otel/sdk/trace`: `v1.0.0-RC2`\n```\n\n----------------------------------------\n\nTITLE: Displaying OpenTelemetry Attribute Package Badge in Markdown\nDESCRIPTION: Markdown code for displaying the package documentation badge from pkg.go.dev for the OpenTelemetry attribute package.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/go.opentelemetry.io/otel/attribute/README.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/attribute)](https://pkg.go.dev/go.opentelemetry.io/otel/attribute)\n```\n\n----------------------------------------\n\nTITLE: Markdown Header and Badge\nDESCRIPTION: Markdown syntax for displaying the project title and package documentation badge linking to pkg.go.dev\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/go.opentelemetry.io/otel/trace/README.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Trace API\n\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/trace)](https://pkg.go.dev/go.opentelemetry.io/otel/trace)\n```\n\n----------------------------------------\n\nTITLE: JSONC Usage Example in Go\nDESCRIPTION: Complete example demonstrating how to use JSONC package to convert JSONC to JSON and validate the result. Shows conversion of a JSON string with comments to clean JSON.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/muzzammil.xyz/jsonc/README.md#2025-04-19_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n  j := []byte(`{\"foo\": /*comment*/ \"bar\"}`)\n  jc := jsonc.ToJSON(j) // Calling jsonc.ToJSON() to convert JSONC to JSON\n  if jsonc.Valid(jc) {\n    fmt.Println(string(jc))\n  } else {\n    fmt.Println(\"Invalid JSONC\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Contributors Table in HTML\nDESCRIPTION: HTML table structure for displaying project contributors in a grid layout. Each cell contains a contributor's GitHub avatar, username, profile link and contribution type indicators. The table uses center alignment and consistent image sizing.\nSOURCE: https://github.com/ddev/ddev/blob/main/pkg/ddevapp/testdata/TestDetectAppType/magento/README.md#2025-04-19_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\"><a href=\"https://github.com/Hejty1\"><img src=\"https://avatars2.githubusercontent.com/u/53661954?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Hejty1</b></sub></a><br /><a href=\"https://github.com/OpenMage/magento-lts/commits?author=Hejty1\" title=\"Code\">💻</a></td>\n```\n\n----------------------------------------\n\nTITLE: Extending Certificate Functions in Go\nDESCRIPTION: Extended certificate functions to handle non-RSA keys and added support for ed25519 keys.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/Masterminds/sprig/v3/CHANGELOG.md#2025-04-19_snippet_11\n\nLANGUAGE: go\nCODE:\n```\n- #270: Extend certificate functions to handle non-RSA keys + add support for ed25519 keys\n```\n\n----------------------------------------\n\nTITLE: WSL Memory Configuration\nDESCRIPTION: Windows WSL configuration file (.wslconfig) settings for memory allocation and auto memory reclaim\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/developers/buildkite-testmachine-setup.md#2025-04-19_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nmemory=12GB\n[experimental]\nautoMemoryReclaim=dropcache\n```\n\n----------------------------------------\n\nTITLE: Adding Logical AND Functions in Go\nDESCRIPTION: Added new and and all functions for testing multiple conditions.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/Masterminds/sprig/v3/CHANGELOG.md#2025-04-19_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n- #268: Added and and all functions for testing conditions\n```\n\n----------------------------------------\n\nTITLE: Importing JSONC Package in Go\nDESCRIPTION: Example showing how to import the JSONC package in a Go source file.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/muzzammil.xyz/jsonc/README.md#2025-04-19_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"fmt\"\n\n  \"muzzammil.xyz/jsonc\"\n)\n```\n\n----------------------------------------\n\nTITLE: System Call Assembly Interface Definitions\nDESCRIPTION: Core assembly interface definitions for system call dispatch with three entry points - Syscall, Syscall6, and RawSyscall. These functions handle different argument counts and scheduling behaviors.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/golang.org/x/sys/unix/README.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc Syscall(trap, a1, a2, a3 uintptr) (r1, r2, err uintptr)\nfunc Syscall6(trap, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2, err uintptr)\nfunc RawSyscall(trap, a1, a2, a3 uintptr) (r1, r2, err uintptr)\n```\n\n----------------------------------------\n\nTITLE: Passing Logger to Application Object in Go\nDESCRIPTION: Shows how to pass the logger to application objects and structures. Demonstrates logger propagation pattern.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/go-logr/logr/README.md#2025-04-19_snippet_1\n\nLANGUAGE: go\nCODE:\n```\napp := createTheAppObject(logger)\napp.Run()\n```\n\n----------------------------------------\n\nTITLE: Module Path Definition in Markdown\nDESCRIPTION: Defines the main module path for the OpenTelemetry SDK auto-instrumentation package.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/go.opentelemetry.io/auto/sdk/CONTRIBUTING.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Contributing to go.opentelemetry.io/auto/sdk\n```\n\n----------------------------------------\n\nTITLE: JSONC Example Output\nDESCRIPTION: Shows the command to run the example program and its output, demonstrating successful conversion of JSONC to clean JSON.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/muzzammil.xyz/jsonc/README.md#2025-04-19_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ go run app.go\n{\"foo\":\"bar\"}\n```\n\n----------------------------------------\n\nTITLE: Counting Unicode Characters in Go\nDESCRIPTION: Example showing how to count grapheme clusters in a string containing emoji flags and other Unicode characters\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/rivo/uniseg/README.md#2025-04-19_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nn := uniseg.GraphemeClusterCount(\"🇩🇪🏳️‍🌈\")\nfmt.Println(n)\n// 2\n```\n\n----------------------------------------\n\nTITLE: Flag Parsing and Usage in Go\nDESCRIPTION: Shows how to parse command line flags and access their values.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-19_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfmt.Println(\"ip has value \", *ip)\nfmt.Println(\"flagvar has value \", flagvar)\n```\n\n----------------------------------------\n\nTITLE: Testing DDEV Image Version Validation in Bash\nDESCRIPTION: This code snippet provides instructions for testing DDEV images during release. It explains that the tests should be run from the project root directory to verify the correct image builds and version numbers.\nSOURCE: https://github.com/ddev/ddev/blob/main/containers/ddev-dbserver/test/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nSome simple test scripts to check the image is built and running the correct version. Used during release\nRun from the project root directory\n```\n\n----------------------------------------\n\nTITLE: Installing Amplitude CLI for Instrumentation\nDESCRIPTION: Installs the Amplitude CLI tool (Ampli) globally via NPM to enable synchronization with the Amplitude analytics platform.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/developers/building-contributing.md#2025-04-19_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @amplitude/ampli\n```\n\n----------------------------------------\n\nTITLE: Querying Nested Maps with mquery in Go\nDESCRIPTION: This snippet demonstrates the usage of a custom 'mquery' package to query nested maps in Go. It creates a complex map structure and uses the Query function to access various nested values using dot notation. The example includes querying strings, nested maps, arrays, and handling non-existent or nil values.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/otiai10/mint/mquery/README.md#2025-04-19_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nimport mquery\n\nvar m = map[string]interface{}{\n\t\"foo\": \"bar\",\n\t\"hoge\": map[string]interface{}{\n\t\t\"name\": \"otiai10\",\n\t},\n\t\"fuga\": map[int]map[string]interface{}{\n\t\t0: {\"greet\": \"Hello\"},\n\t\t1: {\"greet\": \"こんにちは\"},\n\t},\n\t\"langs\":    []string{\"Go\", \"JavaScript\", \"English\"},\n\t\"baz\":      nil,\n\t\"required\": false,\n}\n\nfunc main() {\n    fmt.Println(\n        Query(m, \"foo\"), // \"bar\"\n        Query(m, \"hoge.name\"), // \"otiai10\"\n        Query(m, \"fuga.0.greet\"), // \"Hello\"\n        Query(m, \"langs.2\"), // \"English\"\n        Query(m, \"required\"), // false\n        Query(m, \"baz.biz\"), // nil\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Badge for OpenTelemetry Metric Embedded Package\nDESCRIPTION: Markdown code that displays a pkg.go.dev documentation badge with a link to the OpenTelemetry metric embedded package documentation.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/go.opentelemetry.io/otel/metric/embedded/README.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/metric/embedded)](https://pkg.go.dev/go.opentelemetry.io/otel/metric/embedded)\n```\n\n----------------------------------------\n\nTITLE: Installing DDEV in Devcontainer\nDESCRIPTION: Markdown heading and installation context for DDEV setup in a development container environment.\nSOURCE: https://github.com/ddev/ddev/blob/main/containers/devcontainers/install-ddev/README.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Install DDEV\n```\n\n----------------------------------------\n\nTITLE: WhiteList Function Example in Go\nDESCRIPTION: Demonstrates the WhiteList function that removes all characters from a string except those specified in the allowed range.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-19_snippet_17\n\nLANGUAGE: go\nCODE:\n```\nprintln(govalidator.WhiteList(\"a3a43a5a4a3a2a23a4a5a4a3a4\", \"a-z\") == \"aaaaaaaaaaaa\")\n```\n\n----------------------------------------\n\nTITLE: Contributor Grid Layout in HTML\nDESCRIPTION: HTML table structure that displays contributor information in a grid with avatars, names and contribution links. Each cell contains a contributor's GitHub avatar, profile link, name and code contribution indicator.\nSOURCE: https://github.com/ddev/ddev/blob/main/pkg/ddevapp/testdata/TestDetectAppType/magento/README.md#2025-04-19_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\"><a href=\"https://github.com/nintenic\"><img src=\"https://avatars0.githubusercontent.com/u/1317618?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Nicholas Graham</b></sub></a><br /><a href=\"https://github.com/OpenMage/magento-lts/commits?author=nintenic\" title=\"Code\">💻</a></td>\n```\n\n----------------------------------------\n\nTITLE: Displaying Email Address for Security Reports in Markdown\nDESCRIPTION: This snippet shows how to format an email address in Markdown, specifically for reporting security issues to Magento's Product Security Incident Response Team (PSIRT).\nSOURCE: https://github.com/ddev/ddev/blob/main/pkg/ddevapp/testdata/TestDetectAppType/magento2/SECURITY.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`psirt@adobe.com`\n```\n\n----------------------------------------\n\nTITLE: String Conversion of Struct\nDESCRIPTION: Demonstrates converting a struct to string representation using ToString function.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-19_snippet_10\n\nLANGUAGE: go\nCODE:\n```\ntype User struct {\n\tFirstName string\n\tLastName string\n}\n\nstr := govalidator.ToString(&User{\"John\", \"Juan\"})\nprintln(str)\n```\n\n----------------------------------------\n\nTITLE: Installing JSONC Package with Go\nDESCRIPTION: Command to install the JSONC package using Go module system.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/muzzammil.xyz/jsonc/README.md#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ go get muzzammil.xyz/jsonc\n```\n\n----------------------------------------\n\nTITLE: Testing Code Coverage for Natural Sort\nDESCRIPTION: Command to run test coverage for the natural sort implementation, showing 100% coverage of statements.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/maruel/natural/README.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ go test -cover\nPASS\ncoverage: 100.0% of statements\nok     github.com/maruel/natural       0.012s\n```\n\n----------------------------------------\n\nTITLE: Using GoUtils Initials Function in Go\nDESCRIPTION: Demonstrates how to use the Initials function from GoUtils package to extract initials from a full name string. This example shows basic usage without error handling since the function doesn't return errors.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/Masterminds/goutils/README.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"github.com/Masterminds/goutils\"\n)\n\nfunc main() {\n\n    // EXAMPLE 1: A goutils function which returns no errors\n    fmt.Println (goutils.Initials(\"John Doe Foo\")) // Prints out \"JDF\"\n\n}\n```\n\n----------------------------------------\n\nTITLE: XSym Binary Content\nDESCRIPTION: Binary file containing a hex identifier (0008), MD5 hash (cbe2e39f20ece840785599db6c4d4e96), and text reference (sub1.txt).\nSOURCE: https://github.com/ddev/ddev/blob/main/pkg/fileutil/testdata/symlinks/subdir/sub1_link_in_subdir.txt#2025-04-19_snippet_0\n\nLANGUAGE: binary\nCODE:\n```\nXSym\\n0008\\ncbe2e39f20ece840785599db6c4d4e96\\nsub1.txt\n```\n\n----------------------------------------\n\nTITLE: Container-Level SSL Trust with Dockerfile\nDESCRIPTION: Dockerfile snippet for adding corporate CA certificates inside DDEV containers. This enables applications within containers to make HTTPS connections through corporate proxies.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/networking.md#2025-04-19_snippet_2\n\nLANGUAGE: Dockerfile\nCODE:\n```\nCOPY mycorp-ca.crt /usr/local/share/ca-certificates/\nRUN update-ca-certificates\n```\n\n----------------------------------------\n\nTITLE: Custom Validator Function Signature in Go\nDESCRIPTION: This snippet shows the old and new signatures for custom validator functions in GoValidator. The new signature includes a context parameter for dependent validation.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-19_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/asaskevich/govalidator\"\n\n// old signature\nfunc(i interface{}) bool\n\n// new signature\nfunc(i interface{}, o interface{}) bool\n```\n\n----------------------------------------\n\nTITLE: Testing Docker Pull Through Proxy\nDESCRIPTION: Commands to test Docker's ability to pull images through the configured Squid proxy.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/developers/network-test-environments.md#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nexport HTTPS_PROXY=http://squid.host-only:3128\ndocker pull alpine\n```\n\n----------------------------------------\n\nTITLE: Pushing Data from DDEV to Upsun\nDESCRIPTION: Command to upload local database and files to Upsun. Note that this is potentially dangerous as it can overwrite production data, so it's not recommended for regular use.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/providers/upsun.md#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nddev push upsun\n```\n\n----------------------------------------\n\nTITLE: Adding Float64 Arithmetic Functions in Go\nDESCRIPTION: Added new functions for float64 arithmetic: addf, add1f, subf, divf, mulf, maxf, minf.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/Masterminds/sprig/v3/CHANGELOG.md#2025-04-19_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n- #181: Added float64 arithmetic addf, add1f, subf, divf, mulf, maxf, and minf\n```\n\n----------------------------------------\n\nTITLE: Installing Progress Bar Package\nDESCRIPTION: Instructions for installing the progress bar package using go get command\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/cheggaaa/pb/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/cheggaaa/pb/v3\n```\n\n----------------------------------------\n\nTITLE: Linux Machine ID Retrieval\nDESCRIPTION: Commands to retrieve machine ID on Linux systems from dbus or system machine-id\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/denisbrodbeck/machineid/README.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncat /var/lib/dbus/machine-id\n# or when not found (e.g. Fedora 20)\ncat /etc/machine-id\n```\n\n----------------------------------------\n\nTITLE: Multiple Progress Bars in Go\nDESCRIPTION: Illustrates how to create and manage multiple progress bars concurrently using goroutines and a wait group. This feature is noted as experimental and unstable.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/cheggaaa/pb/README_V1.md#2025-04-19_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n    \"math/rand\"\n    \"sync\"\n    \"time\"\n\n    \"github.com/cheggaaa/pb\"\n)\n\nfunc main() {\n    // create bars\n    first := pb.New(200).Prefix(\"First \")\n    second := pb.New(200).Prefix(\"Second \")\n    third := pb.New(200).Prefix(\"Third \")\n    // start pool\n    pool, err := pb.StartPool(first, second, third)\n    if err != nil {\n        panic(err)\n    }\n    // update bars\n    wg := new(sync.WaitGroup)\n    for _, bar := range []*pb.ProgressBar{first, second, third} {\n        wg.Add(1)\n        go func(cb *pb.ProgressBar) {\n            for n := 0; n < 200; n++ {\n                cb.Increment()\n                time.Sleep(time.Millisecond * time.Duration(rand.Intn(100)))\n            }\n            cb.Finish()\n            wg.Done()\n        }(bar)\n    }\n    wg.Wait()\n    // close pool\n    pool.Stop()\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Supported Versions in Markdown Table\nDESCRIPTION: This snippet shows a markdown table that lists the supported versions of semver. It indicates that version 3.x is supported, while versions 2.x and 1.x are not.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/Masterminds/semver/v3/SECURITY.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Version | Supported          |\n| ------- | ------------------ |\n| 3.x     | :white_check_mark: |\n| 2.x     | :x:                |\n| 1.x     | :x:                |\n```\n\n----------------------------------------\n\nTITLE: Pushing a Custom DDEV Docker Image\nDESCRIPTION: Pushes a custom DDEV Docker image to Docker Hub with a specific tag, used for testing Docker image changes.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/developers/building-contributing.md#2025-04-19_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncd containers/ddev-webserver\nmake push VERSION=<tag>\n```\n\n----------------------------------------\n\nTITLE: Adding Dictionary Lookup Function in Go\nDESCRIPTION: Added a new dig function for nested lookups in dictionaries.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/Masterminds/sprig/v3/CHANGELOG.md#2025-04-19_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n- #254: Added dig function for dicts\n```\n\n----------------------------------------\n\nTITLE: OS X Machine ID Retrieval\nDESCRIPTION: Command to retrieve IOPlatformUUID on macOS systems\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/denisbrodbeck/machineid/README.md#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nioreg -rd1 -c IOPlatformExpertDevice | grep IOPlatformUUID\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Header and Initial Release\nDESCRIPTION: Basic changelog structure showing the project's first logged release v1.0.0-rc1 with a note about breaking changes.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/go-logr/logr/CHANGELOG.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CHANGELOG\n\n## v1.0.0-rc1\n\nThis is the first logged release.  Major changes (including breaking changes)\nhave occurred since earlier tags.\n```\n\n----------------------------------------\n\nTITLE: Flag Name Normalization in Go\nDESCRIPTION: Examples of custom flag name normalization functions for handling different separator characters.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-19_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfunc wordSepNormalizeFunc(f *pflag.FlagSet, name string) pflag.NormalizedName {\n\tfrom := []string{\"-\", \"_\"}\n\tto := \".\"\n\tfor _, sep := range from {\n\t\tname = strings.Replace(name, sep, to, -1)\n\t}\n\treturn pflag.NormalizedName(name)\n}\n\nmyFlagSet.SetNormalizeFunc(wordSepNormalizeFunc)\n```\n\n----------------------------------------\n\nTITLE: Mathematical Functions for Template Operations\nDESCRIPTION: Math functions floor, ceil, and round added in v2.13.0 for numerical operations in templates.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/Masterminds/sprig/v3/CHANGELOG.md#2025-04-19_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nfloor\nceil\nround\n```\n\n----------------------------------------\n\nTITLE: Installing OpenMage via Composer\nDESCRIPTION: Commands to install OpenMage/Magento-LTS using Composer package manager. Shows both stable and development version installation options.\nSOURCE: https://github.com/ddev/ddev/blob/main/pkg/ddevapp/testdata/TestDetectAppType/magento/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require openmage/magento-lts\":\"^19.4.0\"\n```\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require openmage/magento-lts\":\"dev-main\"\n```\n\n----------------------------------------\n\nTITLE: Importing Heredoc Package in Go\nDESCRIPTION: This snippet shows how to import the heredoc package in a Go program. It uses the v2 version of the package.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/MakeNowJust/heredoc/v2/README.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/MakeNowJust/heredoc/v2\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Sponsor Logos and Links in HTML\nDESCRIPTION: This HTML snippet creates a grid of sponsor logos with links to their websites. It uses anchor tags with target=\"_blank\" for opening links in new tabs and img tags to display sponsor avatars from OpenCollective.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/chzyer/readline/README.md#2025-04-19_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"https://opencollective.com/readline/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/readline/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/readline/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/readline/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/readline/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/readline/sponsor/2/avatar.svg\"></a>\n<!-- ... (repeated for sponsors 3-29) ... -->\n<a href=\"https://opencollective.com/readline/sponsor/29/website\" target=\"_blank\"><img src=\"https://opencollective.com/readline/sponsor/29/avatar.svg\"></a>\n```\n\n----------------------------------------\n\nTITLE: Running Local Go Doc Site\nDESCRIPTION: Commands to install and run a local documentation server for Go packages.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-19_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ngo install golang.org/x/pkgsite/cmd/pkgsite@latest\npkgsite\n```\n\n----------------------------------------\n\nTITLE: Markdown Badge for OpenTelemetry Metric Noop Package\nDESCRIPTION: Markdown code displaying a pkg.go.dev badge and link for the OpenTelemetry metric noop package.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/go.opentelemetry.io/otel/metric/noop/README.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/metric/noop)](https://pkg.go.dev/go.opentelemetry.io/otel/metric/noop)\n```\n\n----------------------------------------\n\nTITLE: Running Go Generate for the Entire Repository\nDESCRIPTION: Shell command to execute 'go generate' for all packages in the repository, ensuring auto-generated code is up to date.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/Microsoft/go-winio/README.md#2025-04-19_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n> go generate ./...\n```\n\n----------------------------------------\n\nTITLE: Markdown Package Badge\nDESCRIPTION: Package badge markdown code that links to the Go package documentation on pkg.go.dev\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/go.opentelemetry.io/otel/trace/embedded/README.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/trace/embedded)](https://pkg.go.dev/go.opentelemetry.io/otel/trace/embedded)\n```\n\n----------------------------------------\n\nTITLE: Running the DDEV-XHGui Docker Container Using Bash\nDESCRIPTION: Command to run the ddev/ddev-xhgui Docker container interactively with a bash shell. This allows direct access to the container for debugging or exploration purposes.\nSOURCE: https://github.com/ddev/ddev/blob/main/containers/ddev-xhgui/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm ddev/ddev-xhgui:<tag> bash\n```\n\n----------------------------------------\n\nTITLE: Stable Release Versions\nDESCRIPTION: Shows the first stable release versions of the modules.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/go.opentelemetry.io/otel/VERSIONING.md#2025-04-19_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n* `otel`: `v1.0.0`\n* `otel/trace`: `v1.0.0`\n* `otel/baggage`: `v1.0.0`\n* `otel/sdk/trace`: `v1.0.0`\n```\n\n----------------------------------------\n\nTITLE: Using StepString Function for Unicode Iteration in Go\nDESCRIPTION: Demonstrates low-level string iteration using StepString function to process Unicode grapheme clusters\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/rivo/uniseg/README.md#2025-04-19_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nstr := \"🇩🇪🏳️‍🌈\"\nstate := -1\nvar c string\nfor len(str) > 0 {\n\tc, str, _, state = uniseg.StepString(str, state)\n\tfmt.Printf(\"%x \", []rune(c))\n}\n// [1f1e9 1f1ea] [1f3f3 fe0f 200d 1f308]\n```\n\n----------------------------------------\n\nTITLE: Configuring Squid for SSL Bumping\nDESCRIPTION: Squid configuration that enables SSL interception (bumping) on port 3128. The config enables dynamic certificate generation and allows all HTTP access.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/developers/network-test-environments.md#2025-04-19_snippet_2\n\nLANGUAGE: conf\nCODE:\n```\nhttp_port 3128 ssl-bump cert=/etc/squid/mitm.crt key=/etc/squid/mitm.key generate-host-certificates=on dynamic_cert_mem_cache_size=4MB\n\nsslcrtd_program /usr/lib/squid/security_file_certgen -s /var/lib/ssl_db -M 4MB\nsslcrtd_children 5\n\nssl_bump server-first all\n\nhttp_access allow all\n```\n\n----------------------------------------\n\nTITLE: Rendering Contributors Table in HTML\nDESCRIPTION: HTML table structure for displaying project contributors with aligned cells containing profile links, avatars, names and contribution indicators. Each contributor entry includes a centered layout with GitHub avatar, profile link, and contribution type icon.\nSOURCE: https://github.com/ddev/ddev/blob/main/pkg/ddevapp/testdata/TestDetectAppType/magento/README.md#2025-04-19_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\"><a href=\"http://publicus.nl/\"><img src=\"https://avatars.githubusercontent.com/u/249633?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Justin van Elst</b></sub></a><br /><a href=\"https://github.com/OpenMage/magento-lts/commits?author=MrGekko\" title=\"Code\">💻</a></td>\n```\n\n----------------------------------------\n\nTITLE: Adding Filepath Functions in Go\nDESCRIPTION: Added new functions for working with file paths: osBase, osDir, osExt, osClean, osIsAbs.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/Masterminds/sprig/v3/CHANGELOG.md#2025-04-19_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n- #261: Added filepath functions osBase, osDir, osExt, osClean, osIsAbs\n```\n\n----------------------------------------\n\nTITLE: Implementing Documentation Callouts in Markdown\nDESCRIPTION: Demonstrates the proper syntax and usage of note, tip, and warning callouts in DDEV's documentation using markdown syntax. Shows both headed and unheaded callout formats.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/developers/writing-style-guide.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n!!!note \"This is a note.\"\n    Use it for extraneous asides.\n\n!!!tip \"This is a tip.\"\n    Use it for helpful asides.\n\n!!!warning \"This is a warning.\"\n    Use it for asides that should have urgent emphasis.\n\n!!!note\n    This is a note without a heading, which should only be used with the author isn't clever enough to come up with a succinct one. (The \"Note\" is added automatically.)\n```\n\n----------------------------------------\n\nTITLE: Developer Certificate of Origin Text in Markdown\nDESCRIPTION: This snippet contains the full text of the Developer Certificate of Origin (DCO) version 1.1. It outlines the terms under which contributions are made to the project, ensuring that contributors have the right to submit their work.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/distribution/reference/CONTRIBUTING.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\nDeveloper Certificate of Origin\nVersion 1.1\n\nCopyright (C) 2004, 2006 The Linux Foundation and its contributors.\n660 York Street, Suite 102,\nSan Francisco, CA 94110 USA\n\nEveryone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed.\n\nDeveloper's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n\n(a) The contribution was created in whole or in part by me and I\n    have the right to submit it under the open source license\n    indicated in the file; or\n\n(b) The contribution is based upon previous work that, to the best\n    of my knowledge, is covered under an appropriate open source\n    license and I have the right under that license to submit that\n    work with modifications, whether created in whole or in part\n    by me, under the same open source license (unless I am\n    permitted to submit under a different license), as indicated\n    in the file; or\n\n(c) The contribution was provided directly to me by some other\n    person who certified (a), (b) or (c) and I have not modified\n    it.\n\n(d) I understand and agree that this project and the contribution\n    are public and that a record of the contribution (including all\n    personal information I submit with it, including my sign-off) is\n    maintained indefinitely and may be redistributed consistent with\n    this project or the open source license(s) involved.\n```\n```\n\n----------------------------------------\n\nTITLE: Adding randBytes Function in Go\nDESCRIPTION: Added a new randBytes function to generate random byte slices.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/Masterminds/sprig/v3/CHANGELOG.md#2025-04-19_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n- #253: Added randBytes function\n```\n\n----------------------------------------\n\nTITLE: Using Blockquote Syntax in Markdown for DDEV Documentation\nDESCRIPTION: Example of a blockquote in rendered Markdown, showing how quoted text appears in the final documentation. This demonstrates the proper styling for verbatim quotes from other sources.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/developers/writing-style-guide.md#2025-04-19_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n```\n> Error: your quote style should not always be in a fenced block.\n```\n```\n\n----------------------------------------\n\nTITLE: Email Link in Markdown\nDESCRIPTION: Markdown formatted email link for reporting code of conduct violations to the project team\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/manifoldco/promptui/CODE_OF_CONDUCT.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[hello@manifold.co](mailto:hello@manifold.co)\n```\n\n----------------------------------------\n\nTITLE: Shorthand Flag Definition in Go\nDESCRIPTION: Demonstrates how to define flags with single-letter shorthand aliases.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-19_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nvar ip = flag.IntP(\"flagname\", \"f\", 1234, \"help message\")\nvar flagvar bool\nfunc init() {\n\tflag.BoolVarP(&flagvar, \"boolname\", \"b\", true, \"help message\")\n}\nflag.VarP(&flagVal, \"varname\", \"v\", \"help message\")\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice Template\nDESCRIPTION: Standard license notice template to be included in source files. The template includes placeholders for copyright year and owner information, with instructions to include proper license reference and disclaimers.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/Masterminds/goutils/LICENSE.txt#2025-04-19_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Loading Sprig FuncMap in Go Templates\nDESCRIPTION: Example showing how to import and initialize Sprig's FuncMap with Go's template package. The FuncMap must be set before loading templates.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/Masterminds/sprig/v3/README.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  \"github.com/Masterminds/sprig/v3\"\n  \"html/template\"\n)\n\n// This example illustrates that the FuncMap *must* be set before the\n// templates themselves are loaded.\ntpl := template.Must(\n  template.New(\"base\").Funcs(sprig.FuncMap()).ParseGlob(\"*.html\")\n)\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Natural Sort in Go\nDESCRIPTION: Benchmark results for the natural sort implementation on Go 1.18.3. The benchmarks compare different scenarios like sorting digit groups, strings only, and mixed content.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/maruel/natural/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ go test -bench=. -cpu 1\ngoos: linux\ngoarch: amd64\npkg: github.com/maruel/natural\ncpu: Intel(R) Core(TM) i7-10700 CPU @ 2.90GHz\nBenchmarkLessDigitsTwoGroupsNative 331287298     3.597 ns/op   0 B/op   0 allocs/op\nBenchmarkLessDigitsTwoGroups        32479050    36.55 ns/op    0 B/op   0 allocs/op\nBenchmarkLessStringOnly            157775884     7.603 ns/op   0 B/op   0 allocs/op\nBenchmarkLessDigitsOnly             69210796    17.52 ns/op    0 B/op   0 allocs/op\nBenchmarkLess10Blocks                6331066   190.8 ns/op     0 B/op   0 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Defining Integer Flags in Go\nDESCRIPTION: Demonstrates how to define an integer flag with a default value and help message.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-19_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar ip *int = flag.Int(\"flagname\", 1234, \"help message for flagname\")\n```\n\n----------------------------------------\n\nTITLE: DDEV Generated File Header\nDESCRIPTION: A comment header indicating that the file was automatically generated by DDEV. This marker is likely used to identify files that are managed by the DDEV system and shouldn't be manually edited.\nSOURCE: https://github.com/ddev/ddev/blob/main/cmd/ddev/cmd/testdata/TestCmdAddonComplex/recipe/junk_darwin_arm64.txt#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n#ddev-generated\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Server Settings\nDESCRIPTION: MySQL configuration file that disables host cache and query cache while enabling InnoDB large prefix support and barracuda file format. The settings are designed for compatibility across MySQL 5.x and 8.x versions.\nSOURCE: https://github.com/ddev/ddev/blob/main/containers/ddev-dbserver/files/etc/mysql/version-conf.d/mysql_5.5.cnf.txt#2025-04-19_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[mysqld]\n\n# skip-host-cache is no longer valid in mysql 8.x, but still works in mysql 5\nskip-host-cache\nsymbolic-links=0\nquery-cache-type               = 0\nquery-cache-size               = 0\n\ninnodb_large_prefix=true\ninnodb_file_format=barracuda\n```\n\n----------------------------------------\n\nTITLE: Capturing HTTP Metrics with httpsnoop in Go\nDESCRIPTION: This code snippet demonstrates how to use httpsnoop to wrap an existing HTTP handler and log metrics for each request. It captures the HTTP method, URL, status code, response time, and bytes written.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/felixge/httpsnoop/README.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// myH is your app's http handler, perhaps a http.ServeMux or similar.\nvar myH http.Handler\n// wrappedH wraps myH in order to log every request.\nwrappedH := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\tm := httpsnoop.CaptureMetrics(myH, w, r)\n\tlog.Printf(\n\t\t\"%s %s (code=%d dt=%s written=%d)\",\n\t\tr.Method,\n\t\tr.URL,\n\t\tm.Code,\n\t\tm.Duration,\n\t\tm.Written,\n\t)\n})\nhttp.ListenAndServe(\":8080\", wrappedH)\n```\n\n----------------------------------------\n\nTITLE: Developer Certificate of Origin Agreement Text\nDESCRIPTION: The official Developer Certificate of Origin (DCO) version 1.1 text that contributors must agree to when submitting patches. This document outlines the terms under which contributions are made and the rights granted to the project.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/opencontainers/go-digest/CONTRIBUTING.md#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nDeveloper Certificate of Origin\nVersion 1.1\n\nCopyright (C) 2004, 2006 The Linux Foundation and its contributors.\n1 Letterman Drive\nSuite D4700\nSan Francisco, CA, 94129\n\nEveryone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed.\n\n\nDeveloper's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n\n(a) The contribution was created in whole or in part by me and I\n    have the right to submit it under the open source license\n    indicated in the file; or\n\n(b) The contribution is based upon previous work that, to the best\n    of my knowledge, is covered under an appropriate open source\n    license and I have the right under that license to submit that\n    work with modifications, whether created in whole or in part\n    by me, under the same open source license (unless I am\n    permitted to submit under a different license), as indicated\n    in the file; or\n\n(c) The contribution was provided directly to me by some other\n    person who certified (a), (b) or (c) and I have not modified\n    it.\n\n(d) I understand and agree that this project and the contribution\n    are public and that a record of the contribution (including all\n    personal information I submit with it, including my sign-off) is\n    maintained indefinitely and may be redistributed consistent with\n    this project or the open source license(s) involved.\n```\n\n----------------------------------------\n\nTITLE: Converting Values to String with ToString in Go\nDESCRIPTION: Examples of using cast.ToString() to convert various data types to string representations. Demonstrates conversion of strings, integers, floats, byte slices, nil values, and interfaces.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/spf13/cast/README.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncast.ToString(\"mayonegg\")         // \"mayonegg\"\ncast.ToString(8)                  // \"8\"\ncast.ToString(8.31)               // \"8.31\"\ncast.ToString([]byte(\"one time\")) // \"one time\"\ncast.ToString(nil)                // \"\"\n\nvar foo interface{} = \"one more time\"\ncast.ToString(foo)                // \"one more time\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Shared Configuration Pattern in Go\nDESCRIPTION: Shows how to implement shared configuration patterns for multiple structs with common and distinct options.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-19_snippet_12\n\nLANGUAGE: go\nCODE:\n```\n// config holds options for all animals.\ntype config struct {\n\tWeight      float64\n\tColor       string\n\tMaxAltitude float64\n}\n\n// DogOption apply Dog specific options.\ntype DogOption interface {\n\tapplyDog(config) config\n}\n\n// BirdOption apply Bird specific options.\ntype BirdOption interface {\n\tapplyBird(config) config\n}\n\n// Option apply options for all animals.\ntype Option interface {\n\tBirdOption\n\tDogOption\n}\n\ntype weightOption float64\n\nfunc (o weightOption) applyDog(c config) config {\n\tc.Weight = float64(o)\n\treturn c\n}\n\nfunc (o weightOption) applyBird(c config) config {\n\tc.Weight = float64(o)\n\treturn c\n}\n\nfunc WithWeight(w float64) Option { return weightOption(w) }\n\ntype furColorOption string\n\nfunc (o furColorOption) applyDog(c config) config {\n\tc.Color = string(o)\n\treturn c\n}\n\nfunc WithFurColor(c string) DogOption { return furColorOption(c) }\n\ntype maxAltitudeOption float64\n\nfunc (o maxAltitudeOption) applyBird(c config) config {\n\tc.MaxAltitude = float64(o)\n\treturn c\n}\n\nfunc WithMaxAltitude(a float64) BirdOption { return maxAltitudeOption(a) }\n\nfunc NewDog(name string, o ...DogOption) Dog    {…}\nfunc NewBird(name string, o ...BirdOption) Bird {…}\n```\n\n----------------------------------------\n\nTITLE: Advanced GoDotEnv Usage Examples\nDESCRIPTION: Various advanced usage patterns including autoloading, multiple file loading, and different parsing methods.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/joho/godotenv/README.md#2025-04-19_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nimport _ \"github.com/joho/godotenv/autoload\"\n```\n\nLANGUAGE: go\nCODE:\n```\ngodotenv.Load(\"somerandomfile\")\ngodotenv.Load(\"filenumberone.env\", \"filenumbertwo.env\")\n```\n\nLANGUAGE: go\nCODE:\n```\nvar myEnv map[string]string\nmyEnv, err := godotenv.Read()\n\ns3Bucket := myEnv[\"S3_BUCKET\"]\n```\n\nLANGUAGE: go\nCODE:\n```\nreader := getRemoteFile()\nmyEnv, err := godotenv.Parse(reader)\n```\n\nLANGUAGE: go\nCODE:\n```\ncontent := getRemoteFileContent()\nmyEnv, err := godotenv.Unmarshal(content)\n```\n\n----------------------------------------\n\nTITLE: Final Release Candidate Versions\nDESCRIPTION: Shows release candidate versions for all modules including newly stabilized metric packages.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/go.opentelemetry.io/otel/VERSIONING.md#2025-04-19_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n* `otel`: `v1.1.0-RC1`\n* `otel/trace`: `v1.1.0-RC1`\n* `otel/metric`: `v1.1.0-RC1`\n* `otel/baggage`: `v1.1.0-RC1`\n* `otel/sdk/trace`: `v1.1.0-RC1`\n* `otel/sdk/metric`: `v1.1.0-RC1`\n```\n\n----------------------------------------\n\nTITLE: Configuring DDEV for Production Hosting with Let's Encrypt\nDESCRIPTION: Command to configure DDEV global settings for production hosting, enabling Let's Encrypt, using hardened images, and configuring the router to listen on all interfaces.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/topics/hosting.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddev config global --router-bind-all-interfaces --omit-containers=ddev-ssh-agent --use-hardened-images --performance-mode=none --use-letsencrypt --letsencrypt-email=you@example.com\n```\n\n----------------------------------------\n\nTITLE: ReactPHP Server Binding Only to Localhost\nDESCRIPTION: Example of a ReactPHP server binding only to localhost (127.0.0.1), which limits access to the local container and prevents access from the host machine or other containers.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/extend/customization-extendibility.md#2025-04-19_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$socket = new React\\Socket\\SocketServer('127.0.0.1:3000');\n```\n\n----------------------------------------\n\nTITLE: Removing Multiple Hosts for Single IP from Hosts File in Go\nDESCRIPTION: This snippet shows how to remove multiple hosts for a single IP address from the hosts file using the variadic Remove method of the Hosts object.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/goodhosts/hostsfile/README.md#2025-04-19_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nerr := hosts.Remove(\"192.168.1.1\", \"my-hostname\", \"another-hostname\")\n```\n\n----------------------------------------\n\nTITLE: Parsing Semantic Versions in Go\nDESCRIPTION: Demonstrates how to parse a semantic version string into a Version object using the NewVersion function. This function attempts to coerce the input into a valid semantic version if possible.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/Masterminds/semver/v3/README.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nv, err := semver.NewVersion(\"1.2.3-beta.1+build345\")\n```\n\n----------------------------------------\n\nTITLE: Issue Filing Checklist in Markdown\nDESCRIPTION: A numbered list of required information when filing Go issues, including version details, system specs, and problem description.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/golang.org/x/term/CONTRIBUTING.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1.  What version of Go are you using (`go version`)?\n2.  What operating system and processor architecture are you using?\n3.  What did you do?\n4.  What did you expect to see?\n5.  What did you see instead?\n```\n\n----------------------------------------\n\nTITLE: Non-interactive File Import with ddev\nDESCRIPTION: Examples of using ddev import-files with command-line flags to avoid interactive prompts. Shows how to specify source files and target directories.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/usage/cli.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nddev import-files --source=/tmp/files.tgz\nddev import-files --target=../private --source=/tmp/files.tgz\n```\n\n----------------------------------------\n\nTITLE: Displaying Supported DDEV Versions in Markdown Table\nDESCRIPTION: A markdown table showing which versions of DDEV are currently supported for security updates. Version 0.3.x is supported, while versions below 0.3 are not.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/dario.cat/mergo/SECURITY.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Version | Supported          |\n| ------- | ------------------ |\n| 0.3.x   | :white_check_mark: |\n| < 0.3   | :x:                |\n```\n\n----------------------------------------\n\nTITLE: Creating Hosts Object from Custom File Location in Go\nDESCRIPTION: This snippet shows how to create a Hosts object from a custom file location instead of the system default. This is useful for testing or systems with non-standard hosts file locations.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/goodhosts/hostsfile/README.md#2025-04-19_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nhosts, err := hostsfile.NewCustomHosts(\"./my-custom-hostsfile\")\n```\n\n----------------------------------------\n\nTITLE: Installing Cobra CLI Generator\nDESCRIPTION: Command to install the cobra-cli generator tool for bootstrapping Cobra applications.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/spf13/cobra/README.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngo install github.com/spf13/cobra-cli@latest\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Logging for Traefik Router\nDESCRIPTION: Bash commands to enable debug output for the Traefik router by copying a logging configuration example and restarting DDEV.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/topics/hosting.md#2025-04-19_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncp ~/.ddev/traefik/static_config.loglevel.yaml.example ~/.ddev/traefik/static_config.loglevel.yaml\nddev poweroff\n```\n\n----------------------------------------\n\nTITLE: Reversing Unicode Strings in Go\nDESCRIPTION: Demonstrates how to reverse a string while preserving Unicode grapheme clusters\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/rivo/uniseg/README.md#2025-04-19_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfmt.Println(uniseg.ReverseString(\"🇩🇪🏳️‍🌈\"))\n// 🏳️‍🌈🇩🇪\n```\n\n----------------------------------------\n\nTITLE: Setting NoOptDefVal for Flags in Go\nDESCRIPTION: Shows how to set default values for flags when no option is provided.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-19_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nvar ip = flag.IntP(\"flagname\", \"f\", 1234, \"help message\")\nflag.Lookup(\"flagname\").NoOptDefVal = \"4321\"\n```\n\n----------------------------------------\n\nTITLE: Installing Additional PHP Version in DDEV\nDESCRIPTION: Example of installing an additional PHP version (7.4) alongside the primary PHP version using the install_php_extensions.sh script.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/content/users/extend/customizing-images.md#2025-04-19_snippet_9\n\nLANGUAGE: dockerfile\nCODE:\n```\nRUN /usr/local/bin/install_php_extensions.sh \"php7.4\" \"${TARGETARCH}\"\n```\n\n----------------------------------------\n\nTITLE: Merging with Override in Mergo\nDESCRIPTION: Shows how to use Mergo to merge structs while overwriting values using the WithOverride transformer.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/dario.cat/mergo/README.md#2025-04-19_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nif err := mergo.Merge(&dst, src, mergo.WithOverride); err != nil {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Flags to Variables in Go\nDESCRIPTION: Shows how to bind a flag to a variable using the Var functions.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-19_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nvar flagvar int\nfunc init() {\n    flag.IntVar(&flagvar, \"flagname\", 1234, \"help message for flagname\")\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Google UUID Package\nDESCRIPTION: Command to install the Google UUID package using Go's package manager. This will download and install the package from GitHub to your Go workspace.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/google/uuid/README.md#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/google/uuid\n```\n\n----------------------------------------\n\nTITLE: Implementing Declared Type Options in Go\nDESCRIPTION: Shows how to implement configuration options for custom declared types.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-19_snippet_10\n\nLANGUAGE: go\nCODE:\n```\ntype myTypeOption struct {\n\tMyType MyType\n}\n\nfunc (o myTypeOption) apply(c config) config {\n\tc.MyType = o.MyType\n    return c\n}\n\n// WithMyType sets T to have include MyType.\nfunc WithMyType(t MyType) Option {\n\treturn myTypeOption{t}\n}\n```\n\n----------------------------------------\n\nTITLE: Merging Pointers with Mergo\nDESCRIPTION: Illustrates how to merge structs with pointer fields using Mergo, including the WithoutDereference option.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/dario.cat/mergo/README.md#2025-04-19_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"dario.cat/mergo\"\n)\n\ntype Foo struct {\n\tA *string\n\tB int64\n}\n\nfunc main() {\n\tfirst := \"first\"\n\tsecond := \"second\"\n\tsrc := Foo{\n\t\tA: &first,\n\t\tB: 2,\n\t}\n\n\tdest := Foo{\n\t\tA: &second,\n\t\tB: 1,\n\t}\n\n\tmergo.Merge(&dest, src, mergo.WithOverride, mergo.WithoutDereference)\n}\n```\n\n----------------------------------------\n\nTITLE: XSym Link Definition\nDESCRIPTION: XSym format symbolic link definition containing hex size (0042), MD5 hash, and target path information.\nSOURCE: https://github.com/ddev/ddev/blob/main/pkg/fileutil/testdata/symlinks/biglongdir3.txt#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nXSym\n0042\n9b4557f4243981cf847cf7fd304af785\nsubdir/bigdir2/biglongdir3/biglongdir3.txt\n```\n\n----------------------------------------\n\nTITLE: Setting Up Development Environment with Go Get\nDESCRIPTION: Alternative method to set up the development environment using Go get command.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-19_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngo get -d go.opentelemetry.io/otel\n```\n\n----------------------------------------\n\nTITLE: Customizing Progress Bar Format in Go\nDESCRIPTION: Demonstrates how to customize the look-and-feel of the progress bar by setting a custom format string.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/cheggaaa/pb/README_V1.md#2025-04-19_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\nbar.Format(\"<.- >\")\n```\n\n----------------------------------------\n\nTITLE: Displaying XSym Data for File Reference\nDESCRIPTION: This snippet shows the content of an XSym file, which includes a size value, a hexadecimal identifier, and a file path. It appears to be a symbolic link or reference to a file named 'biglongdir3.txt' in a nested directory structure.\nSOURCE: https://github.com/ddev/ddev/blob/main/pkg/fileutil/testdata/symlinks/subdir/biglongdir3.txt#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nXSym\n0035\n382219eb7a071530a5fe1babe77ae7be\nbigdir2/biglongdir3/biglongdir3.txt\n```\n\n----------------------------------------\n\nTITLE: Generating Semantic Conventions in OpenTelemetry Go\nDESCRIPTION: Commands to generate new semantic conventions package using a specified version tag. Requires setting the TAG environment variable before running the make command.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/go.opentelemetry.io/otel/RELEASING.md#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nexport TAG=\"v1.30.0\" # Change to the release version you are generating.\nmake semconv-generate # Uses the exported TAG.\n```\n\n----------------------------------------\n\nTITLE: URL Validation Example\nDESCRIPTION: Demonstrates how to validate a URL string using the IsURL function.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/asaskevich/govalidator/README.md#2025-04-19_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nprintln(govalidator.IsURL(`http://user@pass:domain.com/path/page`))\n```\n\n----------------------------------------\n\nTITLE: Constant Declaration Example - Incorrect Type Assignment\nDESCRIPTION: Example showing incorrect constant type declaration where constants a and b don't share the same type. This was identified as a bug and fixed.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/ulikunitz/xz/TODO.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nconst (\n  a byte = 0x1\n  b      = 0x2\n)\n```\n\n----------------------------------------\n\nTITLE: Patch and Breaking Change Updates\nDESCRIPTION: Demonstrates version updates combining patch fixes and breaking changes in unstable modules.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/go.opentelemetry.io/otel/VERSIONING.md#2025-04-19_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n* `otel`: `v1.0.1`\n* `otel/trace`: `v1.0.1`\n* `otel/metric`: `v0.15.0`\n* `otel/baggage`: `v1.0.1`\n* `otel/sdk/trace`: `v1.0.1`\n* `otel/sdk/metric`: `v0.15.0`\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Baggage Package Badge\nDESCRIPTION: Markdown code displaying the Go package documentation badge from pkg.go.dev for the OpenTelemetry baggage package.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/go.opentelemetry.io/otel/baggage/README.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/baggage)](https://pkg.go.dev/go.opentelemetry.io/otel/baggage)\n```\n\n----------------------------------------\n\nTITLE: Example Contrib Module Path with Major Version v2\nDESCRIPTION: Example demonstrating the correct format for contrib repository module paths and imports for versions v2 and higher, including module declaration, requirements and import statements.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/go.opentelemetry.io/otel/VERSIONING.md#2025-04-19_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule go.opentelemetry.io/contrib/instrumentation/host/v2\nrequire go.opentelemetry.io/contrib/instrumentation/host/v2 v2.0.1\nimport \"go.opentelemetry.io/contrib/instrumentation/host/v2\"\n```\n\n----------------------------------------\n\nTITLE: Package Badge Markdown Link\nDESCRIPTION: Markdown code that displays a pkg.go.dev badge linking to OpenTelemetry codes package documentation.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/go.opentelemetry.io/otel/codes/README.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/codes)](https://pkg.go.dev/go.opentelemetry.io/otel/codes)\n```\n\n----------------------------------------\n\nTITLE: Markdown Package Badge Link\nDESCRIPTION: Package documentation badge and link to pkg.go.dev reference for the OpenTelemetry propagation package\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/go.opentelemetry.io/otel/propagation/README.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/propagation)](https://pkg.go.dev/go.opentelemetry.io/otel/propagation)\n```\n\n----------------------------------------\n\nTITLE: Markdown Header and Badge for OpenTelemetry Metric API\nDESCRIPTION: A markdown header with a PkgGoDev badge that links to the OpenTelemetry metric package documentation.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/go.opentelemetry.io/otel/metric/README.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Metric API\n\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/metric)](https://pkg.go.dev/go.opentelemetry.io/otel/metric)\n```\n\n----------------------------------------\n\nTITLE: Rendering Contributors Table in HTML/Markdown\nDESCRIPTION: An HTML table structure embedded in markdown that displays contributor information including avatars, usernames, and contribution types. The table is styled with center-aligned cells and includes links to contributor profiles.\nSOURCE: https://github.com/ddev/ddev/blob/main/pkg/ddevapp/testdata/TestDetectAppType/magento/README.md#2025-04-19_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <tr>\n    <td align=\"center\"><a href=\"https://magento.stackexchange.com/users/46249/sv3n\"><img src=\"https://avatars1.githubusercontent.com/u/5022236?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>sv3n</b></sub></a><br /><a href=\"https://github.com/OpenMage/magento-lts/commits?author=sreichel\" title=\"Code\">💻</a></td>\n    <!-- Additional contributor cells follow similar pattern -->\n  </tr>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Markdown Header and Badge for OpenTelemetry Semconv Package\nDESCRIPTION: Markdown header and badge showing the package title and linking to the Go package documentation on pkg.go.dev.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/go.opentelemetry.io/otel/semconv/v1.20.0/README.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Semconv v1.20.0\n\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/semconv/v1.20.0)](https://pkg.go.dev/go.opentelemetry.io/otel/semconv/v1.20.0)\n```\n\n----------------------------------------\n\nTITLE: Markdown Header and Badge for OpenTelemetry Semconv Package\nDESCRIPTION: Markdown content showing the package version header and Go package documentation badge with links.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/go.opentelemetry.io/otel/semconv/v1.26.0/README.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Semconv v1.26.0\n\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/semconv/v1.26.0)](https://pkg.go.dev/go.opentelemetry.io/otel/semconv/v1.26.0)\n```\n\n----------------------------------------\n\nTITLE: Reference Link in Markdown\nDESCRIPTION: Markdown formatted reference link to the original Contributor Covenant document\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/github.com/manifoldco/promptui/CODE_OF_CONDUCT.md#2025-04-19_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[http://contributor-covenant.org/version/1/4](http://contributor-covenant.org/version/1/4)\n```\n\n----------------------------------------\n\nTITLE: Specifying codespell Package Version\nDESCRIPTION: Defines the required version of codespell package as 2.4.1 for consistent spell checking across the project.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/go.opentelemetry.io/otel/requirements.txt#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncodespell==2.4.1\n```\n\n----------------------------------------\n\nTITLE: Specifying setuptools Version in Python Requirements File\nDESCRIPTION: This line specifies that setuptools version 65.5.0 should be used in the project. It's typically included in a requirements.txt file for pip to install the correct version.\nSOURCE: https://github.com/ddev/ddev/blob/main/docs/setuptools.txt#2025-04-19_snippet_0\n\nLANGUAGE: Plain Text\nCODE:\n```\nsetuptools==65.5.0\n```\n\n----------------------------------------\n\nTITLE: DDEV Generated File Header\nDESCRIPTION: Header comment indicating this is a DDEV-generated configuration file\nSOURCE: https://github.com/ddev/ddev/blob/main/cmd/ddev/cmd/testdata/TestCmdAddonComplex/recipe/junk_darwin_amd64.txt#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#ddev-generated\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Config Structure in Go\nDESCRIPTION: Defines a basic configuration structure pattern with unexported fields. Used to hold configuration options for a package component.\nSOURCE: https://github.com/ddev/ddev/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-19_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// config contains configuration options for a thing.\ntype config struct {\n\t// options ...\n}\n```"
  }
]