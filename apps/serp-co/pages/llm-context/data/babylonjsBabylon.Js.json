[
  {
    "owner": "babylonjs",
    "repo": "babylon.js",
    "content": "TITLE: Creating a Complete 3D Scene with Babylon.js\nDESCRIPTION: A comprehensive example showing how to create a 3D scene with Babylon.js, including setting up the engine, camera, lights, and basic shapes. The example demonstrates the creation of a sphere and ground with rendering.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/readme-es6.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Engine } from \"@babylonjs/core/Engines/engine\";\nimport { Scene } from \"@babylonjs/core/scene\";\nimport { Vector3 } from \"@babylonjs/core/Maths/math\";\nimport { FreeCamera } from \"@babylonjs/core/Cameras/freeCamera\";\nimport { HemisphericLight } from \"@babylonjs/core/Lights/hemisphericLight\";\n\n// Side-effects only imports allowing the standard material to be used as default.\nimport \"@babylonjs/core/Materials/standardMaterial\";\n// import the individual builders or use MeshBuilder to have them all\nimport { CreateSphere } from \"@babylonjs/core/Meshes/Builders/sphereBuilder\";\nimport { CreateGround } from \"@babylonjs/core/Meshes/Builders/groundBuilder\";\n\nconst canvas = document.getElementById(\"renderCanvas\") as HTMLCanvasElement;\nconst engine = new Engine(canvas);\nvar scene = new Scene(engine);\n\n// This creates and positions a free camera (non-mesh)\nvar camera = new FreeCamera(\"camera1\", new Vector3(0, 5, -10), scene);\n\n// This targets the camera to scene origin\ncamera.setTarget(Vector3.Zero());\n\n// This attaches the camera to the canvas\ncamera.attachControl(canvas, true);\n\n// This creates a light, aiming 0,1,0 - to the sky (non-mesh)\nvar light = new HemisphericLight(\"light1\", new Vector3(0, 1, 0), scene);\n\n// Default intensity is 1. Let's dim the light a small amount\nlight.intensity = 0.7;\n\n// Our built-in 'sphere' shape. Params: name, options, scene\nvar sphere = CreateSphere(\"sphere1\", { segments: 16, diameter: 2 }, scene);\n\n// Move the sphere upward 1/2 its height\nsphere.position.y = 2;\n\n// Our built-in 'ground' shape. Params: name, options, scene\nCreateGround(\"ground1\", { width: 6, height: 6, subdivisions: 2 }, this._scene);\n\nengine.runRenderLoop(() => {\n    scene.render();\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic 3D Scene with Babylon.js\nDESCRIPTION: Complete JavaScript example demonstrating how to create a basic 3D scene with Babylon.js, including setting up the engine, camera, lights, and basic meshes (sphere and ground).\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/public/umd/babylonjs/readme.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Get the canvas DOM element\nvar canvas = document.getElementById('renderCanvas');\n// Load the 3D engine\nvar engine = new BABYLON.Engine(canvas, true, {preserveDrawingBuffer: true, stencil: true});\n// CreateScene function that creates and return the scene\nvar createScene = function(){\n    // Create a basic BJS Scene object\n    var scene = new BABYLON.Scene(engine);\n    // Create a FreeCamera, and set its position to {x: 0, y: 5, z: -10}\n    var camera = new BABYLON.FreeCamera('camera1', new BABYLON.Vector3(0, 5, -10), scene);\n    // Target the camera to scene origin\n    camera.setTarget(BABYLON.Vector3.Zero());\n    // Attach the camera to the canvas\n    camera.attachControl(canvas, false);\n    // Create a basic light, aiming 0, 1, 0 - meaning, to the sky\n    var light = new BABYLON.HemisphericLight('light1', new BABYLON.Vector3(0, 1, 0), scene);\n    // Create a built-in \"sphere\" shape; its constructor takes 6 params: name, segment, diameter, scene, updatable, sideOrientation\n    var sphere = BABYLON.Mesh.CreateSphere('sphere1', 16, 2, scene, false, BABYLON.Mesh.FRONTSIDE);\n    // Move the sphere upward 1/2 of its height\n    sphere.position.y = 1;\n    // Create a built-in \"ground\" shape; its constructor takes 6 params : name, width, height, subdivision, scene, updatable\n    var ground = BABYLON.Mesh.CreateGround('ground1', 6, 6, 2, scene, false);\n    // Return the created scene\n    return scene;\n}\n// call the createScene function\nvar scene = createScene();\n// run the render loop\nengine.runRenderLoop(function(){\n    scene.render();\n});\n// the canvas/window resize event handler\nwindow.addEventListener('resize', function(){\n    engine.resize();\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Babylon.js GUI Components\nDESCRIPTION: ES6 import statement for bringing the AdvancedDynamicTexture component from the GUI module into a project\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/public/@babylonjs/gui/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { AdvancedDynamicTexture } from '@babylonjs/gui/2D';\n```\n\n----------------------------------------\n\nTITLE: Importing Individual Babylon.js Classes for Tree Shaking\nDESCRIPTION: Shows how to import specific Babylon.js classes individually for better tree shaking, allowing for smaller bundle sizes by only including what's needed.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/readme-es6.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Scene } from \"@babylonjs/core/scene\";\nimport { Engine } from \"@babylonjs/core/Engines/engine\";\n```\n\n----------------------------------------\n\nTITLE: Creating a Complete 3D Scene with Babylon.js\nDESCRIPTION: Comprehensive example showing how to set up a basic 3D scene with Babylon.js using ES6 modules. Includes engine initialization, camera setup, lighting, and creating 3D objects like a sphere and ground.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/public/@babylonjs/core/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Engine } from \"@babylonjs/core/Engines/engine\";\nimport { Scene } from \"@babylonjs/core/scene\";\nimport { Vector3 } from \"@babylonjs/core/Maths/math\";\nimport { FreeCamera } from \"@babylonjs/core/Cameras/freeCamera\";\nimport { HemisphericLight } from \"@babylonjs/core/Lights/hemisphericLight\";\nimport { Mesh } from \"@babylonjs/core/Meshes/mesh\";\n\n// Side-effects only imports allowing the standard material to be used as default.\nimport \"@babylonjs/core/Materials/standardMaterial\";\n// Side-effects only imports allowing Mesh to create default shapes (to enhance tree shaking, the construction methods on mesh are not available if the meshbuilder has not been imported).\nimport \"@babylonjs/core/Meshes/Builders/sphereBuilder\";\nimport \"@babylonjs/core/Meshes/Builders/boxBuilder\";\nimport \"@babylonjs/core/Meshes/Builders/groundBuilder\";\n\nconst canvas = document.getElementById(\"renderCanvas\") as HTMLCanvasElement;\nconst engine = new Engine(canvas);\nvar scene = new Scene(engine);\n\n// This creates and positions a free camera (non-mesh)\nvar camera = new FreeCamera(\"camera1\", new Vector3(0, 5, -10), scene);\n\n// This targets the camera to scene origin\ncamera.setTarget(Vector3.Zero());\n\n// This attaches the camera to the canvas\ncamera.attachControl(canvas, true);\n\n// This creates a light, aiming 0,1,0 - to the sky (non-mesh)\nvar light = new HemisphericLight(\"light1\", new Vector3(0, 1, 0), scene);\n\n// Default intensity is 1. Let's dim the light a small amount\nlight.intensity = 0.7;\n\n// Our built-in 'sphere' shape. Params: name, subdivs, size, scene\nvar sphere = Mesh.CreateSphere(\"sphere1\", 16, 2, scene);\n\n// Move the sphere upward 1/2 its height\nsphere.position.y = 2;\n\n// Our built-in 'ground' shape. Params: name, width, depth, subdivs, scene\nMesh.CreateGround(\"ground1\", 6, 6, 2, scene);\n\nengine.runRenderLoop(() => {\n    scene.render();\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Babylon.js via npm\nDESCRIPTION: Command to install Babylon.js using npm package manager with full typing support.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/public/umd/babylonjs/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nnpm install babylonjs --save\n```\n\n----------------------------------------\n\nTITLE: Installing Babylon.js via npm\nDESCRIPTION: Command for installing Babylon.js via npm package manager with typing support.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nnpm install babylonjs --save\n```\n\n----------------------------------------\n\nTITLE: Installing Babylon.js Core via npm\nDESCRIPTION: Shows how to install the Babylon.js core package using npm. This is the basic installation command to add Babylon.js to your project.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/readme-es6.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nnpm install @babylonjs/core --save\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic 3D Scene with Babylon.js\nDESCRIPTION: Complete example of setting up a basic 3D scene with Babylon.js, including canvas initialization, engine creation, scene setup with camera, light, and basic shapes, and handling the render loop and window resizing.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/readme.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Get the canvas DOM element\nvar canvas = document.getElementById('renderCanvas');\n// Load the 3D engine\nvar engine = new BABYLON.Engine(canvas, true, {preserveDrawingBuffer: true, stencil: true});\n// CreateScene function that creates and return the scene\nvar createScene = function(){\n    // Create a basic BJS Scene object\n    var scene = new BABYLON.Scene(engine);\n    // Create a FreeCamera, and set its position to {x: 0, y: 5, z: -10}\n    var camera = new BABYLON.FreeCamera('camera1', new BABYLON.Vector3(0, 5, -10), scene);\n    // Target the camera to scene origin\n    camera.setTarget(BABYLON.Vector3.Zero());\n    // Attach the camera to the canvas\n    camera.attachControl(canvas, false);\n    // Create a basic light, aiming 0, 1, 0 - meaning, to the sky\n    var light = new BABYLON.HemisphericLight('light1', new BABYLON.Vector3(0, 1, 0), scene);\n    // Create a built-in \"sphere\" shape using the SphereBuilder\n    var sphere = BABYLON.MeshBuilder.CreateSphere('sphere1', {segments: 16, diameter: 2, sideOrientation: BABYLON.Mesh.FRONTSIDE}, scene);\n    // Move the sphere upward 1/2 of its height\n    sphere.position.y = 1;\n    // Create a built-in \"ground\" shape;\n    var ground = BABYLON.MeshBuilder.CreateGround(\"ground1\", { width: 6, height: 6, subdivisions: 2, updatable: false }, scene);\n    // Return the created scene\n    return scene;\n}\n// call the createScene function\nvar scene = createScene();\n// run the render loop\nengine.runRenderLoop(function(){\n    scene.render();\n});\n// the canvas/window resize event handler\nwindow.addEventListener('resize', function(){\n    engine.resize();\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Babylon.js Core and Loaders Modules via npm\nDESCRIPTION: Command for installing the required Babylon.js packages (core and loaders) using npm package manager.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/public/@babylonjs/loaders/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @babylonjs/core @babylonjs/loaders\n```\n\n----------------------------------------\n\nTITLE: Installing Babylon.js Core and Materials Packages via npm\nDESCRIPTION: Command to install the Babylon.js core and materials packages using npm. These are the required dependencies for using the materials library in a project.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/public/@babylonjs/materials/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @babylonjs/core @babylonjs/materials\n```\n\n----------------------------------------\n\nTITLE: Adding Accessibility Description to 3D Objects in Babylon.js\nDESCRIPTION: Shows how to add accessibility description to a 3D mesh using IAccessibilityTag interface. This allows screen readers to describe the object to visually impaired users.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/tools/accessibility/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet egg = BABYLON.MeshBuilder.CreateSphere(\"Egg\", {diameterX: 0.62, diameterY: 0.8, diameterZ: 0.6}, scene);\negg.accessibilityTag = {\n    description: \"An easter egg\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Babylon.js Core and Inspector Packages with npm\nDESCRIPTION: Command to install the Babylon.js core and inspector packages using npm package manager. Both packages are required for the inspector functionality to work properly.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/public/@babylonjs/inspector/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @babylonjs/core @babylonjs/inspector\n```\n\n----------------------------------------\n\nTITLE: Installing Babylon.js Materials Library using NPM\nDESCRIPTION: Command to install Babylon.js core and materials library using NPM package manager.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/public/umd/babylonjs-materials/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save babylonjs babylonjs-materials\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML Twins for Accessibility in Babylon.js\nDESCRIPTION: Demonstrates how to generate HTML twin elements for accessible scene content using HTMLTwinRenderer. This creates DOM elements that screen readers can interpret.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/tools/accessibility/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nACCESSIBILITY.HTMLTwinRenderer.Render(scene);\n```\n\n----------------------------------------\n\nTITLE: Installing Babylon.js Post Process Library via NPM\nDESCRIPTION: This command installs the Babylon.js core library and the post-process library using NPM. It saves them as dependencies in the project's package.json file.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/public/umd/babylonjs-post-process/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save babylonjs babylonjs-post-process\n```\n\n----------------------------------------\n\nTITLE: Importing Complete Babylon.js Library in JavaScript\nDESCRIPTION: Example showing how to import the entire Babylon.js library in a JavaScript file using ES6 import syntax.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/public/umd/babylonjs/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as BABYLON from 'babylonjs';\n```\n\n----------------------------------------\n\nTITLE: Customizing ARIA Attributes for HTML Twins in Babylon.js\nDESCRIPTION: Demonstrates how to customize ARIA attributes for HTML twin elements using IAccessibilityTag. This allows fine-grained control over accessibility properties.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/tools/accessibility/README.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nyourObject.accessibilityTag = {\n    description: \"An demo customized progressbar\",\n    role: \"progressbar\",\n    aria: {\n      \"aria-valuemin\": \"0\",\n      \"aria-valuemax\": \"100\"\n      \"aria-valuenow\": \"0\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Specific Babylon.js Classes in JavaScript\nDESCRIPTION: Example showing how to import only specific classes from Babylon.js using ES6 import syntax for better tree-shaking.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Scene, Engine } from 'babylonjs';\n```\n\n----------------------------------------\n\nTITLE: Exporting a Babylon.js Scene to GLTF Format\nDESCRIPTION: JavaScript code snippet demonstrating how to use GLTF2Export to convert a Babylon.js scene to GLTF format and download the resulting files.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/public/@babylonjs/serializers/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nGLTF2Export.GLTFAsync(scene, \"fileName\").then((gltf) => {\n    gltf.downloadFiles();\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Button in Babylon.js\nDESCRIPTION: This code creates a button UI element in Babylon.js. It sets up the button's dimensions, background color, and text content. It also demonstrates how to add a click event handler to the button.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/tools/babylonServer/public/uiControls/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar button1 = BABYLON.GUI.Button.CreateSimpleButton(\"but1\", \"Click Me\");\nbutton1.width = \"150px\";\nbutton1.height = \"40px\";\nbutton1.color = \"white\";\nbutton1.background = \"green\";\nbutton1.onPointerUpObservable.add(function() {\n    alert(\"you did it!\");\n});\nadvancedTexture.addControl(button1);\n```\n\n----------------------------------------\n\nTITLE: Importing glTF Loader in Babylon.js\nDESCRIPTION: JavaScript import statement to extend Babylon.js loader plugins with glTF and GLB file format support.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/public/@babylonjs/loaders/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"@babylonjs/loaders/glTF\";\n```\n\n----------------------------------------\n\nTITLE: Importing GLTF2Export from Babylon.js Serializers\nDESCRIPTION: JavaScript import statement to include the GLTF2Export functionality from the Babylon.js serializers package.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/public/@babylonjs/serializers/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { GLTF2Export } from '@babylonjs/serializers/glTF';\n```\n\n----------------------------------------\n\nTITLE: Creating an Input Text Field in Babylon.js\nDESCRIPTION: This snippet shows how to create an input text field in Babylon.js. It sets up the input's dimensions, placeholder text, and focuses the input when clicked. It also demonstrates how to retrieve the input value.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/tools/babylonServer/public/uiControls/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar input = new BABYLON.GUI.InputText();\ninput.width = 0.2;\ninput.maxWidth = 0.2;\ninput.height = \"40px\";\ninput.text = \"\";\ninput.placeholder = \"Enter text here\";\ninput.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_TOP;\nadvancedTexture.addControl(input);\n\ninput.onPointerDownObservable.add(function() {\n    input.focus();\n});\n\ninput.onTextChangedObservable.add(function() {\n    console.log(\"Input changed: \" + input.text);\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Babylon.js Materials Library in TypeScript\nDESCRIPTION: Code showing how to import Babylon.js core and materials library in a TypeScript project.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/public/umd/babylonjs-materials/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as BABYLON from 'babylonjs';\nimport 'babylonjs-materials';\n```\n\n----------------------------------------\n\nTITLE: Importing Babylon.js and Post Process Library in TypeScript\nDESCRIPTION: This code demonstrates how to import Babylon.js and its post-process library in a TypeScript project. It imports the core Babylon.js namespace and extends it with the post-process library.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/public/umd/babylonjs-post-process/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as BABYLON from 'babylonjs';\nimport 'babylonjs-post-process';\n```\n\n----------------------------------------\n\nTITLE: Using Babylon.js Fire Procedural Texture\nDESCRIPTION: Example code demonstrating how to create and apply a fire procedural texture to a material in Babylon.js.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/public/umd/babylonjs-procedural-textures/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Some awesome code\\nvar fireMaterial = new BABYLON.StandardMaterial(\"fontainSculptur2\", scene);\\nvar fireTexture = new BABYLON.FireProceduralTexture(\"fire\", 256, scene);\\nfireMaterial.diffuseTexture = fireTexture;\\nfireMaterial.opacityTexture = fireTexture;\\n// Some more awesome code\n```\n\n----------------------------------------\n\nTITLE: Using Sky Material from Babylon.js Materials Library\nDESCRIPTION: Example demonstrating how to create and configure a SkyMaterial after importing the materials library.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/public/umd/babylonjs-materials/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Some awesome code\nlet skyMaterial = new BABYLON.SkyMaterial(\"skyMaterial\", scene);\nskyMaterial.backFaceCulling = false;\n// Some more awesome code\n```\n\n----------------------------------------\n\nTITLE: Creating a Text Block in Babylon.js\nDESCRIPTION: This snippet demonstrates how to create a basic text block UI element in Babylon.js. It sets up the text content, position, and some styling properties.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/tools/babylonServer/public/uiControls/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar text1 = new BABYLON.GUI.TextBlock();\ntext1.text = \"Hello world\";\ntext1.color = \"white\";\ntext1.fontSize = 24;\nadvancedTexture.addControl(text1);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Fire Procedural Texture in Babylon.js\nDESCRIPTION: Example of how to create and apply a fire procedural texture to a sphere material in Babylon.js. This code instantiates the FireProceduralTexture2 with a name, size (256), and the scene object.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/dev/proceduralTextures/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar fire = new BABYLON.FireProceduralTexture2(\"firePT\", 256, scene);\nsphere.material.diffuseTexture = fire;\n```\n\n----------------------------------------\n\nTITLE: Installing Babylon.js via npm\nDESCRIPTION: Simple npm command to install the Babylon.js core package. This is the first step in setting up a Babylon.js project using npm packages.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/public/@babylonjs/core/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nnpm install @babylonjs/core --save\n```\n\n----------------------------------------\n\nTITLE: Initializing FireProceduralTexture2 in Babylon.js\nDESCRIPTION: This snippet demonstrates how to create a new FireProceduralTexture2 and apply it to a sphere's material in Babylon.js. It shows the basic usage of a post process from the library.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/dev/postProcesses/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar fire = new BABYLON.FireProceduralTexture2(\"firePT\", 256, scene);\nsphere.material.diffuseTexture = fire;\n```\n\n----------------------------------------\n\nTITLE: Initializing Babylon.js Inspector using Online Method\nDESCRIPTION: Shows how to initialize the Babylon.js Inspector using the online method, which dynamically retrieves and loads the inspector bundle from the internet.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/dev/inspector/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.debugLayer.show();\n```\n\n----------------------------------------\n\nTITLE: Creating an AsciiArtPostProcess instance in Babylon.js\nDESCRIPTION: Example of how to create and use an AsciiArtPostProcess instance in Babylon.js. This snippet demonstrates the basic setup for applying the ASCII art post-process effect to a camera.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/public/@babylonjs/post-processes/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Some awesome code\n// Creates the post process\nlet postProcess = new AsciiArtPostProcess(\"AsciiArt\", camera);\n// Some more awesome code\n```\n\n----------------------------------------\n\nTITLE: Creating and Applying Water Material in Babylon.js\nDESCRIPTION: This code shows how to create a ground mesh, initialize a WaterMaterial, set its bump texture, and apply it to the ground. The bump texture is essential for proper water rendering.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/dev/materials/src/water/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar ground = BABYLON.MeshBuilder.CreateGround(\"ground\", { width: 512, height: 512, subdivisions: 32 }, scene);\n\nvar waterMaterial = new BABYLON.WaterMaterial(\"water_material\", scene);\nwaterMaterial.bumpTexture = new BABYLON.Texture(\"bump.png\", scene); // Set the bump texture\n\nground.material = waterMaterial;\n```\n\n----------------------------------------\n\nTITLE: Including Babylon.js Inspector Bundle for Offline Usage\nDESCRIPTION: Demonstrates how to include the Babylon.js Inspector bundle manually in an HTML page for offline usage.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/dev/inspector/README.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"babylon.inspector.bundle.js\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing Babylon.js Node Editor Online\nDESCRIPTION: This snippet demonstrates how to dynamically load and show the Babylon.js Node Editor using the online method. It retrieves the library 'babylon.nodeEditor.js' and adds it to the HTML page.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/tools/nodeEditor/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.NodeEditor.Show({hostElement: document.getElementById(\"host\")});\n```\n\n----------------------------------------\n\nTITLE: Enabling High Level Fur Mode in BabylonJS\nDESCRIPTION: Activates high-level fur rendering mode and generates fur texture.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/dev/materials/src/fur/readme.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfurMaterial.highLevelFur = true;\n\n// Generate a fur texture (internally used), working like a noise texture, that will be shared between all the shells\nvar furTexture = BABYLON.FurMaterial.GenerateTexture(\"furTexture\", scene);\n\nfurMaterial.furTexture = furTexture;\nmyMesh.material = furMaterial;\n\nvar quality = 30; // Average quality\n\n// Create shells\nvar shells = BABYLON.FurMaterial.FurifyMesh(myMesh, quality);\n```\n\n----------------------------------------\n\nTITLE: Using FireProceduralTexture with StandardMaterial in Babylon.js\nDESCRIPTION: Example code demonstrating how to create a fire procedural texture, apply it to a standard material as both diffuse and opacity textures, and use it in a Babylon.js scene.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/public/@babylonjs/procedural-textures/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Some awesome code\nvar fireMaterial = new StandardMaterial(\"fontainSculptur2\", scene);\nvar fireTexture = new FireProceduralTexture(\"fire\", 256, scene);\nfireMaterial.diffuseTexture = fireTexture;\nfireMaterial.opacityTexture = fireTexture;\n// Some more awesome code\n```\n\n----------------------------------------\n\nTITLE: Initializing Node Geometry Editor Online in Babylon.js\nDESCRIPTION: Shows how to initialize the Node Geometry Editor using the online method. This approach dynamically retrieves the library file and adds it to the page.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/tools/nodeGeometryEditor/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.NodeGeometryEditor.Show({hostElement: document.getElementById(\"host\")});\n```\n\n----------------------------------------\n\nTITLE: Adding Uniform Values to Custom Materials in BabylonJS\nDESCRIPTION: Demonstrates how to add uniform variables to both fragment and vertex shaders using the AddUniform method. Supports different variable types including float, vec3, and sampler2D.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/dev/materials/src/custom/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew CustomMaterial(...).AddUniform('time','float')\n```\n\nLANGUAGE: typescript\nCODE:\n```\nnew CustomMaterial(...).AddUniform('direction','vec3',new BABYLON.Vector3(0.,0.,0.))\n```\n\nLANGUAGE: typescript\nCODE:\n```\nnew CustomMaterial(...).AddUniform('txt1','sampler2D', new BABYLON.Texture(\"path\",scene))\n```\n\n----------------------------------------\n\nTITLE: Initializing Fur Material in BabylonJS\nDESCRIPTION: Creates a new fur material instance and assigns it to a mesh.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/dev/materials/src/fur/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar furMaterial = new BABYLON.FurMaterial(\"fur_material\", scene);\n\nground.material = furMaterial;\n```\n\n----------------------------------------\n\nTITLE: Creating a Grid Material Instance in Babylon.js\nDESCRIPTION: Example of creating a new GridMaterial instance and assigning it to a variable. This demonstrates how to initialize a material for use in a Babylon.js scene.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/public/@babylonjs/materials/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Some awesome code\nlet gridMaterial = new GridMaterial(\"gridMaterial\", scene);\n// Some more awesome code\n```\n\n----------------------------------------\n\nTITLE: Customizing Albedo in BabylonJS PBRCustomMaterial\nDESCRIPTION: Shows how to modify the albedo in a PBRCustomMaterial by adding custom GLSL code that manipulates the surfaceAlbedo variable or sets a result variable.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/dev/materials/src/custom/readme.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nnew PBRCustomMaterial(...).Fragment_Custom_Albedo('surfaceAlbedo = vec3(sin(vPositionW.x));')\n```\n\nLANGUAGE: typescript\nCODE:\n```\nnew PBRCustomMaterial(...).Fragment_Custom_Albedo('result = vec3(sin(vPositionW.x));')\n```\n\n----------------------------------------\n\nTITLE: Customizing Diffuse Color in BabylonJS CustomMaterial\nDESCRIPTION: Shows how to modify the diffuse color in a CustomMaterial by adding custom GLSL code that manipulates the diffuseColor variable or sets a result variable.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/dev/materials/src/custom/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nnew CustomMaterial(...).Fragment_Custom_Diffuse('diffuseColor = vec3(sin(vPositionW.x));')\n```\n\nLANGUAGE: typescript\nCODE:\n```\nnew CustomMaterial(...).Fragment_Custom_Diffuse('result = vec3(sin(vPositionW.x));')\n```\n\n----------------------------------------\n\nTITLE: Adding Fragment Shader Code in BabylonJS Custom Materials\nDESCRIPTION: Shows how to insert custom GLSL code at the beginning of the fragment shader's main function using the Fragment_Begin method.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/dev/materials/src/custom/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nnew CustomMaterial(...).Fragment_Begin('vec3 direction = vec3(0.);')\n```\n\n----------------------------------------\n\nTITLE: Implementing BabylonJS Viewer Directly in Browser\nDESCRIPTION: HTML implementation of BabylonJS Viewer using a CDN-hosted ESM bundle. This approach allows using the viewer without any build tools by loading the pre-bundled script directly from a CDN.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/public/@babylonjs/viewer/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<html lang=\"en\">\n    <body>\n        <script type=\"module\" src=\"https://cdn.jsdelivr.net/npm/@babylonjs/viewer/dist/babylon-viewer.esm.min.js\"></script>\n        <babylon-viewer source=\"https://playground.babylonjs.com/scenes/BoomBox.glb\"></babylon-viewer>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Adding Vertex Shader Definitions in BabylonJS Custom Materials\nDESCRIPTION: Shows how to define custom functions and variables before the main function in the vertex shader, useful for implementing custom vertex behavior.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/dev/materials/src/custom/readme.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nnew CustomMaterial(...).Vertex_Definations('float func1(vec4 param1){ return param1.x;}')\n```\n\n----------------------------------------\n\nTITLE: Applying Height Texture to Fur Material in BabylonJS\nDESCRIPTION: Sets a height texture to control fur length using a greyscale image.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/dev/materials/src/fur/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfurMaterial.heightTexture = new BABYLON.Texture(\"speckles.jpg\", scene); // Set the fur length with a texture.\n```\n\n----------------------------------------\n\nTITLE: Customizing Vertex Position in BabylonJS Custom Materials\nDESCRIPTION: Demonstrates how to modify the vertex position by adding custom GLSL code that manipulates the positionUpdated variable or sets a result variable.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/dev/materials/src/custom/readme.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nnew CustomMaterial(...).Vertex_Befor_PositionUpdated('positionUpdated = positionUpdated;')\n```\n\nLANGUAGE: typescript\nCODE:\n```\nnew CustomMaterial(...).Vertex_Befor_PositionUpdated('result = positionUpdated * 1.5 ;')\n```\n\n----------------------------------------\n\nTITLE: Implementing BabylonJS Viewer with Module Import\nDESCRIPTION: HTML implementation of BabylonJS Viewer using JavaScript module imports. It demonstrates importing the viewer package and using the babylon-viewer custom element to display a 3D model.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/public/@babylonjs/viewer/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<html lang=\"en\">\n    <body>\n        <!-- Note: If @babylonjs/viewer is already being imported somewhere in your JavaScript, you don't need this script import. -->\n        <script type=\"module\">\n            import \"@babylonjs/viewer\";\n        </script>\n        <babylon-viewer source=\"https://playground.babylonjs.com/scenes/BoomBox.glb\"></babylon-viewer>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring High Level Fur Properties in BabylonJS\nDESCRIPTION: Sets various properties for high-level fur rendering including spacing, density, speed, and gravity.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/dev/materials/src/fur/readme.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nallFurMaterials.furSpacing = 2; // Computes the space between shells. In others words, works as the fur height\n```\n\nLANGUAGE: javascript\nCODE:\n```\nallFurMaterials.furDensity = 20; // Computes the fur density. More the density is high, more you'll have to zoom on the model\n```\n\nLANGUAGE: javascript\nCODE:\n```\nallFurMaterials.furSpeed = 100; // Divides the animation of fur in time according to the gravity\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Compute the gravity followed by the fur\nallFurMaterials.furGravity = new BABYLON.Vector3(0, -1, 0);\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Babylon.js GUI\nDESCRIPTION: TypeScript configuration snippet to add Babylon.js and GUI module typings. This should be added to the tsconfig.json file.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/public/umd/babylonjs-gui/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n    ....\\n    \"types\": [\\n        \"babylonjs\",\\n        \"babylonjs-gui\",\\n        \"otherImportsYouMightNeed\"\\n    ],\\n    ....\n```\n\n----------------------------------------\n\nTITLE: Importing Materials from Babylon.js Materials Library\nDESCRIPTION: Example of importing a specific material (GridMaterial) from the Babylon.js materials library using ES6 import syntax.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/public/@babylonjs/materials/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { GridMaterial } from '@babylonjs/materials/Grid';\n```\n\n----------------------------------------\n\nTITLE: Importing Individual Babylon.js Classes\nDESCRIPTION: Demonstrates how to import specific Babylon.js classes individually for better tree shaking, which reduces final bundle size by including only what's used.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/public/@babylonjs/core/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Scene } from '@babylonjs/core/scene';\nimport { Engine } from '@babylonjs/core/Engines/engine';\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Babylon.js Loaders\nDESCRIPTION: TypeScript configuration snippet showing how to add type definitions for Babylon.js and its loaders module in tsconfig.json.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/public/umd/babylonjs-loaders/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n    ....\n    \"types\": [\n        \"babylonjs\",\n        \"babylonjs-loaders\",\n        \"\"\n    ],\n    ....\n```\n\n----------------------------------------\n\nTITLE: Importing Babylon.js Serializers in TypeScript\nDESCRIPTION: Code example showing how to import Babylon.js core and serializers in a TypeScript project\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/public/umd/babylonjs-serializers/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as BABYLON from 'babylonjs';\nimport from 'babylonjs-serializers';\n```\n\n----------------------------------------\n\nTITLE: Creating Advanced Dynamic Texture\nDESCRIPTION: Example of creating a new AdvancedDynamicTexture instance with specified dimensions in a Babylon.js scene\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/public/@babylonjs/gui/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Some awesome code\n// Creates the post process\nlet postProcess = new AdvancedDynamicTexture(\"adt\", 128, 128, scene);\n// Some more awesome code\n```\n\n----------------------------------------\n\nTITLE: Customizing Water Material Properties in Babylon.js\nDESCRIPTION: This code shows how to customize various properties of the water material to achieve different visual effects. Properties include wind force, wave height, bump height, wind direction, water color, color blend factor, and wave length.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/dev/materials/src/water/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwaterMaterial.windForce = 45; // Represents the wind force applied on the water surface\nwaterMaterial.waveHeight = 1.3; // Represents the height of the waves\nwaterMaterial.bumpHeight = 0.3; // According to the bump map, represents the pertubation of reflection and refraction\nwaterMaterial.windDirection = new BABYLON.Vector2(1.0, 1.0); // The wind direction on the water surface (on width and height)\nwaterMaterial.waterColor = new BABYLON.Color3(0.1, 0.1, 0.6); // Represents the water color mixed with the reflected and refracted world\nwaterMaterial.colorBlendFactor = 2.0; // Factor to determine how the water color is blended with the reflected and refracted world\nwaterMaterial.waveLength = 0.1; // The lenght of waves. With smaller values, more waves are generated\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Babylon.js\nDESCRIPTION: JSON configuration example for tsconfig.json showing how to add Babylon.js to the types array for TypeScript support.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n    ...\n    \"types\": [\n        \"babylonjs\",\n        \"anotherAwesomeDependency\"\n    ],\n    ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Procedural Texture in Gulp Build Process for Babylon.js\nDESCRIPTION: JSON configuration example for integrating a new procedural texture into the build process. This should be added to the config.json file in the tools/gulp folder under the proceduralTextureLibrary/libraries section.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/dev/proceduralTextures/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n  \"libraries\": [\n    ...\n      {\n        \"output\": \"babylon.brickProceduralTexture.min.js\",\n        \"entry\": \"./legacy/legacy-brick.ts\",\n        \"preventLoadLibrary\": true\n      }\n    ...\n  ]\n```\n\n----------------------------------------\n\nTITLE: Importing Babylon.js as a Complete Package\nDESCRIPTION: Shows how to import the entire Babylon.js library using the legacy namespace. This approach provides access to all features but doesn't benefit from tree shaking.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/public/@babylonjs/core/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as BABYLON from '@babylonjs/core/Legacy/legacy';\n```\n\n----------------------------------------\n\nTITLE: Creating an ASCII Art Post Process in Babylon.js\nDESCRIPTION: This snippet shows how to create an ASCII Art post-process effect using the Babylon.js Post Processes Library. It demonstrates the extended Babylon namespace with the new post-process types.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/public/umd/babylonjs-post-process/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Some awesome code\n// Creates the post process\nlet postProcess = new BABYLON.AsciiArtPostProcess(\"AsciiArt\", camera);\n// Some more awesome code\n```\n\n----------------------------------------\n\nTITLE: WebXRFeaturePointSystem Class Implementation for BabylonJS\nDESCRIPTION: Implements the WebXRFeaturePointSystem class that extends WebXRAbstractFeature. This class manages feature point cloud data and provides observables for feature point updates. It maintains the current feature point cloud and processes updates on each XR frame.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/dev/core/src/LibDeclarations/NativeExtensions/FeaturePoints.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass WebXRFeaturePointSystem extends WebXRAbstractFeature {\n  public static readonly Name = WebXRFeatureName.FEATURE_POINTS;\n  public static readonly Version = 1;\n\n  /*\n   Notifies the consuming app that the feature point cloud has been updated with the list of added feature point ids.\n  */\n  public onFeaturePointsUpdatedObservable: Observable<number[]> = new Observable();\n  /*\n   Notifies the consuming app that the feature point cloud has been updated with the list of updated feature point ids.\n  */\n  public onFeaturePointsUpdatedObservable: Observable<number[]> = new Observable();\n  /**\n   * The currrent feature point cloud maintained across frames.\n   */\n  public featurePointCloud: Array<IWebXRFeaturePoint> = [];\n\n  /* \n   When onXRFrame occurs if the feature is attached we will update the feature point cloud, and\n   send the point cloud collection to consumers for processing.\n   */\n  protected _onXRFrame(frame: XRFrame)\n}\n```\n\n----------------------------------------\n\nTITLE: IWebXRFeaturePoint Interface Definition\nDESCRIPTION: Defines the IWebXRFeaturePoint interface which describes a single feature point with its 3D position vector and confidence value. This structure is used to represent points in the feature point cloud.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/dev/core/src/LibDeclarations/NativeExtensions/FeaturePoints.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IWebXRFeaturePoint {\n  point : Vector3;\n  confidenceValue : number;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Babylon.js Entire Library in JavaScript\nDESCRIPTION: Example showing how to import the entire Babylon.js library using ES6 import syntax.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as BABYLON from 'babylonjs';\n```\n\n----------------------------------------\n\nTITLE: Initializing Node Render Graph Editor using Online Method in JavaScript\nDESCRIPTION: Demonstrates how to load and display the Babylon.js Node Render Graph Editor dynamically by calling the Show method. This approach automatically retrieves the required library from the network.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/tools/nodeRenderGraphEditor/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nBABYLON.NodeRenderGraphEditor.Show({hostElement: document.getElementById(\"host\")});\n```\n\n----------------------------------------\n\nTITLE: Building Babylon.js Loaders with Gulp\nDESCRIPTION: Command for compiling the Babylon.js loaders module using Gulp. This should be executed from the tools/gulp folder of the project to build all the model importers.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/dev/loaders/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngulp loaders\n```\n\n----------------------------------------\n\nTITLE: Building the Materials Library with Gulp\nDESCRIPTION: This command shows how to use Gulp to build all materials in the library and generate the distribution folder.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/dev/materials/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngulp materialsLibrary\n```\n\n----------------------------------------\n\nTITLE: Installing Babylon.js Loaders with NPM\nDESCRIPTION: Command to install both the core Babylon.js library and the loaders extension using NPM package manager.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/public/umd/babylonjs-loaders/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save babylonjs babylonjs-loaders\n```\n\n----------------------------------------\n\nTITLE: Importing Specific Babylon.js Classes in JavaScript\nDESCRIPTION: Example showing how to import only specific classes from Babylon.js to optimize bundle size.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/public/umd/babylonjs/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Scene, Engine } from 'babylonjs';\n```\n\n----------------------------------------\n\nTITLE: Running Gulp Task for Post Process Library Build in Babylon.js\nDESCRIPTION: This command runs the gulp task to build all post processes and generate the dist folder in Babylon.js. It's used in the build process for post processes.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/dev/postProcesses/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngulp postProcesLibrary\n```\n\n----------------------------------------\n\nTITLE: Starting Development Webserver for Babylon.js\nDESCRIPTION: Command to start a local development web server using Gulp. This allows viewing and testing the procedural texture implementation page locally.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/dev/proceduralTextures/readme.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngulp webserver\n```\n\n----------------------------------------\n\nTITLE: Importing Babylon.js Loaders in JavaScript/TypeScript\nDESCRIPTION: Code snippet demonstrating how to import Babylon.js and its loaders module in a JavaScript or TypeScript project. This extends Babylon's namespace with the available loaders.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/public/umd/babylonjs-loaders/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as BABYLON from 'babylonjs';\nimport 'babylonjs-loaders';\n```\n\n----------------------------------------\n\nTITLE: Adding Objects to Water Material Render List in Babylon.js\nDESCRIPTION: This snippet demonstrates how to add meshes to the water material's render list, which enables the water to reflect and refract these objects. Any mesh that should be visible in the water must be added to this list.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/dev/materials/src/water/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwaterMaterial.addToRenderList(skybox);\nwaterMaterial.addToRenderList(mesh1);\nwaterMaterial.addToRenderList(mesh2);\n// ... etc.\n```\n\n----------------------------------------\n\nTITLE: Running All Tests for BabylonJS Core\nDESCRIPTION: This command runs all the tests for the BabylonJS core module using npm.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/dev/core/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Automated Object Count Testing\nDESCRIPTION: Shows how to use the helper function countCurrentObjects for automatic object count verification.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/public/@babylonjs/test-tools/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nit(\"Should do the thing it should do!\", async () => {\n    const init = await countObjects(page);\n    // do your thing on the page\n    // run your asserts\n    // ...\n    await countCurrentObjects(page, init);\n}, 10000);\n```\n\n----------------------------------------\n\nTITLE: Importing Babylon.js Debug Layer and Inspector in JavaScript\nDESCRIPTION: Import statements required to enable the debugLayer property on the scene and load the inspector functionality. These imports allow for accessing the inspector through scene.debugLayer.show().\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/public/@babylonjs/inspector/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"@babylonjs/core/Debug/debugLayer\";\nimport \"@babylonjs/inspector\";\n```\n\n----------------------------------------\n\nTITLE: Creating a UI for Material Selection\nDESCRIPTION: This code demonstrates how to implement a UI dropdown for selecting different materials and applying them to a mesh in a test environment.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/dev/materials/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ngui.add(options, 'material', ['standard', 'simple']).onFinishChange(function () {\n     switch (options.material) {\n      case \"simple\":\n       currentMaterial = simple;\n       break;\n      default:\n       currentMaterial = std;\n       break;\n     }\n\n     currentMesh.material = currentMaterial;\n    });\n```\n\n----------------------------------------\n\nTITLE: Including Sourcemap Library in HTML\nDESCRIPTION: Shows how to include the sourcemapped-stacktrace library in the test HTML for proper stack trace reporting.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/public/@babylonjs/test-tools/readme.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/sourcemapped-stacktrace@1.1.11/dist/sourcemapped-stacktrace.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Directory Structure in Markdown\nDESCRIPTION: Shows the main directory structure of the components library, including the components, images, and legacy directories that need migration.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/dev/sharedUiComponents/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n-   **/src/components/**: This is the new components directory. Ultimately, every component should end up here. Each component should have a .tsx file for the logic and a corresponding .scss file for styling.\n-   **/src/imgs/**: Holds the .svg icons used across all Babylon tools.\n-   **/src/lines/, /src/tabs/, /src/colorPicker/**: old directories holding components which need to be migrated.\n```\n\n----------------------------------------\n\nTITLE: Initializing Babylon.js Inspector using Offline Method\nDESCRIPTION: Shows how to initialize the Babylon.js Inspector after manually including the bundle in offline mode.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/dev/inspector/README.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nscene.debugLayer.show();\n```\n\n----------------------------------------\n\nTITLE: Custom Event Handling for Accessible Objects in Babylon.js\nDESCRIPTION: Shows how to add custom event handlers to accessible objects using IAccessibilityTag's eventHandler property. This enables custom interaction behavior for screen reader users.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/tools/accessibility/README.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet egg = BABYLON.MeshBuilder.CreateSphere(\"Egg\", {diameterX: 0.62, diameterY: 0.8, diameterZ: 0.6}, scene);\negg.accessibilityTag = {\n    description: \"An easter egg\",\n    eventHandler: {\n      \"onclick\": yourFunction\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Analyzing Import Chains in Babylon.js Viewer\nDESCRIPTION: Example command to print all import chains leading to a specific module, helping to understand why certain modules are not being tree-shaken.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/tools/viewer/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run import-chains -- standardmaterial\n```\n\n----------------------------------------\n\nTITLE: Describing Babylon.js GUI Editor in Markdown\nDESCRIPTION: This Markdown snippet provides an overview of the Babylon.js GUI Editor, including its purpose, current usage instructions, and supported features. It serves as documentation for developers working with or interested in the GUI Editor extension.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/public/@babylonjs/gui-editor/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Babylon.js Gui Editor\n\nAn extension to easily allow users to create and modify GUI for scenes.\n\n## Usage\nCurrently available for local development by selecting \"Launch GUI Editor (Chrome)\"\n\n## Current Supported Features\n\n- Launch GUI editor in local dev mode.\n- Drag and drop GUI elements onto a canvas.\n- Select and move individual GUI elements.\n- Modify properties of selected GUI elements.\n```\n\n----------------------------------------\n\nTITLE: Including Babylon.js Node Editor Offline\nDESCRIPTION: This snippet shows how to manually include the Babylon.js Node Editor library in an HTML page for offline usage. It assumes the 'babylon.nodeEditor.js' file is available locally.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/tools/nodeEditor/README.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"babylon.nodeEditor.js\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Mesh for Fur Material in BabylonJS\nDESCRIPTION: Creates ground and sphere meshes with sufficient triangular facets for optimal fur material rendering.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/dev/materials/src/fur/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar ground = BABYLON.MeshBuilder.CreateGround(\"ground\", { width: 8, height: 8, subdivisions: 200 }, scene);\nvar sphere = BABYLON.MeshBuilder.CreateSphere(\"sphere\", { segments: 500, diameter: 8 }, scene);\n```\n\n----------------------------------------\n\nTITLE: Converting Sharp-Edged Mesh to Smooth-Shaded in Babylon.js\nDESCRIPTION: This function converts a sharp-edged mesh to a smooth-shaded one by merging vertices at shared edges. It recalculates vertex positions, indices, and UV coordinates, and computes new normals for smooth shading. This is useful for removing edge separations in flat-shaded meshes, although it may produce some artifacts at the edges.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/dev/materials/src/fur/readme.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction convertToSmoothShadedMesh(mesh) {\n    var meshIndices = mesh.getIndices();\n    var meshPositions = mesh.getVerticesData(BABYLON.VertexBuffer.PositionKind);\n    var mesh_uvs = mesh.getVerticesData(BABYLON.VertexBuffer.UVKind);\n    var setPositions = [];\n    var indices = [];\n    var positions = [];\n    var uvs = [];\n    var normals = [];\n    var p;\n    var indexMap = [];\n    for (var i = 0; i < meshPositions.length; i += 3) {\n        var temp = [];\n        temp.push(i / 3, meshPositions[i], meshPositions[i + 1], meshPositions[i + 2], mesh_uvs[(2 * i) / 3], mesh_uvs[(2 * i) / 3 + 1]);\n        setPositions.push(temp);\n    }\n    var i = 0;\n    while (setPositions.length > 0) {\n        p = setPositions.shift();\n        positions.push(p[1], p[2], p[3]);\n        uvs.push(p[4], p[5]);\n        indexMap[p[0]] = i;\n        var j = 0;\n        while (j < setPositions.length) {\n            if (\n                Math.abs(p[1] - setPositions[j][1]) < Math.pow(0.1, 10) &&\n                Math.abs(p[2] - setPositions[j][2]) < Math.pow(0.1, 10) &&\n                Math.abs(p[3] - setPositions[j][3]) < Math.pow(0.1, 10)\n            ) {\n                indexMap[setPositions[j][0]] = i;\n                setPositions.splice(j, 1);\n            } else {\n                j++;\n            }\n        }\n        i++;\n    }\n    for (var i = 0; i < meshIndices.length; i++) {\n        indices.push(indexMap[meshIndices[i]]);\n    }\n\n    var vertexData = new BABYLON.VertexData();\n    vertexData.positions = positions;\n    vertexData.indices = indices;\n    vertexData.uvs = uvs;\n\n    BABYLON.VertexData.ComputeNormals(positions, indices, normals);\n    vertexData.normals = normals;\n    vertexData.applyToMesh(mesh);\n\n    return mesh;\n}\n```\n\n----------------------------------------\n\nTITLE: Including Node Geometry Editor Offline in HTML\nDESCRIPTION: Demonstrates how to include the Node Geometry Editor library manually in an HTML page when internet access is not available.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/tools/nodeGeometryEditor/README.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"babylon.nodeGeometryEditor.js\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing Fur Material Properties in BabylonJS\nDESCRIPTION: Sets basic fur material properties including length, angle, and color.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/dev/materials/src/fur/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfurMaterial.furLength = 3; // Represents the maximum length of the fur, which is then adjusted randomly. Default value is 1.\nfurMaterial.furAngle = Math.PI / 6; // Represents the angle the fur lies on the mesh from 0 to Math.PI/2. The default angle of 0 gives fur sticking straight up and PI/2 lies along the mesh.\nfurMaterial.furColor = new BABYLON.Color3(0.44, 0.21, 0.02); // is the default color if furColor is not set.\n```\n\n----------------------------------------\n\nTITLE: Importing Node Render Graph Editor using Offline Method in HTML\nDESCRIPTION: Shows how to manually include the Node Render Graph Editor library in an HTML page when internet access is not available. This requires having the library file locally available.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/tools/nodeRenderGraphEditor/README.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"babylon.nodeRenderGraphEditor.js\" />\n```\n\n----------------------------------------\n\nTITLE: Applying Diffuse Texture to Fur Material in BabylonJS\nDESCRIPTION: Applies a diffuse texture to paint the mesh surface.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/dev/materials/src/fur/readme.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfurMaterial.diffuseTexture = new BABYLON.Texture(\"leopard_fur.JPG, scene); // Set the fur length with a texture.\n```\n\n----------------------------------------\n\nTITLE: Defining Node Editor Interfaces in TypeScript for Babylon.js\nDESCRIPTION: This code snippet defines various interfaces for the Babylon.js Node Editor, including INodeData, IPortData, INodeContainer, and others. These interfaces describe the structure of nodes, connections, and other components used in the node editor.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/tools/nodeEditor/README-ES6.md#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface INodeData {\n    data: IPortData[];\n    name: string;\n    uniqueId: number;\n    x: number;\n    y: number;\n    loadingUIName?: string;\n    executionTime?: number;\n    refreshTime?: number;\n    comments?: string;\n    executionId?: number;\n    interceptOnlyOutputs?: boolean;\n}\n\nexport interface IEdgeData {\n    label: string;\n}\n\nexport interface IPortData {\n    data: string;\n    name: string;\n    internalName: string;\n    isExposedOnFrame?: boolean;\n    exposedPortPosition?: number;\n    isConnected?: boolean;\n    dataType?: string;\n    code?: string;\n    displayName?: string;\n    needDualDirectionValidation?: boolean;\n    hasUpgraded?: boolean;\n}\n\nexport interface INodeContainer {\n    nodes: INodeData[];\n    name?: string;\n}\n\nexport interface IFrameData {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n    color: number[];\n    name: string;\n    isCollapsed: boolean;\n    blocks: number[];\n    comments?: string;\n}\n\nexport interface IGraphData {\n    frames?: IFrameData[];\n    x?: number;\n    y?: number;\n    zoom?: number;\n    grid?: {\n        ratio: number;\n    };\n}\n\nexport interface INodeLocationInfo {\n    blockId: number;\n    x: number;\n    y: number;\n}\n\nexport interface IEditorData {\n    locations?: INodeLocationInfo[];\n    x?: number;\n    y?: number;\n    zoom?: number;\n    frames?: IFrameData[];\n    [key: string]: any;\n}\n\nexport interface IGraphInfo {\n    stateID: number;\n    debugModeEnabled: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Functions in Fragment Shader with BabylonJS\nDESCRIPTION: Demonstrates adding function definitions before the main function in the fragment shader, allowing for custom GLSL utility functions.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/dev/materials/src/custom/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nnew CustomMaterial(...).Fragment_Definations('float func1(vec4 param1){ return param1.x;}')\n```\n\n----------------------------------------\n\nTITLE: Installing Babylon.js Post Processes Library with npm\nDESCRIPTION: Command to install the Babylon.js core and post-processes packages using npm. This is a prerequisite for using the post-process library in your project.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/public/@babylonjs/post-processes/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @babylonjs/core @babylonjs/post-processes\n```\n\n----------------------------------------\n\nTITLE: Customizing Vertex Normal in BabylonJS Custom Materials\nDESCRIPTION: Shows how to modify the vertex normal by adding custom GLSL code that manipulates the normalUpdated variable or sets a result variable.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/dev/materials/src/custom/readme.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nnew CustomMaterial(...).Vertex_Befor_NormalUpdated('normalUpdated = normalUpdated;')\n```\n\nLANGUAGE: typescript\nCODE:\n```\nnew CustomMaterial(...).Vertex_Befor_NormalUpdated('result = normalUpdated ;')\n```\n\n----------------------------------------\n\nTITLE: Importing AsciiArtPostProcess from Babylon.js Post Processes\nDESCRIPTION: ES6 import statement to include the AsciiArtPostProcess from the Babylon.js post-processes library. This allows you to use the AsciiArtPostProcess in your project.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/public/@babylonjs/post-processes/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { AsciiArtPostProcess } from '@babylonjs/post-processes/asciiArt';\n```\n\n----------------------------------------\n\nTITLE: Updating UI for Testing Procedural Textures in Babylon.js\nDESCRIPTION: JavaScript code for integrating a new procedural texture into the test page's UI system. This enables selecting and testing the texture with various scene configurations including animated meshes, shadows, lights, and fog.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/dev/proceduralTextures/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ngui.add(options, 'texture', ['default', 'fire', 'wood', 'cloud', 'grass', 'road', 'brick', 'marble', '[YOURTEXTURE]', 'starfield']).onFinishChange(function () {\n  resetPTOptions();\n  switch (options.texture) {\n    case \"fire\":\n      currentTexture = firePT;\n      addPToptions(firePT, ['time', 'alphaThreshold', 'speed', ]);\n      break;\n    \n    //.......................\\n\n    //YOURTEXTURE\n\n    case \"none\":\n    default:\n      currentTexture = diffuseTexture;\n      break;\n  }\n\n  std.diffuseTexture = currentTexture;\n  window.enableTexture(options.texture);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Post Process Library in Babylon.js Build Process\nDESCRIPTION: This JSON configuration snippet shows how to integrate a new post process (ASCII Art) into the Babylon.js build process. It specifies the TypeScript and shader files to be included.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/dev/postProcesses/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"libraries\": [   \n  ... \n    {\n      \"files\": [\"../../postProcessLibrary/src/asciiArt/babylon.asciiArtPostProcess.ts\"],\n      \"shaderFiles\": [\n        \"../../postProcessLibrary/src/asciiArt/asciiart.fragment.fx\"\n      ],\n      \"output\": \"babylon.asciiArtPostProcess.js\"\n    }\n  '''\n]\n```\n\n----------------------------------------\n\nTITLE: Adding Babylon.js Types to TypeScript Configuration\nDESCRIPTION: JSON snippet showing how to add Babylon.js types to the TypeScript configuration file for proper type checking and IntelliSense support.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/public/umd/babylonjs/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n    ...\n    \"types\": [\n        \"babylonjs\",\n        \"anotherAwesomeDependency\"\n    ],\n    ...\n```\n\n----------------------------------------\n\nTITLE: Switching Post Processes in Babylon.js Camera\nDESCRIPTION: This JavaScript code demonstrates how to switch between different post processes (ASCII Art and Digital Rain) in a Babylon.js camera. It detaches and attaches post processes based on user options.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/dev/postProcesses/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nswitch (options.postProcess) {\n    case \"asciiArt\":\n      camera.detachPostProcess(aaPostProcess);\n      camera.detachPostProcess(drPostProcess);\n      camera.attachPostProcess(aaPostProcess);\n      break;\n    case \"digitalRain\":\n      camera.detachPostProcess(aaPostProcess);\n      camera.detachPostProcess(drPostProcess);\n      camera.attachPostProcess(drPostProcess);\n      break;\n  }\n```\n\n----------------------------------------\n\nTITLE: Importing Babylon.js GUI in TypeScript\nDESCRIPTION: TypeScript import statement for the Babylon.js GUI module. This allows you to use GUI components in your project.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/public/umd/babylonjs-gui/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as GUI from 'babylonjs-gui';\n```\n\n----------------------------------------\n\nTITLE: Starting Webserver for Testing Babylon.js Post Processes\nDESCRIPTION: This gulp command starts a webserver for testing Babylon.js post processes. It allows developers to serve the test page and interact with the implemented post processes.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/dev/postProcesses/readme.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngulp webserver\n```\n\n----------------------------------------\n\nTITLE: Importing Babylon.js and Inspector in JavaScript\nDESCRIPTION: This code snippet demonstrates how to import Babylon.js and the inspector module in a JavaScript project. It creates a global INSPECTOR variable for use by Babylon.js.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/public/umd/babylonjs-inspector/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as BABYLON from 'babylonjs';\nimport 'babylonjs-inspector';\n```\n\n----------------------------------------\n\nTITLE: Material Library Configuration in config.json\nDESCRIPTION: This JSON configuration example shows how to integrate a new material into the build process by adding an entry to the config.json file.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/dev/materials/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n  \"libraries\": [\n    ...\n      {\n        \"output\": \"babylon.triPlanarMaterial.min.js\",\n        \"entry\": \"./legacy/legacy-triPlanar.ts\",\n        \"preventLoadLibrary\": true\n      }\n      ...\n  ]\n```\n\n----------------------------------------\n\nTITLE: Increasing Mesh Facet Count in Babylon.js\nDESCRIPTION: This function increases the number of facets in a given mesh by adding points to each side of existing facets. It recalculates vertices, indices, and UV coordinates to create a new mesh with increased detail. The function is useful for applying fur materials to meshes where facet count is not user-controlled on creation.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/dev/materials/src/fur/readme.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction increasedFacets(mesh, pps) {\n    //pps points per side\n    var gaps = pps + 1;\n    var n = gaps + 1;\n    var fvs = [];\n    for (var i = 0; i < n; i++) {\n        fvs[i] = [];\n    }\n    var A, B;\n    var d = { x: 0, y: 0, z: 0 };\n    var u = { x: 0, y: 0 };\n    var indices = [];\n    var vertexIndex = [];\n    var side = [];\n    var uvs = mesh.getVerticesData(BABYLON.VertexBuffer.UVKind);\n    var meshIndices = mesh.getIndices();\n    var positions = mesh.getVerticesData(BABYLON.VertexBuffer.PositionKind);\n    var normals = [];\n\n    for (var i = 0; i < meshIndices.length; i += 3) {\n        vertexIndex[0] = meshIndices[i];\n        vertexIndex[1] = meshIndices[i + 1];\n        vertexIndex[2] = meshIndices[i + 2];\n        for (var j = 0; j < 3; j++) {\n            A = vertexIndex[j];\n            B = vertexIndex[(j + 1) % 3];\n            if (side[A] === undefined && side[B] === undefined) {\n                side[A] = [];\n                side[B] = [];\n            } else {\n                if (side[A] === undefined) {\n                    side[A] = [];\n                }\n                if (side[B] === undefined) {\n                    side[B] = [];\n                }\n            }\n            if (side[A][B] === undefined && side[B][A] === undefined) {\n                side[A][B] = [];\n                d.x = (positions[3 * B] - positions[3 * A]) / gaps;\n                d.y = (positions[3 * B + 1] - positions[3 * A + 1]) / gaps;\n                d.z = (positions[3 * B + 2] - positions[3 * A + 2]) / gaps;\n                u.x = (uvs[2 * B] - uvs[2 * A]) / gaps;\n                u.y = (uvs[2 * B + 1] - uvs[2 * A + 1]) / gaps;\n                side[A][B].push(A);\n                for (var k = 1; k < gaps; k++) {\n                    side[A][B].push(positions.length / 3);\n                    positions.push(positions[3 * A] + k * d.x, positions[3 * A + 1] + k * d.y, positions[3 * A + 2] + k * d.z);\n                    uvs.push(uvs[2 * A] + k * u.x, uvs[2 * A + 1] + k * u.y);\n                }\n                side[A][B].push(B);\n                side[B][A] = [];\n                l = side[A][B].length;\n                for (var a = 0; a < l; a++) {\n                    side[B][A][a] = side[A][B][l - 1 - a];\n                }\n            } else {\n                if (side[A][B] === undefined) {\n                    side[A][B] = [];\n                    l = side[B][A].length;\n                    for (var a = 0; a < l; a++) {\n                        side[A][B][a] = side[B][A][l - 1 - a];\n                    }\n                }\n                if (side[B][A] === undefined) {\n                    side[B][A] = [];\n                    l = side[A][B].length;\n                    for (var a = 0; a < l; a++) {\n                        side[B][A][a] = side[A][B][l - 1 - a];\n                    }\n                }\n            }\n        }\n        fvs[0][0] = meshIndices[i];\n        fvs[1][0] = side[meshIndices[i]][meshIndices[i + 1]][1];\n        fvs[1][1] = side[meshIndices[i]][meshIndices[i + 2]][1];\n        for (var k = 2; k < gaps; k++) {\n            fvs[k][0] = side[meshIndices[i]][meshIndices[i + 1]][k];\n            fvs[k][k] = side[meshIndices[i]][meshIndices[i + 2]][k];\n            d.x = (positions[3 * fvs[k][k]] - positions[3 * fvs[k][0]]) / k;\n            d.y = (positions[3 * fvs[k][k] + 1] - positions[3 * fvs[k][0] + 1]) / k;\n            d.z = (positions[3 * fvs[k][k] + 2] - positions[3 * fvs[k][0] + 2]) / k;\n            u.x = (uvs[2 * fvs[k][k]] - uvs[2 * fvs[k][0]]) / k;\n            u.y = (uvs[2 * fvs[k][k] + 1] - uvs[2 * fvs[k][0] + 1]) / k;\n            for (var j = 1; j < k; j++) {\n                fvs[k][j] = positions.length / 3;\n                positions.push(positions[3 * fvs[k][0]] + j * d.x, positions[3 * fvs[k][0] + 1] + j * d.y, positions[3 * fvs[k][0] + 2] + j * d.z);\n                uvs.push(uvs[2 * fvs[k][0]] + j * u.x, uvs[2 * fvs[k][0] + 1] + j * u.y);\n            }\n        }\n        fvs[gaps] = side[meshIndices[i + 1]][meshIndices[i + 2]];\n\n        indices.push(fvs[0][0], fvs[1][0], fvs[1][1]);\n        for (var k = 1; k < gaps; k++) {\n            for (var j = 0; j < k; j++) {\n                indices.push(fvs[k][j], fvs[k + 1][j], fvs[k + 1][j + 1]);\n                indices.push(fvs[k][j], fvs[k + 1][j + 1], fvs[k][j + 1]);\n            }\n            indices.push(fvs[k][j], fvs[k + 1][j], fvs[k + 1][j + 1]);\n        }\n    }\n\n    var vertexData = new BABYLON.VertexData();\n    vertexData.positions = positions;\n    vertexData.indices = indices;\n    vertexData.uvs = uvs;\n\n    BABYLON.VertexData.ComputeNormals(positions, indices, normals);\n    vertexData.normals = normals;\n    mesh.dispose();\n    var newmesh = new BABYLON.Mesh(\"newmesh\", scene);\n    vertexData.applyToMesh(newmesh);\n\n    return newmesh;\n}\n```\n\n----------------------------------------\n\nTITLE: Starting a Development Web Server with Gulp\nDESCRIPTION: This command shows how to start a local web server using Gulp to test and preview the materials in a browser environment.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/dev/materials/readme.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngulp webserver\n```\n\n----------------------------------------\n\nTITLE: Using a Material from the Babylon.js Library\nDESCRIPTION: This snippet demonstrates how to reference and apply a material from the Babylon.js materials library to a 3D object in a scene.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/dev/materials/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar simple = new BABYLON.SimpleMaterial(\"simple\", scene);\nsphere.material = simple;\n```\n\n----------------------------------------\n\nTITLE: Installing Babylon.js Serializers via NPM\nDESCRIPTION: NPM command to install Babylon.js core and serializers packages as project dependencies\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/public/umd/babylonjs-serializers/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save babylonjs babylonjs-serializers\n```\n\n----------------------------------------\n\nTITLE: Extending WebXR Interfaces for Feature Point Cloud Access\nDESCRIPTION: Defines the TypeScript interfaces that extend XRSession and XRFrame to support feature point cloud functionality. Adds the trySetFeaturePointCloudEnabled method to XRSession and the featurePointCloud array to XRFrame.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/dev/core/src/LibDeclarations/NativeExtensions/FeaturePoints.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface XRSession {\n  ...\n  trySetFeaturePointCloudEnabled(enabled: boolean): boolean;\n}\n\ninterface XRFrame {\n  ...\n  featurePointCloud? : Array<number>\n}\n```\n\n----------------------------------------\n\nTITLE: Running Coverage Analysis for Babylon.js Viewer\nDESCRIPTION: Command to create a non-minified bundle, instrument it with nyc/istanbul, and launch it in the browser for manual coverage data generation.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/tools/viewer/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start:coverage\n```\n\n----------------------------------------\n\nTITLE: Importing Babylon.js Procedural Textures in ES6\nDESCRIPTION: Example of importing StandardMaterial from the core library and FireProceduralTexture from the procedural textures library using ES6 import syntax.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/public/@babylonjs/procedural-textures/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { StandardMaterial } from '@babylonjs/core/Materials/standardMaterial';\nimport { FireProceduralTexture } from '@babylonjs/procedural-textures/fireProceduralTexture';\n```\n\n----------------------------------------\n\nTITLE: Defining Sound Cue Timings with Start Times and Durations\nDESCRIPTION: This configuration defines various sound effects with their start times and durations in milliseconds. Each line follows the format 'name : startTime, duration' where startTime indicates when the sound should begin playing and duration specifies how long the sound plays.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/tools/playground/public/sounds/6sounds_lengths.txt#2025-04-23_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\nchurch : 0, 5000\nfoghorn : 5100, 6600\nscream : 12000, 1600\nmanwalk : 14000, 9200\nwomanwalk : 23000, 7900\ndoor : 31000, 2800\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Babylon.js Post Process Library\nDESCRIPTION: This snippet shows how to add the necessary type definitions to the tsconfig.json file for using Babylon.js and its post-process library in a TypeScript project.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/public/umd/babylonjs-post-process/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"types\": [\n        \"babylonjs\",\n        \"babylonjs-post-process\",\n        \"oneMoreDependencyThatIReallyNeed\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Babylon.js GUI via NPM\nDESCRIPTION: Command to install Babylon.js core and GUI modules using npm package manager\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/public/@babylonjs/gui/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @babylonjs/core @babylonjs/gui\n```\n\n----------------------------------------\n\nTITLE: Installing Babylon.js GUI via NPM\nDESCRIPTION: Command to install Babylon.js and its GUI module using NPM. This is the recommended method for production environments.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/public/umd/babylonjs-gui/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save babylonjs babylonjs-gui\n```\n\n----------------------------------------\n\nTITLE: Installing Babylon.js and Inspector via NPM\nDESCRIPTION: This command installs both the Babylon.js core library and the inspector module using NPM. It saves them as dependencies in the project's package.json file.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/public/umd/babylonjs-inspector/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save babylonjs babylonjs-inspector\n```\n\n----------------------------------------\n\nTITLE: Importing Babylon.js Procedural Textures\nDESCRIPTION: JavaScript/TypeScript import statements for Babylon.js and its procedural textures module.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/public/umd/babylonjs-procedural-textures/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as BABYLON from 'babylonjs';\\nimport 'babylonjs-procedural-textures';\n```\n\n----------------------------------------\n\nTITLE: Installing Babylon.js Procedural Textures with npm\nDESCRIPTION: Command to install the Babylon.js core and procedural textures libraries using npm package manager.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/public/@babylonjs/procedural-textures/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @babylonjs/core @babylonjs/procedural-textures\n```\n\n----------------------------------------\n\nTITLE: Installing BabylonJS Viewer with npm\nDESCRIPTION: Command to install the BabylonJS Viewer package using npm for use with a bundler.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/public/@babylonjs/viewer/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @babylonjs/viewer\n```\n\n----------------------------------------\n\nTITLE: Installing Babylon.js Procedural Textures via NPM\nDESCRIPTION: NPM installation command for Babylon.js and its procedural textures library.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/public/umd/babylonjs-procedural-textures/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save babylonjs babylonjs-procedural-textures\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript types for Babylon.js Materials\nDESCRIPTION: TypeScript configuration snippet showing how to add Babylon.js and its materials library to the types array in tsconfig.json.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/public/umd/babylonjs-materials/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n    ....\n    \"types\": [\n        \"babylonjs\",\n        \"babylonjs-materials\",\n        \"oneMoreDependencyThatIReallyNeed\"\n    ],\n    ....\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Types for Babylon.js\nDESCRIPTION: TypeScript configuration snippet showing how to add Babylon.js type definitions to tsconfig.json\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/public/umd/babylonjs-serializers/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n    {\n        \"types\": [\n            \"babylonjs\",\n            \"babylonjs-serializers\",\n            \"oneMoreDependencyThatIReallyNeed\"\n        ]\n    }\n```\n\n----------------------------------------\n\nTITLE: Installing Babylon.js Core and Serializers via npm\nDESCRIPTION: npm command to install the required Babylon.js packages for using serializers.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/public/@babylonjs/serializers/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save @babylonjs/core @babylonjs/serializers\n```\n\n----------------------------------------\n\nTITLE: Overriding Babylon.js Viewer Assets Package in Webpack Configuration\nDESCRIPTION: This code snippet demonstrates how to override the 'babylonjs-viewer-assets' package when using webpack. It defines the package in the 'externals' configuration to prevent it from being bundled.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/public/babylonjs-viewer-assets/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexternals: {\n    \"babylonjs-viewer-assets\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Running Individual Test File for BabylonJS Core\nDESCRIPTION: This command demonstrates how to run a specific test file within the BabylonJS core module. It uses the -w flag to specify the workspace and -i to indicate the individual test file.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/dev/core/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test -w @dev/core -- -i test/Physics/babylon.physicsComponents.test.ts\n```\n\n----------------------------------------\n\nTITLE: Compiling Babylon.js Serializers using Gulp\nDESCRIPTION: Command to compile serialization tools in Babylon.js. This command should be run from the tools/gulp folder to build all serializers that can generate different formats from .babylon files.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/dev/serializers/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngulp serializers\n```\n\n----------------------------------------\n\nTITLE: Running Gulp Build for Procedural Texture Library in Babylon.js\nDESCRIPTION: Command to build all procedural textures and generate the dist folder using Gulp. This needs to be run from the tools/gulp folder.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/dev/proceduralTextures/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngulp proceduralTextureLibrary\n```\n\n----------------------------------------\n\nTITLE: Testing Specific Class Objects\nDESCRIPTION: Example of testing memory leaks for specific classes with optional dispose function checking.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/public/@babylonjs/test-tools/readme.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nit(\"Should do the thing it should do!\", async () => {\n    const classes = [\n        {\n            globalClassName: \"FirstComponent\",\n            disposeFunctionName: \"dispose\",\n        },\n        {\n            globalClassName: \"SecondComponent\",\n            disposeFunctionName: \"dispose\",\n        }\n    ]\n    const init = await countObjects(page, classes);\n    // do your thing on the page\n    // run your asserts\n    // ...\n    await countCurrentObjects(page, init, classes);\n}, 10000);\n```\n\n----------------------------------------\n\nTITLE: Manual Object Count Testing\nDESCRIPTION: Demonstrates manual object counting before and after operations to check for memory leaks.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/public/@babylonjs/test-tools/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nit(\"Should do the thing it should do!\", async () => {\n    const init = await countObjects(page);\n    // do your thing on the page\n    // run your asserts\n    // ...\n    // count objects again\n    const valuesAtTheEnd = await countObjects(page);\n    // no run expect rules to check if, for example, the number of objects increased less than 200\n    expect(valuesAtTheEnd.numberOfObjects - valuesAtTheEnd.numberOfObjects).toBeLessThan(200);\n}, 10000);\n```\n\n----------------------------------------\n\nTITLE: Testing Event Leaks in Jest\nDESCRIPTION: Example test case showing how to check for event leaks after performing test operations.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/public/@babylonjs/test-tools/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nit(\"Should do the thing it should do!\", async () => {\n    // do your thing on the page\n    // run your asserts\n    // ...\n    // run assertEventLeaks with the puppeteer page\n    await assetEventLeaks(page);\n}, 10000);\n```\n\n----------------------------------------\n\nTITLE: Initializing Event Leak Detection in Jest\nDESCRIPTION: Sets up event leak detection before each test by evaluating event listener augmentation on the Puppeteer page.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/public/@babylonjs/test-tools/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nbeforeEach(async () => {\n    await page.goto(`${baseULR}/test.html`, {\n        waitUntil: \"load\",\n        timeout: 0,\n    });\n    await page.evaluate(evaluateEventListenerAugmentation);\n});\n```\n\n----------------------------------------\n\nTITLE: Disposing Fur Material Shells in BabylonJS\nDESCRIPTION: Cleans up fur material shells and their associated materials.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/dev/materials/src/fur/readme.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfor (var i = 0; i < shells.length; i++) {\n    shells[i].material.dispose();\n    shells[i].dispose();\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Gitpod Button for Online Development Environment\nDESCRIPTION: This code snippet shows how to include a Gitpod button in the markdown file. When clicked, it launches a workspace with Babylon.js repo cloned, dependencies installed, and development server running.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/contributing.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/BabylonJS/Babylon.js)\n```\n\n----------------------------------------\n\nTITLE: Importing Babylon.js Entirety Using Legacy Mode\nDESCRIPTION: Demonstrates how to import the entire Babylon.js framework using the legacy mode. This approach imports all Babylon.js functionality but doesn't benefit from tree shaking.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/readme-es6.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as BABYLON from \"@babylonjs/core/Legacy/legacy\";\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Types for Babylon.js\nDESCRIPTION: TypeScript configuration snippet showing how to add Babylon.js type definitions to tsconfig.json.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/packages/public/umd/babylonjs-procedural-textures/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n    ....\\n    \"types\": [\\n        \"babylonjs\",\\n        \"babylonjs-procedural-textures\",\\n        \"oneMoreDependencyThatIReallyNeed\"\\n    ],\\n    ....\n```\n\n----------------------------------------\n\nTITLE: Copyright Notice - Babylon.js\nDESCRIPTION: Standard copyright header indicating ownership of Babylon.js by the Babylon.js team for the year 2023.\nSOURCE: https://github.com/babylonjs/babylon.js/blob/master/NOTICE.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nBabylon.js\nCopyright 2023 The Babylon.js team\n```"
  }
]