[
  {
    "owner": "softwarebrothers",
    "repo": "adminjs-docs",
    "content": "TITLE: Complete Example of AdminJS with SQL Adapter\nDESCRIPTION: A complete working example showing how to set up an Express application with AdminJS using the SQL adapter to connect to a PostgreSQL database. It demonstrates the full configuration process including registering the adapter, initializing the database connection, and setting up the admin panel.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/adapters/sql.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport AdminJS from 'adminjs'\nimport express from 'express'\nimport Plugin from '@adminjs/express'\nimport { Adapter, Database, Resource } from '@adminjs/sql'\n\nAdminJS.registerAdapter({\n  Database,\n  Resource,\n})\n\nconst start = async () => {\n  const app = express()\n\n  const db = await new Adapter('postgresql', {\n    connectionString: 'postgres://adminjs:adminjs@localhost:5432/adminjs_panel',\n    database: 'adminjs_panel',\n  }).init();\n\n  const admin = new AdminJS({\n    resources: [\n      {\n        resource: db.table('users'),\n        options: {},\n      },\n    ],\n  });\n\n  admin.watch()\n\n  const router = Plugin.buildRouter(admin)\n\n  app.use(admin.options.rootPath, router)\n\n  app.listen(8080, () => {\n    console.log('app started')\n  })\n}\n\nstart()\n```\n\n----------------------------------------\n\nTITLE: Authenticated AdminJS with Express (TypeScript)\nDESCRIPTION: TypeScript implementation of AdminJS with Express that includes authentication and PostgreSQL session management. Provides proper type definitions for the authentication function and session configuration.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/plugins/express.md#2025-04-17_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport AdminJS from 'adminjs'\nimport AdminJSExpress from '@adminjs/express'\nimport express from 'express'\nimport Connect from 'connect-pg-simple'\nimport session from 'express-session'\n\nconst PORT = 3000\n\nconst DEFAULT_ADMIN = {\n  email: 'admin@example.com',\n  password: 'password',\n}\n\nconst authenticate = async (email: string, password: string) => {\n  if (email === DEFAULT_ADMIN.email && password === DEFAULT_ADMIN.password) {\n    return Promise.resolve(DEFAULT_ADMIN)\n  }\n  return null\n}\n\nconst start = async () => {\n  const app = express()\n\n  const admin = new AdminJS({})\n\n  const ConnectSession = Connect(session)\n  const sessionStore = new ConnectSession({\n    conObject: {\n      connectionString: 'postgres://adminjs:@localhost:5432/adminjs',\n      ssl: process.env.NODE_ENV === 'production',\n    },\n    tableName: 'session',\n    createTableIfMissing: true,\n  })\n\n  const adminRouter = AdminJSExpress.buildAuthenticatedRouter(\n    admin,\n    {\n      authenticate,\n      cookieName: 'adminjs',\n      cookiePassword: 'sessionsecret',\n    },\n    null,\n    {\n      store: sessionStore,\n      resave: true,\n      saveUninitialized: true,\n      secret: 'sessionsecret',\n      cookie: {\n        httpOnly: process.env.NODE_ENV === 'production',\n        secure: process.env.NODE_ENV === 'production',\n      },\n      name: 'adminjs',\n    }\n  )\n  app.use(admin.options.rootPath, adminRouter)\n\n  app.listen(PORT, () => {\n    console.log(`AdminJS started on http://localhost:${PORT}${admin.options.rootPath}`)\n  })\n}\n\nstart()\n```\n\n----------------------------------------\n\nTITLE: Simple AdminJS Setup with Fastify in JavaScript\nDESCRIPTION: Basic configuration to integrate AdminJS with Fastify in a JavaScript environment. It sets up a Fastify server, initializes AdminJS, and builds the router.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/plugins/fastify.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport AdminJSFastify from '@adminjs/fastify'\nimport AdminJS from 'adminjs'\nimport Fastify from 'fastify'\n\nconst PORT = 3000\n\nconst start = async () => {\n  const app = Fastify()\n  const admin = new AdminJS({\n    databases: [],\n    rootPath: '/admin'\n  })\n\n  await AdminJSFastify.buildRouter(\n    admin,\n    app,\n  )\n  \n  app.listen({ port: PORT }, (err, addr) => {\n    if (err) {\n      console.error(err)\n    } else {\n      console.log(`AdminJS started on http://localhost:${PORT}${admin.options.rootPath}`)\n    }\n  })\n}\n\nstart()\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Action in AdminJS\nDESCRIPTION: Shows how to create a basic custom action with a handler function that returns data to the frontend. This example demonstrates setting up a record-type action without a custom component.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/action.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst UserResource = {\n  resource: User,\n  options: {\n    actions: {\n      myCustomAction: {\n        actionType: 'record',\n        component: false,\n        handler: (request, response, context) => {\n          const { record, currentAdmin } = context\n          return {\n            record: record.toJSON(currentAdmin),\n            msg: 'Hello world',\n          }\n        },\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: BaseAuthProvider Interface and Implementation\nDESCRIPTION: Definition of the BaseAuthProvider class and its interfaces. This is the foundation for creating custom authentication providers in AdminJS, with methods for handling login, logout, and token refresh operations.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/authentication/README.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface LoginHandlerOptions {\n  data: Record<string, any>;\n  query?: Record<string, any>;\n  params?: Record<string, any>;\n  headers: Record<string, any>;\n}\n\nexport interface RefreshTokenHandlerOptions extends LoginHandlerOptions {}\n\nexport class BaseAuthProvider {\n  public getUiProps(): Record<string, any> {\n    return {}\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  public async handleLogin(opts: LoginHandlerOptions, context?: any) {\n    throw new NotImplementedError('BaseAuthProvider#handleLogin')\n  }\n\n  public async handleLogout(context?: any): Promise<any> {\n    return Promise.resolve()\n  }\n\n  public async handleRefreshToken(opts: RefreshTokenHandlerOptions, context?: any): Promise<any> {\n    return Promise.resolve({})\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Role-Based Property Access in AdminJS Resource\nDESCRIPTION: This snippet demonstrates how to apply the role-based access control feature to a resource and configure property-specific access rules and default values.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/tutorials/adding-role-based-access-control.md#2025-04-17_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst someResource: ResourceWithOptions = {\n  resource: Something,\n  features: [roleBasedAccessControl],\n  options: {\n    properties: {\n      superSecretAdminProperty: {\n        custom: {\n          role: 'admin',\n          defaultValue: 'a secret',\n        },\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring AdminJS Instance with Custom Dashboard and Handler in TypeScript\nDESCRIPTION: Shows how to configure an AdminJS instance with both a custom dashboard component and a custom handler. This allows the dashboard to access server-side data.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/ui-customization/dashboard-customization.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst admin = new AdminJS({\n  dashboard: {\n    component: Components.Dashboard,\n    handler: dashboardHandler,\n  },\n  componentLoader\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable Role-Based Access Control Feature in AdminJS\nDESCRIPTION: This code defines a reusable feature that combines the custom action component and hooks for implementing role-based access control across multiple resources in AdminJS.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/tutorials/adding-role-based-access-control.md#2025-04-17_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst roleBasedAccessControl = buildFeature((admin) => {\n  const CustomAction = admin.componentLoader.add(\n    'CustomAction',\n    './custom-action',\n  );\n  return {\n    actions: {\n      new: {\n        component: CustomAction,\n        before: [roleAccessControlBeforeHook, defaultValuesBeforeHook],\n        after: [roleAccessControlAfterHook],\n      },\n      edit: {\n        component: CustomAction,\n        before: [roleAccessControlBeforeHook],\n        after: [roleAccessControlAfterHook],\n      },\n      show: {\n        component: CustomAction,\n        after: [roleAccessControlAfterHook],\n      },\n      list: {\n        component: CustomAction,\n        after: [roleAccessControlAfterHook],\n      },\n    },\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Creating AdminJS Instance with SQL Resources\nDESCRIPTION: This snippet shows how to create an AdminJS instance using specific database tables as resources rather than loading the entire database. This is the recommended approach for production applications.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/adapters/sql.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst admin = new AdminJS({\n  resources: [\n    {\n      resource: db.table('users'),\n      options: {},\n    },\n  ],\n  // databases: [db], <- not recommended\n});\n```\n\n----------------------------------------\n\nTITLE: Authenticated AdminJS with Express (JavaScript)\nDESCRIPTION: Implementation of AdminJS with Express that includes authentication and session management. Uses connect-pg-simple to store session data in PostgreSQL and implements a simple authentication function.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/plugins/express.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport AdminJS from 'adminjs'\nimport AdminJSExpress from '@adminjs/express'\nimport express from 'express'\nimport Connect from 'connect-pg-simple'\nimport session from 'express-session'\n\nconst PORT = 3000\n\nconst DEFAULT_ADMIN = {\n  email: 'admin@example.com',\n  password: 'password',\n}\n\nconst authenticate = async (email, password) => {\n  if (email === DEFAULT_ADMIN.email && password === DEFAULT_ADMIN.password) {\n    return Promise.resolve(DEFAULT_ADMIN)\n  }\n  return null\n}\n\nconst start = async () => {\n  const app = express()\n\n  const admin = new AdminJS({})\n\n  const ConnectSession = Connect(session)\n  const sessionStore = new ConnectSession({\n    conObject: {\n      connectionString: 'postgres://adminjs:@localhost:5432/adminjs',\n      ssl: process.env.NODE_ENV === 'production',\n    },\n    tableName: 'session',\n    createTableIfMissing: true,\n  })\n\n  const adminRouter = AdminJSExpress.buildAuthenticatedRouter(\n    admin,\n    {\n      authenticate,\n      cookieName: 'adminjs',\n      cookiePassword: 'sessionsecret',\n    },\n    null,\n    {\n      store: sessionStore,\n      resave: true,\n      saveUninitialized: true,\n      secret: 'sessionsecret',\n      cookie: {\n        httpOnly: process.env.NODE_ENV === 'production',\n        secure: process.env.NODE_ENV === 'production',\n      },\n      name: 'adminjs',\n    }\n  )\n  app.use(admin.options.rootPath, adminRouter)\n\n  app.listen(PORT, () => {\n    console.log(`AdminJS started on http://localhost:${PORT}${admin.options.rootPath}`)\n  })\n}\n\nstart()\n```\n\n----------------------------------------\n\nTITLE: Configuring AdminJS Upload Feature with AWS S3 Provider\nDESCRIPTION: TypeScript implementation for setting up the upload feature with AWS S3 storage. Includes AWS credentials configuration and PDF file validation.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/features/upload.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport uploadFeature from '@adminjs/upload';\n\nimport { File } from './models/file.js';\nimport componentLoader from './component-loader.js';\n\nconst AWScredentials = {\n  accessKeyId: 'AWS_ACCESS_KEY_ID',\n  secretAccessKey: 'AWS_SECRET_ACCESS_KEY',\n  region: 'AWS_REGION',\n  bucket: 'AWS_BUCKET',\n};\n\nexport const files = {\n  resource: File,\n  options: {\n    properties: {\n      s3Key: {\n        type: 'string',\n      },\n      bucket: {\n        type: 'string',\n      },\n      mime: {\n        type: 'string',\n      },\n      comment: {\n        type: 'textarea',\n        isSortable: false,\n      },\n    },\n  },\n  features: [\n    uploadFeature({\n      componentLoader,\n      provider: { aws: AWScredentials },\n      validation: { mimeTypes: ['application/pdf'] },\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Securing User Password Data with Hooks in AdminJS\nDESCRIPTION: Implementation of AdminJS resource configuration for User entity with before/after hooks to secure password data, including hashing on create/edit and removing passwords from responses.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/tutorials/adding-role-based-access-control.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst userResource: ResourceWithOptions = {\n  resource: User,\n  options: {\n    actions: {\n      new: {\n        before: async (request) => {\n          if (request.payload?.password) {\n            request.payload.password = hash(request.payload.password);\n          }\n          return request;\n        },\n      },\n      show: {\n        after: async (response: RecordActionResponse) => {\n          response.record.params.password = '';\n          return response;\n        },\n      },\n      edit: {\n        before: async (request) => {\n          // no need to hash on GET requests, we'll remove passwords there anyway\n          if (request.method === 'post') {\n            // hash only if password is present, delete otherwise\n            // so we don't overwrite it\n            if (request.payload?.password) {\n              request.payload.password = hash(request.payload.password);\n            } else {\n              delete request.payload?.password;\n            }\n          }\n          return request;\n        },\n        after: async (response: RecordActionResponse) => {\n          response.record.params.password = '';\n          return response;\n        },\n      },\n      list: {\n        after: async (response: ListActionResponse) => {\n          response.records.forEach((record) => {\n            record.params.password = '';\n          });\n          return response;\n        },\n      },\n    },\n    properties: {\n      password: {\n        isVisible: {\n          list: false,\n          filter: false,\n          show: false,\n          edit: true, // we only show it in the edit view\n        },\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AdminJS Module in Nest.js\nDESCRIPTION: Configuration for AdminJS module in Nest.js, including Prisma resource setup and options.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/adapters/prisma.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// ... other imports\nimport { Category } from './category.entity.js'\n// ... other code\nAdminModule.createAdminAsync({\n  useFactory: () => {\n    // Note: Feel free to contribute to this documentation if you find a Nest-way of\n    // injecting PrismaService into AdminJS module\n    const prisma = new PrismaService()\n\n    return {\n      adminJsOptions: {\n        rootPath: '/admin',\n        resources: [{\n          resource: { model: getModelByName('Post'), client: prisma },\n          options: {},\n        }],\n      },\n    }\n  }\n}),\n```\n\n----------------------------------------\n\nTITLE: Authenticated AdminJS Setup with Fastify in TypeScript\nDESCRIPTION: Advanced configuration to integrate AdminJS with Fastify in TypeScript, including authentication and session management using PostgreSQL. It sets up a Fastify server, initializes AdminJS, configures session store, and builds an authenticated router.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/plugins/fastify.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport AdminJSFastify from '@adminjs/fastify'\nimport FastifySession from '@fastify/session'\nimport AdminJS from 'adminjs'\nimport Fastify from 'fastify'\nimport Connect from 'connect-pg-simple'\n\n// Note: There are typing issues between Fastify Session and connect-pg-simple\n// but the session will work correctly.\nconst ConnectSession = Connect(FastifySession as any)\nconst sessionStore = new ConnectSession({\n  conObject: {\n    connectionString: 'postgres://adminjs:adminjs@localhost:5435/adminjs',\n    ssl: process.env.NODE_ENV === 'production',\n  },\n  tableName: 'session',\n  createTableIfMissing: true,\n})\n\nconst PORT = 3000\n\nconst DEFAULT_ADMIN = {\n  email: 'admin@example.com',\n  password: 'password',\n}\n\nconst authenticate = async (email: string, password: string) => {\n  if (email === DEFAULT_ADMIN.email && password === DEFAULT_ADMIN.password) {\n    return Promise.resolve(DEFAULT_ADMIN)\n  }\n  return null\n}\n\nconst start = async () => {\n  const app = Fastify()\n  const admin = new AdminJS({\n    databases: [],\n    rootPath: '/admin'\n  })\n  \n  // \"secret\" must be a string with at least 32 characters, example:\n  const cookieSecret = 'sieL67H7GbkzJ4XCoH0IHcmO1hGBSiG5'\n  await AdminJSFastify.buildAuthenticatedRouter(\n    admin,\n    {\n      authenticate,\n      cookiePassword: cookieSecret,\n      cookieName: 'adminjs',\n    },\n    app,\n    {\n      store: sessionStore as any,\n      saveUninitialized: true,\n      secret: cookieSecret,\n      cookie: {\n        httpOnly: process.env.NODE_ENV === 'production',\n        secure: process.env.NODE_ENV === 'production',\n      },\n    }\n  )\n  \n  app.listen({ port: PORT }, (err, addr) => {\n    if (err) {\n      console.error(err)\n    } else {\n      console.log(`AdminJS started on http://localhost:${PORT}${admin.options.rootPath}`)\n\n    }\n  })\n}\n\nstart()\n```\n\n----------------------------------------\n\nTITLE: Configuring Standard AdminJS TypeORM Integration\nDESCRIPTION: Setup code for standard (non-Nest.js) AdminJS integration with TypeORM, showing adapter registration and resource configuration.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/adapters/typeorm.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// ... other imports\nimport * as AdminJSTypeorm from '@adminjs/typeorm'\n\nimport dataSource from './path/to/your/datasource.js'\nimport { Organization } from './organization.entity.js'\n\nAdminJS.registerAdapter({\n  Resource: AdminJSTypeorm.Resource,\n  Database: AdminJSTypeorm.Database,\n})\n\n// ... other code\nconst start = async () => {\n  // Make sure you initialize the data source before you create your AdminJS instance\n  await dataSource.initialize()\n  const adminOptions = {\n    // We pass Organization to `resources`\n    resources: [Organization],\n  }\n  // Please note that some plugins don't need you to create AdminJS instance manually,\n  // instead you would just pass `adminOptions` into the plugin directly,\n  // an example would be \"@adminjs/hapi\"\n  const admin = new AdminJS(adminOptions)\n  // ... other code\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a MikroORM Entity Class for AdminJS\nDESCRIPTION: Example of a MikroORM entity class representing an Owner with UUID primary key and various properties including data types and field mappings. This entity extends BaseEntity and implements an IOwner interface.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/adapters/mikroorm.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { v4 } from 'uuid'\nimport { BaseEntity, Entity, PrimaryKey, Property } from '@mikro-orm/core'\n\nexport interface IOwner {\n  firstName: string;\n  lastName: string;\n  age: number;\n}\n\n@Entity({ tableName: 'owners' })\nexport class Owner extends BaseEntity<Owner, 'id'> implements IOwner {\n  @PrimaryKey({ columnType: 'uuid' })\n  id = v4()\n\n  @Property({ fieldName: 'first_name', columnType: 'text' })\n  firstName: string\n\n  @Property({ fieldName: 'last_name', columnType: 'text' })\n  lastName: string\n\n  @Property({ fieldName: 'age', columnType: 'integer' })\n  age: number\n\n  @Property({ fieldName: 'created_at', columnType: 'timestamptz' })\n  createdAt: Date = new Date()\n\n  @Property({\n    fieldName: 'updated_at',\n    columnType: 'timestamptz',\n    onUpdate: () => new Date(),\n  })\n  updatedAt: Date = new Date()\n}\n```\n\n----------------------------------------\n\nTITLE: Registering TypeORM Adapter in Nest.js\nDESCRIPTION: Code for registering the TypeORM adapter with AdminJS in a Nest.js application.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/adapters/typeorm.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nAdminJS.registerAdapter({\n  Resource: AdminJSTypeorm.Resource,\n  Database: AdminJSTypeorm.Database,\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Explicit Resources in AdminJS\nDESCRIPTION: Shows how to explicitly define resources in AdminJS with custom options\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/resource.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport User from './user.entity.js'\nimport Profile from './profile.entity.js'\n\nconst admin = new AdminJS({\n  resources: [\n    User, // you can simply pass a model\n    {\n      resource: Profile,\n      options: { // or you can provide an object with your custom resource options\n        id: 'profiles', // here the resource identifier has been renamed to \"profiles\"\n      },\n    },\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring AdminJS with Database Connection\nDESCRIPTION: Demonstrates how to initialize AdminJS with a MongoDB database connection using mongoose\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/resource.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst mongooseDb = await mongoose.connect('mongodb://localhost:27017/test')\n\nconst admin = new AdminJS({\n  databases: [mongooseDb],\n})\n```\n\n----------------------------------------\n\nTITLE: Advanced AdminJS Feature Implementation Using buildFeature Helper\nDESCRIPTION: An improved approach to feature implementation using AdminJS's buildFeature helper function. This example demonstrates how to create a feature with an action hook and apply it to a resource, eliminating the need for manual configuration merging.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/features/writing-your-own-features.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { buildFeature, FeatureType } from 'adminjs';\n\nimport SomeModel from 'some-model.entity.js';\n\nconst someBeforeHook = () => { /* noop */ };\n\nconst myFeature = (config = {}): FeatureType => {\n  // do something with your feature config?\n\n  return buildFeature({\n    actions: {\n      edit: {\n        before: [someBeforeHook],\n      },\n    }\n  });\n}\n\nconst SomeResource: ResourceWithOptions = {\n  resource: SomeModel,\n  features: [myFeature({})],\n};\n\n/* \"someBeforeHook\" will be used as a \"before\" hook in \"edit\" actions\nfor every resource where \"myFeature\" is added */\n```\n\n----------------------------------------\n\nTITLE: Registering and Initializing SQL Adapter\nDESCRIPTION: This code demonstrates how to register the SQL adapter with AdminJS and initialize a connection to a PostgreSQL database. The adapter needs to be registered first, then initialized with connection details.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/adapters/sql.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// ...\n\nAdminJS.registerAdapter({\n  Database,\n  Resource,\n})\n\n// ...\n\nconst db = await new Adapter('postgresql', {\n  connectionString: '<your database url>',\n  database: '<your database name>',\n}).init()\n```\n\n----------------------------------------\n\nTITLE: Implementing Features in AdminJS Resource Configuration\nDESCRIPTION: Example of how to include features in an AdminJS resource configuration. This snippet demonstrates defining a ResourceWithOptions object for a User entity with a features array containing a feature with its configuration.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/features/README.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ResourceWithOptions } from 'adminjs';\n\nimport User from './user.entity.js';\n\nconst UserResource: ResourceWithOptions = {\n  resource: User,\n  options: {},\n  features: [someFeature({ /* feature config */ })],\n};\n\nexport default UserResource;\n```\n\n----------------------------------------\n\nTITLE: Setting up AdminJS with Objection Adapter\nDESCRIPTION: Configuration for registering the Objection adapter with AdminJS and setting up resources. Shows how to initialize AdminJS with Objection models.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/adapters/objection.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// ... other imports\nimport * as AdminJSObjection from '@adminjs/objection'\n\nimport { Office } from './office.entity.js'\n\nAdminJS.registerAdapter({\n  Resource: AdminJSObjection.Resource,\n  Database: AdminJSObjection.Database,\n})\n\n// ... other code\nconst start = async () => {\n  const adminOptions = {\n    // We pass Office to `resources`\n    resources: [Office],\n  }\n  // Please note that some plugins don't need you to create AdminJS instance manually,\n  // instead you would just pass `adminOptions` into the plugin directly,\n  // an example would be \"@adminjs/hapi\"\n  const admin = new AdminJS(adminOptions)\n  // ... other code\n}\n\nstart()\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Action Component in React\nDESCRIPTION: Implementation of a custom React component for an AdminJS action. This component renders a UI with explanatory content and displays the record data returned by the action handler.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/action.md#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport { Box, H3 } from '@adminjs/design-system'\nimport { ActionProps } from 'adminjs'\n\nconst MyCustomAction = (props: ActionProps) => {\n  const { record } = props\n\n  return (\n    <Box flex>\n      <Box variant=\"white\" width={1 / 2} boxShadow=\"card\" mr=\"xxl\" flexShrink={0}>\n        <H3>Example of a simple page</H3>\n        <p>Where you can put almost everything</p>\n        <p>like this:</p>\n        <p>\n          <img src=\"https://i.redd.it/rd39yuiy9ns21.jpg\" alt=\"stupid cat\" width={300} />\n        </p>\n      </Box>\n      <Box>\n        <p>Or (more likely), operate on a returned record:</p>\n        <Box overflowX=\"auto\">{JSON.stringify(record)}</Box>\n      </Box>\n    </Box>\n  )\n}\n\nexport default MyCustomAction\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Translation Configuration Example\nDESCRIPTION: Detailed example showing various translation scenarios including actions, buttons, messages, labels, and properties translations.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/tutorials/internationalization-i18n.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nlocale: {\n    language: 'pl',\n    availableLanguages: ['en', 'pl'],\n    localeDetection: true,\n    translations: {\n      pl: {\n        messages: {\n          welcomeOnBoard_title: 'Nowy tyluł pulpitu',\n        },\n        actions: {\n          new: 'Stwórz nowy',\n          edit: 'Edytuj',\n          show: 'Detale',\n        },\n        buttons: {\n          save: 'zapisz',\n          confirmRemovalMany_1: 'Potwierdź usunięcie {{count}} rekordu',\n          confirmRemovalMany_2: 'Potwierdź usunięcie {{count}} rekordów',\n        },\n        properties: {\n          name: 'Nazwa',\n          nested: 'Zagniezdzone',\n          'nested.width': 'Szerokość',\n          'isAdmin.true': 'admin',\n          'isAdmin.false': 'normalny',\n          'companySize.small': 'mała',\n          'companySize.medium': 'średnia',\n          'companySize.big': 'duza',\n          'tags.addNewItem': 'Dodaj nowy tag',\n        },\n        labels: {\n          Comment: 'Komentarze',\n        },\n        resources: {\n          Comment: {\n            properties: {\n              name: 'Tytuł',\n            },\n          },\n        },\n      },\n    },\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Password Feature in AdminJS with Argon2\nDESCRIPTION: Example code showing how to integrate the password feature into an AdminJS resource configuration. It demonstrates setting up password hashing for a User model using argon2 for encryption, configuring property visibility, and mapping encrypted and virtual password fields.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/features/password.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport argon2 from 'argon2';\nimport passwordsFeature from '@adminjs/passwords';\n\nimport User from './models/user.js';\nimport componentLoader from './component-loader.js';\n\nconst adminJsOptions = {\n  resources: [\n    {\n      resource: User,\n      options: {\n        //...your regular options go here'\n        properties: { password: { isVisible: false } },\n      },\n      features: [\n        passwordsFeature({\n          componentLoader,\n          properties: {\n            encryptedPassword: 'password',\n            password: 'newPassword'\n          }\n          hash: argon2.hash,\n      })\n      ]\n    },\n  ],\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Form Validation Using Before Hooks in AdminJS\nDESCRIPTION: Shows how to implement custom form validation using before hooks in an edit action. Validates user age and last name, throwing ValidationError if requirements are not met.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/action.md#2025-04-17_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// other imports\nimport { ValidationError } from 'adminjs'\n\nconst validateForm = (request, context) => {\n  const { payload = {}, method } = request\n  \n  // We only want to validate \"post\" requests\n  if (method !== 'post') return request\n  \n  // Payload contains data sent from the frontend\n  const { age = null, lastName = '' } = payload\n  \n  // We will store validation errors in an object, so that\n  // we can throw multiple errors at the same time\n  const errors = {}\n  \n  // We are doing validations and assigning errors to \"errors\" object\n  if (!age || age < 18) {\n    errors.age = {\n      message: 'A user must be at least 18 years old',\n    }\n  }\n  \n  if (lastName.trim().length === 0) {\n    errors.lastName = {\n      message: 'Last name is required',\n    }\n  }\n  \n  // We throw AdminJS ValidationError if there are errors in the payload\n  if (Object.keys(errors).length) {\n    throw new ValidationError(errors)\n  }\n  \n  return request\n}\n\nconst UserResource = {\n  resource: User,\n  options: {\n    actions: {\n      edit: {\n        before: [validateForm],\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Simple AdminJS Setup with Fastify in TypeScript\nDESCRIPTION: Basic configuration to integrate AdminJS with Fastify in a TypeScript environment. It sets up a Fastify server, initializes AdminJS, and builds the router.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/plugins/fastify.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport AdminJSFastify from '@adminjs/fastify'\nimport AdminJS from 'adminjs'\nimport Fastify from 'fastify'\n\nconst PORT = 3000\n\nconst start = async () => {\n  const app = Fastify()\n  const admin = new AdminJS({\n    databases: [],\n    rootPath: '/admin'\n  })\n\n  await AdminJSFastify.buildRouter(\n    admin,\n    app,\n  )\n  \n  app.listen({ port: PORT }, (err, addr) => {\n    if (err) {\n      console.error(err)\n    } else {\n      console.log(`AdminJS started on http://localhost:${PORT}${admin.options.rootPath}`)\n    }\n  })\n}\n\nstart()\n```\n\n----------------------------------------\n\nTITLE: Configuring Import/Export Feature in AdminJS\nDESCRIPTION: JavaScript code snippet showing how to add the import-export feature to an AdminJS resource configuration. This requires importing the feature and passing the componentLoader to enable Import and Export buttons in the resource view.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/features/import-and-export.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport importExportFeature from '@adminjs/import-export';\n\nimport componentLoader from './component-loader.js';\n...\n\n{\n  resource: Entity,\n  features: [\n    importExportFeature({ componentLoader }),\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Many-To-Many Relationship in Team Resource\nDESCRIPTION: Sets up many-to-many relationship between Team and Person resources through TeamMember junction table using owningRelationSettingsFeature.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/features/relations.md#2025-04-17_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { owningRelationSettingsFeature, type RelationType } from '@adminjs/relations';\nimport { Team } from './models/index.js';\nimport { componentLoader } from './component-loader.js';\n\nexport const createTeamResource = () => ({\n  resource: Team,\n  options: {\n    navigation: { icon: 'Users' },\n  },\n  features: [\n    owningRelationSettingsFeature({\n      componentLoader,\n      licenseKey: process.env.LICENSE_KEY,\n      relations: {\n        members: {\n          type: RelationType.ManyToMany,\n          junction: {\n            joinKey: 'teamId',\n            inverseJoinKey: 'personId',\n            throughResourceId: 'TeamMember',\n          },\n          target: {\n            resourceId: 'Person',\n          },\n        },\n      },\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Integrating AdminJS with NestJS AppModule\nDESCRIPTION: TypeScript code for the AppModule, demonstrating how to integrate AdminJS with NestJS, including authentication setup and dynamic imports for ESM compatibility.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/plugins/nest.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common'\n\nimport { AppController } from './app.controller'\nimport { AppService } from './app.service'\n\nconst DEFAULT_ADMIN = {\n  email: 'admin@example.com',\n  password: 'password',\n}\n\nconst authenticate = async (email: string, password: string) => {\n  if (email === DEFAULT_ADMIN.email && password === DEFAULT_ADMIN.password) {\n    return Promise.resolve(DEFAULT_ADMIN)\n  }\n  return null\n}\n\n@Module({\n  imports: [\n    // AdminJS version 7 is ESM-only. In order to import it, you have to use dynamic imports.\n    import('@adminjs/nestjs').then(({ AdminModule }) => AdminModule.createAdminAsync({\n      useFactory: () => ({\n        adminJsOptions: {\n          rootPath: '/admin',\n          resources: [],\n        },\n        auth: {\n          authenticate,\n          cookieName: 'adminjs',\n          cookiePassword: 'secret'\n        },\n        sessionOptions: {\n          resave: true,\n          saveUninitialized: true,\n          secret: 'secret'\n        },\n      }),\n    })),\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Defining Mongoose Model Schema in TypeScript\nDESCRIPTION: Creates a Mongoose schema and model for a Category entity with a title field. The schema includes timestamps and defines an interface for TypeScript type safety.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/adapters/mongoose.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { model, Schema, Types } from 'mongoose'\n\nexport interface ICategory {\n  title: string;\n}\n\nexport const CategorySchema = new Schema<ICategory>(\n  {\n    title: { type: 'String', required: true },\n  },\n  { timestamps: true },\n)\n\nexport const Category = model<ICategory>('Category', CategorySchema);\n```\n\n----------------------------------------\n\nTITLE: Configuring AdminJS Upload Feature with Google Cloud Storage Provider\nDESCRIPTION: TypeScript implementation for setting up the upload feature with Google Cloud Storage. Includes GCS service account configuration and image file validation.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/features/upload.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport uploadFeature from '@adminjs/upload';\n\nimport { File } from './models/file.js';\nimport componentLoader from './component-loader.js';\n\nconst GCScredentials = {\n  serviceAccount: 'SERVICE_ACCOUNT',\n  bucket: 'GCP_STORAGE_BUCKET',\n  expires: 0,\n};\n\nexport const files = {\n  resource: File,\n  options: {\n    properties: {\n      s3Key: {\n        type: 'string',\n      },\n      bucket: {\n        type: 'string',\n      },\n      mime: {\n        type: 'string',\n      },\n      comment: {\n        type: 'textarea',\n        isSortable: false,\n      },\n    },\n  },\n  features: [\n    uploadFeature({\n      componentLoader,\n      provider: { gpc: GCScredentials },\n      validation: { mimeTypes: ['image/png'] },\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Simple AdminJS Integration with Express (TypeScript)\nDESCRIPTION: Basic setup for integrating AdminJS with Express.js in TypeScript. Creates an Express server with AdminJS router, providing proper type safety.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/plugins/express.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport AdminJS from 'adminjs'\nimport AdminJSExpress from '@adminjs/express'\nimport express from 'express'\n\nconst PORT = 3000\n\nconst start = async () => {\n  const app = express()\n\n  const admin = new AdminJS({})\n\n  const adminRouter = AdminJSExpress.buildRouter(admin)\n  app.use(admin.options.rootPath, adminRouter)\n\n  app.listen(PORT, () => {\n    console.log(`AdminJS started on http://localhost:${PORT}${admin.options.rootPath}`)\n  })\n}\n\nstart()\n```\n\n----------------------------------------\n\nTITLE: Configuring Single Marker Map Feature\nDESCRIPTION: Detailed configuration example for leafletSingleMarkerMapFeature showing how to set up marker coordinates, map properties, and GeoJSON integration.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/features/leaflet-maps.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport leafletFeatures, { getLeafletDist } from '@adminjs/leaflet';\n// other imports\nimport Marker from './marker.entity.js';\n\n// Other code - remember to set up the common configuration!\n\nconst admin = new AdminJS({\n  resources: [\n    {\n      resource: Marker,\n      features: [\n        leafletFeatures.leafletSingleMarkerMapFeature({\n          componentLoader,\n          paths: {\n            mapProperty: 'location',\n            jsonProperty: 'location',\n            latitudeProperty: 'location.coordinates.0',\n            longitudeProperty: 'location.coordinates.1',\n          },\n          baseValue: { type: 'Point', coordinates: [] },\n          mapProps: undefined,\n          tileProps: undefined,\n        }),\n      ],\n    },\n  ],\n  componentLoader,\n  assets: {\n    styles: ['/leaflet.css'],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing After Hook for API Response Filtering in AdminJS\nDESCRIPTION: This code snippet defines an after hook that filters API responses to remove properties based on user roles, ensuring that hidden data is not exposed through the API.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/tutorials/adding-role-based-access-control.md#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst roleAccessControlAfterHook = async (\n  response: any,\n  _: any,\n  context: ActionContext,\n) => {\n  const { properties } = context.resource\n    .decorate()\n    .toJSON(context.currentAdmin);\n  const targetRole = context.currentAdmin?.role;\n  const propertiesToRemove = Object.entries(properties)\n    .filter(\n      ([_, { custom }]) => custom.role && String(custom.role) !== targetRole,\n    )\n    .map(([name]) => name);\n\n  const cleanupRecord = (record: RecordJSON) => {\n    propertiesToRemove.forEach((name) => delete record.params[name]);\n  };\n  if (response.record) {\n    cleanupRecord(response.record);\n  }\n  if (response.records) {\n    response.records.forEach(cleanupRecord);\n  }\n  return response;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing DefaultAuthProvider in AdminJS Express Setup\nDESCRIPTION: Example showing how to replace the authenticate method with DefaultAuthProvider in an Express-based AdminJS setup. This demonstrates migrating from the function-based authentication approach to the new provider class pattern.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/authentication/README.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DefaultAuthProvider } from 'adminjs';\n\nimport componentLoader from '<path to your component loader>';\n\n// Placeholder authentication function, add your logic for authenticating users\nconst authenticate = ({ email, password }, ctx) => {\n  return { email };\n}\n\nconst authProvider = new DefaultAuthProvider({\n  componentLoader,\n  authenticate,\n});\n\n// ...\n\n// Express example, in other plugins the change is exactly the same\n// \"provider\" should be configured at the same level as \"authenticate\" previously\n  const router = buildAuthenticatedRouter(\n    admin,\n    {\n      // \"authenticate\" was here\n      cookiePassword: 'test',\n      provider: authProvider,\n    },\n    null,\n    {\n      secret: 'test',\n      resave: false,\n      saveUninitialized: true,\n    }\n  );\n```\n\n----------------------------------------\n\nTITLE: Configuring AdminJS without Authentication\nDESCRIPTION: TypeScript code snippet showing how to configure AdminJS without authentication in the NestJS AppModule.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/plugins/nest.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport('@adminjs/nestjs').then(({ AdminModule }) => AdminModule.createAdminAsync({\n  useFactory: () => ({\n    adminJsOptions: {\n      rootPath: '/admin',\n      resources: [],\n    },\n  }),\n})),\n```\n\n----------------------------------------\n\nTITLE: Registering AdminJS Adapter\nDESCRIPTION: Shows how to register a database adapter with AdminJS to enable resource management\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/resource.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport AdminJS from 'adminjs'\nimport { Database, Resource } from '@adminjs/typeorm' // or any other adapter\n\nAdminJS.registerAdapter({ Database, Resource })\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Action with Component in AdminJS\nDESCRIPTION: Shows how to register a custom action that uses a separate React component. This configuration connects the component to the handler function and specifies it as a record-type action.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/action.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst UserResource = {\n  resource: User,\n  options: {\n    actions: {\n      myCustomAction: {\n        actionType: 'record',\n        component: Components.MyCustomAction, // see \"Writing your own Components\"\n        handler: (request, response, context) => {\n          const { record, currentAdmin } = context\n          return {\n            record: record.toJSON(currentAdmin),\n            msg: 'Hello world',\n          }\n        },\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Role-Based Action Access Control with User Context\nDESCRIPTION: Function-based approach to restrict action access based on the current user's role, allowing only users with admin role to access the action.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/tutorials/adding-role-based-access-control.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst someResource: ResourceWithOptions = {\n  resource: Something,\n  options: {\n    actions: {\n      new: {\n        isAccessible: ({ currentAdmin }) => currentAdmin.role === 'admin',\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring One-To-Many Relationship in Organization Resource\nDESCRIPTION: Sets up one-to-many relationships between Organization and its related Person and Office resources using owningRelationSettingsFeature. Includes configuration for joinKeys and resourceIds.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/features/relations.md#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { owningRelationSettingsFeature, type RelationType } from '@adminjs/relations'\nimport { componentLoader } from './component-loader.js';\nimport { Organization } from './models/index.js';\n\nexport const createOrganizationResource = () => ({\n  resource: Organization,\n  features: [\n    owningRelationSettingsFeature({\n      componentLoader,\n      licenseKey: process.env.LICENSE_KEY,\n      relations: {\n        persons: {\n          type: RelationType.OneToMany,\n          target: {\n            joinKey: 'organizationId',\n            resourceId: 'Person',\n          },\n        },\n        offices: {\n          type: RelationType.OneToMany,\n          target: {\n            joinKey: 'organizationId',\n            resourceId: 'Office',\n          },\n        },\n      },\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Sequelize Model for AdminJS\nDESCRIPTION: Example of a Sequelize model definition with TypeScript interfaces and model initialization. This Category model includes id, name, and timestamp fields with appropriate data types and configurations.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/adapters/sequelize.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DataTypes, Model, Optional } from 'sequelize'\n\nimport sequelize from './index.js'\n\ninterface ICategory {\n  id: number;\n  name: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport type CategoryCreationAttributes = Optional<ICategory, 'id'>\n\nexport class Category extends Model<ICategory, CategoryCreationAttributes> {\n  declare id: number;\n  declare name: string;\n  declare createdAt: Date;\n  declare updatedAt: Date;\n}\n\nCategory.init(\n  {\n    id: {\n      type: DataTypes.INTEGER,\n      autoIncrement: true,\n      primaryKey: true,\n    },\n    name: {\n      type: new DataTypes.STRING(128),\n      allowNull: false,\n    },\n    createdAt: {\n      type: DataTypes.DATE,\n    },\n    updatedAt: {\n      type: DataTypes.DATE,\n    },\n  },\n  {\n    sequelize,\n    tableName: 'categories',\n    modelName: 'category',\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring AdminJS Upload Feature with Local Filesystem Provider\nDESCRIPTION: TypeScript implementation for setting up the upload feature with local filesystem storage. Configures a File resource with proper properties and validation for mime types.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/features/upload.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport uploadFeature from '@adminjs/upload';\n\nimport { File } from './models/file.js';\nimport componentLoader from './component-loader.js';\n\nconst localProvider = {\n  bucket: 'public/files',\n  opts: {\n    baseUrl: '/files',\n  },\n};\n\nexport const files = {\n  resource: File,\n  options: {\n    properties: {\n      s3Key: {\n        type: 'string',\n      },\n      bucket: {\n        type: 'string',\n      },\n      mime: {\n        type: 'string',\n      },\n      comment: {\n        type: 'textarea',\n        isSortable: false,\n      },\n    },\n  },\n  features: [\n    uploadFeature({\n      componentLoader, \n      provider: { local: localProvider },\n      validation: { mimeTypes: ['image/png', 'application/pdf', 'audio/mpeg'] },\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Creating and Customizing Logger Resource in AdminJS\nDESCRIPTION: JavaScript configuration example for creating and customizing the Log resource in AdminJS using the createLoggerResource function. This determines how logs appear in the admin panel.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/features/logger.md#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createLoggerResource } from '@adminjs/logger';\n\nimport Log from './logs.entity.js';\n\nconst config = {\n  resource: Log,\n  featureOptions: {\n    propertiesMapping: {\n      recordTitle: 'title' //field to store logged record's title\n    },\n    userIdAttribute: 'id', //primary key currently logged user\n    resourceOptions: {\n      navigation: {\n        name: 'SectionName',\n        icon: 'iconName'\n      }\n    }\n  }\n}\n\nexport default createLoggerResource(config)\n```\n\n----------------------------------------\n\nTITLE: Initializing AdminJS with ComponentLoader\nDESCRIPTION: Sets up the AdminJS instance with the componentLoader and resources. The watch() method is called to build frontend code in development environment, enabling custom components to be used.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/ui-customization/writing-your-own-components.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AdminJS } from 'adminjs'\nimport { componentLoader } from './components.js'\nimport { SomeResource } from './some-resource.js'\n\nconst admin = new AdminJS({\n    resources: [SomeResource],\n    componentLoader, // the loader needs to be added here\n    // other options\n})\n\nadmin.watch() // this builds your frontend code in development environment\n\n// rest of the adapter and plugin code\n```\n\n----------------------------------------\n\nTITLE: Configuring AdminJS Module in Nest.js\nDESCRIPTION: Configuration code for setting up AdminJS module with TypeORM resources in a Nest.js application.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/adapters/typeorm.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// ... other imports\nimport { Organization } from './organization.entity.js'\n// ... other code\nAdminModule.createAdminAsync({\n  useFactory: () => ({\n    adminJsOptions: {\n      rootPath: '/admin',\n      resources: [Organization],\n    },\n  }),\n}),\n// ... other code\n```\n\n----------------------------------------\n\nTITLE: Configuring AdminJS with Sequelize in Standard Frameworks\nDESCRIPTION: Setup for AdminJS with Sequelize ORM in standard frameworks. This code registers the Sequelize adapter and configures AdminJS with the Category model resource.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/adapters/sequelize.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// ... other imports\nimport * as AdminJSSequelize from '@adminjs/sequelize'\n\nimport { Category } from './category.entity.js'\n\nAdminJS.registerAdapter({\n  Resource: AdminJSSequelize.Resource,\n  Database: AdminJSSequelize.Database,\n})\n\n// ... other code\nconst start = async () => {\n  const adminOptions = {\n    // We pass Category to `resources`\n    resources: [Category],\n  }\n  // Please note that some plugins don't need you to create AdminJS instance manually,\n  // instead you would just pass `adminOptions` into the plugin directly,\n  // an example would be \"@adminjs/hapi\"\n  const admin = new AdminJS(adminOptions)\n  // ... other code\n}\n\nstart()\n```\n\n----------------------------------------\n\nTITLE: Accessing Server Data in Custom AdminJS Dashboard Component using React and TypeScript\nDESCRIPTION: Demonstrates how to use the AdminJS ApiClient in a React component to fetch data from the server-side handler. This allows the dashboard to display dynamic data fetched from the backend.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/ui-customization/dashboard-customization.md#2025-04-17_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ApiClient } from 'adminjs'\nimport React, { useEffect, useState } from 'react'\n\n// ...\nconst [data, setData] = useState(null)\nconst api = new ApiClient()\n\nuseEffect(() => {\n  api.getDashboard()\n    .then((response) => {\n      setData(response.data) // { message: 'Hello World' }\n    })\n    .catch((error) => {\n      // handle any errors\n    });\n}, [])\n\n// ...\n\nconsole.log(data.message) // \"Hello World\"\n```\n\n----------------------------------------\n\nTITLE: Defining TypeORM Entity for Multiple File Uploads\nDESCRIPTION: TypeScript entity definition using TypeORM for handling multiple file uploads. Uses JSONB columns to store arrays of file metadata like keys, buckets, and mime types.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/features/upload.md#2025-04-17_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseEntity, Column, CreateDateColumn, Entity, PrimaryGeneratedColumn, UpdateDateColumn } from 'typeorm';\n\n@Entity({ name: 'files' })\nexport class File extends BaseEntity {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column({ name: 's3_key', nullable: true, type: 'jsonb' })\n  public s3Key: string;\n\n  @Column({ nullable: true, type: 'jsonb' })\n  public bucket: string;\n\n  @Column({ nullable: true, type: 'jsonb' })\n  public mime: string;\n\n  @Column({ nullable: true, type: 'text' })\n  public comment: string;\n\n  @CreateDateColumn({ name: 'created_at' })\n  public createdAt: Date;\n\n  @UpdateDateColumn({ name: 'updated_at' })\n  public updatedAt: Date;\n}\n```\n\n----------------------------------------\n\nTITLE: AdminJS Hapi Authentication - TypeScript\nDESCRIPTION: TypeScript implementation of authentication in AdminJS with Hapi, including type definitions and strongly-typed authenticate function.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/plugins/hapi.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport AdminJSHapi, { ExtendedAdminJSOptions } from '@adminjs/hapi'\nimport Hapi from '@hapi/hapi'\n\nconst PORT = 3000\n\nconst DEFAULT_ADMIN = {\n  email: 'admin@example.com',\n  password: 'password',\n}\n\nconst authenticate = async (email: string, password: string): Promise<Record<string, unknown> | null> => {\n  if (email === DEFAULT_ADMIN.email && password === DEFAULT_ADMIN.password) {\n    return Promise.resolve(DEFAULT_ADMIN)\n  }\n  return null\n}\n\nconst start = async () => {\n  const server = Hapi.server({ port: PORT })\n\n  // \"secret\" must be a string with at least 32 characters, example:\n  const cookieSecret = 'sieL67H7GbkzJ4XCoH0IHcmO1hGBSiG5'\n  const adminOptions: ExtendedAdminJSOptions = {\n    resources: [],\n    rootPath: '/admin',\n    auth: {\n      isSecure: process.env.NODE_ENV === 'production',\n      authenticate,\n      cookieName: 'adminjs',\n      cookiePassword: cookieSecret,\n    },\n    registerInert: true,\n  }\n\n  await server.register<ExtendedAdminJSOptions>({\n    plugin: AdminJSHapi,\n    options: adminOptions,\n  })\n\n  await server.start();\n  console.log(`AdminJS available at ${server.info.uri}${adminOptions.rootPath}`);\n}\n\nstart()\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom Property in AdminJS Resource\nDESCRIPTION: This TypeScript configuration adds a custom 'randomPicture' property to a User resource. It specifies the property type and assigns custom React components for displaying the property in list and show views.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/property.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst UserResource = {\n  resource: User,\n  options: {\n    properties: {\n      randomPicture: {\n        type: 'string',\n        components: {\n          list: Components.MyCustomAction, // see \"Writing your own Components\"\n          show: Components.MyCustomAction,\n        },\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Adding File Resource to AdminJS Configuration\nDESCRIPTION: TypeScript code showing how to add the files resource to the AdminJS options configuration. This connects the upload feature with the AdminJS dashboard.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/features/upload.md#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { files } from './resources/files.js';\n\nconst adminJsOptions = {\n  resources: [\n     //...\n     files\n  ],\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Action Accessibility Based on Context\nDESCRIPTION: Shows how to implement conditional action accessibility using a function that evaluates the current context. This example restricts edit access to only records created by the current user.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/action.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst UserResource = {\n  resource: User,\n  options: {\n    actions: {\n      edit: {\n        isAccessible: (context) => {\n          const { record, currentAdmin } = context\n          \n          // We are only allowing to edit records created by currently logged in user\n          return record?.params?.createdByUserId === currentAdmin.id\n        },\n        isVisible: true,\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Person Resource with Target Relation Settings\nDESCRIPTION: Implements targetRelationSettingsFeature for the Person resource to enable relation management from both Organization and Team resources.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/features/relations.md#2025-04-17_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { targetRelationSettingsFeature } from '@adminjs/relations';\nimport { Person } from './models/index.js';\n\nexport const createPersonResource = () => ({\n  resource: Person,\n  features: [targetRelationSettingsFeature()],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Before and After Hooks in AdminJS Actions\nDESCRIPTION: Demonstrates how to use before and after hooks in AdminJS list actions to modify query filters and log responses. The before hook sets a default status filter and the after hook logs metadata.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/action.md#2025-04-17_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst customBefore = (request, context) => {\n  const { query = {} } = request\n  const newQuery = {\n    ...query,\n    ['filters.status']: 'active',\n  }\n  \n  request.query = newQuery\n  \n  return request\n}\n\nconst customAfter = (originalResponse, request, context) => {\n  console.log(originalResponse.meta)\n  \n  return originalResponse\n}\n\nconst UserResource = {\n  resource: User,\n  options: {\n    actions: {\n      list: {\n        before: [customBefore],\n        after: [customAfter],\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AdminJS Module with Mongoose Resources in Nest.js\nDESCRIPTION: Shows how to configure the AdminJS module in Nest.js to use Mongoose models as resources. Demonstrates passing the Category model to the AdminJS configuration.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/adapters/mongoose.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// ... other imports\nimport { Category } from './category.entity.js'\n// ... other code\nAdminModule.createAdminAsync({\n  useFactory: () => ({\n    adminJsOptions: {\n      rootPath: '/admin',\n      resources: [Category],\n    },\n  }),\n}),\n// ... other code\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Login Component with Forgot Password Link\nDESCRIPTION: Implementation of a custom login page component with a forgot password link. It includes styling, form elements, and a link to the forgot password page at '/forgot-password'.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/faq/resource.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react'\nimport styled, { createGlobalStyle } from 'styled-components'\nimport { useSelector } from 'react-redux'\nimport {\n  Box,\n  H5,\n  H2,\n  Label,\n  Illustration,\n  Input,\n  FormGroup,\n  Button,\n  Text,\n  MessageBox,\n  MadeWithLove,\n  themeGet,\n} from '@adminjs/design-system'\nimport { useTranslation, ReduxState } from 'adminjs'\n\nconst GlobalStyle = createGlobalStyle`\n  html, body, #app {\n    width: 100%;\n    height: 100%;\n    margin: 0;\n    padding: 0;\n  }\n`\n\nconst Wrapper = styled(Box)`\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  height: 100%;\n`\n\nconst StyledLogo = styled.img`\n  max-width: 200px;\n  margin: ${themeGet('space', 'md')} 0;\n`\n\nexport type LoginProps = {\n  message?: string\n  action: string\n}\n\nexport const Login: React.FC<LoginProps> = (props) => {\n  const { action, message } = props\n  const { translateLabel, translateButton, translateProperty, translateMessage } = useTranslation()\n  const branding = useSelector((state: ReduxState) => state.branding)\n\n  return (\n    <>\n      <GlobalStyle />\n      <Wrapper flex variant=\"grey\">\n        <Box bg=\"white\" height=\"440px\" flex boxShadow=\"login\" width={[1, 2 / 3, 'auto']}>\n          <Box\n            bg=\"primary100\"\n            color=\"white\"\n            p=\"x3\"\n            width=\"380px\"\n            flexGrow={0}\n            display={['none', 'none', 'block']}\n            position=\"relative\"\n          >\n            <H2 fontWeight=\"lighter\">{translateLabel('loginWelcome')}</H2>\n            <Text fontWeight=\"lighter\" mt=\"default\">\n              {translateMessage('loginWelcome')}\n            </Text>\n            <Text textAlign=\"center\" p=\"xxl\">\n              <Box display=\"inline\" mr=\"default\">\n                <Illustration variant=\"Planet\" width={82} height={91} />\n              </Box>\n              <Box display=\"inline\">\n                <Illustration variant=\"Astronaut\" width={82} height={91} />\n              </Box>\n              <Box display=\"inline\" position=\"relative\" top=\"-20px\">\n                <Illustration variant=\"FlagInCog\" width={82} height={91} />\n              </Box>\n            </Text>\n          </Box>\n          <Box as=\"form\" action={action} method=\"POST\" p=\"x3\" flexGrow={1} width={['100%', '100%', '480px']}>\n            <H5 marginBottom=\"xxl\">\n              {branding.logo ? <StyledLogo src={branding.logo} alt={branding.companyName} /> : branding.companyName}\n            </H5>\n            {message && (\n              <MessageBox\n                my=\"lg\"\n                message={message.split(' ').length > 1 ? message : translateMessage(message)}\n                variant=\"danger\"\n              />\n            )}\n            <FormGroup>\n              <Label required>{translateProperty('email')}</Label>\n              <Input name=\"email\" placeholder={translateProperty('email')} />\n            </FormGroup>\n            <FormGroup>\n              <Label required>{translateProperty('password')}</Label>\n              <Input\n                type=\"password\"\n                name=\"password\"\n                placeholder={translateProperty('password')}\n                autoComplete=\"new-password\"\n              />\n            </FormGroup>\n            <Text mt=\"xl\" textAlign=\"center\">\n              <Button variant=\"primary\">{translateButton('login')}</Button>\n            </Text>\n            <Text mt=\"lg\" textAlign=\"center\">\n              {translateMessage('forgotPasswordQuestion')}{' '}\n              <a href=\"/forgot-password\">{translateMessage('forgotPassword')}</a>\n            </Text>\n          </Box>\n        </Box>\n        {branding.withMadeWithLove ? (\n          <Box mt=\"xxl\">\n            <MadeWithLove />\n          </Box>\n        ) : null}\n      </Wrapper>\n    </>\n  )\n}\n\nexport default Login\n```\n\n----------------------------------------\n\nTITLE: Configuring Logger Feature in AdminJS Resource\nDESCRIPTION: JavaScript configuration example showing how to add the logger feature to an AdminJS resource. This enables tracking changes for the resource.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/features/logger.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport loggerFeature from '@adminjs/logger';\n\nimport ResourceModel from './resource.entity.js';\nimport componentLoader from './component-loader.js';\n\nexport default {\n  resource: ResourceModel,\n  features: [\n    loggerFeature({\n      componentLoader,\n      propertiesMapping: {\n        user: 'userId',\n      },\n      userIdAttribute: 'id',\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: AdminJS Hapi Authentication - JavaScript\nDESCRIPTION: Implementation of authentication in AdminJS with Hapi, including custom authenticate function and cookie configuration.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/plugins/hapi.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport AdminJSHapi from '@adminjs/hapi'\nimport Hapi from '@hapi/hapi'\n\nconst PORT = 3000\n\nconst DEFAULT_ADMIN = {\n  email: 'admin@example.com',\n  password: 'password',\n}\n\nconst authenticate = async (email, password) => {\n  if (email === DEFAULT_ADMIN.email && password === DEFAULT_ADMIN.password) {\n    return Promise.resolve(DEFAULT_ADMIN)\n  }\n  return null\n}\n\nconst start = async () => {\n  const server = Hapi.server({ port: PORT })\n\n  // \"secret\" must be a string with at least 32 characters, example:\n  const cookieSecret = 'sieL67H7GbkzJ4XCoH0IHcmO1hGBSiG5'\n  const adminOptions = {\n    resources: [],\n    rootPath: '/admin',\n    auth: {\n      isSecure: process.env.NODE_ENV === 'production',\n      authenticate,\n      cookieName: 'adminjs',\n      cookiePassword: cookieSecret,\n    },\n    registerInert: true,\n  }\n\n  await server.register({\n    plugin: AdminJSHapi,\n    options: adminOptions,\n  })\n\n  await server.start();\n  console.log(`AdminJS available at ${server.info.uri}${adminOptions.rootPath}`);\n}\n\nstart()\n```\n\n----------------------------------------\n\nTITLE: Adding Confirmation Prompt to an Action\nDESCRIPTION: Shows how to add a confirmation dialog before executing an action using the guard option. This presents users with a prompt that requires confirmation before the action handler is executed.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/action.md#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst UserResource = {\n  resource: User,\n  options: {\n    actions: {\n      myCustomAction: {\n        actionType: 'record',\n        component: false,\n        handler: (request, response, context) => {\n          const { record, currentAdmin } = context\n          return {\n            record: record.toJSON(currentAdmin),\n          }\n        },\n        guard: 'doYouReallyWantToDoThis',\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Action Component for Property Filtering in AdminJS\nDESCRIPTION: This code creates a custom action component that filters properties based on user roles. It adjusts the resource object to hide properties from unauthorized users in the UI.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/tutorials/adding-role-based-access-control.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { FC } from 'react';\nimport {\n  ActionProps,\n  BaseActionComponent,\n  BasePropertyJSON,\n  useCurrentAdmin,\n} from 'adminjs';\n\nconst CustomAction: FC<ActionProps> = (props) => {\n  const [currentAdmin] = useCurrentAdmin();\n  const newProps = { ...props };\n  \n  // This is important - `component` option controls which custom\n  // component is rendered by `BaseActionComponent` and we don't\n  // want to render this code here again. That would create an\n  // infinite loop.\n  newProps.action = { ...newProps.action, component: undefined };\n\n  // Configuration is stored in each property's custom props.\n  const filter = (property: BasePropertyJSON) => {\n    const { role } = property.custom;\n    return !role || currentAdmin?.role === String(role);\n  };\n\n  // Since we want to remove properties from all actions, a common\n  // filtering function can be used.\n  const { resource } = newProps;\n  resource.listProperties = resource.listProperties.filter(filter);\n  resource.editProperties = resource.editProperties.filter(filter);\n  resource.showProperties = resource.showProperties.filter(filter);\n  resource.filterProperties = resource.filterProperties.filter(filter);\n\n  // `BaseActionComponent` will now render the default action component\n  return <BaseActionComponent {...newProps} />;\n};\n\nexport default CustomAction;\n```\n\n----------------------------------------\n\nTITLE: Custom Styling with Design System in AdminJS\nDESCRIPTION: Shows how to use the AdminJS design system to apply custom styling to components. The example demonstrates passing a background color theme property to a Button component.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/ui-customization/writing-your-own-components.md#2025-04-17_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<Button bg=\"primary60\"></Button>\n```\n\n----------------------------------------\n\nTITLE: Configuring Order Resource with PDF Generator Action in TypeScript\nDESCRIPTION: Defines a resource configuration for Order model that includes a custom PDF Generator action. The action is configured as a record-level action with a handler that processes the record and returns data for the PDF generation.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/faq/pdf-generator.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst orderResource = {\n    resource: Order,\n    options: {\n        actions: {\n            PDFGenerator: {\n                actionType: 'record',\n                icon: 'GeneratePdf',\n                component: Components.PDFGenerator,\n                handler: (request, response, context) => {\n                    const { record, currentAdmin } = context\n                    return {\n                        record: record.toJSON(currentAdmin),\n                        url: pdfgenerator(record.toJSON(currentAdmin))\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AdminJS Module with Sequelize Resources in Nest.js\nDESCRIPTION: Example of configuring the AdminJS module in a Nest.js application with Sequelize resources. This code sets up the admin panel with the Category model.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/adapters/sequelize.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// ... other imports\nimport { Category } from './category.entity.js'\n// ... other code\nAdminModule.createAdminAsync({\n  useFactory: () => ({\n    adminJsOptions: {\n      rootPath: '/admin',\n      resources: [Category],\n    },\n  }),\n}),\n// ... other code\n```\n\n----------------------------------------\n\nTITLE: Configuring AdminJS with MikroORM in Standard Framework\nDESCRIPTION: Example of how to set up AdminJS with MikroORM in a standard framework. This includes registering the MikroORM adapter, initializing the ORM, and configuring AdminJS resources with the Owner entity.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/adapters/mikroorm.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// ... other imports\nimport { MikroORM } from '@mikro-orm/core'\nimport * as AdminJSMikroORM from '@adminjs/mikroorm'\nimport { Owner } from './owner.entity.js'\n\nAdminJS.registerAdapter({\n  Resource: AdminJSMikroORM.Resource,\n  Database: AdminJSMikroORM.Database,\n})\n\n  // Note: `config` is your MikroORM configuration as described in it's docs\nconst config = {\n  entities: [Owner],\n  dbName: 'adminjs',\n  type: 'postgresql',\n  clientUrl: 'postgres://adminjs:adminjs@localhost:5435/adminjs',\n}\n\n// ... other code\nconst start = async () => {\n  const orm = await MikroORM.init(config)\n  const adminOptions = {\n    // We pass Owner to `resources`\n    resources: [{\n      resource: { model: Owner, orm },\n      options: {}\n    }],\n  }\n  // Please note that some plugins don't need you to create AdminJS instance manually,\n  // instead you would just pass `adminOptions` into the plugin directly,\n  // an example would be \"@adminjs/hapi\"\n  const admin = new AdminJS(adminOptions)\n  // ... other code\n}\n\nstart()\n```\n\n----------------------------------------\n\nTITLE: Implementing Role-Based Access Control for Relations\nDESCRIPTION: Demonstrates how to restrict access to relation management actions based on user roles, specifically limiting access to users with Admin role.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/features/relations.md#2025-04-17_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { owningRelationSettingsFeature, type RelationType } from '@adminjs/relations';\nimport { Team } from './models/index.js';\nimport { componentLoader } from './component-loader.js';\n\nconst onlyForAdmin = ({ currentAdmin }) => currentAdmin.role === 'Admin';\n\nexport const createTeamResource = () => ({\n  resource: Team,\n  options: {\n    navigation: { icon: 'Users' },\n    actions: {\n      findRelation: { isAccessible: onlyForAdmin },\n      addManyToManyRelation: { isAccessible: onlyForAdmin },\n      deleteRelation: { isAccessible: onlyForAdmin },\n    },\n  },\n  features: [\n    owningRelationSettingsFeature({\n      componentLoader,\n      licenseKey: process.env.LICENSE_KEY,\n      relations: {\n        members: {\n          type: RelationType.ManyToMany,\n          junction: {\n            joinKey: 'teamId',\n            inverseJoinKey: 'personId',\n            throughResourceId: 'TeamMember',\n          },\n          target: {\n            resourceId: 'Person',\n          },\n        },\n      },\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Authenticated AdminJS Integration with Koa (TypeScript)\nDESCRIPTION: TypeScript code for setting up an authenticated AdminJS panel with Koa. It includes type definitions, a simple authentication function, and uses buildAuthenticatedRouter.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/plugins/koa.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add -D @types/koa\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport AdminJS from 'adminjs'\nimport AdminJSKoa from '@adminjs/koa'\nimport Koa from 'koa'\n\nconst PORT = 3000\n\nconst DEFAULT_ADMIN = {\n  email: 'admin@example.com',\n  password: 'password',\n}\n\nconst authenticate = async (email: string, password: string) => {\n  if (email === DEFAULT_ADMIN.email && password === DEFAULT_ADMIN.password) {\n    return Promise.resolve(DEFAULT_ADMIN)\n  }\n  return null\n}\n\nconst start = async () => {\n  const app = new Koa()\n\n  const admin = new AdminJS({\n    resources: [],\n    rootPath: '/admin',\n  })\n\n  app.keys = ['your secret for koa cookie'];\n  const router = AdminJSKoa.buildAuthenticatedRouter(\n    admin,\n    app,\n    {\n      authenticate,\n      sessionOptions: {\n        // You may configure your Koa session here\n        httpOnly: process.env.NODE_ENV === 'production',\n        secure: process.env.NODE_ENV === 'production',\n        renew: true,\n      },\n    },\n  )\n\n  app\n    .use(router.routes())\n    .use(router.allowedMethods())\n\n   app.listen(PORT, () => {\n     console.log(`AdminJS available at http://localhost:${PORT}${admin.options.rootPath}`)\n   })\n}\n\nstart()\n```\n\n----------------------------------------\n\nTITLE: Configuring AdminJS Resource for Multiple File Uploads\nDESCRIPTION: TypeScript configuration for handling multiple file uploads in AdminJS. Sets up properties as arrays and enables the multiple flag in the upload feature.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/features/upload.md#2025-04-17_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport uploadFeature from '@adminjs/upload';\n\nimport { File } from './models/file.js';\n\nconst localProvider = {\n  bucket: 'public/files',\n  baseUrl: '/files',\n};\n\nexport const files = {\n  resource: File,\n  options: {\n    properties: {\n      s3Key: {\n        type: 'string',\n        isArray: true,\n      },\n      bucket: {\n        type: 'string',\n        isArray: true,\n      },\n      mime: {\n        type: 'string',\n        isArray: true,\n      },\n      comment: {\n        type: 'textarea',\n        isSortable: false,\n      },\n    },\n  },\n  features: [\n    uploadFeature({\n      provider: { local: localProvider },\n      multiple: true,\n      validation: { mimeTypes: ['image/png', 'application/pdf', 'audio/mpeg'] },\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Authenticated AdminJS Setup with Fastify in JavaScript\nDESCRIPTION: Advanced configuration to integrate AdminJS with Fastify, including authentication and session management using PostgreSQL. It sets up a Fastify server, initializes AdminJS, configures session store, and builds an authenticated router.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/plugins/fastify.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport AdminJSFastify from '@adminjs/fastify'\nimport FastifySession from '@fastify/session'\nimport AdminJS from 'adminjs'\nimport Fastify from 'fastify'\nimport Connect from 'connect-pg-simple'\n\nconst ConnectSession = Connect(FastifySession)\nconst sessionStore = new ConnectSession({\n  conObject: {\n    connectionString: 'postgres://adminjs:adminjs@localhost:5435/adminjs',\n    ssl: process.env.NODE_ENV === 'production',\n  },\n  tableName: 'session',\n  createTableIfMissing: true,\n})\n\nconst PORT = 3000\n\nconst DEFAULT_ADMIN = {\n  email: 'admin@example.com',\n  password: 'password',\n}\n\nconst authenticate = async (email, password) => {\n  if (email === DEFAULT_ADMIN.email && password === DEFAULT_ADMIN.password) {\n    return Promise.resolve(DEFAULT_ADMIN)\n  }\n  return null\n}\n\nconst start = async () => {\n  const app = Fastify()\n  const admin = new AdminJS({\n    databases: [],\n    rootPath: '/admin'\n  })\n  \n  // \"secret\" must be a string with at least 32 characters, example:\n  const cookieSecret = 'sieL67H7GbkzJ4XCoH0IHcmO1hGBSiG5'\n  await AdminJSFastify.buildAuthenticatedRouter(\n    admin,\n    {\n      authenticate,\n      cookiePassword: cookieSecret,\n      cookieName: 'adminjs',\n    },\n    app,\n    {\n      store: sessionStore as any,\n      saveUninitialized: true,\n      secret: cookieSecret,\n      cookie: {\n        httpOnly: process.env.NODE_ENV === 'production',\n        secure: process.env.NODE_ENV === 'production',\n      },\n    }\n  )\n  \n  app.listen({ port: PORT }, (err, addr) => {\n    if (err) {\n      console.error(err)\n    } else {\n      console.log(`AdminJS started on http://localhost:${PORT}${admin.options.rootPath}`)\n\n    }\n  })\n}\n\nstart()\n```\n\n----------------------------------------\n\nTITLE: Configuring TipTap Rich Text Editor in AdminJS\nDESCRIPTION: Demonstrates how to set up a rich text editor field in AdminJS by configuring a property's type as 'richtext'. This example shows configuration for a Posts resource with a postContent field that will use the TipTap editor.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/tutorials/content-management-system.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst admin = new AdminJS({\n    resources: [\n      {\n        resource: Posts,\n        options: {\n          properties: {\n            postContent: {\n              type: 'richtext',\n            }\n          }\n        }\n      }\n    ]\n  })\n```\n\n----------------------------------------\n\nTITLE: Configuring Office Resource with Target Relation Settings\nDESCRIPTION: Implements targetRelationSettingsFeature for the Office resource to enable relation management from the Organization side.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/features/relations.md#2025-04-17_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { targetRelationSettingsFeature } from '@adminjs/relations';\nimport { Office } from './models/index.js';\n\nexport const createOfficeResource = () => ({\n  resource: Office,\n  features: [targetRelationSettingsFeature()],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Dashboard Handler for AdminJS in TypeScript\nDESCRIPTION: Demonstrates how to create a handler function for the dashboard to access server-side data. This is useful for fetching data to display in charts or statistics on the dashboard.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/ui-customization/dashboard-customization.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst dashboardHandler = async () => {\n  // Asynchronous code where you, e. g. fetch data from your database\n  \n  return { message: 'Hello World' }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating AuthenticationBackgroundComponent for Token Refresh\nDESCRIPTION: Example of a React component that can be used to periodically refresh authentication tokens. This component utilizes the useCurrentAdmin hook and the refreshToken API method to update user session data.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/authentication/README.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useCurrentAdmin } from 'adminjs';\n\nconst api = new ApiClient();\n\n// ...\n\nconst AuthenticationBackgroundComponentOverride = () => {\n  const [currentAdmin, setCurrentAdmin] = useCurrentAdmin();\n  // ...\n  // A part of your code responsible for refreshing user's session\n  const requestBody = {};\n  const response = await api.refreshToken(requestBody);\n\n  const { data } = response;\n\n  setCurrentAdmin(data);\n  // ...\n  return null;\n}\n\nexport default AuthenticationBackgroundComponentOverride;\n```\n\n----------------------------------------\n\nTITLE: PDF Generator React Component Implementation in TSX\nDESCRIPTION: Frontend React component that triggers the PDF generation action and redirects to the generated PDF file. This component is rendered when the user clicks on the PDF generation action in the AdminJS interface.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/faq/pdf-generator.md#2025-04-17_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useEffect } from 'react'\nimport { ApiClient, ActionProps } from 'adminjs'\nimport { Loader } from '@adminjs/design-system'\n\nconst GeneratePdf: React.FC<ActionProps> = (props) => {\n  const { record, resource } = props\n  const api = new ApiClient()\n\n  useEffect(() => {\n    api.recordAction({\n      recordId: record.id,\n      resourceId: resource.id,\n      actionName: 'PDFGenerator'\n    }).then((response) => {\n      window.location.href = response.data.url\n    }).catch((err) => {\n      console.error(err)\n    })\n  }, [])\n\n  return <Loader />\n}\n\nexport default GeneratePdf\n```\n\n----------------------------------------\n\nTITLE: Example Database Structure for Relations (Prisma Schema)\nDESCRIPTION: Prisma schema definition showing the database structure with relationships between organizations, persons, teams, and team members.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/features/relations.md#2025-04-17_snippet_3\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n    provider = \"prisma-client-js\"\n}\n\ndatasource db {\n    provider = \"postgresql\"\n    url      = env(\"DATABASE_URL\")\n}\n\nmodel Organization {\n    id      Int      @id @default(autoincrement())\n    name    String\n    persons Person[]\n\n    @@map(\"organizations\")\n}\n\nmodel Person {\n    id                  Int          @id @default(autoincrement())\n    firstName           String       @map(\"first_name\")\n    lastName            String       @map(\"last_name\")\n    email               String\n    phone               String\n    dateOfBirth         DateTime?     @map(\"date_of_birth\")\n    isActive            Boolean\n    organization        Organization @relation(fields: [organizationId], references: [id])\n    organizationId      Int          @map(\"organization_id\")\n\n    teams               TeamMember[]\n\n    @@map(\"persons\")\n}\n\nmodel Team {\n    id                  Int         @id @default(autoincrement())\n    name                String\n    members             TeamMember[]\n\n    @@map(\"teams\")\n}\n\nmodel TeamMember {\n    id                  Int         @id @default(autoincrement())\n    personId            Int         @map(\"person_id\")\n    person              Person      @relation(fields: [personId], references: [id])\n    teamId              Int         @map(\"team_id\")\n    team                Team        @relation(fields: [teamId], references: [id])\n\n    @@map(\"team_members\")\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Pages in AdminJS\nDESCRIPTION: Demonstrates how to register a custom component as a full page in AdminJS. This allows for creating entirely custom views that are accessible through the AdminJS navigation.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/ui-customization/writing-your-own-components.md#2025-04-17_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport AdminJS from 'adminjs'\nimport { Components } from './components.js'\n\nnew AdminJS({\n    pages: {\n        myPage: { // name, will be used to build an URL\n            handler: // handler code,\n            component: Components.MyPage,\n            icon: // page icon name\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom DropZone with Translations\nDESCRIPTION: Example of using the DropZone component with custom translations and validation\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/whats-new-in-v7.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DropZone } from '@adminjs/design-system'\nimport { useTranslation } from 'adminjs'\n\nexport const ExampleDropZone = () => {\n  const { translateComponent } = useTranslation()\n  \n  return (\n     <Box>\n       <Label>Attachment</Label>\n       <DropZone\n         validate={{ maxSize: 102400, mimeTypes: ['application/pdf'] }}\n         translations={translateComponent('DropZone', { returnObjects: true })}\n       />  \n    </Box>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: AdminJS Resource Registration for Relations\nDESCRIPTION: Example of registering all required resources in AdminJS, including junction tables for many-to-many relationships.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/features/relations.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst admin = new AdminJS({\n  resources: [\n    createOrganizationResource(),\n    createPersonResource(),\n    createOfficeResource(),\n    createTeamResource(),\n    createTeamMemberResource(),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Record-Based Action Access Control\nDESCRIPTION: Restricting access to actions based on the state of the record, allowing actions only when certain conditions are met in the record data.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/tutorials/adding-role-based-access-control.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst someResource: ResourceWithOptions = {\n  resource: Something,\n  options: {\n    actions: {\n      publish: {\n        isAccessible: ({ record }) => !record.params.published,s\n        // rest of the custom action code\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Basic AdminJS Hapi Integration - TypeScript\nDESCRIPTION: Simple setup of AdminJS with Hapi server in TypeScript, including type definitions and basic configuration.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/plugins/hapi.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport AdminJSHapi, { ExtendedAdminJSOptions } from '@adminjs/hapi'\nimport Hapi from '@hapi/hapi'\n\nconst PORT = 3000\n\nconst start = async () => {\n  const server = Hapi.server({ port: PORT })\n\n  const adminOptions: ExtendedAdminJSOptions = {\n    resources: [],\n    rootPath: '/admin',\n    auth: {\n      isSecure: process.env.NODE_ENV === 'production',\n    },\n    registerInert: true,\n  }\n\n  await server.register<ExtendedAdminJSOptions>({\n    plugin: AdminJSHapi,\n    options: adminOptions,\n  })\n\n  await server.start();\n  console.log(`AdminJS available at ${server.info.uri}${adminOptions.rootPath}`);\n}\n\nstart()\n```\n\n----------------------------------------\n\nTITLE: Passing Additional Props to Property Components in AdminJS\nDESCRIPTION: This example demonstrates how to pass custom HTML properties to a textarea component by using the 'props' option, specifically setting the rows attribute to 20 instead of the default value of 2.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/property.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst UserResource = {\n  resource: User,\n  options: {\n    properties: {\n      bio: {\n        type: 'textarea',\n        props: {\n          rows: 20,\n        },\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Office Entity Model in TypeScript\nDESCRIPTION: Example Objection model extending BaseModel with JSON schema validation. Includes interface definition for address structure and required field configurations.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/adapters/objection.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseModel } from '../base-model.js';\nimport Manager from './manager.entity.js';\n\nexport interface OfficeAddress {\n  street: string;\n  city: string;\n  zipCode: string;\n}\n\nclass Office extends BaseModel {\n  id: number;\n\n  name: string;\n\n  address?: OfficeAddress;\n\n  static tableName = 'offices';\n\n  static jsonSchema = {\n    type: 'object',\n    required: ['name'],\n    properties: {\n      id: { type: 'integer' },\n      name: { type: 'string', minLength: 1, maxLength: 255 },\n      address: {\n        type: 'object',\n        properties: {\n          street: { type: 'string' },\n          city: { type: 'string' },\n          zipCode: { type: 'string' },\n        },\n      },\n      createdAt: { type: 'string', format: 'date-time' },\n      updatedAt: { type: 'string', format: 'date-time' },\n    },\n  };\n}\n\nexport default Office;\n```\n\n----------------------------------------\n\nTITLE: Example Database Structure for Relations (Generic Interface)\nDESCRIPTION: Generic TypeScript interfaces showing the database structure with organizations, teams, persons, and their relationships used in the example.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/features/relations.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IOrganization {\n  id: number;\n  name: string;\n}\n\ninterface ITeam {\n  id: number;\n  name: string;\n}\n\ninterface IPerson {\n  id: number;\n  name: string;\n  email: string;\n  organizationId: number;\n}\n\ninterface ITeamMember {\n  id: number;\n  personId: number;\n  teamId: number;\n}\n\ninterface IOffice {\n  id: number;\n  name: string;\n  address: string;\n  organizationId: string;\n}\n\n/*\n  Person belongs to 1 Organization\n  Organization has many Persons\n  Office belongs to 1 Organization\n  Organization has many Offices\n  Person belongs to multiple Teams through TeamMember\n  Team belongs to multiple Persons through TeamMember\n*/\n```\n\n----------------------------------------\n\nTITLE: Simple AdminJS Integration with Express (JavaScript)\nDESCRIPTION: Basic setup for integrating AdminJS with Express.js in JavaScript. Creates an Express server with AdminJS router attached to a specified path.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/plugins/express.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport AdminJS from 'adminjs'\nimport AdminJSExpress from '@adminjs/express'\nimport express from 'express'\n\nconst PORT = 3000\n\nconst start = async () => {\n  const app = express()\n\n  const admin = new AdminJS({})\n\n  const adminRouter = AdminJSExpress.buildRouter(admin)\n  app.use(admin.options.rootPath, adminRouter)\n\n  app.listen(PORT, () => {\n    console.log(`AdminJS started on http://localhost:${PORT}${admin.options.rootPath}`)\n  })\n}\n\nstart()\n```\n\n----------------------------------------\n\nTITLE: Enabling AdminJS Frontend Development with watch() Function\nDESCRIPTION: TypeScript code to enable AdminJS frontend development mode, which launches a background bundling process when in development environment to avoid manual frontend rebuilding.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/getting-started.md#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport AdminJS from 'adminjs'\n\nconst adminJS = new AdminJS({\n    // ...\n})\n\nadminJS.watch()\n```\n\n----------------------------------------\n\nTITLE: Configuring AdminJS with Mongoose in Standard Setup\nDESCRIPTION: Demonstrates how to connect Mongoose to AdminJS in a standard (non-Nest.js) setup. This includes connecting to MongoDB, registering the Mongoose adapter, and passing Mongoose models to AdminJS resources.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/adapters/mongoose.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// ... other imports\nimport mongoose from 'mongoose'\nimport * as AdminJSMongoose from '@adminjs/mongoose'\n\nimport { Category } from './category.entity.js'\n\nAdminJS.registerAdapter({\n  Resource: AdminJSMongoose.Resource,\n  Database: AdminJSMongoose.Database,\n})\n\n// ... other code\nconst start = async () => {\n  await mongoose.connect('<mongo db url>')\n  const adminOptions = {\n    // We pass Category to `resources`\n    resources: [Category],\n  }\n  // Please note that some plugins don't need you to create AdminJS instance manually,\n  // instead you would just pass `adminOptions` into the plugin directly,\n  // an example would be \"@adminjs/hapi\"\n  const admin = new AdminJS(adminOptions)\n  // ... other code\n}\n\nstart()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Static Files Hosting with Express for Local Filesystem Storage\nDESCRIPTION: JavaScript code to set up Express.js to serve static files for the local filesystem storage provider. This creates the necessary directory structure for serving uploaded files.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/features/upload.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as url from 'url'\n// other imports\n\nconst __dirname = url.fileURLToPath(new URL('.', import.meta.url))\n\napp.use(express.static(path.join(__dirname, '../public')));\n```\n\n----------------------------------------\n\nTITLE: Configuring a Resource to Use Custom Components\nDESCRIPTION: Demonstrates how to set up a resource configuration that uses a custom component for the edit view of a property. This connects the component to the specific property that should use it.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/ui-customization/writing-your-own-components.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Components } from './components.js'\n\nexport const SomeResource = {\n  resource: Something, // database model\n  options: {\n    properties: {\n      someText: {\n        type: 'string',\n        components: {\n          edit: Components.MyInput, // this is our custom component\n        },\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Firebase Authentication Method\nDESCRIPTION: Function to authenticate users by verifying Firebase access tokens and returning user objects.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/authentication/firebaseauthprovider.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getAuth } from 'firebase-admin/auth';\nimport { FirebaseAuthenticatePayload } from '@adminjs/firebase-auth';\n\nexport const authenticate = async ({\n  accessToken,\n}: FirebaseAuthenticatePayload) => {\n  const auth = getAuth(firebaseApp);\n\n  try {\n    const decodedToken = await auth.verifyIdToken(accessToken);\n\n    return {\n      id: decodedToken.uid,\n      email: decodedToken.email ?? '',\n      avatarUrl: decodedToken.picture,\n    };\n  } catch (error) {\n    console.log(error);\n    return null;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring leafletMultipleMarkersMapFeature with AdminJS\nDESCRIPTION: A complete TypeScript example showing how to configure the leafletMultipleMarkersMapFeature in AdminJS. This includes setting up the resource with proper map and marker options, configuring the component loader, and defining map properties.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/features/leaflet-maps.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport leafletFeatures, { getLeafletDist } from '@adminjs/leaflet';\n// other imports\nimport MapEntity from './map.entity.js';\n\n// Other code - remember to set up the common configuration!\n\nconst admin = new AdminJS({\n  resources: [\n    {\n      resource: MapEntity,\n      features: [\n        leafletFeatures.leafletMultipleMarkersMapFeature({\n          /* You must provide your \"componentLoader\" instance for the feature\n          to add it's components. */\n          componentLoader,\n          /* Since Map and Marker are in 1:M relation, a property to display the map\n          will not be present by default and the feature has to create one.\n          In this example, \"mapProperty\" creates a new \"markers\" field in your Map's \"edit\"\n          and \"show\" views. */\n          mapProperty: 'markers',\n          /* \"markerOptions\" are required for the feature to know where to get and how to manage\n          your markers. Please note that \"edit\", \"new\" and \"list\" actions have to be enabled in your\n          Marker resource. */\n          markerOptions: {\n            /* Your marker's resource ID. This is usually either the model name or a table name\n            of your Marker unless you'd changed it. */\n            resourceId: 'Marker',\n            /* The foreign key in your Marker model which associates it with currently managed Map */\n            foreignKey: 'mapId',\n            /* This configuration is exactly the same as \"paths\" configuration\n            in \"leafletSingleMarkerMapFeature\" */\n            paths: {\n              /* A property which should be used to display the map. It can be an entirely\n              new property name, or you can use an actual field from your Marker's model. */\n              mapProperty: 'location',\n              /* \"jsonProperty\" is optional and should only be given if your Marker's latitude\n              and longitude are stored in a single JSON field. In this example, \"location\"\n              is of GeoJSON.Point type (https://geojson.org/). If your latitude and longitude\n              are stored in separate fields, leave this option undefined. */\n              jsonProperty: 'location',\n              /* If your latitude has a separate field in your model, just use the field name.\n              Example:\n                latitudeProperty: 'latitude'\n              If your latitude property is a part of a JSON structure (GeoJSON example from above)\n              you must provide a flattened path under which the latitude should be saved in the JSON. */\n              latitudeProperty: 'location.coordinates.0',\n              /* Longitude configuration is the same as latitude's */\n              longitudeProperty: 'location.coordinates.1',\n              /* 'location.coordinates.0' combined with 'location.coordinates.1' will save the\n              coordinates in the following format: { coordinates: [<lat>, <lng>] } */\n            },\n          },\n          /* \"mapProps\" are passed to React Leaflet's MapContainer component. You can use them to\n          change initial zoom, initial coordinates, max zoom, map bounds, disable scroll zoom, etc.\n          Reference: https://react-leaflet.js.org/docs/v3/api-map/ */\n          mapProps: {\n            /* In \"leafletSingleMarkerMapFeature\" the map is centered at your marker by default.\n            In \"leafletMultipleMarkersMapFeature\" the markers are fetched asynchronously and the map\n            is rendered before they're available so you must provide initial coordinates yourself.\n            By default, if you don't provide \"center\", the map will be centered at London coordinates.\n            \n            Future versions of \"@adminjs/leaflet\" should have better handling of initial coordinates. */\n            center: [52.237049, 21.017532],\n          },\n          /* \"tileProps\" are passed to React Leaflet's TileLayer component. You can use them\n          to provide your custom tile URL, attribution, etc.\n          Reference: https://react-leaflet.js.org/docs/v3/api-components/#tilelayer */\n          tileProps: undefined,\n        }),\n      ],\n    },\n  ],\n  componentLoader,\n  assets: {\n    styles: ['/leaflet.css'],\n  },\n});\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Component Translation in AdminJS\nDESCRIPTION: Example of using the useTranslation hook to translate custom components in AdminJS. Shows how to access and use the translateComponent function.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/migration-guide-v7.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// ... \nimport { useTranslation } from 'adminjs'\n// ...\n\nconst CustomComponent = (props) => {\n    const { translateComponent } = useTranslation()\n    return <div>{translateComponent('CustomComponent.textToTranslate')}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating styled-components Implementation in AdminJS v7\nDESCRIPTION: Shows the transition from default styled-components import to named imports from @adminjs/design-system/styled-components. Demonstrates proper component styling implementation in the new version.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/migration-guide-v7.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport styled, { css } from 'styled-components'\nimport { Box } from '@adminjs/design-system'\n\nconst someCss = css`\n  /* some css */\n`\n\nconst StyledBox = styled(Box)`\n  ${someCss}\n  \n  background: black;\n`\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { styled, css } from '@adminjs/design-system/styled-components'\nimport { Box } from '@adminjs/design-system'\n\nconst someCss = css`\n  /* some css */\n`\n\nconst StyledBox = styled(Box)`\n  ${someCss}\n  \n  background: black;\n`\n```\n\n----------------------------------------\n\nTITLE: Organizing Record Actions in Nested Context Menus\nDESCRIPTION: Shows how to group multiple record actions under a dropdown menu using the parent option to improve UI organization when there are many actions.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/action.md#2025-04-17_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst UserResource = {\n  resource: User,\n  options: {\n    actions: {\n      myCustomAction: {\n        actionType: 'record',\n        component: false,\n        handler: (request, response, context) => {\n          const { record, currentAdmin } = context\n          return {\n            record: record.toJSON(currentAdmin),\n          }\n        },\n        parent: 'More',\n      },\n      myOtherCustomAction: {\n        actionType: 'record',\n        component: false,\n        handler: (request, response, context) => {\n          const { record, currentAdmin } = context\n          return {\n            record: record.toJSON(currentAdmin),\n          }\n        },\n        parent: 'More',\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Importing AdminJS and MikroORM Adapter in Nest.js\nDESCRIPTION: Code snippet showing how to import AdminJS and the MikroORM adapter in a Nest.js application module file. This is the first step in setting up AdminJS with MikroORM in a Nest.js application.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/adapters/mikroorm.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as AdminJSMikroORM from '@adminjs/mikroorm'\nimport AdminJS from 'adminjs'\n```\n\n----------------------------------------\n\nTITLE: Creating a Line Chart Component with Recharts in React\nDESCRIPTION: Defines a React component that renders a line chart using Recharts library, displaying movie scores over years.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/faq/charts.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type React from 'react'\n\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts'\n\nexport const LineChartComponent: React.FC = ({ data }) => {\n  return (\n        <LineChart\n          width={500}\n          height={300}\n          data={data}\n          margin={{\n            top: 5,\n            right: 30,\n            left: 20,\n            bottom: 5\n          }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"name\" />\n          <YAxis />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"score\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\n        </LineChart>\n  )\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Form Layout in AdminJS (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to customize the form layout for the 'new' action in AdminJS. It creates a two-row layout for user details and credentials, using flexbox properties to arrange the fields.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/ui-customization/changing-the-form-view.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n    actions: [\n      {\n        name: 'new',\n        layout: [\n          ['@Header', { children: 'Enter user details' }],\n          [\n            { flexDirection: 'row', flex: true },\n            [\n              ['name', { flexGrow: 1, marginRight: '10px' }],\n              ['surname', { flexGrow: 1 }],\n            ],\n          ],\n          ['@Header', { children: 'Enter user credentials' }],\n          [\n            { flexDirection: 'row', flex: true },\n            [\n              ['login', { flexGrow: 1, marginRight: '10px' }],\n              ['password', { flexGrow: 1 }],\n            ],\n          ],\n\n        ],\n      },\n      // other actions\n    ],\n```\n\n----------------------------------------\n\nTITLE: Hiding Timestamp Fields in AdminJS SQL Resource\nDESCRIPTION: This snippet shows how to hide automatically generated timestamp fields (like created_at and updated_at) from create/edit forms by configuring their visibility in the resource options.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/adapters/sql.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// ...\n  const admin = new AdminJS({\n    resources: [{\n      resource: db.table('users'),\n      options: {\n        properties: {\n          created_at: { isVisible: false },\n          updated_at: { isVisible: false },\n        },\n      },\n    }],\n  })\n// ...\n```\n\n----------------------------------------\n\nTITLE: Defining Log Entity with Sequelize ORM\nDESCRIPTION: TypeScript implementation of a Log entity using Sequelize ORM. This defines the database structure for storing change logs including actions, resources, user references, and differences.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/features/logger.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DataTypes, Model } from 'sequelize';\n\nimport db from './sequelize.connection.js';\nimport User from './user.entity.js';\n\nexport interface ILog = {\n  id: number;\n  action: string;\n  resource: string;\n  userId: number;\n  recordId: number;\n  recordTitle: string;\n  difference: string;\n  createdAt: Date;\n  updatedAt: Date;\n};\n\nexport class Log extends Model<ILog> {\n  id: number;\n  createdAt: Date;\n  updatedAt?: Date;\n  recordId: number;\n  recordTitle: string | null;\n  difference: Record<string, unknown> | null;\n  action: string;\n  resource: string;\n  userId: number;\n}\n\nLog.init(\n  {\n    id: {\n      type: DataTypes.INTEGER,\n      autoIncrement: true,\n      primaryKey: true,\n    },\n    action: {\n      type: new DataTypes.STRING(128),\n      allowNull: false,\n    },\n    resource: {\n      type: new DataTypes.STRING(128),\n      allowNull: false,\n    },\n    userId: {\n      type: DataTypes.INTEGER,\n      allowNull: false,\n    },\n    recordId: {\n      type: DataTypes.INTEGER,\n      allowNull: false,\n    },\n    recordTitle: {\n      type: new DataTypes.STRING(128),\n      allowNull: false,\n    },\n    difference: {\n      type: DataTypes.JSONB,\n      allowNull: true,\n    },\n  },\n  {\n    sequelize: db,\n    tableName: 'logs',\n    timestamps: true,\n  }\n);\n\nexport default Log;\n```\n\n----------------------------------------\n\nTITLE: Configuring Static File Access for Express in TypeScript\nDESCRIPTION: Sets up static file access for an Express-based AdminJS application to enable custom CSS. This snippet uses the URL module to establish the directory path and configure Express to serve static content.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/ui-customization/overwriting-css-styles.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as url from 'url'\n// other imports\n\nconst __dirname = url.fileURLToPath(new URL('.', import.meta.url))\n\napp.use(express.static(path.join(__dirname, \"../public\")));\n```\n\n----------------------------------------\n\nTITLE: Integrating Line Chart in AdminJS Dashboard\nDESCRIPTION: Implements the dashboard component that fetches data from the API and renders the LineChartComponent with the retrieved data.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/faq/charts.md#2025-04-17_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ApiClient } from 'adminjs'\nimport React, { useState, useEffect } from 'react'\n\nimport { LineChartComponent } from './linechart.component.js'\n\nconst Dashboard: React.FC = () => {\n  const [data, setData] = useState(null)\n  const api = new ApiClient()\n\n  useEffect(() => {\n    api.getDashboard()\n      .then((response) => {\n        setData(response.data)\n      })\n      .catch((error) => {\n        // Handle errors here\n      })\n  }, [])\n  return (\n    <LineChartComponent data={data} />\n  )\n}\n\nexport default Dashboard\n```\n\n----------------------------------------\n\nTITLE: Configuring Lucid Resources\nDESCRIPTION: Example of adding Lucid models as AdminJS resources with optional configuration\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/plugins/adonis.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LucidResource } from '@adminjs/adonis'\n\nimport User from '../app/models/user.js'\nimport Profile from '../app/models/profile.js'\n\n// ...\nadminjs: {\n  resources: [\n    new LucidResource(User, 'postgres'),\n    {\n      resource: new LucidResource(Profile, 'postgres'),\n      options: {},\n    }\n  ],\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Sequelize Connection for AdminJS\nDESCRIPTION: Example of a Sequelize connection setup using PostgreSQL. This code creates and exports a Sequelize instance that can be used throughout the application.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/adapters/sequelize.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Sequelize } from 'sequelize'\n\nconst sequelize = new Sequelize('postgres://adminjs:adminjs@localhost:5435/adminjs', {\n  dialect: 'postgres',\n})\n\nexport default sequelize\n```\n\n----------------------------------------\n\nTITLE: Component Loader Implementation with Passwords Feature\nDESCRIPTION: Demonstrates how to implement ComponentLoader with the passwords feature in AdminJS v7, showing the new requirement to pass ComponentLoader instance to features.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/migration-guide-v7.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ComponentLoader } from 'adminjs'\nimport passwordsFeature from '@adminjs/passwords'\n\nimport { User } from './user.entity.js'\n\n// ...\n\nconst componentLoader = new ComponentLoader()\n\nconst admin = new AdminJS({\n  componentLoader,\n  resources: [{\n    resource: User,\n    options: {},\n    features: [passwordsFeature({\n      componentLoader,\n      // the rest of the feature's config\n    })]\n  }]\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Log Entity with Mongoose\nDESCRIPTION: TypeScript implementation of a Log entity using Mongoose for MongoDB. This defines the schema for logging changes with Mongoose Schema.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/features/logger.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { model, Schema } from 'mongoose';\n\nexport interface Log {\n  id: number;\n  action: string;\n  resource: string;\n  userId: string | null;\n  recordId: string;\n  recordTitle: string | null;\n  difference: Record<string, unknown> | null;\n  createdAt: Date;\n  updatedAt?: Date;\n}\n\nexport const LogSchema = new Schema<Log>({\n  createdAt: { type: Date, default: Date.now },\n  updatedAt: { type: Date, default: Date.now },\n  recordId: { type: 'String', required: true },\n  recordTitle: { type: 'String' },\n  difference: 'Object',\n  action: { type: 'String' },\n  resource: { type: 'String' },\n  userId: { type: 'String' },\n});\n\nexport const LogModel = model<Log>('Log', LogSchema);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom React Component for Property Display in AdminJS\nDESCRIPTION: This React component displays a random picture from the Picsum service. It's designed to be used as a custom property renderer for the 'randomPicture' field in AdminJS resources.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/property.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport { ShowPropertyProps } from 'adminjs'\nimport { Box } from '@adminjs/design-system'\n\nconst RandomPicture: React.FC<ShowPropertyProps> = (props) => {\n  // Picsum generates a random 200x200 photo\n  const url = 'https://picsum.photos/200'\n  \n  return <img src={url} />\n}\n\nexport default RandomPicture\n```\n\n----------------------------------------\n\nTITLE: Configuring AdminJS Instance with Public Themes\nDESCRIPTION: Example showing how to import and configure public themes from @adminjs/themes package in AdminJS initialization\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/themes.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { dark, light, noSidebar } from '@adminjs/themes'\nimport AdminJS from 'adminjs'\n\n// ...\n\nconst admin = new AdminJS({\n  defaultTheme: dark.id,\n  availableThemes: [dark, light, noSidebar],\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Visible Properties Per Action\nDESCRIPTION: Demonstrates how to specify which properties should be visible in different actions\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/resource.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst admin = new AdminJS({\n  resources: [{\n    resource: Profile,\n    options: {\n      listProperties: ['id', 'name', 'createdAt'],\n      filterProperties: ['id', 'name', 'createdAt'],\n      editProperties: ['id', 'name', 'bio', 'createdAt'],\n      showProperties: ['id', 'name', 'bio', 'createdAt'],\n    },\n  }],\n})\n```\n\n----------------------------------------\n\nTITLE: AdminJS Main Configuration\nDESCRIPTION: Main configuration object for AdminJS including paths, resources, localization, and branding settings\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/plugins/adonis.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nadminjs: {\n  rootPath: '/admin',\n  loginPath: '/admin/login',\n  logoutPath: '/admin/logout',\n  componentLoader,\n  resources: [],\n  pages: {},\n  locale: {\n    availableLanguages: ['en'],\n    language: 'en',\n    translations: {\n      en: {\n        actions: {},\n        messages: {},\n        labels: {},\n        buttons: {},\n        properties: {},\n        components: {},\n        pages: {},\n        ExampleResource: {\n          actions: {},\n          messages: {},\n          labels: {},\n          buttons: {},\n          properties: {},\n        },\n      },\n    },\n  },\n  branding: {\n    companyName: 'AdminJS',\n    theme: {},\n  },\n  settings: {\n    defaultPerPage: 10,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response from Search Endpoint in AdminJS\nDESCRIPTION: This example shows the JSON response structure when searching for 'Games' in the categories resource. The response includes the matching record with its parameters, ID, title, and available record and bulk actions.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/api/search.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"records\":[\n      {\n         \"params\":{\n            \"id\":2,\n            \"name\":\"Games\",\n            \"createdAt\":\"2023-01-30T13:01:39.597Z\",\n            \"updatedAt\":\"2023-01-30T13:01:39.597Z\"\n         },\n         \"populated\":{\n            \n         },\n         \"baseError\":null,\n         \"errors\":{\n            \n         },\n         \"id\":2,\n         \"title\":\"Games\",\n         \"recordActions\":[\n            {\n               \"name\":\"show\",\n               \"actionType\":\"record\",\n               \"icon\":\"Screen\",\n               \"label\":\"Show\",\n               \"resourceId\":\"categories\",\n               \"guard\":\"\",\n               \"showFilter\":false,\n               \"showResourceActions\":true,\n               \"showInDrawer\":false,\n               \"hideActionHeader\":false,\n               \"containerWidth\":1,\n               \"layout\":null,\n               \"variant\":\"default\",\n               \"parent\":null,\n               \"hasHandler\":true,\n               \"custom\":{\n                  \n               }\n            },\n            {\n               \"name\":\"edit\",\n               \"actionType\":\"record\",\n               \"icon\":\"Edit\",\n               \"label\":\"Edit\",\n               \"resourceId\":\"categories\",\n               \"guard\":\"\",\n               \"showFilter\":false,\n               \"showResourceActions\":true,\n               \"showInDrawer\":false,\n               \"hideActionHeader\":false,\n               \"containerWidth\":1,\n               \"layout\":null,\n               \"variant\":\"default\",\n               \"parent\":null,\n               \"hasHandler\":true,\n               \"custom\":{\n                  \n               }\n            },\n            {\n               \"name\":\"delete\",\n               \"actionType\":\"record\",\n               \"icon\":\"TrashCan\",\n               \"label\":\"Delete\",\n               \"resourceId\":\"categories\",\n               \"guard\":\"Do you really want to remove this item?\",\n               \"showFilter\":false,\n               \"showResourceActions\":true,\n               \"component\":false,\n               \"showInDrawer\":false,\n               \"hideActionHeader\":false,\n               \"containerWidth\":1,\n               \"layout\":null,\n               \"variant\":\"danger\",\n               \"parent\":null,\n               \"hasHandler\":true,\n               \"custom\":{\n                  \n               }\n            }\n         ],\n         \"bulkActions\":[\n            {\n               \"name\":\"bulkDelete\",\n               \"actionType\":\"bulk\",\n               \"icon\":\"Delete\",\n               \"label\":\"Delete all\",\n               \"resourceId\":\"categories\",\n               \"guard\":\"\",\n               \"showFilter\":false,\n               \"showResourceActions\":true,\n               \"showInDrawer\":true,\n               \"hideActionHeader\":false,\n               \"containerWidth\":\"500px\",\n               \"layout\":null,\n               \"variant\":\"danger\",\n               \"parent\":null,\n               \"hasHandler\":true,\n               \"custom\":{\n                  \n               }\n            }\n         ]\n      }\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced ComponentLoader Usage with Function Wrapping\nDESCRIPTION: Shows how to create a helper function that wraps ComponentLoader.add() with proper caller name reference. This is useful when organizing component registration in larger applications with more complex file structures.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/ui-customization/writing-your-own-components.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ComponentLoader } from 'adminjs'\n\nconst loader = new ComponentLoader()\n\nexport const bundleFile = (key: string, path: string) => {\n    loader.add(key, path, 'bundleFile') // `bundleFile` is the name of this function\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Theme Configuration\nDESCRIPTION: Example of creating a custom theme with modified primary color using theme overrides\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/themes.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport AdminJS from 'adminjs'\n\n// ...\n\nconst myCustomTheme = {\n  id: 'my-custom-theme',\n  name: 'My Custom Theme',\n  overrides: {\n    colors: {\n      primary100: 'teal',\n    },\n  },\n}\n/* We're leaving \"bundlePath\" and \"stylePath\" undefined\nsince we don't use a css file nor custom components. */\n\n// ...\n\nconst admin = new AdminJS({\n  defaultTheme: myCustomTheme.id,\n  availableThemes: [myCustomTheme],\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Selection Options for a Property in AdminJS\nDESCRIPTION: This configuration creates a dropdown selection field for the 'gender' property by defining the available values that users can choose from, with each option having a value and display label.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/property.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst UserResource = {\n  resource: User,\n  options: {\n    properties: {\n      gender: {\n        availableValues: [\n          { value: 'male', label: 'Male' },\n          { value: 'female', label: 'Female' },\n          { value: 'other', label: 'Other' },\n          { value: 'notSay', label: 'Rather not say' },\n        ],\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Updated Translation Configuration Format\nDESCRIPTION: Example of the new translation configuration format in AdminJS version 7, supporting multiple languages.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/migration-guide-v7.md#2025-04-17_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nlocale: {\n  language: 'pl',\n  availableLanguages: ['pl', 'en'],\n  translations: {\n    pl: {\n      labels: {\n        dashboard: 'Strona główna',\n      }\n    },\n    en: {\n      labels: {\n        dashboard: 'Main page',\n      }\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing handleLogin Method in Custom Authentication Provider\nDESCRIPTION: Example of overriding the handleLogin method in a custom authentication provider. This shows how to extract credentials from the request data and pass them to an authenticate function.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/authentication/README.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n  override async handleLogin(opts: LoginHandlerOptions, context) {\n    const { data = {} } = opts\n    const { email, password } = data\n\n    return this.authenticate({ email, password }, context)\n  }\n```\n\n----------------------------------------\n\nTITLE: Defining Prisma Schema with MySQL Database\nDESCRIPTION: Basic Prisma schema configuration defining a MySQL database connection and a Publisher model with basic fields.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/adapters/prisma.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndatasource db {\n  provider = \"mysql\"\n  url      = env(\"MYSQL_DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\nmodel Publisher {\n  id      Int      @id @default(autoincrement())\n  email   String   @unique\n  name    String?\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AdminJS with i18next\nDESCRIPTION: Shows how to initialize AdminJS with existing i18next configuration in an application.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/tutorials/internationalization-i18n.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst loadAdminJS = () => {\n  const { adminJs, adminRouter } = admin()\n  app.use(adminJs.options.rootPath, adminMiddleware, adminRouter)\n  app.use('/admin', adminMiddleware, adminController)\n}\n\ni18next.init({...}, (err, t) => {\n  loadAdminJS()\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Theme-Based User Authentication\nDESCRIPTION: Example of how to assign different themes to users based on their roles during authentication\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/themes.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserRepository } from './user.repository.js'\n\n/* \"authenticate\" is an authentication function, please refer to \"Plugins\"\nsection to see how to set up an authenticated admin panel. */\nconst authenticate = (email, password) => {\n  /* An example of email/password authentication */\n  const userRepository = new UserRepository()\n  const user = await userRepository.findByEmail(email)\n  \n  if (!user) return null\n  \n  if (await !user.comparePassword(password)) return null\n  \n  const currentAdmin = {\n    id: user.id,\n    email: user.email,\n    role: user.role,\n  }\n\n  /* Assigning themes based on role */\n  if (currentAdmin.role === 'Admin') {\n    // \"Admin\" has \"dark\" theme\n    currentAdmin.theme = 'dark'\n  } else {\n    // Any other role has \"light\" theme\n    currentAdmin.theme = 'light'\n  }\n  \n  return currentAdmin\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Log Entity with ObjectionJS\nDESCRIPTION: TypeScript implementation of a Log entity using ObjectionJS ORM. This defines the model for logging changes with ObjectionJS schema validation.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/features/logger.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseModel } from '../utils/base-model.js';\n\nclass Log extends BaseModel {\n  id: number;\n  recordId: number;\n  recordTitle: string;\n  difference: Record<string, unknown> | null;\n  action: string;\n  resource: string;\n  userId: string;\n\n  static tableName = 'logs';\n\n  static jsonSchema = {\n    type: 'object',\n    required: ['recordId', 'action', 'resource', 'userId'],\n\n    properties: {\n      id: { type: 'integer' },\n      recordId: { type: 'integer' },\n      recordTitle: { type: 'string', minLength: 1, maxLength: 128 },\n      difference: { type: 'jsonb' },\n      action: { type: 'string', minLength: 1, maxLength: 128 },\n      resource: { type: 'string', minLength: 1, maxLength: 128 },\n      userId: { type: 'string', minLength: 1, maxLength: 128 },\n      createdAt: { type: 'string', format: 'date-time', readOnly: true },\n      updatedAt: { type: 'string', format: 'date-time', readOnly: true },\n    },\n  };\n}\n\nexport default Log;\n```\n\n----------------------------------------\n\nTITLE: Implementing Before Hook for Preventing Unauthorized Edits in AdminJS\nDESCRIPTION: This before hook prevents editing of restricted fields by removing them from the payload of POST requests based on user roles.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/tutorials/adding-role-based-access-control.md#2025-04-17_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst roleAccessControlBeforeHook: Before = async (request, context) => {\n  const { method, payload } = request;\n  if (method !== 'post' || !payload) {\n    return request;\n  }\n  const { properties } = context.resource\n    .decorate()\n    .toJSON(context.currentAdmin);\n  const targetRole = context.currentAdmin?.role;\n  const propertiesToRemove = Object.entries(properties)\n    .filter(\n      ([_, { custom }]) => custom.role && String(custom.role) !== targetRole,\n    )\n    .map(([name]) => name);\n  propertiesToRemove.forEach((name) => delete payload[name]);\n  return request;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Values Before Hook for New Actions in AdminJS\nDESCRIPTION: This before hook sets default values for restricted fields in the 'new' action, ensuring required fields have values even when hidden from certain users.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/tutorials/adding-role-based-access-control.md#2025-04-17_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst defaultValuesBeforeHook: Before = async (request, context) => {\n  const { payload, method } = request;\n  if (method !== 'post' || !payload || context.action.name !== 'new') {\n    return request;\n  }\n  const { properties } = context.resource\n    .decorate()\n    .toJSON(context.currentAdmin);\n  Object.entries(properties).forEach(([name, { custom }]) => {\n    if (custom.defaultValue && payload[name] === undefined) {\n      payload[name] = custom.defaultValue;\n    }\n  });\n  return request;\n};\n```\n\n----------------------------------------\n\nTITLE: Standard AdminJS Prisma Integration\nDESCRIPTION: Setup code for integrating Prisma with AdminJS in standard frameworks, showing adapter registration and resource configuration.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/adapters/prisma.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// ... other imports\nimport { Database, Resource, getModelByName } from '@adminjs/prisma'\nimport { PrismaClient } from '@prisma/client'\n\nconst prisma = new PrismaClient()\n\nAdminJS.registerAdapter({ Database, Resource })\n\n// ... other code\nconst start = async () => {\n  const adminOptions = {\n    resources: [{\n      resource: { model: getModelByName('Post'), client: prisma },\n      options: {},\n    }, {\n      resource: { model: getModelByName('Profile'), client: prisma },\n      options: {},\n    }, {\n      resource: { model: getModelByName('Publisher'), client: prisma },\n      options: {},\n    }],\n  }\n  // Please note that some plugins don't need you to create AdminJS instance manually,\n  // instead you would just pass `adminOptions` into the plugin directly,\n  // an example would be \"@adminjs/hapi\"\n  const admin = new AdminJS(adminOptions)\n  // ... other code\n}\n\nstart()\n```\n\n----------------------------------------\n\nTITLE: Creating New User Record - AdminJS API Example\nDESCRIPTION: Example JSON payload for creating a new user record via the AdminJS API endpoint. Shows required fields including email, name fields, gender and preferences.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/api/new.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    email: \"client@adminjs.co\",\n    firstName: \"ClientName\",\n    lastName: \"ClientSurname\",\n    gender: \"male\",\n    isMyFavourite: true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AdminJS Module with MikroORM Resources in Nest.js\nDESCRIPTION: Example of how to configure the AdminJS module in a Nest.js application with MikroORM resources. This includes setting up the admin path and registering entity resources for the admin panel.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/adapters/mikroorm.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// ... other imports\nimport { Owner } from './owner.entity.js'\n// ... other code\nAdminModule.createAdminAsync({\n  useFactory: () => ({\n    adminJsOptions: {\n      rootPath: '/admin',\n      resources: [{\n        resource: { model: Owner, orm },\n        options: {}\n      }],\n    },\n  }),\n}),\n// ... other code\n```\n\n----------------------------------------\n\nTITLE: Importing AdminJS Frontend Utilities\nDESCRIPTION: Shows how to import and use AdminJS frontend utility classes like ApiClient and ViewHelpers. These utilities provide access to the AdminJS API and URL generation helpers.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/ui-customization/writing-your-own-components.md#2025-04-17_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApiClient, ViewHelpers } from 'adminjs'\n```\n\n----------------------------------------\n\nTITLE: Implementing Notifications with Translation Support\nDESCRIPTION: Example of using notifications with message interpolation and error handling\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/whats-new-in-v7.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nthrow new AppError('someErrorKey', { someData: 'some data for UI' }, { options: { someParams: ['param 1', 'param 2'].join(', ') }})\n```\n\n----------------------------------------\n\nTITLE: Authenticated AdminJS Integration with Koa (JavaScript)\nDESCRIPTION: JavaScript code for setting up an authenticated AdminJS panel with Koa. It includes a simple authentication function and uses buildAuthenticatedRouter.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/plugins/koa.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport AdminJS from 'adminjs'\nimport AdminJSKoa from '@adminjs/koa'\nimport Koa from 'koa'\n\nconst PORT = 3000\n\nconst DEFAULT_ADMIN = {\n  email: 'admin@example.com',\n  password: 'password',\n}\n\nconst authenticate = async (email, password) => {\n  if (email === DEFAULT_ADMIN.email && password === DEFAULT_ADMIN.password) {\n    return Promise.resolve(DEFAULT_ADMIN)\n  }\n  return null\n}\n\nconst start = async () => {\n  const app = new Koa()\n\n  const admin = new AdminJS({\n    resources: [],\n    rootPath: '/admin',\n  })\n\n  app.keys = ['your secret for koa cookie'];\n  const router = AdminJSKoa.buildAuthenticatedRouter(\n    admin,\n    app,\n    {\n      authenticate,\n      sessionOptions: {\n        // You may configure your Koa session here\n        httpOnly: process.env.NODE_ENV === 'production',\n        secure: process.env.NODE_ENV === 'production',\n        renew: true,\n      },\n    },\n  )\n\n  app\n    .use(router.routes())\n    .use(router.allowedMethods())\n\n   app.listen(PORT, () => {\n     console.log(`AdminJS available at http://localhost:${PORT}${admin.options.rootPath}`)\n   })\n}\n\nstart()\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Page Translation in AdminJS\nDESCRIPTION: Example of creating and translating custom pages in the sidebar navigation\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/whats-new-in-v7.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst admin = new AdminJS({\n  pages: {\n    myCustomPage: { /* */ },\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Required Dependencies for AdminJS SQL Adapter\nDESCRIPTION: This snippet shows how to import the necessary modules from @adminjs/sql and adminjs to set up a SQL adapter connection.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/adapters/sql.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Adapter, Resource, Database } from '@adminjs/sql'\nimport AdminJS from 'adminjs'\n```\n\n----------------------------------------\n\nTITLE: Configuring FirebaseAuthProvider for AdminJS\nDESCRIPTION: Example of setting up FirebaseAuthProvider with all necessary configurations for use with AdminJS.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/authentication/firebaseauthprovider.md#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FirebaseAuthProvider } from '@adminjs/firebase-auth';\nimport componentLoader from '<path to your component loader file>';\n\n// ... assume Firebase related configuration is in the same file\n\nconst authProvider = new FirebaseAuthProvider({\n  // make sure that the same ComponentLoader instance is configured in AdminJS!\n  componentLoader,\n  uiConfig,\n  firebaseConfig,\n  authenticate,\n  licenseKey: process.env.LICENSE_KEY,\n});\n\n// ...\n\n// Add \"provider\" to authentication options of your framework plugin, Express example:\n\nconst router = buildAuthenticatedRouter(\n  admin,\n  {\n    cookiePassword: 'test',\n    provider: authProvider,\n  },\n  null,\n  {\n    secret: 'test',\n    resave: false,\n    saveUninitialized: true,\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Action Visibility and Accessibility\nDESCRIPTION: Demonstrates how to control action visibility and accessibility using boolean values. This example disables the edit action's accessibility while keeping it visible in the UI.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/action.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst UserResource = {\n  resource: User,\n  options: {\n    actions: {\n      edit: {\n        isAccessible: false,\n        isVisible: true,\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Leaflet CSS in Express\nDESCRIPTION: Setup to serve Leaflet CSS files and initialize AdminJS with Leaflet assets. Demonstrates how to configure express static middleware and AdminJS assets.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/features/leaflet-maps.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport leafletFeatures, { getLeafletDist } from '@adminjs/leaflet';\nimport AdminJS, { ComponentLoader } from 'adminjs';\nimport express from 'express';\n\n// ...\n\nconst app = express();\n// Use express.static to serve public files\napp.use(express.static(getLeafletDist()));\n\n// ...\n\nconst componentLoader = new ComponentLoader();\nconst admin = new AdminJS({\n  componentLoader,\n  assets: {\n    // Tell AdminJS that leaflet.css is available under <server url>/leaflet.css\n    styles: ['/leaflet.css'],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Custom Components in AdminJS\nDESCRIPTION: This TypeScript code demonstrates how to import and use custom components from the @adminjs/custom-components library in an AdminJS project. It shows the setup of ComponentLoader and the creation of a Components object that includes the custom component.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/tutorials/custom-components-library.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ComponentLoader } from 'adminjs'\nimport bundle from '@adminjs/custom-components'\n\nconst componentLoader = new ComponentLoader()\n\nconst Components = {\n  // other custom components\n  // 'CustomComponent' is the component name from library\n  CustomComponent: bundle(componentLoader, 'CustomComponent'),\n}\n\nexport { componentLoader, Components }\n```\n\n----------------------------------------\n\nTITLE: Overriding the Login Component in AdminJS\nDESCRIPTION: Code snippet showing how to override the default login component in AdminJS with a custom component.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/faq/resource.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nadmin.overrideLogin({ component: Login })\n```\n\n----------------------------------------\n\nTITLE: Importing AdminJS TypeORM Adapter for Nest.js\nDESCRIPTION: Import statements required for setting up AdminJS with TypeORM in a Nest.js application.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/adapters/typeorm.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as AdminJSTypeorm from '@adminjs/typeorm'\nimport AdminJS from 'adminjs'\n```\n\n----------------------------------------\n\nTITLE: Defining File Entity Interface in TypeScript\nDESCRIPTION: TypeScript interface for a file entity that stores metadata about uploaded files. It includes fields for id, storage key, bucket, mime type, and an optional comment field.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/features/upload.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IFile {\n  id: number;\n  s3Key: string;\n  bucket: string;\n  mime: string;\n  comment: string | null;\n}\n```\n\n----------------------------------------\n\nTITLE: PDF Generator Implementation Using jsPDF in TypeScript\nDESCRIPTION: Core implementation of the PDF generator function that uses jsPDF to create PDF files from record data. It extracts data from record parameters, creates a PDF document, saves it to the file system, and returns the filename.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/faq/pdf-generator.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RecordJSON } from 'adminjs'\nimport { jsPDF } from 'jspdf'\n\nconst pdfGenerator = (record: RecordJSON): string => {\n  const { params } = record\n  const doc = new jsPDF()\n  \n  doc.text(params.orderNum, 10, 10) // example database column called orderNum\n  doc.text(params.shippingAddress, 150, 10) // example database column called shippingAddress\n  \n  const filename = `/${params.id}.pdf`\n  doc.save(`./pdfs${filename}`)\n  \n  return filename\n}\n\nexport default pdfGenerator\n```\n\n----------------------------------------\n\nTITLE: Using useTranslations Hook in Custom Component\nDESCRIPTION: Example of implementing translations in a custom React component using the AdminJS useTranslations hook. Shows how to translate text within a component using the translateComponent function.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/tutorials/custom-component-internationalization.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// ... \nimport { useTranslations } from \"adminjs\"\n// ...\n\nconst CustomComponent = (props) => {\n    const {translateComponent} = useTranslations()\n    return <div> {translateComponent('CustomComponent.textToTranslate')} </div>\n}\n```\n\n----------------------------------------\n\nTITLE: Component Translation Configuration\nDESCRIPTION: Configuration example showing how to add translations for a custom component in the locale options. Demonstrates setting up translations under the components namespace.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/tutorials/custom-component-internationalization.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst options = {\n  // ...\n  locale: {\n    translations: {\n      en: {\n        components: {\n          CustomComponent: {\n            textToTranslate: 'This is text to translate'\n          }\n        }\n      }\n    }\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Input Component in React TSX\nDESCRIPTION: Defines a simple React functional component that will be used as a custom input in AdminJS. This component can be extended with more complex functionality as needed.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/ui-customization/writing-your-own-components.md#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react'\n\n// just some regular React component\nconst MyInputComponent = () => <input />\n\nexport default MyInputComponent\n```\n\n----------------------------------------\n\nTITLE: Configuring Language Detection\nDESCRIPTION: Shows how to enable language detection and constrain available languages in AdminJS.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/tutorials/internationalization-i18n.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlocale: { \n  language: 'pl', \n  availableLanguages: ['en', 'pl'], \n  localeDetection: true, \n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Drawer Display for Record Actions\nDESCRIPTION: Example of configuring a custom record action to display in a side drawer instead of a new page using the showInDrawer option.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/action.md#2025-04-17_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst UserResource = {\n  resource: User,\n  options: {\n    actions: {\n      myCustomAction: {\n        actionType: 'record',\n        component: Components.MyCustomAction, // see \"Writing your own Components\"\n        handler: (request, response, context) => {\n          const { record, currentAdmin } = context\n          return {\n            record: record.toJSON(currentAdmin),\n          }\n        },\n        showInDrawer: true,\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AdminJS Instance with Custom Dashboard in TypeScript\nDESCRIPTION: Shows how to configure an AdminJS instance to use a custom dashboard component. This step is necessary to override the default dashboard with your custom implementation.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/ui-customization/dashboard-customization.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst admin = new AdminJS({\n  dashboard: {\n    component: Components.Dashboard,\n  },\n  componentLoader\n})\n```\n\n----------------------------------------\n\nTITLE: Adding a Tooltip Description to a Property in AdminJS\nDESCRIPTION: This configuration adds a descriptive tooltip to the 'links' property that appears when users hover over the question mark icon next to the field label in forms.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/property.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst UserResource = {\n  resource: User,\n  options: {\n    properties: {\n      links: {\n        description: \"User's Linkedin/Github/social profiles links\",\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Log Entity with TypeORM\nDESCRIPTION: TypeScript implementation of a Log entity using TypeORM. This defines the database structure for storing change logs with decorators for entity mapping.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/features/logger.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseEntity, Column, Entity, PrimaryGeneratedColumn, CreateDateColumn, UpdateDateColumn } from 'typeorm';\n\nexport interface ILog {\n  id: number;\n  action: string;\n  resource: string;\n  userId: string | null;\n  recordId: number;\n  recordTitle: string | null;\n  difference: Record<string, unknown> | null;\n  createdAt: Date;\n  updatedAt?: Date;\n}\n\n@Entity({ name: 'logs' })\nexport class Log extends BaseEntity implements ILog {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @CreateDateColumn({ name: 'created_at' })\n  public createdAt: Date;\n\n  @UpdateDateColumn({ name: 'updated_at' })\n  public updatedAt?: Date;\n\n  @Column({ name: 'record_id', type: 'integer', nullable: false })\n  public recordId: number;\n\n  @Column({ name: 'record_title', type: 'text', nullable: true, default: '' })\n  public recordTitle: string | null;\n\n  @Column({ name: 'difference', type: 'jsonb', nullable: true, default: {} })\n  public difference: Record<string, unknown> | null;\n\n  @Column({ name: 'action', type: 'varchar', length: 128, nullable: false })\n  public action: string;\n\n  @Column({ name: 'resource', type: 'varchar', length: 128, nullable: false })\n  public resource: string;\n\n  @Column({ name: 'user_id', type: 'varchar', nullable: false })\n  public userId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Default Translations\nDESCRIPTION: Example of extending or modifying default translations by adding custom translation objects.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/tutorials/internationalization-i18n.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlocale: { \n  language: 'pl', \n  availableLanguages: ['en', 'pl'], \n  localeDetection: true, \n  translations: { \n    pl: { \n      messages: { \n        welcomeOnBoard_title: 'Nowy tyluł pulpitu', \n      }, \n    }, \n    en: { \n      messages: { \n        welcomeOnBoard_title: 'New dashboard title', \n      }, \n    }, \n  }, \n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Avatar Component in AdminJS Design System\nDESCRIPTION: Example of using the new Avatar component to display a rounded image with fallback content\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/whats-new-in-v7.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Avatar } from \"@adminjs/design-system\"\n\nexport const ExampleAvatar = (props) => {\n  const { avatarUrl, email } = props\n\n  return (\n    <Box>\n      <Avatar src={avatarUrl} alt={email}>\n        {email.charAt(0)}\n      </Avatar>\n    </Box>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Property Visibility\nDESCRIPTION: Shows how to configure property visibility for different actions using isVisible option\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/resource.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst admin = new AdminJS({\n  resources: [{\n    resource: Profile,\n    options: {\n      properties: {\n        bio: {\n          isVisible: {\n            edit: true,\n            show: true,\n            list: false,\n            filter: false,\n          },\n        },\n      },\n    },\n  }],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Enums in AdminJS SQL Resource\nDESCRIPTION: This snippet demonstrates how to manually configure enum values for a field in a SQL table. Since database enums aren't automatically detected as of version 1.0.0, this shows how to define available values in the resource options.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/adapters/sql.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// ...\n  const admin = new AdminJS({\n    resources: [{\n      resource: db.table('users'),\n      options: {\n        properties: {\n          role: {\n            availableValues: [\n              { label: 'Admin', value: 'ADMIN' },\n              { label: 'Client', value: 'CLIENT' },\n            ],\n          },\n        },\n      },\n    }],\n  })\n// ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Password Feature\nDESCRIPTION: Demonstrates how to use the passwords feature for handling password hashing\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/resource.md#2025-04-17_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport passwordsFeature from '@adminjs/passwords'\nimport argon2 from 'argon2'\n\nimport { User } from './user.entity.js'\n\nconst UserResource = {\n  resource: User,\n  features: [passwordsFeature({\n    properties: { encryptedPassword: 'hashedPassword' },\n    hash: argon2.hash,\n  })],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Theme with Component Overrides\nDESCRIPTION: Example showing how to configure a custom theme with component overrides and file paths\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/themes.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport path from 'path';\nimport * as url from 'url';\n\nconst __dirname = url.fileURLToPath(new URL('.', import.meta.url));\n\n// ...\n\nconst myCustomTheme = {\n  id: 'my-custom-theme',\n  name: 'My Custom Theme',\n  overrides: {\n    colors: {\n      primary100: 'teal',\n    },\n  },\n  bundlePath: `${path.join(__dirname, `../themes/my-custom-theme`)}/theme.bundle.js`,\n  stylePath: `${path.join(__dirname, `../themes/my-custom-theme`)}/style.css`,\n}\n\n// *\n```\n\n----------------------------------------\n\nTITLE: Using AdminJS CLI to Create a New Project\nDESCRIPTION: Command to initiate the AdminJS project creation wizard, which guides you through setting up a new AdminJS application interactively.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/getting-started.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ adminjs create\n```\n\n----------------------------------------\n\nTITLE: Installing AdminJS Framework Plugins\nDESCRIPTION: Commands to install AdminJS plugins for different web frameworks including Express, NestJS, Hapi, Koa, and Fastify.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/getting-started.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add @adminjs/express                # for Express server\n$ yarn add @adminjs/nestjs                 # for Nest server\n$ yarn add @adminjs/hapi                   # for Hapi server\n$ yarn add @adminjs/koa                    # for Koa server\n$ yarn add @adminjs/fastify                # for Fastify server\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Provider\nDESCRIPTION: Default authentication configuration in AdminJS config file\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/plugins/adonis.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport authProvider from '../app/admin/auth.js'\n\n// ...\nauth: {\n  enabled: true,\n  provider: authProvider,\n  middlewares: [],\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Edit Record Request Payload in JSON\nDESCRIPTION: Example of the JSON payload to be sent when editing a record. It includes fields like email, firstName, lastName, gender, and isMyFavourite.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/api/edit.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    email: \"client@adminjs.co\",\n    firstName: \"ClientName\",\n    lastName: \"ClientSurname\",\n    gender: \"male\",\n    isMyFavourite: true\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Components with Styled Components in AdminJS\nDESCRIPTION: Demonstrates how to create a custom-styled button by extending the AdminJS design system Button with styled-components. This approach allows for comprehensive CSS customization while maintaining the base functionality.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/ui-customization/writing-your-own-components.md#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Button } from '@adminjs/design-system'\n\nconst MyButton = styled(Button)`\n  background-color: #ccc;\n  color: ${({theme}) => theme.colors.grey100};\n  ...\n`\n```\n\n----------------------------------------\n\nTITLE: Registering AdminJS Prisma Adapter in Nest.js\nDESCRIPTION: Code snippet showing how to register the Prisma adapter with AdminJS in a Nest.js application.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/adapters/prisma.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nAdminJS.registerAdapter({ Database, Resource })\n```\n\n----------------------------------------\n\nTITLE: Simple AdminJS Integration with Koa (TypeScript)\nDESCRIPTION: TypeScript code for setting up a basic AdminJS panel with Koa. It includes additional type definitions and follows the same structure as the JavaScript version.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/plugins/koa.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add -D @types/koa\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport AdminJS from 'adminjs'\nimport AdminJSKoa from '@adminjs/koa'\nimport Koa from 'koa'\n\nconst PORT = 3000\n\nconst start = async () => {\n  const app = new Koa()\n  const admin = new AdminJS({\n    resources: [],\n    rootPath: '/admin',\n  })\n\n  const router = AdminJSKoa.buildRouter(admin, app)\n\n  app\n    .use(router.routes())\n    .use(router.allowedMethods())\n\n   app.listen(PORT, () => {\n     console.log(`AdminJS available at http://localhost:${PORT}${admin.options.rootPath}`)\n   })\n}\n\nstart()\n```\n\n----------------------------------------\n\nTITLE: Installing AdminJS Upload Feature via Yarn\nDESCRIPTION: Command to install the @adminjs/upload feature using Yarn package manager. This feature helps organize files and keep information about them in the database.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/features/upload.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ yarn add @adminjs/upload\n```\n\n----------------------------------------\n\nTITLE: Example Response from AdminJS Delete Endpoint\nDESCRIPTION: This snippet shows the JSON response structure returned when calling the delete endpoint for a user record. The response includes the record data, available actions on the record, and bulk actions that can be performed.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/api/delete.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"record\":{\n      \"params\":{\n         \"_id\":\"63d3b2c982bf27f5606e44eb\",\n         \"firstName\":\"Admin Name\",\n         \"lastName\":\"Admin Surname\",\n         \"gender\":\"male\",\n         \"email\":\"admin@adminjs.com\",\n         \"isMyFavourite\":true,\n         \"__v\":0\n      },\n      \"populated\":{\n         \n      },\n      \"baseError\":null,\n      \"errors\":{\n         \n      },\n      \"id\":\"63d3b2c982bf27f5606e44eb\",\n      \"title\":\"admin@adminjs.com\",\n      \"recordActions\":[\n         {\n            \"name\":\"show\",\n            \"actionType\":\"record\",\n            \"icon\":\"Screen\",\n            \"label\":\"Show\",\n            \"resourceId\":\"User\",\n            \"guard\":\"\",\n            \"showFilter\":false,\n            \"showResourceActions\":true,\n            \"showInDrawer\":false,\n            \"hideActionHeader\":false,\n            \"containerWidth\":1,\n            \"layout\":null,\n            \"variant\":\"default\",\n            \"parent\":null,\n            \"hasHandler\":true,\n            \"custom\":{\n               \n            }\n         },\n         {\n            \"name\":\"edit\",\n            \"actionType\":\"record\",\n            \"icon\":\"Edit\",\n            \"label\":\"Edit\",\n            \"resourceId\":\"User\",\n            \"guard\":\"\",\n            \"showFilter\":false,\n            \"showResourceActions\":true,\n            \"showInDrawer\":false,\n            \"hideActionHeader\":false,\n            \"containerWidth\":1,\n            \"layout\":null,\n            \"variant\":\"default\",\n            \"parent\":null,\n            \"hasHandler\":true,\n            \"custom\":{\n               \n            }\n         },\n         {\n            \"name\":\"delete\",\n            \"actionType\":\"record\",\n            \"icon\":\"TrashCan\",\n            \"label\":\"Delete\",\n            \"resourceId\":\"User\",\n            \"guard\":\"Do you really want to remove this item?\",\n            \"showFilter\":false,\n            \"showResourceActions\":true,\n            \"component\":false,\n            \"showInDrawer\":false,\n            \"hideActionHeader\":false,\n            \"containerWidth\":1,\n            \"layout\":null,\n            \"variant\":\"danger\",\n            \"parent\":null,\n            \"hasHandler\":true,\n            \"custom\":{\n               \n            }\n         }\n      ],\n      \"bulkActions\":[\n         {\n            \"name\":\"bulkDelete\",\n            \"actionType\":\"bulk\",\n            \"icon\":\"Delete\",\n            \"label\":\"Delete all\",\n            \"resourceId\":\"User\",\n            \"guard\":\"\",\n            \"showFilter\":false,\n            \"showResourceActions\":true,\n            \"showInDrawer\":true,\n            \"hideActionHeader\":false,\n            \"containerWidth\":\"500px\",\n            \"layout\":null,\n            \"variant\":\"danger\",\n            \"parent\":null,\n            \"hasHandler\":true,\n            \"custom\":{\n               \n            }\n         }\n      ]\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Translation Keys for Property Descriptions in AdminJS\nDESCRIPTION: This snippet shows how to use a translation key instead of a hardcoded string for a property description, allowing for localization of the tooltip text.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/property.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nlinks: {\n  description: \"userLinksHint\",\n},\n```\n\n----------------------------------------\n\nTITLE: Fetching Movie Data in AdminJS Dashboard Handler\nDESCRIPTION: Implements a dashboard handler to fetch movie data from the database, filtering for movies released in 2020 and sorting by year in descending order.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/faq/charts.md#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Filter } from 'adminjs'\n\nexport const dashboardHandler = async (request, response, context) => {\n  // finding resource called movies\n  const resource = context._admin.findResource('movies')\n  // creating new filter, so that we can see only movies released in 2020\n  const filter = new Filter({}, resource)\n  // finding all records that match provided filter\n  const resourceData = await resource.find(filter, { sort: { sortBy: 'year', direction: 'desc' } }, context)\n  \n  const data = resourceData.map((item) => item.toJSON(context.currentAdmin))\n  \n  return data\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up ComponentLoader in TypeScript\nDESCRIPTION: Creates a ComponentLoader instance to register custom components for use in AdminJS. This establishes the foundation for implementing custom UI elements throughout the application.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/ui-customization/writing-your-own-components.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ComponentLoader } from 'adminjs'\n\nconst componentLoader = new ComponentLoader()\n\nconst Components = {\n    MyInput: componentLoader.add('MyInput', './my-input'),\n    // other custom components\n}\n\nexport { componentLoader, Components }\n```\n\n----------------------------------------\n\nTITLE: Serving Static Assets in Express\nDESCRIPTION: Example of serving bundled AdminJS assets using Express static middleware.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/migration-guide-v7.md#2025-04-17_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\napp.use(express.static(path.join(process.cwd(), 'public')));\n```\n\n----------------------------------------\n\nTITLE: Installing AdminJS CLI Globally with NPM\nDESCRIPTION: Command to install the AdminJS CLI tool globally using NPM, which provides the 'adminjs create' command for quickly setting up an AdminJS application.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/getting-started.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i -g @adminjs/cli\n```\n\n----------------------------------------\n\nTITLE: Configuring Filter Button Visibility for Actions\nDESCRIPTION: Demonstrates how to hide the filter button for the list action. The showFilter option can be used to control filter visibility for both default and custom resource actions.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/action.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst UserResource = {\n  resource: User,\n  options: {\n    actions: {\n      list: {\n        showFilter: false,\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: User Entity Model Definition in TypeORM\nDESCRIPTION: TypeORM entity class defining the User model with id, email, role, and password fields used for authentication and authorization.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/tutorials/adding-role-based-access-control.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity({ name: 'users' })\nclass User extends BaseEntity {\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @Column()\n  public email!: string;\n\n  @Column()\n  public role!: string;\n\n  @Column()\n  public password!: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Tabs Component in AdminJS Design System\nDESCRIPTION: Demonstration of the new Tabs component for content organization with state management\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/whats-new-in-v7.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Tab, Tabs, Box } from '@adminjs/design-system'\nimport React, { useState } from 'react'\n\nexport const ExampleTabs = () => {\n  const [selectedTab, setSelectedTab] = useState('first')\n\n  return (\n    <Tabs currentTab={selectedTab} onChange={setSelectedTab}>\n      <Tab id=\"first\" label=\"First tab\">\n        First\n      </Tab>\n      <Tab id=\"second\" label=\"Second tab\">\n        <Box color=\"primary100\">Second</Box>\n      </Tab>\n      <Tab id=\"third\" label=\"Third tab\">\n        Third\n      </Tab>\n    </Tabs>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ComponentLoader for Custom AdminJS Dashboard in TypeScript\nDESCRIPTION: Demonstrates how to create a ComponentLoader and add a custom Dashboard component to it. This is a prerequisite for configuring AdminJS to use the custom dashboard.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/ui-customization/dashboard-customization.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ComponentLoader } from 'adminjs'\n\nconst componentLoader = new ComponentLoader()\n\nconst Components = {\n  Dashboard: componentLoader.add('Dashboard', './dashboard'),\n  // other custom components\n}\n```\n\n----------------------------------------\n\nTITLE: Installing AdminJS Core Package\nDESCRIPTION: Command to install the main AdminJS package, which is the foundation of any AdminJS application.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/getting-started.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add adminjs\n```\n\n----------------------------------------\n\nTITLE: Installing AdminJS CLI Globally with Yarn\nDESCRIPTION: Command to install the AdminJS CLI tool globally using Yarn, providing access to the AdminJS project creation utility.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/getting-started.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn global add @adminjs/cli\n```\n\n----------------------------------------\n\nTITLE: Installing AdminJS Cloud CLI with Yarn\nDESCRIPTION: Command to globally install the AdminJS Cloud CLI tool using Yarn package manager.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/deployment/creating-deploying-the-application-using-cli.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn global add @adminjs/cloud-cli\n```\n\n----------------------------------------\n\nTITLE: Localization Configuration in AdminJS v7\nDESCRIPTION: Demonstrates the new localization configuration format with support for multiple languages and detection options.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/migration-guide-v7.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlocale: { \n  language: 'pl', \n  availableLanguages: ['en', 'pl'], \n  localeDetection: true, \n  translations: { \n    pl: { \n      messages: { \n        welcomeOnBoard_title: 'Nowy tytuł pulpitu', \n      }, \n    }, \n    en: { \n      messages: { \n        welcomeOnBoard_title: 'New dashboard title', \n      }, \n    }, \n  }, \n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Component Loader for PDF Generator in TypeScript\nDESCRIPTION: Sets up a ComponentLoader instance and defines a Components object that holds the custom PDF generator component. This is a necessary first step for adding custom components to AdminJS.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/faq/pdf-generator.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst componentLoader = new ComponentLoader()\n\nconst Components = {\n    PDFGenerator: componentLoader.add('GeneratePDF', './pdfgenerator.component')\n}\n```\n\n----------------------------------------\n\nTITLE: Importing AdminJS Mongoose Adapter in Nest.js\nDESCRIPTION: Shows how to import the necessary AdminJS and Mongoose adapter modules in a Nest.js application module file. This is the first step for Nest.js integration.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/adapters/mongoose.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as AdminJSMongoose from '@adminjs/mongoose'\nimport AdminJS from 'adminjs'\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic AdminJS Translations\nDESCRIPTION: Shows how to enable and configure basic translations in AdminJS by importing locales and setting up language options.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/tutorials/internationalization-i18n.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { locales as AdminJSLocales } from 'adminjs'\n// ...\nconst options = { \n  locale: { \n    language: 'pl', // default language of application (also fallback)\n    availableLanguages: Object.keys(AdminJSLocales), \n  }\n}\n// ...\nconst adminJs = new AdminJS(options)\n```\n\n----------------------------------------\n\nTITLE: Installing and Running the AdminJS Leaflet Example Application\nDESCRIPTION: Bash commands to clone the adminjs-leaflet repository, install dependencies, and run the example application. This demonstrates the setup process for testing the leaflet features in a development environment.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/features/leaflet-maps.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/SoftwareBrothers/adminjs-leaflet.git\n$ cd adminjs-leaflet\n$ yarn install\n$ yarn build\n$ cd example-app\n$ yarn install\n$ docker-compose up -d\n$ yarn start\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Base Model with Timestamps in TypeScript\nDESCRIPTION: Base model class extending Objection's Model with timestamp handling and custom validator configuration. Includes hooks for automatically setting createdAt and updatedAt timestamps.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/adapters/objection.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport addFormats from 'ajv-formats';\nimport { AjvValidator, Model } from 'objection';\n\nexport abstract class BaseModel extends Model {\n  createdAt: string;\n\n  updatedAt: string;\n\n  static createValidator(): AjvValidator {\n    return new AjvValidator({\n      onCreateAjv: (ajv) => {\n        addFormats(ajv);\n      },\n      options: {\n        allErrors: true,\n        validateSchema: false,\n        ownProperties: true,\n      },\n    });\n  }\n\n  $beforeInsert(): void {\n    this.createdAt = new Date().toISOString();\n  }\n\n  $beforeUpdate(): void {\n    this.updatedAt = new Date().toISOString();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Record Details with AdminJS Show API Response Example\nDESCRIPTION: Example JSON response from the AdminJS Show endpoint. The response includes the complete record data with params, id, title, and available actions (record-specific and bulk actions) that can be performed on this record based on user permissions.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/api/show.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"record\":{\n      \"params\":{\n         \"_id\":\"63d3b2c982bf27f5606e44eb\",\n         \"firstName\":\"Admin Name\",\n         \"lastName\":\"Admin Surname\",\n         \"gender\":\"male\",\n         \"email\":\"admin@adminjs.com\",\n         \"isMyFavourite\":true,\n         \"__v\":0\n      },\n      \"populated\":{\n         \n      },\n      \"baseError\":null,\n      \"errors\":{\n         \n      },\n      \"id\":\"63d3b2c982bf27f5606e44eb\",\n      \"title\":\"admin@adminjs.com\",\n      \"recordActions\":[\n         {\n            \"name\":\"show\",\n            \"actionType\":\"record\",\n            \"icon\":\"Screen\",\n            \"label\":\"Show\",\n            \"resourceId\":\"User\",\n            \"guard\":\"\",\n            \"showFilter\":false,\n            \"showResourceActions\":true,\n            \"showInDrawer\":false,\n            \"hideActionHeader\":false,\n            \"containerWidth\":1,\n            \"layout\":null,\n            \"variant\":\"default\",\n            \"parent\":null,\n            \"hasHandler\":true,\n            \"custom\":{\n               \n            }\n         },\n         {\n            \"name\":\"edit\",\n            \"actionType\":\"record\",\n            \"icon\":\"Edit\",\n            \"label\":\"Edit\",\n            \"resourceId\":\"User\",\n            \"guard\":\"\",\n            \"showFilter\":false,\n            \"showResourceActions\":true,\n            \"showInDrawer\":false,\n            \"hideActionHeader\":false,\n            \"containerWidth\":1,\n            \"layout\":null,\n            \"variant\":\"default\",\n            \"parent\":null,\n            \"hasHandler\":true,\n            \"custom\":{\n               \n            }\n         },\n         {\n            \"name\":\"delete\",\n            \"actionType\":\"record\",\n            \"icon\":\"TrashCan\",\n            \"label\":\"Delete\",\n            \"resourceId\":\"User\",\n            \"guard\":\"Do you really want to remove this item?\",\n            \"showFilter\":false,\n            \"showResourceActions\":true,\n            \"component\":false,\n            \"showInDrawer\":false,\n            \"hideActionHeader\":false,\n            \"containerWidth\":1,\n            \"layout\":null,\n            \"variant\":\"danger\",\n            \"parent\":null,\n            \"hasHandler\":true,\n            \"custom\":{\n               \n            }\n         }\n      ],\n      \"bulkActions\":[\n         {\n            \"name\":\"bulkDelete\",\n            \"actionType\":\"bulk\",\n            \"icon\":\"Delete\",\n            \"label\":\"Delete all\",\n            \"resourceId\":\"User\",\n            \"guard\":\"\",\n            \"showFilter\":false,\n            \"showResourceActions\":true,\n            \"showInDrawer\":true,\n            \"hideActionHeader\":false,\n            \"containerWidth\":\"500px\",\n            \"layout\":null,\n            \"variant\":\"danger\",\n            \"parent\":null,\n            \"hasHandler\":true,\n            \"custom\":{\n               \n            }\n         }\n      ]\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering MikroORM Adapter for AdminJS in Nest.js\nDESCRIPTION: Code snippet demonstrating how to register the MikroORM adapter with AdminJS in a Nest.js application. This registration allows AdminJS to work with MikroORM entities.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/adapters/mikroorm.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nAdminJS.registerAdapter({\n  Resource: AdminJSMikroORM.Resource,\n  Database: AdminJSMikroORM.Database,\n})\n```\n\n----------------------------------------\n\nTITLE: Resource Translation Configuration\nDESCRIPTION: Examples of how to configure translations for resources and messages\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/resource.md#2025-04-17_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst admin = new AdminJS({\n  resources: [User],\n  locale: {\n    language: 'en',\n    translations: {\n      resources: {\n        User: {\n          messages: {\n            noRecordsInResource: 'There are no users to display'\n          },\n        },\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Legacy Translation Configuration Format\nDESCRIPTION: Example of the previous translation configuration format in AdminJS before version 7.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/migration-guide-v7.md#2025-04-17_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nlocale: {\n  language: 'pl',\n  translations: {\n    labels: {\n      dashboard: 'Strona główna',\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Registering AdminJS Sequelize Adapter in Nest.js\nDESCRIPTION: Code for importing the AdminJS Sequelize adapter in a Nest.js application. This is the first step in setting up AdminJS with Sequelize in a Nest.js environment.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/adapters/sequelize.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as AdminJSSequelize from '@adminjs/sequelize'\nimport AdminJS from 'adminjs'\n```\n\n----------------------------------------\n\nTITLE: Receiving Edit Record Response in JSON\nDESCRIPTION: Example of the JSON response received after successfully editing a record. It includes a redirectUrl, notice message, and detailed information about the updated record including its parameters, actions, and bulk actions.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/api/edit.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"redirectUrl\":\"/admin/resources/User\",\n   \"notice\":{\n      \"message\":\"Successfully updated given record\",\n      \"type\":\"success\"\n   },\n   \"record\":{\n      \"params\":{\n         \"_id\":\"63d3b2c982bf27f5606e44eb\",\n         \"firstName\":\"Admin Name\",\n         \"lastName\":\"Admin Surname\",\n         \"gender\":\"male\",\n         \"email\":\"admin1@adminjs.com\",\n         \"isMyFavourite\":true,\n         \"__v\":0\n      },\n      \"populated\":{\n         \n      },\n      \"baseError\":null,\n      \"errors\":{\n         \n      },\n      \"id\":\"63d3b2c982bf27f5606e44eb\",\n      \"title\":\"admin1@adminjs.com\",\n      \"recordActions\":[\n         {\n            \"name\":\"show\",\n            \"actionType\":\"record\",\n            \"icon\":\"Screen\",\n            \"label\":\"Show\",\n            \"resourceId\":\"User\",\n            \"guard\":\"\",\n            \"showFilter\":false,\n            \"showResourceActions\":true,\n            \"showInDrawer\":false,\n            \"hideActionHeader\":false,\n            \"containerWidth\":1,\n            \"layout\":null,\n            \"variant\":\"default\",\n            \"parent\":null,\n            \"hasHandler\":true,\n            \"custom\":{\n               \n            }\n         },\n         {\n            \"name\":\"edit\",\n            \"actionType\":\"record\",\n            \"icon\":\"Edit\",\n            \"label\":\"Edit\",\n            \"resourceId\":\"User\",\n            \"guard\":\"\",\n            \"showFilter\":false,\n            \"showResourceActions\":true,\n            \"showInDrawer\":false,\n            \"hideActionHeader\":false,\n            \"containerWidth\":1,\n            \"layout\":null,\n            \"variant\":\"default\",\n            \"parent\":null,\n            \"hasHandler\":true,\n            \"custom\":{\n               \n            }\n         },\n         {\n            \"name\":\"delete\",\n            \"actionType\":\"record\",\n            \"icon\":\"TrashCan\",\n            \"label\":\"Delete\",\n            \"resourceId\":\"User\",\n            \"guard\":\"Do you really want to remove this item?\",\n            \"showFilter\":false,\n            \"showResourceActions\":true,\n            \"component\":false,\n            \"showInDrawer\":false,\n            \"hideActionHeader\":false,\n            \"containerWidth\":1,\n            \"layout\":null,\n            \"variant\":\"danger\",\n            \"parent\":null,\n            \"hasHandler\":true,\n            \"custom\":{\n               \n            }\n         }\n      ],\n      \"bulkActions\":[\n         {\n            \"name\":\"bulkDelete\",\n            \"actionType\":\"bulk\",\n            \"icon\":\"Delete\",\n            \"label\":\"Delete all\",\n            \"resourceId\":\"User\",\n            \"guard\":\"\",\n            \"showFilter\":false,\n            \"showResourceActions\":true,\n            \"showInDrawer\":true,\n            \"hideActionHeader\":false,\n            \"containerWidth\":\"500px\",\n            \"layout\":null,\n            \"variant\":\"danger\",\n            \"parent\":null,\n            \"hasHandler\":true,\n            \"custom\":{\n               \n            }\n         }\n      ]\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Component Translations in AdminJS\nDESCRIPTION: Configuration example showing how to set up translations for custom components in the AdminJS locale config.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/migration-guide-v7.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst options = {\n  // ...\n  locale: {\n    translations: {\n      en: {\n        components: {\n          CustomComponent: {\n            textToTranslate: 'This is text to translate'\n          },\n        }\n      }\n    }\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Relations Feature Configuration Options\nDESCRIPTION: TypeScript interface showing all configuration options for the owningRelationSettingsFeature, including relation types, junction tables, and target resources.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/features/relations.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nenum RelationType {\n  OneToMany = 'one-to-many',\n  ManyToMany = 'many-to-many',\n}\n\ntype RelationsFeatureConfig = {\n  /* Your ComponentLoader instance, ideally you will create it in a separate file\n  and import where it's needed. Documentation: https://docs.adminjs.co/ui-customization/writing-your-own-components */\n  componentLoader: ComponentLoader;\n  /* Your license key */\n  licenseKey: string;\n  /* A configuration object for relations that will be managable in a given resource. */\n  relations: {\n    /* A name of a relation. It will be used as a name in tabbed table (see screenshots above) */\n    [resourceId: string]: {\n      /* A relation type which can be either `one-to-many` or `many-to-many` */\n      type: RelationType;\n      /* A junction resource/table configuration. It is only required for `many-to-many` */\n      junction?: {\n        /* A \"joinKey\" inside junction table. If configuring for \"Team\", it can be \"teamId\". */\n        joinKey: string;\n        /* An \"inverseJoinKey\" inside junction table. If \"Team\" has a M:N relation with \"Person\", it can be \"personId\" */\n        inverseJoinKey: string;\n        /* A resource ID of the junction table, for example: \"TeamMember\" */\n        throughResourceId: string;\n      };\n      /* A target resource/table configuration. A target is a resource which is listed in the table. */\n      target: {\n        /* A \"resourceId\" of the target. Example: \"Person\" */\n        resourceId: string;\n        /* A \"joinKey\" of the target. Example: \"organizationId\" */\n        joinKey?: string;\n      };\n    }\n  };\n  /* An optional field which allows you to specify a different property key which will be used\n  to display relations table. By default it adds `relations` to details view of your resource. */\n  propertyKey?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript Types for Express\nDESCRIPTION: Command to install TypeScript type definitions for Express when implementing AdminJS with TypeScript.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/plugins/express.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add -D @types/express\n```\n\n----------------------------------------\n\nTITLE: Installing AdonisJS Application\nDESCRIPTION: Command to create a new AdonisJS application using the slim template\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/plugins/adonis.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm init adonisjs@latest -- -K=slim\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Sorting\nDESCRIPTION: Shows how to set default sorting options for a resource\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/resource.md#2025-04-17_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst UserResource = {\n  resource: User,\n  options: {\n    sort: {\n      sortBy: 'updatedAt',\n      direction: 'desc',\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Example Response from AdminJS Bulk Delete API in JSON\nDESCRIPTION: This JSON example shows the response structure when deleting multiple user records via the bulk delete endpoint. The response includes details about the deleted records, available actions, a success notice, and a redirect URL.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/api/bulk-delete.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"records\":[\n      {\n         \"params\":{\n            \"_id\":\"63d3af2ab1b453f9303c81d0\",\n            \"firstName\":\"Warren\",\n            \"lastName\":\"Renner\",\n            \"gender\":\"female\",\n            \"email\":\"Naomi90@gmail.com\",\n            \"isMyFavourite\":true,\n            \"__v\":0\n         },\n         \"populated\":{\n            \n         },\n         \"baseError\":null,\n         \"errors\":{\n            \n         },\n         \"id\":\"63d3af2ab1b453f9303c81d0\",\n         \"title\":\"Naomi90@gmail.com\",\n         \"recordActions\":[\n            {\n               \"name\":\"show\",\n               \"actionType\":\"record\",\n               \"icon\":\"Screen\",\n               \"label\":\"Show\",\n               \"resourceId\":\"User\",\n               \"guard\":\"\",\n               \"showFilter\":false,\n               \"showResourceActions\":true,\n               \"showInDrawer\":false,\n               \"hideActionHeader\":false,\n               \"containerWidth\":1,\n               \"layout\":null,\n               \"variant\":\"default\",\n               \"parent\":null,\n               \"hasHandler\":true,\n               \"custom\":{\n                  \n               }\n            },\n            {\n               \"name\":\"edit\",\n               \"actionType\":\"record\",\n               \"icon\":\"Edit\",\n               \"label\":\"Edit\",\n               \"resourceId\":\"User\",\n               \"guard\":\"\",\n               \"showFilter\":false,\n               \"showResourceActions\":true,\n               \"showInDrawer\":false,\n               \"hideActionHeader\":false,\n               \"containerWidth\":1,\n               \"layout\":null,\n               \"variant\":\"default\",\n               \"parent\":null,\n               \"hasHandler\":true,\n               \"custom\":{\n                  \n               }\n            },\n            {\n               \"name\":\"delete\",\n               \"actionType\":\"record\",\n               \"icon\":\"TrashCan\",\n               \"label\":\"Delete\",\n               \"resourceId\":\"User\",\n               \"guard\":\"Do you really want to remove this item?\",\n               \"showFilter\":false,\n               \"showResourceActions\":true,\n               \"component\":false,\n               \"showInDrawer\":false,\n               \"hideActionHeader\":false,\n               \"containerWidth\":1,\n               \"layout\":null,\n               \"variant\":\"danger\",\n               \"parent\":null,\n               \"hasHandler\":true,\n               \"custom\":{\n                  \n               }\n            }\n         ],\n         \"bulkActions\":[\n            {\n               \"name\":\"bulkDelete\",\n               \"actionType\":\"bulk\",\n               \"icon\":\"Delete\",\n               \"label\":\"Delete all\",\n               \"resourceId\":\"User\",\n               \"guard\":\"\",\n               \"showFilter\":false,\n               \"showResourceActions\":true,\n               \"showInDrawer\":true,\n               \"hideActionHeader\":false,\n               \"containerWidth\":\"500px\",\n               \"layout\":null,\n               \"variant\":\"danger\",\n               \"parent\":null,\n               \"hasHandler\":true,\n               \"custom\":{\n                  \n               }\n            }\n         ]\n      },\n      {\n         \"params\":{\n            \"_id\":\"63d3af2ab1b453f9303c81d1\",\n            \"firstName\":\"Jovanny\",\n            \"lastName\":\"Moore\",\n            \"gender\":\"male\",\n            \"email\":\"Vanessa53@hotmail.com\",\n            \"isMyFavourite\":false,\n            \"__v\":0\n         },\n         \"populated\":{\n            \n         },\n         \"baseError\":null,\n         \"errors\":{\n            \n         },\n         \"id\":\"63d3af2ab1b453f9303c81d1\",\n         \"title\":\"Vanessa53@hotmail.com\",\n         \"recordActions\":[\n            {\n               \"name\":\"show\",\n               \"actionType\":\"record\",\n               \"icon\":\"Screen\",\n               \"label\":\"Show\",\n               \"resourceId\":\"User\",\n               \"guard\":\"\",\n               \"showFilter\":false,\n               \"showResourceActions\":true,\n               \"showInDrawer\":false,\n               \"hideActionHeader\":false,\n               \"containerWidth\":1,\n               \"layout\":null,\n               \"variant\":\"default\",\n               \"parent\":null,\n               \"hasHandler\":true,\n               \"custom\":{\n                  \n               }\n            },\n            {\n               \"name\":\"edit\",\n               \"actionType\":\"record\",\n               \"icon\":\"Edit\",\n               \"label\":\"Edit\",\n               \"resourceId\":\"User\",\n               \"guard\":\"\",\n               \"showFilter\":false,\n               \"showResourceActions\":true,\n               \"showInDrawer\":false,\n               \"hideActionHeader\":false,\n               \"containerWidth\":1,\n               \"layout\":null,\n               \"variant\":\"default\",\n               \"parent\":null,\n               \"hasHandler\":true,\n               \"custom\":{\n                  \n               }\n            },\n            {\n               \"name\":\"delete\",\n               \"actionType\":\"record\",\n               \"icon\":\"TrashCan\",\n               \"label\":\"Delete\",\n               \"resourceId\":\"User\",\n               \"guard\":\"Do you really want to remove this item?\",\n               \"showFilter\":false,\n               \"showResourceActions\":true,\n               \"component\":false,\n               \"showInDrawer\":false,\n               \"hideActionHeader\":false,\n               \"containerWidth\":1,\n               \"layout\":null,\n               \"variant\":\"danger\",\n               \"parent\":null,\n               \"hasHandler\":true,\n               \"custom\":{\n                  \n               }\n            }\n         ],\n         \"bulkActions\":[\n            {\n               \"name\":\"bulkDelete\",\n               \"actionType\":\"bulk\",\n               \"icon\":\"Delete\",\n               \"label\":\"Delete all\",\n               \"resourceId\":\"User\",\n               \"guard\":\"\",\n               \"showFilter\":false,\n               \"showResourceActions\":true,\n               \"showInDrawer\":true,\n               \"hideActionHeader\":false,\n               \"containerWidth\":\"500px\",\n               \"layout\":null,\n               \"variant\":\"danger\",\n               \"parent\":null,\n               \"hasHandler\":true,\n               \"custom\":{\n                  \n               }\n            }\n         ]\n      }\n   ],\n   \"notice\":{\n      \"message\":\"successfully removed 2 record\",\n      \"type\":\"success\"\n   },\n   \"redirectUrl\":\"/admin/resources/User\"\n}\n```\n\n----------------------------------------\n\nTITLE: Restricting Action Access with isAccessible Configuration\nDESCRIPTION: Simple example of using the isAccessible property to completely block access to an action in AdminJS.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/tutorials/adding-role-based-access-control.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst someResource: ResourceWithOptions = {\n  resource: Something,\n  options: {\n    actions: {\n      new: {\n        isAccessible: false,\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Basic AdminJS Hapi Integration - JavaScript\nDESCRIPTION: Simple setup of AdminJS with Hapi server in JavaScript, configuring basic options like port, resources, and root path.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/plugins/hapi.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport AdminJSHapi from '@adminjs/hapi'\nimport Hapi from '@hapi/hapi'\n\nconst PORT = 3000\n\nconst start = async () => {\n  const server = Hapi.server({ port: PORT })\n\n  const adminOptions: ExtendedAdminJSOptions = {\n    resources: [],\n    rootPath: '/admin',\n    auth: {\n      isSecure: process.env.NODE_ENV === 'production',\n    },\n    registerInert: true,\n  }\n\n  await server.register({\n    plugin: AdminJSHapi,\n    options: adminOptions,\n  })\n\n  await server.start();\n  console.log(`AdminJS available at ${server.info.uri}${adminOptions.rootPath}`);\n}\n\nstart()\n```\n\n----------------------------------------\n\nTITLE: Example AdminJS Cloud Configuration File\nDESCRIPTION: Sample configuration file for AdminJS Cloud showing which files and directories to include in deployment.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/deployment/creating-deploying-the-application-using-cli.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"include\": [\n    \"public\",\n    \"dist\",\n    \"src\",\n    \".env\",\n    \"package.json\",\n    \"tsconfig.json\",\n    \"yarn.lock\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing AdminJS Database Adapters\nDESCRIPTION: Commands to install AdminJS adapters for various ORMs and ODMs including TypeORM, Sequelize, Mongoose, Prisma, MikroORM, Objection, and raw SQL.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/getting-started.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add @adminjs/typeorm                # for TypeORM\n$ yarn add @adminjs/sequelize              # for Sequelize\n$ yarn add @adminjs/mongoose               # for Mongoose\n$ yarn add @adminjs/prisma                 # for Prisma\n$ yarn add @adminjs/mikroorm               # for MikroORM\n$ yarn add @adminjs/objection              # for Objection\n$ yarn add @adminjs/sql                    # for raw SQL, currently supports only Postgres\n```\n\n----------------------------------------\n\nTITLE: Customizing Resource Navigation Link\nDESCRIPTION: Shows how to customize the default navigation link for a resource with filtering\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/resource.md#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst UserResource = {\n  resource: User,\n  options: {\n    id: 'users',\n    href: ({ h, resource }) => {\n      return h.resourceActionUrl({\n        resourceId: resource.decorate().id(),\n        actionName: 'list',\n        params: {\n          'filters.status': 'active',\n        },\n      })\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Updated Design System Button Implementation\nDESCRIPTION: Shows the changes in button implementation using the new variant and color props system in the Design System.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/migration-guide-v7.md#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Button variant=\"primary\"> \n  Click me\n</Button>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Button variant=\"contained\" color=\"primary\">\n  Click me\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Filtering Records JSON Response Example in AdminJS\nDESCRIPTION: Example JSON response from the List API endpoint showing the structure of data returned when listing Admin resources. The response includes metadata about pagination and sorting, along with the record data and available actions for each record.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/api/list.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"meta\":{\n      \"total\":1,\n      \"perPage\":10,\n      \"page\":1,\n      \"direction\":\"desc\",\n      \"sortBy\":\"_id\"\n   },\n   \"records\":[\n      {\n         \"params\":{\n            \"_id\":\"62d50386c2d13cd087a10e3a\",\n            \"email\":\"admin@example.com\",\n            \"password\":\"$argon2id$v=19$m=4096,t=3,p=1$PFUAZpgSO1XwfnksafaV2Q$+vJ1hrmDAY70Us5iz5bNttDRCOAxLGIAOFaol0KrcjI\",\n            \"__v\":0\n         },\n         \"populated\":{\n            \n         },\n         \"baseError\":null,\n         \"errors\":{\n            \n         },\n         \"id\":\"62d50386c2d13cd087a10e3a\",\n         \"title\":\"admin@example.com\",\n         \"recordActions\":[\n            {\n               \"name\":\"show\",\n               \"actionType\":\"record\",\n               \"icon\":\"Screen\",\n               \"label\":\"Show\",\n               \"resourceId\":\"Admin\",\n               \"guard\":\"\",\n               \"showFilter\":false,\n               \"showResourceActions\":true,\n               \"showInDrawer\":false,\n               \"hideActionHeader\":false,\n               \"containerWidth\":1,\n               \"layout\":null,\n               \"variant\":\"default\",\n               \"parent\":null,\n               \"hasHandler\":true,\n               \"custom\":{\n                  \n               }\n            }\n         ],\n         \"bulkActions\":[\n            \n         ]\n      }\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Legacy Documentation Warning in Markdown\nDESCRIPTION: Markdown snippet showing a warning hint block with a link to the legacy AdminJS documentation URL.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/api-reference.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% hint style=\"warning\" %}\nLegacy (outdated) documentation is available here:\\\n[https://adminjs-docs.web.app](https://adminjs-docs.web.app)\n{% endhint %}\n```\n\n----------------------------------------\n\nTITLE: Initializing Firebase App on Server\nDESCRIPTION: Code snippet to initialize Firebase app on the server side for token verification.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/authentication/firebaseauthprovider.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { initializeApp } from 'firebase-admin/app';\n\n// ...\n\nconst firebaseApp = initializeApp(firebaseConfig);\n```\n\n----------------------------------------\n\nTITLE: Using Design System Components in Custom AdminJS Components\nDESCRIPTION: Shows how to import and use components from the AdminJS design system in custom components. This example uses the Label component to create styled text.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/ui-customization/writing-your-own-components.md#2025-04-17_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Label } from '@adminjs/design-system'\n\nconst YourComponent (props) => {(\n  <Label>Some styled text<Label>\n)}\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Navigation\nDESCRIPTION: Example of how to nest a resource under a collapsible navigation menu\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/resource.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst usersNavigation = {\n  name: 'Users',\n  icon: 'User',\n}\n\nconst admin = new AdminJS({\n  resources: [{\n    resource: Profile,\n    options: {\n      navigation: usersNavigation,\n    },\n  }],\n})\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript Types for Authentication Dependencies\nDESCRIPTION: Commands to install TypeScript type definitions for connect-pg-simple, express-session, and express when implementing authenticated AdminJS with TypeScript.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/plugins/express.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add connect-pg-simple\n$ yarn add -D @types/connect-pg-simple @types/express-session @types/express\n```\n\n----------------------------------------\n\nTITLE: Configuring FirebaseAuthProvider with License Key\nDESCRIPTION: Example of initializing FirebaseAuthProvider with a license key, which is required for this premium feature.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/authentication/firebaseauthprovider.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nnew FirebaseAuthProvider({\n  licenseKey: process.env.LICENSE_KEY,\n  // the rest of the config\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring License Key for Relations Feature\nDESCRIPTION: Example of providing the license key to the owningRelationSettingsFeature configuration. The license key is required for premium features.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/features/relations.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nowningRelationSettingsFeature({\n  licenseKey: process.env.LICENSE_KEY,\n  // the rest of the config\n})\n```\n\n----------------------------------------\n\nTITLE: Parsing Movie Data for Recharts in TypeScript\nDESCRIPTION: Transforms the raw movie data into the format required by Recharts, calculating average scores for each year.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/faq/charts.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// ...\n  const years = Array.from(new Set(data?.map((item) => item.params.year))) // Set leaves only unique values, but we need an Array\n  const chartdata = years.map(year => { // for every year that we've got\n    const scoreArr = data?.filter(filterItem => filterItem.params.year === year) // find movies from a certain year\n                          .map(mapItem => mapItem.params.score) // create an array of all the scores from that year\n    return (\n      {\n        name: year,\n        score: scoreArr.reduce((a, b) => a + b, 0) / scoreArr.length // create average valuefrom the score array\n      })\n  })\n  return chartdata\n```\n\n----------------------------------------\n\nTITLE: Theme Configuration Type Definition\nDESCRIPTION: TypeScript type definition showing the structure of a theme configuration object\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/themes.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype ThemeConfig = {\n  id: string,                          # Theme ID, example: \"my-custom-theme\"\n  name: string,                        # Example: \"My Custom Theme\"\n  overrides: Partial<ThemeOverride>;   # \"styled-system\" theme configuration\n  bundlePath?: string;                 # Path to your theme's \"theme.bundle.js\" file\n  stylePath?: string;                  # Path to your theme's \"style.css\" file\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Firebase UI for Authentication\nDESCRIPTION: Example configuration for Firebase UI, specifying authentication options and providers.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/authentication/firebaseauthprovider.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EmailAuthProvider } from 'firebase/auth';\n\nconst uiConfig = {\n  popupMode: true,\n  signInFlow: 'popup',\n  signInOptions: [\n    {\n      provider: EmailAuthProvider.PROVIDER_ID,\n      disableSignUp: {\n        status: true,\n      },\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Custom CSS for AdminJS Sidebar Styling\nDESCRIPTION: A complete CSS example that customizes the AdminJS sidebar appearance by targeting various elements using the data-css attributes. The example defines CSS variables for colors and applies them to different sidebar components.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/ui-customization/overwriting-css-styles.md#2025-04-17_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n:root {\n  --topbar-color: white;\n  --sidebar-bg-color: darkgray;\n  --sidebar-color: white;\n  --sidebar-link-color: orange;\n}\n\nsection[data-css=\"sidebar\"] {\n  background-color: var(--sidebar-bg-color) !important;\n  color: var(--sidebar-color);\n  border: none;\n}\n\nsection[data-css=\"sidebar\"] svg {\n  fill: var(--sidebar-color) !important;\n}\n\na[data-css=\"sidebar-logo\"] {\n  background-color: var(--sidebar-bg-color) !important;\n}\n\nsection[data-css=\"sidebar-resources\"] {\n  background: var(--sidebar-bg-color) !important;\n}\n\n[data-css=\"sidebar\"] section a {\n  background: var(--sidebar-bg-color) !important;\n  color: var(--sidebar-color);\n}\n\n[data-css=\"sidebar\"] a:hover {\n  color: var(--sidebar-link-color);\n}\n```\n\n----------------------------------------\n\nTITLE: Bundling Assets with @adminjs/bundler\nDESCRIPTION: Example of using the @adminjs/bundler package to prebundle AdminJS browser assets.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/migration-guide-v7.md#2025-04-17_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { bundle } from '@adminjs/bundler';\n\nimport componentLoader from './component-loader.js';\n\n(async () => {\n  const files = await bundle({\n    componentLoader,\n    destinationDir: 'public', // relative to CWD\n  });\n})();\n```\n\n----------------------------------------\n\nTITLE: Defining Recharts Data Structure in TypeScript\nDESCRIPTION: Demonstrates the expected data structure for Recharts, showing how to format x-axis and y-axis variables as an array of objects.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/faq/charts.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n[\n    {\n        name: xAxisVariable0,\n        value: yAxisVariable0\n    },\n    {\n        name: xAxisVariable1,\n        value: yAxisVariable1\n    },\n    // ...\n    {\n        name: xAxisVariableN,\n        value: yAxisVariableN\n    },\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Up Firebase Configuration\nDESCRIPTION: Example of Firebase configuration object containing necessary credentials and identifiers.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/authentication/firebaseauthprovider.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst firebaseConfig = {\n  apiKey: 'AIza...',\n  authDomain: 'XXXX.firebaseapp.com',\n  projectId: 'XXXX',\n  storageBucket: 'XXXX.appspot.com',\n  messagingSenderId: '11111111111',\n  appId: '1:11111111111:web:abcdef',\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Language Settings in AdminJS\nDESCRIPTION: Example of setting up available languages and default language configuration\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/whats-new-in-v7.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nlocale: { \n  language: 'pl', // default language\n  availableLanguages: ['en', 'pl'], \n}\n```\n\n----------------------------------------\n\nTITLE: Registering the AdminJS Sequelize Adapter in Nest.js\nDESCRIPTION: Code for registering the AdminJS Sequelize adapter in a Nest.js application module. This tells AdminJS to use Sequelize for database operations.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/adapters/sequelize.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nAdminJS.registerAdapter({\n  Resource: AdminJSSequelize.Resource,\n  Database: AdminJSSequelize.Database,\n})\n```\n\n----------------------------------------\n\nTITLE: Installing AdminJS and Fastify Dependencies\nDESCRIPTION: Commands to install the required packages for setting up AdminJS with Fastify.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/plugins/fastify.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add adminjs @adminjs/fastify\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add fastify tslib\n```\n\n----------------------------------------\n\nTITLE: Package.json Start Script Configuration\nDESCRIPTION: Required configuration in package.json to define the start script for AdminJS Cloud Hosting.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/deployment/creating-deploying-the-application-using-cli.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...,\n  \"scripts\": {\n    ...,\n    \"start\": \"node app.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ESM-only AdminJS Packages\nDESCRIPTION: TypeScript code demonstrating how to use dynamic imports for ESM-only AdminJS packages in a CommonJS NestJS environment.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/plugins/nest.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst adminjsUploadFeature = await import('@adminjs/upload');\n```\n\n----------------------------------------\n\nTITLE: Defining Log Model with Prisma Schema\nDESCRIPTION: Prisma schema definition for a Log model that tracks changes made to resources in AdminJS.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/features/logger.md#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nmodel Log {\n  id          Int      @id @default(autoincrement())\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @updatedAt\n  recordId    Int\n  recordTitle String?  @db.VarChar(128)\n  difference  Json?    @db.Json\n  action      String   @db.VarChar(128)\n  resource    String   @db.VarChar(128)\n  userId      String   @db.VarChar(128)\n\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Prisma Client Module Configuration\nDESCRIPTION: Example of configuring AdminJS with a custom Prisma client module path setup.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/adapters/prisma.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// other imports\n// your custom prisma module\nimport PrismaModule from '../prisma/client-prisma/index.js';\n\n// ...\n\nconst prisma = new PrismaModule.PrismaClient();\n\n// ...\n\n// Notice `clientModule` per resource\nconst admin = new AdminJS({\n  resources: [{\n    resource: {\n      model: getModelByName('Post', PrismaModule),\n      client: prisma,\n      clientModule: PrismaModule,\n    },\n  }],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a New AdminJS Application\nDESCRIPTION: CLI command syntax for creating a new AdminJS application with the required parameters including name, database connection string, and API credentials.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/deployment/creating-deploying-the-application-using-cli.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ adminjs-cloud create --name=<string> --database=<string> --apiKey=<string> --apiSecret=<string>\n```\n\n----------------------------------------\n\nTITLE: Using useNotice Hook with Custom Messages\nDESCRIPTION: Example of using the useNotice hook to display custom translated messages. Shows how to trigger notifications with translated content.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/tutorials/custom-component-internationalization.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useNotice } from \"adminjs\"\n// ...\nconst sendNotice = useNotice()\n// ...\nsendNotice({\n  message: 'CustomComponent.componentMessage',\n  type: 'error',\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Translations for Forgot Password Feature\nDESCRIPTION: Code snippet showing how to add English locale translations for the forgot password feature.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/faq/resource.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst localeEn = {\n  language: 'en',\n  translations: {\n    messages: {\n      forgotPasswordQuestion: 'Trouble logging in?',\n      forgotPassword: 'Forgot password'\n    }\n  }\n}\n\nexport default localeEn\n```\n\n----------------------------------------\n\nTITLE: Basic AdminJS Feature Implementation with Manual Configuration Merging\nDESCRIPTION: A simple example showing how to implement a feature in AdminJS with manual configuration merging. This approach requires careful handling of previous resource options to ensure proper inheritance.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/features/writing-your-own-features.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst feature = (prevResourceOptions) {\n  return {\n    ...prevResourceOptions,\n    actions: {\n      ...prevResourceOptions.actions,\n      edit: {\n        ...(prevResourceOptions.actions && prevResourceOptions.actions.edit),\n        //..\n      }\n      //..\n    }\n  }\n}\n\nexport { feature }\n```\n\n----------------------------------------\n\nTITLE: Configuring Express Static Path for PDF Storage in TypeScript\nDESCRIPTION: Sets up Express to serve static PDF files from a dedicated directory. This configuration allows generated PDFs to be accessible via HTTP, which is necessary for downloading files from the AdminJS interface.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/faq/pdf-generator.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport path from 'path'\nimport * as url from 'url'\n// other imports\n\nconst __dirname = url.fileURLToPath(new URL('.', import.meta.url))\n\n// ...\n\napp.use(express.static(path.join(__dirname, 'pdfs/')))\n```\n\n----------------------------------------\n\nTITLE: Installing AdminJS Themes Package\nDESCRIPTION: Command to install the @adminjs/themes package using yarn package manager\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/themes.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add @adminjs/themes\n```\n\n----------------------------------------\n\nTITLE: Configuring TSConfig for NestJS and AdminJS\nDESCRIPTION: JSON configuration in tsconfig.json to set moduleResolution for compatibility with AdminJS v7.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/plugins/nest.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"moduleResolution\": \"node16\",\n    \"module\": \"commonjs\",\n    \"target\": \"esnext\",\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Messages Configuration\nDESCRIPTION: Configuration for adding custom notification messages that can be used with the useNotice hook. Shows how to set up translations under the messages namespace.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/tutorials/custom-component-internationalization.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst options = {\n  // ...\n  locale: {\n    translations: {\n      en: {\n        messages: {\n          CustomComponent: {\n            componentMessage: 'This is a message from a custom component'\n          }\n        }\n      }\n    }\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing AdminJS and Koa Dependencies\nDESCRIPTION: Commands for installing the required packages to set up AdminJS with Koa, including core dependencies and peer dependencies.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/plugins/koa.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add adminjs @adminjs/koa\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add koa @koa/router koa2-formidable\n```\n\n----------------------------------------\n\nTITLE: Installing PostgreSQL Session Dependencies\nDESCRIPTION: Command to install connect-pg-simple for storing AdminJS session data in PostgreSQL database.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/plugins/express.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add connect-pg-simple\n```\n\n----------------------------------------\n\nTITLE: Simple AdminJS Integration with Koa (JavaScript)\nDESCRIPTION: JavaScript code for setting up a basic AdminJS panel with Koa. It initializes AdminJS, builds a router, and starts the server.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/plugins/koa.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport AdminJS from 'adminjs'\nimport AdminJSKoa from '@adminjs/koa'\nimport Koa from 'koa'\n\nconst PORT = 3000\n\nconst start = async () => {\n  const app = new Koa()\n  const admin = new AdminJS({\n    resources: [],\n    rootPath: '/admin',\n  })\n\n  const router = AdminJSKoa.buildRouter(admin, app)\n\n  app\n    .use(router.routes())\n    .use(router.allowedMethods())\n\n   app.listen(PORT, () => {\n     console.log(`AdminJS available at http://localhost:${PORT}${admin.options.rootPath}`)\n   })\n}\n\nstart()\n```\n\n----------------------------------------\n\nTITLE: Importing useTranslation Hook for AdminJS Dashboard in TypeScript\nDESCRIPTION: Shows how to import the useTranslation hook from the adminjs library for use in a custom dashboard component.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/ui-customization/dashboard-customization.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useTranslation } from 'adminjs'\n```\n\n----------------------------------------\n\nTITLE: Nest.js Module Imports for AdminJS Prisma\nDESCRIPTION: Required imports for setting up Prisma with AdminJS in a Nest.js application.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/adapters/prisma.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Database, Resource, getModelByName } from '@adminjs/prisma'\nimport AdminJS from 'adminjs'\n\nimport { PrismaService } from './prisma.service.js' // PrismaService from Nest.js documentation\n```\n\n----------------------------------------\n\nTITLE: Installing Authentication Dependencies for AdminJS with Fastify\nDESCRIPTION: Commands to install additional packages required for setting up authentication in AdminJS with Fastify.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/plugins/fastify.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add @fastify/session connect-pg-simple\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add -D @types/connect-pg-simple\n```\n\n----------------------------------------\n\nTITLE: Installing @adminjs/relations via Yarn\nDESCRIPTION: Command to install the @adminjs/relations package using Yarn package manager.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/features/relations.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add @adminjs/relations\n```\n\n----------------------------------------\n\nTITLE: Customizing Firebase UI Appearance with CSS\nDESCRIPTION: CSS snippet to customize the appearance of the Firebase UI container.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/authentication/firebaseauthprovider.md#2025-04-17_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.adminjs_firebaseui-container {\n  background: red;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AdminJS Assets for Custom Styles\nDESCRIPTION: Configuration to include custom CSS files in AdminJS for styling Firebase UI.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/authentication/firebaseauthprovider.md#2025-04-17_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst admin = new AdminJS({\n  assets: {\n    styles: ['/firebase-ui.css'],\n  },\n  // other config\n})\n```\n\n----------------------------------------\n\nTITLE: Installing @adminjs/firebase-auth Package\nDESCRIPTION: Command to install the @adminjs/firebase-auth package using Yarn package manager.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/authentication/firebaseauthprovider.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add @adminjs/firebase-auth\n```\n\n----------------------------------------\n\nTITLE: Installing AdminJS with Express Dependencies\nDESCRIPTION: Commands to install AdminJS core packages and Express-specific dependencies required for integration.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/plugins/express.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add adminjs @adminjs/express\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add express tslib express-formidable express-session\n```\n\n----------------------------------------\n\nTITLE: Installing Hapi Peer Dependencies\nDESCRIPTION: Command to install required Hapi framework dependencies including boom, cookie, and inert modules.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/plugins/hapi.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add @hapi/hapi @hapi/boom @hapi/cookie @hapi/inert\n```\n\n----------------------------------------\n\nTITLE: Example of Raw Movie Data Structure in TypeScript\nDESCRIPTION: Shows the structure of the raw movie data returned from the database, containing movie details such as id, title, year, and score.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/faq/charts.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n[\n{\n    params: {\n        id: 2104,\n        title: 'Arrival',\n        year: 2018,\n        score: 84\n    },\n    baseError: null,\n    // ...\n},\n{\n    params: {\n        id: 2226,\n        title: 'Harry Potter and the Goblet of Fire',\n        year: 2018,\n        score: 96\n    },\n    baseError: null,\n    // ...\n},\n// ...\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Assets CDN in AdminJS\nDESCRIPTION: Example of configuring the assetsCDN option in AdminJS for serving bundled assets.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/migration-guide-v7.md#2025-04-17_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// ...\nconst admin = new AdminJS({\n  // ...,\n  assetsCDN: '<PUBLIC_ASSETS_URL>'\n})\n```\n\n----------------------------------------\n\nTITLE: Installing @adminjs/import-export Package\nDESCRIPTION: Command to install the @adminjs/import-export package via yarn to enable import and export functionality in AdminJS.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/features/import-and-export.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ yarn add @adminjs/import-export\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies\nDESCRIPTION: Commands to install and configure required AdonisJS packages for session and Lucid ORM\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/plugins/adonis.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install @adonisjs/session @adonisjs/lucid\n$ node ace configure @adonisjs/session\n$ node ace configure @adonisjs/lucid\n```\n\n----------------------------------------\n\nTITLE: Using Notice Hook in AdminJS\nDESCRIPTION: Example of using the useNotice hook to display custom messages in AdminJS.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/migration-guide-v7.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useNotice } from \"adminjs\"\n// ...\nconst sendNotice = useNotice()\n// ...\nsendNotice({\n  message: 'Invalid \"type\" for relation',\n  type: 'error',\n})\n```\n\n----------------------------------------\n\nTITLE: Deploying an AdminJS Application\nDESCRIPTION: CLI command syntax for deploying an AdminJS application with API credentials and optional configuration file path.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/deployment/creating-deploying-the-application-using-cli.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ adminjs-cloud deploy --apiKey=<string> --apiSecret=<string> --config=[string]\n```\n\n----------------------------------------\n\nTITLE: Installing @adminjs/passwords Package via Yarn\nDESCRIPTION: Command to install the AdminJS passwords package using Yarn package manager. This package is required to implement the password hashing functionality.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/features/password.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ yarn add @adminjs/passwords\n```\n\n----------------------------------------\n\nTITLE: Setting Default Language Configuration\nDESCRIPTION: Demonstrates how to set the default language and available languages in AdminJS.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/tutorials/internationalization-i18n.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlocale: { \n  language: 'pl', \n  availableLanguages: ['en', 'pl'], \n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom CSS Assets in AdminJS\nDESCRIPTION: Shows how to configure AdminJS to load custom CSS files from the public directory. This configuration should be added to the AdminJS initialization options.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/ui-customization/overwriting-css-styles.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nassets: {\n    styles: [\"/sidebar.css\"],\n}\n```\n\n----------------------------------------\n\nTITLE: Installing AdminJS Core and Adonis Integration\nDESCRIPTION: Commands to install AdminJS core and Adonis integration packages\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/plugins/adonis.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install adminjs\n$ npm install @adminjs/adonis\n$ node ace configure @adminjs/adonis\n```\n\n----------------------------------------\n\nTITLE: Installing AdminJS and NestJS Dependencies\nDESCRIPTION: Commands for installing AdminJS, NestJS, and related dependencies using yarn package manager.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/plugins/nest.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add adminjs @adminjs/nestjs\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add @adminjs/express express-session express-formidable\n```\n\n----------------------------------------\n\nTITLE: Installing @adminjs/logger Package with Yarn\nDESCRIPTION: Command to install the AdminJS logger plugin package using Yarn package manager.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/features/logger.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ yarn add @adminjs/logger\n```\n\n----------------------------------------\n\nTITLE: Registering Mongoose Adapter with AdminJS in Nest.js\nDESCRIPTION: Registers the Mongoose adapter with AdminJS in a Nest.js application, allowing AdminJS to work with Mongoose models.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/adapters/mongoose.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nAdminJS.registerAdapter({\n  Resource: AdminJSMongoose.Resource,\n  Database: AdminJSMongoose.Database,\n})\n```\n\n----------------------------------------\n\nTITLE: Installing AdminJS Hapi Dependencies\nDESCRIPTION: Command to install the core AdminJS packages and Hapi integration.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/plugins/hapi.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add adminjs @adminjs/hapi\n```\n\n----------------------------------------\n\nTITLE: AdminJS Demo Login Credentials\nDESCRIPTION: Provides the email and password for accessing the AdminJS live demo. These credentials can be used to explore the features and functionality of AdminJS in a live environment.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nEmail: admin@example.com\nPassword: password\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies with Yarn\nDESCRIPTION: Command to install ajv-formats package which is needed for additional format validations in Objection models.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/adapters/objection.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add ajv-formats\n```\n\n----------------------------------------\n\nTITLE: Installing AdminJS Leaflet Package\nDESCRIPTION: Command to install the @adminjs/leaflet package using yarn or npm package managers.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/features/leaflet-maps.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add @adminjs/leaflet # or: npm install @adminjs/leaflet\n```\n\n----------------------------------------\n\nTITLE: Installing @adminjs/custom-components with Yarn\nDESCRIPTION: This command installs the @adminjs/custom-components package using Yarn package manager.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/tutorials/custom-components-library.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ yarn add @adminjs/custom-components\n```\n\n----------------------------------------\n\nTITLE: Defining Log Entity with MikroORM\nDESCRIPTION: TypeScript implementation of a Log entity using MikroORM. This defines the database structure for logging changes with MikroORM entity decorators.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/basics/features/logger.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, BaseEntity, PrimaryKey, Property } from '@mikro-orm/core';\n\nexport interface ILog {\n  id: number;\n  action: string;\n  resource: string;\n  userId: string | null;\n  recordId: number;\n  recordTitle: string | null;\n  difference: Record<string, unknown> | null;\n  createdAt: Date;\n  updatedAt?: Date;\n}\n\n@Entity({ tableName: 'logs' })\nexport class Log extends BaseEntity<Log, 'id'> implements ILog {\n  @PrimaryKey()\n  public id: number;\n\n  @Property({ columnType: 'datetime', fieldName: 'created_at', nullable: false })\n  public createdAt: Date = new Date();\n\n  @Property({ columnType: 'datetime', fieldName: 'updated_at', nullable: true })\n  public updatedAt?: Date = new Date();\n\n  @Property({ columnType: 'integer', fieldName: 'record_id', nullable: false })\n  public recordId: number;\n\n  @Property({ columnType: 'varchar', fieldName: 'record_title', nullable: true })\n  public recordTitle: string | null;\n\n  @Property({ columnType: 'jsonb', fieldName: 'difference', nullable: true })\n  public difference: Record<string, unknown> | null;\n\n  @Property({ columnType: 'varchar', fieldName: 'action', nullable: false })\n  public action: string;\n\n  @Property({ columnType: 'varchar', fieldName: 'resource', nullable: false })\n  public resource: string;\n\n  @Property({ columnType: 'varchar', fieldName: 'user_id', nullable: false })\n  public userId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TypeORM Entity for AdminJS\nDESCRIPTION: Example of creating a TypeORM entity class that extends BaseEntity for use with AdminJS. Shows basic entity configuration with decorators for table name and columns.\nSOURCE: https://github.com/SoftwareBrothers/adminjs-docs/blob/main/installation/adapters/typeorm.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseEntity, Column, Entity, PrimaryGeneratedColumn } from 'typeorm'\n\n@Entity({ name: 'organizations' })\nexport class Organization extends BaseEntity {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column()\n  public name: string;\n}\n```"
  }
]