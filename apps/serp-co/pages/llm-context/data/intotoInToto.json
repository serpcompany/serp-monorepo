[
  {
    "owner": "in-toto",
    "repo": "in-toto",
    "content": "TITLE: Creating in-toto Layout with Python\nDESCRIPTION: This code snippet demonstrates the creation of an in-toto layout using Python. It defines steps for cloning, updating, and packaging a project, as well as an inspection step. The layout is then signed and saved to a file.\nSOURCE: https://github.com/in-toto/in-toto/blob/develop/doc/source/layout-creation-example.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom securesystemslib.signer import CryptoSigner\n\nfrom in_toto.models.layout import Layout, Step, Inspection\nfrom in_toto.models.metadata import Metablock\n\n# In this example we use in-memory signers (key pairs) for project owner and\n# functionaries. More signer implementations are available in securesystemslib.\n\n# In this example Alice is the project owner, whose private key is used to sign\n# the layout. The corresponding public key will be used during final product\n# verification.\nalice = CryptoSigner.generate_ed25519()\n\n# Bob and Carl are both functionaries, i.e. they are authorized to carry out\n# different steps of the supply chain. Their public keys will be added to the\n# layout, in order to verify the signatures of the link metadata that Bob and\n# Carl will generate when carrying out their respective tasks.\n# Bob and Carl will each require their private key when creating link metadata\n# for a step.\nbob = CryptoSigner.generate_ed25519()\ncarl = CryptoSigner.generate_ed25519()\n\n\n# Create an empty layout\nlayout = Layout()\n\n# Add functionary public keys to the layout\n# Since the functionaries public keys are embedded in the layout, they don't\n# need to be added separately for final product verification, as a consequence\n# the layout serves as functionary PKI.\nfor key in [bob, carl]:\n    key_dict = key.public_key.to_dict()\n    key_dict[\"keyid\"] = key.public_key.keyid\n    layout.add_functionary_key(key_dict)\n\n# Set expiration date so that the layout will expire in 4 months from now.\nlayout.set_relative_expiration(months=4)\n\n\n# Create layout steps\n\n# Each step describes a task that is required to be carried out for a compliant\n# supply chain.\n# A step must have a unique name to associate the related link metadata\n# (i.e. the signed evidence that is created when a step is carried out).\n\n# Each step should also list rules about the related files (artifacts) present\n# before and after the step was carried out. These artifact rules allow to\n# enforce and authorize which files are used and created by a step, and to link\n# the steps of the supply chain together, i.e. to guarantee that files are not\n# tampered with in transit.\n\n# A step's pubkeys field lists the keyids of functionaries authorized to\n# perform the step.\n\n# Below step specifies the activity of cloning the source code repo.\n# Bob is authorized to carry out the step, which must create the product\n# 'demo-project/foo.py'.\n\n# When using in-toto tooling (see 'in-toto-run'), Bob will automatically\n# generate signed link metadata file, which provides the required information\n# to verify the supply chain of the final product.\n# The link metadata file must have the name \"clone.<bob's keyid prefix>.link\"\n\nstep_clone = Step(name=\"clone\")\nstep_clone.pubkeys = [bob.public_key.keyid]\n\n# Note: In general final product verification will not fail but only warn if\n# the expected command diverges from the command that was actually used.\n\nstep_clone.set_expected_command_from_string(\n    \"git clone https://github.com/in-toto/demo-project.git\")\n\nstep_clone.add_product_rule_from_string(\"CREATE demo-project/foo.py\")\nstep_clone.add_product_rule_from_string(\"DISALLOW *\")\n\n\n# The following step does not expect a command, since modifying the source\n# code might not be reflected by a single command. However, final product\n# verification will still require a link metadata file with the name\n# \"update-version.<bob's keyid prefix>.link\". In-toto also provides tooling\n# to create a link metadata file for a step that is not carried out in a\n# single command (see 'in-toto-record').\n\nstep_update = Step(name=\"update-version\")\nstep_update.pubkeys = [bob.public_key.keyid]\n\n# Below rules specify that the materials of this step must match the\n# products of the 'clone' step and that the product of this step can be a\n# (modified) file 'demo-project/foo.py'.\n\nstep_update.add_material_rule_from_string(\n    \"MATCH demo-project/* WITH PRODUCTS FROM clone\")\nstep_update.add_material_rule_from_string(\"DISALLOW *\")\nstep_update.add_product_rule_from_string(\"ALLOW demo-project/foo.py\")\nstep_update.add_product_rule_from_string(\"DISALLOW *\")\n\n\n# Below step must be carried by Carl and expects a link file with the name\n# \"package.<carl's keyid prefix>.link\"\n\nstep_package = Step(name=\"package\")\nstep_package.pubkeys = [carl.public_key.keyid]\n\nstep_package.set_expected_command_from_string(\n    \"tar --exclude '.git' -zcvf demo-project.tar.gz demo-project\")\n\nstep_package.add_material_rule_from_string(\n    \"MATCH demo-project/* WITH PRODUCTS FROM update-version\")\nstep_package.add_material_rule_from_string(\"DISALLOW *\")\nstep_package.add_product_rule_from_string(\"CREATE demo-project.tar.gz\")\nstep_package.add_product_rule_from_string(\"DISALLOW *\")\n\n\n\n# Create inspection\n\n# Inspections are commands that are executed upon in-toto final product\n# verification. In this case, we define an inspection that untars the final\n# product, which must match the product of the last step in the supply chain,\n# ('package') and verifies that the contents of the archive match with what was\n# put into the archive.\n\ninspection = Inspection(name=\"untar\")\n\ninspection.set_run_from_string(\"tar xzf demo-project.tar.gz\")\n\ninspection.add_material_rule_from_string(\n    \"MATCH demo-project.tar.gz WITH PRODUCTS FROM package\")\ninspection.add_product_rule_from_string(\n    \"MATCH demo-project/foo.py WITH PRODUCTS FROM update-version\")\n\n\n# Add steps and inspections to layout\nlayout.steps = [step_clone, step_update, step_package]\nlayout.inspect = [inspection]\n\n\n# Eventually the layout gets wrapped in a generic in-toto metablock, which\n# provides functions to sign the metadata contents and write them to a file.\n# As mentioned above the layout contains the functionaries' public keys and\n# is signed by the project owner's private key.\n\n# In order to reduce the impact of a project owner key compromise, the layout\n# can and should be be signed by multiple project owners.\n\n# Project owner public keys must be provided together with the layout and the\n# link metadata files for final product verification.\n\nmetablock = Metablock(signed=layout)\nmetablock.create_signature(alice)\nmetablock.dump(\"root.layout\")\n\n```\n\n----------------------------------------\n\nTITLE: Installing in-toto via pip\nDESCRIPTION: Command to install in-toto using pip package manager. This installs the latest version of in-toto from PyPI.\nSOURCE: https://github.com/in-toto/in-toto/blob/develop/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install in-toto\n```\n\n----------------------------------------\n\nTITLE: Installing in-toto using pip\nDESCRIPTION: This command installs in-toto using pip, the Python package installer. Note that additional system dependencies like OpenSSL and GPG may be required depending on the host system.\nSOURCE: https://github.com/in-toto/in-toto/blob/develop/doc/source/installing.rst#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npip install in-toto\n```\n\n----------------------------------------\n\nTITLE: Installing in-toto for development\nDESCRIPTION: This command installs in-toto in editable mode with development dependencies. It should be executed in the root directory of the cloned in-toto git repository.\nSOURCE: https://github.com/in-toto/in-toto/blob/develop/doc/source/installing.rst#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\npip install -r requirements-dev.txt\n```\n\n----------------------------------------\n\nTITLE: Installing in-toto on Arch Linux using pacman\nDESCRIPTION: This command installs in-toto on Arch Linux systems using the pacman package manager.\nSOURCE: https://github.com/in-toto/in-toto/blob/develop/doc/source/installing.rst#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npacman -S in-toto\n```\n\n----------------------------------------\n\nTITLE: Installing in-toto on Debian using apt\nDESCRIPTION: This command installs in-toto on Debian-based systems using the apt package manager. It should provide all necessary dependencies for running in-toto.\nSOURCE: https://github.com/in-toto/in-toto/blob/develop/doc/source/installing.rst#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\napt install in-toto\n```\n\n----------------------------------------\n\nTITLE: Installing in-toto from source\nDESCRIPTION: This command installs in-toto from source using pip. It should be executed in the directory containing the unpacked in-toto source code.\nSOURCE: https://github.com/in-toto/in-toto/blob/develop/doc/source/installing.rst#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\npip install .\n```\n\n----------------------------------------\n\nTITLE: Cloning the in-toto Repository\nDESCRIPTION: Command to clone the in-toto git repository to the local machine.\nSOURCE: https://github.com/in-toto/in-toto/blob/develop/doc/source/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/in-toto/in-toto.git\n```\n\n----------------------------------------\n\nTITLE: Installing Development Dependencies\nDESCRIPTION: Command to install development dependencies using pip. It's recommended to use a virtual environment.\nSOURCE: https://github.com/in-toto/in-toto/blob/develop/doc/source/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npip install -r requirements-dev.txt\n```\n\n----------------------------------------\n\nTITLE: Defining Runtime Dependencies for in-toto Project\nDESCRIPTION: This snippet lists the required Python packages for the in-toto project. It specifies securesystemslib with crypto extras (version 1.0.0 or higher), attrs, python-dateutil, iso8601, and pathspec. These dependencies are essential for the project's runtime functionality.\nSOURCE: https://github.com/in-toto/in-toto/blob/develop/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: Plain Text\nCODE:\n```\nsecuresystemslib[crypto]>=1.0.0\nattrs\npython-dateutil\niso8601\npathspec\n```\n\n----------------------------------------\n\nTITLE: Referencing in-toto-run Command Parser in reStructuredText\nDESCRIPTION: Using reStructuredText directives to generate command line documentation for the in-toto-run tool by referencing its argument parser. The directives pull the command usage, options, and epilog information from the Python code.\nSOURCE: https://github.com/in-toto/in-toto/blob/develop/doc/source/command-line-tools/in-toto-run.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. argparse::\n  :ref: in_toto.in_toto_run.create_parser\n  :prog: in-toto-run\n  :noepilog: true\n\n.. argparse-epilog::\n  :ref: in_toto.in_toto_run.create_parser\n  :prog: in-toto-run\n```\n\n----------------------------------------\n\nTITLE: Using argparse directive to document in-toto-verify CLI\nDESCRIPTION: ReStructuredText directive that references the argument parser from the in_toto.in_toto_verify module to generate documentation for the command line interface.\nSOURCE: https://github.com/in-toto/in-toto/blob/develop/doc/source/command-line-tools/in-toto-verify.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. argparse::\n  :ref: in_toto.in_toto_verify.create_parser\n  :prog: in-toto-verify\n  :noepilog: true\n```\n\n----------------------------------------\n\nTITLE: Generating Command Documentation with argparse in ReStructuredText\nDESCRIPTION: This snippet defines how to use argparse directives in ReStructuredText to generate documentation for the in-toto-sign command. It references the parser created in the in_toto.in_toto_sign module.\nSOURCE: https://github.com/in-toto/in-toto/blob/develop/doc/source/command-line-tools/in-toto-sign.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. argparse::\n  :ref: in_toto.in_toto_sign.create_parser\n  :prog: in-toto-sign\n  :noepilog: true\n\n.. argparse-epilog::\n  :ref: in_toto.in_toto_sign.create_parser\n  :prog: in-toto-sign\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Tox\nDESCRIPTION: Command to run the entire test suite using tox, which executes tests in separate virtual environments for each supported Python version.\nSOURCE: https://github.com/in-toto/in-toto/blob/develop/doc/source/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ntox \n```\n\n----------------------------------------\n\nTITLE: Running Manual Tests\nDESCRIPTION: Commands to run individual tests or the entire test suite manually without using tox.\nSOURCE: https://github.com/in-toto/in-toto/blob/develop/doc/source/CONTRIBUTING.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n# Run individual tests\npython <test_file.py>\n\n# Run entire test suite\npython runtests.py\n```\n\n----------------------------------------\n\nTITLE: Code Formatting with Ruff\nDESCRIPTION: Commands to check and auto-format code using the Ruff linter and formatter, ensuring code follows required formatting standards.\nSOURCE: https://github.com/in-toto/in-toto/blob/develop/doc/source/CONTRIBUTING.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n# Apply ruff linter rules, isort rules will sort imports\nruff check\n\n# Auto-format code with ruff\nruff format\n```\n\n----------------------------------------\n\nTITLE: Documenting in-toto-record Command with Argparse in reStructuredText\nDESCRIPTION: This snippet uses reStructuredText directives to automatically generate documentation for the in-toto-record command-line tool from its argparse parser. It includes both the main argument documentation and the epilog section.\nSOURCE: https://github.com/in-toto/in-toto/blob/develop/doc/source/command-line-tools/in-toto-record.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. argparse::\n  :ref: in_toto.in_toto_record.create_parser\n  :prog: in-toto-record\n  :noepilog: true\n\n.. argparse-epilog::\n  :ref: in_toto.in_toto_record.create_parser\n  :prog: in-toto-record\n```\n\n----------------------------------------\n\nTITLE: Installing in-toto Development Dependencies with pip\nDESCRIPTION: This pip requirements file installs all necessary dependencies for in-toto development. It includes tox for test automation and imports all test, lint, and documentation dependencies. The in-toto package itself is installed in editable mode to allow for development changes.\nSOURCE: https://github.com/in-toto/in-toto/blob/develop/requirements-dev.txt#2025-04-23_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n# Install tox for local testing, but also everything that tox would install\n# in a test environment, so that we can run the test suite or individual tests\n# directly in the development environment as well.\ntox\n-r requirements-test.txt\n-r requirements-lint.txt\n-r requirements-docs.txt\n\n# Install in-toto in editable mode\n-e .\n```\n\n----------------------------------------\n\nTITLE: Signing Commits with DCO\nDESCRIPTION: Example of how to sign commits with the Developer Certificate of Origin (DCO) using git's --signoff option.\nSOURCE: https://github.com/in-toto/in-toto/blob/develop/doc/source/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngit commit -s -m \"Your descriptive commit message\"\n```\n\n----------------------------------------\n\nTITLE: Documenting in-toto-match-products Command with reStructuredText\nDESCRIPTION: This snippet uses reStructuredText's argparse directive to automatically generate documentation for the in-toto-match-products command by referencing its argument parser from the in_toto.in_toto_match_products module.\nSOURCE: https://github.com/in-toto/in-toto/blob/develop/doc/source/command-line-tools/in-toto-match-products.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. argparse::\n  :ref: in_toto.in_toto_match_products.create_parser\n  :prog: in-toto-match-products\n  :noepilog: true\n```\n\n----------------------------------------\n\nTITLE: Using argparse-epilog directive for in-toto-verify epilog documentation\nDESCRIPTION: ReStructuredText directive that references the epilog text from the in_toto.in_toto_verify module's argument parser to include additional information at the end of the command documentation.\nSOURCE: https://github.com/in-toto/in-toto/blob/develop/doc/source/command-line-tools/in-toto-verify.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. argparse-epilog::\n  :ref: in_toto.in_toto_verify.create_parser\n  :prog: in-toto-verify\n```\n\n----------------------------------------\n\nTITLE: Building HTML Documentation\nDESCRIPTION: Command to build the HTML documentation locally after making changes to the documentation.\nSOURCE: https://github.com/in-toto/in-toto/blob/develop/doc/source/CONTRIBUTING.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncd doc && make html\n```\n\n----------------------------------------\n\nTITLE: Listing Automated Testing Tools for in-toto Project in Markdown\nDESCRIPTION: This snippet enumerates the automated testing and review processes used in the in-toto project. It includes unit and build testing with Tox on GitHub Actions, static code analysis with ruff, checks for signed-off commits using Probot: DCO, and review by project maintainers.\nSOURCE: https://github.com/in-toto/in-toto/blob/develop/GOVERNANCE.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* Unit and build testing via [Tox](https://tox.readthedocs.io/en/latest/) on\n  [GitHub Actions](https://github.com/in-toto/in-toto/actions)\n* Static code analysis via [ruff](https://astral.sh/ruff)\n* Checks for *Signed-off-by* commits via\n  [Probot: DCO](https://probot.github.io/apps/dco/)\n* Review by one or more [maintainers](MAINTAINERS.txt)\n```\n\n----------------------------------------\n\nTITLE: Generating Pinned Requirements for in-toto Project using pip-compile\nDESCRIPTION: This command generates a pinned requirements file for the in-toto project using pip-compile. It takes the requirements.txt file as input and outputs the pinned versions to requirements-pinned.txt.\nSOURCE: https://github.com/in-toto/in-toto/blob/develop/requirements-pinned.txt#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip-compile --output-file=requirements-pinned.txt requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Specifying in-toto Dependencies with Requirements File\nDESCRIPTION: This requirements file references pinned dependencies from another file and explicitly defines the coverage measurement tool version needed for testing.\nSOURCE: https://github.com/in-toto/in-toto/blob/develop/requirements-test.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# in-toto runtime dependencies\n-r requirements-pinned.txt\n\n# Test tools for coverage measurement\ncoverage==7.8.0\n```\n\n----------------------------------------\n\nTITLE: Defining Sphinx Documentation Dependencies for in-toto\nDESCRIPTION: This requirements file specifies the dependencies needed for generating Sphinx documentation for the in-toto project. It includes the main project requirements through a reference to the pinned requirements file and adds three Sphinx extensions: sphinx-rtd-theme for styling, sphinx-argparse for command-line argument documentation, and recommonmark for Markdown support.\nSOURCE: https://github.com/in-toto/in-toto/blob/develop/requirements-docs.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# in-toto runtime dependencies required by sphinx\n-r requirements-pinned.txt\n\n# sphinx extensions\nsphinx-rtd-theme\nsphinx-argparse\nrecommonmark\n```\n\n----------------------------------------\n\nTITLE: Defining Dependencies Requirements for in-toto\nDESCRIPTION: Specifies the project dependencies including runtime requirements from a pinned file and test tools like ruff for linting with exact version pinning.\nSOURCE: https://github.com/in-toto/in-toto/blob/develop/requirements-lint.txt#2025-04-23_snippet_0\n\nLANGUAGE: requirements\nCODE:\n```\n# in-toto runtime dependencies\n-r requirements-pinned.txt\n\n# Test tools for linting and test coverage measurement\nruff==0.11.5\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents in reStructuredText for in-toto Documentation\nDESCRIPTION: This snippet defines the table of contents for the in-toto documentation using reStructuredText syntax. It specifies the maximum depth of the table and lists the various sections to be included.\nSOURCE: https://github.com/in-toto/in-toto/blob/develop/doc/source/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n   installing\n   command-line-tools/index\n   api\n   model\n   configuration\n   layout-creation-example\n   Demo Supply Chain <https://github.com/in-toto/demo>\n   CONTRIBUTING\n```\n\n----------------------------------------\n\nTITLE: Specifying Package Dependencies for in-toto Project\nDESCRIPTION: This requirements file specifies exact versions of Python packages needed for building the in-toto project. It pins build to version 1.2.2.post1 and hatchling to version 1.27.0, ensuring consistent build environments.\nSOURCE: https://github.com/in-toto/in-toto/blob/develop/requirements-build.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nbuild==1.2.2.post1\nhatchling==1.27.0\n```\n\n----------------------------------------\n\nTITLE: RST Table of Contents Configuration\nDESCRIPTION: Defines a restructured text table of contents tree with maxdepth of 1, linking to settings and exclude-patterns documentation pages.\nSOURCE: https://github.com/in-toto/in-toto/blob/develop/doc/source/configuration.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   settings\n   exclude-patterns\n```\n\n----------------------------------------\n\nTITLE: GitHub Issue References in Markdown\nDESCRIPTION: Lists of GitHub issues and pull requests referencing various project milestones and improvements, including version releases, documentation updates, and infrastructure changes.\nSOURCE: https://github.com/in-toto/in-toto/blob/develop/roadmap-reviews/2021/review_2_april_21.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Closed issues and merged pull requests\n    - SPDX License identifiers and copyright information\n      ([#440](https://github.com/in-toto/in-toto/pull/440))\n    - Aditya Sirish (@adityasaky) as a maintainer\n      ([#443](https://github.com/in-toto/in-toto/pull/443))\n    - PyPI development status from `Beta` to `Production/Stable`\n      ([#447](https://github.com/in-toto/in-toto/pull/447))\n    - Santiago Torres-Arias's (@SantiagoTorres) email to reflect Purdue\n      affiliation ([#446](https://github.com/in-toto/in-toto/pull/446))\n    - Debian downstream release metadata\n      ([#437](https://github.com/in-toto/in-toto/pull/437))\n    - Bump dependency: cryptography\n      ([#442](https://github.com/in-toto/in-toto/pull/442))\n    - Dropped support for Python 2.7\n      ([#438](https://github.com/in-toto/in-toto/pull/438))\n```"
  }
]