[
  {
    "owner": "zephyrcloudio",
    "repo": "zephyr-documentation",
    "content": "TITLE: Rendering Error Information with Zephyr ErrorInfo Component - TSX\nDESCRIPTION: This code snippet imports the ErrorInfo React component and demonstrates how to render it for the ZE10013 error code. The component is passed the error code as a 'code' prop, and a 'related' prop as a comma-separated string of related error codes, which helps show additional diagnostic or related context in the UI. The snippet assumes you have the ErrorInfo component and its dependencies available from '../../components/errors/info.tsx'. Expects usage within a React-compatible rendering environment.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze10013.mdx#_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\n<ErrorInfo code=\"ZE10013\" terminal related=\"ZE10017,ZE10011\" />\n\n```\n\n----------------------------------------\n\nTITLE: Rendering ErrorInfo Component with Error Code in TSX\nDESCRIPTION: Renders the ErrorInfo React component, passing the specific error code 'ZE20019' as a prop. This component displays contextual error information to the user within the UI, facilitating error visualization and debugging.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze20019.mdx#_snippet_3\n\nLANGUAGE: TSX\nCODE:\n```\n<ErrorInfo code=\"ZE20019\" terminal />\n```\n\n----------------------------------------\n\nTITLE: Add Git Remote Origin Bash\nDESCRIPTION: Adds a remote origin named 'origin' to the current Git repository, linking it to the specified remote URL. This step is crucial for Zephyr to identify the organization and repository associated with the project, which is required for deployment.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze10014.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit add remote origin <remote-url>\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for Remote1 Application with Zephyr Plugin - TypeScript\nDESCRIPTION: Provides the development Webpack configuration for the remote1 app using Nx's plugin system along with Zephyr customizations. Relies on local module-federation.config, @nx/webpack, @nx/react, @nx/react/module-federation, and zephyr-webpack-plugin. Composes plugins to construct a complete Webpack config for the remote app, supporting development and module sharing.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/nx-mf-app.mdx#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { composePlugins, withNx } from '@nx/webpack';\nimport { withReact } from '@nx/react';\nimport { withModuleFederation } from '@nx/react/module-federation';\n\nimport baseConfig from './module-federation.config';\nimport { withZephyr } from 'zephyr-webpack-plugin';\n\nconst config = {\n  ...baseConfig,\n};\n\n// Nx plugins for webpack to build config object from Nx options and context.\nexport default composePlugins(\n  withNx(),\n  withReact(),\n  withModuleFederation(config),\n  withZephyr(),\n  (config) => {\n    return config;\n  }\n);\n\n```\n\n----------------------------------------\n\nTITLE: Shell Build Production with Watch Mode\nDESCRIPTION: This command executes a production build of the shell application using Nx, enabling the `--watch` flag for continuous monitoring and automatic rebuilds upon detecting changes.  This configuration deploys the build to the edge after a successful compilation. It displays detailed output during the build and deployment stages.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/nx-mf-app.mdx#_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nnx run shell:build:production --watch\n```\n\n----------------------------------------\n\nTITLE: Import Error Handling Function (Typescript)\nDESCRIPTION: This code imports the `getErrorMessage` function from the '../../lib/error-helpers.ts' file. This function is presumably used to retrieve an error message based on an error code, such as 'ZE20020'. It also imports the `ErrorInfo` component from '../../components/errors/info.tsx'.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze20020.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getErrorMessage } from '../../lib/error-helpers.ts';\nimport { ErrorInfo } from '../../components/errors/info.tsx';\n```\n\n----------------------------------------\n\nTITLE: Setting bundler PORT in package.json\nDESCRIPTION: This code sets the port number for the bundler. The `start` script in `package.json` is modified to include the `--port` flag, ensuring the bundler listens on port 8082.  This configuration ensures that the application and the bundler use the same port.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/react-native/configuring-host.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"start\": \"react-native start --port 8082\"\n```\n\n----------------------------------------\n\nTITLE: Importing React Components with React.lazy - TypeScript\nDESCRIPTION: This code snippet demonstrates how to import a federated React component using `React.lazy`. It allows the component to be loaded asynchronously, which is necessary when the component is part of a module federation setup.  The `Suspense` component provides a fallback UI while the component is being loaded.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/react-native/bootstrapping-your-native-application.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst MyComponent = React.lazy(() => import(\"my-remote/MyComponent\"));\n\nfunction App() {\n  return (\n    <Suspense fallback={<Text>Loading...</Text>}>\n      <MyComponent />\n    </Suspense>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Import Error Handling and UI Components in Typescript\nDESCRIPTION: Imports the getErrorMessage function from a utility file and the ErrorInfo component from the components directory. These are likely used for displaying error messages and error information within the application's user interface. It also imports the Steps component from the @theme library for creating step-by-step instructions.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze10021.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getErrorMessage } from '../../lib/error-helpers.ts';\nimport { ErrorInfo } from '../../components/errors/info.tsx';\nimport { Steps } from '@theme';\n```\n\n----------------------------------------\n\nTITLE: Initializing Module Federation App Creation using npx\nDESCRIPTION: Executes the `create-mf-app` tool via `npx` to start the interactive setup process for generating a new Module Federation application. This command downloads and runs the package binary.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/general/create-mf-app.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-mf-app\n```\n\n----------------------------------------\n\nTITLE: Displaying Specific Git Configuration Error in React with TypeScript\nDESCRIPTION: This snippet uses React components in TypeScript to render a descriptive error message and detailed error info related to the Git configuration error code ZE10016. It displays the error code, marks it as terminal, and references related error codes as context. This setup allows users to understand and debug issues impacting deployment authentication.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze10016.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n# {getErrorMessage('ZE10016')}\n\n<ErrorInfo code=\"ZE10016\" terminal related=\"ZE10014,ZE10015,ZE10017\" />\n```\n\n----------------------------------------\n\nTITLE: Fetching Error Messages with TypeScript\nDESCRIPTION: This snippet imports a utility function that retrieves a formatted error message string given an error code. It is used to map error codes to corresponding readable messages for UI display. Dependency includes the '../../lib/error-helpers.ts' file which must expose the getErrorMessage function. The input is a string error code such as 'ZE20023' and the output is a string representing the error message.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze20023.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { getErrorMessage } from '../../lib/error-helpers.ts';\n```\n\n----------------------------------------\n\nTITLE: Module Federation Plugin Configuration (TS)\nDESCRIPTION: This TypeScript snippet configures the Module Federation Plugin in RSpack. It sets the application name, filename for the container, exposes modules, and defines shared dependencies based on the `package.json` file.  `[app-name]` should be replaced with your application name. Dependencies are configured as singletons, eager loaded, and with required versions.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/react-native/configuring-remote.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n  new Repack.plugins.ModuleFederationPluginV2({\n    name: '[app-name]',\n    filename: '[app-name].container.js.bundle',\n    exposes: {\n    },\n    shared: Object.fromEntries(\n      Object.entries(pkg.dependencies).map((dep, version) => {\n        return [\n          dep,\n          {singleton: true, eager: true, requiredVersion: version},\n        ];\n      }),\n    ),\n  }),\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Repository\nDESCRIPTION: These commands initialize a Git repository, add a remote URL, stage all changes, and commit them. These steps are required to deploy the application with Zephyr, as it relies on Git for version control and deployment.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/rolldown-react.mdx#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngit init\ngit remote add origin <REMOTE_URL>\ngit add .\ngit commit -m \"Initial commit\"\n```\n\n----------------------------------------\n\nTITLE: Warning Note for User Support Contact in Markdown\nDESCRIPTION: This warning box informs users that certain features or information are not documented yet and encourages contact via a Discord link for support. It serves as an alert for users needing help and directs them to community support platforms.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze20024.mdx#_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n::: warning\n\nNot documented yet. Had a problem and need help?\n\nContact us in our [discord](https://zephyr-cloud.io/discord)!\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Building the Shell Application\nDESCRIPTION: This command initiates the build process for the shell application using the Nx build tool. The `--watch` flag enables continuous monitoring for changes, triggering rebuilds automatically. This command assumes Nx is installed and configured within the project.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/nx-mf-app.mdx#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nnpx nx build shell -- --watch\n```\n\n----------------------------------------\n\nTITLE: Building a Zephyr Project and Obtaining Deployment URLs\nDESCRIPTION: This snippet demonstrates how to build a Zephyr project using npm and shows the console output that contains the deployment URLs. It includes the command to run and the resulting output showing project identifiers and deployment URLs that should be used to access the project.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze20011.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n\nZEPHYR   Hi arthurfiorette!\nZEPHYR   Building to project.repository.arthurfiorette#1\nZEPHYR   uploading missing assets to zephyr (queued 1 out of 7)\nZEPHYR   Uploaded missing assets to zephyr (1 assets in 115ms, 0.56kb)\nZEPHYR   Uploaded local snapshot in 118ms\nZEPHYR   Build deployed in 445ms\nZEPHYR   Deploying to edge:\nZEPHYR   -> https://project-repository-arthurfiorette-ze.valorkin.dev\nZEPHYR   -> https://arthurfiorette-project-commitid-ze.valorkin.dev\n```\n\n----------------------------------------\n\nTITLE: Importing Error Handling Utilities - TypeScript\nDESCRIPTION: This snippet imports the `getErrorMessage` function from `error-helpers.ts` and the `ErrorInfo` component from `info.tsx`. These are dependencies used to format and display error messages based on specific error codes. The `getErrorMessage` function retrieves the actual error message string, while the `ErrorInfo` component handles the presentation of the error.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze20025.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { getErrorMessage } from '../../lib/error-helpers.ts';\nimport { ErrorInfo } from '../../components/errors/info.tsx';\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Federation Plugin\nDESCRIPTION: This code configures the Module Federation Plugin within the `rspack.config.mjs` file, enabling the host application to federate modules. It defines the application's name, output filename, and shared dependencies.  The `shared` object maps dependencies to the remote.  `singleton`, `eager`, and `requiredVersion` control how dependencies are handled.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/react-native/configuring-host.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n  new Repack.plugins.ModuleFederationPluginV2({\n    name: '[app-name]',\n    filename: '[app-name].container.js.bundle',\n    remotes: {\n    },\n    shared: Object.fromEntries(\n      Object.entries(pkg.dependencies).map((dep, version) => {\n        return [\n          dep,\n          {singleton: true, eager: true, requiredVersion: version},\n        ];\n      }),\n    ),\n  }),\n```\n\n----------------------------------------\n\nTITLE: Creating Bootstrap Component - TypeScript\nDESCRIPTION: This code defines a `bootstrap.js` file which manages the loading of the federated modules before the `App` component is rendered.  It configures the `ScriptManager` to resolve the `async-app` chunk's URL based on the environment (development or production). It uses `React.lazy` to lazily load the `App` component and wraps it within a `Suspense` boundary to handle loading states.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/react-native/bootstrapping-your-native-application.mdx#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { Script, ScriptManager } from \"@callstack/repack/client\";\nimport React from \"react\";\n\n// tell repack how to deal with the async app chunk\n// in dev mode we will obtain it from the dev server\n// in production we will load the chunk from the filesystem\n// since it will be packaged into the app's assets\nScriptManager.shared.addResolver((scriptId) => {\n  if (scriptId !== \"async-app\") return;\n  return {\n    url: __DEV__\n      ? Script.getDevServerURL(scriptId)\n      : Script.getFileSystemURL(scriptId),\n  };\n});\n\n// make the App component lazy\nconst App = React.lazy(\n  () => import(/* webpackChunkName: \"async-app\" */ \"./App\")\n);\n\n// create a bootstrap component that will be used to render the App\n// it wraps the lazy App component in a Suspense component\nconst Bootstrap = () => {\n  return React.createElement(React.Suspense, {}, React.createElement(App));\n};\n\nexport default Bootstrap;\n```\n\n----------------------------------------\n\nTITLE: Setting PORT in package.json\nDESCRIPTION: This snippet sets the port number for the React Native application to communicate with the bundler. It modifies the `ios` script in `package.json` to include `RCT_METRO_PORT=8082`, directing the iOS application to use port 8082 for communication.  The port number can be changed based on availability.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/react-native/configuring-host.mdx#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"ios\": \"RTC_METRO_PORT=8082 react-native run-ios --no-packager\"\n```\n\n----------------------------------------\n\nTITLE: Exposing a Module (TS)\nDESCRIPTION: This TypeScript snippet demonstrates how to expose a component named `CartList` from the remote application.  It maps the module name `CartList` to the path of the component within the application, `./src/components/CartList`.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/react-native/configuring-remote.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexposes: {\n  CartList: './src/components/CartList',\n},\n```\n\n----------------------------------------\n\nTITLE: Debugging Steps for Build Configuration in Zephyr Cloud\nDESCRIPTION: Provides detailed troubleshooting steps to verify project setup, including validation of package.json and git remote origin configuration, clearing cache, and re-logging in to resolve build and deployment errors.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze10017.mdx#_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n### Ensure you have a valid `package.json` file in your project directory.\n\nBy valid, we mean it fits json format, include name and version\n\nAlso ensure if it sits in where your bundler configuration is.\n\nRelated error and potential resolution:\n\n- <ErrorLink code=\"ZE10010\" />\n- <ErrorLink code=\"ZE10011\" />\n- <ErrorLink code=\"ZE10012\" />\n\n### Make sure you have git remote origin url, git username, email configured.\n\nRelated error and potential resolution:\n\n- <ErrorLink code=\"ZE10014\" />\n- <ErrorLink code=\"ZE10015\" />\n- <ErrorLink code=\"ZE10016\" />\n\n### Clear cache and login again\n\nRemove your local configuration files `~/.zephyr` and login from either [dashboard](https://app.zephyr-cloud.io) or [sidepanel on Chrome](https://chromewebstore.google.com/detail/zephyr-mission-control/liflhldchhinbaeplljlplhnbkdidedn) again.\n\n```\nrm -rf ~/.zephyr\n```\n```\n\n----------------------------------------\n\nTITLE: Configure Rspack with Zephyr Plugin (Host and Remotes)\nDESCRIPTION: This TypeScript code configures Rspack for an Nx workspace, integrating with React and Module Federation. It imports necessary functions and modules and incorporates the Zephyr webpack plugin to the build configuration. This snippet demonstrates how to include Zephyr in the build process. The configuration includes the  `withZephyr` function to integrate Zephyr into the build process, alongside the  `withNx`,  `withReact`, and  `withModuleFederation` plugins.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/how-to/migrate-nx-webpack-to-rspack.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// import { composePlugins, withNx, ModuleFederationConfig } from '@nx/webpack';\n// import { withReact } from '@nx/react';\n// import { withModuleFederation } from '@nx/react/module-federation';\nimport { composePlugins, withNx, withReact } from '@nx/rspack';\nimport { withModuleFederation, ModuleFederationConfig } from '@nx/rspack/module-federation';\nimport { withZephyr } from 'zephyr-webpack-plugin'; // import Zephyr\n\nimport baseConfig from './module-federation.config';\n\nconst config: ModuleFederationConfig = {\n  ...baseConfig,\n};\n// Nx plugins for webpack to build config object from Nx options and context.\n/**\n * DTS Plugin is disabled in Nx Workspaces as Nx already provides Typing support for Module Federation\n * The DTS Plugin can be enabled by setting dts: true\n * Learn more about the DTS Plugin here: https://module-federation.io/configure/dts.html\n */\nexport default composePlugins(\n  withNx(),\n  withReact(),\n  withModuleFederation(config, { dts: false }),\n  withZephyr() // add zephyr in plugin\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Error Helper Function in TypeScript\nDESCRIPTION: Imports the getErrorMessage function from a local error helpers module, used to retrieve standardized error messages based on error codes. Dependencies include the error-helpers.ts module file.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze10012.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { getErrorMessage } from '../../lib/error-helpers.ts';\n```\n\n----------------------------------------\n\nTITLE: Change Remote Production Config Import (Remotes)\nDESCRIPTION: This snippet changes the import statement in the `rspack.config.prod.ts` file within each of the remote applications. The modification ensures that the production configuration uses the correct Rspack configuration file, facilitating proper builds and deployments for each of the remote applications.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/how-to/migrate-nx-webpack-to-rspack.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default require('./rspack.config');\n```\n\n----------------------------------------\n\nTITLE: Updating Entry Point to use Bootstrap - TypeScript\nDESCRIPTION: This snippet updates the React Native application's entry point (e.g., `index.js`) to use the `Bootstrap` component instead of the main `App` component.  It imports `AppRegistry` and the `appName` from `app.json` and registers the `Bootstrap` component.  This ensures the application waits for the federated modules to load before the `App` component is rendered.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/react-native/bootstrapping-your-native-application.mdx#_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { AppRegistry } from \"react-native\";\nimport { name as appName } from \"./app.json\";\nimport Bootstrap from \"./bootstrap\";\n\nAppRegistry.registerComponent(appName, () => Bootstrap);\n```\n\n----------------------------------------\n\nTITLE: Importing Error Info Display Component in React (TSX)\nDESCRIPTION: This snippet imports the ErrorInfo component from a local TSX file, intended to visually represent error details within a React UI. The component expects props such as an error code and terminal flag, which control its content and display mode. The dependency is a properly implemented ErrorInfo component in the specified path, supporting the rendering of diagnostic information.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze10029.mdx#_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\nimport { ErrorInfo } from '../../components/errors/info.tsx';\n```\n\n----------------------------------------\n\nTITLE: Importing ErrorInfo React component from components directory\nDESCRIPTION: This snippet imports the ErrorInfo component used to display error details in the UI, specifically importing from '../../components/errors/info.tsx'. It is intended for rendering detailed error information within React components.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze20010.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { ErrorInfo } from '../../components/errors/info.tsx';\n```\n\n----------------------------------------\n\nTITLE: Building Parcel Application for Deployment (Bash)\nDESCRIPTION: Executes the project's build script (typically defined as `parcel build src/index.html` in `package.json`) using different package managers (npm, yarn, pnpm). This command bundles the application with Parcel and, due to the configured `parcel-reporter-zephyr`, triggers the Zephyr deployment process.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/parcel-react.mdx#_snippet_8\n\nLANGUAGE: Bash\nCODE:\n```\nnpm run build\n```\n\nLANGUAGE: Bash\nCODE:\n```\nyarn build\n```\n\nLANGUAGE: Bash\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Initializing React Root Component (src/index.tsx) (TSX)\nDESCRIPTION: This TypeScript file (`src/index.tsx`) uses React DOM's `createRoot` API to find the 'root' HTML element (defined in `index.html`) and renders the main `App` component (imported from `./App`) into it. This bootstraps the React application.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/parcel-react.mdx#_snippet_5\n\nLANGUAGE: TSX\nCODE:\n```\nimport React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport App from './App';\n\nconst rootElement = document.getElementById('root');\nif (rootElement) {\n  const root = createRoot(rootElement);\n  root.render(<App />);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Error Handling Functions in JavaScript\nDESCRIPTION: Imports the getErrorMessage function from the error-helpers.ts file and the ErrorInfo component from the errors/info.tsx file. These are used to display and format error information on the page.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze20022.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { getErrorMessage } from '../../lib/error-helpers.ts';\nimport { ErrorInfo } from '../../components/errors/info.tsx';\n```\n\n----------------------------------------\n\nTITLE: Creating a Zephyr app with npm\nDESCRIPTION: This command uses `create-zephyr-apps` to scaffold a new Zephyr application using npm. The `@latest` tag ensures the most recent version is used.  Follow the prompts to configure the project, selecting Rolldown as the bundler.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/rolldown-react.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-zephyr-apps@latest\n```\n\n----------------------------------------\n\nTITLE: Modify Project.json for Rspack and Zephyr\nDESCRIPTION: This JSON snippet details the changes needed in each project's `project.json` file within an Nx workspace to configure the build process for Rspack and Zephyr. It updates the `executor` to `@nx/rspack:rspack`, adds `\"target\":\"web\"`, changes the paths for the rspack configuration files, and modifies the executor in the `serve` configurations. These updates ensure that the Nx workspace uses Rspack for builds and development, facilitating the integration of Zephyr with the module federation setup.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/how-to/migrate-nx-webpack-to-rspack.mdx#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"remote1\",\n  \"$schema\": \"../../node_modules/nx/schemas/project-schema.json\",\n  \"sourceRoot\": \"apps/remote1/src\",\n  \"projectType\": \"application\",\n  \"tags\": [],\n  \"targets\": {\n    \"build\": {\n      \"executor\": \"@nx/rspack:rspack\",\n      \"outputs\": [\n        \"{options.outputPath}\"\n      ],\n      \"defaultConfiguration\": \"production\",\n      \"options\": {\n        \"target\": \"web\",\n        \"compiler\": \"babel\",\n        \"outputPath\": \"dist/apps/remote1\",\n        \"index\": \"apps/remote1/src/index.html\",\n        \"baseHref\": \"/\",\n        \"main\": \"apps/remote1/src/main.ts\",\n        \"tsConfig\": \"apps/remote1/tsconfig.app.json\",\n        \"assets\": [\n          \"apps/remote1/src/favicon.ico\",\n          \"apps/remote1/src/assets\"\n        ],\n        \"styles\": [\n          \"apps/remote1/src/styles.css\"\n        ],\n        \"scripts\": [],\n        \"rspackConfig\": \"apps/remote1/rspack.config.ts\"\n      },\n      \"configurations\": {\n        \"development\": {\n          \"extractLicenses\": false,\n          \"optimization\": false,\n          \"sourceMap\": true,\n          \"vendorChunk\": true\n        },\n        \"production\": {\n          \"fileReplacements\": [\n            {\n              \"replace\": \"apps/remote1/src/environments/environment.ts\",\n              \"with\": \"apps/remote1/src/environments/environment.prod.ts\"\n            }\n          ],\n          \"optimization\": true,\n          \"outputHashing\": \"all\",\n          \"sourceMap\": false,\n          \"namedChunks\": false,\n          \"extractLicenses\": true,\n          \"vendorChunk\": false,\n          \"rspackConfig\": \"apps/remote1/rspack.config.prod.ts\"\n        }\n      }\n    },\n    \"serve\": {\n      \"executor\": \"@nx/rspack:module-federation-dev-server\",\n      \"defaultConfiguration\": \"development\",\n      \"options\": {\n        \"buildTarget\": \"remote1:build\",\n        \"hmr\": true,\n        \"port\": 4201\n      },\n      \"configurations\": {\n        \"development\": {\n          \"buildTarget\": \"remote1:build:development\"\n        },\n        \"production\": {\n          \"buildTarget\": \"remote1:build:production\",\n          \"hmr\": false\n        }\n      }\n    },\n    \"lint\": {\n      \"executor\": \"@nx/eslint:lint\"\n    },\n    \"serve-static\": {\n      \"executor\": \"@nx/web:file-server\",\n      \"defaultConfiguration\": \"production\",\n      \"options\": {\n        \"buildTarget\": \"remote1:build\",\n        \"watch\": false,\n        \"port\": 4201\n      },\n      \"configurations\": {\n        \"development\": {\n          \"buildTarget\": \"remote1:build:development\"\n        },\n        \"production\": {\n          \"buildTarget\": \"remote1:build:production\"\n        }\n      }\n    },\n    \"test\": {\n      \"executor\": \"@nx/jest:jest\",\n      \"outputs\": [\n        \"{workspaceRoot}/coverage/{projectRoot}\"\n      ],\n      \"options\": {\n        \"jestConfig\": \"apps/remote1/jest.config.ts\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Node Version with nvm in Terminal - Bash\nDESCRIPTION: Uses the nvm tool to select Node.js version 20 for the current terminal session. Ensure nvm is installed and accessible on your system to run this command. No input parameters are required, and the output is a shell environment with Node.js 20 active.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/nx-mf-app.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnvm use 20 \n```\n\n----------------------------------------\n\nTITLE: Modifying package.json scripts\nDESCRIPTION: This snippet modifies the `package.json` scripts to separate the building and bundling processes. The `--no-packager` flag is added to the `react-native run-ios` command to prevent bundling during the build. The bundler can then be started separately using `pnpm start`.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/react-native/rspack-ios-setup.mdx#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  \"ios\": \"react-native run-ios --no-packager\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Zephyr Build in Watch Mode\nDESCRIPTION: Executes the build script defined in `package.json` (typically `npm run build`) with the `--watch` flag. This command triggers the build process, including Zephyr's deployment actions, and continuously monitors files for changes to rebuild automatically.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/general/create-mf-app.mdx#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build --watch\n```\n\n----------------------------------------\n\nTITLE: Choosing Framework in create-mf-app\nDESCRIPTION: Shows the `create-mf-app` prompt for selecting the JavaScript framework. While multiple options are available, React is highlighted as tested.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/general/create-mf-app.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n? Framework: (Use arrow keys)\nlit-html\npreact\n❯ react\nreact-esm\nsolid-js\nsvelte\nvanilla\n(Move up and down to reveal more choices)\n```\n\n----------------------------------------\n\nTITLE: Importing package.json in rspack.config.mjs\nDESCRIPTION: This code snippet imports the `package.json` file as a JSON object within the `rspack.config.mjs` file. It allows access to the host application's dependencies.  This is a prerequisite for sharing dependencies with remote applications within the Module Federation context.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/react-native/configuring-host.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport pkg from './package.json' with { type: \"json\" };\n```\n\n----------------------------------------\n\nTITLE: Initialize Git Repository Bash\nDESCRIPTION: Initializes a new Git repository in the current directory, adds all files, creates an initial commit, and renames the default branch to 'main'. This sequence ensures the project folder is a valid Git repository and has a starting point.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze10014.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit init && git add . && git commit -M \"init\" && git branch -M main\n```\n\n----------------------------------------\n\nTITLE: Clearing Zephyr Asset Cache - Bash\nDESCRIPTION: This Bash snippet removes the local Zephyr cache directory to resolve potential asset conflicts or corrupted cache issues. Running this command deletes all locally cached assets, after which a new build and deployment can be attempted. This action is especially helpful if error ZE20012 persists after other troubleshooting steps.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze20012.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf ~/.zephyr\n```\n\n----------------------------------------\n\nTITLE: Choosing CSS Tooling in create-mf-app\nDESCRIPTION: Shows the `create-mf-app` prompt for selecting the CSS styling approach, offering options like standard CSS or Tailwind CSS.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/general/create-mf-app.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n? CSS: (Use arrow keys)\n❯ CSS\nTailwind\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Repository and Committing Initial Code - Bash\nDESCRIPTION: A sequence of git commands to initialize a new git repository, stage all files, and create the initial commit. This is necessary as Zephyr requires git, ensuring proper source control setup for subsequent operations.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/turborepo-react.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit init\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit add .\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -m \"initial commit\"\n```\n\n----------------------------------------\n\nTITLE: Building Zephyr Application using npm - Bash\nDESCRIPTION: This Bash snippet runs the build command for a Zephyr application using npm. Ensure you have all necessary dependencies installed and are in your project's root directory before executing this command. The command triggers the build process and is useful for retrying deployments after encountering error ZE20012.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze20012.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Example Git Configuration Error Message\nDESCRIPTION: Displays a typical error message indicating that Git is not properly configured (missing `user.name`, `user.email`, or a valid 'git remote origin'). Zephyr requires these configurations to function correctly.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/general/create-mf-app.mdx#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n[ConfigurationError: [zephyr]: git is not configured properly\n\n    - please set git user.name and user.email\n\n    - please set valid 'git remote origin'\n\n]\n```\n\n----------------------------------------\n\nTITLE: Install Rspack, Zephyr, and Dependencies\nDESCRIPTION: This command installs the necessary packages for Rspack, Zephyr's webpack plugin, and associated dependencies within the project's directory. It includes packages for Rspack, the Rspack development server, and the Zephyr webpack plugin. The --force flag is used to ensure the installation regardless of potential conflicts.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/how-to/migrate-nx-webpack-to-rspack.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @nx/rspack @rspack/dev-server zephyr-webpack-plugin@0.0.17 --force\n```\n\n----------------------------------------\n\nTITLE: Generating Module Federation Shell and Remotes with Nx - Bash\nDESCRIPTION: Uses Nx generator to scaffold a host shell application and two remote applications in the specified directory using React and Webpack. The --remotes flag specifies remote app names; --directory gives directory for the shell. Prerequisites: Nx workspace with @nx/react installed.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/nx-mf-app.mdx#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx nx g @nx/react:host shell --remotes=remote1,remote2 --directory=apps/shell\n```\n\n----------------------------------------\n\nTITLE: Starting MobileCart Remote on iOS Platform - Bash\nDESCRIPTION: This command launches the dev server for the 'mobile-cart' remote, configured for iOS, within a Zephyr Cloud monorepo. It assumes prior build and deployment of dependent remotes such as MobileCheckout. Environment variable `ZC=1` enables Zephyr-specific features, and `--platform ios` restricts the build to iOS. Input: starts mobile-cart; Output: iOS development server for the cart screen, resolving module federated dependencies. Constraints: correct workspace context required.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/components/zephyr/repack/forked-example.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nZC=1 pnpm --filter MobileCart run start --platform ios\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for Shell Application with Zephyr Plugin - TypeScript\nDESCRIPTION: Sets up the development Webpack configuration for the shell application using Nx, with React, Module Federation, and Zephyr plugins. Dependencies: @nx/webpack, @nx/react, @nx/react/module-federation, zephyr-webpack-plugin, and a local baseConfig. Exports a composed Webpack config object using composePlugins. Input: Nx build options/context; Output: final Webpack config.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/nx-mf-app.mdx#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { composePlugins, withNx, ModuleFederationConfig } from '@nx/webpack';\nimport { withReact } from '@nx/react';\nimport { withModuleFederation } from '@nx/react/module-federation';\n\nimport baseConfig from './module-federation.config';\nimport { withZephyr } from 'zephyr-webpack-plugin';\n\nconst config: ModuleFederationConfig = {\n  ...baseConfig,\n};\n\n// Nx plugins for webpack to build config object from Nx options and context.\nexport default composePlugins(\n  withNx(),\n  withReact(),\n  withModuleFederation(config),\n  withZephyr(),\n  (config) => {\n    return config;\n  }\n);\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite Host with vite-plugin-zephyr (TypeScript)\nDESCRIPTION: Example `vite.config.ts` demonstrating how to configure a Vite host application for Module Federation using the `withZephyr` helper from `vite-plugin-zephyr`. It defines the host's name, filename, remotes (consuming Vite, Webpack, and Rspack remotes), shared dependencies (React, React-DOM), and integrates with other plugins like `@vitejs/plugin-react` and `svgr`. Includes necessary build configurations for target environment and module preloading.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/vite-rspack-webpack-mf.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vite';\nimport react from '@vitejs/plugin-react';\nimport { withZephyr } from 'vite-plugin-zephyr';\n\nconst mfConfig = {\n  name: 'vite-host',\n  filename: 'remoteEntry.js',\n  remotes: {\n    'vite-remote': {\n      entry: 'http://localhost:5174/remoteEntry.js',\n      type: 'module',\n    },\n    vite_webpack: {\n      entry: 'http://localhost:8080/remoteEntry.js',\n      type: 'var',\n    },\n    vite_rspack: {\n      entry: 'http://localhost:8081/remoteEntry.js',\n      type: 'var',\n    },\n  },\n  shared: {\n    react: {\n      singleton: true,\n    },\n    'react-dom': {\n      singleton: true,\n    },\n  },\n};\n\nexport default defineConfig({\n  plugins: [\n    react(), \n    withZephyr({ mfConfig }), // sequence matters\n    svgr({\n        svgrOptions: {\n          // svgr options\n        },\n      }),\n  ],\n  build: {\n    target: 'chrome89',\n    modulePreload: {\n    // This is important if you have other plugins like `svgr` that are handling transformation of code. \n        resolveDependencies: (_, deps: string[]) => {\n          // Only preload React packages and non-federated modules\n          return deps.filter((dep) => {\n            const isReactPackage = dep.includes('react') || dep.includes('react-dom');\n            const isNotRemoteEntry = !dep.includes('remoteEntry.js');\n\n            return isReactPackage && isNotRemoteEntry;\n          });\n        },\n      },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Selecting Project Type in create-mf-app\nDESCRIPTION: Illustrates the prompt within `create-mf-app` where the user selects the type of project to create, such as an 'Application', 'API Server', or 'Library'.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/general/create-mf-app.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n? Project Type: (Use arrow keys)\n❯ Application\n  API Server\n  Library\n```\n\n----------------------------------------\n\nTITLE: Add Package.json with Name and Version\nDESCRIPTION: This JSON snippet describes the structure of a `package.json` file that is required in each application (hosts and remotes). It includes the 'name' and 'version' fields, which are necessary for Zephyr to correctly map the remote application's name. The name in `package.json` should match the name used in the Module Federation configuration. The version is essential for Zephyr.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/how-to/migrate-nx-webpack-to-rspack.mdx#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"host\", \n    \"version\": \"0.0.0\" // Versioning depending on you, it's a required field for Zephyr \n}\n```\n\n----------------------------------------\n\nTITLE: Starting MobileInventory Remote on iOS Platform - Bash\nDESCRIPTION: This snippet runs the development server for the 'mobile-inventory' remote on the iOS platform, using the Zephyr Cloud tooling stack. The environment variable `ZC=1` ensures Zephyr deployment logic is active. The command expects a functional pnpm setup, workspace referencing MobileInventory, and any upstream remotes to be already built. Input: none directly; Output: inventory module available for iOS development.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/components/zephyr/repack/forked-example.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nZC=1 pnpm --filter MobileInventory run start --platform ios\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite Remote Application with Zephyr (TypeScript)\nDESCRIPTION: Example `vite.config.ts` for a Vite remote (Micro-Frontend) application integrated with Zephyr using `withZephyr`. Defines the remote's unique name, entry point filename (`remoteEntry.js`), exposes the './Button' module, and specifies shared dependencies ('react', 'react-dom'). Includes build target setting and experimental relative path generation for built URLs.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/vite-rspack-webpack-mf.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vite';\nimport react from '@vitejs/plugin-react';\nimport { withZephyr } from 'vite-plugin-zephyr';\n\nconst mfConfig = {\n  name: 'vite-remote',\n  filename: 'remoteEntry.js',\n  exposes: {\n    './Button': './src/Button',\n  },\n  shared: ['react', 'react-dom'],\n};\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [\n    react(), \n    withZephyr({ mfConfig })\n  ],\n  experimental: {\n    renderBuiltUrl() {\n      return { relative: true };\n    },\n  },\n  build: {\n    target: 'chrome89',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Production Webpack for Shell Application with Zephyr - TypeScript\nDESCRIPTION: Defines the production Webpack configuration for the shell application in an Nx workspace with Zephyr plugin integration. Extends the baseConfig and specifies production remotes as URLs. Requires all dev dependencies from Nx, React, Module Federation, and zephyr-webpack-plugin. Outputs a composed plugin-based final config for optimized production builds.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/nx-mf-app.mdx#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { composePlugins, withNx } from '@nx/webpack';\nimport { withReact } from '@nx/react';\nimport { withModuleFederation } from '@nx/react/module-federation';\nimport { ModuleFederationConfig } from '@nx/webpack';\n\nimport baseConfig from './module-federation.config';\nimport { withZephyr } from 'zephyr-webpack-plugin';\n\nconst prodConfig: ModuleFederationConfig = {\n  ...baseConfig,\n  /*\n   * Remote overrides for production.\n   * Each entry is a pair of a unique name and the URL where it is deployed.\n   *\n   * e.g.\n   * remotes: [\n   *   ['app1', 'http://app1.example.com'],\n   *   ['app2', 'http://app2.example.com'],\n   * ]\n   *\n   * You can also use a full path to the remoteEntry.js file if desired.\n   *\n   * remotes: [\n   *   ['app1', 'http://example.com/path/to/app1/remoteEntry.js'],\n   *   ['app2', 'http://example.com/path/to/app2/remoteEntry.js'],\n   * ]\n   */\n  remotes: [\n    ['remote1', 'http://localhost:4201/'],\n    ['remote2', 'http://localhost:4202/'],\n  ],\n};\n\n// Nx plugins for webpack to build config object from Nx options and context.\nexport default composePlugins(\n  withNx(),\n  withReact(),\n  withModuleFederation(prodConfig),\n  withZephyr(),\n  (config) => {\n    return config;\n  }\n);\n\n```\n\n----------------------------------------\n\nTITLE: Running and Bundling MobileHost Application for iOS - Bash\nDESCRIPTION: This snippet bundles and launches the 'mobile-host' application for iOS within the Zephyr Cloud federated architecture. The command sets `ZC=1` to enable Zephyr-specific deployment hooks and uses pnpm to filter for the MobileHost workspace and run the iOS start script. Dependencies include all remotes being built and deployed beforehand. Output: the host app runs in an iOS emulator/device. Limitation: Intended for completed, staged setups.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/components/zephyr/repack/forked-example.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nZC=1 pnpm --filter MobileHost run ios\n```\n\n----------------------------------------\n\nTITLE: Configuring Cloudflare API Token Permissions\nDESCRIPTION: Specifies the required permissions for a Cloudflare custom API token used for Zephyr integration. The token needs 'Edit' permissions for Account-level resources (Worker KV Storage, Worker Scripts, Cloudflare Pages) and Zone-level resources (Worker Routes) associated with the specific zone being used.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/cloud/cloudflare.mdx#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n| Resource |   Resource Type   | Permission |\n| :------- | :---------------: | :--------: |\n| Account  | Worker KV Storage |    Edit    |\n| Account  |  Worker Scripts   |    Edit    |\n| Account  | Cloudflare Pages  |    Edit    |\n| Zone     |   Worker Routes   |    Edit    |\n```\n\n----------------------------------------\n\nTITLE: Building remote1 for Zephyr deployment using Nx CLI\nDESCRIPTION: This snippet runs a build command for the remote1 application using Nx CLI. It assumes the project is configured with Nx workspace and that remote1 is a defined application target. This step compiles the remote1 application, preparing it for deployment as part of the Micro-Frontend architecture. Dependencies include Nx CLI and proper project setup.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/migrate-nx-webpack-to-rspack.mdx#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpx nx run remote1:build\n```\n\n----------------------------------------\n\nTITLE: Configuring Zephyr Plugin in modern.config.ts\nDESCRIPTION: This TypeScript code configures the Zephyr plugin within a Modern.js project. It imports necessary modules and defines the plugin configuration, including settings for `html`, `source`, and `output` which are prerequisites for the Zephyr plugin. Requires Modern.js project setup and zephyr-modernjs-plugin installed.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/modernjs.mdx#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { appTools, defineConfig } from '@modern-js/app-tools';\nimport { withZephyr } from 'zephyr-modernjs-plugin';\n\nexport default defineConfig({\n  html: {\n    outputStructure: 'flat',\n  },\n  source: {\n    mainEntryName: 'index',\n  },\n  output: {\n    distPath: {\n      html: './',\n    },\n  },\n  plugins: [\n    appTools({\n      bundler: 'rspack', // Or 'webpack'\n    }),\n    withZephyr(),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Remote 1 Build with Watch Mode\nDESCRIPTION: This command initiates the build process for the `remote1` application using the Nx build tool, with the `--watch` flag enabled for continuous monitoring and automatic rebuilding upon detecting changes. This command assumes that Nx is installed and configured within the project, specifically for building remote applications.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/nx-mf-app.mdx#_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nnpx nx build remote1 --watch\n```\n\n----------------------------------------\n\nTITLE: Importing Steps component from theme library\nDESCRIPTION: This snippet imports the Steps component from '@theme', which likely provides a visual step-by-step guidance UI for debugging or procedures. It helps guide users through troubleshooting steps.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze20010.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Steps } from '@theme';\n```\n\n----------------------------------------\n\nTITLE: Using nvm to set node version\nDESCRIPTION: This snippet demonstrates how to use Node Version Manager (nvm) to switch to a specific Node.js version (20). This ensures the project uses a compatible Node.js environment as a prerequisite for Zephyr Cloud.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/existing-app.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnvm use 20 \n```\n\n----------------------------------------\n\nTITLE: Adding Git Remote Origin Manually\nDESCRIPTION: Manually adds a remote repository URL (e.g., on GitHub) as the 'origin' for the local Git repository using `git remote add origin`. Replace 'User' and 'UserRepo' with actual GitHub username and repository name. Zephyr requires a Git origin.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/general/create-mf-app.mdx#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add origin https://github.com/User/UserRepo.git\n```\n\n----------------------------------------\n\nTITLE: Creating Remote2 package.json for Zephyr Integration - JSON\nDESCRIPTION: Provides the minimal package.json for remote2 required by Zephyr Cloud to resolve unique application name. Includes version and name. Dependencies can be added as needed.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/nx-mf-app.mdx#_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"remote2\", \n  \"version\": \"0.0.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Use specific Node version with nvm\nDESCRIPTION: This command uses Node Version Manager (nvm) to switch to Node version 20. This ensures the project is running on the correct Node version as required by the prerequisites.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/react-rspack-nx.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnvm use 20 \n```\n\n----------------------------------------\n\nTITLE: Running Only MobileHost Application on iOS - Bash\nDESCRIPTION: This command starts only the host application ('mobile-host') dev server for iOS, bypassing the remotes. It uses Zephyr deployment configuration (`ZC=1`) and targets the iOS platform. Used for standalone development or troubleshooting host functionality without spinning up all remotes. Requires remotes to be built if federated runtime is expected. Output: mobile-host dev server running for iOS.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/components/zephyr/repack/forked-example.mdx#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nZC=1 pnpm --filter MobileHost run start --platform ios\n```\n\n----------------------------------------\n\nTITLE: Adding Zephyr plugin to Vite configuration in TypeScript\nDESCRIPTION: This code snippet modifies the Vite configuration file to include the Zephyr plugin. It imports 'withZephyr' and adds it to the plugins array, enabling Zephyr features in the build process.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/react-vite.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { defineConfig } from 'vite';\nimport react from '@vitejs/plugin-react';\nimport { withZephyr } from 'vite-plugin-zephyr'; // Add this line\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [\n    react(),\n    withZephyr(), // Add this line\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Clearing Local Zephyr Cache (Shell)\nDESCRIPTION: Provides the shell command to recursively force-remove the local Zephyr configuration and cache directory (`~/.zephyr`). This step is recommended when troubleshooting deployment issues, particularly if migrating an application previously deployed using Zephyr's managed cloud.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/cloud/cloudflare.mdx#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nrm -rf ~/.zephyr\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Username via Terminal in Bash\nDESCRIPTION: This Bash snippet sets the global Git username using the 'git config' command. It is necessary to provide a valid username for local Git configuration, which Zephyr uses to correlate builds and authentication information. Replace \"My Name\" with the actual username; ensure you have Git installed and proper permissions.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze10015.mdx#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ngit config --global user.name = \"My Name\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Error Information with React Component\nDESCRIPTION: This snippet renders the 'ErrorInfo' React component with a specific error code 'ZE20027' to display detailed error information within the UI. It assumes React environment and dependency on the imported component.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze20027.mdx#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n<ErrorInfo code=\"ZE20027\" terminal />\n```\n\n----------------------------------------\n\nTITLE: Installing Zephyr Webpack Plugin - Bash\nDESCRIPTION: Installs the zephyr-webpack-plugin into the Nx workspace using npm. Ensures Zephyr integration for use with Webpack. Requires npm to be available and modifies package.json dependencies.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/nx-mf-app.mdx#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm install zephyr-webpack-plugin@latest\n```\n\n----------------------------------------\n\nTITLE: End-to-End Test Runner Selection in Nx CLI - Terminal Output\nDESCRIPTION: Shows CLI prompt for selecting an E2E test runner, with options including cypress, playwright, or none. This snippet gives context on toolchain setup and does not require action.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/nx-mf-app.mdx#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n? Which E2E test runner would you like to use? …\ncypress\nplaywright\nnone\n```\n\n----------------------------------------\n\nTITLE: Defining HTML Entry Point (src/index.html) (HTML)\nDESCRIPTION: Sets up the basic HTML file (`src/index.html`) which serves as the entry point for the Parcel application. It includes a root div element (`<div id=\"root\">`) where the React app will be mounted and links the main TypeScript module (`./index.tsx`).\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/parcel-react.mdx#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>My Parcel App</title>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n    <script type=\"module\" src=\"./index.tsx\"></script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Installing Zephyr Webpack Plugin via npm\nDESCRIPTION: Installs the `zephyr-webpack-plugin` package as a development dependency using npm within the host application's directory (`create-mf-app-rspack-host`). This plugin is necessary for Zephyr integration.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/general/create-mf-app.mdx#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncd create-mf-app-rspack-host\nnpm install zephyr-webpack-plugin@latest --save\n```\n\n----------------------------------------\n\nTITLE: Installing zephyr-webpack-plugin for Webpack/Rspack (Shell)\nDESCRIPTION: Installs the `zephyr-webpack-plugin` npm package using npm. This plugin is used for integrating Webpack or Rspack-based applications with Zephyr Cloud for Module Federation management.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/vite-rspack-webpack-mf.mdx#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm i zephyr-webpack-plugin@latest\n```\n\n----------------------------------------\n\nTITLE: Remove Local Configuration - Bash\nDESCRIPTION: This Bash command removes the local Zephyr configuration directory `~/.zephyr`. This step may be necessary to resolve issues related to login or configuration problems. The command uses `rm -rf` to recursively remove the directory and its contents.  The only dependency is a system with bash installed and the directory must exist.  The command does not provide an output, it executes a deletion.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze10020.mdx#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nrm -rf ~/.zephyr\n```\n\n----------------------------------------\n\nTITLE: Building and Running the iOS App (Bash)\nDESCRIPTION: This bash command builds and runs the React Native application on the iOS simulator. It relies on the configuration defined in the `package.json` file.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/react-native/configuring-remote.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run ios\n```\n\n----------------------------------------\n\nTITLE: Importing Error Message Resolver in TypeScript\nDESCRIPTION: This snippet imports the getErrorMessage function from a local TypeScript utility module, enabling the retrieval of human-readable error messages based on error codes. It requires a valid path to the error-helpers module. The key parameter is an error code (such as 'ZE10029'), and the output is a string with the error's textual message. The resolved message is intended for presentation in application UI or logs.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze10029.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { getErrorMessage } from '../../lib/error-helpers.ts';\n```\n\n----------------------------------------\n\nTITLE: Importing getErrorMessage function from helper library in TypeScript\nDESCRIPTION: This snippet imports a utility function used to retrieve error messages based on error codes, facilitating consistent error handling. It requires the '../../lib/error-helpers.ts' module.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze20010.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { getErrorMessage } from '../../lib/error-helpers.ts';\n```\n\n----------------------------------------\n\nTITLE: Installing Module Federation Enhanced\nDESCRIPTION: This command installs the `@module-federation/enhanced` library using npm. This library is required for the runtime to function properly with Module Federation.  The installation requires Node.js and npm to be available in your project environment.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/react-native/configuring-host.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @module-federation/enhanced\n```\n\n----------------------------------------\n\nTITLE: Creating Initial Git Commit\nDESCRIPTION: Creates the first commit in the Git repository using `git commit -m`. The commit includes all staged files and a message describing the commit, here indicating the initial setup with Zephyr.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/general/create-mf-app.mdx#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -m \"Initial commit with Zephyr\"\n```\n\n----------------------------------------\n\nTITLE: Webpack Configuration for Module Federation (TypeScript)\nDESCRIPTION: This webpack configuration file sets up a module federation remote application. It configures the output path, resolves extensions, sets up a development server with hot reloading and compilation status messages, defines module rules for various file types (SVG, PNG, JS, CSS, TS/JSX), and configures plugins like ModuleFederationPlugin, HtmlWebPackPlugin, and Dotenv. The `withZephyr` function from `zephyr-webpack-plugin` is also used.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/vite-rspack-webpack-mf.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst HtmlWebPackPlugin = require('html-webpack-plugin');\n//const ModuleFederationPlugin = require('webpack/lib/container/ModuleFederationPlugin');\nconst path = require('path');\nconst Dotenv = require('dotenv-webpack');\nconst { withZephyr } = require('zephyr-webpack-plugin');\nconst { ModuleFederationPlugin } = require('@module-federation/enhanced/webpack');\n\nconst deps = require('./package.json').dependencies;\n\nconst printCompilationMessage = require('./compilation.config.js');\n\nmodule.exports = (_, argv) =>\n  withZephyr()({\n    output: {\n      publicPath: 'auto',\n    },\n\n    resolve: {\n      extensions: ['.tsx', '.ts', '.jsx', '.js', '.json'],\n    },\n\n    devServer: {\n      port: 8080,\n      historyApiFallback: true,\n      watchFiles: [path.resolve(__dirname, 'src')],\n      onListening: function (devServer) {\n        const port = devServer.server.address().port;\n\n        printCompilationMessage('compiling', port);\n\n        devServer.compiler.hooks.done.tap('OutputMessagePlugin', (stats) => {\n          setImmediate(() => {\n            if (stats.hasErrors()) {\n              printCompilationMessage('failure', port);\n            } else {\n              printCompilationMessage('success', port);\n            }\n          });\n        });\n      },\n    },\n\n    module: {\n      rules: [\n        {\n          test: /\\.(svg|png)$/,\n          type: 'asset',\n        },\n        {\n          test: /\\.m?js/,\n          type: 'javascript/auto',\n          resolve: {\n            fullySpecified: false,\n          },\n        },\n        {\n          test: /\\.(css|s[ac]ss)$/i,\n          use: ['style-loader', 'css-loader', 'postcss-loader'],\n        },\n        {\n          test: /\\.(ts|tsx|js|jsx)$/,\n          exclude: /node_modules/,\n          use: {\n            loader: 'babel-loader',\n          },\n        },\n      ],\n    },\n\n    plugins: [\n      new ModuleFederationPlugin({\n        name: 'vite_webpack',\n        filename: 'remoteEntry.js',\n        exposes: {\n          './Image': './src/Image',\n        },\n        shared: {\n          react: {\n            singleton: true,\n          },\n          'react-dom': {\n            singleton: true,\n          },\n        },\n      }),\n      new HtmlWebPackPlugin({\n        template: './src/index.html',\n      }),\n      new Dotenv(),\n    ],\n  });\n\n```\n\n----------------------------------------\n\nTITLE: Serve host application with Nx\nDESCRIPTION: This command serves the host application using the Nx serve command. Nx automatically starts the remote applications as well.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/react-rspack-nx.mdx#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnx run host:serve\n```\n\n----------------------------------------\n\nTITLE: Configure Zephyr without Nx\nDESCRIPTION: This code snippet demonstrates how to integrate Zephyr into a non-Nx project's `webpack.config.js` file. It uses the `withZephyr` function from the `zephyr-webpack-plugin` to wrap the existing configuration object.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/existing-app.mdx#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n- module.exports = {/* the existing config object */};\n+ const {withZephyr} = require('zephyr-webpack-plugin');\n+ module.exports = withZephyr()({/* the existing config object */});\n```\n\n----------------------------------------\n\nTITLE: Importing Resource Components in React\nDESCRIPTION: This snippet imports two React components, `VideoResource` and `BlogPosts`, from their respective file paths. These components are assumed to be responsible for displaying video and blog post resources.  No specific dependencies are mentioned other than the existence of the imported files within the project structure. The output is the availability of the imported components for use in the document.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/learning/resources.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { VideoResource, BlogPosts } from '../../components/resource';\n```\n\n----------------------------------------\n\nTITLE: Add React support with Nx\nDESCRIPTION: This command adds React support to the Nx workspace and generates a host application with two remote applications (remote1, remote2) using Rspack as the bundler.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/react-rspack-nx.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx nx add @nx/react\nnpx nx g @nx/react:host --remotes=remote1,remote2 --bundler=rspack --directory=apps/host \n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Zephyr Plugin (npm)\nDESCRIPTION: These commands install project dependencies and the zephyr-modernjs-plugin using npm. It's crucial after creating a project to populate the `node_modules` folder with required libraries. Requires npm and an existing project.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/modernjs.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncd your-project-name\nnpm install\nnpm install zephyr-modernjs-plugin@latest\n```\n\n----------------------------------------\n\nTITLE: Configuring Application Name in create-mf-app\nDESCRIPTION: Shows an example prompt from the `create-mf-app` interactive setup, asking the user to provide a name for the host application. It's recommended to choose names reflecting the role (host or remote).\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/general/create-mf-app.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n? Pick the name of your app: (host)\n```\n\n----------------------------------------\n\nTITLE: Creating Nx Workspace in Terminal - Bash\nDESCRIPTION: Initializes a new Nx monorepo named 'myorg' using the npx tool and prompts the user through basic configuration. Requires npx and internet connectivity to fetch the latest Nx CLI. Takes the organization/project name as a parameter and creates a directory with initial setup.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/nx-mf-app.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-nx-workspace@latest myorg\n```\n\n----------------------------------------\n\nTITLE: Configure Zephyr with Nx\nDESCRIPTION: This code snippet demonstrates how to integrate Zephyr into an Nx project's `webpack.config.js` file. It uses the `withZephyr` function from the `zephyr-webpack-plugin` to wrap the existing configuration and should be placed last in the composePlugins.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/existing-app.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n+ const {withZephyr} = require('zephyr-webpack-plugin');\nexport default composePlugins(\n    withNx(),\n    withReact(),\n    withModuleFederation(config),\n+   withZephyr(),\n    (config)=>{\n    return config;\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Error Information using React Components (JSX)\nDESCRIPTION: Uses JSX to render error information. It dynamically fetches the error message using `getErrorMessage('ZE20021')` (likely for a heading) and displays detailed error info using the `<ErrorInfo>` component, passing the specific `code` 'ZE20021' and a `terminal` prop for styling. This structure renders the main content for the specific error page.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze20021.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n# {getErrorMessage('ZE20021')}\n\n<ErrorInfo code=\"ZE20021\" terminal />\n```\n\n----------------------------------------\n\nTITLE: Markdown info block explaining common build error\nDESCRIPTION: Provides an informational block describing the nature of the ZE10019 error, indicating its frequency during build processes, and offering an overview of the troubleshooting context.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze10019.mdx#_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n::: info\n\nThis is one of the most common error during build.\n\n:::\n\n```\n\n----------------------------------------\n\nTITLE: Adding Remotes in Module Federation Plugin\nDESCRIPTION: This code demonstrates how to add remotes to the host application's Module Federation configuration within the `rspack.config.mjs` file.  It specifies the remote name and the URL for the remote's container.  The URL path should reflect the build target (e.g., `ios` or `android`).\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/react-native/configuring-host.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nremotes: {\n  Cart: `Cart@http://localhost:9000/ios/Cart.container.js.bundle`,\n},\n```\n\n----------------------------------------\n\nTITLE: Remote2 package.json example\nDESCRIPTION: This JSON snippet represents the contents of the `package.json` file for the remote2 application. It defines the application's name and version.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/react-rspack-nx.mdx#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"remote2\",\n  \"version\": \"0.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Environment Variable in GitHub Actions YAML\nDESCRIPTION: This YAML snippet defines an environment variable `ZE_SECRET_TOKEN` in a GitHub Actions workflow by mapping it to a secret stored in the repository settings under `ZEPHYR_AUTH_TOKEN`. This is essential for authenticating the CI build process with Zephyr without exposing sensitive credentials in the workflow file. The snippet assumes that the secret token has already been created and added in GitHub's secrets management.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/how-to/github-automations.mdx#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nenv:\n  ZE_SECRET_TOKEN: ${{ secrets.ZEPHYR_AUTH_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Parcel Zephyr Reporter (.parcelrc) (JSON)\nDESCRIPTION: Configures Parcel by creating or editing the `.parcelrc` file in the project root. It extends the default Parcel configuration and adds `parcel-reporter-zephyr` to the list of reporters, enabling Zephyr integration during the build process.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/parcel-react.mdx#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"extends\": \"@parcel/config-default\",\n  \"reporters\": [\n    // ... other reporters,\n    \"parcel-reporter-zephyr\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Port Number in create-mf-app\nDESCRIPTION: Demonstrates the prompt from `create-mf-app` for setting the development server port number, showing the default value (8080).\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/general/create-mf-app.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n? Port number: (8080)\n```\n\n----------------------------------------\n\nTITLE: Rendering ErrorInfo Component for ZE10029 in React (JSX)\nDESCRIPTION: This snippet places an ErrorInfo React component in the UI, pre-configured to show details for error code ZE10029 with the 'terminal' property set. It expects the ErrorInfo component to handle a string code prop and a boolean terminal prop, altering its rendering accordingly. The component displays technical error information appropriate for user support scenarios.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze10029.mdx#_snippet_3\n\nLANGUAGE: TSX\nCODE:\n```\n<ErrorInfo code=\"ZE10029\" terminal />\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite Host with Official Vite Plugin and Zephyr (TypeScript)\nDESCRIPTION: Alternative `vite.config.ts` for a Vite host application using the official `@module-federation/vite` plugin alongside `withZephyr()` for Zephyr integration. Module Federation options (`mfConfig`) are defined and passed to the `federation` plugin. `withZephyr()` is called without arguments in this setup. Requires setting the build target.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/vite-rspack-webpack-mf.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vite';\nimport react from '@vitejs/plugin-react';\nimport { withZephyr, type ModuleFederationOptions } from 'vite-plugin-zephyr';\nimport { federation } from '@module-federation/vite';\nconst mfConfig: ModuleFederationOptions = {\n  name: 'vite-host',\n  filename: 'remoteEntry.js',\n  remotes: {\n    'vite-remote': {\n      name: 'vite-remote',\n      entry: 'http://localhost:5174/remoteEntry.js',\n      type: 'module',\n    },\n    vite_webpack: {\n      name: 'vite_webpack',\n      entry: 'http://localhost:8080/remoteEntry.js',\n      type: 'var',\n    },\n    vite_rspack: {\n      name: 'vite_rspack',\n      entry: 'http://localhost:8081/remoteEntry.js',\n      type: 'var',\n    },\n  },\n  shared: {\n    react: {\n      singleton: true,\n    },\n    'react-dom': {\n      singleton: true,\n    },\n  },\n};\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    federation({ ...mfConfig }),\n    withZephyr(),\n  ],\n  build: {\n    minify: false,\n    target: 'chrome89',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Remote1 package.json for Zephyr Integration - JSON\nDESCRIPTION: Specifies the package.json for remote1, required for application name resolution in Zephyr Cloud. Contains unique name and version for the application. Modify as needed for specific dependencies or custom configuration.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/nx-mf-app.mdx#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"remote1\", \n  \"version\": \"0.0.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Parcel Project Setup (Bash)\nDESCRIPTION: Manually creates a project directory (`my-parcel-app`), initializes a package manager (npm, yarn, or pnpm), and installs necessary dependencies including Parcel, the Zephyr reporter (`parcel-reporter-zephyr`), React, TypeScript, and related types.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/parcel-react.mdx#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nmkdir my-parcel-app\ncd my-parcel-app\nnpm init -y\nnpm install parcel parcel-reporter-zephyr@latest react react-dom @types/react @types/react-dom typescript\n```\n\nLANGUAGE: Bash\nCODE:\n```\nmkdir my-parcel-app\ncd my-parcel-app\nyarn init -y\nyarn add parcel parcel-reporter-zephyr@latest react react-dom @types/react @types/react-dom typescript\n```\n\nLANGUAGE: Bash\nCODE:\n```\nmkdir my-parcel-app\ncd my-parcel-app\npnpm init\npnpm add parcel parcel-reporter-zephyr@latest react react-dom @types/react @types/react-dom typescript\n```\n\n----------------------------------------\n\nTITLE: Enabling Top Level Await in Vite Configuration (TypeScript)\nDESCRIPTION: Illustrates configuration adjustments in `vite.config.ts` to enable top-level await, which is necessary for `vite-plugin-zephyr`. This can be achieved by setting `build.target` to 'chrome89' or higher, or by using the `vite-plugin-top-level-await` plugin if targeting older environments. Also highlights the importance of plugin sequence, placing `withZephyr` after framework plugins like `react()` but before others.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/vite-rspack-webpack-mf.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n  plugins: [\n    react(),\n    withZephyr({\n      name: 'viteViteHost',\n      remotes: {\n       ...\n      },\n      filename: 'remoteEntry-[hash].js',\n      manifest: true,\n      shared: {\n        vue: {},\n        'react/': {\n          requiredVersion: '18',\n        },\n        'react-dom': {},\n      ...\n      },\n      runtimePlugins: ['./src/mfPlugins'],\n    }),\n    // If you set build.target: \"chrome89\", you can remove this plugin\n    false && topLevelAwait(),\n  ],\n    build: {\n    target: 'chrome89',\n  },\n```\n\n----------------------------------------\n\nTITLE: Building Modern.js Application (npm)\nDESCRIPTION: This command uses npm to build the Modern.js application, generating the production-ready assets. It triggers the build process defined in your `package.json` file. Requires a Modern.js project and installed dependencies.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/modernjs.mdx#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Building Remote 2 with Nx Run CLI\nDESCRIPTION: This command triggers the build process for the 'remote2' module in production mode with continuous watching enabled using `nx run`. It watches for changes to automatically rebuild and deploy the application.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/nx-mf-app.mdx#_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\n> nx run remote2:build:production --watch\n```\n\n----------------------------------------\n\nTITLE: Example Project Structure for ZE10010 Resolution\nDESCRIPTION: This snippet illustrates a typical project directory structure, specifically for a React/Vite/TypeScript application, showing the location of key files. It demonstrates a structure where the `package.json` file and the bundler configuration file (e.g., `vite.config.ts`) are located at the root level. This configuration is one of the primary locations Zephyr checks when searching for `package.json`, helping to prevent the ZE10010 error.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze10010.mdx#_snippet_0\n\nLANGUAGE: structure\nCODE:\n```\n.\n├── README.md\n├── index.html\n├── package-lock.json\n├── package.json\n├── public\n│   └── vite.svg\n├── src\n│   ├── App.css\n│   ├── App.tsx\n│   ├── assets\n│   │   └── react.svg\n│   ├── index.css\n│   ├── main.tsx\n│   └── vite-env.d.ts\n├── tsconfig.json\n├── tsconfig.node.json\n└── vite.config.ts\n```\n\n----------------------------------------\n\nTITLE: Fixing Missing Git Remote Origin Error\nDESCRIPTION: Provides the Git command (`git remote add origin`) to set the remote origin URL, resolving one of the potential issues mentioned in the configuration error message. Replace the example URL with the actual repository URL.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/general/create-mf-app.mdx#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add origin git@github.com:User/UserRepo.git\n```\n\n----------------------------------------\n\nTITLE: Remote1 package.json example\nDESCRIPTION: This JSON snippet represents the contents of the `package.json` file for the remote1 application. It defines the application's name and version.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/react-rspack-nx.mdx#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"remote1\",\n  \"version\": \"0.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Application package.json for Zephyr Integration - JSON\nDESCRIPTION: Defines the minimum required package.json for a shell application under apps/shell, crucial for Zephyr Cloud integration. Specifies a unique name and version. No dependencies are included by default; add more as needed.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/nx-mf-app.mdx#_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"shell\", \n  \"version\": \"0.0.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Building Modern.js Application (pnpm)\nDESCRIPTION: This command utilizes pnpm to build the Modern.js application, producing deployable artifacts.  It triggers the build commands defined in the project's configuration. Requires pnpm to be correctly installed.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/modernjs.mdx#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Configure Rspack for Host Production\nDESCRIPTION: This code configures the production build for the host application within the Nx workspace, utilizing Rspack and the Zephyr plugin. It defines remote applications and specifies their URLs for deployment.  The code adapts the production build to use Rspack. The configuration includes the  `withZephyr` function to integrate Zephyr into the build process, alongside the  `withNx`,  `withReact`, and  `withModuleFederation` plugins.  The remote application URLs are defined here.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/how-to/migrate-nx-webpack-to-rspack.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// import { composePlugins, withNx } from '@nx/webpack';\n// import { withReact } from '@nx/react';\n// import { withModuleFederation } from '@nx/react/module-federation';\n// import { ModuleFederationConfig } from '@nx/webpack';\nimport { composePlugins, withNx, withReact } from '@nx/rspack';\nimport { withModuleFederation, ModuleFederationConfig } from '@nx/rspack/module-federation';\nimport { withZephyr } from 'zephyr-webpack-plugin';\n\nimport baseConfig from './module-federation.config';\n\nconst prodConfig: ModuleFederationConfig = {\n  ...baseConfig,\n  /*\n   * Remote overrides for production.\n   * Each entry is a pair of a unique name and the URL where it is deployed.\n   *\n   * e.g.\n   * remotes: [\n   *   ['app1', 'http://app1.example.com'],\n   *   ['app2', 'http://app2.example.com'],\n   * ]\n   *\n   * You can also use a full path to the remoteEntry.js file if desired.\n   *\n   * remotes: [\n   *   ['app1', 'http://example.com/path/to/app1/remoteEntry.js'],\n   *   ['app2', 'http://example.com/path/to/app2/remoteEntry.js'],\n   * ]\n   */\n  remotes: [\n    ['remote1', 'http://localhost:4201/'],\n    ['remote2', 'http://localhost:4202/'],\n  ],\n};\n// Nx plugins for webpack to build config object from Nx options and context.\n/**\n * DTS Plugin is disabled in Nx Workspaces as Nx already provides Typing support for Module Federation\n * The DTS Plugin can be enabled by setting dts: true\n * Learn more about the DTS Plugin here: https://module-federation.io/configure/dts.html\n */\nexport default composePlugins(\n  withNx(),\n  withReact(),\n  withModuleFederation(prodConfig, { dts: false }),\n  withZephyr()\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing and Configuring Git Repository\nDESCRIPTION: This set of bash commands initializes a Git repository, adds a remote origin, adds all files to the staging area, and commits the changes with an initial message. It is essential for version control and deploying the application. Requires Git to be installed.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/modernjs.mdx#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ngit init\ngit remote add origin <REMOTE_URL>\ngit add .\ngit commit -m \"Initial commit\"\n```\n\n----------------------------------------\n\nTITLE: Configure Rspack with Zephyr Plugin\nDESCRIPTION: This TypeScript code snippet demonstrates how to integrate the Zephyr plugin into the Rspack configuration for an Nx application. The `withZephyr()` function is added to the `composePlugins` call.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/react-rspack-nx.mdx#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { composePlugins, withNx, withReact } from '@nx/rspack';\nimport {\n  withModuleFederation,\n  ModuleFederationConfig,\n} from '@nx/rspack/module-federation';\nimport { withZephyr } from \"zephyr-rspack-plugin\"\n\nimport baseConfig from './module-federation.config';\n\nconst config: ModuleFederationConfig = {\n  ...baseConfig,\n};\n\n// Nx plugins for rspack to build config object from Nx options and context.\n/**\n * DTS Plugin is disabled in Nx Workspaces as Nx already provides Typing support for Module Federation\n * The DTS Plugin can be enabled by setting dts: true\n * Learn more about the DTS Plugin here: https://module-federation.io/configure/dts.html\n */\nexport default composePlugins(\n  withNx(),\n  withReact(),\n  withModuleFederation(config, { dts: false }),\n  withZephyr() // the plugin sequence in Nx matters. Do remember to put zephyr at the end of your config file. \n)\n```\n\n----------------------------------------\n\nTITLE: Remove Zephyr profile information\nDESCRIPTION: This command removes the local Zephyr profile information from the user's root directory.  This is useful for cleaning up local authorization data.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/react-rspack-nx.mdx#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nrm rf ~/.zephyr \n```\n\n----------------------------------------\n\nTITLE: Creating Modern.js Project with Zephyr CLI (pnpm)\nDESCRIPTION: This command utilizes pnpm to create a new Modern.js project using the `create-zephyr-apps` package.  This command leverages pnpm for project initialization and utilizes a temporary execution environment with `dlx`. It requires pnpm to be installed.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/modernjs.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm dlx create-zephyr-apps@latest\n```\n\n----------------------------------------\n\nTITLE: Importing Error Info React Component\nDESCRIPTION: This snippet imports the 'ErrorInfo' React component from a local component file, used to display error details in the UI. It assumes a React and TypeScript environment and depends on the component at '../../components/errors/info.tsx'.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze20027.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { ErrorInfo } from '../../components/errors/info.tsx';\n```\n\n----------------------------------------\n\nTITLE: Using nvm to specify node version\nDESCRIPTION: This command uses nvm (Node Version Manager) to switch to Node.js version 20.  It's a prerequisite for ensuring compatibility with the project's dependencies and build process.  Make sure nvm is installed before running this command.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/rolldown-react.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnvm use 20 \n```\n\n----------------------------------------\n\nTITLE: Configuring MiniApp Module Federation (Rspack JS)\nDESCRIPTION: Configures Rspack for the MiniApp using `@callstack/repack` and `zephyr-repack-plugin`. It sets up a Module Federation Plugin V2 named 'MiniApp', exposing the `./App` component and defining shared dependencies like 'react' and 'react-native' with singleton settings. This configuration is essential for the HostApp to consume the MiniApp's exposed modules.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/components/zephyr/repack/start-from-scratch.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport path from 'node:path';\nimport {fileURLToPath} from 'node:url';\nimport * as Repack from '@callstack/repack';\nimport {withZephyr} from 'zephyr-repack-plugin';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n\nconst STANDALONE = Boolean(process.env.STANDALONE);\n\n/**\n * Rspack configuration enhanced with Re.Pack defaults for React Native.\n *\n * Learn about Rspack configuration: https://rspack.dev/config/\n * Learn about Re.Pack configuration: https://re-pack.dev/docs/guides/configuration\n */\n\nexport default withZephyr()(env => {\n  const {platform, mode} = env;\n  return {\n    mode,\n    context: __dirname,\n    entry: './index.js',\n    resolve: {\n      ...Repack.getResolveOptions(),\n    },\n    output: {\n      uniqueName: 'react-native-mini-app',\n    },\n    module: {\n      rules: [\n        ...Repack.getJsTransformRules(),\n        ...Repack.getAssetTransformRules({inline: true}),\n      ],\n    },\n    plugins: [\n      new Repack.RepackPlugin(),\n      new Repack.plugins.ModuleFederationPluginV2({\n        name: 'MiniApp',\n        filename: 'MiniApp.container.js.bundle',\n        dts: false,\n        exposes: {\n          './App': './App.tsx',\n        },\n        shared: {\n          react: {\n            singleton: true,\n            version: '19.0.0',\n            eager: STANDALONE,\n          },\n          'react-native': {\n            singleton: true,\n            version: '0.78.0',\n            eager: STANDALONE,\n          },\n        },\n      }),\n      new Repack.plugins.HermesBytecodePlugin({\n        enabled: mode === 'production',\n        test: /\\.(js)?bundle$/,\n        exclude: /index.bundle$/,\n      }),\n    ],\n  };\n\n \n});\n\n```\n\n----------------------------------------\n\nTITLE: Importing Error Handling Utilities in TypeScript\nDESCRIPTION: Imports the getErrorMessage function from the error helpers module, which is used to generate error messages based on error codes. This utility supports structured error handling within the project.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze20019.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { getErrorMessage } from '../../lib/error-helpers.ts';\n```\n\n----------------------------------------\n\nTITLE: Creating Zephyr App with Parcel using CLI (Bash)\nDESCRIPTION: Uses the `create-zephyr-apps` CLI tool with different package managers (npm, yarn, pnpm) to scaffold a new project. Users should select Parcel when prompted by the CLI.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/parcel-react.mdx#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nnpx create-zephyr-apps@latest\n```\n\nLANGUAGE: Bash\nCODE:\n```\nyarn create zephyr-apps\n```\n\nLANGUAGE: Bash\nCODE:\n```\npnpm create zephyr-apps\n```\n\n----------------------------------------\n\nTITLE: Defining Basic React App Component (src/App.tsx) (TSX)\nDESCRIPTION: Defines a simple React functional component (`src/App.tsx`) named `App`. This component serves as the main application view, rendering a heading and a paragraph as placeholder content.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/parcel-react.mdx#_snippet_6\n\nLANGUAGE: TSX\nCODE:\n```\nimport React from 'react';\n\nexport default function App() {\n  return (\n    <div>\n      <h1>Hello from Parcel + Zephyr!</h1>\n      <p>Edit src/App.tsx to get started</p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Install Zephyr Rspack Plugin\nDESCRIPTION: This command installs the Zephyr Rspack plugin, which enables integration with Zephyr Cloud for deployment and management.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/react-rspack-nx.mdx#_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nnpm i zephyr-rspack-plugin@latest \n```\n\n----------------------------------------\n\nTITLE: Building Remote 1 with Nx CLI\nDESCRIPTION: This command triggers the build process for the 'remote1' module in production mode with continuous watching enabled. It uses the Nx CLI to manage the build process and automatically redeploys on changes.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/nx-mf-app.mdx#_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\n> nx run remote1:build:production --watch\n```\n\n----------------------------------------\n\nTITLE: Defining Build/Start Scripts in package.json (JSON)\nDESCRIPTION: Shows example `start` and `build` scripts within the `scripts` section of `package.json`. The `start` script uses Parcel to run a development server with the specified entry point (`src/index.html`), while the `build` script uses Parcel to create a production-ready build of the application.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/parcel-react.mdx#_snippet_9\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"scripts\": {\n    \"start\": \"parcel src/index.html\",\n    \"build\": \"parcel build src/index.html\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding React Support to Nx Workspace - Bash\nDESCRIPTION: Adds React framework support to the existing Nx workspace using nx CLI. Requires an active Nx workspace and network connection to resolve @nx/react and its dependencies. No customization is included by default.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/nx-mf-app.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpx nx add @nx/react\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Repository for Deployment (Bash)\nDESCRIPTION: Initializes a new git repository in the current folder, adds a remote origin URL (requires replacing the placeholder `<REMOTE_URL>` with the actual repository URL), stages all files, and creates an initial commit. This setup is a prerequisite for deploying the application with Zephyr.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/parcel-react.mdx#_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\ngit init\ngit remote add origin <REMOTE_URL>\ngit add .\ngit commit -m \"Initial commit\"\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Zephyr Plugin (yarn)\nDESCRIPTION: These commands install project dependencies and the zephyr-modernjs-plugin using yarn. It's essential after project creation to install the required libraries. Requires yarn and an existing project.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/modernjs.mdx#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncd your-project-name\nyarn\nyarn add zephyr-modernjs-plugin@latest\n```\n\n----------------------------------------\n\nTITLE: Using Node Version Manager (nvm) to Set Node Version - Bash\nDESCRIPTION: This snippet demonstrates how to switch the current Node.js version using nvm to version 20, which is a prerequisite for running the project. It requires nvm to be installed beforehand.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/turborepo-react.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnvm use 20 \n```\n\n----------------------------------------\n\nTITLE: Sample build output logs\nDESCRIPTION: This code snippet shows the typical terminal output after building the project, including module transformation, asset sizes, and Zephyr deployment status messages indicating successful uploads and deployment URLs.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/react-vite.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ react-vite-ts@0.0.0 build\n$ tsc && vite build\n\nThe CJS build of Vite's Node API is deprecated. See https://vitejs.dev/troubleshooting.html#vite-cjs-node-api-deprecated for more details.\nvite v5.2.13 building for production...\n✓ 34 modules transformed.\ndist/index.html                   0.46 kB │ gzip:  0.30 kB\ndist/assets/react-CHdo91hT.svg    4.13 kB │ gzip:  2.05 kB\ndist/assets/index-DiwrgTda.css    1.39 kB │ gzip:  0.72 kB\ndist/assets/index-DVoHNO1Y.js   143.36 kB │ gzip: 46.09 kB\n✓ built in 423ms\n[zephyr] You are already logged in\n[zephyr]: [react-vite-ts.react-vite-ts.username](id)[78]: uploaded local snapshot in 156ms\n[zephyr]: [react-vite-ts.react-vite-ts.username](id)[78]: uploading missing assets to zephyr (queued 4 out of 4)\n[zephyr]: [react-vite-ts.react-vite-ts.username](id)[78]: uploaded missing assets to zephyr (4 assets in 1009ms, 145.84kb)\n[zephyr]: [react-vite-ts.react-vite-ts.username](id)[78]: deploying to https://t_main_id-react-vite-t-309c6c-ze.valorkin.dev\n[zephyr]: [react-vite-ts.react-vite-ts.username](id)[78]: deploying to https://id_78-react-vite-ts-re-6d13dd-ze.valorkin.dev\n[zephyr]: [react-vite-ts.react-vite-ts.username](id)[78]: deploying to https://react-vite-ts-react-vite-ts-username-ze.valorkin.dev\n[zephyr]: [react-vite-ts.react-vite-ts.username](id)[78]: build deployed in 1067ms\n```\n\n----------------------------------------\n\nTITLE: Setting MiniApp React Native Scripts (JSON)\nDESCRIPTION: Defines `react-native` scripts for the MiniApp, including platform-specific start commands specifying port 9001. It also includes a `start:standalone` script for running the MiniApp independently on port 8081 and an `adbreverse` command for Android debugging, enabling core Zephyr features.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/components/zephyr/repack/start-from-scratch.mdx#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n    \"android\": \"react-native run-android\",\n    \"ios\": \"react-native run-ios\",\n    \"start:ios\": \"react-native start --port 9001 --platform ios\",\n    \"start:android\": \"react-native start --port 9001 --platform android\",\n    \"start:standalone\": \"STANDALONE=1 react-native start --port 8081\",\n    \"lint\": \"eslint .\",\n    \"test\": \"jest\",\n    \"pods:update\": \"(cd ios && bundle exec pod update)\",\n    \"adbreverse\": \"adb reverse tcp:9001 tcp:9001\"\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Manual Rolldown setup with npm\nDESCRIPTION: These commands manually create a Rolldown project, initialize it with npm, and install the necessary dependencies, including Rolldown, the Zephyr Rolldown plugin, React, and TypeScript types.  The `npm init -y` command creates a `package.json` file with default settings.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/rolldown-react.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmkdir my-rolldown-app\ncd my-rolldown-app\nnpm init -y\nnpm install rolldown zephyr-rolldown-plugin@latest react react-dom @types/react @types/react-dom typescript\n```\n\n----------------------------------------\n\nTITLE: Verifying Git Configuration via Bash Command\nDESCRIPTION: This bash snippet shows the command to list all Git configuration settings in the current project directory. It helps users verify presence and correctness of essential Git parameters such as username, email, and remote origin URL, which are critical for successful build and deployment processes in Zephyr.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze10016.mdx#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\ngit config --list\n```\n\n----------------------------------------\n\nTITLE: Creating Nx Workspace with Rspack Preset - Bash\nDESCRIPTION: Initializes a new Nx monorepo with the Rspack preset, suitable for projects preferring Rspack bundler over Webpack. Requires npx and optionally Rspack-related dependencies. Passes the --preset parameter to configure the workspace accordingly.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/nx-mf-app.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-nx-workspace@latest myorg --preset=@nx/rspack\n```\n\n----------------------------------------\n\nTITLE: Change Directory to Nx Workspace - Bash\nDESCRIPTION: Changes the current working directory to the 'myorg' directory created by Nx. No parameters or outputs. Ensures that subsequent commands operate within the correct workspace folder.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/nx-mf-app.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd myorg\n```\n\n----------------------------------------\n\nTITLE: Rebuilding the application with npm\nDESCRIPTION: Rebuilds the application to retry the deployment and potentially resolve the transient ZE20013 error.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze20013.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Manual Rolldown setup with yarn\nDESCRIPTION: These commands manually create a Rolldown project, initialize it with yarn, and install the necessary dependencies, including Rolldown, the Zephyr Rolldown plugin, React, and TypeScript types.  The `yarn init -y` command creates a `package.json` file with default settings.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/rolldown-react.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmkdir my-rolldown-app\ncd my-rolldown-app\nyarn init -y\nyarn add rolldown zephyr-rolldown-plugin@latest react react-dom @types/react @types/react-dom typescript\n```\n\n----------------------------------------\n\nTITLE: Integrating Zephyr with Rspack Configuration\nDESCRIPTION: Modifies the `rspack.config.js` file to integrate the Zephyr plugin. It involves importing `withZephyr` from `zephyr-webpack-plugin` and wrapping the existing Rspack configuration object with this function. Key lines for integration are highlighted.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/general/create-mf-app.mdx#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst rspack = require('@rspack/core')\nconst refreshPlugin = require('@rspack/plugin-react-refresh')\nconst isDev = process.env.NODE_ENV === 'development'\nconst path = require('path');\nconst { withZephyr } = require('zephyr-webpack-plugin')\n\nconst printCompilationMessage = require('./compilation.config.js');\n\n/**\n * @type {import('@rspack/cli').Configuration}\n */\nmodule.exports = withZephyr()({\n  context: __dirname,\n  entry: {\n    main: './src/index.ts',\n  },\n\n  devServer: {\n    port: 8080,\n    historyApiFallback: true,\n    watchFiles: [path.resolve(__dirname, 'src')],\n    onListening: function (devServer) {\n      const port = devServer.server.address().port\n\n      printCompilationMessage('compiling', port)\n\n      devServer.compiler.hooks.done.tap('OutputMessagePlugin', (stats) => {\n        setImmediate(() => {\n          if (stats.hasErrors()) {\n            printCompilationMessage('failure', port)\n          } else {\n            printCompilationMessage('success', port)\n          }\n        })\n      })\n    }\n  },\n\n  resolve: {\n    extensions: ['.js', '.jsx', '.ts', '.tsx', '.json']\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.svg$/,\n        type: 'asset',\n      },\n      {\n        test: /\\.scss$/,\n        use: [\n          {\n            loader: 'postcss-loader',\n            options: {\n              postcssOptions: {\n                plugins: {\n                  tailwindcss: {},\n                  autoprefixer: {},\n                },\n              },\n            },\n          },\n        ],\n        type: 'css',\n      },\n      {\n        test: /\\.(jsx?|tsx?)$/,\n        use: [\n          {\n            loader: 'builtin:swc-loader',\n            options: {\n              sourceMap: true,\n              jsc: {\n                parser: {\n                  syntax: 'typescript',\n                  tsx: true,\n                },\n                transform: {\n                  react: {\n                    runtime: 'automatic',\n                    development: isDev,\n                    refresh: isDev,\n                  },\n                },\n              },\n              env: {\n                targets: [\n                  'chrome >= 87',\n                  'edge >= 88',\n                  'firefox >= 78',\n                  'safari >= 14',\n                ],\n              },\n            },\n          },\n        ],\n      },\n    ],\n  },\n  plugins: [\n    new rspack.container.ModuleFederationPlugin({\n      name: 'create_mf_app_host',\n      filename: 'remoteEntry.js',\n      exposes: {},\n      shared: {\n        react: { eager: true },\n        'react-dom': { eager: true },\n        'react-router-dom': { eager: true },\n      },\n    }),\n    new rspack.DefinePlugin({\n      'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV),\n    }),\n    new rspack.ProgressPlugin({}),\n    new rspack.HtmlRspackPlugin({\n      template: './src/index.html',\n    }),\n    isDev ? new refreshPlugin() : null,\n  ].filter(Boolean),\n})\n\n```\n\n----------------------------------------\n\nTITLE: Displaying Zephyr Error Message Using TypeScript\nDESCRIPTION: This snippet imports a function to retrieve standardized error messages and displays a specific error code message using an ErrorInfo component. It provides user feedback during authentication or deployment errors related to cloud integration.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze10018.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { getErrorMessage } from '../../lib/error-helpers.ts';\nimport { ErrorInfo } from '../../components/errors/info.tsx';\nimport { Steps } from '@theme';\n\n# {getErrorMessage('ZE10018')}\n\n<ErrorInfo code=\"ZE10018\" terminal />\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies and starting dev server\nDESCRIPTION: This snippet demonstrates installing project dependencies, including the latest vite-plugin-zephyr, and running the development server. It ensures that the project has all necessary packages installed and is actively served.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/react-vite.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd react-vite-ts\nnpm install && npm install vite-plugin-zephyr@latest\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Modifying File Permissions with Bash\nDESCRIPTION: This bash command is used to modify the permissions of a directory.  The chmod 700 command sets the permissions to allow the owner to read, write, and execute (full permissions), while preventing group members and others from any access. This is used to grant the necessary permissions to create the 'dist' folder.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze10021.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nchmod 700 /path/to/parent/directory\n```\n\n----------------------------------------\n\nTITLE: Selecting Frontend Framework in Nx CLI - Terminal Output\nDESCRIPTION: Captures the CLI prompt for selecting a frontend framework when generating a new Nx workspace. The user chooses from options like None, React, Vue, Angular, or Node. This snippet is informational and illustrates user interaction, not a script.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/nx-mf-app.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n NX   Let's create a new workspace [https://nx.dev/getting-started/intro]\n\n? Which stack do you want to use? …\nNone:          Configures a TypeScript/JavaScript project with minimal structure.\nReact:         Configures a React application with your framework of choice.\nVue:           Configures a Vue application with your framework of choice.\nAngular:       Configures a Angular application with modern tooling.\nNode:          Configures a Node API application with your framework of choice.\n```\n\n----------------------------------------\n\nTITLE: Importing Error Handling Utilities in Javascript\nDESCRIPTION: Imports the `getErrorMessage` function from '../../lib/error-helpers.ts' and the `ErrorInfo` React component from '../../components/errors/info.tsx'. These are used to retrieve and display error information within the documentation page.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze20021.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getErrorMessage } from '../../lib/error-helpers.ts';\nimport { ErrorInfo } from '../../components/errors/info.tsx';\n```\n\n----------------------------------------\n\nTITLE: Setting Session Storage for Remote Swap - TypeScript\nDESCRIPTION: This TypeScript snippet shows how to update the browser's session storage to swap a federated remote. The `remote` and `remoteUrl` values, sourced from environment variables, are used to set the appropriate items in the `sessionStorage`. When the page is refreshed, the application will use the values from the session storage.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/how-to/end-to-end-testing.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst remote = process.env.REMOTE;\nconst remoteUrl = process.env.REMOTE_URL;\n\nawait page.evaluate(\n  (remote, url) => {\n    sessionStorage.setItem(remote, url);\n  },\n  remote,\n  remoteUrl,\n);\n```\n\n----------------------------------------\n\nTITLE: Building Remote 2 with Nx CLI\nDESCRIPTION: This command initiates the build process for the 'remote2' module, also in production and watch mode. It demonstrates an alternative way to invoke the build command using `npx nx build` with additional arguments passed through `--`.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/nx-mf-app.mdx#_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nnpx nx build remote2 -- --watch\n```\n\n----------------------------------------\n\nTITLE: Building the React + Vite project\nDESCRIPTION: This snippet portrays the command to execute a production build of the React project, including TypeScript compilation and Vite build. It outputs the build artifacts and deployment logs.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/react-vite.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Setting HostApp React Native Scripts (JSON)\nDESCRIPTION: Defines standard `react-native` scripts (`android`, `ios`, `start:ios`, `start:android`) for the HostApp's `package.json`. The `run-android` and `run-ios` scripts use the `--no-packager` flag, indicating that the packager will be managed externally, typically by Zephyr/Re.Pack.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/components/zephyr/repack/start-from-scratch.mdx#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\n \"scripts\": {\n    \"android\": \"react-native run-android --no-packager\",\n    \"ios\": \"react-native run-ios --no-packager\",\n    \"lint\": \"eslint .\",\n    \"pods\": \"(cd ios && bundle install && bundle exec pod install)\",\n    \"pods:update\": \"(cd ios && bundle exec pod update)\",\n    \"start:ios\": \"react-native start --platform ios\",\n    \"start:android\": \"react-native start --platform android\",\n    \"test\": \"jest\"\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Folder Structure YAML\nDESCRIPTION: This YAML illustrates the expected folder structure for the Nx workspace. It highlights the location of package.json files within the host and remote applications.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/react-rspack-nx.mdx#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- apps \n-- host \n--- package.json \n-- remote1 \n--- package.json \n-- remote2 \n--- package.json \n```\n\n----------------------------------------\n\nTITLE: Initializing React + Vite project with npm\nDESCRIPTION: This snippet shows how to create a new React project using Vite's create command with npm, specifying the react-ts template. It prepares the project directory for development.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/react-vite.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# npm, in npm  7+ double dash is needed\nnpm create vite@latest react-vite-ts -- --template react-ts\n```\n\n----------------------------------------\n\nTITLE: Building Modern.js Application (yarn)\nDESCRIPTION: This command uses yarn to build the Modern.js application, generating production ready assets. It triggers the build process defined in your project. Requires yarn and a Modern.js project.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/modernjs.mdx#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Creating Modern.js Project with ModernJS CLI (npm)\nDESCRIPTION: This command uses npm to create a new Modern.js project via the official Modern.js CLI.  Requires npm to be installed and functional.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/modernjs.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx @modern-js/create@latest\n```\n\n----------------------------------------\n\nTITLE: Clearing Zephyr assets cache\nDESCRIPTION: Removes the Zephyr cache directory to clear any corrupted or problematic cached assets that might be causing the error.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze20013.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf ~/.zephyr\n```\n\n----------------------------------------\n\nTITLE: Build remote2 application with Nx\nDESCRIPTION: This command builds the remote2 application using the Nx build system.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/react-rspack-nx.mdx#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnx run remote2:build\n```\n\n----------------------------------------\n\nTITLE: Creating Modern.js Project with Zephyr CLI (yarn)\nDESCRIPTION: This command utilizes yarn to create a new Modern.js project using the `create-zephyr-apps` package. This is an alternative to using npm for project initialization when working with yarn package manager. Requires yarn to be installed.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/modernjs.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn create zephyr-apps@latest\n```\n\n----------------------------------------\n\nTITLE: Handling Dependency Resolution Errors in Zephyr Cloud Build using Bash\nDESCRIPTION: This Bash snippet shows an example error message encountered when Zephyr Cloud fails to resolve remote entry points due to improper build order of federated applications. It includes guidance on how to fix the error by building remotes in the correct sequence or configuring unmanaged applications and references application identification details and community support URLs.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/how-to/dependency-mgmt.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n[ConfigurationError: [zephyr]: Could not resolve remote entry points for urls:\n\n        - remote1.zephyr-examples.zackarychapple\n        - remote2.zephyr-examples.zackarychapple\n\n        Please build them with Zephyr first or add as Unmanaged applications.\n\n        Note: you can read application uid as follows:\n                 - remote1 - project.json 'name' field of remote application\n                 - zephyr-examples - git repository name\n                 - zackarychapple - git organization name\n\n        Or join and ask a question in our discord: https://zephyr-cloud.io/discord\n      ]\n```\n\n----------------------------------------\n\nTITLE: Building with pnpm\nDESCRIPTION: This command runs the build script defined in the `package.json` file.  It executes Rolldown with the configuration specified in `rolldown.config.mjs` to bundle the application for deployment. The Zephyr plugin is invoked during this build process.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/rolldown-react.mdx#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Importing Error Handling Components in TypeScript\nDESCRIPTION: This snippet imports helper functions and React components used for displaying error messages and links within the Zephyr documentation application. It depends on relative path modules that provide error message utilities and prebuilt error-related UI components to render error information dynamically.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze10016.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { getErrorMessage } from '../../lib/error-helpers.ts';\nimport { ErrorInfo } from '../../components/errors/info.tsx';\nimport { ErrorLink } from '../../components/errors/link.tsx';\n```\n\n----------------------------------------\n\nTITLE: Creating a Zephyr app with pnpm\nDESCRIPTION: This command uses `create zephyr-apps` to scaffold a new Zephyr application using pnpm. Follow the prompts to configure the project, selecting Rolldown as the bundler.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/rolldown-react.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm create zephyr-apps\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Preload for Shared Dependencies in Vite (TypeScript)\nDESCRIPTION: Shows the `build.modulePreload.resolveDependencies` configuration within `vite.config.ts`. This function filters dependencies to ensure only specific shared libraries (like React) and non-federated modules are preloaded, addressing potential issues with shared dependency resolution in Module Federation.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/vite-rspack-webpack-mf.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n modulePreload: {\n        resolveDependencies: (_, deps: string[]) => {\n          // Only preload React packages and non-federated modules\n          return deps.filter((dep) => {\n            const isReactPackage = dep.includes('react') || dep.includes('react-dom');\n            const isNotRemoteEntry = !dep.includes('remoteEntry.js');\n\n            return isReactPackage && isNotRemoteEntry;\n          });\n        },\n      },\n```\n\n----------------------------------------\n\nTITLE: Importing Environment Variables to Netlify via CLI\nDESCRIPTION: This snippet shows how to import environment variables from a .env file into the Netlify environment using the Netlify CLI. This is a way to securely store and manage sensitive data such as API keys or database credentials. \n\nDependencies: Netlify CLI must be installed and configured, and a .env file must exist in the project root directory.\n\nInput: Path to the .env file (.env). Output: Updates the environment variables within the Netlify project.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/functions/search/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnetlify env:import .env\n```\n\n----------------------------------------\n\nTITLE: Undocumented Warning Notice with Markdown\nDESCRIPTION: This snippet displays a warning message indicated with a markdown-styled block, alerting users about undocumented features and encouraging contact via Discord. It acts as user guidance within documentation or UI.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze20027.mdx#_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n::: warning\n\nNot documented yet. Had a problem and need help?\n\nContact us in our [discord](https://zephyr-cloud.io/discord)!\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Importing Error Handling Utilities in Zephyr with TypeScript\nDESCRIPTION: This snippet imports helper functions and React components to handle and display error messages related to Zephyr bundler operations. Dependencies include custom modules '../../lib/error-helpers.ts', '../../components/errors/info.tsx', and '../../components/errors/link.tsx'. Expected inputs are TypeScript imports and the output is a set of available error-handling components and helpers. No parameters are required, but the imported helpers must be supplied by the Zephyr project. This setup is vital for structured error rendering in the UI.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze10011.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getErrorMessage } from '../../lib/error-helpers.ts';\nimport { ErrorInfo } from '../../components/errors/info.tsx';\nimport { ErrorLink } from '../../components/errors/link.tsx';\n```\n\n----------------------------------------\n\nTITLE: Configuring Rolldown with Zephyr\nDESCRIPTION: This TypeScript code configures Rolldown to use the Zephyr plugin. It defines an input file, adds a plugin to emit an HTML file, and includes the `withZephyr` plugin for Zephyr integration. The `emit-html` plugin generates a basic HTML structure for the application.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/rolldown-react.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'rolldown';\nimport { withZephyr } from 'zephyr-rolldown-plugin';\n\nexport default defineConfig({\n  input: 'src/main.tsx',\n  plugins: [\n    {\n      name: 'emit-html',\n      generateBundle() {\n        const html = `\n          <html>\n            <body>\n              <div id=\"root\"></div>\n              <script type=\"module\" src=\"./main.js\"></script>\n            </body>\n          </html>\n        `;\n        this.emitFile({\n          type: 'asset',\n          fileName: 'index.html',\n          source: html,\n        });\n      },\n    },\n    withZephyr(),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Error Info React Component in TSX\nDESCRIPTION: Imports the ErrorInfo React component from a local components directory, used to display error details in the user interface. Dependencies include the info.tsx component file, used in rendering error information.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze10012.mdx#_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\nimport { ErrorInfo } from '../../components/errors/info.tsx';\n```\n\n----------------------------------------\n\nTITLE: Importing Error Info React Component in TypeScript/TSX\nDESCRIPTION: Imports the ErrorInfo React component from the components errors directory, enabling rendering of error-related UI elements with specific error codes. Dependencies include React and the component file itself.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze20019.mdx#_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\nimport { ErrorInfo } from '../../components/errors/info.tsx';\n```\n\n----------------------------------------\n\nTITLE: Importing package.json in rspack.config.mjs (TS)\nDESCRIPTION: This TypeScript code imports the `package.json` file as a JSON module, allowing access to the project's dependencies within the RSpack configuration. This is needed for sharing dependencies using Module Federation.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/react-native/configuring-remote.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport pkg from './package.json' with { type: \"json\" };\n```\n\n----------------------------------------\n\nTITLE: Staging Project Files for Git Commit\nDESCRIPTION: Adds all files in the current directory and subdirectories to the Git staging area using `git add .`. This prepares the files for the initial commit.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/general/create-mf-app.mdx#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ngit add .\n```\n\n----------------------------------------\n\nTITLE: Configuring the build script\nDESCRIPTION: This JSON snippet shows how to configure the build script in your `package.json` file.  The build script should point to the Rolldown command with the configuration file, enabling the Zephyr plugin during the build.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/rolldown-react.mdx#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"build\": \"rolldown --config ./rolldown.config.mjs\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Error Message Using getErrorMessage in Markdown/JSX\nDESCRIPTION: This snippet demonstrates how to insert a formatted error message for a specific error code by invoking the getErrorMessage function directly within a template. It assumes the function is callable in the environment, returning a string for error code 'ZE10029'. The output is intended for user display, enhancing UX in error cases. There are no major parameters apart from the error code; no constraints beyond function signature.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze10029.mdx#_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n# {getErrorMessage('ZE10029')}\n```\n\n----------------------------------------\n\nTITLE: Initializing Zephyr with rspack bundler in TypeScript\nDESCRIPTION: This snippet shows how to configure rspack bundler to use Zephyr by wrapping the configuration with the withZephyr() function. The configuration defines build context and the main entry point for the application. This setup allows Zephyr to integrate at the bundler level to enable deployment lifecycle hooks without interfering with the build output. Dependencies include rspack and Zephyr's tooling. The expected input is the standard bundler config object, and the output is an extended configuration that triggers Zephyr's deployment workflows post-bundling.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/learning/concepts/architecture.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// ...import statement\n\nexport default withZephyr()({\n  context: __dirname,\n  entry: {\n    main: './src/main.jsx',\n  },\n  //...rest of the code\n});\n```\n\n----------------------------------------\n\nTITLE: Shell Command to Remove Local Zephyr Configuration\nDESCRIPTION: This shell script command removes the local Zephyr configuration directory, which can resolve JWT token expiry issues. After execution, re-attempting the deployment prompts for re-authentication, facilitating successful build processes.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze10018.mdx#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nrm -rf ~/.zephyr\n```\n\n----------------------------------------\n\nTITLE: Building with yarn\nDESCRIPTION: This command runs the build script defined in the `package.json` file.  It executes Rolldown with the configuration specified in `rolldown.config.mjs` to bundle the application for deployment. The Zephyr plugin is invoked during this build process.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/rolldown-react.mdx#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Building with npm\nDESCRIPTION: This command runs the build script defined in the `package.json` file.  It executes Rolldown with the configuration specified in `rolldown.config.mjs` to bundle the application for deployment.  The Zephyr plugin is invoked during this build process.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/rolldown-react.mdx#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Importing Support Information Components in JavaScript/JSX\nDESCRIPTION: Imports React components from relative paths within the project. These components (`SupportedBrowser`, `SupportedFramework`, `SupportedBundler`, `SupportedCloud`) are responsible for rendering information about supported technologies for Zephyr Cloud.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/supported.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport SupportedBrowser from \"../components/browser-table\"\nimport { SupportedFramework, SupportedBundler, SupportedCloud } from \"../components/supported-frameworks-bundlers\"\n```\n\n----------------------------------------\n\nTITLE: Setting Node.js Version using nvm (Bash)\nDESCRIPTION: Sets the active Node.js version to 20 using Node Version Manager (nvm). This command ensures the required Node.js version prerequisite is met before proceeding with the setup.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/vite-rspack-webpack-mf.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnvm use 20\n```\n\n----------------------------------------\n\nTITLE: Creating Modern.js Project with Zephyr CLI (npm)\nDESCRIPTION: This command uses npm to create a new Modern.js project using the `create-zephyr-apps` package. It's a recommended method for initiating a project with Zephyr integration. Requires npm to be installed and configured.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/modernjs.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-zephyr-apps@latest\n```\n\n----------------------------------------\n\nTITLE: Updating Zephyr Plugins via npm - Bash\nDESCRIPTION: This Bash snippet provides commands to update Zephyr plugins to their latest versions using npm. Depending on the framework or bundler used (Webpack, Rollup, or Vite), choose and execute the corresponding install command. Updating these plugins ensures you benefit from the latest features and bug fixes, which may resolve error ZE20012.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze20012.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install zephyr-webpack-plugin --latest\nnpm install rollup-plugin-zephyr --latest\nnpm install vite-plugin-zephyr --latest\n```\n\n----------------------------------------\n\nTITLE: Starting MobileCheckout Remote on iOS Platform - Bash\nDESCRIPTION: This snippet starts the development server for the 'mobile-checkout' remote in the Zephyr Cloud React Native structure with Zephyr deployment enabled. Dependency: pnpm, proper workspace configuration, and the existence of the MobileCheckout package. Environment variable `ZC=1` signals Zephyr-specific behaviors, and the `--platform ios` flag ensures the server targets iOS. Input: triggers the relevant package's start script for iOS. Output: launches the iOS dev server for mobile-checkout, resolving federated dependencies.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/components/zephyr/repack/forked-example.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nZC=1 pnpm --filter MobileCheckout run start --platform ios\n```\n\n----------------------------------------\n\nTITLE: Initializing React Native App\nDESCRIPTION: This command initializes a new React Native application using the React Native CLI. It creates a project with the default template. The user will be prompted to install CocoaPods dependencies after running this command.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/react-native/rspack-ios-setup.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @react-native-community/cli init myapp\n```\n\n----------------------------------------\n\nTITLE: Importing Federated Component\nDESCRIPTION: This code demonstrates how to dynamically import a component from a remote application.  It uses `React.lazy` to import the `CartList` component from the `Cart` remote.  This dynamic import enables lazy loading of remote components within the host application.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/react-native/configuring-host.mdx#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nconst CartList = React.lazy(() => import(\"Cart/CartList\"));\n```\n\n----------------------------------------\n\nTITLE: Manual Rolldown setup with pnpm\nDESCRIPTION: These commands manually create a Rolldown project, initialize it with pnpm, and install the necessary dependencies, including Rolldown, the Zephyr Rolldown plugin, React, and TypeScript types.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/rolldown-react.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmkdir my-rolldown-app\ncd my-rolldown-app\npnpm init\npnpm add rolldown zephyr-rolldown-plugin@latest react react-dom @types/react @types/react-dom typescript\n```\n\n----------------------------------------\n\nTITLE: Using Federated Component in Host\nDESCRIPTION: This code displays the imported federated component in the host application, demonstrating how to render the remote component.  It uses the `<Suspense>` component to handle the loading state of the remote component. A fallback can be provided to handle loading situations.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/react-native/configuring-host.mdx#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<Suspense fallback={<Text>Loading...</Text>}>\n  <CartList />\n</Suspense>\n```\n\n----------------------------------------\n\nTITLE: Install Zephyr plugin with Rspack\nDESCRIPTION: This command installs the `zephyr-rspack-plugin` package as a dependency to the project. The `--save` flag ensures that the dependency is added to the `package.json` file.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/existing-app.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i zephyr-rspack-plugin@latest --save\n```\n\n----------------------------------------\n\nTITLE: Creating a Zephyr Cloud React Native Project - Bash\nDESCRIPTION: This snippet provides the command to scaffold a new Zephyr Cloud React Native application using the official installer. It requires Node.js (with npm) installed and network access to fetch the package. The `npx create-zephyr-apps@latest` command initializes a project, prompting the user for a directory path and project type, and outputs the creation status. The process results in a ready-to-develop project skeleton. Limitations: Internet connection is required; only the officially supported project types are available.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/components/zephyr/repack/forked-example.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-zephyr-apps@latest\n```\n\n----------------------------------------\n\nTITLE: Importing Error Handling Utilities in TypeScript\nDESCRIPTION: Imports error helper functions and components needed to display the ZE30026 error information. The code imports getErrorMessage function and the ErrorInfo component from their respective locations.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze30026.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { getErrorMessage } from '../../lib/error-helpers.ts';\nimport { ErrorInfo } from '../../components/errors/info.tsx';\n```\n\n----------------------------------------\n\nTITLE: Importing Error Handling Utilities (TypeScript)\nDESCRIPTION: Imports necessary functions and components for displaying error information. `getErrorMessage` is likely a utility to retrieve error messages based on codes, and `ErrorInfo` is a React component for rendering error details. These are prerequisites for the rest of the page content.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze20014.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { getErrorMessage } from '../../lib/error-helpers.ts';\nimport { ErrorInfo } from '../../components/errors/info.tsx';\n```\n\n----------------------------------------\n\nTITLE: Build Tool Configuration - TypeScript\nDESCRIPTION: This TypeScript snippet illustrates the configuration of remote modules for a Zephyr application using plugins like CopyRspackPlugin and ModuleFederationPluginV1. It defines patterns for copying files and exposes modules for remote access. Dependencies include  `CopyRspackPlugin` and `ModuleFederationPluginV1`, which are used to configure the build process for a module federation setup. The expected input is the configuration object for the plugins and the output is a configured build setup.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze10020.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nplugins = [\n  new CopyRspackPlugin({\n    patterns: [\n      {\n        from: './src/index.html',\n        to: './index.html',\n      },\n    ],\n  }),\n\n  new ModuleFederationPluginV1({\n    name: 'app_04',\n    filename: 'remoteEntry.js',\n    shared: [],\n    exposes: {\n      './App': './src/main.js',\n      './loadApp': './src/loadApp.js',\n    },\n  }),\n];\n```\n\n----------------------------------------\n\nTITLE: Creating a Turborepo Monorepo for React + Rspack via npx - Bash\nDESCRIPTION: Runs the create-turbo CLI tool with a Zephyr example template URL to generate a Turborepo monorepo containing three apps (one host and two remotes) pre-configured with routing and Zephyr integration. This command requires internet access and Node.js environment to scaffold the starter template.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/turborepo-react.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-turbo@latest --example https://github.com/ZephyrCloudIO/zephyr-examples/tree/main/examples/turbo-rspack-mf\n```\n\n----------------------------------------\n\nTITLE: TypeScript import statements for error handling components\nDESCRIPTION: Imports utility functions and components used for error message display and navigation within the Zephyr Cloud build troubleshooting page. Necessary dependencies include '../../lib/error-helpers.ts', '../../components/errors/info.tsx', and '../../components/errors/link.tsx'.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze10019.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { getErrorMessage } from '../../lib/error-helpers.ts';\nimport { ErrorInfo } from '../../components/errors/info.tsx';\nimport { ErrorLink } from '../../components/errors/link.tsx';\nimport { Steps } from '@theme';\n```\n\n----------------------------------------\n\nTITLE: Configuring iptables to allow Zephyr Cloud IPs (Shell)\nDESCRIPTION: This shell script snippet demonstrates how to configure iptables to allow traffic from Zephyr Cloud's IP addresses. It uses the `iptables` and `ip6tables` commands to insert rules into the INPUT chain.  The script requires root privileges.  Replace `$ip` in the script with a specific IP address from the provided list. The rules allow incoming TCP traffic on ports 80 (http) and 443 (https) from the specified IP address.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/how-to/allow-ip-addresses.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ iptables -I INPUT -p tcp -m multiport --dports http,https -s $ip -j ACCEPT\n$ ip6tables -I INPUT -p tcp -m multiport --dports http,https -s $ip -j ACCEPT\n```\n\n----------------------------------------\n\nTITLE: Creating Modern.js Project with ModernJS CLI (pnpm)\nDESCRIPTION: This command uses pnpm to create a new Modern.js project via the official Modern.js CLI.  Requires pnpm to be installed and functional.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/modernjs.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm dlx @modern-js/create@latest\n```\n\n----------------------------------------\n\nTITLE: Creating MiniApp Button Component (React Native TSX)\nDESCRIPTION: Implements a simple React Native functional component (`App`) that displays a button with a dynamic counter. It uses `useState` for state management and `TouchableOpacity` for user interaction. This component is intended to be exposed via Module Federation.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/components/zephyr/repack/start-from-scratch.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * Sample React Native App\n * https://github.com/facebook/react-native\n *\n * @format\n */\n\nimport React, { useState } from 'react';\nimport {\n  StyleSheet,\n  Text,\n  TouchableOpacity,\n  useColorScheme,\n} from 'react-native';\n\nimport {\n  Colors,\n} from 'react-native/Libraries/NewAppScreen';\n\nfunction App(): React.JSX.Element {\n  const isDarkMode = useColorScheme() === 'dark';\n  const [count, setCount] = useState(0);\n\n  const handlePress = () => {\n    setCount(count + 1);\n  };\n\n  return (\n    <TouchableOpacity\n      style={styles.button}\n      onPress={handlePress}\n    >\n      <Text\n        style={[\n          styles.buttonText,\n          {\n            color: isDarkMode ? Colors.white : Colors.black,\n          },\n        ]}>\n        MiniApp Button +{count}\n      </Text>\n    </TouchableOpacity>\n  );\n}\n\nconst styles = StyleSheet.create({\n  button: {\n    backgroundColor: '#007AFF',\n    padding: 12,\n    borderRadius: 8,\n    alignItems: 'center',\n    justifyContent: 'center',\n    minWidth: 120,\n  },\n  buttonText: {\n    fontSize: 16,\n    fontWeight: '600',\n  },\n});\n\nexport default App;\n\n```\n\n----------------------------------------\n\nTITLE: Using Shared Store in app2 (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to use the shared Zustand store from `app1` in `app2`. It imports the `useCounter` hook from the remote module and uses it within a React component to display the counter value and provide increment/decrement buttons.  It relies on the bootstrapping process being completed and the Module Federation configured to resolve the remote module.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/react-native/state-manager-sharing-between-react-native-applications.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useCounter } from \"app1/store\";\n\nconst Counter = () => {\n  const { count, increment, decrement } = useCounter();\n\n  return (\n    <View>\n      <Text>{count}</Text>\n      <Button onPress={increment} title=\"Increment\" />\n      <Button onPress={decrement} title=\"Decrement\" />\n    </View>\n  );\n};\n\n```\n\n----------------------------------------\n\nTITLE: Exposing Store as Remote Module in app1 (TypeScript)\nDESCRIPTION: This code snippet configures the `rspack.config.mjs` file in `app1` to expose the store defined in `store.ts` as a remote module.  It uses the ModuleFederationPluginV2 to define the module to expose and shared dependencies, ensuring a single instance of each dependency is used across federated modules. Dependencies are marked as singletons and eager loaded.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/react-native/state-manager-sharing-between-react-native-applications.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n    new Repack.plugins.ModuleFederationPluginV2({\n      ...\n      exposes: {\n        './store': './store',\n      },\n      shared: Object.fromEntries(\n        Object.entries(pkg.dependencies).map(([dep, {version}]) => {\n          return [\n            dep,\n            {singleton: true, eager: true, requiredVersion: version},\n          ];\n        }),\n      ),\n    })\n```\n\n----------------------------------------\n\nTITLE: Displaying Error Information with React JSX\nDESCRIPTION: This snippet imports an ErrorInfo React component designed to present detailed error information visually. It uses JSX syntax to render an error code and an information component with the 'terminal' prop enabled, indicating a specific styling or behavior. Dependencies include React environment and the '../../components/errors/info.tsx' component file. The input includes props such as 'code' specifying the error code and 'terminal' for UI modification. The expected output is a rendered UI element showing error details.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze20023.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nimport { ErrorInfo } from '../../components/errors/info.tsx';\n\n# {getErrorMessage('ZE20023')}\n\n<ErrorInfo code=\"ZE20023\" terminal />\n```\n\n----------------------------------------\n\nTITLE: Starting MobileOrders Remote on iOS Platform - Bash\nDESCRIPTION: This command starts the development server for the 'mobile-orders' remote, targeting iOS, in the federated Zephyr Cloud project. It relies on previous deployments of dependent remotes. `ZC=1` activates Zephyr deployment configuration. Inputs: none; Outputs: orders module dev server for iOS with federated runtime. Constraints: must follow the build order described in project instructions.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/components/zephyr/repack/forked-example.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nZC=1 pnpm --filter MobileOrders run start --platform ios\n```\n\n----------------------------------------\n\nTITLE: Extracting URL and Host with Regex - YAML\nDESCRIPTION: This YAML snippet demonstrates how to extract the application URL and host from the build output using regular expressions within a GitHub Actions workflow. The `npm run build` command generates the output, and then `grep` with regex is used to find the URL and host and the values are saved as Github actions outputs. The extracted URL is then used as the base URL for testing.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/how-to/end-to-end-testing.mdx#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nrun: |\n  OUTPUT=$(npm run build)\n  echo \"$OUTPUT\"\n  URL=$(echo \"$OUTPUT\" | grep -oE 'https://[^ ]+')\n  HOST=$(echo \"$OUTPUT\" | grep -oP 'ZEPHYR\\s+\\K\\S+(?=#)')\n  echo \"Extracted Host Zephyr URL: $URL\"\n  echo \"Extracted Host: $HOST\"\n  echo \"host=$HOST\" >> \"$GITHUB_OUTPUT\"\n  echo \"url=$URL\" >> \"$GITHUB_OUTPUT\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote in app2 (TypeScript)\nDESCRIPTION: This code snippet configures the `rspack.config.mjs` file in `app2` to define `app1` as a remote.  It uses ModuleFederationPluginV2 to map the remote name (`app1`) to the URL where the remote container is hosted. Shared dependencies are configured in the same way as in `app1`, ensuring dependency compatibility between the two applications.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/react-native/state-manager-sharing-between-react-native-applications.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n    new Repack.plugins.ModuleFederationPluginV2({\n      remotes: {\n        app1: `app1@http://localhost:8081/ios/Remote1.container.js.bundle`,\n      },\n      shared: Object.fromEntries(\n        Object.entries(pkg.dependencies).map(([dep, {version}]) => {\n          return [\n            dep,\n            {singleton: true, eager: true, requiredVersion: version},\n          ];\n        }),\n      ),\n    }),\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with pnpm - Bash\nDESCRIPTION: This snippet installs all required dependencies for the Zephyr Cloud React Native application using pnpm. Prerequisites include pnpm being globally installed and a valid lockfile/package.json in the project directory. The `pnpm install` command resolves and installs all npm/yarn dependencies across the monorepo structure. Inputs: none. Outputs: a node_modules folder and ready-to-run dependencies. Constraint: Must be run from the project root.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/components/zephyr/repack/forked-example.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Generating Module Federation Shell with Rspack Preset - Bash\nDESCRIPTION: Similar to the previous command but adds the --preset flag to use Rspack instead of Webpack. Generates a shell host and remotes set up for Rspack. Requires Rspack plugin availability in the Nx workspace.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/nx-mf-app.mdx#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpx nx g @nx/react:host shell --remotes=remote1,remote2 --directory=apps/shell --preset=@nx/rspack\n```\n\n----------------------------------------\n\nTITLE: Markdown section for debugging steps\nDESCRIPTION: Provides a troubleshooting guide with specific steps to check write access and clear cache, helping users resolve configuration issues impacting their build process.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze10019.mdx#_snippet_5\n\nLANGUAGE: Markdown\nCODE:\n```\n## Debugging the error\n\n<Steps>\n\n### Check your write access\n\nYou current logged in account on Zephyr dashboard might not have write access to this application\n\nYou can log out either from our [Chrome Extension](https://chromewebstore.google.com/detail/zephyr-mission-control/liflhldchhinbaeplljlplhnbkdidedn) or from [dashboard](https://app.zephyr-cloud.io) and log in again with the correct account having write access.\n\n### Clear cache\n\nGit configuration details for the project is different from previous build\n\nOne of the plausible way to debug this error is to remove your local zephyr configuration by running:\n\n```bash\nrm -rf ~/.zephyr\n```\n\nAnd then try to run a build again.\n\n</Steps>\n```\n\n----------------------------------------\n\nTITLE: Rendering an Error Message and Info Component in TSX\nDESCRIPTION: Demonstrates usage of the imported error message function and component inside a TSX file. The call to getErrorMessage fetches the message associated with error code 'ZE10028'. The <ErrorInfo> component displays detailed error information, marked as related to a terminal error. Includes a deprecation warning with markdown styling for user guidance and a contact link to the project Discord.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze10028.mdx#_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\n# {getErrorMessage('ZE10028')}\n\n<ErrorInfo code=\"ZE10028\" terminal />\n\n{/* TODO */}\n\n::: warning\nThis error will be deprecating soon. \n\nNot documented yet. Had a problem and need help?\n\nContact us in our [discord](https://zephyr-cloud.io/discord)!\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Deploying to Netlify (Dev and Prod) via CLI\nDESCRIPTION: This snippet demonstrates how to deploy a project to Netlify using the Netlify CLI. The first command deploys to a development environment, while the second deploys to production. The `--prod` flag is used for production deployments.\n\nDependencies: Netlify CLI must be installed and configured.\n\nInput: None directly, as the CLI determines deployment based on the current project and settings. Output: Deployment logs and the URL of the deployed site (or an error message if deployment fails).\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/functions/search/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnetlify deploy\n```\n\nLANGUAGE: bash\nCODE:\n```\nnetlify deploy --prod\n```\n\n----------------------------------------\n\nTITLE: Package.json Structure - YAML\nDESCRIPTION: This YAML snippet presents a typical package.json structure for a Zephyr project. It shows how multiple applications can be defined with unique names and versions within a host and remote directory.  The `name` and `version` fields are crucial for Zephyr to identify and understand the application's details.  The input is a directory structure of your app and the output is the configured apps.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze10020.mdx#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nHostAppDir:\n  - package.json\n      name: \"host-app\"\n      version: \"1.0.0\"\n  - webpack.config.js\n\nRemoteAppDir:\n  - package.json\n      name: \"remote-app\"\n     version: \"1.0.0\"\n  - webpack.config.js\n```\n\n----------------------------------------\n\nTITLE: Displaying Error Information using ErrorInfo Component - JSX\nDESCRIPTION: This JSX snippet utilizes the `ErrorInfo` component to display an error message, passing the error code 'ZE20025' as a prop. The `terminal` prop indicates the error is a terminal error.  The component takes the code parameter that corresponds to an error and displays the relevant error information. This component is designed to visualize and format error messages.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze20025.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<ErrorInfo code=\"ZE20025\" terminal />\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Zephyr Plugin (pnpm)\nDESCRIPTION: These commands install project dependencies and the zephyr-modernjs-plugin using pnpm. It's a critical step after project creation to retrieve and setup dependencies. Requires pnpm and an existing project.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/modernjs.mdx#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncd your-project-name\npnpm i\npnpm add zephyr-modernjs-plugin@latest\n```\n\n----------------------------------------\n\nTITLE: Markdown detailed explanation of application UID and build verification\nDESCRIPTION: Explains the significance of 'application_uid', how it is composed, and details the verification process involving local cache, JWT token, and write access checks necessary for successful build and deployment.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze10019.mdx#_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\nOnce we find your `application_uid` (composed by your github organization's name, project name and the `name` field in package.json, refer to <ErrorLink code=\"ZE10017\" />), we will be collecting data from your local cache, verifying your JWT token and checking your write access to the related project. If we fail to find all the necessary configuration, we won't be able to obtain appropriate build id for you to continue with the deployment.\n```\n\n----------------------------------------\n\nTITLE: Starting the bundler (Bash)\nDESCRIPTION: This command starts the React Native bundler.  It executes the `start` script defined in `package.json`, enabling the application to connect to the bundler for code updates and asset loading.  The bundler needs to be running while developing.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/react-native/configuring-host.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Stabilizing Bundler Port in package.json (JSON)\nDESCRIPTION: This snippet shows how to stabilize the port number for the React Native bundler by adding the `--port` flag to the `react-native start` command in `package.json`. This ensures the bundler uses port 8081.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/react-native/configuring-remote.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"start\": \"react-native start --port 8081\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Error Message with Zephyr Error Helpers - TypeScript\nDESCRIPTION: This snippet imports the getErrorMessage helper from a library of Zephyr error helpers, then demonstrates its usage for retrieving a human-readable error string associated with the ZE10013 error code. The helper requires the error code as a string input (e.g., 'ZE10013') and returns the corresponding message. The output is useful for diagnostics or user-facing logs. Depends on ../../lib/error-helpers.ts being available in the project.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze10013.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { getErrorMessage } from '../../lib/error-helpers.ts';\n\n#getErrorMessage('ZE10013')\n\n```\n\n----------------------------------------\n\nTITLE: Starting All Zephyr Dev Servers - Bash\nDESCRIPTION: This command launches all development servers (host and remotes) for the Zephyr Cloud React Native application with Zephyr-specific deployment enabled via the `ZC=1` environment variable. This is suitable for full-stack or integration development/testing. All underlying workspaces must have been initialized and previously installed. Output: all app modules' dev servers running for development. Constraints: higher resource usage.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/components/zephyr/repack/forked-example.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nZC=1 pnpm run start\n```\n\n----------------------------------------\n\nTITLE: Configuring Production Webpack for Remote2 Application with Zephyr Plugin - TypeScript\nDESCRIPTION: Configures the production build Webpack for the remote2 application using Nx plugin composition, React, Module Federation, and Zephyr integration. Requires a valid baseConfig imported locally. Produces a complete Webpack config object for production sharing and integration with Zephyr Cloud.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/nx-mf-app.mdx#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { composePlugins, withNx } from '@nx/webpack';\nimport { withReact } from '@nx/react';\nimport { withModuleFederation } from '@nx/react/module-federation';\n\nimport baseConfig from './module-federation.config';\nimport { withZephyr } from 'zephyr-webpack-plugin';\n\nconst config = {\n  ...baseConfig,\n};\n\n// Nx plugins for webpack to build config object from Nx options and context.\nexport default composePlugins(\n  withNx(),\n  withReact(),\n  withModuleFederation(config),\n  withZephyr(),\n  (config) => {\n    return config;\n  }\n);\n\n```\n\n----------------------------------------\n\nTITLE: Importing Error Helper Functions and Components in TypeScript\nDESCRIPTION: Imports a function used to retrieve standardized error messages and a React error display component. These dependencies are used to centralize error handling and information rendering. The code assumes a module structure where helpers and components reside in specified relative paths.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze10028.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { getErrorMessage } from '../../lib/error-helpers.ts';\nimport { ErrorInfo } from '../../components/errors/info.tsx';\n```\n\n----------------------------------------\n\nTITLE: Rendering Error Information with Deprecated Warning\nDESCRIPTION: Renders the ErrorInfo React component with a specific error code, indicating it is deprecated using a warning block. The component displays error details to users, highlighting that this particular error is deprecated for future reference.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze10012.mdx#_snippet_2\n\nLANGUAGE: TSX\nCODE:\n```\n<ErrorInfo code=\"ZE10012\" terminal />\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n::: warning\n\nThis error is deprecated\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Create Nx workspace\nDESCRIPTION: This command creates a new Nx workspace named 'my-workspace' using the 'apps' preset.  It guides the user through setting up a monorepo project with build tools pre-configured.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/react-rspack-nx.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-nx-workspace@latest my-workspace --preset=apps\n```\n\n----------------------------------------\n\nTITLE: Defining Zephyr Dependencies in package.json (Optional)\nDESCRIPTION: Shows an example `package.json` snippet demonstrating how to optionally specify fixed versions for remote application dependencies using the `zephyrDependencies` key. If omitted, Zephyr defaults to using the latest versions.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/general/create-mf-app.mdx#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"team-red\",\n  \"version\": \"0.1.0\",\n  \"scripts\": {\n    \"build\": \"nx run team-red:build --skip-nx-cache\"\n  },\n  \"private\": true,\n  \"zephyrDependencies\": {\n    \"team-blue\": \"0.1.0\",\n    \"team-green\": \"0.1.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Modern.js Project with ModernJS CLI (yarn)\nDESCRIPTION: This command uses yarn to create a new Modern.js project via the official Modern.js CLI.  Requires yarn to be installed and functional.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/modernjs.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn create @modern-js/create@latest\n```\n\n----------------------------------------\n\nTITLE: Install Zephyr plugin with Webpack\nDESCRIPTION: This command installs the `zephyr-webpack-plugin` package as a dependency to the project. The `--save` flag ensures that the dependency is added to the `package.json` file.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/existing-app.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i zephyr-webpack-plugin@latest --save\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Federation Plugin in TypeScript\nDESCRIPTION: This snippet shows the configuration of Module Federation for a micro front-end shell application, specifying remotes, exposes, and shared dependencies to enable dynamic module loading and interoperability across multiple applications.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/how-to/mf-guide.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew ModuleFederationPluginV1({\n      name: 'app_01',\n      filename: 'remoteEntry.js',\n      remotes: {\n        app_02: 'app_02@http://localhost:3002/remoteEntry.js',\n        app_03: 'app_03@http://localhost:3003/remoteEntry.js',\n        app_04: 'app_04@http://localhost:3004/remoteEntry.js',\n        app_05: 'app_05@http://localhost:3005/remoteEntry.js'\n      },\n      exposes: {\n        './SideNav': './src/SideNav',\n        './Page': './src/Page'\n      },\n      shared: {\n        ...deps,\n        '@material-ui/core': {\n          singleton: true\n        },\n        'react-router-dom': {\n          singleton: true\n        },\n        'react-dom': {\n          singleton: true\n        },\n        react: {\n          singleton: true\n        }\n      }\n    })\n```\n\n----------------------------------------\n\nTITLE: Displaying ZE10011 Error Message in React (TSX)\nDESCRIPTION: This snippet shows how to render a terminal-formatted, user-friendly error for ZE10011 using the ErrorInfo React component. It expects the ZE10011 code as a prop and optionally uses terminal styling. Dependency: the ErrorInfo component must be present in the given path. The expected output is a UI block that informs the user when a valid package.json is not found or readable.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze10011.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<ErrorInfo code=\"ZE10011\" terminal />\n```\n\n----------------------------------------\n\nTITLE: Import UI Components in TypeScript for Zephyr\nDESCRIPTION: This snippet imports various UI components from different modules, including buttons, steps, badges, separators, and card layouts. These components are likely used to construct the user interface for managing cloud providers within the Zephyr platform.  They are essential for rendering interactive elements and structuring the content of the page.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/cloud.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Button } from '../components/ui/button.tsx';\nimport { Steps, Badge } from '@theme';\nimport { Separator } from '../components/ui/separator.tsx';\nimport { CardLayout } from '../components/ui/card-layout';\nimport { CloudProviderCards } from \"../components/cloud-provider\"\n```\n\n----------------------------------------\n\nTITLE: Setting Node.js Version using nvm (Bash)\nDESCRIPTION: Sets the active Node.js version to 20 using Node Version Manager (nvm). This is mentioned as part of the prerequisite setup.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/parcel-react.mdx#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nnvm use 20\n```\n\n----------------------------------------\n\nTITLE: Rendering VideoResource Component in React\nDESCRIPTION: This snippet renders the `VideoResource` component, likely responsible for displaying video resources. The specific implementation of the `VideoResource` component is not shown, but it is assumed to handle the display of video content or links. It has a direct dependency on the `VideoResource` component that has been imported.  The output is the rendering of the video resources component.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/learning/resources.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<VideoResource />\n```\n\n----------------------------------------\n\nTITLE: Rendering Error Information Component with Specific Error Code\nDESCRIPTION: Renders the ErrorInfo React component with a specific error code 'ZE10017' and indicates its terminal-related error code 'ZE20012'. This component displays structured error details to the user, useful for troubleshooting.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze10017.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n<ErrorInfo code=\"ZE10017\" terminal related=\"ZE20012\" />\n```\n\n----------------------------------------\n\nTITLE: Logging Zephyr Plugin Authentication Message in Shell\nDESCRIPTION: This shell output snippet shows the log message printed by the Zephyr plugin when it detects the presence of the `ZE_SECRET_TOKEN` environment variable during the CI run. The message confirms that the plugin is using the secret token for authentication with the Zephyr API, thereby skipping the manual login process. This output helps users verify that authentication is correctly configured in the CI environment.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/how-to/github-automations.mdx#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n ZEPHYR   Token found in environment. Using secret token for authentication\n```\n\n----------------------------------------\n\nTITLE: Creating a Download Link Button in React/JSX\nDESCRIPTION: Renders an anchor tag (`<a>`) containing a stylized `Button` component. This creates a user interface element linking to the Chrome Web Store page for the Zephyr Mission Control extension. The link opens in a new tab (`target=\"_blank\"`) for user convenience. This code is part of the documentation webpage.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/how-to/browser-extension.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<a href=\"https://chromewebstore.google.com/detail/zephyr-mission-control/liflhldchhinbaeplljlplhnbkdidedn\" target=\"_blank\" rel=\"noreferrer\">\n<Button variant=\"outline\">Download Browser Extension Now</Button>\n</a>\n```\n\n----------------------------------------\n\nTITLE: Displaying an Error Message Using getErrorMessage Function\nDESCRIPTION: This code calls the 'getErrorMessage' function with the error code 'ZE20027' to retrieve a descriptive error message. It helps provide user-friendly feedback based on internal error codes; used in UI components or logs.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze20027.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n# {getErrorMessage('ZE20027')}\n```\n\n----------------------------------------\n\nTITLE: Rendering Error Code Information in Markdown with JSX\nDESCRIPTION: Uses the imported functions and components to display the error message and detailed information for error code ZE20022. The ErrorInfo component is rendered with the error code and terminal flag.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze20022.mdx#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n# {getErrorMessage('ZE20022')}\n\n<ErrorInfo code=\"ZE20022\" terminal />\n\n{/* TODO */}\n\n::: warning\n\nNot documented yet. Had a problem and need help?\n\nContact us in our [discord](https://zephyr-cloud.io/discord)!\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Displaying Error Message Using getErrorMessage Function\nDESCRIPTION: Uses the imported getErrorMessage function to retrieve and display an error message related to code 'ZE10017'. It facilitates dynamic error messaging, which can be rendered within React components or other UI layers.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze10017.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n# {getErrorMessage('ZE10017')}\n```\n\n----------------------------------------\n\nTITLE: Error message display for ZE10019\nDESCRIPTION: Displays a standardized error message for code 'ZE10019' using the getErrorMessage function; helps inform users about common build errors related to missing configurations or access issues.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze10019.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n# {getErrorMessage('ZE10019')}\n```\n\n----------------------------------------\n\nTITLE: Using Extracted Variables - YAML\nDESCRIPTION: This YAML snippet shows how to use the extracted variables in other steps of the GitHub Actions workflow. It references the output variables 'remoteUrl' and 'remote' that were previously set and assigns them to environment variables. The environment variables are then used in later steps for further processes.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/how-to/end-to-end-testing.mdx#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nenv:\n  REMOTE_URL: ${{ steps.buildRemote.outputs.remoteUrl }}\n  REMOTE: ${{ steps.buildRemote.outputs.remote }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Email via Terminal in Bash\nDESCRIPTION: This Bash snippet sets the global Git email using the 'git config' command. Proper configuration of email is required for Zephyr to associate Git activity with user credentials. Set \"My email\" to the desired email address tied to your Git account; prerequisites include a working Git installation.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze10015.mdx#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\ngit config --global user.email = \"My email\"\n```\n\n----------------------------------------\n\nTITLE: Explanation of Application UID Management and Local Configuration\nDESCRIPTION: Describes how the application UID is generated from git config and package.json, stored locally in '~/.zephyr', and used to associate deployments with the correct project. Discusses the use of specific plugins for building projects and consequences if local configuration is missing.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze10017.mdx#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Build and Deploy Micro-Frontends with Zephyr\nDESCRIPTION: These commands are used to build the remote and host applications within an Nx workspace. The remotes must be built before the host. These commands are run in sequence to build each of the applications, ensuring the application is deployed correctly via Zephyr. The deployment through Zephyr relies on prior build and commit state.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/how-to/migrate-nx-webpack-to-rspack.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpx nx run remote1:build\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx nx run remote2:build\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx nx run host:build\n```\n\n----------------------------------------\n\nTITLE: Building host application for Zephyr deployment using Nx CLI\nDESCRIPTION: This snippet performs the build of the host application, which will embed or integrate the remote micro-frontends. Building the host ensures that it can correctly consume the remotes after they are built, facilitating proper integration in Zephyr environments. Dependencies are Nx CLI and existing project setup.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/migrate-nx-webpack-to-rspack.mdx#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpx nx run host:build\n```\n\n----------------------------------------\n\nTITLE: Creating Zustand Store in app1 (TypeScript)\nDESCRIPTION: This code snippet defines a Zustand store with a counter, increment, and decrement functions. It exports both the store and a custom hook `useCounter` for easy access to the store's state and actions within React components. This is the state management logic that will be shared between the two applications.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/react-native/state-manager-sharing-between-react-native-applications.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// app1/store.ts\nimport { createStore, useStore } from \"zustand\";\n\nexport const store = createStore<{ count: number; increment: () => void; decrement: () => void; }>((set) => ({\n  count: 100,\n  increment: () => set((state) => ({ count: state.count + 1 })),\n  decrement: () => set((state) => ({ count: state.count - 1 })),\n}));\n\nexport const useCounter = () => {\n  return useStore(store);\n};\n\n```\n\n----------------------------------------\n\nTITLE: Generating an Error Message with getErrorMessage Function\nDESCRIPTION: Calls getErrorMessage with the error code 'ZE20019' to produce a user-readable error message based on predefined mappings. The message can be used for display or logging purposes.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze20019.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n# {getErrorMessage('ZE20019')}\n```\n\n----------------------------------------\n\nTITLE: Checking File Permissions with Bash\nDESCRIPTION: This bash command is used to list the file permissions of a parent directory.  It is used to check if the current user has the permissions needed to create a directory within the specified path.  The output provides details on permissions, owner, group, and other relevant file information.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze10021.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nls -l /path/to/parent/directory\n```\n\n----------------------------------------\n\nTITLE: Importing RepackTabs Component in JavaScript\nDESCRIPTION: This snippet shows the ES6 import statement importing the RepackTabs React component from the specified project-relative path. It demonstrates the usage of an alias (@) for clean path resolution and enables later rendering of RepackTabs in the documentation's React context.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/repack-mf.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport RepackTabs from '@/components/zephyr/repack/repack-docs';\n```\n\n----------------------------------------\n\nTITLE: Rendering a Specific Error Message with ErrorInfo Component\nDESCRIPTION: This snippet calls the getErrorMessage function with an error code ('ZE20024') and renders the ErrorInfo component with the same error code, allowing users to view error details in the UI. Dependencies include the imported ErrorInfo component and error message helper, useful for error visualization in React applications.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze20024.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n<ErrorInfo code=\"ZE20024\" terminal />\n```\n\n----------------------------------------\n\nTITLE: Rendering BlogPosts Component in React\nDESCRIPTION: This snippet renders the `BlogPosts` component, presumably for displaying blog post resources. The specifics of how `BlogPosts` functions are not shown, but it must display the blog post content or links. It depends on the existence and functionality of the imported `BlogPosts` component. The output is the rendering of the blog posts component.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/learning/resources.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<BlogPosts />\n```\n\n----------------------------------------\n\nTITLE: Placeholder for Future Documentation and Support Notice\nDESCRIPTION: Includes a TODO comment indicating pending documentation updates, along with a warning note that additional details are not yet documented. Provides contact information via Discord for assistance, enhancing user support channels.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze20019.mdx#_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n/* TODO */\n\n::: warning\n\nNot documented yet. Had a problem and need help?\n\nContact us in our [discord](https://zephyr-cloud.io/discord)!\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Build remote1 application with Nx\nDESCRIPTION: This command builds the remote1 application using the Nx build system.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/react-rspack-nx.mdx#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnx run remote1:build\n```\n\n----------------------------------------\n\nTITLE: Importing React Components Synchronously - TypeScript\nDESCRIPTION: This code snippet shows how to import a federated component synchronously after bootstrapping the application. It requires the application to load federated modules before the application code runs. This simplifies the import statement and avoids the need for `React.lazy` and `Suspense`.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/react-native/bootstrapping-your-native-application.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport MyComponent from \"my-remote/MyComponent\";\n\nfunction App() {\n  return <MyComponent />;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Building remote2 for Zephyr deployment using Nx CLI\nDESCRIPTION: This snippet executes the build process for remote2, similar to remote1, essential for preparing the second remote micro-frontend. It ensures that remote2 is built and ready for Zephyr to map in host applications. Dependencies include Nx CLI and correct project configuration.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/migrate-nx-webpack-to-rspack.mdx#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpx nx run remote2:build\n```\n\n----------------------------------------\n\nTITLE: Displaying Error Information in JSX\nDESCRIPTION: This snippet uses the ErrorInfo component to display information about the ZE10021 error.  The code attribute sets the error code and terminal indicates if it is a terminal error. The getErrorMessage function is used to retrieve the corresponding error message based on the code.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze10021.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ErrorInfo code=\"ZE10021\" terminal />\n```\n\n----------------------------------------\n\nTITLE: Importing Button Component in React/JSX\nDESCRIPTION: Imports the `Button` component from a relative path (`../../components/ui/button`). This snippet is part of the documentation page's front-end code (likely using React or a similar framework with MDX) and is used to render UI elements on the page itself.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/how-to/browser-extension.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from \"../../components/ui/button\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Cloudflare CNAME DNS Record for Zephyr\nDESCRIPTION: Details the necessary CNAME DNS record configuration within Cloudflare for Zephyr integration. This wildcard record (`*`) points to `ze.zephyrcloud.app`, ensuring traffic for Zephyr deployments is proxied through Cloudflare. The TTL is set to Auto.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/cloud/cloudflare.mdx#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n| Type  | Name |       Content        | Proxy Status | TTL  |\n| :---: | :--: | :------------------: | :----------: | :--: |\n| CNAME | `*`  | `ze.zephyrcloud.app` |   Proxied    | Auto |\n```\n\n----------------------------------------\n\nTITLE: Creating and Setting Remote Origin with GitHub CLI\nDESCRIPTION: Uses the GitHub CLI (`gh repo create`) to create a new repository on GitHub and automatically set it as the 'origin' remote for the local Git repository. This is one method Zephyr requires for establishing a unique project identifier.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/general/create-mf-app.mdx#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ngh repo create\n```\n\n----------------------------------------\n\nTITLE: Starting MiniApp in Standalone Mode (Bash)\nDESCRIPTION: A `pnpm` command to run the 'start:standalone' script within the 'MiniApp' package for the iOS platform. This starts the MiniApp's development server in standalone mode (usually on port 8081), allowing independent development and testing.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/components/zephyr/repack/start-from-scratch.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm --filter MiniApp start:standalone --platform ios\n\n```\n\n----------------------------------------\n\nTITLE: Pushing Initial Commit to Remote Origin (Optional)\nDESCRIPTION: Pushes the 'main' branch from the local Git repository to the configured 'origin' remote repository (e.g., GitHub) using `git push -u origin main`. The `-u` flag sets the upstream tracking reference.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/general/create-mf-app.mdx#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ngit push -u origin main\n```\n\n----------------------------------------\n\nTITLE: Stabilizing iOS Port in package.json (JSON)\nDESCRIPTION: This snippet shows how to stabilize the port number for the React Native application by adding the `RTC_METRO_PORT` environment variable to the `ios` script in `package.json`. This ensures the iOS application uses port 8081 to communicate with the bundler.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/react-native/configuring-remote.mdx#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"ios\": \"RTC_METRO_PORT=8081 react-native run-ios --no-packager\"\n```\n\n----------------------------------------\n\nTITLE: Running HostApp iOS Build/Start (Bash)\nDESCRIPTION: A `pnpm` command specifically targeting the 'HostApp' package to execute its 'ios' script. This command typically builds and starts the HostApp on an iOS simulator/device, relying on an external bundler (due to `--no-packager` in the script).\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/components/zephyr/repack/start-from-scratch.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm --filter HostApp run ios\n\n```\n\n----------------------------------------\n\nTITLE: Starting MiniApp Dev Server (Bash)\nDESCRIPTION: A `pnpm` command to run the 'start' script within the 'MiniApp' package for the iOS platform. This command starts the MiniApp's development server (usually on port 9001 as configured) and deploys the application.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/components/zephyr/repack/start-from-scratch.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm --filter MiniApp start --platform ios\n\n```\n\n----------------------------------------\n\nTITLE: Importing Error Message Helper and Error Info Component in TypeScript\nDESCRIPTION: This snippet imports a helper function for generating error messages and an error info component for displaying error details within a React or TSX context. The imports set up dependencies for handling and displaying errors related to the Zephyr Cloud platform.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze20024.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { getErrorMessage } from '../../lib/error-helpers.ts';\nimport { ErrorInfo } from '../../components/errors/info.tsx';\n```\n\n----------------------------------------\n\nTITLE: Checking Configuration with curl (Bash)\nDESCRIPTION: This bash command uses `curl` to verify that the remote module is configured correctly. It checks if the container file is being served at the expected URL. A large block of JavaScript indicates success.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/react-native/configuring-remote.mdx#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:8081/ios/Cart.container.js.bundle\n```\n\n----------------------------------------\n\nTITLE: Copying a Single Zephyr Example Using degit in Bash\nDESCRIPTION: This command uses npx degit to copy a specific example from the ZephyrCloudIO examples repository to a local directory. It creates a clean copy without git history, allowing you to initialize your own git repository afterward.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/how-to/fork-our-examples.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx degit ZephyrCloudIO/zephyr-examples/examples/create-default-webpack-mf local-copy\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering React Components for Recipes Page\nDESCRIPTION: Imports the `Recipes` and `CardLayout` React components from relative project directories. It then renders the `Recipes` component nested inside the `CardLayout` component to structure the page content. This pattern is common in React for component composition.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Recipes } from '../components/recipes';\nimport { CardLayout } from '../components/ui/card-layout';\n\n<CardLayout>\n  <Recipes />\n</CardLayout>\n```\n\n----------------------------------------\n\nTITLE: Updating Zephyr plugins to latest version\nDESCRIPTION: Commands to update various Zephyr plugins to their latest versions to ensure you have the most recent features and bug fixes that might resolve the error.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze20013.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Choose the plugin you are using\nnpm install zephyr-webpack-plugin --latest\nnpm install rollup-plugin-zephyr --latest\nnpm install vite-plugin-zephyr --latest\n```\n\n----------------------------------------\n\nTITLE: Importing Error Message Helper Function in TypeScript\nDESCRIPTION: This snippet imports the 'getErrorMessage' function from a helper library, which is used to retrieve user-friendly error messages based on error codes. The dependency is a TypeScript module located at '../../lib/error-helpers.ts'.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze20027.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { getErrorMessage } from '../../lib/error-helpers.ts';\n```\n\n----------------------------------------\n\nTITLE: Rendering Error Info Component (JSX)\nDESCRIPTION: Renders the `ErrorInfo` React component. The `code` prop is set to \"ZE20014\", specifying the error code to display information for. The `terminal` prop likely controls the display style or format of the error information.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze20014.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<ErrorInfo code=\"ZE20014\" terminal />\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Repository\nDESCRIPTION: Initializes a new Git repository in the current project directory using the `git init` command. This is the first step in setting up version control for the project, required by Zephyr.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/general/create-mf-app.mdx#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ngit init\n```\n\n----------------------------------------\n\nTITLE: Importing Steps Component for Documentation Rendering\nDESCRIPTION: Imports the 'Steps' component from the '@theme' library. This component is likely part of a documentation framework (like Docusaurus) used to visually structure the step-by-step instructions within the documentation page.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/how-to/api-token.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Steps } from '@theme';\n```\n\n----------------------------------------\n\nTITLE: Installing vite-plugin-zephyr for Vite (Shell)\nDESCRIPTION: Installs the `vite-plugin-zephyr` npm package using npm. This plugin is required for integrating Vite-based applications with Zephyr Cloud to manage Module Federation configurations.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/vite-rspack-webpack-mf.mdx#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm i vite-plugin-zephyr@latest\n```\n\n----------------------------------------\n\nTITLE: Converting to Rspack\nDESCRIPTION: This command converts the React Native project to use Rspack as the bundler.  Rspack is recommended for better performance and Module Federation support compared to Metro. This utilizes the `@callstack/repack-init` package.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/react-native/rspack-ios-setup.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx @callstack/repack-init\n```\n\n----------------------------------------\n\nTITLE: Running the iOS application (Bash)\nDESCRIPTION: This command builds and runs the React Native application on the iOS simulator.  It executes the `ios` script defined in `package.json`. Prerequisites include a configured React Native environment and the necessary dependencies installed.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/react-native/configuring-host.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run ios\n```\n\n----------------------------------------\n\nTITLE: Placeholder for Future Documentation\nDESCRIPTION: This comment indicates a section marked for future documentation, signaling plans to expand available info or instructions. It serves as a reminder for developers to add relevant details later.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze20024.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n/* TODO */\n```\n\n----------------------------------------\n\nTITLE: TSX component rendering error info with code ZE10019\nDESCRIPTION: Uses ErrorInfo component to visually present the error code 'ZE10019' with terminal context within the troubleshooting page, assisting users in recognizing specific build issues.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze10019.mdx#_snippet_2\n\nLANGUAGE: TSX\nCODE:\n```\n<ErrorInfo code=\"ZE10019\" terminal />\n```\n\n----------------------------------------\n\nTITLE: Creating a Zephyr app with yarn\nDESCRIPTION: This command uses `create zephyr-apps` to scaffold a new Zephyr application using Yarn. Follow the prompts to configure the project, selecting Rolldown as the bundler.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/rolldown-react.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn create zephyr-apps\n```\n\n----------------------------------------\n\nTITLE: Setting Default Git Branch Name to 'main'\nDESCRIPTION: Renames the current default Git branch (often 'master') to 'main' using `git branch -M main`. This aligns with modern Git practices.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/general/create-mf-app.mdx#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ngit branch -M main\n```\n\n----------------------------------------\n\nTITLE: Selecting Bundler in create-mf-app\nDESCRIPTION: Demonstrates the `create-mf-app` prompt for choosing the module bundler, with Webpack and Rspack as options. Rspack is recommended for performance.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/general/create-mf-app.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n? Bundler: (Use arrow keys)\nWebpack\n❯ Rspack\n```\n\n----------------------------------------\n\nTITLE: Import Rspack Module Federation Config\nDESCRIPTION: This code snippet modifies the import path for the `ModuleFederationConfig` to use the `@nx/rspack/module-federation` package.  This ensures the correct configuration is used when migrating from Webpack to Rspack in an Nx workspace. This change updates the import statement to align with the Rspack module federation implementation.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/how-to/migrate-nx-webpack-to-rspack.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// import { ModuleFederationConfig } from '@nx/webpack'; \nimport { ModuleFederationConfig } from '@nx/rspack/module-federation';\n```\n\n----------------------------------------\n\nTITLE: Host package.json example\nDESCRIPTION: This JSON snippet represents the contents of the `package.json` file for the host application. It defines the application's name and version.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/react-rspack-nx.mdx#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"host\",\n  \"version\": \"0.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the Bundler (Bash)\nDESCRIPTION: This bash command starts the React Native bundler. The application connects to the bundler to receive updates and assets.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/react-native/configuring-remote.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Run the host application with Nx\nDESCRIPTION: This command starts the host application in the browser. Nx automatically handles dependencies and starts the remote applications as well.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/react-rspack-nx.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx nx run host:serve\n```\n\n----------------------------------------\n\nTITLE: Create package.json files\nDESCRIPTION: This command creates empty `package.json` files for the host and remote applications.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/react-rspack-nx.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ntouch apps/host/package.json apps/remote1/package.json apps/remote2/package.json\n```\n\n----------------------------------------\n\nTITLE: Project Name and Directory Selection in Nx CLI - Terminal Output\nDESCRIPTION: Displays the CLI output for project naming and directory placement during Nx application generation. Includes possible options for naming convention and directory structure. For documentation and context only.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/nx-mf-app.mdx#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n? What should be the project name and where should it be generated? …\n❯ As provided:\n    Name: shell\n    Root: apps/shell\n  Derived:\n    Name: shell-shell\n    Root: apps/shell/shell\n```\n\n----------------------------------------\n\nTITLE: Installing Module Federation Enhanced (Bash)\nDESCRIPTION: This bash command installs the `@module-federation/enhanced` library, which is required for the Module Federation runtime to function correctly. This needs to be done in the remote React Native application.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/react-native/configuring-remote.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @module-federation/enhanced\n```\n\n----------------------------------------\n\nTITLE: Installing Bundle Dependencies\nDESCRIPTION: This command installs the additional dependencies added by the `repack-init` command. It is required to set up the bundles correctly and utilizes Ruby's `bundle` command.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/react-native/rspack-ios-setup.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbundle install\n```\n\n----------------------------------------\n\nTITLE: Building Turborepo Projects Using pnpm - Bash\nDESCRIPTION: Executes the pnpm package manager to build all projects within the Turborepo monorepo. It respects task dependencies ensuring remote apps are built before the host app. Requires pnpm installed and configured in the environment.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/turborepo-react.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Configuring Rspack Remote Application with Zephyr (JavaScript)\nDESCRIPTION: Example `rspack.config.js` for a remote application built with Rspack, integrated with Zephyr Cloud using the `withZephyr` function from `zephyr-webpack-plugin`. It configures the Rspack context, entry point, development server settings, module federation options (name, filename, exposes './Image', shared dependencies), module rules (assets, CSS with PostCSS/Tailwind, JS/TSX with SWC), and necessary Rspack plugins.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/vite-rspack-webpack-mf.mdx#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst rspack = require('@rspack/core');\nconst refreshPlugin = require('@rspack/plugin-react-refresh');\nconst isDev = process.env.NODE_ENV === 'development';\nconst path = require('path');\nconst { withZephyr } = require('zephyr-webpack-plugin');\n\nconst printCompilationMessage = require('./compilation.config.js');\n\n/**\n * @type {import('@rspack/cli').Configuration}\n */\nmodule.exports = withZephyr()({\n  context: __dirname,\n  entry: {\n    main: './src/index.tsx',\n  },\n\n  devServer: {\n    port: 8081,\n    historyApiFallback: true,\n    watchFiles: [path.resolve(__dirname, 'src')],\n    onListening: function (devServer) {\n      const port = devServer.server.address().port;\n\n      printCompilationMessage('compiling', port);\n\n      devServer.compiler.hooks.done.tap('OutputMessagePlugin', (stats) => {\n        setImmediate(() => {\n          if (stats.hasErrors()) {\n            printCompilationMessage('failure', port);\n          } else {\n            printCompilationMessage('success', port);\n          }\n        });\n      });\n    },\n  },\n  experiments: {\n    css: true,\n  },\n  resolve: {\n    extensions: ['.js', '.jsx', '.ts', '.tsx', '.json'],\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.(svg|png)$/,\n        type: 'asset',\n      },\n      {\n        test: /\\.css$/,\n        use: [\n          {\n            loader: 'postcss-loader',\n            options: {\n              postcssOptions: {\n                plugins: {\n                  tailwindcss: {},\n                  autoprefixer: {},\n                },\n              },\n            },\n          },\n        ],\n        type: 'css',\n      },\n      {\n        test: /\\.(jsx?|tsx?)$/,\n        use: [\n          {\n            loader: 'builtin:swc-loader',\n            options: {\n              sourceMap: true,\n              jsc: {\n                parser: {\n                  syntax: 'typescript',\n                  tsx: true,\n                },\n                transform: {\n                  react: {\n                    runtime: 'automatic',\n                    development: isDev,\n                    refresh: isDev,\n                  },\n                },\n                target: 'es2020',\n              },\n            },\n          },\n        ],\n      },\n    ],\n  },\n  plugins: [\n    new rspack.container.ModuleFederationPlugin({\n      name: 'vite_rspack',\n      filename: 'remoteEntry.js',\n      exposes: {\n        './Image': './src/Image',\n      },\n      shared: ['react', 'react-dom'],\n    }),\n    new rspack.DefinePlugin({\n      'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV),\n    }),\n    new rspack.ProgressPlugin({}),\n    new rspack.HtmlRspackPlugin({\n      template: './src/index.html',\n    }),\n    isDev ? new refreshPlugin() : null,\n  ].filter(Boolean),\n});\n```\n\n----------------------------------------\n\nTITLE: Building Zephyr Cloud Docs Using pnpm - Bash\nDESCRIPTION: This snippet provides the shell commands to install project dependencies and build the Zephyr Cloud documentation using the pnpm package manager. Users must have pnpm installed and run 'pnpm install' to fetch dependencies, followed by 'pnpm build' to generate the static site files. It assumes a node environment and Rspress as the documentation framework.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js Version\nDESCRIPTION: This bash command uses nvm to set the Node.js version to 20. This is a prerequisite for running Modern.js applications, ensuring compatibility and proper environment setup. The command sets the active Node.js version for the current shell.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/modernjs.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnvm use 20\n```\n\n----------------------------------------\n\nTITLE: Chrome Extension usage to view application\nDESCRIPTION: This snippet describes how to access the deployed React app via the Zephyr Cloud Chrome extension by clicking the extension icon to see your application in the dropdown menu. It references an illustrative image for visual aid.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/react-vite.mdx#_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\nOn your browser, click on <ChromeExtension/> to see your application under the dropdown menu:\n\n<Image src=\"/react-vite-ts-side-panel.png\" />\n```\n\n----------------------------------------\n\nTITLE: Import Statements for Error Components in TypeScript\nDESCRIPTION: Imports error handling helper functions and UI components from local project files for managing error display and helpers in a TypeScript React environment.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/errors/ze10017.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { getErrorMessage } from '../../lib/error-helpers.ts';\nimport { ErrorInfo } from '../../components/errors/info.tsx';\nimport { ErrorLink } from '../../components/errors/link.tsx';\nimport { Steps } from '@theme';\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for Documentation\nDESCRIPTION: Imports CtaCard and Separator components from local directories for use in the documentation page. These components are likely used for formatting and structuring the documentation interface.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/general/why-zephyr-cloud.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { CtaCard } from \"../../components/cta.card\"\nimport { Separator } from \"../../components/ui/separator\"\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Zephyr Cloud Documentation Homepage in React JSX\nDESCRIPTION: Imports various React components used to build the Zephyr Cloud documentation homepage. These components include home section components, UI elements like card layouts and separators, a feature table component, and an invertible image component.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/index.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { HomeStart, HomeConcept, HomeRecipes } from '../components/home';\nimport { CardLayout } from '../components/ui/card-layout';\nimport { Separator } from '../components/ui/separator';\nimport { FeatureTable } from '../components/feature-table';\nimport { InvertImage} from \"../components/ui/invert-image\"\n```\n\n----------------------------------------\n\nTITLE: Selecting Language in create-mf-app\nDESCRIPTION: Illustrates the `create-mf-app` prompt allowing the user to choose between TypeScript and JavaScript for the project.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/general/create-mf-app.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n? Language:\n❯ typescript\njavascript\n```\n\n----------------------------------------\n\nTITLE: Selecting Stylesheet Format in Nx CLI - Terminal Output\nDESCRIPTION: Presents the prompt for choosing a stylesheet format during Nx application generation. Users can select among CSS, SASS, LESS, Tailwind, and other options. Informational output illustrating available UI choices.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/nx-mf-app.mdx#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n? Which stylesheet format would you like to use? …\nCSS\nSASS(.scss)       [ https://sass-lang.com                    ]\nLESS              [ https://lesscss.org                      ]\ntailwind          [ https://tailwindcss.com/                 ]\nstyled-components [ https://styled-components.com            ]\nemotion           [ https://emotion.sh                       ]\nstyled-jsx        [ https://www.npmjs.com/package/styled-jsx ]\nNone\n```\n\n----------------------------------------\n\nTITLE: Selecting Monorepo Type in Nx CLI - Terminal Output\nDESCRIPTION: Demonstrates the prompt for choosing the monorepo structure during workspace creation. Options include Package-based Monorepo, Integrated Monorepo, or Standalone projects. No input required; shown for context of CLI-guided process.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/nx-mf-app.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n? Package-based monorepo, integrated monorepo, or standalone project? …\nPackage-based Monorepo:     Nx makes it fast, but lets you run things your way.\nIntegrated Monorepo:        Nx creates a monorepo that contains multiple projects.\nStandalone:                 Nx creates a single project and makes it fast.\n```\n\n----------------------------------------\n\nTITLE: Nx Cloud Setup Prompt in Nx CLI - Terminal Output\nDESCRIPTION: Shows the CLI choices for integrating Nx Cloud with your workspace for improved CI performance. Users can enable Nx Cloud, configure for GitHub Actions or Circle CI, or skip this step. This is an informational output, not code for execution.\nSOURCE: https://github.com/zephyrcloudio/zephyr-documentation/blob/main/docs/recipes/nx-mf-app.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n? Do you want Nx Cloud to make your CI fast? …\n(it's free and can be disabled any time)\nYes, enable Nx Cloud\nYes, configure Nx Cloud for GitHub Actions\nYes, configure Nx Cloud for Circle CI\nSkip for now\n```"
  }
]