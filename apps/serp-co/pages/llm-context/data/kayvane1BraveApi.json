[
  {
    "owner": "kayvane1",
    "repo": "brave-api",
    "content": "TITLE: Performing a Basic Search with Brave Search API Python Wrapper (Python)\nDESCRIPTION: Demonstrates synchronous usage of the Brave class to perform a search using Brave Search API. Requires the brave Python package installed and an API key (via environment variable or parameter). The 'search' method takes a query and a result count, returning a structured object for API results. Outputs an object with all web, news, and video data from Brave.\nSOURCE: https://github.com/kayvane1/brave-api/blob/staging/README.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom brave import Brave\n\nbrave = Brave()\n\nquery = \"cobalt mining\"\nnum_results = 10\n\nsearch_results = brave.search(q=query, count=num_results)\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Web, News, and Video Results from Search Result Object (Python)\nDESCRIPTION: Shows how to access categorized results (web, news, video) from the object returned by the Brave Search API search method. Assumes the variable 'search_results' contains a response from the Brave class search method. Each property yields a list or object representing that section of results.\nSOURCE: https://github.com/kayvane1/brave-api/blob/staging/README.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nweb_results = search_results.web_results\nnews_results = search_results.news_results\nvideo_results = search_results.video_results\n```\n\n----------------------------------------\n\nTITLE: Performing an Asynchronous Search with Brave Search API Python Wrapper (Python)\nDESCRIPTION: Demonstrates asynchronous searching using the AsyncBrave class in the brave package. Requires an async Python environment and the brave package installed. The 'search' method is awaited, and accepts query text and result count as parameters. Ideal for integration in async frameworks or scripts.\nSOURCE: https://github.com/kayvane1/brave-api/blob/staging/README.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom brave import AsyncBrave\n\nbrave = AsyncBrave()\n\nquery = \"cobalt mining\"\nnum_results = 10\n\nsearch_results = await brave.search(q=query, count=num_results)\n```\n\n----------------------------------------\n\nTITLE: Installing Brave Search API Python Wrapper via pip (Bash)\nDESCRIPTION: Installs the brave-search Python package from PyPI using pip. This is the primary installation method for end users who want to access the Brave Search API Python wrapper. The user should have Python and pip already installed.\nSOURCE: https://github.com/kayvane1/brave-api/blob/staging/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install brave-search\n```\n\n----------------------------------------\n\nTITLE: Using Built-in Goggle for Search Reranking in Brave API Python Wrapper (Python)\nDESCRIPTION: Uses a Goggle definition directly provided by the package ('thought_leadership') for customized search ranking. Demonstrates importing predefined Goggles, applying to a search by passing 'goggles_id'. Results are reranked per the internal Goggle logic.\nSOURCE: https://github.com/kayvane1/brave-api/blob/staging/README.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom brave import Brave\nfrom brave.goggles import thought_leadership\n\nquery = \"cobalt mining\"\nnum_results = 10\n\nsearch_results = brave.search(q=query, goggles_id=thought_leadership, count=num_results)\n```\n\n----------------------------------------\n\nTITLE: Applying Academic/Archival Goggle for Custom Search Reranking (Python)\nDESCRIPTION: Shows use of the Brave API's Goggle feature, providing a custom Goggle URL to prioritize academic or archival sources. The 'goggles_id' parameter is set to a remote Goggle definition. Requires an academic query and search_results will be reranked following the Goggle rules.\nSOURCE: https://github.com/kayvane1/brave-api/blob/staging/README.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom brave import Brave\n\nquery = \"cobalt mining\"\ngoggle_url = \"https://raw.githubusercontent.com/CSamuelAnderson/Brave-goggles/main/academic-and-archival.goggle\"\nnum_results = 10\nresult_filter = \"web\" # must be comma separated string\n\nsearch_results = brave.search(q=query, goggles_id=goggle_url, count=num_results, result_filter=result_filter)\n\n```\n\n----------------------------------------\n\nTITLE: Downloading All PDFs from Brave Search Results (Python)\nDESCRIPTION: Illustrates how to use the 'download_pdfs' method to fetch all PDF files referenced in search results. After a search, calling 'download_pdfs' returns a list of file paths for downloaded PDFs. Requires internet access and file writing permissions; uses the brave package for both search and PDF collection.\nSOURCE: https://github.com/kayvane1/brave-api/blob/staging/README.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom brave import Brave\n\nbrave = Brave()\n\nquery = \"cobalt mining\"\nnum_results = 10\n\nsearch_results = brave.search(q=query, count=num_results)\n\nsearch_results.download_pdfs()\n```\n\n----------------------------------------\n\nTITLE: Aggregating Product Prices from Brave Search Results (Python)\nDESCRIPTION: Demonstrates price extraction from search results using 'product_prices' and 'product_price_ranges' methods. Requires a relevant e-commerce query, and optionally, a country parameter for localized results. The first printed list shows all found prices, and the second shows the min/max price tuple. Currency conversion is not supported.\nSOURCE: https://github.com/kayvane1/brave-api/blob/staging/README.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n    from brave import Brave\n\n    brave = Brave()\n\n    query = \"Blue Tack\"\n    num_results = 10\n    country = \"US\"\n    search_results = brave.search(q=query, count=num_results, country=country)\n    print(search_results.product_prices())\n    # >> [6.28, 5.98, 4.99, 13.18, 6.59, 7.8, 5.56, 10.79, 5.02, 10.56, 16.95, 9.99, 23.59, 16.31, 11.96]\n    print(search_results.product_price_ranges())\n    # >> (4.99, 23.59)\n```\n\n----------------------------------------\n\nTITLE: Aggregating Average Product Review Scores from Brave Search Results (Python)\nDESCRIPTION: Uses 'average_product_review_score' method to compute the mean review score for found items, normalized to a 100-point scale. Requires a query expected to yield products with review scores. Output is a floating point value representing the average out of 100.\nSOURCE: https://github.com/kayvane1/brave-api/blob/staging/README.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom brave import Brave\n\nbrave = Brave()\n\nquery = \"Blue Tack\"\nnum_results = 10\nsearch_results = brave.search(q=query, count=num_results)\nprint(search_results.average_product_review_score())\n# >> 88.13333333333333\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Raw JSON Response from Brave Search API (Python)\nDESCRIPTION: Shows how to retrieve the raw JSON dictionary response from the search endpoint by using the 'raw' flag. Useful for users who wish to bypass Pydantic validation or work with custom response formats. Requires brave package and API key, and returns unparsed JSON data.\nSOURCE: https://github.com/kayvane1/brave-api/blob/staging/README.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom brave import Brave\n\nquery = \"George Orwell, 1984\"\nnum_results = 10\n\nsearch_results = brave.search(q=query, raw=True)\n```\n\n----------------------------------------\n\nTITLE: Initializing the Development Environment with Make (Bash)\nDESCRIPTION: Executes the `init` recipe defined in the project's Makefile. According to the surrounding text, this command cleans up the current virtual environment, installs poetry, creates a new virtual environment, and installs all dependencies.\nSOURCE: https://github.com/kayvane1/brave-api/blob/staging/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake init\n```\n\n----------------------------------------\n\nTITLE: Initializing Development Environment using Make and Poetry (Bash)\nDESCRIPTION: Initializes local development dependencies and environment for the Brave Search API Python package. Assumes Poetry is already installed. Running 'make init' will likely invoke Poetry install scripts to set up the virtual environment and dependencies.\nSOURCE: https://github.com/kayvane1/brave-api/blob/staging/README.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nmake init\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with Poetry (Bash)\nDESCRIPTION: This command uses Poetry to install all the project dependencies defined in the `pyproject.toml` file. It creates a virtual environment if one doesn't exist and installs the required packages within it.\nSOURCE: https://github.com/kayvane1/brave-api/blob/staging/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npoetry install\n```\n\n----------------------------------------\n\nTITLE: Activating the Python Virtual Environment (Bash)\nDESCRIPTION: Activates the Python virtual environment located in the `.venv` directory, created by tools like Poetry or `make init`. This command modifies the shell's environment variables (like PATH) to prioritize the Python interpreter and packages installed within this virtual environment.\nSOURCE: https://github.com/kayvane1/brave-api/blob/staging/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsource .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Adding a Dependency with Poetry (Bash)\nDESCRIPTION: Uses the Poetry command-line interface to add a new dependency (`requests` in this example) to the project. Poetry automatically resolves the appropriate version, updates the `pyproject.toml` and `poetry.lock` files, and installs the package into the active virtual environment.\nSOURCE: https://github.com/kayvane1/brave-api/blob/staging/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npoetry add requests\n```\n\n----------------------------------------\n\nTITLE: Displaying Available Make Recipes (Bash)\nDESCRIPTION: Executes the `help` target in the project's Makefile. This command is conventionally used to list all the available Make recipes (automation commands) defined in the Makefile, providing a quick reference for developers.\nSOURCE: https://github.com/kayvane1/brave-api/blob/staging/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmake help\n```\n\n----------------------------------------\n\nTITLE: Listing Available Poetry Commands (Bash)\nDESCRIPTION: Displays a comprehensive list of all commands available within the Poetry command-line interface. This is useful for exploring Poetry's functionalities for dependency management and package building.\nSOURCE: https://github.com/kayvane1/brave-api/blob/staging/CONTRIBUTING.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npoetry list\n```"
  }
]