[
  {
    "owner": "librosa",
    "repo": "librosa",
    "content": "TITLE: Advanced Audio Feature Extraction with Librosa\nDESCRIPTION: An advanced example demonstrating harmonic-percussive separation, spectral feature extraction (MFCC and chroma), and beat-synchronous feature aggregation. The code processes audio to extract and synchronize multiple features between detected beat frames.\nSOURCE: https://github.com/librosa/librosa/blob/main/docs/tutorial.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Feature extraction example\nimport numpy as np\nimport librosa\n\n# Load the example clip\ny, sr = librosa.load(librosa.ex('nutcracker'))\n\n# Set the hop length; at 22050 Hz, 512 samples ~= 23ms\nhop_length = 512\n\n# Separate harmonics and percussives into two waveforms\ny_harmonic, y_percussive = librosa.effects.hpss(y)\n\n# Beat track on the percussive signal\ntempo, beat_frames = librosa.beat.beat_track(y=y_percussive, \n                                             sr=sr)\n\n# Compute MFCC features from the raw signal\nmfcc = librosa.feature.mfcc(y=y, sr=sr, hop_length=hop_length, n_mfcc=13)\n\n# And the first-order differences (delta features)\nmfcc_delta = librosa.feature.delta(mfcc)\n\n# Stack and synchronize between beat events\n# This time, we'll use the mean value (default) instead of median\nbeat_mfcc_delta = librosa.util.sync(np.vstack([mfcc, mfcc_delta]),\n                                    beat_frames)\n\n# Compute chroma features from the harmonic signal\nchromagram = librosa.feature.chroma_cqt(y=y_harmonic, \n                                        sr=sr)\n\n# Aggregate chroma features between beat events\n# We'll use the median value of each feature between beat frames\nbeat_chroma = librosa.util.sync(chromagram, \n                                beat_frames,\n                                aggregate=np.median)\n\n# Finally, stack all beat-synchronous features together\nbeat_features = np.vstack([beat_chroma, beat_mfcc_delta])\n```\n\n----------------------------------------\n\nTITLE: Basic Beat Tracking in Python with Librosa\nDESCRIPTION: A quickstart example demonstrating how to load an audio file, track beats, and convert frame indices to timestamps using librosa. The code loads an included example, extracts beat information, and prints the estimated tempo.\nSOURCE: https://github.com/librosa/librosa/blob/main/docs/tutorial.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Beat tracking example\nimport librosa\n\n# 1. Get the file path to an included audio example\nfilename = librosa.example('nutcracker')\n\n\n# 2. Load the audio as a waveform `y`\n#    Store the sampling rate as `sr`\ny, sr = librosa.load(filename)\n\n# 3. Run the default beat tracker\ntempo, beat_frames = librosa.beat.beat_track(y=y, sr=sr)\n\nprint('Estimated tempo: {:.2f} beats per minute'.format(tempo))\n\n# 4. Convert the frame indices of beat events into timestamps\nbeat_times = librosa.frames_to_time(beat_frames, sr=sr)\n```\n\n----------------------------------------\n\nTITLE: Blockwise Audio Streaming with Librosa\nDESCRIPTION: Shows how to process large audio files in blocks using librosa's streaming interface. The example computes chroma features on blocks of 128 frames at a time, with proper frame and hop length calculations.\nSOURCE: https://github.com/librosa/librosa/blob/main/docs/ioformats.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport librosa\n\nsr = librosa.get_samplerate('/path/to/file.wav')\n\n# Set the frame parameters to be equivalent to the librosa defaults\n# in the file's native sampling rate\nframe_length = (2048 * sr) // 22050\nhop_length = (512 * sr) // 22050\n\n# Stream the data, working on 128 frames at a time\nstream = librosa.stream('path/to/file.wav',\n                        block_length=128,\n                        frame_length=frame_length,\n                        hop_length=hop_length)\n\nchromas = []\nfor y in stream:\n   chroma_block = librosa.feature.chroma_stft(y=y, sr=sr,\n                                              n_fft=frame_length,\n                                              hop_length=hop_length,\n                                              center=False)\n   chromas.append(chromas)\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-channel Harmonic Spectrogram in Python with Librosa\nDESCRIPTION: Demonstrates the process of creating a multi-channel harmonic spectrogram using librosa.interp_harmonics() on a stereo STFT.\nSOURCE: https://github.com/librosa/librosa/blob/main/docs/multichannel.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nS_stereo = np.abs(D_stereo)\n\n# Get the default Fourier frequencies\nfreqs = librosa.fft_frequencies(sr=sr)\n\n# We'll interpolate the first five harmonics of each frequency\nharmonics = [1, 2, 3, 4, 5]\n\nS_harmonics = librosa.interp_harmonics(S_stereo, freqs=freqs, h_range=harmonics)\n```\n\n----------------------------------------\n\nTITLE: Stacking Beat-Synchronized Features in Python using Numpy\nDESCRIPTION: This snippet demonstrates how to vertically stack beat-synchronized chroma and MFCC delta features using NumPy. The resulting beat_features matrix combines chroma and MFCC delta information for each beat interval.\nSOURCE: https://github.com/librosa/librosa/blob/main/docs/tutorial.rst#2025-04-22_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nbeat_features = np.vstack([beat_chroma, beat_mfcc_delta])\n```\n\n----------------------------------------\n\nTITLE: Writing Audio Files with SoundFile\nDESCRIPTION: Demonstrates how to write audio files in various formats (WAV, FLAC, OGG) with different bit depths using soundfile.\nSOURCE: https://github.com/librosa/librosa/blob/main/docs/ioformats.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport soundfile as sf\n\nrate = 44100\ndata = np.random.uniform(-1, 1, size=(rate * 10, 2))\n\n# Write out audio as 24bit PCM WAV\nsf.write('stereo_file.wav', data, samplerate, subtype='PCM_24')\n\n# Write out audio as 24bit Flac\nsf.write('stereo_file.flac', data, samplerate, format='flac', subtype='PCM_24')\n\n# Write out audio as 16bit OGG\nsf.write('stereo_file.ogg', data, samplerate, format='ogg', subtype='vorbis')\n```\n\n----------------------------------------\n\nTITLE: Reading Audio Files with SoundFile in Python\nDESCRIPTION: Demonstrates how to read audio files using soundfile instead of librosa's default loader. The example shows reading an audio file, transposing the data, and resampling it to 22050 Hz to match librosa's default behavior.\nSOURCE: https://github.com/librosa/librosa/blob/main/docs/ioformats.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport librosa\nimport soundfile as sf\n\n# Get example audio file\nfilename = librosa.ex('trumpet')\n\ndata, samplerate = sf.read(filename, dtype='float32')\ndata = data.T\ndata_22k = librosa.resample(data, samplerate, 22050)\n```\n\n----------------------------------------\n\nTITLE: Computing Short-time Fourier Transform for Stereo Audio in Python\nDESCRIPTION: Shows how to compute the short-time Fourier transform (STFT) for a stereo audio signal using librosa.stft().\nSOURCE: https://github.com/librosa/librosa/blob/main/docs/multichannel.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nD_stereo = librosa.stft(y_stereo)\n```\n\n----------------------------------------\n\nTITLE: Loading Multi-channel Audio in Python using Librosa\nDESCRIPTION: Demonstrates how to load a multi-channel audio file using librosa.load() with mono=False to preserve stereo channels.\nSOURCE: https://github.com/librosa/librosa/blob/main/docs/multichannel.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport librosa\n\n# Get the \"high-quality\" multi-channel version of \n# an example track\nfilename = librosa.ex('trumpet', hq=True)\n\n# Load as multi-channel data\ny_stereo, sr = librosa.load(filename, mono=False)\n```\n\n----------------------------------------\n\nTITLE: Reading Audio from ZIP Archives using SoundFile\nDESCRIPTION: Demonstrates how to read audio files from within ZIP archives using soundfile and file-like objects. Uses BytesIO for temporary buffer storage.\nSOURCE: https://github.com/librosa/librosa/blob/main/docs/ioformats.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport zipfile as zf\nimport soundfile as sf\nimport io\n\nwith zf.ZipFile('test.zip') as myzip:\n    with myzip.open('stereo_file.wav') as myfile:\n        tmp = io.BytesIO(myfile.read())\n        data, samplerate = sf.read(tmp)\n```\n\n----------------------------------------\n\nTITLE: Defining Audio Processing Terms in reStructuredText\nDESCRIPTION: This code snippet defines a glossary of audio processing terms using reStructuredText format. It includes definitions for concepts such as time series, sampling rate, frames, windows, and spectrograms, which are crucial for understanding and working with the Librosa library.\nSOURCE: https://github.com/librosa/librosa/blob/main/docs/glossary.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. glossary::\n\n    time series\n        Typically an audio signal, denoted by `y`, and represented as a\n        one-dimensional *numpy.ndarray* of floating-point values.  `y[t]` \n        corresponds to amplitude of the waveform at sample `t`.\n    \n    sampling rate\n        The number of samples per second of a time series.  \n        This is denoted by a positive number `sr`.\n\n    frame\n        A short slice of a :term:`time series` used for analysis purposes.  This\n        usually corresponds to a single column of a spectrogram matrix.\n\n    window\n        A vector or function used to weight samples within a frame when computing\n        a spectrogram.\n\n    frame length\n        The (positive integer) number of samples in an analysis window (or\n        :term:`frame`).\n        This is denoted by an integer variable `n_fft`.\n\n    hop length\n        The number of samples between successive frames, e.g., the columns\n        of a spectrogram.  This is denoted as a positive integer `hop_length`.\n\n    window length\n        The length (width) of the window function (e.g., Hann window).  Note that this\n        can be smaller than the :term:`frame length` used in a short-time Fourier\n        transform.  Typically denoted as a positive integer variable `win_length`.\n\n    spectrogram\n        A matrix `S` where the rows index frequency bins, and the columns index\n        frames (time).  Spectrograms can be either real-valued or complex-valued.  By\n        convention, real-valued spectrograms are denoted as *numpy.ndarray*\\ s `S`,\n        while complex-valued STFT matrices are denoted as `D`.\n\n    onset (strength) envelope\n        An onset envelope `onset_env[t]` measures the strength of note onsets at\n        frame `t`.  Typically stored as a one-dimensional *numpy.ndarray* of\n        floating-point values `onset_envelope`.\n\n    chroma\n        Also known as pitch class profile (PCP).  Chroma representations measure the\n        amount of relative energy in each pitch class (e.g., the 12 notes in the \n        chromatic scale) at a given frame/time.\n```\n\n----------------------------------------\n\nTITLE: Reading Audio from URLs using SoundFile\nDESCRIPTION: Shows how to download and read audio files directly from URLs using soundfile and urllib.\nSOURCE: https://github.com/librosa/librosa/blob/main/docs/ioformats.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport soundfile as sf\nimport io\n\nfrom six.moves.urllib.request import urlopen\n\nurl = \"https://raw.githubusercontent.com/librosa/librosa/master/tests/data/test1_44100.wav\"\n\ndata, samplerate = sf.read(io.BytesIO(urlopen(url).read()))\n```\n\n----------------------------------------\n\nTITLE: Purging the Librosa Cache\nDESCRIPTION: Shows how to clear the Librosa cache to free up disk space, as the cache has no automatic eviction policy.\nSOURCE: https://github.com/librosa/librosa/blob/main/docs/cache.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> librosa.cache.clear()\n```\n\n----------------------------------------\n\nTITLE: Verifying librosa installation\nDESCRIPTION: Python code snippet to import librosa and display version information to verify successful installation.\nSOURCE: https://github.com/librosa/librosa/blob/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport librosa\nlibrosa.show_versions()\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Running with Cache Level 50\nDESCRIPTION: Demonstrates enabling the cache at level 50, which caches the maximum amount of data. Shows both the initial run and the second run, which benefits from caching.\nSOURCE: https://github.com/librosa/librosa/blob/main/docs/cache.rst#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ export LIBROSA_CACHE_DIR=/tmp/librosa\n\n$ export LIBROSA_CACHE_LEVEL=50\n\n$ time -p ./estimate_tuning.py Kevin_MacLeod_-_Vibe_Ace.ogg \nLoading  Kevin_MacLeod_-_Vibe_Ace.ogg\nSeparating harmonic component ... \nEstimating tuning ... \n+9.00 cents\nreal 7.60\nuser 6.79\nsys 1.15\n\n$ time -p ./estimate_tuning.py Kevin_MacLeod_-_Vibe_Ace.ogg \nLoading  Kevin_MacLeod_-_Vibe_Ace.ogg\nSeparating harmonic component ... \nEstimating tuning ... \n+9.00 cents\nreal 1.64\nuser 1.30\nsys 0.74\n```\n\n----------------------------------------\n\nTITLE: Running with Intermediate Cache Level 20\nDESCRIPTION: Shows the effect of reducing the cache level to 20, which caches fewer items but still provides performance improvement over no caching.\nSOURCE: https://github.com/librosa/librosa/blob/main/docs/cache.rst#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ export LIBROSA_CACHE_LEVEL=20\n\n$ time -p ./estimate_tuning.py Kevin_MacLeod_-_Vibe_Ace.ogg \nLoading  Kevin_MacLeod_-_Vibe_Ace.ogg\nSeparating harmonic component ... \nEstimating tuning ... \n+9.00 cents\nreal 4.98\nuser 4.17\nsys 1.22\n```\n\n----------------------------------------\n\nTITLE: Installing Librosa via conda\nDESCRIPTION: Installation command for librosa using conda package manager from conda-forge channel.\nSOURCE: https://github.com/librosa/librosa/blob/main/docs/install.rst#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nconda install -c conda-forge librosa\n```\n\n----------------------------------------\n\nTITLE: Installing Librosa from Source\nDESCRIPTION: Commands for installing librosa from a downloaded source archive, including steps for extraction and installation using setuptools.\nSOURCE: https://github.com/librosa/librosa/blob/main/docs/install.rst#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ntar xzf librosa-VERSION.tar.gz\ncd librosa-VERSION/\npython setup.py install\n```\n\n----------------------------------------\n\nTITLE: Librosa Function Usage Examples\nDESCRIPTION: Example usage of various librosa functions mentioned in the changelog, including display.specshow, iirt, reassigned_spectrogram, and others. These functions provide audio processing and visualization capabilities.\nSOURCE: https://github.com/librosa/librosa/blob/main/docs/changelog.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nlibrosa.display.specshow(S)  # Display spectrogram with centered coordinate grids\nlibrosa.iirt(y, sr)  # Apply IIR filtering with customizable resampling modes\nlibrosa.effects.deemphasis(y)  # Apply deemphasis without modifying input\nlibrosa.yin(y, fmin, fmax)  # Estimate fundamental frequency\nlibrosa.vqt(y)  # Compute variable-Q transform\n```\n\n----------------------------------------\n\nTITLE: Importing Librosa Display Module in Python\nDESCRIPTION: Code snippet showing how to properly import the librosa.display submodule, which is required for visualization functionality in versions prior to 0.10.\nSOURCE: https://github.com/librosa/librosa/blob/main/docs/troubleshooting.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport librosa.display\n```\n\n----------------------------------------\n\nTITLE: Enabling Librosa Cache via Command Line\nDESCRIPTION: Shows how to enable the Librosa cache by setting the LIBROSA_CACHE_DIR environment variable before starting Python.\nSOURCE: https://github.com/librosa/librosa/blob/main/docs/cache.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ export LIBROSA_CACHE_DIR=/tmp/librosa_cache\n$ ipython\n```\n\n----------------------------------------\n\nTITLE: Setting Librosa Data Directory in Python\nDESCRIPTION: Python code to set the LIBROSA_DATA_DIR environment variable directly within a Python script before importing librosa\nSOURCE: https://github.com/librosa/librosa/blob/main/docs/recordings.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> import os\n>>> os.environ['LIBROSA_DATA_DIR'] = '/path/to/librosa-data/audio'\n>>> import librosa\n```\n\n----------------------------------------\n\nTITLE: Enabling Librosa Cache within Python\nDESCRIPTION: Demonstrates how to enable the Librosa cache from within Python by setting the environment variable before importing the library.\nSOURCE: https://github.com/librosa/librosa/blob/main/docs/cache.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> import os\n>>> os.environ['LIBROSA_CACHE_DIR'] = '/tmp/librosa_cache'\n>>> import librosa\n```\n\n----------------------------------------\n\nTITLE: Setting Librosa Data Directory Environment Variable via Bash\nDESCRIPTION: Sets the LIBROSA_DATA_DIR environment variable to specify the location of local audio files before running a Python script\nSOURCE: https://github.com/librosa/librosa/blob/main/docs/recordings.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ export LIBROSA_DATA_DIR=/path/to/librosa-data/audio\n$ python my_librosa_script.py\n```\n\n----------------------------------------\n\nTITLE: Getting System Information for Bug Reports in Python\nDESCRIPTION: Python code snippet for collecting system information to include in bug reports, including platform, Python version, and key library versions.\nSOURCE: https://github.com/librosa/librosa/blob/main/CONTRIBUTING.md#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport platform; print(platform.platform())\nimport sys; print(\"Python\", sys.version)\nimport numpy; print(\"NumPy\", numpy.__version__)\nimport scipy; print(\"SciPy\", scipy.__version__)\nimport librosa; print(\"librosa\", librosa.__version__)\n```\n\n----------------------------------------\n\nTITLE: Installing ffmpeg with conda\nDESCRIPTION: Command to install ffmpeg using Anaconda's conda package manager to support MP3 decoding in librosa.\nSOURCE: https://github.com/librosa/librosa/blob/main/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nconda install -c conda-forge ffmpeg\n```\n\n----------------------------------------\n\nTITLE: Installing Librosa via pip\nDESCRIPTION: Standard pip installation commands for librosa package. Includes options for system-wide and user-specific installation.\nSOURCE: https://github.com/librosa/librosa/blob/main/docs/install.rst#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install librosa\n```\n\nLANGUAGE: shell\nCODE:\n```\nsudo pip install librosa\n```\n\nLANGUAGE: shell\nCODE:\n```\npip install -u librosa\n```\n\n----------------------------------------\n\nTITLE: Installing ffmpeg on Linux (apt-get)\nDESCRIPTION: Command to install ffmpeg on Debian/Ubuntu Linux systems using apt-get package manager.\nSOURCE: https://github.com/librosa/librosa/blob/main/README.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\napt-get install ffmpeg\n```\n\n----------------------------------------\n\nTITLE: Installing librosa with pip\nDESCRIPTION: Command to install the librosa package using Python's pip package manager.\nSOURCE: https://github.com/librosa/librosa/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install librosa\n```\n\n----------------------------------------\n\nTITLE: Installing GStreamer Python bindings\nDESCRIPTION: Command to install the Python bindings required for GStreamer integration with librosa.\nSOURCE: https://github.com/librosa/librosa/blob/main/README.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install pygobject\n```\n\n----------------------------------------\n\nTITLE: Installing librosa with conda\nDESCRIPTION: Command to install the librosa package using Anaconda's conda package manager from the conda-forge channel.\nSOURCE: https://github.com/librosa/librosa/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nconda install -c conda-forge librosa\n```\n\n----------------------------------------\n\nTITLE: Cloning Librosa Data Repository\nDESCRIPTION: Command to clone the Librosa example data repository to a local directory\nSOURCE: https://github.com/librosa/librosa/blob/main/docs/recordings.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/librosa/data.git /path/to/librosa-data\n```\n\n----------------------------------------\n\nTITLE: Implementing Mel Filter Bank Normalization Test Function\nDESCRIPTION: Defines a function that creates mel filter banks with normalization and padding based on test data parameters.\nSOURCE: https://github.com/librosa/librosa/blob/main/tests/make_mel_norm_test_data.ipynb#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef melfbnorm_test(DATA):\n    # if DATA['norm'] is empty, pass None.\n    if DATA['norm'].shape[-1] == 0:\n        norm = None\n    else:\n        norm = DATA['norm'][0][0]\n\n    wts = librosa.filters.mel(DATA['sr'][0, 0],\n                               DATA['nfft'][0, 0],\n                               n_mels=DATA['nfilts'][0, 0],\n                               fmin=DATA['fmin'][0, 0],\n                               fmax=DATA['fmax'][0, 0],\n                               htk=DATA['htk'][0, 0], \n                               # if DATA['norm'] is empty, pass None.\n                               norm=norm)\n    padded_wts = np.pad(wts, [(0, 0), (0, int(DATA['nfft'][0]//2) - 1)], mode='constant')\n    return padded_wts\n\npadded_wts = melfbnorm_test(DATA)\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring Conda Environment for Librosa Development\nDESCRIPTION: Commands to create a dedicated conda environment for Librosa development and install all required dependencies.\nSOURCE: https://github.com/librosa/librosa/blob/main/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ conda create -n librosa-dev python=3.9\n\n$ conda env update -n librosa-dev --file .github/environment-ci.yml\n\n$ conda activate librosa-dev\n\n$ python -m pip install -e '.[tests]'\n```\n\n----------------------------------------\n\nTITLE: Cloning Librosa Repository with Submodules in Git\nDESCRIPTION: Commands for cloning the forked Librosa repository to your local machine and pulling submodules that contain testing data.\nSOURCE: https://github.com/librosa/librosa/blob/main/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone --recursive git@github.com:YourLogin/librosa.git\n$ cd librosa \n$ git pull --recurse-submodules\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Librosa Development Version\nDESCRIPTION: Command to install the latest development version of librosa directly from GitHub repository using pip.\nSOURCE: https://github.com/librosa/librosa/blob/main/docs/install.rst#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npip install git+https://github.com/librosa/librosa\n```\n\n----------------------------------------\n\nTITLE: Installing Librosa in Development Mode\nDESCRIPTION: Commands for installing librosa in development mode using pip's editable install option, allowing for source code modifications.\nSOURCE: https://github.com/librosa/librosa/blob/main/docs/install.rst#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ntar xzf librosa-VERSION.tar.gz\ncd librosa-VERSION/\npip install -e .\n```\n\n----------------------------------------\n\nTITLE: Running Audio Analysis without Cache (Command Line Example)\nDESCRIPTION: Shows the execution time of an audio tuning estimation script without caching enabled. This demonstrates the baseline performance for comparison.\nSOURCE: https://github.com/librosa/librosa/blob/main/docs/cache.rst#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ time -p ./estimate_tuning.py Kevin_MacLeod_-_Vibe_Ace.ogg \nLoading  Kevin_MacLeod_-_Vibe_Ace.ogg\nSeparating harmonic component ... \nEstimating tuning ... \n+9.00 cents\nreal 6.74\nuser 6.03\nsys 1.09\n```\n\n----------------------------------------\n\nTITLE: Installing librosa using pip with git clone\nDESCRIPTION: Commands to install librosa by cloning the GitHub repository and using pip in development mode.\nSOURCE: https://github.com/librosa/librosa/blob/main/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/librosa/librosa.git\npython -m pip install -e librosa\n```\n\n----------------------------------------\n\nTITLE: Building librosa from source\nDESCRIPTION: Commands to build and install the librosa package from source code.\nSOURCE: https://github.com/librosa/librosa/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython setup.py build\npython setup.py install\n```\n\n----------------------------------------\n\nTITLE: Running Pytest with Librosa Isolation\nDESCRIPTION: Command to run the Librosa test suite in environments with restricted network access, skipping tests that require external data.\nSOURCE: https://github.com/librosa/librosa/blob/main/docs/troubleshooting.rst#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npytest --librosa-isolation\n```\n\n----------------------------------------\n\nTITLE: Installing librosa using pip with source download\nDESCRIPTION: Commands to install librosa from a downloaded zip file using pip in development mode.\nSOURCE: https://github.com/librosa/librosa/blob/main/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nunzip librosa.zip\npython -m pip install -e librosa\n```\n\n----------------------------------------\n\nTITLE: Checking Code Quality with Flake8\nDESCRIPTION: Commands to install and run Flake8 for checking code quality and identifying potential issues.\nSOURCE: https://github.com/librosa/librosa/blob/main/CONTRIBUTING.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ python -m pip install flake8\n$ flake8 librosa\n```\n\n----------------------------------------\n\nTITLE: Committing and Pushing Changes to GitHub\nDESCRIPTION: Commands to add modified files to Git, commit the changes with a message, and push the branch to GitHub.\nSOURCE: https://github.com/librosa/librosa/blob/main/CONTRIBUTING.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ git add <PATH-TO-MODIFIED-FILES>\n\n$ git commit -m \"<COMMIT-MESSAGE>\"\n\n$ git push --set-upstream origin <NAME-NEW-BRANCH>\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Pytest\nDESCRIPTION: Command to run Librosa's test suite using pytest to ensure code has good test coverage.\nSOURCE: https://github.com/librosa/librosa/blob/main/CONTRIBUTING.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ pytest\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Mel Filter Bank Testing\nDESCRIPTION: Imports necessary Python libraries including numpy, librosa, and scipy.io for mel filter bank processing.\nSOURCE: https://github.com/librosa/librosa/blob/main/tests/make_mel_norm_test_data.ipynb#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nimport numpy as np\nimport librosa\nimport scipy.io\n```\n\n----------------------------------------\n\nTITLE: Testing Infinite Norm Value\nDESCRIPTION: Tests mel filter bank generation with an infinite norm value and verifies results.\nSOURCE: https://github.com/librosa/librosa/blob/main/tests/make_mel_norm_test_data.ipynb#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nDATA['norm'] = np.array([[np.inf]])\npadded_wts = melfbnorm_test(DATA)\n# It's the same as the last golden value.\nassert np.allclose(padded_wts, DATA['wts'])\n\nsave_next_test(DATA)\n```\n\n----------------------------------------\n\nTITLE: Importing Librosa Functions\nDESCRIPTION: Code references showing the updated function calls across different librosa modules, with notable changes to parameter names and default values.\nSOURCE: https://github.com/librosa/librosa/blob/main/docs/changelog.rst#2025-04-22_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nlibrosa.decompose.hpss\nlibrosa.util.softmask\nlibrosa.cqt\nlibrosa.hybrid_cqt\nlibrosa.get_duration\nlibrosa.display.frequency_ticks\nlibrosa.feature.chroma_cqt\n```\n\n----------------------------------------\n\nTITLE: Running Pytest Command for Librosa Tests\nDESCRIPTION: Command to run pytest from the top-level source directory to perform tests and verify outputs. An additional flag is provided for testing in isolated environments without network access.\nSOURCE: https://github.com/librosa/librosa/blob/main/tests/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npytest --librosa-isolation\n```\n\n----------------------------------------\n\nTITLE: Asserting Output Correctness\nDESCRIPTION: Validates that the generated weights match the expected values within numerical tolerance.\nSOURCE: https://github.com/librosa/librosa/blob/main/tests/make_mel_norm_test_data.ipynb#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nassert np.allclose(padded_wts, DATA['wts'])\n```\n\n----------------------------------------\n\nTITLE: Importing Librosa Feature Module\nDESCRIPTION: Sphinx-style documentation header and module import for librosa.feature. This module contains audio feature extraction functions.\nSOURCE: https://github.com/librosa/librosa/blob/main/docs/feature.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. _feature:\n\n.. automodule:: librosa.feature\n```\n\n----------------------------------------\n\nTITLE: Importing Librosa Utility Module\nDESCRIPTION: Module import statement for librosa.util which provides various utility functions for audio processing and analysis.\nSOURCE: https://github.com/librosa/librosa/blob/main/docs/util.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. automodule:: librosa.util\n```\n\n----------------------------------------\n\nTITLE: Loading Test Data from MAT File\nDESCRIPTION: Loads the initial test data from a .mat file using scipy.io.loadmat with character string conversion enabled.\nSOURCE: https://github.com/librosa/librosa/blob/main/tests/make_mel_norm_test_data.ipynb#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nLIBROSA_TEST_PATH = '.'\ninfile = os.path.join(LIBROSA_TEST_PATH, 'data/feature-melfb-001.mat')\nDATA = scipy.io.loadmat(infile, chars_as_strings=True)\n```\n\n----------------------------------------\n\nTITLE: Defining reStructuredText Section and Automodule for Librosa Display\nDESCRIPTION: This snippet sets up a reStructuredText section label and uses the automodule directive to generate documentation for the librosa.display module.\nSOURCE: https://github.com/librosa/librosa/blob/main/docs/display.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _display:\n\n.. automodule:: librosa.display\n```\n\n----------------------------------------\n\nTITLE: Creating a Git Branch for New Changes\nDESCRIPTION: Command to create a new branch in Git for implementing changes, preventing direct work on the main branch.\nSOURCE: https://github.com/librosa/librosa/blob/main/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ git switch -c <NAME-NEW-BRANCH>\n```\n\n----------------------------------------\n\nTITLE: Implementing Test Data Save Function\nDESCRIPTION: Defines a function to save test data to numbered .mat files and initializes the test counter.\nSOURCE: https://github.com/librosa/librosa/blob/main/tests/make_mel_norm_test_data.ipynb#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nTEST_NUM = 1\n\ndef save_next_test(data):\n    global TEST_NUM\n    outfile = os.path.join(LIBROSA_TEST_PATH, 'data/feature-melfbnorm-{:03d}.mat'.format(TEST_NUM))\n    scipy.io.savemat(outfile, data)\n    print 'wrote', outfile\n    TEST_NUM += 1\n    \nsave_next_test(DATA)\n```\n\n----------------------------------------\n\nTITLE: Installing GStreamer on Linux (apt-get)\nDESCRIPTION: Command to install GStreamer plugins on Debian/Ubuntu Linux systems using apt-get package manager for audio decoding.\nSOURCE: https://github.com/librosa/librosa/blob/main/README.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\napt-get install gstreamer1.0-plugins-base gstreamer1.0-plugins-ugly\n```\n\n----------------------------------------\n\nTITLE: Installing GStreamer on Linux (yum)\nDESCRIPTION: Command to install GStreamer plugins on RHEL/CentOS/Fedora Linux systems using yum package manager for audio decoding.\nSOURCE: https://github.com/librosa/librosa/blob/main/README.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nyum install gstreamer1.0-plugins-base gstreamer1.0-plugins-ugly\n```\n\n----------------------------------------\n\nTITLE: Testing Empty Norm Value\nDESCRIPTION: Tests mel filter bank generation with an empty norm value and saves the results.\nSOURCE: https://github.com/librosa/librosa/blob/main/tests/make_mel_norm_test_data.ipynb#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nDATA['norm'] = np.array([[]])\nprint DATA['norm'].shape\npadded_wts = melfbnorm_test(DATA)\n# It's different from the last golden value.\nassert not np.allclose(padded_wts, DATA['wts'])\n# Make it the new golden value for this test.\nDATA['wts'] = padded_wts\n\nsave_next_test(DATA)\n```\n\n----------------------------------------\n\nTITLE: Installing ffmpeg on Linux (yum)\nDESCRIPTION: Command to install ffmpeg on RHEL/CentOS/Fedora Linux systems using yum package manager.\nSOURCE: https://github.com/librosa/librosa/blob/main/README.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nyum install ffmpeg\n```\n\n----------------------------------------\n\nTITLE: Installing ffmpeg on macOS\nDESCRIPTION: Command to install ffmpeg on macOS using Homebrew package manager for audio decoding support.\nSOURCE: https://github.com/librosa/librosa/blob/main/README.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nbrew install ffmpeg\n```\n\n----------------------------------------\n\nTITLE: Setting and Checking Norm Value\nDESCRIPTION: Sets the norm field in the test data and verifies its shape.\nSOURCE: https://github.com/librosa/librosa/blob/main/tests/make_mel_norm_test_data.ipynb#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nDATA['norm'] = np.array([[1]])\nprint DATA['norm'].shape\n```\n\n----------------------------------------\n\nTITLE: Installing GStreamer on macOS\nDESCRIPTION: Command to install GStreamer on macOS using Homebrew package manager for audio decoding support.\nSOURCE: https://github.com/librosa/librosa/blob/main/README.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nbrew install gstreamer\n```\n\n----------------------------------------\n\nTITLE: Comparing Output Shapes\nDESCRIPTION: Verifies the shapes of the generated weights and original test data match.\nSOURCE: https://github.com/librosa/librosa/blob/main/tests/make_mel_norm_test_data.ipynb#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nprint padded_wts.shape\nprint DATA['wts'].shape\n```\n\n----------------------------------------\n\nTITLE: Generating Baseline Images for Display Tests\nDESCRIPTION: Command to generate baseline images for visual comparison tests in Librosa's display module.\nSOURCE: https://github.com/librosa/librosa/blob/main/CONTRIBUTING.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ pytest --mpl-generate-path=tmp tests/test_display.py [-k ANY_TESTS_THAT_CHANGED]\n```\n\n----------------------------------------\n\nTITLE: Installing Documentation Dependencies\nDESCRIPTION: Command to install dependencies required for building Librosa's documentation.\nSOURCE: https://github.com/librosa/librosa/blob/main/CONTRIBUTING.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ python -m pip install -e '.[docs]'\n```\n\n----------------------------------------\n\nTITLE: Printing Loaded Test Data\nDESCRIPTION: Displays the contents of the loaded test data structure.\nSOURCE: https://github.com/librosa/librosa/blob/main/tests/make_mel_norm_test_data.ipynb#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nprint DATA\n```\n\n----------------------------------------\n\nTITLE: Building Single-Version HTML Documentation with Make\nDESCRIPTION: Command to build a single version of HTML documentation using the Makefile located in the docs/ folder.\nSOURCE: https://github.com/librosa/librosa/blob/main/docs/BUILD.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake html\n```\n\n----------------------------------------\n\nTITLE: Building Single-Version PDF Documentation with Make\nDESCRIPTION: Command to build a single version of PDF documentation using LaTeX through the Makefile in the docs/ folder.\nSOURCE: https://github.com/librosa/librosa/blob/main/docs/BUILD.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake latexpdf\n```\n\n----------------------------------------\n\nTITLE: Building Multi-Version Documentation with sphinx-multiversion\nDESCRIPTION: Command to build multiple versions of documentation using sphinx-multiversion, with dynamic latest version detection via a shell script. Output is generated in the build/html directory.\nSOURCE: https://github.com/librosa/librosa/blob/main/docs/BUILD.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsphinx-multiversion -D smv_latest_version=$(./scripts/get_latest_release.sh) docs/ build/html\n```\n\n----------------------------------------\n\nTITLE: Setting Upstream Remote to Librosa Repository\nDESCRIPTION: Command to set the upstream remote to the original Librosa repository for keeping your fork in sync.\nSOURCE: https://github.com/librosa/librosa/blob/main/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ git remote add upstream git@github.com:librosa/librosa.git\n```\n\n----------------------------------------\n\nTITLE: Defining Sphinx Directives for Librosa Documentation\nDESCRIPTION: This snippet contains reStructuredText directives for auto-generating documentation for the librosa module using Sphinx. It includes a reference label '_core' and an automodule directive.\nSOURCE: https://github.com/librosa/librosa/blob/main/docs/core.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _core:\n\n.. automodule:: librosa\n```\n\n----------------------------------------\n\nTITLE: Checking Status of Modified Files in Git\nDESCRIPTION: Command to check the status of modified files in the Git repository during development.\nSOURCE: https://github.com/librosa/librosa/blob/main/CONTRIBUTING.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ git status\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Beat Module Reference\nDESCRIPTION: RST directive that creates a reference label for the beat documentation section and links to the librosa.beat module automodule documentation.\nSOURCE: https://github.com/librosa/librosa/blob/main/docs/beat.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _beat:\n\n.. automodule:: librosa.beat\n```\n\n----------------------------------------\n\nTITLE: Importing librosa.decompose Module\nDESCRIPTION: Sphinx documentation directive for automatically generating documentation for the librosa.decompose module. Uses reStructuredText format with a label reference.\nSOURCE: https://github.com/librosa/librosa/blob/main/docs/decompose.rst#2025-04-22_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. _decompose:\n\n.. automodule:: librosa.decompose\n```\n\n----------------------------------------\n\nTITLE: Checking librosa installation with pip list\nDESCRIPTION: Command output example showing how librosa appears in the installed packages list after installation.\nSOURCE: https://github.com/librosa/librosa/blob/main/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nlibrosa (0.x.x, /path/to/librosa)\n```\n\n----------------------------------------\n\nTITLE: Sphinx AutoModule Configuration for Librosa Sequence Documentation\nDESCRIPTION: ReStructuredText directive that automatically generates documentation for the librosa.sequence module using Sphinx autodoc. Includes a reference label for cross-linking.\nSOURCE: https://github.com/librosa/librosa/blob/main/docs/sequence.rst#2025-04-22_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. _sequence:\n\n.. automodule:: librosa.sequence\n```\n\n----------------------------------------\n\nTITLE: Example Code Reference in Documentation\nDESCRIPTION: These are not actual code snippets but rather references to code changes. The document is a changelog that references pull requests and issues rather than containing actual code implementations.\nSOURCE: https://github.com/librosa/librosa/blob/main/docs/changelog.rst#2025-04-22_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\nNo actual code snippets present in the changelog, only references to changes like '#1171', '#1198', etc.\n```\n\n----------------------------------------\n\nTITLE: reStructuredText Module Documentation Reference for librosa.onset\nDESCRIPTION: This code snippet defines a reStructuredText documentation reference for the librosa.onset module. It uses a label '_onset' and the automodule directive to automatically generate documentation from docstrings in the librosa.onset module.\nSOURCE: https://github.com/librosa/librosa/blob/main/docs/onset.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _onset:\n\n.. automodule:: librosa.onset\n```\n\n----------------------------------------\n\nTITLE: Deprecated Function Calls\nDESCRIPTION: List of deprecated functions and parameters that were removed or renamed in librosa updates.\nSOURCE: https://github.com/librosa/librosa/blob/main/docs/changelog.rst#2025-04-22_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nutil.buf_to_int\noutput.frames_csv\nsegment.structure_feature\nfilters.logfrequency\nfeature.logfsgram\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Links and Version Headers\nDESCRIPTION: Hyperlink references and version headers in ReStructuredText format documenting Librosa releases.\nSOURCE: https://github.com/librosa/librosa/blob/main/docs/changelog.rst#2025-04-22_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. _#769: https://github.com/librosa/librosa/issues/769\n.. _#766: https://github.com/librosa/librosa/issues/766\n.. _#760: https://github.com/librosa/librosa/issues/760\n\nv0.6.2\n------\n2018-08-09\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation Structure in RST\nDESCRIPTION: Sets up documentation tree with advanced section label and includes auto-generated examples index. Uses toctree directive to organize documentation hierarchy with depth 2.\nSOURCE: https://github.com/librosa/librosa/blob/main/docs/advanced.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _advanced:\n\n.. toctree::\n   :maxdepth: 2\n\n.. include:: auto_examples/index.rst\n```"
  }
]