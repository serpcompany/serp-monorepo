[
  {
    "owner": "dotnet",
    "repo": "dotnext",
    "content": "TITLE: OptionalConverterFactory Class for JSON Serialization - C#\nDESCRIPTION: Adds `OptionalConverterFactory` class that allows to use `Optional<T>` data type in JSON serialization, hiding data from JSON if a property or field has an undefined value. This is useful for designing DTOs for REST API with partial resource updates via PATCH methods and targets .NET 5.\nSOURCE: https://github.com/dotnet/dotnext/blob/master/CHANGELOG.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nOptionalConverterFactory\n```\n\n----------------------------------------\n\nTITLE: ValueTaskCompletionSource for Pooling - C#\nDESCRIPTION: Introduces `ValueTaskCompletionSource<T>` as a reusable source of tasks, optimized for pooling scenarios. This can help reduce garbage collection overhead and improve performance in scenarios involving frequent task creation and completion.\nSOURCE: https://github.com/dotnet/dotnext/blob/master/CHANGELOG.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nValueTaskCompletionSource<T>\n```\n\n----------------------------------------\n\nTITLE: Active-Standby Raft Cluster Configuration\nDESCRIPTION: Adds support for an active-standby configuration in Raft clusters within the DotNext.Net.Cluster package.  A standby node cannot become a leader but can be used for read operations, providing increased availability and read scalability. This configuration is supported in version 3.0.0.\nSOURCE: https://github.com/dotnet/dotnext/blob/master/CHANGELOG.md#_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\n//Added support of active-standby configuration of Raft cluster. Standby node cannot become a leader but can be used for reads\n```\n\n----------------------------------------\n\nTITLE: TryResize and Resize methods for MemoryOwner<T> - C#\nDESCRIPTION: Adds `TryResize` and `Resize` methods to the `MemoryOwner<T>` value type. These methods enable dynamic resizing of the memory block owned by the `MemoryOwner<T>` instance.\nSOURCE: https://github.com/dotnet/dotnext/blob/master/CHANGELOG.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nTryResize\n```\n\nLANGUAGE: C#\nCODE:\n```\nResize\n```\n\nLANGUAGE: C#\nCODE:\n```\nMemoryOwner<T>\n```\n\n----------------------------------------\n\nTITLE: MessagingClient and MessageHandler Classes - C#\nDESCRIPTION: Adds support for typed message handlers through the `MessagingClient` and `MessageHandler` classes. This provides a structured way to handle messages within a cluster.\nSOURCE: https://github.com/dotnet/dotnext/blob/master/CHANGELOG.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nMessagingClient\n```\n\nLANGUAGE: C#\nCODE:\n```\nMessageHandler\n```\n\n----------------------------------------\n\nTITLE: Persistence Engine Extension Method\nDESCRIPTION: The `UsePersistenceEngine` extension method has been added to `DotNext.AspNetCore.Cluster` for the correct registration of custom persistence engines derived from the `PersistentState` class. This allows developers to implement custom persistence logic while still integrating with the DotNext clustering framework.\nSOURCE: https://github.com/dotnet/dotnext/blob/master/CHANGELOG.md#_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\n//Added UsePersistenceEngine extension method for correct registration of custom persistence engine derived from PersistentState class\n```\n\n----------------------------------------\n\nTITLE: TryReadBlock Extension Method for Pipes - C#\nDESCRIPTION: Adds the `TryReadBlock` extension method, allowing synchronous reading of memory blocks from pipes.  This improves synchronous reading capabilities from pipes.\nSOURCE: https://github.com/dotnet/dotnext/blob/master/CHANGELOG.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nTryReadBlock\n```\n\n----------------------------------------\n\nTITLE: Implementation of Jump Consistent Hash - C#\nDESCRIPTION: Adds an implementation of Jump consistent hash to `DotNext.Net.Cluster`. Jump Consistent Hash is a fast, minimal memory, consistent hash algorithm.\nSOURCE: https://github.com/dotnet/dotnext/blob/master/CHANGELOG.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\n[Jump](https://arxiv.org/pdf/1406.2294.pdf)\n```\n\n----------------------------------------\n\nTITLE: AsyncCorrelationSource Synchronization Primitive - C#\nDESCRIPTION: Introduces a new asynchronous primitive, `AsyncCorrelationSource`, designed for synchronization purposes. This allows for coordinated execution of asynchronous operations.\nSOURCE: https://github.com/dotnet/dotnext/blob/master/CHANGELOG.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nAsyncCorrelationSource\n```\n\n----------------------------------------\n\nTITLE: ThreadPool WorkItem Factory .NET 5\nDESCRIPTION: Introduces the `ThreadPoolWorkItemFactory` static class with extension methods for constructing `IThreadPoolWorkItem` instances from method pointers. This feature is available only for the .NET 5 target framework. It allows for more efficient use of the thread pool by directly associating work items with method pointers.\nSOURCE: https://github.com/dotnet/dotnext/blob/master/CHANGELOG.md#_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\n//ThreadPoolWorkItemFactory static class with extension methods for constructing IThreadPoolWorkItem instances from method pointers. Available only for .NET 5 target\n```\n\n----------------------------------------\n\nTITLE: Predicate.IsTypeOf<T>() Cached Predicate - C#\nDESCRIPTION: Adds `Predicate.IsTypeOf<T>()` as a cached predicate. This avoids repeated type checks by caching the result, improving performance when the same type check is performed multiple times.\nSOURCE: https://github.com/dotnet/dotnext/blob/master/CHANGELOG.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nPredicate.IsTypeOf<T>()\n```\n\n----------------------------------------\n\nTITLE: Func.IsTypeOf<T>() Cached Predicate - C#\nDESCRIPTION: Adds `Func.IsTypeOf<T>()` as a cached predicate. This avoids repeated type checks by caching the result, improving performance when the same type check is performed multiple times.\nSOURCE: https://github.com/dotnet/dotnext/blob/master/CHANGELOG.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nFunc.IsTypeOf<T>()\n```\n\n----------------------------------------\n\nTITLE: CodeGenerator.Statement for Expression Trees - C#\nDESCRIPTION: Adds the `CodeGenerator.Statement` static method to simplify the migration from pure Expression Trees. This makes it easier to generate code dynamically.\nSOURCE: https://github.com/dotnet/dotnext/blob/master/CHANGELOG.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nCodeGenerator.Statement\n```\n\n----------------------------------------\n\nTITLE: HTTP/3 Support in AspNetCore Cluster (.NET 5)\nDESCRIPTION: Introduces support for HTTP/3 within the DotNext.AspNetCore.Cluster package. This enhancement, exclusively available for .NET 5, enables applications to leverage the performance and reliability benefits of the HTTP/3 protocol for cluster communication.\nSOURCE: https://github.com/dotnet/dotnext/blob/master/CHANGELOG.md#_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\n//Added support of HTTP/3 (available for .NET 5 only)\n```\n\n----------------------------------------\n\nTITLE: EnsureState in AsyncTrigger Class - C#\nDESCRIPTION: Adds the `EnsureState` method to the `AsyncTrigger` class as a synchronous alternative with fail-fast behavior.  This helps with ensuring the expected state of an asynchronous trigger.\nSOURCE: https://github.com/dotnet/dotnext/blob/master/CHANGELOG.md#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nEnsureState\n```\n\nLANGUAGE: C#\nCODE:\n```\nAsyncTrigger\n```\n\n----------------------------------------\n\nTITLE: JSON-Serializable Log Entries in Raft (.NET 5)\nDESCRIPTION: Adds support for JSON-serializable log entries within the DotNext.Net.Cluster package's Raft implementation. This feature, available only for .NET 5, simplifies the storage and retrieval of log data by enabling direct serialization and deserialization of log entries to JSON format.\nSOURCE: https://github.com/dotnet/dotnext/blob/master/CHANGELOG.md#_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\n//Added support of JSON-serializable log entries (available for .NET 5 only)\n```"
  }
]