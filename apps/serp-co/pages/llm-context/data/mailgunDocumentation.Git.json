[
  {
    "owner": "mailgun",
    "repo": "documentation.git",
    "content": "TITLE: Sending Untracked Emails with Mailgun in Ruby\nDESCRIPTION: This Ruby method shows how to send an email with tracking disabled using RestClient to interact with the Mailgun API. It sets the 'o:tracking' parameter to false when posting the request.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-message-no-tracking.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef send_message_no_tracking\n  RestClient.post \"https://api:YOUR_API_KEY\"\\\n  \"@api.mailgun.net/v3/YOUR_DOMAIN_NAME/messages\",\n  :from => \"Excited User <YOU@YOUR_DOMAIN_NAME>\",\n  :to => \"bar@example.com, baz@example.com\",\n  :subject => \"Hello\",\n  :text => \"Testing some Mailgun awesomness!\",\n  \"o:tracking\" => false\nend\n```\n\n----------------------------------------\n\nTITLE: Sending Complex Messages with Attachments using Ruby\nDESCRIPTION: This Ruby method sends a complex email message using the RestClient library to access the Mailgun API. It prepares a data hash with sender, multiple recipients (to, cc, bcc), subject, text and HTML body, and attaches both JPG and TXT files from the files directory.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-complex-message.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef send_complex_message\n  data = {}\n  data[:from] = \"Excited User <YOU@YOUR_DOMAIN_NAME>\"\n  data[:to] = \"foo@example.com\"\n  data[:cc] = \"baz@example.com\"\n  data[:bcc] = \"bar@example.com\"\n  data[:subject] = \"Hello\"\n  data[:text] = \"Testing some Mailgun awesomness!\"\n  data[:html] = \"<html>HTML version of the body</html>\"\n  data[:attachment] = []\n  data[:attachment] << File.new(File.join(\"files\", \"test.jpg\"))\n  data[:attachment] << File.new(File.join(\"files\", \"test.txt\"))\n  RestClient.post \"https://api:YOUR_API_KEY\"\\\n  \"@api.mailgun.net/v3/YOUR_DOMAIN_NAME/messages\", data\nend\n```\n\n----------------------------------------\n\nTITLE: Sending Email via Mailgun API in RST\nDESCRIPTION: This code snippet demonstrates how to send a simple email message using the Mailgun API. It includes a note about using the correct endpoint for EU infrastructure.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/quickstart-sending.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: samples/send-simple-message.rst\n```\n\n----------------------------------------\n\nTITLE: Sending Email with Mailgun JavaScript SDK\nDESCRIPTION: This JavaScript example demonstrates how to send an email using the Mailgun.js SDK. It imports required dependencies, creates a Mailgun client with API credentials, defines message data with sender, recipients, subject, and text, then sends the message with error handling.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-simple-message.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst API_KEY = 'YOUR_API_KEY';\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\n\n import formData from 'form-data';\n import Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\nconst client = mailgun.client({username: 'api', key: API_KEY});\n\nconst messageData = {\n  from: 'Excited User <me@samples.mailgun.org>',\n  to: 'foo@example.com, bar@example.com',\n  subject: 'Hello',\n  text: 'Testing some Mailgun awesomeness!'\n};\n\nclient.messages.create(DOMAIN, messageData)\n .then((res) => {\n   console.log(res);\n })\n .catch((err) => {\n   console.error(err);\n });\n```\n\n----------------------------------------\n\nTITLE: Sending Email with Mailgun Go SDK\nDESCRIPTION: This Go function demonstrates how to send an email using the Mailgun Go SDK. It initializes the Mailgun client with your domain and API key, creates a new message with sender, subject, text content, and recipient, and sends it with a timeout context.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-simple-message.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/mailgun/mailgun-go/v3\"\n    \"time\"\n)\n\nfunc SendSimpleMessage(domain, apiKey string) (string, error) {\n    mg := mailgun.NewMailgun(domain, apiKey)\n    m := mg.NewMessage(\n        \"Excited User <mailgun@YOUR_DOMAIN_NAME>\",\n        \"Hello\",\n        \"Testing some Mailgun awesomeness!\",\n        \"YOU@YOUR_DOMAIN_NAME\",\n    )\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    _, id, err := mg.Send(ctx, m)\n    return id, err\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Email with Mailgun in C# using RestSharp\nDESCRIPTION: This C# example shows how to send an email using the RestSharp library to interact with Mailgun's API. It sets up a REST client with API authentication, configures the message parameters, and executes a POST request to send the email.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-simple-message.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class SendSimpleMessageChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (SendSimpleMessage ().Content.ToString ());\n    }\n\n    public static IRestResponse SendSimpleMessage ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.AddParameter (\"domain\", \"YOUR_DOMAIN_NAME\", ParameterType.UrlSegment);\n        request.Resource = \"{domain}/messages\";\n        request.AddParameter (\"from\", \"Excited User <mailgun@YOUR_DOMAIN_NAME>\");\n        request.AddParameter (\"to\", \"bar@example.com\");\n        request.AddParameter (\"to\", \"YOU@YOUR_DOMAIN_NAME\");\n        request.AddParameter (\"subject\", \"Hello\");\n        request.AddParameter (\"text\", \"Testing some Mailgun awesomness!\");\n        request.Method = Method.POST;\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Messages with Templates using Mailgun Python SDK\nDESCRIPTION: This Python function demonstrates how to send a message with a template using the Mailgun Python SDK. It shows how to set up the API request with the necessary parameters, including template variables, and send the message.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-message-by-template-id.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef send_message_by_template_id():\n    return requests.post(\n        \"https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/messages\",\n        auth=(\"api\", \"YOUR_API_KEY\"),\n        data={\"from\": \"Excited User <YOU@YOUR_DOMAIN_NAME>\",\n              \"to\": [\"bar@example.com\", \"baz@example.com\"],\n              \"subject\": \"Hello\",\n              \"template\": \"template.test\",\n              \"t:variables\": json.dumps({\"title\": \"API documentation\", \"body\": \"Sending messages with templates\"})\n```\n\n----------------------------------------\n\nTITLE: Webhook Signature Verification in PHP\nDESCRIPTION: PHP implementation for verifying Mailgun webhook signatures with timestamp validation.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/user_manual.rst#2025-04-21_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nfunction verify($signingKey, $token, $timestamp, $signature)\n{\n    // check if the timestamp is fresh\n    if (\\abs(\\time() - $timestamp) > 15) {\n        return false;\n    }\n\n    // returns true if signature is valid\n    return \\hash_equals(\\hash_hmac('sha256', $timestamp . $token, $signingKey), $signature);\n}\n```\n\n----------------------------------------\n\nTITLE: Webhook Signature Verification in Go\nDESCRIPTION: Go implementation for verifying Mailgun webhook signatures using the mailgun-go library.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/user_manual.rst#2025-04-21_snippet_17\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/mailgun/mailgun-go/v3\"\n)\n\nfunc VerifyWebhookSignature(domain, signingKey, timestamp, token, signature string) (bool, error) {\n    mg := mailgun.NewMailgun(domain, signingKey)\n\n    return mg.VerifyWebhookSignature(mailgun.Signature{\n        TimeStamp: timestamp,\n        Token:     token,\n        Signature: signature,\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Email with Mailgun PHP SDK\nDESCRIPTION: This PHP snippet demonstrates sending an email using the Mailgun PHP SDK. It requires the Mailgun autoloader, creates a client with your API key, configures message parameters, and sends the message to your domain.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-simple-message.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Include the Autoloader (see \"Libraries\" for install instructions)\nrequire 'vendor/autoload.php';\nuse Mailgun\\Mailgun;\n\n# Instantiate the client.\n$mgClient = Mailgun::create('PRIVATE_API_KEY', 'https://API_HOSTNAME');\n$domain = \"YOUR_DOMAIN_NAME\";\n$params = array(\n  'from'    => 'Excited User <YOU@YOUR_DOMAIN_NAME>',\n  'to'      => 'bob@example.com',\n  'subject' => 'Hello',\n  'text'    => 'Testing some Mailgun awesomness!'\n);\n\n# Make the call to the client.\n$mgClient->messages()->send($domain, $params);\n```\n\n----------------------------------------\n\nTITLE: Creating Email Template using Curl in Bash\nDESCRIPTION: This snippet demonstrates how to create a new email template using a curl command in Bash. It sends a POST request to the Mailgun API with the template name and description.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/template-create.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -X POST \\\n  https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/templates \\\n  -F name='template.name' \\\n  -F description='template description'\n```\n\n----------------------------------------\n\nTITLE: Sending Complex Messages with Attachments using JavaScript (Node.js)\nDESCRIPTION: This JavaScript/Node.js example uses the mailgun.js library to send a complex message with attachments. It creates a mailgun client, reads a JPG file asynchronously, configures the message with sender, multiple recipients, CC and BCC, subject, text and HTML body, and sends the message with the attachment.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-complex-message.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport path from 'node:path';\nimport fs from 'node:fs/promises';\n\nconst API_KEY = 'YOUR_API_KEY';\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\nconst client = mailgun.client({ username: 'api', key: API_KEY });\n\n(async () => {\n  const filepath = path.resolve('sample.jpg');\n  try {\n    const file = {\n      filename: 'sample.jpg',\n      data: await fs.readFile(filepath)\n    };\n    const attachment = [file];\n\n    const data = {\n      from: 'Excited User <me@samples.mailgun.org>',\n      to: ['foo@example.com', 'baz@example.com', 'bar@example.com'],\n      cc: 'baz@example.com',\n      bcc: 'bar@example.com',\n      subject: 'Complex',\n      text: 'Testing some Mailgun awesomness!',\n      html: '<html>HTML version of the body</html>',\n      attachment\n    };\n\n    const result = await client.messages.create(DOMAIN, data);\n    console.log(result);\n  } catch (error) {\n    console.error(error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Sending Email with Mailgun Python Requests\nDESCRIPTION: This Python function sends an email using the Requests library to interact with Mailgun's API. It makes a POST request to the API endpoint with authentication, providing sender, recipients, subject, and message text parameters.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-simple-message.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef send_simple_message():\n    return requests.post(\n        \"https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/messages\",\n        auth=(\"api\", \"YOUR_API_KEY\"),\n        data={\"from\": \"Excited User <mailgun@YOUR_DOMAIN_NAME>\",\n              \"to\": [\"bar@example.com\", \"YOU@YOUR_DOMAIN_NAME\"],\n              \"subject\": \"Hello\",\n              \"text\": \"Testing some Mailgun awesomness!\"})\n```\n\n----------------------------------------\n\nTITLE: Validating Email Address with Mailgun API in Go\nDESCRIPTION: A Go function that implements email validation using Mailgun's Address Validation API v4. It creates a multipart form request, sets basic authentication with an API key, and parses the JSON response into a ValidationResponse struct that includes validation results and risk assessment.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/post-validate.rst#2025-04-21_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"mime/multipart\"\n\t\"net/http\"\n)\n\ntype ValidationResponse struct {\n\tAddress       string   `json:\"address\"`\n\tIsDisposable  bool     `json:\"is_disposable_address\"`\n\tIsRoleAddress bool     `json:\"is_role_address\"`\n\tReason        []string `json:\"reason\"`\n\tResult        string   `json:\"result\"`\n\tRisk          string   `json:\"risk\"`\n}\n\nfunc validateAddress(email string) (vr ValidationResponse, err error) {\n\n\t// creating HTTP request and returning response\n\tbody := &bytes.Buffer{}\n\twriter := multipart.NewWriter(body)\n\taddress, _ := writer.CreateFormField(\"address\")\n\t_, _ = address.Write([]byte(email))\n\twriter.Close()\n\n\tclient := &http.Client{}\n\treq, _ := http.NewRequest(\"POST\", \"https://api.mailgun.net/v4/address/validate\", body)\n\treq.Header.Set(\"Content-Type\", writer.FormDataContentType())\n\treq.SetBasicAuth(\"api\", \"api_key_here\")\n\tresponse, err := client.Do(req)\n\n\tif err != nil {\n\t\treturn\n    }\n\n\t// decoding into validation response struct\n\terr = json.NewDecoder(response.Body).Decode(&vr)\n\treturn\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Mailing List using Java\nDESCRIPTION: Implements mailing list creation using Mailgun's Java SDK with builder pattern for request configuration. Includes access level and reply preference settings.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/create-mailing-list.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.MailgunMailingListApi;\nimport com.mailgun.enums.AccessLevel;\nimport com.mailgun.enums.ReplyPreference;\nimport com.mailgun.model.mailing.lists.MailingListRequest;\nimport com.mailgun.model.mailing.lists.MailingListResponse;\n\n// ...\n\npublic MailingListResponse createMailingList() {\n    MailgunMailingListApi mailgunMailingListApi = MailgunClient.config(API_KEY)\n        .createApi(MailgunMailingListApi.class);\n\n    MailingListRequest mailingListRequest = MailingListRequest.builder()\n        .address( \"LIST@YOUR_DOMAIN_NAME\")\n        .name(\"LIST_NAME\")\n        .description(\"LIST_DESCRIPTION\")\n        .accessLevel(AccessLevel.EVERYONE)\n        .replyPreference(ReplyPreference.LIST)\n        .build();\n\n    return mailgunMailingListApi.createMailingList(mailingListRequest);\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Messages with Templates using Mailgun JavaScript SDK\nDESCRIPTION: This JavaScript code snippet demonstrates how to send a message with a template using the Mailgun JavaScript SDK. It shows how to create a Mailgun client, set up the message data including template variables, and send the message.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-message-by-template-id.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst API_KEY = 'YOUR_API_KEY';\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\nconst client = mailgun.client({ username: 'api', key: API_KEY });\nconst title = 'title value';\nconst slug = 'slug value';\n\nconst data = {\n  from: 'Excited User <me@samples.mailgun.org>',\n  to: 'alice@example.com',\n  subject: `Email ${title}`,\n  template: 'name-of-the-template-you-made-in-mailgun-web-portal',\n  't:variables': JSON.stringify({ // be sure to stringify your payload\n    title,\n    slug,\n  })\n};\n\nclient.messages.create(DOMAIN, data).then((res) => {\n  console.log(res);\n})\n  .catch((err) => {\n    console.error(err);\n  });\n```\n\n----------------------------------------\n\nTITLE: Processing Incoming Emails with Django HTTP Handler\nDESCRIPTION: A Django view function that handles HTTP POST requests from Mailgun when an email is received. It extracts sender, recipient, subject, body content, and processes any attachments from the request. The function returns a 200 OK response to confirm successful processing.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/quickstart-receiving.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Handler for HTTP POST to http://myhost.com/messages for the route defined above\ndef on_incoming_message(request):\n     if request.method == 'POST':\n         sender    = request.POST.get('sender')\n         recipient = request.POST.get('recipient')\n         subject   = request.POST.get('subject', '')\n\n         body_plain = request.POST.get('body-plain', '')\n         body_without_quotes = request.POST.get('stripped-text', '')\n         # note: other MIME headers are also posted here...\n\n         # attachments:\n         for key in request.FILES:\n             file = request.FILES[key]\n             # do something with the file\n\n     # Returned text is ignored but HTTP status code matters:\n     # Mailgun wants to see 2xx, otherwise it will make another attempt in 5 minutes\n     return HttpResponse('OK')\n```\n\n----------------------------------------\n\nTITLE: Python Implementation for Bulk Email Validation\nDESCRIPTION: A Python function that uses the requests library to upload a file for bulk email validation. The function opens a file from the specified path and sends it to the Mailgun API endpoint with proper authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/create-bulk-validation.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef validate_mailing_list():\n    return requests.post(\n        \"https://api.mailgun.net/v4/address/validate/bulk/LIST_NAME\",\n        files = {'file': open('/path/to/file','rb')},\n        auth=('api', 'YOUR_API_KEY'))\n```\n\n----------------------------------------\n\nTITLE: Sending Email with Mailgun Java SDK\nDESCRIPTION: This Java example shows how to send an email using the Mailgun Java SDK. It configures the Mailgun client with your API key, builds a message with sender, recipient, subject and text, and sends it to your domain.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-simple-message.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.MailgunMessagesApi;\nimport com.mailgun.model.message.Message;\nimport com.mailgun.model.message.MessageResponse;\n\n// ...\n\npublic MessageResponse sendSimpleMessage() {\n    MailgunMessagesApi mailgunMessagesApi = MailgunClient.config(API_KEY)\n        .createApi(MailgunMessagesApi.class);\n\n    Message message = Message.builder()\n        .from(\"Excited User <USER@YOURDOMAIN.COM>\")\n        .to(\"artemis@example.com\")\n        .subject(\"Hello\")\n        .text(\"Testing out some Mailgun awesomeness!\")\n        .build();\n\n    return mailgunMessagesApi.sendMessage(YOUR_DOMAIN_NAME, message);\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Mailgun Events with PHP\nDESCRIPTION: This PHP snippet demonstrates how to use the Mailgun PHP SDK to retrieve events. It shows how to instantiate the Mailgun client, set up query parameters, and make the API call.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/events-date-time-recipient.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Include the Autoloader (see \"Libraries\" for install instructions)\nrequire 'vendor/autoload.php';\nuse Mailgun\\Mailgun;\n\n# Instantiate the client.\n$mgClient    = Mailgun::create('PRIVATE_API_KEY', 'https://API_HOSTNAME');\n$domain      = 'YOUR_DOMAIN_NAME';\n$queryString = array(\n    'begin'        => 'Wed, 1 Jan 2020 09:00:00 -0000',\n    'ascending'    => 'yes',\n    'limit'        =>  25,\n    'pretty'       => 'yes',\n    'recipient'    => 'bob@example.com'\n);\n\n# Issue the call to the client.\n$result = $mgClient->events()->get($domain, $queryString);\n```\n\n----------------------------------------\n\nTITLE: Sending Complex Messages with Attachments using C#\nDESCRIPTION: This C# class uses RestSharp to send a complex email message through the Mailgun API. It configures a RestClient with authentication, adds multiple parameters including sender, recipients (to, cc, bcc), subject, both text and HTML body, and attaches JPG and TXT files.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-complex-message.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class SendComplexMessageChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (SendComplexMessage ().Content.ToString ());\n    }\n\n    public static IRestResponse SendComplexMessage ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.AddParameter (\"domain\", \"YOUR_DOMAIN_NAME\", ParameterType.UrlSegment);\n        request.Resource = \"{domain}/messages\";\n        request.AddParameter (\"from\", \"Excited User <YOU@YOUR_DOMAIN_NAME>\");\n        request.AddParameter (\"to\", \"foo@example.com\");\n        request.AddParameter (\"cc\", \"baz@example.com\");\n        request.AddParameter (\"bcc\", \"bar@example.com\");\n        request.AddParameter (\"subject\", \"Hello\");\n        request.AddParameter (\"text\", \"Testing some Mailgun awesomness!\");\n        request.AddParameter (\"html\",\n                              \"<html>HTML version of the body</html>\");\n        request.AddFile (\"attachment\", Path.Combine (\"files\", \"test.jpg\"));\n        request.AddFile (\"attachment\", Path.Combine (\"files\", \"test.txt\"));\n        request.Method = Method.POST;\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Sending MIME Message with PHP\nDESCRIPTION: This PHP snippet uses the Mailgun PHP SDK to send a MIME message. It creates a Mailgun client, sets up recipients and parameters, and sends the MIME string using the sendMime method.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-mime-message.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Include the Autoloader (see \"Libraries\" for install instructions)\nrequire 'vendor/autoload.php';\nuse Mailgun\\Mailgun;\n\n# Instantiate the client.\n$mgClient = Mailgun::create('PRIVATE_API_KEY', 'https://API_HOSTNAME');\n$domain = \"YOUR_DOMAIN_NAME\";\n\n$recipients = array(\n    'bob@example.com',\n    'alice@example.com',\n    'john@example.com';\n);\n$params = array(\n    'from' => 'Excited User <YOU@YOUR_DOMAIN_NAME>'\n);\n\n$mime_string = '<Pass fully formed MIME string here>'\n\n# Make the call to the client.\n$result = $mgClient->messages()->sendMime($domain, $recipients, $mime_string, $params);\n```\n\n----------------------------------------\n\nTITLE: Sending Template Messages in JavaScript\nDESCRIPTION: JavaScript implementation for sending template messages using the mailgun.js library. This example shows how to create a message with recipient variables as a JSON string for personalizing email content across multiple recipients.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-template-message.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst API_KEY = 'YOUR_API_KEY';\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\nconst client = mailgun.client({username: 'api', key: API_KEY});\n\nconst data = {\n  from: 'Excited User <me@samples.mailgun.org>',\n  to: ['alice@example.com', 'bob@example.com'],\n  subject: 'Hey %recipient.name%',\n  text: 'If you wish to unsubscribe, click http://mailgun/unsubscribe/%recipient.recipientId%',\n  'recipient-variables': JSON.stringify({\n    'alice@example.com': {\n      name: 'Alice',\n      recipientId: 1\n    },\n    'bob@example.com':\n    {\n      name: 'Bob',\n      recipientId: 2\n    }\n  })\n};\n\nclient.messages.create(DOMAIN, data)\n .then((res) => {\n   console.log(res);\n })\n .catch((err) => {\n   console.error(err);\n });\n```\n\n----------------------------------------\n\nTITLE: Validating Email Address with Mailgun API in Java\nDESCRIPTION: Uses Mailgun's Java SDK to validate an email address. It creates a MailgunEmailVerificationApi instance configured with an API key and calls the validateAddressPostRequest method with the email to validate.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/post-validate.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v4.MailgunEmailVerificationApi;\nimport com.mailgun.model.verification.AddressValidationResponse\n\n// ...\n\npublic AddressValidationResponse validateEmail() {\n    MailgunEmailVerificationApi mailgunEmailVerificationApi = MailgunClient.config(API_KEY)\n        .createApi(MailgunEmailVerificationApi.class);\n\n    return mailgunEmailVerificationApi.validateAddressPostRequest(\"foo@mailgun.com\");\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Email with TLS Options using cURL and Mailgun API\nDESCRIPTION: A bash cURL command to send an email via Mailgun API with TLS security options. The command includes authentication with API key, sender and recipient information, and TLS requirement flags.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-connection.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' \\\n    https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/messages \\\n    -F from='Sender Bob <sbob@YOUR_DOMAIN_NAME>' \\\n    -F to='alice@example.com' \\\n    -F subject='Hello' \\\n    -F text='Testing some Mailgun awesomness!' \\\n    -F o:require-tls=True \\\n    -F o:skip-verification=False\n```\n\n----------------------------------------\n\nTITLE: Sending MIME Message with Python\nDESCRIPTION: This Python function sends a MIME message using the requests library. It makes a POST request to the Mailgun API with authentication, recipient data, and the MIME message file.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-mime-message.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef send_mime_message():\n    return requests.post(\n        \"https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/messages.mime\",\n        auth=(\"api\", \"YOUR_API_KEY\"),\n        data={\"to\": \"bar@example.com\"},\n        files={\"message\": open(\"files/message.mime\")})\n```\n\n----------------------------------------\n\nTITLE: Sending Template Messages with cURL\nDESCRIPTION: Example of sending a template message with recipient variables using cURL. This request sends an email to multiple recipients with personalized subject and text content using %recipient.variable% syntax.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-template-message.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' \\\n    https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/messages \\\n    -F from='Excited User <YOU@YOUR_DOMAIN_NAME>' \\\n    -F to=alice@example.com \\\n    -F to=bob@example.com \\\n    -F recipient-variables='{\"bob@example.com\": {\"first\":\"Bob\", \"id\":1}, \"alice@example.com\": {\"first\":\"Alice\", \"id\": 2}}' \\\n    -F subject='Hey, %recipient.first%' \\\n    -F text='If you wish to unsubscribe, click http://mailgun/unsubscribe/%recipient.id%'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Domain IPs with JavaScript Mailgun.js\nDESCRIPTION: This JavaScript snippet uses the Mailgun.js library to fetch domain IPs. It initializes the Mailgun client with the API key, then makes an asynchronous call to the getIps method of the domains object with the specified domain name.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-domain-ips.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n(async () => {\n  try {\n    const getIps = await client.domains.getIps(DOMAIN);\n    console.log('getIps', getIps);\n  } catch (error) {\n    console.error(error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Sending Messages with Templates using cURL in Bash\nDESCRIPTION: This snippet demonstrates how to send a message using a template via the Mailgun API using cURL in Bash. It includes setting the API key, domain, sender, recipient, subject, template name, and template variables.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-message-by-template-id.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' \\\nhttps://api.mailgun.net/v3/YOUR_DOMAIN_NAME/messages \\\n-F from='Sender Bob <sbob@YOUR_DOMAIN_NAME>' \\\n-F to='alice@example.com' \\\n-F subject='Hello' \\\n-F template='template.test' \\\n-F t:variables='{\"title\": \"API documentation\", \"body\": \"Sending messages with templates\"}'\n```\n\n----------------------------------------\n\nTITLE: Sending Messages with Templates using Mailgun Java SDK\nDESCRIPTION: This Java code snippet shows how to send a message with a template using the Mailgun Java SDK. It demonstrates creating a MailgunMessagesApi instance, setting up message parameters including template variables, and sending the message.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-message-by-template-id.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.MailgunMessagesApi;\nimport com.mailgun.model.message.Message;\nimport com.mailgun.model.message.MessageResponse;\n\nimport java.util.Map;\n\n// ...\n\npublic MessageResponse sendMessageByTemplateId() {\n    MailgunMessagesApi mailgunMessagesApi = MailgunClient.config(API_KEY)\n        .createApi(MailgunMessagesApi.class);\n\n    Map<String, String> mailgunVariables = Map.of(\n            \"title\", \"API Documentation\",\n            \"body\", \"Sending messages with templates\"\n    );\n\n    Message message = Message.builder()\n        .from(\"Excited User <YOU@YOUR_DOMAIN_NAME>\")\n        .to(\"alice@example.com\")\n        .subject(\"Hello\")\n        .template(TEMPLATE_NAME)\n        .tracking(false)\n        .mailgunVariables(mailgunVariables)\n        .build();\n\n    return mailgunMessagesApi.sendMessage(YOUR_DOMAIN_NAME, message);\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Validation Response Example\nDESCRIPTION: JSON response example showing a successful mailbox verification result.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-email-validation.rst#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"address\": \"existingemail@realdomain.com\",\n    \"is_disposable_address\": false,\n    \"is_role_address\": false,\n    \"reason\": [],\n    \"result\": \"deliverable\",\n    \"risk\": \"low\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Email with Mailgun via Ruby RestClient\nDESCRIPTION: This Ruby function demonstrates sending an email using the RestClient gem to interact with Mailgun's API. It makes a POST request with authentication, specifying the sender, recipients, subject, and message text.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-simple-message.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef send_simple_message\n  RestClient.post \"https://api:YOUR_API_KEY\"\\\n  \"@api.mailgun.net/v3/YOUR_DOMAIN_NAME/messages\",\n  :from => \"Excited User <mailgun@YOUR_DOMAIN_NAME>\",\n  :to => \"bar@example.com, YOU@YOUR_DOMAIN_NAME\",\n  :subject => \"Hello\",\n  :text => \"Testing some Mailgun awesomness!\"\nend\n```\n\n----------------------------------------\n\nTITLE: Using Template Variables in Plain Text Email\nDESCRIPTION: Example of how to use template variables in a plain text email body to personalize content for each recipient. Variables like %recipient.first% and %recipient.id% are used to customize the message.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/user_manual.rst#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nMessage-Id: <20160329071939.35138.9413.6915422C@example.com>\nContent-Type: text/plain; charset=\"us-ascii\"\nContent-Transfer-Encoding: quoted-printable\n\nHi, %recipient.first%,\n=20\nPlease review your profile at example.com/orders/%recipient.id%.\n=20\nThanks,\nExample.com Team\n```\n\n----------------------------------------\n\nTITLE: Sending Complex Messages with Attachments using Python\nDESCRIPTION: This Python function uses the requests library to send a complex email via the Mailgun API. It includes sender information, multiple recipients (to, cc, bcc), subject, text and HTML body, and sends two different files as attachments (JPG and TXT).\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-complex-message.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef send_complex_message():\n    return requests.post(\n        \"https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/messages\",\n        auth=(\"api\", \"YOUR_API_KEY\"),\n        files=[(\"attachment\", (\"test.jpg\", open(\"files/test.jpg\",\"rb\").read())),\n               (\"attachment\", (\"test.txt\", open(\"files/test.txt\",\"rb\").read()))],\n        data={\"from\": \"Excited User <YOU@YOUR_DOMAIN_NAME>\",\n              \"to\": \"foo@example.com\",\n              \"cc\": \"baz@example.com\",\n              \"bcc\": \"bar@example.com\",\n              \"subject\": \"Hello\",\n              \"text\": \"Testing some Mailgun awesomness!\",\n              \"html\": \"<html>HTML version of the body</html>\"})\n```\n\n----------------------------------------\n\nTITLE: Sending Email with TLS Options using Java and Mailgun API\nDESCRIPTION: Java code to send an email via Mailgun API with TLS security options. Uses the Mailgun Java client library to build and send a message with multiple recipients and TLS configuration settings.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-connection.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.MailgunMessagesApi;\nimport com.mailgun.model.message.Message;\nimport com.mailgun.model.message.MessageResponse;\n\n// ...\n\npublic MessageResponse sendConnection() {\n    MailgunMessagesApi mailgunMessagesApi = MailgunClient.config(API_KEY)\n        .createApi(MailgunMessagesApi.class);\n\n    Message message = Message.builder()\n        .from(\"Excited User <USER@YOURDOMAIN.COM>\")\n        .to(\"alice@example.com\")\n        .to(\"bob@example.com\")\n        .subject(\"Hello\")\n        .text(\"Testing out some Mailgun awesomeness!\")\n        .requireTls(true)\n        .skipVerification(false)\n        .build();\n\n    return mailgunMessagesApi.sendMessage(YOUR_DOMAIN_NAME, message);\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Email with Mailgun API using cURL\nDESCRIPTION: This bash snippet demonstrates how to send a simple email message using cURL to interact with the Mailgun API. It authenticates with your API key and sends a text email with sender, recipient, subject, and message content.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-simple-message.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' \\\n    https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/messages \\\n    -F from='Excited User <mailgun@YOUR_DOMAIN_NAME>' \\\n    -F to=YOU@YOUR_DOMAIN_NAME \\\n    -F to=bar@example.com \\\n    -F subject='Hello' \\\n    -F text='Testing some Mailgun awesomeness!'\n```\n\n----------------------------------------\n\nTITLE: Deleting a Mailgun Template using JavaScript\nDESCRIPTION: JavaScript async function using mailgun.js to delete a template. Creates a Mailgun client with your API key and calls the domainTemplates.destroy method to remove a specific template from your domain.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/template-delete.rst#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n(async () => {\n  try {\n    const deletedDomainTemplate = await client.domains.domainTemplates.destroy(\n      DOMAIN,\n     'YOUR_TEMPLATE_NAME'\n    );\n    console.log('deletedDomainTemplate', deletedDomainTemplate);\n  } catch (error) {\n      console.error(error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Scheduling Message Delivery with Mailgun API\nDESCRIPTION: Example of how to schedule message delivery using Mailgun's API by providing a timestamp parameter in either RFC 2822 or Unix epoch format.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/user_manual.rst#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n.. include:: samples/send-scheduled-message.rst\n```\n\n----------------------------------------\n\nTITLE: Sending Template Messages in Java\nDESCRIPTION: Java implementation for sending template messages using the Mailgun Java SDK. This example creates a message with recipient variables for personalization and uses the Mailgun client to send the email.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-template-message.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport java.util.List;\nimport java.util.Map;\n\nimport com.mailgun.api.v3.MailgunMessagesApi;\nimport com.mailgun.model.message.Message;\nimport com.mailgun.model.message.MessageResponse;\n\n// ...\n\npublic MessageResponse sendTemplateMessage() {\n    MailgunMessagesApi mailgunMessagesApi = MailgunClient.config(API_KEY)\n        .createApi(MailgunMessagesApi.class);\n\n    Map<String, Object> aliceVars = Map.of(\n            \"name\", \"Alice\",\n            \"id\", 1\n    );\n\n    Map<String, Object> bobVars = Map.of(\n            \"name\", \"Bob\",\n            \"id\", 2\n    );\n\n    Map<String, Map<String, Object>> recipientVariables = Map.ofEntries(\n            Map.entry(\"alice@example.com\", aliceVars),\n            Map.entry(\"bob@example.com\", bobVars)\n    );\n\n    Message message = Message.builder()\n        .from(\"Excited User <USER@YOURDOMAIN.COM>\")\n        .to(List.of(\"alice@example.com\", \"bob@example.com\"))\n        .subject(\"Hey %recipient.name%\")\n        .text(\"If you wish to unsubscribe, click <https://mailgun.com/unsubscribe/%recipient.id%>\")\n        .recipientVariables(recipientVariables)\n        .build();\n\n    return mailgunMessagesApi.sendMessage(YOUR_DOMAIN_NAME, message);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Domain Credentials using cURL\nDESCRIPTION: Creates SMTP credentials using a cURL command with basic authentication and form parameters for login and password.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/create-credentials.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' \\\n     https://api.mailgun.net/v3/domains/YOUR_DOMAIN_NAME/credentials \\\n     -F login='alice@YOUR_DOMAIN_NAME' \\\n     -F password='supasecret'\n```\n\n----------------------------------------\n\nTITLE: Webhook Signature Verification in Ruby\nDESCRIPTION: Ruby implementation for verifying Mailgun webhook signatures using OpenSSL HMAC-SHA256.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/user_manual.rst#2025-04-21_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'openssl'\n\ndef verify(signing_key, token, timestamp, signature)\n  digest = OpenSSL::Digest::SHA256.new\n  data = [timestamp, token].join\n  signature == OpenSSL::HMAC.hexdigest(digest, signing_key, data)\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Inbox Placement Test with Python using Requests\nDESCRIPTION: This Python function uses the requests library to create an inbox placement test. It prepares a JSON payload with the required parameters and authenticates with the Mailgun API using basic authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/create-inbox-placement-test.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef create_inbox_placement_test():\n    data = {'from': 'Sample User <user@domain.com>',\n            'subject': 'testSubject',\n            'html': '<html>HTML version of the body</html>' }\n    return requests.post(\n        \"https://api.mailgun.net/v4/inbox/tests\",\n        data=json.dumps(data),\n        auth=('api', 'YOUR_API_KEY'))\n```\n\n----------------------------------------\n\nTITLE: Resending Messages with Node.js Mailgun SDK\nDESCRIPTION: JavaScript implementation using the Mailgun.js SDK to resend messages to multiple recipients with custom storage configuration.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/resend-simple-message.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst api_key = 'YOUR_API_KEY';\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\n\nconst data = {\n  to: 'bar@example.com, alice@example.com'\n};\n\nconst options = {\n  /*\n  The domain of storage. Can be found in Sending -> logs on your dashboard.\n  The needed value is the full storage.url\n  */\n  url: 'https://storage-{{MESSAGE_STORAGE_REGION}}.api.mailgun.net/',\n  username: 'api',\n  key: api_key\n};\n\n(async () => {\n  try {\n    const mailgun = new Mailgun(formData);\n    const client = mailgun.client(options);\n\n    /*\n      The key of message in storage.\n      Can be found in Sending -> logs on your dashboard\n      The needed value is located in storage.key\n    */\n    const storageKey = 'STORAGE_KEY';\n    const res = await client.request.postWithFD(`v3/domains/${DOMAIN}/messages/${storageKey}`, data);\n    console.log(res);\n  } catch (error) {\n    console.error(error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Creating Mailgun Domain using JavaScript SDK\nDESCRIPTION: Implements domain creation using Mailgun JavaScript SDK with async/await pattern. Includes error handling and allows setting domain name and SMTP credentials.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/create-domain.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n(async () => {\n  try {\n    const newDomain = await client.domains.create({\n    name: \"YOUR_NEW_DOMAIN_NAME\",\n    smtp_login: \"alice@YOUR_NEW_DOMAIN_NAME\",\n    smtp_password: 'secret'\n  });\n  console.log('newDomain', newDomain);\n  } catch (error) {\n      console.error(error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Sending Complex Messages with Attachments using Go\nDESCRIPTION: This Go function uses the mailgun-go library to send a complex email with attachments. It creates a new message with sender, subject, text body, and recipient, then adds CC and BCC recipients, sets HTML content, attaches JPG and TXT files, and sends the message with a timeout context.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-complex-message.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/mailgun/mailgun-go/v3\"\n    \"time\"\n)\n\nfunc SendComplexMessage(domain, apiKey string) (string, error) {\n    mg := mailgun.NewMailgun(domain, apiKey)\n    m := mg.NewMessage(\n        \"Excited User <YOU@YOUR_DOMAIN_NAME>\",\n        \"Hello\",\n        \"Testing some Mailgun awesomeness!\",\n        \"foo@example.com\",\n    )\n    m.AddCC(\"baz@example.com\")\n    m.AddBCC(\"bar@example.com\")\n    m.SetHtml(\"<html>HTML version of the body</html>\")\n    m.AddAttachment(\"files/test.jpg\")\n    m.AddAttachment(\"files/test.txt\")\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    _, id, err := mg.Send(ctx, m)\n    return id, err\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Scheduled Messages with Mailgun API using PHP\nDESCRIPTION: This PHP code shows how to send a scheduled email using the Mailgun PHP SDK. It initializes the Mailgun client, prepares message parameters including a scheduled delivery time using the o:deliverytime parameter, and sends the message.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-scheduled-message.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Include the Autoloader (see \"Libraries\" for install instructions)\nrequire 'vendor/autoload.php';\nuse Mailgun\\Mailgun;\n\n# Instantiate the client.\n$mgClient = Mailgun::create('PRIVATE_API_KEY', 'https://API_HOSTNAME');\n$domain = \"YOUR_DOMAIN_NAME\";\n$params = array(\n    'from'           => 'Excited User <YOU@YOUR_DOMAIN_NAME>',\n    'to'             => 'bob@example.com',\n    'subject'        => 'Hello',\n    'text'           => 'Testing some Mailgun awesomness!',\n    'o:deliverytime' => 'Wed, 01 Jan 2020 09:00:00 -0000'\n);\n\n# Make the call to the client.\n$result = $mgClient->messages()->send($domain, $params);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Bounce Information using Go Mailgun SDK\nDESCRIPTION: This Go function uses the Mailgun Go SDK to fetch bounce information for a specific email address. It requires the domain and API key to be provided as parameters and uses a context with a timeout.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-bounce.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/mailgun/mailgun-go/v3\"\n    \"time\"\n)\n\nfunc GetBounce(domain, apiKey string) (mailgun.Bounce, error) {\n    mg := mailgun.NewMailgun(domain, apiKey)\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    return mg.GetBounce(ctx, \"foo@bar.com\")\n}\n```\n\n----------------------------------------\n\nTITLE: Webhook Signature Verification in Python\nDESCRIPTION: Python implementation for verifying Mailgun webhook signatures using HMAC-SHA256.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/user_manual.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport hashlib, hmac\n\ndef verify(signing_key, token, timestamp, signature):\n    hmac_digest = hmac.new(key=signing_key.encode(),\n                           msg=('{}{}'.format(timestamp, token)).encode(),\n                           digestmod=hashlib.sha256).hexdigest()\n    return hmac.compare_digest(str(signature), str(hmac_digest))\n```\n\n----------------------------------------\n\nTITLE: Adding a Domain to Mailgun using JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to add a new domain to Mailgun using the Mailgun.js library. It creates a Mailgun client, authenticates with the API, and sends an asynchronous request to create a new domain.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/add-domain.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n\n(async () => {\n  try {\n    const newDomain = await client.domains.create({\n        name: \"YOUR_NEW_DOMAIN_NAME\",\n        smtp_login: \"smtpLogin\",\n        smtp_password: 'supersecret!'\n    });\n    console.log('newDomain', newDomain);\n  } catch (error) {\n      console.error(error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Sending Email with TLS Options using Go and Mailgun API\nDESCRIPTION: Go function to send an email via Mailgun API with TLS security options. Uses the official Mailgun Go client library to create and send a message with TLS configuration settings.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-connection.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/mailgun/mailgun-go/v3\"\n    \"time\"\n)\n\nfunc SendWithConnectionOptions(domain, apiKey string) (string, error) {\n    mg := mailgun.NewMailgun(domain, apiKey)\n    m := mg.NewMessage(\n        \"Excited User <YOU@YOUR_DOMAIN_NAME>\",\n        \"Hello\",\n        \"Testing some Mailgun awesomeness!\",\n        \"foo@example.com\",\n    )\n\n    m.SetRequireTLS(true)\n    m.SetSkipVerification(true)\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    _, id, err := mg.Send(ctx, m)\n    return id, err\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Domain Connection Settings with JavaScript\nDESCRIPTION: This JavaScript snippet uses the mailgun.js library to retrieve domain connection settings. It demonstrates an asynchronous function that makes the API call. The API key and domain name need to be replaced with actual values.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-connection.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n(async () => {\n  try {\n    const connectionSettings = await client.domains.getConnection(DOMAIN);\n    console.log('connectionSettings', connectionSettings);\n  } catch (error) {\n    console.error(error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Creating Template Version with Go Mailgun SDK\nDESCRIPTION: This Go function uses the Mailgun Go SDK to add a new template version. It creates a Mailgun client, sets up a context with timeout, and calls the AddTemplateVersion method with the necessary parameters.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/version-create.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/mailgun/mailgun-go/v3\"\n    \"time\"\n)\n\nfunc AddTemplateVersion(domain, apiKey string) error {\n    mg := mailgun.NewMailgun(domain, apiKey)\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    return mg.AddTemplateVersion(ctx, \"TEMPLATE_NAME\", &mailgun.TemplateVersion{\n        Template: `'<div class=\"entry\"> <h1>{{.title}}</h1> <div class=\"body\"> {{.body}} </div> </div>'`,\n        Engine:   mailgun.TemplateEngineGo,\n        Tag:      \"v2\",\n        Active:   true,\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Complex Messages with Attachments using Java\nDESCRIPTION: This Java method uses the Mailgun Java SDK to send a complex email with HTML content and an attachment. It creates a Message object with sender, multiple recipients (to, cc, bcc), subject, HTML body, and attaches a file before sending it through the Mailgun API.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-complex-message.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport java.io.File;\n\nimport com.mailgun.api.v3.MailgunMessagesApi;\nimport com.mailgun.model.message.Message;\nimport com.mailgun.model.message.MessageResponse;\n\n// ...\n\npublic MessageResponse sendComplexMessage() {\n    MailgunMessagesApi mailgunMessagesApi = MailgunClient.config(API_KEY)\n        .createApi(MailgunMessagesApi.class);\n\n    Message message = Message.builder()\n        .from(\"Excited User <USER@YOURDOMAIN.COM>\")\n        .to(\"alice@example.com\")\n        .cc(\"bob@example.com\")\n        .bcc(\"joe@example.com\")\n        .subject(\"Hello\")\n        .html(\"<html>HTML version </html>\")\n        .attachment(new File(\"/temp/folder/test.txt\"))\n        .build();\n\n    return mailgunMessagesApi.sendMessage(YOUR_DOMAIN_NAME, message);\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Mailgun Events API using C#\nDESCRIPTION: This C# class demonstrates how to use the RestSharp library to query the Mailgun Events API. It sets up the API client, authentication, and query parameters for filtering events.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/events-date-time-recipient.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class EventsDateTimeRecipientChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (EventsDateTimeRecipient ().Content.ToString ());\n    }\n\n    public static IRestResponse EventsDateTimeRecipient ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.AddParameter (\"domain\", \"YOUR_DOMAIN_NAME\", ParameterType.UrlSegment);\n        request.Resource = \"{domain}/events\";\n        request.AddParameter (\"begin\", \"Fri, 3 May 2013 09:00:00 -0000\");\n        request.AddParameter (\"ascending\", \"yes\");\n        request.AddParameter (\"limit\", 25);\n        request.AddParameter (\"pretty\", \"yes\");\n        request.AddParameter (\"recipient\", \"joe@example.com\");\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Email with TLS Options using JavaScript and Mailgun API\nDESCRIPTION: JavaScript code to send an email via Mailgun API with TLS security options. Uses the mailgun.js library to create a client and send a message with TLS configuration parameters.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-connection.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst API_KEY = 'YOUR_API_KEY';\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\nconst client = mailgun.client({username: 'api', key: API_KEY});\n\nconst messageData = {\n  from: 'Excited User <me@samples.mailgun.org>',\n  to: 'alice@example.com',\n  subject: 'Hello',\n  text: 'Testing some Mailgun awesomeness!',\n  'o:require-tls': 'True',\n  'o:skip-verification': 'False'\n};\n\nclient.messages.create(YOUR_DOMAIN_NAME, messageData)\n.then((res) => {\n  console.log(res);\n})\n.catch((err) => {\n  console.error(err);\n});\n```\n\n----------------------------------------\n\nTITLE: JavaScript Implementation for Bulk Email Validation using mailgun.js\nDESCRIPTION: Uses the mailgun.js library to perform bulk email validation. The code reads a file asynchronously, sets up the Mailgun client with proper authentication, and creates a validation request with the file data.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/create-bulk-validation.rst#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\nimport path from 'node:path';\nimport fs from 'node:fs/promises';\n\nconst mailgun = new Mailgun(formData);\nconst filepath = path.resolve('../emailsValidationList.csv');\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n(async () => {\n  try {\n    const file = {\n      filename: 'emailsValidationList.csv',\n      data: await fs.readFile(filepath)\n    };\n\n    const validationRes = await client.validate.multipleValidation.create('validationList', {file: file});\n    console.log('validationRes', validationRes);\n  } catch (error) {\n      console.error(error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Sending Tagged Messages with Mailgun API using cURL\nDESCRIPTION: This curl command demonstrates how to send an email with tags using the Mailgun API. It authenticates with an API key, specifies sender and recipient information, and adds multiple tags to categorize the email.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-tagged-message.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' \\\n    https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/messages \\\n    -F from='Sender Bob <sbob@YOUR_DOMAIN_NAME>' \\\n    -F to='alice@example.com' \\\n    -F subject='Hello' \\\n    -F text='Testing some Mailgun awesomness!' \\\n    -F o:tag='September newsletter' \\\n    -F o:tag='newsletters'\n```\n\n----------------------------------------\n\nTITLE: Creating Mailgun Domain using Go SDK\nDESCRIPTION: Creates a new domain using Mailgun Go SDK with context handling and timeout. Allows configuration of password, spam action, and wildcard settings.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/create-domain.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/mailgun/mailgun-go/v3\"\n    \"time\"\n)\n\nfunc CreateDomain(domain, apiKey string) (mailgun.DomainResponse, error) {\n    mg := mailgun.NewMailgun(domain, apiKey)\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    return mg.CreateDomain(ctx, \"example.com\", &mailgun.CreateDomainOptions{\n        Password: \"super_secret\",\n        SpamAction: mailgun.SpamActionTag,\n        Wildcard:   false,\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Scheduled Messages with Mailgun API using C#\nDESCRIPTION: This C# class demonstrates sending a scheduled email using the RestSharp library to interact with the Mailgun API. It creates a REST client with HTTP Basic Authentication, sets up message parameters including the o:deliverytime parameter, and executes the request.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-scheduled-message.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class SendScheduledMessageChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (SendScheduledMessage ().Content.ToString ());\n    }\n\n    public static IRestResponse SendScheduledMessage ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.AddParameter (\"domain\", \"YOUR_DOMAIN_NAME\", ParameterType.UrlSegment);\n        request.Resource = \"{domain}/messages\";\n        request.AddParameter (\"from\", \"Excited User <YOU@YOUR_DOMAIN_NAME>\");\n        request.AddParameter (\"to\", \"bar@example.com\");\n        request.AddParameter (\"subject\", \"Hello\");\n        request.AddParameter (\"text\", \"Testing some Mailgun awesomness!\");\n        request.AddParameter (\"o:deliverytime\",\n                              \"Fri, 14 Oct 2011 23:10:10 -0000\");\n        request.Method = Method.POST;\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Email Validation with mailgun.js\nDESCRIPTION: JavaScript/Node.js implementation using the mailgun.js SDK. Demonstrates async/await pattern for email validation with proper error handling.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-validate.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n(async () => {\n  try {\n    const validationRes = await client.validate.get('foo@mailgun.net');\n    console.log('validationRes', validationRes);\n  } catch (error) {\n    console.error(error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Validating Email Address with Mailgun API in Python\nDESCRIPTION: This Python function sends a GET request to the Mailgun API to validate an email address. It uses the requests library to make the API call with authentication and parameters.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-validate-deprecated.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef get_validate():\n    return requests.get(\n        \"https://api.mailgun.net/v3/address/validate\",\n        auth=(\"api\", \"pubkey-5ogiflzbnjrljiky49qxsiozqef5jxp7\"),\n        params={\"address\": \"foo@mailgun.net\"})\n```\n\n----------------------------------------\n\nTITLE: Sending Complex Messages with Attachments using PHP\nDESCRIPTION: This PHP example uses the Mailgun PHP SDK to send a complex email with HTML content and an attachment. It initializes the Mailgun client, configures message parameters including sender, multiple recipients (to, cc, bcc), subject, text and HTML body, and sends a file attachment.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-complex-message.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Include the Autoloader (see \"Libraries\" for install instructions)\nrequire 'vendor/autoload.php';\nuse Mailgun\\Mailgun;\n\n# Instantiate the client.\n$mgClient = Mailgun::create('PRIVATE_API_KEY', 'https://API_HOSTNAME');\n$domain = \"YOUR_DOMAIN_NAME\";\n$params = array(\n      'from'    => 'Excited User <YOU@YOUR_DOMAIN_NAME>',\n      'to'      => 'bob@example.com',\n      'cc'      => 'alice@example.com',\n      'bcc'     => 'john@example.com',\n      'subject' => 'Hello',\n      'text'    => 'Testing some Mailgun awesomness!',\n      'html'    => '<html>HTML version of the body</html>',\n      'attachment' => array(\n              array(\n                  'filePath' => 'test.txt',\n                  'filename' => 'test_file.txt'\n            )\n        )\n    );\n\n# Make the call to the client.\n$result = $mgClient->messages()->send($domain, $params);\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Creating Template with Version\nDESCRIPTION: Example JSON response when creating a new template with content and version.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-templates.rst#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"template\": {\n      \"createdAt\": \"Wed, 29 Aug 2018 23:31:13 UTC\",\n      \"description\": \"template description\",\n      \"name\": \"template.name\",\n      \"version\": {\n          \"createdAt\": \"Wed, 29 Aug 2018 23:31:14 UTC\",\n          \"engine\": \"handlebars\",\n          \"tag\": \"initial\",\n          \"comment\": \"version comment\",\n          \"headers\": {\n              \"From\": \"{{from}}\",\n              \"Reply-To\": \"{{reply_to}}\",\n              \"subject\": \"{{subject}}\"\n          }\n      }\n  },\n  \"message\": \"template has been stored\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Scheduled Messages with Mailgun API using cURL\nDESCRIPTION: This snippet demonstrates how to send a scheduled email using the Mailgun API via cURL. It specifies the sender, recipient, subject, message content, and the scheduled delivery time using the o:deliverytime parameter.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-scheduled-message.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' \\\n    https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/messages \\\n    -F from='Sender Bob <sbob@YOUR_DOMAIN_NAME>' \\\n    -F to='alice@example.com' \\\n    -F subject='Hello' \\\n    -F text='Testing some Mailgun awesomness!' \\\n    -F o:deliverytime='Fri, 14 Oct 2011 23:10:10 -0000'\n```\n\n----------------------------------------\n\nTITLE: Canceling Mailing List Validation using PHP\nDESCRIPTION: This PHP function uses cURL to send a DELETE request to the Mailgun API for canceling mailing list validation. It includes authentication and returns the API response.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/delete-list-validation.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Currently, the PHP SDK does not support Mailing List verifications.\n# Consider using the following php curl function.\nfunction delete_mailing_list_validation() {\n  $ch = curl_init();\n\n  curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);\n  curl_setopt($ch, CURLOPT_USERPWD, 'api:PRIVATE_API_KEY');\n  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n\n  curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');\n  curl_setopt($ch, CURLOPT_URL, 'https://api.mailgun.net/v3/lists/LIST@YOUR_DOMAIN_NAME/validate');\n\n  $result = curl_exec($ch);\n  curl_close($ch);\n\n  return $result;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Mailing List Members using Go\nDESCRIPTION: Implements Mailgun Go SDK to fetch mailing list members with pagination support and context timeout.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-list-members.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/mailgun/mailgun-go/v3\"\n    \"time\"\n)\n\nfunc GetMembers(domain, apiKey string) ([]mailgun.Member, error) {\n    mg := mailgun.NewMailgun(domain, apiKey)\n    it := mg.ListMembers(\"list@example.com\", nil)\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    var page, result []mailgun.Member\n    for it.Next(ctx, &page) {\n        result = append(result, page...)\n    }\n\n    if it.Err() != nil {\n        return nil, it.Err()\n    }\n    return result, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Template Messages in Ruby\nDESCRIPTION: Ruby implementation for sending template messages using RestClient to make Mailgun API calls. This example shows how to format recipient variables as a JSON string for personalizing email content.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-template-message.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef send_template_message\n  RestClient.post \"https://api:YOUR_API_KEY\"\\\n  \"@api.mailgun.net/v3/YOUR_DOMAIN_NAME/messages\",\n  :from => \"Excited User <YOU@YOUR_DOMAIN_NAME>\",\n  :to => \"alice@example.com, bob@example.com\",\n  :subject => \"Hey, %recipient.first%\",\n  :text => \"If you wish to unsubscribe, click http://mailgun/unsubscribe/%recipient.id%'\",\n  :'recipient-variables' => '{\"bob@example.com\": {\"first\":\"Bob\", \"id\":1}, \"alice@example.com\": {\"first\":\"Alice\", \"id\": 2}}'\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Mailgun Domain using PHP SDK\nDESCRIPTION: Creates a new domain using Mailgun PHP SDK. Requires composer autoloader and API key configuration.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/create-domain.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Include the Autoloader (see \"Libraries\" for install instructions)\nrequire 'vendor/autoload.php';\nuse Mailgun\\Mailgun;\n\n# Instantiate the client.\n$mgClient = Mailgun::create('PRIVATE_API_KEY', 'https://API_HOSTNAME');\n$domain   = 'YOUR_DOMAIN_NAME';\n\n# Issue the call to the client.\n$result = $mgClient->domains()->create($domain);\n```\n\n----------------------------------------\n\nTITLE: Creating Inbox Placement Test with PHP using cURL\nDESCRIPTION: This PHP function creates an inbox placement test using cURL since the PHP SDK doesn't support this endpoint directly. It sets up authentication with the Mailgun API and sends the necessary parameters as form fields.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/create-inbox-placement-test.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Currently, the PHP SDK does not support the inbox placement endpoint.\n# Consider using the following php curl function.\nfunction create_inbox_placement_test() {\n  $ch = curl_init();\n\n  curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);\n  curl_setopt($ch, CURLOPT_USERPWD, 'api:PRIVATE_API_KEY');\n  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n\n  curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');\n  curl_setopt($ch, CURLOPT_URL, 'https://api.mailgun.net/v4/inbox/tests');\n  curl_setopt($ch, CURLOPT_POSTFIELDS, array(\n      'from'=> 'Sample User <user@domain.com>',\n      'subject'=>'testSubject',\n      'html'=>'<html>HTML version of the body</html>',\n      )\n  );\n\n  $result = curl_exec($ch);\n  curl_close($ch);\n\n  return $result;\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Untracked Emails with Mailgun in JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to send an email with tracking disabled using the mailgun.js library. It creates a client, defines message data with 'o:tracking' set to 'False', and sends the message using a Promise-based approach.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-message-no-tracking.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst API_KEY = 'YOUR_API_KEY';\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\nconst client = mailgun.client({username: 'api', key: API_KEY});\n\nconst messageData = {\n  from: 'Excited User <me@samples.mailgun.org>',\n  to: 'alice@example.com',\n  subject: 'Hello',\n  text: 'Testing some Mailgun awesomeness!',\n  'o:tracking': 'False'\n};\n\nclient.messages.create(YOUR_DOMAIN_NAME, messageData)\n.then((res) => {\n  console.log(res);\n})\n.catch((err) => {\n  console.error(err);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a New Template (POST Request)\nDESCRIPTION: API endpoint for storing a new template, including its name, description, and optional content.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-templates.rst#2025-04-21_snippet_1\n\nLANGUAGE: url\nCODE:\n```\nPOST /<domain>/templates\n```\n\n----------------------------------------\n\nTITLE: Sending Tagged Messages with Mailgun in C#\nDESCRIPTION: This C# code sends an email with tags using the Mailgun API and RestSharp. It creates a RestClient with basic authentication, sets up the request parameters including multiple tags, and executes the POST request to send the email.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-tagged-message.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class SendTaggedMessageChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (SendTaggedMessage ().Content.ToString ());\n    }\n\n    public static IRestResponse SendTaggedMessage ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.AddParameter (\"domain\", \"YOUR_DOMAIN_NAME\", ParameterType.UrlSegment);\n        request.Resource = \"{domain}/messages\";\n        request.AddParameter (\"from\", \"Excited User <YOU@YOUR_DOMAIN_NAME>\");\n        request.AddParameter (\"to\", \"bar@example.com\");\n        request.AddParameter (\"subject\", \"Hello\");\n        request.AddParameter (\"text\", \"Testing some Mailgun awesomness!\");\n        request.AddParameter (\"o:tag\", \"September newsletter\");\n        request.AddParameter (\"o:tag\", \"newsletters\");\n        request.Method = Method.POST;\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Email Templates with Mailgun API in Java\nDESCRIPTION: This Java snippet demonstrates the creation of a Mailgun template using the official Java SDK. It creates a TemplateRequest object with name, description, template content, engine, and comment parameters, then submits it to the Mailgun API.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/template-create-version.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.MailgunTemplatesApi;\nimport com.mailgun.model.templates.TemplateRequest;\nimport com.mailgun.model.templates.TemplateWithMessageResponse;\n\n// ...\n\npublic TemplateWithMessageResponse storeVersion() {\n    MailgunTemplatesApi mailgunTemplatesApi = MailgunClient.config(API_KEY)\n        .createApi(MailgunTemplatesApi.class);\n\n    TemplateRequest request = TemplateRequest.builder()\n        .name(\"template.name\")\n        .description(\"template description\")\n        .template(\"{{fname}} {{lname}}\")\n        .engine(\"handlebars\")\n        .comment(\"version comment\")\n        .build();\n\n    return mailgunTemplatesApi.storeNewTemplate(YOUR_DOMAIN_NAME, request);\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Inline Image Email with PHP\nDESCRIPTION: PHP implementation using Mailgun's PHP SDK to send an email with inline image. Demonstrates message construction with HTML content and inline image attachment using the Mailgun client.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-inline-image.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Include the Autoloader (see \"Libraries\" for install instructions)\nrequire 'vendor/autoload.php';\nuse Mailgun\\Mailgun;\n\n# Instantiate the client.\n$mgClient = Mailgun::create('PRIVATE_API_KEY', 'https://API_HOSTNAME');\n$domain = \"YOUR_DOMAIN_NAME\";\n$params = array(\n      'from'    => 'Excited User <YOU@YOUR_DOMAIN_NAME>',\n      'to'      => 'bob@example.com',\n      'subject' => 'Hello',\n      'text'    => 'Testing some Mailgun awesomness!',\n      'html'    => '<html>Inline image: <img src=\"cid:test.jpg\"></html>',\n      'inline' => array(\n          array('filePath' => '/path/to/test.jpg')\n       )\n);\n\n # Make the call to the client.\n $result = $mgClient->messages()->send($domain, $params);\n```\n\n----------------------------------------\n\nTITLE: Sending Complex Messages with Attachments using cURL in Bash\nDESCRIPTION: This curl command sends a complex email message with HTML content and multiple image attachments via the Mailgun API. It includes sender, multiple recipients (to, cc, bcc), subject, text and HTML versions of the body, and attaches two image files.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-complex-message.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' \\\n    https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/messages \\\n    -F from='Excited User <YOU@YOUR_DOMAIN_NAME>' \\\n    -F to='foo@example.com' \\\n    -F cc='bar@example.com' \\\n    -F bcc='baz@example.com' \\\n    -F subject='Hello' \\\n    -F text='Testing some Mailgun awesomness!' \\\n    --form-string html='<html>HTML version of the body</html>' \\\n    -F attachment=@files/cartman.jpg \\\n    -F attachment=@files/cartman.png\n```\n\n----------------------------------------\n\nTITLE: Retrieving Complaint Data using JavaScript Mailgun.js\nDESCRIPTION: This JavaScript snippet demonstrates how to fetch complaint information using the Mailgun.js library. It uses async/await for handling the asynchronous API call and requires the API key and domain name to be specified.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-complaint.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n(async () => {\n  try {\n    const complaintsForAddress = await client.suppressions.get(DOMAIN, 'complaints', 'baz@example.com');\n    console.log('complaintsForAddress', complaintsForAddress);\n  } catch (error) {\n    console.error(error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Querying Events in Mailgun's Events API (JavaScript)\nDESCRIPTION: Example of how to query the Mailgun Events API to retrieve event data filtered by date, time, and recipient, with a sample JSON response showing event details.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/user_manual.rst#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n.. include:: samples/events-date-time-recipient.rst\n```\n\n----------------------------------------\n\nTITLE: Python Email Validation with Requests\nDESCRIPTION: Simple Python implementation using the requests library to validate an email address. Uses basic authentication and query parameters.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-validate.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef get_validate():\n    return requests.get(\n        \"https://api.mailgun.net/v4/address/validate\",\n        auth=(\"api\", \"PRIVATE_API_KEY\"),\n        params={\"address\": \"foo@mailgun.net\"})\n```\n\n----------------------------------------\n\nTITLE: Updating Mailgun Webhook using Java\nDESCRIPTION: This Java code snippet uses the Mailgun Java SDK to update a webhook. It creates a MailgunWebhooksApi instance, builds a WebhookUpdateRequest, and calls the updateWebhook method to update the 'clicked' webhook URL.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/update-webhook.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.MailgunWebhooksApi;\nimport com.mailgun.enums.WebhookName;\nimport com.mailgun.model.webhooks.WebhookResult;\nimport com.mailgun.model.webhooks.WebhookUpdateRequest;\n\n// ...\n\npublic WebhookResult updateWebhook() {\n    MailgunWebhooksApi mailgunWebhooksApi = MailgunClient.config(API_KEY)\n        .createApi(MailgunWebhooksApi.class);\n\n    WebhookUpdateRequest request = WebhookUpdateRequest.builder()\n        .url(\"https://your_domain.com/clicked\")\n        .build();\n\n    return mailgunWebhooksApi.updateWebhook(YOUR_DOMAIN_NAME, WebhookName.CLICKED, request);\n}\n```\n\n----------------------------------------\n\nTITLE: Resending Messages with C# RestSharp\nDESCRIPTION: C# implementation using RestSharp client to resend messages, including authentication and request parameter setup.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/resend-simple-message.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class SendSimpleMessageChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (ResendSimpleMessage ().Content.ToString ());\n    }\n\n    public static IRestResponse ResendSimpleMessage ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://storage-{{MESSAGE_STORAGE_REGION}}.api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.AddParameter (\"domain\", \"YOUR_DOMAIN_NAME\", ParameterType.UrlSegment);\n        request.Resource = \"domains/{domain}/messages/MESSAGE_STORAGE_URL\";\n        request.AddParameter (\"to\", \"bar@example.com\");\n        request.Method = Method.POST;\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Email Template using JavaScript\nDESCRIPTION: This JavaScript function demonstrates how to create a new email template using the Mailgun.js library. It creates a new Mailgun client and sends a POST request with the template name, description, content, and additional metadata.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/template-create.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n(async () => {\n  try {\n    const createdTemplate = await client.domains.domainTemplates.create(DOMAIN, {\n      name: 'template.test',\n      description: 'template description',\n      template: \"<div class=\\\"entry\\\"> <h1>{{title}}</h1> <div class=\\\"body\\\"> {{body}} </div> </div>\",\n      tag: 'v1',\n      comment: 'comment text'\n    });\n    console.log('createdTemplate', createdTemplate);\n  } catch (error) {\n      console.error(error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Sending MIME Message with Ruby\nDESCRIPTION: This Ruby method uses RestClient to send a MIME message via the Mailgun API. It specifies the recipient and attaches the MIME message file in the POST request.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-mime-message.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef send_mime_message\n  RestClient.post \"https://api:YOUR_API_KEY\"\\\n  \"@api.mailgun.net/v3/YOUR_DOMAIN_NAME/messages.mime\",\n  :to => \"bar@example.com\",\n  :message => File.new(File.join(\"files\", \"message.mime\"))\nend\n```\n\n----------------------------------------\n\nTITLE: JavaScript Mailgun Statistics Integration\nDESCRIPTION: JavaScript/Node.js implementation using mailgun.js SDK to fetch domain statistics with async/await pattern\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-stats.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n(async () => {\n  try {\n    const statsForDomain = await client.stats.getDomain(DOMAIN,{ 'event': ['accepted', 'delivered', 'failed'], 'duration': '1m'})\n    console.log('statsForDomain', statsForDomain);\n  } catch (error) {\n    console.error(error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Updating SMTP Credentials using Python\nDESCRIPTION: This Python function shows how to update SMTP credentials using the requests library. It sends a PUT request to the Mailgun API with the domain name, username, and new password.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/change-pwd-credentials.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef change_credential_password():\n    return requests.put(\n        \"https://api.mailgun.net/v3/domains/YOUR_DOMAIN_NAME/credentials/alice\",\n        auth=(\"api\", \"YOUR_API_KEY\"),\n        data={\"password\": \"supersecret\"})\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Mailgun Template using Go\nDESCRIPTION: Go implementation that creates a template and sends a message using it. Uses the mailgun-go SDK with context handling and template variable injection.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/create-template-usage.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/mailgun/mailgun-go/v3\"\n    \"time\"\n)\n\nfunc SendMessageWithTemplate(domain, apiKey string) error {\n    mg := mailgun.NewMailgun(domain, apiKey)\n    var err error\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    // Create a new template\n    err = mg.CreateTemplate(ctx, &mailgun.Template{\n        Name: \"my-template\",\n        Version: mailgun.TemplateVersion{\n            Template: `'<div class=\"entry\"> <h1>{{.title}}</h1> <div class=\"body\"> {{.body}} </div> </div>'`,\n            Engine:   mailgun.TemplateEngineGo,\n            Tag:      \"v1\",\n        },\n    })\n    if err != nil {\n        return err\n    }\n\n    // Give time for template to show up in the system.\n    time.Sleep(time.Second * 1)\n\n    // Create a new message with template\n    m := mg.NewMessage(\"Excited User <excited@example.com>\", \"Template example\", \"\")\n    m.SetTemplate(\"my-template\")\n\n    // Add recipients\n    m.AddRecipient(\"bob@example.com\")\n    m.AddRecipient(\"alice@example.com\")\n\n    // Add the variables to be used by the template\n    m.AddVariable(\"title\", \"Hello Templates\")\n    m.AddVariable(\"body\", \"Body of the message\")\n\n    _, id, err := mg.Send(ctx, m)\n    return err\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Scheduled Messages with Mailgun API using Python\nDESCRIPTION: This Python function demonstrates sending a scheduled email using the requests library to interact with the Mailgun API. It sends a POST request with authentication, message content, and the o:deliverytime parameter to specify when the message should be delivered.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-scheduled-message.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef send_scheduled_message():\n    return requests.post(\n        \"https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/messages\",\n        auth=(\"api\", \"YOUR_API_KEY\"),\n        data={\"from\": \"Excited User <YOU@YOUR_DOMAIN_NAME>\",\n              \"to\": \"bar@example.com\",\n              \"subject\": \"Hello\",\n              \"text\": \"Testing some Mailgun awesomness!\",\n              \"o:deliverytime\": \"Fri, 25 Oct 2011 23:10:10 -0000\"})\n```\n\n----------------------------------------\n\nTITLE: Sending Messages with Templates using Mailgun PHP SDK\nDESCRIPTION: This PHP code snippet demonstrates how to send a message with a template using the Mailgun PHP SDK. It shows how to instantiate the Mailgun client, set up message parameters including template variables, and send the message.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-message-by-template-id.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Include the Autoloader (see \"Libraries\" for install instructions)\nrequire 'vendor/autoload.php';\nuse Mailgun\\Mailgun;\n\n# Instantiate the client.\n$mgClient = Mailgun::create('PRIVATE_API_KEY', 'https://API_HOSTNAME');\n$domain = \"YOUR_DOMAIN_NAME\";\n$params = array(\n    'from'                  => 'Excited User <YOU@YOUR_DOMAIN_NAME>',\n    'to'                    => 'bob@example.com',\n    'subject'               => 'Hello',\n    'template'              => 'template.test',\n    't:variables' => '{\"title\": \"API Documentation\", \"body\": \"Sending messages with templates\"}'\n    );\n\n# Make the call to the client.\n$result = $mgClient->messages()->send($domain, $params);\n```\n\n----------------------------------------\n\nTITLE: Accepted Event JSON Structure\nDESCRIPTION: Example of a JSON response when Mailgun accepts an email request. Shows the structure for a basic accepted message event including headers, recipients, and storage information.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-events.rst#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"event\": \"accepted\",\n  \"id\": \"jxVuhYlhReaK3QsggHfFRA\",\n  \"timestamp\": 1529692198.641821,\n  \"log-level\": \"info\",\n  \"method\": \"smtp\",\n  \"envelope\": {\n    \"targets\": \"team@example.org\",\n    \"transport\": \"smtp\",\n    \"sender\": \"sender@example.org\"\n  },\n  \"flags\": {\n    \"is-authenticated\": false\n  },\n  \"message\": {\n    \"headers\": {\n      \"to\": \"team@example.org\",\n      \"message-id\": \"20180622182958.1.48906CB188F1A454@exmple.org\",\n      \"from\": \"sender@example.org\",\n      \"subject\": \"Test Subject\"\n    },\n    \"attachments\": [],\n    \"recipients\": [\n      \"team@example.org\"\n    ],\n    \"size\": 586\n  },\n  \"storage\": {\n    \"url\": \"https://se.api.mailgun.net/v3/domains/example.org/messages/eyJwI...\",\n    \"key\": \"eyJwI...\"\n  },\n  \"recipient\": \"team@example.org\",\n  \"recipient-domain\": \"example.org\",\n  \"campaigns\": [],\n  \"tags\": [],\n  \"user-variables\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Inline Image Email with JavaScript\nDESCRIPTION: JavaScript/Node.js implementation using mailgun.js to send an email with inline image. Shows how to use promises to read the image file and send the message with the Mailgun client.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-inline-image.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\nimport path from 'node:path';\nimport fs from 'node:fs/promises';\n\nconst mailgun = new Mailgun(formData);\nconst filepath = path.resolve('./test.jpg');\n\nconst messageData = {\n  from: 'Excited User <me@samples.mailgun.org>',\n  to: 'foo@example.com, baz@example.com, bar@example.com',\n  subject: 'Hello',\n  html: '<html>Inline image here: <img alt=\"image\" id=\"1\" src=\"cid:test.jpg\"/></html> Some extra text'\n};\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\nfs.readFile(filepath)\n  .then((data) => {\n    const file = {\n      filename: 'test.jpg',\n      data\n    };\n\n    messageData.inline = file;\n    return client.messages.create(DOMAIN, messageData);\n  })\n  .then((response) => {\n    console.log(response);\n  });\n```\n\n----------------------------------------\n\nTITLE: Retrieving Bounce Information using Mailgun PHP SDK\nDESCRIPTION: This PHP snippet demonstrates how to use the Mailgun PHP SDK to fetch bounce information for a specific email address. It requires the Mailgun library to be installed via Composer and the API key and domain name to be configured.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-bounce.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Include the Autoloader (see \"Libraries\" for install instructions)\nrequire 'vendor/autoload.php';\nuse Mailgun\\Mailgun;\n\n# Instantiate the client.\n$mgClient  = Mailgun::create('PRIVATE_API_KEY', 'https://API_HOSTNAME');\n$domain    = 'YOUR_DOMAIN_NAME';\n$recipient = 'bob@example.com';\n\n# Issue the call to the client.\n$result = $mgClient->suppressions()->bounces()->show($domain, $recipient);\n```\n\n----------------------------------------\n\nTITLE: Updating Mailgun Template Version using Go SDK\nDESCRIPTION: This Go function uses the Mailgun Go SDK to update a template version. It creates a Mailgun client, sets up a context, and calls the UpdateTemplateVersion method with the required parameters.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/version-update.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/mailgun/mailgun-go/v3\"\n    \"time\"\n)\n\nfunc UpdateTemplateVersion(domain, apiKey string) error {\n    mg := mailgun.NewMailgun(domain, apiKey)\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    return mg.UpdateTemplateVersion(ctx, \"TEMPLATE_NAME\", &mailgun.TemplateVersion{\n        Comment: \"Add a comment to the template and make it 'active'\",\n        Tag:     \"VERSION_TAG\",\n        Active:  true,\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Rejected or Failed Events from Mailgun API using Python\nDESCRIPTION: This Python function uses the requests library to query the Mailgun API for rejected or failed events. It demonstrates how to set up the API endpoint, use basic authentication, and add query parameters.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/events-failure.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef get_logs():\n    return requests.get(\n        \"https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/events\",\n        auth=(\"api\", \"YOUR_API_KEY\"),\n        params={\"event\" : \"rejected OR failed\"})\n```\n\n----------------------------------------\n\nTITLE: Sending Messages with Templates using Mailgun Go SDK\nDESCRIPTION: This Go function demonstrates how to send a message with a template using the Mailgun Go SDK. It shows how to create a new Mailgun client, set up the message with template and variables, and send the message.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-message-by-template-id.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  \"context\"\n  \"encoding/json\"\n  \"github.com/mailgun/mailgun-go\"\n  \"time\"\n)\n\n\nfunc SendMessageWithTemplate() (id string , err error) {\n  mg := mailgun.NewMailgun(\"YOUR_DOMAIN_NAME\", \"YOUR_API_KEY\")\n  ctx, cancel := context.WithTimeout(context.Background(), time.Second * 30)\n  defer cancel()\n\n  m := mg.NewMessage(\"Excited User <YOU@YOUR_DOMAIN_NAME>\", \"???\", \"\")\n  m.SetTemplate(\"template.test\")\n  if err := m.AddRecipient(\"bar@example.com\"); err != nil {\n    return \"\", err\n  }\n\n  vars, err := json.Marshal(map[string]string{\n      \"title\": \"API Documentation\",\n      \"body\":  \"Sending messages with templates\",\n  })\n  if err != nil {\n    return \"\", err\n  }\n  m.AddHeader(\"X-Mailgun-Template-Variables\", string(vars))\n\n  _, id, err := mg.Send(ctx, m)\n  return\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Mailing List Member with Go Mailgun SDK\nDESCRIPTION: This Go function uses the Mailgun Go SDK to update a mailing list member. It initializes a Mailgun client, sets up a context with timeout, and sends an update request for the member's name and subscription status.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/update-list-member.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/mailgun/mailgun-go/v3\"\n    \"time\"\n)\n\nfunc UpdateMember(domain, apiKey string) error {\n    mg := mailgun.NewMailgun(domain, apiKey)\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    _, err := mg.UpdateMember(ctx, \"bar@example.com\", \"list@example.com\", mailgun.Member{\n        Name: \"Foo Bar\",\n        Subscribed: mailgun.Unsubscribed,\n    })\n    return err\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Mailgun Template using C#\nDESCRIPTION: C# implementation using RestSharp to create a template. Includes authentication and request parameter setup.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/create-template-usage.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class CreateTemplatesChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (CreateTemplate ().Content.ToString ());\n    }\n\n    public static IRestResponse CreateTemplate ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.Resource = \"{domain}/templates\";\n        request.AddParameter (\"domain\", \"YOUR_DOMAIN_NAME\", ParameterType.UrlSegment);\n        request.AddParameter (\"template\", \"<div class=\\\"entry\\\"> <h1>{{title}}</h1> <div class=\\\"body\\\"> {{body}} </div> </div>\");\n        request.AddParameter (\"description\", \"Sample template\");\n        reuqest.AddParameter (\"name\", \"Test template\");\n        request.Method = Method.POST;\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Resending Messages with Go Mailgun SDK\nDESCRIPTION: Go implementation using the official Mailgun Go SDK to resend messages with timeout context.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/resend-simple-message.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/mailgun/mailgun-go/v3\"\n    \"time\"\n)\n\nfunc ResendMessage(domain, apiKey string) (string, string, error) {\n    mg := mailgun.NewMailgun(domain, apiKey)\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    return mg.ReSend(ctx, \"MESSAGE_STORAGE_URL\", \"bar@example.com\")\n}\n```\n\n----------------------------------------\n\nTITLE: Activating Domain Keys with net/http in Go\nDESCRIPTION: Uses Go's standard net/http package to activate a domain key. Defines a response struct, creates a new request with basic authentication, and parses the JSON response.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/activate-domain-key.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"encoding/json\"\n   \"fmt\"\n\t\"net/http\"\n)\n\ntype ActivateDomainKeyResp struct {\n\tMsg       string `json:\"message\"`\n\tAuthority string `json:\"authority\"`\n\tSelector  string `json:\"selector\"`\n\tActive    bool   `json:\"active\"`\n}\n\nfunc ActivateDomainKey() (activateDomainKeyResp ActivateDomainKeyResp, err error) {\n   authority := \"AUTHORITY_DOMAIN_NAME\"\n   selector := \"SELECTOR\"\n\n\tclient := &http.Client{}\n\treq, _ := http.NewRequest(\"GET\", fmt.Sprintf(\"https://api.mailgun.net/v4/domains/%s/keys/%s/activate\", authority, selector), nil)\n\treq.SetBasicAuth(\"api\", apiKey)\n\tresponse, err := client.Do(req)\n\tif err != nil {\n\t\treturn\n\t}\n\tdefer response.Body.Close()\n\n\t// Decode response.\n\terr = json.NewDecoder(response.Body).Decode(&activateDomainKeyResp)\n\treturn\n }\n```\n\n----------------------------------------\n\nTITLE: Adding Unsubscribe Records using Java with Mailgun Java SDK\nDESCRIPTION: This Java implementation uses the Mailgun Java SDK to add an email address to the unsubscribe list. It creates a request object with the email address, wildcard tag for all emails, and a timestamp, then submits it to the Mailgun Suppression API.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/add-unsubscribe-all.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.suppression.MailgunSuppressionUnsubscribeApi;\nimport com.mailgun.model.suppression.SuppressionResponse;\nimport com.mailgun.model.suppression.unsubscribe.UnsubscribeSingleItemRequest;\n\nimport java.time.ZonedDateTime;\n\n// ...\n\npublic SuppressionResponse addUnsubscribeAll() {\n    MailgunSuppressionUnsubscribeApi suppressionUnsubscribeApi = MailgunClient.config(API_KEY)\n        .createApi(MailgunSuppressionUnsubscribeApi.class);\n\n    UnsubscribeSingleItemRequest unsubscribeSingleItemRequest = UnsubscribeSingleItemRequest.builder()\n        .address(\"bob@example.com\")\n        .tag(\"*\")\n        .createdAt(ZonedDateTime.now())\n        .build();\n\n    return suppressionUnsubscribeApi.addAddressToUnsubscribeTable(YOUR_DOMAIN_NAME, unsubscribeSingleItemRequest);\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Email via SMTP using PHP and PHPMailer\nDESCRIPTION: PHP example using PHPMailer library to send emails through Mailgun SMTP. Shows configuration for TLS encryption and SMTP authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/smtp-send-simple-message.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// Using Awesome https://github.com/PHPMailer/PHPMailer\n<?php\nrequire 'PHPMailerAutoload.php';\n\n$mail = new PHPMailer;\n\n$mail->isSMTP();                                      // Set mailer to use SMTP\n$mail->Host = 'smtp.mailgun.org';                     // Specify main and backup SMTP servers\n$mail->SMTPAuth = true;                               // Enable SMTP authentication\n$mail->Username = 'postmaster@YOUR_DOMAIN_NAME';   // SMTP username\n$mail->Password = 'secret';                           // SMTP password\n$mail->SMTPSecure = 'tls';                            // Enable encryption, only 'tls' is accepted\n\n$mail->From = 'YOU@YOUR_DOMAIN_NAME';\n$mail->FromName = 'Mailer';\n$mail->addAddress('bar@example.com');                 // Add a recipient\n\n$mail->WordWrap = 50;                                 // Set word wrap to 50 characters\n\n$mail->Subject = 'Hello';\n$mail->Body    = 'Testing some Mailgun awesomness';\n\nif(!$mail->send()) {\n    echo 'Message could not be sent.';\n    echo 'Mailer Error: ' . $mail->ErrorInfo;\n} else {\n    echo 'Message has been sent';\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Email Templates with Mailgun API using cURL\nDESCRIPTION: This example shows how to create a new template in Mailgun using a cURL command. It sends a POST request with template name, description, content, engine type, comment, and headers parameters to Mailgun's API endpoint.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/template-create-version.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -X POST \\\n  https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/templates \\\n  -F name='template.name' \\\n  -F description='template description' \\\n  -F template='{{fname}} {{lname}}' \\\n  -F engine='handlebars' \\\n  -F comment='version comment' \\\n  -F headers='{\"Subject\": \"{{subject}}\"}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Domains with PHP Mailgun Client\nDESCRIPTION: This PHP code snippet demonstrates how to use the Mailgun PHP client to retrieve a list of domains. It shows how to include the autoloader, instantiate the client with an API key, and make the API call.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-domains.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Include the Autoloader (see \"Libraries\" for install instructions)\nrequire 'vendor/autoload.php';\nuse Mailgun\\Mailgun;\n\n# Instantiate the client.\n$mgClient = Mailgun::create('PRIVATE_API_KEY', 'https://API_HOSTNAME');\n\n# Issue the call to the client.\n$result = $mgClient->domains()->index();\n```\n\n----------------------------------------\n\nTITLE: Sending Scheduled Messages with Mailgun API using Go\nDESCRIPTION: This Go function demonstrates sending a scheduled email using the Mailgun Go client library. It creates a new message and sets a delivery time for 5 minutes in the future using the SetDeliveryTime method on the message object.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-scheduled-message.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/mailgun/mailgun-go/v3\"\n    \"time\"\n)\n\nfunc SendScheduledMessage(domain, apiKey string) (string, error) {\n    mg := mailgun.NewMailgun(domain, apiKey)\n    m := mg.NewMessage(\n        \"Excited User <YOU@YOUR_DOMAIN_NAME>\",\n        \"Hello\",\n        \"Testing some Mailgun awesomeness!\",\n        \"bar@example.com\",\n    )\n    m.SetDeliveryTime(time.Now().Add(5 * time.Minute))\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    _, id, err := mg.Send(ctx, m)\n    return id, err\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Tagged Messages with Mailgun Go SDK\nDESCRIPTION: This Go function sends an email with multiple tags using the Mailgun Go SDK. It initializes a Mailgun client, creates a new message with sender and recipient information, adds multiple tags to the message, and sends it with a timeout context.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-tagged-message.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/mailgun/mailgun-go/v3\"\n    \"time\"\n)\n\nfunc SendTaggedMessage(domain, apiKey string) (string, error) {\n    mg := mailgun.NewMailgun(domain, apiKey)\n    m := mg.NewMessage(\n        \"Excited User <YOU@YOUR_DOMAIN_NAME>\",\n        \"Hello\",\n        \"Testing some Mailgun awesomeness!\",\n        \"bar@example.com\",\n    )\n\n    err := m.AddTag(\"FooTag\", \"BarTag\", \"BlortTag\")\n    if err != nil {\n        return \"\", err\n    }\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    _, id, err := mg.Send(ctx, m)\n    return id, err\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Monitored Domains List in JavaScript\nDESCRIPTION: Example 200 response for the monitored domains endpoint showing the structure of the returned data. The response includes domain names, update timestamps, health states (healthy or listed), and details about any blocklists the domains appear on.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-domain-blocklist-monitoring.rst#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"domains\": [\n      {\n          \"domain\": \"yourdomain.com\",\n          \"updated_at\": \"2023-02-22T23:00:00.000Z\",\n          \"state\": \"healthy\",\n          \"listed\": null\n      },\n      {\n          \"domain\": \"yourotherdomain.com\",\n          \"updated_at\": \"2023-02-23T23:00:00:000Z\",\n          \"state\": \"listed\",\n          \"listed\": [\n              {\n                  \"list\": \"dbl.spamhaus.org\",\n                  \"name\": \"Spamhaus DBL\",\n                  \"first_seen\": \"2022-12-12T18:45:02.357Z\",\n                  \"last_seen\": \"2023-02-23T12:45:01.941Z\",\n                  \"comments\": [\n                      \"https://www.spamhaus.org/query/domain/yourotherdomain.com\"\n                  ]\n              }\n          ]\n      },\n  ]\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Complaint Data using Python Requests Library\nDESCRIPTION: This Python function uses the requests library to fetch complaint information from the Mailgun API. It requires the API key and domain name to be replaced with actual values.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-complaint.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef get_complaint():\n    return requests.get(\n        \"https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/complaints/baz@example.com\",\n        auth=(\"api\", \"YOUR_API_KEY\"))\n```\n\n----------------------------------------\n\nTITLE: Sending Tagged Messages with Mailgun PHP SDK\nDESCRIPTION: This PHP example demonstrates how to send a tagged email using the Mailgun PHP SDK. It initializes the Mailgun client with API credentials, sets up the message parameters including multiple tags, and sends the email.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-tagged-message.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Include the Autoloader (see \"Libraries\" for install instructions)\nrequire 'vendor/autoload.php';\nuse Mailgun\\Mailgun;\n\n# Instantiate the client.\n$mgClient = Mailgun::create('PRIVATE_API_KEY', 'https://API_HOSTNAME');\n$domain = \"YOUR_DOMAIN_NAME\";\n$params = array(\n    'from'    => 'Excited User <YOU@YOUR_DOMAIN_NAME>',\n    'to'      => 'bob@example.com',\n    'subject' => 'Hello',\n    'text'    => 'Testing some Mailgun awesomness!',\n    'o:tag'   => array('Tag1', 'Tag2', 'Tag3')\n);\n\n# Make the call to the client.\n$result = $mgClient->messages()->send($domain, $params);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Mailgun Event Logs with Pagination (Java)\nDESCRIPTION: This Java code snippet demonstrates how to fetch event logs with pagination using the Mailgun Java SDK. It requires the API key and domain name, and returns an EventsResponse object.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/events-pagination.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.MailgunEventsApi;\nimport com.mailgun.model.events.EventsResponse;\n\n// ...\n\npublic EventsResponse getLogsPagination() {\n    MailgunEventsApi mailgunEventsApi = MailgunClient.config(API_KEY)\n        .createApi(MailgunEventsApi.class);\n\n    return mailgunEventsApi.getEvents(YOUR_DOMAIN_NAME, PAGE_ID);\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Inline Image Email with Ruby\nDESCRIPTION: Ruby implementation using RestClient to send an email with inline image. Demonstrates how to construct the message data and make a POST request with multipart form data.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-inline-image.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef send_inline_image\n  data = {}\n  data[:from] = \"Excited User <YOU@YOUR_DOMAIN_NAME>\"\n  data[:to] = \"bar@example.com\"\n  data[:subject] = \"Hello\"\n  data[:text] = \"Testing some Mailgun awesomness!\"\n  data[:html] = '<html>Inline image here: <img src=\"cid:test.jpg\"></html>'\n  data[:inline] = File.new(File.join(\"files\", \"test.jpg\"))\n  RestClient.post \"https://api:YOUR_API_KEY\"\\\n  \"@api.mailgun.net/v3/YOUR_DOMAIN_NAME/messages\", data\nend\n```\n\n----------------------------------------\n\nTITLE: Fetching Mailgun Event Logs (Python)\nDESCRIPTION: This Python function demonstrates how to retrieve event logs from the Mailgun API using the requests library. It requires the API key and domain name to be specified.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/events-pagination.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef get_logs():\n    return requests.get(\n        \"https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/events/W3siYSI6IGZhbHNlLC\",\n        auth=(\"api\", \"YOUR_API_KEY\"))\n```\n\n----------------------------------------\n\nTITLE: Failed Validation Response Example\nDESCRIPTION: JSON response example showing a failed mailbox verification result.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-email-validation.rst#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"address\": \"nonexistentemail@realdomain.com\",\n    \"is_disposable_address\": false,\n    \"is_role_address\": false,\n    \"reason\": [mailbox_does_not_exist],\n    \"result\": \"undeliverable\",\n    \"risk\": \"high\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Template Messages in Go\nDESCRIPTION: Go implementation for sending template messages using the Mailgun Go SDK. This example demonstrates a different approach using AddRecipientAndVariables to set recipient-specific variables for each email recipient.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-template-message.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/mailgun/mailgun-go/v3\"\n    \"time\"\n)\n\nfunc SendTemplateMessage(domain, apiKey string) (string, error) {\n    mg := mailgun.NewMailgun(domain, apiKey)\n    m := mg.NewMessage(\n        \"Excited User <YOU@YOUR_DOMAIN_NAME>\",\n        \"Hey %recipient.first%\",\n        \"If you wish to unsubscribe, click http://mailgun/unsubscribe/%recipient.id%\",\n    ) // IMPORTANT: No To:-field recipients!\n\n    m.AddRecipientAndVariables(\"bob@example.com\", map[string]interface{}{\n        \"first\": \"bob\",\n        \"id\":   1,\n    })\n\n    m.AddRecipientAndVariables(\"alice@example.com\", map[string]interface{}{\n        \"first\": \"alice\",\n        \"id\":   2,\n    })\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    _, id, err := mg.Send(ctx, m)\n    return id, err\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Bounce Information using C# RestSharp Library\nDESCRIPTION: This C# code demonstrates how to use the RestSharp library to retrieve bounce information for a specific email address from the Mailgun API. It requires the API key and domain name to be replaced with actual values.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-bounce.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class GetBounceChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (GetBounce ().Content.ToString ());\n    }\n\n    public static IRestResponse GetBounce ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.AddParameter (\"domain\", \"YOUR_DOMAIN_NAME\", ParameterType.UrlSegment);\n        request.Resource = \"{domain}/bounces/foo@bar.com\";\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Domain to Mailgun using cURL\nDESCRIPTION: This snippet demonstrates how to add a new domain to Mailgun using a cURL command. It sends a POST request to the Mailgun API with the domain name and SMTP password.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/add-domain.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' \\\n  -X POST https://api.mailgun.net/v3/domains \\\n  -F name='YOUR_NEW_DOMAIN_NAME' \\\n  -F smtp_password='supersecretpassword'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Domains with Python Requests Library\nDESCRIPTION: This Python function demonstrates how to use the requests library to retrieve domains from the Mailgun API. It includes authentication and pagination parameters in the request.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-domains.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef get_domains():\n    return requests.get(\n        \"https://api.mailgun.net/v3/domains\",\n        auth=(\"api\", \"YOUR_API_KEY\"),\n        params={\"skip\": 0,\n                \"limit\": 3})\n```\n\n----------------------------------------\n\nTITLE: Sending Template Messages in Python\nDESCRIPTION: Python implementation for sending template messages using the requests library to make Mailgun API calls. The example demonstrates how to structure the API request with recipient variables for personalizing content.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-template-message.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef send_template_message():\n    return requests.post(\n        \"https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/messages\",\n        auth=(\"api\", \"YOUR_API_KEY\"),\n        data={\"from\": \"Excited User <YOU@YOUR_DOMAIN_NAME>\",\n              \"to\": [\"alice@example.com, bob@example.com\"],\n              \"subject\": \"Hey, %recipient.first%\",\n              \"text\": \"If you wish to unsubscribe, click http://mailgun/unsubscribe/%recipient.id%'\",\n              \"recipient-variables\": ('{\"bob@example.com\": {\"first\":\"Bob\", \"id\":1}, '\n                                      '\"alice@example.com\": {\"first\":\"Alice\", \"id\": 2}}')})\n```\n\n----------------------------------------\n\nTITLE: Fetching and Printing Mailgun Events using Go\nDESCRIPTION: This Go function demonstrates how to use the Mailgun Go SDK to fetch and print events. It sets up an event iterator with filters and prints each event in the response.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/events-date-time-recipient.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/mailgun/mailgun-go/v3\"\n    \"time\"\n)\n\nfunc PrintEventLog(domain, apiKey string) error {\n    mg := mailgun.NewMailgun(domain, apiKey)\n\n    // Create an iterator\n    it := mg.ListEvents(&mailgun.ListEventOptions{\n        Begin: time.Now().Add(-50 * time.Minute),\n        Limit: 100,\n        Filter: map[string]string{\n            \"recipient\": \"joe@example.com\",\n        },\n    })\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    // Iterate through all the pages of events\n    var page []mailgun.Event\n    for it.Next(ctx, &page) {\n        for _, event := range page {\n            fmt.Printf(\"%+v\\n\", event)\n        }\n    }\n\n    // Did iteration end because of an error?\n    if it.Err() != nil {\n        return it.Err()\n    }\n\n    return nil\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Domain to Mailgun using C#\nDESCRIPTION: This C# class demonstrates how to add a new domain to Mailgun using the RestSharp library. It creates a REST client, authenticates with the API, and sends a POST request to create a new domain.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/add-domain.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class AddDomainChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (AddDomain ().Content.ToString ());\n    }\n\n    public static IRestResponse AddDomain ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3/\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.Resource = \"domains\";\n        request.AddParameter (\"name\", \"YOUR_NEW_DOMAIN_NAME\");\n        request.AddParameter (\"smtp_password\", \"supersecretpassword\");\n        request.Method = Method.POST;\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Domain to Mailgun using Python\nDESCRIPTION: This Python function shows how to add a new domain to Mailgun using the requests library. It sends a POST request to the Mailgun API with the domain name and SMTP password.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/add-domain.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef add_domain():\n    return requests.post(\n        \"https://api.mailgun.net/v3/domains\",\n        auth=(\"api\", \"YOUR_API_KEY\"),\n        data={'name':'YOUR_NEW_DOMAIN_NAME', 'smtp_password':'supersecretpassword'})\n```\n\n----------------------------------------\n\nTITLE: Activating Domain Keys with curl in PHP\nDESCRIPTION: Implements domain key activation using PHP's curl extension. Sets up authentication with the Mailgun API key and makes a PUT request to the activation endpoint.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/activate-domain-key.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction activate_domain_key() {\n    $ch = curl_init();\n\n    curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);\n    curl_setopt($ch, CURLOPT_USERPWD, 'api:PRIVATE_API_KEY');\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n\n    curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PUT');\n    curl_setopt($ch, CURLOPT_URL, 'https://api.mailgun.net/v4/domains/AUTHORITY_DOMAIN_NAME/keys/SELECTOR/activate');\n    $result = curl_exec($ch);\n    curl_close($ch);\n\n    return $result;\n  }\n```\n\n----------------------------------------\n\nTITLE: Processing Message Headers in Ruby on Rails\nDESCRIPTION: Parses the message-headers JSON parameter in a Ruby on Rails application to access individual MIME headers from a message posted by Mailgun's webhook.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/user_manual.rst#2025-04-21_snippet_33\n\nLANGUAGE: ruby\nCODE:\n```\ndef mailgun_posted_params\n  message_headers = JSON.parse(params[\"message-headers\"])\n  message_headers.each do |header|\n    key, value = header\n    puts \"header key: #{key}, header value: #{value}\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Parsing Email Addresses with Mailgun API in PHP\nDESCRIPTION: This PHP snippet uses the Mailgun PHP SDK to parse email addresses. It instantiates the Mailgun client with an API key and calls the emailValidation->parse() method with a list of addresses.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-parse.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Include the Autoloader (see \"Libraries\" for install instructions)\nrequire 'vendor/autoload.php';\nuse Mailgun\\Mailgun;\n\n# Instantiate the client.\n$mgClient = Mailgun::create('PRIVATE_API_KEY');\n$addressList = 'Alice <alice@example.com>,bob@example.com';\n\n# Issue the call to the client.\n$result = $mgClient->emailValidation->parse($addressList);\n```\n\n----------------------------------------\n\nTITLE: Fetching Complaints using Python Requests Library\nDESCRIPTION: This Python function uses the requests library to make a GET request to the Mailgun API for retrieving complaints. It includes the API key for authentication and specifies the domain name in the URL.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-complaints.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef get_complaints():\n    return requests.get(\n        \"https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/complaints\",\n        auth=(\"api\", \"YOUR_API_KEY\"))\n```\n\n----------------------------------------\n\nTITLE: Adding a Domain to Mailgun using PHP\nDESCRIPTION: This PHP code snippet demonstrates how to add a new domain to Mailgun using the Mailgun PHP SDK. It initializes the Mailgun client with the API key and sends a request to create a new domain.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/add-domain.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Include the Autoloader (see \"Libraries\" for install instructions)\nrequire 'vendor/autoload.php';\nuse Mailgun\\Mailgun;\n\n# Instantiate the client.\n$mgClient = Mailgun::create('PRIVATE_API_KEY', 'https://API_HOSTNAME');\n$domain   = 'YOUR_DOMAIN_NAME';\n\n# Issue the call to the client.\n$result = $mgClient->domains()->create($domain);\n```\n\n----------------------------------------\n\nTITLE: Sending Scheduled Messages with Mailgun API using Java\nDESCRIPTION: This Java code demonstrates sending a scheduled email using the Mailgun Java client library. It creates a message with a two-hour delay using the ZonedDateTime class and the deliveryTime builder method on the Message object.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-scheduled-message.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.MailgunMessagesApi;\nimport com.mailgun.model.message.Message;\nimport com.mailgun.model.message.MessageResponse;\n\nimport java.time.ZonedDateTime;\n\n// ...\n\npublic MessageResponse sendScheduledMessage() {\n    MailgunMessagesApi mailgunMessagesApi = MailgunClient.config(API_KEY)\n        .createApi(MailgunMessagesApi.class);\n\n    Message message = Message.builder()\n        .from(\"Excited User <USER@YOURDOMAIN.COM>\")\n        .to(\"bruce@example.com\")\n        .subject(\"Hello\")\n        .text(\"Testing out some Mailgun awesomeness!\")\n        .deliveryTime(ZonedDateTime.now().plusHours(2L)) // Two hours delay.\n        .build();\n\n    return mailgunMessagesApi.sendMessage(YOUR_DOMAIN_NAME, message);\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Mailgun Events using Python\nDESCRIPTION: This Python function demonstrates how to use the requests library to query the Mailgun Events API. It sets up the API endpoint, authentication, and query parameters for filtering events.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/events-date-time-recipient.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef get_logs():\n    return requests.get(\n        \"https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/events\",\n        auth=(\"api\", \"YOUR_API_KEY\"),\n        params={\"begin\"       : \"Fri, 3 May 2013 09:00:00 -0000\",\n                \"ascending\"   : \"yes\",\n                \"limit\"       :  25,\n                \"pretty\"      : \"yes\",\n                \"recipient\" : \"joe@example.com\"})\n```\n\n----------------------------------------\n\nTITLE: Configuring Postfix for Mailgun SMTP Relay\nDESCRIPTION: Configuration for setting up Postfix mail server to relay through Mailgun's SMTP service with SASL authentication and TLS support. Includes settings for authentication credentials and TLS certificate paths.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/user_manual.rst#2025-04-21_snippet_48\n\nLANGUAGE: config\nCODE:\n```\n# /etc/postfix/main.cf:\n\nmydestination = localhost.localdomain, localhost\nrelayhost = [smtp.mailgun.org]:587\nsmtp_sasl_auth_enable = yes\nsmtp_sasl_password_maps = static:postmaster@mydomain.com:password\nsmtp_sasl_security_options = noanonymous\n\n# TLS support\nsmtp_tls_security_level = may\nsmtpd_tls_security_level = may\nsmtp_tls_note_starttls_offer = yes\n```\n\n----------------------------------------\n\nTITLE: Sending MIME Message with Java\nDESCRIPTION: This Java code shows how to send a MIME message using the Mailgun Java SDK. It creates a MailgunMessagesApi instance, builds a MailgunMimeMessage object, and sends it using the API.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-mime-message.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport java.io.File;\nimport com.mailgun.api.v3.MailgunMessagesApi;\nimport com.mailgun.client.MailgunClient;\nimport com.mailgun.model.message.MailgunMimeMessage;\nimport com.mailgun.model.message.MessageResponse;\n\n// ...\n\npublic MessageResponse sendMIMEMessage() {\n    MailgunMessagesApi mailgunMessagesApi = MailgunClient.config(API_KEY)\n            .createApi(MailgunMessagesApi.class);\n\n\n    MailgunMimeMessage mailgunMimeMessage = MailgunMimeMessage.builder()\n            .to(\"megan@example.com)\n            .message(new File(\"/path/to/file.mime\"))\n            .build();\n\n    return mailgunMessagesApi.sendMIMEMessage(YOUR_DOMAIN_NAME, mailgunMimeMessage);\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Email Address with Mailgun API using cURL\nDESCRIPTION: Makes a POST request to Mailgun's Address Validation API v4 using cURL. Authentication is done with a private API key, and the request includes an email address to validate.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/post-validate.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --user 'api:PRIVATE_API_KEY' -X POST \\\n    https://api.mailgun.net/v4/address/validate \\\n    -F address='foo@mailgun.net'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Domains with JavaScript Mailgun Client\nDESCRIPTION: This JavaScript code snippet demonstrates how to use the Mailgun.js client to retrieve a list of domains. It shows how to initialize the client with authentication and make an asynchronous API call to list domains.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-domains.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n(async () => {\n  try {\n    const domainsList = await client.domains.list();\n    console.log('domainsList', domainsList);\n  } catch (error) {\n    console.error(error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Delete Webhook using C#\nDESCRIPTION: Delete a webhook using C# RestSharp client with basic authentication\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/delete-webhook.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class DeleteWebhookChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (DeleteWebhook ().Content.ToString ());\n    }\n\n    public static IRestResponse DeleteWebhook ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.Resource = \"/domains/{name}/webhooks/clicked\";\n        request.AddUrlSegment (\"name\", \"YOUR_DOMAIN_NAME\");\n        request.Method = Method.DELETE;\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Bounce List Implementation\nDESCRIPTION: JavaScript/Node.js implementation using mailgun.js library to fetch bounce information with async/await pattern and error handling.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-bounces.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n(async () => {\n  try {\n    const bounces = await client.suppressions.list(DOMAIN, 'bounces');\n    console.log('bounces', bounces);\n  } catch (error) {\n    console.error(error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Sending Tagged Messages with Mailgun in Ruby\nDESCRIPTION: This Ruby function demonstrates sending a tagged email through the Mailgun API using RestClient. It prepares the message data with sender and recipient information, and adds multiple tags to the email using array operations.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-tagged-message.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef send_tagged_message\n  data = {}\n  data[:from] = \"Excited User <YOU@YOUR_DOMAIN_NAME>\"\n  data[:to] = \"bar@example.com\"\n  data[:subject] = \"Hello\"\n  data[:text] = \"Testing some Mailgun awesomness!\"\n  data[\"o:tag\"] = []\n  data[\"o:tag\"] << \"September newsletter\"\n  data[\"o:tag\"] << \"newsletters\"\n  RestClient.post \"https://api:YOUR_API_KEY\"\\\n  \"@api.mailgun.net/v3/YOUR_DOMAIN_NAME/messages\", data\nend\n```\n\n----------------------------------------\n\nTITLE: Java Bounce Retrieval Implementation\nDESCRIPTION: Java implementation using Mailgun Java SDK to fetch bounce information. Uses MailgunSuppressionBouncesApi class to handle the API interaction.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-bounces.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.suppression.MailgunSuppressionBouncesApi;\nimport com.mailgun.model.suppression.bounces.BouncesResponse;\n\n// ...\n\npublic BouncesResponse getBounces() {\n    MailgunSuppressionBouncesApi suppressionBouncesApi = MailgunClient.config(API_KEY)\n        .createApi(MailgunSuppressionBouncesApi.class);\n\n    return suppressionBouncesApi.getBounces(YOUR_DOMAIN_NAME);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Mailgun Domain using C# RestSharp\nDESCRIPTION: Implements domain creation using C# RestSharp client with basic authentication. Includes complete class implementation with main method.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/create-domain.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class CreateDomainChunk\n{\n\n    public static void Main (string[]args)\n    {\n        Console.WriteLine (CreateDomain ().Content.ToString ());\n    }\n\n    public static IRestResponse CreateDomain ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.Resource = \"domains\";\n        request.AddParameter (\"name\", \"YOUR_NEW_DOMAIN_NAME\");\n        request.AddParameter (\"smtp_password\", \"supasecret\");\n        request.Method = Method.POST;\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Bulk Email Validation Preview with Ruby\nDESCRIPTION: Ruby implementation for creating a bulk email validation preview list using RestClient. This function posts a file to the Mailgun API endpoint with basic authentication using the API key.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/create-bulk-preview.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef create_bulk_preview\n  RestClient.post(\"https://api:YOUR_API_KEY\" \\\n                  \"@api.mailgun.net/v4/address/validate/preview/LIST_NAME\",\n                  fields_hash.merge(:file => File.new('/path/to/file')))\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Inbox Placement Test with C# using RestSharp\nDESCRIPTION: This C# class demonstrates how to create an inbox placement test using the RestSharp library. It configures a REST client with basic authentication and sends the required parameters for creating the test to the Mailgun API.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/create-inbox-placement-test.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class CreateInboxPlacementTest\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (StartInboxPlacementTest ().Content.ToString ());\n    }\n\n    public static IRestResponse StartInboxPlacementTest ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v4\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.AddParameter (\"sending_domain\", \"YOUR_DOMAIN_NAME\", ParameterType.UrlSegment);\n        request.Resource = \"inbox/tests\";\n        request.AddParameter (\"from\", \"Sample User <user@domain.com>\");\n        request.AddParameter (\"subject\", \"testSubject\");\n        request.AddParameter (\"html\", \"<html>HTML version of the body</html>\");\n        request.Method = Method.POST;\n        return client.Execute (request);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Complaints with Mailgun API (JavaScript)\nDESCRIPTION: This snippet demonstrates the expected JSON response when viewing complaints for a domain. It includes pagination information and details about each complaint.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-suppressions.rst#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n200\n{\n  \"items\":\n    [\n      {\n        \"address\": \"alice@example.com\",\n        \"created_at\": \"Fri, 21 Oct 2011 11:02:55 GMT\"\n      },\n      ...\n    ],\n  \"paging\":\n    {\n      \"first\": <first page URL>,\n      \"next\": <next page URL>,\n      \"previous\": <previous page URL>,\n      \"last\": <last page URL>\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Template Messages in PHP\nDESCRIPTION: PHP implementation for sending template messages using the Mailgun PHP SDK. This example configures recipient variables as a JSON string to personalize the email content for multiple recipients.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-template-message.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Include the Autoloader (see \"Libraries\" for install instructions)\nrequire 'vendor/autoload.php';\nuse Mailgun\\Mailgun;\n\n# Instantiate the client.\n$mgClient = Mailgun::create('PRIVATE_API_KEY', 'https://API_HOSTNAME');\n$domain = \"YOUR_DOMAIN_NAME\";\n$params =  array(\n    'from'    => 'Excited User <YOU@YOUR_DOMAIN_NAME>',\n    'to'      => array('bob@example.com, alice@example.com'),\n    'subject' => 'Hey %recipient.first%',\n    'text'    => 'If you wish to unsubscribe, click http://example.com/unsubscribe/%recipient.id%',\n    'recipient-variables' => '{\"bob@example.com\": {\"first\":\"Bob\", \"id\":1},\n                               \"alice@example.com\": {\"first\":\"Alice\", \"id\": 2}}'\n);\n\n# Make the call to the client.\n$result = $mgClient->messages()->send($domain, $params);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Template with Java SDK\nDESCRIPTION: Shows how to fetch an active template version using Mailgun's Java SDK with MailgunTemplatesApi.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/template-get-active.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.MailgunTemplatesApi;\nimport com.mailgun.model.templates.TemplateWithVersionResponse;\n\n// ...\n\npublic TemplateWithVersionResponse getTemplate() {\n    MailgunTemplatesApi mailgunTemplatesApi = MailgunClient.config(API_KEY)\n        .createApi(MailgunTemplatesApi.class);\n\n    return mailgunTemplatesApi.getActiveTemplateVersionContent(YOUR_DOMAIN_NAME, TEMPLATE_NAME);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Domain to Mailgun using Go\nDESCRIPTION: This Go function shows how to add a new domain to Mailgun using the Mailgun Go SDK. It creates a new Mailgun client, sets up a context with a timeout, and sends a request to create a new domain with specific options.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/add-domain.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/mailgun/mailgun-go/v3\"\n    \"time\"\n)\n\nfunc AddDomain(domain, apiKey string) error {\n    mg := mailgun.NewMailgun(domain, apiKey)\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    return mg.CreateDomain(ctx, \"example.com\", &mailgun.CreateDomainOptions{\n        Password: \"super_secret\",\n        SpamAction: mailgun.SpamActionTag,\n        Wildcard:   false,\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Mailgun Template Version using Ruby RestClient\nDESCRIPTION: This Ruby function uses the RestClient library to update a template version. It sends a PUT request to the Mailgun API with the required parameters for template content, comment, and active status.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/version-update.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef update_version:\n  RestClient.put \"https://api:YOUR_API_KEY\"\\\n  \"@api.mailgun.net/v3/YOUR_DOMAIN_NAME/templates/TEMPLATE_NAME/versions/VERSION_TAG\",\n  :template => '{{fname}} {{lname}}',\n  :comment => 'Updated version comment',\n  :active => 'yes'\nend\n```\n\n----------------------------------------\n\nTITLE: Sending Untracked Emails with Mailgun in Go\nDESCRIPTION: This Go function demonstrates how to send an email with tracking disabled using the mailgun-go SDK. It creates a new message and explicitly disables tracking with the SetTracking method before sending.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-message-no-tracking.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/mailgun/mailgun-go/v3\"\n    \"time\"\n)\n\nfunc SendMessageNoTracking(domain, apiKey string) (string, error) {\n    mg := mailgun.NewMailgun(domain, apiKey)\n    m := mg.NewMessage(\n        \"Excited User <YOU@YOUR_DOMAIN_NAME>\",\n        \"Hello\",\n        \"Testing some Mailgun awesomeness!\",\n        \"foo@example.com\",\n    )\n    m.SetTracking(false)\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    _, id, err := mg.Send(ctx, m)\n    return id, err\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Email Template using Go\nDESCRIPTION: This Go function shows how to create a new email template using the Mailgun Go SDK. It creates a new Mailgun client and sends a POST request with the template name, version, and content.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/template-create.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc CreateTemplate(domain, apiKey string) error {\n    mg := mailgun.NewMailgun(domain, apiKey)\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    return mg.CreateTemplate(ctx, &mailgun.Template{\n        Name: \"template.name\",\n        Version: mailgun.TemplateVersion{\n            Template: `'<div class=\"entry\"> <h1>{{.title}}</h1> <div class=\"body\"> {{.body}} </div> </div>'`,\n            Engine:   mailgun.TemplateEngineGo,\n            Tag:      \"v1\",\n        },\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Mailgun Tags with Go\nDESCRIPTION: Uses the Mailgun Go SDK to list tags for a domain. Creates a Mailgun client with your domain and API key, then iterates through pages of tags with a context timeout of 30 seconds.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/tags/get-tags.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/mailgun/mailgun-go/v3\"\n    \"time\"\n)\n\nfunc ListTags(domain, apiKey string) ([]mailgun.Tag, error) {\n    mg := mailgun.NewMailgun(domain, apiKey)\n    it := mg.ListTags(nil)\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    var page, result []mailgun.Tag\n    for it.Next(ctx, &page) {\n        result = append(result, page...)\n    }\n\n    if it.Err() != nil {\n        return nil, it.Err()\n    }\n    return result, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Resending Messages with Java Mailgun SDK\nDESCRIPTION: Shows how to resend messages using the Mailgun Java SDK, utilizing the MailgunStoreMessagesApi class to send to a single recipient.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/resend-simple-message.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.MailgunStoreMessagesApi;\nimport com.mailgun.client.MailgunClient;\nimport com.mailgun.model.message.MessageResponse;\n\n// ...\n\npublic MessageResponse resendSimpleMessage() {\n    MailgunStoreMessagesApi mailgunStoreMessagesApi = MailgunClient.config(MESSAGE_STORAGE_URL, API_KEY)\n            .createApiWithAbsoluteUrl(MailgunStoreMessagesApi.class);\n\n    return mailgunStoreMessagesApi.resendMessage(\"user@samples.org\");\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Inline Image Email with cURL\nDESCRIPTION: Example of sending an email with an inline image using cURL command. Uses basic authentication with API key and sends a multipart form request including HTML content and an image file.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-inline-image.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' \\\n    https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/messages \\\n    -F from='Excited User <YOU@YOUR_DOMAIN_NAME>' \\\n    -F to='alice@example.com' \\\n    -F subject='Hello' \\\n    -F text='Testing some Mailgun awesomness!' \\\n    --form-string html='<html>Inline image here: <img src=\"cid:cartman.jpg\"></html>' \\\n    -F inline=@files/cartman.jpg\n```\n\n----------------------------------------\n\nTITLE: Listing Mailgun Templates using JavaScript SDK\nDESCRIPTION: This JavaScript code uses the Mailgun.js SDK to list templates. It creates a Mailgun client and uses the domainTemplates.list method to retrieve templates with a limit.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/template-get-all.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n(async () => {\n  try {\n    const domainTemplates = await client.domains.domainTemplates.list(DOMAIN, {\n      limit: 5\n    });\n    console.log('domainTemplates', domainTemplates);\n  } catch (error) {\n    console.error(error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Mailgun Tags with Ruby\nDESCRIPTION: Uses Ruby's RestClient to fetch tags from the Mailgun API. Constructs a URL with query parameters including a limit of 10 and makes a GET request with authentication using your API key.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/tags/get-tags.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef get_stats\n  url_params = {}\n  url_params[:limit] = 10\n  query_string = url_params.collect {|k, v| \"#{k.to_s}=#{CGI::escape(v.to_s)}\"}.join(\"&\")\n  RestClient.get \"https://api:YOUR_API_KEY\"\\\"@api.mailgun.net/v3/YOUR_DOMAIN_NAME/tags?#{query_string}\"\nend\n```\n\n----------------------------------------\n\nTITLE: Adding a Domain to Mailgun using Java\nDESCRIPTION: This Java code snippet shows how to add a new domain to Mailgun using the Mailgun Java SDK. It creates a DomainRequest object with various configuration options and sends it to the API.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/add-domain.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.MailgunDomainsApi;\nimport com.mailgun.enums.SpamAction;\nimport com.mailgun.enums.WebScheme;\nimport com.mailgun.model.domains.DomainRequest;\nimport com.mailgun.model.domains.DomainResponse;\n\nimport java.util.List;\n\n// ...\n\npublic DomainResponse addDomain() {\n    MailgunDomainsApi mailgunDomainsApi = MailgunClient.config(API_KEY)\n        .createApi(MailgunDomainsApi.class);\n\n    DomainRequest request = DomainRequest.builder()\n        .name(YOUR_NEW_DOMAIN_NAME)\n        .spamAction(SpamAction.BLOCK)\n        .wildcard(true)\n        .forceDkimAuthority(false)\n        .dkimKeySize(1024)\n        .ips(List.of(IP_1, IP_2))\n        .webScheme(WebScheme.HTTPS)\n        .build();\n\n    return mailgunDomainsApi.createNewDomain(request);\n}\n```\n\n----------------------------------------\n\nTITLE: Printing Failed and Rejected Events from Mailgun API using Go\nDESCRIPTION: This Go function uses the Mailgun Go SDK to retrieve and print failed and rejected events. It demonstrates how to create an event iterator, use context for timeout, and handle different event types.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/events-failure.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"fmt\"\n    \"github.com/mailgun/mailgun-go/v3\"\n    \"github.com/mailgun/mailgun-go/v3/events\"\n    \"time\"\n)\n\nfunc PrintFailedEvents(domain, apiKey string) error {\n    mg := mailgun.NewMailgun(domain, apiKey)\n\n    // Create an iterator\n    it := mg.ListEvents(&mailgun.ListEventOptions{\n        Filter: map[string]string{\n            \"event\": \"rejected OR failed\",\n        },\n    })\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    // Iterate through all the pages of events\n    var page []mailgun.Event\n    for it.Next(ctx, &page) {\n        for _, event := range page {\n            switch e := event.(type){\n            case *events.Failed:\n                fmt.Printf(\"Failed Reason: %s\", e.Reason)\n            case *events.Rejected:\n                fmt.Printf(\"Rejected Reason: %s\", e.Reject.Reason)\n            }\n        }\n    }\n\n    // Did iteration end because of an error?\n    if it.Err() != nil {\n        return it.Err()\n    }\n    return nil\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Stored Message Content with Python\nDESCRIPTION: This Python script retrieves a stored message from Mailgun using its storage key. It saves the message as an .eml file and opens it in Mozilla Thunderbird for analysis.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-events.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"View a message using its Mailgun storage key.\"\"\"\nimport os\nimport sys\n\nimport requests\n\nif len(sys.argv) != 2:\n  print \"Usage: retrieve.py message_key\"\n  sys.exit(1)\n\napi_key = YOUR_API_KEY\n\n# output filename\nfilename = \"message.eml\"\n\n# url for retrieval\ndomain = \"mailgun.com\"\nkey = sys.argv[1]\nurl = \"https://api.mailgun.net/v3/domains/%s/messages/%s\"\nurl = url % (domain, key)\n\nheaders = {\"Accept\": \"message/rfc2822\"}\n\n# request to API\nr = requests.get(url, auth=(\"api\", api_key), headers=headers)\n\nif r.status_code == 200:\n  with open(filename, \"w\") as message:\n    message.write(r.json()[\"body-mime\"])\n  os.system(\"thunderbird -file %s\" % filename)\nelse:\n  print \"Oops! Something went wrong: %s\" % r.content\n```\n\n----------------------------------------\n\nTITLE: Python Mailgun Events API Integration\nDESCRIPTION: Simple Python function using requests library to fetch events from Mailgun API with basic authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/events-traversal.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef get_logs():\n    return requests.get(\n        \"https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/events\",\n        auth=(\"api\", \"YOUR_API_KEY\"))\n```\n\n----------------------------------------\n\nTITLE: Sending Email via SMTP using Java\nDESCRIPTION: Java implementation for sending emails through Mailgun SMTP using the javax.mail library. Demonstrates SMTP authentication and basic email composition.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/smtp-send-simple-message.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport java.io.*;\nimport java.net.InetAddress;\nimport java.util.Properties;\nimport java.util.Date;\nimport javax.mail.*;\nimport javax.mail.internet.*;\nimport com.sun.mail.smtp.*;\n\npublic class MGSendSimpleSMTP {\n\n    public static void main(String args[]) throws Exception {\n\n        Properties props = System.getProperties();\n        props.put(\"mail.smtps.host\", \"smtp.mailgun.org\");\n        props.put(\"mail.smtps.auth\", \"true\");\n\n        Session session = Session.getInstance(props, null);\n        Message msg = new MimeMessage(session);\n        msg.setFrom(new InternetAddress(\"YOU@YOUR_DOMAIN_NAME\"));\n\n        InternetAddress[] addrs = InternetAddress.parse(\"bar@example.com\", false));\n        msg.setRecipients(Message.RecipientType.TO, addrs)\n\n        msg.setSubject(\"Hello\");\n        msg.setText(\"Testing some Mailgun awesomness\");\n        msg.setSentDate(new Date());\n\n        SMTPTransport t =\n            (SMTPTransport) session.getTransport(\"smtps\");\n        t.connect(\"smtp.mailgun.org\", \"postmaster@YOUR_DOMAIN_NAME\", \"YOUR_SMTP_PASSWORD\");\n        t.sendMessage(msg, msg.getAllRecipients());\n\n        System.out.println(\"Response: \" + t.getLastServerResponse());\n\n        t.close();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Python Implementation using Requests\nDESCRIPTION: Simple Python function using the requests library to fetch inbox placement results with basic authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-results-attribute.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef get_results_attribute():\n    return requests.get(\n        \"https://api.mailgun.net/v4/inbox/results/a/ATTRIBUTE\",\n        auth=('api', 'YOUR_API_KEY'))\n```\n\n----------------------------------------\n\nTITLE: Retrieving Mailing List Members using Python\nDESCRIPTION: Uses Python requests library to make API call to Mailgun for retrieving mailing list members.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-list-members.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef list_members():\n    return requests.get(\n        \"https://api.mailgun.net/v3/lists/LIST@YOUR_DOMAIN_NAME/members/pages\",\n        auth=('api', 'YOUR_API_KEY'))\n```\n\n----------------------------------------\n\nTITLE: Creating Email Templates with Mailgun API in Python\nDESCRIPTION: This Python function demonstrates how to create a template in Mailgun using the requests library. It sends a POST request with template details including name, description, content, engine type, comment, and headers to Mailgun's API endpoint.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/template-create-version.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef store_template():\n    return requests.post(\n        \"https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/templates\",\n        auth=(\"api\", \"YOUR_API_KEY\"),\n        data={'name': 'template.name',\n              'description': 'template description',\n              'template': '{{fname}} {{lname}}',\n              'engine': 'handlebars',\n              'comment': 'version comment'},\n              'headers': '{\"Subject\": \"{{subject}}\"}'\n```\n\n----------------------------------------\n\nTITLE: Sending Email via SMTP in RST\nDESCRIPTION: This code snippet shows how to send a simple email message using SMTP with Mailgun. It references SMTP credentials that can be found in the user's domains tab.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/quickstart-sending.rst#2025-04-21_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: samples/smtp-send-simple-message.rst\n```\n\n----------------------------------------\n\nTITLE: Creating Mailgun Domain using Ruby\nDESCRIPTION: Creates a new domain using Ruby RestClient. Implements basic authentication and allows setting domain name and SMTP password.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/create-domain.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef create_domain\n  data = {}\n  data[:name] = \"YOUR_DOMAIN_NAME\"\n  data[:smtp_password] = \"supasecret\"\n  RestClient.post \"https://api:YOUR_API_KEY\"\\\n  \"@api.mailgun.net/v3/domains\", data\nend\n```\n\n----------------------------------------\n\nTITLE: Updating Mailgun Template Version using Java SDK\nDESCRIPTION: This Java code demonstrates how to update a template version using the Mailgun Java SDK. It creates a MailgunTemplatesApi instance, builds an UpdateTemplateVersionRequest, and calls the updateSpecificTemplateVersion method.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/version-update.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.MailgunTemplatesApi;\nimport com.mailgun.model.templates.TemplateVersionResponse;\nimport com.mailgun.model.templates.UpdateTemplateVersionRequest;\n\n// ...\n\npublic TemplateVersionResponse updateTemplateVersion() {\n    MailgunTemplatesApi mailgunTemplatesApi = MailgunClient.config(API_KEY)\n        .createApi(MailgunTemplatesApi.class);\n\n    UpdateTemplateVersionRequest request = UpdateTemplateVersionRequest.builder()\n        .template(\"{{fname}} {{lname}}\")\n        .comment(\"Updated version comment\")\n        .active(true)\n        .build();\n\n    return mailgunTemplatesApi.updateSpecificTemplateVersion(YOUR_DOMAIN_NAME, TEMPLATE_NAME, VERSION_TAG, request);\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Domains with Go Mailgun Client\nDESCRIPTION: This Go function demonstrates how to use the Mailgun Go client to retrieve a list of domains. It shows how to initialize the client, set up a context with timeout, and iterate through the results.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-domains.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/mailgun/mailgun-go/v3\"\n    \"time\"\n)\n\nfunc ListDomains(domain, apiKey string) ([]mailgun.Domain, error) {\n    mg := mailgun.NewMailgun(domain, apiKey)\n    it := mg.ListDomains(nil)\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    var page, result []mailgun.Domain\n    for it.Next(ctx, &page) {\n        result = append(result, page...)\n    }\n\n    if it.Err() != nil {\n        return nil, it.Err()\n    }\n    return result, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Mailgun Events with Ruby\nDESCRIPTION: This Ruby function shows how to use the RestClient library to query the Mailgun Events API. It sets up the API endpoint, authentication, and query parameters for filtering events.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/events-date-time-recipient.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef get_logs\n  RestClient.get \"https://api:YOUR_API_KEY\"\\\n  \"@api.mailgun.net/v3/YOUR_DOMAIN_NAME/events\",\n   :params => {\n    :'begin'       => 'Fri, 3 May 2013 09:00:00 -0000',\n    :'ascending'   => 'yes',\n    :'limit'       =>  25,\n    :'pretty'      => 'yes',\n    :'recipient' => 'joe@example.com'\n   }\nend\n```\n\n----------------------------------------\n\nTITLE: Sending Inline Image Email with C#\nDESCRIPTION: C# implementation using RestSharp to send an email with inline image. Shows how to configure the REST client with authentication and construct the request with file attachment.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-inline-image.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class SendInlineImageChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (SendInlineImage ().Content.ToString ());\n    }\n\n    public static IRestResponse SendInlineImage ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.AddParameter (\"domain\", \"YOUR_DOMAIN_NAME\", ParameterType.UrlSegment);\n        request.Resource = \"{domain}/messages\";\n        request.AddParameter (\"from\", \"Excited User <YOU@YOUR_DOMAIN_NAME>\");\n        request.AddParameter (\"to\", \"baz@example.com\");\n        request.AddParameter (\"subject\", \"Hello\");\n        request.AddParameter (\"text\", \"Testing some Mailgun awesomness!\");\n        request.AddParameter (\"html\",\n                              \"<html>Inline image here: <img src=\\\"cid:test.jpg\\\"></html>\");\n        request.AddFile (\"inline\", \"files/test.jpg\");\n        request.Method = Method.POST;\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Bounce using C# RestSharp\nDESCRIPTION: C# implementation using RestSharp client library for making authenticated API requests to add bounce records.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/add-bounce.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class AddBounceChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (AddBounce ().Content.ToString ());\n    }\n\n    public static IRestResponse AddBounce ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.Resource = \"{domain}/bounces\";\n        request.AddParameter (\"domain\", \"YOUR_DOMAIN_NAME\", ParameterType.UrlSegment);\n        request.AddParameter (\"address\", \"bob@example.com\");\n        request.Method = Method.POST;\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Creating SMTP Credentials in Mailgun\nDESCRIPTION: Shows how to programmatically create new SMTP credentials which can be used to send mail through Mailgun using the SMTP protocol.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/user_manual.rst#2025-04-21_snippet_42\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: samples/create-credentials.rst\n```\n\n----------------------------------------\n\nTITLE: Creating Mailing List using Python\nDESCRIPTION: Simple Python function that creates a mailing list using requests library to send a POST request to Mailgun's API.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/create-mailing-list.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef create_mailing_list():\n    return requests.post(\n        \"https://api.mailgun.net/v3/lists\",\n        auth=('api', 'YOUR_API_KEY'),\n        data={'address': 'LIST@YOUR_DOMAIN_NAME',\n              'description': \"Mailgun developers list\"})\n```\n\n----------------------------------------\n\nTITLE: Creating Email Template using Python\nDESCRIPTION: This Python function shows how to create a new email template using the requests library. It sends a POST request to the Mailgun API with the template name and description.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/template-create.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef store_template():\n    return requests.post(\n        \"https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/templates\",\n        auth=(\"api\", \"YOUR_API_KEY\"),\n        data={'name': 'template.name',\n              'description': 'template description'})\n```\n\n----------------------------------------\n\nTITLE: Sending Tagged Messages with Mailgun in Python\nDESCRIPTION: This Python function sends an email with tags using the Mailgun API. It makes a POST request to the API endpoint with authentication, message content, and an array of tags to categorize the email.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-tagged-message.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef send_tagged_message():\n    return requests.post(\n        \"https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/messages\",\n        auth=(\"api\", \"YOUR_API_KEY\"),\n        data={\"from\": \"Excited User <YOU@YOUR_DOMAIN_NAME>\",\n              \"to\": \"bar@example.com\",\n              \"subject\": \"Hello\",\n              \"text\": \"Testing some Mailgun awesomness!\",\n              \"o:tag\": [\"September newsletter\", \"newsletters\"]})\n```\n\n----------------------------------------\n\nTITLE: Validating Email Address with Mailgun API in PHP using cURL\nDESCRIPTION: A PHP function that uses cURL to validate an email address against Mailgun's Address Validation API v4. The PHP SDK doesn't currently support the v4 validation endpoint, so this implementation uses direct cURL calls with basic authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/post-validate.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Currently, the PHP SDK does not support the v4 Validations endpoint.\n# Consider using the following php curl function.\nfunction post_validate() {\n  $params = array(\n      \"address\" => \"bob@example.com\"\n  );\n  $ch = curl_init();\n\n  curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);\n  curl_setopt($ch, CURLOPT_USERPWD, 'api:PRIVATE_API_KEY');\n  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n\n  curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');\n  curl_setopt($ch, CURLOPT_POSTFIELDS, $params);\n  curl_setopt($ch, CURLOPT_URL, 'https://api.mailgun.net/v4/address/validate');\n  $result = curl_exec($ch);\n  curl_close($ch);\n\n  return $result;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating SMTP Credentials using C#\nDESCRIPTION: This C# class demonstrates how to update SMTP credentials using the RestSharp library. It creates a RestClient instance, sets up the request with authentication, and sends a PUT request to the Mailgun API with the domain name, username, and new password.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/change-pwd-credentials.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class ChangePwdCredentialsChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (ChangeCredentialPassword ().Content.ToString ());\n    }\n\n    public static IRestResponse ChangeCredentialPassword ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.AddParameter (\"domain\", \"YOUR_DOMAIN_NAME\", ParameterType.UrlSegment);\n        request.Resource = \"domains/{domain}/credentials/{username}\";\n        request.AddUrlSegment (\"username\", \"alice\");\n        request.AddParameter (\"password\", \"supersecret\");\n        request.Method = Method.PUT;\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Tag Statistics by Country using Mailgun.js\nDESCRIPTION: Uses the Mailgun JavaScript client library to fetch tag statistics by country. Demonstrates async/await pattern with error handling and requires domain name, API key, and tag name configuration.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/tags/tag-countries-aggregation.rst#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n (async () => {\n    try {\n      const countriesAggregation = await client.domains.domainTags.countries(\n          DOMAIN,\n          'YOUR_TAG_NAME'\n      );\n      console.log('countriesAggregation', countriesAggregation);\n    } catch (error) {\n      console.error(error);\n    }\n })();\n```\n\n----------------------------------------\n\nTITLE: Removing Mailing List Member with JavaScript\nDESCRIPTION: This JavaScript code removes a member from a Mailgun mailing list using the mailgun.js library. It creates a Mailgun client with your API key and calls the destroyMember method within an async function.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/remove-list-member.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n(async () => {\n  try {\n    const deletedMember = await client.lists.members.destroyMember(DOMAIN, 'bob@example.com');\n    console.log('deletedMember', deletedMember);\n  } catch (error) {\n    console.error(error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Creating Email Templates with Mailgun API in PHP\nDESCRIPTION: This PHP function creates a template in Mailgun using a custom cURL implementation as the PHP SDK does not support the Templates endpoint. It sets up template parameters and sends a POST request to the Mailgun API.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/template-create-version.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Currently, the PHP SDK does not support the Templates endpoint.\n# Consider using the following php curl function.\nfunction create_template_version() {\n  $params = array(\n    'name' => 'template.name',\n    'description' => 'template description',\n    'template' => '{{fname}} {{lname}}',\n    'engine' => 'handlebars',\n    'comment' => 'version comment',\n    'headers' => '{\"Subject\": \"{{subject}}\"}'  \n  );\n\n  $ch = curl_init();\n\n  curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);\n  curl_setopt($ch, CURLOPT_USERPWD, 'api:PRIVATE_API_KEY');\n  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n\n  curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');\n  curl_setopt($ch, CURLOPT_URL, 'https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/templates');\n  curl_setopt($ch, CURLOPT_POSTFIELDS, $params);\n\n  $result = curl_exec($ch);\n  curl_close($ch);\n\n  return $result;\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Email Address with Mailgun API using cURL\nDESCRIPTION: This snippet demonstrates how to validate an email address using the Mailgun API with a cURL command. It sends a GET request to the validation endpoint with the email address as a parameter.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-validate-deprecated.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -G --user 'api:pubkey-5ogiflzbnjrljiky49qxsiozqef5jxp7' -G \\\n    https://api.mailgun.net/v3/address/validate \\\n    --data-urlencode address='foo@mailgun.net'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Template Version with C# RestSharp\nDESCRIPTION: Implements a method to retrieve a template version using the RestSharp library in C#. Creates a RestClient with basic authentication and constructs a request with URL segments for domain, template name, and version tag.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/version-get.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class GetTemplateVersionChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (GetTemplateVersion ().Content.ToString ());\n    }\n\n    public static IRestResponse GetTemplateVersion ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.Resource = \"/{domain}/templates/{name}/versions/{tag}\";\n        request.AddParameter (\"domain\", \"YOUR_DOMAIN_NAME\", ParameterType.UrlSegment);\n        request.AddParameter (\"name\", \"TEMPLATE_NAME\", ParameterType.UrlSegment);\n        request.AddParameter (\"tag\", \"VERSION_TAG\", ParameterType.UrlSegment);\n\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Domain Retrieval with Mailgun.js\nDESCRIPTION: JavaScript/Node.js implementation using the official Mailgun.js library with async/await pattern\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-domain.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n(async () => {\n  try {\n    const domain = await client.domains.get(DOMAIN);\n    console.log('domain', domain);\n  } catch (error) {\n    console.error(error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Creating Mailgun Template using Python\nDESCRIPTION: Python implementation for creating a template using the requests library. Sends a POST request with template content, name, and description.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/create-template-usage.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef add_template():\n    return requests.post(\n        \"https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/templates\",\n        auth=(\"api\", \"YOUR_API_KEY\"),\n        data={'template': '<div class=\"entry\"> <h1>{{title}}</h1> <div class=\"body\"> {{body}} </div> </div>',\n              'name': 'Test template',\n              'description': 'Sample template'})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Mailgun Routes using Go\nDESCRIPTION: This Go function demonstrates how to retrieve Mailgun routes using the Mailgun Go SDK. It creates a Mailgun client, initializes a route iterator, and retrieves all routes with pagination.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-routes.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/mailgun/mailgun-go/v3\"\n    \"time\"\n)\n\nfunc ListRoutes(domain, apiKey string) ([]mailgun.Route, error) {\n    mg := mailgun.NewMailgun(domain, apiKey)\n    it := mg.ListRoutes(nil)\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    var page, result []mailgun.Route\n    for it.Next(ctx, &page) {\n        result = append(result, page...)\n    }\n\n    if it.Err() != nil {\n        return nil, it.Err()\n    }\n    return result, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Mailgun Webhooks with PHP\nDESCRIPTION: This PHP example shows how to create a webhook for the 'delivered' event using the Mailgun PHP SDK. It registers a single URL endpoint to receive notifications when emails are delivered.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/add-webhook.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Include the Autoloader (see \"Libraries\" for install instructions)\nrequire 'vendor/autoload.php';\nuse Mailgun\\Mailgun;\n\n# Instantiate the client.\n$mgClient = Mailgun::create('PRIVATE_API_KEY', 'https://API_HOSTNAME');\n$domain   = 'YOUR_DOMAIN_NAME';\n$webhook  = 'delivered';\n$destination_url = 'https://my.webhook.url/delivered'\n\n# Issue the call to the client.\n$result = $mgClient->webhooks()->create($domain, $webhook, $destination_url);\n```\n\n----------------------------------------\n\nTITLE: C# Mailgun Events API Integration\nDESCRIPTION: C# implementation using RestSharp library to fetch events. Includes basic authentication and proper request configuration.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/events-traversal.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class EventsTraversalChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (EventsTraversal ().Content.ToString ());\n    }\n\n    public static IRestResponse EventsTraversal ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.AddParameter (\"domain\", \"YOUR_DOMAIN_NAME\", ParameterType.UrlSegment);\n        request.Resource = \"{domain}/events\";\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Email Templates with Mailgun API in Ruby\nDESCRIPTION: This Ruby method creates a Mailgun template using the RestClient library. It sends a POST request with template parameters including name, description, template content, engine, comment, and headers to the Mailgun API endpoint.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/template-create-version.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef store_template\n  RestClient.post \"https://api:YOUR_API_KEY\"\\\n  \"@api.mailgun.net/v3/YOUR_DOMAIN_NAME/templates\",\n  :name => 'template.name',\n  :description => 'template description',\n  :template => '{{fname}} {{lname}}',\n  :engine => 'handlebars',\n  :comment => 'version comment',\n  :headers => '{\"Subject\": \"{{subject}}\"}'  \nend\n```\n\n----------------------------------------\n\nTITLE: Adding Template Versions with Mailgun API in Go\nDESCRIPTION: This Go function demonstrates how to add a new version to an existing template using the Mailgun Go SDK. It creates a TemplateVersion object with template content, engine type, tag, and active status, then submits it to the API.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/template-create-version.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc AddTemplateVersion(domain, apiKey string) error {\n    mg := mailgun.NewMailgun(domain, apiKey)\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    return mg.AddTemplateVersion(ctx, \"template.name\", &mailgun.TemplateVersion{\n        Template: `'<div class=\"entry\"> <h1>{{.title}}</h1> <div class=\"body\"> {{.body}} </div> </div>'`,\n        Engine:   mailgun.TemplateEngineGo,\n        Tag:      \"v2\",\n        Active:   true,\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Inline Image Email with Python\nDESCRIPTION: Python implementation for sending an email with inline image using requests library. Shows how to construct a POST request with multipart form data including HTML content and file attachment.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-inline-image.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef send_inline_image():\n    return requests.post(\n        \"https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/messages\",\n        auth=(\"api\", \"YOUR_API_KEY\"),\n        files=[(\"inline\", open(\"files/test.jpg\"))],\n        data={\"from\": \"Excited User <YOU@YOUR_DOMAIN_NAME>\",\n              \"to\": \"bar@example.com\",\n              \"subject\": \"Hello\",\n              \"text\": \"Testing some Mailgun awesomness!\",\n              \"html\": '<html>Inline image here: <img src=\"cid:test.jpg\"></html>'})\n```\n\n----------------------------------------\n\nTITLE: Listing Mailing Lists with Python\nDESCRIPTION: This Python function uses the requests library to make a GET request to the Mailgun API for retrieving mailing lists. It requires the API key for authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-mailing-lists.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef list_members():\n    return requests.get(\n        \"https://api.mailgun.net/v3/lists/pages\",\n        auth=('api', 'YOUR_API_KEY'))\n```\n\n----------------------------------------\n\nTITLE: Retrieving Mailgun Routes using JavaScript\nDESCRIPTION: This JavaScript code snippet shows how to retrieve Mailgun routes using the Mailgun.js library. It creates a Mailgun client, authenticates with an API key, and makes an asynchronous request to list routes with pagination parameters.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-routes.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n(async () => {\n  try {\n    const list = await client.routes.list({\"skip\": 0, \"limit\": 5});\n    console.log('list', list);\n  } catch (error) {\n    console.error(error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Complaint Data using C# RestSharp\nDESCRIPTION: This C# class demonstrates how to fetch complaint information using the RestSharp library. It includes a Main method for execution and a separate method for making the API call.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-complaint.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class GetComplaintChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (GetComplaint ().Content.ToString ());\n    }\n\n    public static IRestResponse GetComplaint ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.AddParameter (\"domain\", \"YOUR_DOMAIN_NAME\", ParameterType.UrlSegment);\n        request.Resource = \"{domain}/complaints/baz@example.com\";\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Email with TLS Options using Python and Mailgun API\nDESCRIPTION: Python function to send an email via Mailgun API with TLS security options. Uses the requests library to make a POST request to the Mailgun API with authentication, message content, and TLS configuration.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-connection.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef send_require_tls():\n    return requests.post(\n        \"https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/messages\",\n        auth=(\"api\", \"YOUR_API_KEY\"),\n        data={\"from\": \"Excited User <YOU@YOUR_DOMAIN_NAME>\",\n              \"to\": [\"bar@example.com\", \"baz@example.com\"],\n              \"subject\": \"Hello\",\n              \"text\": \"Testing some Mailgun awesomness!\",\n              \"o:require-tls\": True,\n              \"o:skip-verification\": False})\n```\n\n----------------------------------------\n\nTITLE: Sending Untracked Emails with Mailgun in C#\nDESCRIPTION: This C# code shows how to send an email with tracking disabled using RestSharp to interact with the Mailgun API. It creates a RestClient with authentication, sets message parameters including 'o:tracking' to false, and executes the request.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-message-no-tracking.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class SendMessageNoTrackingChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (SendMessageNoTracking ().Content.ToString ());\n    }\n\n    public static IRestResponse SendMessageNoTracking ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.AddParameter (\"domain\", \"YOUR_DOMAIN_NAME\", ParameterType.UrlSegment);\n        request.Resource = \"{domain}/messages\";\n        request.AddParameter (\"from\", \"Excited User <YOU@YOUR_DOMAIN_NAME>\");\n        request.AddParameter (\"to\", \"bar@example.com\");\n        request.AddParameter (\"to\", \"baz@example.com\");\n        request.AddParameter (\"subject\", \"Hello\");\n        request.AddParameter (\"text\", \"Testing some Mailgun awesomness!\");\n        request.AddParameter (\"o:tracking\", false);\n        request.Method = Method.POST;\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Mailgun Webhooks with C#\nDESCRIPTION: This C# class demonstrates how to create a webhook for the 'clicked' event using RestSharp. It configures multiple URL endpoints to receive notifications when emails are clicked.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/add-webhook.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class AddWebhookChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (AddWebhook ().Content.ToString ());\n    }\n\n    public static IRestResponse AddWebhook ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3/\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.Resource = \"domains/YOUR_DOMAIN_NAME/webhooks\";\n        request.AddParameter (\"id\", \"clicked\");\n        request.AddParameter (\"url\", \"https://your_domain.com/v1/clicked\")\n        request.AddParameter (\"url\", \"https://your_domain.com/v2/clicked\")\n        request.AddParameter (\"url\", \"https://your_partner_domain.com/v1/clicked\")\n        request.Method = Method.POST;\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Python Implementation for Mailgun Bulk Preview Promotion\nDESCRIPTION: Python implementation using the requests library to promote bulk preview validation with basic authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/put-bulk-preview.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef promote_bulk_preview():\n    return requests.put(\n        \"https://api.mailgun.net/v4/address/validate/preview/LIST_NAME\",\n        auth=('api', 'YOUR_API_KEY'))\n```\n\n----------------------------------------\n\nTITLE: Sending MIME Message with JavaScript\nDESCRIPTION: This JavaScript code uses the mailgun.js library to send a MIME message. It creates a mail composer, compiles the message, and sends it using the Mailgun client.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-mime-message.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\nconst API_KEY = 'YOUR_API_KEY';\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\nimport MailComposer from 'nodemailer/lib/mail-composer';\n\nconst mailgun = new Mailgun(formData);\nconst mg = mailgun.client({ username: 'api', key: API_KEY });\n\n(async () => {\n  const mailOptions = {\n    from: 'YOU@YOUR_DOMAIN_NAME',\n    to: 'bob@example.com',\n    subject: 'Hello',\n    text: 'Testing some Mailgun awesomeness!'\n  };\n  try {\n    const mail = new MailComposer(mailOptions);\n    const compiledMessage = await mail.compile().build();\n\n    const res = await mg.messages.create(DOMAIN, {\n      to: 'bob@example.com',\n      message: compiledMessage\n    });\n    console.log(res);\n  } catch (error) {\n    console.error(error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Ruby Mailgun Events API Integration\nDESCRIPTION: Ruby implementation using RestClient to fetch events from Mailgun API endpoint.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/events-traversal.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef get_logs\n  RestClient.get \"https://api:YOUR_API_KEY\"\\\n  \"@api.mailgun.net/v3/YOUR_DOMAIN_NAME/events\"}\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Bulk Validation Job in Java\nDESCRIPTION: Uses the Mailgun Java SDK to create a bulk email validation job. The code imports required classes, initializes the API client with authentication, and creates a request object that includes the file to be validated.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/create-bulk-validation.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v4.MailgunEmailVerificationApi;\nimport com.mailgun.client.MailgunClient;\nimport com.mailgun.model.verification.BulkVerificationCreatingResponse;\nimport com.mailgun.model.verification.BulkVerificationStatusRequest;\nimport java.io.File;\n\n// ...\n\npublic BulkVerificationCreatingResponse createBulkVerificationJob() {\n    MailgunEmailVerificationApi mailgunEmailVerificationApi = MailgunClient.config(API_KEY)\n            .createApi(MailgunEmailVerificationApi.class);\n\n    BulkVerificationStatusRequest request = BulkVerificationStatusRequest.builder()\n            .file(new File(\"/path/to/file\"))\n            .build();\n\n    return mailgunEmailVerificationApi.createBulkVerificationJob(LIST_NAME, request);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Template Version with Mailgun Java SDK\nDESCRIPTION: This Java code uses the Mailgun Java SDK to create a new template version. It builds a TemplateVersionRequest object with the necessary parameters and sends it to the Mailgun API using the MailgunTemplatesApi class.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/version-create.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.MailgunTemplatesApi;\nimport com.mailgun.model.templates.TemplateVersionRequest;\nimport com.mailgun.model.templates.TemplateWithMessageResponse;\n\n// ...\n\npublic TemplateWithMessageResponse storeTemplateVersion() {\n    MailgunTemplatesApi mailgunTemplatesApi = MailgunClient.config(API_KEY)\n        .createApi(MailgunTemplatesApi.class);\n\n    TemplateVersionRequest request = TemplateVersionRequest.builder()\n        .template(TEMPLATE_2)\n        .tag(\"v1\")\n        .template(\"{{fname}} {{lname}}\")\n        .engine(\"handlebars\")\n        .comment(\"comment\")\n        .active(true)\n        .build();\n\n    return mailgunTemplatesApi.createNewTemplateVersion(YOUR_DOMAIN_NAME, TEMPLATE_NAME, request);\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Bounce Information using Mailgun Java SDK\nDESCRIPTION: This Java code snippet uses the Mailgun Java SDK to retrieve bounce information for a specific email address. It requires the API key and domain name to be configured, and uses the MailgunSuppressionBouncesApi class.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-bounce.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.suppression.MailgunSuppressionBouncesApi;\nimport com.mailgun.model.suppression.bounces.BouncesItem;\n\n// ...\n\npublic BouncesItem getBounce() {\n    MailgunSuppressionBouncesApi suppressionBouncesApi = MailgunClient.config(API_KEY)\n        .createApi(MailgunSuppressionBouncesApi.class);\n\n    return suppressionBouncesApi.getBounce(YOUR_DOMAIN_NAME, \"foo@bar.com\");\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Mailgun Webhooks with JavaScript\nDESCRIPTION: This JavaScript example uses the mailgun.js library to create a webhook for the 'clicked' event. It registers a single URL endpoint to receive notifications when emails are clicked.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/add-webhook.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n(async () => {\n  try {\n    // clicked or one of the Supported webhooks\n    const createdWebhook = await client.webhooks.create(DOMAIN, 'clicked', 'https://your_domain.com/v1/clicked');\n    console.log('createdWebhook', createdWebhook);\n  } catch (error) {\n      console.error(error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Dedicated IPs using Go\nDESCRIPTION: Uses Mailgun Go SDK to fetch dedicated IPs. Implements context for timeout handling and requires mailgun-go library.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-ips.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/mailgun/mailgun-go/v3\"\n    \"time\"\n)\n\nfunc ListIPS(domain, apiKey string) ([]mailgun.IPAddress, error) {\n    mg := mailgun.NewMailgun(domain, apiKey)\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    // Pass 'true' to only return dedicated ips\n    return mg.ListIPS(ctx, true)\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Email Templates with C#\nDESCRIPTION: Demonstrates how to use RestSharp in C# to fetch a template from the Mailgun API. The code sets up HTTP Basic Authentication and defines request parameters for the template resource.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/template-get.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class GetTemplatesChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (GetTemplate ().Content.ToString ());\n    }\n\n    public static IRestResponse GetTemplate ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.Resource = \"/{domain}/templates/{name}\";\n        request.AddUrlSegment (\"domain\", \"YOUR_DOMAIN_NAME\");\n        request.AddUrlSegment (\"name\", \"TEMPLATE_NAME\");\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Mailing List using Go\nDESCRIPTION: Go function using Mailgun's official Go SDK to create a mailing list with context handling and timeout configuration.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/create-mailing-list.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/mailgun/mailgun-go/v3\"\n    \"time\"\n)\n\nfunc CreateMailingList(domain, apiKey string) (mailgun.MailingList, error) {\n    mg := mailgun.NewMailgun(domain, apiKey)\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    return mg.CreateMailingList(ctx, mailgun.MailingList{\n        Address:     \"list@example.com\",\n        Name:        \"dev\",\n        Description: \"Mailgun developers list.\",\n        AccessLevel: mailgun.AccessLevelMembers,\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Scheduled Messages with Mailgun API using JavaScript\nDESCRIPTION: This JavaScript code demonstrates sending a scheduled email using the mailgun.js client library. It initializes the Mailgun client, prepares message data including the o:deliverytime parameter, and sends the message with a Promise-based API.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-scheduled-message.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst API_KEY = 'YOUR_API_KEY';\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\nconst client = mailgun.client({username: 'api', key: API_KEY});\n\nconst messageData = {\n  from: 'Excited User <me@samples.mailgun.org>',\n  to: 'alice@example.com',\n  subject: 'Hello',\n  text: 'Testing some Mailgun awesomeness!',\n  \"o:deliverytime\": 'Fri, 6 Jul 2017 18:10:10 -0000'\n};\n\nclient.messages.create(YOUR_DOMAIN_NAME, messageData)\n.then((res) => {\n  console.log(res);\n})\n.catch((err) => {\n  console.error(err);\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Mailgun Template Version using Python Requests\nDESCRIPTION: This Python function uses the requests library to update a template version. It sends a PUT request to the Mailgun API with the necessary parameters for template content, comment, and active status.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/version-update.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef update_version():\n    return requests.put(\n        \"https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/templates/TEMPLATE_NAME/versions/VERSION_TAG\",\n        auth=(\"api\", \"YOUR_API_KEY\"),\n        data={'template': '{{fname}} {{lname}}',\n              'comment': 'Updated version comment',\n              'active': 'yes'})\n```\n\n----------------------------------------\n\nTITLE: Creating Email Preview Test with Ruby\nDESCRIPTION: This Ruby function uses the RestClient library to create an email preview test. It sends a POST request to the Mailgun API with subject and URL parameters.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/email_preview/create-test.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef create_email_previews\n  data = { subject: \"test\", url: \"url\" }\n  RestClient.post(\"https://api:YOUR_API_KEY@api.mailgun.net/v1/preview/tests\",\n                  fields_hash.merge(data))\nend\n```\n\n----------------------------------------\n\nTITLE: Sending Untracked Emails with Mailgun in Java\nDESCRIPTION: This Java code demonstrates how to send an email with tracking disabled using the Mailgun Java SDK. It creates a Message object with tracking set to false and sends it using the MailgunMessagesApi.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-message-no-tracking.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.MailgunMessagesApi;\nimport com.mailgun.model.message.Message;\nimport com.mailgun.model.message.MessageResponse;\n\n// ...\n\npublic MessageResponse sendMessageNoTracking() {\n    MailgunMessagesApi mailgunMessagesApi = MailgunClient.config(API_KEY)\n        .createApi(MailgunMessagesApi.class);\n\n    Message message = Message.builder()\n        .from(\"Excited User <USER@YOURDOMAIN.COM>\")\n        .to(\"alice@example.com\")\n        .subject(\"Hello\")\n        .text(\"Testing out some Mailgun awesomeness!\")\n        .tracking(false)\n        .build();\n\n    return mailgunMessagesApi.sendMessage(YOUR_DOMAIN_NAME, message);\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting All Templates Using Ruby\nDESCRIPTION: Ruby function that uses RestClient to delete all templates for a specified Mailgun domain. Sends a DELETE request to the templates endpoint with API key authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/template-delete-all.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef delete_templates\n  RestClient.delete \"https://api:YOUR_API_KEY\"\\\n  \"@api.mailgun.net/v3/YOUR_DOMAIN_NAME/templates\"\nend\n```\n\n----------------------------------------\n\nTITLE: Creating IP Pool using cURL with Mailgun API\nDESCRIPTION: This snippet demonstrates how to create an IP pool using a cURL command to interact with the Mailgun API. It specifies the pool name, description, and IP addresses.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/ip_pools/create_ip_pool.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' \\\n   https://api.mailgun.net/v1/ip_pools \\\n   -F name='ip_pool_name' \\\n   -F description='pool description' \\\n   -F ips='127.0.0.1'\n```\n\n----------------------------------------\n\nTITLE: Creating Mailgun Template using JavaScript\nDESCRIPTION: JavaScript implementation using mailgun.js library to create a template. Includes error handling and async/await pattern.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/create-template-usage.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n(async () => {\n  try {\n    const createdTemplate = await client.domains.domainTemplates.create(DOMAIN, {\n      name: 'template.test',\n      description: 'Sample template',\n      template: \"<div class=\\\"entry\\\"> <h1>{{title}}</h1> <div class=\\\"body\\\"> {{body}} </div> </div>\",\n      tag: 'v1',\n      comment: 'comment text'\n    });\n    console.log('createdTemplate', createdTemplate);\n  } catch (error) {\n      console.error(error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Creating Mailgun Webhooks with Java\nDESCRIPTION: This Java code demonstrates how to create a webhook for the 'clicked' event using the Mailgun Java SDK. It configures multiple URLs that will receive notifications when emails are clicked.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/add-webhook.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.MailgunWebhooksApi;\nimport com.mailgun.enums.WebhookName;\nimport com.mailgun.model.webhooks.WebhookRequest;\nimport com.mailgun.model.webhooks.WebhookResult;\n\nimport java.util.List;\n\n// ...\n\npublic WebhookResult addWebhook() {\n    MailgunWebhooksApi mailgunWebhooksApi = MailgunClient.config(API_KEY).createApi(MailgunWebhooksApi.class);\n\n    WebhookRequest request = WebhookRequest.builder()\n        .webhookName(WebhookName.CLICKED)\n        .url(\"https://your_domain.com/v1/clicked\")\n        .urls(List.of(\"https://your_domain.com/v2/clicked\", \"https://your_partner_domain.com/v1/clicked\"))\n        .build();\n\n    return mailgunWebhooksApi.createNewWebhook(YOUR_DOMAIN_NAME, request);\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Unsubscribe List Endpoint\nDESCRIPTION: GET endpoint to retrieve the list of unsubscribed recipients. Supports pagination through limit and skip parameters.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-unsubscribes.rst#2025-04-21_snippet_0\n\nLANGUAGE: url\nCODE:\n```\nGET /<domain>/unsubscribes\n```\n\n----------------------------------------\n\nTITLE: Retrieving Mailgun Logs using cURL\nDESCRIPTION: Makes a GET request to Mailgun's API to fetch logs using cURL with basic authentication and pagination parameters.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-log-entry.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -G \\\n    https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/log \\\n    -d skip=50 \\\n    -d limit=1\n```\n\n----------------------------------------\n\nTITLE: Bulk Email Validation in PHP using cURL\nDESCRIPTION: Provides a PHP function that uses cURL to upload a file for bulk email validation. The function handles authentication, configures the request to POST to the Mailgun API endpoint, and returns the API response.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/create-bulk-validation.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Currently, the PHP SDK does not support the v4 Validations endpoint.\n# Consider using the following php curl function.\nfunction upload_bulk_validation() {\n  $ch = curl_init();\n\n  curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);\n  curl_setopt($ch, CURLOPT_USERPWD, 'api:PRIVATE_API_KEY');\n  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n\n  curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');\n  curl_setopt($ch, CURLOPT_URL, 'https://api.mailgun.net/v4/address/validate/bulk/LIST_NAME');\n  curl_setopt($ch, CURLOPT_POSTFIELDS, array(\n      'file'=> curl_file_create('subscribers.csv'))\n  );\n\n  $result = curl_exec($ch);\n  curl_close($ch);\n\n  return $result;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Domain to Whitelist with Ruby\nDESCRIPTION: Ruby function using RestClient to add a domain to the Mailgun whitelist. Makes a POST request to the Mailgun API with the domain to be whitelisted.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/add-whitelist.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef add_whitelist\n  RestClient.post(\"https://api:YOUR_API_KEY\"\\\n                  \"@api.mailgun.net/v3/YOUR_DOMAIN_NAME/whitelists\",\n                  :domain => 'example.com')\nend\n```\n\n----------------------------------------\n\nTITLE: Webhook Signature Verification in Node.js\nDESCRIPTION: Node.js implementation for verifying Mailgun webhook signatures using crypto module.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/user_manual.rst#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport crypto from 'node:crypto';\n\nconst verify = ({ signingKey, timestamp, token, signature }) => {\n    const encodedToken = crypto\n        .createHmac('sha256', signingKey)\n        .update(timestamp.concat(token))\n        .digest('hex')\n\n    return (encodedToken === signature)\n}\n```\n\n----------------------------------------\n\nTITLE: Java Email Validation Implementation\nDESCRIPTION: Java implementation using Mailgun's SDK to validate email addresses. Uses MailgunClient configuration with API key and creates an email verification API instance.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-validate.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v4.MailgunEmailVerificationApi;\nimport com.mailgun.model.verification.AddressValidationResponse\n\n// ...\n\npublic AddressValidationResponse validateEmail() {\n    MailgunEmailVerificationApi mailgunEmailVerificationApi = MailgunClient.config(API_KEY)\n        .createApi(MailgunEmailVerificationApi.class);\n\n    return mailgunEmailVerificationApi.validateAddress(\"foo@mailgun.com\");\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Mailgun Webhooks with Ruby\nDESCRIPTION: This Ruby method uses RestClient to add a webhook for the 'clicked' event. It registers multiple URL endpoints that will receive webhook notifications when an email is clicked.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/add-webhook.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef add_webhook\n  RestClient.post(\"https://api:YOUR_API_KEY\"\\\n                  \"@api.mailgun.net/v3/domains/YOUR_DOMAIN_NAME/webhooks\",\n                  :id => 'clicked',\n                  :url => ['https://your_domain.com/v1/clicked',\n                           'https://your_domain.com/v2/clicked',\n                           'https://your_partner_domain.com/v1/clicked'])\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Mailbox using Java with Unirest\nDESCRIPTION: This Java code snippet demonstrates how to create a mailbox using the Unirest HTTP library. It sends a POST request to the Mailgun API with basic authentication and form fields.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/create-mailbox.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mashape.unirest.http.HttpResponse;\nimport com.mashape.unirest.http.JsonNode;\nimport com.mashape.unirest.http.Unirest;\nimport com.mashape.unirest.http.exceptions.UnirestException;\n\npublic class MGSample {\n\n    // ...\n\n    public static JsonNode createMailbox() throws UnirestException {\n\n        HttpResponse<JsonNode> request = Unirest.post(\"https://api.mailgun.net/v3/\" + YOUR_DOMAIN_NAME + \"/mailboxes\")\n            .basicAuth(\"api\", API_KEY)\n            .field(\"mailbox\", \"alice@example.com\")\n            .field(\"password\", \"supersecret\")\n            .asJson();\n\n        return request.getBody();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Mailing List Member with Python Requests\nDESCRIPTION: This Python function uses the requests library to send a PUT request to the Mailgun API for updating a mailing list member. It sets the subscription status and name of the member.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/update-list-member.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef update_member():\n    return requests.put(\n        (\"https://api.mailgun.net/v3/lists/LIST@YOUR_DOMAIN_NAME/members\"\n         \"/bar@example.com\"),\n        auth=('api', 'YOUR_API_KEY'),\n        data={'subscribed': False,\n              'name': 'Foo Bar'})\n```\n\n----------------------------------------\n\nTITLE: Fetching Mailgun Event Logs with Pagination (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to retrieve event logs with pagination using the Mailgun.js library. It includes setting up the client, specifying the domain and page token, and handling the asynchronous response.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/events-pagination.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n(async () => {\n  try {\n    const events = await client.events.get(DOMAIN, {\n      page: 'WzMseyJiIjoiMjAyMS0xMi0wNlQwODo1ODowMi43MTIrMDA6MDAiLCJlIjoiMjAyMS0xMS0wNlQwODo1ODowMi43MTMrMDA6MDAifSx7ImIiOiIyMDIxLTExLTI2VDEwOjI4OjI0LjQ2OCswMDowMCIsImUiOiIyMDIxLTExLTA2VDA4OjU4OjAyLjcxMyswMDowMCJ9LCJfZG9jI1Z2X2hFcHlNUWdPbjRvcjF5cVFsd2ciLFsiZiJdLG51bGwsW1siYWNjb3VudC5pZCIsIjU5NDU5N2Y3ZDAzMDNhNGJkMWYzMzg5OCJdLFsiZG9tYWluLm5hbWUiLCIyMDQ4LnplZWZhcm1lci5jb20iXSxbImV2ZW50IiwiZmFpbGVkIl1dLDEwMF0='\n    });\n    console.log('events', events);\n  } catch (error) {\n    console.error(error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Failed Events from Mailgun API using C#\nDESCRIPTION: This C# class uses the RestSharp library to query the Mailgun API for rejected or failed events. It demonstrates how to set up the RestClient, use basic authentication, and add query parameters to the request.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/events-failure.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class EventsFailureChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (EventsFailure ().Content.ToString ());\n    }\n\n    public static IRestResponse EventsFailure ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.AddParameter (\"domain\", \"YOUR_DOMAIN_NAME\", ParameterType.UrlSegment);\n        request.Resource = \"{domain}/events\";\n        request.AddParameter (\"event\", \"rejected OR failed\");\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Scheduled Messages with Mailgun API using Ruby\nDESCRIPTION: This Ruby function demonstrates sending a scheduled email using the RestClient library to interact with the Mailgun API. It sends a POST request with message content and the o:deliverytime parameter to schedule the message delivery.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-scheduled-message.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef send_scheduled_message\n  RestClient.post \"https://api:YOUR_API_KEY\"\\\n  \"@api.mailgun.net/v3/YOUR_DOMAIN_NAME/messages\",\n  :from => \"Excited User <YOU@YOUR_DOMAIN_NAME>\",\n  :to => \"bar@example.com\",\n  :subject => \"Hello\",\n  :text => \"Testing some Mailgun awesomeness!\",\n  \"o:deliverytime\" => \"Fri, 25 Oct 2011 23:10:10 -0000\"\nend\n```\n\n----------------------------------------\n\nTITLE: Sending Inline Image Email with Java\nDESCRIPTION: Java implementation for sending an email with inline image using Mailgun's Java SDK. Uses the MailgunMessagesApi client to construct and send a message with inline image attachment.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-inline-image.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport java.io.File;\n\nimport com.mailgun.api.v3.MailgunMessagesApi;\nimport com.mailgun.model.message.Message;\nimport com.mailgun.model.message.MessageResponse;\n\n// ...\n\npublic MessageResponse sendInlineImage() {\n    MailgunMessagesApi mailgunMessagesApi = MailgunClient.config(API_KEY)\n        .createApi(MailgunMessagesApi.class);\n\n    Message message = Message.builder()\n        .from(\"Excited User <USER@YOURDOMAIN.COM>\")\n        .to(\"alice@example.com\")\n        .to(\"bob@example.com\")\n        .cc(\"joe@example.com\")\n        .subject(\"Hello\")\n        .html(\"<html>Inline image here: <img src=\\\"cid:test.jpg\\\"></html>\")\n        .inline(new File(\"/path/to/test.jpg\"))\n        .build();\n\n    return mailgunMessagesApi.sendMessage(YOUR_DOMAIN_NAME, message);\n}\n```\n\n----------------------------------------\n\nTITLE: Canceling Bulk Validation Job in Ruby\nDESCRIPTION: This Ruby function uses the RestClient library to cancel a bulk email validation job. It sends a DELETE request to the Mailgun API v4 endpoint for address validation.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/delete-bulk-validation.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef cancel_bulk_validation\n  RestClient.delete(\"https://api:YOUR_API_KEY\" \\\n                    \"@api.mailgun.net/v4/address/validate/bulk/LIST_NAME\")\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Unsubscribes with Mailgun API (JavaScript)\nDESCRIPTION: This snippet shows the JSON structure for adding multiple unsubscribe records to the unsubscribe list in a single API call. It includes examples of different unsubscribe scenarios.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-suppressions.rst#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\n    \"address\": \"alice@example.com\",\n    \"tags\": [\"some tag\"],\n    \"created_at\": \"Thu, 13 Oct 2011 18:02:00 UTC\"\n  },\n  {\n    \"address\": \"bob@example.com\",\n    \"tags\": [\"*\"],\n  },\n  {\n    \"address\": \"carol@example.com\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Email Templates with Python\nDESCRIPTION: Uses the requests library to fetch a template from the Mailgun API. The function makes a GET request with HTTP Basic Authentication using the API key.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/template-get.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef get_template():\n    return requests.get(\n        \"https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/templates/TEMPLATE_NAME\",\n        auth=(\"api\", \"YOUR_API_KEY\"))\n```\n\n----------------------------------------\n\nTITLE: Updating Mailing List Member with Ruby RestClient\nDESCRIPTION: This Ruby function uses the RestClient library to send a PUT request to the Mailgun API for updating a mailing list member. It sets the subscription status and name of the member.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/update-list-member.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef update_member\n  RestClient.put(\"https://api:YOUR_API_KEY\" \\\n                 \"@api.mailgun.net/v3/lists/LIST@YOUR_DOMAIN_NAME/members\" \\\n                 \"/bar@example.com\",\n                 :subscribed => false,\n                 :name => 'Foo Bar')\nend\n```\n\n----------------------------------------\n\nTITLE: PHP Mailgun Webhook Integration\nDESCRIPTION: PHP implementation using Mailgun's SDK to fetch webhook details for delivered events. Requires the Mailgun PHP library installed via composer.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-webhook.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Include the Autoloader (see \"Libraries\" for install instructions)\nrequire 'vendor/autoload.php';\nuse Mailgun\\Mailgun;\n\n# Instantiate the client.\n$mgClient = Mailgun::create('PRIVATE_API_KEY', 'https://API_HOSTNAME');\n$domain   = 'YOUR_DOMAIN_NAME';\n$webhook  = 'delivered';\n\n# Issue the call to the client.\n$result = $mgClient->webhooks()->show($domain, $webhook)\n```\n\n----------------------------------------\n\nTITLE: Creating Mailgun Domain using cURL\nDESCRIPTION: Creates a new domain using cURL command with basic authentication and form parameters. Requires API key and domain name.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/create-domain.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' \\\n     https://api.mailgun.net/v3/domains \\\n     -F name='YOUR_DOMAIN_NAME' \\\n     -F smtp_password='supersecret'\n```\n\n----------------------------------------\n\nTITLE: Canceling Bulk Validation Job with curl (Bash)\nDESCRIPTION: This snippet demonstrates how to cancel a bulk email validation job using a curl command in Bash. It sends a DELETE request to the Mailgun API v4 endpoint for address validation.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/delete-bulk-validation.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -X DELETE \\\n    https://api.mailgun.net/v4/address/validate/bulk/LIST_NAME\n```\n\n----------------------------------------\n\nTITLE: Updating Domain Connection Settings with JavaScript\nDESCRIPTION: Uses the Mailgun.js library to update domain connection settings. Creates a client with API credentials and calls the updateConnection method with TLS required and verification enabled.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/update-connection.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n(async () => {\n  try {\n    const updatedConnection = await client.domains.updateConnection('DOMAIN', {\n        require_tls: true,\n        skip_verification: false\n    });\n    console.log('updatedConnection', updatedConnection);\n  } catch (error) {\n    console.error(error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Creating Mailing List using Ruby\nDESCRIPTION: Ruby function using RestClient to create a mailing list by sending a POST request to Mailgun's API endpoint.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/create-mailing-list.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef create_mailing_list\n  RestClient.post(\"https://api:YOUR_API_KEY\" \\\n                  \"@api.mailgun.net/v3/lists\",\n                  :address => 'LIST@YOUR_DOMAIN_NAME',\n                  :description => \"Mailgun developers list\")\nend\n```\n\n----------------------------------------\n\nTITLE: Retrieving Mailgun Events using JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to use the Mailgun.js library to retrieve events. It sets up the Mailgun client, configures query parameters, and makes an asynchronous API call to fetch events.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/events-date-time-recipient.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n(async () => {\n  try {\n    const date = new Date(2021, 10, 1, 0, 0, 0, 0); // Mon Nov 01 2021 00:00:00 GMT+0200\n    const events = await client.events.get(DOMAIN, {\n      begin: date.toGMTString(), // Sun, 31 Oct 2021 22:00:00 GMT\n      ascending: 'yes',\n      limit: 5\n    });\n    console.log('events', events)\n  } catch (error) {\n      console.error(error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Adding Unsubscribe Records using PHP with Mailgun PHP SDK\nDESCRIPTION: This PHP example demonstrates how to add an email address to the unsubscribe list using the Mailgun PHP SDK. It initializes the Mailgun client with the private API key and creates an unsubscribe record for a specific email address with the wildcard tag.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/add-unsubscribe-all.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Include the Autoloader (see \"Libraries\" for install instructions)\nrequire 'vendor/autoload.php';\nuse Mailgun\\Mailgun;\n\n# Instantiate the client.\n$mgClient  = Mailgun::create('PRIVATE_API_KEY', 'https://API_HOSTNAME');\n$domain    = 'YOUR_DOMAIN_NAME';\n$recipient = 'bob@example.com';\n$tag       = '*';\n\n# Issue the call to the client.\n$result = $mgClient->suppressions()->unsubscribes()->create($domain, $recipient, $tag);\n```\n\n----------------------------------------\n\nTITLE: Updating IP Pool via JavaScript Client\nDESCRIPTION: Shows how to update an IP pool using the Mailgun JavaScript client library. The example demonstrates updating the pool name, description and IPs using async/await pattern.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/ip_pools/update_ip_pool.rst#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n(async () => {\n  try {\n    const poolName = 'new_ip_pool_name';\n    const updatedIpPool = await client.ip_pools.update('your_ip_pool_id', { name: poolName, description: 'updated pool for testing purposes', ips: '127.0.0.1' });\n    console.log('updatedIpPool', updatedIpPool);\n  } catch (error) {\n    console.error(error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Fetching Complaints using Mailgun Java SDK\nDESCRIPTION: This Java code snippet uses the Mailgun Java SDK to retrieve complaints. It creates an instance of MailgunSuppressionComplaintsApi and calls the getAllComplaints method with the domain name and a limit of 2 complaints.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-complaints.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.suppression.MailgunSuppressionComplaintsApi;\nimport com.mailgun.model.suppression.complaints.ComplaintsItemResponse;\n\n// ...\n\npublic ComplaintsItemResponse getComplaints() {\n    MailgunSuppressionComplaintsApi suppressionComplaintsApi = MailgunClient.config(API_KEY)\n        .createApi(MailgunSuppressionComplaintsApi.class);\n\n    return suppressionComplaintsApi.getAllComplaints(YOUR_DOMAIN_NAME, 2);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Mailbox using PHP with Mailgun SDK\nDESCRIPTION: This PHP snippet shows how to create a mailbox using the Mailgun PHP SDK. It initializes the Mailgun client with the API key and sends a POST request to create the mailbox.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/create-mailbox.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Include the Autoloader (see \"Libraries\" for install instructions)\nrequire 'vendor/autoload.php';\nuse Mailgun\\Mailgun;\n\n# Instantiate the client.\n$mgClient = new Mailgun('YOUR_API_KEY');\n$domain = 'YOUR_DOMAIN_NAME';\n\n# Issue the call to the client.\n$result = $mgClient->post(\"$domain/mailboxes\", array(\n    'mailbox'  => 'alice@YOUR_DOMAIN_NAME',\n    'password' => 'secret'\n));\n```\n\n----------------------------------------\n\nTITLE: Validating Email Address with Mailgun API in Ruby\nDESCRIPTION: A Ruby function that uses RestClient to make a POST request to Mailgun's Address Validation API v4. It authenticates with a private API key and sends the email address to validate as a multipart form parameter.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/post-validate.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef post_validate\n  RestClient.post \"https://api:PRIVATE_API_KEY\"\\\n  \"@api.mailgun.net/v4/address/validate\",\n  {:address => \"foo@mailgun.net\", :multipart => true}\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Mailgun Webhooks using PHP\nDESCRIPTION: Shows how to add a webhook for 'delivered' events using the Mailgun PHP SDK. This webhook will send notification data to the specified URL when emails are successfully delivered.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/add-webhook-deprecated.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Include the Autoloader (see \"Libraries\" for install instructions)\nrequire 'vendor/autoload.php';\nuse Mailgun\\Mailgun;\n\n# Instantiate the client.\n$mgClient = Mailgun::create('PRIVATE_API_KEY', 'https://API_HOSTNAME');\n$domain   = 'YOUR_DOMAIN_NAME';\n$webhook  = 'delivered';\n$destination_url = 'https://my.webhook.url/delivered'\n\n# Issue the call to the client.\n$result = $mgClient->webhooks()->create($domain, $webhook, $destination_url);\n```\n\n----------------------------------------\n\nTITLE: Sending Email via SMTP using Swaks CLI Tool\nDESCRIPTION: Example showing how to send email through Mailgun SMTP using the Swaks command-line tool. Includes installation and basic usage with authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/smtp-send-simple-message.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Swaks is an smtp of CURL, install it first:\ncurl http://www.jetmore.org/john/code/swaks/files/swaks-20130209.0/swaks -o swaks\n# Set the permissions for the script so you can run it\nchmod +x swaks\n# It's based on perl, so install perl\nsudo apt-get -y install perl\n# now send!\n./swaks --auth \\\n        --server smtp.mailgun.org \\\n        --au postmaster@YOUR_DOMAIN_NAME \\\n        --ap 3kh9umujora5 \\\n        --to bar@example.com \\\n        --h-Subject: \"Hello\" \\\n        --body 'Testing some Mailgun awesomness!'\n```\n\n----------------------------------------\n\nTITLE: Canceling Bulk Validation Job in C#\nDESCRIPTION: This C# class uses RestSharp to cancel a bulk email validation job. It sends a DELETE request to the Mailgun API v4 endpoint for address validation, using HTTP Basic Authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/delete-bulk-validation.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class DeleteBulkValidationChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (CancelBulkValidation ().Content.ToString ());\n    }\n\n    public static IRestResponse CancelBulkValidation()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v4\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.Resource = \"address/validate/bulk/{list}\";\n        request.AddParameter (\"list\", \"LIST_NAME\",\n                              ParameterType.UrlSegment);\n        request.Method = Method.DELETE;\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Updating SMTP Credentials using JavaScript\nDESCRIPTION: This JavaScript code snippet shows how to update SMTP credentials using the Mailgun.js library. It creates a Mailgun client and uses the domainCredentials.update method to change the password for a specific login.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/change-pwd-credentials.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n(async () => {\n  try {\n    const updatedCredentials = await client.domains.domainCredentials.update(DOMAIN, 'LOGIN_FROM_CREDENTIALS', {\n           password: 'new_password'\n       });\n    console.log('updatedCredentials -------->', updatedCredentials);\n  } catch (error) {\n      console.error(error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Creating Mailgun Template using PHP\nDESCRIPTION: PHP implementation for creating a template using cURL functions since the PHP SDK doesn't support templates endpoint directly.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/create-template-usage.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Currently, the PHP SDK does not support the Templates endpoint.\n# Consider using the following php curl function.\nfunction add_template() {\n  $params = array(\n    'template'    => '<div class=\"entry\"> <h1>{{title}}</h1> <div class=\"body\"> {{body}} </div> </div>',\n    'name'        => 'Test template',\n    'description' => 'sample_template'\n  );\n\n  $ch = curl_init();\n\n  curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);\n  curl_setopt($ch, CURLOPT_USERPWD, 'api:PRIVATE_API_KEY');\n  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n\n  curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');\n  curl_setopt($ch, CURLOPT_URL, 'https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/templates');\n  curl_setopt($ch, CURLOPT_POSTFIELDS, $params);\n\n  $result = curl_exec($ch);\n  curl_close($ch);\n\n  return $result;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Mailbox using C# with RestSharp\nDESCRIPTION: This C# code demonstrates how to create a mailbox using the RestSharp library. It sets up a RestClient with basic authentication and sends a POST request to the Mailgun API.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/create-mailbox.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class CreateMailboxChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (CreateMailbox ().Content.ToString ());\n    }\n\n    public static IRestResponse CreateMailbox ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.AddParameter (\"domain\", \"YOUR_DOMAIN_NAME\", ParameterType.UrlSegment);\n        request.Resource = \"{domain}/mailboxes\";\n        request.AddParameter (\"mailbox\", \"alice@YOUR_DOMAIN_NAME\");\n        request.AddParameter (\"password\", \"secret\");\n        request.Method = Method.POST;\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Domain Details with Java Mailgun Client\nDESCRIPTION: Java implementation using the official Mailgun client library to retrieve domain information. Uses the MailgunDomainsApi class for API interaction.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-domain.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.MailgunDomainsApi;\nimport com.mailgun.model.domains.SingleDomainResponse;\n\n// ...\n\npublic SingleDomainResponse getDomain() {\n    MailgunDomainsApi mailgunDomainsApi = MailgunClient.config(API_KEY)\n        .createApi(MailgunDomainsApi.class);\n\n    return mailgunDomainsApi.getSingleDomain(YOUR_DOMAIN_NAME);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Bulk Email Validation Preview with Java\nDESCRIPTION: Java implementation for creating a bulk email validation preview list using Mailgun's Java SDK. This example demonstrates how to set up the client, create a request with a file attachment, and submit it to the Mailgun API.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/create-bulk-preview.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v4.MailgunEmailVerificationApi;\nimport com.mailgun.client.MailgunClient;\nimport com.mailgun.model.verification.BulkVerificationCreatingResponse;\nimport com.mailgun.model.verification.BulkVerificationStatusRequest;\nimport java.io.File;\n\n// ...\n\npublic BulkVerificationCreatingResponse createBulkPreview() {\n    MailgunEmailVerificationApi mailgunEmailVerificationApi = MailgunClient.config(API_KEY)\n            .createApi(MailgunEmailVerificationApi.class);\n\n    BulkVerificationStatusRequest request = BulkVerificationStatusRequest.builder()\n            .file(new File(\"/path/to/file\"))\n            .build();\n\n    return mailgunEmailVerificationApi.createBulkVerificationPreview(LIST_NAME, request);\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Webhook - API Endpoint\nDESCRIPTION: API endpoint to delete an existing webhook for a domain. Requires domain name and webhook name as parameters.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-webhooks.rst#2025-04-21_snippet_5\n\nLANGUAGE: url\nCODE:\n```\nDELETE /domains/<domain>/webhooks/<webhookname>\n```\n\n----------------------------------------\n\nTITLE: Creating Email Templates with Mailgun API in C#\nDESCRIPTION: This C# class demonstrates how to create a template in Mailgun using the RestSharp library. It configures a REST client with authentication and sends a POST request with template parameters to the Mailgun API endpoint.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/template-create-version.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class StoreTemplatesChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (StoreTemplate ().Content.ToString ());\n    }\n\n    public static IRestResponse StoreTemplate ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.Resource = \"{domain}/templates\";\n        request.AddParameter (\"domain\", \"YOUR_DOMAIN_NAME\", ParameterType.UrlSegment);\n        request.AddParameter (\"name\", \"template.name\");\n        request.AddParameter (\"description\", \"template description\")\n        request.AddParameter (\"template\", \"{{fname}} {{lname}}\")\n        request.AddParameter (\"engine\", \"handlebars\")\n        request.AddParameter (\"comment\", \"version comment\")\n        request.AddParameter (\"headers\", \"{\\\"Subject\\\": \\\"{{subject}}\\\"}\") \n        request.Method = Method.POST;\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Mailgun Template Description with C#\nDESCRIPTION: Uses RestSharp to send a PUT request to update a template description. The code creates a RestClient with basic authentication, adds the description parameter, and executes the request.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/template-update.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class UpdateTemplateChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (UpdateTemplate ().Content.ToString ());\n    }\n\n    public static IRestResponse UpdateTemplate ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.Resource = \"/YOUR_DOMAIN_NAME/template/TEMPLATE_NAME\";\n        request.AddParameter (\"description\", \"new template description\");\n        request.Method = Method.PUT;\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Mailgun Webhooks using C#\nDESCRIPTION: Demonstrates creating a webhook for 'click' events using C# with RestSharp. The code shows how to authenticate with the Mailgun API and post the necessary parameters to create a webhook endpoint.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/add-webhook-deprecated.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class AddWebhookChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (AddWebhook ().Content.ToString ());\n    }\n\n    public static IRestResponse AddWebhook ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3/\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.Resource = \"domains/YOUR_DOMAIN_NAME/webhooks\";\n        request.AddParameter (\"id\", \"click\");\n        request.AddParameter (\"url\", \"http://bin.example.com/8de4a9c4\");\n        request.Method = Method.POST;\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Mailgun Webhooks with Python\nDESCRIPTION: This Python function demonstrates how to add a webhook for the 'clicked' event using the requests library. It configures multiple URLs to receive notifications when emails are clicked.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/add-webhook.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef add_webhook():\n    return requests.post(\n        \"https://api.mailgun.net/v3/domains/YOUR_DOMAIN_NAME/webhooks\",\n        auth=(\"api\", \"YOUR_API_KEY\"),\n        data={\n          'id':'clicked',\n          'url':[ 'https://your_domain.com/v1/clicked',\n          'https://your_domain.com/v2/clicked',\n          'https://your_partner_domain.com/v1/clicked'\n          ]\n        })\n```\n\n----------------------------------------\n\nTITLE: Fetching Complaint Data with Go Mailgun SDK\nDESCRIPTION: This Go function uses the Mailgun Go SDK to retrieve complaint information. It requires the domain and API key to be provided as parameters and uses a context with timeout for the API call.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-complaint.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/mailgun/mailgun-go/v3\"\n    \"time\"\n)\n\nfunc GetComplaints(domain, apiKey string) (mailgun.Complaint, error) {\n    mg := mailgun.NewMailgun(domain, apiKey)\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    return mg.GetComplaint(ctx, \"baz@example.com\")\n}\n```\n\n----------------------------------------\n\nTITLE: Python Mailgun Statistics Integration\nDESCRIPTION: Python implementation using requests library to fetch domain statistics with basic authentication\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-stats.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef get_stats():\n    return requests.get(\n        \"https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/stats/total\",\n        auth=(\"api\", \"YOUR_API_KEY\"),\n        params={\"event\": [\"accepted\", \"delivered\", \"failed\"],\n                \"duration\": \"1m\"})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Mailboxes using PHP with Mailgun SDK\nDESCRIPTION: This PHP snippet uses the Mailgun SDK to retrieve mailboxes. It instantiates a Mailgun client with the API key, specifies the domain, and makes a GET request with optional parameters for limiting and skipping results.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-mailboxes.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Include the Autoloader (see \"Libraries\" for install instructions)\nrequire 'vendor/autoload.php';\nuse Mailgun\\Mailgun;\n\n# Instantiate the client.\n$mgClient = new Mailgun('YOUR_API_KEY');\n$domain = 'YOUR_DOMAIN_NAME';\n\n# Issue the call to the client.\n$result = $mgClient->get(\"$domain/mailboxes\", array(\n    'limit' => 5,\n    'skip'  => 10\n));\n```\n\n----------------------------------------\n\nTITLE: Adding Complaint to Mailgun Suppression List using C#\nDESCRIPTION: This C# class demonstrates how to add a complaint to the Mailgun suppression list using the RestSharp library. It creates a RestClient, sets up authentication, and sends a POST request to the Mailgun API.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/add-complaint.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class AddComplaintChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (AddComplaint ().Content.ToString ());\n    }\n\n    public static IRestResponse AddComplaint ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.Resource = \"{domain}/complaints\";\n        request.AddParameter (\"domain\", \"YOUR_DOMAIN_NAME\", ParameterType.UrlSegment);\n        request.AddParameter (\"address\", \"bob@example.com\");\n        request.Method = Method.POST;\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving IPs using JavaScript\nDESCRIPTION: Implements IP retrieval using Mailgun.js library. Uses async/await pattern and includes error handling.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-ips.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n(async () => {\n  try {\n    const ips = await client.ips.list();\n    console.log('ips', ips);\n  } catch (error) {\n    console.error(error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Sending Email with TLS Options using PHP and Mailgun API\nDESCRIPTION: PHP code to send an email via Mailgun API with TLS security options. Instantiates a Mailgun client, configures message parameters including HTML content and TLS options, and sends the message.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-connection.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Include the Autoloader (see \"Libraries\" for install instructions)\nrequire 'vendor/autoload.php';\nuse Mailgun\\Mailgun;\n\n# Instantiate the client.\n$mgClient = Mailgun::create('PRIVATE_API_KEY', 'https://API_HOSTNAME');\n$domain = \"YOUR_DOMAIN_NAME\";\n$params = array(\n      'from'                => 'Excited User <YOU@YOUR_DOMAIN_NAME>',\n      'to'                  => 'bob@example.com',\n      'subject'             => 'Hello',\n      'text'                => 'Testing some Mailgun awesomness!',\n      'html'                => '<html>HTML version of the body</html>',\n      'o:require-tls'       => true,\n      'o:skip-verification' => false\n    );\n\n# Make the call to the client.\n$result = $mgClient->messages()->send($domain, $params);\n```\n\n----------------------------------------\n\nTITLE: Creating Mailing List using cURL\nDESCRIPTION: Creates a mailing list using cURL command by sending a POST request to Mailgun's API with authentication and list details.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/create-mailing-list.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' \\\n     https://api.mailgun.net/v3/lists \\\n     -F address='LIST@YOUR_DOMAIN_NAME' \\\n     -F description='Mailgun developers list'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Bulk Validation Preview Status using Python Requests\nDESCRIPTION: This Python function uses the requests library to make a GET request to the Mailgun API for retrieving the bulk validation preview status. It uses basic authentication with the API key.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-bulk-preview.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef get_bulk_preview():\n    return requests.get(\n        \"https://api.mailgun.net/v4/address/validate/preview/LIST_NAME\",\n        auth=('api', 'YOUR_API_KEY'))\n```\n\n----------------------------------------\n\nTITLE: Adding Unsubscribe Records using Go with Mailgun Go SDK\nDESCRIPTION: This Go function uses the Mailgun Go SDK to add an email address to the unsubscribe list. It initializes a Mailgun client with the domain and API key, creates a context with timeout, and calls the CreateUnsubscribe method with the email address and wildcard tag.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/add-unsubscribe-all.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/mailgun/mailgun-go/v3\"\n    \"time\"\n)\n\nfunc CreateUnsubscribe(domain, apiKey string) error {\n    mg := mailgun.NewMailgun(domain, apiKey)\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    return mg.CreateUnsubscribe(ctx, \"bob@example.com\", \"*\")\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Unsubscribes with C# RestSharp\nDESCRIPTION: C# implementation to add an email address to the Mailgun unsubscribe list. Uses RestSharp to create an authenticated client that makes a POST request to the Mailgun API with the email address and tag as parameters.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/add-unsubscribe-tag.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class AddUnsubscribeTagChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (UnsubscribeFromTag ().Content.ToString ());\n    }\n\n    public static IRestResponse UnsubscribeFromTag ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.Resource = \"{domain}/unsubscribes\";\n        request.AddParameter (\"domain\", \"YOUR_DOMAIN_NAME\", ParameterType.UrlSegment);\n        request.AddParameter (\"address\", \"bob@example.com\");\n        request.AddParameter (\"tag\", \"tag1\");\n        request.Method = Method.POST;\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Sending MIME Message with Go\nDESCRIPTION: This Go function uses the mailgun-go library to send a MIME message. It opens the MIME message file, creates a new MIME message, and sends it using the Mailgun client.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-mime-message.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/mailgun/mailgun-go/v3\"\n    \"os\"\n    \"time\"\n)\n\nfunc SendMimeMessage(domain, apiKey string) (string, error) {\n    mg := mailgun.NewMailgun(domain, apiKey)\n    mimeMsgReader, err := os.Open(\"files/message.mime\")\n    if err != nil {\n        return \"\", err\n    }\n\n    m := mg.NewMIMEMessage(mimeMsgReader, \"bar@example.com\")\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    _, id, err := mg.Send(ctx, m)\n    return id, err\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Mailgun Template Description with PHP cURL\nDESCRIPTION: Uses PHP's curl functions to update a template description, as the PHP SDK doesn't support the Templates endpoint. Performs a PUT request with proper authentication and parameters, returning the API response.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/template-update.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Currently, the PHP SDK does not support the Templates endpoint.\n# Consider using the following php curl function.\nfunction update_template() {\n  $params = array(\n    'description' => 'new template description'\n  );\n\n  $ch = curl_init();\n\n  curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);\n  curl_setopt($ch, CURLOPT_USERPWD, 'api:PRIVATE_API_KEY');\n  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n\n  curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PUT');\n  curl_setopt($ch, CURLOPT_URL, 'https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/templates/TEMPLATE_NAME');\n  curl_setopt($ch, CURLOPT_POSTFIELDS, $params);\n\n  $result = curl_exec($ch);\n  curl_close($ch);\n\n  return $result;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Mailing List using JavaScript\nDESCRIPTION: JavaScript/Node.js implementation using Mailgun.js library to create a mailing list with async/await pattern and error handling.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/create-mailing-list.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n(async () => {\n  try {\n    const newList = await client.lists.create({\n      address: \"list_name@${DOMAIN}\",\n      name: \"list_name\",\n      description: \"list_description\",\n      access_level: \"everyone\", // readonly (default), members, everyone\n    });\n    console.log('newList', newList);\n  } catch (error) {\n    console.error(error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Go Bounce List Implementation\nDESCRIPTION: Go implementation using official Mailgun Go SDK to fetch bounce information with pagination support and context timeout.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-bounces.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/mailgun/mailgun-go/v3\"\n    \"time\"\n)\n\nfunc ListBounces(domain, apiKey string) ([]mailgun.Bounce, error) {\n    mg := mailgun.NewMailgun(domain, apiKey)\n    it := mg.ListBounces(nil)\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    var page, result []mailgun.Bounce\n    for it.Next(ctx, &page) {\n        result = append(result, page...)\n    }\n\n    if it.Err() != nil {\n        return nil, it.Err()\n    }\n    return result, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Ruby Template Retrieval\nDESCRIPTION: Ruby implementation using RestClient to fetch an active template from Mailgun API.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/template-get-active.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef get_template\n   RestClient.get \"https://api:YOUR_API_KEY\"\\\n   \"@api.mailgun.net/v3/YOUR_DOMAIN_NAME/templates/TEMPLATE_NAME\", :params => {\n       :active => \"yes\"\n   }\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Mailgun Webhooks using Ruby\nDESCRIPTION: Defines a Ruby function to add a webhook for 'click' events using RestClient. This method posts to the Mailgun API to create a webhook that will forward click events to the specified URL.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/add-webhook-deprecated.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef add_webhook\n  RestClient.post(\"https://api:YOUR_API_KEY\"\\\n                  \"@api.mailgun.net/v3/domains/YOUR_DOMAIN_NAME/webhooks\",\n                  :id => 'click',\n                  :url => 'http://bin.example.com/8de4a9c4')\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Domain to Whitelist with JavaScript\nDESCRIPTION: JavaScript example using mailgun.js to add a domain to the Mailgun whitelist. Creates a Mailgun client and uses the suppressions API to add a domain to the whitelist.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/add-whitelist.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n(async () => {\n  try {\n    const createdWhitelist = await client.suppressions.create(DOMAIN, 'whitelists', { domain: 'example.com' });\n    console.log('createdWhitelist', createdWhitelist);\n  } catch (error) {\n      console.error(error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Parsing Email Addresses with Mailgun API in Ruby\nDESCRIPTION: This Ruby function uses the RestClient to make a GET request to the Mailgun API for parsing email addresses. It includes authentication in the URL and passes the addresses as a parameter.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-parse.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef get_parse\n  url_params = { addresses:  \"Alice <alice@example.com>,bob@example.com\" }\n  public_key = \"pubkey-5ogiflzbnjrljiky49qxsiozqef5jxp7\"\n  parse_url = \"https://api:#{public_key}@api.mailgun.net/v3/address/parse\"\n  RestClient::Request.execute method: :get, url: parse_url,\n                                      headers: { params: url_params },\n                                      user: 'api', password: public_key\nend\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Validation Status in JavaScript\nDESCRIPTION: This JavaScript code uses the mailgun.js library to fetch the status of a multiple validation job. It requires the API key and domain name. The code demonstrates how to create a Mailgun client and make an asynchronous call to get the validation status.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-bulk-validation.rst#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n(async () => {\n  try {\n    const jobStatus = await client.validate.multipleValidation.get('validationList');\n    console.log('jobStatus ', jobStatus);\n  } catch (error) {\n    console.error(error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Updating Mailgun Webhook using JavaScript\nDESCRIPTION: This JavaScript code uses the Mailgun.js library to update a webhook. It creates a Mailgun client, then uses an async function to call the client.webhooks.update() method to update the 'clicked' webhook URL.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/update-webhook.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n(async () => {\n  try {\n    const updatedWebhooks = await client.webhooks.update(DOMAIN, 'clicked', 'https://your_domain.com/v1/clicked');\n    console.log('updatedWebhooks', updatedWebhooks);\n  } catch (error) {\n    console.error(error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Domains with C# RestSharp\nDESCRIPTION: This C# class demonstrates how to use RestSharp to retrieve domains from the Mailgun API. It includes setting up the RestClient with authentication, adding request parameters, and executing the request.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-domains.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class GetDomainsChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (GetDomains ().Content.ToString ());\n    }\n\n    public static IRestResponse GetDomains ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.Resource = \"domains\";\n        request.AddParameter (\"skip\", 0);\n        request.AddParameter (\"limit\", 3);\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: List Members Response\nDESCRIPTION: API response showing paginated list of mailing list members with their details and navigation links.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-mailinglists.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"items\": [\n      {\n          \"vars\": {\n              \"age\": 26\n          },\n          \"name\": \"Foo Bar\",\n          \"subscribed\": false,\n          \"address\": \"bar@example.com\"\n      }\n  ],\n  \"paging\": {\n    \"first\": \"https://url_to_first_page\",\n    \"last\": \"https://url_to_last_page\",\n    \"next\": \"http://url_to_next_page\",\n    \"previous\": \"http://url_to_previous_page\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Template Version with C# RestSharp\nDESCRIPTION: This C# class uses the RestSharp library to create a new template version. It sets up a RestClient with authentication and sends a POST request to the Mailgun API with the necessary parameters.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/version-create.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class StoreTemplateVersionChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (StoreTemplateVersion ().Content.ToString ());\n    }\n\n    public static IRestResponse StoreTemplateVersion ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.Resource = \"{domain}/templates/{name}/versions\";\n        request.AddParameter (\"domain\", \"YOUR_DOMAIN_NAME\", ParameterType.UrlSegment);\n        request.AddParameter (\"name\", \"TEMPLATE_NAME\", ParameterType.UrlSegment);\n        request.AddParameter (\"tag\", \"v0\");\n        request.AddParameter (\"template\", \"{{fname}} {{lname}}\");\n        request.AddParameter (\"engine\", \"handlebars\");\n        request.Method = Method.POST;\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Inbox Placement Results with C# RestSharp\nDESCRIPTION: This C# class uses the RestSharp library to make a GET request to the Mailgun Inbox Placement API. It sets up basic authentication and executes the request, returning the full response.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-results-attributes.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class InboxPlacementTest\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (GetResultsAttributes().Content.ToString());\n    }\n\n    public static IRestResponse GetResultsAttributes()\n    {\n        RestClient client = new RestClient();\n        client.BaseUrl = new Uri(\"https://api.mailgun.net/v4\");\n        client.Authenticator =\n            new HttpBasicAuthenticator(\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest();\n        request.Resource = \"/inbox/results/a\";\n        return client.Execute(request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Ruby Method for Bulk Email Validation\nDESCRIPTION: Uses Ruby's RestClient to upload a file for bulk email validation to the Mailgun API. The function includes authentication and merges the file with any other required fields in the request.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/create-bulk-validation.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef validate_mailing_list\n  RestClient.post(\"https://api:YOUR_API_KEY\" \\\n                  \"@api.mailgun.net/v4/address/validate/bulk/LIST_NAME\",\n                  fields_hash.merge(:file => File.new('/path/to/file')))\nend\n```\n\n----------------------------------------\n\nTITLE: Sending Inline Image Email with Go\nDESCRIPTION: Go implementation using the mailgun-go SDK to send an email with inline image. Demonstrates message construction with HTML content and inline image attachment using the Mailgun client.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-inline-image.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/mailgun/mailgun-go/v3\"\n    \"time\"\n)\n\nfunc SendInlineImage(domain, apiKey string) (string, error) {\n    mg := mailgun.NewMailgun(domain, apiKey)\n    m := mg.NewMessage(\n        \"Excited User <YOU@YOUR_DOMAIN_NAME>\",\n        \"Hello\",\n        \"Testing some Mailgun awesomeness!\",\n        \"foo@example.com\",\n    )\n    m.AddCC(\"baz@example.com\")\n    m.AddBCC(\"bar@example.com\")\n    m.SetHtml(`<html>Inline image here: <img alt=\"image\" src=\"cid:test.jpg\"/></html>`)\n    m.AddInline(\"files/test.jpg\")\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    _, id, err := mg.Send(ctx, m)\n    return id, err\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Mailgun Click Webhook with Python\nDESCRIPTION: This Python function updates a Mailgun click webhook using the requests library. It sends a PUT request to the Mailgun API with basic authentication and specifies a new URL for the click webhook.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/update-webhook-deprecated.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef update_member():\n    return requests.put(\n        (\"https://api.mailgun.net/v3/domains/YOUR_DOMAIN_NAME/webhooks/click\"),\n        auth=('api', 'YOUR_API_KEY'),\n        data={'url': 'http://google.com'})\n```\n\n----------------------------------------\n\nTITLE: Creating Domain Credentials in JavaScript\nDESCRIPTION: Creates domain credentials using the Mailgun JavaScript SDK with async/await pattern and error handling.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/create-credentials.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n(async () => {\n  try {\n    const createdCredentials = await client.domains.domainCredentials.create(DOMAIN, {\n        login: 'alice@YOUR_DOMAIN_NAME',\n        password: 'secret'\n    });\n    console.log('createdCredentials', createdCredentials);\n  } catch (error) {\n      console.error(error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Seed Lists with Python Requests\nDESCRIPTION: This Python function uses the requests library to retrieve seed lists from the Mailgun API. It sends a GET request to the v4 inbox/seedlists endpoint with basic authentication using an API key.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-seed-lists.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef get_seed_lists():\n    return requests.get(\n        \"https://api.mailgun.net/v4/inbox/seedlists\",\n        auth=('api', 'YOUR_API_KEY'))\n```\n\n----------------------------------------\n\nTITLE: Retrieving Template Versions with PHP using curl\nDESCRIPTION: A PHP function that uses curl to send a GET request to the Mailgun API for template versions. The function authenticates with basic auth and returns the raw response from the API.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/version-get-all.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Currently, the PHP SDK does not support the Templates endpoint.\n# Consider using the following php curl function.\nfunction get_all_versions() {\n  $ch = curl_init();\n\n  curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);\n  curl_setopt($ch, CURLOPT_USERPWD, 'api:PRIVATE_API_KEY');\n  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n\n  curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\n  curl_setopt($ch, CURLOPT_URL, 'https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/templates/TEMPLATE_NAME/versions');\n\n  $result = curl_exec($ch);\n  curl_close($ch);\n\n  return $result;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Routes with Multiple Actions in Mailgun\nDESCRIPTION: This code demonstrates how to programmatically create a route with the highest priority and multiple actions using Mailgun's HTTP API.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/user_manual.rst#2025-04-21_snippet_34\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: samples/create-route.rst\n```\n\n----------------------------------------\n\nTITLE: Removing Mailing List Member with Java\nDESCRIPTION: This Java method removes a member from a Mailgun mailing list using the Mailgun Java SDK. It creates a MailgunMailingListApi instance with your API key and calls the deleteMemberFromMailingList method.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/remove-list-member.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.MailgunMailingListApi;\nimport com.mailgun.model.mailing.lists.MailingListMemberResponse;\n\n// ...\n\npublic MailingListMemberResponse removeMembers() {\n    MailgunMailingListApi mailgunMailingListApi = MailgunClient.config(API_KEY)\n        .createApi(MailgunMailingListApi.class);\n\n    return mailgunMailingListApi.deleteMemberFromMailingList(MAILING_LIST_ADDRESS, \"karen@example.com\");\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Mailing List Members using cURL\nDESCRIPTION: Makes a GET request to Mailgun API to retrieve mailing list members using basic authentication with API key.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-list-members.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -G \\\n    https://api.mailgun.net/v3/lists/LIST@YOUR_DOMAIN_NAME/members/pages\n```\n\n----------------------------------------\n\nTITLE: Adding Unsubscribe Records using JavaScript with mailgun.js\nDESCRIPTION: This JavaScript example uses the mailgun.js library to add an email address to the unsubscribe list. It initializes a Mailgun client with the API key, and uses an async function to create a suppression entry with the email address and wildcard tag.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/add-unsubscribe-all.rst#2025-04-21_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n(async () => {\n    try {\n        const createdUnsubscribe = await client.suppressions.create(DOMAIN, 'unsubscribes', { address: 'bob@example.com', tag: '*' });\n        console.log('createdUnsubscribe', createdUnsubscribe);\n    } catch (error) {\n        console.error(error);\n    }\n})();\n```\n\n----------------------------------------\n\nTITLE: Java Implementation for Mailgun Bulk Preview Promotion\nDESCRIPTION: Java implementation using Unirest HTTP library to promote bulk preview validation. Requires Unirest dependency and handles API authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/put-bulk-preview.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mashape.unirest.http.HttpResponse;\nimport com.mashape.unirest.http.JsonNode;\nimport com.mashape.unirest.http.Unirest;\nimport com.mashape.unirest.http.exceptions.UnirestException;\n\npublic class MGSample {\n\n    // ...\n\n    public static JsonNode promoteBulkPreview() throws UnirestException {\n\n        HttpResponse<JsonNode> request = Unirest.put(\"https://api.mailgun.net/v4/address/validate/preview/{list}\")\n            .basicAuth(\"api\", API_KEY)\n            .asJson();\n\n        return request.getBody();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending MIME Message with Curl (Bash)\nDESCRIPTION: This snippet demonstrates how to send a MIME message using curl in Bash. It uses basic authentication with the API key and sends a file as the message content.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-mime-message.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' \\\n    https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/messages.mime \\\n    -F to='bob@example.com' \\\n    -F message=@files/message.mime\n```\n\n----------------------------------------\n\nTITLE: Retrieving Mailgun Event Logs (Ruby)\nDESCRIPTION: This Ruby function shows how to fetch event logs from the Mailgun API using the RestClient library. It requires the API key and domain name to be specified.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/events-pagination.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef get_logs\n  RestClient.get \"https://api:YOUR_API_KEY\"\\\n  \"@api.mailgun.net/v3/YOUR_DOMAIN_NAME/events/W3siYSI6IGZhbHNlLC\"}\nend\n```\n\n----------------------------------------\n\nTITLE: Activating Domain Keys with Requests in Python\nDESCRIPTION: Uses the requests library to activate a domain key in Python. Makes a PUT request with basic authentication using the Mailgun API key.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/activate-domain-key.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef activate_domain_key():\n    return requests.put(\n        \"https://api.mailgun.net/v4/domains/AUTHORITY_DOMAIN_NAME/keys/SELECTOR/activate\",\n        auth=('api', 'YOUR_API_KEY'))\n```\n\n----------------------------------------\n\nTITLE: Get Mailing Lists Response\nDESCRIPTION: Sample JSON response showing paginated list of mailing lists.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-mailinglists.rst#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"items\": [\n      {\n        \"access_level\": \"everyone\",\n        \"address\": \"dev@samples.mailgun.org\",\n        \"created_at\": \"Tue, 06 Mar 2012 05:44:45 GMT\",\n        \"description\": \"Mailgun developers list\",\n        \"members_count\": 1,\n        \"name\": \"\"\n      },\n      {\n        \"access_level\": \"readonly\",\n        \"address\": \"bar@example.com\",\n        \"created_at\": \"Wed, 06 Mar 2013 11:39:51 GMT\",\n        \"description\": \"\",\n        \"members_count\": 2,\n        \"name\": \"\"\n      }\n    ],\n    \"paging\": {\n      \"first\": \"https://url_to_next_page\",\n      \"last\": \"https://url_to_last_page\",\n      \"next\": \"https://url_to_next_page\",\n      \"previous\": \"https://url_to_previous_page\"\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating Inbox Placement Test with Ruby using RestClient\nDESCRIPTION: This Ruby function creates an inbox placement test using the RestClient library. It builds a data hash with the required parameters and makes a POST request to the Mailgun API endpoint with authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/create-inbox-placement-test.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef create_inbox_placement_test\n  data = {'from'=> 'Sample User <user@domain.com>',\n          'subject'=> 'testSubject',\n          'html'=> '<html>HTML version of the body</html>' }\n  RestClient.post(\"https://api:YOUR_API_KEY\" \\\n                  \"@api.mailgun.net/v4/inbox/tests\",\n                  fields_hash.merge(data))\nend\n```\n\n----------------------------------------\n\nTITLE: C# Implementation for Bulk Email Validation\nDESCRIPTION: A C# class that demonstrates bulk email validation using RestSharp. It configures HTTP basic authentication, sets up the request with the necessary parameters, adds the file to be validated, and executes the request to the Mailgun API.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/create-bulk-validation.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class BulkValidationChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (BulkValidation ().Content.ToString ());\n    }\n\n    public static IRestResponse BulkValidation ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v4\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.Resource = \"address/validate/bulk/{list}\";\n        request.AddParameter (\"list\", \"LIST_NAME\",\n                              ParameterType.UrlSegment);\n        request.Method = Method.POST;\n        request.AddFile(\"file\", @\"/path/to/file\");\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Bounce Information using cURL (Bash)\nDESCRIPTION: This snippet demonstrates how to use cURL to retrieve bounce information for a specific email address from the Mailgun API. It requires the API key and domain name to be replaced with actual values.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-bounce.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -G \\\n    https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/bounces/foo@bar.com\n```\n\n----------------------------------------\n\nTITLE: Retrieving Mailgun Routes using Python\nDESCRIPTION: This Python function shows how to retrieve Mailgun routes using the requests library. It sends a GET request to the Mailgun API with authentication and pagination parameters.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-routes.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef get_routes():\n    return requests.get(\n        \"https://api.mailgun.net/v3/routes\",\n        auth=(\"api\", \"YOUR_API_KEY\"),\n        params={\"skip\": 1,\n                \"limit\": 1})\n```\n\n----------------------------------------\n\nTITLE: Delete Mailing List using JavaScript\nDESCRIPTION: JavaScript/Node.js implementation using mailgun.js SDK to delete a mailing list. Uses async/await pattern.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/remove-mailing-list.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n(async () => {\n  try {\n    const removedList = await client.lists.destroy('YOUR_LIST_NAME');\n    console.log('removedList', removedList);\n  } catch (error) {\n    console.error(error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Defining Recipient Variables in JSON for Mailgun Batch Sending\nDESCRIPTION: This JSON snippet demonstrates how to define recipient variables for use with Mailgun's batch sending feature. Each recipient email address is a key with a nested object containing custom variables that can be referenced in the email body.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/user_manual.rst#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"user1@example.com\" : {\"unique_id\": \"ABC123456789\"},\n  \"user2@example.com\" : {\"unique_id\": \"ZXY987654321\"}\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Mailgun Webhook using Python\nDESCRIPTION: This Python function uses the requests library to send a PUT request to the Mailgun API for updating the 'clicked' webhook URL. It includes authentication and the new webhook URL in the request.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/update-webhook.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef update_webhook():\n    return requests.put(\n        (\"https://api.mailgun.net/v3/domains/YOUR_DOMAIN_NAME/webhooks/clicked\"),\n        auth=('api', 'YOUR_API_KEY'),\n        data={'url': 'https://your_domain.com/clicked'})\n```\n\n----------------------------------------\n\nTITLE: Parsing Email Addresses with Mailgun API in C#\nDESCRIPTION: This C# code uses the RestSharp library to send a GET request to the Mailgun API for parsing email addresses. It includes basic authentication and adds the addresses as a parameter to the request.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-parse.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class GetParseChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (GetParse ().Content.ToString ());\n    }\n\n    public static IRestResponse GetParse ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"pubkey-5ogiflzbnjrljiky49qxsiozqef5jxp7\");\n        RestRequest request = new RestRequest ();\n        request.Resource = \"/address/parse\";\n        request.AddParameter (\"addresses\",\n                              \"Alice <alice@example.com>,bob@example.com\");\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Mailing List Member with Mailgun PHP SDK\nDESCRIPTION: This PHP snippet uses the Mailgun PHP SDK to update a mailing list member. It creates a Mailgun client, sets the member details, and sends an update request to the API.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/update-list-member.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Include the Autoloader (see \"Libraries\" for install instructions)\nrequire 'vendor/autoload.php';\nuse Mailgun\\Mailgun;\n\n# Instantiate the client.\n$mgClient = Mailgun::create('PRIVATE_API_KEY', 'https://API_HOSTNAME');\n$mailing_list = 'LIST@YOUR_DOMAIN_NAME';\n$recipient    = 'bob@example.com';\n$params = array(\n    'name'      => 'Bob',\n    'subscribed => 'yes',\n    'vars'      => '{\"age\": 30, \"pet\": \"cat\"}'\n);\n\n# Issue the call to the client.\n$result = $mgClient->mailingList()->member()->update($mailing_list, $recipient, $params);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Mailing List Members using JavaScript\nDESCRIPTION: Uses Mailgun.js library with async/await pattern to fetch mailing list members. Requires form-data package.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-list-members.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n(async () => {\n  try {\n    const listingMembers = await client.lists.members.listMembers(DOMAIN);\n    console.log('listingMembers', listingMembers);\n  } catch (error) {\n    console.error(error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Creating Template Version with Ruby RestClient\nDESCRIPTION: This Ruby function uses the RestClient library to create a new template version. It sends a POST request to the Mailgun API with authentication and template details as parameters.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/version-create.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef store_template_version\n  RestClient.post \"https://api:YOUR_API_KEY\"\\\n  \"@api.mailgun.net/v3/YOUR_DOMAIN_NAME/templates/TEMPLATE_NAME/versions\",\n  :tag => 'v0',\n  :template => '{{fname}} {{lname}}',\n  :engine => 'handlebars'\nend\n```\n\n----------------------------------------\n\nTITLE: Retrieving Template Version with Python Requests\nDESCRIPTION: Uses the Python requests library to make a GET request to the Mailgun API. Authenticates with the API key and specifies the domain name, template name, and version tag in the URL.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/version-get.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef get_template_version():\n    return requests.get(\n        \"https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/templates/TEMPLATE_NAME/versions/VERSION_TAG\",\n        auth=(\"api\", \"YOUR_API_KEY\"))\n```\n\n----------------------------------------\n\nTITLE: Creating Template Version with PHP cURL\nDESCRIPTION: This PHP function uses cURL to create a new template version. It sets up the necessary parameters and sends a POST request to the Mailgun API endpoint with authentication and template details.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/version-create.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Currently, the PHP SDK does not support the Templates endpoint.\n# Consider using the following php curl function.\nfunction create_template_version() {\n  $params = array(\n    'tag' => 'v0',\n    'template' => '{{fname}} {{lname}}',\n    'engine' => 'handlebars'\n  );\n\n  $ch = curl_init();\n\n  curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);\n  curl_setopt($ch, CURLOPT_USERPWD, 'api:PRIVATE_API_KEY');\n  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n\n  curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');\n  curl_setopt($ch, CURLOPT_URL, 'https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/templates/TEMPLATE_NAME/versions');\n  curl_setopt($ch, CURLOPT_POSTFIELDS, $params);\n\n  $result = curl_exec($ch);\n  curl_close($ch);\n\n  return $result;\n}\n```\n\n----------------------------------------\n\nTITLE: C# Mailgun Webhook Integration\nDESCRIPTION: C# implementation using RestSharp to fetch webhook details for clicked events. Includes basic authentication and URL parameter handling.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-webhook.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class GetWebhookChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (GetWebhook ().Content.ToString ());\n    }\n\n    public static IRestResponse GetWebhook ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.AddParameter (\"domain\", \"YOUR_DOMAIN_NAME\", ParameterType.UrlSegment);\n        request.Resource = \"/domains/{domain}/webhooks/clicked\";\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Canceling Bulk Email Verification Preview in Python\nDESCRIPTION: This Python function shows how to cancel a bulk email verification preview using the requests library. It sends a DELETE request to the Mailgun API v4 endpoint with basic authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/delete-bulk-preview.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef delete_bulk_preview():\n    return requests.delete(\n        (\"https://api.mailgun.net/v4/address/validate/preview/LIST_NAME\"),\n        auth=('api', 'YOUR_API_KEY'))\n```\n\n----------------------------------------\n\nTITLE: PHP Mailgun Unsubscribe Integration\nDESCRIPTION: PHP implementation using Mailgun's official PHP SDK. Demonstrates initialization of the Mailgun client and fetching unsubscribe data using the suppressions API.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-unsubscribes.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Include the Autoloader (see \"Libraries\" for install instructions)\nrequire 'vendor/autoload.php';\nuse Mailgun\\Mailgun;\n\n# Instantiate the client.\n$mgClient = Mailgun::create('PRIVATE_API_KEY', 'https://API_HOSTNAME');\n$domain = 'YOUR_DOMAIN_NAME';\n\n# Issue the call to the client.\n$result = $mgClient->suppressions()->unsubscribes()->index($domain);\n```\n\n----------------------------------------\n\nTITLE: Adding Unsubscribe Records using Python with Requests\nDESCRIPTION: This Python function uses the requests library to add an email address to the unsubscribe list. It sends a POST request to the Mailgun API endpoint with basic authentication and provides the email address and wildcard tag as form data.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/add-unsubscribe-all.rst#2025-04-21_snippet_3\n\nLANGUAGE: py\nCODE:\n```\ndef unsubscribe_from_all():\n    return requests.post(\n        \"https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/unsubscribes\",\n        auth=(\"api\", \"YOUR_API_KEY\"),\n        data={'address':'bob@example.com', 'tag': '*'})\n```\n\n----------------------------------------\n\nTITLE: Adding Unsubscribes with JavaScript Mailgun.js\nDESCRIPTION: JavaScript implementation to add an email address to the Mailgun unsubscribe list. Uses the mailgun.js library with form-data to create a client that adds the address to the suppressions list with the specified tag.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/add-unsubscribe-tag.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n(async () => {\n    try {\n        const createdUnsubscribe = await client.suppressions.create(DOMAIN, 'unsubscribes', { address: 'bob@example.com', tag: 'tag1' });\n        console.log('createdUnsubscribe', createdUnsubscribe);\n    } catch (error) {\n        console.error(error);\n    }\n})();\n```\n\n----------------------------------------\n\nTITLE: Creating Mailing List using C#\nDESCRIPTION: C# implementation using RestSharp library to create a mailing list with basic authentication and request parameters.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/create-mailing-list.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class CreateMailingListChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (CreateMailingList ().Content.ToString ());\n    }\n\n    public static IRestResponse CreateMailingList ()\n    {\n\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.Resource = \"lists\";\n        request.AddParameter (\"address\", \"LIST@YOUR_DOMAIN_NAME\");\n        request.AddParameter (\"description\", \"Mailgun developers list\");\n        request.Method = Method.POST;\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Untracked Emails with Mailgun in Python\nDESCRIPTION: This Python function demonstrates how to send an email with tracking disabled using the requests library to interact with the Mailgun API. It sets the 'o:tracking' parameter to False in the data payload.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-message-no-tracking.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef send_message_no_tracking():\n    return requests.post(\n        \"https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/messages\",\n        auth=(\"api\", \"YOUR_API_KEY\"),\n        data={\"from\": \"Excited User <YOU@YOUR_DOMAIN_NAME>\",\n              \"to\": [\"bar@example.com\", \"baz@example.com\"],\n              \"subject\": \"Hello\",\n              \"text\": \"Testing some Mailgun awesomness!\",\n              \"o:tracking\": False})\n```\n\n----------------------------------------\n\nTITLE: Retrieving IP Information using Go Mailgun SDK\nDESCRIPTION: This Go function uses the Mailgun Go SDK to retrieve information about a specific IP address. It initializes the Mailgun client with the domain and API key, then calls the GetIP method with a context.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-ip.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/mailgun/mailgun-go/v3\"\n    \"time\"\n)\n\nfunc GetIP(domain, apiKey string) (mailgun.IPAddress, error) {\n    mg := mailgun.NewMailgun(domain, apiKey)\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    return mg.GetIP(ctx, \"127.0.0.1\")\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Tags Using Ruby RestClient\nDESCRIPTION: This Ruby function shows how to delete a tag named 'newsletter' using the RestClient library. It sends a DELETE request to the Mailgun API endpoint with HTTP basic authentication using your API key.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/tags/delete-tag.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef delete_tag\n  RestClient.delete \"https://api:YOUR_API_KEY\"\\\n  \"@api.mailgun.net/v3/YOUR_DOMAIN_NAME/tag/newsletter\"\nend\n```\n\n----------------------------------------\n\nTITLE: JavaScript Whitelist Implementation\nDESCRIPTION: JavaScript/Node.js implementation using mailgun.js library to fetch whitelist data. Includes error handling and async/await pattern.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-whitelists.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n(async () => {\n  try {\n    const whitelists = await client.suppressions.list(DOMAIN, 'whitelists');\n    console.log('whitelists', whitelists);\n  } catch (error) {\n    console.error(error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Updating SMTP Credentials using PHP\nDESCRIPTION: This PHP code snippet demonstrates how to update SMTP credentials using the Mailgun PHP SDK. It creates a Mailgun client instance and calls the updateCredential method with the domain name, SMTP username, and new password.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/change-pwd-credentials.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Include the Autoloader (see \"Libraries\" for install instructions)\nrequire 'vendor/autoload.php';\nuse Mailgun\\Mailgun;\n\n# Instantiate the client.\n$mgClient = Mailgun::create('PRIVATE_API_KEY', 'https://API_HOSTNAME');\n$domain   = 'YOUR_DOMAIN_NAME';\n$smtpUser = 'bob';\n$smtpPass = 'new_password';\n\n# Issue the call to the client.\n$result = $mgClient->domains()->updateCredential($domain, $smtpUser, $smtpPass);\n```\n\n----------------------------------------\n\nTITLE: Sending Tagged Messages with Mailgun JavaScript SDK\nDESCRIPTION: This JavaScript example demonstrates how to send an email with tags using the Mailgun.js SDK. It initializes the Mailgun client with API credentials, creates a message with tag parameters, and sends it using promises to handle the response.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-tagged-message.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst API_KEY = 'YOUR_API_KEY';\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\nconst client = mailgun.client({username: 'api', key: API_KEY});\n\nconst messageData = {\n  from: 'Excited User <me@samples.mailgun.org>',\n to: 'alice@example',\n subject: 'Tagged',\n text: 'Testing some Mailgun awesomeness!',\n \"o:tag\" : ['newsletters', 'September newsletter']\n};\n\nclient.messages.create(YOUR_DOMAIN_NAME, messageData)\n.then((res) => {\n  console.log(res);\n})\n.catch((err) => {\n  console.error(err);\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Inbox Placement Results with Python Requests\nDESCRIPTION: This Python function uses the requests library to make a GET request to the Mailgun Inbox Placement API. It includes basic authentication with an API key.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-results-attributes.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef get_results_attributes():\n    return requests.get(\n        \"https://api.mailgun.net/v4/inbox/results/a\",\n        auth=('api', 'YOUR_API_KEY'))\n```\n\n----------------------------------------\n\nTITLE: Retrieving Complaints with Ruby RestClient\nDESCRIPTION: This Ruby function uses the RestClient to make a GET request to the Mailgun API for fetching complaints. It includes the API key in the URL for authentication and specifies the domain name.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-complaints.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef get_complaints\n  RestClient.get \"https://api:YOUR_API_KEY\"\\\n  \"@api.mailgun.net/v3/YOUR_DOMAIN_NAME/complaints\"\nend\n```\n\n----------------------------------------\n\nTITLE: Ruby Email Validation with RestClient\nDESCRIPTION: Ruby implementation using RestClient to validate an email address. Includes authentication in the URL and passes address as a parameter.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-validate.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef get_validate\n  RestClient.get \"https://api:PRIVATE_API_KEY\"\\\n  \"@api.mailgun.net/v4/address/validate\",\n  {params: {address: \"foo@mailgun.net\"}}\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Mailgun Template using Java SDK\nDESCRIPTION: Implements template creation using Mailgun Java SDK. Uses MailgunTemplatesApi to create a template with specified name, description, and HTML content.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/create-template-usage.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.MailgunTemplatesApi;\nimport com.mailgun.model.templates.TemplateRequest;\nimport com.mailgun.model.templates.TemplateWithMessageResponse;\n\n// ...\n\npublic TemplateWithMessageResponse createTemplate() {\n    MailgunTemplatesApi mailgunTemplatesApi = MailgunClient.config(API_KEY)\n        .createApi(MailgunTemplatesApi.class);\n\n    TemplateRequest request = TemplateRequest.builder()\n        .template(\"<div class=\\\"entry\\\"> <h1>{{title}}</h1> <div class=\\\"body\\\"> {{body}} </div> </div>\")\n        .name(\"template.name\")\n        .description(\"Sample template\")\n        .build();\n\n    return mailgunTemplatesApi.storeNewTemplate(YOUR_DOMAIN_NAME, request);\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Domain IPs using Go Mailgun Client\nDESCRIPTION: This Go function uses the Mailgun Go client to retrieve domain IPs. It creates a new Mailgun client with the domain and API key, sets up a context with timeout, and calls the ListDomainIPS method.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-domain-ips.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/mailgun/mailgun-go/v3\"\n    \"time\"\n)\n\nfunc ListDomainIPS(domain, apiKey string) ([]mailgun.IPAddress, error) {\n    mg := mailgun.NewMailgun(domain, apiKey)\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    return mg.ListDomainIPS(ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Mailing List Member with PHP\nDESCRIPTION: This PHP code removes a member from a Mailgun mailing list using the Mailgun PHP SDK. It instantiates the Mailgun client with your private API key and calls the delete method on the mailing list member resource.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/remove-list-member.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Include the Autoloader (see \"Libraries\" for install instructions)\nrequire 'vendor/autoload.php';\nuse Mailgun\\Mailgun;\n\n# Instantiate the client.\n$mgClient = Mailgun::create('PRIVATE_API_KEY', 'https://API_HOSTNAME');\n$mailing_list = 'LIST@YOUR_DOMAIN_NAME';\n$recipient    = 'bob@example.com';\n\n# Issue the call to the client.\n$result = $mgClient->mailingList()->member()->delete($mailing_list, $recipient);\n```\n\n----------------------------------------\n\nTITLE: Python Mailgun Unsubscribe Request\nDESCRIPTION: Simple Python function using the requests library to fetch unsubscribe data from Mailgun API.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-unsubscribes.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef get_unsubscribes():\n    return requests.get(\n        \"https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/unsubscribes\",\n        auth=(\"api\", \"YOUR_API_KEY\"))\n```\n\n----------------------------------------\n\nTITLE: Querying Mailgun API for Failed Events using cURL\nDESCRIPTION: This snippet shows how to use cURL to query the Mailgun API for rejected or failed events. It demonstrates the use of basic authentication and URL parameters to filter events.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/events-failure.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -G \\\n    https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/events \\\n    --data-urlencode event='rejected OR failed'\n```\n\n----------------------------------------\n\nTITLE: C# Class for Mailgun Webhook Integration\nDESCRIPTION: Implements a C# class using RestSharp to retrieve click webhook data from Mailgun. Includes authentication and proper request configuration.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-webhook-deprecated.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class GetWebhookChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (GetWebhook ().Content.ToString ());\n    }\n\n    public static IRestResponse GetWebhook ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.AddParameter (\"domain\", \"YOUR_DOMAIN_NAME\", ParameterType.UrlSegment);\n        request.Resource = \"/domains/{domain}/webhooks/click\";\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Mailgun Templates using PHP cURL\nDESCRIPTION: This PHP function uses cURL to list Mailgun templates. It sets up a cURL request with basic authentication and sends a GET request to the Mailgun API.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/template-get-all.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Currently, the PHP SDK does not support the Templates endpoint.\n# Consider using the following php curl function.\nfunction get_templates() {\n\n  $ch = curl_init();\n\n  curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);\n  curl_setopt($ch, CURLOPT_USERPWD, 'api:PRIVATE_API_KEY');\n  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n\n  curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\n  curl_setopt($ch, CURLOPT_URL, 'https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/templates');\n\n  $result = curl_exec($ch);\n  curl_close($ch);\n\n  return $result;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating SMTP Credentials using Ruby\nDESCRIPTION: This Ruby function demonstrates how to update SMTP credentials using the RestClient library. It sends a PUT request to the Mailgun API with the domain name, username, and new password.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/change-pwd-credentials.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef change_credential_password\n  RestClient.put \"https://api:YOUR_API_KEY\"\\\n  \"@api.mailgun.net/v3/domains/YOUR_DOMAIN_NAME/credentials/alice\",\n  :password => \"supersecret\"\nend\n```\n\n----------------------------------------\n\nTITLE: Processing Validation Job Completion Webhook in JavaScript\nDESCRIPTION: This snippet illustrates the JSON structure of a webhook payload for a completed full validation job. It includes signature details, comprehensive job information, download URLs for results, and detailed summary statistics for email deliverability and risk levels.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-deliverability-alerts.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"signature\": {\n    \"timestamp\": 1667592181,\n    \"token\": \"6212180f809f15a8b4a4bc46ca64f7778619683455679c0035\"\n   },\n  \"event_data\": {\n    \"id\": \"fa2613d9-a795-4e40-8f7c-bdb6bafbfc76\",\n    \"bulk_validation_job\": {\n      \"created_at\": 1667592117,\n      \"download_urls\": {\n        \"csv\": \"https://storage.googleapis.com/...csv.zip\",\n        \"json\": \"https://storage.googleapis.com/...json.zip\"\n      },\n      \"list_id\": \"LIST 62\",\n      \"quantity\": 100,\n      \"processed\": 100,\n      \"status\": \"uploaded\",\n      \"summary\": {\n        \"result\": {\n          \"deliverable\": 82,\n          \"undeliverable\": 1,\n          \"catch_all\": 13,\n          \"unknown\": 4\n        },\n        \"risk\": {\n          \"high\": 1,\n          \"low\": 82,\n          \"medium\": 13,\n          \"unknown\": 4\n        }\n      }\n    },\n    \"message\": \"Validation job fa2613d9-a795-4e40-8f7c-bdb6bafbfc76 is complete\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Mailgun.js Implementation\nDESCRIPTION: JavaScript/Node.js implementation using official Mailgun.js SDK to list domain credentials asynchronously.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-credentials.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n(async () => {\n  try {\n    const domainCredentials = await client.domains.domainCredentials.list(DOMAIN);\n    console.log('domainCredentials', domainCredentials);\n  } catch (error) {\n    console.error(error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Updating Mailgun Template Description with JavaScript\nDESCRIPTION: Uses the mailgun.js library to update a template description. Creates a Mailgun client with API credentials, then makes an async call to update the domain template with a new description.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/template-update.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n(async () => {\n  try {\n    const updatedDomainTemplate = await client.domains.domainTemplates.update(\n    DOMAIN,\n    'YOUR_TEMPLATE_NAME',\n    {\n        description: 'new template description'\n    });\n    console.log('updatedDomainTemplate', updatedDomainTemplate);\n  } catch (error) {\n    console.error(error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Creating DKIM Keys with C# using RestSharp\nDESCRIPTION: This C# implementation uses the RestSharp library to create DKIM keys via Mailgun's API. It demonstrates how to set up the client with basic authentication, add the required parameters (signing domain and selector), and execute the POST request.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/create-domain-key.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class InboxPlacementTests\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (CreateDomainKey ().Content.ToString ());\n    }\n\n    public static IRestResponse CreateDomainKey ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v1\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.Resource = \"dkim/keys\";\n        request.AddParameter (\"signing_domain\", \"SIGNING_DOMAIN\");\n        request.AddParameter (\"selector\", \"SELECTOR\");\n        request.Method = Method.POST;\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Domain Connection Settings with PHP\nDESCRIPTION: Uses the Mailgun PHP SDK to update domain connection settings. Initializes a client with the API key and calls the updateConnection method with TLS required and verification enabled.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/update-connection.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Include the Autoloader (see \"Libraries\" for install instructions)\nrequire 'vendor/autoload.php';\nuse Mailgun\\Mailgun;\n\n# Instantiate the client.\n$mgClient = Mailgun::create('PRIVATE_API_KEY', 'https://API_HOSTNAME');\n$domain = \"YOUR_DOMAIN_NAME\";\n$require_tls = true;\n$skip_verification = false;\n\n# Issue the call to the client.\n$result = $mgClient->domains()->updateConnection($domain, $require_tls, $skip_verification);\n```\n\n----------------------------------------\n\nTITLE: Fetching Inbox Placement Results with Python Requests\nDESCRIPTION: This Python function uses the requests library to perform a GET request to the Mailgun API for retrieving inbox placement results. It includes basic authentication with an API key.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-result.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef get_results():\n    return requests.get(\n        \"https://api.mailgun.net/v4/inbox/results/UUID\",\n        auth=('api', 'YOUR_API_KEY'))\n```\n\n----------------------------------------\n\nTITLE: Fetching Mailing List Validation Status in PHP using cURL\nDESCRIPTION: This PHP function uses cURL to make a GET request to the Mailgun API for retrieving mailing list validation status. It requires the private API key and the mailing list address to be replaced with actual values.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-list-validation.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Currently, the PHP SDK does not support Mailing List verifications.\n# Consider using the following php curl function.\nfunction get_mailing_list_validation() {\n  $ch = curl_init();\n\n  curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);\n  curl_setopt($ch, CURLOPT_USERPWD, 'api:PRIVATE_API_KEY');\n  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n\n  curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\n  curl_setopt($ch, CURLOPT_URL, 'https://api.mailgun.net/v3/lists/LIST@YOUR_DOMAIN_NAME/validate');\n\n  $result = curl_exec($ch);\n  curl_close($ch);\n\n  return $result;\n}\n```\n\n----------------------------------------\n\nTITLE: Java Mailgun Events API Integration\nDESCRIPTION: Java implementation using Mailgun client library to fetch events. Uses MailgunEventsApi class to retrieve all events for a specified domain.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/events-traversal.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.MailgunEventsApi;\nimport com.mailgun.model.events.EventsResponse;\n\n// ...\n\npublic EventsResponse getEvents() {\n    MailgunEventsApi mailgunEventsApi = MailgunClient.config(API_KEY)\n        .createApi(MailgunEventsApi.class);\n\n    return mailgunEventsApi.getAllEvents(YOUR_DOMAIN_NAME);\n}\n```\n\n----------------------------------------\n\nTITLE: C# Implementation for Inbox Filters\nDESCRIPTION: C# class using RestSharp library to fetch inbox placement filters. Includes basic authentication and complete implementation with main method.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-results-filters.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class InboxPlacementTests\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (GetResultsFilters ().Content.ToString ());\n    }\n\n    public static IRestResponse GetResultsFilters ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v4\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.Resource = \"/inbox/results/_filters\";\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Complaints using JavaScript Mailgun SDK\nDESCRIPTION: This JavaScript code uses the Mailgun.js SDK to retrieve complaints. It creates a Mailgun client with the API key, then uses the suppressions.list method to fetch complaints for the specified domain. The code is wrapped in an async function for proper Promise handling.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-complaints.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n(async () => {\n  try {\n    const complaints = await client.suppressions.list(DOMAIN, 'complaints');\n    console.log('complaints', complaints);\n  } catch (error) {\n    console.error(error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Updating Mailgun Template Description with Java\nDESCRIPTION: Uses the Mailgun Java SDK to update a template's description. Requires creating a MailgunTemplatesApi instance with your API key. The method takes the domain name, template name, and new description as parameters.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/template-update.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.MailgunTemplatesApi;\nimport com.mailgun.model.templates.TemplateStatusResponse;\n\n// ...\n\npublic TemplateStatusResponse updateTemplate() {\n    MailgunTemplatesApi mailgunTemplatesApi = MailgunClient.config(API_KEY)\n        .createApi(MailgunTemplatesApi.class);\n\n    return mailgunTemplatesApi.updateTemplate(YOUR_DOMAIN_NAME, TEMPLATE_NAME, \"new template description\");\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Unsubscribes with Go Mailgun SDK\nDESCRIPTION: Go function to add an email address to the Mailgun unsubscribe list. Uses the mailgun-go SDK to create a client and call CreateUnsubscribe with the email address and tag parameters.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/add-unsubscribe-tag.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/mailgun/mailgun-go/v3\"\n    \"time\"\n)\n\nfunc CreateUnsubscribeWithTag(domain, apiKey string) error {\n    mg := mailgun.NewMailgun(domain, apiKey)\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    return mg.CreateUnsubscribe(ctx, \"bob@example.com\", \"tag1\")\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Inbox Placement Test in Java\nDESCRIPTION: This Java code snippet uses the Mailgun Java SDK to delete an inbox placement test. It creates a MailgunSeedListApi instance and calls the deleteSeedListFeignResponse method.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/delete-seed-list.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v4.MailgunSeedListApi;\nimport com.mailgun.client.MailgunClient;\nimport feign.Response;\n\n// ...\n\npublic Response deleteInboxPlacementTest() {\n    MailgunSeedListApi mailgunSeedListApi = MailgunClient.config(API_KEY)\n            .createApi(MailgunSeedListApi.class);\n\n    return mailgunSeedListApi.deleteSeedListFeignResponse(TARGET_EMAIL);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Bounce using Go Mailgun Client\nDESCRIPTION: Go implementation using the official Mailgun Go client library with context and timeout handling.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/add-bounce.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/mailgun/mailgun-go/v3\"\n    \"time\"\n)\n\nfunc AddBounce(domain, apiKey string) error {\n    mg := mailgun.NewMailgun(domain, apiKey)\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    return mg.AddBounce(ctx, \"bob@example.com\", \"550\", \"Undeliverable message error\")\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Bounce Information using Ruby RestClient\nDESCRIPTION: This Ruby function uses the RestClient library to fetch bounce information for a specific email address from the Mailgun API. It requires the API key and domain name to be replaced with actual values.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-bounce.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef get_bounce\n  RestClient.get(\"https://api:YOUR_API_KEY\"\\\n                 \"@api.mailgun.net/v3/YOUR_DOMAIN_NAME/bounces\"\\\n                 \"/foo@bar.com\"){|response, request, result| response }\nend\n```\n\n----------------------------------------\n\nTITLE: Resending Messages with Python Requests\nDESCRIPTION: Python implementation using the requests library to resend messages to multiple recipients.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/resend-simple-message.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef resend_simple_message():\n    return requests.post(\n        \"https://storage-{{MESSAGE_STORAGE_REGION}}.api.mailgun.net/v3/domains/YOUR_DOMAIN_NAME/messages/STORAGE_KEY\",\n        auth=(\"api\", \"YOUR_API_KEY\"),\n        data={\"to\": [\"bar@example.com\", \"YOU@YOUR_DOMAIN_NAME\"] })\n```\n\n----------------------------------------\n\nTITLE: Adding Complaint to Mailgun Suppression List using Python\nDESCRIPTION: This Python function shows how to add a complaint to the Mailgun suppression list using the requests library. It sends a POST request to the Mailgun API with the necessary authentication and data.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/add-complaint.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef add_complaint():\n    return requests.post(\n        \"https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/complaints\",\n        auth=(\"api\", \"YOUR_API_KEY\"),\n        data={'address': 'bob@example.com'})\n```\n\n----------------------------------------\n\nTITLE: Sending Tagged Messages with Mailgun Java SDK\nDESCRIPTION: This Java code uses the Mailgun Java SDK to send an email with tags. It creates a message with sender and recipient information, adds multiple tags, and sends it using the Mailgun Messages API.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-tagged-message.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.MailgunMessagesApi;\nimport com.mailgun.model.message.Message;\nimport com.mailgun.model.message.MessageResponse;\n\n// ...\n\npublic MessageResponse sendTaggedMessage() {\n    MailgunMessagesApi mailgunMessagesApi = MailgunClient.config(API_KEY)\n        .createApi(MailgunMessagesApi.class);\n\n    Message message = Message.builder()\n        .from(\"Excited User <USER@YOURDOMAIN.COM>\")\n        .to(\"bruce@example.com\")\n        .subject(\"Hello\")\n        .text(\"Testing out some Mailgun awesomeness!\")\n        .tag(\"newsletters\")\n        .tag(\"September newsletter\")\n        .build();\n\n    return mailgunMessagesApi.sendMessage(YOUR_DOMAIN_NAME, message);\n}\n```\n\n----------------------------------------\n\nTITLE: PHP Implementation using cURL\nDESCRIPTION: PHP function implementing inbox placement results retrieval using cURL, as the PHP SDK doesn't support this endpoint directly.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-results.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Currently, the PHP SDK does not support the Inbox Placement endpoint.\n# Consider using the following php curl function.\nfunction get_results() {\n  $ch = curl_init();\n\n  curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);\n  curl_setopt($ch, CURLOPT_USERPWD, 'api:PRIVATE_API_KEY');\n  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n\n  curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\n  curl_setopt($ch, CURLOPT_URL, 'https://api.mailgun.net/v4/inbox/results');\n  $result = curl_exec($ch);\n  curl_close($ch);\n\n  return $result;\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Mailing List using Python with requests library\nDESCRIPTION: This Python function uses the requests library to validate a mailing list. It sends a POST request to the Mailgun API endpoint for list validation.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/create-list-validation.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef validate_mailing_list():\n    return requests.post(\n        \"https://api.mailgun.net/v3/lists/LIST@YOUR_DOMAIN_NAME/validate\",\n        auth=('api', 'YOUR_API_KEY'))\n```\n\n----------------------------------------\n\nTITLE: GET List Domain Keys Endpoint\nDESCRIPTION: Retrieves a list of domain keys with optional filtering by signing domain or selector.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-domains.rst#2025-04-21_snippet_22\n\nLANGUAGE: url\nCODE:\n```\nGET /v1/dkim/keys\n```\n\n----------------------------------------\n\nTITLE: Updating Domain Connection Settings with C#\nDESCRIPTION: Uses RestSharp in C# to send a PUT request to update domain connection settings. Creates a REST client with basic authentication and adds parameters for 'require_tls' and 'skip_verification'.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/update-connection.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class UpdateConnectionChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (UpdateConnection ().Content.ToString ());\n    }\n\n    public static IRestResponse UpdateConnection ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.Resource = \"domains/YOUR_DOMAIN_NAME/connection\";\n        request.AddParameter (\"require_tls\", true);\n        request.AddParameter (\"skip_verification\", false);\n        request.Method = Method.PUT;\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Mailgun Routes using Java\nDESCRIPTION: This Java code snippet shows how to retrieve Mailgun routes using the Mailgun Java SDK. It creates a MailgunRoutesApi instance, builds a request with pagination parameters, and calls the getRoutesList method.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-routes.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.MailgunRoutesApi;\nimport com.mailgun.model.routes.RoutesListResponse;\nimport com.mailgun.model.routes.RoutesPageRequest;\n\n// ...\n\npublic RoutesListResponse getRoutes() {\n    MailgunRoutesApi mailgunRoutesApi = MailgunClient.config(API_KEY)\n        .createApi(MailgunRoutesApi.class);\n\n    RoutesPageRequest pageRequest = RoutesPageRequest.builder()\n        .skip(0)\n        .limit(5)\n        .build();\n\n    return mailgunRoutesApi.getRoutesList(pageRequest);\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Tag Provider Statistics with Node.js\nDESCRIPTION: Uses the Mailgun.js client library to fetch tag statistics aggregated by providers. Demonstrates async/await pattern and error handling. Requires form-data package and Mailgun API credentials.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/tags/tag-providers-aggregation.rst#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n(async () => {\n  try {\n    const providersAggregation = await client.domains.domainTags.providers(\n      DOMAIN,\n      'YOUR_TAG_NAME'\n    );\n    console.log('providersAggregation', providersAggregation);\n  } catch (error) {\n    console.error(error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Fetching Bounce Information using Python Requests Library\nDESCRIPTION: This Python function uses the Requests library to retrieve bounce information for a specific email address from the Mailgun API. It requires the API key and domain name to be replaced with actual values.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-bounce.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef get_bounce():\n    return requests.get(\n        \"https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/bounces/foo@bar.com\",\n        auth=(\"api\", \"YOUR_API_KEY\"))\n```\n\n----------------------------------------\n\nTITLE: Fetching Inbox Placement Results with C# RestSharp\nDESCRIPTION: This C# class uses the RestSharp library to perform a GET request to the Mailgun API for retrieving inbox placement results. It sets up basic authentication, configures the request with a URL segment parameter, and executes the request.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-result.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class InboxPlacementTest\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (GetResult().Content.ToString());\n    }\n\n    public static IRestResponse GetResult()\n    {\n        RestClient client = new RestClient();\n        client.BaseUrl = new Uri(\"https://api.mailgun.net/v4\");\n        client.Authenticator =\n            new HttpBasicAuthenticator(\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest();\n        request.AddParameter (\"uuid\", \"UUID\", ParameterType.UrlSegment);\n        request.Resource = \"/inbox/results/{uuid}\";\n        return client.Execute(request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Email Preview Test with C#\nDESCRIPTION: This C# class uses the RestSharp library to create an email preview test. It sends a POST request to the Mailgun API with subject and URL parameters, using HTTP Basic Authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/email_preview/create-test.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class CreateEmailPreviewTests\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (CreateEmailPreview ().Content.ToString ());\n    }\n\n    public static IRestResponse CreateEmailPreview ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\", \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.AddParameter (\"subject\", \"test\", ParameterType.UrlSegment);\n        request.AddParameter (\"url\", \"url\", ParameterType.UrlSegment);\n        request.Resource = \"v1/preview/tests\";\n        request.Method = Method.POST;\n        return client.Execute (request);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Domain IP with Python\nDESCRIPTION: Makes a DELETE request to the Mailgun API using Python's requests library to unassign an IP from a domain. Requires the API key and domain name to be specified.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/remove-domain-ip.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef delete_domain_ip():\n    return requests.delete(\n        \"https://api.mailgun.net/v3/domains/YOUR_DOMAIN_NAME/ips/127.0.0.1\",\n        auth=(\"api\", \"YOUR_API_KEY\"))\n```\n\n----------------------------------------\n\nTITLE: JavaScript Mailgun Events API Integration\nDESCRIPTION: JavaScript/Node.js implementation using mailgun.js library to fetch events asynchronously with proper error handling.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/events-traversal.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n(async () => {\n  try {\n    const events = await client.events.get(DOMAIN);\n    console.log('events', events);\n  } catch (error) {\n    console.error(error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Validating Email Address with Mailgun API in PHP\nDESCRIPTION: This PHP snippet demonstrates email address validation using the Mailgun API. It initializes a Mailgun client, sends a GET request to the validation endpoint, and checks the validity of the email address.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-validate-deprecated.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Include the Autoloader (see \"Libraries\" for install instructions)\nrequire 'vendor/autoload.php';\nuse Mailgun\\Mailgun;\n\n# Instantiate the client.\n$mgClient = new Mailgun('pubkey-5ogiflzbnjrljiky49qxsiozqef5jxp7');\n$validateAddress = 'foo@mailgun.net';\n\n# Issue the call to the client.\n$result = $mgClient->get(\"address/validate\", array('address' => $validateAddress));\n# is_valid is 0 or 1\n$isValid = $result->http_response_body->is_valid;\n```\n\n----------------------------------------\n\nTITLE: Fetching Domain Connection Settings with Ruby\nDESCRIPTION: This Ruby function uses the RestClient library to make a GET request to the Mailgun API for retrieving domain connection settings. The API key and domain name need to be replaced with actual values.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-connection.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef get_connection\n  RestClient.get \"https://api:YOUR_API_KEY\"\\\n  \"@api.mailgun.net/v3/domains/YOUR_DOMAIN_NAME/connection\"\nend\n```\n\n----------------------------------------\n\nTITLE: Retrieving Seed List Filters with Python\nDESCRIPTION: This Python function uses the requests library to retrieve seed list filters from the Mailgun API. It sends a GET request to the API endpoint with basic authentication using the provided API key.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-seed-list-filters.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef get_seed_list_filters():\n    return requests.get(\n        \"https://api.mailgun.net/v4/inbox/seedlists/_filters\",\n        auth=('api', 'YOUR_API_KEY'))\n```\n\n----------------------------------------\n\nTITLE: Ruby Implementation for Mailgun Bulk Preview Promotion\nDESCRIPTION: Ruby implementation using RestClient to promote bulk preview validation with basic authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/put-bulk-preview.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef promote_bulk_preview\n  RestClient.put(\"https://api:YOUR_API_KEY\"\\\n                 \"@api.mailgun.net/v4/address/validate/preview/LIST_NAME\"\\\n                 {|response, request, result| response }\nend\n```\n\n----------------------------------------\n\nTITLE: Retrieving Webhooks using JavaScript SDK\nDESCRIPTION: JavaScript/Node.js implementation using Mailgun.js library with async/await pattern\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-webhooks.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n(async () => {\n  try {\n    const webhooks = await client.webhooks.list(DOMAIN);\n    console.log('webhooks', webhooks);\n  } catch (error) {\n    console.error(error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Creating DKIM Keys with Ruby using RestClient\nDESCRIPTION: This Ruby function demonstrates how to create DKIM keys using the RestClient library. It makes a POST request to Mailgun's API with your API key as authentication and includes the signing domain and selector as parameters.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/create-domain-key.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef create_domain_key\n   RestClient.POST(\"https://api:YOUR_API_KEY\"\\\n                  \"@api.mailgun.net/v1/dkim/keys\",\n                  :signing_domain => 'bob@example.com',\n                  :selector => 'SELECTOR')\nend\n```\n\n----------------------------------------\n\nTITLE: Creating DKIM Keys with Go using the standard HTTP package\nDESCRIPTION: This Go function creates DKIM keys using the standard HTTP package. It defines response structures to unmarshal the JSON response, constructs a POST request with the required parameters (signing domain and selector), and authenticates using the Mailgun API key.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/create-domain-key.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"encoding/json\"\n   \"fmt\"\n\t\"net/http\"\n)\n\ntype CreateDomainKeyResponse struct {\n\tSigningDomain string          `json:\"signing_domain\"`\n\tSelector      string          `json:\"selector\"`\n\tRecord        Record `json:\"dns_record,omitempty\"`\n}\n\ntype Record struct {\n\tActive   bool     `json:\"is_active\"`\n\tCached   []string `json:\"cached\"`\n\tName     string   `json:\"name\"`\n\tType     string   `json:\"record_type\"`\n\tValid    string   `json:\"valid\"`\n\tValue    string   `json:\"value\"`\n}\n\nfunc CreateDomainKey() (createDomainKeyResponse CreateDomainKeyResponse, err error) {\n   signingDomain := \"SIGNING_DOMAIN\"\n   selector := \"SELECTOR\"\n\n   params := url.Values{}\n   params.Add(\"signing_domain\", signingDomain)\n   params.Add(\"selector\", selector)\n\n\tclient := &http.Client{}\n\treq, _ := http.NewRequest(\"POST\", \"https://api.mailgun.net/v1/dkim/keys\", strings.NewReader(params.Encode()))\n\treq.SetBasicAuth(\"api\", apiKey)\n   req.Header.Set(\"Content-Type\", \"application/x-www-form-urlencoded\")\n\tresponse, err := client.Do(req)\n\tif err != nil {\n\t\treturn\n\t}\n\tdefer response.Body.Close()\n\n\t// Decode response.\n\terr = json.NewDecoder(response.Body).Decode(&createDomainKeyResponse)\n\treturn\n }\n```\n\n----------------------------------------\n\nTITLE: Fetching Inbox Placement Results using Ruby RestClient\nDESCRIPTION: This Ruby function uses the RestClient gem to make a GET request to the Mailgun Inbox Placement API. It includes basic authentication in the URL and returns the response.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-results-attributes.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef get_results_attributes\n  RestClient.get(\"https://api:YOUR_API_KEY\"\\\n                 \"@api.mailgun.net/v4/inbox/results/a\"\\\n                 {|response, request, result| response }\nend\n```\n\n----------------------------------------\n\nTITLE: Golang Function for Mailgun Webhook Retrieval\nDESCRIPTION: Uses the official Mailgun Go SDK to fetch click webhook information. Implements context for timeout handling and proper resource cleanup.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-webhook-deprecated.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/mailgun/mailgun-go/v3\"\n    \"time\"\n)\n\nfunc GetWebhook(domain, apiKey string) (string, error) {\n    mg := mailgun.NewMailgun(domain, apiKey)\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    return mg.GetWebhook(ctx, \"clicked\")\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Mailgun API for Failed Events using PHP\nDESCRIPTION: This PHP snippet uses the Mailgun PHP SDK to retrieve failed events. It shows how to instantiate the Mailgun client, set up query parameters, and execute the API call.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/events-failure.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Include the Autoloader (see \"Libraries\" for install instructions)\nrequire 'vendor/autoload.php';\nuse Mailgun\\Mailgun;\n\n# Instantiate the client.\n$mgClient = Mailgun::create('PRIVATE_API_KEY', 'https://API_HOSTNAME');\n$domain      = 'YOUR_DOMAIN_NAME';\n$queryString = array(\n    'begin'        => 'Wed, 1 Jan 2020 09:00:00 -0000',\n    'ascending'    => 'yes',\n    'limit'        =>  25,\n    'pretty'       => 'yes',\n    'event'        => 'failed'\n);\n\n# Issue the call to the client.\n$result = $mgClient->events()->get($domain, $queryString);\n```\n\n----------------------------------------\n\nTITLE: Accessing Inbox Placement Results with PHP cURL\nDESCRIPTION: This PHP function uses cURL to make a GET request to the Mailgun Inbox Placement API. It sets up basic authentication and returns the raw response from the API.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-results-attributes.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Currently, the PHP SDK does not support the inbox placement endpoint.\n# Consider using the following php curl function.\nfunction get_results_attributes() {\n  $ch = curl_init();\n\n  curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);\n  curl_setopt($ch, CURLOPT_USERPWD, 'api:PRIVATE_API_KEY');\n  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n\n  curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\n  curl_setopt($ch, CURLOPT_URL, 'https://api.mailgun.net/v4/inbox/results/a');\n  $result = curl_exec($ch);\n  curl_close($ch);\n\n  return $result;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Bounce using Python Requests\nDESCRIPTION: Python implementation using the requests library to add a bounce record via HTTP POST request.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/add-bounce.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef add_bounce():\n    return requests.post(\n        \"https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/bounces\",\n        auth=(\"api\", \"YOUR_API_KEY\"),\n        data={'address':'bob@example.com'})\n```\n\n----------------------------------------\n\nTITLE: Updating Mailgun Click Webhook with Ruby\nDESCRIPTION: This Ruby function demonstrates updating a Mailgun click webhook using the RestClient gem. It sends a PUT request to the Mailgun API with authentication credentials and updates the click webhook URL.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/update-webhook-deprecated.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef update_member\n  RestClient.put(\"https://api:YOUR_API_KEY\" \\\n                 \"@api.mailgun.net/v3/domains/YOUR_DOMAIN_NAME/webhooks/click\" \\\n                 \"/bar@example.com\",\n                 :url => 'http://google.com')\nend\n```\n\n----------------------------------------\n\nTITLE: Retrieving Mailgun Events using Java\nDESCRIPTION: This Java code snippet shows how to use the Mailgun Java SDK to retrieve events. It demonstrates setting up the MailgunEventsApi, configuring query options, and executing the API call.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/events-date-time-recipient.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.MailgunEventsApi;\nimport com.mailgun.model.events.EventsQueryOptions;\nimport com.mailgun.model.events.EventsResponse;\n\nimport java.time.ZoneId;\nimport java.time.ZonedDateTime;\n\n// ...\n\npublic EventsResponse getEvents() {\n    MailgunEventsApi mailgunEventsApi = MailgunClient.config(API_KEY)\n        .createApi(MailgunEventsApi.class);\n\n    EventsQueryOptions eventsQueryOptions = EventsQueryOptions.builder()\n        .begin(ZonedDateTime.now().minusDays(5))\n        .ascending(true)\n        .limit(1)\n        .build();\n\n    return mailgunEventsApi.getEvents(YOUR_DOMAIN_NAME, eventsQueryOptions);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating DKIM Keys with Java and Unirest\nDESCRIPTION: This Java implementation uses the Unirest HTTP client library to create DKIM keys via Mailgun's API. It sends a POST request with basic authentication and requires your API key, signing domain, and selector values as form fields.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/create-domain-key.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mashape.unirest.http.HttpResponse;\nimport com.mashape.unirest.http.JsonNode;\nimport com.mashape.unirest.http.Unirest;\nimport com.mashape.unirest.http.exceptions.UnirestException;\n\npublic class MGSample {\n\n    // ...\n\n    public static JsonNode createDomainKey() throws UnirestException {\n\n        HttpResponse<JsonNode> request = Unirest.POST(\"https://api.mailgun.net/v1/dkim/keys\")\n            .basicAuth(\"api\", API_KEY)\n            .field(\"signing_domain\", \"SIGNING_DOMAIN\")\n            .field(\"selector\", \"SELECTOR\")\n            .asJson();\n\n        return request.getBody();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Mailing List using Go\nDESCRIPTION: Go implementation using official Mailgun Go SDK to delete a mailing list. Includes context handling and timeout.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/remove-mailing-list.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/mailgun/mailgun-go/v3\"\n    \"time\"\n)\n\nfunc DeleteMailingList(domain, apiKey string) error {\n    mg := mailgun.NewMailgun(domain, apiKey)\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    return mg.DeleteMailingList(ctx, \"list@example.com\")\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving DKIM Keys with Go/HTTP\nDESCRIPTION: A Go implementation to get DKIM keys from the Mailgun API. This function defines response types, performs an HTTP request with basic authentication, and parses the JSON response into structured data types.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/list-all-domain-keys.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"encoding/json\"\n\t\"net/http\"\n)\n\ntype ListDomainKeyResp struct {\n\tItems []DomainKey    `json:\"items\"`\n    Page  PagingResponse `json:\"paging\"`\n}\n\ntype DomainKey struct {\n\tSigningDomain string `json:\"signing_domain\"`\n\tSelector      string `json:\"selector\"`\n\tRecord        Record `json:\"dns_record\"`\n    Page          PagingResponse `json:\"paging\"`\n}\n\ntype Record struct {\n\tActive bool     `json:\"is_active\"`\n\tCached []string `json:\"cached\"`\n\tName   string   `json:\"name\"`\n\tType   string   `json:\"record_type\"`\n\tValid  string   `json:\"valid\"`\n\tValue  string   `json:\"value\"`\n}\n\ntype PagingResponse struct {\n\tPrevious string `json:\"previous\"`\n\tFirst    string `json:\"first\"`\n\tNext     string `json:\"next\"`\n\tLast     string `json:\"last\"`\n}\n\nfunc ListDomainKeys() (listDomainKeyResp LitDomainKeyResp, err error) {\n\n\t// creating HTTP request and returning response\n\n\tclient := &http.Client{}\n\treq, _ := http.NewRequest(\"GET\", \"https://api.mailgun.net/v1/dkim/keys\", nil)\n \treq.SetBasicAuth(\"api\", apiKey)\n\tresponse, err := client.Do(req)\n\tif err != nil {\n \t\treturn\n\t}\n\tdefer response.Body.Close()\n\n\t// Decode response.\n\terr = json.NewDecoder(response.Body).Decode(&listDomainKeyResp)\n\treturn\n  }\n```\n\n----------------------------------------\n\nTITLE: Retrieving Seed List using Java Mailgun SDK\nDESCRIPTION: Java implementation using the official Mailgun SDK. Uses MailgunClient to create a MailgunSeedListApi instance for accessing the seed list endpoint.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-seed-list.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v4.MailgunSeedListApi;\nimport com.mailgun.client.MailgunClient;\nimport com.mailgun.model.seedlist.SingleSeedListResponse;\n\n// ...\n\npublic SingleSeedListResponse getSeedList() {\n    MailgunSeedListApi mailgunSeedListApi = MailgunClient.config(API_KEY)\n            .createApi(MailgunSeedListApi.class);\n\n    return mailgunSeedListApi.getSeedList(TARGET_EMAIL);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Email Template using C#\nDESCRIPTION: This C# class demonstrates how to create a new email template using the RestSharp library. It sends a POST request to the Mailgun API with the template name and description.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/template-create.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class StoreTemplatesChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (StoreTemplate ().Content.ToString ());\n    }\n\n    public static IRestResponse StoreTemplate ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.Resource = \"{domain}/templates\";\n        request.AddParameter (\"domain\", \"YOUR_DOMAIN_NAME\", ParameterType.UrlSegment);\n        request.AddParameter (\"name\", \"template.name\");\n        request.AddParameter (\"description\", \"template description\")\n        request.Method = Method.POST;\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Mailing List Member with Go\nDESCRIPTION: This Go function removes a member from a Mailgun mailing list using the mailgun-go library. It creates a new Mailgun client with your domain and API key, then calls the DeleteMember method within a context timeout.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/remove-list-member.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/mailgun/mailgun-go/v3\"\n    \"time\"\n)\n\nfunc DeleteListMember(domain, apiKey string) error {\n    mg := mailgun.NewMailgun(domain, apiKey)\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    return mg.DeleteMember(ctx, \"joe@example.com\", \"list@example.com\")\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Template Version with Ruby RestClient\nDESCRIPTION: Uses the Ruby RestClient to make a GET request to the Mailgun API endpoint. Includes the API key in the authentication header and specifies the domain name, template name, and version tag in the URL.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/version-get.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef get_template_version\n  RestClient.get \"https://api:YOUR_API_KEY\"\\\n  \"@api.mailgun.net/v3/YOUR_DOMAIN_NAME/templates/TEMPLATE_NAME/versions/VERSION_TAG\"\nend\n```\n\n----------------------------------------\n\nTITLE: Validating Email with cURL\nDESCRIPTION: Basic cURL command to validate an email address using Mailgun's API. Requires API key authentication and sends a GET request with the email address as a parameter.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-validate.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --user 'api:PRIVATE_API_KEY' -G \\\n    https://api.mailgun.net/v4/address/validate \\\n    --data-urlencode address='foo@mailgun.net'\n```\n\n----------------------------------------\n\nTITLE: Using the 'each' Helper in Handlebars Templates (JavaScript)\nDESCRIPTION: Demonstrates how to use the 'each' block helper in Handlebars to iterate through a list of services, with the resulting output showing scheduled services and their dates.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/user_manual.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{{#each user.services}}\n<li>You scheduled {{this.service}} on {{this.date}}</li>\n{{/each}}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Mailing List Validation Status in Ruby\nDESCRIPTION: This Ruby function uses the RestClient gem to make a GET request to the Mailgun API for retrieving mailing list validation status. It requires the API key and the mailing list address to be replaced with actual values.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-list-validation.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef get_mailing_list_validation_status\n  RestClient.get(\"https://api:YOUR_API_KEY\"\\\n                 \"@api.mailgun.net/v3/lists/LIST@YOUR_DOMAIN_NAME/validate\"\\\n                 {|response, request, result| response }\nend\n```\n\n----------------------------------------\n\nTITLE: Retrieving Mailgun Events via cURL\nDESCRIPTION: Basic cURL command to fetch events from Mailgun API using HTTP GET request with API key authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/events-traversal.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -G \\\n    https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/events\n```\n\n----------------------------------------\n\nTITLE: Retrieving Seed List Filters with PHP\nDESCRIPTION: This PHP function uses cURL to retrieve seed list filters from the Mailgun API. It sets up a cURL request with basic authentication and sends a GET request to the appropriate endpoint.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-seed-list-filters.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Currently, the PHP SDK does not support the inbox placement endpoint.\n# Consider using the following php curl function.\nfunction get_seed_list_filters() {\n  $ch = curl_init();\n\n  curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);\n  curl_setopt($ch, CURLOPT_USERPWD, 'api:PRIVATE_API_KEY');\n  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n\n  curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\n  curl_setopt($ch, CURLOPT_URL, 'https://api.mailgun.net/v4/inbox/seedlists/_filters');\n  $result = curl_exec($ch);\n  curl_close($ch);\n\n  return $result;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Domain Tracking with Java\nDESCRIPTION: Uses Mailgun Java SDK to get domain tracking settings. Requires the Mailgun Java client library.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-domain-tracking.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.MailgunDomainsApi;\nimport com.mailgun.model.domains.DomainTrackingResponse;\n\n// ...\n\npublic DomainTrackingResponse getDomainTracking() {\n    MailgunDomainsApi mailgunDomainsApi = MailgunClient.config(API_KEY)\n        .createApi(MailgunDomainsApi.class);\n\n    return mailgunDomainsApi.getDomainTrackingSettings(YOUR_DOMAIN_NAME);\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Mailing Lists with JavaScript\nDESCRIPTION: This JavaScript snippet uses the Mailgun.js library to retrieve mailing lists. It demonstrates asynchronous API calls with error handling. The script requires the domain name and API key to be set.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-mailing-lists.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n(async () => {\n  try {\n    const listsArray = await client.lists.list();\n    console.log('lists', listsArray);\n  } catch (error) {\n    console.error(error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Getting Mailing Lists with PHP\nDESCRIPTION: This PHP snippet demonstrates how to use the Mailgun PHP SDK to retrieve mailing lists. It requires the Mailgun library to be installed via Composer.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-mailing-lists.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Include the Autoloader (see \"Libraries\" for install instructions)\nrequire 'vendor/autoload.php';\nuse Mailgun\\Mailgun;\n\n# Instantiate the client.\n$mgClient = Mailgun::create('PRIVATE_API_KEY', 'https://API_HOSTNAME');\n\n# Issue the call to the client.\n$response = $mgClient->mailingList()->pages();\n```\n\n----------------------------------------\n\nTITLE: Decoding Quoted-Printable in C#\nDESCRIPTION: Implements a custom decoder using regex to handle quoted-printable encoded messages in C#. Uses System.Text.RegularExpressions for pattern matching.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/decode-quoted-printable.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.Text.RegularExpressions;\n\npublic class DecodeMessageSample\n{\n    // from <http://www.dpit.co.uk/decoding-quoted-printable-email-in-c/>\n    private string DecodeQuotedPrintable(string input)\n    {\n      var occurences = new Regex(@\"(=[0-9A-Z][0-9A-Z])+\", RegexOptions.Multiline);\n      var matches = occurences.Matches(input);\n      foreach (Match m in matches)\n      {\n        byte[] bytes = new byte[m.Value.Length / 3];\n        for (int i = 0; i < bytes.Length; i++)\n        {\n           string hex = m.Value.Substring(i * 3 + 1, 2);\n           int iHex = Convert.ToInt32(hex, 16);\n           bytes[i] = Convert.ToByte(iHex);\n         }\n         input = input.Replace(m.Value, Encoding.Default.GetString(bytes));\n       }\n       return input.Replace(\"=rn\", \"\");\n    }\n\n    public void doThings()\n    {\n            // ...\n        var decodedMessage = DecodeQuotedPrintable(encodedMessage);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: PHP Mailgun Statistics Integration\nDESCRIPTION: PHP implementation using Mailgun SDK to fetch domain statistics with multiple event types\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-stats.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Include the Autoloader (see \"Libraries\" for install instructions)\nrequire 'vendor/autoload.php';\nuse Mailgun\\Mailgun;\n\n# Instantiate the client.\n$mgClient = Mailgun::create('PRIVATE_API_KEY', 'https://API_HOSTNAME');\n$domain   = 'YOUR_DOMAIN_NAME';\n\n# Define your Event types\n$params = array(\n  \"event\" => [\"accepted\", \"delivered\", \"failed\", \"complained\"]\n);\n\n$response = $mgClient->stats()->total($domain, $params);\n```\n\n----------------------------------------\n\nTITLE: Adding Domain IP with C# RestSharp\nDESCRIPTION: This C# example demonstrates how to add an IP address to a Mailgun domain using the RestSharp library. It creates a RestClient with basic authentication and sends a POST request to the Mailgun API with the domain name and IP address to be added.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/add-domain-ip.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class AddDomainIPChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (AddDomainIP ().Content.ToString ());\n    }\n\n    public static IRestResponse AddDomainIP ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3/\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.Resource = \"{domain}/ips\";\n        request.AddParameter (\"domain\", \"YOUR_DOMAIN_NAME\", ParameterType.UrlSegment);\n        request.AddParameter (\"ip\", \"127.0.0.1\");\n        request.Method = Method.POST;\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Creating DKIM Keys with Python using Requests\nDESCRIPTION: This Python function uses the Requests library to create DKIM keys via Mailgun's API. It sends a POST request with the signing domain and selector as data parameters, and uses basic authentication with your API key.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/create-domain-key.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef create_domain_key():\n    return requests.post(\n        \"https://api.mailgun.net/v1/dkim/keys\",\n        data={'signing_domain': 'SIGNING_DOMAIN', 'selector': 'SELECTOR'},\n        auth=('api', 'YOUR_API_KEY'))\n```\n\n----------------------------------------\n\nTITLE: Deleting a Domain using PHP with Mailgun API\nDESCRIPTION: This PHP code snippet demonstrates how to delete a Mailgun domain using the Mailgun PHP SDK. It initializes the Mailgun client and calls the delete method on the domains endpoint.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/delete-domain.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Include the Autoloader (see \"Libraries\" for install instructions)\nrequire 'vendor/autoload.php';\nuse Mailgun\\Mailgun;\n\n# Instantiate the client.\n$mgClient = Mailgun::create('PRIVATE_API_KEY', 'https://API_HOSTNAME');\n$domain   = 'YOUR_DOMAIN_NAME';\n\n# Issue the call to the client.\n$result = $mgClient->domains()->delete($domain);\n```\n\n----------------------------------------\n\nTITLE: Java Mailgun Webhook Integration\nDESCRIPTION: Java implementation using Mailgun's official client library to fetch webhook details. Uses MailgunWebhooksApi to retrieve clicked event details.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-webhook.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.MailgunWebhooksApi;\nimport com.mailgun.enums.WebhookName;\nimport com.mailgun.model.webhooks.WebhookDetailsResult;\n\n// ...\n\npublic WebhookDetailsResult getWebhookEvent() {\n    MailgunWebhooksApi mailgunWebhooksApi = MailgunClient.config(API_KEY).createApi(MailgunWebhooksApi.class);\n\n    return mailgunWebhooksApi.getWebhookDetails(YOUR_DOMAIN_NAME, WebhookName.CLICKED);\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Seed List Filters with Java\nDESCRIPTION: This Java code snippet shows how to retrieve seed list filters using the Mailgun Java SDK. It creates a MailgunSeedListApi instance and calls the getSeedListFilters() method to fetch the filters.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-seed-list-filters.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v4.MailgunSeedListApi;\nimport com.mailgun.client.MailgunClient;\nimport com.mailgun.model.seedlist.SeedListsFiltersResponse;\n\n// ...\n\npublic SeedListsFiltersResponse getSeedListFilters() {\n    MailgunSeedListApi mailgunSeedListApi = MailgunClient.config(API_KEY)\n            .createApi(MailgunSeedListApi.class);\n\n    return mailgunSeedListApi.getSeedListFilters();\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Mailing Lists with C#\nDESCRIPTION: This C# class uses the RestSharp library to make a GET request to the Mailgun API for retrieving mailing lists. It requires the API key for authentication and includes error handling.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-mailing-lists.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class GetMailingListsChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (GetMailingLists ().Content.ToString ());\n    }\n\n    public static IRestResponse GetMailingLists ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.Resource = \"lists/pages\";\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Mailing List using Ruby with RestClient\nDESCRIPTION: This Ruby function uses the RestClient gem to validate a mailing list. It sends a POST request to the Mailgun API endpoint for list validation.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/create-list-validation.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef validate_mailing_list\n  RestClient.post(\"https://api:YOUR_API_KEY\" \\\n                  \"@api.mailgun.net/v3/lists/LIST@YOUR_DOMAIN_NAME/validate\")\nend\n```\n\n----------------------------------------\n\nTITLE: Go Email Validation Implementation\nDESCRIPTION: Complete Go implementation including response struct definition and HTTP client setup. Handles authentication, request creation, and response parsing.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-validate.rst#2025-04-21_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nimport (\n   \"encoding/json\"\n   \"net/http\"\n)\n\ntype ValidationResponse struct {\n   Address       string   `json:\"address\"`\n   IsDisposable  bool     `json:\"is_disposable_address\"`\n   IsRoleAddress bool     `json:\"is_role_address\"`\n   Reason        []string `json:\"reason\"`\n   Result        string   `json:\"result\"`\n   Risk          string   `json:\"risk\"`\n}\n\n\nfunc validateAddress(email string) (vr ValidationResponse, err error) {\n\n   // creating HTTP request and returning response\n\n   client := &http.Client{}\n   req, _ := http.NewRequest(\"GET\", \"https://api.mailgun.net/v4/address/validate\", nil)\n   req.SetBasicAuth(\"api\", apiKey)\n   param := req.URL.Query()\n   param.Add(\"address\", email)\n   req.URL.RawQuery = param.Encode()\n   response, err := client.Do(req)\n\n   if err != nil {\n       return\n   }\n\n   // decoding into validation response struct\n   err = json.NewDecoder(response.Body).Decode(&vr)\n   return\n   }\n```\n\n----------------------------------------\n\nTITLE: Ruby Bounce List Function\nDESCRIPTION: Ruby implementation using RestClient to fetch bounce information from Mailgun API.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-bounces.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef get_bounces\n  RestClient.get \"https://api:YOUR_API_KEY\"\\\n  \"@api.mailgun.net/v3/YOUR_DOMAIN_NAME/bounces\"\nend\n```\n\n----------------------------------------\n\nTITLE: Retrieving Bulk Validation Preview Status using Mailgun Java SDK\nDESCRIPTION: This Java code snippet uses the Mailgun Java SDK to create an instance of MailgunEmailVerificationApi and call the getBulkVerificationPreviewStatus method to retrieve the bulk validation preview status.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-bulk-preview.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v4.MailgunEmailVerificationApi;\nimport com.mailgun.client.MailgunClient;\nimport com.mailgun.model.verification.BulkVerificationPreviewResponse;\n\n// ...\n\npublic BulkVerificationPreviewResponse getBulkPreview() {\n    MailgunEmailVerificationApi mailgunEmailVerificationApi = MailgunClient.config(API_KEY)\n            .createApi(MailgunEmailVerificationApi.class);\n\n    return mailgunEmailVerificationApi.getBulkVerificationPreviewStatus(LIST_NAME);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Seed List using cURL\nDESCRIPTION: Basic cURL command to create a seed list using Mailgun's API with authentication\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/create-seed-list.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://api.mailgun.net/v4/inbox/seedlists \\\n  -F 'name=list' \\\n  --user 'api:<YOUR_API_KEY>'\n```\n\n----------------------------------------\n\nTITLE: Fetching Click Webhook Details with Java Mailgun Client\nDESCRIPTION: Uses the Mailgun Java SDK to retrieve click webhook information. Implements the MailgunWebhooksApi interface to fetch webhook details for a specific domain.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-webhook-deprecated.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.MailgunWebhooksApi;\nimport com.mailgun.enums.WebhookName;\nimport com.mailgun.model.webhooks.WebhookDetailsResult;\n\n// ...\n\npublic WebhookDetailsResult getWebhookEvent() {\n    MailgunWebhooksApi mailgunWebhooksApi = MailgunClient.config(API_KEY)\n        .createApi(MailgunWebhooksApi.class);\n\n    return mailgunWebhooksApi.getWebhookDetails(YOUR_DOMAIN_NAME, WebhookName.CLICKED);\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Domain using Python with Mailgun API\nDESCRIPTION: This Python function shows how to delete a Mailgun domain using the requests library. It sends a DELETE request to the Mailgun API endpoint with the necessary authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/delete-domain.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef delete_domain():\n    return requests.delete(\n        \"https://api.mailgun.net/v3/domains/example.mailgun.org\",\n        auth=(\"api\", \"YOUR_API_KEY\"))\n```\n\n----------------------------------------\n\nTITLE: Adding Domain IP with Go Mailgun Client\nDESCRIPTION: This Go function demonstrates how to add an IP address to a Mailgun domain using the Mailgun Go SDK. It initializes a new Mailgun client with the domain and API key, creates a context with timeout, and calls the AddDomainIP method.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/add-domain-ip.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/mailgun/mailgun-go/v3\"\n    \"time\"\n)\n\nfunc AddDomainIPS(domain, apiKey string) error {\n    mg := mailgun.NewMailgun(domain, apiKey)\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    return mg.AddDomainIP(ctx, \"127.0.0.1\")\n}\n```\n\n----------------------------------------\n\nTITLE: Canceling Bulk Email Verification Preview in C#\nDESCRIPTION: This C# class shows how to cancel a bulk email verification preview using the RestSharp library. It sends a DELETE request to the Mailgun API v4 endpoint with basic authentication and returns the response.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/delete-bulk-preview.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class DeleteBulkPreview\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (DeletePreview ().Content.ToString ());\n    }\n\n    public static IRestResponse DeletePreview()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v4\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.Resource = \"address/validate/preview/{list}\";\n        request.AddParameter (\"list\", \"LIST_NAME\",\n                              ParameterType.UrlSegment);\n        request.Method = Method.DELETE;\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Mailgun Templates using C# RestSharp\nDESCRIPTION: This C# class uses the RestSharp library to list Mailgun templates. It creates a RestClient with basic authentication and sends a GET request to the Mailgun API.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/template-get-all.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class ListTemplatesChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (ListTemplates ().Content.ToString ());\n    }\n\n    public static IRestResponse ListTemplates ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.AddParameter (\"domain\", \"YOUR_DOMAIN_NAME\", ParameterType.UrlSegment);\n        request.AddParameter (\"limit\", 10);\n        request.Resource = \"/{domain}/templates\";\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Complaint to Mailgun Suppression List using PHP\nDESCRIPTION: This PHP snippet demonstrates how to add a complaint to the Mailgun suppression list using the Mailgun PHP SDK. It initializes the Mailgun client and uses the suppressions() method to add a complaint.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/add-complaint.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Include the Autoloader (see \"Libraries\" for install instructions)\nrequire 'vendor/autoload.php';\nuse Mailgun\\Mailgun;\n\n# Instantiate the client.\n$mgClient = Mailgun::create('PRIVATE_API_KEY', 'https://API_HOSTNAME');\n$domain   = 'YOUR_DOMAIN_NAME';\n$recipient = 'bob@example.com';\n\n# Issue the call to the client.\n$result = $mgClient->suppressions()->complaints()->create($domain, $recipient);\n```\n\n----------------------------------------\n\nTITLE: Creating Template Versions with Mailgun API in JavaScript\nDESCRIPTION: This JavaScript example demonstrates how to create a new template version using the Mailgun.js library. It configures a Mailgun client and sends a request to create a version with description, template content, tag, comment, and active status.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/template-create-version.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\nconst TEMPLATE_NAME = 'template.name';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n(async () => {\n  try {\n    const createdTemplateVersion = await client.domains.domainTemplates.createVersion(\n      DOMAIN,\n      TEMPLATE_NAME,\n      {\n        description: 'template description',\n        template: '{{fname}} {{lname}}',\n        tag: 'v2',\n        comment: 'comment',\n        active: 'yes'\n      }\n    );\n    console.log('createdTemplateVersion', createdTemplateVersion);\n  } catch (error) {\n    console.error(error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Seed List Attributes using Java Mailgun SDK\nDESCRIPTION: This Java code snippet uses the Mailgun Java SDK to fetch seed list attributes. It creates a MailgunSeedListApi instance with the API key and calls the getSeedListsAttributes() method to retrieve the data.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-seed-list-attributes.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v4.MailgunSeedListApi;\nimport com.mailgun.client.MailgunClient;\nimport com.mailgun.model.seedlist.SeedListsAttributesResponse;\n\n// ...\n\npublic SeedListsAttributesResponse getSeedListAttributes() {\n    MailgunSeedListApi mailgunSeedListApi = MailgunClient.config(API_KEY)\n            .createApi(MailgunSeedListApi.class);\n\n    return mailgunSeedListApi.getSeedListsAttributes();\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Email Templates with PHP\nDESCRIPTION: Implements a PHP function to fetch a template using cURL since the PHP SDK doesn't support the Templates endpoint. The function sets up authentication and makes a GET request to the Mailgun API.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/template-get.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Currently, the PHP SDK does not support the Templates endpoint.\n# Consider using the following php curl function.\nfunction get_template() {\n\n  $ch = curl_init();\n\n  curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);\n  curl_setopt($ch, CURLOPT_USERPWD, 'api:PRIVATE_API_KEY');\n  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n\n  curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\n  curl_setopt($ch, CURLOPT_URL, 'https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/templates/TEMPLATE_NAME');\n\n  $result = curl_exec($ch);\n  curl_close($ch);\n\n  return $result;\n}\n```\n\n----------------------------------------\n\nTITLE: C# Whitelist Implementation\nDESCRIPTION: C# implementation using RestSharp to interact with Mailgun's whitelist API. Includes authentication and request configuration.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-whitelists.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class GetBouncesChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (GetBounces ().Content.ToString ());\n    }\n\n    public static IRestResponse GetBounces ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.AddParameter (\"domain\", \"YOUR_DOMAIN_NAME\", ParameterType.UrlSegment);\n        request.Resource = \"{domain}/whitelists\";\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Mailgun Templates using Python Requests\nDESCRIPTION: This Python function uses the requests library to list Mailgun templates. It sends a GET request to the Mailgun API with basic authentication and a limit parameter.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/template-get-all.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef list_templates():\n    return requests.get(\n        \"https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/templates\",\n        auth=(\"api\", \"YOUR_API_KEY\"),\n        params={\"limit\": 10})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Mailing List Validation Status in Java\nDESCRIPTION: This Java code snippet shows how to use the Mailgun Java SDK to get the status of a mailing list verification job. It requires the API key and mailing list address to be set as constants.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-list-validation.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.MailgunMailingListApi;\nimport com.mailgun.model.mailing.lists.MailingListVerificationStatusResponse;\n\n// ...\n\npublic MailingListVerificationStatusResponse getMailingListValidation() {\n    MailgunMailingListApi mailgunMailingListApi = MailgunClient.config(API_KEY)\n        .createApi(MailgunMailingListApi.class);\n\n    return mailgunMailingListApi.getMailingListVerificationJobStatus(MAILING_LIST_ADDRESS);\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Webhook using Ruby\nDESCRIPTION: Ruby implementation using RestClient to delete a webhook. Uses basic authentication with API key.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/delete-webhook-deprecated.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef delete_domain\n  RestClient.delete \"https://api:YOUR_API_KEY\"\\\n  \"@api.mailgun.net/v3/domains/YOUR_DOMAIN_NAME/webhooks/click\"\nend\n```\n\n----------------------------------------\n\nTITLE: Sending Untracked Emails with Mailgun using cURL\nDESCRIPTION: This bash snippet demonstrates how to send an email with tracking disabled using cURL to interact directly with the Mailgun API. It sets the 'o:tracking' parameter to False to disable tracking features.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-message-no-tracking.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' \\\n    https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/messages \\\n    -F from='Sender Bob <sbob@YOUR_DOMAIN_NAME>' \\\n    -F to='alice@example.com' \\\n    -F subject='Hello' \\\n    -F text='Testing some Mailgun awesomness!' \\\n    -F o:tracking=False\n```\n\n----------------------------------------\n\nTITLE: Retrieving Domains with Java Mailgun Client\nDESCRIPTION: This Java code snippet shows how to use the Mailgun Java client to retrieve a list of domains. It demonstrates creating a MailgunDomainsApi instance, building a filter with parameters, and making the API call.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-domains.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.MailgunDomainsApi;\nimport com.mailgun.enums.DomainState;\nimport com.mailgun.model.domains.DomainListResponse;\nimport com.mailgun.model.domains.DomainsParametersFilter;\n\n// ...\n\npublic DomainListResponse getDomains() {\n    MailgunDomainsApi mailgunDomainsApi = MailgunClient.config(API_KEY)\n        .createApi(MailgunDomainsApi.class);\n\n    DomainsParametersFilter filter = DomainsParametersFilter.builder()\n        .skip(0)\n        .limit(3)\n        .state(DomainState.ACTIVE)\n        .build();\n\n    return mailgunDomainsApi.getDomainsList(filter);\n}\n```\n\n----------------------------------------\n\nTITLE: Go Mailgun Events API Integration\nDESCRIPTION: Go implementation using official Mailgun Go SDK to fetch and process different types of events with proper error handling and context management.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/events-traversal.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"fmt\"\n    \"github.com/mailgun/mailgun-go/v3\"\n    \"github.com/mailgun/mailgun-go/v3/events\"\n    \"time\"\n)\n\nfunc PrintEvents(domain, apiKey string) error {\n    mg := mailgun.NewMailgun(domain, apiKey)\n\n    // Create an iterator\n    it := mg.ListEvents(nil)\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    // Iterate through all the pages of events\n    var page []mailgun.Event\n    for it.Next(ctx, &page) {\n        for _, event := range page {\n            switch e := event.(type) {\n            case *events.Accepted:\n                fmt.Printf(\"Accepted ID: %s\", e.Message.Headers.MessageID)\n            case *events.Rejected:\n                fmt.Printf(\"Rejected Reason: %s\", e.Reject.Reason)\n            // Add other event types here\n            }\n            fmt.Printf(\"%+v\\n\", event.GetTimestamp())\n        }\n    }\n\n    // Did iteration end because of an error?\n    if it.Err() != nil {\n        return it.Err()\n    }\n    return nil\n}\n```\n\n----------------------------------------\n\nTITLE: Ruby Mailgun Statistics Integration\nDESCRIPTION: Ruby implementation using RestClient to fetch domain statistics with URL parameter construction\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-stats.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef get_stats\n  url_params = {}\n  url_params[:duration] = \"1m\"\n  url_params[:event] = []\n  url_params[:event] << \"accepted\"\n  url_params[:event] << \"delivered\"\n  url_params[:event] << \"failed\"\n  query_string = url_params.collect {|k, v| \"#{k.to_s}=#{CGI::escape(v.to_s)}\"}.join(\"&\")\n  RestClient.get \"https://api:YOUR_API_KEY\"\\\n  \"@api.mailgun.net/v3/YOUR_DOMAIN_NAME/stats/total?#{query_string}\"\nend\n```\n\n----------------------------------------\n\nTITLE: Deleting a Mailgun Template using Go\nDESCRIPTION: Go function that uses the Mailgun Go SDK to delete a template. Creates a Mailgun client with your domain and API key, then calls the DeleteTemplate method with a context for timeout handling.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/template-delete.rst#2025-04-21_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc DeleteTemplate(domain, apiKey string) error {\n    mg := mailgun.NewMailgun(domain, apiKey)\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    return mg.DeleteTemplate(ctx, \"TEMPLATE_NAME\")\n}\n```\n\n----------------------------------------\n\nTITLE: Go Mailgun Statistics Integration\nDESCRIPTION: Go implementation using official Mailgun SDK to fetch domain statistics with context and timeout handling\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-stats.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/mailgun/mailgun-go/v3\"\n    \"time\"\n)\n\nfunc GetStats(domain, apiKey string) ([]mailgun.Stats, error) {\n    mg := mailgun.NewMailgun(domain, apiKey)\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    return mg.GetStats(ctx, []string{\"accepted\", \"delivered\", \"failed\"}, &mailgun.GetStatOptions{\n        Duration: \"1m\",\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: GET Whitelist Records Response\nDESCRIPTION: Example response showing the list of whitelisted addresses and domains with pagination details.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-suppressions.rst#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\n200\n{\n  \"items\":\n    [\n      {\n        \"value\": \"alice@example.com\",\n        \"reason\": \"reason of white listing\"\n        \"type\": \"address\",\n        \"createdAt\": \"Fri, 21 Oct 2011 11:02:55 UTC\"\n      },\n      {\n        \"value\": \"test.com\",\n        \"reason\": \"reason of white listing\"\n        \"type\": \"domain\",\n        \"createdAt\": \"Fri, 21 Oct 2012 11:02:56 UTC\"\n      }\n      ...\n    ],\n  \"paging\":\n    {\n      \"first\": <first page URL>,\n      \"next\": <next page URL>,\n      \"previous\": <previous page URL>,\n      \"last\": <last page URL>\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Webhooks using Go SDK\nDESCRIPTION: Go implementation using official Mailgun SDK with context and timeout\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-webhooks.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/mailgun/mailgun-go/v3\"\n    \"time\"\n)\n\nfunc ListWebhooks(domain, apiKey string) (map[string]string, error) {\n    mg := mailgun.NewMailgun(domain, apiKey)\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    return mg.ListWebhooks(ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Seed Lists with C# RestSharp\nDESCRIPTION: This C# class demonstrates how to retrieve seed lists using the RestSharp library. It creates a RestClient with basic authentication, sends a GET request to the v4 inbox/seedlists endpoint, and returns the response.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-seed-lists.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class InboxPlacementTests\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (GetSeedLists ().Content.ToString ());\n    }\n\n    public static IRestResponse GetSeedLists ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v4\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.Resource = \"/inbox/seedlists\";\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Unsubscribes with Java Mailgun Client\nDESCRIPTION: Java implementation to add an email address to the Mailgun unsubscribe suppression table. Uses the Mailgun Java SDK to create a suppression API instance and builds an unsubscribe request with the specified email address and tag.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/add-unsubscribe-tag.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.suppression.MailgunSuppressionUnsubscribeApi;\nimport com.mailgun.model.suppression.SuppressionResponse;\nimport com.mailgun.model.suppression.unsubscribe.UnsubscribeSingleItemRequest;\n\nimport java.time.ZonedDateTime;\n\n// ...\n\npublic SuppressionResponse addUnsubscribe() {\n    MailgunSuppressionUnsubscribeApi suppressionUnsubscribeApi = MailgunClient.config(API_KEY)\n        .createApi(MailgunSuppressionUnsubscribeApi.class);\n\n    UnsubscribeSingleItemRequest unsubscribeSingleItemRequest = UnsubscribeSingleItemRequest.builder()\n        .address(\"bob@example.com\")\n        .tag(\"tag1\")\n        .createdAt(ZonedDateTime.now())\n        .build();\n\n    return suppressionUnsubscribeApi.addAddressToUnsubscribeTable(YOUR_DOMAIN_NAME, unsubscribeSingleItemRequest);\n}\n```\n\n----------------------------------------\n\nTITLE: Canceling Mailing List Validation using Python\nDESCRIPTION: This Python function uses the requests library to send a DELETE request to the Mailgun API for canceling mailing list validation. It includes authentication with the API key.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/delete-list-validation.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef cancel_mailing_list_validation():\n    return requests.delete(\n        (\"https://api.mailgun.net/v3/lists/LIST@YOUR_DOMAIN_NAME/validate\"),\n        auth=('api', 'YOUR_API_KEY'))\n```\n\n----------------------------------------\n\nTITLE: Updating Domain Connection Settings with Python\nDESCRIPTION: Uses the Python requests library to send a PUT request to update domain connection settings. Sets 'require_tls' to True and 'skip_verification' to False for a specified domain.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/update-connection.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef update_connection():\n    return requests.put(\n        (\"https://api.mailgun.net/v3/domains/YOUR_DOMAIN_NAME/connection\"),\n        auth=('api', 'YOUR_API_KEY'),\n        data={'require_tls': True,\n              'skip_verification': False})\n```\n\n----------------------------------------\n\nTITLE: Delete Webhook using PHP\nDESCRIPTION: PHP implementation using Mailgun's SDK to delete a webhook. Requires composer autoloader and API key configuration.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/delete-webhook-deprecated.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Include the Autoloader (see \"Libraries\" for install instructions)\nrequire 'vendor/autoload.php';\nuse Mailgun\\Mailgun;\n\n# Instantiate the client.\n$mgClient = Mailgun::create('PRIVATE_API_KEY', 'https://API_HOSTNAME');\n$domain   = 'YOUR_DOMAIN_NAME';\n$webhook  = 'delivered';\n\n# Issue the call to the client.\n$result = $mgClient->webhooks()->delete($domain, $webhook);\n```\n\n----------------------------------------\n\nTITLE: Adding Complaint to Mailgun Suppression List using Java\nDESCRIPTION: This Java code snippet shows how to add a complaint to the Mailgun suppression list using the Mailgun Java SDK. It creates a MailgunSuppressionComplaintsApi instance and uses it to add an address to the complaints list.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/add-complaint.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.suppression.MailgunSuppressionComplaintsApi;\nimport com.mailgun.model.suppression.SuppressionResponse;\nimport com.mailgun.model.suppression.complaints.ComplaintsSingleItemRequest;\n\nimport java.time.ZonedDateTime;\n\n// ...\n\npublic SuppressionResponse addComplaint() {\n    MailgunSuppressionComplaintsApi suppressionComplaintsApi = MailgunClient.config(API_KEY)\n        .createApi(MailgunSuppressionComplaintsApi.class);\n\n    ComplaintsSingleItemRequest complaintsSingleItemRequest = ComplaintsSingleItemRequest.builder()\n        .address( \"bob@example.com\")\n        .createdAt(ZonedDateTime.now())\n        .build();\n\n    return suppressionComplaintsApi.addAddressToComplaintsList(YOUR_DOMAIN_NAME, complaintsSingleItemRequest);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating DKIM Keys with cURL in Bash\nDESCRIPTION: This snippet demonstrates how to create DKIM keys using cURL in a Bash environment. It makes a POST request to the Mailgun API with authentication and requires your API key, signing domain, and selector values.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/create-domain-key.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user `api:YOUR_API_KEY' -X POST \\\n    https://api.mailgun.net/v1/dkim/keys -F signing_domain=SIGNING_DOMAIN -F selector=SELECTOR\n```\n\n----------------------------------------\n\nTITLE: Fetching IP Pools with Mailgun JavaScript Client\nDESCRIPTION: Uses the official Mailgun JavaScript client to retrieve IP pools. Demonstrates async/await pattern with error handling. Requires form-data and mailgun.js dependencies.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/ip_pools/get_ip_pools_list.rst#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n(async () => {\n  try {\n    const ipPoolsList = await client.ip_pools.list();\n    console.log('ipPoolsList', ipPoolsList);\n  } catch (error) {\n    console.error(error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Updating Mailgun Template Version using JavaScript SDK\nDESCRIPTION: This JavaScript code uses the Mailgun.js SDK to update a template version. It creates a Mailgun client, sets up the necessary parameters, and calls the updateVersion method of the domainTemplates API.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/version-update.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\nconst TEMPLATE_NAME = 'template.name';\nconst VERSION_TAG = 'v2';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n(async () => {\n  try {\n    const updatedTemplateVersion = await client.domains.domainTemplates.updateVersion(\n      DOMAIN,\n      TEMPLATE_NAME,\n      VERSION_TAG,\n      {\n      template: '{{fname}} {{lname}}',\n      comment: \"Updated version comment\",\n      active: 'yes'\n      }\n    );\n    console.log('updatedTemplateVersion', updatedTemplateVersion);\n  } catch (error) {\n    console.error(error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Creating Email Template using Java\nDESCRIPTION: This Java code snippet shows how to create a new email template using the Mailgun Java SDK. It uses the MailgunTemplatesApi to send a POST request with the template name and description.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/template-create.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.MailgunTemplatesApi;\nimport com.mailgun.model.templates.TemplateRequest;\nimport com.mailgun.model.templates.TemplateWithMessageResponse;\n\n// ...\n\npublic TemplateWithMessageResponse createTemplate() {\n    MailgunTemplatesApi mailgunTemplatesApi = MailgunClient.config(API_KEY)\n        .createApi(MailgunTemplatesApi.class);\n\n    TemplateRequest request = TemplateRequest.builder()\n        .name(\"template.name\")\n        .description(\"template description\")\n        .build();\n\n    return mailgunTemplatesApi.storeNewTemplate(YOUR_DOMAIN_NAME, request);\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Domain IPs using Ruby RestClient\nDESCRIPTION: This Ruby function uses the RestClient to make a GET request to the Mailgun API for retrieving domain IPs. It includes the API key in the URL for authentication and specifies the domain name.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-domain-ips.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef get_domain_ips\n  RestClient.get(\"https://api:YOUR_API_KEY\"\\\n                 \"@api.mailgun.net/v3/domains/YOUR_DOMAIN_NAME/ips\"\\\n                 {|response, request, result| response }\nend\n```\n\n----------------------------------------\n\nTITLE: Response Structure for Route Creation in JavaScript\nDESCRIPTION: Shows the JSON response structure when a route is successfully created through the Mailgun API. The response includes route details such as description, creation timestamp, actions, priority, and ID.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/user_manual.rst#2025-04-21_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"message\": \"Route has been created\",\n  \"route\": {\n      \"description\": \"Sample route\",\n      \"created_at\": \"Wed, 15 Feb 2012 13:03:31 GMT\",\n      \"actions\": [\n          \"forward(\\\"http://myhost.com/messages/\\\")\",\n          \"stop()\"\n      ],\n      \"priority\": 0,\n      \"expression\": \"match_recipient(\\\".*@samples.mailgun.org\\\")\",\n      \"id\": \"4f3bad2335335426750048c6\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Complaint to Mailgun Suppression List using Ruby\nDESCRIPTION: This Ruby function demonstrates how to add a complaint to the Mailgun suppression list using the RestClient library. It sends a POST request to the Mailgun API with the required authentication and address data.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/add-complaint.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef add_complaint\n  RestClient.post \"https://api:YOUR_API_KEY\"\\\n  \"@api.mailgun.net/v3/YOUR_DOMAIN_NAME/complaints\",\n  :address => 'bob@example.com'\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Seed Lists with Ruby RestClient\nDESCRIPTION: Ruby function that creates a seed list using the RestClient library. The function prepares data with sending domains and makes a PUT request to the Mailgun API endpoint, authenticating with the API key in the URL.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/update-seed-list.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef create_seed_list\n  data = {'sending_domains'=> 'domain.com' }\n  RestClient.put(\"https://api:YOUR_API_KEY\" \\\n                  \"@api.mailgun.net/v4/inbox/seedlists/TARGET_EMAIL\",\n                  fields_hash.merge(data))\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Template Version with Python Requests\nDESCRIPTION: This Python function uses the requests library to create a new template version. It sends a POST request to the Mailgun API with authentication and template details as data parameters.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/version-create.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef store_template_version():\n    return requests.post(\n        \"https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/templates/TEMPLATE_NAME/versions\",\n        auth=(\"api\", \"YOUR_API_KEY\"),\n        data={'tag': 'v0',\n              'template': '{{fname}} {{lname}}',\n              'engine': 'handlebars'})\n```\n\n----------------------------------------\n\nTITLE: Performing Bulk Validation with cURL in PHP\nDESCRIPTION: This PHP function uses cURL to make a GET request to Mailgun's API for bulk email validation. It requires the private API key and returns the raw result from the API. This is a workaround as the PHP SDK doesn't support the v4 Validations endpoint.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-bulk-validation.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Currently, the PHP SDK does not support the v4 Validations endpoint.\n# Consider using the following php curl function.\nfunction get_bulk_validation() {\n  $ch = curl_init();\n\n  curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);\n  curl_setopt($ch, CURLOPT_USERPWD, 'api:PRIVATE_API_KEY');\n  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n\n  curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\n  curl_setopt($ch, CURLOPT_URL, 'https://api.mailgun.net/v4/address/validate/bulk/LIST_NAME');\n  $result = curl_exec($ch);\n  curl_close($ch);\n\n  return $result;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Mailing List Validation Status in Ruby\nDESCRIPTION: This Ruby function uses the RestClient to make a GET request to Mailgun's API for fetching the validation status of a mailing list. It requires the API key and list name as parameters.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-bulk-validation.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef get_mailing_list_validation_status\n  RestClient.get(\"https://api:YOUR_API_KEY\"\\\n                 \"@api.mailgun.net/v4/address/validate/bulk/LIST_NAME\"\\\n                 {|response, request, result| response }\nend\n```\n\n----------------------------------------\n\nTITLE: Go Domain Info Retrieval with Official SDK\nDESCRIPTION: Golang implementation using the official Mailgun Go SDK with context and timeout handling\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-domain.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/mailgun/mailgun-go/v3\"\n    \"time\"\n)\n\nfunc GetDomain(domain, apiKey string) (mailgun.DomainResponse, error) {\n    mg := mailgun.NewMailgun(domain, apiKey)\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    return mg.GetDomain(ctx, domain)\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Single Spam Complaint in Mailgun API\nDESCRIPTION: GET request to fetch a single spam complaint by email address. Useful for checking if a particular user has complained.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-complaints.rst#2025-04-21_snippet_1\n\nLANGUAGE: url\nCODE:\n```\nGET /<domain>/complaints/<address>\n```\n\n----------------------------------------\n\nTITLE: Adding Unsubscribe Records using cURL in Bash\nDESCRIPTION: This snippet shows how to add an email address to the unsubscribe list for all tags using a cURL command. It sends a POST request to the Mailgun API with API key authentication and provides the email address and wildcard tag as form parameters.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/add-unsubscribe-all.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' \\\n    https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/unsubscribes \\\n    -F address='bob@example.com' \\\n    -F tag='*'\n```\n\n----------------------------------------\n\nTITLE: Domain List Response Example\nDESCRIPTION: Sample JSON response showing domain list with details like creation date, status, and configuration.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-domains.rst#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"items\": [\n\t{\n\t    \"created_at\": \"Mon, 30 Sep 2019 16:20:48 GMT\",\n\t    \"id\": \"55a55f40803267158aa113e8\",\n\t    \"is_disabled\": false,\n\t    \"name\": \"samples.mailgun.org\",\n\t    \"require_tls\": false,\n\t    \"skip_verification\": false,\n\t    \"smtp_login\": \"postmaster@samples.mailgun.org\",\n\t    \"spam_action\": \"disabled\",\n\t    \"state\": \"active\",\n\t    \"type\": \"sandbox\",\n\t    \"web_prefix\": \"email\",\n\t    \"web_scheme\": \"http\",\n\t    \"wildcard\": false\n\t}\n    ],\n    \"total_count\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Seed List using Ruby\nDESCRIPTION: Ruby implementation using RestClient to create a seed list. Demonstrates basic POST request with authentication and data parameters.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/create-seed-list.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef create_seed_list\n  data = {'name'=> 'list' }\n  RestClient.post(\"https://api:YOUR_API_KEY\" \\\n                  \"@api.mailgun.net/v4/inbox/seedlists\",\n                  fields_hash.merge(data))\nend\n```\n\n----------------------------------------\n\nTITLE: Deleting Inbox Placement Test using cURL (Bash)\nDESCRIPTION: This snippet demonstrates how to delete an inbox placement test using a cURL command in Bash. It sends a DELETE request to the Mailgun API with basic authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/delete-seed-list.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -X DELETE -G \\\n    https://api.mailgun.net/v4/inbox/seedlists/TARGET_EMAIL\n```\n\n----------------------------------------\n\nTITLE: Retrieving Mailgun Routes using Ruby\nDESCRIPTION: This Ruby function demonstrates how to retrieve Mailgun routes using the RestClient library. It sends a GET request to the Mailgun API with authentication and pagination parameters.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-routes.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef get_routes\n  RestClient.get \"https://api:YOUR_API_KEY\"\\\n  \"@api.mailgun.net/v3/routes\", :params => {\n    :skip => 1,\n    :limit => 1\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Fetching Inbox Placement Results with Java and Unirest\nDESCRIPTION: This Java code snippet uses the Unirest library to make a GET request to the Mailgun API for retrieving inbox placement results. It includes basic authentication and returns the response as a JsonNode object.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-result.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mashape.unirest.http.HttpResponse;\nimport com.mashape.unirest.http.JsonNode;\nimport com.mashape.unirest.http.Unirest;\nimport com.mashape.unirest.http.exceptions.UnirestException;\n\npublic class MGSample {\n\n    // ...\n\n    public static JsonNode getResults() throws UnirestException {\n\n        HttpResponse<JsonNode> request = Unirest.get(\"https://api.mailgun.net/v4/inbox/results/{UUID}\")\n            .basicAuth(\"api\", API_KEY)\n            .asJson();\n\n        return request.getBody();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving IP Information using JavaScript Mailgun SDK\nDESCRIPTION: This JavaScript code snippet uses the Mailgun.js SDK to retrieve information about a specific IP address. It initializes the Mailgun client with the API key and uses an async function to call the get method of the ips API.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-ip.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n(async () => {\n  try {\n    const ip = await client.ips.get('127.0.0.1'); // use interested ip instead of 127.0.0.1\n    console.log('ip', ip);\n  } catch (error) {\n    console.error(error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Listing Template Versions with C# and RestSharp\nDESCRIPTION: A C# class that demonstrates retrieving template versions using the RestSharp library. Creates a REST client with basic authentication and executes a GET request to the template versions endpoint.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/version-get-all.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class ListTemplateVersionsChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (ListTemplateVersions ().Content.ToString ());\n    }\n\n    public static IRestResponse GetTemplateVersion ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.AddParameter (\"domain\", \"YOUR_DOMAIN_NAME\", ParameterType.UrlSegment);\n        request.AddParameter (\"name\", \"TEMPLATE_NAME\", ParameterType.UrlSegment);\n        request.Resource = \"/{domain}/templates/{name}/versions\";\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Decoding Quoted-Printable in Go\nDESCRIPTION: Uses Go's mime/quotedprintable package to decode messages. Implements error handling and uses io/ioutil for reading the decoded content.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/decode-quoted-printable.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n   \"io/ioutil\"\n   \"mime/quotedprintable\"\n   \"strings\"\n)\n\nfunc DecodeMessage(encodedMessage string) (string) {\n   decodedMessage, err := ioutil.ReadAll(quotedPrintable.NewReader(strings.NewReader(encodedMessage)))\n   if err != nil {\n       panic(err);\n   }\n   return decodedMessage\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Unsubscribe Records using C# with RestSharp\nDESCRIPTION: This C# example uses the RestSharp library to add an email address to the unsubscribe list. It configures a REST client with basic authentication, builds a request with the required parameters including the email address and wildcard tag, then executes the request.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/add-unsubscribe-all.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class AddUnsubscribeAllChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (UnsubscribeFromAll ().Content.ToString ());\n    }\n\n    public static IRestResponse UnsubscribeFromAll ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.Resource = \"{domain}/unsubscribes\";\n        request.AddParameter (\"domain\", \"YOUR_DOMAIN_NAME\", ParameterType.UrlSegment);\n        request.AddParameter (\"address\", \"bob@example.com\");\n        request.AddParameter (\"tag\", \"*\");\n        request.Method = Method.POST;\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting All Templates Using PHP\nDESCRIPTION: PHP function that uses cURL to delete all templates for a Mailgun domain. The SDK doesn't support the Templates endpoint, so this uses a direct API call with cURL instead.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/template-delete-all.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Currently, the PHP SDK does not support the Templates endpoint.\n# Consider using the following php curl function.\nfunction delete_all_templates() {\n\n  $ch = curl_init();\n\n  curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);\n  curl_setopt($ch, CURLOPT_USERPWD, 'api:PRIVATE_API_KEY');\n  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n\n  curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');\n  curl_setopt($ch, CURLOPT_URL, 'https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/templates');\n\n  $result = curl_exec($ch);\n  curl_close($ch);\n\n  return $result;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Webhooks using C# RestSharp\nDESCRIPTION: C# implementation using RestSharp client with basic authentication to fetch webhooks\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-webhooks.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class GetWebhooksChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (GetWebhooks ().Content.ToString ());\n    }\n\n    public static IRestResponse GetWebhooks ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.AddParameter (\"domain\", \"YOUR_DOMAIN_NAME\", ParameterType.UrlSegment);\n        request.Resource = \"domains/{domain}/webhooks\";\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Mailing List Validation Status in Python\nDESCRIPTION: This Python function uses the requests library to perform a GET request to Mailgun's API for retrieving the validation status of a mailing list. It requires the API key and list name as parameters.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-bulk-validation.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef get_mailing_list_validation_status():\n    return requests.get(\n        \"https://api.mailgun.net/v4/address/validate/bulk/LIST_NAME\",\n        auth=('api', 'YOUR_API_KEY'))\n```\n\n----------------------------------------\n\nTITLE: Retrieving Email Templates with Go\nDESCRIPTION: Uses the Mailgun Go SDK to fetch a template. This function creates a new Mailgun client with domain and API key, then makes a request with a timeout context to get the specified template.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/template-get.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc GetTemplate(domain, apiKey string) (mailgun.Template, error) {\n    mg := mailgun.NewMailgun(domain, apiKey)\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    return mg.GetTemplate(ctx, \"my-template\")\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Mailgun API for Rejected or Failed Events using Ruby\nDESCRIPTION: This Ruby function uses the RestClient library to query the Mailgun API for rejected or failed events. It shows how to set up the API endpoint, use basic authentication, and add query parameters.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/events-failure.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef get_logs\n  RestClient.get \"https://api:YOUR_API_KEY\"\\\n  \"@api.mailgun.net/v3/YOUR_DOMAIN_NAME/events\",\n  :params => {\n    :\"event\" => 'rejected OR failed'\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: C# Email Validation with RestSharp\nDESCRIPTION: C# implementation using RestSharp client for email validation. Sets up authentication and request parameters for the validation endpoint.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-validate.rst#2025-04-21_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class GetValidateChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (GetValidate ().Content.ToString ());\n    }\n\n    public static IRestResponse GetValidate ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v4\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"PRIVATE_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.Resource = \"/address/validate\";\n        request.AddParameter (\"address\", \"foo@mailgun.net\");\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Template Version with cURL in Bash\nDESCRIPTION: This snippet demonstrates how to create a new template version using cURL in Bash. It sends a POST request to the Mailgun API with authentication, template content, tag, and engine type.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/version-create.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -X POST \\\n  https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/templates/TEMPLATE_NAME/versions \\\n  -F tag='v0' \\\n  -F template='{{fname}} {{lname}}' \\\n  -F engine='handlebars'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Complaint Data using Mailgun Java SDK\nDESCRIPTION: This Java code snippet shows how to fetch complaint information for a specific email address using the Mailgun Java SDK. It uses the MailgunSuppressionComplaintsApi to make the API call.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-complaint.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.suppression.MailgunSuppressionComplaintsApi;\nimport com.mailgun.model.suppression.complaints.ComplaintsItem;\n\n// ...\n\npublic ComplaintsItem getComplaint() {\n    MailgunSuppressionComplaintsApi suppressionComplaintsApi = MailgunClient.config(API_KEY)\n        .createApi(MailgunSuppressionComplaintsApi.class);\n\n    return suppressionComplaintsApi.getSingleComplaint(YOUR_DOMAIN_NAME, \"baz@example.com\");\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Complaint to Mailgun Suppression List using cURL\nDESCRIPTION: This snippet demonstrates how to add a complaint to the Mailgun suppression list using a cURL command. It requires the API key and domain name to be replaced with actual values.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/add-complaint.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' \\\n   https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/complaints \\\n   -F address='bob@example.com'\n```\n\n----------------------------------------\n\nTITLE: Adding a Domain to Mailgun using Ruby\nDESCRIPTION: This Ruby function demonstrates how to add a new domain to Mailgun using the RestClient library. It sends a POST request to the Mailgun API with the domain name and SMTP password.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/add-domain.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef add_domain\n  RestClient.post(\"https://api:YOUR_API_KEY\"\\\n                  \"@api.mailgun.net/v3/domains\",\n                  :name => 'YOUR_NEW_DOMAIN_NAME',\n                  :smtp_password => 'supersecretpassword')\nend\n```\n\n----------------------------------------\n\nTITLE: PHP Whitelist Implementation\nDESCRIPTION: PHP implementation using cURL to interact with Mailgun's whitelist API. Includes authentication and request configuration.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-whitelists.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Currently, the PHP SDK does not support Suppression Whiteslist endpoint.\n# Consider using the following php curl function.\nfunction add_domain_whitelist() {\n  $ch = curl_init();\n\n  curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);\n  curl_setopt($ch, CURLOPT_USERPWD, 'api:PRIVATE_API_KEY');\n  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n\n  curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\n  curl_setopt($ch, CURLOPT_URL, 'https://api.mailgun.net/v3/domain.tld/whitelists');\n  curl_setopt($ch, CURLOPT_POSTFIELDS, array(\n      'address'=> 'bob@example.com')\n  );\n\n  $result = curl_exec($ch);\n  curl_close($ch);\n\n  return $result;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Seed List using C#\nDESCRIPTION: C# implementation using RestSharp client to create a seed list. Includes basic authentication and POST request setup.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/create-seed-list.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class CreateInboxPlacementTest\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (CreateSeedList ().Content.ToString ());\n    }\n\n    public static IRestResponse CreateSeedList ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/seedlists\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\", \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.Resource = \"inbox/seedlists\";\n        request.Method = Method.POST;\n        return client.Execute (request);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Response Format for Adding a Domain\nDESCRIPTION: JSON response structure after successfully adding a domain. Contains domain details including ID, creation timestamp, verification status, and enabled monitoring services.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-inboxready-domains.rst#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"domain\": {\n    \"ID\": \"<ID>\",\n    \"created_at\": 123456789,\n    \"name\": \"example.com\",\n    \"verified\": {\n      \"verified_at\": 0,\n      \"status\": \"inbox_ready\"\n    },\n    \"services\": {\n      \"spam_trap_monitoring\": true,\n      \"domain_blocklist_monitoring\": true,\n    },\n    \"txt_record\": \"<HASHED TXT RECORD KEY>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Mailgun Template Version using PHP cURL\nDESCRIPTION: This PHP function uses cURL to update a template version. It sets up the request parameters, configures the cURL options, and sends a PUT request to the Mailgun API endpoint.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/version-update.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Currently, the PHP SDK does not support the Templates endpoint.\n# Consider using the following php curl function.\nfunction update_template_version() {\n  $params =   array(\n    'template' => '{{fname}} {{lname}}',\n    'comment' => 'Updated version comment',\n    'active' => 'yes'\n  );\n\n  $ch = curl_init();\n\n  curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);\n  curl_setopt($ch, CURLOPT_USERPWD, 'api:PRIVATE_API_KEY');\n  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n\n  curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PUT');\n  curl_setopt($ch, CURLOPT_URL, 'https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/templates/TEMPLATE_NAME/versions/VERSION_TAG');\n  curl_setopt($ch, CURLOPT_POSTFIELDS, $params);\n\n  $result = curl_exec($ch);\n  curl_close($ch);\n\n  return $result;\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Mailing List using Java with Mailgun SDK\nDESCRIPTION: This Java code snippet uses the Mailgun SDK to validate a mailing list. It creates a MailgunMailingListApi instance and calls the verifyMailingListMembers method.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/create-list-validation.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.MailgunMailingListApi;\nimport com.mailgun.model.mailing.lists.MailingListVerificationRespo\n\n// ...\n\npublic MailingListVerificationResponse validateMailingList() {\n    MailgunMailingListApi mailgunMailingListApi = MailgunClient.config(API_KEY)\n        .createApi(MailgunMailingListApi.class);\n\n    return mailgunMailingListApi.verifyMailingListMembers(MAILING_LIST_ADDRESS);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Unsubscribes with Python Requests\nDESCRIPTION: Python function to add an email address to the Mailgun unsubscribe list. Uses the requests library to make a POST request to the Mailgun API with the email address and tag as form data.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/add-unsubscribe-tag.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef unsubscribe_from_tag():\n    return requests.post(\n        \"https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/unsubscribes\",\n        auth=(\"api\", \"YOUR_API_KEY\"),\n        data={'address':'bob@example.com', 'tag': 'tag1'})\n```\n\n----------------------------------------\n\nTITLE: Validating Mailing List using C# with RestSharp\nDESCRIPTION: This C# class demonstrates how to validate a mailing list using the RestSharp library. It sends a POST request to the Mailgun API endpoint for list validation and includes error handling.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/create-list-validation.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class ValidateMailingListChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (ValidateMailingList ().Content.ToString ());\n    }\n\n    public static IRestResponse ValidateMailingList ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.Resource = \"lists/{list}/validate\";\n        request.AddParameter (\"list\", \"LIST@YOUR_DOMAIN_NAME\",\n                              ParameterType.UrlSegment);\n        request.Method = Method.POST;\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Mailgun Routes using cURL\nDESCRIPTION: This snippet demonstrates how to retrieve Mailgun routes using a cURL command. It authenticates with an API key and includes pagination parameters.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-routes.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -G \\\n    https://api.mailgun.net/v3/routes \\\n    -d skip=1 \\\n    -d limit=1\n```\n\n----------------------------------------\n\nTITLE: Adding Domain IP with Java Mailgun Client\nDESCRIPTION: This Java example shows how to add an IP address to a Mailgun domain using the Mailgun Java SDK. It creates a MailgunIPsApi instance with API key configuration and calls the assignIPToDomain method.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/add-domain-ip.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.MailgunIPsApi;\nimport com.mailgun.model.ResponseWithMessage;\n\n// ...\n\npublic ResponseWithMessage addDomainIP() {\n    MailgunIPsApi mailgunIPsApi = MailgunClient.config(API_KEY)\n        .createApi(MailgunIPsApi.class);\n\n    return mailgunIPsApi.assignIPToDomain(YOUR_DOMAIN_NAME, \"127.0.0.1\");\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Email Preview Test with Java\nDESCRIPTION: This Java code snippet uses the Unirest library to create an email preview test. It sends a POST request to the Mailgun API with subject and URL parameters, and returns the response as a JsonNode.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/email_preview/create-test.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mashape.unirest.http.HttpResponse;\nimport com.mashape.unirest.http.JsonNode;\nimport com.mashape.unirest.http.Unirest;\nimport com.mashape.unirest.http.exceptions.UnirestException;\n\npublic class MGSample {\n\n    // ...\n\n    public static JsonNode createTest() throws UnirestException {\n\n        HttpResponse <JsonNode> request = Unirest.post(\"https://api.mailgun.net/v4/preview/tests\")\n            .basicAuth(\"api\", API_KEY)\n            .field(\"subject\", \"test\")\n            .field(\"url\", \"url\")\n            .asJson();\n\n        return request.getBody();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Mailgun Template using Java\nDESCRIPTION: Java code using the Mailgun Java SDK to delete a template. Creates a MailgunTemplatesApi instance with your API key and uses the deleteTemplate method to remove a specific template from your domain.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/template-delete.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.MailgunTemplatesApi;\nimport com.mailgun.model.templates.TemplateStatusResponse;\n\n// ...\n\npublic TemplateStatusResponse deleteTemplate() {\n    MailgunTemplatesApi mailgunTemplatesApi = MailgunClient.config(API_KEY)\n        .createApi(MailgunTemplatesApi.class);\n\n    return mailgunTemplatesApi.deleteTemplate(YOUR_DOMAIN_NAME, TEMPLATE_NAME);\n}\n```\n\n----------------------------------------\n\nTITLE: C# Domain Info Retrieval with RestSharp\nDESCRIPTION: C# implementation using RestSharp library to authenticate and fetch domain information from Mailgun API\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-domain.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class GetDomainChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (GetDomain ().Content.ToString ());\n    }\n\n    public static IRestResponse GetDomain ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.AddParameter (\"domain\", \"YOUR_DOMAIN_NAME\", ParameterType.UrlSegment);\n        request.Resource = \"/domains/{domain}\";\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Updating IP Pool via cURL\nDESCRIPTION: Demonstrates how to update an IP pool's name, description and IPs using a cURL PATCH request to the Mailgun API. Requires API key authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/ip_pools/update_ip_pool.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -X PATCH \\\n  https://api.mailgun.net/v1/ip_pools/$your_pool_id \\\n  -F name='new ip pool name' \\\n  -F description='new pool description' \\\n  -F ips='127.0.0.2'\n```\n\n----------------------------------------\n\nTITLE: Create Webhook Response Format\nDESCRIPTION: Sample JSON response after successfully creating a new webhook, showing the confirmation message and the newly created webhook details with multiple URLs.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-webhooks.rst#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"message\": \"Webhook has been created\",\n  \"webhook\": {\n    \"urls\": [\n\t      \"https://your_domain.com/v1/clicked\",\n\t      \"https://your_domain.com/v2/clicked\",\n\t      \"https://your_partner_domain.com/v1/clicked\" \n\t    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deactivating Domain Key using Java\nDESCRIPTION: Implements domain key deactivation using Java with Unirest HTTP library. Returns response as JsonNode.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/deactivate-domain-key.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mashape.unirest.http.HttpResponse;\nimport com.mashape.unirest.http.JsonNode;\nimport com.mashape.unirest.http.Unirest;\nimport com.mashape.unirest.http.exceptions.UnirestException;\n\npublic class MGSample {\n\n    // ...\n\n    public static JsonNode deactivateDomainKey() throws UnirestException {\n\n        HttpResponse<JsonNode> request = Unirest.put(\"https://api.mailgun.net/v4/domains/AUTHORITY_DOMAIN_NAME/keys/SELECTOR/deactivate\")\n            .basicAuth(\"api\", API_KEY)\n            .asJson();\n\n        return request.getBody();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: PUT Domain Key Deactivation Endpoint\nDESCRIPTION: Deactivates a domain key for a specified authority and selector.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-domains.rst#2025-04-21_snippet_20\n\nLANGUAGE: url\nCODE:\n```\nPUT /v4/domains/{authority_name}/keys/{selector}/deactivate\n```\n\n----------------------------------------\n\nTITLE: Fetching Complaint Data with Mailgun PHP SDK\nDESCRIPTION: This PHP snippet demonstrates how to retrieve complaint information using the Mailgun PHP SDK. It requires the Mailgun library to be installed via Composer and the API key and domain name to be specified.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-complaint.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Include the Autoloader (see \"Libraries\" for install instructions)\nrequire 'vendor/autoload.php';\nuse Mailgun\\Mailgun;\n\n# Instantiate the client.\n$mgClient  = Mailgun::create('PRIVATE_API_KEY', 'https://API_HOSTNAME');\n$domain    = 'YOUR_DOMAIN_NAME';\n$recipient = 'bob@example.com';\n\n# Issue the call to the client.\n$result = $mgClient->suppressions()->complaints()->show($domain, $recipient);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Mailgun Routes using PHP\nDESCRIPTION: This PHP snippet demonstrates how to retrieve Mailgun routes using the Mailgun PHP SDK. It creates a Mailgun client instance and calls the routes()->index() method to get the list of routes.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-routes.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Include the Autoloader (see \"Libraries\" for install instructions)\nrequire 'vendor/autoload.php';\nuse Mailgun\\Mailgun;\n\n# Instantiate the client.\n$mgClient = Mailgun::create('PRIVATE_API_KEY', 'https://API_HOSTNAME');\n\n# Issue the call to the client.\n$result = $mgClient->routes()->index();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Seed List Attributes with Python Requests\nDESCRIPTION: This Python function uses the requests library to fetch seed list attributes from the Mailgun API. It sends a GET request to the specified endpoint with basic authentication using the API key.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-seed-list-attributes.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef get_seed_list_attributes():\n    return requests.get(\n        \"https://api.mailgun.net/v4/inbox/seedlists/a\",\n        auth=('api', 'YOUR_API_KEY'))\n```\n\n----------------------------------------\n\nTITLE: Retrieving Domain Tracking with JavaScript\nDESCRIPTION: JavaScript/Node.js implementation using the Mailgun.js SDK with async/await pattern.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-domain-tracking.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n(async () => {\n  try {\n    const tracking = await client.domains.getTracking(DOMAIN);\n    console.log('tracking', tracking);\n  } catch (error) {\n    console.error(error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Creating Mailgun Webhooks using Java\nDESCRIPTION: Demonstrates how to add a webhook for 'clicked' events using the Mailgun Java SDK. The example shows how to create a webhook with multiple destination URLs where click events will be forwarded.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/add-webhook-deprecated.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.MailgunWebhooksApi;\nimport com.mailgun.enums.WebhookName;\nimport com.mailgun.model.webhooks.WebhookRequest;\nimport com.mailgun.model.webhooks.WebhookResult;\n\nimport java.util.List;\n\n// ...\n\npublic WebhookResult addWebhook() {\n    MailgunWebhooksApi mailgunWebhooksApi = MailgunClient.config(API_KEY).createApi(MailgunWebhooksApi.class);\n\n    WebhookRequest request = WebhookRequest.builder()\n        .webhookName(WebhookName.CLICKED)\n        .url(\"https://your_domain.com/v1/clicked\")\n        .urls(List.of(\"https://your_domain.com/v2/clicked\", \"https://your_partner_domain.com/v1/clicked\"))\n        .build();\n\n    return mailgunWebhooksApi.createNewWebhook(YOUR_DOMAIN_NAME, request);\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Mailing List using Java\nDESCRIPTION: Java implementation using Mailgun Java SDK to remove a mailing list. Requires Mailgun Java client library.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/remove-mailing-list.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.MailgunMailingListApi;\nimport com.mailgun.model.mailing.lists.DeleteMailingListResponse;\n\n// ...\n\npublic DeleteMailingListResponse removeMailingList() {\n    MailgunMailingListApi mailgunMailingListApi = MailgunClient.config(API_KEY)\n        .createApi(MailgunMailingListApi.class);\n\n    return mailgunMailingListApi.deleteMailingList(MAILING_LIST_ADDRESS);\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Mailgun Click Webhook with C#\nDESCRIPTION: This C# class demonstrates how to update a Mailgun click webhook using RestSharp. It creates a REST client with basic authentication, builds a PUT request with the new webhook URL, and executes the request against the Mailgun API.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/update-webhook-deprecated.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class UpdateWebhookChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (UpdateWebhook ().Content.ToString ());\n    }\n\n    public static IRestResponse UpdateWebhook ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.Resource = \"/domains/YOUR_DOMAIN_NAME/webhooks/click\";\n        request.AddParameter (\"url\", \"http://google.com\");\n        request.Method = Method.PUT;\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: PHP Curl Implementation for Mailgun Bulk Preview Promotion\nDESCRIPTION: PHP implementation using curl functions since the PHP SDK doesn't support v4 Validations endpoint. Handles basic authentication and PUT request.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/put-bulk-preview.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Currently, the PHP SDK does not support the v4 Validations endpoint.\n# Consider using the following php curl function.\nfunction promote_bulk_preview() {\n  $ch = curl_init();\n\n  curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);\n  curl_setopt($ch, CURLOPT_USERPWD, 'api:PRIVATE_API_KEY');\n  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n\n  curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PUT');\n  curl_setopt($ch, CURLOPT_URL, 'https://api.mailgun.net/v4/address/validate/preview/LIST_NAME');\n  $result = curl_exec($ch);\n  curl_close($ch);\n\n  return $result;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Mailgun Template Description with Ruby\nDESCRIPTION: Uses RestClient to send a PUT request for updating a template's description. The request includes the API key in the authentication header and the new description as a parameter.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/template-update.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef update_template\n  RestClient.put(\"https://api:YOUR_API_KEY\" \\\n                 \"@api.mailgun.net/v3/YOUR_DOMAIN_NAME/templates/TEMPLATE_NAME\",\n                 :description => 'new template description')\nend\n```\n\n----------------------------------------\n\nTITLE: Deleting IP Pool using cURL with Mailgun API\nDESCRIPTION: This cURL command sends a DELETE request to the Mailgun API to remove a specific IP pool. It requires the API key for authentication and the pool ID as part of the URL.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/ip_pools/delete_ip_pool.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -X DELETE \\\n  https://api.mailgun.net/v1/ip_pools/$your_pool_id\n```\n\n----------------------------------------\n\nTITLE: Sending Untracked Emails with Mailgun in PHP\nDESCRIPTION: This PHP snippet shows how to use the Mailgun PHP SDK to send an email with tracking disabled. It creates a Mailgun client, sets parameters including 'o:tracking' to false, and sends the message.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-message-no-tracking.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Include the Autoloader (see \"Libraries\" for install instructions)\nrequire 'vendor/autoload.php';\nuse Mailgun\\Mailgun;\n\n# Instantiate the client.\n$mgClient = Mailgun::create('PRIVATE_API_KEY', 'https://API_HOSTNAME');\n$domain = \"YOUR_DOMAIN_NAME\";\n\n$params =  array(\n    'from'       => 'Excited User <YOU@YOUR_DOMAIN_NAME>',\n    'to'         => 'foo@example.com',\n    'subject'    => 'Hello',\n    'text'       => 'Testing some Mailgun awesomness!',\n    'o:tracking' => false\n);\n\n# Make the call to the client.\n$result = $mgClient->messages()->send($domain, $params);\n```\n\n----------------------------------------\n\nTITLE: Updating Mailgun Webhook using Ruby\nDESCRIPTION: This Ruby function uses the RestClient library to send a PUT request to the Mailgun API for updating the 'clicked' webhook URL. It includes authentication and the new webhook URL in the request.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/update-webhook.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef update_webhook\n  RestClient.put(\"https://api:YOUR_API_KEY\" \\\n                 \"@api.mailgun.net/v3/domains/YOUR_DOMAIN_NAME/webhooks/clicked\",\n                 :url => 'https://your_domain.com/clicked')\nend\n```\n\n----------------------------------------\n\nTITLE: Retrieving Seed List Attributes with C# RestSharp\nDESCRIPTION: This C# class demonstrates how to use RestSharp to fetch seed list attributes from the Mailgun API. It creates a RestClient with basic authentication, sends a GET request to the specified endpoint, and returns the response.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-seed-list-attributes.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class InboxPlacementTest\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (GetSeedListAttributes().Content.ToString());\n    }\n\n    public static IRestResponse GetSeedListAttributes()\n    {\n        RestClient client = new RestClient();\n        client.BaseUrl = new Uri(\"https://api.mailgun.net/v4\");\n        client.Authenticator =\n            new HttpBasicAuthenticator(\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest();\n        request.Resource = \"/inbox/seedlists/a\";\n        return client.Execute(request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Domain IP with JavaScript Mailgun Client\nDESCRIPTION: This JavaScript example shows how to add an IP address to a Mailgun domain using the Mailgun.js library with async/await. It initializes the Mailgun client with the API key and uses the domains.assignIp method to add the IP address to the specified domain.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/add-domain-ip.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n(async () => {\n    try {\n        const addedIp = await client.domains.assignIp(DOMAIN, '127.0.0.1');\n        console.log('addedIp', addedIp);\n    } catch (error) {\n        console.error(error);\n    }\n})();\n```\n\n----------------------------------------\n\nTITLE: Python Function for Mailgun Webhook Access\nDESCRIPTION: Simple Python function using the requests library to fetch click webhook data from Mailgun's API. Uses basic authentication with API key.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-webhook-deprecated.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef get_domain():\n    return requests.get(\n        \"https://api.mailgun.net/v3/domains/YOUR_DOMAIN_NAME/webhooks/click\",\n        auth=(\"api\", \"YOUR_API_KEY\"))\n```\n\n----------------------------------------\n\nTITLE: Updating Mailing List Member with Mailgun Java SDK\nDESCRIPTION: This Java code uses the Mailgun Java SDK to update a mailing list member. It creates a MailgunMailingListApi instance, builds a request with updated member details, and sends it to the API.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/update-list-member.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.MailgunMailingListApi;\nimport com.mailgun.model.mailing.lists.MailingListMemberResponse;\nimport com.mailgun.model.mailing.lists.MailingListMemberUpdateRequest;\n\nimport java.util.Map;\n\n// ...\n\npublic MailingListMemberResponse updateMembers() {\n    MailgunMailingListApi mailgunMailingListApi = MailgunClient.config(API_KEY)\n        .createApi(MailgunMailingListApi.class);\n\n    MailingListMemberUpdateRequest request = MailingListMemberUpdateRequest.builder()\n        .name(\"Alice\")\n        .vars(Map.of(\"age\", \"26\"))\n        .subscribed(false)\n        .build();\n\n    return mailgunMailingListApi.updateMailingListMember(MAILING_LIST_ADDRESS, \"alice@example.com\", request);\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Mailgun Webhook using cURL\nDESCRIPTION: This snippet demonstrates how to update a Mailgun webhook using a cURL command. It sends a PUT request to the Mailgun API to update the 'clicked' webhook URL.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/update-webhook.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -X PUT \\\n    https://api.mailgun.net/v3/domains/YOUR_DOMAIN_NAME/webhooks/clicked \\\n    -F url='https://your_domain,com/v1/clicked'\n```\n\n----------------------------------------\n\nTITLE: Sample Response for IP Pools List\nDESCRIPTION: Example JSON response when retrieving the list of IP pools, showing pool details including IDs, names, descriptions, and IP addresses.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-ip-pools.rst#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"ip_pools\": [\n    {\n      \"description\": \"Test description 1\",\n      \"ips\": [\"127.0.0.1\"],\n      \"is_linked\": false,\n      \"name\": \"test_pool1\",\n      \"pool_id\": \"some_pool_id\"\n      },\n      {\n      \"description\": \"Test description 2\",\n      \"ips\": [\"127.0.0.1\"],\n      \"is_linked\": true,\n      \"name\": \"test_pool2\",\n      \"pool_id\": \"some_pool_id_2\"\n    },\n  ]\n \"message\": \"success\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating SMTP Credentials using Go\nDESCRIPTION: This Go function demonstrates how to update SMTP credentials using the Mailgun Go SDK. It creates a Mailgun client and calls the ChangeCredentialPassword method with the domain, username, and new password.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/change-pwd-credentials.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/mailgun/mailgun-go/v3\"\n    \"time\"\n)\n\nfunc ChangePassword(domain, apiKey string) error {\n    mg := mailgun.NewMailgun(domain, apiKey)\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    return mg.ChangeCredentialPassword(ctx, \"alice\", \"super_secret\")\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Domain IPs with Python Requests Library\nDESCRIPTION: This Python function uses the requests library to make a GET request to the Mailgun API for fetching domain IPs. It includes the API key for authentication and specifies the domain name in the URL.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-domain-ips.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef get_domain_ips():\n    return requests.get(\n        \"https://api.mailgun.net/v3/domains/YOUR_DOMAIN_NAME/ips\",\n        auth=(\"api\", \"YOUR_API_KEY\"))\n```\n\n----------------------------------------\n\nTITLE: Adding Unsubscribe Records using Ruby with RestClient\nDESCRIPTION: This Ruby method uses the RestClient library to add an email address to the unsubscribe list. It sends a POST request to the Mailgun API endpoint with the API key in the authentication and the email address and wildcard tag as request parameters.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/add-unsubscribe-all.rst#2025-04-21_snippet_4\n\nLANGUAGE: rb\nCODE:\n```\ndef unsubscribe_from_all\n  RestClient.post \"https://api:YOUR_API_KEY\"\\\n  \"@api.mailgun.net/v3/YOUR_DOMAIN_NAME/unsubscribes\",\n  :address => 'bob@example.com',\n  :tag => '*'\nend\n```\n\n----------------------------------------\n\nTITLE: Updating Mailgun Template Version using cURL (Bash)\nDESCRIPTION: This snippet shows how to update a template version using a cURL command. It sends a PUT request to the Mailgun API with parameters for the template content, comment, and active status.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/version-update.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -X PUT \\\n  https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/templates/TEMPLATE_NAME/versions/VERSION_TAG \\\n  -F template='{{fname}} {{lname}}' \\\n  -F comment='Updated version comment' \\\n  -F active='yes'\n```\n\n----------------------------------------\n\nTITLE: Deleting a Domain using Java with Mailgun API\nDESCRIPTION: This Java code snippet shows how to delete a Mailgun domain using the Mailgun Java SDK. It creates a MailgunDomainsApi instance and calls the deleteDomain method.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/delete-domain.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.MailgunDomainsApi;\nimport com.mailgun.model.ResponseWithMessage;\n\n// ...\n\npublic ResponseWithMessage deleteDomain() {\n    MailgunDomainsApi mailgunDomainsApi = MailgunClient.config(API_KEY)\n        .createApi(MailgunDomainsApi.class);\n\n    return mailgunDomainsApi.deleteDomain(YOUR_DOMAIN_NAME);\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Mailgun Click Webhook with PHP\nDESCRIPTION: This PHP snippet demonstrates how to update a Mailgun click webhook using the Mailgun PHP SDK. It instantiates a Mailgun client with an API key and sends a PUT request to update the click webhook URL.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/update-webhook-deprecated.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Include the Autoloader (see \"Libraries\" for install instructions)\nrequire 'vendor/autoload.php';\nuse Mailgun\\Mailgun;\n\n# Instantiate the client.\n$mgClient = new Mailgun('YOUR_API_KEY');\n$listAddress = 'YOUR_DOMAIN_NAME';\n$memberAddress = 'bob@example.com';\n\n# Issue the call to the client.\n$result = $mgClient->put(\"$domain/webhooks/click\", array(\n    'url' => 'http://google.com'\n));\n```\n\n----------------------------------------\n\nTITLE: Retrieving Domain Tracking with Ruby\nDESCRIPTION: Ruby implementation using RestClient to get domain tracking settings.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-domain-tracking.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef get_domain_tracking\n  RestClient.get(\"https://api:YOUR_API_KEY\"\\\n                 \"@api.mailgun.net/v3/domains/YOUR_DOMAIN_NAME/tracking\"\\\n                 {|response, request, result| response }\nend\n```\n\n----------------------------------------\n\nTITLE: PUT Domain DKIM Selector Update Endpoint\nDESCRIPTION: Updates the DKIM selector for a specified domain.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-domains.rst#2025-04-21_snippet_17\n\nLANGUAGE: url\nCODE:\n```\nPUT /domains/<domain>/dkim_selector\n```\n\n----------------------------------------\n\nTITLE: Listing Mailgun Templates using Java SDK\nDESCRIPTION: This Java code uses the Mailgun Java SDK to list templates. It creates a MailgunTemplatesApi instance and calls the getAllTemplates method with the domain name.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/template-get-all.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.MailgunTemplatesApi;\nimport com.mailgun.model.templates.TemplatesResult;\n\n// ...\n\npublic TemplatesResult listTemplates() {\n    MailgunTemplatesApi mailgunTemplatesApi = MailgunClient.config(API_KEY)\n        .createApi(MailgunTemplatesApi.class);\n\n    return mailgunTemplatesApi.getAllTemplates(YOUR_DOMAIN_NAME);\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Template Information (GET Request)\nDESCRIPTION: API endpoint for retrieving metadata about a stored template.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-templates.rst#2025-04-21_snippet_4\n\nLANGUAGE: url\nCODE:\n```\nGET /<domain>/templates/<name>\n```\n\n----------------------------------------\n\nTITLE: Fetching Mailgun Event Logs using cURL (Bash)\nDESCRIPTION: This snippet shows how to retrieve event logs from the Mailgun API using a cURL command. It requires the API key and domain name to be specified.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/events-pagination.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -G \\\n    https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/events/W3siYSI6IGZhbHNlLC\n```\n\n----------------------------------------\n\nTITLE: Retrieving Failed Events from Mailgun API using Java\nDESCRIPTION: This Java code snippet uses the Mailgun Java SDK to retrieve failed events. It demonstrates how to set up the MailgunEventsApi, create query options, and execute the API call.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/events-failure.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.MailgunEventsApi;\nimport com.mailgun.enums.EventType;\nimport com.mailgun.model.events.EventsQueryOptions;\nimport com.mailgun.model.events.EventsResponse;\n\n// ...\n\npublic EventsResponse getEvents() {\n    MailgunEventsApi mailgunEventsApi = MailgunClient.config(API_KEY)\n        .createApi(MailgunEventsApi.class);\n\n    EventsQueryOptions eventsQueryOptions = EventsQueryOptions.builder()\n        .event(EventType.FAILED)\n        .build();\n\n    return mailgunEventsApi.getEvents(YOUR_DOMAIN_NAME, eventsQueryOptions);\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Mailgun Click Webhook with Go\nDESCRIPTION: This Go function shows how to update a Mailgun click webhook using the Mailgun Go SDK. It initializes a Mailgun client, creates a context with timeout, and updates the 'clicked' webhook to a new URL.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/update-webhook-deprecated.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/mailgun/mailgun-go/v3\"\n    \"time\"\n)\n\nfunc UpdateWebhook(domain, apiKey string) error {\n    mg := mailgun.NewMailgun(domain, apiKey)\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    return mg.UpdateWebhook(ctx, \"clicked\", []string{\"https://your_domain.com/clicked\"})\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Mailing List Validation Status in C#\nDESCRIPTION: This C# class uses the RestSharp library to make a GET request to the Mailgun API for retrieving mailing list validation status. It requires the API key and the mailing list address to be replaced with actual values.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-list-validation.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class GetMailingListValidationChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (GetMailingListValidation ().Content.ToString ());\n    }\n\n    public static IRestResponse GetMailingListValidation ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.AddParameter (\"list\", \"LIST@YOUR_DOMAIN_NAME\", ParameterType.UrlSegment);\n        request.Resource = \"/lists/{list}/validate\";\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting All Templates Using C#\nDESCRIPTION: C# implementation for deleting all templates from a Mailgun domain using RestSharp. Creates a REST client with basic authentication and executes a DELETE request to the templates endpoint.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/template-delete-all.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class DeleteTemplatesChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (DeleteTemplates ().Content.ToString ());\n    }\n\n    public static IRestResponse DeleteTemplates ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.AddParameter (\"domain\", \"YOUR_DOMAIN_NAME\", ParameterType.UrlSegment);\n        request.Resource = \"{domain}/templates\";\n        request.Method = Method.DELETE;\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Go Mailgun Webhook Integration\nDESCRIPTION: Go implementation using the official Mailgun Go SDK to fetch webhook details for clicked events. Includes context handling and timeout configuration.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-webhook.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/mailgun/mailgun-go/v3\"\n    \"time\"\n)\n\nfunc GetWebhook(domain, apiKey string) (string, error) {\n    mg := mailgun.NewMailgun(domain, apiKey)\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    return mg.GetWebhook(ctx, \"clicked\")\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Complaints using C# RestSharp\nDESCRIPTION: This C# class uses RestSharp to make a GET request to the Mailgun API for retrieving complaints. It sets up a RestClient with basic authentication using the API key and executes a request to the complaints endpoint for the specified domain.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-complaints.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class GetComplaintsChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (GetComplaints ().Content.ToString ());\n    }\n\n    public static IRestResponse GetComplaints ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.AddParameter (\"domain\", \"YOUR_DOMAIN_NAME\", ParameterType.UrlSegment);\n        request.Resource = \"{domain}/complaints\";\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Mailgun Click Webhook with Java\nDESCRIPTION: This Java example demonstrates updating a Mailgun click webhook using the Mailgun Java SDK. It creates a webhook API client, builds a webhook update request with a new URL, and executes the update operation.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/update-webhook-deprecated.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.MailgunWebhooksApi;\nimport com.mailgun.enums.WebhookName;\nimport com.mailgun.model.webhooks.WebhookResult;\nimport com.mailgun.model.webhooks.WebhookUpdateRequest;\n\n// ...\n\npublic WebhookResult updateWebhook() {\n    MailgunWebhooksApi mailgunWebhooksApi = MailgunClient.config(API_KEY)\n        .createApi(MailgunWebhooksApi.class);\n\n    WebhookUpdateRequest request = WebhookUpdateRequest.builder()\n        .url(\"https://your_domain.com/clicked\")\n        .build();\n\n    return mailgunWebhooksApi.updateWebhook(YOUR_DOMAIN_NAME, WebhookName.CLICKED, request);\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Domain Tracking with Go\nDESCRIPTION: Go implementation using the official Mailgun Go SDK with context and timeout handling.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-domain-tracking.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/mailgun/mailgun-go/v3\"\n    \"time\"\n)\n\nfunc GetDomainTracking(domain, apiKey string) (mailgun.DomainTracking, error) {\n    mg := mailgun.NewMailgun(domain, apiKey)\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    return mg.GetDomainTracking(ctx, domain)\n}\n```\n\n----------------------------------------\n\nTITLE: C# Route Retrieval Implementation\nDESCRIPTION: C# implementation using RestSharp to fetch route details from Mailgun API with basic authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-route.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class GetRouteChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (GetRoute ().Content.ToString ());\n    }\n\n    public static IRestResponse GetRoute ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.Resource = \"routes/{id}\";\n        request.AddUrlSegment (\"id\", \"4e97c1b2ba8a48567f007fb6\");\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Ruby Mailgun Unsubscribe Integration\nDESCRIPTION: Ruby implementation using RestClient to fetch unsubscribe data from Mailgun API.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-unsubscribes.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef get_unsubscribes\n  RestClient.get \"https://api:YOUR_API_KEY\"\\\n  \"@api.mailgun.net/v3/YOUR_DOMAIN_NAME/unsubscribes\"\nend\n```\n\n----------------------------------------\n\nTITLE: Retrieving Seed List using Ruby RestClient\nDESCRIPTION: Ruby implementation using RestClient. Performs GET request with API key embedded in the URL.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-seed-list.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef get_seed_list\n  RestClient.get(\"https://api:YOUR_API_KEY\"\\\n                 \"@api.mailgun.net/v4/inbox/seedlists/TARGET_EMAIL\"\\\n                 {|response, request, result| response }\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Mailgun Template using Ruby\nDESCRIPTION: Ruby implementation using RestClient to create a template. Posts template content with name and description parameters.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/create-template-usage.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef add_template\n  RestClient.post \"https://api:YOUR_API_KEY\"\\\n  \"@api.mailgun.net/v3/YOUR_DOMAIN_NAME/templates\",\n  :template => '<div class=\"entry\"> <h1>{{title}}</h1> <div class=\"body\"> {{body}} </div> </div>',\n  :name => 'Test template',\n  :description: => 'Sample template'\nend\n```\n\n----------------------------------------\n\nTITLE: Validating Email Address with Mailgun API in Python\nDESCRIPTION: A Python function that uses the requests library to make a POST request to Mailgun's Address Validation API v4. It authenticates with a private API key and includes an email address to validate in the request data.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/post-validate.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef post_validate():\n    return requests.post(\n        \"https://api.mailgun.net/v4/address/validate\",\n        auth=(\"api\", \"PRIVATE_API_KEY\"),\n        data={\"address\": \"foo@mailgun.net\"})\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Mailgun Event Logs (Go)\nDESCRIPTION: This Go function demonstrates how to iterate through all pages of Mailgun event logs using the Mailgun Go SDK. It includes creating an iterator, handling different event types, and error checking.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/events-pagination.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"fmt\"\n    \"github.com/mailgun/mailgun-go/v3\"\n    \"github.com/mailgun/mailgun-go/v3/events\"\n    \"time\"\n)\n\nfunc PrintEvents(domain, apiKey string) error {\n    mg := mailgun.NewMailgun(domain, apiKey)\n\n    // Create an iterator\n    it := mg.ListEvents(nil)\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    // Iterate through all the pages of events\n    var page []mailgun.Event\n    for it.Next(ctx, &page) {\n        for _, event := range page {\n            switch e := event.(type) {\n            case *events.Accepted:\n                fmt.Printf(\"Accepted ID: %s\", e.Message.Headers.MessageID)\n            case *events.Rejected:\n                fmt.Printf(\"Rejected Reason: %s\", e.Reject.Reason)\n            // Add other event types here\n            }\n            fmt.Printf(\"%+v\\n\", event.GetTimestamp())\n        }\n    }\n\n    // Did iteration end because of an error?\n    if it.Err() != nil {\n        return it.Err()\n    }\n    return nil\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Domain Info with cURL\nDESCRIPTION: Basic cURL command to fetch domain information using HTTP Basic Auth with the Mailgun API key\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-domain.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -G \\\n    https://api.mailgun.net/v3/domains/YOUR_DOMAIN_NAME\n```\n\n----------------------------------------\n\nTITLE: Creating Email Template using PHP\nDESCRIPTION: This PHP function demonstrates how to create a new email template using a custom curl implementation, as the PHP SDK doesn't support the Templates endpoint. It sends a POST request to the Mailgun API with the template name and description.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/template-create.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Currently, the PHP SDK does not support the Templates endpoint.\n# Consider using the following php curl function.\nfunction create_template() {\n  $params = array(\n    'name' => 'template.name',\n    'description' => 'template description',\n  );\n\n  $ch = curl_init();\n\n  curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);\n  curl_setopt($ch, CURLOPT_USERPWD, 'api:PRIVATE_API_KEY');\n  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n\n  curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');\n  curl_setopt($ch, CURLOPT_URL, 'https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/templates');\n  curl_setopt($ch, CURLOPT_POSTFIELDS, $params);\n\n  $result = curl_exec($ch);\n  curl_close($ch);\n\n  return $result;\n}\n```\n\n----------------------------------------\n\nTITLE: Python Implementation for Inbox Filters\nDESCRIPTION: Simple Python function using the requests library to fetch inbox placement filters with basic authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-results-filters.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef get_results_filters():\n    return requests.get(\n        \"https://api.mailgun.net/v4/inbox/results/_filters\",\n        auth=('api', 'YOUR_API_KEY'))\n```\n\n----------------------------------------\n\nTITLE: Fetching Mailing Lists with Ruby\nDESCRIPTION: This Ruby function uses the RestClient gem to make a GET request to the Mailgun API for retrieving mailing lists. It requires the API key for authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-mailing-lists.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef list_members\n  RestClient.get(\"https://api:YOUR_API_KEY\" \\\n                 \"@api.mailgun.net/v3/lists/pages\")\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Unsubscribe Record Endpoint\nDESCRIPTION: POST endpoint to add an email address to the unsubscribed table. Requires address parameter and optional tag parameter.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-unsubscribes.rst#2025-04-21_snippet_3\n\nLANGUAGE: url\nCODE:\n```\nPOST /<domain>/unsubscribes\n```\n\n----------------------------------------\n\nTITLE: Retrieving Seed Lists with Java Mailgun SDK\nDESCRIPTION: This Java code snippet uses the Mailgun Java SDK to retrieve seed lists. It creates a MailgunSeedListApi instance, builds a SeedListsPageRequest with filtering options, and calls the getAllSeedLists method.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-seed-lists.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v4.MailgunSeedListApi;\nimport com.mailgun.client.MailgunClient;\nimport com.mailgun.model.seedlist.SeedListsPageRequest;\nimport com.mailgun.model.seedlist.SeedListsResponse;\n\n// ...\n\npublic SeedListsResponse getSeedLists() {\n    MailgunSeedListApi mailgunSeedListApi = MailgunClient.config(API_KEY)\n            .createApi(MailgunSeedListApi.class);\n\n    SeedListsPageRequest filter = SeedListsPageRequest.builder()\n            .limit(2)\n            .offset(1)\n            .ascending(false)\n            .build();\n\n    return mailgunSeedListApi.getAllSeedLists(filter);\n}\n```\n\n----------------------------------------\n\nTITLE: Ruby Implementation using RestClient\nDESCRIPTION: Ruby method using RestClient to retrieve inbox placement results with API key authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-results.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef get_results\n  RestClient.get(\"https://api:YOUR_API_KEY\"\\\n                 \"@api.mailgun.net/v4/inbox/results\"\\\n                 {|response, request, result| response }\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Mailgun Domain using Java SDK\nDESCRIPTION: Implements domain creation using Mailgun Java SDK with customizable domain settings including spam action, DKIM settings, and web scheme configuration.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/create-domain.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.MailgunDomainsApi;\nimport com.mailgun.enums.SpamAction;\nimport com.mailgun.enums.WebScheme;\nimport com.mailgun.model.domains.DomainRequest;\nimport com.mailgun.model.domains.DomainResponse;\n\nimport java.util.List;\n\n// ...\n\npublic DomainResponse addDomain() {\n    MailgunDomainsApi mailgunDomainsApi = MailgunClient.config(API_KEY)\n        .createApi(MailgunDomainsApi.class);\n\n    DomainRequest request = DomainRequest.builder()\n        .name(YOUR_NEW_DOMAIN_NAME)\n        .spamAction(SpamAction.BLOCK)\n        .wildcard(true)\n        .forceDkimAuthority(false)\n        .dkimKeySize(1024)\n        .ips(List.of(IP_1, IP_2))\n        .webScheme(WebScheme.HTTPS)\n        .build();\n\n    return mailgunDomainsApi.createNewDomain(request);\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Template Version with PHP\nDESCRIPTION: PHP implementation using curl functions since SDK doesn't support templates endpoint\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/version-delete.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Currently, the PHP SDK does not support the Templates endpoint.\n# Consider using the following php curl function.\nfunction delete_template_version() {\n  $ch = curl_init();\n\n  curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);\n  curl_setopt($ch, CURLOPT_USERPWD, 'api:PRIVATE_API_KEY');\n  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n\n  curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');\n  curl_setopt($ch, CURLOPT_URL, 'https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/templates/TEMPLATE_NAME/versions/VERSION_TAG');\n  curl_setopt($ch, CURLOPT_POSTFIELDS, $params);\n\n  $result = curl_exec($ch);\n  curl_close($ch);\n\n  return $result;\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Mailgun Template using Ruby\nDESCRIPTION: Ruby method that uses RestClient to delete a template from a Mailgun domain. Makes a DELETE request to the templates endpoint with basic authentication using your API key.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/template-delete.rst#2025-04-21_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\ndef delete_template\n  RestClient.delete \"https://api:YOUR_API_KEY\"\\\n  \"@api.mailgun.net/v3/YOUR_DOMAIN_NAME/templates/TEMPLATE_NAME\"\nend\n```\n\n----------------------------------------\n\nTITLE: Delete Template Version with Go\nDESCRIPTION: Go implementation using the Mailgun SDK to delete a template version\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/version-delete.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/mailgun/mailgun-go/v3\"\n    \"time\"\n)\n\nfunc DeleteTemplateVersion(domain, apiKey string) error {\n    mg := mailgun.NewMailgun(domain, apiKey)\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    // Delete the template version tagged as 'VERSION_TAG'\n    return mg.DeleteTemplateVersion(ctx, \"TEMPLATE_NAME\", \"VERSION_TAG\")\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Domain Tracking with C#\nDESCRIPTION: C# implementation using RestSharp to get domain tracking settings. Includes basic authentication and request parameter configuration.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-domain-tracking.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class GetDomainTrackingChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (GetDomainTracking ().Content.ToString ());\n    }\n\n    public static IRestResponse GetDomainTracking ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.AddParameter (\"domain\", \"YOUR_DOMAIN_NAME\", ParameterType.UrlSegment);\n        request.Resource = \"/domains/{domain}/tracking\";\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Domain Keys using Go\nDESCRIPTION: Go implementation with custom types for response handling. Uses net/http package for API requests and json for response parsing.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/list-domain-keys.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"encoding/json\"\n\t\"net/http\"\n)\n\ntype ListDomainKeyResp struct {\n\tItems []DomainKey `json:\"items\"`\n}\n\ntype DomainKey struct {\n\tSigningDomain string `json:\"signing_domain\"`\n\tSelector      string `json:\"selector\"`\n\tRecord        Record `json:\"dns_record\"`\n}\n\ntype Record struct {\n\tActive bool     `json:\"is_active\"`\n\tCached []string `json:\"cached\"`\n\tName   string   `json:\"name\"`\n\tType   string   `json:\"record_type\"`\n\tValid  string   `json:\"valid\"`\n\tValue  string   `json:\"value\"`\n}\n\nfunc ListDomainKeys() (listDomainKeyResp LitDomainKeyResp, err error) {\n\n\t// creating HTTP request and returning response\n\n\tclient := &http.Client{}\n\treq, _ := http.NewRequest(\"GET\", \"https://api.mailgun.net/v4/domains/AUTHORITY_DOMAIN_NAME/keys\", nil)\n \treq.SetBasicAuth(\"api\", apiKey)\n\tresponse, err := client.Do(req)\n\tif err != nil {\n \t\treturn\n\t}\n\tdefer response.Body.Close()\n\n\t// Decode response.\n\terr = json.NewDecoder(response.Body).Decode(&listDomainKeyResp)\n\treturn\n  }\n```\n\n----------------------------------------\n\nTITLE: PHP Mailgun Client Implementation\nDESCRIPTION: PHP implementation using official Mailgun SDK to retrieve domain credentials.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-credentials.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Include the Autoloader (see \"Libraries\" for install instructions)\nrequire 'vendor/autoload.php';\nuse Mailgun\\Mailgun;\n\n# Instantiate the client.\n$mgClient = Mailgun::create('PRIVATE_API_KEY', 'https://API_HOSTNAME');\n$domain = \"YOUR_DOMAIN_NAME\";\n\n# Issue the call to the client.\n$result = $mgClient->domains()->credentials($domain);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Seed List using cURL\nDESCRIPTION: Basic cURL command to fetch seed list data from Mailgun API. Requires API key authentication using Basic Auth.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-seed-list.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -G \\\n    https://api.mailgun.net/v4/inbox/seedlists/TARGET_EMAIL\n```\n\n----------------------------------------\n\nTITLE: DELETE Whitelist Record Response\nDESCRIPTION: Example response when successfully deleting a whitelist record.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-suppressions.rst#2025-04-21_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\n200\n{\n  \"message\":\"Whitelist address/domain has been removed\",\n  \"value\":\"alice@example.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: POST Add Whitelist Record Endpoint\nDESCRIPTION: API endpoint for adding a new address or domain to the whitelist.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-suppressions.rst#2025-04-21_snippet_30\n\nLANGUAGE: url\nCODE:\n```\nPOST /<domain>/whitelists\n```\n\n----------------------------------------\n\nTITLE: Retrieving Mailgun Tags with Python\nDESCRIPTION: Uses Python requests library to retrieve tags from the Mailgun API. Sends a GET request to the tags endpoint with your API key for authentication and a limit parameter of 10.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/tags/get-tags.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef get_stats():\n    return requests.get(\n        \"https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/tags\",\n        auth=(\"api\", \"YOUR_API_KEY\"),\n        params={\"limit\": 10})\n```\n\n----------------------------------------\n\nTITLE: Parsing Email Addresses with Mailgun API in Python\nDESCRIPTION: This Python function uses the requests library to send a GET request to the Mailgun API for parsing email addresses. It includes authentication and passes the addresses as a parameter.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-parse.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef get_parse():\n    return requests.get(\n        \"https://api.mailgun.net/v3/address/parse\",\n        auth=(\"api\", \"pubkey-5ogiflzbnjrljiky49qxsiozqef5jxp7\"),\n        params={\"addresses\": \"Alice <alice@example.com>,bob@example.com\"})\n```\n\n----------------------------------------\n\nTITLE: Validating Email Address with Mailgun API in Ruby\nDESCRIPTION: This Ruby function uses RestClient to send a GET request to the Mailgun API for email address validation. It sets up the necessary parameters, URL, and authentication for the API call.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-validate-deprecated.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef get_validate\n  url_params = { address: \"foo@mailgun.net\" }\n  public_key = \"pubkey-5ogiflzbnjrljiky49qxsiozqef5jxp7\"\n  validate_url = \"https://api.mailgun.net/v3/address/validate\"\n  RestClient::Request.execute method: :get, url: validate_url,\n                                      headers: { params: url_params },\n                                      user: 'api', password: public_key\nend\n```\n\n----------------------------------------\n\nTITLE: Listing Template Versions with JavaScript Mailgun.js SDK\nDESCRIPTION: An async JavaScript function that uses the Mailgun.js library to list template versions. Creates a Mailgun client with authentication and makes an API call to retrieve template versions.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/version-get-all.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\nconst TEMPLATE_NAME = 'template.name';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n(async () => {\n  try {\n    const domainTemplateVersions = await client.domains.domainTemplates.listVersions(DOMAIN, TEMPLATE_NAME);\n    console.log('domainTemplateVersions', domainTemplateVersions);\n  } catch (error) {\n    console.error(error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Updating Mailing List Member with JavaScript Mailgun SDK\nDESCRIPTION: This JavaScript code uses the Mailgun.js SDK to update a mailing list member. It initializes a Mailgun client, then sends an asynchronous request to update the member's subscription status.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/update-list-member.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n(async () => {\n  try {\n    const updatedMember = await client.lists.members.updateMember(`mylist@${DOMAIN}`, 'bob@example.com',\n        {\n            subscribed: 'yes'\n        }\n    );\n    console.log('updatedMember', updatedMember);\n  } catch (error) {\n    console.error(error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Delete Template Version with C#\nDESCRIPTION: C# implementation using RestSharp to delete a template version\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/version-delete.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class DeleteTemplateVersionChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (DeleteTemplateVersion ().Content.ToString ());\n    }\n\n    public static IRestResponse DeleteTemplateVersion ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n\n        request.Resource = \"/{domain}/templates/{name}/versions/{tag}\";\n        request.AddParameter (\"domain\", \"YOUR_DOMAIN_NAME\", ParameterType.UrlSegment);\n        request.AddParameter (\"name\", \"TEMPLATE_NAME\", ParameterType.UrlSegment);\n        request.AddParameter (\"tag\", \"VERSION_TAG\", ParameterType.UrlSegment);\n\n        request.Method = Method.DELETE\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Template Version with JavaScript\nDESCRIPTION: JavaScript/Node.js implementation using the Mailgun SDK to delete a template version\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/version-delete.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\nconst TEMPLATE_NAME = 'template.name';\nconst VERSION_TAG = 'v1';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' });\n(async () => {\n  try {\n    const deletedVersion = await client.domains.domainTemplates.destroyVersion(\n      DOMAIN,\n      TEMPLATE_NAME,\n      VERSION_TAG\n    );\n    console.log('deletedVersion', deletedVersion);\n  } catch (error) {\n    console.error(error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Retrieving IP Information using C# RestSharp\nDESCRIPTION: This C# class uses RestSharp to make a GET request to the Mailgun API for retrieving information about a specific IP address. It initializes the RestClient with the base URL and authenticator, then executes the request.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-ip.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class GetIPChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (GetIP ().Content.ToString ());\n    }\n\n    public static IRestResponse GetIP ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.AddParameter (\"ip\", \"127.0.0.1\", ParameterType.UrlSegment);\n        request.Resource = \"/ips/{ip}\";\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Seed List using Python\nDESCRIPTION: Python implementation using the requests library to create a seed list. Simple POST request with authentication and data payload.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/create-seed-list.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef create_seed_list():\n    data = {'name': 'list'}\n    return requests.post(\n        \"https://api.mailgun.net/v4/inbox/seedlists\", data=data\n        auth=('api', 'YOUR_API_KEY'))\n```\n\n----------------------------------------\n\nTITLE: PHP Implementation for Mailgun Click Webhook Retrieval\nDESCRIPTION: Demonstrates how to use the Mailgun PHP SDK to fetch click webhook data. Requires the Mailgun PHP library installed via Composer.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-webhook-deprecated.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Include the Autoloader (see \"Libraries\" for install instructions)\nrequire 'vendor/autoload.php';\nuse Mailgun\\Mailgun;\n\n# Instantiate the client.\n$mgClient = new Mailgun('YOUR_API_KEY');\n$domain = 'YOUR_DOMAIN_NAME';\n\n# Issue the call to the client.\n$result = $mgClient->get(\"$domain/webhooks/click\");\n```\n\n----------------------------------------\n\nTITLE: Python Bounce Retrieval Function\nDESCRIPTION: Python function using requests library to fetch bounce information from Mailgun API.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-bounces.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef get_bounces():\n    return requests.get(\n        \"https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/bounces\",\n        auth=(\"api\", \"YOUR_API_KEY\"))\n```\n\n----------------------------------------\n\nTITLE: Validating Mailing List using PHP with cURL\nDESCRIPTION: This PHP function demonstrates how to validate a mailing list using cURL. It sends a POST request to the Mailgun API endpoint for list validation, as the PHP SDK doesn't support this feature directly.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/create-list-validation.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Currently, the PHP SDK does not support Mailing List verifications.\n# Consider using the following php curl function.\nfunction upload_bulk_validation() {\n  $ch = curl_init();\n\n  curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);\n  curl_setopt($ch, CURLOPT_USERPWD, 'api:PRIVATE_API_KEY');\n  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n\n  curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');\n  curl_setopt($ch, CURLOPT_URL, 'https://api.mailgun.net/v3/lists/LIST@YOUR_DOMAIN_NAME/validate');\n\n  $result = curl_exec($ch);\n  curl_close($ch);\n\n  return $result;\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Mailing List using C#\nDESCRIPTION: C# implementation using RestSharp to delete a Mailgun mailing list. Includes basic authentication and response handling.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/remove-mailing-list.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class RemoveMailingListChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (RemoveMailingList ().Content.ToString ());\n    }\n\n    public static IRestResponse RemoveMailingList ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.Resource = \"lists/{list}\";\n        request.AddParameter (\"list\", \"LIST@YOUR_DOMAIN_NAME\",\n                              ParameterType.UrlSegment);\n        request.Method = Method.DELETE;\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Complaint to Mailgun Suppression List using JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to add a complaint to the Mailgun suppression list using the mailgun.js library. It creates a Mailgun client and uses the suppressions.create method to add the complaint.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/add-complaint.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n(async () => {\n    try {\n        const createdComplaint = await client.suppressions.create(DOMAIN, 'complaints', { address: 'bob@example.com' });\n        console.log('createdComplaint', createdComplaint);\n    } catch (error) {\n        console.error(error);\n    }\n})();\n```\n\n----------------------------------------\n\nTITLE: Retrieving DKIM Keys with PHP/cURL\nDESCRIPTION: A PHP function using cURL to retrieve DKIM keys from the Mailgun API. The function sets up basic authentication with the API key and performs a GET request to the DKIM keys endpoint.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/list-all-domain-keys.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction list_domain_keys() {\n    $ch = curl_init();\n\n    curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);\n    curl_setopt($ch, CURLOPT_USERPWD, 'api:PRIVATE_API_KEY');\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n\n    curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\n    curl_setopt($ch, CURLOPT_URL, 'https://api.mailgun.net/v1/dkim/keys');\n    $result = curl_exec($ch);\n    curl_close($ch);\n\n    return $result;\n  }\n```\n\n----------------------------------------\n\nTITLE: Go Template Listing\nDESCRIPTION: Go implementation using the Mailgun SDK to list all active templates with pagination support and context timeout.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/template-get-active.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc ListActiveTemplates(domain, apiKey string) ([]mailgun.Template, error) {\n    mg := mailgun.NewMailgun(domain, apiKey)\n    it := mg.ListTemplates(&mailgun.ListTemplateOptions{Active: true})\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    var page, result []mailgun.Template\n    for it.Next(ctx, &page) {\n        result = append(result, page...)\n    }\n\n    if it.Err() != nil {\n        return nil, it.Err()\n    }\n    return result, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Domain Credentials in Java\nDESCRIPTION: Creates domain credentials using the Mailgun Java SDK with a builder pattern to construct credentials and make the API request.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/create-credentials.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.MailgunDomainsApi;\nimport com.mailgun.model.ResponseWithMessage;\nimport com.mailgun.model.domains.DomainCredentials;\n\n// ...\n\npublic ResponseWithMessage createCredentials() {\n    MailgunDomainsApi mailgunDomainsApi = MailgunClient.config(API_KEY)\n        .createApi(MailgunDomainsApi.class);\n\n    DomainCredentials domainCredentials = DomainCredentials.builder()\n        .login(\"alice@YOUR_DOMAIN_NAME.com\")\n        .password( \"super_secret_password\")\n        .build();\n\n    return mailgunDomainsApi.createNewCredentials(YOUR_DOMAIN_NAME, domainCredentials);\n}\n```\n\n----------------------------------------\n\nTITLE: Bad Request Response for Invalid CNAME Record in JSON\nDESCRIPTION: This is a sample JSON response with status code 400 Bad Request, indicating that the tracking domain has a missing or incorrect CNAME record, which is required for certificate generation.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/secure-tracking.rst#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"message\":  \"invalid CNAME record\",\n}\n```\n\n----------------------------------------\n\nTITLE: C# Bounce Retrieval Implementation\nDESCRIPTION: C# implementation using RestSharp to fetch bounce information. Includes HTTP Basic authentication and proper request parameter handling.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-bounces.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class GetBouncesChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (GetBounces ().Content.ToString ());\n    }\n\n    public static IRestResponse GetBounces ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.AddParameter (\"domain\", \"YOUR_DOMAIN_NAME\", ParameterType.UrlSegment);\n        request.Resource = \"{domain}/bounces\";\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Seed List using PHP\nDESCRIPTION: PHP implementation using cURL functions since the PHP SDK doesn't support inbox placement endpoint. Handles basic authentication and POST request.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/create-seed-list.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Currently, the PHP SDK does not support the inbox placement endpoint.\n# Consider using the following php curl function.\nfunction create_seed_list() {\n  $ch = curl_init();\n\n  curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);\n  curl_setopt($ch, CURLOPT_USERPWD, 'api:PRIVATE_API_KEY');\n  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n\n  curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');\n  curl_setopt($ch, CURLOPT_URL, 'https://api.mailgun.net/v4/inbox/seedlists');\n\n  $result = curl_exec($ch);\n  curl_close($ch);\n\n  return $result;\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Email Addresses with Mailgun API in Go\nDESCRIPTION: This Go function uses the mailgun-go library to parse email addresses. It creates an EmailValidator instance with an API key and calls the ParseAddresses method with a context and a list of addresses.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-parse.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/mailgun/mailgun-go/v3\"\n    \"time\"\n)\n\nfunc ParseAddress(apiKey string) ([]string, []string, error) {\n    mv := mailgun.NewEmailValidator(apiKey)\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    return mv.ParseAddresses(ctx,\n        \"Alice <alice@example.com>\",\n        \"bob@example.com\",\n        // ...\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Mailing List Member with C#\nDESCRIPTION: This C# class demonstrates how to remove a member from a Mailgun mailing list using RestSharp. It creates a REST client with basic authentication using your API key and sends a DELETE request to the appropriate endpoint.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/remove-list-member.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class RemoveListMemberChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (RemoveListMember ().Content.ToString ());\n    }\n\n    public static IRestResponse RemoveListMember ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.Resource = \"lists/{list}/members/{member}\";\n        request.AddParameter (\"list\", \"LIST@YOUR_DOMAIN_NAME\",\n                              ParameterType.UrlSegment);\n        request.AddParameter (\"member\", \"bar@example.com\",\n                              ParameterType.UrlSegment);\n        request.Method = Method.DELETE;\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Update Mailbox Password using Python\nDESCRIPTION: Python implementation using the requests library to update a mailbox password. Simple and straightforward implementation using basic authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/change-mailbox-password.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef change_mailbox_password():\n    return requests.put(\n        \"https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/mailboxes/alice\",\n        auth=(\"api\", \"YOUR_API_KEY\"),\n        data={\"password\": \"supersecret\"})\n```\n\n----------------------------------------\n\nTITLE: Activate Domain Key Response\nDESCRIPTION: Sample JSON response when activating a domain key.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-domains.rst#2025-04-21_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\n{\n   \"active\": true,\n   \"authority\": \"authority.domain.tld\",\n   \"message\": \"domain key activated\",\n   \"selector\": \"selector\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Bounce using PHP Mailgun SDK\nDESCRIPTION: PHP implementation using the Mailgun SDK. Requires composer autoloader and API key configuration.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/add-bounce.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Include the Autoloader (see \"Libraries\" for install instructions)\nrequire 'vendor/autoload.php';\nuse Mailgun\\Mailgun;\n\n# Instantiate the client.\n$mgClient = Mailgun::create('PRIVATE_API_KEY', 'https://API_HOSTNAME');\n$domain   = 'YOUR_DOMAIN_NAME';\n$recipient = 'bob@example.com';\n\n# Issue the call to the client.\n$result = $mgClient->suppressions()->bounces()->create($domain, $recipient);\n```\n\n----------------------------------------\n\nTITLE: Expected SMTP Connection Success Response\nDESCRIPTION: Sample output when successfully connecting to Mailgun's SMTP server, indicating port 25 is not blocked and the connection was established.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/faqs.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nTrying 174.37.214.195...\nConnected to mxa.mailgun.org.\nEscape character is '^]'.\n220 mxa.mailgun.org (Mailgun)\n```\n\n----------------------------------------\n\nTITLE: Updating Mailgun Template Description with cURL\nDESCRIPTION: Makes a PUT request to update a template's description using cURL. Requires a Mailgun API key and domain name. The request includes the template name and the new description.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/template-update.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -X PUT \\\n    https://api.mailgun.net/v3/domains/YOUR_DOMAIN_NAME/templates/TEMPLATE_NAME \\\n    -F description = 'new template description'\n```\n\n----------------------------------------\n\nTITLE: Handling Validation Preview Completion Webhook in JavaScript\nDESCRIPTION: This snippet shows the JSON structure of a webhook payload for a completed validation preview job. It includes signature information, job details, and summary statistics for email deliverability and risk levels.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-deliverability-alerts.rst#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"signature\": {\n    \"timestamp\": 1667592054,\n    \"token\": \"7582ab415b3542100d55388a085cc54f677e9acc4f1f944333\"\n  },\n  \"event_data\": {\n    \"id\": \"fa2613d9-a795-4e40-8f7c-bdb6bafbfc76\",\n    \"bulk_validation_job\": {\n      \"created_at\": 1667592049,\n      \"list_id\": \"LIST 34\",\n      \"quantity\": 100,\n      \"status\": \"uploaded\",\n      \"summary\": {\n        \"result\": {\n          \"deliverable\": 77,\n          \"undeliverable\": 1,\n          \"catch_all\": 15,\n          \"unknown\": 6\n        },\n        \"risk\": {\n          \"high\": 1,\n          \"low\": 77,\n          \"medium\": 15,\n          \"unknown\": 6\n        }\n      }\n    },\n    \"message\": \"Preview job fa2613d9-a795-4e40-8f7c-bdb6bafbfc76 is complete\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Webhooks using Python Requests\nDESCRIPTION: Python implementation using the requests library to make GET request to Mailgun API\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-webhooks.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef get_bounces():\n    return requests.get(\n        \"https://api.mailgun.net/v3/domains/YOUR_DOMAIN_NAME/webhooks\",\n        auth=(\"api\", \"YOUR_API_KEY\"))\n```\n\n----------------------------------------\n\nTITLE: Fetching Bulk Verification Job Status in Java\nDESCRIPTION: This Java code snippet demonstrates how to use the Mailgun Java SDK to retrieve the status of a bulk email verification job. It requires the API key and list name, and returns a BulkVerificationJobStatusResponse object.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-bulk-validation.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v4.MailgunEmailVerificationApi;\nimport com.mailgun.client.MailgunClient;\nimport com.mailgun.model.verification.BulkVerificationJobStatusResponse\n\n// ...\n\npublic BulkVerificationJobStatusResponse getBulkVerificationJobStatus() {\n    MailgunEmailVerificationApi mailgunEmailVerificationApi = MailgunClient.config(API_KEY)\n            .createApi(MailgunEmailVerificationApi.class);\n\n    return mailgunEmailVerificationApi.getBulkVerificationJobStatus(LIST_NAME);\n}\n```\n\n----------------------------------------\n\nTITLE: Python Domain Info Request\nDESCRIPTION: Simple Python function using the requests library to fetch domain information from Mailgun API\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-domain.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef get_domain():\n    return requests.get(\n        \"https://api.mailgun.net/v3/domains/YOUR_DOMAIN_NAME\",\n        auth=(\"api\", \"YOUR_API_KEY\"))\n```\n\n----------------------------------------\n\nTITLE: Resending Messages with Ruby RestClient\nDESCRIPTION: Ruby implementation using RestClient to resend messages to multiple recipients.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/resend-simple-message.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef resend_simple_message\n    RestClient.post \"https://api:YOUR_API_KEY\"\\\n    \"@https://storage-{{MESSAGE_STORAGE_REGION}}.api.mailgun.net/v3/domains/YOUR_DOMAIN_NAME/messages/STORAGE_KEY\",\n    :to => \"bar@example.com, YOU@YOUR_DOMAIN_NAME\"\nend\n```\n\n----------------------------------------\n\nTITLE: Deleting All Templates Using JavaScript\nDESCRIPTION: JavaScript implementation using the mailgun.js library to delete all templates for a domain. Creates a Mailgun client and calls the destroyAll method on the domainTemplates object.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/template-delete-all.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n(async () => {\n  try {\n    const deletedDomainTemplates = await client.domains.domainTemplates.destroyAll(DOMAIN);\n    console.log('deletedDomainTemplates', deletedDomainTemplates);\n  } catch (error) {\n      console.error(error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Parsing Email Addresses with Mailgun API in Java\nDESCRIPTION: This Java code snippet uses the Unirest library to send a GET request to the Mailgun API for parsing email addresses. It includes basic authentication and returns the response as a JsonNode.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-parse.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mashape.unirest.http.HttpResponse;\nimport com.mashape.unirest.http.JsonNode;\nimport com.mashape.unirest.http.Unirest;\nimport com.mashape.unirest.http.exceptions.UnirestException;\n\npublic class MGSample {\n\n    // ...\n\n    public static JsonNode parseAddresses() throws UnirestException {\n\n        HttpResponse <JsonNode> request = Unirest.get(\"https://api.mailgun.net/v3/address/parse\")\n            .basicAuth(\"api\", API_KEY)\n            .queryString(\"addresses\", \"bob@example.com, alice@example.com\")\n            .asJson();\n\n        return request.getBody();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Delete SMTP Credentials Response\nDESCRIPTION: Sample JSON response when deleting SMTP credentials.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-domains.rst#2025-04-21_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\n{\n   \"message\": \"Credentials have been deleted\",\n   \"spec\": \"alice@samples.mailgun.org\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Seed Lists with Java\nDESCRIPTION: Example Java implementation for updating a seed list using Mailgun's Java SDK. The code constructs a SeedListRequest object with seed filter, list name, and sending domains, then uses the MailgunSeedListApi to update the seed list for a target email.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/update-seed-list.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v4.MailgunSeedListApi;\nimport com.mailgun.client.MailgunClient;\nimport com.mailgun.model.seedlist.SeedListItem;\nimport com.mailgun.model.seedlist.SeedListRequest;\nimport java.util.List;\n\n// ...\n\npublic SeedListItem updateSeedList() {\n    MailgunSeedListApi mailgunSeedListApi = MailgunClient.config(API_KEY)\n            .createApi(MailgunSeedListApi.class);\n\n    SeedListRequest request = SeedListRequest.builder()\n            .seedFilter(SEED_FILTER)\n            .name(SEED_LIST_NAME)\n            .sendingDomains(List.of(TEST_DOMAIN_1, TEST_DOMAIN_2))\n            .build();\n\n    return mailgunSeedListApi.updateSeedList(TARGET_EMAIL, request);\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving IP Information using Mailgun Java SDK\nDESCRIPTION: This Java code snippet uses the Mailgun Java SDK to retrieve information about a specific IP address. It initializes the MailgunIPsApi client with the API key and calls the getSpecifiedIP method.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-ip.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.MailgunIPsApi;\nimport com.mailgun.model.ips.IPResult;\n\n// ...\n\npublic IPResult getIP() {\n    MailgunIPsApi mailgunIPsApi = MailgunClient.config(API_KEY)\n        .createApi(MailgunIPsApi.class);\n\n    return mailgunIPsApi.getSpecifiedIP(\"127.0.0.1\");\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Domain to Whitelist with Python\nDESCRIPTION: Python function using the requests library to add a domain to the Mailgun whitelist. Makes a POST request to the whitelist endpoint with the domain to be whitelisted.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/add-whitelist.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef add_whitelist():\n    return requests.post(\n        \"https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/whitelists\",\n        auth=(\"api\", \"YOUR_API_KEY\"),\n        data={'address':'example.com'})\n```\n\n----------------------------------------\n\nTITLE: Removing IP from Domain with JavaScript\nDESCRIPTION: Uses the Mailgun.js library to delete an IP from a domain. Creates a Mailgun client with API key authentication and calls the deleteIp method asynchronously with proper error handling.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/remove-domain-ip.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n(async () => {\n  try {\n    const deletedIp = await client.domains.deleteIp(DOMAIN, '127.0.0.1');\n    console.log('deletedIp', deletedIp);\n  } catch (error) {\n    console.error(error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Creating Template Version with JavaScript Mailgun.js\nDESCRIPTION: This JavaScript code uses the Mailgun.js library to create a new template version. It initializes a Mailgun client with API credentials and calls the createVersion method with the necessary parameters.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/version-create.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\nconst TEMPLATE_NAME = 'template.name';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n(async () => {\n  try {\n    const createdTemplateVersion = await client.domains.domainTemplates.createVersion(\n      DOMAIN,\n      TEMPLATE_NAME,\n      {\n        description: 'template description',\n        template: '{{fname}} {{lname}}',\n        tag: 'v2',\n        comment: 'comment',\n        active: 'yes'\n      }\n    );\n    console.log('createdTemplateVersion', createdTemplateVersion);\n  } catch (error) {\n    console.error(error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Delete Webhook using C#\nDESCRIPTION: C# implementation using RestSharp to delete a webhook. Includes authentication and URL parameter configuration.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/delete-webhook-deprecated.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class DeleteWebhookChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (DeleteWebhook ().Content.ToString ());\n    }\n\n    public static IRestResponse DeleteWebhook ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.Resource = \"/domains/{name}/webhooks/click\";\n        request.AddUrlSegment (\"name\", \"YOUR_DOMAIN_NAME\");\n        request.Method = Method.DELETE;\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Template Version with Python\nDESCRIPTION: Python implementation using requests library to delete a template version\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/version-delete.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef delete_template_version():\n    return requests.delete(\n        \"https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/templates/TEMPLATE_NAME/versions/VERSION_TAG\",\n        auth=(\"api\", \"YOUR_API_KEY\"))\n```\n\n----------------------------------------\n\nTITLE: Adding Domain to Whitelist with C#\nDESCRIPTION: C# class demonstrating how to add a domain to the Mailgun whitelist using RestSharp. Creates a RestClient with basic authentication and sends a POST request with the domain to be whitelisted.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/add-whitelist.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class AddBounceChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (AddBounce ().Content.ToString ());\n    }\n\n    public static IRestResponse AddBounce ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.Resource = \"{domain}/whitelists\";\n        request.AddParameter (\"domain\", \"YOUR_DOMAIN_NAME\", ParameterType.UrlSegment);\n        request.AddParameter (\"domain\", \"example.com\");\n        request.Method = Method.POST;\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Seed List Filters with C#\nDESCRIPTION: This C# class demonstrates how to retrieve seed list filters using the RestSharp library. It creates a RestClient with basic authentication and sends a GET request to the Mailgun API endpoint for seed list filters.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-seed-list-filters.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class InboxPlacementTest\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (GetSeedListFilters().Content.ToString());\n    }\n\n    public static IRestResponse GetSeedListFilters()\n    {\n        RestClient client = new RestClient();\n        client.BaseUrl = new Uri(\"https://api.mailgun.net/v4\");\n        client.Authenticator =\n            new HttpBasicAuthenticator(\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest();\n        request.Resource = \"/inbox/seedlists/_filters\";\n        return client.Execute(request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Updating SMTP Credentials using Java\nDESCRIPTION: This Java code snippet shows how to update SMTP credentials using the Mailgun Java SDK. It creates a MailgunDomainsApi instance and calls the updateCredentials method with the domain name, login, and new password.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/change-pwd-credentials.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.MailgunDomainsApi;\nimport com.mailgun.model.ResponseWithMessage;\n\n// ...\n\npublic ResponseWithMessage updatePassword() {\n    MailgunDomainsApi mailgunDomainsApi = MailgunClient.config(API_KEY)\n        .createApi(MailgunDomainsApi.class);\n\n    return mailgunDomainsApi.updateCredentials(YOUR_DOMAIN_NAME, YOUR_LOGIN, \"super_secret_password\");\n}\n```\n\n----------------------------------------\n\nTITLE: Java Implementation using Unirest\nDESCRIPTION: Java class demonstrating how to fetch inbox placement results using Unirest HTTP library with basic authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-results-attribute.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mashape.unirest.http.HttpResponse;\nimport com.mashape.unirest.http.JsonNode;\nimport com.mashape.unirest.http.Unirest;\nimport com.mashape.unirest.http.exceptions.UnirestException;\n\npublic class MGSample {\n\n    // ...\n\n    public static JsonNode getResultsAttribute() throws UnirestException {\n\n        HttpResponse<JsonNode> request = Unirest.get(\"https://api.mailgun.net/v4/inbox/results/a/ATTRIBUTE\")\n            .basicAuth(\"api\", API_KEY)\n            .asJson();\n\n        return request.getBody();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Response Structure for Route Retrieval in JavaScript\nDESCRIPTION: Shows the JSON response structure when retrieving a specific route by ID from the Mailgun API. The response includes all details of the requested route.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/user_manual.rst#2025-04-21_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"route\": {\n      \"description\": \"Sample route\",\n      \"created_at\": \"Wed, 15 Feb 2012 13:03:31 GMT\",\n      \"actions\": [\n          \"forward(\\\"http://myhost.com/messages/\\\")\",\n          \"stop()\"\n      ],\n      \"priority\": 0,\n      \"expression\": \"match_recipient(\\\".*@samples.mailgun.org\\\")\",\n      \"id\": \"4f3bad2335335426750048c6\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Canceling Bulk Email Verification Preview in PHP\nDESCRIPTION: This PHP function demonstrates how to cancel a bulk email verification preview using cURL. It sends a DELETE request to the Mailgun API v4 endpoint with basic authentication, as the PHP SDK doesn't support this endpoint.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/delete-bulk-preview.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Currently, the PHP SDK does not support the v4 Validations endpoint.\n# Consider using the following php curl function.\nfunction delete_bulk_preview() {\n  $ch = curl_init();\n\n  curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);\n  curl_setopt($ch, CURLOPT_USERPWD, 'api:PRIVATE_API_KEY');\n  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n\n  curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');\n  curl_setopt($ch, CURLOPT_URL, 'https://api.mailgun.net/v4/address/validate/preview/LIST_NAME');\n  $result = curl_exec($ch);\n  curl_close($ch);\n\n  return $result;\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Tags Using C# RestSharp\nDESCRIPTION: This C# class demonstrates how to delete a tag named 'newsletter' using the RestSharp library. It creates a REST client with HTTP basic authentication using your API key, then sends a DELETE request to the Mailgun API endpoint.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/tags/delete-tag.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class DeleteTagChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (DeleteTag ().Content.ToString ());\n    }\n\n    public static IRestResponse DeleteTag ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.AddParameter (\"domain\", \"YOUR_DOMAIN_NAME\", ParameterType.UrlSegment);\n        request.Resource = \"{domain}/tags/{tag}\";\n        request.AddUrlSegment (\"tag\", \"newsletter\");\n        request.Method = Method.DELETE;\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Email Addresses with Mailgun API using cURL\nDESCRIPTION: This snippet demonstrates how to use cURL to make a GET request to the Mailgun API for parsing email addresses. It includes authentication and passes the addresses as a URL-encoded parameter.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-parse.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -G --user 'api:pubkey-501jygdalut926-6mb1ozo8ay9crlc28' \\\n    https://api.mailgun.net/v3/address/parse \\\n    --data-urlencode addresses='Alice <alice@example.com>,bob@example.com'\n```\n\n----------------------------------------\n\nTITLE: Delete Webhook using Go\nDESCRIPTION: Go implementation using the official Mailgun SDK to delete a webhook. Includes context handling and timeout configuration.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/delete-webhook-deprecated.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/mailgun/mailgun-go/v3\"\n    \"time\"\n)\n\nfunc DeleteWebhook(domain, apiKey string) error {\n    mg := mailgun.NewMailgun(domain, apiKey)\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    return mg.DeleteWebhook(ctx, \"clicked\")\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Mailgun Webhooks using Python\nDESCRIPTION: Implements a function to add a webhook for 'click' events using Python's requests library. The webhook will send click tracking data to the specified URL when users click links in emails.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/add-webhook-deprecated.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef add_webhook():\n    return requests.post(\n        \"https://api.mailgun.net/v3/domains/YOUR_DOMAIN_NAME/webhooks\",\n        auth=(\"api\", \"YOUR_API_KEY\"),\n        data={'id':'click', 'url':'http://bin.example.com/8de4a9c4'})\n```\n\n----------------------------------------\n\nTITLE: Python Requests Implementation for Domain Tag Limits\nDESCRIPTION: Python implementation using requests library to fetch domain tag limits with basic authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-limits.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef get_stats():\n    return requests.get(\n        \"https://api.mailgun.net/v3/domains/YOUR_DOMAIN_NAME/limits/tag\",\n        auth=(\"api\", \"YOUR_API_KEY\"))\n```\n\n----------------------------------------\n\nTITLE: Creating Domain Credentials in PHP\nDESCRIPTION: Creates domain credentials using the Mailgun PHP SDK by initializing the client and making a createCredential request.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/create-credentials.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Include the Autoloader (see \"Libraries\" for install instructions)\nrequire 'vendor/autoload.php';\nuse Mailgun\\Mailgun;\n\n# Instantiate the client.\n$mgClient = Mailgun::create('PRIVATE_API_KEY', 'https://API_HOSTNAME');\n$domain   = 'YOUR_DOMAIN_NAME';\n$smtpUser = 'bob';\n$smtpPass = 'new_password';\n\n# Issue the call to the client.\n$result = $mgClient->domains()->createCredential($domain, $smtpUser, $smtpPass);\n```\n\n----------------------------------------\n\nTITLE: Java Implementation for Inbox Filters\nDESCRIPTION: Java code using Unirest HTTP library to fetch inbox placement filters. Requires Unirest dependency and handles HTTP authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-results-filters.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mashape.unirest.http.HttpResponse;\nimport com.mashape.unirest.http.JsonNode;\nimport com.mashape.unirest.http.Unirest;\nimport com.mashape.unirest.http.exceptions.UnirestException;\n\npublic class MGSample {\n\n    // ...\n\n    public static JsonNode getResultsFilters() throws UnirestException {\n\n        HttpResponse<JsonNode> request = Unirest.get(\"https://api.mailgun.net/v4/inbox/results/_filters\")\n            .basicAuth(\"api\", API_KEY)\n            .asJson();\n\n        return request.getBody();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Route Retrieval Implementation\nDESCRIPTION: JavaScript/Node.js implementation using Mailgun.js library to fetch route details with async/await pattern.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-route.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n(async () => {\n  try {\n    const route = await client.routes.get('your_route_id');\n    console.log('route', route);\n  } catch (error) {\n    console.error(error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Mailing Lists with cURL in Bash\nDESCRIPTION: This snippet demonstrates how to use cURL in Bash to retrieve mailing lists from the Mailgun API. It requires the API key for authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-mailing-lists.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -G \\\n    https://api.mailgun.net/v3/lists/pages\n```\n\n----------------------------------------\n\nTITLE: Seed List Creation Response (JavaScript)\nDESCRIPTION: Example JSON response returned when successfully creating a seed list. The response includes the unique identifier, target email, mailing list details, and initial empty delivery statistics.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-inbox-placement.rst#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"kid\": \"610abd2009b08f382ac86c45\",\n  \"created_at\": \"2021-08-04T16:15:28.08Z\",\n  \"updated_at\": \"2021-08-04T16:15:28.08Z\",\n  \"last_result_at\": \"0001-01-01T00:00:00Z\",\n  \"target_email\": \"ibp-12345678-1234-1234-1234-123456789012@domain.com\",\n  \"sending_domains\": [],\n  \"has_results\": false,\n  \"name\": \"My campaign inbox test\",\n  \"seed_filter\": \".*\",\n  \"mailing_list\": \"ibp-12345678-1234-1234-1234-123456789012@domain.com,another@email.com\",\n  \"delivery_stats\": {\n    \"all\": {\n      \"delivered\": 0,\n      \"missing\": 0,\n      \"pending\": 0,\n      \"spam\": 0,\n      \"inbox\": 0,\n      \"total\": 0,\n      \"provider\": \"all\"\n    }\n  },\n  \"results\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Tag Statistics by Devices\nDESCRIPTION: Example JSON response showing tag statistics aggregated by device types, with event counts for desktop and mobile devices.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-tags.rst#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"device\": {\n      \"desktop\": {\n          \"clicked\": 8,\n          \"complained\": 1,\n          \"opened\": 8,\n          \"unique_clicked\": 0,\n          \"unique_opened\": 0,\n          \"unsubscribed\": 0\n      },\n      \"mobile\": {\n          \"clicked\": 3,\n          \"complained\": 1,\n          \"opened\": 5,\n          \"unique_clicked\": 0,\n          \"unique_opened\": 0,\n          \"unsubscribed\": 0\n      }\n  },\n  \"tag\": \"exampletag\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Mailgun Webhook using Go\nDESCRIPTION: This Go function uses the Mailgun Go SDK to update a webhook. It creates a Mailgun client, sets up a context with a timeout, and calls the UpdateWebhook method to update the 'clicked' webhook URL.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/update-webhook.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/mailgun/mailgun-go/v3\"\n    \"time\"\n)\n\nfunc UpdateWebhook(domain, apiKey string) error {\n    mg := mailgun.NewMailgun(domain, apiKey)\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    return mg.UpdateWebhook(ctx, \"clicked\", []string{\"https://your_domain.com/clicked\"})\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Seed List Filters with Ruby\nDESCRIPTION: This Ruby function uses the RestClient gem to retrieve seed list filters from the Mailgun API. It sends a GET request to the API endpoint with basic authentication using the provided API key.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-seed-list-filters.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef get_seed_list_filters\n  RestClient.get(\"https://api:YOUR_API_KEY\"\\\n                 \"@api.mailgun.net/v4/inbox/seedlists/_filters\"\\\n                 {|response, request, result| response }\nend\n```\n\n----------------------------------------\n\nTITLE: Retrieving Email Templates with Java\nDESCRIPTION: Uses the Mailgun Java SDK to fetch a specific template. This snippet demonstrates how to configure the Mailgun client with an API key and make a template request.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/template-get.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.MailgunTemplatesApi;\nimport com.mailgun.model.templates.TemplateResponse;\n\n// ...\n\npublic TemplateResponse getTemplate() {\n    MailgunTemplatesApi mailgunTemplatesApi = MailgunClient.config(API_KEY)\n        .createApi(MailgunTemplatesApi.class);\n\n    return mailgunTemplatesApi.getTemplate(YOUR_DOMAIN_NAME, TEMPLATE_NAME);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Complaint to Mailgun Suppression List using Go\nDESCRIPTION: This Go function shows how to add a complaint to the Mailgun suppression list using the mailgun-go library. It creates a new Mailgun client and uses the CreateComplaint method to add the complaint.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/add-complaint.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/mailgun/mailgun-go/v3\"\n    \"time\"\n)\n\nfunc CreateComplaint(domain, apiKey string) error {\n    mg := mailgun.NewMailgun(domain, apiKey)\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    return mg.CreateComplaint(ctx, \"bob@example.com\")\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Webhook using Go\nDESCRIPTION: Delete a webhook using Mailgun Go SDK with context and timeout\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/delete-webhook.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/mailgun/mailgun-go/v3\"\n    \"time\"\n)\n\nfunc DeleteWebhook(domain, apiKey string) error {\n    mg := mailgun.NewMailgun(domain, apiKey)\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    return mg.DeleteWebhook(ctx, \"clicked\")\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Seed Lists with C# RestSharp\nDESCRIPTION: C# class demonstrating how to create a seed list using the RestSharp library. The implementation configures a REST client with basic authentication and sends a PUT request to the Mailgun API endpoint with sending domains as a parameter.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/update-seed-list.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class CreateInboxPlacementTest\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (CreateSeedList ().Content.ToString ());\n    }\n\n    public static IRestResponse CreateSeedList ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v4\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\", \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.AddParameter (\"sending_domains\", \"YOUR_DOMAIN_NAME\", ParameterType.UrlSegment);\n        request.Resource = \"inbox/seedlists/TARGET_EMAIL\";\n        request.Method = Method.PUT;\n        return client.Execute (request);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Domain IP with Ruby\nDESCRIPTION: Uses the RestClient library in Ruby to make a DELETE request to the Mailgun API, unassigning an IP from a domain. Requires API key authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/remove-domain-ip.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef delete_domain_ip\n  RestClient.delete \"https://api:YOUR_API_KEY\"\\\n  \"@api.mailgun.net/v3/domains/YOUR_DOMAIN_NAME/ips/127.0.0.1\"\nend\n```\n\n----------------------------------------\n\nTITLE: Listing Template Versions with Mailgun Java SDK\nDESCRIPTION: Uses the Mailgun Java SDK to retrieve all versions of a specific template. Requires importing the Mailgun Templates API and response model classes.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/version-get-all.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.MailgunTemplatesApi;\nimport com.mailgun.model.templates.TemplateAllVersionsResponse;\n\n// ...\n\npublic TemplateAllVersionsResponse listTemplateVersions() {\n    MailgunTemplatesApi mailgunTemplatesApi = MailgunClient.config(API_KEY)\n        .createApi(MailgunTemplatesApi.class);\n\n    return mailgunTemplatesApi.getAllTemplateVersions(YOUR_DOMAIN_NAME, TEMPLATE_NAME);\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Mailgun Message Route Payload Structure in Plaintext\nDESCRIPTION: This snippet shows the structure of a Mailgun message route payload, including email headers, message content, and Mailgun-specific fields. It demonstrates how Mailgun processes and presents incoming email data for routing and storage.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/message-store.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nContent-Type: multipart/alternative; boundary=\"001a114490d2c5be3d05433e6d03\"\nDate: Fri, 9 Dec 2016 13:04:51 -0600\nFrom: Excited User <user@samples.mailgun.com>\nMessage-Id: <CABPem2N_Ucj3wRRZnLVpVF_fRjkTBXHZReZC3zY-hHsRa=T51g@samples.mailgun.com>\nMime-Version: 1.0\nSubject: Message Routes\nTo: hook@sandboxdb91ab935a414789809f96c91229a0ee.mailgun.org\nX-Envelope-From: <user@samples.mailgun.com>\nX-Mailgun-Incoming: Yes\nX-Originating-Ip: [2001:xxx:xxxx:xxx::beef:93]\nbody-html: <div dir=\"ltr\">Testing Mailgun&#39;s forwarded and stored message routes :)</div>\nbody-plain: Testing Mailgun's forwarded and stored message routes :)\ndomain: sandboxdb91ab935a414789809f96c91229a0ee.mailgun.org\nfrom: Excited User <user@samples.mailgun.com>\nmessage-headers: [[\"X-Mailgun-Incoming\", \"Yes\"], [\"X-Envelope-From\", \"<user@samples.mailgun.com>\"], [\"Mime-Version\", \"1.0\"], [\"X-Originating-Ip\", \"[2001:xxx:xxxx:xxx::beef:93]\"], [\"From\", \"Excited User <user@samples.mailgun.com>\"], [\"Date\", \"Fri, 9 Dec 2016 13:04:51 -0600\"], [\"Message-Id\", \"<CABPem2N_Ucj3wRRZnLVpVF_fRjkTBXHZReZC3zY-hHsRa=T51g@samples.mailgun.com>\"], [\"Subject\", \"Message Routes\"], [\"To\", \"hook@sandboxdb91ab935a414789809f96c91229a0ee.mailgun.org\"], [\"Content-Type\", \"multipart/alternative; boundary=\\\"001a114490d2c5be3d05433e6d03\\\"\"]]\nmessage-url: https://si.api.mailgun.net/v3/domains/sandboxdb91ab935a414789809f96c91229a0ee.mailgun.org/messages/eyJwIjpmYWxzZSwiayI6IjFlOTZmNTkyLTAyOWItNDJkYi1iNjM5LTgzNTgwYzMxYjNhOCIsInMiOiIyMmNkYTRkZWFhIiwiYyI6InNhaWFkIn0=\nrecipient: hook@sandboxdb91ab935a414789809f96c91229a0ee.mailgun.org\nsender: user@samples.mailgun.com\nsignature: 6ed72df4b5f00af436fff03730dc8bda31bf5800fdf431d1da5c0009a639d57e\nstripped-html: <div dir=\"ltr\">Testing Mailgun&#39;s forwarded and stored message routes :)</div>\nstripped-signature:\nstripped-text: Testing Mailgun's forwarded and stored message routes :)\nsubject: Message Routes\ntimestamp: 1481310293\ntoken: f2a24f20007696fb23fd66ff0f59f17fac3f885324caaaec50\n```\n\n----------------------------------------\n\nTITLE: Retrieving Template Version with cURL in Bash\nDESCRIPTION: Makes a GET request to the Mailgun API to retrieve a specific template version using cURL. Requires a Mailgun API key, domain name, template name, and version tag.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/version-get.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -G \\\n  https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/templates/TEMPLATE_NAME/versions/VERSION_TAG\n```\n\n----------------------------------------\n\nTITLE: Querying Mailgun Events API using curl\nDESCRIPTION: This snippet demonstrates how to use curl to query the Mailgun Events API. It includes parameters for filtering by date, sorting order, limit, and recipient.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/events-date-time-recipient.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -G \\\n        https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/events \\\n        --data-urlencode begin='Fri, 3 May 2013 09:00:00 -0000' \\\n        --data-urlencode ascending=yes \\\n        --data-urlencode limit=25 \\\n        --data-urlencode pretty=yes \\\n        --data-urlencode recipient=joe@example.com\n```\n\n----------------------------------------\n\nTITLE: Retrieving Domain Connection Settings with cURL in Bash\nDESCRIPTION: This snippet demonstrates how to use cURL in Bash to make a GET request to the Mailgun API for retrieving domain connection settings. It requires the API key and domain name to be replaced with actual values.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-connection.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -G \\\n    https://api.mailgun.net/v3/domains/YOUR_DOMAIN_NAME/connection\n```\n\n----------------------------------------\n\nTITLE: Retrieving Unsubscribes with cURL\nDESCRIPTION: Basic cURL command to fetch unsubscribe data from Mailgun API using API key authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-unsubscribes.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -G \\\n       https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/unsubscribes\n```\n\n----------------------------------------\n\nTITLE: Adding Bounce using Ruby RestClient\nDESCRIPTION: Ruby implementation using RestClient to add a bounce record via HTTP POST request.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/add-bounce.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef add_bounce\n  RestClient.post(\"https://api:YOUR_API_KEY\"\\\n                  \"@api.mailgun.net/v3/YOUR_DOMAIN_NAME/bounces\",\n                  :address => 'bob@example.com')\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Mailing List using PHP\nDESCRIPTION: Creates a mailing list using Mailgun's PHP SDK. Requires vendor autoloader and configures list properties including name, description, and access level.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/create-mailing-list.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Include the Autoloader (see \"Libraries\" for install instructions)\nrequire 'vendor/autoload.php';\nuse Mailgun\\Mailgun;\n\n# Instantiate the client.\n$mgClient = Mailgun::create('PRIVATE_API_KEY', 'https://API_HOSTNAME');\n$mailing_list     = 'LIST@YOUR_DOMAIN_NAME';\n$list_name        = 'Mailgun Subscribers';\n$list_description = 'News and service updates';\n$access_level     = 'readonly';\n\n# Issue the call to the client.\n$result = $mgClient->mailingList()->create($mailing_list, $list_name, $list_description, $access_level);\n```\n\n----------------------------------------\n\nTITLE: Fetching Bounce Information using JavaScript Mailgun SDK\nDESCRIPTION: This JavaScript code uses the Mailgun.js SDK to retrieve bounce information for a specific email address. It requires the API key and domain name to be configured, and uses async/await for handling the asynchronous API call.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-bounce.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n(async () => {\n  try {\n    const bouncesForAddress = await client.suppressions.get(DOMAIN, 'bounces', 'foo@bar.com');\n    console.log('bouncesForAddress', bouncesForAddress);\n  } catch (error) {\n    console.error(error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Creating Mailgun Domain using Python\nDESCRIPTION: Implements domain creation using Python requests library. Uses basic authentication with API key and allows setting domain name and SMTP password.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/create-domain.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef create_domain():\n    return requests.post(\n        \"https://api.mailgun.net/v3/domains\",\n        auth=(\"api\", \"YOUR_API_KEY\"),\n        data={\"name\": \"YOUR_DOMAIN_NAME\",\n              \"smtp_password\": \"supasecret\"})\n```\n\n----------------------------------------\n\nTITLE: Using Mailgun Variables Container for Advanced Variable Handling\nDESCRIPTION: Example of using the multipart/mailgun-variables MIME construct to handle recipient variables that might contain special characters. The JSON variables are Base64 encoded in this structure.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/user_manual.rst#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nContent-Type: multipart/mailgun-variables; boundary=\"8686cc907910484e9d21c54776cd791c\"\nMime-Version: 1.0\nFrom: bob@bob-mg\nDate: Thu, 26 Jul 2012 15:43:07 +0000\nMessage-Id: <20120726154307.29852.44460@definebox.com>\nSender: bob=bob-mg@definebox.com\n\n--8686cc907910484e9d21c54776cd791c\nMime-Version: 1.0\nContent-Type: application/json\nContent-Transfer-Encoding: base64\n\neyJkZXNjcmlwdGlvbiI6ICJrbGl6aGVudGFzIn0=\n\n--8686cc907910484e9d21c54776cd791c\nContent-Type: message/rfc822\nMime-Version: 1.0\n\nDate: Thu, 26 Jul 2012 19:42:55 +0400\nTo: %recipient.description% <support@mailgunhq.com>\nFrom: bob@bob-mg\nSubject: (rackspace) Hello\n MSK 2012 support@mailgunhq.com %recipient.description%\nMessage-Id: <20120726154302.29322.40670@definebox.com>\n\nsupport@mailgunhq.com %recipient.description%\n\n--8686cc907910484e9d21c54776cd791c--\n```\n\n----------------------------------------\n\nTITLE: Retrieving Bulk Validation Preview Status using C# RestSharp\nDESCRIPTION: This C# class uses the RestSharp library to make a GET request to the Mailgun API for retrieving the bulk validation preview status. It sets up basic authentication and includes a Main method for demonstration.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-bulk-preview.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class GetBulkValidationPreview\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (GetBulkPreview ().Content.ToString ());\n    }\n\n    public static IRestResponse GetBulkPreview ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v4\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.AddParameter (\"list\", \"LIST_NAME\", ParameterType.UrlSegment);\n        request.Resource = \"/address/validate/preview/{list}\";\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Ruby RestClient Implementation for Domain Tag Limits\nDESCRIPTION: Ruby implementation using RestClient to fetch domain tag limits with URL parameter handling.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-limits.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef get_stats\n  url_params = {}\n  url_params[:limit] = 10\n  query_string = url_params.collect {|k, v| \"#{k.to_s}=#{CGI::escape(v.to_s)}\"}.join(\"&\")\n  RestClient.get \"https://api:YOUR_API_KEY\"\\\n  \"@api.mailgun.net/v3/domains/YOUR_DOMAIN_NAME/limits/tag\"\nend\n```\n\n----------------------------------------\n\nTITLE: Retrieving Seed Lists with curl in Bash\nDESCRIPTION: This snippet demonstrates how to use curl in Bash to retrieve seed lists from the Mailgun API. It uses basic authentication with an API key and sends a GET request to the v4 seedlists endpoint.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-seed-lists.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -G \\\n    https://api.mailgun.net/v4/seedlists\n```\n\n----------------------------------------\n\nTITLE: Listing Routes in Mailgun\nDESCRIPTION: Demonstrates how to retrieve a list of all routes configured in the Mailgun account.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/user_manual.rst#2025-04-21_snippet_36\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: samples/get-routes.rst\n```\n\n----------------------------------------\n\nTITLE: Updating Mailgun Click Webhook with cURL\nDESCRIPTION: This snippet shows how to update a Mailgun click webhook using cURL. It sends a PUT request to the Mailgun API with authentication and specifies a new URL for the click webhook.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/update-webhook-deprecated.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -X PUT \\\n    https://api.mailgun.net/v3/domains/YOUR_DOMAIN_NAME/webhooks/click \\\n    -F url='http://google.com'\n```\n\n----------------------------------------\n\nTITLE: Java Mailgun Unsubscribe Implementation\nDESCRIPTION: Java implementation using Mailgun's Java SDK to fetch unsubscribe data. Uses MailgunSuppressionUnsubscribeApi class for handling unsubscribe operations.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-unsubscribes.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.suppression.MailgunSuppressionUnsubscribeApi;\nimport com.mailgun.model.suppression.unsubscribe.UnsubscribeItemResponse;\n\n// ...\n\npublic UnsubscribeItemResponse getUnsubscribes() {\n    MailgunSuppressionUnsubscribeApi suppressionUnsubscribeApi = MailgunClient.config(API_KEY)\n        .createApi(MailgunSuppressionUnsubscribeApi.class);\n\n    return suppressionUnsubscribeApi.getAllUnsubscribe(YOUR_DOMAIN_NAME);\n}\n```\n\n----------------------------------------\n\nTITLE: Filter Stats by IP Pool\nDESCRIPTION: Example of filtering delivered event statistics for a specific IP Pool.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-stats.rst#2025-04-21_snippet_4\n\nLANGUAGE: url\nCODE:\n```\nGET /v3/stats/filter?event=delivered&filter=ip_pool:<IP Pool ID>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Inbox Filters using cURL\nDESCRIPTION: Basic cURL command to fetch inbox placement filters from Mailgun API using API key authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-results-filters.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -G \\\n    https://api.mailgun.net/v4/results/_filters\n```\n\n----------------------------------------\n\nTITLE: Update Connection Settings Response\nDESCRIPTION: Sample JSON response when updating domain connection settings.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-domains.rst#2025-04-21_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\n{\n   \"message\": \"Domain connection settings have been updated, may take 10 minutes to fully propagate\",\n   \"require-tls\": true,\n   \"skip-verification\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Domain Connection Settings with Go\nDESCRIPTION: This Go function uses the Mailgun Go SDK to retrieve domain connection settings. It requires the mailgun-go library. The function takes the domain and API key as parameters and returns a DomainConnection object.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-connection.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/mailgun/mailgun-go/v3\"\n    \"time\"\n)\n\nfunc GetDomainConnection(domain, apiKey string) (mailgun.DomainConnection, error) {\n    mg := mailgun.NewMailgun(domain, apiKey)\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    return mg.GetDomainConnection(ctx, domain)\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Domain Connection Settings with PHP\nDESCRIPTION: This PHP snippet demonstrates how to use the Mailgun PHP SDK to fetch domain connection settings. It requires the Mailgun library to be installed via Composer. The API key and domain name need to be replaced with actual values.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-connection.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Include the Autoloader (see \"Libraries\" for install instructions)\nrequire 'vendor/autoload.php';\nuse Mailgun\\Mailgun;\n\n# Instantiate the client.\n$mgClient = Mailgun::create('PRIVATE_API_KEY', 'https://API_HOSTNAME');\n$domain = \"YOUR_DOMAIN_NAME\";\n\n# Issue the call to the client.\n$result = $mgClient->domains()->connection($domain);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Domain Tracking with Python\nDESCRIPTION: Python implementation using the requests library to get domain tracking settings.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-domain-tracking.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef get_domain_tracking():\n    return requests.get(\n        \"https://api.mailgun.net/v3/domains/YOUR_DOMAIN_NAME/tracking\",\n        auth=(\"api\", \"YOUR_API_KEY\"))\n```\n\n----------------------------------------\n\nTITLE: Retrieving Domain Tracking with PHP\nDESCRIPTION: PHP implementation using cURL to get domain tracking settings. Used as alternative when SDK support is not available.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-domain-tracking.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Currently, the PHP SDK does not support Mailing List verifications.\n# Consider using the following php curl function.\nfunction get_domain_tracking_settings() {\n  $ch = curl_init();\n\n  curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);\n  curl_setopt($ch, CURLOPT_USERPWD, 'api:PRIVATE_API_KEY');\n  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n\n  curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\n  curl_setopt($ch, CURLOPT_URL, 'https://api.mailgun.net/v3/domains/YOUR_DOMAIN_NAME/tracking');\n\n  $result = curl_exec($ch);\n  curl_close($ch);\n\n  return $result;\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Domain Keys using Python\nDESCRIPTION: Python implementation using requests library to fetch domain keys. Requires requests package.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/list-domain-keys.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef list_domain_keys():\n    return requests.get(\n        \"https://api.mailgun.net/v4/domains/AUTHORITY_DOMAIN_NAME/keys\",\n        auth=('api', 'YOUR_API_KEY'))\n```\n\n----------------------------------------\n\nTITLE: Retrieving Template Versions with Ruby RestClient\nDESCRIPTION: A Ruby function that uses RestClient to make a GET request to the Mailgun API for listing template versions. Uses basic authentication with the API key.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/version-get-all.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef list_template_version\n  RestClient.get \"https://api:YOUR_API_KEY\"\\\n  \"@api.mailgun.net/v3/YOUR_DOMAIN_NAME/templates/TEMPLATE_NAME/versions\"\nend\n```\n\n----------------------------------------\n\nTITLE: Removing Mailing List Member with cURL\nDESCRIPTION: This cURL command deletes a specific member from a Mailgun mailing list. It requires authentication with your API key and specifies the mailing list address and the email to remove.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/remove-list-member.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -X DELETE \\\n    https://api.mailgun.net/v3/lists/LIST@YOUR_DOMAIN_NAME/members/bar@example.com\n```\n\n----------------------------------------\n\nTITLE: Retrieving Seed List using C# RestSharp\nDESCRIPTION: C# implementation using RestSharp client. Creates authenticated client, configures request parameters, and executes GET request.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-seed-list.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class InboxPlacementTest\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (GetSeedList().Content.ToString());\n    }\n\n    public static IRestResponse GetSeedList()\n    {\n        RestClient client = new RestClient();\n        client.BaseUrl = new Uri(\"https://api.mailgun.net/v4\");\n        client.Authenticator =\n            new HttpBasicAuthenticator(\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest();\n        request.AddParameter (\"target_email\", \"TARGET_EMAIL\", ParameterType.UrlSegment);\n        request.Resource = \"/inbox/seedlists/{target_email}\";\n        return client.Execute(request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Decoding Quoted-Printable in PHP\nDESCRIPTION: Uses PHP's built-in quoted_printable_decode function to decode messages. No additional dependencies required.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/decode-quoted-printable.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$decoded_message = quoted_printable_decode($encoded_message);\n```\n\n----------------------------------------\n\nTITLE: Retrieving DKIM Keys with Ruby/RestClient\nDESCRIPTION: A Ruby function using RestClient to retrieve DKIM keys from the Mailgun API. This function performs a GET request with the API key included in the authentication header.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/list-all-domain-keys.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef get_domain_keys\n   RestClient.get(\"https://api:YOUR_API_KEY\"\\\n                  \"@api.mailgun.net/v1/dkim/keys\")\nend\n```\n\n----------------------------------------\n\nTITLE: Retrieving Dedicated IPs using C#\nDESCRIPTION: Uses RestSharp library to fetch dedicated IPs from Mailgun API. Requires RestSharp and handles basic authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-ips.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class GetIPsChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (GetIPs ().Content.ToString ());\n    }\n\n    public static IRestResponse GetIPs ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.Resource = \"ips\";\n        request.AddParameter (\"dedicated\", \"true\");\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Template Messages in C#\nDESCRIPTION: C# implementation for sending template messages using RestSharp to make Mailgun API calls. This example demonstrates how to build a request with recipient variables and execute it to send personalized emails.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-template-message.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class SendTemplateMessageChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (SendTemplateMessage ().Content.ToString ());\n    }\n\n    public static IRestResponse SendTemplateMessage ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.AddParameter (\"domain\", \"YOUR_DOMAIN_NAME\", ParameterType.UrlSegment);\n        request.Resource = \"{domain}/messages\";\n        request.AddParameter (\"from\", \"Excited User <YOU@YOUR_DOMAIN_NAME>\");\n        request.AddParameter (\"to\", \"alice@example.com\");\n        request.AddParameter (\"to\", \"bob@example.com\");\n        request.AddParameter (\"subject\", \"Hey, %recipient.first%\");\n        request.AddParameter (\"text\",\n                              \"If you wish to unsubscribe, click http://mailgun/unsubscribe/%recipient.id%'\");\n        request.AddParameter (\"recipient-variables\",\n                              \"{\\\"bob@example.com\\\": {\\\"first\\\":\\\"Bob\\\", \\\"id\\\":1}, \\\"alice@example.com\\\": {\\\"first\\\":\\\"Alice\\\", \\\"id\\\": 2}}\");\n        request.Method = Method.POST;\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Canceling Bulk Email Verification Preview in Ruby\nDESCRIPTION: This Ruby function demonstrates how to cancel a bulk email verification preview using the RestClient library. It sends a DELETE request to the Mailgun API v4 endpoint with basic authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/delete-bulk-preview.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef delete_bulk_preview\n  RestClient.delete(\"https://api:YOUR_API_KEY\" \\\n                    \"@api.mailgun.net/v4/address/validate/preview/LIST_NAME\")\nend\n```\n\n----------------------------------------\n\nTITLE: Retrieving Mailgun Tags with PHP\nDESCRIPTION: Uses the Mailgun PHP SDK to retrieve tags from a specified domain. Instantiates a Mailgun client with your private API key and hostname, then calls the tags()->index() method with your domain name.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/tags/get-tags.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Include the Autoloader (see \"Libraries\" for install instructions)\nrequire 'vendor/autoload.php';\nuse Mailgun\\Mailgun;\n\n# Instantiate the client.\n$mgClient = Mailgun::create('PRIVATE_API_KEY', 'https://API_HOSTNAME');\n$domain = 'YOUR_DOMAIN_NAME';\n\n# Issue the call to the client.\n$result = $mgClient->tags()->index($domain);\n```\n\n----------------------------------------\n\nTITLE: Deactivating Domain Key using cURL\nDESCRIPTION: Makes a PUT request to deactivate a domain key using cURL in bash. Requires API key and domain authority name.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/deactivate-domain-key.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user `api:YOUR_API_KEY' -X PUT \\\n    https://api.mailgun.net/v4/domains/AUTHORITY_DOMAIN_NAME/keys/SELECTOR/deactivate\n```\n\n----------------------------------------\n\nTITLE: Adding Bounce using JavaScript Mailgun.js\nDESCRIPTION: JavaScript/Node.js implementation using the mailgun.js library with async/await pattern for handling promises.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/add-bounce.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n(async () => {\n    try {\n        const createdBounce = await client.suppressions.create(DOMAIN, 'bounces', { address: 'bob@example.com' });\n        console.log('createdBounce', createdBounce);\n    } catch (error) {\n        console.error(error);\n    }\n})();\n```\n\n----------------------------------------\n\nTITLE: Disabling a Subaccount (POST) in Mailgun API\nDESCRIPTION: This endpoint disables a specific subaccount. It requires the subaccount ID as a path parameter. Disabling a subaccount prevents it from sending emails or accessing Mailgun services.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/subaccounts.rst#2025-04-21_snippet_3\n\nLANGUAGE: url\nCODE:\n```\nPOST /v5/accounts/s/{-id}/disable\n```\n\n----------------------------------------\n\nTITLE: Fetching Domain Tag Limits using cURL\nDESCRIPTION: Basic cURL command to retrieve domain tag limits from Mailgun API using API key authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-limits.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -G \\\n    https://api.mailgun.net/v3/domains/YOUR_DOMAIN_NAME/limits/tag\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Address Not Found in Mailgun API\nDESCRIPTION: Sample JSON response when checking a specific email address that has not bounced. Returns a message indicating the address was not found in the bounces table.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-bounces.rst#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"message\": \"Address not found in bounces table\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sending MIME Message with C#\nDESCRIPTION: This C# class uses RestSharp to send a MIME message through the Mailgun API. It sets up authentication, adds request parameters, and attaches the MIME message file before executing the request.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-mime-message.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class SendMimeMessageChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (SendMimeMessage ().Content.ToString ());\n    }\n\n    public static IRestResponse SendMimeMessage ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.AddParameter (\"domain\", \"YOUR_DOMAIN_NAME\", ParameterType.UrlSegment);\n        request.Resource = \"{domain}/messages.mime\";\n        request.AddParameter (\"to\", \"bar@example.com\");\n        request.AddFile (\"message\", Path.Combine (\"files\", \"message.mime\"));\n        request.Method = Method.POST;\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Bulk Email Validation Preview with PHP\nDESCRIPTION: PHP implementation using cURL for creating a bulk email validation preview list. Since the official PHP SDK doesn't support v4 Validations endpoint, this example provides a custom PHP function that uses cURL to make the API request.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/create-bulk-preview.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Currently, the PHP SDK does not support the v4 Validations endpoint.\n# Consider using the following php curl function.\nfunction create_bulk_preview() {\n  $ch = curl_init();\n\n  curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);\n  curl_setopt($ch, CURLOPT_USERPWD, 'api:PRIVATE_API_KEY');\n  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n\n  curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');\n  curl_setopt($ch, CURLOPT_URL, 'https://api.mailgun.net/v4/address/validate/preview/LIST_NAME');\n  curl_setopt($ch, CURLOPT_POSTFIELDS, array(\n      'file'=> curl_file_create('subscribers.csv'))\n  );\n\n  $result = curl_exec($ch);\n  curl_close($ch);\n\n  return $result;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Seed Lists with PHP cURL\nDESCRIPTION: PHP function that creates a seed list using cURL since the PHP SDK doesn't support the inbox placement endpoint. The function configures a cURL request with basic authentication and sends a PUT request to the Mailgun API with the sending domains parameter.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/update-seed-list.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Currently, the PHP SDK does not support the inbox placement endpoint.\n# Consider using the following php curl function.\nfunction create_seed_list() {\n  $ch = curl_init();\n\n  curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);\n  curl_setopt($ch, CURLOPT_USERPWD, 'api:PRIVATE_API_KEY');\n  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n\n  curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PUT');\n  curl_setopt($ch, CURLOPT_URL, 'https://api.mailgun.net/v4/inbox/seedlists/TARGET_EMAIL');\n  curl_setopt($ch, CURLOPT_POSTFIELDS, array(\n      'sending_domains'=> 'domain.com',\n      )\n  );\n\n  $result = curl_exec($ch);\n  curl_close($ch);\n\n  return $result;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Log Entries with GET Request\nDESCRIPTION: GET endpoint for fetching log entries from Mailgun. Supports pagination parameters 'limit' (default 100, max 300) and 'skip' (default 0). Combined limit and skip cannot exceed 10000.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-logs.rst#2025-04-21_snippet_0\n\nLANGUAGE: url\nCODE:\n```\nGET /<domain>/log\n```\n\n----------------------------------------\n\nTITLE: Listing Domain Keys using cURL\nDESCRIPTION: Simple cURL command to retrieve domain keys from Mailgun API using basic authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/list-domain-keys.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user `api:YOUR_API_KEY' -G \\\n    https://api.mailgun.net/v4/domains/AUTHORITY_DOMAIN_NAME/keys\n```\n\n----------------------------------------\n\nTITLE: Fetching Inbox Results with cURL\nDESCRIPTION: Basic cURL command to retrieve inbox placement results from Mailgun API using API key authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-results.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -G \\\n    https://api.mailgun.net/v4/inbox/results\n```\n\n----------------------------------------\n\nTITLE: Deleting All Templates Using Python\nDESCRIPTION: Python function using the requests library to delete all templates for a Mailgun domain. Performs a DELETE request to the templates endpoint with basic authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/template-delete-all.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef delete_templates():\n    return requests.delete(\n        \"https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/templates\",\n        auth=(\"api\", \"YOUR_API_KEY\"))\n```\n\n----------------------------------------\n\nTITLE: Retrieving Template Version with PHP using cURL\nDESCRIPTION: Implements a custom cURL function to retrieve a template version since the PHP SDK doesn't support the Templates endpoint. Sets up the necessary cURL options including basic auth with the API key.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/version-get.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Currently, the PHP SDK does not support the Templates endpoint.\n# Consider using the following php curl function.\nfunction get_template_version() {\n\n  $ch = curl_init();\n\n  curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);\n  curl_setopt($ch, CURLOPT_USERPWD, 'api:PRIVATE_API_KEY');\n  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n\n  curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\n  curl_setopt($ch, CURLOPT_URL, 'https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/templates/TEMPLATE_NAME/versions/VERSION_TAG');\n  curl_setopt($ch, CURLOPT_POSTFIELDS, $params);\n\n  $result = curl_exec($ch);\n  curl_close($ch);\n\n  return $result;\n}\n```\n\n----------------------------------------\n\nTITLE: Remove List Member Response\nDESCRIPTION: Response received when successfully removing a member from a mailing list.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-mailinglists.rst#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"member\": {\n      \"address\": \"bar@example.com\"\n  },\n  \"message\": \"Mailing list member has been deleted\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Domain IP with cURL in Bash\nDESCRIPTION: Makes a DELETE request to unassign an IP (127.0.0.1) from a Mailgun domain using cURL. Requires API key authentication and the domain name.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/remove-domain-ip.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -X DELETE \\\n    https://api.mailgun.net/v3/domains/YOUR_DOMAIN_NAME/ips/127.0.0.1\n```\n\n----------------------------------------\n\nTITLE: Private Email Parsing with Mailgun API\nDESCRIPTION: This private endpoint parses multiple email addresses. It's only accessible with a private API key and not subject to daily usage limits.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-email-validation-deprecated.rst#2025-04-21_snippet_3\n\nLANGUAGE: url\nCODE:\n```\nGET /address/private/parse\n```\n\n----------------------------------------\n\nTITLE: Fetching Domain IPs using PHP Mailgun SDK\nDESCRIPTION: This PHP snippet uses the Mailgun PHP SDK to retrieve domain IPs. It initializes the Mailgun client with the API key and API hostname, then calls the domainIndex method of the ips() object with the specified domain name.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-domain-ips.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Include the Autoloader (see \"Libraries\" for install instructions)\nrequire 'vendor/autoload.php';\nuse Mailgun\\Mailgun;\n\n# Instantiate the client.\n$mgClient = Mailgun::create('PRIVATE_API_KEY', 'https://API_HOSTNAME');\n$domain = \"YOUR_DOMAIN_NAME\";\n\n# Issue the call to the client.\n$result = $mgClient->ips()->domainIndex($domain);\n```\n\n----------------------------------------\n\nTITLE: Creating Email Preview Test with Python\nDESCRIPTION: This Python function uses the requests library to create an email preview test. It sends a POST request to the Mailgun API with subject and URL parameters as JSON data.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/email_preview/create-test.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef create_email_previews():\n    data = {'subject': 'test', 'url': 'url'}\n    return requests.post(\n        \"https://api.mailgun.net/v1/preview/tests\",\n        data=json.dumps(data),\n        auth=('api', 'YOUR_API_KEY'))\n```\n\n----------------------------------------\n\nTITLE: Updating Mailgun Template Description with Go\nDESCRIPTION: Uses the mailgun-go SDK to update a template's description. The code creates a Mailgun client, sets up a context with timeout, and calls the UpdateTemplate method with template information.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/template-update.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/mailgun/mailgun-go/v3\"\n    \"time\"\n)\n\nfunc UpdateTemplate(domain, apiKey string) error {\n    mg := mailgun.NewMailgun(domain, apiKey)\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    return mg.UpdateTemplate(ctx, &mailgun.Template{\n        Name:        \"TEMPLATE_NAME\",\n        Description: \"Add a description to the template\",\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Activating Domain Keys with curl in Bash\nDESCRIPTION: Makes a PUT request to activate a domain key using curl in Bash. Requires your Mailgun API key, authority domain name, and selector as parameters.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/activate-domain-key.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user `api:YOUR_API_KEY' -X PUT \\\n    https://api.mailgun.net/v4/domains/AUTHORITY_DOMAIN_NAME/keys/SELECTOR/activate\n```\n\n----------------------------------------\n\nTITLE: Adding Bounce using Java Mailgun Client\nDESCRIPTION: Java implementation using the official Mailgun client library. Creates a bounce record with address, error code, and timestamp information.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/add-bounce.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.suppression.MailgunSuppressionBouncesApi;\nimport com.mailgun.model.suppression.SuppressionResponse;\nimport com.mailgun.model.suppression.bounces.BouncesRequest;\n\nimport java.time.ZonedDateTime;\n\n// ...\n\npublic SuppressionResponse addBounce() {\n    MailgunSuppressionBouncesApi suppressionBouncesApi = MailgunClient.config(API_KEY)\n        .createApi(MailgunSuppressionBouncesApi.class);\n\n    BouncesRequest bouncesRequest = BouncesRequest.builder()\n        .address(\"bob@example.com\")\n        .code(\"550\")\n        .error(ERROR_MESSAGE)\n        .createdAt(ZonedDateTime.now())\n        .build();\n\n    return suppressionBouncesApi.addBounce(YOUR_DOMAIN_NAME, bouncesRequest);\n}\n```\n\n----------------------------------------\n\nTITLE: Update Mailbox Password Response Example\nDESCRIPTION: Sample JSON response for successful password update.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-mailboxes.rst#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"message\": \"Password changed\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Validating Email Address with Mailgun API in C#\nDESCRIPTION: A C# implementation for validating email addresses using Mailgun's Address Validation API v4 with RestSharp. It creates a RestClient with basic authentication, specifies the validation endpoint, and adds the email address as a parameter to the POST request.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/post-validate.rst#2025-04-21_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class GetValidateChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (PostValidate ().Content.ToString ());\n    }\n\n    public static IRestResponse PostValidate ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v4\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"PRIVATE_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.Resource = \"/address/validate\";;\n        request.AddParameter (\"address\", \"foo@mailgun.net\");\n        request.Method = Method.POST\n        return client.Execute (request);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Resending Messages with PHP Curl\nDESCRIPTION: PHP implementation using curl functions to resend messages, as the PHP SDK doesn't support the Resend Messages endpoint directly.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/resend-simple-message.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Currently, the PHP SDK does not support Resend Messages endpoint.\n# Consider using the following php curl function.\nfunction resend_message() {\n  $ch = curl_init();\n\n  curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);\n  curl_setopt($ch, CURLOPT_USERPWD, 'api:PRIVATE_API_KEY');\n  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n\n  curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');\n  curl_setopt($ch, CURLOPT_URL, MESSAGE_STORAGE_URL);\n  curl_setopt($ch, CURLOPT_POSTFIELDS, array(\n      'to'=> 'bob@example.com'\n      )\n  );\n\n  $result = curl_exec($ch);\n  curl_close($ch);\n\n  return $result;\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Template Version with cURL\nDESCRIPTION: Basic cURL command to delete a specific template version using the Mailgun API\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/version-delete.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -X DELETE -G \\\n    https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/templates/TEMPLATE_NAME/versions/VERSION_TAG\n```\n\n----------------------------------------\n\nTITLE: Fetching Bounce List in Mailgun API\nDESCRIPTION: GET endpoint to retrieve the list of bounced email addresses. Supports pagination with limit and skip parameters.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-bounces.rst#2025-04-21_snippet_0\n\nLANGUAGE: url\nCODE:\n```\nGET /<domain>/bounces\n```\n\n----------------------------------------\n\nTITLE: Python Template Retrieval\nDESCRIPTION: Simple Python implementation using the requests library to fetch an active template.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/template-get-active.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef get_template():\n    return requests.get(\n        \"https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/templates/TEMPLATE_NAME\",\n        auth=(\"api\", \"YOUR_API_KEY\"),\n        params={\"active\": \"yes\"})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Mailgun Logs using Ruby RestClient\nDESCRIPTION: Ruby implementation using RestClient to fetch logs from Mailgun API with basic authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-log-entry.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef get_logs\n  RestClient.get \"https://api:YOUR_API_KEY\"\\\n  \"@api.mailgun.net/v3/YOUR_DOMAIN_NAME/log\", :params => {\n    :skip => 50,\n    :limit => 1\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Retrieving Mailgun Logs using C# RestSharp\nDESCRIPTION: C# implementation using RestSharp client to fetch logs from Mailgun API with basic authentication and pagination.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-log-entry.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class GetLogEntryChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (GetLogEntry ().Content.ToString ());\n    }\n\n    public static IRestResponse GetLogEntry ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.AddParameter (\"domain\", \"YOUR_DOMAIN_NAME\", ParameterType.UrlSegment);\n        request.Resource = \"{domain}/log\";\n        request.AddParameter (\"skip\", 50);\n        request.AddParameter (\"limit\", 1);\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Update Mailbox Password using C#\nDESCRIPTION: C# implementation using RestSharp library to update a mailbox password. Includes complete setup with authentication and request parameters.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/change-mailbox-password.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class ChangeMailboxPasswordChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (ChangeMailboxPassword ().Content.ToString ());\n    }\n\n    public static IRestResponse ChangeMailboxPassword ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.AddParameter (\"domain\", \"YOUR_DOMAIN_NAME\", ParameterType.UrlSegment);\n        request.Resource = \"{domain}/mailboxes/{login}\";\n        request.AddUrlSegment (\"login\", \"alice\");\n        request.AddParameter (\"password\", \"supersecret\");\n        request.Method = Method.PUT;\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Combining match_recipient and match_header Filters with AND Operator\nDESCRIPTION: Creates a compound filter that matches both recipient and header conditions. This example matches any recipient at example.com domain and checks if the message is in English by examining the Content-Language header.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/user_manual.rst#2025-04-21_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nmatch_recipient('^(.*)@example.com$') and match_header(\"Content-Language\", \"^(.*)en-US(.*)$\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Complaints with Mailgun PHP SDK\nDESCRIPTION: This PHP snippet uses the Mailgun PHP SDK to fetch complaints. It creates a Mailgun client instance with the API key and hostname, then calls the suppressions()->complaints()->index() method to retrieve the complaints for the specified domain.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-complaints.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Include the Autoloader (see \"Libraries\" for install instructions)\nrequire 'vendor/autoload.php';\nuse Mailgun\\Mailgun;\n\n# Instantiate the client.\n$mgClient  = Mailgun::create('PRIVATE_API_KEY', 'https://API_HOSTNAME');\n$domain    = 'YOUR_DOMAIN_NAME';\n\n# Issue the call to the client.\n$result = $mgClient->suppressions()->complaints()->index($domain);\n```\n\n----------------------------------------\n\nTITLE: Creating Domain Credentials in Python\nDESCRIPTION: Creates domain credentials using Python's requests library to make a POST request to the Mailgun API.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/create-credentials.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef create_credentials():\n    return requests.post(\n        \"https://api.mailgun.net/v3/domains/YOUR_DOMAIN_NAME/credentials\",\n        auth=(\"api\", \"YOUR_API_KEY\"),\n        data={\"login\": \"alice@YOUR_DOMAIN_NAME\",\n              \"password\": \"secret\"})\n```\n\n----------------------------------------\n\nTITLE: Fetching Subaccount Details (GET) in Mailgun API\nDESCRIPTION: This endpoint retrieves detailed information about a specific subaccount. It requires the subaccount ID as a path parameter.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/subaccounts.rst#2025-04-21_snippet_1\n\nLANGUAGE: url\nCODE:\n```\nGET /v5/accounts/subaccounts/{-id}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Domains with Ruby RestClient\nDESCRIPTION: This Ruby function shows how to use RestClient to retrieve domains from the Mailgun API. It demonstrates setting up the request with authentication and pagination parameters.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-domains.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef get_domains\n  RestClient.get \"https://api:YOUR_API_KEY\"\\\n  \"@api.mailgun.net/v3/domains\", :params => {\n    :skip => 0,\n    :limit => 3\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Retrieving Seed List Attribute using Java SDK\nDESCRIPTION: Java implementation using Mailgun's official SDK to fetch seed list attributes. Uses MailgunClient configuration with API key authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-seed-list-attribute.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v4.MailgunSeedListApi;\nimport com.mailgun.client.MailgunClient;\nimport com.mailgun.model.seedlist.SeedListsAttributesResponse;\n\n// ...\n\npublic SeedListsAttributesResponse getSeedListAttribute() {\n    MailgunSeedListApi mailgunSeedListApi = MailgunClient.config(API_KEY)\n            .createApi(MailgunSeedListApi.class);\n\n    return mailgunSeedListApi.getSeedListsAttribute(ATTRIBUTE_NAME);\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Seed List Attribute using Python\nDESCRIPTION: Python implementation using the requests library to fetch seed list attributes. Uses Basic Auth with API key.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-seed-list-attribute.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef get_seed_list_attribute():\n    return requests.get(\n        \"https://api.mailgun.net/v4/inbox/seedlists/a/ATTRIBUTE\",\n        auth=('api', 'YOUR_API_KEY'))\n```\n\n----------------------------------------\n\nTITLE: Initiating x509 Keypair Generation for Tracking Domain with cURL in Bash\nDESCRIPTION: This code demonstrates how to make a POST request to generate a TLS certificate for a Mailgun tracking domain. The request is sent to the /v2/x509/{domain} endpoint, where {domain} is your tracking domain.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/secure-tracking.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://api.mailgun.net/v2/x509/tracking.example.com\n```\n\n----------------------------------------\n\nTITLE: Retrieving Seed List Attribute using PHP\nDESCRIPTION: PHP implementation using cURL functions since the PHP SDK doesn't support inbox placement endpoint. Demonstrates manual HTTP request configuration with Basic Auth.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-seed-list-attribute.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Currently, the PHP SDK does not support the inbox placement endpoint.\n# Consider using the following php curl function.\nfunction get_seed_list_attribute() {\n  $ch = curl_init();\n\n  curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);\n  curl_setopt($ch, CURLOPT_USERPWD, 'api:PRIVATE_API_KEY');\n  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n\n  curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\n  curl_setopt($ch, CURLOPT_URL, 'https://api.mailgun.net/v4/inbox/seedlists/a/ATTRIBUTE');\n  $result = curl_exec($ch);\n  curl_close($ch);\n\n  return $result;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Mailbox using Curl in Bash\nDESCRIPTION: This snippet shows how to create a mailbox using a curl command in Bash. It sends a POST request to the Mailgun API with the required parameters.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/create-mailbox.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' \\\n    https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/mailboxes \\\n    -F mailbox='alice@YOUR_DOMAIN_NAME' \\\n    -F password='supasecret'\n```\n\n----------------------------------------\n\nTITLE: Removing Mailing List Member with Ruby\nDESCRIPTION: This Ruby method removes a member from a Mailgun mailing list using the RestClient library. It sends a DELETE request to the Mailgun API endpoint with your API key for authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/remove-list-member.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef remove_member\n  RestClient.delete(\"https://api:YOUR_API_KEY\" \\\n                    \"@api.mailgun.net/v3/lists/LIST@YOUR_DOMAIN_NAME/members\" \\\n                    \"/bar@example.com\")\nend\n```\n\n----------------------------------------\n\nTITLE: Retrieving Inbox Placement Results with PHP cURL\nDESCRIPTION: This PHP function uses cURL to make a GET request to the Mailgun API for fetching inbox placement results. It sets up basic authentication, configures the request, and returns the API response as a string.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-result.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Currently, the PHP SDK does not support the inbox placement endpoint.\n# Consider using the following php curl function.\nfunction get_results() {\n  $ch = curl_init();\n\n  curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);\n  curl_setopt($ch, CURLOPT_USERPWD, 'api:PRIVATE_API_KEY');\n  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n\n  curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\n  curl_setopt($ch, CURLOPT_URL, 'https://api.mailgun.net/v4/inbox/results/UUID');\n  $result = curl_exec($ch);\n  curl_close($ch);\n\n  return $result;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Bulk Validation Status with cURL in Bash\nDESCRIPTION: This snippet shows how to use cURL to make a GET request to Mailgun's API for retrieving the status of a bulk email validation job. It requires the API key and list name as parameters.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-bulk-validation.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -G \\\n    https://api.mailgun.net/v4/address/validate/bulk/LIST_NAME\n```\n\n----------------------------------------\n\nTITLE: Retrieving Seed List using PHP cURL\nDESCRIPTION: PHP implementation using cURL functions since the PHP SDK doesn't support inbox placement. Configures basic authentication and performs GET request.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-seed-list.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Currently, the PHP SDK does not support the inbox placement endpoint.\n# Consider using the following php curl function.\nfunction get_seed_list() {\n  $ch = curl_init();\n\n  curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);\n  curl_setopt($ch, CURLOPT_USERPWD, 'api:PRIVATE_API_KEY');\n  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n\n  curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\n  curl_setopt($ch, CURLOPT_URL, 'https://api.mailgun.net/v4/inbox/seedlists/TARGET_EMAIL');\n  $result = curl_exec($ch);\n  curl_close($ch);\n\n  return $result;\n}\n```\n\n----------------------------------------\n\nTITLE: Activating Domain Keys with RestSharp in C#\nDESCRIPTION: Uses RestSharp library to activate a domain key in C#. Creates a RestClient with basic authentication and executes a PUT request to the activation endpoint.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/activate-domain-key.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class InboxPlacementTests\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (ActivateDomainKey ().Content.ToString ());\n    }\n\n    public static IRestResponse ActivateDomainKey ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v4\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.Resource = \"domains/AUTHORITY_DOMAIN_NAME/keys\";\n        request.Method = Method.PUT;\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: PHP Domain Retrieval with Mailgun SDK\nDESCRIPTION: PHP implementation using the Mailgun SDK to fetch domain information. Requires the Mailgun PHP library installed via Composer.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-domain.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Include the Autoloader (see \"Libraries\" for install instructions)\nrequire 'vendor/autoload.php';\nuse Mailgun\\Mailgun;\n\n# Instantiate the client.\n$mgClient = Mailgun::create('PRIVATE_API_KEY', 'https://API_HOSTNAME');\n$domain = \"YOUR_DOMAIN_NAME\";\n\n# Issue the call to the client.\n$result = $mgClient->domains()->show($domain);\n```\n\n----------------------------------------\n\nTITLE: Fetching Seed List Attributes with cURL (Bash)\nDESCRIPTION: This snippet demonstrates how to use cURL in Bash to retrieve seed list attributes from the Mailgun API. It uses basic authentication with an API key and sends a GET request to the specified endpoint.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-seed-list-attributes.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -G \\\n    https://api.mailgun.net/v4/inbox/seedlists/a\n```\n\n----------------------------------------\n\nTITLE: Validating Email Address with Mailgun API in Go\nDESCRIPTION: This Go function uses the Mailgun Go library to validate an email address. It creates an email validator client, sets up a context with a timeout, and calls the ValidateEmail method.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-validate-deprecated.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/mailgun/mailgun-go/v3\"\n    \"time\"\n)\n\nfunc ValidateEmail(apiKey string) (mailgun.EmailVerification, error) {\n    mv := mailgun.NewEmailValidator(apiKey)\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    return mv.ValidateEmail(ctx, \"foo@mailgun.net\", false)\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Webhooks using PHP SDK\nDESCRIPTION: PHP implementation using Mailgun's SDK to fetch webhooks with composer autoloader\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-webhooks.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Include the Autoloader (see \"Libraries\" for install instructions)\nrequire 'vendor/autoload.php';\nuse Mailgun\\Mailgun;\n\n# Instantiate the client.\n$mgClient = Mailgun::create('PRIVATE_API_KEY', 'https://API_HOSTNAME');\n$domain   = 'YOUR_DOMAIN_NAME';\n\n# Issue the call to the client.\n$result = $mgClient->webhooks()->index($domain)\n```\n\n----------------------------------------\n\nTITLE: Canceling Bulk Validation Job in JavaScript\nDESCRIPTION: This JavaScript code uses the mailgun.js library to cancel a bulk email validation job. It creates a Mailgun client and calls the destroy method on the multipleValidation object.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/delete-bulk-validation.rst#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n(async () => {\n  try {\n    const canceledJob = await client.validate.multipleValidation.destroy('validationList');\n    console.log('canceledJob ->', canceledJob);\n  } catch (error) {\n    console.error(error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Retrieving IP Information using cURL in Bash\nDESCRIPTION: This snippet demonstrates how to use cURL to make a GET request to the Mailgun API for retrieving information about a specific IP address. It requires the API key for authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-ip.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -G \\\n    https://api.mailgun.net/v3/ips/127.0.01\n```\n\n----------------------------------------\n\nTITLE: Deleting a Domain using Go with Mailgun API\nDESCRIPTION: This Go function shows how to delete a Mailgun domain using the Mailgun Go SDK. It initializes a Mailgun client and calls the DeleteDomain method with the appropriate context and domain name.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/delete-domain.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/mailgun/mailgun-go/v3\"\n    \"time\"\n)\n\nfunc DeleteDomain(domain, apiKey string) error {\n    mg := mailgun.NewMailgun(domain, apiKey)\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    return mg.DeleteDomain(ctx, \"example.com\")\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Webhook using Python\nDESCRIPTION: Python implementation using the requests library to delete a webhook. Uses basic authentication with API key.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/delete-webhook-deprecated.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef delete_domain():\n    return requests.delete(\n        \"https://api.mailgun.net/v3/domains/YOUR_DOMAIN_NAME/webhooks/click\",\n        auth=(\"api\", \"YOUR_API_KEY\"))\n```\n\n----------------------------------------\n\nTITLE: Canceling Mailing List Validation using cURL in Bash\nDESCRIPTION: This snippet demonstrates how to cancel mailing list validation using a cURL command in Bash. It sends a DELETE request to the Mailgun API endpoint with authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/delete-list-validation.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -X DELETE \\\n    https://api.mailgun.net/v3/lists/LIST@YOUR_DOMAIN_NAME/members/bar@example.com\n```\n\n----------------------------------------\n\nTITLE: Fetching Tag Device Statistics with cURL in Bash\nDESCRIPTION: This snippet demonstrates how to use cURL to make a GET request to the Mailgun API for retrieving aggregated device statistics for a specific tag. It requires the API key, domain, and tag name to be specified.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/tags/tag-devices-aggregation.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -v -s --user 'api:YOUR_API_KEY' \\\nhttps://api.mailgun.net/v3/<domain>/tags/<tag>/stats/aggregates/devices\n```\n\n----------------------------------------\n\nTITLE: Using Handlebars Templates with Conditional Logic\nDESCRIPTION: Example of using Handlebars block helpers for conditional content rendering in templates. This demonstrates the 'if' helper to display different language versions based on variables.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/user_manual.rst#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{{#if english}}\n<p>This text is in the English language.</p>\n{{else if spanish}}\n<p>Este texto está en idioma español.</p>\n{{else if french}}\n<p>Ce texte est en langue française.</p>\n{{/if}}\n```\n\n----------------------------------------\n\nTITLE: Single Bounce Response in Mailgun API\nDESCRIPTION: Shows the expected JSON response structure when fetching a single bounce record. Includes the bounce details or a 404 error if not found.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-suppressions.rst#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n200\n{\n  \"address\": \"foo@bar.com\",\n  \"code\": \"550\",\n  \"error\": \"No such mailbox\",\n  \"created_at\": \"Fri, 21 Oct 2011 11:02:55 GMT\"\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n404\n{\n  \"message\": \"Address not found in bounces table\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Messages with Templates using Mailgun C# SDK\nDESCRIPTION: This C# class demonstrates how to send a message with a template using the Mailgun C# SDK. It shows how to set up the RestClient, create the request with necessary parameters including template variables, and execute the request to send the message.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-message-by-template-id.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class SendMessageByTemplateIdChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (SendMessageByTemplateId ().Content.ToString ());\n    }\n\n    public static IRestResponse SendMessageByTemplateId ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.AddParameter (\"domain\", \"YOUR_DOMAIN_NAME\", ParameterType.UrlSegment);\n        request.Resource = \"{domain}/messages\";\n        request.AddParameter (\"from\", \"Excited User <YOU@YOUR_DOMAIN_NAME>\");\n        request.AddParameter (\"to\", \"bar@example.com\");\n        request.AddParameter (\"to\", \"baz@example.com\");\n        request.AddParameter (\"subject\", \"Hello\");\n        request.AddParameter (\"template\", \"template.test\");\n        request.AddParameter (\"t:variables\", \"{\\\"title\\\": \\\"API Documentation\\\", \\\"body\\\": \\\"Sending messages with templates\\\"}\");\n        request.Method = Method.POST;\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Mailgun Webhook using PHP\nDESCRIPTION: This PHP code snippet uses the Mailgun PHP SDK to update a webhook. It creates a Mailgun client instance and calls the webhooks()->update() method to update the 'delivered' webhook URL.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/update-webhook.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Include the Autoloader (see \"Libraries\" for install instructions)\nrequire 'vendor/autoload.php';\nuse Mailgun\\Mailgun;\n\n# Instantiate the client.\n$mgClient = Mailgun::create('PRIVATE_API_KEY', 'https://API_HOSTNAME');\n$domain   = 'YOUR_DOMAIN_NAME';\n$webhook  = 'delivered';\n$destination_url = 'https://my.webhook.url/delivered'\n\n# Issue the call to the client.\n$result = $mgClient->webhooks()->update($domain, $webhook, $destination_url);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Webhooks using Java Mailgun Client\nDESCRIPTION: Java implementation using Mailgun's official client library to fetch webhooks\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-webhooks.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.MailgunWebhooksApi;\nimport com.mailgun.model.webhooks.WebhookListResult;;\n\n// ...\n\npublic WebhookListResult getWebhooks() {\n    MailgunWebhooksApi mailgunWebhooksApi = MailgunClient.config(API_KEY).createApi(MailgunWebhooksApi.class);\n\n    return mailgunWebhooksApi.getAllWebhooks(YOUR_DOMAIN_NAME);\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Tag Device Statistics using Mailgun JavaScript SDK\nDESCRIPTION: This snippet shows how to use the Mailgun JavaScript SDK to fetch aggregated device statistics for a specific tag. It demonstrates the setup of the Mailgun client, making an asynchronous API call, and handling the response or errors.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/tags/tag-devices-aggregation.rst#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n(async () => {\n  try {\n    const devicesAggregation = await client.domains.domainTags.devices(\n      DOMAIN,\n      'YOUR_TAG_NAME'\n    );\n    console.log('providersAggregation', devicesAggregation);\n  } catch (error) {\n    console.error(error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Using match_recipient Filter with Capture Groups for Forwarding\nDESCRIPTION: Uses regular expression capture groups in a filter to extract parts of the email address and use them in the forwarding action. This example captures the local part of the email address for use in a URL parameter.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/user_manual.rst#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nroute filter : match_recipient(\"(.*)@bar.com\")\nroute action : forward(\"http://myhost.com/post/?mailbox=\\1\")\n```\n\n----------------------------------------\n\nTITLE: Email Parsing Response from Mailgun API\nDESCRIPTION: Sample JSON response from the email parsing API, showing successfully parsed email addresses and any unparsable portions.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-email-validation-deprecated.rst#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"parsed\": [\n        \"Alice <alice@example.com>\",\n        \"bob@example.com\"\n    ],\n    \"unparsable\": [\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Go Mailgun SDK Implementation for Domain Tag Limits\nDESCRIPTION: Go implementation using official Mailgun SDK to fetch domain tag limits with context handling.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-limits.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/mailgun/mailgun-go/v3\"\n    \"time\"\n)\n\nfunc GetTagLimits(domain, apiKey string) (mailgun.TagLimits, error) {\n    mg := mailgun.NewMailgun(domain, apiKey)\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    return mg.GetTagLimits(ctx, domain)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Permanent Bounce in Mailgun API\nDESCRIPTION: POST endpoint to add a permanent bounce to the bounces table. Updates existing records if the address already exists. Requires address parameter and optionally accepts code and error parameters.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-bounces.rst#2025-04-21_snippet_2\n\nLANGUAGE: url\nCODE:\n```\nPOST /<domain>/bounces\n```\n\n----------------------------------------\n\nTITLE: Fetch Whitelist Using cURL\nDESCRIPTION: Simple cURL command to retrieve whitelist data from Mailgun API using basic authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-whitelists.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -G \\\n     https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/whitelists\n```\n\n----------------------------------------\n\nTITLE: Retrieving Inbox Placement Results with cURL in Bash\nDESCRIPTION: This snippet demonstrates how to use cURL in Bash to retrieve inbox placement results from the Mailgun API. It uses basic authentication with an API key and performs a GET request to the specified endpoint.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-result.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -G \\\n    https://api.mailgun.net/v4/inbox/results/UUID\n```\n\n----------------------------------------\n\nTITLE: Retrieving Inbox Placement Results with Ruby RestClient\nDESCRIPTION: This Ruby function uses the RestClient gem to make a GET request to the Mailgun API for fetching inbox placement results. It includes basic authentication in the URL and returns the response object.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-result.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef get_results\n  RestClient.get(\"https://api:YOUR_API_KEY\"\\\n                 \"@api.mailgun.net/v4/inbox/results/UUID\"\\\n                 {|response, request, result| response }\nend\n```\n\n----------------------------------------\n\nTITLE: JavaScript Template Retrieval\nDESCRIPTION: JavaScript/Node.js implementation using the mailgun.js library to fetch an active template version.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/template-get-active.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n(async () => {\n  try {\n    const domainTemplateWithActiveVersion = await client.domains.domainTemplates.get(DOMAIN, 'YOUR_TEMPLATE_NAME', { active: 'yes' });\n    console.log('domainTemplateWithActiveVersion', domainTemplateWithActiveVersion);\n  } catch (error) {\n    console.error(error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: C# RestSharp Implementation\nDESCRIPTION: C# class using RestSharp library to fetch domain credentials with basic authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-credentials.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class GetCredentialsChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (GetCredentials ().Content.ToString ());\n    }\n\n    public static IRestResponse GetCredentials ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.AddParameter (\"domain\", \"YOUR_DOMAIN_NAME\", ParameterType.UrlSegment);\n        request.Resource = \"domains/{domain}/credentials\";\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Initiating Bulk Email Validation with cURL\nDESCRIPTION: Demonstrates how to upload a file for bulk email validation using the Mailgun API with cURL. The request performs a basic authentication with the API key and uploads a file from a specified path.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/create-bulk-validation.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' \\\n    https://api.mailgun.net/v4/address/validate/bulk/LIST_NAME \\\n    -F 'file=@/path/to/file' \\\n```\n\n----------------------------------------\n\nTITLE: Successful Response for x509 Keypair Generation Initiation in JSON\nDESCRIPTION: This is a sample JSON response with status code 202 Accepted, indicating that x509 keypair generation has been successfully initiated. It includes a message and a location URL to check the generation status.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/secure-tracking.rst#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"message\":  \"Initiated x509 key pair generation\",\n    \"location\": \"/v2/x509/tracking.example.com/status\"\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Email Address with Mailgun API in C#\nDESCRIPTION: This C# class demonstrates how to validate an email address using the Mailgun API. It uses RestSharp to send a GET request to the validation endpoint with the necessary authentication and parameters.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-validate-deprecated.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class GetValidateChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (GetValidate ().Content.ToString ());\n    }\n\n    public static IRestResponse GetValidate ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"pubkey-5ogiflzbnjrljiky49qxsiozqef5jxp7\");\n        RestRequest request = new RestRequest ();\n        request.Resource = \"/address/validate\";\n        request.AddParameter (\"address\", \"foo@mailgun.net\");\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Mailing List using Python\nDESCRIPTION: Python implementation using requests library to delete a Mailgun mailing list.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/remove-mailing-list.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef remove_list():\n    return requests.delete(\n        \"https://api.mailgun.net/v3/lists/LIST@YOUR_DOMAIN_NAME\",\n        auth=('api', 'YOUR_API_KEY'))\n```\n\n----------------------------------------\n\nTITLE: Sample Response from Mailgun Events API (JavaScript)\nDESCRIPTION: Sample JSON response from the Mailgun Events API showing the structure of returned event data, including timestamps, message details, and pagination information.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/user_manual.rst#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"items\": [\n    {\n      \"tags\": [],\n      \"timestamp\": 1376325780.160809,\n      \"envelope\": {\n        \"sender\": \"me@samples.mailgun.org\",\n        \"transport\": \"\"\n      },\n      \"event\": \"accepted\",\n      \"campaigns\": [],\n      \"user-variables\": {},\n      \"flags\": {\n        \"is-authenticated\": true,\n        \"is-test-mode\": false\n      },\n      \"message\": {\n        \"headers\": {\n          \"to\": \"user@example.com\",\n          \"message-id\": \"20130812164300.28108.52546@samples.mailgun.org\",\n          \"from\": \"Excited User <me@samples.mailgun.org>\",\n          \"subject\": \"Hello\"\n        },\n        \"attachments\": [],\n        \"recipients\": [\n          \"user@example.com\"\n        ],\n        \"size\": 69\n      },\n      \"recipient\": \"user@example.com\",\n      \"method\": \"http\"\n    }\n  ],\n  \"paging\": {\n    \"next\":\n        \"https://api.mailgun.net/v3/samples.mailgun.org/events/W3siY...\",\n    \"previous\":\n        \"https://api.mailgun.net/v3/samples.mailgun.org/events/Lkawm...\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Bulk Email Validation Preview with C#\nDESCRIPTION: C# implementation for creating a bulk email validation preview list using RestSharp. This example shows a complete class that authenticates with the Mailgun API, prepares a request with a file attachment, and executes it.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/create-bulk-preview.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class BulkPreview\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (CreateBulkPreview ().Content.ToString ());\n    }\n\n    public static IRestResponse CreateBulkPreview ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v4\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.Resource = \"address/validate/preview/{list}\";\n        request.AddParameter (\"list\", \"LIST_NAME\",\n                              ParameterType.UrlSegment);\n        request.Method = Method.POST;\n        request.AddFile(\"file\", @\"/path/to/file\");\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Domain Connection Settings with cURL\nDESCRIPTION: Uses cURL to send a PUT request to update domain connection settings. Sets 'require_tls' to true and 'skip_verification' to false for a specified domain.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/update-connection.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -X PUT \\\n    https://api.mailgun.net/v3/domains/YOUR_DOMAIN_NAME/connection\n    -F require_tls='true' \\\n    -F skip_verification='false'\n```\n\n----------------------------------------\n\nTITLE: Deleting Inbox Placement Test in PHP\nDESCRIPTION: This PHP function uses cURL to delete an inbox placement test. It sends a DELETE request to the Mailgun API with basic authentication, as the PHP SDK doesn't currently support this endpoint.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/delete-seed-list.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Currently, the PHP SDK does not support the inbox placement endpoint.\n# Consider using the following php curl function.\nfunction delete_inbox_placement_test() {\n  $ch = curl_init();\n\n  curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);\n  curl_setopt($ch, CURLOPT_USERPWD, 'api:PRIVATE_API_KEY');\n  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n\n  curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');\n  curl_setopt($ch, CURLOPT_URL, 'https://api.mailgun.net/v4/inbox/seedlists/TARGET_EMAIL');\n  $result = curl_exec($ch);\n  curl_close($ch);\n\n  return $result;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Mailbox using Ruby with RestClient\nDESCRIPTION: This Ruby function shows how to create a mailbox using the RestClient gem. It sends a POST request to the Mailgun API with the required parameters.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/create-mailbox.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef create_mailbox\n  RestClient.post \"https://api:YOUR_API_KEY\"\\\n  \"@api.mailgun.net/v3/YOUR_DOMAIN_NAME/mailboxes\",\n  :mailbox => \"alice@YOUR_DOMAIN_NAME\",\n  :password => \"secret\"\nend\n```\n\n----------------------------------------\n\nTITLE: Rate Limit Response Format\nDESCRIPTION: Sample JSON response when API rate limit is exceeded. Mailgun imposes a limit of 300 requests per minute per account for the Webhook API endpoint.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-webhooks.rst#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\t\"retry-seconds\": 60,\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Complaints with Mailgun API (URL)\nDESCRIPTION: This snippet shows the URL endpoint for retrieving a list of complaints for a domain.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-suppressions.rst#2025-04-21_snippet_21\n\nLANGUAGE: url\nCODE:\n```\nGET /<domain>/complaints\n```\n\n----------------------------------------\n\nTITLE: Listing Mailgun Templates using Ruby RestClient\nDESCRIPTION: This Ruby function uses the RestClient gem to list Mailgun templates. It sends a GET request to the Mailgun API with basic authentication and a limit parameter.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/template-get-all.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef list_templates\n  RestClient.get \"https://api:YOUR_API_KEY\"\\\n  \"@api.mailgun.net/v3/YOUR_DOMAIN_NAME/templates\", :params => {\n    :limit => 10\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Update Mailbox Password using Java\nDESCRIPTION: Java implementation using Unirest HTTP library to update a mailbox password. Requires Unirest dependency and handles the API authentication and request.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/change-mailbox-password.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mashape.unirest.http.HttpResponse;\nimport com.mashape.unirest.http.JsonNode;\nimport com.mashape.unirest.http.Unirest;\nimport com.mashape.unirest.http.exceptions.UnirestException;\n\npublic class MGSample {\n\n    // ...\n\n    public static JsonNode changeMailboxPassword() throws UnirestException {\n\n        HttpResponse<JsonNode> request = Unirest.put(\"https://api.mailgun.net/v3/\" + YOUR_DOMAIN_NAME + \"/mailboxes/alice\")\n            .basicAuth(\"api\", API_KEY)\n            .field(\"password\", \"supersecret\")\n            .asJson();\n\n        return request.getBody();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Mailboxes using Java with Unirest\nDESCRIPTION: This Java code snippet uses the Unirest library to make a GET request to the Mailgun API for retrieving mailboxes. It includes basic authentication and returns the response as a JsonNode.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-mailboxes.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mashape.unirest.http.HttpResponse;\nimport com.mashape.unirest.http.JsonNode;\nimport com.mashape.unirest.http.Unirest;\nimport com.mashape.unirest.http.exceptions.UnirestException;\n\npublic class MGSample {\n\n    // ...\n\n    public static JsonNode getMailbox() throws UnirestException {\n\n        HttpResponse<JsonNode> request = Unirest.get(\"https://api.mailgun.net/v3/\" + YOUR_DOMAIN_NAME + \"/mailboxes\")\n            .basicAuth(\"api\", API_KEY)\n            .asJson();\n\n        return request.getBody();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Template Version with Go SDK\nDESCRIPTION: Uses the Mailgun Go SDK to retrieve a specific template version. Creates a new Mailgun client with domain and API key, establishes a context with timeout, and calls the GetTemplateVersion method with template name and version tag.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/version-get.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/mailgun/mailgun-go/v3\"\n    \"time\"\n)\n\nfunc GetTemplateVersion(domain, apiKey string) (mailgun.TemplateVersion, error) {\n    mg := mailgun.NewMailgun(domain, apiKey)\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    // Get the template version tagged as 'VERSION_TAG'\n    return mg.GetTemplateVersion(ctx, \"TEMPLATE_NAME\", \"VERSION_TAG\")\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Mailgun Logs using PHP SDK\nDESCRIPTION: PHP implementation using Mailgun's official SDK to fetch logs with pagination parameters.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-log-entry.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Include the Autoloader (see \"Libraries\" for install instructions)\nrequire 'vendor/autoload.php';\nuse Mailgun\\Mailgun;\n\n# Instantiate the client.\n$mgClient = new Mailgun('YOUR_API_KEY');\n$domain = 'YOUR_DOMAIN_NAME';\n\n# Issue the call to the client.\n$result = $mgClient->get(\"$domain/log\", array(\n    'limit' => 5,\n    'skip'  => 10\n));\n```\n\n----------------------------------------\n\nTITLE: Retrieving Registered Domains\nDESCRIPTION: GET request to retrieve a list of all domains registered for reputation monitoring.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-inboxready-domains.rst#2025-04-21_snippet_2\n\nLANGUAGE: url\nCODE:\n```\nGET /v1/inboxready/domains\n```\n\n----------------------------------------\n\nTITLE: Resending Messages with Curl Commands\nDESCRIPTION: Demonstrates how to resend stored messages using curl commands. Shows two methods: using storage URL directly and using the regional storage endpoint with domain and storage key.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/resend-simple-message.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Note: On your dashboard navigate to Sending -> logs\n# Accepted and Delivered events will have a storage.url property\n# This is the full URL to POST to\n\n# Provide a form parameter \"to\" with a string of comma separated email addresses \n# you want to deliver the message to\ncurl -s --user 'api:YOUR_API_KEY' {{STORAGE.URL}} \\\n    -F to='bob@example.com, john@example.com'\n\ncurl -s --user 'api:YOUR_API_KEY' \\\n    https://storage-{{REGION}}.api.mailgun.net/v3/domains/DOMAIN/messages/STORAGE_KEY \\\n    -F to='bob@example.com, john@example.com'\n```\n\n----------------------------------------\n\nTITLE: IP Delist Webhook Payload Example\nDESCRIPTION: Sample webhook payload structure when an IP address is removed from a blocklist\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-deliverability-alerts.rst#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"signature\": {\n    \"timestamp\": 1661445573,\n    \"token\": \"429caef899af60b9c412af6161428e7a41a669f6e5a30cb5f3\"\n  },\n  \"event_data\": {\n    \"id\": \"f8b2cb0d-0000-0000-0000-a846ded58d3d\",\n    \"timestamp\": \"2022-08-25T17:00:00.04368716Z\",\n    \"log_level\": \"warn\",\n    \"event\": \"ip_delisted\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using match_recipient Filter with Plus Addressing Pattern\nDESCRIPTION: Matches incoming messages that use plus addressing for a specific recipient, allowing for variations of the email address. This pattern matches any email to chris+anything@example.com.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/user_manual.rst#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nmatch_recipient(\"^chris\\+(.*)@example.com$\")\n```\n\n----------------------------------------\n\nTITLE: Updating Domain Connection Settings with Go\nDESCRIPTION: Uses the Mailgun Go SDK to update domain connection settings. Creates a new Mailgun client and calls UpdateDomainConnection with TLS required and verification skipped.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/update-connection.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/mailgun/mailgun-go/v3\"\n    \"time\"\n)\n\nfunc UpdateDomainConnection(domain, apiKey string) error {\n    mg := mailgun.NewMailgun(domain, apiKey)\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    return mg.UpdateDomainConnection(ctx, domain, mailgun.DomainConnection{\n        RequireTLS:       true,\n        SkipVerification: true,\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Mailing List Members using C#\nDESCRIPTION: Uses RestSharp library in C# to make authenticated requests to Mailgun API for retrieving mailing list members.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-list-members.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class GetListMembersChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (GetListMembers ().Content.ToString ());\n    }\n\n    public static IRestResponse GetListMembers ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.Resource = \"lists/{list}/members/pages\";\n        request.AddParameter (\"list\", \"LIST@YOUR_DOMAIN_NAME\",\n                              ParameterType.UrlSegment);\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Complaint Data with Ruby RestClient\nDESCRIPTION: This Ruby function uses the RestClient gem to retrieve complaint information from the Mailgun API. It requires the API key and domain name to be replaced with actual values.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-complaint.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef get_complaint\n  RestClient.get(\"https://api:YOUR_API_KEY\"\\\n                 \"@api.mailgun.net/v3/YOUR_DOMAIN_NAME/complaints/\"\\\n                 \"baz@example.com\"){|response, request, result| response }\nend\n```\n\n----------------------------------------\n\nTITLE: C# Template Retrieval\nDESCRIPTION: C# implementation using RestSharp to fetch an active template, including authentication and URL parameter handling.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/template-get-active.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class GetTemplatesChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (GetTemplate ().Content.ToString ());\n    }\n\n    public static IRestResponse GetTemplate ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.Resource = \"/{domain}/templates/{name}\";\n        request.AddUrlSegment (\"domain\", \"YOUR_DOMAIN_NAME\");\n        request.AddUrlSegment (\"name\", \"TEMPLATE_NAME\");\n        request.AddParameter (\"active\", \"yes\");\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Webhooks using Ruby RestClient\nDESCRIPTION: Ruby implementation using RestClient to fetch webhooks from Mailgun API\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-webhooks.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef get_webhooks\n  RestClient.get \"https://api:YOUR_API_KEY\"\\\n                 \"@api.mailgun.net/v3/domains/YOUR_DOMAIN_NAME/webhooks\"\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Domain IP with Ruby RestClient\nDESCRIPTION: This Ruby function shows how to add an IP address to a Mailgun domain using the RestClient library. It makes a POST request to the Mailgun API with basic authentication and specifies the IP address to be assigned.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/add-domain-ip.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef add_domain_ip\n  RestClient.post(\"https://api:YOUR_API_KEY\"\\\n                  \"@api.mailgun.net/v3/domains/YOUR_NEW_DOMAIN_NAME/ips\",\n                  :ip => '127.0.0.1')\nend\n```\n\n----------------------------------------\n\nTITLE: Decoding Quoted-Printable in Bash\nDESCRIPTION: Uses the quoted-printable NodeJS utility to decode messages in Bash. Requires the quoted-printable npm package to be installed globally.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/decode-quoted-printable.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# with utility from `quoted-printable` nodejs lib (`npm install -g quoted-printable`)\ndecoded_message=$(quoted-printable --decode <<< \"${encoded_message}\")\n```\n\n----------------------------------------\n\nTITLE: Creating IP Pool using JavaScript with Mailgun API\nDESCRIPTION: This snippet shows how to create an IP pool using JavaScript and the Mailgun.js library. It initializes the Mailgun client, sets up the necessary parameters, and makes an asynchronous API call to create the IP pool.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/ip_pools/create_ip_pool.rst#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n(async () => {\n  try {\n    const poolName = 'ip_pool_name';\n    const createdIpPool = await client.ip_pools.create({ name: poolName, description: 'description for the ip pool', ips: ['127.0.0.1'] });\n    console.log('createdIpPool', createdIpPool);\n  } catch (error) {\n    console.error(error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Configuring Sendmail for Mailgun SMTP Relay\nDESCRIPTION: Configuration for setting up Sendmail to relay through Mailgun's SMTP service. Defines Mailgun as a smarthost in the sendmail.mc file and enables authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/user_manual.rst#2025-04-21_snippet_52\n\nLANGUAGE: config\nCODE:\n```\n## Mailgun\ndefine(`SMART_HOST', `smtp.mailgun.org')dnl\nFEATURE(`authinfo', `hash /etc/mail/authinfo')dnl\n# optional, see http://www.sendmail.org/m4/features.html before enabling:\n# FEATURE(`accept_unresolvable_domains')dnl\n# FEATURE(`accept_unqualified_senders')dnl\n# execute: make -C /etc/mail\n## Mailgun\n```\n\n----------------------------------------\n\nTITLE: Deactivating Domain Key using PHP\nDESCRIPTION: PHP implementation using cURL to deactivate domain key. Handles authentication and request configuration.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/deactivate-domain-key.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction deactivate_domain_key() {\n    $ch = curl_init();\n\n    curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);\n    curl_setopt($ch, CURLOPT_USERPWD, 'api:PRIVATE_API_KEY');\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n\n    curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PUT');\n    curl_setopt($ch, CURLOPT_URL, 'https://api.mailgun.net/v4/domains/AUTHORITY_DOMAIN_NAME/keys/SELECTOR/deactivate');\n    $result = curl_exec($ch);\n    curl_close($ch);\n\n    return $result;\n  }\n```\n\n----------------------------------------\n\nTITLE: Deleting a Domain using JavaScript with Mailgun API\nDESCRIPTION: This JavaScript code snippet demonstrates how to delete a Mailgun domain using the Mailgun.js library. It initializes the Mailgun client and calls the destroy method on the domains endpoint.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/delete-domain.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n(async () => {\n  try {\n    const destroyedDomain = await client.domains.destroy('DOMAIN_TO_DELETE');\n    console.log('destroyedDomain', destroyedDomain);\n  } catch (error) {\n    console.error(error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: JavaScript Mailgun Webhook Integration\nDESCRIPTION: JavaScript/Node.js implementation using the mailgun.js library to fetch webhook details for delivered events. Includes async/await pattern and error handling.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-webhook.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n(async () => {\n  try {\n    const webhooks = await client.webhooks.get(DOMAIN,'delivered');\n    console.log('webhooks', webhooks);\n  } catch (error) {\n    console.error(error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Delete Webhook using cURL\nDESCRIPTION: Delete a webhook using cURL command with basic authentication\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/delete-webhook.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -X DELETE \\\n    https://api.mailgun.net/v3/domains/YOUR_DOMAIN_NAME/webhooks/clicked\n```\n\n----------------------------------------\n\nTITLE: Adding Unsubscribes with PHP Mailgun SDK\nDESCRIPTION: PHP implementation to add an email address to Mailgun's unsubscribe list. Uses the Mailgun PHP SDK to instantiate a client and create an unsubscribe entry with the specified address and tag for a domain.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/add-unsubscribe-tag.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Include the Autoloader (see \"Libraries\" for install instructions)\nrequire 'vendor/autoload.php';\nuse Mailgun\\Mailgun;\n\n# Instantiate the client.\n$mgClient  = Mailgun::create('PRIVATE_API_KEY', 'https://API_HOSTNAME');\n$domain    = 'YOUR_DOMAIN_NAME';\n$recipient = 'bob@example.com';\n$tag       = 'my_tag';\n\n# Issue the call to the client.\n$result = $mgClient->suppressions()->unsubscribes()->create($domain, $recipient, $tag);\n```\n\n----------------------------------------\n\nTITLE: Assign IP Success Response\nDESCRIPTION: Example JSON response for successful IP assignment to domain.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-ips.rst#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"message\": \"success\"\n}\n```\n\n----------------------------------------\n\nTITLE: Cancel Bulk Validation Response\nDESCRIPTION: Example JSON response when canceling a bulk validation job\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-email-validation.rst#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n{\n \"message\": \"Validation job canceled.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Mailbox using Python with Requests\nDESCRIPTION: This Python function demonstrates how to create a mailbox using the Requests library. It sends a POST request to the Mailgun API with the necessary authentication and data.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/create-mailbox.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef create_mailbox():\n    return requests.post(\n        \"https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/mailboxes\",\n        auth=(\"api\", \"YOUR_API_KEY\"),\n        data={\"mailbox\": \"alice@YOUR_DOMAIN_NAME\",\n              \"password\": \"secret\"})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Domain IPs with Java Mailgun Client\nDESCRIPTION: This Java code snippet uses the Mailgun Java client to fetch domain IPs. It creates a MailgunIPsApi instance, configures it with the API key, and calls the getDomainIPs method with the specified domain name.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-domain-ips.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.MailgunIPsApi;\nimport com.mailgun.model.ips.IPsResult;\n\n// ...\n\npublic IPsResult getDomainIPs() {\n    MailgunIPsApi mailgunIPsApi = MailgunClient.config(API_KEY)\n        .createApi(MailgunIPsApi.class);\n\n    return mailgunIPsApi.getDomainIPs(YOUR_DOMAIN_NAME);\n}\n```\n\n----------------------------------------\n\nTITLE: Activating Domain Keys with Unirest in Java\nDESCRIPTION: Uses Unirest HTTP library to send a PUT request for activating a domain key in Java. Requires the com.mashape.unirest package, your API key, authority domain name, and selector.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/activate-domain-key.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mashape.unirest.http.HttpResponse;\nimport com.mashape.unirest.http.JsonNode;\nimport com.mashape.unirest.http.Unirest;\nimport com.mashape.unirest.http.exceptions.UnirestException;\n\npublic class MGSample {\n\n    // ...\n\n    public static JsonNode activateDomainKey() throws UnirestException {\n\n        HttpResponse<JsonNode> request = Unirest.put(\"https://api.mailgun.net/v4/domains/AUTHORITY_DOMAIN_NAME/keys/SELECTOR/activate\")\n            .basicAuth(\"api\", API_KEY)\n            .asJson();\n\n        return request.getBody();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Bulk Validation Status in C#\nDESCRIPTION: This C# class uses RestSharp to perform a GET request to Mailgun's API for retrieving the status of a bulk validation job. It requires the API key and list name as parameters. The Main method demonstrates how to use the GetBulkValidation method and print the result.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-bulk-validation.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class GetBulkValidationChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (GetBulkValidation ().Content.ToString ());\n    }\n\n    public static IRestResponse GetBulkValidation ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v4\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.AddParameter (\"list\", \"LIST_NAME\", ParameterType.UrlSegment);\n        request.Resource = \"/address/validate/bulk/{list}\";\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Removing IP from Monitoring\nDESCRIPTION: DELETE endpoint to remove an IP address from blocklist monitoring.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-blocklist-monitoring.rst#2025-04-21_snippet_4\n\nLANGUAGE: url\nCODE:\n```\nDELETE /v1/inboxready/ip_addresses/{ip}\n```\n\n----------------------------------------\n\nTITLE: PHP Email Validation with cURL\nDESCRIPTION: PHP implementation using cURL since the SDK doesn't support v4 Validations endpoint. Sets up authentication and parameters for a GET request to validate an email address.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-validate.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Currently, the PHP SDK does not support the v4 Validations endpoint.\n# Consider using the following php curl function.\nfunction get_validate() {\n  $params = array(\n      \"address\" => \"bob@example.com\"\n  );\n  $ch = curl_init();\n\n  curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);\n  curl_setopt($ch, CURLOPT_USERPWD, 'api:PRIVATE_API_KEY');\n  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n\n  curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\n  curl_setopt($ch, CURLOPT_POSTFIELDS, $params);\n  curl_setopt($ch, CURLOPT_URL, 'https://api.mailgun.net/v4/address/validate');\n  $result = curl_exec($ch);\n  curl_close($ch);\n\n  return $result;\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Results - Mailgun API\nDESCRIPTION: Endpoint to delete a specific inbox placement test result using its UUID.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-inbox-placement.rst#2025-04-21_snippet_18\n\nLANGUAGE: url\nCODE:\n```\nDELETE /v4/inbox/results/UUID\n```\n\n----------------------------------------\n\nTITLE: Retrieving Mailgun Tags with Java\nDESCRIPTION: Uses the Mailgun Java SDK to fetch tags from a specified domain. Creates a MailgunTagsApi instance with your API key and calls the getAllTags method with your domain name and a limit of 10 results.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/tags/get-tags.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.MailgunTagsApi;\nimport com.mailgun.model.tags.TagsResult;\n\n// ...\n\npublic TagsResult getTags() {\n    MailgunTagsApi mailgunTagsApi = MailgunClient.config(API_KEY)\n        .createApi(MailgunTagsApi.class);\n\n    return mailgunTagsApi.getAllTags(YOUR_DOMAIN_NAME, 10);\n}\n```\n\n----------------------------------------\n\nTITLE: Canceling Bulk Validation Job in Python\nDESCRIPTION: This Python function uses the requests library to cancel a bulk email validation job. It sends a DELETE request to the Mailgun API v4 endpoint for address validation.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/delete-bulk-validation.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef cancel_bulk_validation():\n    return requests.delete(\n        (\"https://api.mailgun.net/v4/address/validate/bulk/LIST_NAME\"),\n        auth=('api', 'YOUR_API_KEY'))\n```\n\n----------------------------------------\n\nTITLE: Retrieving Seed Lists with Ruby RestClient\nDESCRIPTION: This Ruby function uses the RestClient gem to retrieve seed lists from the Mailgun API. It sends a GET request to the v4 inbox/seedlists endpoint with basic authentication using an API key.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-seed-lists.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef get_seed_lists\n  RestClient.get(\"https://api:YOUR_API_KEY\"\\\n                 \"@api.mailgun.net/v4/inbox/seedlists\"\\\n                 {|response, request, result| response }\nend\n```\n\n----------------------------------------\n\nTITLE: Retrieving Mailing List Members using PHP\nDESCRIPTION: Implements Mailgun PHP SDK to fetch mailing list members. Requires Composer autoloader and Mailgun PHP library.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-list-members.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Include the Autoloader (see \"Libraries\" for install instructions)\nrequire 'vendor/autoload.php';\nuse Mailgun\\Mailgun;\n\n# Instantiate the client.\n$mgClient     = Mailgun::create('PRIVATE_API_KEY', 'https://API_HOSTNAME');\n$mailing_list = 'LIST@YOUR_DOMAIN_NAME';\n\n# Issue the call to the client.\n$result =  $mgClient->mailingList()->member()->index($mailing_list);\n```\n\n----------------------------------------\n\nTITLE: C# Implementation using RestSharp\nDESCRIPTION: C# class demonstrating inbox placement results retrieval using RestSharp client with basic authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-results.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class InboxPlacementTests\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (GetResults ().Content.ToString ());\n    }\n\n    public static IRestResponse GetResults ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v4\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.Resource = \"/inbox/results\";\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Linking IP Pool to Domain using Mailgun.js in JavaScript\nDESCRIPTION: This snippet shows how to link an IP pool to a domain using the Mailgun.js library in JavaScript. It initializes the Mailgun client, sends an asynchronous request to link the IP pool, and logs the result or any errors.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/ip_pools/link_ip_pool.rst#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n(async () => {\n  try {\n    const linkedIpPool = await client.domains.linkIpPool(DOMAIN, 'your_ip_pool_id');\n    console.log('linkedIpPool', linkedIpPool);\n  } catch (error) {\n      console.error(error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Setting up Sendmail Authentication for Mailgun\nDESCRIPTION: Configuration for Sendmail authentication with Mailgun SMTP. Specifies the login credentials to use when relaying through Mailgun's SMTP server using PLAIN authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/user_manual.rst#2025-04-21_snippet_53\n\nLANGUAGE: config\nCODE:\n```\nAuthInfo:smtp.mailgun.org \"U:<LOGIN>\" \"P:<PASSWORD>\" \"M:PLAIN\"\n```\n\n----------------------------------------\n\nTITLE: Creating Email Preview Test with Curl (Bash)\nDESCRIPTION: This snippet demonstrates how to create an email preview test using a curl command in Bash. It sends a POST request to the Mailgun API with subject and URL parameters.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/email_preview/create-test.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://api.mailgun.net/v1/preview/tests \\\n  -F 'subject=test' \\\n  -F 'url=url' \\\n  --user 'api:<YOUR_API_KEY>'\n```\n\n----------------------------------------\n\nTITLE: Updating Mailing List Member with cURL in Bash\nDESCRIPTION: This snippet demonstrates how to update a mailing list member using cURL in Bash. It sends a PUT request to the Mailgun API to update the subscription status and name of a member.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/update-list-member.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -X PUT \\\n    https://api.mailgun.net/v3/lists/LIST@YOUR_DOMAIN_NAME/members/bar@example.com \\\n    -F subscribed=False \\\n    -F name='Foo Bar'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Mailgun Tags with cURL\nDESCRIPTION: Uses cURL to fetch a list of tags from the Mailgun API with a limit of 10 results. Requires your Mailgun API key and domain name for authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/tags/get-tags.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -G \\\n    https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/tags \\\n    -d limit=10\n```\n\n----------------------------------------\n\nTITLE: Creating Bulk Email Validation Preview with cURL\nDESCRIPTION: Demonstrates how to create a bulk email validation preview list using cURL. This command uploads a file for validation against Mailgun's API, requiring your Mailgun API key for authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/create-bulk-preview.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' \\\n    https://api.mailgun.net/v4/address/validate/preview/LIST_NAME \\\n    -F 'file=@/path/to/file' \\\n```\n\n----------------------------------------\n\nTITLE: Basic Mailing List API Endpoint\nDESCRIPTION: The base endpoint for Mailgun's Mailing List API.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-mailinglists.rst#2025-04-21_snippet_0\n\nLANGUAGE: url\nCODE:\n```\nv3/lists\n```\n\n----------------------------------------\n\nTITLE: Python Route Retrieval Implementation\nDESCRIPTION: Simple Python function using requests library to fetch route details from Mailgun API.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-route.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef get_route():\n    return requests.get(\n        \"https://api.mailgun.net/v3/routes/4e97c1b2ba8a48567f007fb6\",\n        auth=(\"api\", \"YOUR_API_KEY\"))\n```\n\n----------------------------------------\n\nTITLE: Retrieving Mailgun Logs using Python Requests\nDESCRIPTION: Python implementation using the Requests library to fetch logs from Mailgun API with basic authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-log-entry.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef get_logs():\n    return requests.get(\n        \"https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/log\",\n        auth=(\"api\", \"YOUR_API_KEY\"),\n        params={\"skip\": 50,\n                \"limit\": 1})\n```\n\n----------------------------------------\n\nTITLE: Adding Domain IP with Python Requests\nDESCRIPTION: This Python function demonstrates how to add an IP address to a Mailgun domain using the requests library. It sends a POST request to the Mailgun API with basic authentication and includes the IP address in the form data.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/add-domain-ip.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef add_domain_ip():\n    return requests.post(\n        \"https://api.mailgun.net/v3/domains/YOUR_NEW_DOMAIN_NAME/ips\",\n        auth=(\"api\", \"YOUR_API_KEY\"),\n        data={\"smtp_password\": \"127.0.0.1\"})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Email Templates with Ruby\nDESCRIPTION: Implements a Ruby function that uses RestClient to make a GET request to the Mailgun API to retrieve template information. The function handles the response object.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/template-get.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef get_template\n  RestClient.\n    get(\"https://api:YOUR_API_KEY\"\\\n        \"@api.mailgun.net/v3/YOUR_DOMAIN_NAME/templates/TEMPLATE_NAME\"){|response, request, result| response }\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Email to Whitelist with Java SDK\nDESCRIPTION: Java example showing how to add an email address to the Mailgun whitelist using the Java SDK. Creates a WhitelistsRequest object with the email address and reason, then sends it to the API.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/add-whitelist.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.suppression.MailgunSuppressionWhitelistsApi;\nimport com.mailgun.model.ResponseWithMessage;\nimport com.mailgun.model.suppression.whitelists.WhitelistsRequest;\n\n// ...\n\npublic ResponseWithMessage addBounce() {\n    MailgunSuppressionWhitelistsApi suppressionWhitelistsApi = MailgunClient.config(API_KEY)\n        .createApi(MailgunSuppressionWhitelistsApi.class);\n\n    WhitelistsRequest whitelistsRequest = WhitelistsRequest.builder()\n        .address(\"bob@example.com\")\n        .reason(REASON)\n        .build();\n\n    return suppressionWhitelistsApi.addSingleWhitelistRecord(YOUR_DOMAIN_NAME, whitelistsRequest);\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Bulk Validation Preview Status using Ruby RestClient\nDESCRIPTION: This Ruby function uses the RestClient gem to make a GET request to the Mailgun API for retrieving the bulk validation preview status. It includes basic authentication in the URL.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-bulk-preview.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef get_bulk_preview\n  RestClient.get(\"https://api:YOUR_API_KEY\"\\\n                 \"@api.mailgun.net/v4/address/validate/preview/LIST_NAME\"\\\n                 {|response, request, result| response }\nend\n```\n\n----------------------------------------\n\nTITLE: Filter Stats by Subaccount\nDESCRIPTION: Example of filtering delivered event statistics for a specific subaccount.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-stats.rst#2025-04-21_snippet_3\n\nLANGUAGE: url\nCODE:\n```\nGET /v3/stats/filter?event=delivered&filter=subaccount:<Subaccount ID>\n```\n\n----------------------------------------\n\nTITLE: Updating Mailgun Webhook using C#\nDESCRIPTION: This C# class uses the RestSharp library to send a PUT request to the Mailgun API for updating the 'clicked' webhook URL. It includes authentication, sets up the request parameters, and executes the request.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/update-webhook.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class UpdateWebhookChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (UpdateWebhook ().Content.ToString ());\n    }\n\n    public static IRestResponse UpdateWebhook ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.Resource = \"/domains/YOUR_DOMAIN_NAME/webhooks/clicked\";\n        request.AddParameter (\"url\", \"https://your_domain.com/clicked\");\n        request.Method = Method.PUT;\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Domain IPs using cURL in Bash\nDESCRIPTION: This snippet demonstrates how to use cURL to make a GET request to the Mailgun API for retrieving domain IPs. It uses basic authentication with the API key and specifies the domain name in the URL.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-domain-ips.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -G \\\n    https://api.mailgun.net/v3/domains/YOUR_DOMAIN_NAME/ips\n```\n\n----------------------------------------\n\nTITLE: Retrieving Dedicated IPs using Java\nDESCRIPTION: Uses Mailgun Java SDK to fetch dedicated IPs. Requires the Mailgun client library and API key.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-ips.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.MailgunIPsApi;\nimport com.mailgun.model.ips.IPsResult;\n\n// ...\n\npublic IPsResult getIPs() {\n    MailgunIPsApi mailgunIPsApi = MailgunClient.config(API_KEY)\n        .createApi(MailgunIPsApi.class);\n\n    return mailgunIPsApi.getDedicatedIPs(true);\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Mailboxes using Ruby with RestClient\nDESCRIPTION: This Ruby function uses the RestClient gem to make a GET request to the Mailgun API for retrieving mailboxes. It includes basic authentication with the API key in the URL.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-mailboxes.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef get_mailboxes\n  RestClient.get \"https://api:YOUR_API_KEY\"\\\n  \"@api.mailgun.net/v3/YOUR_DOMAIN_NAME/mailboxes\"\nend\n```\n\n----------------------------------------\n\nTITLE: Retrieving Seed List using Python Requests\nDESCRIPTION: Python implementation using the requests library. Performs GET request with Basic Auth authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-seed-list.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef get_seed_list():\n    return requests.get(\n        \"https://api.mailgun.net/v4/inbox/seedlists/TARGET_EMAIL\",\n        auth=('api', 'YOUR_API_KEY'))\n```\n\n----------------------------------------\n\nTITLE: C# RestSharp Implementation for Domain Tag Limits\nDESCRIPTION: C# implementation using RestSharp client to fetch domain tag limits with basic authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-limits.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class GetTagsChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (GetTags ().Content.ToString ());\n    }\n\n    public static IRestResponse GetTags ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.AddParameter (\"domain\", \"YOUR_DOMAIN_NAME\", ParameterType.UrlSegment);\n        request.Resource = \"domains/{domain}/limits/tag\";\n        return client.Execute (request);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Unlinking IP Pool using Node.js\nDESCRIPTION: JavaScript implementation using the Mailgun.js library to unlink an IP pool from a domain. Demonstrates async/await pattern with error handling.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/ip_pools/unlink_ip_pool.rst#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n(async () => {\n  try {\n    const unlinkedIpPoll = await client.domains.unlinkIpPoll(DOMAIN, {pool_id: 'your_ip_pool_id'});\n    console.log('unlinkedIpPoll', unlinkedIpPoll);\n  } catch (error) {\n    console.error(error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Deactivating Domain Key using Python\nDESCRIPTION: Simple Python implementation using requests library to deactivate domain key. Uses basic authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/deactivate-domain-key.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef deactivate_domain_key():\n    return requests.put(\n        \"https://api.mailgun.net/v4/domains/AUTHORITY_DOMAIN_NAME/keys/SELECTOR/deactivate\",\n        auth=('api', 'YOUR_API_KEY'))\n```\n\n----------------------------------------\n\nTITLE: Retrieving Bulk Validation Preview Status using cURL in Bash\nDESCRIPTION: This snippet demonstrates how to make a GET request to the Mailgun API using cURL to retrieve the bulk validation preview status. It uses basic authentication with the API key.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-bulk-preview.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -G \\\n    https://api.mailgun.net/v4/address/validate/preview/LIST_NAME\n```\n\n----------------------------------------\n\nTITLE: Deleting a Domain using Ruby with Mailgun API\nDESCRIPTION: This Ruby function demonstrates how to delete a Mailgun domain using the RestClient library. It sends a DELETE request to the Mailgun API endpoint with the required authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/delete-domain.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef delete_domain\n  RestClient.delete \"https://api:YOUR_API_KEY\"\\\n  \"@api.mailgun.net/v3/domains/example.mailgun.org\"\nend\n```\n\n----------------------------------------\n\nTITLE: Fetching Mailing Lists with Java\nDESCRIPTION: This Java code snippet shows how to use the Mailgun Java SDK to retrieve mailing lists. It uses the MailgunMailingListApi class to make the API call.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-mailing-lists.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.MailgunMailingListApi;\nimport com.mailgun.model.mailing.lists.MailingListDataResponse;\n\n// ...\n\npublic MailingListDataResponse mailingLists() {\n    MailgunMailingListApi mailgunMailingListApi = MailgunClient.config(API_KEY)\n        .createApi(MailgunMailingListApi.class);\n\n    return mailgunMailingListApi.getMailingList();\n}\n```\n\n----------------------------------------\n\nTITLE: Decoding Quoted-Printable in JavaScript\nDESCRIPTION: Implements quoted-printable decoding using the quoted-printable and utf8 npm packages. Requires both packages to be installed via npm.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/decode-quoted-printable.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// npm install quoted-printable\n// npm install utf8\nimport quotedPrintable from 'quoted-printable';\n\nconst res = utf8.decode(quotedPrintable.decode('foo=3Dbar'));\nconsole.log('result:', res);\n```\n\n----------------------------------------\n\nTITLE: Updating SMTP Credentials using cURL (Bash)\nDESCRIPTION: This snippet demonstrates how to update SMTP credentials for a Mailgun domain using a cURL command. It sends a PUT request to the Mailgun API with the domain name, username, and new password.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/change-pwd-credentials.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -X PUT \\\n    https://api.mailgun.net/v3/domains/YOUR_DOMAIN_NAME/credentials/alice \\\n    -F password='abc123'\n```\n\n----------------------------------------\n\nTITLE: Add List Member Response\nDESCRIPTION: Sample JSON response when adding a new member to a mailing list.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-mailinglists.rst#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"member\": {\n        \"vars\": {\n            \"age\": 26\n        },\n        \"name\": \"Bob Bar\",\n        \"subscribed\": true,\n        \"address\": \"bar@example.com\"\n    },\n    \"message\": \"Mailing list member has been created\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Inbox Placement CURL Example - Shell\nDESCRIPTION: Example CURL command for sending an inbox placement test with a custom matching header.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/user_manual.rst#2025-04-21_snippet_47\n\nLANGUAGE: url\nCODE:\n```\ncurl -s --user 'api:API_KEY' \\\n  https://api.mailgun.net/v3/YOUR_DOMAIN/messages \\\n  -F to='<SEEDLIST>' \\\n  -F subject='<SUBJECT>' \\\n  -F html='<HTML>' \\\n  -F h:X-Campaign-Id='51302fd2-8d88-4e90-baa8-c25622f57009'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Seed Lists with PHP cURL\nDESCRIPTION: This PHP function uses cURL to retrieve seed lists from the Mailgun API. It sets up a cURL request with basic authentication, sends a GET request to the v4 inbox/seedlists endpoint, and returns the result.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-seed-lists.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Currently, the PHP SDK does not support the Inbox Placement endpoint.\n# Consider using the following php curl function.\nfunction get_seed_lists() {\n  $ch = curl_init();\n\n  curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);\n  curl_setopt($ch, CURLOPT_USERPWD, 'api:PRIVATE_API_KEY');\n  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n\n  curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\n  curl_setopt($ch, CURLOPT_URL, 'https://api.mailgun.net/v4/inbox/seedlists');\n  $result = curl_exec($ch);\n  curl_close($ch);\n\n  return $result;\n}\n```\n\n----------------------------------------\n\nTITLE: Java Mailgun Whitelist Implementation\nDESCRIPTION: Java implementation using Mailgun SDK to fetch whitelist data. Uses MailgunSuppressionWhitelistsApi class to handle API interaction.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-whitelists.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.suppression.MailgunSuppressionWhitelistsApi;\nimport com.mailgun.model.suppression.whitelists.WhitelistsItemResponse;\n\n// ...\n\npublic WhitelistsItemResponse getBounces() {\n    MailgunSuppressionWhitelistsApi suppressionWhitelistsApi = MailgunClient.config(API_KEY)\n        .createApi(MailgunSuppressionWhitelistsApi.class);\n\n    return suppressionWhitelistsApi.getAllWhitelists(YOUR_DOMAIN_NAME);\n}\n```\n\n----------------------------------------\n\nTITLE: C# Mailgun Statistics Integration\nDESCRIPTION: C# implementation using RestSharp to fetch domain statistics with basic authentication and parameter configuration\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-stats.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class GetStatsChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (GetStats ().Content.ToString ());\n    }\n\n    public static IRestResponse GetStats ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.AddParameter (\"domain\", \"YOUR_DOMAIN_NAME\", ParameterType.UrlSegment);\n        request.Resource = \"{domain}/stats/total\";\n        request.AddParameter (\"event\", \"accepted\");\n        request.AddParameter (\"event\", \"delivered\");\n        request.AddParameter (\"event\", \"failed\");\n        request.AddParameter (\"duration\", \"1m\");\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Mailgun Webhooks with Go\nDESCRIPTION: This Go function uses the Mailgun Go SDK to create a webhook for the 'clicked' event. It registers a single URL endpoint to receive notifications when emails are clicked.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/add-webhook.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/mailgun/mailgun-go/v3\"\n    \"time\"\n)\n\nfunc CreateWebhook(domain, apiKey string) error {\n    mg := mailgun.NewMailgun(domain, apiKey)\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    return mg.CreateWebhook(ctx, \"clicked\", []string{\"https://your_domain.com/v1/clicked\"})\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Result Attributes - Mailgun API\nDESCRIPTION: Endpoint to retrieve iterable attributes of inbox placement results, returning available attributes like subject and sender.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-inbox-placement.rst#2025-04-21_snippet_15\n\nLANGUAGE: url\nCODE:\n```\nGET /v4/inbox/results/a\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n   \"items\": {\n     \"attribute\": \"available attributes\",\n     \"values\": [\n       \"subject\",\n       \"sender\"\n     ]\n   }\n }\n```\n\n----------------------------------------\n\nTITLE: Retrieving Bulk Validation Preview Status using PHP cURL\nDESCRIPTION: This PHP function uses cURL to make a GET request to the Mailgun API for retrieving the bulk validation preview status. It sets up basic authentication and returns the raw API response.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-bulk-preview.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Currently, the PHP SDK does not support the v4 Validations endpoint.\n# Consider using the following php curl function.\nfunction get_bulk_preview() {\n  $ch = curl_init();\n\n  curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);\n  curl_setopt($ch, CURLOPT_USERPWD, 'api:PRIVATE_API_KEY');\n  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n\n  curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\n  curl_setopt($ch, CURLOPT_URL, 'https://api.mailgun.net/v4/address/validate/preview/LIST_NAME');\n  $result = curl_exec($ch);\n  curl_close($ch);\n\n  return $result;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding IP Address for Blocklist Monitoring\nDESCRIPTION: POST endpoint to register IP addresses for blocklist monitoring. Accepts IP address in IPv4 format with optional IP pool and description fields.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-blocklist-monitoring.rst#2025-04-21_snippet_0\n\nLANGUAGE: url\nCODE:\n```\nPOST /v1/inboxready/ip_addresses\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"ip\": \"127.0.0.1\",\n  \"ip_pool\": \"\",\n  \"description\": \"\",\n  \"state\": \"healthy\",\n  \"listed\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Ruby Implementation using RestClient\nDESCRIPTION: Ruby function using RestClient to fetch inbox placement results with inline authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-results-attribute.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef get_results_attribute\n  RestClient.get(\"https://api:YOUR_API_KEY\"\\\n                 \"@api.mailgun.net/v4/inbox/results/a/ATTRIBUTE\"\\\n                 {|response, request, result| response }\nend\n```\n\n----------------------------------------\n\nTITLE: Retrieving IP Information using Python Requests Library\nDESCRIPTION: This Python function uses the Requests library to make a GET request to the Mailgun API for retrieving information about a specific IP address. It requires the API key for authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-ip.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef get_ip():\n    return requests.get(\n        \"https://api.mailgun.net/v3/ips/127.0.0.1\",\n        auth=(\"api\", \"YOUR_API_KEY\"))\n```\n\n----------------------------------------\n\nTITLE: Retrieving Mailboxes using Python with Requests\nDESCRIPTION: This Python function uses the Requests library to make a GET request to the Mailgun API for retrieving mailboxes. It includes basic authentication with the API key.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-mailboxes.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef get_mailboxes():\n    return requests.get(\n        \"https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/mailboxes\",\n        auth=(\"api\", \"YOUR_API_KEY\"))\n```\n\n----------------------------------------\n\nTITLE: Decoding Quoted-Printable in Java\nDESCRIPTION: Implements quoted-printable decoding using Apache Commons Codec library. Requires the commons-codec dependency.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/decode-quoted-printable.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// using Apache Commons / commons-codec\nimport org.apache.commons.codec.net.QuotedPrintableCodec;\n\n// ...\nString decodedMessage = new QuotedPrintableCodec().decode(encodedMessage);\n```\n\n----------------------------------------\n\nTITLE: Deleting IP Pool using Node.js with Mailgun API\nDESCRIPTION: This Node.js script uses the mailgun.js library to delete an IP pool. It initializes the Mailgun client with the API key, then calls the delete method on the ip_pools object with the pool ID as an argument.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/ip_pools/delete_ip_pool.rst#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n(async () => {\n  try {\n    const deletedIpPool = await client.ip_pools.delete('61b70962dc62320ca808bd39');\n    console.log('deletedIpPool', deletedIpPool);\n  } catch (error) {\n    console.error(error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Unlinking IP Pool using cURL\nDESCRIPTION: Examples of removing IP pool associations from a Mailgun domain using cURL requests. Shows two methods: using direct IP address or pool ID as replacement parameters.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/ip_pools/unlink_ip_pool.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#IP as a replacement\ncurl -s --user 'api:YOUR_API_KEY' -X DELETE \\\n    https://api.mailgun.net/v3/domains/YOUR_DOMAIN/ips/ip_pool\\?ip='REPLACEMENT_IP'\n\n#IP pool id as replacement\ncurl -s --user 'api:YOUR_API_KEY' -X DELETE \\\n    https://api.mailgun.net/v3/domains/YOUR_DOMAIN/ips/ip_pool\\?pool_id='REPLACEMENT_POOL_ID'\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Template Versions - Mailgun API Request\nDESCRIPTION: API endpoint for retrieving a list of all versions of a template with pagination support.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-templates.rst#2025-04-21_snippet_22\n\nLANGUAGE: url\nCODE:\n```\nGET /<domain>/templates/<template>/versions\n```\n\n----------------------------------------\n\nTITLE: Create Bulk Validation Preview Response\nDESCRIPTION: Sample JSON response when creating a new bulk validation preview request. Returns the preview ID and a confirmation message.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-email-validation.rst#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"id\": \"test_501\",\n  \"message\": \"The bulk preview was submitted.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Template Versions with curl in Bash\nDESCRIPTION: Sends a GET request to the Mailgun API to retrieve template versions. The request uses basic authentication with the API key and limits the response to 10 results.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/version-get-all.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -G \\\n  https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/templates/TEMPLATE_NAME/versions\n  -d limit=10\n```\n\n----------------------------------------\n\nTITLE: Delete Webhook using Java\nDESCRIPTION: Delete a webhook using Mailgun Java SDK with MailgunWebhooksApi\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/delete-webhook.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.MailgunWebhooksApi;\nimport com.mailgun.enums.WebhookName;\nimport com.mailgun.model.webhooks.WebhookResult;\n\n// ...\n\npublic WebhookResult deleteWebhook() {\n    MailgunWebhooksApi mailgunWebhooksApi = MailgunClient.config(API_KEY).createApi(MailgunWebhooksApi.class);\n\n    return mailgunWebhooksApi.deleteWebhook(YOUR_DOMAIN_NAME, WebhookName.CLICKED);\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing List Member Upload Error Event JSON in JavaScript\nDESCRIPTION: This snippet demonstrates the JSON structure for a list member upload error event. It includes error details and mailing list information.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-events.rst#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"task-id\": \"235fsc00607511e9a4sa0a6d3b5f5rt6\",\n    \"format\": \"text\",\n    \"mailing-list\": {\n        \"address\": \"list@example.com\"\n    },\n    \"timestamp\": 1555440404.488491,\n    \"error\": {\n        \"message\": \"Invalid format\"\n    },\n    \"log-level\": \"error\",\n    \"id\": \"Kr9ZsE8ATfqhNHYmRKlrHg\",\n    \"member-description\": \"mailto:user@example.com,\",\n    \"event\": \"list_member_upload_error\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating DKIM Keys with PHP using cURL\nDESCRIPTION: This PHP function uses the cURL library to activate a DKIM key for a domain through Mailgun's API. It requires your private API key, authority domain name, signing domain, and selector as parameters. Note that this example uses v4 of the API.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/create-domain-key.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction create_domain_key() {\n    $ch = curl_init();\n\n    curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);\n    curl_setopt($ch, CURLOPT_USERPWD, 'api:PRIVATE_API_KEY');\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n\n    curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');\n    curl_setopt($ch, CURLOPT_URL, 'https://api.mailgun.net/v4/domains/AUTHORITY_DOMAIN_NAME/keys/SELECTOR/activate');\n    curl_setopt($ch, CURLOPT_POSTFIELDS, array(\n       'signing_domain'=> 'SIGNING_DOMAIN')\n    );\n   curl_setopt($ch, CURLOPT_POSTFIELDS, array(\n       'selector'=> 'SELECTOR')\n   );\n$result = curl_exec($ch);\n    curl_close($ch);\n\n    return $result;\n  }\n```\n\n----------------------------------------\n\nTITLE: RFC 2822 Date Format Example for Mailgun API\nDESCRIPTION: Shows the date format used by Mailgun API responses, following RFC 2822 standards. All dates in API responses are returned as strings in this format.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-intro.rst#2025-04-21_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n'Thu, 13 Oct 2011 18:02:00 +0000'\n```\n\n----------------------------------------\n\nTITLE: Listing Official Mailgun Libraries in reStructuredText\nDESCRIPTION: This snippet lists the official Mailgun libraries for various programming languages using reStructuredText syntax. It includes links to the GitHub repositories for PHP, Ruby, Go, JavaScript, and Java libraries.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/libraries.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n* `mailgun-php <https://github.com/mailgun/mailgun-php>`_\n* `mailgun-ruby <https://github.com/mailgun/mailgun-ruby>`_\n* `mailgun-go <https://github.com/mailgun/mailgun-go>`_\n* `mailgun-js <https://github.com/mailgun/mailgun.js>`_\n* `mailgun-java <https://github.com/mailgun/mailgun-java>`_\n```\n\n----------------------------------------\n\nTITLE: Retrieving Template Version with JavaScript SDK\nDESCRIPTION: Uses the Mailgun JavaScript SDK to retrieve a template version. Creates a Mailgun client with API credentials and uses the domainTemplates.getVersion method to fetch the template version, passing domain, template name, and version tag.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/version-get.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\nconst TEMPLATE_NAME = 'template.name';\nconst VERSION_TAG = 'v2';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n(async () => {\n  try {\n    const templateVersion = await client.domains.domainTemplates.getVersion(\n      DOMAIN,\n      TEMPLATE_NAME,\n      VERSION_TAG\n    );\n    console.log('templateVersion', templateVersion);\n  } catch (error) {\n    console.error(error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Ruby Whitelist Implementation\nDESCRIPTION: Ruby implementation using RestClient to fetch whitelist data from Mailgun API.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-whitelists.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef get_whitelists\n  RestClient.get \"https://api:YOUR_API_KEY\"\\\n  \"@api.mailgun.net/v3/YOUR_DOMAIN_NAME/whitelists\"\nend\n```\n\n----------------------------------------\n\nTITLE: Fetching Seed List Attributes using PHP cURL\nDESCRIPTION: This PHP function uses cURL to retrieve seed list attributes from the Mailgun API. It sets up a cURL request with basic authentication, sends a GET request to the specified endpoint, and returns the result.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-seed-list-attributes.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Currently, the PHP SDK does not support the inbox placement endpoint.\n# Consider using the following php curl function.\nfunction get_seed_list_attributes() {\n  $ch = curl_init();\n\n  curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);\n  curl_setopt($ch, CURLOPT_USERPWD, 'api:PRIVATE_API_KEY');\n  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n\n  curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\n  curl_setopt($ch, CURLOPT_URL, 'https://api.mailgun.net/v4/inbox/seedlists/a');\n  $result = curl_exec($ch);\n  curl_close($ch);\n\n  return $result;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Mailgun API using cURL in Bash\nDESCRIPTION: This snippet demonstrates how to make a GET request to the Mailgun API using cURL in Bash. It requires the API key and domain name to be replaced with actual values.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-list-validation.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -G \\\n    https://api.mailgun.net/v3/domains/YOUR_DOMAIN_NAME\n```\n\n----------------------------------------\n\nTITLE: Adding Mailgun Webhooks with cURL\nDESCRIPTION: This cURL command creates a new webhook for the 'clicked' event in Mailgun, registering multiple URL endpoints that will receive webhook notifications when an email is clicked.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/add-webhook.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -X POST \\\n   https://api.mailgun.net/v3/domains/YOUR_DOMAIN_NAME/webhooks \\\n   -F id='clicked' \\\n   -F url='https://your_domain.com/v1/clicked' \\\n   -F url='https://your_domain.com/v2/clicked' \\\n   -F url='https://your_partner_domain.com/v1/clicked'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Monitored Blocklists\nDESCRIPTION: GET endpoint to retrieve the list of blocklists monitored by the service.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-blocklist-monitoring.rst#2025-04-21_snippet_6\n\nLANGUAGE: url\nCODE:\n```\nGET /v1/blocklist-monitoring/blocklists\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"items\": [\n    {\n      \"blocklist\": \"b.barracudacentral.org\",\n      \"name\": \"Barracuda\"\n    },\n    {\n      \"blocklist\": \"bl.score.senderscore.com\",\n      \"name\": \"Senderscore BL\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Domain using Curl in Bash\nDESCRIPTION: This snippet demonstrates how to delete a Mailgun domain using a curl command in Bash. It sends a DELETE request to the Mailgun API endpoint with authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/delete-domain.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -X DELETE \\\n    https://api.mailgun.net/v3/domains/example.mailgun.org\n```\n\n----------------------------------------\n\nTITLE: Python Mailgun Webhook Integration\nDESCRIPTION: Python implementation using requests library to fetch webhook details for clicked events.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-webhook.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef get_domain():\n    return requests.get(\n        \"https://api.mailgun.net/v3/domains/YOUR_DOMAIN_NAME/webhooks/clicked\",\n        auth=(\"api\", \"YOUR_API_KEY\"))\n```\n\n----------------------------------------\n\nTITLE: Ruby Route Retrieval Implementation\nDESCRIPTION: Ruby implementation using RestClient to fetch route information from Mailgun API.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-route.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef get_route\n  RestClient.\n    get(\"https://api:YOUR_API_KEY\"\\\n        \"@api.mailgun.net/v3/routes/\"\\\n        \"4e97c1b2ba8a48567f007fb6\"){|response, request, result| response }\nend\n```\n\n----------------------------------------\n\nTITLE: Retrieving Dedicated IPs using cURL\nDESCRIPTION: Makes a GET request to Mailgun's IP API endpoint using cURL to retrieve dedicated IPs. Requires API key authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-ips.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -G \\\n    https://api.mailgun.net/v3/ips \\\n    -d dedicated=\"true\"\n```\n\n----------------------------------------\n\nTITLE: Linking IP Pool to Domain using cURL in Bash\nDESCRIPTION: This snippet demonstrates how to link an IP pool to a domain using a cURL command in Bash. It sends a POST request to the Mailgun API with the domain and pool ID.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/ip_pools/link_ip_pool.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' \\\n     https://api.mailgun.net/v3/domains/$YOUR_DOMAIN/ips \\\n     -F pool_id='$pool_id'\n```\n\n----------------------------------------\n\nTITLE: Creating Domain Credentials in Go\nDESCRIPTION: Creates domain credentials using the Mailgun Go SDK with context and timeout handling.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/create-credentials.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/mailgun/mailgun-go/v3\"\n    \"time\"\n)\n\nfunc CreateCredential(domain, apiKey string) error {\n    mg := mailgun.NewMailgun(domain, apiKey)\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    return mg.CreateCredential(ctx, \"alice@example.com\", \"secret\")\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Domain IP with C#\nDESCRIPTION: Implements a method to unassign an IP from a Mailgun domain using C# and RestSharp. Configures a RestClient with basic authentication and constructs a DELETE request to the Mailgun API.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/remove-domain-ip.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class DeleteDomainIPChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (DeleteDomainIP ().Content.ToString ());\n    }\n\n    public static IRestResponse DeleteDomainIP ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.AddParameter (\"domain\", \"YOUR_DOMAIN_NAME\", ParameterType.UrlSegment);\n        request.Resource = \"{domain}/ips/{ip}\";\n        request.AddUrlSegment (\"ip\", \"127.0.0.1\");\n        request.Method = Method.DELETE;\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Email Providers - Mailgun API\nDESCRIPTION: Endpoint to retrieve available email providers for inbox placement testing, including provider domain, display name, and region.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-inbox-placement.rst#2025-04-21_snippet_20\n\nLANGUAGE: url\nCODE:\n```\nGET /v4/inbox/providers\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"items\": [\n      {\n        \"domain\": \"hotmail.com\",\n        \"display_name\": \"Hotmail\",\n        \"region\": \"Global\"\n      },\n      {\n        \"domain\": \"gmail.com\",\n        \"display_name\": \"Gmail\",\n        \"region\": \"Global\"\n      },\n      ...\n    ]\n  }\n```\n\n----------------------------------------\n\nTITLE: Parsing Unsubscribe Event JSON in JavaScript\nDESCRIPTION: This snippet illustrates the JSON structure for an unsubscribe event. It includes recipient information, geolocation, and client details.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-events.rst#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"event\": \"unsubscribed\",\n  \"id\": \"W3X4JOhFT-OZidZGKKr9iA\",\n  \"timestamp\": 1377213791.421473,\n  \"log-level\": \"info\",\n  \"recipient\": \"recipient@example.com\",\n  \"geolocation\": {\n    \"country\": \"US\",\n    \"region\": \"TX\",\n    \"city\": \"San Antonio\"\n  },\n  \"campaigns\": [],\n  \"tags\": [],\n  \"user-variables\": {},\n  \"ip\": \"23.23.23.345\",\n  \"client-info\": {\n    \"client-type\": \"browser\",\n    \"client-os\": \"OS X\",\n    \"device-type\": \"desktop\",\n    \"client-name\": \"Chrome\",\n    \"user-agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.95 Safari/537.36\"\n  },\n  \"message\": {\n    \"headers\": {\n      \"message-id\": \"20130822232216.13966.79700@samples.mailgun.org\"\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Mailgun Tags with JavaScript\nDESCRIPTION: Uses the mailgun.js library to list tags for a domain. Creates a Mailgun client with your API key, then calls the domainTags.list method asynchronously with a limit parameter of 10.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/tags/get-tags.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n(async () => {\n  try {\n     const tagsList = await client.domains.domainTags.list(DOMAIN, {\"limit\": 10});\n     console.log('tagsList', tagsList);\n  } catch (error) {\n    console.error(error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Failed Events from Mailgun API using JavaScript\nDESCRIPTION: This JavaScript code uses the Mailgun.js library to query the Mailgun API for failed events. It demonstrates how to set up the Mailgun client, use async/await for the API call, and handle the response.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/events-failure.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n(async () => {\n  try {\n    const events = await client.events.get(DOMAIN, {\n      event: 'failed'\n    });\n    console.log('events', events)\n  } catch (error) {\n    console.error(error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Bounces in Mailgun API\nDESCRIPTION: Shows the POST request URL and JSON body structure for adding multiple bounce records in a single API call. Supports up to 1000 records per request.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-suppressions.rst#2025-04-21_snippet_6\n\nLANGUAGE: url\nCODE:\n```\nPOST /<domain>/bounces, Content-Type: application/json\n```\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\n    \"address\": \"alice@example.com\",\n    \"code\": \"550\",\n    \"error\": \"Bounced\",\n    \"created_at\": \"Thu, 13 Oct 2011 18:02:00 UTC\"\n  },\n  {\n    \"address\": \"bob@example.com\",\n    \"code\": \"550\",\n    \"error\": \"Bounced\"\n  },\n  {\n    \"address\": \"carol@example.com\",\n    \"code\": \"550\"\n  },\n  {\n    \"address\": \"dan@example.com\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Bulk Validation Jobs List Response\nDESCRIPTION: Example JSON response showing a list of validation jobs with pagination details\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-email-validation.rst#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"jobs\":[\n    {\n        \"created_at\": \"Tue, 26 Feb 2019 21:30:03 GMT\",\n        \"download_url\": {\n            \"csv\": \"<download_link>\",\n            \"json\": \"<download_link>\"\n        }\n        \"id\": \"bulk_validations_sandbox2_mailgun_org\",\n        \"quantity\": 207665,\n        \"records_processed\": 207665,\n        \"status\": \"uploaded\",\n        \"summary\": {\n            \"result\": {\n                \"deliverable\": 181854,\n                \"do_not_send\": 5647,\n                \"undeliverable\": 12116,\n                \"catch_all\" : 2345,\n                \"unknown\": 5613},\n            \"risk\": {\n                \"high\": 17763,\n                \"low\": 142547,\n                \"medium\": 41652,\n                \"unknown\": 5613}\n        }\n    }],\n    \"total\":3,\n    \"paging\": {\n      \"next\": \"https://url_to_next_page\",\n      \"previous\": \"https://url_to_previous_page\",\n      \"first\": \"https://url_to_first_page\",\n      \"last\": \"https://url_to_last_page\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Mailing List using Curl in Bash\nDESCRIPTION: This snippet demonstrates how to validate a mailing list using a curl command in Bash. It sends a POST request to the Mailgun API endpoint for list validation.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/create-list-validation.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' \\\n    https://api.mailgun.net/v3/lists/LIST@YOUR_DOMAIN_NAME/validate \\\n```\n\n----------------------------------------\n\nTITLE: Removing Unsubscribe Record Endpoint\nDESCRIPTION: DELETE endpoint to remove an address from the unsubscribes table. Can delete all events for an email address or a specific event using its ID.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-unsubscribes.rst#2025-04-21_snippet_2\n\nLANGUAGE: url\nCODE:\n```\nDELETE /<domain>/unsubscribes/<address or id>\n```\n\n----------------------------------------\n\nTITLE: Parsing List Member Upload Event JSON in JavaScript\nDESCRIPTION: This snippet shows the JSON structure for a list member upload event. It includes mailing list details and member information.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-events.rst#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"task-id\": \"235fsc00607511e9a4sa0a6d3b5f5rt6\",\n    \"mailing-list\": {\n        \"address\": \"list@example.com\"\n    },\n    \"timestamp\": 1555439198.84909,\n    \"log-level\": \"info\",\n    \"id\": \"2342sd234asDSDsdfsd\",\n    \"member\": {\n        \"name\": \"\",\n        \"subscribed\": true,\n        \"address\": \"user@example.com\"\n    },\n    \"event\": \"list_member_uploaded\"\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Mailing List using Ruby\nDESCRIPTION: Ruby implementation using RestClient to delete a Mailgun mailing list.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/remove-mailing-list.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef remove_list\n  RestClient.delete(\"https://api:YOUR_API_KEY\" \\\n                    \"@api.mailgun.net/v3/lists/LIST@YOUR_DOMAIN_NAME\")\nend\n```\n\n----------------------------------------\n\nTITLE: Fetching Seed List Attributes using Ruby RestClient\nDESCRIPTION: This Ruby function uses the RestClient gem to retrieve seed list attributes from the Mailgun API. It sends a GET request to the specified endpoint with basic authentication using the API key.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-seed-list-attributes.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef get_seed_list_attributes\n  RestClient.get(\"https://api:YOUR_API_KEY\"\\\n                 \"@api.mailgun.net/v4/inbox/seedlists/a\"\\\n                 {|response, request, result| response }\nend\n```\n\n----------------------------------------\n\nTITLE: Retrieving Webhooks using cURL\nDESCRIPTION: Simple cURL command to get webhooks from Mailgun API using basic authentication\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-webhooks.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -G \\\n    https://api.mailgun.net/v3/domains/YOUR_DOMAIN_NAME/webhooks\n```\n\n----------------------------------------\n\nTITLE: Listing Mailgun Templates using Go SDK\nDESCRIPTION: This Go function uses the Mailgun Go SDK to list templates. It creates a Mailgun client and uses the ListTemplates method to retrieve all templates.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/template-get-all.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/mailgun/mailgun-go/v3\"\n    \"time\"\n)\n\nfunc ListTemplates(domain, apiKey string) ([]mailgun.Template, error) {\n    mg := mailgun.NewMailgun(domain, apiKey)\n    it := mg.ListTemplates(nil)\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    var page, result []mailgun.Template\n    for it.Next(ctx, &page) {\n        result = append(result, page...)\n    }\n\n    if it.Err() != nil {\n        return nil, it.Err()\n    }\n    return result, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Unsubscribes with Mailgun API (URL)\nDESCRIPTION: This snippet shows the URL endpoint for adding a single unsubscribe record to the unsubscribe list.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-suppressions.rst#2025-04-21_snippet_19\n\nLANGUAGE: url\nCODE:\n```\nPOST /<domain>/unsubscribes, Content-Type: application/json\n```\n\n----------------------------------------\n\nTITLE: Delete Webhook using Python\nDESCRIPTION: Delete a webhook using Python requests library\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/delete-webhook.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef delete_domain():\n    return requests.delete(\n        \"https://api.mailgun.net/v3/domains/YOUR_DOMAIN_NAME/webhooks/clicked\",\n        auth=(\"api\", \"YOUR_API_KEY\"))\n```\n\n----------------------------------------\n\nTITLE: Fetching IP Pools with cURL\nDESCRIPTION: Makes a GET request to Mailgun's IP pools endpoint using cURL. Requires API key authentication using Basic Auth.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/ip_pools/get_ip_pools_list.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -G \\\n    https://api.mailgun.net/v1/ip_pools\n```\n\n----------------------------------------\n\nTITLE: Deleting a Domain using C# with Mailgun API\nDESCRIPTION: This C# class demonstrates how to delete a Mailgun domain using the RestSharp library. It creates a RestClient, sets up authentication, and sends a DELETE request to the Mailgun API endpoint.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/delete-domain.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class DeleteDomainChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (DeleteDomain ().Content.ToString ());\n    }\n\n    public static IRestResponse DeleteDomain ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.Resource = \"/domains/{name}\";\n        request.AddUrlSegment (\"name\", \"example.mailgun.org\");\n        request.Method = Method.DELETE;\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Route using Java Mailgun Client\nDESCRIPTION: Java implementation using Mailgun's official client library to fetch a single route.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-route.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.MailgunRoutesApi;\nimport com.mailgun.model.routes.SingleRouteResponse;\n\n// ...\n\npublic SingleRouteResponse getSingleRoute() {\n    MailgunRoutesApi mailgunRoutesApi = MailgunClient.config(API_KEY)\n        .createApi(MailgunRoutesApi.class);\n\n    return mailgunRoutesApi.getSingleRoute(YOUR_ROUTE_ID);\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Mailgun Template using PHP\nDESCRIPTION: PHP function for deleting a Mailgun template using cURL since the PHP SDK doesn't support the Templates endpoint. Configures a cURL request with basic authentication and returns the API response.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/template-delete.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Currently, the PHP SDK does not support the Templates endpoint.\n# Consider using the following php curl function.\nfunction delete_template() {\n\n  $ch = curl_init();\n\n  curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);\n  curl_setopt($ch, CURLOPT_USERPWD, 'api:PRIVATE_API_KEY');\n  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n\n  curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');\n  curl_setopt($ch, CURLOPT_URL, 'https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/templates/TEMPLATE_NAME');\n\n  $result = curl_exec($ch);\n  curl_close($ch);\n\n  return $result;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving DKIM Keys with Bash/cURL\nDESCRIPTION: A simple cURL command to get DKIM keys from the Mailgun API. This snippet uses basic authentication with your API key to access the DKIM keys endpoint.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/list-all-domain-keys.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user `api:YOUR_API_KEY' -G \\\n    https://api.mailgun.net/v1/dkim/keys\n```\n\n----------------------------------------\n\nTITLE: Forwarding Messages to Email Address\nDESCRIPTION: Uses the forward() action to send matched messages to another email address. This action passes the message to mailbox@myapp.com.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/user_manual.rst#2025-04-21_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nforward(\"mailbox@myapp.com\")\n```\n\n----------------------------------------\n\nTITLE: PHP Template Retrieval using cURL\nDESCRIPTION: Custom PHP implementation using cURL for fetching active templates since the PHP SDK doesn't support the Templates endpoint.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/template-get-active.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Currently, the PHP SDK does not support the Templates endpoint.\n# Consider using the following php curl function.\nfunction get_active_template() {\n\n    $params = array(\n        'active' => 'yes'\n    );\n\n    $ch = curl_init();\n\n    curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);\n    curl_setopt($ch, CURLOPT_USERPWD, 'api:PRIVATE_API_KEY');\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n\n    curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\n    curl_setopt($ch, CURLOPT_URL, 'https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/templates/TEMPLATE_NAME');\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $params);\n\n    $result = curl_exec($ch);\n    curl_close($ch);\n\n    return $result;\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Tags for a Domain\nDESCRIPTION: GET endpoint to retrieve a list of tags for a specified domain. Supports pagination and allows limiting the number of entries returned.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-tags.rst#2025-04-21_snippet_1\n\nLANGUAGE: url\nCODE:\n```\nGET /<domain>/tags\n```\n\n----------------------------------------\n\nTITLE: Get Single Domain Endpoint\nDESCRIPTION: GET endpoint to retrieve details of a specific domain\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-domains.rst#2025-04-21_snippet_2\n\nLANGUAGE: url\nCODE:\n```\nGET /domains/<domain>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Attribute Values - Mailgun API\nDESCRIPTION: Endpoint to get all values for a specific attribute from results lists, useful for autocomplete functionality.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-inbox-placement.rst#2025-04-21_snippet_16\n\nLANGUAGE: url\nCODE:\n```\nGET /v4/inbox/results/a/attribute\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n   \"items\": {\n     \"attribute\": \"subject\",\n     \"values\": [\n       \"This is a subject\",\n       \"We've been trying to contact you\",\n       \"about your car's extended warranty\"\n     ]\n   }\n }\n```\n\n----------------------------------------\n\nTITLE: PUT Domain DKIM Authority Update Endpoint\nDESCRIPTION: Updates the DKIM authority settings for a specified domain. Allows setting whether the domain acts as its own DKIM authority.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-domains.rst#2025-04-21_snippet_16\n\nLANGUAGE: url\nCODE:\n```\nPUT /domains/<domain>/dkim_authority\n```\n\n----------------------------------------\n\nTITLE: Response Structure for SMTP Credentials Listing in JavaScript\nDESCRIPTION: Shows the JSON response structure when retrieving a list of SMTP credentials from the Mailgun API. The response includes credential details such as creation timestamp and login information.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/user_manual.rst#2025-04-21_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\n{\n   \"total_count\": 2,\n   \"items\": [\n     {\n       \"size_bytes\": 0,\n       \"created_at\": \"Tue, 27 Sep 2011 20:24:22 GMT\",\n       \"mailbox\": \"user@samples.mailgun.org\"\n       \"login\": \"user@samples.mailgun.org\"\n     },\n     {\n       \"size_bytes\": 0,\n       \"created_at\": \"Thu, 06 Oct 2011 10:22:36 GMT\",\n       \"mailbox\": \"user@samples.mailgun.org\"\n       \"login\": \"user@samples.mailgun.org\"\n     }\n   ]\n }\n```\n\n----------------------------------------\n\nTITLE: Creating Domain Credentials in Ruby\nDESCRIPTION: Creates domain credentials using Ruby's RestClient to make a POST request to the Mailgun API.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/create-credentials.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef create_credentials\n  RestClient.post \"https://api:YOUR_API_KEY\"\\\n  \"@api.mailgun.net/v3/domains/YOUR_DOMAIN_NAME/credentials\",\n  :login => \"alice@YOUR_DOMAIN_NAME\",\n  :password => \"secret\"\nend\n```\n\n----------------------------------------\n\nTITLE: Parsing Failed Delivery Event JSON in JavaScript\nDESCRIPTION: This snippet shows the JSON structure for a failed email delivery event. It includes details like severity, delivery status, recipient information, and message headers.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-events.rst#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"severity\": \"temporary\",\n    \"tags\": [],\n    \"timestamp\": 1665066523.871657,\n    \"storage\": {\n        \"url\": \"https://storage-us-east4.api.mailgun.net/v3/domains/...\",\n        \"region\": \"us-east4\",\n        \"key\": \"AwABB...\",\n        \"env\": \"production\"\n    },\n    \"delivery-status\": {\n        \"tls\": true,\n        \"mx-host\": \"hotmail-com.olc.protection.outlook.com\",\n        \"code\": 451,\n        \"description\": \"\",\n        \"session-seconds\": 0.7517080307006836,\n        \"utf8\": true,\n        \"retry-seconds\": 600,\n        \"enhanced-code\": \"4.7.652\",\n        \"attempt-no\": 1,\n        \"message\": \"4.7.652 The mail server [xxx.xxx.xxx.xxx] has exceeded the maximum number of connections.\",\n        \"certificate-verified\": true\n    },\n    \"batch\": {\n        \"id\": \"633ee6154618b2fed628ccb0\"\n    },\n    \"recipient-domain\": \"test.com\",\n    \"id\": \"xYrATi63Rke8EC_s7EoJeA\",\n    \"campaigns\": [],\n    \"reason\": \"generic\",\n    \"user-variables\": {},\n    \"flags\": {\n        \"is-routed\": false,\n        \"is-authenticated\": true,\n        \"is-system-test\": false,\n        \"is-test-mode\": false\n    },\n    \"log-level\": \"warn\",\n    \"template\": {\n        \"name\": \"test\"\n    },\n    \"envelope\": {\n        \"transport\": \"smtp\",\n        \"sender\": \"test@test.com\",\n        \"sending-ip\": \"xxx.xxx.xxx.xxx\",\n        \"targets\": \"test@test.com\"\n    },\n    \"message\": {\n        \"headers\": {\n            \"to\": \"test@test.net\",\n            \"message-id\": \"20221006142837.1618e01bf42da9fa@test.com\",\n            \"from\": \"test@test.com\",\n            \"subject\": \"Test send\"\n        },\n        \"attachments\": [],\n        \"size\": 3499\n    },\n    \"recipient\": \"test@test.com\",\n    \"event\": \"failed\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Domain IPs with C# RestSharp\nDESCRIPTION: This C# class uses RestSharp to make a GET request to the Mailgun API for fetching domain IPs. It sets up the RestClient with the base URL and authenticator, then executes the request with the specified domain name.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-domain-ips.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class GetDomainIPsChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (GetDomainIPs ().Content.ToString ());\n    }\n\n    public static IRestResponse GetDomainIPs ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.AddParameter (\"domain\", \"YOUR_DOMAIN_NAME\", ParameterType.UrlSegment);\n        request.Resource = \"/domains/{domain}/ips\";\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Unsubscribes with Ruby RestClient\nDESCRIPTION: Ruby function to add an email address to the Mailgun unsubscribe list. Uses RestClient to make a POST request to the Mailgun API with the email address and tag as parameters.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/add-unsubscribe-tag.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef unsubscribe_from_tag\n  RestClient.post \"https://api:YOUR_API_KEY\"\\\n  \"@api.mailgun.net/v3/YOUR_DOMAIN_NAME/unsubscribes\",\n  :address => 'bob@example.com',\n  :tag => 'tag1'\nend\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Seed Lists with GET Request (URL)\nDESCRIPTION: API endpoint for retrieving all seed lists. The endpoint can be filtered using parameters available from the \"Get all available filters for seed lists\" endpoint.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-inbox-placement.rst#2025-04-21_snippet_4\n\nLANGUAGE: url\nCODE:\n```\nGET /v4/inbox/seedlists\n```\n\n----------------------------------------\n\nTITLE: Ruby RestClient Implementation\nDESCRIPTION: Ruby function using RestClient to retrieve domain credentials.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-credentials.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef get_credentials\n  RestClient.get \"https://api:YOUR_API_KEY\"\\\n  \"@api.mailgun.net/v3/domains/YOUR_DOMAIN_NAME/credentials\"\nend\n```\n\n----------------------------------------\n\nTITLE: Update Mailbox Password using cURL\nDESCRIPTION: Makes a PUT request to Mailgun's API to update a mailbox password using cURL command line tool. Requires API key and domain name.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/change-mailbox-password.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -X PUT \\\n    https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/mailboxes/alice \\\n    -F password='abc123'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Template Version with Java\nDESCRIPTION: Uses the Mailgun Java SDK to get a specific template version. Creates a MailgunTemplatesApi instance with the API key and calls the getSpecifiedVersionTemplateContent method with domain name, template name, and version tag.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/version-get.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.MailgunTemplatesApi;\nimport com.mailgun.model.templates.TemplateWithVersionResponse;\n\n// ...\n\npublic TemplateWithVersionResponse getTemplateVersion() {\n    MailgunTemplatesApi mailgunTemplatesApi = MailgunClient.config(API_KEY)\n        .createApi(MailgunTemplatesApi.class);\n\n    return mailgunTemplatesApi.getSpecifiedVersionTemplateContent(YOUR_DOMAIN_NAME, TEMPLATE_NAME, VERSION_TAG);\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Webhook using cURL\nDESCRIPTION: Command line example of deleting a webhook using cURL with basic authentication to the Mailgun API. Requires API key and domain name.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/delete-webhook-deprecated.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -X DELETE \\\n    https://api.mailgun.net/v3/domains/YOUR_DOMAIN_NAME/webhooks/click\n```\n\n----------------------------------------\n\nTITLE: Listing Domain Keys using PHP\nDESCRIPTION: PHP implementation using cURL to fetch domain keys with basic authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/list-domain-keys.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction list_domain_keys() {\n    $ch = curl_init();\n\n    curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);\n    curl_setopt($ch, CURLOPT_USERPWD, 'api:PRIVATE_API_KEY');\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n\n    curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\n    curl_setopt($ch, CURLOPT_URL, 'https://api.mailgun.net/v4/domains/AUTHORITY_DOMAIN_NAME/keys');\n    $result = curl_exec($ch);\n    curl_close($ch);\n\n    return $result;\n  }\n```\n\n----------------------------------------\n\nTITLE: Python Implementation using Requests\nDESCRIPTION: Simple Python function using the requests library to fetch inbox placement results with basic authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-results.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef get_results():\n    return requests.get(\n        \"https://api.mailgun.net/v4/inbox/results\",\n        auth=('api', 'YOUR_API_KEY'))\n```\n\n----------------------------------------\n\nTITLE: Getting Route Details with PHP\nDESCRIPTION: PHP implementation using Mailgun's SDK to retrieve route information.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-route.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Include the Autoloader (see \"Libraries\" for install instructions)\nrequire 'vendor/autoload.php';\nuse Mailgun\\Mailgun;\n\n# Instantiate the client.\n$mgClient = Mailgun::create('PRIVATE_API_KEY', 'https://API_HOSTNAME');\n$route_id = '5d9fde0fd8b861ec16cf2549'\n\n# Issue the call to the client.\n$result = $mgClient->routes()->show($route_id);\n```\n\n----------------------------------------\n\nTITLE: Java Implementation for Domain Tag Limits\nDESCRIPTION: Java implementation using Unirest HTTP client to fetch domain tag limits. Returns response as JsonNode.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-limits.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mashape.unirest.http.HttpResponse;\nimport com.mashape.unirest.http.JsonNode;\nimport com.mashape.unirest.http.Unirest;\nimport com.mashape.unirest.http.exceptions.UnirestException;\n\npublic class MGSample {\n\n    // ...\n\n    public static JsonNode getLimitsTag() throws UnirestException {\n\n        HttpResponse <JsonNode> request = Unirest.get(\"https://api.mailgun.net/v3/domains/\"+ YOUR_DOMAIN_NAME + \"/limits/tag\")\n            .basicAuth(\"api\", API_KEY)\n            .asJson();\n\n        return request.getBody();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading IP Address Status\nDESCRIPTION: GET endpoint to retrieve current health status of a single IP address, including any blocklists where the IP is currently listed.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-blocklist-monitoring.rst#2025-04-21_snippet_1\n\nLANGUAGE: url\nCODE:\n```\nGET /v1/inboxready/ip_addresses/{ip}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"ip\": \"127.0.0.1\",\n  \"ip_pool\": \"\",\n  \"description\": \"\",\n  \"state\": \"listed\",\n  \"listed\": [\n    {\n      \"list\":\"cbl.abuseat.org\",\n      \"name\":\"CBL\",\n      \"first_seen\":\"2022-06-24T04:19:43.212Z\",\n      \"last_seen\":\"2022-06-28T16:43:38.954Z\",\n      \"delist_requested_at\":\"0001-01-01T00:00:00Z\",\n      \"comments\":[\"https://www.spamhaus.org/query/ip/127.0.0.1\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Active Template with cURL\nDESCRIPTION: Demonstrates how to retrieve an active template using a cURL command with basic authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/template-get-active.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -X GET \\\n    https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/templates/TEMPLATE_NAME \\\n    -F active='yes'\n```\n\n----------------------------------------\n\nTITLE: Setting Base URL for EU Region in Mailgun API\nDESCRIPTION: Shows the base URL pattern for Mailgun API endpoints when using domains created in the EU region. This URL is the foundation for all API requests to EU-hosted Mailgun services.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-intro.rst#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://api.eu.mailgun.net/\n```\n\n----------------------------------------\n\nTITLE: Fetching Unsubscribes List in Mailgun API\nDESCRIPTION: Shows the GET request URL for retrieving a paginated list of unsubscribes for a domain. Includes an optional 'limit' parameter to control the number of records returned.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-suppressions.rst#2025-04-21_snippet_11\n\nLANGUAGE: url\nCODE:\n```\nGET /<domain>/unsubscribes\n```\n\n----------------------------------------\n\nTITLE: Password Change Response - JavaScript\nDESCRIPTION: API response format when updating credentials password in Mailgun.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/user_manual.rst#2025-04-21_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"message\": \"Password changed\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Complaints with Go Mailgun SDK\nDESCRIPTION: This Go function uses the Mailgun Go SDK to fetch complaints. It creates a new Mailgun client, sets up a context with a timeout, and then uses the ListComplaints method to retrieve all complaints for the specified domain.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-complaints.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/mailgun/mailgun-go/v3\"\n    \"time\"\n)\n\nfunc ListComplaints(domain, apiKey string) ([]mailgun.Complaint, error) {\n    mg := mailgun.NewMailgun(domain, apiKey)\n    it := mg.ListComplaints(nil)\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    var page, result []mailgun.Complaint\n    for it.Next(ctx, &page) {\n        result = append(result, page...)\n    }\n\n    if it.Err() != nil {\n        return nil, it.Err()\n    }\n    return result, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Update Domain Credentials Endpoint\nDESCRIPTION: PUT endpoint to update SMTP credentials for a domain\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-domains.rst#2025-04-21_snippet_8\n\nLANGUAGE: url\nCODE:\n```\nPUT /domains/<domain>/credentials/<login>\n```\n\n----------------------------------------\n\nTITLE: Setting Base URL for US Region in Mailgun API\nDESCRIPTION: Shows the base URL pattern for Mailgun API endpoints when using domains created in the US region. This URL is the foundation for all API requests to US-hosted Mailgun services.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-intro.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://api.mailgun.net/\n```\n\n----------------------------------------\n\nTITLE: Listing Mailgun Templates using cURL in Bash\nDESCRIPTION: This snippet demonstrates how to use cURL in Bash to list Mailgun templates. It sends a GET request to the Mailgun API with basic authentication and a limit parameter.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/template-get-all.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -G \\\n  https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/templates \\\n  -d limit=10\n```\n\n----------------------------------------\n\nTITLE: Response Format for Grouped and Filtered Spam Trap Query in JavaScript\nDESCRIPTION: This snippet illustrates the JSON response structure for a spam trap query grouped by IP and filtered by multiple IP addresses. It shows nested objects for each IP with arrays of daily trap counts.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-spam-trap-monitoring.rst#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"items\": [\n    {\n      \"208.75.123.183\": [\n        {\n          \"date\": \"2022-01-01\",\n          \"pristine\": 2,\n          \"recycled\": 85,\n          \"typo\": 32,\n          \"total\": 119\n        },\n        ...\n      ]\n    },\n    {\n      \"208.75.123.186\": [\n        ...\n      ]\n    },\n  ],\n  \"paging\": {\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Single Validation GET Endpoint\nDESCRIPTION: GET endpoint for validating a single email address with optional parameters.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-email-validation.rst#2025-04-21_snippet_1\n\nLANGUAGE: url\nCODE:\n```\nGET /v4/address/validate\n```\n\n----------------------------------------\n\nTITLE: Enabling a Subaccount (POST) in Mailgun API\nDESCRIPTION: This endpoint enables a previously disabled subaccount. It requires the subaccount ID as a path parameter. Enabling a subaccount allows it to resume sending emails and accessing Mailgun services.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/subaccounts.rst#2025-04-21_snippet_4\n\nLANGUAGE: url\nCODE:\n```\nPOST /v5/accounts/subaccounts/{subaccount-id}/enable\n```\n\n----------------------------------------\n\nTITLE: Unassigning IP from Domain with PHP\nDESCRIPTION: Uses the Mailgun PHP SDK to unassign an IP address from a domain. Requires the Mailgun library to be installed via Composer and initialized with a private API key.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/remove-domain-ip.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Include the Autoloader (see \"Libraries\" for install instructions)\nrequire 'vendor/autoload.php';\nuse Mailgun\\Mailgun;\n\n# Instantiate the client.\n$mgClient = Mailgun::create('PRIVATE_API_KEY', 'https://API_HOSTNAME');\n$domain   = 'YOUR_DOMAIN_NAME';\n$ip       = '127.0.0.1';\n\n# Issue the call to the client.\n$result = $mgClient->ips->unassign($domain, $ip);\n```\n\n----------------------------------------\n\nTITLE: Fetching Spam Complaints List in Mailgun API\nDESCRIPTION: GET request to retrieve the list of spam complaints. Supports 'limit' and 'skip' parameters for pagination.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-complaints.rst#2025-04-21_snippet_0\n\nLANGUAGE: url\nCODE:\n```\nGET /<domain>/complaints\n```\n\n----------------------------------------\n\nTITLE: Ruby Mailgun Webhook Integration\nDESCRIPTION: Ruby implementation using RestClient to fetch webhook details for clicked events.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-webhook.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef get_domain\n  RestClient.get(\"https://api:YOUR_API_KEY\"\\\n                 \"@api.mailgun.net/v3/domains/YOUR_DOMAIN_NAME/webhooks/clicked\"\\\n                 {|response, request, result| response }\nend\n```\n\n----------------------------------------\n\nTITLE: Deleting a Tag\nDESCRIPTION: DELETE endpoint to remove a tag from a domain. Note that this does not destroy the statistics associated with the tag.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-tags.rst#2025-04-21_snippet_5\n\nLANGUAGE: url\nCODE:\n```\nDELETE /<domain>/tags/<tag>\n```\n\n----------------------------------------\n\nTITLE: Retrieving IP Information using Ruby RestClient\nDESCRIPTION: This Ruby function uses the RestClient to make a GET request to the Mailgun API for retrieving information about a specific IP address. It requires the API key for authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-ip.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef get_ip\n  RestClient.get(\"https://api:YOUR_API_KEY\"\\\n                 \"@api.mailgun.net/v3/ips/127.0.0.1\"\\\n                 {|response, request, result| response }\nend\n```\n\n----------------------------------------\n\nTITLE: Update Mailbox Password using Ruby\nDESCRIPTION: Ruby implementation using RestClient to update a mailbox password. Demonstrates simple REST API interaction with basic authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/change-mailbox-password.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef change_mailbox_password\n  RestClient.put \"https://api:YOUR_API_KEY\"\\\n  \"@api.mailgun.net/v3/YOUR_DOMAIN_NAME/mailboxes/alice\",\n  :password => \"supersecret\"\nend\n```\n\n----------------------------------------\n\nTITLE: Retrieving Mailboxes using cURL in Bash\nDESCRIPTION: This snippet demonstrates how to retrieve mailboxes from the Mailgun API using a cURL command in Bash. It uses basic authentication with an API key and specifies the domain name in the URL.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-mailboxes.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -G \\\n    https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/mailboxes\n```\n\n----------------------------------------\n\nTITLE: Canceling Mailing List Validation using Java\nDESCRIPTION: This Java method uses the Mailgun Java SDK to cancel an active mailing list verification job. It requires the Mailgun API key and mailing list address as parameters.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/delete-list-validation.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.MailgunMailingListApi;\n\n// ...\n\npublic String cancelMailingListValidation() {\n    MailgunMailingListApi mailgunMailingListApi = MailgunClient.config(API_KEY)\n        .createApi(MailgunMailingListApi.class);\n\n    return mailgunMailingListApi.cancelActiveMailingListVerificationJob(MAILING_LIST_ADDRESS);\n}\n```\n\n----------------------------------------\n\nTITLE: Go Route Retrieval Implementation\nDESCRIPTION: Go implementation using official Mailgun Go client to fetch route information with context and timeout.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-route.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/mailgun/mailgun-go/v3\"\n    \"time\"\n)\n\nfunc GetRoute(domain, apiKey string) (mailgun.Route, error) {\n    mg := mailgun.NewMailgun(domain, apiKey)\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    return mg.GetRoute(ctx, \"route_id\")\n}\n```\n\n----------------------------------------\n\nTITLE: Storing Messages with Notification Endpoint\nDESCRIPTION: Uses the store() action with notification to temporarily store a message for later retrieval. This action stores the message and notifies a callback URL when the message is available.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/user_manual.rst#2025-04-21_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nstore(notify=\"http://mydomain.com/callback\")\n```\n\n----------------------------------------\n\nTITLE: Update Seed List Endpoint\nDESCRIPTION: API endpoint to update an existing seed list's properties.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-inbox-placement.rst#2025-04-21_snippet_11\n\nLANGUAGE: url\nCODE:\n```\nPUT /v4/inbox/seedlists/ibp-seedlist-address@domain.net\n```\n\n----------------------------------------\n\nTITLE: Listing Template Versions with Python requests\nDESCRIPTION: A Python function that uses the requests library to retrieve template versions from the Mailgun API. Authenticates with the API key using basic authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/version-get-all.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef list_template_versions():\n    return requests.get(\n        \"https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/templates/TEMPLATE_NAME/versions\",\n        auth=(\"api\", \"YOUR_API_KEY\"))\n```\n\n----------------------------------------\n\nTITLE: Adding a Domain to InboxReady\nDESCRIPTION: POST request to register a domain for reputation monitoring. Requires the domain name as a parameter.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-inboxready-domains.rst#2025-04-21_snippet_0\n\nLANGUAGE: url\nCODE:\n```\nPOST /v1/inboxready/domains\n```\n\n----------------------------------------\n\nTITLE: Constructing Mailgun Unsubscribes API URL\nDESCRIPTION: Demonstrates the base URL structure for accessing the Mailgun unsubscribes API endpoints. The URL includes the API version and domain placeholder.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-suppressions.rst#2025-04-21_snippet_10\n\nLANGUAGE: url\nCODE:\n```\nv3/<domain>/unsubscribes\n```\n\n----------------------------------------\n\nTITLE: Mailgun Webhooks in JavaScript (Deprecated)\nDESCRIPTION: A note indicating that webhook creation is deprecated and not supported in the JavaScript library for Mailgun.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/add-webhook-deprecated.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// This feature is deprecated and not supported in the js library\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Complaints with Mailgun API (JavaScript)\nDESCRIPTION: This snippet shows the JSON structure for adding multiple complaint records to the complaint list in a single API call. It includes examples of different complaint scenarios.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-suppressions.rst#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\n    \"address\": \"alice@example.com\",\n    \"created_at\": \"Thu, 13 Oct 2011 18:02:00 UTC\"\n  },\n  {\n    \"address\": \"bob@example.com\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Updating IP Address Attributes\nDESCRIPTION: PUT endpoint to update IP address attributes including IP pool and description.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-blocklist-monitoring.rst#2025-04-21_snippet_3\n\nLANGUAGE: url\nCODE:\n```\nPUT /v1/inboxready/ip_addresses/{ip}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"ip\": \"127.0.0.1\",\n  \"ip_pool\": \"\",\n  \"description\": \"\",\n  \"state\": \"healthy\",\n  \"listed\": []\n}\n```\n\n----------------------------------------\n\nTITLE: PHP Implementation for Inbox Filters\nDESCRIPTION: PHP implementation using curl functions to fetch inbox placement filters. Note that the PHP SDK doesn't support this endpoint directly.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-results-filters.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Currently, the PHP SDK does not support the Inbox Placement endpoint.\n# Consider using the following php curl function.\nfunction get_results_filters() {\n  $ch = curl_init();\n\n  curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);\n  curl_setopt($ch, CURLOPT_USERPWD, 'api:PRIVATE_API_KEY');\n  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n\n  curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\n  curl_setopt($ch, CURLOPT_URL, 'https://api.mailgun.net/v4/inbox/results/_filters');\n  $result = curl_exec($ch);\n  curl_close($ch);\n\n  return $result;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Mailbox Endpoint\nDESCRIPTION: POST endpoint to create a new mailbox for a domain. Requires mailbox name and password parameters.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-mailboxes.rst#2025-04-21_snippet_1\n\nLANGUAGE: url\nCODE:\n```\nPOST /<domain>/mailboxes\n```\n\n----------------------------------------\n\nTITLE: Ruby Domain Retrieval with RestClient\nDESCRIPTION: Ruby implementation using RestClient to make a GET request to the Mailgun API for domain information\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-domain.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef get_domain\n  RestClient.get(\"https://api:YOUR_API_KEY\"\\\n                 \"@api.mailgun.net/v3/domains/YOUR_DOMAIN_NAME\"\\\n                 {|response, request, result| response }\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Seed Lists with Python Requests\nDESCRIPTION: Python function for creating a seed list using the requests library. The function builds a data dictionary with sending domains and makes a PUT request to the Mailgun API endpoint with HTTP Basic authentication using the API key.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/update-seed-list.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef create_seed_list():\n    data = {'sending_domains': 'domain.com'}\n    return requests.put(\n        \"https://api.mailgun.net/v4/inbox/seedlists/TARGET_EMAIL\", data=data\n        auth=('api', 'YOUR_API_KEY'))\n```\n\n----------------------------------------\n\nTITLE: Domain Creation Response Sample\nDESCRIPTION: Sample JSON response when creating a new domain showing DNS records configuration.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-domains.rst#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"message\": \"Domain has been created\",\n    \"receiving_dns_records\": [\n        {\n            \"cached\": [],\n            \"priority\": \"10\",\n            \"record_type\": \"MX\",\n            \"valid\": \"valid\",\n            \"value\": \"mxa.mailgun.org\"\n        },\n        {\n            \"cached\": [],\n            \"priority\": \"10\",\n            \"record_type\": \"MX\",\n            \"valid\": \"valid\",\n            \"value\": \"mxb.mailgun.org\"\n        }\n    ],\n    \"sending_dns_records\": [\n        {\n            \"cached\": [],\n            \"name\": \"example.com\",\n            \"record_type\": \"TXT\",\n            \"valid\": \"valid\",\n            \"value\": \"v=spf1 include:mailgun.org ~all\"\n        },\n        {\n            \"cached\": [],\n            \"name\": \"k1._domainkey.example.com\",\n            \"record_type\": \"TXT\",\n            \"valid\": \"valid\",\n            \"value\": \"k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4G....\"\n        },\n        {\n            \"cached\": [],\n            \"name\": \"email.example.com\",\n            \"record_type\": \"CNAME\",\n            \"valid\": \"valid\",\n            \"value\": \"mailgun.org\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Webhook using Ruby\nDESCRIPTION: Delete a webhook using Ruby RestClient\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/delete-webhook.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef delete_domain\n  RestClient.delete \"https://api:YOUR_API_KEY\"\\\n  \"@api.mailgun.net/v3/domains/YOUR_DOMAIN_NAME/webhooks/clicked\"\nend\n```\n\n----------------------------------------\n\nTITLE: Fetching Bounces List in Mailgun API\nDESCRIPTION: Shows the GET request URL for retrieving a paginated list of bounces for a domain. Includes an optional 'limit' parameter to control the number of records returned.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-suppressions.rst#2025-04-21_snippet_1\n\nLANGUAGE: url\nCODE:\n```\nGET /<domain>/bounces\n```\n\n----------------------------------------\n\nTITLE: Java Implementation using Unirest\nDESCRIPTION: Java method to fetch inbox placement results using Unirest HTTP client library with basic authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-results.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mashape.unirest.http.HttpResponse;\nimport com.mashape.unirest.http.JsonNode;\nimport com.mashape.unirest.http.Unirest;\nimport com.mashape.unirest.http.exceptions.UnirestException;\n\npublic class MGSample {\n\n    // ...\n\n    public static JsonNode getResults() throws UnirestException {\n\n        HttpResponse<JsonNode> request = Unirest.get(\"https://api.mailgun.net/v4/inbox/results\")\n            .basicAuth(\"api\", API_KEY)\n            .asJson();\n\n        return request.getBody();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: List IPs Endpoint\nDESCRIPTION: GET endpoint to retrieve all IPs assigned to the account. Supports filtering for dedicated IPs.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-ips.rst#2025-04-21_snippet_1\n\nLANGUAGE: url\nCODE:\n```\nGET /ips\n```\n\n----------------------------------------\n\nTITLE: Delete Webhook using PHP\nDESCRIPTION: Delete a webhook using Mailgun PHP SDK with vendor autoloader\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/delete-webhook.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Include the Autoloader (see \"Libraries\" for install instructions)\nrequire 'vendor/autoload.php';\nuse Mailgun\\Mailgun;\n\n# Instantiate the client.\n$mgClient = Mailgun::create('PRIVATE_API_KEY', 'https://API_HOSTNAME');\n$domain   = 'YOUR_DOMAIN_NAME';\n$webhook  = 'delivered';\n\n# Issue the call to the client.\n$result = $mgClient->webhooks()->delete($domain, $webhook);\n```\n\n----------------------------------------\n\nTITLE: Retrieving IP Information using Mailgun PHP SDK\nDESCRIPTION: This PHP code snippet uses the Mailgun PHP SDK to retrieve information about a specific IP address. It initializes the Mailgun client with the API key and calls the show method of the IPs API.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-ip.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Include the Autoloader (see \"Libraries\" for install instructions)\nrequire 'vendor/autoload.php';\nuse Mailgun\\Mailgun;\n\n# Instantiate the client.\n$mgClient = Mailgun::create('PRIVATE_API_KEY', 'https://API_HOSTNAME');\n$ip       = '127.0.0.1';\n\n# Issue the call to the client.\n$result = $mgClient->ips()->show($ip);\n```\n\n----------------------------------------\n\nTITLE: Deleting Tags Using Python Requests Library\nDESCRIPTION: This Python function demonstrates how to delete a tag named 'newsletter' using the requests library. It sends a DELETE request to the Mailgun API endpoint with HTTP basic authentication using your API key.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/tags/delete-tag.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef delete_tag():\n    return requests.delete(\n        \"https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/tags/newsletter\",\n        auth=(\"api\", \"YOUR_API_KEY\"))\n```\n\n----------------------------------------\n\nTITLE: Adding Domain IP with cURL in Bash\nDESCRIPTION: This snippet demonstrates how to add an IP address to a Mailgun domain using a cURL command. It makes a POST request to the Mailgun API with basic authentication using the API key and specifies the IP address to be added.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/add-domain-ip.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' \\\n   -X POST https://api.mailgun.net/v3/domains/YOUR_DOMAIN_NAME/ips \\\n   -F ip='127.0.0.1'\n```\n\n----------------------------------------\n\nTITLE: Configuring Exim for Mailgun SMTP Relay\nDESCRIPTION: Configuration for setting up Exim mail server to relay through Mailgun's SMTP service. Includes route and transport settings to use Mailgun as a smarthost for non-local domains.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/user_manual.rst#2025-04-21_snippet_50\n\nLANGUAGE: config\nCODE:\n```\n# In your exim.conf:\n# In routes configuration:\nmailgun:\n\tdriver = manualroute\n\tdomains = ! +local_domains\n\ttransport = mailgun_transport\n\troute_list = * smtp.mailgun.org byname\n\n# In transports configuration:\nmailgun_transport:\n\tdriver=smtp\n\thosts_require_auth = <; $host_address\n\thosts_require_tls = <; $host_address\n```\n\n----------------------------------------\n\nTITLE: Creating Mailgun Webhooks using cURL\nDESCRIPTION: Creates a webhook for 'click' events using the Mailgun API via cURL. The webhook will send event data to the specified URL when email clicks are tracked.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/add-webhook-deprecated.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' \\\n   https://api.mailgun.net/v3/domains/YOUR_DOMAIN_NAME/webhooks \\\n   -F id='click' \\\n   -F url='http://bin.example.com/8de4a9c4'\n```\n\n----------------------------------------\n\nTITLE: Listing Template Versions with Go Mailgun SDK\nDESCRIPTION: A Go function that uses the Mailgun Go SDK to list all versions of a specific template. Uses a paginated iterator to retrieve all template versions with a timeout context.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/version-get-all.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/mailgun/mailgun-go/v3\"\n    \"time\"\n)\n\nfunc ListTemplateVersions(domain, apiKey string) ([]mailgun.TemplateVersion, error) {\n    mg := mailgun.NewMailgun(domain, apiKey)\n    it := mg.ListTemplateVersions(\"TEMPLATE_NAME\", nil)\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    var page, result []mailgun.TemplateVersion\n    for it.Next(ctx, &page) {\n        result = append(result, page...)\n    }\n\n    if it.Err() != nil {\n        return nil, it.Err()\n    }\n    return result, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Get Seed List Attributes Endpoint\nDESCRIPTION: API endpoint to retrieve available attributes for seed lists.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-inbox-placement.rst#2025-04-21_snippet_8\n\nLANGUAGE: url\nCODE:\n```\nGET /v4/inbox/seedlists/a\n```\n\n----------------------------------------\n\nTITLE: Deleting a Template (DELETE Request)\nDESCRIPTION: API endpoint for deleting a specific template and all its versions.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-templates.rst#2025-04-21_snippet_9\n\nLANGUAGE: url\nCODE:\n```\nDELETE /<domain>/templates/<name>\n```\n\n----------------------------------------\n\nTITLE: JavaScript Implementation Note for Domain Tag Limits\nDESCRIPTION: Note indicating that the feature is deprecated and not supported in the JavaScript library.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-limits.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// This feature is deprecated and not supported in the js library\n```\n\n----------------------------------------\n\nTITLE: Getting Mailing List Validation Status in Python\nDESCRIPTION: This Python function uses the requests library to make a GET request to the Mailgun API for retrieving mailing list validation status. It requires the API key and the mailing list address to be replaced with actual values.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-list-validation.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef get_mailing_list_validation_status():\n    return requests.get(\n        \"https://api.mailgun.net/v3/lists/LIST@YOUR_DOMAIN_NAME/validate\",\n        auth=('api', 'YOUR_API_KEY'))\n```\n\n----------------------------------------\n\nTITLE: Retrieving Tag Statistics by Countries\nDESCRIPTION: GET endpoint to retrieve a list of countries of origin for a given domain and tag, broken down by different event types.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-tags.rst#2025-04-21_snippet_6\n\nLANGUAGE: url\nCODE:\n```\nGET /<domain>/tags/<tag>/stats/aggregates/countries\n```\n\n----------------------------------------\n\nTITLE: Creating an IP Pool\nDESCRIPTION: API endpoint for creating a new IP Pool. Requires a name parameter, with optional description and IPs list.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-ip-pools.rst#2025-04-21_snippet_1\n\nLANGUAGE: url\nCODE:\n```\nPOST /v1/ip_pools\n```\n\n----------------------------------------\n\nTITLE: Querying Spam Trap Counts with URL Parameters\nDESCRIPTION: This snippet demonstrates how to make a GET request to retrieve spam trap hit counts for a specific date range. It includes required query parameters for start and end dates.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-spam-trap-monitoring.rst#2025-04-21_snippet_0\n\nLANGUAGE: url\nCODE:\n```\nGET /v1/spamtraps?start=2022-01-01&end=2022-01-31\n```\n\n----------------------------------------\n\nTITLE: Parsing List Upload Completion Event JSON in JavaScript\nDESCRIPTION: This snippet illustrates the JSON structure for a list upload completion event. It includes upload statistics and mailing list details.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-events.rst#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"task-id\": \"235fsc00607511e9a4sa0a6d3b5f5rt6\",\n    \"subscribed\": true,\n    \"format\": \"text\",\n    \"mailing-list\": {\n        \"address\": \"list@example.com\"\n    },\n    \"timestamp\": 1555440421.099269,\n    \"log-level\": \"info\",\n    \"id\": \"Kr9ZsE8ATfqhNHYmRKlrHg\",\n    \"failed-count\": 12,\n    \"upserted-count\": 75258,\n    \"is-upsert\": false,\n    \"event\": \"list_uploaded\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Unsubscribes with cURL in Bash\nDESCRIPTION: A cURL command to add an email address to the Mailgun unsubscribe table with a specified tag. Requires the Mailgun API key and domain name for authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/add-unsubscribe-tag.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' \\\n   https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/unsubscribes \\\n   -F address='bob@example.com' \\\n   -F tag='tag1'\n```\n\n----------------------------------------\n\nTITLE: Get Domain Connection Settings Endpoint\nDESCRIPTION: GET endpoint to retrieve domain connection settings\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-domains.rst#2025-04-21_snippet_10\n\nLANGUAGE: url\nCODE:\n```\nGET /domains/<domain>/connection\n```\n\n----------------------------------------\n\nTITLE: Retrieving DKIM Keys with Java/Unirest\nDESCRIPTION: A Java implementation using Unirest HTTP library to get DKIM keys from the Mailgun API. This method performs a GET request with basic authentication and returns the response as a JsonNode object.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/list-all-domain-keys.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mashape.unirest.http.HttpResponse;\nimport com.mashape.unirest.http.JsonNode;\nimport com.mashape.unirest.http.Unirest;\nimport com.mashape.unirest.http.exceptions.UnirestException;\n\npublic class MGSample {\n\n    // ...\n\n    public static JsonNode listDomainKeys() throws UnirestException {\n\n        HttpResponse<JsonNode> request = Unirest.get(\"https://api.mailgun.net/v1/dkim/keys\")\n            .basicAuth(\"api\", API_KEY)\n            .asJson();\n\n        return request.getBody();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: List Domains Endpoint\nDESCRIPTION: GET endpoint to retrieve list of domains with optional filtering parameters\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-domains.rst#2025-04-21_snippet_1\n\nLANGUAGE: url\nCODE:\n```\nGET /domains\n```\n\n----------------------------------------\n\nTITLE: C# Implementation using RestSharp\nDESCRIPTION: C# class using RestSharp library to fetch inbox placement results. Includes basic authentication and parameter handling.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-results-attribute.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class InboxPlacementTest\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (GetResultsAttribute().Content.ToString());\n    }\n\n    public static IRestResponse GetResultsAttribute()\n    {\n        RestClient client = new RestClient();\n        client.BaseUrl = new Uri(\"https://api.mailgun.net/v4\");\n        client.Authenticator =\n            new HttpBasicAuthenticator(\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest();\n        request.AddParameter (\"attribute\", \"ATTRIBUTE\", ParameterType.UrlSegment);\n        request.Resource = \"/inbox/results/a/{attribute}\";\n        return client.Execute(request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Linking an IP Pool\nDESCRIPTION: API endpoint for linking an IP Pool to a sending domain, replacing any previously assigned IPs.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-ip-pools.rst#2025-04-21_snippet_5\n\nLANGUAGE: url\nCODE:\n```\nPOST /v3/domains/{domain_name}/ips\n```\n\n----------------------------------------\n\nTITLE: Unassigning Domain IP with Go\nDESCRIPTION: Uses the Mailgun Go SDK to delete an IP from a domain. Implements a function that creates a new Mailgun client with API key authentication and calls the DeleteDomainIP method with a context for timeout management.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/remove-domain-ip.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/mailgun/mailgun-go/v3\"\n    \"time\"\n)\n\nfunc DeleteDomainIP(domain, apiKey string) error {\n    mg := mailgun.NewMailgun(domain, apiKey)\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    return mg.DeleteDomainIP(ctx, \"127.0.0.1\")\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Exim Password Authentication for Mailgun\nDESCRIPTION: Configuration for Exim password authentication with Mailgun SMTP. This should be added to the /etc/exim/passwd.client file to provide credentials for authenticating with the Mailgun SMTP server.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/user_manual.rst#2025-04-21_snippet_51\n\nLANGUAGE: config\nCODE:\n```\n*.mailgun.org:username:password\n```\n\n----------------------------------------\n\nTITLE: Retrieving Mailgun Routes using C#\nDESCRIPTION: This C# class shows how to retrieve Mailgun routes using the RestSharp library. It creates a RestClient with authentication, builds a request with pagination parameters, and executes the request.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-routes.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class GetRoutesChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (GetRoutes ().Content.ToString ());\n    }\n\n    public static IRestResponse GetRoutes ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.Resource = \"routes\";\n        request.AddParameter (\"skip\", 1);\n        request.AddParameter (\"limit\", 1);\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Email Templates with JavaScript\nDESCRIPTION: Uses the mailgun.js library to fetch a template. This example creates a Mailgun client with authentication credentials and makes an asynchronous request to get the specified template.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/template-get.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n(async () => {\n  try {\n    const domainTemplate = await client.domains.domainTemplates.get(DOMAIN, 'YOUR_TEMPLATE_NAME');\n    console.log('domainTemplate', domainTemplate);\n  } catch (error) {\n    console.error(error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Deleting Template Version - Mailgun API Request\nDESCRIPTION: API endpoint for deleting a specific version of a template.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-templates.rst#2025-04-21_snippet_20\n\nLANGUAGE: url\nCODE:\n```\nDELETE /<domain>/templates/<template>/versions/<version>\n```\n\n----------------------------------------\n\nTITLE: Updating Domain Connection Settings with Ruby\nDESCRIPTION: Uses the Ruby RestClient to send a PUT request to update domain connection settings. Sets 'require_tls' to true and 'skip_verification' to false for a specified domain.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/update-connection.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef update_member\n  RestClient.put(\"https://api:YOUR_API_KEY\" \\\n                 \"@api.mailgun.net/v3/domains/YOUR_DOMAIN_NAME/connection\",\n                 :require_tls => true,\n                 :skip_verification => false)\nend\n```\n\n----------------------------------------\n\nTITLE: Fetching Bounces using cURL\nDESCRIPTION: Simple cURL command to retrieve bounce information from Mailgun API using basic authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-bounces.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -G \\\n     https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/bounces\n```\n\n----------------------------------------\n\nTITLE: DELETE Domain Key Endpoint\nDESCRIPTION: Permanently deletes a domain key for specified signing domain and selector.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-domains.rst#2025-04-21_snippet_23\n\nLANGUAGE: url\nCODE:\n```\nDELETE /v1/dkim/keys\n```\n\n----------------------------------------\n\nTITLE: DELETE Bulk Validation Job Endpoint\nDESCRIPTION: Endpoint to cancel an in-progress job or delete results of a completed job\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-email-validation.rst#2025-04-21_snippet_11\n\nLANGUAGE: url\nCODE:\n```\nDELETE /v4/address/validate/bulk/<list_id>\n```\n\n----------------------------------------\n\nTITLE: Create Webhook - API Endpoint\nDESCRIPTION: API endpoint to create a new webhook for a domain. Requires domain name, webhook name, and up to 3 URLs for the webhook event.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-webhooks.rst#2025-04-21_snippet_3\n\nLANGUAGE: url\nCODE:\n```\nPOST /domains/<domain>/webhooks\n```\n\n----------------------------------------\n\nTITLE: Update SMTP Password Response\nDESCRIPTION: Sample JSON response when updating the password for SMTP credentials.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-domains.rst#2025-04-21_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"message\": \"Password changed\"\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating to Mailgun API with Basic Auth using curl\nDESCRIPTION: Example of using HTTP Basic Authentication with curl to access the Mailgun API. The authentication method uses 'api' as the username and your API key as the password.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-intro.rst#2025-04-21_snippet_3\n\nLANGUAGE: curl\nCODE:\n```\ncurl --user 'api:YOUR_API_KEY'\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Adding Bounce in Mailgun API\nDESCRIPTION: Sample JSON response when adding a bounce event via the POST endpoint. Confirms the address has been added to the bounces table and includes the address that was added.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-bounces.rst#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"message\": \"Address has been added to the bounces table\",\n  \"address\": \"bob@example.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Webhook using JavaScript\nDESCRIPTION: Delete a webhook using Mailgun.js with async/await and error handling\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/delete-webhook.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n(async () => {\n  try {\n    const deletedWebhook = await client.webhooks.destroy(DOMAIN, 'clicked');\n    console.log('deletedWebhook', deletedWebhook);\n  } catch (error) {\n    console.error(error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Updating a Tag\nDESCRIPTION: PUT endpoint to update a tag with additional information such as a description. Requires domain name and tag name parameters.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-tags.rst#2025-04-21_snippet_3\n\nLANGUAGE: url\nCODE:\n```\nPUT /<domain>/tags/<tag>\n```\n\n----------------------------------------\n\nTITLE: Delete Template Version with Ruby\nDESCRIPTION: Ruby implementation using RestClient to delete a template version\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/version-delete.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef delete_template_version\n  RestClient.get \"https://api:YOUR_API_KEY\"\\\n  \"@api.mailgun.net/v3/YOUR_DOMAIN_NAME/templates/TEMPLATE_NAME/versions/VERSION_TAG\"\n\nend\n```\n\n----------------------------------------\n\nTITLE: Getting Single Result - Mailgun API\nDESCRIPTION: Endpoint to retrieve detailed information about a specific inbox placement test result including delivery status and authentication results.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-inbox-placement.rst#2025-04-21_snippet_17\n\nLANGUAGE: url\nCODE:\n```\nGET /v4/inbox/results/UUID\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"result\": {\n    \"rid\": \"123456789012345678901234\",\n    \"result_id\": \"12345678-1234-1234-1234-123456789012\",\n    \"keybox_email\": \"ibp-00410325-1c95-492e-bc35-c19899802494@mailgun.net\",\n    \"subject\": \"A subject of things\",\n    \"sender\": \"person@domain.com\",\n    \"name\": \"Such list\",\n    \"created_at\": \"2021-08-03T14:20:40.301Z\",\n    \"updated_at\": \"2021-08-03T14:36:53.841Z\",\n    \"seed_results\": [\n      {\n        \"email\": \"mail@box.com\",\n        \"provider\": \"box.com\",\n        \"destination\": \"inbox\",\n        \"state\": \"delivered\",\n        \"originating_ip\": \"123.123.123.123\",\n        \"tags\": [\n          \"inbox\"\n        ],\n        \"spf\": \"pass\",\n        \"dkim\": \"pass\",\n        \"dmarc\": \"pass\"\n      }\n    ]\n  }\n }\n```\n\n----------------------------------------\n\nTITLE: Fetching Inbox Placement Results using Java and Unirest\nDESCRIPTION: This Java code snippet uses the Unirest library to make a GET request to the Mailgun Inbox Placement API. It includes basic authentication and returns the response as a JsonNode.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-results-attributes.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mashape.unirest.http.HttpResponse;\nimport com.mashape.unirest.http.JsonNode;\nimport com.mashape.unirest.http.Unirest;\nimport com.mashape.unirest.http.exceptions.UnirestException;\n\npublic class MGSample {\n\n    // ...\n\n    public static JsonNode getResultsAttributes() throws UnirestException {\n\n        HttpResponse<JsonNode> request = Unirest.get(\"https://api.mailgun.net/v4/inbox/results/a\")\n            .basicAuth(\"api\", API_KEY)\n            .asJson();\n\n        return request.getBody();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Base URL for Tags API in Mailgun\nDESCRIPTION: The base URL endpoint for accessing the Tags API in Mailgun, which requires the domain name as a parameter.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-tags.rst#2025-04-21_snippet_0\n\nLANGUAGE: url\nCODE:\n```\nv3/<domain>/tags\n```\n\n----------------------------------------\n\nTITLE: Using match_recipient Filter with Simple Email Pattern\nDESCRIPTION: Matches incoming email messages addressed to a specific recipient using a direct email address pattern. This example shows how to match messages sent to foo@bar.com.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/user_manual.rst#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nmatch_recipient(\"foo@bar.com\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Complaints with cURL in Bash\nDESCRIPTION: This snippet demonstrates how to use cURL to make a GET request to the Mailgun API for retrieving complaints. It uses basic authentication with the API key and specifies the domain name in the URL.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-complaints.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -G \\\n    https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/complaints\n```\n\n----------------------------------------\n\nTITLE: Python Request for Mailgun Credentials\nDESCRIPTION: Simple Python function using requests library to fetch domain credentials.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-credentials.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef get_credentials():\n    return requests.get(\n        \"https://api.mailgun.net/v3/domains/YOUR_DOMAIN_NAME/credentials\",\n        auth=(\"api\", \"YOUR_API_KEY\"))\n```\n\n----------------------------------------\n\nTITLE: Delete Template Version with Java\nDESCRIPTION: Java implementation using the Mailgun SDK to delete a template version\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/version-delete.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.MailgunTemplatesApi;\nimport com.mailgun.model.templates.TemplateVersionResponse;\n\n// ...\n\npublic TemplateVersionResponse deleteTemplateVersion() {\n    MailgunTemplatesApi mailgunTemplatesApi = MailgunClient.config(API_KEY)\n        .createApi(MailgunTemplatesApi.class);\n\n    return mailgunTemplatesApi.deleteSpecificTemplateVersion(YOUR_DOMAIN_NAME, TEMPLATE_NAME, VERSION_TAG);\n}\n```\n\n----------------------------------------\n\nTITLE: List Template Versions Response - Mailgun API\nDESCRIPTION: Sample JSON response showing template versions list with pagination details.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-templates.rst#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"template\": {\n        \"createdAt\": \"Wed, 29 Aug 2018 23:31:11 UTC\",\n        \"description\": \"Template description\",\n        \"name\": \"template.name\",\n        \"versions\": [\n            {\n                \"createdAt\": \"Wed, 29 Aug 2018 23:31:21 UTC\",\n                \"engine\": \"handlebars\",\n                \"tag\": \"v0\",\n                \"comment\": \"Version comment\"\n            },\n            {\n                \"createdAt\": \"Wed, 29 Aug 2018 23:31:31 UTC\",\n                \"engine\": \"handlebars\",\n                \"tag\": \"v1\",\n                \"comment\": \"Version comment\"\n            },\n            {\n                \"createdAt\": \"Wed, 29 Aug 2018 23:31:41 UTC\",\n                \"engine\": \"handlebars\",\n                \"tag\": \"v2\",\n                \"comment\": \"Version comment\"\n            }\n        ]\n    },\n    \"paging\": {\n        \"first\": \"https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/templates/z4ujt7CiEeik0RJbspqxaQ/versions?limit=10\",\n        \"last\": \"https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/templates/z4ujt7CiEeik0RJbspqxaQ/versions?page=last&limit=10\",\n        \"next\": \"https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/templates/z4ujt7CiEeik0RJbspqxaQ/versions?page=next&p=v2&limit=10\",\n        \"prev\": \"https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/templates/z4ujt7CiEeik0RJbspqxaQ/versions?page=prev&p=v0&limit=10\"\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Updating Mailing List Member with C# RestSharp\nDESCRIPTION: This C# class uses the RestSharp library to send a PUT request to the Mailgun API for updating a mailing list member. It sets up the client with authentication and adds parameters for updating the member's subscription status and name.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/update-list-member.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class UpdateListMemberChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (UpdateListMember ().Content.ToString ());\n    }\n\n    public static IRestResponse UpdateListMember ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.Resource = \"lists/{list}/members/{member}\";\n        request.AddParameter (\"list\", \"LIST@YOUR_DOMAIN_NAME\",\n                              ParameterType.UrlSegment);\n        request.AddParameter (\"member\", \"bar@example.com\",\n                              ParameterType.UrlSegment);\n        request.AddParameter (\"subscribed\", false);\n        request.AddParameter (\"name\", \"Foo Bar\");\n        request.Method = Method.PUT;\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Listing All Monitored IP Addresses\nDESCRIPTION: GET endpoint to retrieve a list of all monitored IP addresses and their health statuses.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-blocklist-monitoring.rst#2025-04-21_snippet_2\n\nLANGUAGE: url\nCODE:\n```\nGET /v1/inboxready/ip_addresses\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"items\": [\n    {\n      \"ip\": \"127.0.0.1\",\n      \"ip_pool\": \"\",\n      \"description\": \"\",\n      \"state\": \"listed\",\n      \"listed\": [\n        {\n          \"list\":\"cbl.abuseat.org\",\n          \"name\":\"CBL\",\n          \"first_seen\":\"2022-06-24T04:19:43.212Z\",\n          \"last_seen\":\"2022-06-28T16:43:38.954Z\",\n          \"delist_requested_at\":\"0001-01-01T00:00:00Z\",\n          \"comments\":[\"https://www.spamhaus.org/query/ip/127.0.0.1\"]\n        }\n      ]\n    },\n    {\n      \"ip\": \"124.124.124.124\",\n      \"ip_pool\": \"\",\n      \"description\": \"\",\n      \"state\": \"healthy\",\n      \"listed\": []\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Canceling Bulk Email Verification Preview in Java\nDESCRIPTION: This Java code snippet shows how to cancel a bulk email verification preview using the Mailgun Java SDK. It creates a MailgunEmailVerificationApi instance and calls the deleteBulkVerificationPreview method.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/delete-bulk-preview.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v4.MailgunEmailVerificationApi;\nimport com.mailgun.client.MailgunClient;\nimport feign.Response;\n\n// ...\n\npublic Response cancelBulkPreview() {\n    MailgunEmailVerificationApi mailgunEmailVerificationApi = MailgunClient.config(API_KEY)\n            .createApi(MailgunEmailVerificationApi.class);\n\n    return mailgunEmailVerificationApi.deleteBulkVerificationPreview(LIST_NAME);\n}\n```\n\n----------------------------------------\n\nTITLE: Response Format for Spam Trap Count Query in JavaScript\nDESCRIPTION: This snippet shows the JSON response structure for a successful spam trap count query. It includes an array of daily counts for different trap types and a paging object for result navigation.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-spam-trap-monitoring.rst#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"items\": [\n    {\n      \"date\": \"2022-01-01\",\n      \"pristine\": 34,\n      \"recycled\": 258,\n      \"typo\": 178,\n      \"total\": 470\n    },\n    ...\n  ],\n  \"paging\": {\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Monitored Domains Endpoint in URL format\nDESCRIPTION: The GET endpoint to retrieve a list of monitored domains including their health statuses. This endpoint returns information about domains being monitored by Mailgun's Blocklist Monitoring service.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-domain-blocklist-monitoring.rst#2025-04-21_snippet_0\n\nLANGUAGE: url\nCODE:\n```\nGET /v1/monitoring/domains\n```\n\n----------------------------------------\n\nTITLE: Get Single Mailing List Endpoint\nDESCRIPTION: Endpoint to retrieve a single mailing list by its address.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-mailinglists.rst#2025-04-21_snippet_2\n\nLANGUAGE: url\nCODE:\n```\nGET /lists/<address>\n```\n\n----------------------------------------\n\nTITLE: Unknown Provider Response Example\nDESCRIPTION: JSON response example when provider lookup is disabled and no information is available.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-email-validation.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"address\": \"address@domain.com\",\n    \"is_disposable_address\": false,\n    \"is_role_address\": false,\n    \"reason\": [\"no_data\"],\n    \"result\": \"unknown\",\n    \"risk\": \"unknown\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Spam Complaint in Mailgun API\nDESCRIPTION: POST request to add an address to the complaints table. Requires a valid email address as a parameter.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-complaints.rst#2025-04-21_snippet_2\n\nLANGUAGE: url\nCODE:\n```\nPOST /<domain>/complaints\n```\n\n----------------------------------------\n\nTITLE: Listing Domain Keys using Java\nDESCRIPTION: Java implementation using Unirest HTTP library to fetch domain keys. Requires com.mashape.unirest dependencies.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/list-domain-keys.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mashape.unirest.http.HttpResponse;\nimport com.mashape.unirest.http.JsonNode;\nimport com.mashape.unirest.http.Unirest;\nimport com.mashape.unirest.http.exceptions.UnirestException;\n\npublic class MGSample {\n\n    // ...\n\n    public static JsonNode listDomainKeys() throws UnirestException {\n\n        HttpResponse<JsonNode> request = Unirest.get(\"https://api.mailgun.net/v4/domains/AUTHORITY_DOMAIN_NAME/keys\")\n            .basicAuth(\"api\", API_KEY)\n            .asJson();\n\n        return request.getBody();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Domains with Curl in Bash\nDESCRIPTION: This snippet demonstrates how to use curl in Bash to retrieve domains from the Mailgun API. It includes authentication with an API key and sets parameters for pagination.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-domains.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -G \\\n    https://api.mailgun.net/v3/domains \\\n    -d skip=0 \\\n    -d limit=3\n```\n\n----------------------------------------\n\nTITLE: Retrieving Domain Connection Settings with Python\nDESCRIPTION: This Python function uses the requests library to make a GET request to the Mailgun API for retrieving domain connection settings. The API key and domain name need to be replaced with actual values.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-connection.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef get_connection():\n    return requests.get(\n        \"https://api.mailgun.net/v3/domains/YOUR_DOMAIN_NAME/connection\",\n        auth=(\"api\", \"YOUR_API_KEY\"))\n```\n\n----------------------------------------\n\nTITLE: Creating Email Preview Test with PHP\nDESCRIPTION: This PHP function uses cURL to create an email preview test. It sends a POST request to the Mailgun API with subject and URL parameters. Note that the PHP SDK doesn't support this endpoint directly.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/email_preview/create-test.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Currently, the PHP SDK does not support the email preview endpoint.\n# Consider using the following php curl function.\nfunction create_email_previews() {\n  $ch = curl_init();\n\n  curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);\n  curl_setopt($ch, CURLOPT_USERPWD, 'api:PRIVATE_API_KEY');\n  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n\n  curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');\n  curl_setopt($ch, CURLOPT_URL, 'https://api.mailgun.net/v1/preview/tests');\n  curl_setopt($ch, CURLOPT_POSTFIELDS, array(\n      'subject'=> 'test',\n      'url'=> 'url',\n      )\n  );\n\n  $result = curl_exec($ch);\n  curl_close($ch);\n\n  return $result;\n}\n```\n\n----------------------------------------\n\nTITLE: Canceling Bulk Validation Job in PHP\nDESCRIPTION: This PHP function uses cURL to cancel a bulk email validation job. It sends a DELETE request to the Mailgun API v4 endpoint for address validation, as the PHP SDK doesn't support this operation directly.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/delete-bulk-validation.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Currently, the PHP SDK does not support the v4 Validations endpoint.\n# Consider using the following php curl function.\nfunction delete_bulk_validation() {\n  $ch = curl_init();\n\n  curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);\n  curl_setopt($ch, CURLOPT_USERPWD, 'api:PRIVATE_API_KEY');\n  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n\n  curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');\n  curl_setopt($ch, CURLOPT_URL, 'https://api.mailgun.net/v4/address/validate/bulk/LIST_NAME');\n  $result = curl_exec($ch);\n  curl_close($ch);\n\n  return $result;\n}\n```\n\n----------------------------------------\n\nTITLE: Canceling Mailing List Validation using Ruby\nDESCRIPTION: This Ruby method uses RestClient to send a DELETE request to the Mailgun API for canceling mailing list validation. It includes authentication with the API key in the URL.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/delete-list-validation.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef cancel_mailing_list_validation\n  RestClient.delete(\"https://api:YOUR_API_KEY\" \\\n                    \"@api.mailgun.net/v3/lists/LIST@YOUR_DOMAIN_NAME/validate\" \\\n                    \"/bar@example.com\")\nend\n```\n\n----------------------------------------\n\nTITLE: Validating Email Address with Mailgun API in Java\nDESCRIPTION: This Java code snippet shows how to validate an email address using the Mailgun API. It uses the MailgunEmailVerificationApi class to create a client and make a validation request.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-validate-deprecated.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v4.MailgunEmailVerificationApi;\nimport com.mailgun.model.verification.AddressValidationResponse\n\n// ...\n\npublic AddressValidationResponse validateEmail() {\n    MailgunEmailVerificationApi mailgunEmailVerificationApi = MailgunClient.config(API_KEY)\n        .createApi(MailgunEmailVerificationApi.class);\n\n    return mailgunEmailVerificationApi.validateAddress(\"foo@mailgun.com\");\n}\n```\n\n----------------------------------------\n\nTITLE: Get Domain Tracking Settings Endpoint\nDESCRIPTION: GET endpoint to retrieve domain tracking settings\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-domains.rst#2025-04-21_snippet_12\n\nLANGUAGE: url\nCODE:\n```\nGET /domains/<domain>/tracking\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Creating Template Version\nDESCRIPTION: Example JSON response when creating a new template version.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-templates.rst#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"template\": {\n      \"createdAt\": \"Wed, 29 Aug 2018 23:31:11 UTC\",\n      \"description\": \"template description\",\n      \"name\": \"template.name\",\n      \"version\": {\n          \"createdAt\": \"Wed, 29 Aug 2018 23:31:21 UTC\",\n          \"engine\": \"handlebars\",\n          \"tag\": \"v1.0.0\",\n          \"comment\": \"version comment\"\n      }\n  },\n  \"message\": \"new version of the template has been stored\"\n}\n```\n\n----------------------------------------\n\nTITLE: C# Mailgun Unsubscribe Implementation\nDESCRIPTION: C# implementation using RestSharp client to authenticate and retrieve unsubscribe data from Mailgun API.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-unsubscribes.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class GetUnsubscribesChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (GetUnsubscribes ().Content.ToString ());\n    }\n\n    public static IRestResponse GetUnsubscribes ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.AddParameter (\"domain\", \"YOUR_DOMAIN_NAME\", ParameterType.UrlSegment);\n        request.Resource = \"{domain}/unsubscribes\";\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Bounce via cURL Command\nDESCRIPTION: Simple cURL command to add a bounce record using Mailgun's REST API. Requires API key and domain name.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/add-bounce.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' \\\n    https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/bounces \\\n    -F address='bob@example.com'\n```\n\n----------------------------------------\n\nTITLE: Get Specific IP Endpoint\nDESCRIPTION: GET endpoint to retrieve information about a specific IP address.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-ips.rst#2025-04-21_snippet_2\n\nLANGUAGE: url\nCODE:\n```\nGET /ips/<ip>\n```\n\n----------------------------------------\n\nTITLE: Assign Domain IP Endpoint\nDESCRIPTION: POST endpoint to assign a dedicated IP to a specific domain.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-ips.rst#2025-04-21_snippet_4\n\nLANGUAGE: url\nCODE:\n```\nPOST /domains/<domain>/ips\n```\n\n----------------------------------------\n\nTITLE: Updating Mailbox Password Endpoint\nDESCRIPTION: PUT endpoint to update an existing mailbox's password.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-mailboxes.rst#2025-04-21_snippet_2\n\nLANGUAGE: url\nCODE:\n```\nPUT /<domain>/mailboxes/<mailbox>\n```\n\n----------------------------------------\n\nTITLE: Deleting an IP Pool\nDESCRIPTION: API endpoint for deleting an IP Pool, requiring replacement IP options if the pool is assigned to a domain.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-ip-pools.rst#2025-04-21_snippet_4\n\nLANGUAGE: url\nCODE:\n```\nDELETE /v1/ip_pools/{pool_id}\n```\n\n----------------------------------------\n\nTITLE: Removing a Domain from InboxReady\nDESCRIPTION: DELETE request to remove a domain from reputation monitoring. Requires the domain name as a parameter.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-inboxready-domains.rst#2025-04-21_snippet_4\n\nLANGUAGE: url\nCODE:\n```\nDELETE /v1/inboxready/domains\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Creating Template Metadata\nDESCRIPTION: Example JSON response when creating a new template without content.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-templates.rst#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"template\": {\n      \"createdAt\": \"Wed, 29 Aug 2018 23:31:13 UTC\",\n      \"description\": \"template description\",\n      \"name\": \"template.name\",\n  },\n  \"message\": \"template has been stored\"\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Mailing List Member with Python\nDESCRIPTION: This Python function removes a member from a Mailgun mailing list using the requests library. It sends a DELETE request to the Mailgun API endpoint with basic authentication using your API key.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/remove-list-member.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef remove_member():\n    return requests.delete(\n        (\"https://api.mailgun.net/v3/lists/LIST@YOUR_DOMAIN_NAME/members\"\n         \"/bar@example.com\"),\n        auth=('api', 'YOUR_API_KEY'))\n```\n\n----------------------------------------\n\nTITLE: Seed Lists Retrieval Response (JavaScript)\nDESCRIPTION: Example JSON response when retrieving all seed lists. The response includes an array of seed list objects, pagination information, and the total count of seed lists available.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-inbox-placement.rst#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"items\": [\n    {\n      \"kid\": \"123456789123456789123456\",\n      \"created_at\": \"2021-08-02T23:10:17.915Z\",\n      \"updated_at\": \"2021-08-03T17:26:55.629Z\",\n      \"last_result_at\": \"2021-08-03T17:26:55.629Z\",\n      \"target_email\": \"ibp-12345678-1234-1234-1234-123456789012@domain.com\",\n      \"sending_domains\": [\n        \"mydomain.com\"\n      ],\n      \"has_results\": true,\n      \"name\": \"Inbox Placement Test\",\n      \"seed_filter\": \".*\",\n      \"mailing_list\": \"ibp-12345678-1234-1234-1234-123456789012@domain.com,some@where.com\",\n      \"delivery_stats\": {\n        \"all\": {\n          \"delivered\": 7,\n          \"missing\": 0,\n          \"pending\": 0,\n          \"spam\": 2,\n          \"inbox\": 5,\n          \"total\": 7,\n          \"provider\": \"all\"\n        }\n      },\n      \"results\": [\n        {\n          \"result_id\": \"12345678-1234-1234-1234-123456789012\",\n          \"subject\": \"IBP Test - 1\",\n          \"sender\": \"generated@yourdomain.com\",\n          \"delivery_stats\": {\n            \"all\": {\n              \"delivered\": 7,\n              \"missing\": 0,\n              \"pending\": 0,\n              \"spam\": 2,\n              \"inbox\": 5,\n              \"total\": 7,\n              \"provider\": \"all\",\n              \"categories\": {}\n            }\n          }\n        }\n      ]\n    }\n  ],\n  \"paging\": {\n    \"first\": \"http://domain.com/v4/inbox/seedlists?ascending=0&limit=1\",\n    \"last\": \"http://domain.com/v4/inbox/seedlists?ascending=1&limit=1\",\n    \"next\": \"http://domain.com/v4/inbox/seedlists?ascending=0&cursor=123987123981723987873497&limit=1\",\n    \"previous\": \"http://domain.com/v4/inbox/seedlists?ascending=1&cursor=123987123981723987873487&limit=1\"\n  },\n  \"total\": 32\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Inbox Placement Test with cURL in Bash\nDESCRIPTION: This snippet demonstrates how to create an inbox placement test using cURL in Bash. It makes a POST request to the Mailgun API with the required parameters including sender email, subject, and HTML content.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/create-inbox-placement-test.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://api.mailgun.net/v4/inbox/tests \\\n  --data-raw '{\n    \"from\": \"user@domain.com\",\n    \"subject\": \"testSubject\",\n    \"html\": \"<html>HTML version of the body</html>\"\n  }\n  ' \\\n  --user 'api:<YOUR_API_KEY>'\n```\n\n----------------------------------------\n\nTITLE: Update Unsubscribe Tracking Settings Endpoint\nDESCRIPTION: PUT endpoint to update unsubscribe tracking settings\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-domains.rst#2025-04-21_snippet_15\n\nLANGUAGE: url\nCODE:\n```\nPUT /domains/<domain>/tracking/unsubscribe\n```\n\n----------------------------------------\n\nTITLE: Java Mailgun Statistics Integration\nDESCRIPTION: Java implementation using Mailgun SDK to fetch domain statistics with custom options for event types, resolution, and duration\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-stats.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport java.util.List;\n\nimport com.mailgun.api.v3.MailgunStatisticsApi;\nimport com.mailgun.enums.Duration;\nimport com.mailgun.enums.ResolutionPeriod;\nimport com.mailgun.enums.StatsEventType;\nimport com.mailgun.model.StatisticsOptions;\nimport com.mailgun.model.stats.StatsResult;\n\n// ...\n\npublic StatsResult getStats() {\n    MailgunStatisticsApi mailgunStatisticsApi = MailgunClient.config(API_KEY)\n        .createApi(MailgunStatisticsApi.class);\n\n    StatisticsOptions statsOptions = StatisticsOptions.builder()\n        .event(List.of(StatsEventType.ACCEPTED, StatsEventType.DELIVERED))\n        .resolution(ResolutionPeriod.MONTH)\n        .duration(3, Duration.MONTH)\n        .build();\n\n    return mailgunStatisticsApi.getDomainStats(YOUR_DOMAIN_NAME, statsOptions);\n}\n```\n\n----------------------------------------\n\nTITLE: Payment Required Response for Account Plan Limitation in JSON\nDESCRIPTION: This is a sample JSON response with status code 402 Payment Required, indicating that the account's billing plan does not include HTTPS link tracking and needs to be upgraded.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/secure-tracking.rst#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"message\":  \"upgrade your account to enable this feature\",\n}\n```\n\n----------------------------------------\n\nTITLE: Canceling Bulk Email Verification Preview using cURL\nDESCRIPTION: This snippet demonstrates how to cancel a bulk email verification preview using a cURL command. It sends a DELETE request to the Mailgun API v4 endpoint with basic authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/delete-bulk-preview.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -X DELETE \\\n    https://api.mailgun.net/v4/address/validate/preview/LIST_NAME\n```\n\n----------------------------------------\n\nTITLE: Retrieving Domain Connection Settings with C#\nDESCRIPTION: This C# class uses the RestSharp library to make a GET request to the Mailgun API for retrieving domain connection settings. It includes a Main method for demonstration. The API key and domain name need to be replaced with actual values.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-connection.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class GetConnectionChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (GetConnection ().Content.ToString ());\n    }\n\n    public static IRestResponse GetConnection ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.AddParameter (\"domain\", \"YOUR_DOMAIN_NAME\", ParameterType.UrlSegment);\n        request.Resource = \"domains/{domain}/connection\";\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Unassigning Domain IP with Java\nDESCRIPTION: Uses the Mailgun Java SDK to unassign an IP address from a domain. Implements the MailgunIPsApi interface to make a DELETE request to the Mailgun API.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/remove-domain-ip.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.MailgunIPsApi;\nimport com.mailgun.model.ResponseWithMessage\n\n// ...\n\npublic ResponseWithMessage deleteDomainIP() {\n    MailgunIPsApi mailgunIPsApi = MailgunClient.config(API_KEY).createApi(MailgunIPsApi.class);\n\n    return mailgunIPsApi.unassignIPFromDomain(YOUR_DOMAIN_NAME, \"127.0.0.1\");\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Domain Credentials in C#\nDESCRIPTION: Creates domain credentials using RestSharp library in C# to authenticate and make a POST request to the Mailgun API.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/create-credentials.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class CreateCredentialsChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (CreateCredentials ().Content.ToString ());\n    }\n\n    public static IRestResponse CreateCredentials ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.AddParameter (\"domain\", \"YOUR_DOMAIN_NAME\", ParameterType.UrlSegment);\n        request.Resource = \"domains/{domain}/credentials\";\n        request.AddParameter (\"login\", \"alice@YOUR_DOMAIN_NAME\");\n        request.AddParameter (\"password\", \"secret\");\n        request.Method = Method.POST;\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Get Domain Tracking Settings Response\nDESCRIPTION: Sample JSON response showing tracking settings for a domain.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-domains.rst#2025-04-21_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\n{\n \"tracking\": {\n   \"click\": {\n     \"active\": false\n   },\n   \"open\": {\n     \"active\": false\n   },\n   \"unsubscribe\": {\n     \"active\": false,\n     \"html_footer\": \"\\n<br>\\n<p><a href=\\\"%unsubscribe_url%\\\">unsubscribe</a></p>\\n\",\n     \"text_footer\": \"\\n\\nTo unsubscribe click: <%unsubscribe_url%>\\n\\n\"\n   }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Listing Templates\nDESCRIPTION: Example JSON response when retrieving a list of templates.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-templates.rst#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"items\": [\n      {\n          \"createdAt\": \"Wed, 29 Aug 2018 23:31:15 UTC\",\n          \"description\": \"Template description\",\n          \"name\": \"template.0\",\n      },\n      {\n          \"createdAt\": \"Wed, 29 Aug 2018 23:31:18 UTC\",\n          \"description\": \"Template description\",\n          \"name\": \"template.1\"\n      },\n      {\n          \"createdAt\": \"Wed, 29 Aug 2018 23:31:21 UTC\",\n          \"description\": \"Template description\",\n          \"name\": \"template.2\"\n      }\n  ],\n  \"paging\": {\n      \"first\": \"https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/templates?limit=10\",\n      \"last\": \"https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/templates?page=last&limit=10\",\n      \"next\": \"https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/templates?page=next&p=template.2&limit=10\",\n      \"prev\": \"https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/templates?page=prev&p=template.0&limit=10\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Mailgun Unsubscribe Integration\nDESCRIPTION: JavaScript/Node.js implementation using the mailgun.js library to fetch unsubscribe data asynchronously.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-unsubscribes.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n(async () => {\n  try {\n    const unsubscribes = await client.suppressions.list(DOMAIN, 'unsubscribes');\n    console.log('unsubscribes', unsubscribes);\n  } catch (error) {\n    console.error(error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Inbox Placement Results with cURL in Bash\nDESCRIPTION: This snippet demonstrates how to use cURL in Bash to make a GET request to the Mailgun Inbox Placement API. It includes basic authentication with an API key.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-results-attributes.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -G \\\n    https://api.mailgun.net/v4/inbox/results/a\n```\n\n----------------------------------------\n\nTITLE: Response Format for Domain Listing\nDESCRIPTION: JSON response structure when retrieving the list of registered domains. Includes domain details and pagination information for managing large result sets.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-inboxready-domains.rst#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"items\": [\n    {\n      \"ID\": \"<ID>\",\n      \"created_at\": 123456789,\n      \"name\": \"example.com\",\n      \"verified\": {\n        \"verified_at\": 123456789,\n        \"status\": \"inbox_ready\"\n      },\n      \"services\": {\n        \"spam_trap_monitoring\": true,\n        \"domain_blocklist_monitoring\": true\n      },\n      \"txt_record\": \"<HASHED TXT RECORD KEY>\"\n    },\n    ...\n  ],\n  \"paging\": {\n    \"previous\": \"<URL>\",\n    \"first\": \"<URL>\",\n    \"next\": \"<URL>\",\n    \"last\": \"<URL>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Canceling Mailing List Validation using C#\nDESCRIPTION: This C# class uses RestSharp to send a DELETE request to the Mailgun API for canceling mailing list validation. It includes authentication and returns the API response.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/delete-list-validation.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class DeleteMailingListValidationChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (CancelMailingListValidation ().Content.ToString ());\n    }\n\n    public static IRestResponse CancelMailingListValidation()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.Resource = \"lists/{list}/validate}\";\n        request.AddParameter (\"list\", \"LIST@YOUR_DOMAIN_NAME\",\n                              ParameterType.UrlSegment);\n        request.Method = Method.DELETE;\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Subaccounts (GET) in Mailgun API\nDESCRIPTION: This endpoint retrieves a list of subaccounts. It supports pagination, sorting, and filtering by enabled status. The response includes details of subaccounts linked to the primary account.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/subaccounts.rst#2025-04-21_snippet_0\n\nLANGUAGE: url\nCODE:\n```\nGET /v5/accounts/subaccounts\n```\n\n----------------------------------------\n\nTITLE: Fetching Single Bounce Event in Mailgun API\nDESCRIPTION: GET endpoint to retrieve a single bounce event for a specific email address. Useful to check if a given email address has bounced before.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-bounces.rst#2025-04-21_snippet_1\n\nLANGUAGE: url\nCODE:\n```\nGET /<domain>/bounces/<address>\n```\n\n----------------------------------------\n\nTITLE: Fetching Single Unsubscribe in Mailgun API\nDESCRIPTION: Demonstrates the GET request URL for retrieving a single unsubscribe record by email address. Useful for checking if a specific email has unsubscribed.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-suppressions.rst#2025-04-21_snippet_13\n\nLANGUAGE: url\nCODE:\n```\nGET /<domain>/unsubscribes/<address>\n```\n\n----------------------------------------\n\nTITLE: Create List Verification Response\nDESCRIPTION: Response received when initiating a list verification job.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-mailinglists.rst#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"id\": \"listname@yourdomain.com\",\n    \"message\": \"The validation job was submitted.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing a Route by ID in Mailgun\nDESCRIPTION: Shows how to retrieve a specific route by its ID using the Mailgun API.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/user_manual.rst#2025-04-21_snippet_38\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: samples/get-route.rst\n```\n\n----------------------------------------\n\nTITLE: Activating Domain Keys with RestClient in Ruby\nDESCRIPTION: Demonstrates how to activate a domain key using the RestClient library in Ruby. Performs a PUT request with the API key embedded in the URL for authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/activate-domain-key.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef activate_domain_key\n   RestClient.put(\"https://api:YOUR_API_KEY\"\\\n                  \"@api.mailgun.net/v4/domains/AUTHORITY_DOMAIN_NAME/keys/SELECTOR/activate\")\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Domain to Whitelist with cURL in Bash\nDESCRIPTION: Example of using cURL to add a domain to the Mailgun whitelist. This request adds 'example.com' to the whitelist using Mailgun's API.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/add-whitelist.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' \\\n    https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/whitelists \\\n    -F domain='example.com'\n```\n\n----------------------------------------\n\nTITLE: Single Unsubscribe Response in Mailgun API\nDESCRIPTION: Shows the expected JSON response structure when fetching a single unsubscribe record. Includes the unsubscribe details or a 404 error if not found.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-suppressions.rst#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n200\n{\n  \"address\": \"alice@example.com\",\n  \"tag\": \"*\",\n  \"created_at\": \"Fri, 21 Oct 2011 11:02:55 GMT\"\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n404\n{\n  \"message\": \"Address not found in unsubscribers table\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Mailboxes using C# with RestSharp\nDESCRIPTION: This C# code snippet uses the RestSharp library to make a GET request to the Mailgun API for retrieving mailboxes. It sets up a RestClient with basic authentication, constructs the request with the domain as a URL segment, and executes the request.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-mailboxes.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class GetMailboxesChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (GetMailboxes ().Content.ToString ());\n    }\n\n    public static IRestResponse GetMailboxes ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.AddParameter (\"domain\", \"YOUR_DOMAIN_NAME\", ParameterType.UrlSegment);\n        request.Resource = \"{domain}/mailboxes\";\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Mailbox using Go (Deprecated)\nDESCRIPTION: This comment indicates that the mailbox creation feature is deprecated and not supported in the Go library for Mailgun.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/create-mailbox.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// This feature is deprecated and not supported in the golang library\n```\n\n----------------------------------------\n\nTITLE: Retrieving Tag Statistics via cURL\nDESCRIPTION: Makes a GET request to the Mailgun API to retrieve tag statistics aggregated by providers. Requires API key authentication and specific domain and tag parameters.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/tags/tag-providers-aggregation.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -v -s --user 'api:YOUR_API_KEY' \\\nhttps://api.mailgun.net/v3/<domain>/tags/<tag>/stats/aggregates/providers\n```\n\n----------------------------------------\n\nTITLE: Deleting Inbox Placement Test in Ruby\nDESCRIPTION: This Ruby function uses the RestClient library to delete an inbox placement test. It sends a DELETE request to the Mailgun API with basic authentication included in the URL.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/delete-seed-list.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef delete_inbox_placement_test\n  RestClient.delete(\"https://api:YOUR_API_KEY\"\\\n                    \"@api.mailgun.net/v4/inbox/seedlists/TARGET_EMAIL\"\\\n                    {|response, request, result| response }\nend\n```\n\n----------------------------------------\n\nTITLE: Deleting Inbox Placement Test in Python\nDESCRIPTION: This Python function uses the requests library to delete an inbox placement test. It sends a DELETE request to the Mailgun API with basic authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/delete-seed-list.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef delete_inbox_placement_test():\n    return requests.delete(\n        \"https://api.mailgun.net/v4/inbox/seedlists/TARGET_EMAIL\",\n        auth=('api', 'YOUR_API_KEY'))\n```\n\n----------------------------------------\n\nTITLE: POST Create Domain Key Endpoint\nDESCRIPTION: Creates a new domain key with specified signing domain and selector. Supports importing existing PEM keys.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-domains.rst#2025-04-21_snippet_21\n\nLANGUAGE: url\nCODE:\n```\nPOST /v1/dkim/keys\n```\n\n----------------------------------------\n\nTITLE: Delete Domain Credentials Endpoint\nDESCRIPTION: DELETE endpoint to remove SMTP credentials\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-domains.rst#2025-04-21_snippet_9\n\nLANGUAGE: url\nCODE:\n```\nDELETE /domains/<domain>/credentials/<login>\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Retrieving Template Metadata\nDESCRIPTION: Example JSON response when retrieving template metadata.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-templates.rst#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"template\": {\n      \"createdAt\": \"Wed, 29 Aug 2018 23:31:13 UTC\",\n      \"description\": \"template description\",\n      \"name\": \"template.name\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Domain Keys using C#\nDESCRIPTION: C# implementation using RestSharp to fetch domain keys. Requires RestSharp package and System dependencies.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/list-domain-keys.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class InboxPlacementTests\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (ListDomainKeys ().Content.ToString ());\n    }\n\n    public static IRestResponse ListDomainKeys ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v4\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.Resource = \"domains/AUTHORITY_DOMAIN_NAME/keys\";\n        request.Method = Method.GET;\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Seed List Attribute using cURL\nDESCRIPTION: Basic cURL command to fetch a seed list attribute from Mailgun's API. Requires API key authentication using Basic Auth.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-seed-list-attribute.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -G \\\n    https://api.mailgun.net/v4/inbox/seedlists/a/ATTRIBUTE\n```\n\n----------------------------------------\n\nTITLE: Private Email Validation with Mailgun API\nDESCRIPTION: This private endpoint verifies email addresses based on defined checks. It's only accessible with a private API key and not subject to daily usage limits.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-email-validation-deprecated.rst#2025-04-21_snippet_2\n\nLANGUAGE: url\nCODE:\n```\nGET /address/private/validate\n```\n\n----------------------------------------\n\nTITLE: POST Create Bulk Validation Job Endpoint\nDESCRIPTION: Endpoint to create a new bulk validation job with a unique list_id. Limited to 10 parallel jobs.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-email-validation.rst#2025-04-21_snippet_9\n\nLANGUAGE: url\nCODE:\n```\nPOST /v4/address/validate/bulk/<list_id>\n```\n\n----------------------------------------\n\nTITLE: Single Spam Complaint Response in Mailgun API\nDESCRIPTION: Example JSON response for retrieving a single spam complaint. Includes complaint details such as count, creation date, and email address.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-complaints.rst#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"complaint\": {\n      \"count\": 2,\n      \"created_at\": \"Tue, 15 Nov 2011 08:25:11 GMT\",\n      \"address\": \"baz@example.com\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Events API Response in JavaScript\nDESCRIPTION: Example JSON response from the Mailgun Events API showing event details including timestamp, envelope information, message headers, and paging data. Demonstrates the structure of event data returned by the API.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/quickstart-events.rst#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"items\": [\n    {\n      \"tags\": [],\n      \"timestamp\": 1376325780.160809,\n      \"envelope\": {\n        \"sender\": \"me@samples.mailgun.org\",\n        \"transport\": \"\"\n      },\n      \"event\": \"accepted\",\n      \"campaigns\": [],\n      \"user-variables\": {},\n      \"flags\": {\n        \"is-authenticated\": true,\n        \"is-test-mode\": false\n      },\n      \"message\": {\n        \"headers\": {\n          \"to\": \"user@example.com\",\n          \"message-id\": \"20130812164300.28108.52546@samples.mailgun.org\",\n          \"from\": \"Excited User <me@samples.mailgun.org>\",\n          \"subject\": \"Hello\"\n        },\n        \"attachments\": [],\n        \"recipients\": [\n          \"user@example.com\"\n        ],\n        \"size\": 69\n      },\n      \"recipient\": \"user@example.com\",\n      \"method\": \"http\"\n    }\n  ],\n  \"paging\": {\n    \"next\": \"https://api.mailgun.net/v3/samples.mailgun.org/events/W3siY...\",\n    \"previous\": \"https://api.mailgun.net/v3/samples.mailgun.org/events/Lkawm...\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Mailing Lists Endpoint\nDESCRIPTION: Endpoint to paginate over mailing lists under your account. Accepts an optional limit parameter defaulting to 100 records.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-mailinglists.rst#2025-04-21_snippet_1\n\nLANGUAGE: url\nCODE:\n```\nGET /lists/pages\n```\n\n----------------------------------------\n\nTITLE: Get Single Seed List Endpoint\nDESCRIPTION: API endpoint to retrieve a specific seed list by email address.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-inbox-placement.rst#2025-04-21_snippet_6\n\nLANGUAGE: url\nCODE:\n```\nGET /v4/inbox/seedlists/ibp-seedlist-address@domain.net\n```\n\n----------------------------------------\n\nTITLE: POST Import Whitelist Records Endpoint\nDESCRIPTION: API endpoint for importing multiple whitelist records via CSV file.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-suppressions.rst#2025-04-21_snippet_32\n\nLANGUAGE: url\nCODE:\n```\nPOST /<domain>/whitelists/import, Content-Type: multipart/form-data\n```\n\n----------------------------------------\n\nTITLE: Listing Mailing Lists with Go\nDESCRIPTION: This Go function uses the Mailgun Go SDK to retrieve mailing lists. It includes pagination handling and error checking. The function requires the domain and API key as parameters.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-mailing-lists.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/mailgun/mailgun-go/v3\"\n    \"time\"\n)\n\nfunc ListMailingLists(domain, apiKey string) ([]mailgun.MailingList, error) {\n    mg := mailgun.NewMailgun(domain, apiKey)\n    it := mg.ListMailingLists(nil)\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    var page, result []mailgun.MailingList\n    for it.Next(ctx, &page) {\n        result = append(result, page...)\n    }\n\n    if it.Err() != nil {\n        return nil, it.Err()\n    }\n    return result, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Domain IP with PHP Mailgun Client\nDESCRIPTION: This PHP snippet shows how to add an IP address to a Mailgun domain using the Mailgun PHP SDK. It initializes the Mailgun client with the API key and hostname, then calls the assign method to add the IP to the domain.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/add-domain-ip.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Include the Autoloader (see \"Libraries\" for install instructions)\nrequire 'vendor/autoload.php';\nuse Mailgun\\Mailgun;\n\n# Instantiate the client.\n$mgClient = Mailgun::create('PRIVATE_API_KEY', 'https://API_HOSTNAME');\n$domain   = 'YOUR_DOMAIN_NAME';\n$ip       = '127.0.0.1';\n\n# Issue the call to the client.\n$result = $mgClient->ips()->assign($domain, $ip);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Seed List Filters with cURL\nDESCRIPTION: This snippet demonstrates how to retrieve seed list filters using a cURL command. It makes a GET request to the Mailgun API endpoint for seed list filters, using basic authentication with an API key.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-seed-list-filters.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -G \\\n    https://api.mailgun.net/v4/inbox/seedlists/_filters\n```\n\n----------------------------------------\n\nTITLE: Updating an IP Pool\nDESCRIPTION: API endpoint for updating an existing IP Pool's name, description, or IP assignments.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-ip-pools.rst#2025-04-21_snippet_3\n\nLANGUAGE: url\nCODE:\n```\nPATCH /v1/ip_pools/{pool_id}\n```\n\n----------------------------------------\n\nTITLE: Creating Email Alert Settings\nDESCRIPTION: JSON payload structure for configuring email-based alerts with recipient addresses\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-deliverability-alerts.rst#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"settings\": {\n    \"emails\": [\"recipient-a@example.com\", \"recipient-b@example.com\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Update Mailbox Password using Go (Deprecated)\nDESCRIPTION: This feature is deprecated and not supported in the Go library.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/change-mailbox-password.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// This feature is deprecated and not supported in the golang library\n```\n\n----------------------------------------\n\nTITLE: Deleting Inbox Placement Test in C#\nDESCRIPTION: This C# class uses the RestSharp library to delete an inbox placement test. It sends a DELETE request to the Mailgun API with basic authentication. The class includes a Main method for demonstration purposes.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/delete-seed-list.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class InboxPlacementTest\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (GetInboxPlacementTest().Content.ToString());\n    }\n\n    public static IRestResponse DeleteInboxPlacementTest()\n    {\n        RestClient client = new RestClient();\n        client.BaseUrl = new Uri(\"https://api.mailgun.net/v4\");\n        client.Authenticator =\n            new HttpBasicAuthenticator(\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest(Method.DELETE);\n        request.AddParameter (\"target_email\", \"TARGET_EMAIL\", ParameterType.UrlSegment);\n        request.Resource = \"/inbox/seedlists/{target_email}\";\n        return client.Execute(request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Mailgun Event Logs with Pagination (C#)\nDESCRIPTION: This C# class demonstrates how to retrieve event logs with pagination using the RestSharp library. It includes setting up the REST client with authentication and executing the request.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/events-pagination.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class EventsPaginationChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (EventsPagination ().Content.ToString ());\n    }\n\n    public static IRestResponse EventsPagination ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.AddParameter (\"domain\", \"YOUR_DOMAIN_NAME\", ParameterType.UrlSegment);\n        request.Resource = \"{domain}/events/W3siYSI6IGZhbHNlLC\";\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Get Bulk Validation Previews Response\nDESCRIPTION: Sample JSON response showing the structure of bulk validation preview results. Contains validation statistics including deliverability scores and risk assessments for multiple preview requests.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-email-validation.rst#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"previews\": [\n    {\n      \"id\": \"test_500\",\n      \"valid\": true,\n      \"status\": \"preview_complete\",\n      \"quantity\": 8,\n      \"created_at\": 1590080191,\n      \"summary\": {\n        \"result\": {\n          \"deliverable\": 37.5,\n          \"do_not_send\": 0,\n          \"undeliverable\": 23,\n          \"catch_all\": 2,\n          \"unknown\": 37.5\n        },\n        \"risk\": {\n          \"high\": 25,\n          \"low\": 25,\n          \"medium\": 12.5,\n          \"unknown\": 37.5\n        }\n      }\n    },\n    {\n      \"id\": \"test_501\",\n      \"valid\": true,\n      \"status\": \"preview_complete\",\n      \"quantity\": 8,\n      \"created_at\": 1590155015,\n      \"summary\": {\n        \"result\": {\n          \"deliverable\": 37.5,\n          \"do_not_send\": 0,\n          \"undeliverable\": 23,\n          \"catch_all\": 2,\n          \"unknown\": 37.5\n        },\n        \"risk\": {\n          \"high\": 25,\n          \"low\": 25,\n          \"medium\": 12.5,\n          \"unknown\": 37.5\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for IP Pool Linking\nDESCRIPTION: Example JSON response after successfully linking an IP pool to a domain.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-ip-pools.rst#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n{ \"body\": { \"message\": \"success\" }, \"status\": 200 }\n```\n\n----------------------------------------\n\nTITLE: Create Domain Key Response\nDESCRIPTION: Sample JSON responses when creating a domain key, including success and error cases.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-domains.rst#2025-04-21_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\n{\n   \"dns_record\": {\n      \"cached\": [],\n      \"is_active\": false,\n      \"name\": \"s1._domainkey.example.com\",\n      \"record_type\": \"TXT\",\n      \"valid\": \"unknown\",\n      \"value\": \"k=rsa; p=public_key\"\n   },\n   \"selector\": \"s1\",\n   \"signing_domain\": \"example.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Domain Keys using Ruby\nDESCRIPTION: Ruby implementation using RestClient to fetch domain keys. Requires rest-client gem.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/list-domain-keys.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef get_domain_keys\n   RestClient.get(\"https://api:YOUR_API_KEY\"\\\n                  \"@api.mailgun.net/v4/domains/AUTHORITY_DOMAIN_NAME/keys\")\nend\n```\n\n----------------------------------------\n\nTITLE: Parsing Multiple Email Addresses with Mailgun API\nDESCRIPTION: This endpoint parses a delimiter-separated list of email addresses into valid parsed addresses and unparsable portions. It can perform syntax checks and optionally DNS and ESP-specific verification.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-email-validation-deprecated.rst#2025-04-21_snippet_1\n\nLANGUAGE: url\nCODE:\n```\nGET /address/parse\n```\n\n----------------------------------------\n\nTITLE: Fetching and Paginating Mailgun Event Logs (PHP)\nDESCRIPTION: This PHP snippet shows how to retrieve event logs and paginate through results using the Mailgun PHP SDK. It includes setting up the client, specifying query parameters, and requesting the next page of results.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/events-pagination.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Include the Autoloader (see \"Libraries\" for install instructions)\nrequire 'vendor/autoload.php';\nuse Mailgun\\Mailgun;\n\n# Instantiate the client.\n$mgClient    = Mailgun::create('PRIVATE_API_KEY', 'https://API_HOSTNAME');\n$domain      = 'YOUR_DOMAIN_NAME';\n$queryString = array(\n    'begin'        => 'Wed, 1 Jan 2020 09:00:00 -0000',\n    'ascending'    => 'yes',\n    'limit'        =>  25,\n    'pretty'       => 'yes'\n);\n\n# Issue the call to the client.\n$result = $mgClient->events()->get($domain, $queryString);\n\n# Request the next page.\n$nextPage = $mgClient->events()->nextPage($result);\n```\n\n----------------------------------------\n\nTITLE: Domain Deletion Response\nDESCRIPTION: Sample JSON response when deleting a domain.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-domains.rst#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"message\": \"Domain has been deleted\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Deleting a Tag\nDESCRIPTION: Example JSON response when deleting a tag, confirming successful deletion.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-tags.rst#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"message\": \"Tag deleted\"\n}\n```\n\n----------------------------------------\n\nTITLE: Failed Event JSON Structure (Permanent)\nDESCRIPTION: Example of a JSON response for a permanently failed message delivery, including failure reason and delivery status.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-events.rst#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"event\": \"failed\",\n  \"id\": \"pl271FzxTTmGRW8Uj3dUWw\",\n  \"timestamp\": 1529701969.818328,\n  \"log-level\": \"error\",\n  \"severity\": \"permanent\",\n  \"reason\": \"suppress-bounce\",\n  \"envelope\": {\n    \"sender\": \"john@example.org\",\n    \"transport\": \"smtp\",\n    \"targets\": \"joan@example.com\"\n  },\n  \"flags\": {\n    \"is-routed\": false,\n    \"is-authenticated\": true,\n    \"is-system-test\": false,\n    \"is-test-mode\": false\n  },\n  \"delivery-status\": {\n    \"attempt-no\": 1,\n    \"message\": \"\",\n    \"code\": 605,\n    \"description\": \"Not delivering to previously bounced address\",\n    \"session-seconds\": 0.0\n  },\n  \"message\": {\n    \"headers\": {\n      \"to\": \"joan@example.com\",\n      \"message-id\": \"20180622211249.1.2A6098970A380E12@example.org\",\n      \"from\": \"john@example.org\",\n      \"subject\": \"Test Subject\"\n    },\n    \"attachments\": [],\n    \"size\": 867\n  },\n  \"storage\": {\n    \"url\": \"https://se.api.mailgun.net/v3/domains/example.org/messages/eyJwI...\",\n    \"key\": \"eyJwI...\"\n  },\n  \"recipient\": \"slava@mailgun.com\",\n  \"recipient-domain\": \"mailgun.com\",\n  \"campaigns\": [],\n  \"tags\": [],\n  \"user-variables\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Rate Limit Response\nDESCRIPTION: Sample JSON response for rate limit status.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-domains.rst#2025-04-21_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"retry-seconds\": 60\n}\n```\n\n----------------------------------------\n\nTITLE: Global Unsubscribe Response Example\nDESCRIPTION: Example JSON response when unsubscribing an address from all domain emails.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-unsubscribes.rst#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"message\": \"Address has been added to the unsubscribes table\",\n    \"address\": \"bob@example.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using the 'equal' Helper in Handlebars Templates (JavaScript)\nDESCRIPTION: Demonstrates the 'equal' helper in Handlebars which renders a block if the string versions of both arguments are equal, with examples comparing various values.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/user_manual.rst#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n<p>{{#equal foo \"bar\"}}foo is bar{{/equal}}</p>\n<p>{{#equal foo baz}}foo is the same as baz{{/equal}}</p>\n<p>{{#equal nb 0}}nothing{{/equal}}</p>\n<p>{{#equal nb 1}}there is one{{/equal}}</p>\n<p>{{#equal nb \"1\"}}everything is stringified before comparison{{/equal}}</p>\n```\n\n----------------------------------------\n\nTITLE: Fetch Mailgun Stats using cURL\nDESCRIPTION: Command line example using cURL to retrieve domain statistics from Mailgun API with basic authentication\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-stats.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -G \\\n    https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/stats/total \\\n    -d event='accepted' \\\n    -d event='delivered' \\\n    -d event='failed' \\\n    -d duration='1m'\n```\n\n----------------------------------------\n\nTITLE: Sample Log Entry Response Format\nDESCRIPTION: Example JSON response showing log entry structure with total count and items array containing message details like delivery status, timestamp, type, message content and ID.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-logs.rst#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"total_count\": 1244,\n    \"items\": [\n        {\n            \"hap\": \"delivered\",\n            \"created_at\": \"Wed, 15 Feb 2012 12:35:39 GMT\",\n            \"type\": \"info\",\n            \"message\": \"Delivered:  me@samples.mailgun.org → alice@example.com 'Hello'\",\n            \"message_id\": \"20120215123539.7267.56179@samples.mailgun.org\"\n        }\n    ]\n  }\n```\n\n----------------------------------------\n\nTITLE: Create Domain Credentials Endpoint\nDESCRIPTION: POST endpoint to create new SMTP credentials for a domain\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-domains.rst#2025-04-21_snippet_7\n\nLANGUAGE: url\nCODE:\n```\nPOST /domains/<domain>/credentials\n```\n\n----------------------------------------\n\nTITLE: GET Bulk Validation Jobs Endpoint\nDESCRIPTION: Endpoint to retrieve a list of all bulk validation jobs\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-email-validation.rst#2025-04-21_snippet_8\n\nLANGUAGE: url\nCODE:\n```\nGET /v4/address/validate/bulk\n```\n\n----------------------------------------\n\nTITLE: Deleting Tags Using Java Mailgun Client\nDESCRIPTION: This Java example shows how to delete a tag using the Mailgun Java SDK. It creates a MailgunTagsApi instance and calls the deleteTag method with the domain name and tag name as parameters.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/tags/delete-tag.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.MailgunTagsApi;\nimport com.mailgun.model.ResponseWithMessage;\n\n// ...\n\npublic ResponseWithMessage deleteTag() {\n    MailgunTagsApi mailgunTagsApi = MailgunClient.config(API_KEY)\n        .createApi(MailgunTagsApi.class);\n\n    return mailgunTagsApi.deleteTag(YOUR_DOMAIN_NAME, TAG_NAME);\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Mailgun Credentials via cURL\nDESCRIPTION: Simple cURL command to retrieve domain credentials using basic authentication with API key.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-credentials.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -G \\\n    https://api.mailgun.net/v3/domains/YOUR_DOMAIN_NAME/credentials\n```\n\n----------------------------------------\n\nTITLE: Sample Response for IP Pool Unlinking\nDESCRIPTION: Example JSON response after successfully unlinking an IP pool from a domain.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-ip-pools.rst#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n{ \"body\": { \"message\": \"success\" }, \"status\": 200 }\n```\n\n----------------------------------------\n\nTITLE: Delete Domain Endpoint\nDESCRIPTION: DELETE endpoint to remove a domain from account\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-domains.rst#2025-04-21_snippet_6\n\nLANGUAGE: url\nCODE:\n```\nDELETE /domains/<domain>\n```\n\n----------------------------------------\n\nTITLE: Retrieving DKIM Keys with Python/Requests\nDESCRIPTION: A Python function using the Requests library to get DKIM keys from the Mailgun API. This simple function performs a GET request with basic authentication using the API key.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/list-all-domain-keys.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef list_domain_keys():\n    return requests.get(\n        \"https://api.mailgun.net/v1/dkim/keys\",\n        auth=('api', 'YOUR_API_KEY'))\n```\n\n----------------------------------------\n\nTITLE: Deleting Entire Bounce List in Mailgun API\nDESCRIPTION: Illustrates the DELETE request URL for clearing all bounced email addresses for a domain. Resumes delivery to all previously bounced addresses.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-suppressions.rst#2025-04-21_snippet_9\n\nLANGUAGE: url\nCODE:\n```\nDELETE /<domain>/bounces\n```\n\n----------------------------------------\n\nTITLE: Base Domains Endpoint\nDESCRIPTION: Base URL endpoint for domains API access\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-domains.rst#2025-04-21_snippet_0\n\nLANGUAGE: url\nCODE:\n```\nv4/domains\n```\n\n----------------------------------------\n\nTITLE: Delivered Event JSON Structure\nDESCRIPTION: Example of a JSON response for a successfully delivered message, including delivery status and TLS information.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-events.rst#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"event\": \"delivered\",\n  \"id\": \"hK7mQVt1QtqRiOfQXta4sw\",\n  \"timestamp\": 1529692199.626182,\n  \"log-level\": \"info\",\n  \"envelope\": {\n    \"transport\": \"smtp\",\n    \"sender\": \"sender@example.org\",\n    \"sending-ip\": \"123.123.123.123\",\n    \"targets\": \"john@example.com\"\n  },\n  \"flags\": {\n    \"is-routed\": false,\n    \"is-authenticated\": false,\n    \"is-system-test\": false,\n    \"is-test-mode\": false\n  },\n  \"delivery-status\": {\n    \"tls\": true,\n    \"mx-host\": \"aspmx.l.example.com\",\n    \"code\": 250,\n    \"description\": \"\",\n    \"session-seconds\": 0.4367079734802246,\n    \"utf8\": true,\n    \"attempt-no\": 1,\n    \"message\": \"OK\",\n    \"certificate-verified\": true\n  },\n  \"message\": {\n    \"headers\": {\n      \"to\": \"team@example.org\",\n      \"message-id\": \"20180622182958.1.48906CB188F1A454@exmple.org\",\n      \"from\": \"sender@exmple.org\",\n      \"subject\": \"Test Subject\"\n    },\n    \"attachments\": [],\n    \"size\": 586\n  },\n  \"storage\": {\n    \"url\": \"https://storage-us-west1.api.mailgun.net/v3/domains/...\",\n    \"region\": \"us-west1\",\n    \"key\": \"AwABB...\",\n    \"env\": \"production\"\n  },\n  \"recipient\": \"john@example.com\",\n  \"recipient-domain\": \"example.com\",\n  \"campaigns\": [],\n  \"tags\": [],\n  \"user-variables\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Create Mailbox Response Example\nDESCRIPTION: Sample JSON response for successful mailbox creation.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-mailboxes.rst#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"message\": \"Created 1 mailboxes\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Provider Lookup POST Example\nDESCRIPTION: POST endpoint example with provider_lookup parameter.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-email-validation.rst#2025-04-21_snippet_6\n\nLANGUAGE: url\nCODE:\n```\nPOST /v4/address/validate?provider_lookup=true\n```\n\n----------------------------------------\n\nTITLE: Retrieving IP Pools\nDESCRIPTION: API endpoint for retrieving a list of all IP Pools on an account.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-ip-pools.rst#2025-04-21_snippet_2\n\nLANGUAGE: url\nCODE:\n```\nGET /v1/ip_pools\n```\n\n----------------------------------------\n\nTITLE: Update Domain Connection Settings Endpoint\nDESCRIPTION: PUT endpoint to update domain connection settings\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-domains.rst#2025-04-21_snippet_11\n\nLANGUAGE: url\nCODE:\n```\nPUT /domains/<domain>/connection\n```\n\n----------------------------------------\n\nTITLE: Seed List Response Format\nDESCRIPTION: Example response showing the structure of a seed list including delivery statistics and test results.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-inbox-placement.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"kid\": \"610abd2009b08f382ac86c45\",\n    \"created_at\": \"2021-08-04T16:15:28.08Z\",\n    \"updated_at\": \"2021-08-04T16:15:28.08Z\",\n    \"last_result_at\": \"0001-01-01T00:00:00Z\",\n    \"target_email\": \"ibp-seedlist-address@domain.net\",\n    \"sending_domains\": [\n      \"yourdomain.com\"\n    ],\n    \"has_results\": false,\n    \"name\": \"My campaign inbox test\",\n    \"seed_filter\": \".*\",\n    \"mailing_list\": \"ibp-seedlist-address@domain.net,another@email.com\",\n    \"delivery_stats\": {\n      \"all\": {\n        \"delivered\": 0,\n        \"missing\": 0,\n        \"pending\": 0,\n        \"spam\": 0,\n        \"inbox\": 0,\n        \"total\": 0,\n        \"provider\": \"all\"\n      }\n    },\n    \"results\": [\n      {\n        \"result_id\": \"12345678-1234-1234-1234-123456789012\",\n        \"subject\": \"IBP Test - 1\",\n        \"sender\": \"generated@yourdomain.com\",\n        \"delivery_stats\": {\n          \"all\": {\n            \"delivered\": 7,\n            \"missing\": 0,\n            \"pending\": 0,\n            \"spam\": 2,\n            \"inbox\": 5,\n            \"total\": 7,\n            \"provider\": \"all\",\n            \"categories\": {}\n          }\n        }\n      }\n    ]\n  }\n```\n\n----------------------------------------\n\nTITLE: Fetching Domain Connection Settings with Java\nDESCRIPTION: This Java code snippet shows how to use the Mailgun Java SDK to retrieve domain connection settings. It uses the MailgunDomainsApi class to make the API call. The API key and domain name need to be provided.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-connection.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.MailgunDomainsApi;\nimport com.mailgun.model.domains.DomainConnectionResponse;\n\n// ...\n\npublic DomainConnectionResponse getConnections() {\n    MailgunDomainsApi mailgunDomainsApi = MailgunClient.config(API_KEY)\n        .createApi(MailgunDomainsApi.class);\n\n    return mailgunDomainsApi.getDomainConnectionSettings(YOUR_DOMAIN_NAME);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Inbox Placement Test - Mailgun API\nDESCRIPTION: Endpoint to create a new inbox placement test with specified parameters including from address, subject, and HTML content.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-inbox-placement.rst#2025-04-21_snippet_19\n\nLANGUAGE: url\nCODE:\n```\nPOST /v4/inbox/tests\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"result_id\": \"1a066d4a-2207-4240-9e89-9e1a55511f0e\",\n    \"links\": {\n      \"results\": \"https://api.mailgun.net/v4/inbox/results/1a066d4a-2207-4240-9e89-9e1a55511f0e\"\n    }\n }\n```\n\n----------------------------------------\n\nTITLE: Deactivating Domain Key using Ruby\nDESCRIPTION: Ruby implementation using RestClient to deactivate domain key. Includes authentication in the URL.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/deactivate-domain-key.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef deactivate_domain_key\n   RestClient.put(\"https://api:YOUR_API_KEY\"\\\n                  \"@api.mailgun.net/v4/domains/AUTHORITY_DOMAIN_NAME/keys/SELECTOR/deactivate\")\nend\n```\n\n----------------------------------------\n\nTITLE: IP Blocklist Webhook Payload Example\nDESCRIPTION: Sample webhook payload structure when an IP address is added to a blocklist\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-deliverability-alerts.rst#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"signature\": {\n    \"timestamp\": 1661445572,\n    \"token\": \"b912851220af04be63e2feacebeafc7844f813847d309631ec\"\n  },\n  \"event_data\": {\n    \"id\": \"927156bd-0000-0000-0000-38100897278d\",\n    \"timestamp\": \"2022-08-25T16:00:00.04368716Z\",\n    \"log_level\": \"warn\",\n    \"event\": \"ip_listed\",\n    \"ip\": \"49.0.2.000\",\n    \"blocklist\": \"Barracuda\",\n    \"message\": \"IP 49.0.2.000 was blocklisted by Barracuda\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Template Metadata (PUT Request)\nDESCRIPTION: API endpoint for updating the metadata of an existing template.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-templates.rst#2025-04-21_snippet_7\n\nLANGUAGE: url\nCODE:\n```\nPUT /<domain>/templates/<name>\n```\n\n----------------------------------------\n\nTITLE: Creating Seed Lists with cURL\nDESCRIPTION: Demonstrates how to create or update a seed list by sending a PUT request to the Mailgun API using cURL. This request specifies the target email address and sending domains, requiring API key authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/update-seed-list.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT https://api.mailgun.net/v4/inbox/seedlists/TARGET_EMAIL \\\n  -F 'sending_domains=domain.com' \\\n  --user 'api:<YOUR_API_KEY>'\n```\n\n----------------------------------------\n\nTITLE: Retrieving DKIM Keys with C#/RestSharp\nDESCRIPTION: A C# implementation using RestSharp to get DKIM keys from the Mailgun API. The method creates a REST client with basic authentication and performs a GET request to the DKIM keys endpoint.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/list-all-domain-keys.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class InboxPlacementTests\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (ListDomainKeys ().Content.ToString ());\n    }\n\n    public static IRestResponse ListDomainKeys ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v1\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.Resource = \"dkim/keeys\";\n        request.Method = Method.GET;\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Bot Detection in Mailgun Open/Click Events (JavaScript)\nDESCRIPTION: This code snippet shows the structure of a Mailgun event object that includes bot detection information. It demonstrates how Mailgun identifies automated systems that may affect open and click tracking accuracy.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/user_manual.rst#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"client-info\": {\n      \"client-name\": \"unknown\",\n      \"client-type\": \"unknown\",\n      \"user-agent\": \"Mozilla/5.0\",\n      \"device-type\": \"unknown\",\n      \"client-os\": \"unknown\",\n      \"bot\": \"apple\"\n    },\n    \"tags\": [],\n    \"timestamp\": 1652883435.279025,\n    \"recipient\": \"bot@apple.com\",\n    \"geolocation\": {\n      \"region\": \"Unknown\",\n      \"country\": \"US\",\n      \"city\": \"Unknown\"\n    },\n    \"event\": \"opened\",\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Bounce List in Mailgun API\nDESCRIPTION: Sample JSON response for the GET bounces endpoint. Shows the structure including total_count and items array containing details about each bounce event with created_at timestamp, error code, address and error message.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-bounces.rst#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"total_count\": 1,\n  \"items\": [\n      {\n          \"created_at\": \"Fri, 21 Oct 2011 11:02:55 GMT\",\n          \"code\": 550,\n          \"address\": \"'baz@example.com\",\n          \"error\": \"Message was not accepted -- invalid mailbox.  Local mailbox 'baz@example.com is unavailable: user not found\"\n      }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing Bounce Event in Mailgun API\nDESCRIPTION: DELETE endpoint to clear a bounce event for a specific email address.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-bounces.rst#2025-04-21_snippet_3\n\nLANGUAGE: url\nCODE:\n```\nDELETE /<domain>/bounces/<address>\n```\n\n----------------------------------------\n\nTITLE: Deleting a Mailgun Template using cURL\nDESCRIPTION: A cURL command to delete a specific template from a Mailgun domain. Requires your API key, domain name, and the template name to be deleted.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/template-delete.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -X DELETE \\\n    https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/templates/TEMPLATE_NAME\n```\n\n----------------------------------------\n\nTITLE: Deleting Complaints with Mailgun API (URL)\nDESCRIPTION: This snippet shows the URL endpoint for removing a given spam complaint.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-suppressions.rst#2025-04-21_snippet_24\n\nLANGUAGE: url\nCODE:\n```\nDELETE /<domain>/complaints/<address>\n```\n\n----------------------------------------\n\nTITLE: IP Pools API Base Endpoint\nDESCRIPTION: The base endpoint for the IP Pools API in Mailgun.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-ip-pools.rst#2025-04-21_snippet_0\n\nLANGUAGE: url\nCODE:\n```\nv1/ip_pools\n```\n\n----------------------------------------\n\nTITLE: Retrieving Mailgun Logs using Java and Unirest\nDESCRIPTION: Java implementation using Unirest HTTP client to fetch logs from Mailgun API with basic authentication and pagination.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-log-entry.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mashape.unirest.http.HttpResponse;\nimport com.mashape.unirest.http.JsonNode;\nimport com.mashape.unirest.http.Unirest;\nimport com.mashape.unirest.http.exceptions.UnirestException;\n\npublic class MGSample {\n\n    // ...\n\n    public static JsonNode getLogEntry() throws UnirestException {\n\n        HttpResponse<JsonNode> request = Unirest.get(\"https://api.mailgun.net/v3/\" + YOUR_DOMAIN_NAME + \"/log\")\n            .basicAuth(\"api\", API_KEY)\n            .queryString(\"limit\", 1)\n            .queryString(\"skip\", 50)\n            .asJson();\n\n        return request.getBody();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing API Response for Mailgun Message Sending\nDESCRIPTION: Sample JSON response returned by Mailgun API after successfully queuing a message for delivery. It includes a success message and a unique message ID reference.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/user_manual.rst#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"message\": \"Queued. Thank you.\",\n  \"id\": \"<20111114174239.25659.5817@samples.mailgun.org>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Domain Tracking with cURL\nDESCRIPTION: Makes a GET request to Mailgun's tracking endpoint using cURL with basic authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-domain-tracking.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -G \\\n    https://api.mailgun.net/v3/domains/YOUR_DOMAIN_NAME/tracking\n```\n\n----------------------------------------\n\nTITLE: List Mailboxes Response Example\nDESCRIPTION: Sample JSON response showing mailbox list with creation dates and sizes.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-mailboxes.rst#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n   \"total_count\": 2,\n   \"items\": [\n     {\n       \"size_bytes\": 0,\n       \"created_at\": \"Tue, 27 Sep 2011 20:24:22 GMT\",\n       \"mailbox\": \"postmaster@samples.mailgun.org\"\n     },\n     {\n       \"size_bytes\": 0,\n       \"created_at\": \"Thu, 06 Oct 2011 10:22:36 GMT\",\n       \"mailbox\": \"user@samples.mailgun.org\"\n     }\n   ]\n }\n```\n\n----------------------------------------\n\nTITLE: Email Validation with Mailgun API in JavaScript (Deprecated)\nDESCRIPTION: This comment indicates that the email validation feature is deprecated and not supported in the JavaScript library for Mailgun API.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-validate-deprecated.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// This feature is deprecated and not supported in the js library\n```\n\n----------------------------------------\n\nTITLE: Fetching Route using cURL\nDESCRIPTION: Simple cURL command to retrieve a specific route using Mailgun API with basic authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-route.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' \\\n    https://api.mailgun.net/v3/routes/4f3bad2335335426750048c6\n```\n\n----------------------------------------\n\nTITLE: Webhook Payload Structure in JSON\nDESCRIPTION: Example of the JSON payload structure sent by Mailgun webhooks containing signature verification data and event information.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/user_manual.rst#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"signature\": {\n    \"timestamp\": \"1529006854\",\n    \"token\": \"a8ce0edb2dd8301dee6c2405235584e45aa91d1e9f979f3de0\",\n    \"signature\": \"d2271d12299f6592d9d44cd9d250f0704e4674c30d79d07c47a66f95ce71cf55\"\n  }\n  \"event-data\": {\n    \"event\": \"opened\",\n    \"timestamp\": 1529006854.329574,\n    \"id\": \"DACSsAdVSeGpLid7TN03WA\",\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Update Domain Endpoint\nDESCRIPTION: PUT endpoint to update existing domain parameters\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-domains.rst#2025-04-21_snippet_5\n\nLANGUAGE: url\nCODE:\n```\nPUT /domains/<domain>\n```\n\n----------------------------------------\n\nTITLE: Update List Member Response\nDESCRIPTION: Sample response from the API when updating a mailing list member's information including vars, name, subscription status and address.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-mailinglists.rst#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"member\": {\n      \"vars\": {\n          \"age\": 26\n      },\n      \"name\": \"Foo Bar\",\n      \"subscribed\": false,\n      \"address\": \"bar@example.com\"\n  },\n  \"message\": \"Mailing list member has been updated\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Available Result Filters - Mailgun API\nDESCRIPTION: Endpoint to get supported filters for inbox placement results. Returns filter parameters like sender address, subject line, provider, and time constraints.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-inbox-placement.rst#2025-04-21_snippet_14\n\nLANGUAGE: url\nCODE:\n```\nGET /v4/inbox/results/_filters\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n   \"supported_filters\": {\n     \"filters\": [\n       {\n         \"parameter\": \"senderaddr\",\n         \"description\": \"Sender address\"\n       },\n       {\n         \"parameter\": \"subject\",\n         \"description\": \"Subject line\"\n       },\n       {\n         \"parameter\": \"provider\",\n         \"description\": \"E-mail provider\"\n       },\n       {\n         \"parameter\": \"target_email\",\n         \"description\": \"Seedlist target e-mail\"\n       },\n       {\n         \"parameter\": \"time_before\",\n         \"description\": \"Get results before date\"\n       },\n       {\n         \"parameter\": \"time_after\",\n         \"description\": \"Get results after date\"\n       }\n     ]\n   }\n }\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Deleting All Templates\nDESCRIPTION: Example JSON response when deleting all templates.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-templates.rst#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"message\": \"templates have been deleted\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Mailgun Template Version using C# RestSharp\nDESCRIPTION: This C# class uses the RestSharp library to update a template version. It creates a RestClient, sets up authentication, and sends a PUT request to the Mailgun API with the necessary parameters.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/version-update.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class UpdateVersionChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (UpdateVersion ().Content.ToString ());\n    }\n\n    public static IRestResponse UpdateVersion ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.Resource = \"{domain}/templates/{name}/versions/{tag}\";\n        request.AddParameter (\"domain\", \"YOUR_DOMAIN_NAME\", ParameterType.UrlSegment);\n        request.AddParameter (\"name\", \"TEMPLATE_NAME\", ParameterType.UrlSegment);\n        request.AddParameter (\"tag\", \"VERSION_TAG\", ParameterType.UrlSegment);\n        request.AddParameter (\"template\", \"{{fname}} {{lname}}\");\n        request.AddParameter (\"comment\", \"Updated version comment\");\n        request.AddParameter (\"active\", \"yes\");\n        request.Method = Method.PUT;\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Seed List Attribute using C#\nDESCRIPTION: C# implementation using RestSharp client to fetch seed list attributes. Includes proper authentication and URL parameter handling.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-seed-list-attribute.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class InboxPlacementTest\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (GetSeedListAttribute().Content.ToString());\n    }\n\n    public static IRestResponse GetSeedListAttribute()\n    {\n        RestClient client = new RestClient();\n        client.BaseUrl = new Uri(\"https://api.mailgun.net/v4\");\n        client.Authenticator =\n            new HttpBasicAuthenticator(\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest();\n        request.AddParameter (\"attribute\", \"ATTRIBUTE\", ParameterType.UrlSegment);\n        request.Resource = \"/inbox/seedlists/a/{attribute}\";\n        return client.Execute(request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Using match_header Filter for Spam Detection\nDESCRIPTION: Matches messages that have been flagged as spam by Mailgun's spam filtering system. This example checks the X-Mailgun-Sflag header for a 'Yes' value.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/user_manual.rst#2025-04-21_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nmatch_header('X-Mailgun-Sflag', 'Yes')\n```\n\n----------------------------------------\n\nTITLE: Unsubscribe List Response Structure in Mailgun API\nDESCRIPTION: Illustrates the expected JSON response structure when fetching the unsubscribes list. Includes an array of unsubscribe items and pagination information.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-suppressions.rst#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n200\n{\n  \"items\":\n    [\n      {\n        \"address\": \"alice@example.com\",\n        \"tag\": \"*\",\n        \"created_at\": \"Fri, 21 Oct 2011 11:02:55 GMT\"\n      },\n      ...\n    ],\n  \"paging\":\n    {\n      \"first\": <first page URL>,\n      \"next\": <next page URL>,\n      \"previous\": <previous page URL>,\n      \"last\": <last page URL>\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: DELETE Whitelist Record Endpoint\nDESCRIPTION: API endpoint for removing a single record from the whitelist.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-suppressions.rst#2025-04-21_snippet_34\n\nLANGUAGE: url\nCODE:\n```\nDELETE /<domain>/whitelists/<address or domain>\n```\n\n----------------------------------------\n\nTITLE: Deleting All Templates Using Java\nDESCRIPTION: Java implementation for deleting all templates from a Mailgun domain using the Mailgun Java SDK. Creates a MailgunTemplatesApi instance and calls the deleteAllTemplatesInDomain method.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/template-delete-all.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.MailgunTemplatesApi;\nimport com.mailgun.model.ResponseWithMessage;\n\n// ...\n\npublic ResponseWithMessage deleteTemplates() {\n    MailgunTemplatesApi mailgunTemplatesApi = MailgunClient.config(API_KEY)\n        .createApi(MailgunTemplatesApi.class);\n\n    return mailgunTemplatesApi.deleteAllTemplatesInDomain(YOUR_DOMAIN_NAME);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Templates API Base URL\nDESCRIPTION: Specifies the base URL for the Templates API endpoints.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-templates.rst#2025-04-21_snippet_0\n\nLANGUAGE: url\nCODE:\n```\nv3/<domain>/templates\n```\n\n----------------------------------------\n\nTITLE: Basic Stats API Endpoint\nDESCRIPTION: Base endpoint for accessing Mailgun statistics for a specific domain.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-stats.rst#2025-04-21_snippet_0\n\nLANGUAGE: url\nCODE:\n```\nv3/<domain>/stats\n```\n\n----------------------------------------\n\nTITLE: Bulk Validation Status Response\nDESCRIPTION: Example JSON response showing the status and results of a bulk validation job including creation time, download URLs, and validation statistics\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-email-validation.rst#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"created_at\": \"Tue, 26 Feb 2019 21:30:03 GMT\",\n  \"download_url\": {\n    \"csv\": \"<download_link>\",\n    \"json\": \"<download_link>\"\n  },\n  \"id\": \"bulk_validations_sandbox_mailgun_org\",\n  \"quantity\": 207665,\n  \"records_processed\": 207665,\n  \"status\": \"uploaded\",\n  \"summary\": {\n    \"result\": {\n      \"deliverable\": 181854,\n      \"do_not_send\": 5647,\n      \"undeliverable\": 12116,\n      \"catch_all\" : 2345,\n      \"unknown\": 5613\n    },\n    \"risk\": {\n      \"high\": 17763,\n      \"low\": 142547,\n      \"medium\": 41652,\n      \"unknown\": 5613\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Credential Creation Response - JavaScript\nDESCRIPTION: API response format when creating new credentials in Mailgun.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/user_manual.rst#2025-04-21_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"message\": \"Created 1 credentials pair(s)\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access Rules in Robots.txt\nDESCRIPTION: Robots.txt directives to control web crawler access. Specifies that all user agents (*) are prevented from accessing the api-logs.html page.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/robots.txt#2025-04-21_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\nUser-Agent: *\nDisallow: /api-logs.html\n```\n\n----------------------------------------\n\nTITLE: Create Domain Endpoint\nDESCRIPTION: POST endpoint to create a new domain with configurable parameters\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-domains.rst#2025-04-21_snippet_4\n\nLANGUAGE: url\nCODE:\n```\nPOST /domains\n```\n\n----------------------------------------\n\nTITLE: Importing Complaints with Mailgun API (URL)\nDESCRIPTION: This snippet shows the URL endpoint for importing a CSV file containing a list of addresses to add to the complaint list.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-suppressions.rst#2025-04-21_snippet_23\n\nLANGUAGE: url\nCODE:\n```\nPOST /<domain>/complaints/import, Content-Type: multipart/form-data\n```\n\n----------------------------------------\n\nTITLE: Using match_header Filter for Multiple Subject Keywords\nDESCRIPTION: Matches messages that contain any of multiple keywords in the subject line. This example matches messages containing 'urgent', 'help', or 'asap' in the subject.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/user_manual.rst#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nmatch_header('subject', '(.*)(urgent|help|asap)(.*)')\n```\n\n----------------------------------------\n\nTITLE: Updating Domain Connection Settings with Java\nDESCRIPTION: Uses the Mailgun Java SDK to update domain connection settings. Creates a connection request object with TLS required and verification enabled.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/update-connection.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.MailgunDomainsApi;\nimport com.mailgun.model.domains.DomainConnectionRequest;\nimport com.mailgun.model.domains.UpdateDomainConnectionResponse;\n\n// ...\n\npublic UpdateDomainConnectionResponse updateConnections() {\n    MailgunDomainsApi mailgunDomainsApi = MailgunClient.config(API_KEY)\n        .createApi(MailgunDomainsApi.class);\n\n    DomainConnectionRequest domainConnection = DomainConnectionRequest.builder()\n        .requireTls(true)\n        .skipVerification(false)\n        .build();\n\n    return mailgunDomainsApi.updateDomainConnectionSettings(YOUR_DOMAIN_NAME, domainConnection);\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Template Version (GET Request)\nDESCRIPTION: API endpoint for retrieving information and content of a specific template version.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-templates.rst#2025-04-21_snippet_17\n\nLANGUAGE: url\nCODE:\n```\nGET /<domain>/templates/<name>/versions/<tag>\n```\n\n----------------------------------------\n\nTITLE: Fetching Mailboxes List Endpoint\nDESCRIPTION: GET endpoint to retrieve list of mailboxes for a domain. Supports pagination with limit and skip parameters.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-mailboxes.rst#2025-04-21_snippet_0\n\nLANGUAGE: url\nCODE:\n```\nGET /<domain>/mailboxes\n```\n\n----------------------------------------\n\nTITLE: Delete Template Version Response - Mailgun API\nDESCRIPTION: Sample JSON response after successfully deleting a template version.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-templates.rst#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n{\n   \"template\": {\n       \"name\": \"template.name\",\n       \"version\": {\n         \"tag\": \"v1.3.0\"\n       }\n    \"message\": \"version has been deleted\"\n }\n```\n\n----------------------------------------\n\nTITLE: List Results Endpoint\nDESCRIPTION: API endpoint to retrieve test results for inbox placement tests.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-inbox-placement.rst#2025-04-21_snippet_12\n\nLANGUAGE: url\nCODE:\n```\nGET /v4/inbox/results\n```\n\n----------------------------------------\n\nTITLE: Deactivating Domain Key using C#\nDESCRIPTION: C# implementation using RestSharp to deactivate domain key. Includes proper authentication and request configuration.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/deactivate-domain-key.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class InboxPlacementTests\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (DeactivateDomainKey ().Content.ToString ());\n    }\n\n    public static IRestResponse DeactivateDomainKey ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v4\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.Resource = \"domains/AUTHORITY_DOMAIN_NAME/keys/deactivate\";\n        request.Method = Method.PUT;\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: PHP Mailgun Events API Integration\nDESCRIPTION: PHP implementation using Mailgun SDK to fetch events. Requires the Mailgun library to be installed via Composer.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/events-traversal.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Include the Autoloader (see \"Libraries\" for install instructions)\nrequire 'vendor/autoload.php';\nuse Mailgun\\Mailgun;\n\n# Instantiate the client.\n$mgClient = Mailgun::create('PRIVATE_API_KEY', 'https://API_HOSTNAME');\n$domain   = 'YOUR_DOMAIN_NAME';\n\n# Issue the call to the client.\n$result = $mgClient->events()->($domain);\n```\n\n----------------------------------------\n\nTITLE: Adding Single Unsubscribe in Mailgun API\nDESCRIPTION: Illustrates the POST request URL for adding a single unsubscribe record to the unsubscribe list.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-suppressions.rst#2025-04-21_snippet_15\n\nLANGUAGE: url\nCODE:\n```\nPOST /<domain>/unsubscribes\n```\n\n----------------------------------------\n\nTITLE: Adding Spam Complaint Response in Mailgun API\nDESCRIPTION: Example JSON response for adding a new spam complaint. Confirms the addition of the address to the complaints table.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-complaints.rst#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"message\": \"Address has been added to the complaints table\",\n  \"address\": \"bob@example.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: GET Single Whitelist Record Error Response\nDESCRIPTION: Example error response when whitelist record is not found.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-suppressions.rst#2025-04-21_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\n404\n{\n  \"message\": \"Address/Domain not found in whitelists table\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting All Templates Using cURL in Bash\nDESCRIPTION: A cURL command to delete all templates for a specified Mailgun domain. Requires the Mailgun API key and domain name to be specified.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/template-delete-all.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -X DELETE \\\n    https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/templates\n```\n\n----------------------------------------\n\nTITLE: Delete Seed List Endpoint\nDESCRIPTION: API endpoint to delete a specific seed list.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-inbox-placement.rst#2025-04-21_snippet_10\n\nLANGUAGE: url\nCODE:\n```\nDELETE /v4/inbox/seedlists/ibp-seedlist-address@domain.net\n```\n\n----------------------------------------\n\nTITLE: Java Implementation for Mailgun Credentials\nDESCRIPTION: Java code using Unirest HTTP library to fetch domain credentials with basic authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-credentials.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mashape.unirest.http.HttpResponse;\nimport com.mashape.unirest.http.JsonNode;\nimport com.mashape.unirest.http.Unirest;\nimport com.mashape.unirest.http.exceptions.UnirestException;\n\npublic class MGSample {\n\n    // ...\n\n    public static JsonNode getCredentials() throws UnirestException {\n\n        HttpResponse<JsonNode> request = Unirest.get(\"https://api.mailgun.net/v3/domains/\" + YOUR_DOMAIN_NAME + \"/credentials\")\n            .basicAuth(\"api\", API_KEY)\n            .asJson();\n\n        return request.getBody();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing SMTP Credentials in Mailgun\nDESCRIPTION: Demonstrates how to retrieve a list of all SMTP credentials configured in the Mailgun account, which can be used for sending mail via SMTP protocol.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/user_manual.rst#2025-04-21_snippet_40\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: samples/get-credentials.rst\n```\n\n----------------------------------------\n\nTITLE: Webhook Signature Verification\nDESCRIPTION: Ruby code example for verifying webhook signatures using HMAC-SHA256\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-deliverability-alerts.rst#2025-04-21_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"json\"\nrequire \"openssl\"\n\ndef verify(signing_key, webhook_payload, signature)\n  data = JSON.generate(webhook_payload)\n\n  signature == OpenSSL::HMAC.hexdigest(\"SHA256\", signing_key, data)\nend\n```\n\n----------------------------------------\n\nTITLE: List All Domain Keys Response\nDESCRIPTION: Sample JSON response when listing all domain keys associated with an account.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-domains.rst#2025-04-21_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\n{\n   \"items\": [\n      {\n         \"selector\": \"s1\",\n         \"signing_domain\": \"example.com\"\n      },\n      {\n         \"selector\": \"s2\",\n         \"signing_domain\": \"example.com\"\n      }\n   ],\n   \"paging\": {\n      \"first\": \"https://....\",\n      \"last\": \"https://....\",\n      \"next\": \"https://....\",\n      \"previous\": \"https://....\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Test Results Response Format\nDESCRIPTION: Example response showing the structure of test results including delivery status and authentication details.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-inbox-placement.rst#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"items\": [\n    {\n      \"rid\": \"123456789012345678901234\",\n      \"result_id\": \"12345678-1234-1234-1234-123456789012\",\n      \"keybox_email\": \"ibp-00410325-1c95-492e-bc35-c19899802494@mailgun.net\",\n      \"subject\": \"A subject of things\",\n      \"sender\": \"person@domain.com\",\n      \"name\": \"Such list\",\n      \"created_at\": \"2021-08-03T14:20:40.301Z\",\n      \"updated_at\": \"2021-08-03T14:36:53.841Z\",\n      \"seed_results\": [\n        {\n          \"email\": \"mail@box.com\",\n          \"provider\": \"box.com\",\n          \"destination\": \"inbox\",\n          \"state\": \"delivered\",\n          \"originating_ip\": \"123.123.123.123\",\n          \"tags\": [\n            \"inbox\"\n          ],\n          \"spf\": \"pass\",\n          \"dkim\": \"pass\",\n          \"dmarc\": \"pass\"\n        }\n      ]\n    }\n  ]\n }\n```\n\n----------------------------------------\n\nTITLE: Retrieving Email Templates with cURL\nDESCRIPTION: Makes a GET request to the Mailgun API to retrieve a specific template using basic authentication with an API key.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/template-get.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' \\\n  https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/templates/TEMPLATE_NAME\n```\n\n----------------------------------------\n\nTITLE: Parsing Stored Message Event JSON in JavaScript\nDESCRIPTION: This snippet demonstrates the JSON structure for a stored message event. It includes message headers, storage information, and event flags.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-events.rst#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"event\": \"stored\",\n  \"id\": \"WRVmVc47QYi4DHth_xpRUA\",\n  \"timestamp\": 1529692198.691758,\n  \"log-level\": \"info\",\n  \"flags\": {\n    \"is-test-mode\": false\n  },\n  \"message\": {\n    \"headers\": {\n      \"to\": \"team@example.org\",\n      \"message-id\": \"20180622182958.1.48906CB188F1A454@exmple.org\",\n      \"from\": \"sender@example.org\",\n      \"subject\": \"Test Subject\"\n    },\n    \"attachments\": [],\n    \"recipients\": [\n      \"team@example.org\"\n    ],\n    \"size\": 586\n  },\n  \"storage\": {\n    \"url\": \"https://se.api.mailgun.net/v3/domains/example.org/messages/eyJwI...\",\n    \"key\": \"eyJwI...\"\n  },\n  \"campaigns\": [],\n  \"tags\": [],\n  \"user-variables\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Tag Statistics by Providers\nDESCRIPTION: GET endpoint to retrieve a list of email providers for a given domain and tag, broken down by different event types.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-tags.rst#2025-04-21_snippet_7\n\nLANGUAGE: url\nCODE:\n```\nGET /<domain>/tags/<tag>/stats/aggregates/providers\n```\n\n----------------------------------------\n\nTITLE: POST Add Whitelist Record Response\nDESCRIPTION: Example response when successfully adding an address or domain to the whitelist.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-suppressions.rst#2025-04-21_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\n200\n{\n  \"message\":\"Address/Domain has been added to the whitelists table\",\n  \"type\":\"domain\",\n  \"value\":\"example.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Get Webhook Details - API Endpoint\nDESCRIPTION: API endpoint to retrieve details about a specific webhook for a domain. Requires both domain name and webhook name as parameters.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-webhooks.rst#2025-04-21_snippet_2\n\nLANGUAGE: url\nCODE:\n```\nGET /domains/<domain>/webhooks/<webhookname>\n```\n\n----------------------------------------\n\nTITLE: Importing Bounce List in Mailgun API\nDESCRIPTION: Demonstrates the POST request URL for importing a CSV file containing a list of bounce addresses. Specifies file size limit and required column headers.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-suppressions.rst#2025-04-21_snippet_7\n\nLANGUAGE: url\nCODE:\n```\nPOST /<domain>/bounces/import, Content-Type: multipart/form-data\n```\n\n----------------------------------------\n\nTITLE: Provider Lookup GET Example\nDESCRIPTION: GET endpoint example with provider_lookup parameter for controlling mailbox provider verification.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-email-validation.rst#2025-04-21_snippet_5\n\nLANGUAGE: url\nCODE:\n```\nGET /v4/address/validate?address=test123@test.com&provider_lookup=true\n```\n\n----------------------------------------\n\nTITLE: Retrieving Seed List Attribute using Ruby\nDESCRIPTION: Ruby implementation using RestClient to fetch seed list attributes. Includes Basic Auth credentials in the URL.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-seed-list-attribute.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef get_seed_list_attribute\n  RestClient.get(\"https://api:YOUR_API_KEY\"\\\n                 \"@api.mailgun.net/v4/inbox/seedlists/a/ATTRIBUTE\"\\\n                 {|response, request, result| response }\nend\n```\n\n----------------------------------------\n\nTITLE: Deleting Mailbox Endpoint\nDESCRIPTION: DELETE endpoint to remove a mailbox from a domain.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-mailboxes.rst#2025-04-21_snippet_3\n\nLANGUAGE: url\nCODE:\n```\nDELETE /<domain>/mailboxes/<mailbox>\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific Tag\nDESCRIPTION: GET endpoint to retrieve information about a specific tag for a domain, requiring both domain name and tag name parameters.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-tags.rst#2025-04-21_snippet_2\n\nLANGUAGE: url\nCODE:\n```\nGET /<domain>/tags/<tag>\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Tag Statistics by Countries\nDESCRIPTION: Example JSON response showing tag statistics aggregated by countries, with event counts for each country.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-tags.rst#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"country\": {\n      \"ad\": {\n          \"clicked\": 7,\n          \"complained\": 4,\n          \"opened\": 18,\n          \"unique_clicked\": 0,\n          \"unique_opened\": 2,\n          \"unsubscribed\": 0\n      },\n      \"ck\": {\n          \"clicked\": 13,\n          \"complained\": 2,\n          \"opened\": 1,\n          \"unique_clicked\": 1,\n          \"unique_opened\": 0,\n          \"unsubscribed\": 2\n      }\n  },\n  \"tag\": \"exampletag\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Tags Using Go Mailgun SDK\nDESCRIPTION: This Go function demonstrates how to delete a tag named 'newsletter' using the Mailgun Go SDK. It creates a new Mailgun client with your domain and API key, then calls the DeleteTag method with a context and the tag name.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/tags/delete-tag.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/mailgun/mailgun-go/v3\"\n    \"time\"\n)\n\nfunc DeleteTag(domain, apiKey string) error {\n    mg := mailgun.NewMailgun(domain, apiKey)\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    return mg.DeleteTag(ctx, \"newsletter\")\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Webhook Response Format\nDESCRIPTION: Sample JSON response after successfully deleting a webhook, showing the confirmation message and the details of the deleted webhook.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-webhooks.rst#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"message\": \"Webhook has been deleted\",\n  \"webhook\": {\n    \"urls\": [\n\t      \"https://your_domain.com/v1/clicked\",\n\t      \"https://your_domain.com/v2/clicked\",\n\t      \"https://your_partner_domain.com/v1/clicked\" \n\t    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Forwarding Messages to Multiple Destinations\nDESCRIPTION: Uses the forward() action to send matched messages to multiple destinations simultaneously. This example forwards to both an HTTP endpoint and an email address.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/user_manual.rst#2025-04-21_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nforward(\"http://myapp.com/messages, mailbox@myapp.com\")\n```\n\n----------------------------------------\n\nTITLE: Conflict Response for Duplicate Certificate Request in JSON\nDESCRIPTION: This is a sample JSON response with status code 409 Conflict, indicating that an x509 keypair already exists or is pending generation for the specified tracking domain.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/secure-tracking.rst#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"message\":  \"x509 key pair generation has already been initiated for tracking.example.com\",\n}\n```\n\n----------------------------------------\n\nTITLE: jQuery Plugin for Front-end Email Validation\nDESCRIPTION: JavaScript code snippet showing how to use the Mailgun jQuery plugin for front-end email validation, including callback functions for various states of the validation process.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-email-validation-deprecated.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n$('jquery_selector').mailgun_validator({\n    api_key: 'api-key',\n    in_progress: in_progress_callback, // called when request is made to validator\n    success: success_callback,         // called when validator has returned\n    error: validation_error,           // called when an error reaching the validator has occured\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Subaccount (POST) in Mailgun API\nDESCRIPTION: This endpoint creates a new subaccount. It requires the name of the subaccount as a parameter. The new subaccount will be linked to the primary account but have separate assets and settings.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/subaccounts.rst#2025-04-21_snippet_2\n\nLANGUAGE: url\nCODE:\n```\nPOST /v5/accounts/subaccounts\n```\n\n----------------------------------------\n\nTITLE: List Domain IPs Endpoint\nDESCRIPTION: GET endpoint to retrieve IPs assigned to a specific domain.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-ips.rst#2025-04-21_snippet_3\n\nLANGUAGE: url\nCODE:\n```\nGET /domains/<domain>/ips\n```\n\n----------------------------------------\n\nTITLE: Sending Email with TLS Options using Ruby and Mailgun API\nDESCRIPTION: Ruby function to send an email via Mailgun API with TLS security options. Uses RestClient to perform a POST request to the Mailgun API with message details and TLS configuration parameters.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-connection.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef send_require_tls\n  RestClient.post \"https://api:YOUR_API_KEY\"\\\n  \"@api.mailgun.net/v3/YOUR_DOMAIN_NAME/messages\",\n  :from => \"Excited User <YOU@YOUR_DOMAIN_NAME>\",\n  :to => \"bar@example.com, baz@example.com\",\n  :subject => \"Hello\",\n  :text => \"Testing some Mailgun awesomness!\",\n  \"o:require-tls\" => true,\n  \"o:skip-verification\" => false\nend\n```\n\n----------------------------------------\n\nTITLE: Sample Response for IP Pool Deletion\nDESCRIPTION: Example JSON response after initiating an IP pool deletion operation.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-ip-pools.rst#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n{ \"message\": \"started\" }\n```\n\n----------------------------------------\n\nTITLE: Update Open Tracking Settings Endpoint\nDESCRIPTION: PUT endpoint to update open tracking settings\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-domains.rst#2025-04-21_snippet_13\n\nLANGUAGE: url\nCODE:\n```\nPUT /domains/<domain>/tracking/open\n```\n\n----------------------------------------\n\nTITLE: POST Import Whitelist Records Response\nDESCRIPTION: Example response when successfully importing whitelist records from CSV.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-suppressions.rst#2025-04-21_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\n200\n{\n  \"message\": \"file uploaded successfully\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Single Bounce in Mailgun API\nDESCRIPTION: Illustrates the POST request URL for adding a single bounce record to the bounce list. Includes parameters for address, code, error, and created_at.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-suppressions.rst#2025-04-21_snippet_5\n\nLANGUAGE: url\nCODE:\n```\nPOST /<domain>/bounces\n```\n\n----------------------------------------\n\nTITLE: Defining RST Documentation Structure with Toctree\nDESCRIPTION: ReStructuredText markup defining the documentation structure and table of contents for the Optimize API reference using toctree directive.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/inboxready_api_reference.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _inboxready-api-reference:\n\nOptimize API Reference\n########################\n\n.. toctree::\n\n   api-inboxready-intro\n   api-inboxready-domains\n   api-email-validation\n   api-inbox-placement\n   api-email-preview\n   api-spam-trap-monitoring\n   api-blocklist-monitoring\n   api-domain-blocklist-monitoring\n   api-deliverability-alerts\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Listing Tags\nDESCRIPTION: Example JSON response when retrieving all tags for a domain, showing tag information and pagination links.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-tags.rst#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"items\": [\n      {\n        \"tag\": \"red\",\n        \"description\": \"red signup button\",\n      },\n      {\n        \"tag\": \"green\",\n        \"description\": \"green signup button\",\n      },\n  ],\n  \"paging\": {\n    \"next\":\n        \"https://url_to_next_page\",\n    \"previous\":\n        \"https://url_to_previous_page\",\n    \"first\":\n        \"https://url_to_first_page\",\n    \"last\":\n        \"https://url_to_last_page\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Mailing List using cURL\nDESCRIPTION: Simple cURL command to delete a mailing list using Mailgun API with basic authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/remove-mailing-list.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -X DELETE \\\n    https://api.mailgun.net/v3/lists/LIST@YOUR_DOMAIN_NAME\n```\n\n----------------------------------------\n\nTITLE: Deleting Single Bounce in Mailgun API\nDESCRIPTION: Shows the DELETE request URL for removing a single bounce record by email address. Allows resuming delivery to the specified address.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-suppressions.rst#2025-04-21_snippet_8\n\nLANGUAGE: url\nCODE:\n```\nDELETE /<domain>/bounces/<address>\n```\n\n----------------------------------------\n\nTITLE: Querying Tag Limits with Mailgun API\nDESCRIPTION: This endpoint allows querying the maximum available tags that can be allocated and the count of tags used for a specific domain. There is a 3 tag limit per message, and this limitation cannot be changed.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-limits.rst#2025-04-21_snippet_0\n\nLANGUAGE: url\nCODE:\n```\nGET /domains/<domain>/limits/tag\n```\n\n----------------------------------------\n\nTITLE: Sample Response for IP Pool Creation\nDESCRIPTION: Example JSON response after successfully creating an IP pool.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-ip-pools.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{ \"message\": \"success\", \"pool_id\": \"some_pool_id\" }\n```\n\n----------------------------------------\n\nTITLE: Ruby Implementation for Mailgun Webhook Retrieval\nDESCRIPTION: Uses RestClient in Ruby to make a GET request to Mailgun's webhook endpoint. Implements basic authentication with API key.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-webhook-deprecated.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef get_domain\n  RestClient.get \"https://api:YOUR_API_KEY\"\\\n                 \"@api.mailgun.net/v3/domains/YOUR_DOMAIN_NAME/webhooks/click\"\\\n                 {|response, request, result| response }\nend\n```\n\n----------------------------------------\n\nTITLE: Filter Stats by Provider\nDESCRIPTION: Example of filtering delivered event statistics by provider.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-stats.rst#2025-04-21_snippet_2\n\nLANGUAGE: url\nCODE:\n```\nGET /v3/stats/filter?event=delivered&group=provider\n```\n\n----------------------------------------\n\nTITLE: Retrieving IPs using PHP\nDESCRIPTION: Implements IP retrieval using Mailgun PHP SDK. Requires composer autoloader and Mailgun library installation.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-ips.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Include the Autoloader (see \"Libraries\" for install instructions)\nrequire 'vendor/autoload.php';\nuse Mailgun\\Mailgun;\n\n# Instantiate the client.\n$mgClient = Mailgun::create('PRIVATE_API_KEY', 'https://API_HOSTNAME');\n\n# Issue the call to the client.\n$result = $mgClient->ips->index();\n```\n\n----------------------------------------\n\nTITLE: Using match_header Filter for Subject Keyword Matching\nDESCRIPTION: Matches messages based on their subject line content. This example filter matches any message that contains the word 'support' in its subject header.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/user_manual.rst#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nmatch_header(\"subject\", \".*support\")\n```\n\n----------------------------------------\n\nTITLE: Go Mailgun Unsubscribe Implementation\nDESCRIPTION: Go implementation using the official Mailgun Go SDK to fetch unsubscribe data with pagination support.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-unsubscribes.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/mailgun/mailgun-go/v3\"\n    \"time\"\n)\n\nfunc ListUnsubscribes(domain, apiKey string) ([]mailgun.Unsubscribe, error) {\n    mg := mailgun.NewMailgun(domain, apiKey)\n    it := mg.ListUnsubscribes(nil)\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    var page, result []mailgun.Unsubscribe\n    for it.Next(ctx, &page) {\n        result = append(result, page...)\n    }\n\n    if it.Err() != nil {\n        return nil, it.Err()\n    }\n    return result, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Single Validation POST Endpoint\nDESCRIPTION: POST endpoint for validating a single email address with form data.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-email-validation.rst#2025-04-21_snippet_2\n\nLANGUAGE: url\nCODE:\n```\nPOST /v4/address/validate\n```\n\n----------------------------------------\n\nTITLE: Credential Deletion Response - JavaScript\nDESCRIPTION: API response format when deleting credentials from Mailgun, including the specification of which credential was removed.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/user_manual.rst#2025-04-21_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"message\": \"Credentials have been deleted\",\n  \"spec\": \"alice@samples.mailgun.org\"\n}\n```\n\n----------------------------------------\n\nTITLE: Verify Domain Endpoint\nDESCRIPTION: PUT endpoint to trigger domain verification process\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-domains.rst#2025-04-21_snippet_3\n\nLANGUAGE: url\nCODE:\n```\nPUT /domains/<domain>/verify\n```\n\n----------------------------------------\n\nTITLE: List Webhooks Response Format\nDESCRIPTION: Sample JSON response for the GET webhooks request, showing the structure of the returned webhook data. Demonstrates how multiple URLs can be configured for each webhook type.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-webhooks.rst#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"webhooks\": {\n    \"opened\": {\n      \"urls\": [\n\t        \"https://your_domain.com/v1/opened\",\n\t        \"https://your_domain.com/v2/opened\" \n\t      ]\n    },\n    \"clicked\": {\n      \"urls\": [ \"https://your_domain.com/v1/clicked\" ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Domain Key Response\nDESCRIPTION: Sample JSON response when deleting a domain key.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-domains.rst#2025-04-21_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\n{\n   \"message\": \"success\"\n}\n```\n\n----------------------------------------\n\nTITLE: GET Single Whitelist Record Success Response\nDESCRIPTION: Example successful response when retrieving a single whitelist record.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-suppressions.rst#2025-04-21_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\n200\n{\n  \"value\": \"alice@example.com\",\n  \"reason\": \"why the record was created\",\n  \"type\": \"address\",\n  \"createdAt\": \"Fri, 21 Oct 2011 11:02:55 GMT\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Unsubscribes with Mailgun API (URL)\nDESCRIPTION: This snippet shows the URL endpoint for removing an address from the unsubscribes list.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-suppressions.rst#2025-04-21_snippet_20\n\nLANGUAGE: url\nCODE:\n```\nDELETE /<domain>/unsubscribes/<address>\n```\n\n----------------------------------------\n\nTITLE: Get List Verification Status Response\nDESCRIPTION: Detailed response showing the status and results of a list verification job including delivery and risk metrics.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-mailinglists.rst#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"created_at\": \"Tue, 26 Feb 2019 21:30:03 GMT\",\n  \"download_url\": {\n    \"csv\": \"<download_link>\",\n    \"json\": \"<download_link>\"\n  },\n  \"id\": \"listname@mydomain.sandbox.mailgun.org\",\n  \"quantity\": 207665,\n  \"records_processed\": 207665,\n  \"status\": \"uploaded\",\n  \"summary\": {\n    \"result\": {\n      \"deliverable\": 184199,\n      \"do_not_send\": 5647,\n      \"undeliverable\": 12116,\n      \"unknown\": 5613\n    },\n    \"risk\": {\n      \"high\": 17763,\n      \"low\": 142547,\n      \"medium\": 41652,\n      \"unknown\": 5613\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Template API Response\nDESCRIPTION: Example JSON response from the Template API when creating a new template, showing the template metadata including name, description, and creation timestamp.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/user_manual.rst#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"template\": {\n     \"createdAt\": \"Wed, 29 Aug 2018 23:31:13 UTC\",\n     \"description\": \"Sample template\",\n     \"name\": \"template.test\",\n  },\n  \"message\": \"template has been stored\"\n}\n```\n\n----------------------------------------\n\nTITLE: Unlinking an IP Pool\nDESCRIPTION: API endpoint for removing an IP Pool from a domain, requiring replacement IP options.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-ip-pools.rst#2025-04-21_snippet_6\n\nLANGUAGE: url\nCODE:\n```\nDELETE /v3/domains/{domain_name}/ips/ip_pool\n```\n\n----------------------------------------\n\nTITLE: Base API Endpoint Definition\nDESCRIPTION: The base endpoint for accessing the Mailgun IP API.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-ips.rst#2025-04-21_snippet_0\n\nLANGUAGE: url\nCODE:\n```\nv3/ips\n```\n\n----------------------------------------\n\nTITLE: PHP Implementation using cURL\nDESCRIPTION: PHP function that uses cURL to fetch inbox placement results. Note that this is a custom implementation as the PHP SDK doesn't support this endpoint.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-results-attribute.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Currently, the PHP SDK does not support the inbox placement endpoint.\n# Consider using the following php curl function.\nfunction get_results_attribute() {\n  $ch = curl_init();\n\n  curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);\n  curl_setopt($ch, CURLOPT_USERPWD, 'api:PRIVATE_API_KEY');\n  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n\n  curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\n  curl_setopt($ch, CURLOPT_URL, 'https://api.mailgun.net/v4/inbox/results/a/ATTRIBUTE');\n  $result = curl_exec($ch);\n  curl_close($ch);\n\n  return $result;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Click Webhook Data using cURL\nDESCRIPTION: Makes a GET request to Mailgun's API to fetch click webhook details using cURL. Requires API key and domain name for authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-webhook-deprecated.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -G \\\n    https://api.mailgun.net/v3/domains/YOUR_DOMAIN_NAME/webhooks/click\n```\n\n----------------------------------------\n\nTITLE: Unsubscribe List Response Example\nDESCRIPTION: Example JSON response showing the structure of unsubscribe records including creation timestamp, tags, ID, and email address.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-unsubscribes.rst#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"total_count\": 4,\n    \"items\": [\n        {\n            \"created_at\": \"Thu, 15 Mar 2012 08:35:02 GMT\",\n            \"tags\":[\"*\"],\n            \"id\": \"4f3b954a6addaa3e196735a2\",\n            \"address\": \"bob@example.com\"\n        },\n        {\n            \"created_at\": \"Thu, 15 Mar 2012 08:35:02 GMT\",\n            \"tags\":[\"tag1\"],\n            \"id\": \"4f3b954a6addaa3e1967359f\",\n            \"address\": \"bob@example.com\"\n        },\n        {\n            \"created_at\": \"Wed, 01 Feb 2012 08:09:45 GMT\",\n            \"tags\":[\"Testing Tag\"],\n            \"id\": \"4f28f3494d532a3a823d0d9f\",\n            \"address\": \"alice@example.com\"\n        },\n        {\n            \"created_at\": \"Wed, 01 Feb 2012 08:09:38 GMT\",\n            \"tags\":[\"*\", \"tag2\"],\n            \"id\": \"4f28f1024d532a3a823d0d68\",\n            \"address\": \"alice@example.com\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Total Stats Endpoint\nDESCRIPTION: Endpoint to retrieve total statistics for a given domain.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-stats.rst#2025-04-21_snippet_1\n\nLANGUAGE: url\nCODE:\n```\nGET /<domain>/stats/total\n```\n\n----------------------------------------\n\nTITLE: Creating Mailgun Template using cURL\nDESCRIPTION: Creates an email template using cURL command with basic authentication. The template includes HTML structure with title and body placeholders.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/create-template-usage.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -X POST \\\n  https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/templates \\\n  -F template='<div class=\"entry\"> <h1>{{title}}</h1> <div class=\"body\"> {{body}} </div> </div>' \\\n  -F name = 'template.test'\n  -F description='Sample template'\n```\n\n----------------------------------------\n\nTITLE: Sending Email with TLS Options using C# and Mailgun API\nDESCRIPTION: C# code to send an email via Mailgun API with TLS security options. Uses RestSharp library to create an authenticated request to the Mailgun API with message details and TLS configuration parameters.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-connection.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class SendConnectionChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (SendWithTLS ().Content.ToString ());\n    }\n\n    public static IRestResponse SendWithTLS ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.AddParameter (\"domain\", \"YOUR_DOMAIN_NAME\", ParameterType.UrlSegment);\n        request.Resource = \"{domain}/messages\";\n        request.AddParameter (\"from\", \"Excited User <YOU@YOUR_DOMAIN_NAME>\");\n        request.AddParameter (\"to\", \"bar@example.com\");\n        request.AddParameter (\"to\", \"baz@example.com\");\n        request.AddParameter (\"subject\", \"Hello\");\n        request.AddParameter (\"text\", \"Testing some Mailgun awesomness!\");\n        request.AddParameter (\"o:require-tls\", true);\n        request.AddParameter (\"o:skip-verification\", false);\n        request.Method = Method.POST;\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Seed List Attributes Response\nDESCRIPTION: Example response showing available attributes for seed lists.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-inbox-placement.rst#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"items\": {\n    \"attribute\": \"available attributes\",\n    \"values\": [\n      \"name\"\n    ]\n  }\n }\n```\n\n----------------------------------------\n\nTITLE: Mailgun Message Route Headers and Content Structure\nDESCRIPTION: Complete example of a Mailgun message route payload showing email headers, content variants (HTML and plain text), routing metadata, and authentication details. This structure is what you receive when a message is processed through a Mailgun route.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/message-forward.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nContent-Type: multipart/alternative; boundary=\"001a114490d2c5be3d05433e6d03\"\nDate: Fri, 9 Dec 2016 13:04:51 -0600\nFrom: Excited User <user@samples.mailgun.com>\nMessage-Id: <CABPem2N_Ucj3wRRZnLVpVF_fRjkTBXHZReZC3zY-hHsRa=T51g@samples.mailgun.com>\nMime-Version: 1.0\nSubject: Message Routes\nTo: hook@sandboxdb91ab935a414789809f96c91229a0ee.mailgun.org\nX-Envelope-From: <user@samples.mailgun.com>\nX-Mailgun-Incoming: Yes\nX-Originating-Ip: [2001:xxx:xxxx:xxx::beef:93]\nbody-html: <div dir=\"ltr\">Testing Mailgun&#39;s forwarded and stored message routes :)</div>\nbody-plain: Testing Mailgun's forwarded and stored message routes :)\nfrom: Excited User <user@samples.mailgun.com>\nmessage-headers: [[\"X-Mailgun-Incoming\", \"Yes\"], [\"X-Envelope-From\", \"<user@samples.mailgun.com>\"], [\"Mime-Version\", \"1.0\"], [\"X-Originating-Ip\", \"[2001:xxx:xxxx:xxx::beef:93]\"], [\"From\", \"Excited User <user@samples.mailgun.com>\"], [\"Date\", \"Fri, 9 Dec 2016 13:04:51 -0600\"], [\"Message-Id\", \"<CABPem2N_Ucj3wRRZnLVpVF_fRjkTBXHZReZC3zY-hHsRa=T51g@samples.mailgun.com>\"], [\"Subject\", \"Message Routes\"], [\"To\", \"hook@sandboxdb91ab935a414789809f96c91229a0ee.mailgun.org\"], [\"Content-Type\", \"multipart/alternative; boundary=\\\"001a114490d2c5be3d05433e6d03\\\"\"]]\nrecipient: hook@sandboxdb91ab935a414789809f96c91229a0ee.mailgun.org\nsender: user@samples.mailgun.com\nsignature: 17436304dd4dd094e9b8c3addb975acc6297718da468c2900dac4a43787c97596\nstripped-html: <div dir=\"ltr\">Testing Mailgun&#39;s forwarded and stored message routes :)</div>\nstripped-signature:\nstripped-text: Testing Mailgun's forwarded and stored message routes :)\nsubject: Message Routes\ntimestamp: 1481310293\ntoken: a71d0000ed34da6768198da96f9daaf8fb98adbccfdbd2fdaf\n```\n\n----------------------------------------\n\nTITLE: Create Mailing List Response\nDESCRIPTION: Sample JSON response showing the structure of a newly created mailing list.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-mailinglists.rst#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"message\": \"Mailing list has been created\",\n    \"list\": {\n        \"created_at\": \"Tue, 06 Mar 2012 05:44:45 GMT\",\n        \"address\": \"dev@samples.mailgun.org\",\n        \"members_count\": 0,\n        \"description\": \"Mailgun developers list\",\n        \"name\": \"\"\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Adding Complaints with Mailgun API (URL)\nDESCRIPTION: This snippet shows the URL endpoint for adding a single complaint to the complaints list.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-suppressions.rst#2025-04-21_snippet_22\n\nLANGUAGE: url\nCODE:\n```\nPOST /<domain>/complaints\n```\n\n----------------------------------------\n\nTITLE: Response Structure for Listing Routes in JavaScript\nDESCRIPTION: Shows the JSON response structure when retrieving a list of routes from the Mailgun API. The response includes the total count of routes and an array of route objects with their details.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/user_manual.rst#2025-04-21_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"total_count\": 266,\n  \"items\": [\n      {\n          \"description\": \"Sample route\",\n          \"created_at\": \"Wed, 15 Feb 2012 12:58:12 GMT\",\n          \"actions\": [\n              \"forward(\\\"http://myhost.com/messages/\\\")\",\n              \"stop()\"\n          ],\n          \"priority\": 0,\n          \"expression\": \"match_recipient(\\\".*@samples.mailgun.org\\\")\",\n          \"id\": \"4f3babe4ba8a481c6400476a\"\n      }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Filtered and Grouped Spam Trap Query with URL Parameters\nDESCRIPTION: This snippet demonstrates a GET request for spam trap data grouped by IP and filtered by multiple IP addresses. It showcases the use of the groupby parameter and multiple ip filter parameters.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-spam-trap-monitoring.rst#2025-04-21_snippet_2\n\nLANGUAGE: url\nCODE:\n```\nGET /v1/spamtraps?start=2022-01-01&end=2022-01-31&groupby=ip&ip=208.75.123.183&ip=208.75.123.186\n```\n\n----------------------------------------\n\nTITLE: Fetching Inbox Results with cURL\nDESCRIPTION: Basic cURL command to retrieve inbox placement results attribute using API authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-results-attribute.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -G \\\n    https://api.mailgun.net/v4/inbox/results/a/ATTRIBUTE\n```\n\n----------------------------------------\n\nTITLE: Single Domain Response Example\nDESCRIPTION: Sample JSON response showing detailed domain information including DNS records and configuration.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-domains.rst#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"domain\": {\n        \"created_at\": \"Tue, 14 Jul 2015 19:13:04 GMT\",\n        \"id\": \"55a55f40803267158aa113e8\",\n        \"is_disabled\": false,\n        \"name\": \"samples.mailgun.org\",\n       \t\"require_tls\": false,\n        \"skip_verification\": false,\n        \"smtp_login\": \"postmaster@samples.mailgun.org\",\n        \"spam_action\": \"disabled\",\n        \"state\": \"active\",\n        \"type\": \"sandbox\",\n        \"web_prefix\": \"email\",\n        \"web_scheme\": \"http\",\n        \"wildcard\": false\n    },\n    \"receiving_dns_records\": [\n    {\n      \"priority\": \"10\",\n      \"record_type\": \"MX\",\n      \"valid\": \"valid\",\n      \"value\": \"mxa.mailgun.org\"\n    },\n    {\n      \"priority\": \"10\",\n      \"record_type\": \"MX\",\n      \"valid\": \"valid\",\n      \"value\": \"mxb.mailgun.org\"\n    }\n  ],\n  \"sending_dns_records\": [\n    {\n      \"record_type\": \"TXT\",\n      \"valid\": \"valid\",\n      \"name\": \"domain.com\",\n      \"value\": \"v=spf1 include:mailgun.org ~all\"\n    },\n    {\n      \"record_type\": \"TXT\",\n      \"valid\": \"valid\",\n      \"name\": \"domain.com\",\n      \"value\": \"k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUA....\"\n    },\n    {\n      \"record_type\": \"CNAME\",\n      \"valid\": \"valid\",\n      \"name\": \"email.domain.com\",\n      \"value\": \"mailgun.org\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Dedicated IPs using Python\nDESCRIPTION: Uses Python requests library to fetch dedicated IPs from Mailgun API. Requires requests library and API key.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-ips.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef get_ips():\n    return requests.get(\n        \"https://api.mailgun.net/v3/ips\",\n        params={\"dedicated\": \"true\"},\n        auth=(\"api\", \"YOUR_API_KEY\"))\n```\n\n----------------------------------------\n\nTITLE: Delivery Statistics Object Example (JavaScript)\nDESCRIPTION: Sample delivery statistics object that shows email placement results across different providers. The object includes metrics for delivered, missing, pending, spam, and inbox placement counts for each provider.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-inbox-placement.rst#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n\"delivery_stats\": {\n  \"all\": {\n    \"delivered\": 10,\n    \"missing\": 1,\n    \"pending\": 0,\n    \"spam\": 3,\n    \"inbox\": 6,\n    \"total\": 10,\n    \"provider\": \"all\"\n  },\n  \"yahoo.com\": {\n    \"delivered\": 4,\n    \"missing\": 1,\n    \"pending\": 0,\n    \"spam\": 0,\n    \"inbox\": 4,\n    \"total\": 5,\n    \"provider\": \"yahoo.com\"\n  },\n  \"gmail.com\": {\n    \"delivered\": 5,\n    \"missing\": 0,\n    \"pending\": 0,\n    \"spam\": 3,\n    \"inbox\": 2,\n    \"total\": 5,\n    \"provider\": \"gmail.com\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Single IP Response Example\nDESCRIPTION: Example JSON response showing details of a single IP address.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-ips.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"ip\": \"192.161.0.1\",\n  \"dedicated\": true,\n  \"rdns\": \"luna.mailgun.net\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Seed List with POST Request (URL)\nDESCRIPTION: API endpoint for generating a new seed list for inbox placement testing. The endpoint accepts parameters for naming the seed list and applying filters to addresses in the mailing list.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-inbox-placement.rst#2025-04-21_snippet_0\n\nLANGUAGE: url\nCODE:\n```\nPOST /v4/inbox/seedlists\n```\n\n----------------------------------------\n\nTITLE: Retrieving Single Unsubscribe Record Endpoint\nDESCRIPTION: GET endpoint to fetch a single unsubscribe record for a specific email address.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-unsubscribes.rst#2025-04-21_snippet_1\n\nLANGUAGE: url\nCODE:\n```\nGET /<domain>/unsubscribes/<address>\n```\n\n----------------------------------------\n\nTITLE: Email Validation API Base Endpoint\nDESCRIPTION: The base endpoint URL for the email validation API service.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-email-validation.rst#2025-04-21_snippet_0\n\nLANGUAGE: url\nCODE:\n```\nv4/address/validate\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Retrieving Active Template Version\nDESCRIPTION: Example JSON response when retrieving the active version of a template.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-templates.rst#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"template\": {\n      \"createdAt\": \"Wed, 29 Aug 2018 23:31:13 UTC\",\n      \"description\": \"template description\",\n      \"name\": \"template.name\",\n      \"version\": {\n          \"createdAt\": \"Wed, 29 Aug 2018 23:31:15 UTC\",\n          \"engine\": \"handlebars\",\n          \"tag\": \"v0\",\n          \"template\": \"{{fname}} {{lname}}\",\n          \"comment\": \"version comment\"\n      }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Empty Response for SMTP Credential Creation in JavaScript\nDESCRIPTION: Shows the beginning of a JSON response structure when creating new SMTP credentials through the Mailgun API. The full response is not provided in the documentation.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/user_manual.rst#2025-04-21_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\n\n```\n\n----------------------------------------\n\nTITLE: Curl Command for Mailgun Bulk Preview Promotion\nDESCRIPTION: Basic curl command to promote bulk preview validation using Mailgun's API with basic authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/put-bulk-preview.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -G \\\n    https://api.mailgun.net/v4/address/validate/preview/LIST_NAME\n```\n\n----------------------------------------\n\nTITLE: List Domain Keys Response\nDESCRIPTION: Sample JSON response when listing domain keys for a signing domain.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-domains.rst#2025-04-21_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\n{\n   \"items\": [\n      {\n         \"dns_record\": {\n            \"cached\": [\n               \"cached dns value\"\n            ],\n            \"is_active\": true,\n            \"name\": \"s1._domainkey.authority.domain.tld\",\n            \"record_type\": \"TXT\",\n            \"valid\": \"VALID\",\n            \"value\": \"expected dns value\"\n         },\n         \"selector\": \"s1\",\n         \"signing_domain\": \"authority.domain.tld\"\n      },\n      {\n         \"dns_record\": {\n            \"cached\": [\n               \"cached dns value\"\n            ],\n            \"is_active\": false,\n            \"name\": \"s2._domainkey.authority.domain.tld\",\n            \"record_type\": \"TXT\",\n            \"valid\": \"UNKNOWN\",\n            \"value\": \"expected dns value\"\n         },\n         \"selector\": \"s2\",\n         \"signing_domain\": \"authority.domain.tld\"\n      }\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: List Connection Settings Response\nDESCRIPTION: Sample JSON response showing domain connection settings.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-domains.rst#2025-04-21_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\n{\n   \"connection\": {\n     \"require_tls\": false,\n     \"skip_verification\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Mailgun Template using C#\nDESCRIPTION: C# class that demonstrates using RestSharp to delete a Mailgun template. Configures a REST client with basic authentication and executes a DELETE request to the templates endpoint.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/template-delete.rst#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class DeleteTemplate\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (DeleteTemplate ().Content.ToString ());\n    }\n\n    public static IRestResponse DeleteTemplate ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.AddParameter (\"domain\", \"YOUR_DOMAIN_NAME\", ParameterType.UrlSegment);\n        request.Resource = \"{domain}/templates/{name}\";\n        request.AddUrlSegment (\"name\", \"TEMPLATE_NAME\");\n        request.Method = Method.DELETE;\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Certificate Paths for Postfix\nDESCRIPTION: TLS certificate file path configuration for Postfix when using encryption with Mailgun SMTP relay. Specifies the locations of the key file, certificate file, and CA certificate path.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/user_manual.rst#2025-04-21_snippet_49\n\nLANGUAGE: config\nCODE:\n```\nsmtpd_tls_key_file = /etc/ssl/private/smtpd.key\nsmtpd_tls_cert_file = /etc/ssl/certs/smtpd.crt\nsmtpd_tls_CApath = /etc/ssl/certs\n```\n\n----------------------------------------\n\nTITLE: Email Validation Response without Mailbox Verification\nDESCRIPTION: Sample JSON response from the email validation API when mailbox verification is not enabled. It includes various validation checks and parsed email parts.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-email-validation-deprecated.rst#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"address\": \"foo@mailgun.net\",\n  \"did_you_mean\": null,\n  \"is_disposable_address\": false,\n  \"is_role_address\": false,\n  \"is_valid\": true,\n  \"mailbox_verification\": null,\n  \"parts\": {\n      \"display_name\": null,\n      \"domain\": \"mailgun.net\",\n      \"local_part\": \"foo\"\n  },\n  \"reason\": null\n}\n```\n\n----------------------------------------\n\nTITLE: List Domain IPs Response Example\nDESCRIPTION: Example JSON response showing IPs assigned to a specific domain.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-ips.rst#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"items\": [\"192.161.0.1\", \"192.168.0.2\"],\n  \"total_count\": 2\n}\n```\n\n----------------------------------------\n\nTITLE: Update Template Version Response - Mailgun API\nDESCRIPTION: Sample JSON response after successfully updating a template version.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-templates.rst#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n{\n   \"template\": {\n       \"name\": \"template.name\",\n       \"version\": {\n         \"tag\": \"v1.2.0\"\n       }\n    \"message\": \"version has been updated\"\n }\n```\n\n----------------------------------------\n\nTITLE: Mailgun Events API Failure Response Example\nDESCRIPTION: Example JSON response from Mailgun's Events API showing a failed message delivery event with details about the failure reason, message content, and envelope information.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-events.rst#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"items\": [\n      {\n        \"severity\": \"temporary\",\n        \"tags\": [],\n        \"id\": \"czsjqFATSlC3QtAK-C80nw\",\n        \"envelope\": {\n          \"sender\": \"me@samples.mailgun.org\",\n          \"transport\": \"\"\n        },\n        \"delivery-status\": {\n          \"code\": 498,\n          \"message\": \"No MX for [example.com]\",\n          \"retry-seconds\": 900,\n          \"description\": \"No MX for [example.com]\"\n        },\n        \"campaigns\": [],\n        \"reason\": \"generic\",\n        \"user-variables\": {},\n        \"flags\": {\n          \"is-authenticated\": true,\n          \"is-test-mode\": false\n        },\n        \"timestamp\": 1376435471.10744,\n        \"message\": {\n          \"headers\": {\n            \"to\": \"baz@example.com, bar@example.com\",\n            \"message-id\": \"20130813230036.10303.40433@samples.mailgun.org\",\n            \"from\": \"Excited User <me@samples.mailgun.org>\",\n            \"subject\": \"Hello\"\n          },\n          \"attachments\": [],\n          \"recipients\": [\n            \"baz@example.com\",\n            \"bar@example.com\"\n          ],\n          \"size\": 370\n        },\n        \"recipient\": \"bar@example.com\",\n        \"event\": \"failed\"\n      }\n    ],\n    \"paging\": {\n      \"next\": \"https://api.mailgun.net/v3/samples.mailgun.org/events/W3siY...\",\n      \"previous\": \"https://api.mailgun.net/v3/samples.mailgun.org/events/Lkawm...\"\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Update Click Tracking Settings Endpoint\nDESCRIPTION: PUT endpoint to update click tracking settings\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-domains.rst#2025-04-21_snippet_14\n\nLANGUAGE: url\nCODE:\n```\nPUT /domains/<domain>/tracking/click\n```\n\n----------------------------------------\n\nTITLE: Creating Inbox Placement Test with Java using Unirest\nDESCRIPTION: This code shows how to create an inbox placement test using Java with the Unirest HTTP library. It authenticates with the Mailgun API and sends the required fields for the test including subject, sender information, and HTML content.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/create-inbox-placement-test.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mashape.unirest.http.HttpResponse;\nimport com.mashape.unirest.http.JsonNode;\nimport com.mashape.unirest.http.Unirest;\nimport com.mashape.unirest.http.exceptions.UnirestException;\n\npublic class MGSample {\n\n    // ...\n\n    public static JsonNode createInboxPlacementTest() throws UnirestException {\n\n        HttpResponse <JsonNode> request = Unirest.post(\"https://api.mailgun.net/v4/inbox/tests\")\n            .basicAuth(\"api\", API_KEY)\n            .field(\"subject\", \"testSubject\")\n            .field(\"from\", \"Sample User <user@domain.com>\")\n            .field(\"html\", \"<html>HTML version of the body</html>\")\n            .asJson();\n\n        return request.getBody();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Structure for Handlebars 'each' Helper (JavaScript)\nDESCRIPTION: Example JSON payload structure that works with the 'each' helper, containing a user object with an array of service items each having date and service properties.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/user_manual.rst#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{\n \"user\":\n {\n    \"services\":\n    [\n       {\n          \"date\":\"07/30/2019\",\n          \"service\":\"deliverability consultation\"\n       },\n       {\n          \"date\":\"08/05/2019\",\n          \"service\":\"sales consultation\"\n       }\n    ]\n }\n}\n```\n\n----------------------------------------\n\nTITLE: RST Table of Contents Definition for Mailgun Documentation\nDESCRIPTION: This code snippet defines the table of contents for Mailgun documentation using reStructuredText (RST) format. It organizes the documentation into sections like Quickstart Guide, user manual, libraries, API references, and best practices.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   Quickstart Guide <quickstart>\n   user_manual\n   libraries\n   api_reference\n   inboxready_api_reference\n   faqs\n   best_practices\n```\n\n----------------------------------------\n\nTITLE: Retrieving Dedicated IPs using Ruby\nDESCRIPTION: Implements IP retrieval using Ruby RestClient. Requires RestClient gem and API key.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-ips.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef get_ips\n  RestClient.get(\"https://api:YOUR_API_KEY\"\\\n                 \"@api.mailgun.net/v3/ips?dedicated=true\"\\\n                 {|response, request, result| response }\nend\n```\n\n----------------------------------------\n\nTITLE: Mailgun Click Webhook JavaScript Library Deprecation Notice\nDESCRIPTION: This note indicates that the webhook update feature is deprecated and not supported in the JavaScript library for Mailgun.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/update-webhook-deprecated.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// This feature is deprecated and not supported in the js library\n```\n\n----------------------------------------\n\nTITLE: Parsing Email Addresses with Mailgun API in JavaScript (Deprecated)\nDESCRIPTION: This snippet indicates that the email address parsing feature is deprecated and not supported in the JavaScript library for Mailgun.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-parse.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// This feature is deprecated and not supported in the js library\n```\n\n----------------------------------------\n\nTITLE: Update Webhook - API Endpoint\nDESCRIPTION: API endpoint to update an existing webhook for a domain. Requires domain name, webhook name, and can accept up to 3 URLs for the webhook event.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-webhooks.rst#2025-04-21_snippet_4\n\nLANGUAGE: url\nCODE:\n```\nPUT /domains/<domain>/webhooks/<webhookname>\n```\n\n----------------------------------------\n\nTITLE: Routed Accepted Event JSON Structure\nDESCRIPTION: Example of a JSON response for a routed accepted message, including routing rules and matched recipients.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-events.rst#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"event\": \"accepted\",\n  \"id\": \"cWgTfzV6QQiXY4PqhlLClw\",\n  \"timestamp\": 1529692198.719447,\n  \"log-level\": \"info\",\n  \"method\": \"smtp\",\n  \"routes\": [\n    {\n      \"expression\": \"match_recipient(\\\"team@example.org\\\")\",\n      \"id\": \"5b295a4aa4764a000108508c\",\n      \"match\": {\n        \"recipient\": \"team@example.org\"\n      }\n    }\n  ],\n  \"envelope\": {\n    \"sender\": \"sender@example.org\",\n    \"transport\": \"smtp\",\n    \"targets\": \"john@example.com\"\n  },\n  \"flags\": {\n    \"is-routed\": true,\n    \"is-authenticated\": false,\n    \"is-system-test\": false,\n    \"is-test-mode\": false\n  },\n  \"message\": {\n    \"headers\": {\n      \"to\": \"team@example.org\",\n      \"message-id\": \"20180622182958.1.48906CB188F1A454@exmple.org\",\n      \"from\": \"sender@exmple.org\",\n      \"subject\": \"Test Subject\"\n    },\n    \"attachments\": [],\n    \"recipients\": [\n      \"team@example.org\"\n    ],\n    \"size\": 586\n  },\n  \"storage\": {\n    \"url\": \"https://se.api.mailgun.net/v3/domains/example.org/messages/eyJwI...\",\n    \"key\": \"eyJwI...\"\n  },\n  \"recipient\": \"john@example.com\",\n  \"recipient-domain\": \"example.com\",\n  \"campaigns\": [],\n  \"tags\": [],\n  \"user-variables\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Single Webhook Response Format\nDESCRIPTION: Sample JSON response for the GET single webhook request, showing the structure of the returned data for a specific webhook type.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-webhooks.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"webhook\": {\n    \"urls\": [ \"https://your_domain.com/v1/clicked\" ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Bulk Email Validation Preview with Python\nDESCRIPTION: Python implementation for creating a bulk email validation preview list using the requests library. This function uploads a file to the Mailgun API endpoint with basic authentication using the API key.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/create-bulk-preview.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef create_bulk_preview():\n    return requests.post(\n        \"https://api.mailgun.net/v4/address/validate/preview/LIST_NAME\",\n        files = {'file': open('/path/to/file','rb')},\n        auth=('api', 'YOUR_API_KEY'))\n```\n\n----------------------------------------\n\nTITLE: Using match_recipient Filter with Wildcard Domain Pattern\nDESCRIPTION: Matches all email messages sent to any recipient at a specific domain using a regular expression pattern. This example matches all messages to any address at bar.com.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/user_manual.rst#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nmatch_recipient(\".*@bar.com\")\n```\n\n----------------------------------------\n\nTITLE: Remove Mailing List Response\nDESCRIPTION: API response confirming the deletion of an entire mailing list.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-mailinglists.rst#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"message\": \"Mailing list has been deleted\",\n  \"address\": \"dev@samples.mailgun.org\"\n}\n```\n\n----------------------------------------\n\nTITLE: List SMTP Credentials Response\nDESCRIPTION: Sample JSON response when listing all SMTP credentials for a domain.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-domains.rst#2025-04-21_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\n{\n   \"total_count\": 2,\n   \"items\": [\n     {\n       \"size_bytes\": 0,\n       \"created_at\": \"Tue, 27 Sep 2011 20:24:22 GMT\",\n       \"mailbox\": \"user@samples.mailgun.org\",\n       \"login\": \"user@samples.mailgun.org\"\n     },\n     {\n       \"size_bytes\": 0,\n       \"created_at\": \"Thu, 06 Oct 2011 10:22:36 GMT\",\n       \"mailbox\": \"user@samples.mailgun.org\",\n       \"login\": \"user@samples.mailgun.org\"\n     }\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Email Template using Ruby\nDESCRIPTION: This Ruby function demonstrates how to create a new email template using the RestClient library. It sends a POST request to the Mailgun API with the template name and description.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/template-create.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef store_template\n  RestClient.post \"https://api:YOUR_API_KEY\"\\\n  \"@api.mailgun.net/v3/YOUR_DOMAIN_NAME/templates\",\n  :name=> 'template.name',\n  :description: => 'template description'\nend\n```\n\n----------------------------------------\n\nTITLE: Deleting All Templates (DELETE Request)\nDESCRIPTION: API endpoint for deleting all stored templates for a domain.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-templates.rst#2025-04-21_snippet_13\n\nLANGUAGE: url\nCODE:\n```\nDELETE /<domain>/templates\n```\n\n----------------------------------------\n\nTITLE: Parsing Email Open Event JSON in JavaScript\nDESCRIPTION: This snippet demonstrates the JSON structure for an email open event. It includes details like geolocation, client information, and message headers.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-events.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"event\": \"opened\",\n  \"id\": \"-laxIqj9QWubsjY_3pTq_g\",\n  \"timestamp\": 1377047343.042277,\n  \"log-level\": \"info\",\n  \"recipient\": \"recipient@example.com\",\n  \"geolocation\": {\n    \"country\": \"US\",\n    \"region\": \"Texas\",\n    \"city\": \"Austin\"\n  },\n  \"tags\": [],\n  \"campaigns\": [],\n  \"user-variables\": {},\n  \"ip\": \"111.111.111.111\",\n  \"client-info\": {\n    \"client-type\": \"mobile browser\",\n    \"client-os\": \"iOS\",\n    \"device-type\": \"mobile\",\n    \"client-name\": \"Mobile Safari\",\n    \"user-agent\": \"Mozilla/5.0 (iPhone; CPU iPhone OS 6_1 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Mobile/10B143\",\n    \"bot\": \"\"\n  },\n  \"message\": {\n    \"headers\": {\n      \"message-id\": \"20130821005614.19826.35976@samples.mailgun.org\"\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Mailbox Response Example\nDESCRIPTION: Sample JSON response for successful mailbox deletion.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-mailboxes.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{\n   \"message\": \"Mailbox has been deleted\",\n   \"spec\": \"alice@samples.mailgun.org\"\n }\n```\n\n----------------------------------------\n\nTITLE: PHP cURL Implementation for Domain Tag Limits\nDESCRIPTION: PHP implementation using cURL to fetch domain tag limits. Direct HTTP implementation since SDK doesn't support this feature.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-limits.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Currently, the PHP SDK does not support Domain Tag limits.\n# Consider using the following php curl function.\nfunction get_domain_tag_limit() {\n  $ch = curl_init();\n\n  curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);\n  curl_setopt($ch, CURLOPT_USERPWD, 'api:PRIVATE_API_KEY');\n  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n\n  curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\n  curl_setopt($ch, CURLOPT_URL, 'https://api.mailgun.net/v3/domains/YOUR_DOMAIN_NAME/limits/tag');\n\n  $result = curl_exec($ch);\n  curl_close($ch);\n\n  return $result;\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Complaint Event JSON in JavaScript\nDESCRIPTION: This snippet shows the JSON structure for a complaint event. It includes recipient information, message headers, and event flags.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-events.rst#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"event\": \"complained\",\n  \"id\": \"ncV2XwymRUKbPek_MIM-Gw\",\n  \"timestamp\": 1377214260.049634,\n  \"log-level\": \"warn\",\n  \"recipient\": \"foo@example.com\",\n  \"tags\": [],\n  \"campaigns\": [],\n  \"user-variables\": {},\n  \"flags\": {\n    \"is-test-mode\": false\n  },\n  \"message\": {\n    \"headers\": {\n      \"to\": \"foo@example.com\",\n      \"message-id\": \"20130718032413.263EE2E0926@example.com\",\n      \"from\": \"John Doe <sender@example.com>\",\n      \"subject\": \"This is the subject.\"\n    },\n    \"attachments\": [],\n    \"size\": 18937\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Bounce List Response Structure in Mailgun API\nDESCRIPTION: Illustrates the expected JSON response structure when fetching the bounces list. Includes an array of bounce items and pagination information.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-suppressions.rst#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n200\n{\n  \"items\":\n    [\n      {\n        \"address\": \"alice@example.com\",\n        \"code\": \"550\",\n        \"error\": \"No such mailbox\",\n        \"created_at\": \"Fri, 21 Oct 2011 11:02:55 GMT\"\n      },\n      ...\n    ],\n  \"paging\":\n    {\n      \"first\": <first page URL>,\n      \"next\": <next page URL>,\n      \"previous\": <previous page URL>,\n      \"last\": <last page URL>\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Spam Complaints List Response in Mailgun API\nDESCRIPTION: Example JSON response for fetching the list of spam complaints. Includes total count, individual complaint details with count, creation date, and email address.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-complaints.rst#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"total_count\": 1,\n  \"items\": [\n      {\n          \"count\": 2,\n          \"created_at\": \"Tue, 15 Nov 2011 08:25:11 GMT\",\n          \"address\": \"baz@example.com\"\n      }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: List IPs Response Example\nDESCRIPTION: Example JSON response showing list of IP addresses assigned to the account.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-ips.rst#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"items\": [\"192.161.0.1\", \"192.168.0.2\"],\n  \"total_count\": 2\n}\n```\n\n----------------------------------------\n\nTITLE: Canceling Bulk Validation Job in Java\nDESCRIPTION: This Java code snippet shows how to cancel a bulk email validation job using the Mailgun Java SDK. It creates a MailgunEmailVerificationApi instance and calls the cancelBulkVerificationJob method.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/delete-bulk-validation.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v4.MailgunEmailVerificationApi;\nimport com.mailgun.client.MailgunClient;\n\n// ...\n\npublic String cancelBulkVerificationJob() {\n    MailgunEmailVerificationApi mailgunEmailVerificationApi = MailgunClient.config(API_KEY)\n            .createApi(MailgunEmailVerificationApi.class);\n\n    return mailgunEmailVerificationApi.cancelBulkVerificationJob(LIST_NAME);\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Deleting Template\nDESCRIPTION: Example JSON response when deleting a template.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-templates.rst#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"template\": {\n      \"name\": \"template.name\"\n  },\n  \"message\": \"template has been deleted\"\n}\n```\n\n----------------------------------------\n\nTITLE: Stats API Response Format\nDESCRIPTION: Example JSON response showing statistics for accepted, delivered and failed events over a monthly period.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-stats.rst#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"end\": \"Fri, 01 Apr 2012 00:00:00 UTC\",\n  \"resolution\": \"month\",\n  \"start\": \"Tue, 14 Feb 2012 00:00:00 UTC\",\n  \"stats\": [\n    {\n      \"time\": \"Tue, 14 Feb 2012 00:00:00 UTC\",\n      \"accepted\": {\n        \"outgoing\": 10,  // authenticated\n        \"incoming\": 5,   // unauthenticated\n        \"total\": 15\n      },\n      \"delivered\": {\n          \"smtp\": 15,  // delivered over SMTP\n          \"http\": 5,   // delivered over HTTP\n          \"total\": 20\n      },\n      \"failed\": {\n        \"permanent\": {\n          \"bounce\": 4,\n          \"delayed-bounce\": 1,\n          \"suppress-bounce\": 1,       // recipients previously bounced\n          \"suppress-unsubscribe\": 2,  // recipients previously unsubscribed\n          \"suppress-complaint\": 3,    // recipients previously complained\n          \"total\": 10                 // failed permanently and dropped\n        },\n        \"temporary\": {\n          \"espblock\": 1,   // failed temporary due to ESP block, will be retried\n          \"total\": 1\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Deactivate Domain Key Response\nDESCRIPTION: Sample JSON response when deactivating a domain key.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-domains.rst#2025-04-21_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\n{\n   \"active\": true,\n   \"authority\": \"authority.domain.tld\",\n   \"message\": \"domain key deactivated\",\n   \"selector\": \"selector\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Mailing List Members using Ruby\nDESCRIPTION: Implements RestClient in Ruby to fetch mailing list members from Mailgun API.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-list-members.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef list_members\n  RestClient.get(\"https://api:YOUR_API_KEY\" \\\n                 \"@api.mailgun.net/v3/lists/LIST@YOUR_DOMAIN_NAME/members/pages\")\nend\n```\n\n----------------------------------------\n\nTITLE: Update Webhook Response Format\nDESCRIPTION: Sample JSON response after successfully updating an existing webhook, showing the confirmation message and the updated webhook details.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-webhooks.rst#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"message\": \"Webhook has been updated\",\n  \"webhook\": {\n    \"urls\": [ \"https://your_domain.com/v1/clicked\" ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Blocklist Events\nDESCRIPTION: GET endpoint to retrieve blocklisted and delisted event data for monitored IP addresses with filtering options.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-blocklist-monitoring.rst#2025-04-21_snippet_5\n\nLANGUAGE: url\nCODE:\n```\nGET /v1/blocklist-monitoring/events\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"items\": [\n    {\n      \"ip\": \"123.123.123.123\",\n      \"ip_pool\": \"\",\n      \"timestamp\": \"2022-01-01T12:14:16-04:00\",\n      \"event\": \"ip_delisted\",\n      \"blocklist\": \"pbl.spamhaus.org\"\n    },\n    {\n      \"ip\": \"123.123.123.123\",\n      \"ip_pool\": \"\",\n      \"timestamp\": \"2022-01-01T12:12:12-04:00\",\n      \"event\": \"ip_listed\",\n      \"blocklist\": \"pbl.spamhaus.org\"\n    }\n  ],\n  \"paging\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Response Format for Domain Removal\nDESCRIPTION: JSON response structure after successfully removing a domain from monitoring services.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-inboxready-domains.rst#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"message\": \"example.com has been removed from InboxReady\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting All Templates Using Go (Not Implemented)\nDESCRIPTION: Go implementation for deleting all templates is not available in this documentation.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/template-delete-all.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// Not implemented\n```\n\n----------------------------------------\n\nTITLE: Remove IP Success Response\nDESCRIPTION: Example JSON response for successful IP removal from domain.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-ips.rst#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"message\": \"success\"\n}\n```\n\n----------------------------------------\n\nTITLE: Update Mailbox Password using PHP\nDESCRIPTION: PHP implementation using the official Mailgun SDK to update a mailbox password. Requires the Mailgun PHP library installed via Composer.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/change-mailbox-password.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Include the Autoloader (see \"Libraries\" for install instructions)\nrequire 'vendor/autoload.php';\nuse Mailgun\\Mailgun;\n\n# Instantiate the client.\n$mgClient = new Mailgun('YOUR_API_KEY');\n$domain = 'YOUR_DOMAIN_NAME';\n$mailbox = 'alice';\n\n# Issue the call to the client.\n$result = $mgClient->put(\"$domain/mailboxes/$mailbox\", array(\n    'password' => 'supersecret'\n));\n```\n\n----------------------------------------\n\nTITLE: Building Sphinx Documentation Locally\nDESCRIPTION: Command to build the documentation locally using Sphinx. Generates HTML files in the build directory from source files.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsphinx-build source build\n```\n\n----------------------------------------\n\nTITLE: Tag Unsubscribe Response Example\nDESCRIPTION: Example JSON response when unsubscribing an address from a specific tag.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-unsubscribes.rst#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"message\": \"Address has been added to the unsubscribes table\",\n    \"address\": \"bob@example.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Spam Complaint in Mailgun API\nDESCRIPTION: DELETE request to remove a given spam complaint from the system.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-complaints.rst#2025-04-21_snippet_3\n\nLANGUAGE: url\nCODE:\n```\nDELETE /<domain>/complaints/<address>\n```\n\n----------------------------------------\n\nTITLE: Cancel List Verification Response\nDESCRIPTION: Response confirming the cancellation of a list verification job.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-mailinglists.rst#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"message\": \"Validation job canceled.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Python Whitelist Retrieval\nDESCRIPTION: Simple Python function using requests library to fetch whitelist data from Mailgun API.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-whitelists.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef get_whitelists():\n    return requests.get(\n        \"https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/whitelists\",\n        auth=(\"api\", \"YOUR_API_KEY\"))\n```\n\n----------------------------------------\n\nTITLE: Failed Event JSON Structure (Delayed Bounce)\nDESCRIPTION: Example of a JSON response for a permanently failed message with delayed bounce, including enhanced error codes and bounce details.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-events.rst#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n \"severity\": \"permanent\",\n \"timestamp\": 1666214138.4046676,\n \"storage\": {\n    \"url\": \"https://storage-us-east4.api.mailgun.net/v3/domains/...\",\n    \"region\": \"us-east4\",\n    \"key\": \"AwABB...\",\n    \"env\": \"production\"\n },\n \"delivery-status\": {\n    \"bounce-code\": \"5.1.1\",\n    \"message\": \"smtp; 550-5.1.1 The email account that you tried to reach does not exist.\",\n    \"code\": 550,\n    \"description\": \"I'm sorry to have to inform you that your message could not be delivered to one or more recipients.\",\n    \"enhanced-code\": \"5.1.1\"\n },\n \"log-level\": \"error\",\n \"id\": \"ZDMqRgjLTDi6rQcy7K60aA\",\n \"reason\": \"generic\",\n \"user-variables\": {},\n \"flags\": {\n    \"is-delayed-bounce\": true\n },\n \"envelope\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Mailing List using PHP\nDESCRIPTION: PHP implementation using Mailgun PHP SDK to delete a mailing list. Requires Composer and Mailgun PHP library.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/remove-mailing-list.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Include the Autoloader (see \"Libraries\" for install instructions)\nrequire 'vendor/autoload.php';\nuse Mailgun\\Mailgun;\n\n# Instantiate the client.\n$mgClient = Mailgun::create('PRIVATE_API_KEY', 'https://API_HOSTNAME');\n$mailing_list = 'LIST@YOUR_DOMAIN_NAME';\n\n# Issue the call to the client.\n$result = $mgClient->mailingList()->delete($mailing_list);\n```\n\n----------------------------------------\n\nTITLE: Go Whitelist Implementation\nDESCRIPTION: Go implementation placeholder for Mailgun whitelist API.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-whitelists.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// Not supported yet\n```\n\n----------------------------------------\n\nTITLE: Constructing Mailgun Suppressions API URL\nDESCRIPTION: Demonstrates the base URL structure for accessing the Mailgun suppressions API endpoints. The URL includes the API version and domain placeholder.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-suppressions.rst#2025-04-21_snippet_0\n\nLANGUAGE: url\nCODE:\n```\nv3/<domain>/bounces\n```\n\n----------------------------------------\n\nTITLE: Creating Seed List using Java\nDESCRIPTION: Java implementation using Mailgun's official SDK to create a seed list. Uses builder pattern for request construction and requires Mailgun client dependency.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/create-seed-list.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v4.MailgunSeedListApi;\nimport com.mailgun.client.MailgunClient;\nimport com.mailgun.model.seedlist.SeedListItem;\nimport com.mailgun.model.seedlist.SeedListRequest;\nimport java.util.List;\n\n// ...\n\npublic SeedListItem createSeedList() {\n    MailgunSeedListApi mailgunSeedListApi = MailgunClient.config(API_KEY)\n            .createApi(MailgunSeedListApi.class);\n\n    SeedListRequest request = SeedListRequest.builder()\n            .seedFilter(SEED_FILTER)\n            .name(SEED_LIST_NAME)\n            .build();\n\n    return mailgunSeedListApi.generateSeedList(request);\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Tags Using curl in Bash\nDESCRIPTION: This snippet demonstrates how to delete a tag named 'newsletter' using a curl command with HTTP basic authentication. It requires your Mailgun API key and domain name to authenticate the request.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/tags/delete-tag.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -X DELETE \\\n    https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/tags/newsletter\n```\n\n----------------------------------------\n\nTITLE: Creating Webhook Alert Settings\nDESCRIPTION: JSON payload structure for configuring webhook-based alerts with a URL endpoint\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-deliverability-alerts.rst#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"settings\": {\n    \"url\": \"https://yourwebhookurl.com\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Webhook using Java\nDESCRIPTION: Java implementation using Mailgun's official SDK to delete a webhook. Uses MailgunWebhooksApi class with domain name and webhook type specification.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/delete-webhook-deprecated.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.MailgunWebhooksApi;\nimport com.mailgun.enums.WebhookName;\nimport com.mailgun.model.webhooks.WebhookResult;\n\n// ...\n\npublic WebhookResult deleteWebhook() {\n    MailgunWebhooksApi mailgunWebhooksApi = MailgunClient.config(API_KEY).createApi(MailgunWebhooksApi.class);\n\n    return mailgunWebhooksApi.deleteWebhook(YOUR_DOMAIN_NAME, WebhookName.CLICKED);\n}\n```\n\n----------------------------------------\n\nTITLE: Decoding Quoted-Printable in Python\nDESCRIPTION: Utilizes Python's built-in quopri module to decode quoted-printable messages. No additional dependencies required.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/decode-quoted-printable.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport quopri\n\n# ...\ndecoded_message = quopri.decodestring(encoded_message)\n```\n\n----------------------------------------\n\nTITLE: Using the Unless Block Helper in Handlebars Templates\nDESCRIPTION: Example of using the 'unless' block helper in Handlebars templates, which renders content only when the specified condition is false.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/user_manual.rst#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{{#unless paid}}\n```\n\n----------------------------------------\n\nTITLE: Deactivating Domain Key using Go\nDESCRIPTION: Go implementation with custom response type and error handling. Uses http.Client for making the request.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/deactivate-domain-key.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"encoding/json\"\n    \"fmt\"\n\t\"net/http\"\n)\n\ntype DeactivateDomainKeyResp struct {\n\tMsg       string `json:\"message\"`\n\tAuthority string `json:\"authority\"`\n\tSelector  string `json:\"selector\"`\n\tActive    bool   `json:\"active\"`\n}\n\nfunc DeactivateDomainKey() (deactivateDomainKeyResp DeactivateDomainKeyResp, err error) {\n   authority := \"AUTHORITY_DOMAIN_NAME\"\n   selector := \"SELECTOR\"\n\n\tclient := &http.Client{}\n\treq, _ := http.NewRequest(\"GET\", fmt.Sprintf(\"https://api.mailgun.net/v4/domains/%s/keys/%s/deactivate\", authority, selector), nil)\n\treq.SetBasicAuth(\"api\", apiKey)\n\tresponse, err := client.Do(req)\n\tif err != nil {\n\t\treturn\n\t}\n\tdefer response.Body.Close()\n\n\t// Decode response.\n\terr = json.NewDecoder(response.Body).Decode(&activateDomainKeyResp)\n\treturn\n }\n```\n\n----------------------------------------\n\nTITLE: Deleting Tags Using JavaScript Mailgun.js\nDESCRIPTION: This JavaScript example demonstrates how to delete a tag using the mailgun.js library. It creates a Mailgun client with your API key, then calls the destroy method on domainTags with your domain and tag name in an async function.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/tags/delete-tag.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst DOMAIN = 'YOUR_DOMAIN_NAME';\n\nimport formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\nconst client = mailgun.client({ username: 'api', key: 'YOUR_API_KEY' || '' });\n(async () => {\n  try {\n    const deletedTag = await client.domains.domainTags.destroy(DOMAIN, 'YOUR_TAG_NAME');\n    console.log('deletedTag', deletedTag);\n  } catch (error) {\n    console.error(error);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: GET Bulk Validation Job Status Endpoint\nDESCRIPTION: Endpoint to check the current status of a specific bulk validation job\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-email-validation.rst#2025-04-21_snippet_10\n\nLANGUAGE: url\nCODE:\n```\nGET /v4/address/validate/bulk/<list_id>\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents in reStructuredText for Mailgun API Documentation\nDESCRIPTION: This snippet defines the structure of the Mailgun API documentation using reStructuredText format. It creates a table of contents (toctree) that links to various sections of the API documentation.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api_reference.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _api-reference:\n\nMailgun API Reference\n#####################\n\n.. toctree::\n\n   api-intro\n   api-sending\n   api-domains\n   secure-tracking\n   api-ips\n   api-ip-pools\n   api-events\n   api-stats\n   api-tags\n   api-suppressions\n   api-routes\n   api-webhooks\n   api-mailinglists\n   api-templates\n   subaccounts\n   api-email-validation\n```\n\n----------------------------------------\n\nTITLE: Email Validation Response with Mailbox Verification\nDESCRIPTION: Sample JSON response from the email validation API when mailbox verification is enabled. It includes additional mailbox verification results.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-email-validation-deprecated.rst#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"address\": \"foo@mailgun.net\",\n    \"did_you_mean\": null,\n    \"is_disposable_address\": false,\n    \"is_role_address\": true,\n    \"is_valid\": true,\n    \"mailbox_verification\": \"true\",\n    \"parts\": {\n        \"display_name\": null,\n        \"domain\": \"mailgun.net\",\n        \"local_part\": \"foo\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Mailgun Webhooks using Go\nDESCRIPTION: Shows how to create a webhook for 'clicked' events using the Mailgun Go SDK. The function uses a context with timeout to send a request to create a webhook that will forward click event data to the specified URL.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/add-webhook-deprecated.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/mailgun/mailgun-go/v3\"\n    \"time\"\n)\n\nfunc CreateWebhook(domain, apiKey string) error {\n    mg := mailgun.NewMailgun(domain, apiKey)\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    return mg.CreateWebhook(ctx, \"clicked\", []string{\"https://your_domain.com/v1/clicked\"})\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Tags Using PHP Mailgun SDK\nDESCRIPTION: This PHP snippet shows how to delete a tag using the Mailgun PHP SDK. It instantiates a Mailgun client with your private API key, then calls the delete method from the tags API with your domain name and tag name.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/tags/delete-tag.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Include the Autoloader (see \"Libraries\" for install instructions)\nrequire 'vendor/autoload.php';\nuse Mailgun\\Mailgun;\n\n# Instantiate the client.\n$mgClient = Mailgun::create('PRIVATE_API_KEY', 'https://API_HOSTNAME');\n$domain = 'YOUR_DOMAIN_NAME';\n$tag    = 'my_tag';\n\n# Issue the call to the client.\n$result = $mgClient->tags()->delete($domain, $tag);\n```\n\n----------------------------------------\n\nTITLE: Inbox Placement Test Results Object (JavaScript)\nDESCRIPTION: Example of a results object that summarizes an individual Inbox Placement test. It includes the result ID, email subject, sender address, and aggregated delivery statistics.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-inbox-placement.rst#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"result_id\": \"12345678-1234-1234-1234-123456789012\",\n  \"subject\": \"IBP Test - 1\",\n  \"sender\": \"generated@yourdomain.com\",\n  \"delivery_stats\": {\n    \"all\": {\n      \"delivered\": 7,\n      \"missing\": 0,\n      \"pending\": 0,\n      \"spam\": 2,\n      \"inbox\": 5,\n      \"total\": 7,\n      \"provider\": \"all\",\n      \"categories\": {}\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Messages with Templates using Mailgun Ruby SDK\nDESCRIPTION: This Ruby function shows how to send a message with a template using the Mailgun Ruby SDK. It demonstrates setting up the API request with the necessary parameters, including template variables, and sending the message.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/send-message-by-template-id.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef send_message_by_template_id\n  RestClient.post \"https://api:YOUR_API_KEY\"\\\n  \"@api.mailgun.net/v3/YOUR_DOMAIN_NAME/messages\",\n  :from => \"Excited User <YOU@YOUR_DOMAIN_NAME>\",\n  :to => \"bar@example.com, baz@example.com\",\n  :subject => \"Hello\",\n  :template => \"template.test\",\n  :\"t:variables\" => '{\"title\": \"API Documentation\", \"body\": \"Sending messages with template\"}'\nend\n```\n\n----------------------------------------\n\nTITLE: API Endpoint for Webhooks in Mailgun\nDESCRIPTION: The base URL endpoint for accessing webhooks in Mailgun's API. This endpoint is used to manage webhooks for a specific domain.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-webhooks.rst#2025-04-21_snippet_0\n\nLANGUAGE: url\nCODE:\n```\nv3/domains/<domain>/webhooks\n```\n\n----------------------------------------\n\nTITLE: Ruby Implementation for Inbox Filters\nDESCRIPTION: Ruby function using RestClient to fetch inbox placement filters with API key authentication.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-results-filters.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef get_results_filters\n  RestClient.get(\"https://api:YOUR_API_KEY\"\\\n                 \"@api.mailgun.net/v4/inbox/results/_filters\"\\\n                 {|response, request, result| response }\nend\n```\n\n----------------------------------------\n\nTITLE: RST Raw HTML Inclusion for API Changelog Widget\nDESCRIPTION: This commented-out snippet would include an API changelog widget from apichangelog.com. The script is currently disabled by being commented out in both RST and HTML comment formats.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/index.rst#2025-04-21_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. Change log\n.. ~~~~~~~~~~\n.. raw:: html\n\n  <!-- <script type=\"text/javascript\" src=\"//www.apichangelog.com/static/widget/follow.js\" api=\"mailgun\"></script> -->\n```\n\n----------------------------------------\n\nTITLE: List Webhooks for a Domain - API Endpoint\nDESCRIPTION: API endpoint to retrieve a list of webhooks set for a specified domain. Requires the domain name as a parameter.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-webhooks.rst#2025-04-21_snippet_1\n\nLANGUAGE: url\nCODE:\n```\nGET /domains/<domain>/webhooks\n```\n\n----------------------------------------\n\nTITLE: Retrieving Mailgun Tags with C#\nDESCRIPTION: Uses RestSharp in C# to fetch tags from the Mailgun API. Creates a REST client with basic authentication using your API key, then makes a request to the tags endpoint with a limit parameter of 10.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/tags/get-tags.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class GetTagsChunk\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (GetTags ().Content.ToString ());\n    }\n\n    public static IRestResponse GetTags ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v3\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.AddParameter (\"domain\", \"YOUR_DOMAIN_NAME\", ParameterType.UrlSegment);\n        request.Resource = \"{domain}/tags\";\n        request.AddParameter (\"limit\", 10);\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: PUT Domain Key Activation Endpoint\nDESCRIPTION: Activates a domain key for a specified authority and selector. Requires valid DNS records.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-domains.rst#2025-04-21_snippet_19\n\nLANGUAGE: url\nCODE:\n```\nPUT /v4/domains/{authority_name}/keys/{selector}/activate\n```\n\n----------------------------------------\n\nTITLE: Updating Mailgun Template Description with Python\nDESCRIPTION: Uses the requests library to send a PUT request to update a template's description. Authentication is done with the API key, and data is sent as form parameters.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/templates/template-update.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef update_template():\n    return requests.put(\n        (\"https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/templates/TEMPLATE_NAME\"),\n        auth=('api', 'YOUR_API_KEY'),\n        data={'description': 'new template description'})\n```\n\n----------------------------------------\n\nTITLE: Go Mailgun SDK Implementation\nDESCRIPTION: Go function using official Mailgun SDK to list domain credentials with context and timeout.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-credentials.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/mailgun/mailgun-go/v3\"\n    \"time\"\n)\n\nfunc ListCredentials(domain, apiKey string) ([]mailgun.Credential, error) {\n    mg := mailgun.NewMailgun(domain, apiKey)\n    it := mg.ListCredentials(nil)\n\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)\n    defer cancel()\n\n    var page, result []mailgun.Credential\n    for it.Next(ctx, &page) {\n        result = append(result, page...)\n    }\n\n    if it.Err() != nil {\n        return nil, it.Err()\n    }\n    return result, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Create SMTP Credentials Response\nDESCRIPTION: Sample JSON response when creating new SMTP credentials.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-domains.rst#2025-04-21_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"message\": \"Created 1 credentials pair(s)\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Mailing List Members using Java\nDESCRIPTION: Uses Mailgun Java SDK to fetch mailing list members. Requires Mailgun Java client library and API key configuration.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-list-members.rst#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.mailgun.api.v3.MailgunMailingListApi;\nimport com.mailgun.model.mailing.lists.MailingListMembersResponse;\n\n// ...\n\npublic MailingListMembersResponse listMembers() {\n    MailgunMailingListApi mailgunMailingListApi = MailgunClient.config(API_KEY)\n        .createApi(MailgunMailingListApi.class);\n\n    return mailgunMailingListApi.getMailingListMembers(MAILING_LIST_ADDRESS);\n}\n```\n\n----------------------------------------\n\nTITLE: C# Implementation for Mailgun Bulk Preview Promotion\nDESCRIPTION: C# implementation using RestSharp library to promote bulk preview validation. Includes basic authentication and proper request configuration.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/put-bulk-preview.rst#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing RestSharp;\nusing RestSharp.Authenticators;\n\npublic class PromoteBulkPreview\n{\n\n    public static void Main (string[] args)\n    {\n        Console.WriteLine (GetBulkValidation ().Content.ToString ());\n    }\n\n    public static IRestResponse Promote ()\n    {\n        RestClient client = new RestClient ();\n        client.BaseUrl = new Uri (\"https://api.mailgun.net/v4\");\n        client.Authenticator =\n            new HttpBasicAuthenticator (\"api\",\n                                        \"YOUR_API_KEY\");\n        RestRequest request = new RestRequest ();\n        request.AddParameter (\"list\", \"LIST_NAME\", ParameterType.UrlSegment);\n        request.Resource = \"/address/validate/preview/{list}\";\n        request.Method = Method.PUT\n        return client.Execute (request);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: PHP Bounce List Retrieval\nDESCRIPTION: PHP implementation using Mailgun SDK to fetch bounce list. Requires the Mailgun PHP library installed via Composer.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-bounces.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Include the Autoloader (see \"Libraries\" for install instructions)\nrequire 'vendor/autoload.php';\nuse Mailgun\\Mailgun;\n\n# Instantiate the client.\n$mgClient = Mailgun::create('PRIVATE_API_KEY', 'https://API_HOSTNAME');\n$domain   = 'YOUR_DOMAIN_NAME';\n\n# Issue the call to the client.\n$result = $mgClient->suppressions()->bounces()->index($domain);\n```\n\n----------------------------------------\n\nTITLE: PUT Domain Web Prefix Update Endpoint\nDESCRIPTION: Updates the CNAME used for tracking opens and clicks for a domain.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-domains.rst#2025-04-21_snippet_18\n\nLANGUAGE: url\nCODE:\n```\nGET /v4/domains/{authority_name}/keys\n```\n\n----------------------------------------\n\nTITLE: Delete Webhook using JavaScript\nDESCRIPTION: JavaScript implementation note indicating that this feature is deprecated and not supported in the JavaScript library.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/delete-webhook-deprecated.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// This feature is deprecated and not supported in the js library\n```\n\n----------------------------------------\n\nTITLE: JavaScript Note on Webhook Implementation\nDESCRIPTION: Indicates that the webhook feature is deprecated and not supported in the JavaScript library.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-webhook-deprecated.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// This feature is deprecated and not supported in the js library\n```\n\n----------------------------------------\n\nTITLE: Adding Email to Whitelist with PHP cURL\nDESCRIPTION: PHP function using cURL to add an email address to the Mailgun whitelist. The SDK doesn't support this endpoint, so a custom cURL implementation is provided.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/add-whitelist.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# Currently, the PHP SDK does not support Suppression Whiteslist endpoint.\n# Consider using the following php curl function.\nfunction add_domain_whitelist() {\n  $ch = curl_init();\n\n  curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);\n  curl_setopt($ch, CURLOPT_USERPWD, 'api:PRIVATE_API_KEY');\n  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n\n  curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');\n  curl_setopt($ch, CURLOPT_URL, 'https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/whitelists');\n  curl_setopt($ch, CURLOPT_POSTFIELDS, array(\n      'address'=> 'bob@example.com')\n  );\n\n  $result = curl_exec($ch);\n  curl_close($ch);\n\n  return $result;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Tag Statistics\nDESCRIPTION: GET endpoint to retrieve statistics for a specific tag, with parameters for event type, time range, resolution, and duration.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-tags.rst#2025-04-21_snippet_4\n\nLANGUAGE: url\nCODE:\n```\nGET /<domain>/tags/<tag>/stats\n```\n\n----------------------------------------\n\nTITLE: Creating Mailbox using JavaScript (Deprecated)\nDESCRIPTION: This comment indicates that the mailbox creation feature is deprecated and not supported in the JavaScript library for Mailgun.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/create-mailbox.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// This feature is deprecated and not supported in the js library\n```\n\n----------------------------------------\n\nTITLE: Fetching Tag Statistics by Country using cURL\nDESCRIPTION: Makes a GET request to Mailgun's API to retrieve aggregated tag statistics by country. Requires API key authentication and specific domain and tag parameters.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/tags/tag-countries-aggregation.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -v -s --user 'api:YOUR_API_KEY' \\\nhttps://api.mailgun.net/v3/<domain>/tags/<tag>/stats/aggregates/countries\n```\n\n----------------------------------------\n\nTITLE: Retrieving Tag Statistics by Devices\nDESCRIPTION: GET endpoint to retrieve a list of devices for a given domain and tag that have triggered various event types.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-tags.rst#2025-04-21_snippet_8\n\nLANGUAGE: url\nCODE:\n```\nGET /<domain>/tags/<tag>/stats/aggregates/devices\n```\n\n----------------------------------------\n\nTITLE: Retrieving Mailboxes using Go (Deprecated)\nDESCRIPTION: This comment indicates that the feature for retrieving mailboxes is deprecated and not supported in the Go library for Mailgun.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-mailboxes.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// This feature is deprecated and not supported in the golang library\n```\n\n----------------------------------------\n\nTITLE: Curl Request for Mailgun Webhook Details\nDESCRIPTION: Basic curl command to retrieve webhook details for clicked events using the Mailgun API.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-webhook.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -G \\\n    https://api.mailgun.net/v3/domains/YOUR_DOMAIN_NAME/webhooks/clicked\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Tag Statistics by Providers\nDESCRIPTION: Example JSON response showing tag statistics aggregated by email providers, with event counts for each provider.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-tags.rst#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"provider\": {\n      \"gmail.com\": {\n          \"accepted\": 23,\n          \"clicked\": 15,\n          \"complained\": 0,\n          \"delivered\": 23,\n          \"opened\": 19,\n          \"unique_clicked\": 2,\n          \"unique_opened\": 7,\n          \"unsubscribed\": 1\n      },\n      \"yahoo.com\": {\n          \"accepted\": 16,\n          \"clicked\": 8,\n          \"complained\": 2,\n          \"delivered\": 8,\n          \"opened\": 4,\n          \"unique_clicked\": 0,\n          \"unique_opened\": 0,\n          \"unsubscribed\": 0\n      }\n  },\n  \"tag\": \"exampletag\"\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Complaint Data with cURL in Bash\nDESCRIPTION: This snippet demonstrates how to retrieve complaint information for a specific email address using a cURL command. It requires the API key and domain name to be replaced with actual values.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-complaint.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s --user 'api:YOUR_API_KEY' -G \\\n   https://api.mailgun.net/v3/YOUR_DOMAIN_NAME/complaints/baz@example.com\n```\n\n----------------------------------------\n\nTITLE: Decoding Quoted-Printable in Ruby\nDESCRIPTION: Uses Ruby's unpack method with 'M*' format to decode quoted-printable messages. No additional dependencies required.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/decode-quoted-printable.rst#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndecoded_message = encoded_message.unpack('M*')\n```\n\n----------------------------------------\n\nTITLE: Listing All Templates (GET Request)\nDESCRIPTION: API endpoint for retrieving a list of all stored templates for a domain.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-templates.rst#2025-04-21_snippet_11\n\nLANGUAGE: url\nCODE:\n```\nGET /<domain>/templates\n```\n\n----------------------------------------\n\nTITLE: Golang Mailgun Logs Feature (Deprecated)\nDESCRIPTION: Note indicating that the log retrieval feature is deprecated in the Golang library.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-log-entry.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// This feature is deprecated and not supported in the golang library\n```\n\n----------------------------------------\n\nTITLE: JavaScript Mailgun Logs Feature (Deprecated)\nDESCRIPTION: Note indicating that the log retrieval feature is deprecated in the JavaScript library.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-log-entry.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// This feature is deprecated and not supported in the js library\n```\n\n----------------------------------------\n\nTITLE: Creating a New Template Version (POST Request)\nDESCRIPTION: API endpoint for creating a new version of an existing template.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-templates.rst#2025-04-21_snippet_15\n\nLANGUAGE: url\nCODE:\n```\nPOST /<domain>/templates/<template>/versions\n```\n\n----------------------------------------\n\nTITLE: Updating Template Version - Mailgun API Request\nDESCRIPTION: API endpoint for updating information or content of a specific template version. Supports updating template content, comments, active status and headers.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-templates.rst#2025-04-21_snippet_18\n\nLANGUAGE: url\nCODE:\n```\nPUT /<domain>/templates/<name>/versions/<tag>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Mailboxes using JavaScript (Deprecated)\nDESCRIPTION: This comment indicates that the feature for retrieving mailboxes is deprecated and not supported in the JavaScript library for Mailgun.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/get-mailboxes.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// This feature is deprecated and not supported in the js library\n```\n\n----------------------------------------\n\nTITLE: Update Mailbox Password using JavaScript (Deprecated)\nDESCRIPTION: This feature is deprecated and not supported in the JavaScript library.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/change-mailbox-password.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// This feature is deprecated and not supported in the js library\n```\n\n----------------------------------------\n\nTITLE: Go Implementation Not Available\nDESCRIPTION: The Go implementation for adding domains to the Mailgun whitelist is not available.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/samples/add-whitelist.rst#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// Not implemented\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Updating Template\nDESCRIPTION: Example JSON response when updating template metadata.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-templates.rst#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"message\": \"template has been updated\",\n  \"template\": {\n      \"createdAt\": \"Wed, 29 Aug 2018 23:31:15 UTC\",\n      \"description\": \"new template description\",\n      \"name\": \"template.name\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Email Click Event JSON in JavaScript\nDESCRIPTION: This snippet shows the JSON structure for an email click event. It includes information about the clicked URL, geolocation, and client details.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-events.rst#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"event\": \"clicked\",\n  \"id\": \"G5zMz2ysS6OxZ2C8xb2Tqg\",\n  \"timestamp\": 1377075564.094891,\n  \"log-level\": \"info\",\n  \"recipient\": \"recipient@example.com\",\n  \"geolocation\": {\n    \"country\": \"US\",\n    \"region\": \"TX\",\n    \"city\": \"Austin\"\n  },\n  \"tags\": [],\n  \"url\": \"http://example.com/signup\",\n  \"ip\": \"123.123.123.321\",\n  \"campaigns\": [],\n  \"user-variables\": {},\n  \"client-info\": {\n    \"client-type\": \"browser\",\n    \"client-os\": \"Linux\",\n    \"device-type\": \"desktop\",\n    \"client-name\": \"Chromium\",\n    \"user-agent\": \"Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/28.0.1500.71 Chrome/28.0.1500.71 Safari/537.36\",\n    \"bot\": \"\"\n  },\n  \"message\": {\n    \"headers\": {\n      \"message-id\": \"20130821085807.30688.67706@samples.mailgun.org\"\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Rejected Message Event JSON in JavaScript\nDESCRIPTION: This snippet illustrates the JSON structure for a rejected message event. It includes rejection reasons, message headers, and event flags.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-events.rst#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"event\": \"rejected\"\n  \"id\": \"OMTXD3-sSmKIQa1gSKkYVA\",\n  \"timestamp\": 1529704976.104692,\n  \"log-level\": \"warn\",\n  \"flags\": {\n    \"is-test-mode\": false\n  },\n  \"reject\": {\n    \"reason\": \"Sandbox subdomains are for test purposes only. Please add your own domain or add the address to authorized recipients in Account Settings.\",\n    \"description\": \"\"\n  },\n  \"message\": {\n    \"headers\": {\n      \"to\": \"joan@example.org\",\n      \"message-id\": \"20180622220256.1.B31A451A2E5422BB@sandbox55887fac92de874df5ae0023b75fd62f1d.mailgun.org\",\n      \"from\": \"john@sandbox55887fac92de874df5ae0023b75fd62f1d.mailgun.org\",\n      \"subject\": \"Test Subject\"\n    },\n    \"attachments\": [],\n    \"size\": 867\n  },\n  \"campaigns\": [],\n  \"tags\": [],\n  \"user-variables\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: POST Alert Settings Request Example\nDESCRIPTION: Complete example of creating an IP blocklist webhook alert configuration\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-deliverability-alerts.rst#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"event_type\": \"ip_listed\",\n  \"channel\": \"webhook\",\n  \"settings\": {\n    \"url\": \"https://yourwebhookurl.com\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GET Single Whitelist Record Endpoint\nDESCRIPTION: API endpoint for fetching a single whitelist record by address or domain.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-suppressions.rst#2025-04-21_snippet_27\n\nLANGUAGE: url\nCODE:\n```\nGET /<domain>/whitelists/<address or domain>\n```\n\n----------------------------------------\n\nTITLE: Validating Single Email Address with Mailgun API\nDESCRIPTION: This endpoint verifies a single email address based on defined checks including mailbox detection, syntax, DNS validation, and ESP-specific grammar.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-email-validation-deprecated.rst#2025-04-21_snippet_0\n\nLANGUAGE: url\nCODE:\n```\nGET /address/validate\n```\n\n----------------------------------------\n\nTITLE: Viewing Whitelists with Mailgun API (URL)\nDESCRIPTION: This snippet shows the URL endpoint for retrieving a list of whitelist records for a domain.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-suppressions.rst#2025-04-21_snippet_25\n\nLANGUAGE: url\nCODE:\n```\nGET /<domain>/whitelists\n```\n\n----------------------------------------\n\nTITLE: Using match_recipient Filter with Named Capture Groups\nDESCRIPTION: Uses named capture groups in a regular expression to extract both the username and domain parts of an email address for use in a more readable forwarding URL pattern.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/user_manual.rst#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nroute filter : match_recipient(\"(?P<user>.*?)@(?P<domain>.*)\")\nroute action : forward(\"http://mycallback.com/domains/\\g<domain>/users/\\g<user>\")\n```\n\n----------------------------------------\n\nTITLE: Fetching Single Bounce in Mailgun API\nDESCRIPTION: Demonstrates the GET request URL for retrieving a single bounce record by email address. Useful for checking if a specific email has bounced.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-suppressions.rst#2025-04-21_snippet_3\n\nLANGUAGE: url\nCODE:\n```\nGET /<domain>/bounces/<address>\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Sendmail Configuration\nDESCRIPTION: Command to rebuild the Sendmail configuration after making changes. This must be run after modifying the Sendmail configuration files to apply the changes.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/user_manual.rst#2025-04-21_snippet_54\n\nLANGUAGE: bash\nCODE:\n```\nmake -C /etc/mail\n```\n\n----------------------------------------\n\nTITLE: Sample Response for IP Pool Update\nDESCRIPTION: Example JSON response after successfully updating an IP pool.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-ip-pools.rst#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n{ \"message\": \"success\" }\n```\n\n----------------------------------------\n\nTITLE: Forwarding Messages to HTTP Endpoint\nDESCRIPTION: Uses the forward() action to send matched messages to a web application via HTTP POST. This action posts the message content to the specified URL for processing.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/user_manual.rst#2025-04-21_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nforward(\"http://myapp.com/messages\")\n```\n\n----------------------------------------\n\nTITLE: Remove Domain IP Endpoint\nDESCRIPTION: DELETE endpoint to remove an IP from a specific domain.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-ips.rst#2025-04-21_snippet_5\n\nLANGUAGE: url\nCODE:\n```\nDELETE /domains/<domain>/ips/<ip>\n```\n\n----------------------------------------\n\nTITLE: Testing SMTP Connection to Mailgun with Telnet\nDESCRIPTION: Command to test if port 25 is open and accessible for connecting to Mailgun's SMTP server. This helps diagnose connection issues that might be caused by ISP blocking.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/faqs.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntelnet smtp.mailgun.org 25\n```\n\n----------------------------------------\n\nTITLE: Create Bulk Validation Response\nDESCRIPTION: Example JSON response when creating a new bulk validation job\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-email-validation.rst#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n{\n \"id\":\"myemails\"\n \"message\": \"The validation job was submitted.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Domain-Specific URL Pattern for Mailgun API\nDESCRIPTION: Demonstrates how to include a specific domain name in the Mailgun API URL. This pattern is used for most API calls to identify which domain the operation applies to.\nSOURCE: https://github.com/mailgun/documentation.git/blob/master/source/api-intro.rst#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://api.mailgun.net/v3/mydomain.com\n```"
  }
]