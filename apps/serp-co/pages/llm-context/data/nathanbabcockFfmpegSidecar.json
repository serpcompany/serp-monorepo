[
  {
    "owner": "nathanbabcock",
    "repo": "ffmpeg-sidecar",
    "content": "TITLE: Cargo Add Dependency\nDESCRIPTION: Adds the ffmpeg-sidecar crate as a dependency to your Cargo project. This is the first step to using the crate in your Rust project.\nSOURCE: https://github.com/nathanbabcock/ffmpeg-sidecar/blob/main/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncargo add ffmpeg-sidecar\n```\n\n----------------------------------------\n\nTITLE: FFmpeg Auto-Download\nDESCRIPTION: Downloads and installs an FFmpeg binary for the current platform (Windows, MacOS, or Linux). Call this function once to setup the development environment or include as a feature of the client application.\nSOURCE: https://github.com/nathanbabcock/ffmpeg-sidecar/blob/main/README.md#_snippet_1\n\nLANGUAGE: Rust\nCODE:\n```\nffmpeg_sidecar::download::auto_download().unwrap();\n```\n\n----------------------------------------\n\nTITLE: Read Raw Video Frames with FFmpeg\nDESCRIPTION: Example demonstrating how to use the ffmpeg-sidecar crate to read raw video frames from a test source generated by FFmpeg. It uses the FfmpegCommand builder to configure the FFmpeg command and iterates over the output frames.\nSOURCE: https://github.com/nathanbabcock/ffmpeg-sidecar/blob/main/README.md#_snippet_2\n\nLANGUAGE: Rust\nCODE:\n```\nuse ffmpeg_sidecar::command::FfmpegCommand;\n\nfn main() -> anyhow::Result<()> {\n  // Run an FFmpeg command that generates a test video\n  let iter = FfmpegCommand::new() // <- Builder API like `std::process::Command`\n    .testsrc()  // <- Discoverable aliases for FFmpeg args\n    .rawvideo() // <- Convenient argument presets\n    .spawn()?   // <- Ordinary `std::process::Child`\n    .iter()?;   // <- Blocking iterator over logs and output\n\n  // Use a regular \"for\" loop to read decoded video data\n  for frame in iter.filter_frames() {\n    println!(\"frame: {}x{}\", frame.width, frame.height);\n    let _pixels: Vec<u8> = frame.data; // <- raw RGB pixels! ðŸŽ¨\n  }\n\n  Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Run Hello World Example\nDESCRIPTION: Runs the hello_world example using cargo. This command assumes that you are in the root directory of the ffmpeg-sidecar crate.\nSOURCE: https://github.com/nathanbabcock/ffmpeg-sidecar/blob/main/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ncargo run --example hello_world\n```\n\n----------------------------------------\n\nTITLE: Run H265 Transcode Example\nDESCRIPTION: Runs the h265_transcode example using cargo. This command assumes that you are in the root directory of the ffmpeg-sidecar crate.\nSOURCE: https://github.com/nathanbabcock/ffmpeg-sidecar/blob/main/README.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ncargo run --example h265_transcode\n```\n\n----------------------------------------\n\nTITLE: Run FFplay Preview Example\nDESCRIPTION: Runs the ffplay_preview example using cargo. This command assumes that you are in the root directory of the ffmpeg-sidecar crate.\nSOURCE: https://github.com/nathanbabcock/ffmpeg-sidecar/blob/main/README.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\ncargo run --example ffplay_preview\n```\n\n----------------------------------------\n\nTITLE: Run Named Pipes Example\nDESCRIPTION: Runs the named_pipes example using cargo, enabling the named_pipes feature. This command assumes that you are in the root directory of the ffmpeg-sidecar crate.\nSOURCE: https://github.com/nathanbabcock/ffmpeg-sidecar/blob/main/README.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\ncargo run --example named_pipes --features named_pipes\n```"
  }
]