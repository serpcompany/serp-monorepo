[
  {
    "owner": "paullouisageneau",
    "repo": "libdatachannel",
    "content": "TITLE: Including the RTC library header in C++\nDESCRIPTION: Demonstrates how to include the main header file for the libdatachannel library which provides access to the WebRTC functionality.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#include \"rtc/rtc.hpp\"\n```\n\n----------------------------------------\n\nTITLE: Opening and Using a WebSocket in C++\nDESCRIPTION: Demonstrates creating a WebSocket instance, setting up event handlers for connection establishment and message reception, and connecting to a secure WebSocket server.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/README.md#2025-04-22_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\nrtc::WebSocket ws;\n\nws.onOpen([]() {\n    std::cout << \"WebSocket open\" << std::endl;\n});\n\nws.onMessage([](std::variant<rtc::binary, rtc::string> message) {\n    if (std::holds_alternative<rtc::string>(message)) {\n        std::cout << \"WebSocket received: \" << std::get<rtc::string>(message) << endl;\n    }\n});\n\nws.open(\"wss://my.websocket/service\");\n```\n\n----------------------------------------\n\nTITLE: Receiving and Handling a DataChannel in C++\nDESCRIPTION: Shows how to listen for incoming DataChannels on a PeerConnection, store a reference to the channel, and send a message on it once established.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/README.md#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\nstd::shared_ptr<rtc::DataChannel> dc;\npc.onDataChannel([&dc](std::shared_ptr<rtc::DataChannel> incoming) {\n    dc = incoming;\n    dc->send(\"Hello world!\");\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Channel Callbacks for WebRTC Data Channels, Tracks and WebSockets (C)\nDESCRIPTION: Functions to set, change, or unset various callbacks for channels (Data Channels, Tracks, or WebSockets). These callbacks handle events like open, close, errors, messages, buffered amount changes, and data availability.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/DOC.md#2025-04-22_snippet_21\n\nLANGUAGE: c\nCODE:\n```\nint rtcSetOpenCallback(int id, rtcOpenCallbackFunc cb)\nint rtcSetClosedCallback(int id, rtcClosedCallbackFunc cb)\nint rtcSetErrorCallback(int id, rtcErrorCallbackFunc cb)\nint rtcSetMessageCallback(int id, rtcMessageCallbackFunc cb)\nint rtcSetBufferedAmountLowCallback(int id, rtcBufferedAmountLowCallbackFunc cb)\nint rtcSetAvailableCallback(int id, rtcAvailableCallbackFunc cb)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Signaling a WebRTC PeerConnection in C++\nDESCRIPTION: Shows how to create and configure a PeerConnection object with ICE servers, set up callbacks for signaling events like local description and ICE candidate generation, and handle incoming remote descriptions and candidates.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nrtc::Configuration config;\nconfig.iceServers.emplace_back(\"mystunserver.org:3478\");\n\nrtc::PeerConnection pc(config);\n\npc.onLocalDescription([](rtc::Description sdp) {\n    // Send the SDP to the remote peer\n    MY_SEND_DESCRIPTION_TO_REMOTE(std::string(sdp));\n});\n\npc.onLocalCandidate([](rtc::Candidate candidate) {\n    // Send the candidate to the remote peer\n    MY_SEND_CANDIDATE_TO_REMOTE(candidate.candidate(), candidate.mid());\n});\n\nMY_ON_RECV_DESCRIPTION_FROM_REMOTE([&pc](std::string sdp) {\n    pc.setRemoteDescription(rtc::Description(sdp));\n});\n\nMY_ON_RECV_CANDIDATE_FROM_REMOTE([&pc](std::string candidate, std::string mid) {\n    pc.addRemoteCandidate(rtc::Candidate(candidate, mid));\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a PeerConnection with Configuration\nDESCRIPTION: Creates a WebRTC PeerConnection with specified configuration options including ICE servers, transport policies, and connection parameters. Returns an identifier for the new PeerConnection or a negative error code.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/DOC.md#2025-04-22_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nint rtcCreatePeerConnection(const rtcConfiguration *config)\n\ntypedef struct {\n\tconst char **iceServers;\n\tint iceServersCount;\n\tconst char *proxyServer;\n\tconst char *bindAddress;\n\trtcCertificateType certificateType;\n\trtcTransportPolicy iceTransportPolicy;\n\tbool enableIceTcp;\n\tbool enableIceUdpMux;\n\tbool disableAutoNegotiation;\n\tbool forceMediaTransport;\n\tuint16_t portRangeBegin;\n\tuint16_t portRangeEnd;\n\tint mtu;\n\tint maxMessageSize;\n} rtcConfiguration;\n```\n\n----------------------------------------\n\nTITLE: Creating a DataChannel with Event Handlers in C++\nDESCRIPTION: Demonstrates creating a DataChannel on a PeerConnection and setting up callbacks for open events and message reception, including handling different message types using std::variant.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nauto dc = pc.createDataChannel(\"test\");\n\ndc->onOpen([]() {\n    std::cout << \"Open\" << std::endl;\n});\n\ndc->onMessage([](std::variant<rtc::binary, rtc::string> message) {\n    if (std::holds_alternative<rtc::string>(message)) {\n        std::cout << \"Received: \" << get<rtc::string>(message) << std::endl;\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up libdatachannel Resources\nDESCRIPTION: Unloads global resources used by the library, destroying any existing Peer Connections, Data Channels, Tracks, or WebSockets. This function blocks until unloading is complete and should never be called from a callback.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/DOC.md#2025-04-22_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nvoid rtcCleanup(void)\n```\n\n----------------------------------------\n\nTITLE: Observing PeerConnection State Changes in C++\nDESCRIPTION: Shows how to set up callbacks to monitor the state of a PeerConnection, including both connection state and ICE gathering state changes.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\npc.onStateChange([](rtc::PeerConnection::State state) {\n    std::cout << \"State: \" << state << std::endl;\n});\n\npc.onGatheringStateChange([](rtc::PeerConnection::GatheringState state) {\n    std::cout << \"Gathering state: \" << state << std::endl;\n});\n```\n\n----------------------------------------\n\nTITLE: Preloading libdatachannel Resources\nDESCRIPTION: Preloads global resources used by libdatachannel to avoid lazy-loading delays when establishing the first connection. This function blocks until preloading is complete.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/DOC.md#2025-04-22_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nvoid rtcPreload(void)\n```\n\n----------------------------------------\n\nTITLE: Creating Data Channels in libdatachannel (C)\nDESCRIPTION: Adds a Data Channel to a Peer Connection. Allows configuration of reliability, ordering, and other settings through rtcDataChannelInit structure.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/pages/content/pages/reference.md#2025-04-22_snippet_32\n\nLANGUAGE: c\nCODE:\n```\nint rtcCreateDataChannel(int pc, const char *label)\nint rtcCreateDataChannelEx(int pc, const char *label, const rtcDataChannelInit *init)\n\ntypedef struct {\n\tbool unordered;\n\tbool unreliable;\n\tunsigned int maxPacketLifeTime;\n\tunsigned int maxRetransmits;\n} rtcReliability;\n\ntypedef struct {\n\trtcReliability reliability;\n\tconst char *protocol;\n\tbool negotiated;\n\tbool manualStream;\n\tuint16_t stream;\n} rtcDataChannelInit;\n```\n\n----------------------------------------\n\nTITLE: Setting Local Description for WebRTC Connection\nDESCRIPTION: Initiates the WebRTC handshake process, generating a local description that must be sent to the remote peer. This call may be implicit after certain operations if autoNegotiation is enabled.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/DOC.md#2025-04-22_snippet_7\n\nLANGUAGE: c\nCODE:\n```\nint rtcSetLocalDescription(int pc, const char *type)\n```\n\n----------------------------------------\n\nTITLE: Creating PeerConnection for libdatachannel in C\nDESCRIPTION: Creates a new Peer Connection with specified configuration. The configuration includes ICE servers, proxy settings, certificate type, and various other options for customizing the connection behavior.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/pages/content/pages/reference.md#2025-04-22_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nint rtcCreatePeerConnection(const rtcConfiguration *config)\n\ntypedef struct {\n\tconst char **iceServers;\n\tint iceServersCount;\n\tconst char *proxyServer;\n\tconst char *bindAddress;\n\trtcCertificateType certificateType;\n\trtcTransportPolicy iceTransportPolicy;\n\tbool enableIceTcp;\n\tbool enableIceUdpMux;\n\tbool disableAutoNegotiation;\n\tbool forceMediaTransport;\n\tuint16_t portRangeBegin;\n\tuint16_t portRangeEnd;\n\tint mtu;\n\tint maxMessageSize;\n} rtcConfiguration;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Selected Candidate Pair from WebRTC Connection (C)\nDESCRIPTION: Retrieves the currently selected ICE candidate pair. May fail if the connection is not in RTC_CONNECTED state, and the selected pair might change after connection.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/DOC.md#2025-04-22_snippet_17\n\nLANGUAGE: c\nCODE:\n```\nint rtcGetSelectedCandidatePair(int pc, char *local, int localSize, char *remote, int remoteSize)\n```\n\n----------------------------------------\n\nTITLE: Setting Channel Callbacks for WebRTC Communication (C)\nDESCRIPTION: Functions to set, change, or unset callbacks for Data Channels, Tracks, and WebSockets. These callbacks handle various channel events like open, close, errors, message reception, and buffer management.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/pages/content/pages/reference.md#2025-04-22_snippet_21\n\nLANGUAGE: c\nCODE:\n```\nint rtcSetOpenCallback(int id, rtcOpenCallbackFunc cb)\nint rtcSetClosedCallback(int id, rtcClosedCallbackFunc cb)\nint rtcSetErrorCallback(int id, rtcErrorCallbackFunc cb)\nint rtcSetMessageCallback(int id, rtcMessageCallbackFunc cb)\nint rtcSetBufferedAmountLowCallback(int id, rtcBufferedAmountLowCallbackFunc cb)\nint rtcSetAvailableCallback(int id, rtcAvailableCallbackFunc cb)\n```\n\n----------------------------------------\n\nTITLE: Creating Offer and Answer in WebRTC Connection (C)\nDESCRIPTION: Functions to create a local offer or answer SDP description without setting it. Useful for specific use cases where the application needs to generate a description separately from setting it.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/DOC.md#2025-04-22_snippet_14\n\nLANGUAGE: c\nCODE:\n```\nint rtcCreateOffer(int pc, char *buffer, int size)\nint rtcCreateAnswer(int pc, char *buffer, int size)\n```\n\n----------------------------------------\n\nTITLE: Adding Remote ICE Candidate to WebRTC Connection (C)\nDESCRIPTION: Adds a trickled remote ICE candidate received from the remote peer. The peer connection must already have a remote description set before candidates can be added.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/pages/content/pages/reference.md#2025-04-22_snippet_9\n\nLANGUAGE: c\nCODE:\n```\nint rtcAddRemoteCandidate(int pc, const char *cand, const char *mid)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Remote Description Type from WebRTC Connection (C)\nDESCRIPTION: Retrieves the current remote description type as a string. Returns the length of the string or just the required buffer size if buffer is NULL.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/DOC.md#2025-04-22_snippet_13\n\nLANGUAGE: c\nCODE:\n```\nint rtcGetRemoteDescriptionType(int pc, char *buffer, int size)\n```\n\n----------------------------------------\n\nTITLE: Setting Local Description for PeerConnection in libdatachannel C API\nDESCRIPTION: Initiates the handshake process by setting the local description. The local description callback will be called with the generated description, which must be sent to the remote peer. The type parameter is optional and can be NULL for automatic selection.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/pages/content/pages/reference.md#2025-04-22_snippet_7\n\nLANGUAGE: c\nCODE:\n```\nint rtcSetLocalDescription(int pc, const char *type)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Remote Maximum Message Size from WebRTC Connection (C)\nDESCRIPTION: Gets the maximum message size for data channels as negotiated with the remote peer. This determines the largest message that can be sent or received on data channels for this connection.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/DOC.md#2025-04-22_snippet_20\n\nLANGUAGE: c\nCODE:\n```\nint rtcGetRemoteMaxMessageSize(int pc)\n```\n\n----------------------------------------\n\nTITLE: Setting Remote Description in WebRTC Connection (C)\nDESCRIPTION: Sets the remote description received from a remote peer. The function can handle descriptions with or without candidates and supports automatic negotiation if not disabled in configuration.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/DOC.md#2025-04-22_snippet_8\n\nLANGUAGE: c\nCODE:\n```\nint rtcSetRemoteDescription(int pc, const char *sdp, const char *type)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Track Direction in WebRTC (C)\nDESCRIPTION: Retrieves the direction of a Track. It sets the provided pointer to an rtcDirection enum value representing the track's direction.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/DOC.md#2025-04-22_snippet_42\n\nLANGUAGE: c\nCODE:\n```\nint rtcGetTrackDirection(int tr, rtcDirection *direction)\n```\n\n----------------------------------------\n\nTITLE: Setting Remote SDP Description in WebRTC Connection (C)\nDESCRIPTION: Sets the remote description received from a remote peer in SDP format. If auto-negotiation is enabled and the remote description is an offer, the library will automatically respond with an answer.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/pages/content/pages/reference.md#2025-04-22_snippet_8\n\nLANGUAGE: c\nCODE:\n```\nint rtcSetRemoteDescription(int pc, const char *sdp, const char *type)\n```\n\n----------------------------------------\n\nTITLE: Getting Maximum Message Size for Channels in C\nDESCRIPTION: Function to retrieve the maximum message size that can be sent through a channel.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/DOC.md#2025-04-22_snippet_27\n\nLANGUAGE: c\nCODE:\n```\nint rtcGetMaxMessageSize(int id)\n```\n\n----------------------------------------\n\nTITLE: Creating Data Channels in C\nDESCRIPTION: Functions to add a Data Channel on a Peer Connection with optional configuration settings for reliability, ordering, and protocol.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/DOC.md#2025-04-22_snippet_32\n\nLANGUAGE: c\nCODE:\n```\nint rtcCreateDataChannel(int pc, const char *label)\nint rtcCreateDataChannelEx(int pc, const char *label, const rtcDataChannelInit *init)\n\ntypedef struct {\n\tbool unordered;\n\tbool unreliable;\n\tunsigned int maxPacketLifeTime;\n\tunsigned int maxRetransmits;\n} rtcReliability;\n\ntypedef struct {\n\trtcReliability reliability;\n\tconst char *protocol;\n\tbool negotiated;\n\tbool manualStream;\n\tuint16_t stream;\n} rtcDataChannelInit;\n```\n\n----------------------------------------\n\nTITLE: Checking if Channel is Closed in C\nDESCRIPTION: Function to check if a channel exists and is closed. Returns true if the channel is closed (not open and not connecting), false otherwise.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/DOC.md#2025-04-22_snippet_26\n\nLANGUAGE: c\nCODE:\n```\nbool rtcIsClosed(int id)\n```\n\n----------------------------------------\n\nTITLE: Sending Messages through Channels in C\nDESCRIPTION: Function for sending messages in a channel. It accepts binary data or UTF-8 strings based on the size parameter. Messages that can't be sent immediately are buffered.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/DOC.md#2025-04-22_snippet_22\n\nLANGUAGE: c\nCODE:\n```\nint rtcSendMessage(int id, const char *data, int size)\n```\n\n----------------------------------------\n\nTITLE: Adding Tracks to Peer Connections in C\nDESCRIPTION: Function to add a new Track on a Peer Connection using SDP media description. The track will be open only when the Peer Connection is connected.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/DOC.md#2025-04-22_snippet_38\n\nLANGUAGE: c\nCODE:\n```\nint rtcAddTrack(int pc, const char *mediaDescriptionSdp)\n```\n\n----------------------------------------\n\nTITLE: Deleting Channels in C\nDESCRIPTION: Function to delete a channel. If not already closed, the channel is implicitly closed before deletion. This function blocks until all scheduled callbacks return.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/DOC.md#2025-04-22_snippet_24\n\nLANGUAGE: c\nCODE:\n```\nint rtcDelete(int id)\n```\n\n----------------------------------------\n\nTITLE: Sending Messages in libdatachannel (C)\nDESCRIPTION: Sends a message through a channel. The message can be binary or a UTF-8 string. It's sent immediately if possible, otherwise buffered for later transmission.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/pages/content/pages/reference.md#2025-04-22_snippet_22\n\nLANGUAGE: c\nCODE:\n```\nint rtcSendMessage(int id, const char *data, int size)\n```\n\n----------------------------------------\n\nTITLE: Benchmark Output Log\nDESCRIPTION: Example output from the benchmark tool showing connection establishment, ICE gathering, and performance metrics including received/sent data rates and buffer sizes over time.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/examples/client-benchmark/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nSTUN server is stun:stun.l.google.com:19302\nThe local ID is: H1E3\nURL is ws://localhost:8000/H1E3\nWaiting for signaling to be connected...\n2021-04-10 19:51:31.319 INFO  [16449] [rtc::impl::TcpTransport::connect@163] Connected to localhost:8000\n2021-04-10 19:51:31.319 INFO  [16449] [rtc::impl::TcpTransport::runLoop@331] TCP connected\n2021-04-10 19:51:31.321 INFO  [16449] [rtc::impl::WsTransport::incoming@118] WebSocket open\nWebSocket connected, signaling ready\nEnter a remote ID to send an offer:\nn790\nOffering to n790\nCreating DataChannel with label \"DC-1\"\n[...continued output showing performance metrics...]\n```\n\n----------------------------------------\n\nTITLE: Initializing Logger for libdatachannel in C\nDESCRIPTION: Sets up the logger for libdatachannel. It allows specifying the log level and an optional callback function to handle log messages. If no callback is provided, logs are directed to stdout.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/pages/content/pages/reference.md#2025-04-22_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nvoid rtcInitLogger(rtcLogLevel level, rtcLogCallbackFunc cb)\n```\n\n----------------------------------------\n\nTITLE: Deleting Data Channels in C\nDESCRIPTION: Function to delete a Data Channel. It blocks until all scheduled callbacks return and ensures no further callbacks are called.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/DOC.md#2025-04-22_snippet_33\n\nLANGUAGE: c\nCODE:\n```\nint rtcDeleteDataChannel(int dc)\n```\n\n----------------------------------------\n\nTITLE: Creating a WebSocket Server in C\nDESCRIPTION: Creates a new WebSocket server with the specified configuration and callback for incoming client connections. It returns the identifier of the new WebSocket Server or a negative error code.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/pages/content/pages/reference.md#2025-04-22_snippet_47\n\nLANGUAGE: c\nCODE:\n```\nint rtcCreateWebSocketServer(const rtcWsServerConfiguration *config, rtcWebSocketClientCallbackFunc cb);\n\ntypedef struct {\n\tuint16_t port;\n\tbool enableTls;\n\tconst char *certificatePemFile;\n\tconst char *keyPemFile;\n\tconst char *keyPemPass;\n\tint connectionTimeoutMs;\n} rtcWsServerConfiguration;\n```\n\n----------------------------------------\n\nTITLE: Checking if Negotiation is Needed in WebRTC Connection (C)\nDESCRIPTION: Returns whether negotiation needs to be started or restarted, for instance to signal new tracks. If true, the user may call rtcSetLocalDescription() to start the negotiation process.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/DOC.md#2025-04-22_snippet_18\n\nLANGUAGE: c\nCODE:\n```\nbool rtcIsNegotiationNeeded(int pc);\n```\n\n----------------------------------------\n\nTITLE: Closing a PeerConnection\nDESCRIPTION: Closes an existing PeerConnection, ending the WebRTC session but keeping the object for potential reuse. Returns RTC_ERR_SUCCESS or a negative error code.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/DOC.md#2025-04-22_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nint rtcClosePeerConnection(int pc)\n```\n\n----------------------------------------\n\nTITLE: Retrieving WebSocket Remote Address in WebRTC (C)\nDESCRIPTION: Retrieves the remote address of a WebSocket in the format \"HOST:PORT\". It copies the address into a user-supplied buffer and returns the length of the copied string or an error code.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/DOC.md#2025-04-22_snippet_45\n\nLANGUAGE: c\nCODE:\n```\nint rtcGetWebSocketRemoteAddress(int ws, char *buffer, int size)\n```\n\n----------------------------------------\n\nTITLE: Creating a WebSocket Server in WebRTC (C)\nDESCRIPTION: Creates a new WebSocket server with specified configuration and client connection callback. It returns the identifier of the new WebSocket Server or an error code.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/DOC.md#2025-04-22_snippet_47\n\nLANGUAGE: c\nCODE:\n```\nint rtcCreateWebSocketServer(const rtcWsServerConfiguration *config, rtcWebSocketClientCallbackFunc cb);\n\ntypedef struct {\n\tuint16_t port;\n\tbool enableTls;\n\tconst char *certificatePemFile;\n\tconst char *keyPemFile;\n\tconst char *keyPemPass;\n\tint connectionTimeoutMs;\n} rtcWsServerConfiguration;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Maximum Data Channel Stream ID from WebRTC Connection (C)\nDESCRIPTION: Gets the maximum stream ID a Data Channel may use, useful for creating user-negotiated Data Channels. The value may change after connection based on negotiation with the remote peer.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/DOC.md#2025-04-22_snippet_19\n\nLANGUAGE: c\nCODE:\n```\nint rtcGetMaxDataChannelStream(int pc);\n```\n\n----------------------------------------\n\nTITLE: Deleting a PeerConnection\nDESCRIPTION: Deletes a PeerConnection, implicitly closing it first if not already closed. This function blocks until all scheduled callbacks return and no further callbacks will be called for this object.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/DOC.md#2025-04-22_snippet_6\n\nLANGUAGE: c\nCODE:\n```\nint rtcDeletePeerConnection(int pc)\n```\n\n----------------------------------------\n\nTITLE: Getting Remote Description Type from WebRTC Connection (C)\nDESCRIPTION: Retrieves the type of the current remote SDP description (offer, answer, etc.) as a string. Returns the length of the copied string or required buffer size if buffer is NULL.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/pages/content/pages/reference.md#2025-04-22_snippet_13\n\nLANGUAGE: c\nCODE:\n```\nint rtcGetRemoteDescriptionType(int pc, char *buffer, int size)\n```\n\n----------------------------------------\n\nTITLE: Creating a WebSocket Client in C\nDESCRIPTION: Creates a new client WebSocket with optional configuration. It returns the identifier of the new WebSocket or a negative error code. The URL scheme must be either 'ws' or 'wss'.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/pages/content/pages/reference.md#2025-04-22_snippet_43\n\nLANGUAGE: c\nCODE:\n```\nint rtcCreateWebSocket(const char *url)\nint rtcCreateWebSocketEx(const char *url, const rtcWsConfiguration *config)\n\ntypedef struct {\n\tbool disableTlsVerification;\n\tconst char **protocols;\n\tint protocolsCount;\n\tint connectionTimeoutMs;\n\tint pingIntervalMs;\n\tint maxOutstandingPings;\n} rtcWsConfiguration;\n```\n\n----------------------------------------\n\nTITLE: Closing Channels in C\nDESCRIPTION: Function to close a channel. For WebSockets, the state will first change to closing, then closed only after the connection has been actually closed.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/DOC.md#2025-04-22_snippet_23\n\nLANGUAGE: c\nCODE:\n```\nint rtcClose(int id)\n```\n\n----------------------------------------\n\nTITLE: Deleting Data Channels in libdatachannel (C)\nDESCRIPTION: Deletes a Data Channel. The channel ID cannot be used after this function call. Blocks until all scheduled callbacks return.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/pages/content/pages/reference.md#2025-04-22_snippet_33\n\nLANGUAGE: c\nCODE:\n```\nint rtcDeleteDataChannel(int dc)\n```\n\n----------------------------------------\n\nTITLE: Getting Maximum Message Size in libdatachannel (C)\nDESCRIPTION: Retrieves the maximum message size for a channel. Returns the maximum size or a negative error code.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/pages/content/pages/reference.md#2025-04-22_snippet_27\n\nLANGUAGE: c\nCODE:\n```\nint rtcGetMaxMessageSize(int id)\n```\n\n----------------------------------------\n\nTITLE: Adding Tracks to Peer Connections in libdatachannel (C)\nDESCRIPTION: Adds a new Track to a Peer Connection. Requires a media description SDP string starting with an m-line and including a mid parameter.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/pages/content/pages/reference.md#2025-04-22_snippet_38\n\nLANGUAGE: c\nCODE:\n```\nint rtcAddTrack(int pc, const char *mediaDescriptionSdp)\n```\n\n----------------------------------------\n\nTITLE: Running Constant Throughput Benchmark with libdatachannel\nDESCRIPTION: Command-line instructions for running a constant throughput benchmark with 8000 byte packets, a 10000 byte send buffer, for 300 seconds using the client-benchmark tool.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/examples/client-benchmark/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./client-benchmark -p -d 300 -r 8000 -b 10000\n```\n\n----------------------------------------\n\nTITLE: Closing Channels in libdatachannel (C)\nDESCRIPTION: Closes a channel identified by its ID. For WebSockets, the state changes to closing, then closed after the connection is actually closed.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/pages/content/pages/reference.md#2025-04-22_snippet_23\n\nLANGUAGE: c\nCODE:\n```\nint rtcClose(int id)\n```\n\n----------------------------------------\n\nTITLE: Receiving Messages in libdatachannel (C)\nDESCRIPTION: Receives a pending message if available. Can only be called if MessageCallback is not set. Returns message size and data.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/pages/content/pages/reference.md#2025-04-22_snippet_30\n\nLANGUAGE: c\nCODE:\n```\nint rtcReceiveMessage(int id, char *buffer, int *size)\n```\n\n----------------------------------------\n\nTITLE: Initializing Logger in libdatachannel\nDESCRIPTION: Sets up the logger with a specified log level and optional callback function. The callback receives log messages with their corresponding log levels.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/DOC.md#2025-04-22_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nvoid rtcInitLogger(rtcLogLevel level, rtcLogCallbackFunc cb)\n```\n\n----------------------------------------\n\nTITLE: Running WebRTC Benchmark Command\nDESCRIPTION: Command line example showing how to start a 300-second benchmark test using the client-benchmark application.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/examples/client-benchmark/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./client-benchmark -d 300\n```\n\n----------------------------------------\n\nTITLE: Creating a WebSocket Client in WebRTC (C)\nDESCRIPTION: Creates a new client WebSocket with optional configuration. It returns the identifier of the new WebSocket or an error code.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/DOC.md#2025-04-22_snippet_43\n\nLANGUAGE: c\nCODE:\n```\nint rtcCreateWebSocket(const char *url)\nint rtcCreateWebSocketEx(const char *url, const rtcWsConfiguration *config)\n\ntypedef struct {\n\tbool disableTlsVerification;\n\tconst char **protocols;\n\tint protocolsCount;\n\tint connectionTimeoutMs;\n\tint pingIntervalMs;\n\tint maxOutstandingPings;\n} rtcWsConfiguration;\n```\n\n----------------------------------------\n\nTITLE: Deleting PeerConnection for libdatachannel in C\nDESCRIPTION: Deletes the specified Peer Connection. If not already closed, it implicitly closes the connection before deletion. This function blocks until all scheduled callbacks return and prevents further callbacks for the connection.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/pages/content/pages/reference.md#2025-04-22_snippet_6\n\nLANGUAGE: c\nCODE:\n```\nint rtcDeletePeerConnection(int pc)\n```\n\n----------------------------------------\n\nTITLE: Adding Remote ICE Candidate to WebRTC Connection (C)\nDESCRIPTION: Adds a trickled remote ICE candidate received from the remote peer. The peer connection must already have a remote description set.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/DOC.md#2025-04-22_snippet_9\n\nLANGUAGE: c\nCODE:\n```\nint rtcAddRemoteCandidate(int pc, const char *cand, const char *mid)\n```\n\n----------------------------------------\n\nTITLE: Getting Data Channel Label in C\nDESCRIPTION: Function to retrieve the label of a Data Channel. If buffer is NULL, only the required size is returned.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/DOC.md#2025-04-22_snippet_35\n\nLANGUAGE: c\nCODE:\n```\nint rtcGetDataChannelLabel(int dc, char *buffer, int size)\n```\n\n----------------------------------------\n\nTITLE: Deleting a WebSocket in WebRTC (C)\nDESCRIPTION: Deletes a WebSocket identified by its identifier. The function blocks until all scheduled callbacks return and prevents further callbacks for the WebSocket.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/DOC.md#2025-04-22_snippet_44\n\nLANGUAGE: c\nCODE:\n```\nint rtcDeleteWebSocket(int ws)\n```\n\n----------------------------------------\n\nTITLE: Closing PeerConnection for libdatachannel in C\nDESCRIPTION: Closes the specified Peer Connection. This function takes the Peer Connection identifier as an argument and returns a success code or a negative error code.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/pages/content/pages/reference.md#2025-04-22_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nint rtcClosePeerConnection(int pc)\n```\n\n----------------------------------------\n\nTITLE: Creating SDP Offer and Answer in WebRTC Connection (C)\nDESCRIPTION: Creates a local offer or answer description in SDP format without setting it. Useful for specific use cases where the application needs to generate a description without immediately applying it.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/pages/content/pages/reference.md#2025-04-22_snippet_14\n\nLANGUAGE: c\nCODE:\n```\nint rtcCreateOffer(int pc, char *buffer, int size)\nint rtcCreateAnswer(int pc, char *buffer, int size)\n```\n\n----------------------------------------\n\nTITLE: Getting Available Message Amount in C\nDESCRIPTION: Function to retrieve the total size of messages pending reception. Can only be called if MessageCallback is not set.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/DOC.md#2025-04-22_snippet_31\n\nLANGUAGE: c\nCODE:\n```\nint rtcGetAvailableAmount(int id)\n```\n\n----------------------------------------\n\nTITLE: Deleting a WebSocket in C\nDESCRIPTION: Deletes a WebSocket identified by its identifier. After calling this function, the WebSocket identifier must not be used anymore. The function blocks until all scheduled callbacks return.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/pages/content/pages/reference.md#2025-04-22_snippet_44\n\nLANGUAGE: c\nCODE:\n```\nint rtcDeleteWebSocket(int ws)\n```\n\n----------------------------------------\n\nTITLE: Checking Channel Open Status in libdatachannel (C)\nDESCRIPTION: Checks if a channel is open. Returns true if the channel exists and is open, false otherwise.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/pages/content/pages/reference.md#2025-04-22_snippet_25\n\nLANGUAGE: c\nCODE:\n```\nbool rtcIsOpen(int id)\n```\n\n----------------------------------------\n\nTITLE: Checking if Channel is Open in C\nDESCRIPTION: Function to check if a channel exists and is open. Returns true if the channel is open, false otherwise.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/DOC.md#2025-04-22_snippet_25\n\nLANGUAGE: c\nCODE:\n```\nbool rtcIsOpen(int id)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Local Description Type from WebRTC Connection (C)\nDESCRIPTION: Retrieves the current local description type as a string (e.g., \"offer\", \"answer\"). Returns the length of the string or just the required buffer size if buffer is NULL.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/DOC.md#2025-04-22_snippet_12\n\nLANGUAGE: c\nCODE:\n```\nint rtcGetLocalDescriptionType(int pc, char *buffer, int size)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Remote SDP Description from WebRTC Connection (C)\nDESCRIPTION: Gets the current remote SDP description. Returns the length of the copied string or required buffer size if buffer is NULL.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/pages/content/pages/reference.md#2025-04-22_snippet_11\n\nLANGUAGE: c\nCODE:\n```\nint rtcGetRemoteDescription(int pc, char *buffer, int size)\n```\n\n----------------------------------------\n\nTITLE: Sample Output from One-Way WebRTC Benchmark\nDESCRIPTION: Example output from the offering peer in a one-way benchmark test, showing connection establishment through STUN, ICE candidate gathering, DTLS handshake, and ongoing throughput statistics over a 300-second test period.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/examples/client-benchmark/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nNot Sending data. (One way benchmark).\nSTUN server is stun:stun.l.google.com:19302\nThe local ID is: 7EaP\nURL is ws://localhost:8000/7EaP\nWaiting for signaling to be connected...\n2021-04-10 19:54:36.857 INFO  [16632] [rtc::impl::TcpTransport::connect@163] Connected to localhost:8000\n2021-04-10 19:54:36.857 INFO  [16632] [rtc::impl::TcpTransport::runLoop@331] TCP connected\n2021-04-10 19:54:36.858 INFO  [16632] [rtc::impl::WsTransport::incoming@118] WebSocket open\nWebSocket connected, signaling ready\nEnter a remote ID to send an offer:\nUDL4\nOffering to UDL4\nCreating DataChannel with label \"DC-1\"\n2021-04-10 19:54:53.381 INFO  [16625] [rtc::impl::IceTransport::IceTransport@106] Using STUN server \"stun.l.google.com:19302\"\n2021-04-10 19:54:53.382 INFO  [16625] [rtc::impl::PeerConnection::changeSignalingState@1044] Changed signaling state to new\n2021-04-10 19:54:53.382 INFO  [16625] [rtc::impl::PeerConnection::changeGatheringState@1033] Changed gathering state to in-progress\nGathering State: in-progress\n2021-04-10 19:54:53.383 INFO  [16625] [rtc::impl::IceTransport::LogCallback@339] juice: agent.c:787: Changing state to gathering\nBenchmark will run for 300 seconds\n2021-04-10 19:54:53.384 INFO  [16646] [rtc::impl::IceTransport::LogCallback@339] juice: agent.c:787: Changing state to connecting\n2021-04-10 19:54:53.384 INFO  [16646] [rtc::impl::PeerConnection::changeState@1016] Changed state to connecting\nState: connecting\n2021-04-10 19:54:53.475 INFO  [16646] [rtc::impl::IceTransport::LogCallback@339] juice: agent.c:610: Using STUN server stun.l.google.com:19302\n2021-04-10 19:54:53.475 INFO  [16632] [rtc::impl::PeerConnection::changeSignalingState@1044] Changed signaling state to connecting\n2021-04-10 19:54:53.527 INFO  [16646] [rtc::impl::IceTransport::LogCallback@339] juice: agent.c:1328: STUN server binding successful\n2021-04-10 19:54:53.575 INFO  [16646] [rtc::impl::IceTransport::LogCallback@339] juice: agent.c:787: Changing state to connected\n2021-04-10 19:54:53.625 INFO  [16646] [rtc::impl::IceTransport::LogCallback@339] juice: agent.c:787: Changing state to completed\n#1\n      DC-1 Received: 0 KB/s   Sent: 0 KB/s   BufferSize: 0\n      TOTL Received: 0 KB/s   Sent: 0 KB/s\n2021-04-10 19:54:54.481 INFO  [16653] [rtc::impl::DtlsTransport::runRecvLoop@503] DTLS handshake finished\n2021-04-10 19:54:54.491 INFO  [16627] [rtc::impl::SctpTransport::processNotification@713] SCTP connected\n2021-04-10 19:54:54.491 INFO  [16627] [rtc::impl::PeerConnection::changeState@1016] Changed state to connected\nState: connected\nDataChannel from UDL4 open\n#2\n      DC-1 Received: 84326 KB/s   Sent: 0 KB/s   BufferSize: 0\n      TOTL Received: 84326 KB/s   Sent: 0 KB/s\n#3\n      DC-1 Received: 99387 KB/s   Sent: 0 KB/s   BufferSize: 0\n      TOTL Received: 99387 KB/s   Sent: 0 KB/s\n2021-04-10 19:54:57.025 INFO  [16646] [rtc::impl::IceTransport::LogCallback@339] juice: agent.c:843: STUN server binding failed (timeout)\n2021-04-10 19:54:57.025 INFO  [16646] [rtc::impl::IceTransport::LogCallback@339] juice: agent.c:2206: Candidate gathering done\n2021-04-10 19:54:57.025 INFO  [16646] [rtc::impl::PeerConnection::changeGatheringState@1033] Changed gathering state to complete\nGathering State: complete\n#4\n      DC-1 Received: 94871 KB/s   Sent: 0 KB/s   BufferSize: 0\n      TOTL Received: 94871 KB/s   Sent: 0 KB/s\n#5\n      DC-1 Received: 96259 KB/s   Sent: 0 KB/s   BufferSize: 0\n      TOTL Received: 96259 KB/s   Sent: 0 KB/s\nStats# Received Total: 377 MB   Sent Total: 0 MB   RTT: 2 ms\n\n#6\n      DC-1 Received: 92873 KB/s   Sent: 0 KB/s   BufferSize: 0\n      TOTL Received: 92873 KB/s   Sent: 0 KB/s\n#7\n      DC-1 Received: 87724 KB/s   Sent: 0 KB/s   BufferSize: 0\n      TOTL Received: 87724 KB/s   Sent: 0 KB/s\n#8\n      DC-1 Received: 95123 KB/s   Sent: 0 KB/s   BufferSize: 0\n      TOTL Received: 95123 KB/s   Sent: 0 KB/s\n#9\n      DC-1 Received: 100022 KB/s   Sent: 0 KB/s   BufferSize: 0\n      TOTL Received: 100022 KB/s   Sent: 0 KB/s\n#10\n      DC-1 Received: 98124 KB/s   Sent: 0 KB/s   BufferSize: 0\n      TOTL Received: 98124 KB/s   Sent: 0 KB/s\nStats# Received Total: 853 MB   Sent Total: 0 MB   RTT: 2 ms\n\n#11\n      DC-1 Received: 103628 KB/s   Sent: 0 KB/s   BufferSize: 0\n      TOTL Received: 103628 KB/s   Sent: 0 KB/s\n#12\n      DC-1 Received: 106166 KB/s   Sent: 0 KB/s   BufferSize: 0\n      TOTL Received: 106166 KB/s   Sent: 0 KB/s\n#13\n      DC-1 Received: 98410 KB/s   Sent: 0 KB/s   BufferSize: 0\n      TOTL Received: 98410 KB/s   Sent: 0 KB/s\n#14\n      DC-1 Received: 99854 KB/s   Sent: 0 KB/s   BufferSize: 0\n      TOTL Received: 99854 KB/s   Sent: 0 KB/s\n#15\n      DC-1 Received: 98487 KB/s   Sent: 0 KB/s   BufferSize: 0\n      TOTL Received: 98487 KB/s   Sent: 0 KB/s\nStats# Received Total: 1362 MB   Sent Total: 0 MB   RTT: 2 ms\n```\n\n----------------------------------------\n\nTITLE: Deleting Channels in libdatachannel (C)\nDESCRIPTION: Deletes a channel, implicitly closing it if not already closed. The channel ID cannot be used after this function call.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/pages/content/pages/reference.md#2025-04-22_snippet_24\n\nLANGUAGE: c\nCODE:\n```\nint rtcDelete(int id)\n```\n\n----------------------------------------\n\nTITLE: Starting the Streamer Application\nDESCRIPTION: Commands to navigate to the streamer build directory and execute the streamer application. Includes a list of available command-line arguments for customization.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/examples/streamer/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ cd build/examples/streamer\n$ ./streamer\n```\n\n----------------------------------------\n\nTITLE: Retrieving Local SDP Description from WebRTC Connection (C)\nDESCRIPTION: Retrieves the current local Session Description Protocol (SDP) description. Returns the length of the description or just the required buffer size if buffer is NULL.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/DOC.md#2025-04-22_snippet_10\n\nLANGUAGE: c\nCODE:\n```\nint rtcGetLocalDescription(int pc, char *buffer, int size)\n```\n\n----------------------------------------\n\nTITLE: Running One-Way Benchmark with libdatachannel for 300 seconds\nDESCRIPTION: Command-line instructions for starting a one-way benchmark using the client-benchmark tool. The first peer is started with the -o option to indicate it will only receive data, while the second peer will send data for 300 seconds.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/examples/client-benchmark/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./client-benchmark -d 300 -o\n```\n\nLANGUAGE: bash\nCODE:\n```\n./client-benchmark -d 300\n```\n\n----------------------------------------\n\nTITLE: Preloading Resources for libdatachannel in C\nDESCRIPTION: Preloads global resources used by the library. This optional call ensures resources are available before they're needed, improving initial connection timing. It blocks until preloading is complete.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/pages/content/pages/reference.md#2025-04-22_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nvoid rtcPreload(void)\n```\n\n----------------------------------------\n\nTITLE: Starting Python Signaling Server\nDESCRIPTION: Command to start the signaling server using Python, which handles WebRTC connection establishment.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/examples/streamer/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ python3 examples/signaling-server-python/signaling-server.py\n```\n\n----------------------------------------\n\nTITLE: Getting Local Network Address from WebRTC Connection (C)\nDESCRIPTION: Retrieves the current local network address in the format \"IP_ADDRESS:PORT\". This represents the network address of the currently selected local candidate.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/pages/content/pages/reference.md#2025-04-22_snippet_15\n\nLANGUAGE: c\nCODE:\n```\nint rtcGetLocalAddress(int pc, char *buffer, int size)\n```\n\n----------------------------------------\n\nTITLE: Benchmark Execution Log\nDESCRIPTION: Detailed log output showing WebRTC connection establishment, DataChannel creation, and throughput statistics across 5 channels. Includes connection states, ICE gathering, STUN interactions, and periodic throughput measurements.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/examples/client-benchmark/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nSTUN server is stun:stun.l.google.com:19302\nThe local ID is: QZ46\nURL is ws://localhost:8000/QZ46\nWaiting for signaling to be connected...\n2021-04-10 19:57:28.562 INFO  [17117] [rtc::impl::TcpTransport::connect@163] Connected to localhost:8000\n2021-04-10 19:57:28.562 INFO  [17117] [rtc::impl::TcpTransport::runLoop@331] TCP connected\n2021-04-10 19:57:28.563 INFO  [17117] [rtc::impl::WsTransport::incoming@118] WebSocket open\nWebSocket connected, signaling ready\nEnter a remote ID to send an offer:\nlTZA\nOffering to lTZA\nCreating DataChannel with label \"DC-1\"\n[...continued log output...]\n```\n\n----------------------------------------\n\nTITLE: Setting User Pointer for libdatachannel Objects in C\nDESCRIPTION: Sets an opaque user pointer for a Peer Connection, Data Channel, Track, or WebSocket. This pointer is passed as the last argument in corresponding callbacks and is not accessed by the library.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/pages/content/pages/reference.md#2025-04-22_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nvoid rtcSetUserPointer(int id, void *user_ptr)\n```\n\n----------------------------------------\n\nTITLE: Deleting a Track in WebRTC (C)\nDESCRIPTION: Deletes a Track identified by its identifier. The function blocks until all scheduled callbacks return and prevents further callbacks for the track.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/DOC.md#2025-04-22_snippet_39\n\nLANGUAGE: c\nCODE:\n```\nint rtcDeleteTrack(int tr)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Remote Network Address from WebRTC Connection (C)\nDESCRIPTION: Retrieves the current remote network address of the selected candidate in \"IP_ADDRESS:PORT\" format. May fail if the connection is not in RTC_CONNECTED state.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/DOC.md#2025-04-22_snippet_16\n\nLANGUAGE: c\nCODE:\n```\nint rtcGetRemoteAddress(int pc, char *buffer, int size)\n```\n\n----------------------------------------\n\nTITLE: Sample Output from Constant Throughput WebRTC Benchmark\nDESCRIPTION: Example output from the offering peer in a constant throughput benchmark test, showing connection establishment and regular throughput statistics maintaining the configured 8000 KB/s rate over a 300-second test period.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/examples/client-benchmark/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nSTUN server is stun:stun.l.google.com:19302\nThe local ID is: 5zkC\nURL is ws://localhost:8000/5zkC\nWaiting for signaling to be connected...\n2021-04-10 19:52:49.788 INFO  [16530] [rtc::impl::TcpTransport::connect@163] Connected to localhost:8000\n2021-04-10 19:52:49.788 INFO  [16530] [rtc::impl::TcpTransport::runLoop@331] TCP connected\n2021-04-10 19:52:49.789 INFO  [16530] [rtc::impl::WsTransport::incoming@118] WebSocket open\nWebSocket connected, signaling ready\nEnter a remote ID to send an offer:\nWawD\nOffering to WawD\nCreating DataChannel with label \"DC-1\"\n2021-04-10 19:52:57.720 INFO  [16523] [rtc::impl::IceTransport::IceTransport@106] Using STUN server \"stun.l.google.com:19302\"\n2021-04-10 19:52:57.721 INFO  [16523] [rtc::impl::PeerConnection::changeSignalingState@1044] Changed signaling state to new\n2021-04-10 19:52:57.721 INFO  [16523] [rtc::impl::PeerConnection::changeGatheringState@1033] Changed gathering state to in-progress\nGathering State: in-progress\n2021-04-10 19:52:57.722 INFO  [16523] [rtc::impl::IceTransport::LogCallback@339] juice: agent.c:787: Changing state to gathering\nBenchmark will run for 300 seconds\n2021-04-10 19:52:57.722 INFO  [16533] [rtc::impl::IceTransport::LogCallback@339] juice: agent.c:787: Changing state to connecting\n2021-04-10 19:52:57.722 INFO  [16533] [rtc::impl::PeerConnection::changeState@1016] Changed state to connecting\nState: connecting\n2021-04-10 19:52:57.725 INFO  [16533] [rtc::impl::IceTransport::LogCallback@339] juice: agent.c:610: Using STUN server stun.l.google.com:19302\n2021-04-10 19:52:57.727 INFO  [16530] [rtc::impl::PeerConnection::changeSignalingState@1044] Changed signaling state to connecting\n2021-04-10 19:52:57.826 INFO  [16533] [rtc::impl::IceTransport::LogCallback@339] juice: agent.c:787: Changing state to connected\n2021-04-10 19:52:57.828 INFO  [16533] [rtc::impl::IceTransport::LogCallback@339] juice: agent.c:787: Changing state to completed\n2021-04-10 19:52:57.829 INFO  [16533] [rtc::impl::IceTransport::LogCallback@339] juice: agent.c:1328: STUN server binding successful\n2021-04-10 19:52:57.884 INFO  [16535] [rtc::impl::DtlsTransport::runRecvLoop@503] DTLS handshake finished\n2021-04-10 19:52:57.907 INFO  [16526] [rtc::impl::SctpTransport::processNotification@713] SCTP connected\n2021-04-10 19:52:57.907 INFO  [16526] [rtc::impl::PeerConnection::changeState@1016] Changed state to connected\nState: connected\nDataChannel from WawD open\n#1\n      DC-1 Received: 6515 KB/s   Sent: 6577 KB/s   BufferSize: 0\n      TOTL Received: 6515 KB/s   Sent: 6577 KB/s\n#2\n      DC-1 Received: 7998 KB/s   Sent: 7999 KB/s   BufferSize: 0\n      TOTL Received: 7998 KB/s   Sent: 7999 KB/s\n#3\n      DC-1 Received: 7933 KB/s   Sent: 7999 KB/s   BufferSize: 0\n      TOTL Received: 7933 KB/s   Sent: 7999 KB/s\n2021-04-10 19:53:01.275 INFO  [16533] [rtc::impl::IceTransport::LogCallback@339] juice: agent.c:843: STUN server binding failed (timeout)\n2021-04-10 19:53:01.275 INFO  [16533] [rtc::impl::IceTransport::LogCallback@339] juice: agent.c:2206: Candidate gathering done\n2021-04-10 19:53:01.275 INFO  [16533] [rtc::impl::PeerConnection::changeGatheringState@1033] Changed gathering state to complete\nGathering State: complete\n#4\n      DC-1 Received: 8070 KB/s   Sent: 8000 KB/s   BufferSize: 0\n      TOTL Received: 8070 KB/s   Sent: 8000 KB/s\n#5\n      DC-1 Received: 7984 KB/s   Sent: 8000 KB/s   BufferSize: 0\n      TOTL Received: 7984 KB/s   Sent: 8000 KB/s\nStats# Received Total: 39 MB   Sent Total: 39 MB   RTT: 0 ms\n\n#6\n      DC-1 Received: 8004 KB/s   Sent: 7998 KB/s   BufferSize: 0\n      TOTL Received: 8004 KB/s   Sent: 7998 KB/s\n#7\n      DC-1 Received: 7997 KB/s   Sent: 8000 KB/s   BufferSize: 0\n      TOTL Received: 7997 KB/s   Sent: 8000 KB/s\n#8\n      DC-1 Received: 8008 KB/s   Sent: 8000 KB/s   BufferSize: 0\n      TOTL Received: 8008 KB/s   Sent: 8000 KB/s\n#9\n      DC-1 Received: 8007 KB/s   Sent: 8000 KB/s   BufferSize: 0\n      TOTL Received: 8007 KB/s   Sent: 8000 KB/s\n#10\n      DC-1 Received: 7999 KB/s   Sent: 7999 KB/s   BufferSize: 0\n      TOTL Received: 7999 KB/s   Sent: 7999 KB/s\nStats# Received Total: 81 MB   Sent Total: 81 MB   RTT: 0 ms\n\n#11\n      DC-1 Received: 7997 KB/s   Sent: 8001 KB/s   BufferSize: 0\n      TOTL Received: 7997 KB/s   Sent: 8001 KB/s\n#12\n      DC-1 Received: 7981 KB/s   Sent: 7997 KB/s   BufferSize: 0\n      TOTL Received: 7981 KB/s   Sent: 7997 KB/s\n#13\n      DC-1 Received: 8024 KB/s   Sent: 8000 KB/s   BufferSize: 0\n      TOTL Received: 8024 KB/s   Sent: 8000 KB/s\n#14\n      DC-1 Received: 7990 KB/s   Sent: 7999 KB/s   BufferSize: 0\n      TOTL Received: 7990 KB/s   Sent: 7999 KB/s\n#15\n      DC-1 Received: 8001 KB/s   Sent: 8002 KB/s   BufferSize: 0\n      TOTL Received: 8001 KB/s   Sent: 8002 KB/s\nStats# Received Total: 122 MB   Sent Total: 122 MB   RTT: 0 ms\n```\n\n----------------------------------------\n\nTITLE: Retrieving Local Network Address from WebRTC Connection (C)\nDESCRIPTION: Retrieves the current local network address of the selected candidate in \"IP_ADDRESS:PORT\" format. May fail if the connection is not in RTC_CONNECTED state.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/DOC.md#2025-04-22_snippet_15\n\nLANGUAGE: c\nCODE:\n```\nint rtcGetLocalAddress(int pc, char *buffer, int size)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Track Mid in WebRTC (C)\nDESCRIPTION: Retrieves the mid (media identifier) of a Track. It copies the mid into a user-supplied buffer and returns the length of the copied string or an error code.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/DOC.md#2025-04-22_snippet_41\n\nLANGUAGE: c\nCODE:\n```\nint rtcGetTrackMid(int tr, char *buffer, int size)\n```\n\n----------------------------------------\n\nTITLE: Getting Maximum Data Channel Stream ID in WebRTC Connection (C)\nDESCRIPTION: Retrieves the maximum stream ID a Data Channel may use. Useful for creating user-negotiated Data Channels with custom stream IDs.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/pages/content/pages/reference.md#2025-04-22_snippet_19\n\nLANGUAGE: c\nCODE:\n```\nint rtcGetMaxDataChannelStream(int pc);\n```\n\n----------------------------------------\n\nTITLE: Running Benchmark Command\nDESCRIPTION: Command to execute the WebRTC benchmark client with parameters for duration (300s), throughput (8000 bytes), buffer size (10000 bytes), and number of channels (5)\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/examples/client-benchmark/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./client-benchmark -p -d 300 -r 8000 -b 10000 -c 5\n```\n\n----------------------------------------\n\nTITLE: Retrieving Selected ICE Candidate Pair from WebRTC Connection (C)\nDESCRIPTION: Gets the currently selected ICE candidate pair being used for the connection. May fail if the connection is not in RTC_CONNECTED state.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/pages/content/pages/reference.md#2025-04-22_snippet_17\n\nLANGUAGE: c\nCODE:\n```\nint rtcGetSelectedCandidatePair(int pc, char *local, int localSize, char *remote, int remoteSize)\n```\n\n----------------------------------------\n\nTITLE: Retrieving WebSocket Path in WebRTC (C)\nDESCRIPTION: Retrieves the path of a WebSocket (HTTP requested path). It copies the path into a user-supplied buffer and returns the length of the copied string or an error code.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/DOC.md#2025-04-22_snippet_46\n\nLANGUAGE: c\nCODE:\n```\nint rtcGetWebSocketPath(int ws, char *buffer, int size)\n```\n\n----------------------------------------\n\nTITLE: Getting Remote Maximum Message Size for WebRTC Data Channels (C)\nDESCRIPTION: Retrieves the maximum message size for data channels on the peer connection as negotiated with the remote peer.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/pages/content/pages/reference.md#2025-04-22_snippet_20\n\nLANGUAGE: c\nCODE:\n```\nint rtcGetRemoteMaxMessageSize(int pc)\n```\n\n----------------------------------------\n\nTITLE: Capturing Webcam Video with GStreamer and Streaming via RTP\nDESCRIPTION: This GStreamer pipeline captures video from a V4L2 webcam, encodes it with H.264, and sends it as an RTP stream to localhost:6000. The pipeline configures the video with 640x480 resolution and uses x264 encoding with zerolatency tuning and constrained-baseline profile suitable for WebRTC.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/examples/media-sender/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 v4l2src device=/dev/video0 ! video/x-raw,width=640,height=480 ! videoconvert ! queue ! x264enc tune=zerolatency bitrate=1000 key-int-max=30 ! video/x-h264, profile=constrained-baseline ! rtph264pay pt=96 mtu=1200 ! udpsink host=127.0.0.1 port=6000\n```\n\n----------------------------------------\n\nTITLE: Getting Remote Network Address from WebRTC Connection (C)\nDESCRIPTION: Retrieves the current remote network address in the format \"IP_ADDRESS:PORT\". This represents the network address of the currently selected remote candidate.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/pages/content/pages/reference.md#2025-04-22_snippet_16\n\nLANGUAGE: c\nCODE:\n```\nint rtcGetRemoteAddress(int pc, char *buffer, int size)\n```\n\n----------------------------------------\n\nTITLE: Starting a local web server using Python for libdatachannel JavaScript client\nDESCRIPTION: Command to start a Python HTTP server on localhost port 8080 to serve the JavaScript client equivalent for libdatachannel. This allows accessing the web client through a browser.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/examples/web/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ python3 -m http.server --bind 127.0.0.1 8080\n```\n\n----------------------------------------\n\nTITLE: Checking If Negotiation Is Needed in WebRTC Connection (C)\nDESCRIPTION: Returns whether negotiation needs to be started or restarted, which can happen when new tracks are added. If true, the user should call rtcSetLocalDescription() to initiate negotiation.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/pages/content/pages/reference.md#2025-04-22_snippet_18\n\nLANGUAGE: c\nCODE:\n```\nbool rtcIsNegotiationNeeded(int pc);\n```\n\n----------------------------------------\n\nTITLE: Saving RTP Video Stream to MP4 File with GStreamer\nDESCRIPTION: GStreamer pipeline command that captures an RTP stream on localhost:5000, decodes the H.264 video, and saves it to an MP4 file named 'out.mp4'.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/examples/media-receiver/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 -e udpsrc address=127.0.0.1 port=5000 caps=\"application/x-rtp\" ! queue ! rtph264depay ! h264parse ! mp4mux ! filesink location=out.mp4\n```\n\n----------------------------------------\n\nTITLE: Retrieving Local SDP Description from WebRTC Connection (C)\nDESCRIPTION: Gets the current local SDP description. Returns the length of the copied string or required buffer size if buffer is NULL.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/pages/content/pages/reference.md#2025-04-22_snippet_10\n\nLANGUAGE: c\nCODE:\n```\nint rtcGetLocalDescription(int pc, char *buffer, int size)\n```\n\n----------------------------------------\n\nTITLE: Cloning libdatachannel Repository\nDESCRIPTION: Command to clone the libdatachannel repository from GitHub.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/BUILDING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/paullouisageneau/libdatachannel.git\n```\n\n----------------------------------------\n\nTITLE: Retrieving Buffered Amount for Channels in C\nDESCRIPTION: Function to get the current buffered amount, which is the total size of messages waiting to be sent in the channel. Does not account for transport-level buffering.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/DOC.md#2025-04-22_snippet_28\n\nLANGUAGE: c\nCODE:\n```\nint rtcGetBufferedAmount(int id)\n```\n\n----------------------------------------\n\nTITLE: Displaying RTP Video Stream with GStreamer\nDESCRIPTION: GStreamer pipeline command that receives RTP stream on localhost:5000, decodes the H.264 video, and displays it on screen. It requires receiving an I-frame to start displaying properly.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/examples/media-receiver/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngst-launch-1.0 udpsrc address=127.0.0.1 port=5000 caps=\"application/x-rtp\" ! queue ! rtph264depay ! video/x-h264,stream-format=byte-stream ! queue ! avdec_h264 ! queue ! autovideosink\n```\n\n----------------------------------------\n\nTITLE: Retrieving Remote SDP Description from WebRTC Connection (C)\nDESCRIPTION: Retrieves the current remote Session Description Protocol (SDP) description. Returns the length of the description or just the required buffer size if buffer is NULL.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/DOC.md#2025-04-22_snippet_11\n\nLANGUAGE: c\nCODE:\n```\nint rtcGetRemoteDescription(int pc, char *buffer, int size)\n```\n\n----------------------------------------\n\nTITLE: Direct Make Build on Linux\nDESCRIPTION: Command for building directly with Make on Linux systems with specific feature flags.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/BUILDING.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmake USE_GNUTLS=0 USE_NICE=0\n```\n\n----------------------------------------\n\nTITLE: Setting Buffered Amount Low Threshold in C\nDESCRIPTION: Function to change the threshold for triggering BufferedAmountLowCallback. The callback is called when the buffered amount drops below this threshold after being above it.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/DOC.md#2025-04-22_snippet_29\n\nLANGUAGE: c\nCODE:\n```\nint rtcSetBufferedAmountLowThreshold(int id, int amount)\n```\n\n----------------------------------------\n\nTITLE: Starting Local Web Server\nDESCRIPTION: Commands to change directory to the streamer example folder and start a Python HTTP server on localhost port 8080.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/examples/streamer/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ cd examples/streamer\n$ python3 -m http.server --bind 127.0.0.1 8080\n```\n\n----------------------------------------\n\nTITLE: Getting Buffered Amount in libdatachannel (C)\nDESCRIPTION: Retrieves the current buffered amount of messages waiting to be sent in the channel. Does not account for transport-level buffering.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/pages/content/pages/reference.md#2025-04-22_snippet_28\n\nLANGUAGE: c\nCODE:\n```\nint rtcGetBufferedAmount(int id)\n```\n\n----------------------------------------\n\nTITLE: Generating Xcode Project on macOS\nDESCRIPTION: CMake command to generate an Xcode project with specific configuration options for macOS builds.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/BUILDING.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncmake -B build -G Xcode -DUSE_GNUTLS=0 -DUSE_NICE=0\n```\n\n----------------------------------------\n\nTITLE: Getting Data Channel Stream ID in C\nDESCRIPTION: Function to retrieve the stream ID of a Data Channel.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/DOC.md#2025-04-22_snippet_34\n\nLANGUAGE: c\nCODE:\n```\nint rtcGetDataChannelStream(int dc)\n```\n\n----------------------------------------\n\nTITLE: Configuring USRSCTP Dependency in CMake\nDESCRIPTION: Sets up the USRSCTP dependency by either using the system-provided package or building it from the deps directory with specific options.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/CMakeLists.txt#2025-04-22_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nif(USE_SYSTEM_USRSCTP)\n\tfind_package(Usrsctp REQUIRED)\nelse()\n\toption(sctp_build_shared_lib OFF)\n\toption(sctp_build_programs OFF)\n\toption(sctp_inet OFF)\n\toption(sctp_inet6 OFF)\n\toption(sctp_werror OFF)\n\tset(CMAKE_POLICY_DEFAULT_CMP0077 NEW)\n\tadd_subdirectory(deps/usrsctp EXCLUDE_FROM_ALL)\n\tif (MSYS OR MINGW)\n\t\ttarget_compile_definitions(usrsctp PUBLIC -DSCTP_STDINT_INCLUDE=<stdint.h>)\n\tendif()\n\tadd_library(Usrsctp::Usrsctp ALIAS usrsctp)\n\n\tif(INSTALL_DEPS_LIBS)\n\t\tinstall(TARGETS usrsctp EXPORT LibDataChannelTargets)\n\t\t# Fix directories\n\t\tset_target_properties(usrsctp PROPERTIES INTERFACE_INCLUDE_DIRECTORIES \"\")\n\t\ttarget_include_directories(usrsctp INTERFACE\n\t\t\t$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/deps/usrsctp/usrsctplib>\n\t\t\t$<INSTALL_INTERFACE:>)\n\tendif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Buffered Amount Low Threshold in libdatachannel (C)\nDESCRIPTION: Changes the threshold for the BufferedAmountLowCallback. The callback is triggered when the buffered amount drops to or below this threshold.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/pages/content/pages/reference.md#2025-04-22_snippet_29\n\nLANGUAGE: c\nCODE:\n```\nint rtcSetBufferedAmountLowThreshold(int id, int amount)\n```\n\n----------------------------------------\n\nTITLE: Building with MinGW on Windows\nDESCRIPTION: CMake commands for cross-compiling the library on Windows using MinGW toolchain.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/BUILDING.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncmake -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=/usr/share/mingw/toolchain-x86_64-w64-mingw32.cmake\ncd build\nmake -j2\n```\n\n----------------------------------------\n\nTITLE: Getting Data Channel Stream ID in libdatachannel (C)\nDESCRIPTION: Retrieves the stream ID of a Data Channel. Returns the stream ID or a negative error code.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/pages/content/pages/reference.md#2025-04-22_snippet_34\n\nLANGUAGE: c\nCODE:\n```\nint rtcGetDataChannelStream(int dc)\n```\n\n----------------------------------------\n\nTITLE: Configuring LibDataChannel Examples in CMake\nDESCRIPTION: This snippet sets up various example projects for LibDataChannel. It conditionally includes different examples based on build options and dependencies. The examples cover different aspects of the library's functionality.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/CMakeLists.txt#2025-04-22_snippet_26\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT NO_EXAMPLES)\n\tset(JSON_BuildTests OFF CACHE INTERNAL \"\")\n\tif(USE_SYSTEM_JSON)\n\t\tfind_package(nlohmann_json REQUIRED)\n\telse()\n\t\tadd_subdirectory(deps/json EXCLUDE_FROM_ALL)\n\tendif()\n\n\tif(NOT NO_WEBSOCKET)\n\t\tadd_subdirectory(examples/client)\n\t\tadd_subdirectory(examples/client-benchmark)\n\tendif()\n\tif(NOT NO_MEDIA)\n\t\tadd_subdirectory(examples/media-receiver)\n\t\tadd_subdirectory(examples/media-sender)\n\t\tadd_subdirectory(examples/media-sfu)\n\tendif()\n\tif(NOT NO_MEDIA AND NOT NO_WEBSOCKET)\n    \tadd_subdirectory(examples/streamer)\n\tendif()\n\tadd_subdirectory(examples/copy-paste)\n\tadd_subdirectory(examples/copy-paste-capi)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Receiving Messages from Channels in C\nDESCRIPTION: Function to receive pending messages. It can only be called if MessageCallback is not set. Returns RTC_ERR_NOT_AVAIL when no messages are pending.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/DOC.md#2025-04-22_snippet_30\n\nLANGUAGE: c\nCODE:\n```\nint rtcReceiveMessage(int id, char *buffer, int *size)\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Options in CMake for libdatachannel\nDESCRIPTION: Defines various build options including shared library builds, SSL implementation choices, system library preferences, and feature toggles for WebSocket, media transport, examples and tests.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\noption(BUILD_SHARED_LIBS \"Build shared library\" ON)\noption(BUILD_SHARED_DEPS_LIBS \"Build submodules as shared libraries\" OFF)\noption(USE_GNUTLS \"Use GnuTLS instead of OpenSSL\" OFF)\noption(USE_MBEDTLS \"Use Mbed TLS instead of OpenSSL\" OFF)\noption(USE_NICE \"Use libnice instead of libjuice\" OFF)\noption(PREFER_SYSTEM_LIB \"Prefer system libraries over submodules\" OFF)\n```\n\n----------------------------------------\n\nTITLE: Getting Data Channel Protocol in C\nDESCRIPTION: Function to retrieve the protocol of a Data Channel. If buffer is NULL, only the required size is returned.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/DOC.md#2025-04-22_snippet_36\n\nLANGUAGE: c\nCODE:\n```\nint rtcGetDataChannelProtocol(int dc, char *buffer, int size)\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows-specific Dependencies in CMake\nDESCRIPTION: Links Windows-specific libraries (winsock2) when building on Windows platforms.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/CMakeLists.txt#2025-04-22_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\nif(WIN32)\n\ttarget_link_libraries(datachannel PUBLIC ws2_32) # winsock2\n\ttarget_link_libraries(datachannel-static PUBLIC ws2_32) # winsock2\nendif()\n```\n\n----------------------------------------\n\nTITLE: Getting Available Message Amount in libdatachannel (C)\nDESCRIPTION: Retrieves the total size of messages pending reception. Can only be called if MessageCallback is not set.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/pages/content/pages/reference.md#2025-04-22_snippet_31\n\nLANGUAGE: c\nCODE:\n```\nint rtcGetAvailableAmount(int id)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files for libdatachannel\nDESCRIPTION: Defines lists of source and header files for the main library implementation, including core functionality, media handling, and network protocols.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIBDATACHANNEL_SOURCES\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/candidate.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/channel.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/configuration.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/datachannel.cpp\n```\n\n----------------------------------------\n\nTITLE: Getting Data Channel Reliability in libdatachannel (C)\nDESCRIPTION: Retrieves the reliability settings of a Data Channel. Fills a user-supplied rtcReliability structure with the settings.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/pages/content/pages/reference.md#2025-04-22_snippet_37\n\nLANGUAGE: c\nCODE:\n```\nint rtcGetDataChannelReliability(int dc, rtcReliability *reliability)\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Support in CMake\nDESCRIPTION: Conditionally enables or disables WebSocket support based on the NO_WEBSOCKET option.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/CMakeLists.txt#2025-04-22_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\nif (NO_WEBSOCKET)\n\ttarget_compile_definitions(datachannel PUBLIC RTC_ENABLE_WEBSOCKET=0)\n\ttarget_compile_definitions(datachannel-static PUBLIC RTC_ENABLE_WEBSOCKET=0)\nelse()\n\ttarget_compile_definitions(datachannel PUBLIC RTC_ENABLE_WEBSOCKET=1)\n\ttarget_compile_definitions(datachannel-static PUBLIC RTC_ENABLE_WEBSOCKET=1)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Checking Channel Closed Status in libdatachannel (C)\nDESCRIPTION: Checks if a channel is closed. Returns true if the channel exists and is closed (not open and not connecting), false otherwise.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/pages/content/pages/reference.md#2025-04-22_snippet_26\n\nLANGUAGE: c\nCODE:\n```\nbool rtcIsClosed(int id)\n```\n\n----------------------------------------\n\nTITLE: Creating DataChannel Shared Library Target in CMake\nDESCRIPTION: Defines the main datachannel shared library target with source files and properties including version, C++ standard, and symbol visibility.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/CMakeLists.txt#2025-04-22_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(datachannel\n\t${LIBDATACHANNEL_SOURCES}\n\t${LIBDATACHANNEL_HEADERS}\n\t${LIBDATACHANNEL_IMPL_SOURCES}\n\t${LIBDATACHANNEL_IMPL_HEADERS})\nset_target_properties(datachannel PROPERTIES\n\tVERSION ${PROJECT_VERSION}\n\tSOVERSION ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}\n\tCXX_STANDARD 17\n\tCXX_VISIBILITY_PRESET default)\nif(APPLE)\n\tset_target_properties(datachannel PROPERTIES\n\t\tVERSION ${PROJECT_VERSION_MAJOR}\n\t\tSOVERSION ${PROJECT_VERSION_MAJOR})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Track SDP Description in WebRTC (C)\nDESCRIPTION: Retrieves the SDP media description of a Track. It copies the description into a user-supplied buffer and returns the length of the copied string or an error code.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/DOC.md#2025-04-22_snippet_40\n\nLANGUAGE: c\nCODE:\n```\nint rtcGetTrackDescription(int tr, char *buffer, int size)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Streamer Application Using libdatachannel\nDESCRIPTION: Complete CMake configuration that sets up build parameters for a streaming application. It defines source files, handles UWP platform specifics, configures C++17 standard, and links required dependencies like LibDataChannel and nlohmann_json.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/examples/streamer/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.7)\nif(POLICY CMP0079)\n\tcmake_policy(SET CMP0079 NEW)\nendif()\n\nset(STREAMER_SOURCES\n\tmain.cpp\n\tdispatchqueue.cpp\n\tdispatchqueue.hpp\n\th264fileparser.cpp\n\th264fileparser.hpp\n\thelpers.cpp\n\thelpers.hpp\n\topusfileparser.cpp\n\topusfileparser.hpp\n\tfileparser.cpp\n\tfileparser.hpp\n\tstream.cpp\n\tstream.hpp\n\tArgParser.cpp\n\tArgParser.hpp\n)\n\nset(STREAMER_UWP_RESOURCES\n\tuwp/Logo.png\n\tuwp/package.appxManifest\n\tuwp/SmallLogo.png\n\tuwp/SmallLogo44x44.png\n\tuwp/SplashScreen.png\n\tuwp/StoreLogo.png\n\tuwp/Windows_TemporaryKey.pfx\n)\n\nif(CMAKE_SYSTEM_NAME STREQUAL \"WindowsStore\")\n\tadd_executable(streamer ${STREAMER_SOURCES} ${STREAMER_UWP_RESOURCES})\nelse()\n\tadd_executable(streamer ${STREAMER_SOURCES})\nendif()\n\nset_target_properties(streamer PROPERTIES\n\tCXX_STANDARD 17\n\tOUTPUT_NAME streamer)\n\nset_target_properties(streamer PROPERTIES\n\tXCODE_ATTRIBUTE_PRODUCT_BUNDLE_IDENTIFIER com.github.paullouisageneau.libdatachannel.examples.streamer)\n\nfind_package(Threads REQUIRED)\ntarget_link_libraries(streamer LibDataChannel::LibDataChannel Threads::Threads nlohmann_json::nlohmann_json)\n\nif(MSVC)\n\tadd_custom_command(TARGET streamer POST_BUILD\n\t\tCOMMAND ${CMAKE_COMMAND} -E copy_if_different\n\t\t\"$<TARGET_FILE_DIR:datachannel>/datachannel.dll\"\n\t\t$<TARGET_FILE_DIR:streamer>\n\t)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Getting Data Channel Label in libdatachannel (C)\nDESCRIPTION: Retrieves the label of a Data Channel. Returns the length of the label string or a negative error code.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/pages/content/pages/reference.md#2025-04-22_snippet_35\n\nLANGUAGE: c\nCODE:\n```\nint rtcGetDataChannelLabel(int dc, char *buffer, int size)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Threading Support in CMake\nDESCRIPTION: Configures thread support with preference for pthreads and finds the Threads package.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/CMakeLists.txt#2025-04-22_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_THREAD_PREFER_PTHREAD TRUE)\nset(THREADS_PREFER_PTHREAD_FLAG TRUE)\nfind_package(Threads REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Retrieving WebRTC Track SDP Description in C\nDESCRIPTION: Retrieves the SDP media description of a Track. It copies the description into a user-supplied buffer and returns the length of the copied string or a negative error code.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/pages/content/pages/reference.md#2025-04-22_snippet_40\n\nLANGUAGE: c\nCODE:\n```\nint rtcGetTrackDescription(int tr, char *buffer, int size)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for Media SFU Example with UWP Support\nDESCRIPTION: Configures a CMake project for a media selective forwarding unit (SFU) example that uses libdatachannel. It defines different build configurations for WindowsStore (UWP) and regular platforms, sets C++17 as the standard, and links required libraries.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/examples/media-sfu/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.7)\n\nset(SFU_MEDIA_UWP_RESOURCES\n\tuwp/Logo.png\n\tuwp/package.appxManifest\n\tuwp/SmallLogo.png\n\tuwp/SmallLogo44x44.png\n\tuwp/SplashScreen.png\n\tuwp/StoreLogo.png\n\tuwp/Windows_TemporaryKey.pfx\n)\n\nif(CMAKE_SYSTEM_NAME STREQUAL \"WindowsStore\")\n\tadd_executable(datachannel-media-sfu main.cpp ${SFU_MEDIA_UWP_RESOURCES})\nelse()\n\tadd_executable(datachannel-media-sfu main.cpp)\nendif()\n\nset_target_properties(datachannel-media-sfu PROPERTIES\n\tCXX_STANDARD 17\n\tOUTPUT_NAME media-sfu)\n\nset_target_properties(datachannel-media-sfu PROPERTIES\n\tXCODE_ATTRIBUTE_PRODUCT_BUNDLE_IDENTIFIER com.github.paullouisageneau.libdatachannel.examples.sfumedia)\n\ntarget_link_libraries(datachannel-media-sfu LibDataChannel::LibDataChannel nlohmann_json::nlohmann_json)\n\nif(MSVC)\n\tadd_custom_command(TARGET datachannel-media-sfu POST_BUILD\n\t\tCOMMAND ${CMAKE_COMMAND} -E copy_if_different\n\t\t\"$<TARGET_FILE_DIR:datachannel>/datachannel.dll\"\n\t\t$<TARGET_FILE_DIR:datachannel-media-sfu>\n\t)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Getting Data Channel Protocol in libdatachannel (C)\nDESCRIPTION: Retrieves the protocol of a Data Channel. Returns the length of the protocol string or a negative error code.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/pages/content/pages/reference.md#2025-04-22_snippet_36\n\nLANGUAGE: c\nCODE:\n```\nint rtcGetDataChannelProtocol(int dc, char *buffer, int size)\n```\n\n----------------------------------------\n\nTITLE: Configuring Plog Dependency in CMake\nDESCRIPTION: Sets up the plog dependency by either using the system-provided package or including it from the deps directory.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/CMakeLists.txt#2025-04-22_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nif(USE_SYSTEM_PLOG)\n\tfind_package(plog REQUIRED)\nelse()\n\tset(CMAKE_POLICY_DEFAULT_CMP0048 NEW)\n\tadd_subdirectory(deps/plog EXCLUDE_FROM_ALL)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Retrieving WebRTC Track Mid in C\nDESCRIPTION: Retrieves the mid (media identifier) of a Track. It copies the mid into a user-supplied buffer and returns the length of the copied string or a negative error code.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/pages/content/pages/reference.md#2025-04-22_snippet_41\n\nLANGUAGE: c\nCODE:\n```\nint rtcGetTrackMid(int tr, char *buffer, int size)\n```\n\n----------------------------------------\n\nTITLE: Setting C++ Standard and Output Name Properties\nDESCRIPTION: Configures the target to use C++17 standard and sets the output binary name to 'client' instead of the target name.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/examples/client/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset_target_properties(datachannel-client PROPERTIES\n\tCXX_STANDARD 17\n\tOUTPUT_NAME client)\n```\n\n----------------------------------------\n\nTITLE: Getting Data Channel Reliability Settings in C\nDESCRIPTION: Function to retrieve the reliability settings of a Data Channel, regardless of how it was created.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/DOC.md#2025-04-22_snippet_37\n\nLANGUAGE: c\nCODE:\n```\nint rtcGetDataChannelReliability(int dc, rtcReliability *reliability)\n```\n\n----------------------------------------\n\nTITLE: Configuring Media Support with SRTP in CMake\nDESCRIPTION: Conditionally enables media support and configures SRTP library dependencies based on configuration options.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/CMakeLists.txt#2025-04-22_snippet_18\n\nLANGUAGE: CMake\nCODE:\n```\nif(NO_MEDIA)\n\ttarget_compile_definitions(datachannel PUBLIC RTC_ENABLE_MEDIA=0)\n\ttarget_compile_definitions(datachannel-static PUBLIC RTC_ENABLE_MEDIA=0)\nelse()\n\ttarget_compile_definitions(datachannel PUBLIC RTC_ENABLE_MEDIA=1)\n\ttarget_compile_definitions(datachannel-static PUBLIC RTC_ENABLE_MEDIA=1)\n\tif(USE_SYSTEM_SRTP)\n\t\tfind_package(libSRTP REQUIRED)\n\t\tif(NOT TARGET libSRTP::srtp2)\n\t\t\tadd_library(libSRTP::srtp2 UNKNOWN IMPORTED)\n\t\t\tset_target_properties(libSRTP::srtp2 PROPERTIES\n\t\t\t\tINTERFACE_INCLUDE_DIRECTORIES ${SRTP_INCLUDE_DIRS}\n\t\t\t\tIMPORTED_LINK_INTERFACE_LANGUAGES C\n\t\t\t\tIMPORTED_LOCATION ${SRTP_LIBRARIES})\n\t\tendif()\n\t\ttarget_compile_definitions(datachannel PRIVATE RTC_SYSTEM_SRTP=1)\n\t\ttarget_compile_definitions(datachannel-static PRIVATE RTC_SYSTEM_SRTP=1)\n\t\ttarget_link_libraries(datachannel PRIVATE libSRTP::srtp2)\n\t\ttarget_link_libraries(datachannel-static PRIVATE libSRTP::srtp2)\n\telse()\n\t\tif(NOT TARGET srtp2)\n\t\t\tadd_subdirectory(deps/libsrtp EXCLUDE_FROM_ALL)\n\t\t\tif(INSTALL_DEPS_LIBS)\n\t\t\t\tinstall(TARGETS srtp2 EXPORT LibDataChannelTargets)\n\t\t\tendif()\n\t\tendif()\n\t\ttarget_compile_definitions(datachannel PRIVATE RTC_SYSTEM_SRTP=0)\n\t\ttarget_compile_definitions(datachannel-static PRIVATE RTC_SYSTEM_SRTP=0)\n\t\ttarget_link_libraries(datachannel PRIVATE srtp2)\n\t\ttarget_link_libraries(datachannel-static PRIVATE srtp2)\n\tendif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Retrieving WebSocket Remote Address in C\nDESCRIPTION: Retrieves the remote address of a WebSocket in the format 'HOST:PORT'. It copies the address into a user-supplied buffer and returns the length of the copied string or a negative error code.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/pages/content/pages/reference.md#2025-04-22_snippet_45\n\nLANGUAGE: c\nCODE:\n```\nint rtcGetWebSocketRemoteAddress(int ws, char *buffer, int size)\n```\n\n----------------------------------------\n\nTITLE: Defining UWP Resources for Windows Store App\nDESCRIPTION: Specifies resource files needed for Universal Windows Platform (UWP) packaging when building for Windows Store, including icons, splash screen, and manifest.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/examples/client/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(CLIENT_UWP_RESOURCES\n\tuwp/Logo.png\n\tuwp/package.appxManifest\n\tuwp/SmallLogo.png\n\tuwp/SmallLogo44x44.png\n\tuwp/SplashScreen.png\n\tuwp/StoreLogo.png\n\tuwp/Windows_TemporaryKey.pfx\n)\n```\n\n----------------------------------------\n\nTITLE: Deleting a WebRTC Track in C\nDESCRIPTION: Deletes a Track identified by its identifier. After calling this function, the track identifier must not be used anymore. The function blocks until all scheduled callbacks return.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/pages/content/pages/reference.md#2025-04-22_snippet_39\n\nLANGUAGE: c\nCODE:\n```\nint rtcDeleteTrack(int tr)\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Library Support in CMake\nDESCRIPTION: Sets up TLS library support by selecting between GnuTLS, MbedTLS, or OpenSSL based on configuration options.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/CMakeLists.txt#2025-04-22_snippet_19\n\nLANGUAGE: CMake\nCODE:\n```\nif (USE_GNUTLS)\n\tfind_package(GnuTLS REQUIRED)\n\tif(NOT TARGET GnuTLS::GnuTLS)\n\t\tadd_library(GnuTLS::GnuTLS UNKNOWN IMPORTED)\n\t\tset_target_properties(GnuTLS::GnuTLS PROPERTIES\n\t\t\tINTERFACE_INCLUDE_DIRECTORIES \"${GNUTLS_INCLUDE_DIRS}\"\n\t\t\tINTERFACE_COMPILE_DEFINITIONS \"${GNUTLS_DEFINITIONS}\"\n\t\t\tIMPORTED_LINK_INTERFACE_LANGUAGES C\n\t\t\tIMPORTED_LOCATION \"${GNUTLS_LIBRARIES}\")\n\tendif()\n\ttarget_compile_definitions(datachannel PRIVATE USE_GNUTLS=1)\n\ttarget_compile_definitions(datachannel-static PRIVATE USE_GNUTLS=1)\n\ttarget_link_libraries(datachannel PRIVATE GnuTLS::GnuTLS)\n\ttarget_link_libraries(datachannel-static PRIVATE GnuTLS::GnuTLS)\n\tif (NOT NO_WEBSOCKET)\n\t\t# Needed for SHA1, it should be present as GnuTLS cryptography backend\n\t\tfind_package(Nettle REQUIRED)\n\t\ttarget_link_libraries(datachannel PRIVATE Nettle::Nettle)\n\t\ttarget_link_libraries(datachannel-static PRIVATE Nettle::Nettle)\n\tendif()\nelseif(USE_MBEDTLS)\n\tif(NOT TARGET MbedTLS::MbedTLS)\n\t\tfind_package(MbedTLS 3 REQUIRED)\n\tendif()\n\ttarget_compile_definitions(datachannel PRIVATE USE_MBEDTLS=1)\n\ttarget_compile_definitions(datachannel-static PRIVATE USE_MBEDTLS=1)\n\ttarget_link_libraries(datachannel PRIVATE MbedTLS::MbedTLS)\n\ttarget_link_libraries(datachannel-static PRIVATE MbedTLS::MbedTLS)\nelse()\n\tif(APPLE)\n\t\t# This is a bug in CMake that causes it to prefer the system version over\n\t\t# the one in the specified ROOT folder\n\t\tif(EXISTS ${OPENSSL_ROOT_DIR})\n            # Use static files when OPENSSL_USE_STATIC_LIBS is set.\n            # OPENSSL_USE_STATIC_LIBS is what CMake's FindOpenSSL looks at\n            # to decide whether to use static libraries.\n            if(OPENSSL_USE_STATIC_LIBS)\n                set(OPENSSL_CRYPTO_LIBRARY \"${OPENSSL_ROOT_DIR}/lib/libcrypto.a\" CACHE FILEPATH \"\" FORCE)\n                set(OPENSSL_SSL_LIBRARY \"${OPENSSL_ROOT_DIR}/lib/libssl.a\" CACHE FILEPATH \"\" FORCE)\n            else()\n                set(OPENSSL_CRYPTO_LIBRARY \"${OPENSSL_ROOT_DIR}/lib/libcrypto.dylib\" CACHE FILEPATH \"\" FORCE)\n                set(OPENSSL_SSL_LIBRARY \"${OPENSSL_ROOT_DIR}/lib/libssl.dylib\" CACHE FILEPATH \"\" FORCE)\n            endif()\n\t\tendif()\n\tendif()\n\tfind_package(OpenSSL REQUIRED)\n\ttarget_compile_definitions(datachannel PRIVATE USE_GNUTLS=0)\n\ttarget_compile_definitions(datachannel-static PRIVATE USE_GNUTLS=0)\n\ttarget_link_libraries(datachannel PRIVATE OpenSSL::SSL)\n\ttarget_link_libraries(datachannel-static PRIVATE OpenSSL::SSL)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Retrieving WebSocket Path in C\nDESCRIPTION: Retrieves the path of the WebSocket (HTTP requested path). It copies the path into a user-supplied buffer and returns the length of the copied string or a negative error code. The WebSocket must be open for this call to succeed.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/pages/content/pages/reference.md#2025-04-22_snippet_46\n\nLANGUAGE: c\nCODE:\n```\nint rtcGetWebSocketPath(int ws, char *buffer, int size)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Requirements and Policies for DataChannel Client\nDESCRIPTION: Sets the minimum required CMake version to 3.7 and configures policy CMP0079 if available, which determines how targets are linked between directories.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/examples/client/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.7)\nif(POLICY CMP0079)\n\tcmake_policy(SET CMP0079 NEW)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Retrieving WebRTC Track Direction in C\nDESCRIPTION: Retrieves the direction of a Track. It sets the value pointed by the direction parameter to one of the predefined direction enum values.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/pages/content/pages/reference.md#2025-04-22_snippet_42\n\nLANGUAGE: c\nCODE:\n```\nint rtcGetTrackDirection(int tr, rtcDirection *direction)\n```\n\n----------------------------------------\n\nTITLE: Exporting and Configuring LibDataChannel CMake Package\nDESCRIPTION: This snippet exports the LibDataChannel targets, generates and installs the package configuration files. It uses CMakePackageConfigHelpers to create version and config files for the package.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/CMakeLists.txt#2025-04-22_snippet_24\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(\n\tEXPORT LibDataChannelTargets\n\tFILE LibDataChannelTargets.cmake\n\tNAMESPACE LibDataChannel::\n\tDESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/LibDataChannel\n)\n\ninclude(CMakePackageConfigHelpers)\nconfigure_package_config_file(\n    ${CMAKE_CURRENT_SOURCE_DIR}/cmake/LibDataChannelConfig.cmake.in\n    ${CMAKE_BINARY_DIR}/LibDataChannelConfig.cmake\n    INSTALL_DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/LibDataChannel\n    NO_SET_AND_CHECK_MACRO\n    NO_CHECK_REQUIRED_COMPONENTS_MACRO\n)\nwrite_basic_package_version_file(\n    ${CMAKE_BINARY_DIR}/LibDataChannelConfigVersion.cmake\n    VERSION ${PROJECT_VERSION}\n    COMPATIBILITY SameMajorVersion\n)\n# Export config and version files\ninstall(FILES\n\t${CMAKE_BINARY_DIR}/LibDataChannelConfig.cmake\n\t${CMAKE_BINARY_DIR}/LibDataChannelConfigVersion.cmake\n    DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/LibDataChannel)\n```\n\n----------------------------------------\n\nTITLE: Retrieving WebSocket Server Port in WebRTC (C)\nDESCRIPTION: Retrieves the port on which the WebSocket Server is listening. It returns the port number or a negative error code.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/DOC.md#2025-04-22_snippet_49\n\nLANGUAGE: c\nCODE:\n```\nint rtcGetWebSocketServerPort(int wsserver);\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for DataChannel Client\nDESCRIPTION: Sets up source file variables for the main client application, including the core client sources and optional getopt utility for command-line parsing.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/examples/client/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(CLIENT_SOURCES\n\tmain.cpp\n\tparse_cl.cpp\n\tparse_cl.h\n)\n\nset(GETOPT_SOURCES\n\tgetopt.cpp\n\tgetopt.h\n)\n```\n\n----------------------------------------\n\nTITLE: Getting Local Description Type from WebRTC Connection (C)\nDESCRIPTION: Retrieves the type of the current local SDP description (offer, answer, etc.) as a string. Returns the length of the copied string or required buffer size if buffer is NULL.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/pages/content/pages/reference.md#2025-04-22_snippet_12\n\nLANGUAGE: c\nCODE:\n```\nint rtcGetLocalDescriptionType(int pc, char *buffer, int size)\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies and Linking Libraries\nDESCRIPTION: Finds required dependencies including Threads and links the executable with LibDataChannel, Threads, and nlohmann_json libraries.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/examples/client-benchmark/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Threads REQUIRED)\ntarget_link_libraries(datachannel-client-benchmark LibDataChannel::LibDataChannel Threads::Threads nlohmann_json::nlohmann_json)\n```\n\n----------------------------------------\n\nTITLE: Setting User Pointer for WebRTC Objects\nDESCRIPTION: Associates an opaque user pointer with a Peer Connection, Data Channel, Track, or WebSocket. This pointer is passed to all corresponding callbacks but never accessed by the library.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/DOC.md#2025-04-22_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nvoid rtcSetUserPointer(int id, void *user_ptr)\n```\n\n----------------------------------------\n\nTITLE: Setting Executable Properties for C++ Standard and Output Name\nDESCRIPTION: Configures the executable to use C++17 standard and sets the output binary name to 'client-benchmark' rather than the target name.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/examples/client-benchmark/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset_target_properties(datachannel-client-benchmark PROPERTIES\n\tCXX_STANDARD 17\n\tOUTPUT_NAME client-benchmark)\n```\n\n----------------------------------------\n\nTITLE: Retrieving WebSocket Server Port in C\nDESCRIPTION: Retrieves the port on which the WebSocket Server is listening. It returns the port number or a negative error code.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/pages/content/pages/reference.md#2025-04-22_snippet_49\n\nLANGUAGE: c\nCODE:\n```\nint rtcGetWebSocketServerPort(int wsserver);\n```\n\n----------------------------------------\n\nTITLE: Setting Xcode Bundle Identifier for Apple Platforms\nDESCRIPTION: Specifies the bundle identifier for Xcode builds, which is used when building the application for Apple platforms.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/examples/client-benchmark/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset_target_properties(datachannel-client-benchmark PROPERTIES\n\tXCODE_ATTRIBUTE_PRODUCT_BUNDLE_IDENTIFIER com.github.paullouisageneau.libdatachannel.examples.client.benchmark)\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Resources for libdatachannel in C\nDESCRIPTION: Unloads global resources used by the library. This optional call blocks until unloading is complete. It destroys all existing Peer Connections, Data Channels, Tracks, and WebSockets.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/pages/content/pages/reference.md#2025-04-22_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nvoid rtcCleanup(void)\n```\n\n----------------------------------------\n\nTITLE: Creating Platform-Specific Executable Configuration\nDESCRIPTION: Configures the executable build differently based on the platform. For Windows, it includes additional getopt sources and defines STATIC_GETOPT, while other platforms use a simpler configuration.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/examples/client-benchmark/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(WIN32)\n\tadd_executable(datachannel-client-benchmark ${CLIENT_SOURCES} ${GETOPT_SOURCES})\n\ttarget_compile_definitions(datachannel-client-benchmark PUBLIC STATIC_GETOPT)\nelse()\n\tadd_executable(datachannel-client-benchmark ${CLIENT_SOURCES})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Deleting a WebSocket Server in WebRTC (C)\nDESCRIPTION: Deletes a WebSocket Server identified by its identifier. The function blocks until all scheduled callbacks return and prevents further callbacks for the WebSocket Server.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/DOC.md#2025-04-22_snippet_48\n\nLANGUAGE: c\nCODE:\n```\nint rtcDeleteWebSocketServer(int wsserver)\n```\n\n----------------------------------------\n\nTITLE: Adding Post-Build DLL Copy Step for MSVC Builds\nDESCRIPTION: For Microsoft Visual C++ builds, adds a post-build step to copy the datachannel DLL to the executable output directory, ensuring runtime dependencies are available.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/examples/client-benchmark/CMakeLists.txt#2025-04-22_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif(MSVC)\n\tadd_custom_command(TARGET datachannel-client-benchmark POST_BUILD\n\t\tCOMMAND ${CMAKE_COMMAND} -E copy_if_different\n\t\t\"$<TARGET_FILE_DIR:datachannel>/datachannel.dll\"\n\t\t$<TARGET_FILE_DIR:datachannel-client-benchmark>\n\t)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for libdatachannel\nDESCRIPTION: Sets up the CMake project for libdatachannel, specifying the minimum CMake version, project name, version, languages, and description. It also includes GNU installation directories for standard installation paths.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nproject(libdatachannel\n\tVERSION 0.22.6\n\tLANGUAGES CXX)\nset(PROJECT_DESCRIPTION \"C/C++ WebRTC network library featuring Data Channels, Media Transport, and WebSockets\")\n\ninclude(GNUInstallDirs)\n```\n\n----------------------------------------\n\nTITLE: Setting C++ Standard and Output Name for Data Channel Media Sender\nDESCRIPTION: Sets the C++ standard to C++17 and configures the output binary name as 'media-sender' regardless of the target platform.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/examples/media-sender/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(datachannel-media-sender PROPERTIES\n    CXX_STANDARD 17\n    OUTPUT_NAME media-sender)\n```\n\n----------------------------------------\n\nTITLE: Deleting a WebSocket Server in C\nDESCRIPTION: Deletes a WebSocket Server identified by its identifier. After calling this function, the WebSocket Server identifier must not be used anymore. The function blocks until all scheduled callbacks return.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/pages/content/pages/reference.md#2025-04-22_snippet_48\n\nLANGUAGE: c\nCODE:\n```\nint rtcDeleteWebSocketServer(int wsserver)\n```\n\n----------------------------------------\n\nTITLE: Conditional Build Configuration Based on Target Platform in CMake\nDESCRIPTION: Creates different build configurations for the executable based on the target platform. For Windows Store (UWP) builds, it includes additional UWP resources, while for standard platforms it uses only the main source file.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/examples/media-receiver/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(CMAKE_SYSTEM_NAME STREQUAL \"WindowsStore\")\n\tadd_executable(datachannel-media-receiver main.cpp ${MEDIA_UWP_RESOURCES})\nelse()\n\tadd_executable(datachannel-media-receiver main.cpp)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Implementation Source Files\nDESCRIPTION: Defines the internal implementation source files for various protocol handlers, transport layers, and utility functions.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIBDATACHANNEL_IMPL_SOURCES\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/impl/certificate.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/impl/channel.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/src/impl/datachannel.cpp\n```\n\n----------------------------------------\n\nTITLE: Configuring UWP Resources for Data Channel Media Sender\nDESCRIPTION: Defines the UWP-specific resources needed for building the application on the Universal Windows Platform. Includes various icon files, manifest, and a temporary key file.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/examples/media-sender/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(MEDIA_UWP_RESOURCES\n\tuwp/Logo.png\n\tuwp/package.appxManifest\n\tuwp/SmallLogo.png\n\tuwp/SmallLogo44x44.png\n\tuwp/SplashScreen.png\n\tuwp/StoreLogo.png\n\tuwp/Windows_TemporaryKey.pfx\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring UWP Resources for Windows Store Builds in CMake\nDESCRIPTION: Defines UWP-specific resources needed for Windows Store applications, including logo files, splash screen, and package manifest. These resources are only included in the build when targeting the Universal Windows Platform.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/examples/media-receiver/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(MEDIA_UWP_RESOURCES\n\tuwp/Logo.png\n\tuwp/package.appxManifest\n\tuwp/SmallLogo.png\n\tuwp/SmallLogo44x44.png\n\tuwp/SplashScreen.png\n\tuwp/StoreLogo.png\n\tuwp/Windows_TemporaryKey.pfx\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Version Header in CMake\nDESCRIPTION: Conditionally configures the version.h header file from a template when RTC_UPDATE_VERSION_HEADER is enabled.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/CMakeLists.txt#2025-04-22_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif(RTC_UPDATE_VERSION_HEADER)\n\tconfigure_file (\n\t\t${PROJECT_SOURCE_DIR}/cmake/version.h.in\n\t\t${CMAKE_CURRENT_SOURCE_DIR}/include/rtc/version.h\n\t)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Xcode Bundle Identifier in CMake\nDESCRIPTION: Sets the product bundle identifier for Xcode builds, which is necessary for macOS and iOS application packaging. This property is specific to Apple's Xcode build system.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/examples/media-receiver/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset_target_properties(datachannel-media-receiver PROPERTIES\n\tXCODE_ATTRIBUTE_PRODUCT_BUNDLE_IDENTIFIER com.github.paullouisageneau.libdatachannel.examples.media-receiver)\n```\n\n----------------------------------------\n\nTITLE: Configuring Library Dependencies in CMake\nDESCRIPTION: Finds required packages and links necessary libraries to the target. It requires Threads and links against LibDataChannel, Threads, and nlohmann_json libraries, which are essential for the application's functionality.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/examples/media-receiver/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Threads REQUIRED)\ntarget_link_libraries(datachannel-media-receiver LibDataChannel::LibDataChannel Threads::Threads nlohmann_json::nlohmann_json)\n```\n\n----------------------------------------\n\nTITLE: Creating DataChannel Static Library Target in CMake\nDESCRIPTION: Defines the datachannel-static library target as a static library with source files and properties.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/CMakeLists.txt#2025-04-22_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(datachannel-static STATIC EXCLUDE_FROM_ALL\n\t${LIBDATACHANNEL_SOURCES}\n\t${LIBDATACHANNEL_HEADERS}\n\t${LIBDATACHANNEL_IMPL_SOURCES}\n\t${LIBDATACHANNEL_IMPL_HEADERS})\nset_target_properties(datachannel-static PROPERTIES\n\tVERSION ${PROJECT_VERSION}\n\tCXX_STANDARD 17)\n```\n\n----------------------------------------\n\nTITLE: MSVC-Specific DLL Copying Post-Build Step in CMake\nDESCRIPTION: Adds a post-build step specific to Microsoft Visual C++ (MSVC) builds that copies the datachannel DLL to the output directory. This ensures the application can find required runtime dependencies when executed.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/examples/media-receiver/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(MSVC)\n\tadd_custom_command(TARGET datachannel-media-receiver POST_BUILD\n\t\tCOMMAND ${CMAKE_COMMAND} -E copy_if_different\n\t\t\"$<TARGET_FILE_DIR:datachannel>/datachannel.dll\"\n\t\t$<TARGET_FILE_DIR:datachannel-media-receiver>\n\t)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific Executable for Data Channel Media Sender\nDESCRIPTION: Adds the executable target with conditional inclusion of UWP resources based on the target platform. For WindowsStore (UWP) builds, it includes the UWP resources; otherwise, it creates a standard executable.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/examples/media-sender/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_SYSTEM_NAME STREQUAL \"WindowsStore\")\n\tadd_executable(datachannel-media-sender main.cpp ${MEDIA_UWP_RESOURCES})\nelse()\n\tadd_executable(datachannel-media-sender main.cpp)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Build and Installation of Dependencies in CMake\nDESCRIPTION: Sets build and installation options for dependency libraries based on the main project's configuration.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/CMakeLists.txt#2025-04-22_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_SHARED_LIBS AND NOT BUILD_SHARED_DEPS_LIBS)\n\tset(BUILD_SHARED_LIBS OFF)\n\tset(INSTALL_DEPS_LIBS OFF)\nelse()\n\tset(INSTALL_DEPS_LIBS ON)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting C++ Standard and Output Name Properties in CMake\nDESCRIPTION: Configures the build properties for the datachannel-media-receiver target, setting the C++ standard to C++17 and defining the output binary name as 'media-receiver'.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/examples/media-receiver/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset_target_properties(datachannel-media-receiver PROPERTIES\n    CXX_STANDARD 17\n    OUTPUT_NAME media-receiver)\n```\n\n----------------------------------------\n\nTITLE: Setting Bundle Identifier for Apple Platforms\nDESCRIPTION: Configures the product bundle identifier for Apple platforms (iOS, macOS) using Xcode-specific properties.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/examples/media-sender/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(datachannel-media-sender PROPERTIES\n\tXCODE_ATTRIBUTE_PRODUCT_BUNDLE_IDENTIFIER com.github.paullouisageneau.libdatachannel.examples.media-sender)\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories and Dependencies for Static Library in CMake\nDESCRIPTION: Sets up include directories and links dependencies for the datachannel-static library target.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/CMakeLists.txt#2025-04-22_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(datachannel-static PUBLIC\n    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\n    $<INSTALL_INTERFACE:include>)\ntarget_include_directories(datachannel-static PRIVATE\n\t${CMAKE_CURRENT_SOURCE_DIR}/include/rtc\n\t${CMAKE_CURRENT_SOURCE_DIR}/src)\ntarget_link_libraries(datachannel-static PRIVATE\n\tThreads::Threads\n\tUsrsctp::Usrsctp\n\t$<BUILD_INTERFACE:plog::plog>)\n```\n\n----------------------------------------\n\nTITLE: Configuring DataChannel Offerer Executable with Platform-Specific Resources\nDESCRIPTION: Creates the offerer executable with conditional inclusion of UWP resources when building for Windows Store.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/examples/copy-paste/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(CMAKE_SYSTEM_NAME STREQUAL \"WindowsStore\")\n\tadd_executable(datachannel-copy-paste-offerer offerer.cpp ${OFFERER_UWP_RESOURCES})\nelse()\n\tadd_executable(datachannel-copy-paste-offerer offerer.cpp)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Linking Dependencies for Data Channel Media Sender\nDESCRIPTION: Finds required libraries and links them to the executable. Dependencies include LibDataChannel, system threads, and the nlohmann_json library for JSON handling.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/examples/media-sender/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(Threads REQUIRED)\ntarget_link_libraries(datachannel-media-sender LibDataChannel::LibDataChannel Threads::Threads nlohmann_json::nlohmann_json)\n```\n\n----------------------------------------\n\nTITLE: Configuring LibDataChannel Targets and Compiler Options in CMake\nDESCRIPTION: This snippet sets up the LibDataChannel targets, configures compiler options for different platforms, and handles warnings as errors. It also defines installation rules for the library and its headers.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/CMakeLists.txt#2025-04-22_snippet_23\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(LibDataChannel::LibDataChannelStatic ALIAS datachannel-static)\n\nif(NOT MSVC)\n\ttarget_compile_options(datachannel PRIVATE -Wall -Wextra)\n\ttarget_compile_options(datachannel-static PRIVATE -Wall -Wextra)\nendif()\n\nif(WARNINGS_AS_ERRORS)\n\tif(MSVC)\n\t\ttarget_compile_options(datachannel PRIVATE /WX)\n\t\ttarget_compile_options(datachannel-static PRIVATE /WX)\n\telse()\n\t\ttarget_compile_options(datachannel PRIVATE -Werror)\n\t\ttarget_compile_options(datachannel-static PRIVATE -Werror)\n\tendif()\nendif()\n\ninstall(TARGETS datachannel EXPORT LibDataChannelTargets\n\tRUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n\tLIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n\tARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}\n)\n\ninstall(FILES ${LIBDATACHANNEL_HEADERS}\n\tDESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/rtc\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring DataChannel Answerer Executable with Platform-Specific Resources\nDESCRIPTION: Creates the answerer executable with conditional inclusion of UWP resources when building for Windows Store.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/examples/copy-paste/CMakeLists.txt#2025-04-22_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif(CMAKE_SYSTEM_NAME STREQUAL \"WindowsStore\")\n\tadd_executable(datachannel-copy-paste-answerer answerer.cpp ${ANSWERER_UWP_RESOURCES})\nelse()\n\tadd_executable(datachannel-copy-paste-answerer answerer.cpp)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining UWP Resources for DataChannel Answerer in CMake\nDESCRIPTION: Defines a list of UWP-specific resources for the answerer application including icons, manifest, and certificate files.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/examples/copy-paste/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(ANSWERER_UWP_RESOURCES\n\tuwp/answerer/Logo.png\n\tuwp/answerer/package.appxManifest\n\tuwp/answerer/SmallLogo.png\n\tuwp/answerer/SmallLogo44x44.png\n\tuwp/answerer/SplashScreen.png\n\tuwp/answerer/StoreLogo.png\n\tuwp/answerer/Windows_TemporaryKey.pfx\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific Executable Build\nDESCRIPTION: Sets up the executable with different source files depending on the platform. For Windows (including UWP), it includes the getopt sources, while other platforms use only the main client sources.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/examples/client/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(WIN32)\n\tif(CMAKE_SYSTEM_NAME STREQUAL \"WindowsStore\")\n\t\tadd_executable(datachannel-client ${CLIENT_SOURCES} ${GETOPT_SOURCES} ${CLIENT_UWP_RESOURCES})\n\telse()\n\t    add_executable(datachannel-client ${CLIENT_SOURCES} ${GETOPT_SOURCES})\n\tendif()\n\ttarget_compile_definitions(datachannel-client PUBLIC STATIC_GETOPT)\nelse()\n\tadd_executable(datachannel-client ${CLIENT_SOURCES})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Bundle Identifier for Offerer on Apple Platforms\nDESCRIPTION: Sets the product bundle identifier for the offerer executable when building with Xcode.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/examples/copy-paste/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset_target_properties(datachannel-copy-paste-offerer PROPERTIES\n\tXCODE_ATTRIBUTE_PRODUCT_BUNDLE_IDENTIFIER com.github.paullouisageneau.libdatachannel.examples.copypaste.offerer)\n```\n\n----------------------------------------\n\nTITLE: Setting C++ Standard and Output Name for Offerer Executable\nDESCRIPTION: Sets the C++ standard to 17 and defines the output name for the offerer executable.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/examples/copy-paste/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset_target_properties(datachannel-copy-paste-offerer PROPERTIES\n\tCXX_STANDARD 17\n\tOUTPUT_NAME offerer)\n```\n\n----------------------------------------\n\nTITLE: Setting Xcode Bundle Identifier for macOS/iOS\nDESCRIPTION: Configures the bundle identifier property for Xcode builds, which is necessary for macOS and iOS application packaging.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/examples/client/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset_target_properties(datachannel-client PROPERTIES\n\tXCODE_ATTRIBUTE_PRODUCT_BUNDLE_IDENTIFIER com.github.paullouisageneau.libdatachannel.examples.client)\n```\n\n----------------------------------------\n\nTITLE: Defining UWP Resources for DataChannel Offerer in CMake\nDESCRIPTION: Defines a list of UWP-specific resources for the offerer application including icons, manifest, and certificate files.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/examples/copy-paste/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(OFFERER_UWP_RESOURCES\n\tuwp/offerer/Logo.png\n\tuwp/offerer/package.appxManifest\n\tuwp/offerer/SmallLogo.png\n\tuwp/offerer/SmallLogo44x44.png\n\tuwp/offerer/SplashScreen.png\n\tuwp/offerer/StoreLogo.png\n\tuwp/offerer/Windows_TemporaryKey.pfx\n)\n```\n\n----------------------------------------\n\nTITLE: Linking DataChannel Library to Offerer Executable\nDESCRIPTION: Links the datachannel library to the offerer executable.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/examples/copy-paste/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(datachannel-copy-paste-offerer datachannel)\n```\n\n----------------------------------------\n\nTITLE: Adding Post-Build DLL Copy for MSVC Builds\nDESCRIPTION: For Microsoft Visual C++ builds, adds a post-build step to copy the datachannel.dll to the client executable directory to ensure runtime dependency resolution.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/examples/client/CMakeLists.txt#2025-04-22_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nif(MSVC)\n\tadd_custom_command(TARGET datachannel-client POST_BUILD\n\t\tCOMMAND ${CMAKE_COMMAND} -E copy_if_different\n\t\t\"$<TARGET_FILE_DIR:datachannel>/datachannel.dll\"\n\t\t$<TARGET_FILE_DIR:datachannel-client>\n\t)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting C++ Standard and Output Name for Answerer Executable\nDESCRIPTION: Sets the C++ standard to 17 and defines the output name for the answerer executable.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/examples/copy-paste/CMakeLists.txt#2025-04-22_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nset_target_properties(datachannel-copy-paste-answerer PROPERTIES\n\tCXX_STANDARD 17\n\tOUTPUT_NAME answerer)\n```\n\n----------------------------------------\n\nTITLE: Adding Post-Build DLL Copy for MSVC Builds\nDESCRIPTION: For Microsoft Visual C++ builds, adds a post-build command to copy the datachannel.dll to the output directory, ensuring the application can find the required dynamic library at runtime.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/examples/media-sender/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(MSVC)\n\tadd_custom_command(TARGET datachannel-media-sender POST_BUILD\n\t\tCOMMAND ${CMAKE_COMMAND} -E copy_if_different\n\t\t\"$<TARGET_FILE_DIR:datachannel>/datachannel.dll\"\n\t\t$<TARGET_FILE_DIR:datachannel-media-sender>\n\t)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building with CMake on POSIX Systems\nDESCRIPTION: CMake commands for building the library on POSIX-compliant systems with Release configuration and specific feature flags.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/BUILDING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncmake -B build -DUSE_GNUTLS=0 -DUSE_NICE=0 -DCMAKE_BUILD_TYPE=Release\ncd build\nmake -j2\n```\n\n----------------------------------------\n\nTITLE: Setting Bundle Identifier for Answerer on Apple Platforms\nDESCRIPTION: Sets the product bundle identifier for the answerer executable when building with Xcode.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/examples/copy-paste/CMakeLists.txt#2025-04-22_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nset_target_properties(datachannel-copy-paste-answerer PROPERTIES\n\tXCODE_ATTRIBUTE_PRODUCT_BUNDLE_IDENTIFIER com.github.paullouisageneau.libdatachannel.examples.copypaste.answerer)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for DataChannel Client Benchmark\nDESCRIPTION: Specifies the main source files required for the client benchmark application, including the main program and command-line parsing utilities.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/examples/client-benchmark/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(CLIENT_SOURCES\n\tmain.cpp\n\tparse_cl.cpp\n\tparse_cl.h\n)\n\nset(GETOPT_SOURCES\n\tgetopt.cpp\n\tgetopt.h\n)\n```\n\n----------------------------------------\n\nTITLE: Building with MSVC on Windows\nDESCRIPTION: Commands for building the library on Windows using Microsoft Visual C++ compiler.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/BUILDING.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncmake -B build -G \"NMake Makefiles\" -DCMAKE_BUILD_TYPE=Release\ncd build\nnmake\n```\n\n----------------------------------------\n\nTITLE: Finding Threads Package and Linking Libraries to Answerer Executable\nDESCRIPTION: Finds the Threads package and links both LibDataChannel and Threads libraries to the answerer executable.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/examples/copy-paste/CMakeLists.txt#2025-04-22_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Threads REQUIRED)\ntarget_link_libraries(datachannel-copy-paste-answerer LibDataChannel::LibDataChannel Threads::Threads)\n```\n\n----------------------------------------\n\nTITLE: Copying DLL Files for Windows MSVC Builds\nDESCRIPTION: Sets up post-build commands to copy datachannel.dll to the output directories of both executables when building with MSVC.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/examples/copy-paste/CMakeLists.txt#2025-04-22_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nif(MSVC)\n\tadd_custom_command(TARGET datachannel-copy-paste-offerer POST_BUILD\n\t\tCOMMAND ${CMAKE_COMMAND} -E copy_if_different\n\t\t\"$<TARGET_FILE_DIR:datachannel>/datachannel.dll\"\n\t\t$<TARGET_FILE_DIR:datachannel-copy-paste-offerer>\n\t)\n\tadd_custom_command(TARGET datachannel-copy-paste-answerer POST_BUILD\n\t\tCOMMAND ${CMAKE_COMMAND} -E copy_if_different\n\t\t\"$<TARGET_FILE_DIR:datachannel>/datachannel.dll\"\n\t\t$<TARGET_FILE_DIR:datachannel-copy-paste-answerer>\n\t)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Offerer Executable\nDESCRIPTION: Sets up the offerer executable with conditional UWP resource inclusion and configures its properties including output name and bundle identifier.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/examples/copy-paste-capi/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_SYSTEM_NAME STREQUAL \"WindowsStore\")\n\tadd_executable(datachannel-copy-paste-capi-offerer offerer.c ${OFFERER_UWP_RESOURCES})\nelse()\n\tadd_executable(datachannel-copy-paste-capi-offerer offerer.c)\nendif()\n\nset_target_properties(datachannel-copy-paste-capi-offerer PROPERTIES\n\tOUTPUT_NAME offerer-capi)\n\nset_target_properties(datachannel-copy-paste-capi-offerer PROPERTIES\n\tXCODE_ATTRIBUTE_PRODUCT_BUNDLE_IDENTIFIER com.github.paullouisageneau.libdatachannel.examples.copypaste.capi.offerer)\n\ntarget_link_libraries(datachannel-copy-paste-capi-offerer datachannel Threads::Threads)\n```\n\n----------------------------------------\n\nTITLE: Configuring Answerer Executable\nDESCRIPTION: Sets up the answerer executable with conditional UWP resource inclusion and configures its properties including output name and bundle identifier.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/examples/copy-paste-capi/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_SYSTEM_NAME STREQUAL \"WindowsStore\")\n\tadd_executable(datachannel-copy-paste-capi-answerer answerer.c ${ANSWERER_UWP_RESOURCES})\nelse()\n\tadd_executable(datachannel-copy-paste-capi-answerer answerer.c)\nendif()\n\nset_target_properties(datachannel-copy-paste-capi-answerer PROPERTIES\n\tOUTPUT_NAME answerer-capi)\n\nset_target_properties(datachannel-copy-paste-capi-answerer PROPERTIES\n\tXCODE_ATTRIBUTE_PRODUCT_BUNDLE_IDENTIFIER com.github.paullouisageneau.libdatachannel.examples.copypaste.capi.answerer)\n\nfind_package(Threads REQUIRED)\ntarget_link_libraries(datachannel-copy-paste-capi-answerer LibDataChannel::LibDataChannel Threads::Threads)\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL Implementation Logic\nDESCRIPTION: Implements conditional logic for SSL implementation selection and related options, preventing conflicting choices and setting appropriate crypto engine options.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif (USE_GNUTLS AND USE_MBEDTLS)\n\tmessage(FATAL_ERROR \"Both USE_MBEDTLS and USE_GNUTLS cannot be enabled at the same time\")\nendif()\n\nif(USE_GNUTLS)\n\toption(USE_NETTLE \"Use Nettle in libjuice\" ON)\nelse()\n\toption(USE_NETTLE \"Use Nettle in libjuice\" OFF)\n```\n\n----------------------------------------\n\nTITLE: Configuring ICE Library Support in CMake\nDESCRIPTION: Sets up ICE library support by selecting between libnice and libjuice based on configuration options.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/CMakeLists.txt#2025-04-22_snippet_20\n\nLANGUAGE: CMake\nCODE:\n```\nif (USE_NICE)\n\tfind_package(LibNice REQUIRED)\n\ttarget_compile_definitions(datachannel PRIVATE USE_NICE=1)\n\ttarget_compile_definitions(datachannel-static PRIVATE USE_NICE=1)\n\ttarget_link_libraries(datachannel PRIVATE LibNice::LibNice)\n\ttarget_link_libraries(datachannel-static PRIVATE LibNice::LibNice)\nelse()\n\ttarget_compile_definitions(datachannel PRIVATE USE_NICE=0)\n\ttarget_compile_definitions(datachannel-static PRIVATE USE_NICE=0)\n\tif(USE_SYSTEM_JUICE)\n\t\tfind_package(LibJuice REQUIRED)\n\t\ttarget_compile_definitions(datachannel PRIVATE RTC_SYSTEM_JUICE=1)\n\t\ttarget_compile_definitions(datachannel-static PRIVATE RTC_SYSTEM_JUICE=1)\n\t\ttarget_link_libraries(datachannel PRIVATE LibJuice::LibJuice)\n\t\ttarget_link_libraries(datachannel-static PRIVATE LibJuice::LibJuice)\n\telse()\n\t\tadd_subdirectory(deps/libjuice EXCLUDE_FROM_ALL)\n\t\tif(INSTALL_DEPS_LIBS)\n\t\t\tinstall(TARGETS juice EXPORT LibDataChannelTargets)\n\t\tendif()\n\t\ttarget_compile_definitions(datachannel PRIVATE RTC_SYSTEM_JUICE=0)\n\t\ttarget_compile_definitions(datachannel-static PRIVATE RTC_SYSTEM_JUICE=0)\n\t\ttarget_link_libraries(datachannel PRIVATE LibJuice::LibJuice)\n\t\ttarget_link_libraries(datachannel-static PRIVATE LibJuice::LibJuiceStatic)\n\tendif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories and Dependencies for Shared Library in CMake\nDESCRIPTION: Sets up include directories and links dependencies for the datachannel shared library target.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/CMakeLists.txt#2025-04-22_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(datachannel PUBLIC\n    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\n    $<INSTALL_INTERFACE:include>)\ntarget_include_directories(datachannel PRIVATE\n\t${CMAKE_CURRENT_SOURCE_DIR}/include/rtc\n\t${CMAKE_CURRENT_SOURCE_DIR}/src)\ntarget_link_libraries(datachannel PRIVATE\n\tThreads::Threads\n\tUsrsctp::Usrsctp\n\t$<BUILD_INTERFACE:plog::plog>)\n```\n\n----------------------------------------\n\nTITLE: Configuring LibDataChannel Tests in CMake\nDESCRIPTION: This snippet sets up the test target for LibDataChannel. It handles different configurations for various platforms, including special handling for UWP apps. The test executable is linked against the main library and threading support.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/CMakeLists.txt#2025-04-22_snippet_25\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT NO_TESTS)\n\tif(CMAKE_SYSTEM_NAME STREQUAL \"WindowsStore\")\n\t\t# Add resource files needed for UWP apps.\n\t\tadd_executable(datachannel-tests ${TESTS_SOURCES} ${TESTS_UWP_RESOURCES})\n\telse()\n\t\tadd_executable(datachannel-tests ${TESTS_SOURCES})\n\tendif()\n\n\tset_target_properties(datachannel-tests PROPERTIES\n\t\tVERSION ${PROJECT_VERSION}\n\t\tCXX_STANDARD 17\n\t\tOUTPUT_NAME tests)\n\n\tset_target_properties(datachannel-tests PROPERTIES\n\t\tXCODE_ATTRIBUTE_PRODUCT_BUNDLE_IDENTIFIER com.github.paullouisageneau.libdatachannel.tests)\n\n\ttarget_include_directories(datachannel-tests PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/src)\n\ttarget_link_libraries(datachannel-tests datachannel Threads::Threads)\n\n\t# Benchmark\n\tif(CMAKE_SYSTEM_NAME STREQUAL \"WindowsStore\")\n\t\t# Add resource files needed for UWP apps.\n\t\tadd_executable(datachannel-benchmark test/benchmark.cpp ${BENCHMARK_UWP_RESOURCES})\n\telse()\n\t\tadd_executable(datachannel-benchmark test/benchmark.cpp)\n\tendif()\n\n\tset_target_properties(datachannel-benchmark PROPERTIES\n\t\tVERSION ${PROJECT_VERSION}\n\t\tCXX_STANDARD 17\n\t\tOUTPUT_NAME benchmark)\n\n\tset_target_properties(datachannel-benchmark PROPERTIES\n\t\tXCODE_ATTRIBUTE_PRODUCT_BUNDLE_IDENTIFIER com.github.paullouisageneau.libdatachannel.benchmark)\n\n\ttarget_compile_definitions(datachannel-benchmark PRIVATE BENCHMARK_MAIN=1)\n\ttarget_include_directories(datachannel-benchmark PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/src)\n\ttarget_link_libraries(datachannel-benchmark datachannel Threads::Threads)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Compile Definitions for Library Targets in CMake\nDESCRIPTION: Configures compile definitions for the shared and static library targets, handling exports and static linking options.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/CMakeLists.txt#2025-04-22_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(datachannel PRIVATE RTC_EXPORTS)\nif (NOT BUILD_SHARED_LIBS)\n\ttarget_compile_definitions(datachannel PUBLIC RTC_STATIC)\nendif()\ntarget_compile_definitions(datachannel-static PRIVATE RTC_EXPORTS)\ntarget_compile_definitions(datachannel-static PUBLIC RTC_STATIC)\n```\n\n----------------------------------------\n\nTITLE: Setting Export Names and Aliases in CMake\nDESCRIPTION: Sets export names for the library targets and creates aliases for simplified importing.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/CMakeLists.txt#2025-04-22_snippet_22\n\nLANGUAGE: CMake\nCODE:\n```\nset_target_properties(datachannel PROPERTIES EXPORT_NAME LibDataChannel)\nadd_library(LibDataChannel::LibDataChannel ALIAS datachannel)\n\nset_target_properties(datachannel-static PROPERTIES EXPORT_NAME LibDataChannelStatic)\n```\n\n----------------------------------------\n\nTITLE: Configuring CAPI Calling Convention in CMake\nDESCRIPTION: Conditionally enables STDCALL calling convention for the C API when CAPI_STDCALL is set.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/CMakeLists.txt#2025-04-22_snippet_21\n\nLANGUAGE: CMake\nCODE:\n```\nif(CAPI_STDCALL)\n\ttarget_compile_definitions(datachannel PUBLIC CAPI_STDCALL)\n\ttarget_compile_definitions(datachannel-static PUBLIC CAPI_STDCALL)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Sources\nDESCRIPTION: Defines the source files for the test suite, including connectivity tests, reliability tests, and API verification tests.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset(TESTS_SOURCES\n    ${CMAKE_CURRENT_SOURCE_DIR}/test/main.cpp\n    ${CMAKE_CURRENT_SOURCE_DIR}/test/connectivity.cpp\n    ${CMAKE_CURRENT_SOURCE_DIR}/test/negotiated.cpp\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies and Library Linkage\nDESCRIPTION: Finds required packages (Threads) and links the LibDataChannel, Threads, and nlohmann_json libraries to the client executable.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/examples/client/CMakeLists.txt#2025-04-22_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Threads REQUIRED)\ntarget_link_libraries(datachannel-client LibDataChannel::LibDataChannel Threads::Threads nlohmann_json::nlohmann_json)\n```\n\n----------------------------------------\n\nTITLE: Defining UWP Resources for Offerer and Answerer\nDESCRIPTION: Sets up resource file paths for Universal Windows Platform builds, including icons, manifests, and certificates.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/examples/copy-paste-capi/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(OFFERER_UWP_RESOURCES\n\tuwp/offerer/Logo.png\n\tuwp/offerer/package.appxManifest\n\tuwp/offerer/SmallLogo.png\n\tuwp/offerer/SmallLogo44x44.png\n\tuwp/offerer/SplashScreen.png\n\tuwp/offerer/StoreLogo.png\n\tuwp/offerer/Windows_TemporaryKey.pfx\n)\n\nset(ANSWERER_UWP_RESOURCES\n\tuwp/answerer/Logo.png\n\tuwp/answerer/package.appxManifest\n\tuwp/answerer/SmallLogo.png\n\tuwp/answerer/SmallLogo44x44.png\n\tuwp/answerer/SplashScreen.png\n\tuwp/answerer/StoreLogo.png\n\tuwp/answerer/Windows_TemporaryKey.pfx\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Version Requirements and Policies\nDESCRIPTION: Sets the minimum required CMake version to 3.7 and applies the CMP0079 policy if available, which relates to target_link_libraries handling.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/examples/client-benchmark/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.7)\nif(POLICY CMP0079)\n\tcmake_policy(SET CMP0079 NEW)\nendif()\n```\n\n----------------------------------------\n\nTITLE: MSVC-Specific DLL Copy Commands\nDESCRIPTION: Adds post-build commands for MSVC to copy the datachannel DLL to the output directories of both executables.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/examples/copy-paste-capi/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(MSVC)\n\tadd_custom_command(TARGET datachannel-copy-paste-capi-offerer POST_BUILD\n\t\tCOMMAND ${CMAKE_COMMAND} -E copy_if_different\n\t\t\"$<TARGET_FILE_DIR:datachannel>/datachannel.dll\"\n\t\t$<TARGET_FILE_DIR:datachannel-copy-paste-capi-offerer>\n\t)\n\tadd_custom_command(TARGET datachannel-copy-paste-capi-answerer POST_BUILD\n\t\tCOMMAND ${CMAKE_COMMAND} -E copy_if_different\n\t\t\"$<TARGET_FILE_DIR:datachannel>/datachannel.dll\"\n\t\t$<TARGET_FILE_DIR:datachannel-copy-paste-capi-answerer>\n\t)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Submodules\nDESCRIPTION: Commands to initialize and update git submodules recursively with depth 1. Optional if PREFER_SYSTEM_LIB CMake option is enabled.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/BUILDING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd libdatachannel\ngit submodule update --init --recursive --depth 1\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project Settings\nDESCRIPTION: Initializes the CMake project with minimum version requirement and C11 standard setting.\nSOURCE: https://github.com/paullouisageneau/libdatachannel/blob/master/examples/copy-paste-capi/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.7)\nproject(offerer C)\n\nset(CMAKE_C_STANDARD 11)\n```"
  }
]