[
  {
    "owner": "go-telegram",
    "repo": "bot",
    "content": "TITLE: Creating a Simple Echo Bot in Go\nDESCRIPTION: This snippet demonstrates how to create a basic Telegram echo bot using the go-telegram/bot library. It initializes the bot with a token, sets a default handler to echo received messages, and starts the bot using polling with graceful shutdown handling via context and OS signals. Requires a valid Telegram Bot Token.\nSOURCE: https://github.com/go-telegram/bot/blob/main/README.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"os\"\n\t\"os/signal\"\n\n\t\"github.com/go-telegram/bot\"\n\t\"github.com/go-telegram/bot/models\"\n)\n\n// Send any text message to the bot after the bot has been started\n\nfunc main() {\n\tctx, cancel := signal.NotifyContext(context.Background(), os.Interrupt)\n\tdefer cancel()\n\n\topts := []bot.Option{\n\t\tbot.WithDefaultHandler(handler),\n\t}\n\n\tb, err := bot.New(\"YOUR_BOT_TOKEN_FROM_BOTFATHER\", opts...)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tb.Start(ctx)\n}\n\nfunc handler(ctx context.Context, b *bot.Bot, update *models.Update) {\n\tb.SendMessage(ctx, &bot.SendMessageParams{\n\t\tChatID: update.Message.Chat.ID,\n\t\tText:   update.Message.Text,\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Telegram Bot API Errors in Go\nDESCRIPTION: This snippet provides examples of how to handle different error types returned by methods in the `go-telegram/bot` library. It takes an error object returned by a bot API method call as input. It uses `errors.Is` to check for specific predefined errors like `ErrorForbidden`, `ErrorBadRequest`, etc., and includes a specific check `mybot.IsTooManyRequestsError` to handle rate limits, accessing the `RetryAfter` value. Requires the `go-telegram/bot` library (potentially aliased) and the standard `errors` package.\nSOURCE: https://github.com/go-telegram/bot/blob/main/README.md#_snippet_14\n\nLANGUAGE: go\nCODE:\n```\n_, err := b.SendMessage(...)\n\nif errors.Is(err, mybot.ErrorForbidden) {\n    // Handle the ErrorForbidden (403) case here\n}\n\nif errors.Is(err, mybot.ErrorBadRequest) {\n    // Handle the ErrorBadRequest (400) case here\n}\n\nif errors.Is(err, mybot.ErrorUnauthorized) {\n    // Handle the ErrorUnauthorized (401) case here\n}\n\nif mybot.IsTooManyRequestsError(err) {\n    // Handle the TooManyRequestsError (429) case here\n    fmt.Println(\"Received TooManyRequestsError with retry_after:\", err.(*mybot.TooManyRequestsError).RetryAfter)\n}\n\nif errors.Is(err, mybot.ErrorNotFound) {\n    // Handle the ErrorNotFound (404) case here\n}\n\nif errors.Is(err, mybot.ErrorConflict) {\n    // Handle the ErrorConflict (409) case here\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Telegram Bot Webhooks in Go\nDESCRIPTION: Demonstrates configuring the bot to receive updates via webhooks instead of polling. It initializes the bot with a webhook secret token, starts the webhook listener using `b.StartWebhook` in a goroutine, and sets up an HTTP server using `http.ListenAndServe` with the bot's `WebhookHandler`. A default message handler is also included.\nSOURCE: https://github.com/go-telegram/bot/blob/main/README.md#_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n\tctx, cancel := signal.NotifyContext(context.Background(), os.Interrupt)\n\tdefer cancel()\n\n\topts := []bot.Option{\n\t\tbot.WithDefaultHandler(handler),\n\t\tbot.WithWebhookSecretToken(os.Getenv(\"EXAMPLE_TELEGRAM_WEBHOOK_SECRET_TOKEN\"))\n\t}\n\n\tb, _ := bot.New(os.Getenv(\"EXAMPLE_TELEGRAM_BOT_TOKEN\"), opts...)\n\n\t// call methods.SetWebhook if needed\n\n\tgo b.StartWebhook(ctx)\n\n\thttp.ListenAndServe(\":2000\", b.WebhookHandler())\n\n\t// call methods.DeleteWebhook if needed\n}\n\nfunc handler(ctx context.Context, b *bot.Bot, update *models.Update) {\n\tb.SendMessage(ctx, &bot.SendMessageParams{\n\t\tChatID: update.Message.Chat.ID,\n\t\tText:   update.Message.Text,\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Specific Text Handler in Go\nDESCRIPTION: Shows how to register a handler function (`myStartHandler`) that will be called specifically when the bot receives a message with the exact text `/start`. It uses `b.RegisterHandler` with `HandlerTypeMessageText` and `MatchTypeExact`. Other messages will fall back to the default handler if one is set.\nSOURCE: https://github.com/go-telegram/bot/blob/main/README.md#_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nb, err := bot.New(\"YOUR_BOT_TOKEN_FROM_BOTFATHER\")\n\nb.RegisterHandler(bot.HandlerTypeMessageText, \"/start\", bot.MatchTypeExact, myStartHandler)\n\nb.Start(context.TODO())\n```\n\n----------------------------------------\n\nTITLE: Registering a Handler with Regex Matching in Go\nDESCRIPTION: Demonstrates registering a message text handler that triggers based on a regular expression match. It compiles a regex (`^/start`) and uses `b.RegisterHandlerRegexp` to associate it with `myStartHandler`. This allows for more flexible pattern matching compared to exact or prefix matching.\nSOURCE: https://github.com/go-telegram/bot/blob/main/README.md#_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nre := regexp.MustCompile(`^/start`)\n\nb.RegisterHandlerRegexp(bot.HandlerTypeMessageText, re, myStartHandler)\n```\n\n----------------------------------------\n\nTITLE: Validating Telegram Webapp Data with go-telegram/bot\nDESCRIPTION: This snippet illustrates how to extract URL query parameters from an HTTP request and validate them as a Telegram Webapp request using `bot.ValidateWebappRequest`. It takes the URL query values and the bot token as input. It checks the `ok` boolean return value to determine if the validation succeeded and returns an HTTP 401 Unauthorized error if it fails. Requires the `go-telegram/bot` library, `net/url`, `net/http`, and `os` packages.\nSOURCE: https://github.com/go-telegram/bot/blob/main/README.md#_snippet_13\n\nLANGUAGE: go\nCODE:\n```\n// get url values from request\nvalues := req.URL.Query()\n\nuser, ok := bot.ValidateWebappRequest(values, os.Getenv(\"TELEGRAM_BOT_TOKEN\"))\nif !ok {\n    http.Error(w, \"Unauthorized\", http.StatusUnauthorized)\n    return\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading and Sending a Photo File in Go\nDESCRIPTION: Demonstrates how to upload a local image file and send it using `bot.SendPhoto`. It reads the file content using `os.ReadFile`, creates an `io.Reader` (specifically `bytes.NewReader`), and passes it along with a filename within the `models.InputFileUpload` struct.\nSOURCE: https://github.com/go-telegram/bot/blob/main/README.md#_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nfileContent, _ := os.ReadFile(\"/path/to/image.png\")\n\nparams := &bot.SendPhotoParams{\n    ChatID:  chatID,\n    Photo:   &models.InputFileUpload{Filename: \"image.png\", Data: bytes.NewReader(fileContent)},\n}\n\nbot.SendPhoto(ctx, params)\n```\n\n----------------------------------------\n\nTITLE: Sending a Photo using File ID or URL in Go\nDESCRIPTION: Shows how to send a photo using the `bot.SendPhoto` method where the photo source is specified by an existing Telegram File ID or an HTTP URL. The `models.InputFileString` struct is used to wrap the string data (File ID or URL).\nSOURCE: https://github.com/go-telegram/bot/blob/main/README.md#_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n// file id of uploaded image\ninputFileData := \"AgACAgIAAxkDAAIBOWJimnCJHQJiJ4P3aasQCPNyo6mlAALDuzEbcD0YSxzjB-vmkZ6BAQADAgADbQADJAQ\"\n// or URL image path\n// inputFileData := \"https://example.com/image.png\"\n\nparams := &bot.SendPhotoParams{\n    ChatID:  chatID,\n    Photo:   &models.InputFileString{Data: inputFileData},\n}\n\nbot.SendPhoto(ctx, params)\n```\n\n----------------------------------------\n\nTITLE: Creating and Sending Telegram Poll with go-telegram/bot\nDESCRIPTION: This snippet demonstrates how to create a `SendPollParams` object to define a Telegram poll and send it using the `b.SendPoll` method. It specifically shows how to use the `bot.False()` helper function to set the `IsAnonymous` parameter to false. Requires the `go-telegram/bot` library and a context (`ctx`). Inputs include chat ID, question, options slice, and boolean parameters. Output is sending the poll message.\nSOURCE: https://github.com/go-telegram/bot/blob/main/README.md#_snippet_12\n\nLANGUAGE: go\nCODE:\n```\np := &bot.SendPollParams{\n    ChatID: chatID,\n    Question: \"Question\",\n    Options: []string{\"Option 1\", \"Option 2\"},\n    IsAnonymous: bot.False(),\n}\n\nb.SendPoll(ctx, p)\n```\n\n----------------------------------------\n\nTITLE: Defining a Default Handler in Go\nDESCRIPTION: Shows how to set a default handler function using the `bot.WithDefaultHandler` option during bot initialization. This handler will be invoked for any update received by the bot that doesn't match a more specific registered handler.\nSOURCE: https://github.com/go-telegram/bot/blob/main/README.md#_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nb, err := bot.New(\"YOUR_BOT_TOKEN_FROM_BOTFATHER\", bot.WithDefaultHandler(handler))\n\nfunc handler(ctx context.Context, b *bot.Bot, update *models.Update) {\n\t// this handler will be called for all updates\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Starting a Basic Bot in Go\nDESCRIPTION: Minimal code to initialize the go-telegram/bot with a token and start it using the polling method. It uses `context.TODO()` for the context, suitable for simple cases or testing. The bot will perform a `getMe` request on initialization by default.\nSOURCE: https://github.com/go-telegram/bot/blob/main/README.md#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nb, err := bot.New(\"YOUR_BOT_TOKEN_FROM_BOTFATHER\")\n\nb.Start(context.TODO())\n```\n\n----------------------------------------\n\nTITLE: Sending a Media Group with URL and Attachment in Go\nDESCRIPTION: Illustrates sending a media group containing multiple photos using `bot.SendMediaGroup`. One photo is specified by a URL (`models.InputMediaPhoto` with `Media` field set to URL), and the other is uploaded using the `attach://` syntax (`Media` field set to `attach://image.png`) along with providing the file content via `MediaAttachment`.\nSOURCE: https://github.com/go-telegram/bot/blob/main/README.md#_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nfileContent, _ := os.ReadFile(\"/path/to/image.png\")\n\nmedia1 := &models.InputMediaPhoto{\n\tMedia: \"https://telegram.org/img/t_logo.png\",\n}\n\nmedia2 := &models.InputMediaPhoto{\n\tMedia: \"attach://image.png\",\n\tCaption: \"2\",\n\tMediaAttachment: bytes.NewReader(fileContent),\n}\n\nparams := &bot.SendMediaGroupParams{\n    ChatID: update.Message.Chat.ID,\n    Media: []models.InputMedia{\n        media1,\n        media2,\n    },\n}\n\nbot.SendMediaGroup(ctx, params)\n```\n\n----------------------------------------\n\nTITLE: Registering a Handler with a Custom Match Function in Go\nDESCRIPTION: Illustrates how to use a custom function (`matchFunc`) to determine if a handler (`myHandler`) should be executed for a given update. `b.RegisterHandlerMatchFunc` is used, providing maximum flexibility for defining handler triggering logic based on the `models.Update` content.\nSOURCE: https://github.com/go-telegram/bot/blob/main/README.md#_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nmatchFunc := func(update *models.Update) bool {\n\t// your checks\n\treturn true\n}\n\nb.RegisterHandlerMatchFunc(bot.HandlerTypeMessageText, matchFunc, myHandler)\n```\n\n----------------------------------------\n\nTITLE: Installing the Go Telegram Bot Library\nDESCRIPTION: This Bash command installs the go-telegram/bot library and its dependencies using the Go package manager. The `-u` flag ensures that the latest version of the package is fetched.\nSOURCE: https://github.com/go-telegram/bot/blob/main/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo get -u github.com/go-telegram/bot\n```\n\n----------------------------------------\n\nTITLE: Manually Processing Telegram Updates in Go\nDESCRIPTION: Illustrates how to manually process incoming Telegram updates. This is useful in scenarios where you manage the HTTP request handling yourself (e.g., within a custom web framework). It involves decoding the JSON request body into a `models.Update` struct and then passing it to the bot's `ProcessUpdate` method.\nSOURCE: https://github.com/go-telegram/bot/blob/main/README.md#_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nupdate := models.Update{}\n\njson.NewDecoder(req.Body).Decode(&update)\n\nb.ProcessUpdate(ctx, &update)\n```"
  }
]