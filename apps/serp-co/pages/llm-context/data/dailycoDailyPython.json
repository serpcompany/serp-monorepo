[
  {
    "owner": "daily-co",
    "repo": "daily-python",
    "content": "TITLE: Defining Daily API Core Types\nDESCRIPTION: A collection of core type definitions used throughout the Daily API including audio/video settings, call states, permissions, device info, and network statistics. These types are used to ensure proper typing and validation of API interactions.\nSOURCE: https://github.com/daily-co/daily-python/blob/main/docs/src/types.rst#2025-04-12_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nAudioInputSettings = {\n    \"deviceId\": \"string\",\n    \"customConstraints\": \"MediaTrackConstraints\"\n}\n\nAudioPublishingSettings = {\n    \"channelConfig\": \"\\\"mono\\\" | \\\"stereo\\\"\",\n    \"bitrate\": \"number\"\n}\n\nCallState = \"\\\"initialized\\\" | \\\"joining\\\" | \\\"joined\\\" | \\\"leaving\\\" | \\\"left\\\"\"\n\nNetworkStats = {\n    \"previousThreshold\": \"NetworkThreshold\",\n    \"quality\": \"number\", \n    \"stats\": \"NetworkDetailedStats\",\n    \"threshold\": \"NetworkThreshold\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Daily Python SDK using pip\nDESCRIPTION: Commands to install and upgrade the daily-python package using pip. This snippet shows how to add the SDK to a Python project.\nSOURCE: https://github.com/daily-co/daily-python/blob/main/README.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install daily-python\n```\n\nLANGUAGE: bash\nCODE:\n```\npip install -U daily-python\n```\n\n----------------------------------------\n\nTITLE: Creating Voice Activity Detection in Python\nDESCRIPTION: Example showing how to create and use a native Voice Activity Detection (VAD) instance to analyze audio frames.\nSOURCE: https://github.com/daily-co/daily-python/blob/main/CHANGELOG.md#2025-04-12_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nvad = Daily.create_native_vad(1000, 16000, 1)\nconfidence = vad.analyze_frames(audio_frames)\n```\n\n----------------------------------------\n\nTITLE: Proper CallClient Resource Release in Python\nDESCRIPTION: Example showing how to properly release CallClient resources when dealing with circular dependencies using the release() method.\nSOURCE: https://github.com/daily-co/daily-python/blob/main/CHANGELOG.md#2025-04-12_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass MyClient(EventHandler):\n\n  def __init__(self):\n    self.call_client=CallClient(event_handler=self)\n\n  def leave(self):\n    self.call_client.leave()\n    self.call_client.release()\n\n  ...\n```\n\n----------------------------------------\n\nTITLE: Reading Audio Frames - New Implementation\nDESCRIPTION: Improved implementation for reading audio frames from a virtual speaker device with internal timing control, eliminating the need for manual sleep intervals.\nSOURCE: https://github.com/daily-co/daily-python/blob/main/CHANGELOG.md#2025-04-12_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nSECONDS_TO_READ = 10\nFRAMES_TO_READ = SAMPLE_RATE * SECONDS_TO_READ\nbuffer = speaker.read_frames(FRAMES_TO_READ)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Python Virtual Environment for Daily SDK Demos\nDESCRIPTION: Creates and activates a Python virtual environment to isolate dependencies for the demos. This ensures a clean workspace for installing and running the Daily SDK examples.\nSOURCE: https://github.com/daily-co/daily-python/blob/main/demos/README.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv .venv\nsource .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Installing Daily Python SDK Manually\nDESCRIPTION: Installs the Daily Python SDK separately as it's not included in the requirements.txt file. This is the core library needed for all demos to interact with Daily's platform.\nSOURCE: https://github.com/daily-co/daily-python/blob/main/demos/README.md#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip3 install daily-python\n```\n\n----------------------------------------\n\nTITLE: JSON Request Structure for Creating a Bot\nDESCRIPTION: The JSON structure required for the API request to create a bot. It includes the bot name and Daily meeting URL parameters.\nSOURCE: https://github.com/daily-co/daily-python/blob/main/demos/flask/README.md#2025-04-12_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bot_name\": \"BOT_NAME\",\n  \"meeting_url\": \"DAILY_MEETING_URL\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Packages\nDESCRIPTION: Command to install the necessary Python dependencies (Flask, Celery, and Redis) using pip.\nSOURCE: https://github.com/daily-co/daily-python/blob/main/demos/flask/README.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip3 install flask celery redis\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies with Versions\nDESCRIPTION: This snippet lists the required Python packages and their specific versions for the daily-python project. It includes maturin for Rust-Python interoperability, setuptools for package management, Sphinx for documentation generation, sphinx-rtd-theme for documentation styling, and toml for configuration file parsing.\nSOURCE: https://github.com/daily-co/daily-python/blob/main/requirements.txt#2025-04-12_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmaturin==1.8.3\nsetuptools==78.0.2\nsphinx==7.4.7\nsphinx-rtd-theme==2.0.0\ntoml==0.10.2\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies with Version Constraints\nDESCRIPTION: A requirements specification listing Python packages with their version constraints using the tilde (~=) operator for compatible release versioning. Includes packages for Celery, Flask, Google Cloud services, OpenAI, image processing, and other utilities.\nSOURCE: https://github.com/daily-co/daily-python/blob/main/demos/requirements.txt#2025-04-12_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncelery~=5.4.0\ndeepgram-sdk~=3.5.1\nflask~=3.0.3\ngoogle-cloud-speech~=2.27.0\ngoogle-cloud-texttospeech~=2.17.2\nnumpy~=1.26.4\nopenai~=1.42.0\npillow~=10.4.0\npyaudio~=0.2.14\npycairo~=1.26.1\npygobject~=3.48.2\npyside6~=6.7.2\nredis~=5.0.8\nyolov5~=7.0.13\naiohttp~=3.10.11\npydantic~=2.8.2\npython-dotenv\n```\n\n----------------------------------------\n\nTITLE: Using CallClient with EventHandler in Python\nDESCRIPTION: Example demonstrating circular dependency between CallClient and EventHandler without resource release.\nSOURCE: https://github.com/daily-co/daily-python/blob/main/CHANGELOG.md#2025-04-12_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass MyClient(EventHandler):\n\n  def __init__(self):\n    self.call_client=CallClient(event_handler=self)\n\n  ...\n```\n\n----------------------------------------\n\nTITLE: Installing Demo Dependencies via pip\nDESCRIPTION: Installs the required Python dependencies for the demos using pip and the requirements.txt file. This command sets up all necessary packages except for the Daily Python SDK itself.\nSOURCE: https://github.com/daily-co/daily-python/blob/main/demos/README.md#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip3 install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Making API Request with curl\nDESCRIPTION: Example curl command to make a POST request to the Flask application, providing the bot name and meeting URL in the JSON payload.\nSOURCE: https://github.com/daily-co/daily-python/blob/main/demos/flask/README.md#2025-04-12_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -d '{\"bot_name\": \"BOT_NAME\", \"meeting_url\":\"DAILY_MEETING_URL\"}' -H \"Content-Type: application/json\" -X POST http://localhost:5000\n```\n\n----------------------------------------\n\nTITLE: Running the Flask Application\nDESCRIPTION: Command to start the Flask application server using the flask CLI.\nSOURCE: https://github.com/daily-co/daily-python/blob/main/demos/flask/README.md#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nflask run\n```\n\n----------------------------------------\n\nTITLE: Starting Celery Worker\nDESCRIPTION: Command to start the Celery worker process with the application's Celery instance, setting the log level to INFO.\nSOURCE: https://github.com/daily-co/daily-python/blob/main/demos/flask/README.md#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncelery -A app.celery worker --loglevel INFO\n```\n\n----------------------------------------\n\nTITLE: Reading Audio Frames - Old Implementation\nDESCRIPTION: Previous implementation for reading audio frames from a virtual speaker device, requiring manual sleep intervals for timing control.\nSOURCE: https://github.com/daily-co/daily-python/blob/main/CHANGELOG.md#2025-04-12_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nSAMPLE_RATE = 16000\nREAD_INTERVAL = 0.01\nFRAMES_TO_READ = int(SAMPLE_RATE * READ_INTERVAL)\nSECONDS_TO_READ = 10.0\n\nfor _ in range (int(SECONDS_TO_READ / READ_INTERVAL)):\n  buffer = speaker.read_frames(FRAMES_TO_READ)\n  time.sleep(READ_INTERVAL)\n```\n\n----------------------------------------\n\nTITLE: Specifying patchelf Package Dependency\nDESCRIPTION: Defines a requirement for the patchelf package at version 0.17.2.2. This is typically used in a requirements.txt file to specify exact package versions needed for a Python project.\nSOURCE: https://github.com/daily-co/daily-python/blob/main/requirements-linux.txt#2025-04-12_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npatchelf==0.17.2.2\n```\n\n----------------------------------------\n\nTITLE: Defining Boolean Type Annotation in Python\nDESCRIPTION: This snippet shows the Python type annotation for a boolean value. In Python's type hinting system, 'bool' is used to indicate that a variable, parameter, or return value should be a boolean type (True or False).\nSOURCE: https://github.com/daily-co/daily-python/blob/main/docs/src/types.rst#2025-04-12_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nbool\n```"
  }
]