[
  {
    "owner": "ohdsi",
    "repo": "vocabulary-v5.0",
    "content": "TITLE: Changes to Concept Mappings (SQL)\nDESCRIPTION: This SQL query retrieves changes to concept mappings using the `qa_tests.get_changes_concept_mapping()` function. This query can be used to determine how concepts are changing mappings to each other. Concept mapping maintenance is critical to keeping the vocabulary current and accurate.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/LOINC/readme.md#_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM qa_tests.get_changes_concept_mapping();\n```\n\n----------------------------------------\n\nTITLE: Creating Sequence and Log Table for Vocabulary Updates\nDESCRIPTION: Creates a sequence for generating unique log entry IDs and a table to record vocabulary update operations. The log table stores information about each vocabulary's processing status, errors, and timestamps.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/working/packages/vocabulary_download/readme.md#_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE SEQUENCE vocabulary_download.log_seq START WITH 1 INCREMENT BY 1 CACHE 10;\nCREATE TABLE vocabulary_download.vocabulary_log (\n  object_no int4 primary key,\n  vocabulary_id varchar (20) not null,\n  session_id int4 not null, /*session identifier during update*/\n  operation_time timestamp not null,\n  vocabulary_operation text not NULL /*started, stopped, etc*/,\n  vocabulary_error text,\n  error_details text,\n  vocabulary_status int not null /*0 - update started, 1 - operation success, 2 - operation error, 3 - all tasks done*/\n);\nCREATE INDEX idx_log_sessionid ON vocabulary_download.vocabulary_log (session_id);\n```\n\n----------------------------------------\n\nTITLE: New Concepts Standard Concept Status (SQL)\nDESCRIPTION: This SQL query retrieves the standard concept status of newly added concepts using the `qa_tests.get_newly_concepts_standard_concept_status()` function. This query identifies what standard concept status is being assigned to newly introduced concepts. Understanding this is critical for understanding the vocabulary maintenance process.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/LOINC/readme.md#_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM qa_tests.get_newly_concepts_standard_concept_status();\n```\n\n----------------------------------------\n\nTITLE: Get Newly Created Standard Concept Status in SQL\nDESCRIPTION: This SQL query retrieves a list of newly created concepts and their standard concept status. This is used to monitor newly added standard and non-standard concepts.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/MedDRA/readme.md#_snippet_9\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM qa_tests.get_newly_concepts_standard_concept_status();\n```\n\n----------------------------------------\n\nTITLE: Changes Concept Mapping\nDESCRIPTION: This SQL query retrieves changes of concept mapping status, grouped by target domain, between the current schema and 'devv5'. It relies on the `qa_tests.get_changes_concept_mapping` function.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/NDC_SPL/readme.md#_snippet_10\n\nLANGUAGE: SQL\nCODE:\n```\nselect * from qa_tests.get_changes_concept_mapping(pCompareWith=>'devv5');\n```\n\n----------------------------------------\n\nTITLE: Fast Schema Recreation (SQL)\nDESCRIPTION: This SQL statement uses the `devv5.FastRecreateSchema` function to quickly recreate the schema. It takes parameters to exclude concept ancestor tables, include deprecated relationships, and include synonyms. This is used to ensure a clean and consistent schema before loading the data.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/LOINC/readme.md#_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT devv5.FastRecreateSchema(main_schema_name=>'devv5', include_concept_ancestor=> false,\n                                include_deprecated_rels=> true, include_synonyms=> true);\n```\n\n----------------------------------------\n\nTITLE: Newly Added Concepts Statistics Retrieval\nDESCRIPTION: This SQL snippet retrieves statistics about newly added concepts using the 'qa_tests.get_newly_concepts()' function. The DISTINCT keyword ensures only unique new concept results are returned.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/HCPCS/readme.md#_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT DISTINCT * FROM qa_tests.get_newly_concepts();\n```\n\n----------------------------------------\n\nTITLE: Generic Update\nDESCRIPTION: This step executes the 'GenericUpdate' procedure in the DevV5 schema. This procedure performs the final update of the vocabulary tables (concept, concept_relationship, and concept_synonym) using the data in the staging tables. Requires the devv5 schema to be set correctly.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/EphMRA ATC/readme.md#_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\ndevv5.GenericUpdate();\n```\n\n----------------------------------------\n\nTITLE: Get Summary Concept\nDESCRIPTION: This SQL query retrieves a summary of changes in the 'concept' table between the current schema and 'devv5'. It uses the `qa_tests.get_summary` function.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/NDC_SPL/readme.md#_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nselect * from qa_tests.get_summary (table_name=>'concept',pCompareWith=>'devv5');\n```\n\n----------------------------------------\n\nTITLE: Generic Update Stored Procedure SQL\nDESCRIPTION: This SQL statement executes the GenericUpdate stored procedure, which performs post-processing steps and updates the vocabulary within the OHDSI framework.  The stored procedure is located within the devv5 schema, and is used to finalize the CIEL vocabulary update.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/CIEL/readme.md#_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\ndevv5.GenericUpdate();\n```\n\n----------------------------------------\n\nTITLE: Schema Fast Recreate - SQL\nDESCRIPTION: This SQL script recreates the DevV5 schema, including concept ancestor relationships, deprecated relationships, and synonyms. It requires the DevV5 schema to be present.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/CDISC/readme.md#_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT devv5.FastRecreateSchema(main_schema_name=>'devv5', include_concept_ancestor=> true, include_deprecated_rels=> true, include_synonyms=> true);\n```\n\n----------------------------------------\n\nTITLE: Run ICD_CDE_source.sql for Data Integration (SQL)\nDESCRIPTION: This SQL script integrates data into the ICD common data environment (CDE). It is used to prepare the data for manual review and mapping in subsequent steps.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/ICD10CM/manual_work/readme.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nN/A - Script content not provided\n```\n\n----------------------------------------\n\nTITLE: Query Log Summary in SQL\nDESCRIPTION: This SQL query retrieves a summarized history of changes to the base vocabulary tables from the `audit.GetLogSummary()` function. It includes the log ID, transaction time adjusted to the Moscow time zone, the name of the script that made the changes, affected vocabularies, and the transaction ID. The results are ordered by log ID in descending order and limited to the top 10 entries.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/working/packages/audit_pack/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT log_id,\n\ttx_time AT TIME ZONE 'MSK' AS tx_time,\n\tscript_name,\n\taffected_vocabs,\n\ttx_id\nFROM audit.GetLogSummary()\nORDER BY log_id DESC\nLIMIT 10;\n```\n\n----------------------------------------\n\nTITLE: Standard Concept Status Changes (SQL)\nDESCRIPTION: This SQL query retrieves information about changes in the standard concept status of concepts using the `qa_tests.get_standard_concept_changes()` function. It highlights concepts that have been either promoted or demoted in terms of their standard concept status, indicating important shifts in their recommended usage. This is critical for maintaining data quality and ensuring that downstream analyses use the most appropriate concepts.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/LOINC/readme.md#_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM qa_tests.get_standard_concept_changes();\n```\n\n----------------------------------------\n\nTITLE: Changes Concept Mapping Statistics SQL\nDESCRIPTION: This SQL script retrieves statistics on changes to concept mappings by executing the `get_changes_concept_mapping` function within the `qa_tests` schema. The results provide insights into modifications made to concept mappings during the update process.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/OPS/readme.md#_snippet_10\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM qa_tests.get_changes_concept_mapping();\n```\n\n----------------------------------------\n\nTITLE: Run Generic Update (SQL)\nDESCRIPTION: This SQL block executes the `GenericUpdate` procedure within the `devv5` schema. It's wrapped in a `DO` block to allow the execution of procedural code in PostgreSQL. The `PERFORM` keyword ensures that the result of the function call is discarded, as it's typically used for procedures that have side effects.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/ICD10PCS/readme.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\n   DO $_$\n   BEGIN\n       PERFORM devv5.GenericUpdate();\n   END $_$;\n```\n\n----------------------------------------\n\nTITLE: Deprecate and Add ICD-10 Concept Relationships\nDESCRIPTION: This SQL script deprecates old mappings for specific ICD-10 codes and adds fresh mappings to the concept_relationship_manual table. It is executed after manual review and ensures that updated mappings are correctly reflected in the vocabulary. The script relies on the concept_relationship_manual table.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/ICD10/manual_work/readme.md#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nRefer to [crm_changes.sql](https://github.com/OHDSI/Vocabulary-v5.0/blob/icd10-documentation/ICD10/manual_work/crm_changes.sql) for the full SQL script.\n```\n\n----------------------------------------\n\nTITLE: Generic Update SQL\nDESCRIPTION: This step executes the `GenericUpdate` procedure within the `devv5` schema. This procedure updates the core vocabulary tables based on the data in the staging tables, completing the ETC vocabulary update process.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/ETC/readme.md#_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\n5. Run generic_update: devv5.GenericUpdate();\n```\n\n----------------------------------------\n\nTITLE: Executing Generic Vocabulary Update\nDESCRIPTION: This SQL command executes the `GenericUpdate` procedure within the `devv5` schema. This procedure is responsible for performing the actual vocabulary update process based on the data loaded into the staging tables. The success of this command depends on the correct execution of previous steps, including data loading and staging.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/ICD9CM/readme.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\ndevv5.GenericUpdate();\n```\n\n----------------------------------------\n\nTITLE: Generic Update Procedure SQL\nDESCRIPTION: This SQL statement executes a generic update procedure (GenericUpdate) within the 'devv5' schema. This procedure is responsible for merging the staged PPI data into the main concept tables, ensuring data integrity and consistency. The procedure likely takes no explicit input parameters, as it operates on the data already staged in the database.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/PPI/readme.md#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\n3. Run generic_update: devv5.GenericUpdate();\n```\n\n----------------------------------------\n\nTITLE: Loading OncoTree Data from API into Relational Format SQL\nDESCRIPTION: This SQL snippet retrieves OncoTree data from a specified API endpoint and transforms it into a relational format suitable for loading into a database table. It uses a recursive common table expression (CTE) to traverse the JSON tree structure, extracting parent-child relationships and names. The CTE `jsondata` recursively parses the JSON, and the final SELECT statement extracts the ancestor and descendant codes and names.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/OncoTree/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nwith recursive jsondata(key, value, a_name, parent, d_name, lv) AS (\n  SELECT\n    je.key,\n    je.value->'children' as value,\n    null as a_name,\n    je.value ->> 'parent' as parent,\n    je.value ->> 'name' as d_name,\n    1 as lv\n  FROM (select http_content::json as data from vocabulary_download.py_http_get(url=>'http://oncotree.mskcc.org/api/tumorTypes/tree')) j\n  cross join json_each(j.data) AS je\n\n  UNION ALL\n\n  SELECT\n    je.key,\n    je.value->'children' as value,\n    j.d_name as a_name,\n    je.value ->> 'parent' as parent,\n    je.value ->> 'name' || case when j.lv<=1 then '' else ' ('||je.key||')' end as d_name,\n    j.lv+1 as lv\n  FROM jsondata j\n  cross join json_each (j.value) as je\n)\nSELECT j.parent as ancestor_code, j.a_name as ancestor_name,\nj.key as descendant_code,\nj.d_name as descendant_name\nFROM jsondata j;\n```\n\n----------------------------------------\n\nTITLE: Newly Added Concepts\nDESCRIPTION: This SQL query retrieves newly added concepts, grouped by vocabulary_id and domain, between the current schema and 'devv5'. It uses the `qa_tests.get_newly_concepts` function.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/NDC_SPL/readme.md#_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\nselect * from qa_tests.get_newly_concepts(pCompareWith=>'devv5');\n```\n\n----------------------------------------\n\nTITLE: Get Domain Changes in SQL\nDESCRIPTION: This SQL query retrieves the changes in domain information using the get_domain_changes() function from the qa_tests schema. It helps in identifying how the domains of concepts have been affected by the vocabulary update. The output needs to be interpreted to understand the impact of changes.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/CPT4/readme.md#_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM qa_tests.get_domain_changes();\n```\n\n----------------------------------------\n\nTITLE: Load Stage SQL\nDESCRIPTION: This SQL script loads the staging tables with the transformed vocabulary data from the loaded input tables.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/CAP/readme.md#_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nload_stage.sql\n```\n\n----------------------------------------\n\nTITLE: Extension Installation SQL\nDESCRIPTION: These SQL statements create the pgcrypto and tablefunc extensions, which are necessary for the functionality of the administrative package. The admin_pack_ddl.sql script also needs to be run after these commands.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/working/packages/admin_pack/readme.md#_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE EXTENSION pgcrypto;\nCREATE EXTENSION tablefunc;\n--Run admin_pack_ddl.sql (follow the instructions inside)\n```\n\n----------------------------------------\n\nTITLE: Loading Stage SQL\nDESCRIPTION: This SQL script performs the loading stage processing for the CIEL vocabulary. It transforms and integrates the data from the source tables into the standard OMOP concept tables. The script assumes that the previous steps have successfully loaded the CIEL data into the staging tables.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/CIEL/readme.md#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\n3. Run load_stage.sql\n```\n\n----------------------------------------\n\nTITLE: Standard Concept Changes\nDESCRIPTION: This SQL query retrieves changes in standard concepts between the current schema and 'devv5'. It uses the `qa_tests.get_standard_concept_changes` function.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/NDC_SPL/readme.md#_snippet_8\n\nLANGUAGE: SQL\nCODE:\n```\nselect * from qa_tests.get_standard_concept_changes(pCompareWith=>'devv5');\n```\n\n----------------------------------------\n\nTITLE: Generic Update (SQL)\nDESCRIPTION: This SQL snippet runs the `GenericUpdate` function located in the `devv5` schema.  This is a key step in the vocabulary update process after the stage tables have been loaded and any manual work has been completed.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/ICD10CN/readme.md#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT devv5.GenericUpdate();\n```\n\n----------------------------------------\n\nTITLE: Get Newly Created Concepts in SQL\nDESCRIPTION: This SQL query retrieves all the newly created concepts as a result of the MedDRA vocabulary update. This is for analyzing the addition of new concepts to the vocabulary.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/MedDRA/readme.md#_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM qa_tests.get_newly_concepts();\n```\n\n----------------------------------------\n\nTITLE: Executing API Procedures SQL\nDESCRIPTION: This PL/pgSQL block executes three stored procedures in a specific order: `GetRxNorm2NDC_Mappings`, `GetRxNorm2SPL_Mappings`, and `GetAllNDC`. It performs API data parsing using the functions. The functions need to exist in the `apigrabber` schema.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/working/packages/APIgrabber/readme.md#_snippet_9\n\nLANGUAGE: SQL\nCODE:\n```\nDO $$\nBEGIN\n\t\tPERFORM apigrabber.GetRxNorm2NDC_Mappings();\n\t\tPERFORM apigrabber.GetRxNorm2SPL_Mappings();\n\t\tPERFORM apigrabber.GetAllNDC();\nEND $$;\n```\n\n----------------------------------------\n\nTITLE: SQL: Generic Update\nDESCRIPTION: This command executes the GenericUpdate stored procedure within the devv5 schema. This procedure is responsible for the final step of updating the vocabulary tables with the data from the staging tables.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/CIViC/readme.md#_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\ndevv5.GenericUpdate();\n```\n\n----------------------------------------\n\nTITLE: Run pConceptAncestor procedure to build hierarchies\nDESCRIPTION: This SQL snippet executes the `pConceptAncestor` procedure from the `VOCABULARY_PACK` package. This procedure is essential for building the concept ancestor hierarchy, which represents the hierarchical relationships between different concepts in the vocabulary. It is a post-processing step after updating the vocabulary.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/ATC/readme.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nDO $_$\nBEGIN\n    PERFORM VOCABULARY_PACK.pConceptAncestor();\nEND $_$;\n```\n\n----------------------------------------\n\nTITLE: Collect Statistics SQL\nDESCRIPTION: Executes several SQL queries to collect statistics about the SNOMED vocabulary update, including domain changes, new concepts, standard concept changes, changes in concept mapping and new concepts status.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/SNOMED/readme.md#_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT DISTINCT * FROM qa_tests.get_domain_changes();\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT DISTINCT * FROM qa_tests.get_newly_concepts();\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT DISTINCT * FROM qa_tests.get_standard_concept_changes();\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT DISTINCT * FROM qa_tests.get_newly_concepts_standard_concept_status();\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT DISTINCT * FROM qa_tests.get_changes_concept_mapping();\n```\n\n----------------------------------------\n\nTITLE: Run Generic Update\nDESCRIPTION: Executes the GenericUpdate procedure within the devv5 schema. This step performs the actual vocabulary update process.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/CCAM/readme.md#_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\ndevv5.GenericUpdate();\n```\n\n----------------------------------------\n\nTITLE: Run generic update\nDESCRIPTION: This SQL call executes the `GenericUpdate` stored procedure or function in the `devv5` schema. This function performs the final update of the CDM tables using the data prepared in the staging tables. This function is expected to handle the logic for updating the core CDM tables with the new data.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/CDM/readme.md#_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\ndevv5.GenericUpdate();\n```\n\n----------------------------------------\n\nTITLE: Get Standard Concept Changes (SQL)\nDESCRIPTION: This SQL query retrieves a distinct set of records from the result of the `get_standard_concept_changes` function in the `qa_tests` schema for the 'devv5' schema. It identifies changes in the standard concept status of concepts.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/ICD10PCS/readme.md#_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\n    SELECT DISTINCT * FROM qa_tests.get_standard_concept_changes('devv5');\n```\n\n----------------------------------------\n\nTITLE: Newly Created Concepts Standard Concept Status Statistics SQL\nDESCRIPTION: This SQL statement executes the get_newly_concepts_standard_concept_status function within the qa_tests schema. Requires the qa_tests.get_newly_concepts_standard_concept_status() function to be defined. The results should be interpreted to analyze standard concept status of newly created concepts.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/HemOnc/readme.md#_snippet_8\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM qa_tests.get_newly_concepts_standard_concept_status();\n```\n\n----------------------------------------\n\nTITLE: Create Source Tables SQL\nDESCRIPTION: This step involves running the 'create_source_tables.sql' script. The script creates the necessary database tables to hold the source EphMRA ATC data before it is processed and integrated into the vocabulary.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/EphMRA ATC/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\ncreate_source_tables.sql\n```\n\n----------------------------------------\n\nTITLE: Get Concept Mapping Changes in SQL\nDESCRIPTION: This SQL query retrieves all changes to concept mappings resulting from the MedDRA vocabulary update. It is used to assess the impact on existing mappings.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/MedDRA/readme.md#_snippet_10\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM qa_tests.get_changes_concept_mapping();\n```\n\n----------------------------------------\n\nTITLE: Querying RxNorm Information Sheet (SQL)\nDESCRIPTION: This SQL query retrieves all data from the rxn_info_sheet table, which is created during the RxNorm update process. This allows for reviewing the results of quality assurance checks.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/RxNorm/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT *\nFROM rxn_info_sheet;\n```\n\n----------------------------------------\n\nTITLE: Loading Stage Tables SQL\nDESCRIPTION: This step involves running the `load_stage.sql` script.  The script populates staging tables with the transformed data from the input tables in preparation for the vocabulary building process. This is necessary to conform the input data to the vocabulary structure.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/DPD/readme.md#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nload_stage.sql\n```\n\n----------------------------------------\n\nTITLE: Combine Google Drive and Sheet Functions SQL\nDESCRIPTION: This SQL script demonstrates how to combine `google_pack.ListAllSpreadSheetFiles` and `google_pack.GetSpreadSheetByID` to retrieve data from multiple sheets with the same structure across all Google Sheets in a folder. It uses a cross join lateral to iterate through the spreadsheet IDs returned by `ListAllSpreadSheetFiles` and applies `GetSpreadSheetByID` to each one. Ensure the service email has view permissions on the target Google Drive folder.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/working/packages/google_pack/readme.md#_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT s.spreadsheet_id,\n\ts.modifiedtime,\n\tl.*\nFROM google_pack.ListAllSpreadSheetFiles('1B0KzHe...') s\nCROSS JOIN LATERAL(SELECT * FROM google_pack.GetSpreadSheetByID(s.spreadsheet_id, 'concept_manual', 1) AS (\n\tworksheet_row_id int4,\n\tconcept_name TEXT,\n\tconcept_code TEXT,\n\tvocabulary_id TEXT,\n\tdomain_id TEXT,\n\tconcept_class_id TEXT,\n\tstandard_concept TEXT,\n\tvalid_start_date TEXT,\n\tvalid_end_date TEXT,\n\tinvalid_reason TEXT\n\t)\n) l;\n```\n\n----------------------------------------\n\nTITLE: Load Stage 2 SQL\nDESCRIPTION: This step executes the `load_stage_2.sql` script, which further processes the mapped data from the `*_mapped` tables and integrates it into the vocabulary.  This step relies on the *_to_map tables being manually filled and re-uploaded as *_mapped.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/JMDC/readme.md#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nload_stage_2.sql\n```\n\n----------------------------------------\n\nTITLE: Newly Created Concepts Statistics SQL\nDESCRIPTION: This SQL statement executes the get_newly_concepts function within the qa_tests schema. Requires the qa_tests.get_newly_concepts() function to be defined. The results should be interpreted to analyze newly created concepts.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/HemOnc/readme.md#_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM qa_tests.get_newly_concepts();\n```\n\n----------------------------------------\n\nTITLE: Create Source Tables SQL\nDESCRIPTION: This SQL script creates the necessary source tables within the database to load PPI data. It is the first step in the PPI data update process and requires a working development environment.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/PPI/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\n1. Run create_source_tables.sql\n```\n\n----------------------------------------\n\nTITLE: Grant User Privileges SQL\nDESCRIPTION: This SQL snippet grants privileges to a user using separate SELECT statements.  It uses `admin_pack.CreateVirtualUser`, `admin_pack.GrantPrivilege`, and `admin_pack.GrantVocabularyAccess`. It retrieves user and privilege IDs using `admin_pack.GetUserIDByLogin` and `admin_pack.GetPrivilegeIDByName`.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/working/packages/admin_pack/readme.md#_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\n\tSELECT admin_pack.CreateVirtualUser(\n\t\tpUserLogin       =>'dev_jdoe',\n\t\tpUserName        =>'John Doe',\n\t\tpUserDescription =>'Vocabulary Team',\n\t\tpPassWord        =>'password'\n\t);\n\n\tSELECT admin_pack.GrantPrivilege(\n\t\tpUserID          =>admin_pack.GetUserIDByLogin('dev_jdoe'),\n\t\tpPrivilegeID     =>admin_pack.GetPrivilegeIDByName('MANAGE_ANY_VOCABULARY')\n\t);\n\n\tSELECT admin_pack.GrantVocabularyAccess(\n\t\tpUserID          =>admin_pack.GetUserIDByLogin('dev_jdoe'),\n\t\tpVocabulary_id   =>'CPT4' --vocabulary_id\n\t);\n```\n\n----------------------------------------\n\nTITLE: Loading CIEL Source Tables SQL\nDESCRIPTION: This SQL statement loads the CIEL source files into the previously created source tables within the DevV5 schema. It takes parameters for the vocabulary name ('CIEL'), the vocabulary date ('20210312'), and the vocabulary version ('OpenMRS 2.11.0 20210312'). Ensure DevV5 schema has copies of concept, concept_relationship and concept_synonym from ProdV5, fully indexed.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/CIEL/readme.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT sources.load_input_tables('CIEL',TO_DATE('20210312','YYYYMMDD'),'OpenMRS 2.11.0 20210312');\n```\n\n----------------------------------------\n\nTITLE: Integrate ICD-10 Data into Common Data Environment\nDESCRIPTION: This SQL script integrates ICD-10 data into the common data environment (CDE). This step prepares the data for manual review and mapping. The integration is a crucial part of standardizing the ICD-10 data within the OHDSI vocabulary.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/ICD10/manual_work/readme.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nRefer to ICD_CDE_source.sql for the full SQL script.\n```\n\n----------------------------------------\n\nTITLE: Load Input Tables SQL\nDESCRIPTION: This step loads the ETC vocabulary data into the input tables. It uses the `sources.load_input_tables` function, which retrieves the `pVocabularyDate` and `pVocabularyVersion` automatically from the `GCN_SEQNO` table. The input tables are assumed to be populated from the unpacked ETC sources.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/ETC/readme.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT sources.load_input_tables('ETC');\n```\n\n----------------------------------------\n\nTITLE: Create Google Sheet from Table SQL\nDESCRIPTION: This SQL script uses the `google_pack.SetSpreadSheet` function to create a new sheet in a specified Google spreadsheet from a database table. It requires the table name (or schema.tablename), the spreadsheet ID, and the desired name for the new sheet. Ensure the service email has write permissions to the target Google Sheet.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/working/packages/google_pack/readme.md#_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT google_pack.SetSpreadSheet(\n\t'cde_manual_group', --table name or shemaname.tablename\n\t'1a3os1cjgIuji...', --spreadsheet ID\n\t'my export' -- the name (title) of the list to be created\n);\n```\n\n----------------------------------------\n\nTITLE: Run load_stage.sql\nDESCRIPTION: This step executes the `load_stage.sql` script. The script's purpose is to load data from the source tables into the staging tables, preparing the data for the final CDM update. It likely involves transformations and cleansing operations.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/CDM/readme.md#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\n-- No specific code provided for this step, assuming the script contains SQL statements to load data into staging tables.\n```\n\n----------------------------------------\n\nTITLE: SQL: load_stage.sql Execution\nDESCRIPTION: This step focuses on executing the load_stage.sql script. This script is designed to load the vocabulary data into the staging tables previously created by `create_source_tables.sql`. Ensure that the source files and manual work tables are downloaded and available before running this script, as it depends on these resources to populate the staging tables.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/DA_France/readme.md#_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nload_stage.sql\n```\n\n----------------------------------------\n\nTITLE: Modify Vocabulary Access (Shorter) SQL\nDESCRIPTION: This SQL script provides a shorter version to modify a user's access (block status) to a specific vocabulary using the `admin_pack.ModifyVocabularyAccess` function. It uses `admin_pack.GetUserIDByLogin`. MANAGE_USER privilege is required.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/working/packages/admin_pack/readme.md#_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nDO $_$\nBEGIN\n\tPERFORM admin_pack.ModifyVocabularyAccess(\n\t\tpUserID          =>admin_pack.GetUserIDByLogin('dev_jdoe'), --user's virtual login\n\t\tpVocabulary_id   =>'CPT4', --vocabulary_id for which access is being changed\n\t\tpIsBlocked       =>TRUE --block access\n\t);\nEND $_$;\n```\n\n----------------------------------------\n\nTITLE: Run Generic Update Procedure in SQL\nDESCRIPTION: This PL/pgSQL block executes the `GenericUpdate` stored procedure in the `devv5` schema. This procedure is responsible for updating the main vocabulary tables based on the staged data. The procedure handles the core logic for integrating the new MedDRA data.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/MedDRA/readme.md#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nDO $_$\nBEGIN\n\tPERFORM devv5.GenericUpdate();\nEND $_$;\n```\n\n----------------------------------------\n\nTITLE: Get QA Checks SQL\nDESCRIPTION: Retrieves QA check results from the qa_tests.get_checks() function. This step verifies the data integrity and quality after the update process.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/SNOMED/readme.md#_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM qa_tests.get_checks();\n```\n\n----------------------------------------\n\nTITLE: GenericUpdate SQL Command\nDESCRIPTION: This SQL command executes the generic update procedure in the devv5 schema.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/KCD7/readme.md#_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT devv5.GenericUpdate();\n```\n\n----------------------------------------\n\nTITLE: List Google Drive Spreadsheet Files SQL\nDESCRIPTION: This SQL script uses the `google_pack.ListAllSpreadSheetFiles` function to retrieve a list of all spreadsheet files within a specified Google Drive folder.  It requires the folder ID from the Google Drive URL as input. The function returns metadata about each spreadsheet file in the folder.  Ensure the service email has view permissions on the target Google Drive folder.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/working/packages/google_pack/readme.md#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM google_pack.ListAllSpreadSheetFiles('1B0KzHeET6vm...'); -- specify folder_id from the URL https://drive.google.com/drive/folders/_folder_id_\n```\n\n----------------------------------------\n\nTITLE: Query: Select data from concept_relationship_manual\nDESCRIPTION: This SQL query selects data from the concept_relationship_manual table, ordering the results by vocabulary_id_1, vocabulary_id_2, relationship_id, concept_code_1, concept_code_2, invalid_reason, valid_start_date, and valid_end_date. It retrieves all the columns required for the concept_relationship_manual table.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/OPS/manual_work/readme.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT concept_code_1,\n       concept_code_2,\n       vocabulary_id_1,\n       vocabulary_id_2,\n       relationship_id,\n       valid_start_date,\n       valid_end_date,\n       invalid_reason\nFROM concept_relationship_manual\nORDER BY vocabulary_id_1, vocabulary_id_2, relationship_id, concept_code_1, concept_code_2, invalid_reason, valid_start_date, valid_end_date\n```\n\n----------------------------------------\n\nTITLE: Create Source Tables SQL\nDESCRIPTION: This step involves running the 'create_source_tables.sql' script, which likely creates the necessary tables in the DevV5 schema to hold the source data for the Indication vocabulary update. This script ensures the environment is ready for the subsequent data loading.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/Indication/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nRun create_source_tables.sql\n```\n\n----------------------------------------\n\nTITLE: Create Virtual User SQL\nDESCRIPTION: This SQL script creates an active virtual user with specified attributes such as login, name, description, password, and email.  It uses the `admin_pack.CreateVirtualUser` function. MANAGE_USER privilege is required.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/working/packages/admin_pack/readme.md#_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nDO $_$\nBEGIN\n\tPERFORM admin_pack.CreateVirtualUser(\n\t\tpUserLogin       =>'dev_jdoe', --it is better to create a login that matches the real login in the database (if applicable)\n\t\tpUserName        =>'John Doe', --full name\n\t\tpUserDescription =>'Vocabulary Team', --medical, customer, some comment, etc\n\t\tpPassWord        =>'password', --any strong password (has nothing to do with the real database password)\n\t\tpEmail           =>'jdoe@e-mail.com', --you can specify the user's e-mail (can be omitted)\n\t\tpValidStartDate  =>NULL, --can be omitted, default CURRENT_DATE\n\t\tpValidEndDate    =>NULL, --can be omitted, default 2099-12-31\n\t\tpIsBlocked       =>FALSE --you can create a blocked user, can be useful if you want to create a user in advance and then just unset the block flag via ModifyVirtualUser(), can be omitted, default FALSE\n\t);\nEND $_$;\n```\n\n----------------------------------------\n\nTITLE: Generic Update Execution SQL\nDESCRIPTION: This SQL command executes the generic update procedure in the devv5 schema. It performs the actual vocabulary update process.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/ICD9ProcCN/readme.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\ndevv5.GenericUpdate();\n```\n\n----------------------------------------\n\nTITLE: Load input tables\nDESCRIPTION: This SQL function call loads input tables into the `CDM` schema. It takes the schema name, current date, and a JSON object containing the version, publication date, and node ID of the CDM release as parameters. This function loads data from external sources into staging tables within the CDM schema.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/CDM/readme.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT sources.load_input_tables('CDM',current_date, json_build_object('version','CDM v5.0.0','published_at','2014-11-11T02:10:58'::timestamp,'node_id','MDc6UmVsZWFzZTY5MzgzMw==')::text);\n```\n\n----------------------------------------\n\nTITLE: Execute genericupdate function in devv5 schema\nDESCRIPTION: This SQL snippet executes the `genericupdate` function within the `devv5` schema. This function is likely responsible for updating the vocabulary with new or modified generic drug information. It's a key step in the ATC refresh process.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/ATC/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT devv5.genericupdate();\n```\n\n----------------------------------------\n\nTITLE: Load Stage Tables\nDESCRIPTION: This SQL script loads the data from the source tables into the staging tables. It prepares the data for further processing and integration into the main vocabulary tables. This script runs after the input tables are loaded using the `load_input_tables` function.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/BDPM/README.md#_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nload_stage.sql\n```\n\n----------------------------------------\n\nTITLE: Extracting data into existent_atc_rxnorm_to_drop table using SQL\nDESCRIPTION: This SQL query is used to generate the CSV file that will be extracted into the `existent_atc_rxnorm_to_drop` table. It selects `atc_code`, `atc_name`, `root`, `concept_id`, `to_drop`, `concept_name`, and `to_check` columns from the `existent_atc_rxnorm_to_drop` table.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/ATC/manual work/readme.md#_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n    atc_code,\n    atc_name,\n    root,\n    concept_id,\n    to_drop,\n    concept_name,\n    to_check\nFROM existent_atc_rxnorm_to_drop;\n```\n\n----------------------------------------\n\nTITLE: Create Source Tables (SQL)\nDESCRIPTION: Executes the create_source_tables.sql and additional_DDL.sql scripts to create the necessary staging tables for the GGR vocabulary data. This prepares the database schema for the subsequent data loading process.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/GGR/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\n1. Run create_source_tables.sql and additional_DDL.sql\n```\n\n----------------------------------------\n\nTITLE: Load Stage SQL\nDESCRIPTION: This SQL script loads the extracted GRR data into staging tables. These staging tables are required for further processing and transformation of the data before integration into the main vocabulary tables.  The script depends on the creation of source tables via `create_source_tables.sql` and the population of the `source_data` table.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/GRR/readme.md#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nload_stage.sql\n```\n\n----------------------------------------\n\nTITLE: Generic Update Function Call SQL\nDESCRIPTION: This step runs the `devv5.GenericUpdate()` function to perform the vocabulary update. This function takes the transformed data from staging tables and migrates it into the production tables. After execution, the core vocabulary tables are updated to include the new data. The generic update function handles the merging of new vocabulary information into existing data structures.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/Nebraska Lexicon/readme.md#_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\ndevv5.GenericUpdate();\n```\n\n----------------------------------------\n\nTITLE: Generic Update\nDESCRIPTION: This SQL query executes a generic update process in the devv5 schema.  It depends on the `devv5.GenericUpdate()` function.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/NDC_SPL/readme.md#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT devv5.GenericUpdate();\n```\n\n----------------------------------------\n\nTITLE: Concept Relationship Summary (SQL)\nDESCRIPTION: This SQL query retrieves a summary of the 'concept_relationship' table using the `qa_tests.get_summary()` function. This query provides insights into the relationships between concepts after the update process. The output will include counts and distributions of different types of relationships, which is crucial for understanding the impact of the update on the overall vocabulary graph.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/LOINC/readme.md#_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM qa_tests.get_summary('concept_relationship');\n```\n\n----------------------------------------\n\nTITLE: Executing Generic Update Procedure (SQL)\nDESCRIPTION: This SQL block executes the GenericUpdate procedure within the devv5 schema. This procedure is a key part of the RxNorm update process and performs various data transformations and updates.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/RxNorm/readme.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nDO $_$\nBEGIN\n\tPERFORM devv5.GenericUpdate();\nEND $_$;\n```\n\n----------------------------------------\n\nTITLE: Running Generic Update SQL\nDESCRIPTION: This step runs a generic update procedure `devv5.GenericUpdate()`. This procedure likely performs general updates to the vocabulary based on the changes from the DPD data. The exact functionality depends on the implementation of the `GenericUpdate()` procedure.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/DPD/readme.md#_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\ndevv5.GenericUpdate();\n```\n\n----------------------------------------\n\nTITLE: Loading Input Tables\nDESCRIPTION: This SQL statement loads data into the input tables for the CVX vocabulary. It takes the vocabulary name ('CVX'), the date of the value set, and a descriptive string as input. The TO_DATE function converts the date string into a date format.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/CVX/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT sources.load_input_tables('CVX', TO_DATE('YYYYMMDD', 'yyyymmdd'), 'CVX Code Set '||TO_DATE('YYYYMMDD', 'yyyymmdd'));\n```\n\n----------------------------------------\n\nTITLE: Run load_stage.sql\nDESCRIPTION: This step loads data into the staging area. The `pVocabularyDate` parameter is automatically retrieved from the UMLS `[SOURCES.MRSMAP.vocabulary_date]` table. Requires UMLS data in the `SOURCES` schema.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/CDT/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nload_stage.sql\n```\n\n----------------------------------------\n\nTITLE: Generic Update Procedure SQL\nDESCRIPTION: Executes the GenericUpdate stored procedure within a PL/pgSQL block. This step performs a general update process on the vocabulary data.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/SNOMED/readme.md#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nDO $_$\n   BEGIN\n       PERFORM devv5.GenericUpdate();\n   END $_$;\n```\n\n----------------------------------------\n\nTITLE: Loading DPD data into input tables SQL\nDESCRIPTION: This step loads the DPD data into the created input tables using the `sources.load_input_tables` function. It takes the source name ('DPD'), date ('20170901'), and version ('DPD 20170901') as parameters. The data is loaded into schema devv5.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/DPD/readme.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT sources.load_input_tables('DPD',TO_DATE('20170901', 'yyyymmdd'),'DPD 20170901');\n```\n\n----------------------------------------\n\nTITLE: GenericUpdate - SQL\nDESCRIPTION: This SQL statement calls the `GenericUpdate` function within the `devv5` schema.  This is a core part of the vocabulary update process, responsible for applying updates and changes to the vocabulary based on the loaded data.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/ICD10GM/readme.md#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT devv5.GenericUpdate();\n```\n\n----------------------------------------\n\nTITLE: Create Virtual User with Privileges SQL\nDESCRIPTION: This SQL script creates a virtual user and grants them specific privileges, including vocabulary access.  It uses `admin_pack.CreateVirtualUser`, `admin_pack.GrantPrivilege`, and `admin_pack.GrantVocabularyAccess`. MANAGE_USER privilege is required.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/working/packages/admin_pack/readme.md#_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nDO $_$\nDECLARE\niUserID INT4;\nBEGIN\n\tSELECT admin_pack.CreateVirtualUser(\n\t\tpUserLogin       =>'dev_jdoe',\n\t\tpUserName        =>'John Doe',\n\t\tpUserDescription =>'Vocabulary Team',\n\t\tpPassWord        =>'password'\n\t) INTO iUserID;\n\n\t--grant MANAGE_SPECIFIC_VOCABULARY to dev_jdoe (can work only with specified vocabulary)\n\tPERFORM admin_pack.GrantPrivilege(\n\t\tpUserID          =>iUserID,\n\t\tpPrivilegeID     =>admin_pack.GetPrivilegeIDByName('MANAGE_SPECIFIC_VOCABULARY'),\n\t\tpValidStartDate  =>NULL, --access will be granted from the specified day, default CURRENT_DATE (can be omitted)\n\t\tpValidEndDate    =>NULL, --access will be granted until the specified expiration date, default 2099-12-31 (can be omitted)\n\t\tpIsBlocked       =>FALSE --you can create a blocked access, can be useful if you want to grant access in advance and then just unset the block flag via ModifyUserPrivilege(), can be omitted, default FALSE\n\t);\n\n\t--grant access only to CPT4 to dev_jdoe\n\tPERFORM admin_pack.GrantVocabularyAccess(\n\t\tpUserID          =>iUserID,\n\t\tpVocabulary_id   =>'CPT4',\n\t\tpValidStartDate  =>NULL, --access to the vocabulary will be granted from the specified day, default CURRENT_DATE (can be omitted)\n\t\tpValidEndDate    =>NULL, --access to the vocabulary will be granted until the specified expiration date, default 2099-12-31 (can be omitted)\n\t\tpIsBlocked       =>FALSE --you can create a blocked access, can be useful if you want to grant access in advance and then just unset the block flag via ModifyVocabularyAccess(), can be omitted, default FALSE\n\t);\nEND $_$;\n```\n\n----------------------------------------\n\nTITLE: Run Generic Update in SQL\nDESCRIPTION: This SQL block executes the GenericUpdate procedure within the devv5 schema. The GenericUpdate procedure is crucial for updating vocabulary data, and it assumes that the data has been loaded into the staging tables. This script is a part of the standard update process.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/CPT4/readme.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nDO $_$\nBEGIN\n\tPERFORM devv5.GenericUpdate();\nEND $_$;\n```\n\n----------------------------------------\n\nTITLE: Load ICD10 Input Tables in SQL\nDESCRIPTION: This SQL statement loads the ICD10 input tables into the database schema, specifying the vocabulary date and version. The 'sources.load_input_tables' function is used to load the ICD10 vocabulary with a specified date and release version. The date format is 'YYYYMMDD' and the release version is a string.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/ICD10/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT sources.load_input_tables('ICD10',TO_DATE('20161201','YYYYMMDD'),'2016 Release');\n```\n\n----------------------------------------\n\nTITLE: Run Generic Update SQL\nDESCRIPTION: This SQL statement executes the generic update procedure in the 'devv5' schema. This stored procedure performs the update process after the staging tables have been populated. It updates concept, concept_relationship and concept_synonym tables.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/OMOP Invest Drug/readme.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\ndevv5.GenericUpdate();\n```\n\n----------------------------------------\n\nTITLE: Running the Main Script\nDESCRIPTION: This SQL script (whole_script.sql) represents the main execution script that incorporates the processed AMIS data into the vocabulary database. It performs all necessary transformations, mappings, and insertions based on the loaded and concatenated data.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/AMIS/README.md#_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\n/* Placeholder for the actual SQL script content of whole_script.sql */\n-- INSERT INTO concept SELECT ...\n-- INSERT INTO concept_relationship SELECT ...\n\n```\n\n----------------------------------------\n\nTITLE: Load Stage SQL\nDESCRIPTION: This step runs the 'load_stage.sql' script. This script transforms and loads the data from the input tables into staging tables, preparing it for the final update of the concept, concept_relationship, and concept_synonym tables.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/EphMRA ATC/readme.md#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nload_stage.sql\n```\n\n----------------------------------------\n\nTITLE: Loading LOINC Input Tables (SQL)\nDESCRIPTION: This SQL statement uses the `sources.load_input_tables` function to load LOINC data into the designated input tables. It takes the source vocabulary ('LOINC'), the effective date ('20180615'), and the vocabulary version ('LOINC 2.64') as input parameters. This function is essential for staging the LOINC data for further processing.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/LOINC/readme.md#_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT sources.load_input_tables('LOINC',TO_DATE('20180615','YYYYMMDD'),'LOINC 2.64');\n```\n\n----------------------------------------\n\nTITLE: Schema Recreation in Postgres\nDESCRIPTION: This PL/pgSQL snippet recreates a schema named 'devv5' using the FastRecreateSchema function. It includes synonyms and deprecated relationships. The schema name is passed as a parameter.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/universal_load_stage/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nDO $$\nBEGIN\n\tPERFORM devv5.FastRecreateSchema(include_synonyms=>true,include_deprecated_rels=>true,main_schema_name=>'devv5');\nEND $$;\n```\n\n----------------------------------------\n\nTITLE: Build RxE SQL\nDESCRIPTION: This involves executing the `build_RxE.sql` script to construct RxE relationships within the vocabulary. After building RxE relationships, a generic update procedure is run to finalize the vocabulary update process.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/JMDC/readme.md#_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nbuild_RxE.sql\n```\n\nLANGUAGE: SQL\nCODE:\n```\ndevv5.GenericUpdate();\n```\n\n----------------------------------------\n\nTITLE: Check Stage Tables SQL\nDESCRIPTION: This SQL script checks the stage tables by executing the `check_stage_tables` function within the `qa_tests` schema. It expects the function to return NULL if the stage tables are correct, indicating no errors or inconsistencies.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/OPS/readme.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM qa_tests.check_stage_tables();\n```\n\n----------------------------------------\n\nTITLE: Load Stage SQL\nDESCRIPTION: This step executes the 'load_stage.sql' script, which likely transforms and loads the source data into staging tables within the DevV5 schema.  This staging process prepares the data for the final update operation.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/Indication/readme.md#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nRun load_stage.sql\n```\n\n----------------------------------------\n\nTITLE: SQL: create_source_tables.sql Execution\nDESCRIPTION: This step involves executing the create_source_tables.sql script against the DevV5 schema. The script is responsible for creating the necessary staging tables for the vocabulary loading process. It is crucial to ensure the DevV5 schema is properly configured with copies of the concept, concept_relationship, and concept_synonym tables from ProdV5, fully indexed before running this script.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/DA_France/readme.md#_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate_source_tables.sql\n```\n\n----------------------------------------\n\nTITLE: Recreate Schema with FastRecreateSchema\nDESCRIPTION: This SQL snippet uses the `FastRecreateSchema` function to create copies of the `concept`, `concept_relationship`, and `concept_synonym` tables within a specified working schema. It prepares the environment for the AMT vocabulary update process. The input parameter `main_schema_name` specifies the schema to be copied from.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/AMT/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT devv5.FastRecreateSchema(main_schema_name=>'devv5');\n```\n\n----------------------------------------\n\nTITLE: Load Input Tables Function Call SQL\nDESCRIPTION: This step calls the `sources.load_input_tables` function to load data into the specified tables. The function takes the source name, vocabulary date, and version as input parameters. This function imports external data into internal tables in the correct format for later use. The date is hardcoded as '20190816' and the version is set to 'Nebraska Lexicon 20190816'.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/Nebraska Lexicon/readme.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT sources.load_input_tables('Nebraska Lexicon',TO_DATE('20190816','YYYYMMDD'),'Nebraska Lexicon 20190816');\n```\n\n----------------------------------------\n\nTITLE: SQL Script Execution for Mapping Refresh\nDESCRIPTION: Executes the mapping_refresh.sql script. This script is responsible for creating the icd10cn_refresh table, which contains a list of potential replacement mappings and codes that lack mappings. The script is a crucial part of the vocabulary refresh process.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/ICD10CN/manual_work/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nN/A (See https://github.com/OHDSI/Vocabulary-v5.0/blob/icd10cm-documentation/ICD10CM/manual_work/mapping_refresh.sql)\n```\n\n----------------------------------------\n\nTITLE: QA Summary Retrieval for concept_relationship table\nDESCRIPTION: This SQL snippet retrieves a summary of the 'concept_relationship' table using the 'qa_tests.get_summary()' function. The DISTINCT keyword ensures only unique summary results are returned.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/HCPCS/readme.md#_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT DISTINCT * FROM qa_tests.get_summary('concept_relationship');\n```\n\n----------------------------------------\n\nTITLE: Recreate Schema DevV5 in SQL\nDESCRIPTION: This SQL query recreates the DevV5 schema. It includes concept ancestor, deprecated relationships and synonyms. This step is essential to have a clean environment for the update process.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/CPT4/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT devv5.FastRecreateSchema(main_schema_name=>'devv5', include_concept_ancestor=>true, include_deprecated_rels=>true, include_synonyms=>true);\n```\n\n----------------------------------------\n\nTITLE: Load Stage Tables SQL\nDESCRIPTION: This snippet refers to running the SQL script `load_stage.sql`.  This script is responsible for loading the data into the stage tables.  It depends on the source tables having been created and populated.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/COSMIC/readme.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nload_stage.sql\n```\n\n----------------------------------------\n\nTITLE: FastRecreateSchema SQL Command\nDESCRIPTION: This SQL command recreates the schema in devv5. It includes concept ancestor, deprecated relationships and synonyms.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/KCD7/readme.md#_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT devv5.FastRecreateSchema(main_schema_name=>'devv5', include_concept_ancestor=>false, include_deprecated_rels=>true, include_synonyms=>true);\n```\n\n----------------------------------------\n\nTITLE: Generic Update Execution - SQL\nDESCRIPTION: This PL/pgSQL block executes the GenericUpdate function within the devv5 schema.  This function is assumed to contain the core logic for updating the vocabulary data.  Requires the `devv5` schema and the `GenericUpdate` function to exist.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/CDISC/readme.md#_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nDO $_$\nBEGIN\n    PERFORM devv5.GenericUpdate();\nEND $_$;\n```\n\n----------------------------------------\n\nTITLE: Standard Concept Changes Statistics SQL\nDESCRIPTION: This SQL script retrieves statistics on changes to standard concepts by executing the `get_standard_concept_changes` function within the `qa_tests` schema. The results provide insights into modifications made to standard concept classifications.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/OPS/readme.md#_snippet_8\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM qa_tests.get_standard_concept_changes();\n```\n\n----------------------------------------\n\nTITLE: Build RxE SQL and Generic Update SQL\nDESCRIPTION: These SQL scripts, `Build_RxE.sql` and `generic_update.sql`, are executed after the staging tables are loaded. They perform data transformations and updates to populate or modify RxE-related concepts and other generic updates based on the loaded GRR data. These scripts are located in the working directory, typically `dev_grr`.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/GRR/readme.md#_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nBuild_RxE.sql\n```\n\nLANGUAGE: SQL\nCODE:\n```\ngeneric_update.sql\n```\n\n----------------------------------------\n\nTITLE: Load Input Tables - SQL\nDESCRIPTION: This SQL statement loads the input tables for the SOPT vocabulary into the development environment (devv5). It specifies the vocabulary name ('SOPT'), the vocabulary date (December 11, 2020), and the vocabulary version ('SOPT Version 9.2').\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/SOPT/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT sources.load_input_tables('SOPT',TO_DATE('20201211','YYYYMMDD'),'SOPT Version 9.2');\n```\n\n----------------------------------------\n\nTITLE: Load Stage SQL Script\nDESCRIPTION: This step involves running the `load_stage.sql` script. The `pVocabularyDate` parameter will be automatically retrieved from the UMLS `SOURCES.MRSMAP.vocabulary_date` table.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/MeSH/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nload_stage.sql\n```\n\n----------------------------------------\n\nTITLE: Newly Introduced Concepts (SQL)\nDESCRIPTION: This SQL query retrieves a list of newly introduced concepts using the `qa_tests.get_newly_concepts()` function. It helps identify concepts that were not present in the previous version of the vocabulary but have been added in the current update.  This query is critical for understanding the growth and evolution of the vocabulary over time.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/LOINC/readme.md#_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM qa_tests.get_newly_concepts();\n```\n\n----------------------------------------\n\nTITLE: Create Google Pack Schema SQL\nDESCRIPTION: This SQL script creates the `google_pack` schema with authorization for the `devv5` user. It then grants usage privileges on the schema to the `role_read_only` role. This schema will contain the functions for interacting with Google Sheets/Drive.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/working/packages/google_pack/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE SCHEMA google_pack AUTHORIZATION devv5;\nGRANT USAGE ON SCHEMA google_pack TO role_read_only;\n```\n\n----------------------------------------\n\nTITLE: Translate Text using Google Translate SQL\nDESCRIPTION: This SQL script demonstrates the use of the `google_pack.GTranslate` function to translate text within a database table. It takes the input table name, the input field containing the text to translate, the output field to store the translated text, the destination language, and the source language as parameters. The source language can be set to 'auto' for automatic detection.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/working/packages/google_pack/readme.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nDO $_$\nBEGIN\n\tPERFORM google_pack.GTranslate(\n\t\tpInputTable    =>'input_table', --the name of the input table with untranslated strings\n\t\tpInputField    =>'field_with_foreign_names', --the name of the field in that table containing the input rows\n\t\tpOutputField   =>'field_with_translated_names', --the name of the field in that table where to put the translation\n\t\tpDestLang      =>'en' --the language to translate the source text into (The value should be one of the language codes listed in https://py-googletrans.readthedocs.io/en/latest/#googletrans-languages (optional, default 'en'))\n\t\tpSrcLang       =>'auto' --the language of the source text (The value should be one of the language codes listed in https://py-googletrans.readthedocs.io/en/latest/#googletrans-languages (optional, if not specified, the system will attempt to identify the source language automatically, default 'auto'))\n\t);\nEND $_$;\n```\n\n----------------------------------------\n\nTITLE: Standard Concept Changes Statistics Retrieval\nDESCRIPTION: This SQL snippet retrieves statistics about changes to standard concepts using the 'qa_tests.get_standard_concept_changes()' function. The DISTINCT keyword ensures only unique standard concept change results are returned.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/HCPCS/readme.md#_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT DISTINCT * FROM qa_tests.get_standard_concept_changes();\n```\n\n----------------------------------------\n\nTITLE: QA Summary Retrieval for concept table\nDESCRIPTION: This SQL snippet retrieves a summary of the 'concept' table using the 'qa_tests.get_summary()' function. The DISTINCT keyword ensures only unique summary results are returned.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/HCPCS/readme.md#_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT DISTINCT * FROM qa_tests.get_summary('concept');\n```\n\n----------------------------------------\n\nTITLE: Generic Update Procedure\nDESCRIPTION: This step involves running the `devv5.GenericUpdate()` procedure. This stored procedure is presumed to handle the core logic of updating the vocabulary tables based on the data in the staging tables.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/NFC/readme.md#_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\ndevv5.GenericUpdate();\n```\n\n----------------------------------------\n\nTITLE: Domain Changes Statistics SQL\nDESCRIPTION: This SQL script retrieves statistics on domain changes by executing the `get_domain_changes` function within the `qa_tests` schema. The results provide insights into the modifications made to domains during the update process.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/OPS/readme.md#_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM qa_tests.get_domain_changes();\n```\n\n----------------------------------------\n\nTITLE: Load Input Tables SQL\nDESCRIPTION: Loads SNOMED data into input tables. This step uses a stored procedure to load the data, specifying the source ('SNOMED'), the vocabulary date, and a release version.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/SNOMED/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT sources.load_input_tables('SNOMED',TO_DATE('20180131','YYYYMMDD'),'Snomed Release 20180131');\n```\n\n----------------------------------------\n\nTITLE: Newly Concepts SQL\nDESCRIPTION: This SQL query retrieves newly introduced concepts using the `get_newly_concepts` function in the `qa_tests` schema. This helps to identify newly added concepts in the updated vocabulary.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/SNOMED Veterinary/readme.md#_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT DISTINCT * FROM qa_tests.get_newly_concepts();\n```\n\n----------------------------------------\n\nTITLE: Fast Recreate Schema - SQL\nDESCRIPTION: This SQL statement executes the FastRecreateSchema procedure to recreate the schema, including concept ancestor, deprecated relationships, and synonyms.  It is called as part of the ICD10CM vocabulary upload process.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/ICD10CM/readme.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT devv5.FastRecreateSchema(main_schema_name=>'devv5', include_concept_ancestor=>false, include_deprecated_rels=>true, include_synonyms=>true);\n```\n\n----------------------------------------\n\nTITLE: Basic Tables Check (SQL)\nDESCRIPTION: This SQL query selects all rows from the result of the `get_checks` function in the `qa_tests` schema. It's intended to perform a basic check on the tables after an update, and ideally, should return NULL if the checks pass.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/ICD10PCS/readme.md#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\n   SELECT * FROM qa_tests.get_checks();\n```\n\n----------------------------------------\n\nTITLE: FastRecreateSchema Execution SQL\nDESCRIPTION: This SQL statement executes the FastRecreateSchema procedure within the devv5 schema.  It includes the concept_ancestor, deprecated relationships, and synonyms. Requires the DevV5 schema to be setup with copies of the concept, concept_relationship, and concept_synonym tables from ProdV5.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/HemOnc/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT devv5.FastRecreateSchema(main_schema_name=>'devv5', include_concept_ancestor=> true, include_deprecated_rels=> true, include_synonyms=> true);\n```\n\n----------------------------------------\n\nTITLE: Changes in Concept Mapping Statistics Retrieval\nDESCRIPTION: This SQL snippet retrieves statistics about changes in concept mapping using the 'qa_tests.get_changes_concept_mapping()' function. The DISTINCT keyword ensures only unique mapping change results are returned.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/HCPCS/readme.md#_snippet_9\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT DISTINCT * FROM qa_tests.get_changes_concept_mapping();\n```\n\n----------------------------------------\n\nTITLE: Newly Concepts Statistics SQL\nDESCRIPTION: This SQL script retrieves statistics on newly added concepts by executing the `get_newly_concepts` function within the `qa_tests` schema. The results provide insights into the number and characteristics of newly introduced concepts.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/OPS/readme.md#_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM qa_tests.get_newly_concepts();\n```\n\n----------------------------------------\n\nTITLE: Generic Update Execution SQL\nDESCRIPTION: This SQL script executes the generic update process for the ICD9Proc vocabulary. It is a database procedure that updates the vocabulary tables with the new data.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/ICD9Proc/readme.md#_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\n6. Run generic_update: devv5.GenericUpdate();\n```\n\n----------------------------------------\n\nTITLE: Get Domain Changes (SQL)\nDESCRIPTION: This SQL query retrieves a distinct set of records from the result of the `get_domain_changes` function in the `qa_tests` schema for the 'devv5' schema.  It identifies changes in domains within the vocabulary.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/ICD10PCS/readme.md#_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\n    SELECT DISTINCT * FROM qa_tests.get_domain_changes('devv5');\n```\n\n----------------------------------------\n\nTITLE: Execute Generic Update\nDESCRIPTION: This step executes the generic update procedure, which updates the vocabulary data based on the loaded staging data. The procedure `devv5.GenericUpdate()` is called to perform the update within the `devv5` schema.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/CDT/readme.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\ndevv5.GenericUpdate();\n```\n\n----------------------------------------\n\nTITLE: Concept Summary Check SQL\nDESCRIPTION: This SQL statement executes the get_summary function within the qa_tests schema for the 'concept' table. Requires the qa_tests.get_summary() function to be defined. The results should be interpreted to assess the health of the concept table.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/HemOnc/readme.md#_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM qa_tests.get_summary('concept');\n```\n\n----------------------------------------\n\nTITLE: Fast Schema Recreation SQL\nDESCRIPTION: This SQL script recreates the schema with specified parameters like including concept ancestor, deprecated relationships, and synonyms. It requires the `devv5` schema to exist and implements the `FastRecreateSchema` function.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/OPS/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT devv5.FastRecreateSchema(main_schema_name=>'devv5', include_concept_ancestor=> false,\n                                include_deprecated_rels=> true, include_synonyms=> true);\n```\n\n----------------------------------------\n\nTITLE: New Concepts with Standard Concept Status Statistics Retrieval\nDESCRIPTION: This SQL snippet retrieves statistics about new concepts and their standard concept status using the 'qa_tests.get_newly_concepts_standard_concept_status()' function. The DISTINCT keyword ensures only unique status results are returned.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/HCPCS/readme.md#_snippet_8\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT DISTINCT * FROM qa_tests.get_newly_concepts_standard_concept_status();\n```\n\n----------------------------------------\n\nTITLE: Getting Domain Changes\nDESCRIPTION: This SQL statement retrieves information about domain changes by querying the qa_tests.get_domain_changes() function. This is part of quality assurance after a vocabulary update.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/CVX/readme.md#_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM qa_tests.get_domain_changes();\n```\n\n----------------------------------------\n\nTITLE: Get Concept Relationship Summary\nDESCRIPTION: This SQL script retrieves a summary of the 'concept_relationship' table from the qa_tests schema. The results should be interpreted to understand the state of the vocabulary.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/EORTC/readme.md#_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM qa_tests.get_summary('concept_relationship');\n```\n\n----------------------------------------\n\nTITLE: Run GenericUpdate in SQL\nDESCRIPTION: This SQL statement executes the GenericUpdate function. The GenericUpdate function performs a generic update on the database.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/ICD10/readme.md#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT devv5.GenericUpdate();\n```\n\n----------------------------------------\n\nTITLE: Run Generic Update (SQL)\nDESCRIPTION: Executes the `GenericUpdate` function to finalize the GGR vocabulary update process. This function performs the necessary steps to integrate the updated GGR data into the main vocabulary tables within the DevV5 schema.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/GGR/readme.md#_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\n7. Run generic_update: devv5.GenericUpdate();\n```\n\n----------------------------------------\n\nTITLE: Run Fixes Script (SQL)\nDESCRIPTION: Executes the fixes.sql script to apply specific data fixes based on the dsfix table created during the manual review process. This script corrects any identified errors or inconsistencies in the GGR data.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/GGR/readme.md#_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nUpload dsfix.csv and run fixes.sql\n```\n\n----------------------------------------\n\nTITLE: Executing Generic Update Procedure in PostgreSQL\nDESCRIPTION: This step executes the `GenericUpdate` stored procedure within the `devv5` schema. This procedure is expected to handle the actual update of the VANDF and VA Class vocabularies based on the data loaded in the previous step. It's a database-specific execution, in this case, assuming PostgreSQL.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/VANDF/readme.md#_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ndevv5.GenericUpdate();\n```\n\n----------------------------------------\n\nTITLE: Concept Relationship Manual Post-Proc SQL\nDESCRIPTION: This SQL script, `concept_relationship_manual_post_proc.sql`, performs post-processing steps on the `concept_relationship_manual` table, likely to refine or correct relationships added manually.  It is part of the GRR vocabulary update process.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/GRR/readme.md#_snippet_8\n\nLANGUAGE: SQL\nCODE:\n```\nconcept_relationship_manual_post_proc.sql\n```\n\n----------------------------------------\n\nTITLE: Fast Recreate Schema SQL\nDESCRIPTION: The `fast_recreate_schema.sql` script is used before updating the GRR vocabulary.  It likely involves quickly recreating the schema to a known state, potentially dropping and re-creating tables or using other schema manipulation techniques to prepare for the update.  This script is located in the working directory.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/GRR/readme.md#_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nfast_recreate_schema.sql\n```\n\n----------------------------------------\n\nTITLE: Run Basic Tables Check in SQL\nDESCRIPTION: This SQL query retrieves the results of quality assurance checks from the qa_tests.get_checks() function.  The query is intended to identify any data integrity issues or inconsistencies in the core vocabulary tables after the update process.  An expected output of NULL indicates successful checks.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/CPT4/readme.md#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM qa_tests.get_checks();\n```\n\n----------------------------------------\n\nTITLE: Getting Standard Concept Changes\nDESCRIPTION: This SQL statement retrieves information about changes to the standard concept status by querying the qa_tests.get_standard_concept_changes() function. This is part of quality assurance after a vocabulary update.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/CVX/readme.md#_snippet_9\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM qa_tests.get_standard_concept_changes();\n```\n\n----------------------------------------\n\nTITLE: Running Generic Update in DevV5 Schema\nDESCRIPTION: This SQL snippet executes the GenericUpdate procedure within the DevV5 schema.  It is the final step in the EDI vocabulary update process.  It assumes that the previous SQL scripts (create_source_tables.sql, edi_refresh.sql, load_stage.sql) have already been executed.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/EDI/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\ndevv5.GenericUpdate();\n```\n\n----------------------------------------\n\nTITLE: Run Auto Initialization (SQL)\nDESCRIPTION: Executes the auto_init.sql script to perform initial data processing and mapping of the GGR vocabulary. This step prepares the data for manual review and further processing.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/GGR/readme.md#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\n4. Run auto_init.sql.\n```\n\n----------------------------------------\n\nTITLE: Run Generic Update Procedure\nDESCRIPTION: This snippet refers to executing the stored procedure `devv5.GenericUpdate()`. This procedure is responsible for applying the updates to the vocabulary based on the data loaded into the stage tables. It should be executed after the staging tables have been loaded.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/COSMIC/readme.md#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\ndevv5.GenericUpdate()\n```\n\n----------------------------------------\n\nTITLE: Getting Newly Concepts Standard Concept Status\nDESCRIPTION: This SQL statement retrieves information about the standard concept status of newly created concepts, querying the qa_tests.get_newly_concepts_standard_concept_status() function. This is used in the quality assurance process after a vocabulary update.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/CVX/readme.md#_snippet_10\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM qa_tests.get_newly_concepts_standard_concept_status();\n```\n\n----------------------------------------\n\nTITLE: Load Stage SQL\nDESCRIPTION: Executes the SQL script load_stage.sql to load data into staging tables. This step prepares the data for the generic update process.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/CCAM/readme.md#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nload_stage.sql\n```\n\n----------------------------------------\n\nTITLE: Generic Update (SQL)\nDESCRIPTION: This SQL snippet executes a generic update of the vocabulary using the `devv5.GenericUpdate` function. It's used to apply updates and changes to the vocabulary data within the devv5 schema.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/CIM10/readme.md#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT devv5.GenericUpdate();\n```\n\n----------------------------------------\n\nTITLE: Fast Recreate Schema SQL\nDESCRIPTION: This SQL statement executes the `FastRecreateSchema` function in the `devv5` schema. It rebuilds the schema, including concept ancestor tables, deprecated relationships, and synonyms. This step is necessary to reflect changes in the SNOMED Veterinary vocabulary.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/SNOMED Veterinary/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT devv5.FastRecreateSchema(main_schema_name=>'devv5', include_concept_ancestor=> true, include_deprecated_rels=> true, include_synonyms=> true);\n```\n\n----------------------------------------\n\nTITLE: Load Stage 1 SQL\nDESCRIPTION: This script, `load_stage_1.sql`, processes the uploaded source file and prepares the data for further mapping and vocabulary integration. Before running this script, new packs must be manually identified and added to the `aut_pc_stage` table.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/JMDC/readme.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nload_stage_1.sql\n```\n\n----------------------------------------\n\nTITLE: Concept Relationship Summary Check SQL\nDESCRIPTION: This SQL statement executes the get_summary function within the qa_tests schema for the 'concept_relationship' table. Requires the qa_tests.get_summary() function to be defined. The results should be interpreted to assess the health of the concept_relationship table.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/HemOnc/readme.md#_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM qa_tests.get_summary('concept_relationship');\n```\n\n----------------------------------------\n\nTITLE: Getting Newly Concepts\nDESCRIPTION: This SQL statement retrieves information about newly created concepts by querying the qa_tests.get_newly_concepts() function. This is part of quality assurance after a vocabulary update.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/CVX/readme.md#_snippet_8\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM qa_tests.get_newly_concepts();\n```\n\n----------------------------------------\n\nTITLE: Load Stage SQL\nDESCRIPTION: This step loads data into the staging tables using the load_stage.sql script. This prepares the data for further processing.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/GPI/readme.md#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nRun load_stage.sql\n```\n\n----------------------------------------\n\nTITLE: Retrieve Google Sheet Content by ID SQL\nDESCRIPTION: This SQL script retrieves the contents of a specific sheet from a Google spreadsheet using the `google_pack.GetSpreadSheetByID` function. It requires the spreadsheet ID, the sheet title, and the number of rows to skip (e.g., for a header row). The script defines the output data types and column names to match the structure of the Google Sheet.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/working/packages/google_pack/readme.md#_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM google_pack.GetSpreadSheetByID('1URpwjK...','concept_synonym_manual',1) --specify spreadsheet_id, list title and the number of rows to skip (e.g. for header)\nAS (\n\t--since the number of columns and their type are unknown in advance, you need to specify this as the output type manually. The field names must match the column names in the sheet\n\tworksheet_row_id INT4,\n\tsynonym_name TEXT,\n\tconcept_code TEXT,\n\tvocabulary_id TEXT,\n\tlanguage_concept_id TEXT\n);\n```\n\n----------------------------------------\n\nTITLE: Extracting concept_manual table data\nDESCRIPTION: This SQL query extracts data from the concept_manual table and orders it for generating the CSV file. The resulting CSV should be used to manually populate the concept_manual table after extraction.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/OMOP Extension/manual_work/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT concept_name,\n       domain_id,\n       vocabulary_id,\n       concept_class_id,\n       standard_concept,\n       concept_code,\n       valid_start_date,\n       valid_end_date,\n       invalid_reason\nFROM concept_manual\nORDER BY vocabulary_id, concept_code, invalid_reason, valid_start_date, valid_end_date, concept_name\n```\n\n----------------------------------------\n\nTITLE: Generic Update Execution\nDESCRIPTION: This PL/pgSQL block executes a stored procedure called GenericUpdate within the devv5 schema. This procedure performs the core update logic for the vocabulary.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/CVX/readme.md#_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nDO $_$\nBEGIN\n\tPERFORM devv5.GenericUpdate();\nEND $_$;\n```\n\n----------------------------------------\n\nTITLE: Creating Source Tables SQL\nDESCRIPTION: This step involves running the `create_source_tables.sql` script. The script is responsible for creating the necessary source tables in the database environment. These tables will store the data extracted from the downloaded files.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/DPD/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\ncreate_source_tables.sql\n```\n\n----------------------------------------\n\nTITLE: Get Newly Concepts Standard Concept Status\nDESCRIPTION: This SQL script retrieves newly created concepts standard concept status using qa_tests.get_newly_concepts_standard_concept_status(). The results should be interpreted to understand standard concept status assigned to newly created concepts.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/EORTC/readme.md#_snippet_8\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM qa_tests.get_newly_concepts_standard_concept_status();\n```\n\n----------------------------------------\n\nTITLE: Modify Virtual User SQL\nDESCRIPTION: This SQL script modifies an existing virtual user's attributes such as login, name, description, password, and block status using the `admin_pack.ModifyVirtualUser` function. MANAGE_USER privilege is required.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/working/packages/admin_pack/readme.md#_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nDO $_$\nBEGIN\n\tPERFORM admin_pack.ModifyVirtualUser(\n\t\tpUserID           =>admin_pack.GetUserIDByLogin('dev_jdoe'), --user's virtual login\n\t\tpUserLogin        =>NULL, --set NULL if you don't want to change the user's login\n\t\tpUserName         =>NULL, --set NULL if you don't want to change the user's name\n\t\tpUserDescription  =>NULL, --set NULL if you don't want to change the user's description\n\t\tpPassWord         =>NULL, --set NULL if you don't want to change the user's password\n\t\tpEmail            =>NULL, --set NULL if you don't want to change the user's e-mail\n\t\tpValidStartDate   =>NULL, --set NULL if you don't want to change the start date\n\t\tpValidEndDate     =>NULL, --set NULL if you don't want to change the end date\n\t\tpIsBlocked        =>TRUE --just block the specified user\n\t);\nEND $_$;\n```\n\n----------------------------------------\n\nTITLE: Extracting data into drop_maps_to table using SQL\nDESCRIPTION: This SQL query is used to generate the CSV file that will be extracted into the `ned_adm_r` table. It selects `source_code_atc`, and `source_code_rx` columns from the `drop_maps_to` table.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/ATC/manual work/readme.md#_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \n    source_code_atc,\n    source_code_rx\nFROM drop_maps_to\n```\n\n----------------------------------------\n\nTITLE: Fast Schema Re-creation\nDESCRIPTION: This SQL statement executes a stored procedure to quickly recreate the schema.  It takes parameters to control which elements of the schema are included (concept ancestor, deprecated relationships, and synonyms). It recreates the schema named 'devv5'.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/CVX/readme.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT devv5.FastRecreateSchema(main_schema_name=>'devv5', include_concept_ancestor=> false,\n                                include_deprecated_rels=> true, include_synonyms=> true);\n```\n\n----------------------------------------\n\nTITLE: FastRecreateSchema - SQL\nDESCRIPTION: This SQL statement executes the `FastRecreateSchema` function within the `devv5` schema. It rebuilds the vocabulary schema, excluding concept_ancestor, including deprecated relationships, and including synonyms.  This procedure is part of the vocabulary update process.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/ICD10GM/readme.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT devv5.FastRecreateSchema(main_schema_name=>'devv5', include_concept_ancestor=>false, include_deprecated_rels=>true, include_synonyms=>true);\n```\n\n----------------------------------------\n\nTITLE: View User Logs SQL\nDESCRIPTION: This SQL query retrieves detailed logs for a specific user using the `admin_pack.GetLogByUserID` function. It limits the results to the most recent 100 logs and converts the timestamp to 'MSK' timezone. VIEW_LOGS privilege is required.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/working/packages/admin_pack/readme.md#_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\nSELECT log_id,\n\ttable_name,\n\ttx_time AT TIME ZONE 'MSK' AS tx_time,\n\ttg_operation,\n\tuser_login,\n\twhom_user_login,\n\tprivilege_name,\n\tvocabulary_id,\n\ttg_result,\n\tscript_name,\n\ttx_id\nFROM admin_pack.GetLogByUserID(admin_pack.GetUserIDByLogin('dev_jdoe'))\nORDER BY log_id DESC\nLIMIT 100;\n```\n\n----------------------------------------\n\nTITLE: Create Source Tables SQL\nDESCRIPTION: This snippet refers to running the SQL script `create_source_tables.sql`.  This script is responsible for creating the necessary source tables required for the vocabulary update process. It is a prerequisite to loading the data into these tables.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/COSMIC/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\ncreate_source_tables.sql\n```\n\n----------------------------------------\n\nTITLE: Generating concept_relationship_manual CSV file using SQL\nDESCRIPTION: This SQL query generates the CSV file for the concept_relationship_manual table. It selects specific columns from the concept_relationship_manual table and orders the results by vocabulary_id_1, vocabulary_id_2, relationship_id, concept_code_1, concept_code_2, invalid_reason, valid_start_date, and valid_end_date. The result is exported as CSV file with a specified format as described in the text.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/CPT4/manual work/readme.md#_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT concept_code_1,\n       concept_code_2,\n       vocabulary_id_1,\n       vocabulary_id_2,\n       relationship_id,\n       valid_start_date,\n       valid_end_date,\n       invalid_reason\nFROM concept_relationship_manual\nORDER BY vocabulary_id_1, vocabulary_id_2, relationship_id, concept_code_1, concept_code_2, invalid_reason, valid_start_date, valid_end_date\n```\n\n----------------------------------------\n\nTITLE: Extract Concept Relationship Manual Data SQL\nDESCRIPTION: This SQL query extracts data from the `concept_relationship_manual` table to generate a CSV file for manual staging of concept relationships. The query selects relationship-related columns and orders the result set by relevant identifiers and dates. This step is essential for managing relationships manually during the vocabulary refresh process.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/Read/manual_work/readme.md#_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT concept_code_1,\n       concept_code_2,\n       vocabulary_id_1,\n       vocabulary_id_2,\n       relationship_id,\n       valid_start_date,\n       valid_end_date,\n       invalid_reason\nFROM concept_relationship_manual\nORDER BY vocabulary_id_1, vocabulary_id_2, relationship_id, concept_code_1, concept_code_2, invalid_reason, valid_start_date, valid_end_date;\n```\n\n----------------------------------------\n\nTITLE: Load Input Tables SQL\nDESCRIPTION: This step involves executing a SQL query to load input tables in the `devv5` schema. The function `sources.load_input_tables` is called with parameters for vocabulary ID ('NFC'), vocabulary date ('20160704'), and vocabulary version ('NFC 20160704').\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/NFC/readme.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT sources.load_input_tables('NFC',TO_DATE('20160704','YYYYMMDD'),'NFC 20160704');\n```\n\n----------------------------------------\n\nTITLE: Domain Changes SQL\nDESCRIPTION: This SQL query retrieves domain changes using the `get_domain_changes` function in the `qa_tests` schema. This is used to identify how the update affects the domain classifications of concepts.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/SNOMED Veterinary/readme.md#_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT DISTINCT * FROM qa_tests.get_domain_changes();\n```\n\n----------------------------------------\n\nTITLE: Load META Input Tables SQL\nDESCRIPTION: This SQL statement loads the unpacked META data into the corresponding input tables within the database.  It takes the source name ('META'), a vocabulary date ('202402'), and a vocabulary version ('META 202402') as input parameters.  This step assumes a 'sources' schema exists and the `load_input_tables` function is defined.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/META/readme.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT sources.load_input_tables('META',TO_DATE('202402','YYYYMMDD'),'META 202402');\n```\n\n----------------------------------------\n\nTITLE: Generic Update Procedure SQL\nDESCRIPTION: This SQL script executes the `GenericUpdate` stored procedure within the `devv5` schema. It is wrapped in a `DO` block to allow for procedural execution and error handling. This procedure updates the vocabulary data.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/OPS/readme.md#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nDO $_$\nBEGIN\n\tPERFORM devv5.GenericUpdate();\nEND $_$;\n```\n\n----------------------------------------\n\nTITLE: Loading ICD9CM source tables\nDESCRIPTION: This SQL command loads input tables for ICD9CM vocabulary update into the devv5 schema. It specifies the vocabulary name ('ICD9CM'), the vocabulary date ('20141001'), and the version ('ICD9CM v32 master descriptions'). This command relies on the `sources.load_input_tables` function, which is responsible for handling the data loading process.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/ICD9CM/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT sources.load_input_tables('ICD9CM',TO_DATE('20141001','YYYYMMDD'),'ICD9CM v32 master descriptions');\n```\n\n----------------------------------------\n\nTITLE: Standard Concept Changes Statistics SQL\nDESCRIPTION: This SQL statement executes the get_standard_concept_changes function within the qa_tests schema. Requires the qa_tests.get_standard_concept_changes() function to be defined. The results should be interpreted to analyze changes in standard concept status.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/HemOnc/readme.md#_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM qa_tests.get_standard_concept_changes();\n```\n\n----------------------------------------\n\nTITLE: Extract concept_relationship_manual Data using SQL\nDESCRIPTION: This SQL query extracts data from the concept_relationship_manual table. It retrieves concept relationship information, including concept_code_1, concept_code_2, vocabulary_id_1, vocabulary_id_2, relationship_id, valid_start_date, valid_end_date, and invalid_reason. The extracted results are ordered by vocabulary_id_1, vocabulary_id_2, relationship_id, concept_code_1, concept_code_2, invalid_reason, valid_start_date, and valid_end_date.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/CVX/manual_work/readme.md#_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT concept_code_1,\n       concept_code_2,\n       vocabulary_id_1,\n       vocabulary_id_2,\n       relationship_id,\n       valid_start_date,\n       valid_end_date,\n       invalid_reason\nFROM concept_relationship_manual\nORDER BY vocabulary_id_1, vocabulary_id_2, relationship_id, concept_code_1, concept_code_2, invalid_reason, valid_start_date, valid_end_date\n```\n\n----------------------------------------\n\nTITLE: Extracting data for concept_manual\nDESCRIPTION: This SQL query extracts data from the concept_manual table and orders it for generating a CSV file, intended for manual review and subsequent upload during the vocabulary refresh process. The columns selected include concept metadata and ordering is done by vocabulary_id, concept_code, invalid_reason, valid_start_date, valid_end_date, and concept_name to maintain consistency.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/HCPCS/manual work/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT concept_name,\n       domain_id,\n       vocabulary_id,\n       concept_class_id,\n       standard_concept,\n       concept_code,\n       valid_start_date,\n       valid_end_date,\n       invalid_reason\nFROM concept_manual\nORDER BY vocabulary_id, concept_code, invalid_reason, valid_start_date, valid_end_date, concept_name\n```\n\n----------------------------------------\n\nTITLE: Concept Class Lookup Update - SQL\nDESCRIPTION: This SQL query identifies distinct semantic attributes from the CDISC metathesaurus and provides a structure suitable for updating the concept_class_lookup table. It retrieves the 'sty' attribute from the UMLS meta tables, using the 'CDISC' source.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/CDISC/readme.md#_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT DISTINCT st.sty as attribute,\n       NULL::varchar as concept_class_id,\n       domain_id::varchar\nFROM  sources.meta_mrconso s\nJOIN  sources.meta_mrsty st \n   ON s.cui = st.cui\nWHERE s.sab='CDISC'\n```\n\n----------------------------------------\n\nTITLE: Change Password SQL\nDESCRIPTION: This SQL statement is used to change the password for a virtual session. The virtual session will be invalidated after changing the password.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/working/packages/admin_pack/readme.md#_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT admin_pack.ChangeOwnPassword ('old_password','new_password');\n```\n\n----------------------------------------\n\nTITLE: Fast Recreate Schema in devv5\nDESCRIPTION: This SQL statement executes a fast schema recreation within the 'devv5' schema.  It leverages the `FastRecreateSchema` procedure to rebuild the schema quickly, omitting the concept_ancestor table filling but including deprecated relationships and synonyms.  This optimizes the process for development and testing by recreating the schema with recent data and relationships, useful during development cycles.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/Read/readme.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT devv5.FastRecreateSchema(main_schema_name=>'devv5', include_concept_ancestor=>false, include_deprecated_rels=>true, include_synonyms=>true);\n```\n\n----------------------------------------\n\nTITLE: Integrating data into ICD common data environment (ICD_CDE_source.sql)\nDESCRIPTION: The ICD_CDE_source.sql script is executed to integrate data into a common data environment specific to ICD. This step prepares the data for manual review and facilitates the process of creating accurate mappings. The details of the data integration are handled by the SQL script.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/KCD7/manual_work/readme.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nN/A - The specific SQL code for ICD_CDE_source.sql is not directly provided in the text.\n```\n\n----------------------------------------\n\nTITLE: Load ICD10GM Input Tables (SQL)\nDESCRIPTION: This SQL snippet loads the input tables for the ICD10GM vocabulary with a specified vocabulary date and version. It calls the `sources.load_input_tables` function.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/CIM10/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT sources.load_input_tables('ICD10GM',TO_DATE('20200101','YYYYMMDD'),'2020 Release');\n```\n\n----------------------------------------\n\nTITLE: Loading READ Vocabulary\nDESCRIPTION: This SQL statement initiates the process of loading the READ vocabulary into the database. It specifies the source vocabulary ('READ'), the vocabulary date ('20180403'), and the version string including NHS READV2 version and the date of data migration. This function `sources.load_input_tables` loads the data into staging tables for further processing. The function assumes existence and appropriate permissions to write in sources schema.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/Read/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT sources.load_input_tables('READ',TO_DATE('20180403','YYYYMMDD'),'NHS READV2 21.0.0 20160401000001 + DATAMIGRATION_25.0.0_20180403000001');\n```\n\n----------------------------------------\n\nTITLE: Query Log by Transaction ID in SQL\nDESCRIPTION: This SQL query retrieves the history of changes for a specific transaction ID from the `audit.GetLogByID()` function.  It displays the log ID, table name, transaction time, operation time, operation type, the result, the script name, and the transaction ID for all changes made during the specified transaction. The results are ordered by log ID in descending order and limited to the top 100 entries.  The `iTransactionID` parameter defines the transaction ID to filter by.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/working/packages/audit_pack/readme.md#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT log_id,\n\ttable_name,\n\ttx_time AT TIME ZONE 'MSK' AS tx_time,\n\top_time AT TIME ZONE 'MSK' AS op_time,\n\ttg_operation,\n\ttg_result,\n\tscript_name,\n\ttx_id\nFROM audit.GetLogByID (iTransactionID=>37877090)\nORDER BY log_id DESC\nLIMIT 100;\n```\n\n----------------------------------------\n\nTITLE: Run After Medical Coder Processing (SQL)\nDESCRIPTION: Executes the after_mm.sql script to perform post-processing steps after the manual review by the medical coder. This script likely handles data cleanup and validation based on the medical coder's input.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/GGR/readme.md#_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\n6. Run after_mm.sql\n```\n\n----------------------------------------\n\nTITLE: Virtual Login SQL\nDESCRIPTION: This SQL statement is used to initiate a virtual login session, requiring a username and password for authorization before making changes to manual concepts or relationships.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/working/packages/admin_pack/readme.md#_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT admin_pack.VirtualLogIn('login','password');\n```\n\n----------------------------------------\n\nTITLE: Creating Manual Tables in SQL\nDESCRIPTION: This SQL script creates the necessary tables for manual data processing within the vocabulary project. It's executed after downloading the source file and before extracting the CSV data.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/NCCD/manual_work/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nRun create_manual_tables.sql\n```\n\n----------------------------------------\n\nTITLE: Load Input Tables SQL\nDESCRIPTION: This SQL statement executes the `load_input_tables` function to load the CAP vocabulary data into the staging tables. It specifies the source vocabulary ('CAP'), the vocabulary date ('20200226'), and the version of the CAP release ('CAP eCC release 20200226').\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/CAP/readme.md#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT sources.load_input_tables('CAP',TO_DATE('20200226','YYYYMMDD'),'CAP eCC release 20200226');\n```\n\n----------------------------------------\n\nTITLE: Get Standard Concept Changes in SQL\nDESCRIPTION: This SQL query retrieves changes in standard concept status using the get_standard_concept_changes() function from the qa_tests schema. This is used to identify concepts that changed their Standard Concept flag during the vocabulary update process. The results need to be interpreted to understand the impact of changes.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/CPT4/readme.md#_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM qa_tests.get_standard_concept_changes();\n```\n\n----------------------------------------\n\nTITLE: Query Updated Vocabularies Since Last Release in SQL\nDESCRIPTION: This SQL query identifies the vocabularies that have been updated since the last release by comparing their transaction times to the `StartRelease` event in the audit log. It retrieves the maximum transaction time and affected vocabularies for each vocabulary updated after the latest release.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/working/packages/audit_pack/readme.md#_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT MAX(tx_time) AS tx_time,\n\ts0.affected_vocabs\nFROM (\n\tSELECT log_id,\n\t\ttx_time AT TIME ZONE 'MSK' AS tx_time,\n\t\taffected_vocabs,\n\t\tMAX(log_id) FILTER(WHERE script_name = 'StartRelease') OVER () latest_release_id\n\tFROM audit.GetLogSummary()\n\t) s0\nWHERE s0.log_id > s0.latest_release_id\n\tAND s0.affected_vocabs IS NOT NULL\nGROUP BY s0.affected_vocabs\nORDER BY 1 DESC;\n```\n\n----------------------------------------\n\nTITLE: Run after_mm SQL script\nDESCRIPTION: Executes the SQL script 'after_mm.sql' to prepare input tables after manual mappings are uploaded.  This prepares the data for subsequent vocabulary building steps.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/LPD_Belgium/readme.md#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nafter_mm.sql\n```\n\n----------------------------------------\n\nTITLE: Extracting data into gcs_manual_curated table using SQL\nDESCRIPTION: This SQL query is used to generate the CSV file that will be extracted into the `gcs_manual_curated` table. It selects `concept_id`, `concept_name`, `vocabulary_id`, `ings`, `string_agg`, and `atc_code` columns from the `gcs_manual_curated` table.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/ATC/manual work/readme.md#_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n    concept_id,\n    concept_name,\n    vocabulary_id,\n    ings,\n    string_agg,\n    atc_code\nFROM gcs_manual_curated;\n```\n\n----------------------------------------\n\nTITLE: Creating NDC History Table SQL\nDESCRIPTION: This SQL statement creates the `ndc_history` table, which stores historical information about NDC codes, including their status, active RxCUI, and start and end dates. The table contains columns for concept code, status, active RxCUI, start date, and end date.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/working/packages/APIgrabber/readme.md#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE apigrabber.ndc_history\n(\n\t\tCONCEPT_CODE  VARCHAR(50),\n\t\tSTATUS        VARCHAR(4000),\n\t\tACTIVERXCUI   VARCHAR(4000),\n\t\tSTARTDATE     DATE,\n\t\tENDDATE       DATE\n);\n```\n\n----------------------------------------\n\nTITLE: Generate concept_manual CSV\nDESCRIPTION: This SQL query is used to generate the CSV file for the concept_manual table. It selects specific columns from the concept_manual table and orders the results by vocabulary_id, concept_code, invalid_reason, valid_start_date, valid_end_date, and concept_name. This file is then uploaded into the working schema.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/LOINC/manual_work/readme.md#_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT concept_name,\n       domain_id,\n       vocabulary_id,\n       concept_class_id,\n       standard_concept,\n       concept_code,\n       valid_start_date,\n       valid_end_date,\n       invalid_reason\nFROM concept_manual\nORDER BY vocabulary_id, concept_code, invalid_reason, valid_start_date, valid_end_date, concept_name\n```\n\n----------------------------------------\n\nTITLE: Load MedDRA Input Tables in SQL\nDESCRIPTION: This SQL command loads the input tables for MedDRA with a specified vocabulary date and version. It is a crucial step in preparing the data for further processing and integration into the vocabulary database. The vocabulary date must be specified in 'YYYYMMDD' format.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/MedDRA/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT sources.load_input_tables('MedDRA',TO_DATE('20160901','YYYYMMDD'),'MedDRA version 25.0')\n```\n\n----------------------------------------\n\nTITLE: Run Build_RxE SQL script\nDESCRIPTION: Executes the 'Build_RxE.sql' script (excluding the last section with drops) to build the RxE vocabulary. Requires the /working/directory path to be available.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/LPD_Belgium/readme.md#_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nBuild_RxE.sql\n```\n\n----------------------------------------\n\nTITLE: Running SQL Script for VANDF Update\nDESCRIPTION: This step involves executing the load_stage.sql script, which is likely responsible for loading the staging tables with the necessary data for the VANDF and VA Class vocabulary update. The SQL script performs the data transformation and preparation required for the subsequent update process.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/VANDF/readme.md#_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nload_stage.sql\n```\n\n----------------------------------------\n\nTITLE: Query Log by Concept ID in SQL\nDESCRIPTION: This SQL query retrieves the history of changes for a specific concept ID from the `audit.GetLogByID()` function. It includes details such as log ID, table name, transaction time, operation time, the type of operation performed, the result of the operation, the script name, and the transaction ID. The results are ordered by log ID in descending order and limited to the top 100 entries. The `iConceptID` parameter specifies the concept ID to search for.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/working/packages/audit_pack/readme.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT log_id,\n\ttable_name,\n\ttx_time AT TIME ZONE 'MSK' AS tx_time,\n\top_time AT TIME ZONE 'MSK' AS op_time,\n\ttg_operation,\n\ttg_result,\n\tscript_name,\n\ttx_id\nFROM audit.GetLogByID (iConceptID=>1800731)\nORDER BY log_id DESC\nLIMIT 100;\n```\n\n----------------------------------------\n\nTITLE: Load Input Tables PL/pgSQL\nDESCRIPTION: This PL/pgSQL function loads the input tables for the Indication vocabulary update. It takes the string 'Indication' as input to identify the vocabulary to be loaded. The function automatically retrieves the pVocabularyDate and pVocabularyVersion from the GCN_SEQNO.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/Indication/readme.md#_snippet_1\n\nLANGUAGE: PL/pgSQL\nCODE:\n```\nSELECT sources.load_input_tables('Indication');\n```\n\n----------------------------------------\n\nTITLE: Loading Input Tables\nDESCRIPTION: This SQL statement loads the input tables for the dm+d vocabulary update. It specifies the vocabulary name ('DMD'), the vocabulary date (February 1, 2021), and the vocabulary version ('dm+d Version 2.0.0 20210201'). It uses the `sources.load_input_tables` function in the `devv5` schema.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/dmd/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT sources.load_input_tables('DMD',TO_DATE('20210201','YYYYMMDD'),'dm+d Version 2.0.0 20210201');\n```\n\n----------------------------------------\n\nTITLE: Get Concept Relationship Summary in SQL\nDESCRIPTION: This SQL query retrieves a summary of the 'concept_relationship' table from the qa_tests schema using the get_summary() function. The summary helps assess the changes and overall state of the 'concept_relationship' table after the vocabulary update. The function requires the table name as input.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/CPT4/readme.md#_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM qa_tests.get_summary('concept_relationship');\n```\n\n----------------------------------------\n\nTITLE: Creating kcd7_refresh Table with potential mappings (mapping_refresh.sql)\nDESCRIPTION: This step involves running the mapping_refresh.sql script. This script is designed to generate a table named kcd7_refresh. This table contains a list of potential replacement mappings and codes that are currently without any mappings. It acts as a starting point for the manual review process.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/KCD7/manual_work/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nN/A - The specific SQL code for mapping_refresh.sql is located in the linked GitHub repository and not directly provided in the text.\n```\n\n----------------------------------------\n\nTITLE: Load Input Tables\nDESCRIPTION: This SQL statement calls a function 'load_input_tables' within the 'sources' schema to load data into the source tables for BDPM vocabulary. It takes the source name ('BDPM') and a date string ('20180622') which is converted to a DATE data type, using 'YYYYMMDD' format, as input. The statement must be executed in the 'devv5' environment.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/BDPM/README.md#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT sources.load_input_tables('BDPM',TO_DATE('20180622','YYYYMMDD'));\n```\n\n----------------------------------------\n\nTITLE: Querying Concept Data in SQL\nDESCRIPTION: This SQL query extracts concept data from the concept_manual table. It selects specific columns such as concept_name, domain_id, vocabulary_id, concept_class_id, standard_concept, concept_code, valid_start_date, valid_end_date, and invalid_reason. The results are ordered by vocabulary_id, concept_code, valid_start_date, valid_end_date, and concept_name.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/Cancer Modifier/manual_work/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT concept_name,\n       domain_id,\n       vocabulary_id,\n       concept_class_id,\n       standard_concept,\n       concept_code,\n       valid_start_date,\n       valid_end_date,\n       invalid_reason\nFROM concept_manual\nORDER BY vocabulary_id, concept_code, valid_start_date, valid_end_date, concept_name\n```\n\n----------------------------------------\n\nTITLE: Create Source Tables SQL\nDESCRIPTION: This SQL script creates the necessary source tables within the DEV schema (e.g., dev_grr) to prepare for the GRR vocabulary upload.  It is the first step in the GRR upload process and must be executed before loading data. Dependencies include a DEV schema with copies of concept, concept_relationship, and concept_synonym tables from ProdV5, fully indexed.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/GRR/readme.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\ncreate_source_tables.sql\n```\n\n----------------------------------------\n\nTITLE: Fast Recreate Schema (SQL)\nDESCRIPTION: This SQL snippet executes the `FastRecreateSchema` function within the `devv5` schema. It takes the schema name 'dev_icd10' as input. This function is typically used for quickly recreating the schema during vocabulary updates.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/ICD10CN/readme.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT devv5.FastRecreateSchema('dev_icd10');\n```\n\n----------------------------------------\n\nTITLE: Extracting data into atc_rxnorm_to_drop_in_sources table using SQL\nDESCRIPTION: This SQL query is used to generate the CSV file that will be extracted into the `atc_rxnorm_to_drop_in_sources` table. It selects `concept_id_atc`, `concept_code_atc`, `concept_name`, `source`, `concept_id_rx`, and `concept_name_rx` columns from the `atc_rxnorm_to_drop_in_sources` table.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/ATC/manual work/readme.md#_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n    concept_id_atc,\n    concept_code_atc,\n    concept_name,\n    source,\n    concept_id_rx,\n    concept_name_rx\nFROM atc_rxnorm_to_drop_in_sources;\n```\n\n----------------------------------------\n\nTITLE: Load ICD10CM Source Tables - SQL\nDESCRIPTION: This SQL statement loads the input tables for ICD10CM vocabulary. It specifies the vocabulary name ('ICD10CM'), the vocabulary date, and the vocabulary version description.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/ICD10CM/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT sources.load_input_tables('ICD10CM',TO_DATE('20170428','YYYYMMDD'),'ICD10CM FY2017 code descriptions');\n```\n\n----------------------------------------\n\nTITLE: Deprecate Old and Add New Mappings - SQL\nDESCRIPTION: This step involves using the crm_changes.sql script to deprecate old mappings for the ICD10 codes that are being updated and to add fresh mappings to the concept_relationship_manual table.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/ICD10GM/manual_work/readme.md#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nN/A - The code is located in the file crm_changes.sql\n```\n\n----------------------------------------\n\nTITLE: Domain Changes (SQL)\nDESCRIPTION: This SQL query retrieves information about domain changes using the `qa_tests.get_domain_changes()` function. It helps identify concepts where the domain has changed during the vocabulary update, which is crucial for understanding the impact of the update on downstream analyses and applications. The returned data will provide details on concepts that have shifted between different domains.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/LOINC/readme.md#_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM qa_tests.get_domain_changes();\n```\n\n----------------------------------------\n\nTITLE: Extracting data into covid19_atc_rxnorm_manual table using SQL\nDESCRIPTION: This SQL query is used to generate the CSV file that will be extracted into the `covid19_atc_rxnorm_manual` table. It selects `concept_code_atc`, `to_drop`, `concept_id`, and `concept_name` columns from the `covid19_atc_rxnorm_manual` table.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/ATC/manual work/readme.md#_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n    concept_code_atc,\n    to_drop,\n    concept_id,\n    concept_name\nFROM covid19_atc_rxnorm_manual;\n```\n\n----------------------------------------\n\nTITLE: Virtual Authorization SQL\nDESCRIPTION: This SQL statement is used to perform virtual authorization before running the generic_update process. It requires a username and password to create a virtual session.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/working/packages/admin_pack/readme.md#_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT admin_pack.VirtualLogIn ('login','password');\n```\n\n----------------------------------------\n\nTITLE: Concept Mapping Changes Statistics SQL\nDESCRIPTION: This SQL statement executes the get_changes_concept_mapping function within the qa_tests schema. Requires the qa_tests.get_changes_concept_mapping() function to be defined. The results should be interpreted to analyze the changes in concept mappings.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/HemOnc/readme.md#_snippet_9\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM qa_tests.get_changes_concept_mapping();\n```\n\n----------------------------------------\n\nTITLE: Get Newly Concepts in SQL\nDESCRIPTION: This SQL query retrieves newly introduced concepts in the vocabulary using the get_newly_concepts() function from the qa_tests schema. This is important to understand the new additions to the vocabulary after the update. The results need to be checked for accuracy and completeness.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/CPT4/readme.md#_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM qa_tests.get_newly_concepts();\n```\n\n----------------------------------------\n\nTITLE: Recreate Schema in DevV5 (SQL)\nDESCRIPTION: This SQL statement calls a stored procedure `FastRecreateSchema` in the `devv5` schema. It recreates the schema including concept ancestor relationships, deprecated relationships, and synonyms. The procedure takes `main_schema_name` as a parameter to specify the schema to recreate and boolean flags to include different elements during recreation.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/ICD10PCS/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\n   SELECT devv5.FastRecreateSchema(main_schema_name=>'devv5', include_concept_ancestor=> true, include_deprecated_rels=> true, include_synonyms=> true);\n```\n\n----------------------------------------\n\nTITLE: Creating RxNorm to NDC Mappings Table SQL\nDESCRIPTION: This SQL statement creates the `rxnorm2ndc_mappings` table, which maps RxNorm concept codes to NDC codes, along with their start and end dates. The table includes columns for concept code, NDC code, start date, and end date.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/working/packages/APIgrabber/readme.md#_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE apigrabber.rxnorm2ndc_mappings\n(\n\t\tCONCEPT_CODE  VARCHAR(50),\n\t\tNDC_CODE      VARCHAR(4000),\n\t\tSTARTDATE     DATE,\n\t\tENDDATE       DATE\n);\n```\n\n----------------------------------------\n\nTITLE: Deprecating old mappings and adding fresh mappings (crm_changes.sql)\nDESCRIPTION: After the manual review and mapping checks are completed successfully, the crm_changes.sql script is used to update the concept_relationship_manual table.  This script handles the deprecation of older mappings for relevant ICD10 codes and adds the newly created and verified mappings to the concept_relationship_manual table.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/KCD7/manual_work/readme.md#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nN/A - The specific SQL code for crm_changes.sql is not directly provided in the text.\n```\n\n----------------------------------------\n\nTITLE: Modify Privilege SQL\nDESCRIPTION: This SQL script modifies an existing privilege's attributes such as name, description, and blocked status using the `admin_pack.ModifyPrivilege` function. It uses `admin_pack.GetPrivilegeIDByName`. MANAGE_PRIVILEGE privilege is required.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/working/packages/admin_pack/readme.md#_snippet_19\n\nLANGUAGE: sql\nCODE:\n```\nDO $_$\nBEGIN\n\tPERFORM admin_pack.ModifyPrivilege(\n\t\tpPrivilegeID           => admin_pack.GetPrivilegeIDByName('MANAGE_PRIVILEGE'),\n\t\tpPrivilegeName         => NULL, --or 'NEW_PRIVILEGE_NAME' <--be careful changing this value, you have to change all functions dependent on this name\n\t\tpPrivilegeDescription  => NULL, --or 'New privilege description'\n\t\tpIsBlocked             => FALSE --or TRUE if you want to block privilege\n\t);\nEND $_$;\n```\n\n----------------------------------------\n\nTITLE: Modify Vocabulary Access SQL\nDESCRIPTION: This SQL script modifies a user's access to a specific vocabulary, including the start date, end date, and blocked status using the `admin_pack.ModifyVocabularyAccess` function. It uses `admin_pack.GetUserIDByLogin`. MANAGE_USER privilege is required.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/working/packages/admin_pack/readme.md#_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nDO $_$\nBEGIN\n\tPERFORM admin_pack.ModifyVocabularyAccess(\n\t\tpUserID          =>admin_pack.GetUserIDByLogin('dev_jdoe'), --user's virtual login\n\t\tpVocabulary_id   =>'CPT4', --vocabulary_id for which access is being changed\n\t\tpValidStartDate  =>NULL, --by default we don't want to change it (but there may be a situation when you want to correct the start date)\n\t\tpValidEndDate    =>NULL, --by default we don't want to change it (but there may be a situation when you want to correct the end date)\n\t\tpIsBlocked       =>TRUE --block access\n\t);\nEND $_$;\n```\n\n----------------------------------------\n\nTITLE: Querying concept_relationship_manual Table in SQL\nDESCRIPTION: This SQL query extracts data from the concept_relationship_manual table. It selects the concept_code_1, concept_code_2, vocabulary_id_1, vocabulary_id_2, relationship_id, valid_start_date, valid_end_date, and invalid_reason columns. The result set is ordered by vocabulary_id_1, vocabulary_id_2, relationship_id, concept_code_1, concept_code_2, invalid_reason, valid_start_date, and valid_end_date.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/RxNorm_E/readme_for_manual_tables.md#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT concept_code_1,\n       concept_code_2,\n       vocabulary_id_1,\n       vocabulary_id_2,\n       relationship_id,\n       valid_start_date,\n       valid_end_date,\n       invalid_reason\nFROM concept_relationship_manual\nORDER BY vocabulary_id_1, vocabulary_id_2, relationship_id, concept_code_1, concept_code_2, invalid_reason, valid_start_date, valid_end_date\n;\n```\n\n----------------------------------------\n\nTITLE: Generic Update Procedure Call\nDESCRIPTION: Calls the devv5.GenericUpdate() procedure to perform the final update of the vocabulary data. This procedure is responsible for merging the data from the staging tables into the main vocabulary tables (concept, concept_relationship, concept_synonym) within the DevV5 schema. It assumes that the staging tables have been populated correctly by running the load_stage.sql script.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/LPD_Australia/readme.md#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\ndevv5.GenericUpdate();\n```\n\n----------------------------------------\n\nTITLE: Create Source Tables\nDESCRIPTION: This SQL script creates the initial source tables required for the BDPM vocabulary update.  It is assumed that the DevV5 schema exists, containing copies of the concept, concept_relationship and concept_synonym tables from the ProdV5 schema.  Indexing is expected on those tables. The script must be executed within the working directory 'dev_bdpm'.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/BDPM/README.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\ncreate_source_tables.sql\n```\n\n----------------------------------------\n\nTITLE: Query concept_manual table\nDESCRIPTION: This SQL query selects data from the concept_manual table, ordering the results by vocabulary_id, concept_code, invalid_reason, valid_start_date, valid_end_date, and concept_name. This is used to generate possible content for the manual table. It requires access to the concept_manual table in the database.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/SNOMED/manual_work/readme.md#_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT concept_name,\n       domain_id,\n       vocabulary_id,\n       concept_class_id,\n       standard_concept,\n       concept_code,\n       valid_start_date,\n       valid_end_date,\n       invalid_reason\nFROM concept_manual\nORDER BY vocabulary_id, concept_code, invalid_reason, valid_start_date, valid_end_date, concept_name\n```\n\n----------------------------------------\n\nTITLE: Concept Summary (SQL)\nDESCRIPTION: This SQL query retrieves a summary of the 'concept' table using the `qa_tests.get_summary()` function.  It provides insights into the data contained within the concept table after the loading and transformation processes are complete. The output will typically include counts and distributions of concepts based on various attributes.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/LOINC/readme.md#_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM qa_tests.get_summary('concept');\n```\n\n----------------------------------------\n\nTITLE: Get Domain Changes in SQL\nDESCRIPTION: This SQL query retrieves any changes to the domains resulting from the MedDRA vocabulary update. It is used to assess the impact on domain assignments of the updated concepts.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/MedDRA/readme.md#_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM qa_tests.get_domain_changes();\n```\n\n----------------------------------------\n\nTITLE: Loading Input Tables into DevV5\nDESCRIPTION: Loads the input tables into the DevV5 schema for the GCNSEQNO vocabulary with a specified vocabulary date and release version. This command uses the sources.load_input_tables function, which is likely defined elsewhere in the OHDSI vocabulary processing framework.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/GCN_SEQNO/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT sources.load_input_tables('GCNSEQNO',TO_DATE('20151119','YYYYMMDD'),'20151119 Release');\n```\n\n----------------------------------------\n\nTITLE: Query concept_relationship_manual table\nDESCRIPTION: This SQL query selects data from the concept_relationship_manual table, ordering the results by vocabulary_id_1, vocabulary_id_2, relationship_id, concept_code_1, concept_code_2, invalid_reason, valid_start_date, and valid_end_date. This query is used to generate a CSV file for manual relationship management. It requires access to the concept_relationship_manual table.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/SNOMED/manual_work/readme.md#_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT concept_code_1,\n       concept_code_2,\n       vocabulary_id_1,\n       vocabulary_id_2,\n       relationship_id,\n       valid_start_date,\n       valid_end_date,\n       invalid_reason\nFROM concept_relationship_manual\nORDER BY vocabulary_id_1, vocabulary_id_2, relationship_id, concept_code_1, concept_code_2, invalid_reason, valid_start_date, valid_end_date\n```\n\n----------------------------------------\n\nTITLE: Schema Recreation using FastRecreateSchema\nDESCRIPTION: This SQL command recreates the schema using the `FastRecreateSchema` function. It's a prerequisite step for updating the vocabulary to ensure a clean environment.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/NCCD/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nselect devv5.FastRecreateSchema();\n```\n\n----------------------------------------\n\nTITLE: Drug Name and Concept ID Mapping\nDESCRIPTION: This snippet represents a row in the vocabulary mapping file. It includes the drug name, concept ID, a descriptive name, and a flag indicating whether the mapping is active or primary. The snippet demonstrates the structure and content of the mapping entries.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/GRR/manual_work/relationship_to_concept_old.txt#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nLisinopril Teva\t43128959\tLISINOPRIL TEVA\t1\n```\n\n----------------------------------------\n\nTITLE: Basic Tables Check SQL\nDESCRIPTION: This SQL statement executes a QA check to retrieve null values. Requires the qa_tests.get_checks() function to be defined. The expected output is NULL, indicating that the basic tables are in a consistent state.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/HemOnc/readme.md#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM qa_tests.get_checks();\n```\n\n----------------------------------------\n\nTITLE: Load Stage SQL\nDESCRIPTION: This script loads data into the staging tables. This step is performed after the source tables are populated and the concept_relationship_manual table has been updated.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/UK_Biobank/readme.md#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nload_stage.sql\n```\n\n----------------------------------------\n\nTITLE: Get Changes Concept Mapping in SQL\nDESCRIPTION: This SQL query retrieves changes in concept mapping using the get_changes_concept_mapping() function from the qa_tests schema. This query helps track changes to the mappings between concepts after the vocabulary update. The output should be carefully analyzed to ensure mappings remain accurate.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/CPT4/readme.md#_snippet_9\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM qa_tests.get_changes_concept_mapping();\n```\n\n----------------------------------------\n\nTITLE: Query: Select data from concept_manual\nDESCRIPTION: This SQL query selects data from the concept_manual table, ordering the results by vocabulary_id, concept_code, invalid_reason, valid_start_date, valid_end_date, and concept_name. It retrieves all the columns required for the concept_manual table.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/OPS/manual_work/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT concept_name,\n       domain_id,\n       vocabulary_id,\n       concept_class_id,\n       standard_concept,\n       concept_code,\n       valid_start_date,\n       valid_end_date,\n       invalid_reason\nFROM concept_manual\nORDER BY vocabulary_id, concept_code, invalid_reason, valid_start_date, valid_end_date, concept_name\n```\n\n----------------------------------------\n\nTITLE: ICD10PCS Attribute Mapping to SNOMED (SQL)\nDESCRIPTION: This SQL script, `attr_tables.sql`, extracts unique ICD10PCS attributes and maps them to SNOMED concepts. The results are stored in the `attr_from_usagi` table. No dependencies are explicitly mentioned in the text, but it likely depends on existing vocabulary tables.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/ICD10PCS/snomed_hierarchy/README.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nattr_tables.sql\n```\n\n----------------------------------------\n\nTITLE: Modify User Privilege (Shorter) SQL\nDESCRIPTION: This SQL script provides a shorter version to modify a user's privilege block status using the `admin_pack.ModifyUserPrivilege` function. It uses `admin_pack.GetUserIDByLogin` and `admin_pack.GetPrivilegeIDByName`. MANAGE_USER privilege is required.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/working/packages/admin_pack/readme.md#_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nDO $_$\nBEGIN\n\tPERFORM admin_pack.ModifyUserPrivilege(\n\t\tpUserID          =>admin_pack.GetUserIDByLogin('dev_jdoe'), --user's virtual login\n\t\tpPrivilegeID     =>admin_pack.GetPrivilegeIDByName('MANAGE_USER'),\n\t\tpIsBlocked       =>TRUE --block privilege for the specified user\n\t);\nEND $_$;\n```\n\n----------------------------------------\n\nTITLE: Running pConceptAncestor PL/pgSQL\nDESCRIPTION: This snippet executes the `pConceptAncestor` procedure from the `VOCABULARY_PACK` package. It's called during the RxNorm cleanup process to populate the concept_ancestor table. The `IS_SMALL=>TRUE` parameter suggests it's optimized for smaller datasets or initial runs.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/RxNorm_E/readme.md#_snippet_0\n\nLANGUAGE: PL/pgSQL\nCODE:\n```\nDO $$\nBEGIN\n\tPERFORM VOCABULARY_PACK.pConceptAncestor(IS_SMALL=>TRUE);\nEND $$;\n```\n\n----------------------------------------\n\nTITLE: Create Source Tables SQL\nDESCRIPTION: Executes SQL scripts to create necessary source tables and apply additional DDL changes within the DevV5 database. This step sets up the database environment for the vocabulary update process. It assumes that a DevV5 schema is available with copies of concept, concept_relationship and concept_synonym tables.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/LPD_Australia/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\ncreate_source_tables.sql\n```\n\nLANGUAGE: SQL\nCODE:\n```\nadditional_ddl.sql\n```\n\n----------------------------------------\n\nTITLE: Load ICD10GM Input Tables - SQL\nDESCRIPTION: This SQL statement loads the ICD10GM data into input tables within the vocabulary database. It specifies the vocabulary ID ('ICD10GM'), the vocabulary date ('20200101'), and the vocabulary version ('2020 Release'). The function `sources.load_input_tables` performs the data loading operation, requiring the mentioned parameters.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/ICD10GM/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT sources.load_input_tables('ICD10GM',TO_DATE('20200101','YYYYMMDD'),'2020 Release');\n```\n\n----------------------------------------\n\nTITLE: Run sources.load_input_tables SQL\nDESCRIPTION: This SQL statement loads the input tables for the 'OMOP Invest Drug' vocabulary. It specifies the source name, vocabulary date, and vocabulary version. It is crucial to have a fresh vocabulary date from dump-public.gsrs before running this statement. The TO_DATE function is used to convert the date string into a date format.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/OMOP Invest Drug/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT sources.load_input_tables('OMOP Invest Drug',TO_DATE('20220512','YYYYMMDD'),'OMOP Invest Drug version 2022-05-12');\n```\n\n----------------------------------------\n\nTITLE: Extract concept_relationship_manual SQL\nDESCRIPTION: This SQL query extracts data from the concept_relationship_manual table to generate a CSV file for uploading into the working schema. It orders the data for consistency and efficient processing. The CSV file is used to update mappings and relationships between concepts.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/MedDRA/manual_work/readme.md#_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT concept_code_1,\n       concept_code_2,\n       vocabulary_id_1,\n       vocabulary_id_2,\n       relationship_id,\n       valid_start_date,\n       valid_end_date,\n       invalid_reason\nFROM concept_relationship_manual\nORDER BY vocabulary_id_1, vocabulary_id_2, relationship_id, concept_code_1, concept_code_2, invalid_reason, valid_start_date, valid_end_date\n```\n\n----------------------------------------\n\nTITLE: Create Source Tables SQL\nDESCRIPTION: This step involves executing SQL scripts to create the source tables required for loading and processing the JMDC vocabulary data. The specific scripts are `create_source_tables.sql` and `additional_DDL.sql`, which define the table structures and constraints.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/JMDC/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\ncreate_source_tables.sql\n```\n\nLANGUAGE: SQL\nCODE:\n```\nadditional_DDL.sql\n```\n\n----------------------------------------\n\nTITLE: Drop Temporary Tables SQL\nDESCRIPTION: This SQL script, `drops.sql`, removes all temporary tables created during the GRR vocabulary upload process. This is a cleanup step performed after all data transformations and updates are completed. It helps maintain the database's cleanliness and efficiency.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/GRR/readme.md#_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\ndrops.sql\n```\n\n----------------------------------------\n\nTITLE: Extracting data for concept_relationship_manual\nDESCRIPTION: This SQL query extracts data from the concept_relationship_manual table and orders it for generating a CSV file, intended for manual review and subsequent upload during the vocabulary refresh process. The columns selected include the concept relationship metadata, and ordering is done by vocabulary_id_1, vocabulary_id_2, relationship_id, concept_code_1, concept_code_2, invalid_reason, valid_start_date, and valid_end_date to maintain consistency.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/HCPCS/manual work/readme.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT concept_code_1,\n       concept_code_2,\n       vocabulary_id_1,\n       vocabulary_id_2,\n       relationship_id,\n       valid_start_date,\n       valid_end_date,\n       invalid_reason\nFROM concept_relationship_manual\nORDER BY vocabulary_id_1, vocabulary_id_2, relationship_id, concept_code_1, concept_code_2, invalid_reason, valid_start_date, valid_end_date\n```\n\n----------------------------------------\n\nTITLE: SQL Script Execution for CREM Changes\nDESCRIPTION: Executes the crem_changes.sql script. This script handles the deprecation of old mappings for the ICD10CM codes of interest and adds fresh mappings to the concept_relationship_manual table. It ensures that the mappings are updated to the most recent and accurate information.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/ICD10CN/manual_work/readme.md#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: Get Summary SQL\nDESCRIPTION: Retrieves summary statistics for the 'concept' and 'concept_relationship' tables using the qa_tests.get_summary() function. This step provides an overview of the data after the update process.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/SNOMED/readme.md#_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT DISTINCT * FROM qa_tests.get_summary('concept');\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT DISTINCT * FROM qa_tests.get_summary('concept_relationship');\n```\n\n----------------------------------------\n\nTITLE: Run mapping_refresh.sql for Replacement Mappings (SQL)\nDESCRIPTION: This SQL script creates the icd10cm_refresh table. This table contains a list of potential replacement mappings and codes that currently lack mappings. This is a key part of the vocabulary refresh process.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/ICD10CM/manual_work/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nN/A - Script available at https://github.com/OHDSI/Vocabulary-v5.0/blob/icd10cm-documentation/ICD10CM/manual_work/mapping_refresh.sql\n```\n\n----------------------------------------\n\nTITLE: Generic Update (SQL)\nDESCRIPTION: This PL/pgSQL block executes the `devv5.GenericUpdate()` procedure. This procedure performs a series of generic updates to the vocabulary tables, ensuring data consistency and integrity after the initial load and transformations. This is a core step for updating the vocabulary after staging the data.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/LOINC/readme.md#_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nDO $_$\nBEGIN\n\tPERFORM devv5.GenericUpdate();\nEND $_$;\n```\n\n----------------------------------------\n\nTITLE: Basic Tables Check (SQL)\nDESCRIPTION: This SQL query selects all rows from the `qa_tests.get_checks()` function. This function is intended to return `NULL` if all basic checks pass, ensuring data integrity of fundamental vocabulary tables. It verifies the overall health and consistency of the updated vocabulary.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/LOINC/readme.md#_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM qa_tests.get_checks();\n```\n\n----------------------------------------\n\nTITLE: Load Stage SQL\nDESCRIPTION: Executes the load_stage SQL script. This script is responsible for transforming and loading the data from the uploaded files into staging tables in preparation for the final update.  It assumes that the files have already been uploaded to the corresponding tables as mentioned in the instructions.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/LPD_Australia/readme.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nload_stage.sql\n```\n\n----------------------------------------\n\nTITLE: Get Newly Concepts Standard Concept Status in SQL\nDESCRIPTION: This SQL query retrieves the standard concept status of newly introduced concepts using the get_newly_concepts_standard_concept_status() function from the qa_tests schema. It helps verify that newly added concepts have the correct standard concept status. The output needs to be checked for correctness.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/CPT4/readme.md#_snippet_8\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM qa_tests.get_newly_concepts_standard_concept_status();\n```\n\n----------------------------------------\n\nTITLE: Extracting concept_relationship_manual table data\nDESCRIPTION: This SQL query extracts data from the concept_relationship_manual table and orders it for generating the CSV file. The resulting CSV is used to manually populate the concept_relationship_manual table after extraction.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/OMOP Extension/manual_work/readme.md#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT concept_code_1,\n       concept_code_2,\n       vocabulary_id_1,\n       vocabulary_id_2,\n       relationship_id,\n       valid_start_date,\n       valid_end_date,\n       invalid_reason\nFROM concept_relationship_manual\nORDER BY vocabulary_id_1, vocabulary_id_2, relationship_id, concept_code_1, concept_code_2, invalid_reason, valid_start_date, valid_end_date\n;\n```\n\n----------------------------------------\n\nTITLE: Virtual Login SQL\nDESCRIPTION: This SQL statement logs in a virtual user with the specified username and password using the `admin_pack.VirtualLogIn` function.  It is the first step in accessing the vocabulary management functionalities.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/working/packages/admin_pack/readme.md#_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT admin_pack.VirtualLogIn ('login','password');\n```\n\n----------------------------------------\n\nTITLE: Extracting data into bdpm_atc_codes table using SQL\nDESCRIPTION: This SQL query is used to generate the CSV file that will be extracted into the `bdpm_atc_codes` table. It selects `id` and `atc_code` from the `bdpm_atc_codes` table.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/ATC/manual work/readme.md#_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \n       id,\n       atc_code\nFROM bdpm_atc_codes;\n```\n\n----------------------------------------\n\nTITLE: SQL: Load Input Tables\nDESCRIPTION: This SQL statement loads data into the input tables within the DevV5 schema using the sources.load_input_tables function. It specifies the source ('CIVIC'), the vocabulary date ('20221001'), and the vocabulary version ('CIViC 2022-10-01').\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/CIViC/readme.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT sources.load_input_tables('CIVIC',TO_DATE('20221001','YYYYMMDD'),'CIViC 2022-10-01');\n```\n\n----------------------------------------\n\nTITLE: Extracting vocabulary data\nDESCRIPTION: This snippet represents a line of vocabulary data.  It includes a term, its ID, a name, and a count. It's expected to be one of many such lines in a larger dataset. The fields are separated by tabs.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/GRR/manual_work/relationship_to_concept_old.txt#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nFluoxetin Al\t43570268\tFluoxetin Al\t1\n```\n\n----------------------------------------\n\nTITLE: Load Input Tables SQL\nDESCRIPTION: This SQL script loads the input tables with data related to ICD9Proc. It uses a function to load data specifying the source, date, and version. This function requires the 'ICD9Proc' source, a date formatted as 'YYYYMMDD', and a descriptive version string.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/ICD9Proc/readme.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT sources.load_input_tables('ICD9Proc',TO_DATE('20141001','YYYYMMDD'),'ICD9CM v32 master descriptions');\n```\n\n----------------------------------------\n\nTITLE: Extracting vocabulary data\nDESCRIPTION: This snippet represents a line of vocabulary data.  It includes a term, its ID, a name, and a count. It's expected to be one of many such lines in a larger dataset. The fields are separated by tabs.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/GRR/manual_work/relationship_to_concept_old.txt#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\nGefitinib\t1319193\tgefitinib\t1\n```\n\n----------------------------------------\n\nTITLE: Load Input Tables for ICD10CN (SQL)\nDESCRIPTION: This SQL snippet loads input tables for the ICD10CN vocabulary. It uses the `sources.load_input_tables` function with parameters for vocabulary ID ('ICD10CN'), vocabulary date ('20160101'), and vocabulary version ('2016 Release'). The function resides within the 'sources' schema.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/ICD10CN/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT sources.load_input_tables('ICD10CN',TO_DATE('20160101','YYYYMMDD'),'2016 Release');\n```\n\n----------------------------------------\n\nTITLE: Domain Changes\nDESCRIPTION: This SQL query retrieves changes in domains between the current schema and 'devv5'. It depends on the `qa_tests.get_domain_changes` function.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/NDC_SPL/readme.md#_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nselect * from qa_tests.get_domain_changes(pCompareWith=>'devv5');\n```\n\n----------------------------------------\n\nTITLE: Create Source Tables SQL\nDESCRIPTION: This step involves executing the SQL script `create_source_tables.sql` to create the necessary source tables in the DevV5 schema. These tables are required for loading the ETC vocabulary data.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/ETC/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\n1. Run create_source_tables.sql\n```\n\n----------------------------------------\n\nTITLE: View User Privileges SQL\nDESCRIPTION: This SQL query retrieves user privileges using the `admin_pack.GetUserPrivileges` function. It orders the results by user activity, login, privilege activity, and privilege name. MANAGE_USER privilege is required.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/working/packages/admin_pack/readme.md#_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *\nFROM admin_pack.GetUserPrivileges()\nORDER BY is_user_active DESC,\n\tuser_login,\n\tis_privilege_alive DESC,\n\tis_privilege_active DESC,\n\tprivilege_name;\n```\n\n----------------------------------------\n\nTITLE: Creating Vocabulary Download Schema and Granting Permissions\nDESCRIPTION: Creates a new schema named vocabulary_download and grants necessary permissions to users. This ensures that the vocabulary download process has its own dedicated space and appropriate access control.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/working/packages/vocabulary_download/readme.md#_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE SCHEMA vocabulary_download AUTHORIZATION devv5;\nALTER DEFAULT PRIVILEGES IN SCHEMA vocabulary_download GRANT SELECT ON TABLES TO PUBLIC;\nGRANT USAGE ON SCHEMA vocabulary_download TO PUBLIC;\nALTER DEFAULT PRIVILEGES IN SCHEMA vocabulary_download GRANT EXECUTE ON FUNCTIONS TO PUBLIC;\n```\n\n----------------------------------------\n\nTITLE: Run SQL script to create source tables\nDESCRIPTION: This step involves executing the `create_source_tables.sql` script against the DevV5 schema. The script is responsible for creating the necessary tables to hold the DRG source data before loading it into the staging area.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/DRG/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\n-- No specific SQL code provided, but this step refers to executing create_source_tables.sql\n```\n\n----------------------------------------\n\nTITLE: Get Primary Relationship ID SQL\nDESCRIPTION: This SQL query retrieves the correct (primary) relationship ID from the `devv5.relationship` table using the `devv5.GetPrimaryRelationshipID` function. This is used to maintain the correct direction for relationships in manual tables.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/working/packages/admin_pack/readme.md#_snippet_21\n\nLANGUAGE: sql\nCODE:\n```\nselect devv5.GetPrimaryRelationshipID(r.relationship_id) correct_rel, r.relationship_id from devv5.relationship r;\n```\n\n----------------------------------------\n\nTITLE: Getting Changes Concept Mapping\nDESCRIPTION: This SQL statement retrieves information about changes to concept mappings by querying the qa_tests.get_changes_concept_mapping() function. This is part of the quality assurance after a vocabulary update to track changes in relationships between concepts.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/CVX/readme.md#_snippet_11\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM qa_tests.get_changes_concept_mapping();\n```\n\n----------------------------------------\n\nTITLE: Load Stage Tables SQL\nDESCRIPTION: This step executes the `load_stage.sql` script to load the staging tables. The purpose of this script is to transform and prepare the input data for integration into the core vocabulary tables. The transformed data is stored in staging tables before final insertion into the concept, concept_relationship and concept_synonym tables.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/Nebraska Lexicon/readme.md#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nload_stage.sql\n```\n\n----------------------------------------\n\nTITLE: Fast Recreate Schema (SQL)\nDESCRIPTION: This SQL snippet recreates the vocabulary schema using the `devv5.FastRecreateSchema` function. It includes options to exclude concept ancestor relationships, include deprecated relationships, and include synonyms. This operation occurs in the devv5 schema.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/CIM10/readme.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT devv5.FastRecreateSchema(main_schema_name=>'devv5', include_concept_ancestor=>false, include_deprecated_rels=>true, include_synonyms=>true);\n```\n\n----------------------------------------\n\nTITLE: Dropping Temporary Tables SQL\nDESCRIPTION: This step executes the `drops.sql` script, which removes all the temporary tables created during the update process. This cleans up the database after the update is complete and ensures that the temporary tables do not interfere with future updates or other processes.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/DPD/readme.md#_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\ndrops.sql\n```\n\n----------------------------------------\n\nTITLE: Load Input Tables\nDESCRIPTION: This SQL command loads CCAM data into input tables within the devv5 schema using the `load_input_tables` function from the `sources` schema. It specifies the vocabulary ID ('CCAM'), the vocabulary date ('20200701'), and the vocabulary version ('64').\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/CCAM/readme.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT sources.load_input_tables('CCAM',TO_DATE('20200701','YYYYMMDD'),'64');\n```\n\n----------------------------------------\n\nTITLE: Script For Delta Part 1 SQL\nDESCRIPTION: This SQL script, `script_for_delta_part_1.sql`, is the first part of a delta update process for the GRR vocabulary. It processes changes since the last update. Requires that the source file is imported into the `source_data` table before execution.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/GRR/readme.md#_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nscript_for_delta_part_1.sql\n```\n\n----------------------------------------\n\nTITLE: Running crm_changes.sql\nDESCRIPTION: This script deprecates existing mappings for specific ICD10 codes and adds updated mappings to the concept_relationship_manual table. The script should be run after the manual review and mapping process is completed and the manual mappings have been verified.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/CIM10/manual_work/readme.md#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\ncrm_changes.sql\n```\n\n----------------------------------------\n\nTITLE: Creating Index on NDC History Table SQL\nDESCRIPTION: This SQL statement creates an index named `idx_ndc_hist_cc` on the `concept_code` column of the `ndc_history` table, which improves query performance when filtering or sorting by concept code.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/working/packages/APIgrabber/readme.md#_snippet_8\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE INDEX idx_ndc_hist_cc ON apigrabber.ndc_history (concept_code);\n```\n\n----------------------------------------\n\nTITLE: Modify Virtual User (Shorter) SQL\nDESCRIPTION: This SQL script provides a shorter version to modify an existing virtual user's block status using the `admin_pack.ModifyVirtualUser` function. MANAGE_USER privilege is required.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/working/packages/admin_pack/readme.md#_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nDO $_$\nBEGIN\n\tPERFORM admin_pack.ModifyVirtualUser(\n\t\tpUserID           =>admin_pack.GetUserIDByLogin('dev_jdoe'), --user's virtual login\n\t\tpIsBlocked        =>TRUE --just block the specified user\n\t);\nEND $_$;\n```\n\n----------------------------------------\n\nTITLE: Create Source Tables SQL\nDESCRIPTION: This SQL script creates the necessary source tables for loading META vocabulary data. It is a prerequisite for loading the data.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/META/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\ncreate_source_tables.sql\n```\n\n----------------------------------------\n\nTITLE: GenericUpdate Procedure Execution SQL\nDESCRIPTION: This SQL block executes the GenericUpdate procedure within the devv5 schema. It's a crucial step in the HemOnc vocabulary refresh process. It assumes that the load_stage.sql script has already been executed to populate the staging tables.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/HemOnc/readme.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nDO $_$\n    BEGIN\n        PERFORM devv5.GenericUpdate();\n    END $_$;\n```\n\n----------------------------------------\n\nTITLE: Additional DDL Script\nDESCRIPTION: This SQL script executes additional Data Definition Language (DDL) commands needed for the BDPM vocabulary update.  It is intended to supplement the 'create_source_tables.sql' script and should be run after it.  The script modifies the database schema to accommodate the BDPM data.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/BDPM/README.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nadditional_DDL.sql\n```\n\n----------------------------------------\n\nTITLE: Newly Concepts Standard Concept Status SQL\nDESCRIPTION: This SQL script retrieves statistics on the standard concept status of newly added concepts by executing the `get_newly_concepts_standard_concept_status` function within the `qa_tests` schema. The results provide insights into the initial standardization of newly introduced concepts.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/OPS/readme.md#_snippet_9\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM qa_tests.get_newly_concepts_standard_concept_status();\n```\n\n----------------------------------------\n\nTITLE: Creating RxNorm to SPL Mappings Table SQL\nDESCRIPTION: This SQL statement creates the `rxnorm2spl_mappings` table, which maps RxNorm concept codes to SPL codes. The table includes columns for concept code and SPL code.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/working/packages/APIgrabber/readme.md#_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE apigrabber.rxnorm2spl_mappings\n(\n\t\tCONCEPT_CODE  VARCHAR(50),\n\t\tSPL_CODE      VARCHAR(4000)\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Temporary RxNorm to NDC Mappings Table SQL\nDESCRIPTION: This SQL statement creates a temporary table `rxnorm2ndc_mappings_tmp` with the same structure as the `rxnorm2ndc_mappings` table, using the LIKE clause to inherit the column definitions.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/working/packages/APIgrabber/readme.md#_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE apigrabber.rxnorm2ndc_mappings_tmp (LIKE apigrabber.rxnorm2ndc_mappings);\n```\n\n----------------------------------------\n\nTITLE: Basic Tables Check SQL\nDESCRIPTION: This SQL query retrieves the results from the `get_checks` function in the `qa_tests` schema. This function is designed to perform basic quality assurance checks on the vocabulary tables. The expected output is NULL, indicating no issues were found.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/SNOMED Veterinary/readme.md#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM qa_tests.get_checks();\n```\n\n----------------------------------------\n\nTITLE: Extracting concept_synonym_manual table data\nDESCRIPTION: This SQL query extracts data from the concept_synonym_manual table and orders it for generating the CSV file. The resulting CSV is used to manually populate the concept_synonym_manual table after extraction.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/OMOP Extension/manual_work/readme.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT synonym_name,\n       synonym_concept_code,\n       synonym_vocabulary_id,\n       language_concept_id\nFROM concept_synonym_manual\nORDER BY synonym_vocabulary_id, synonym_concept_code, language_concept_id, synonym_name\n```\n\n----------------------------------------\n\nTITLE: FastRecreateSchema in devv5\nDESCRIPTION: This SQL snippet executes the FastRecreateSchema function within the 'devv5' schema. It rebuilds the schema with specific parameters, excluding concept ancestor and including deprecated relationships, synonyms.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/HCPCS/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT devv5.FastRecreateSchema(main_schema_name=>'devv5', include_concept_ancestor=> false, include_deprecated_rels=> true, include_synonyms=> true);\n```\n\n----------------------------------------\n\nTITLE: Delete Manual Relationship SQL\nDESCRIPTION: This SQL script deletes a manual relationship from the `devv5.base_concept_relationship_manual` table using the `admin_pack.DeleteManualRelationship` function. It requires the DELETE_MANUAL_RELATIONSHIP privilege.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/working/packages/admin_pack/readme.md#_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nDO $_$\nBEGIN\n\tPERFORM admin_pack.DeleteManualRelationship(\n\t\tpConcept_code_1  =>'A',\n\t\tpVocabulary_id_1 =>'SNOMED',\n\t\tpConcept_code_2  =>'B',\n\t\tpVocabulary_id_2 =>'SNOMED',\n\t\tpRelationship_id =>'Maps to'\n\t);\nEND $_$;\n```\n\n----------------------------------------\n\nTITLE: Creating Temporary RxNorm to SPL Mappings Table SQL\nDESCRIPTION: This SQL statement creates a temporary table `rxnorm2spl_mappings_tmp` with the same structure as the `rxnorm2spl_mappings` table, using the LIKE clause to inherit the column definitions.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/working/packages/APIgrabber/readme.md#_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE apigrabber.rxnorm2spl_mappings_tmp (LIKE apigrabber.rxnorm2spl_mappings);\n```\n\n----------------------------------------\n\nTITLE: Load Stage SQL\nDESCRIPTION: This step runs the `load_stage.sql` script, which likely populates staging tables with data from the input tables. The staging tables are used in the subsequent generic update process.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/ETC/readme.md#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\n4. Run load_stage.sql\n```\n\n----------------------------------------\n\nTITLE: Recreate Schema in DevV5\nDESCRIPTION: This SQL script recreates the specified schema in DevV5, including concept ancestor, deprecated relationships, and synonyms. It is a prerequisite for loading and updating the vocabulary data.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/EORTC/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT devv5.FastRecreateSchema(main_schema_name=>'devv5', include_concept_ancestor=>true, include_deprecated_rels=>true, include_synonyms=>true);\n```\n\n----------------------------------------\n\nTITLE: Standard Concept Changes SQL\nDESCRIPTION: This SQL query retrieves changes in standard concepts using the `get_standard_concept_changes` function in the `qa_tests` schema. This helps to ensure that standard concept classifications are correctly updated.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/SNOMED Veterinary/readme.md#_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT DISTINCT * FROM qa_tests.get_standard_concept_changes();\n```\n\n----------------------------------------\n\nTITLE: Create Source Tables SQL\nDESCRIPTION: This step involves running the `create_source_tables.sql` script. The script is responsible for creating the necessary tables in the database to store the source data from the Nebraska Lexicon.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/Nebraska Lexicon/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\ncreate_source_tables.sql\n```\n\n----------------------------------------\n\nTITLE: Loading Input Tables using PL/SQL\nDESCRIPTION: This PL/SQL function call loads the input tables for the AMIS data source. It uses the sources.load_input_tables function, passing 'AMIS' as the data source parameter. This function is crucial for loading and transforming the input data.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/AMIS/README.md#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT sources.load_input_tables('AMIS');\n```\n\n----------------------------------------\n\nTITLE: Creating NDC All Codes Table SQL\nDESCRIPTION: This SQL statement creates the `ndc_all_codes` table, which is used to store all NDC concept codes. It has one column, `concept_code`, of type VARCHAR(50).\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/working/packages/APIgrabber/readme.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE apigrabber.ndc_all_codes (concept_code VARCHAR(50));\n```\n\n----------------------------------------\n\nTITLE: Get Changes Concept Mapping (SQL)\nDESCRIPTION: This SQL query retrieves a distinct set of records from the result of the `get_changes_concept_mapping` function in the `qa_tests` schema for the 'devv5' schema. It identifies changes in concept mappings.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/ICD10PCS/readme.md#_snippet_9\n\nLANGUAGE: SQL\nCODE:\n```\n    SELECT DISTINCT * FROM qa_tests.get_changes_concept_mapping('devv5');\n```\n\n----------------------------------------\n\nTITLE: Drug Name and Concept ID Mapping\nDESCRIPTION: This snippet represents a row in the vocabulary mapping file. It includes the drug name, concept ID, a descriptive name, and a flag indicating whether the mapping is active or primary. The snippet demonstrates the structure and content of the mapping entries.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/GRR/manual_work/relationship_to_concept_old.txt#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nLisinopril Tad\t43571048\tLisinopril Tad\t1\n```\n\n----------------------------------------\n\nTITLE: Creating Temporary NDC History Table SQL\nDESCRIPTION: This SQL statement creates a temporary table `ndc_history_tmp` with the same structure as the `ndc_history` table, using the LIKE clause to inherit the column definitions.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/working/packages/APIgrabber/readme.md#_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE apigrabber.ndc_history_tmp (LIKE apigrabber.ndc_history);\n```\n\n----------------------------------------\n\nTITLE: Drug Name and Concept ID Mapping\nDESCRIPTION: This snippet represents a row in the vocabulary mapping file. It includes the drug name, concept ID, a descriptive name, and a flag indicating whether the mapping is active or primary. The snippet demonstrates the structure and content of the mapping entries.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/GRR/manual_work/relationship_to_concept_old.txt#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nLisiplus Stada\t43571060\tLisiplus Stada\t1\n```\n\n----------------------------------------\n\nTITLE: Drug Name and Concept ID Mapping\nDESCRIPTION: This snippet represents a row in the vocabulary mapping file. It includes the drug name, concept ID, a descriptive name, and a flag indicating whether the mapping is active or primary. The snippet demonstrates the structure and content of the mapping entries.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/GRR/manual_work/relationship_to_concept_old.txt#_snippet_11\n\nLANGUAGE: text\nCODE:\n```\nLisuride\t19091472\tLisuride\t1\n```\n\n----------------------------------------\n\nTITLE: Generic Update SQL\nDESCRIPTION: This SQL block executes the `GenericUpdate` procedure within the `devv5` schema. The `GenericUpdate` procedure is crucial for applying vocabulary updates and modifications to the database. It ensures the vocabulary data is synchronized and up-to-date.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/SNOMED Veterinary/readme.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nDO $_$\n   BEGIN\n       PERFORM devv5.GenericUpdate();\n   END $_$;\n```\n\n----------------------------------------\n\nTITLE: Generic Update in devv5\nDESCRIPTION: This SQL statement runs the `GenericUpdate` procedure within the 'devv5' schema.  The `GenericUpdate` procedure performs a series of updates and transformations across the vocabulary tables within the schema. This procedure is used to apply generic updates and changes across the vocabulary tables.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/Read/readme.md#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT devv5.GenericUpdate();\n```\n\n----------------------------------------\n\nTITLE: Loading Source Data into Tables\nDESCRIPTION: This SQL script (01_1_source_table.sql) is executed in the DEVV5 schema to load the source data into the appropriate tables. This prepares the data for further processing and integration.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/AMIS/README.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\n/* Placeholder for the actual SQL script content of 01_1_source_table.sql */\n-- INSERT INTO ... SELECT ...\n\n```\n\n----------------------------------------\n\nTITLE: Load Stage SQL\nDESCRIPTION: This step executes the `load_stage.sql` script. This script is responsible for loading data from the source tables into the staging tables in preparation for the vocabulary update process.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/NFC/readme.md#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nload_stage.sql\n```\n\n----------------------------------------\n\nTITLE: Create Privilege SQL\nDESCRIPTION: This SQL script creates a new privilege with a specified name and description using the `admin_pack.CreatePrivilege` function. MANAGE_PRIVILEGE privilege is required.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/working/packages/admin_pack/readme.md#_snippet_18\n\nLANGUAGE: sql\nCODE:\n```\nDO $_$\nBEGIN\n\tPERFORM admin_pack.CreatePrivilege(\n\t\tpPrivilegeName         =>'NEW_PRIVILEGE', --name\n\t\tpPrivilegeDescription  =>'Privilege for doing some tasks' --description\n\t);\nEND $_$;\n```\n\n----------------------------------------\n\nTITLE: Checking Basic Tables\nDESCRIPTION: This SQL statement queries a function to perform checks on the basic tables after the update. It expects the function to return NULL if the basic tables are in a valid state.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/CVX/readme.md#_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM qa_tests.get_checks();\n```\n\n----------------------------------------\n\nTITLE: Modify User Privilege SQL\nDESCRIPTION: This SQL script modifies a user's privileges, including the start date, end date, and blocked status using the `admin_pack.ModifyUserPrivilege` function. It uses `admin_pack.GetUserIDByLogin` and `admin_pack.GetPrivilegeIDByName`. MANAGE_USER privilege is required.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/working/packages/admin_pack/readme.md#_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nDO $_$\nBEGIN\n\tPERFORM admin_pack.ModifyUserPrivilege(\n\t\tpUserID          =>admin_pack.GetUserIDByLogin('dev_jdoe'), --user's virtual login\n\t\tpPrivilegeID     =>admin_pack.GetPrivilegeIDByName('MANAGE_USER'),\n\t\tpValidStartDate  =>NULL, --set NULL if you don't want to change the start date\n\t\tpValidEndDate    =>NULL, --set NULL if you don't want to change the end date\n\t\tpIsBlocked       =>TRUE --block privilege for the specified user\n\t);\nEND $_$;\n```\n\n----------------------------------------\n\nTITLE: Newly Concepts Standard Concept Status SQL\nDESCRIPTION: This SQL query retrieves newly concepts' standard concept statuses using the `get_newly_concepts_standard_concept_status` function in the `qa_tests` schema. It checks if the newly added concepts have been correctly assigned a standard concept status.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/SNOMED Veterinary/readme.md#_snippet_8\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT DISTINCT * FROM qa_tests.get_newly_concepts_standard_concept_status();\n```\n\n----------------------------------------\n\nTITLE: Check Basic Tables in SQL\nDESCRIPTION: This SQL command retrieves results from a QA test to check the basic vocabulary tables for issues after the generic update has been performed. This is to confirm data integrity after running the `GenericUpdate` procedure and the expected result is NULL if no errors are found.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/MedDRA/readme.md#_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM qa_tests.get_checks();\n```\n\n----------------------------------------\n\nTITLE: Newly Added Concepts Standard Concept Status\nDESCRIPTION: This SQL query retrieves newly added concepts and their standard concept status between the current schema and 'devv5'. It relies on the `qa_tests.get_newly_concepts_standard_concept_status` function.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/NDC_SPL/readme.md#_snippet_9\n\nLANGUAGE: SQL\nCODE:\n```\nselect * from qa_tests.get_newly_concepts_standard_concept_status(pCompareWith=>'devv5');\n```\n\n----------------------------------------\n\nTITLE: Base Manual Tables\nDESCRIPTION: These are the names of the \"basic\" manual tables stored in the devv5 schema, which are copied to specified schemas when the FastRecreateSchema script runs.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/working/packages/admin_pack/readme.md#_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ndevv5.base_concept_manual\ndevv5.base_concept_relationship_manual\ndevv5.base_concept_synonym_manual\n```\n\n----------------------------------------\n\nTITLE: Create Source Tables SQL\nDESCRIPTION: This SQL script is a prerequisite for loading UMLS data. It creates the necessary tables within the SOURCES schema to store the UMLS data before it is integrated into the main vocabulary.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/UMLS/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\ncreate_source_tables.sql\n```\n\n----------------------------------------\n\nTITLE: Running Generic Update Procedure in SQL\nDESCRIPTION: This step executes the `devv5.GenericUpdate()` stored procedure to merge the data from the staging tables into the core vocabulary tables. The `devv5` schema must exist.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/CGI/readme.md#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nRun generic_update: devv5.GenericUpdate();\n```\n\n----------------------------------------\n\nTITLE: Generic Update PL/pgSQL\nDESCRIPTION: This step executes the 'GenericUpdate' function, which performs the actual update of the vocabulary tables in the DevV5 schema. It uses the staged data to update concept, concept_relationship, and concept_synonym tables.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/Indication/readme.md#_snippet_3\n\nLANGUAGE: PL/pgSQL\nCODE:\n```\ndevv5.GenericUpdate();\n```\n\n----------------------------------------\n\nTITLE: Check Staging Tables in SQL\nDESCRIPTION: This SQL command checks the staging tables after the data has been loaded and transformed. It uses a quality assurance function to identify any issues or inconsistencies in the staged data before proceeding with the update process. Returns NULL if no errors are found.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/MedDRA/readme.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM qa_tests.check_stage_tables ();\n```\n\n----------------------------------------\n\nTITLE: Create Source Tables SQL\nDESCRIPTION: This SQL script creates the source tables needed for the ICD9Proc vocabulary update. It is the first step in the update process and prepares the database for loading data from external sources.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/ICD9Proc/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\n1. Run create_source_tables.sql\n```\n\n----------------------------------------\n\nTITLE: Getting Concept Summary\nDESCRIPTION: This SQL statement queries a function to retrieve a summary of the concept table.  The function get_summary takes the table name 'concept' as a parameter and returns summary statistics.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/CVX/readme.md#_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM qa_tests.get_summary('concept');\n```\n\n----------------------------------------\n\nTITLE: Run Generic Update\nDESCRIPTION: This SQL script executes the generic update process. The EORTC QLQ is treated as a full source vocabulary.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/EORTC/readme.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT devv5.genericupdate();\n```\n\n----------------------------------------\n\nTITLE: Recreate Schema SQL\nDESCRIPTION: This snippet recreates the database schema using the FastRecreateSchema stored procedure.  It includes concept ancestor, deprecated relationships, and synonyms.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/SNOMED/readme.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT devv5.FastRecreateSchema(main_schema_name=>'devv5', include_concept_ancestor=> true, include_deprecated_rels=> true, include_synonyms=> true);\n```\n\n----------------------------------------\n\nTITLE: Getting Concept Relationship Summary\nDESCRIPTION: This SQL statement queries a function to retrieve a summary of the concept_relationship table. The function get_summary takes the table name 'concept_relationship' as a parameter and returns summary statistics.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/CVX/readme.md#_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM qa_tests.get_summary('concept_relationship');\n```\n\n----------------------------------------\n\nTITLE: QA Checks\nDESCRIPTION: This SQL query performs a series of QA checks after the generic update.  It expects to retrieve NULL if all checks pass. It depends on the `QA_TESTS.GET_CHECKS()` function.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/NDC_SPL/readme.md#_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM QA_TESTS.GET_CHECKS();\n```\n\n----------------------------------------\n\nTITLE: Staging Manual Tables in SQL\nDESCRIPTION: This SQL script stages the manual tables after the data has been extracted from the CSV file.  The script is executed after populating the nccd_manual table.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/NCCD/manual_work/readme.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nRun manual_stage_tables.sql\n```\n\n----------------------------------------\n\nTITLE: Creating Source Tables in SQL\nDESCRIPTION: This step involves running the `create_source_tables.sql` script to create necessary tables in the database schema. It is a prerequisite for loading and processing the CGI data.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/CGI/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nRun create_source_tables.sql\n```\n\n----------------------------------------\n\nTITLE: Load Input Tables SQL\nDESCRIPTION: This step uses a SQL function `sources.load_input_tables` to load data into the input tables for GPI vocabulary from the provided date and version.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/GPI/readme.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT sources.load_input_tables('GPI',TO_DATE('20150506','YYYYMMDD'),'RXNORM CROSS REFERENCE 15.2.1.002');\n```\n\n----------------------------------------\n\nTITLE: Basic Tables Check\nDESCRIPTION: This SQL snippet queries the 'qa_tests.get_checks()' function to perform basic checks on the tables. The expected result is NULL, indicating no issues were found.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/HCPCS/readme.md#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM qa_tests.get_checks();\n```\n\n----------------------------------------\n\nTITLE: Get Newly Concepts\nDESCRIPTION: This SQL script retrieves newly created concepts using qa_tests.get_newly_concepts(). The results should be interpreted to understand the new concepts added during the vocabulary update.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/EORTC/readme.md#_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM qa_tests.get_newly_concepts();\n```\n\n----------------------------------------\n\nTITLE: GenericUpdate Procedure Execution\nDESCRIPTION: This SQL snippet executes the GenericUpdate stored procedure within the 'devv5' schema. It's wrapped in a DO block to allow procedure execution directly within the SQL environment.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/HCPCS/readme.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nDO $_$\nBEGIN\n    PERFORM devv5.GenericUpdate();\nEND $_$;\n```\n\n----------------------------------------\n\nTITLE: Run FastRecreateSchema in SQL\nDESCRIPTION: This SQL statement executes the FastRecreateSchema function to rebuild the schema, including concept ancestor, deprecated relationships, and synonyms. The FastRecreateSchema function rebuilds the specified schema with the given configuration.  Parameters control the inclusion of concept ancestor relationships, deprecated relationships and synonyms.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/ICD10/readme.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT devv5.FastRecreateSchema(main_schema_name=>'devv5', include_concept_ancestor=>false, include_deprecated_rels=>true, include_synonyms=>true);\n```\n\n----------------------------------------\n\nTITLE: Get MedDRA Concept Summary in SQL\nDESCRIPTION: This SQL query retrieves a summary of the concepts related to MedDRA in the 'concept' table. It is used to analyze the impact of the update on the concept table, focusing specifically on MedDRA vocabulary.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/MedDRA/readme.md#_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM qa_tests.get_summary('concept')\nWHERE vocabulary_id_1 = 'MedDRA';\n```\n\n----------------------------------------\n\nTITLE: Creating Additional Tables (DDL)\nDESCRIPTION: This SQL script (01_3_additional_ddl.sql) creates additional tables that are required beyond the standard DDL for the AMIS upload/update process. This step is necessary to accommodate specific AMIS data structures.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/AMIS/README.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\n/* Placeholder for the actual SQL script content of 01_3_additional_ddl.sql */\n-- CREATE TABLE ...\n-- ALTER TABLE ...\n\n```\n\n----------------------------------------\n\nTITLE: SQL Script Execution for ICD CDE Integration\nDESCRIPTION: Executes the ICD_CDE_source.sql script. This script integrates data into the ICD common data environment, preparing the data for subsequent manual review and mapping processes. It ensures consistency and accuracy in the integrated vocabulary.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/ICD10CN/manual_work/readme.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: Changes Concept Mapping SQL\nDESCRIPTION: This SQL query retrieves changes in concept mapping using the `get_changes_concept_mapping` function in the `qa_tests` schema. This checks for any changes or updates in the concept mappings, ensuring the relationships between concepts are maintained correctly.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/SNOMED Veterinary/readme.md#_snippet_9\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT DISTINCT * FROM qa_tests.get_changes_concept_mapping();\n```\n\n----------------------------------------\n\nTITLE: Get Domain Changes\nDESCRIPTION: This SQL script retrieves domain changes using qa_tests.get_domain_changes(). The results should be interpreted to understand the changes made during the vocabulary update.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/EORTC/readme.md#_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM qa_tests.get_domain_changes();\n```\n\n----------------------------------------\n\nTITLE: Run Generic Update SQL\nDESCRIPTION: This SQL statement executes the `GenericUpdate` procedure in the `devv5` schema. This procedure performs the final update of the vocabulary tables based on the staged data.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/CAP/readme.md#_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\ndevv5.GenericUpdate();\n```\n\n----------------------------------------\n\nTITLE: Generic Update SQL\nDESCRIPTION: This script runs the GenericUpdate package to update the vocabulary.  The package is located at /working/packages/generic_update.sql and operates on the devv5 schema.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/UK_Biobank/readme.md#_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\ndevv5.GenericUpdate(). (/working/packages/generic_update.sql)\n```\n\n----------------------------------------\n\nTITLE: Loading Input Tables SQL\nDESCRIPTION: This SQL command loads the input tables for ICD9ProcCN vocabulary update. It specifies the vocabulary name, vocabulary date, and version.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/ICD9ProcCN/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT sources.load_input_tables('ICD9ProcCN',TO_DATE('20170101','YYYYMMDD'),'2017 Release');\n```\n\n----------------------------------------\n\nTITLE: Run additional DDL SQL script\nDESCRIPTION: Executes the SQL script 'additional_DDL.sql' to prepare the database schema. This step is a prerequisite to loading source tables.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/LPD_Belgium/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nadditional_DDL.sql\n```\n\n----------------------------------------\n\nTITLE: Check Stage Tables\nDESCRIPTION: This SQL query checks the stage tables for any errors.  It should return NULL if the stage tables are clean. It relies on a function `qa_tests.check_stage_tables()`.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/NDC_SPL/readme.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM qa_tests.check_stage_tables ();\n```\n\n----------------------------------------\n\nTITLE: Load Stage SQL\nDESCRIPTION: This SQL script loads the stage tables with data from the input tables. It prepares the data for the generic update process.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/ICD9Proc/readme.md#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\n5. Run load_stage.sql\n```\n\n----------------------------------------\n\nTITLE: Creating Source Tables SQL\nDESCRIPTION: This SQL script is responsible for creating the necessary source tables in the database schema to accommodate the CIEL vocabulary data before loading. It is a prerequisite step to import the CIEL source files. This step ensures that the database has the required table structures to hold the source data before processing.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/CIEL/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\n1. Run create_source_tables.sql\n```\n\n----------------------------------------\n\nTITLE: Get MedDRA Concept Relationship Summary in SQL\nDESCRIPTION: This SQL query retrieves a summary of the concept relationships related to MedDRA. It checks for relationships where either the source or target vocabulary is MedDRA, providing insights into how MedDRA concepts are linked to other vocabularies.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/MedDRA/readme.md#_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM qa_tests.get_summary('concept_relationship')\nWHERE vocabulary_id_1 = 'MedDRA' OR vocabulary_id_2 = 'MedDRA';\n```\n\n----------------------------------------\n\nTITLE: Script For Delta Part 2 SQL\nDESCRIPTION: This SQL script, `script_for_delta_part_2.sql`, is the second part of a delta update process. It continues the process of updating the vocabulary with changes since the last version. The `RELATIONSHIP_TO_CONCEPT_MANUAL` table should be populated with mappings before running the script.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/GRR/readme.md#_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\nscript_for_delta_part_2.sql\n```\n\n----------------------------------------\n\nTITLE: Execute Generic Update\nDESCRIPTION: This step executes the `devv5.GenericUpdate()` procedure. This assumes that a procedure named 'GenericUpdate' exists in the 'devv5' schema.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/MeSH/readme.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\ndevv5.GenericUpdate();\n```\n\n----------------------------------------\n\nTITLE: Create Source Tables SQL\nDESCRIPTION: This SQL script creates the necessary source tables in the database. It is the first step in preparing the environment for loading the CAP vocabulary data.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/CAP/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\ncreate_source_tables.sql\n```\n\n----------------------------------------\n\nTITLE: Run MapDrugVocab SQL script\nDESCRIPTION: Executes the 'MapDrugVocab.sql' script to map drug vocabularies. Requires the /working/directory path to be available.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/LPD_Belgium/readme.md#_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nMapDrugVocab.sql\n```\n\n----------------------------------------\n\nTITLE: Run drops SQL script\nDESCRIPTION: Executes the 'drops.sql' script to clean up the working directory by dropping temporary tables or objects.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/LPD_Belgium/readme.md#_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\ndrops.sql\n```\n\n----------------------------------------\n\nTITLE: Get Standard Concept Changes in SQL\nDESCRIPTION: This SQL query retrieves any changes made to the standard concept status of concepts during the MedDRA update. It is used to monitor how the standard concept status has been modified.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/MedDRA/readme.md#_snippet_8\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM qa_tests.get_standard_concept_changes();\n```\n\n----------------------------------------\n\nTITLE: Get Concept Summary in SQL\nDESCRIPTION: This SQL query retrieves a summary of the 'concept' table from the qa_tests schema using the get_summary() function. This summary provides insights into the state of the 'concept' table after the vocabulary update. The function requires the table name as input.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/CPT4/readme.md#_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM qa_tests.get_summary('concept');\n```\n\n----------------------------------------\n\nTITLE: Loading Data into Stage Tables in SQL\nDESCRIPTION: This step involves running the `load_stage.sql` script to load the data from the downloaded CGI zip file into staging tables. This allows for data transformation and validation before integration.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/CGI/readme.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nRun load_stage.sql\n```\n\n----------------------------------------\n\nTITLE: Concept Relationship Summary SQL\nDESCRIPTION: This SQL query retrieves a distinct summary of the 'concept_relationship' table from the `devv5` schema, using the `get_summary` function in the `qa_tests` schema. This is a critical step to verify relationship integrity after the SNOMED update.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/SNOMED Veterinary/readme.md#_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT DISTINCT * FROM qa_tests.get_summary('concept_relationship', 'devv5');\n```\n\n----------------------------------------\n\nTITLE: Basic Tables Check - SQL\nDESCRIPTION: This SQL query executes the `get_checks()` function from the `qa_tests` schema. The result should be NULL if all checks pass, indicating that the vocabulary update was successful.  Requires `qa_tests.get_checks()` function to exist.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/CDISC/readme.md#_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM qa_tests.get_checks();\n```\n\n----------------------------------------\n\nTITLE: Create Source Tables SQL\nDESCRIPTION: This step involves running the create_source_tables.sql script to create necessary source tables in the database.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/GPI/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nRun create_source_tables.sql\n```\n\n----------------------------------------\n\nTITLE: Get Changes Concept Mapping\nDESCRIPTION: This SQL script retrieves changes in concept mapping using qa_tests.get_changes_concept_mapping(). The results should be interpreted to understand the concept mapping related changes.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/EORTC/readme.md#_snippet_9\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM qa_tests.get_changes_concept_mapping();\n```\n\n----------------------------------------\n\nTITLE: Concept Relationship Summary SQL\nDESCRIPTION: This SQL script retrieves a summary of the concept_relationship table by executing the `get_summary` function within the `qa_tests` schema with the argument 'concept_relationship'. The results of this query provide insights into the overall state of the concept_relationship table.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/OPS/readme.md#_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM qa_tests.get_summary('concept_relationship');\n```\n\n----------------------------------------\n\nTITLE: Load Input Tables\nDESCRIPTION: This SQL statement loads the EphMRA ATC data into input tables within the DevV5 schema. It specifies the source name ('EphMRA ATC'), the vocabulary date (July 4, 2016), and the vocabulary version ('EphMRA ATC 2016'). Requires the sources package to be present in the database.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/EphMRA ATC/readme.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT sources.load_input_tables('EphMRA ATC',TO_DATE('20160704','YYYYMMDD'),'EphMRA ATC 2016');\n```\n\n----------------------------------------\n\nTITLE: Checking Stage Tables\nDESCRIPTION: This SQL statement queries a function to check the stage tables, which are used during the vocabulary update process. It expects the function to return NULL if the stage tables are in a valid state.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/CVX/readme.md#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM qa_tests.check_stage_tables();\n```\n\n----------------------------------------\n\nTITLE: Basic Tables Check SQL\nDESCRIPTION: This SQL script runs checks on the basic tables by executing the `get_checks` function within the `qa_tests` schema. It expects the function to return NULL if the basic tables are correct, indicating no errors or inconsistencies.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/OPS/readme.md#_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM qa_tests.get_checks();\n```\n\n----------------------------------------\n\nTITLE: Fast Recreate Schema\nDESCRIPTION: This SQL snippet recreates the schema in the devv5 database. It includes options to include or exclude concept ancestor, deprecated relationships, and synonyms.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/NDC_SPL/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT devv5.FastRecreateSchema(main_schema_name=>'devv5', include_concept_ancestor=>false, include_deprecated_rels=>true, include_synonyms=>true);\n```\n\n----------------------------------------\n\nTITLE: Get Newly Concepts Standard Concept Status (SQL)\nDESCRIPTION: This SQL query retrieves a distinct set of records from the result of the `get_newly_concepts_standard_concept_status` function in the `qa_tests` schema for the 'devv5' schema.  It identifies the standard concept status of newly added concepts.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/ICD10PCS/readme.md#_snippet_8\n\nLANGUAGE: SQL\nCODE:\n```\n    SELECT DISTINCT * FROM qa_tests.get_newly_concepts_standard_concept_status('devv5');\n```\n\n----------------------------------------\n\nTITLE: GRR Data Extraction Query SQL\nDESCRIPTION: This SQL query extracts data from the GRR database (GEDA and GRR) to create a dataset for the GRR vocabulary. It joins several GRR tables and filters out non-drug entries. The result set should be saved as 'grr_new_2'.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/GRR/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nselect distinct\n  fcc,\n  pri_ifa_cd as pzn, \n  intl_pack_form_desc,\n  intl_pack_strnt_desc,\n  intl_pack_size_desc,\n  pack_desc,\n  pack_substn_cnt,\n  pri_synm_nm as molecule,\n  wgt_qty,\n  wgt_uom_cd,\n  pack_addl_strnt_desc,\n  pack_wgt_qty,\n  pack_wgt_uom_cd,\n  pack_vol_qty,\n  pack_vol_uom_cd,\n  pack_size_cnt,\n  grr_pack_composn.abs_strnt_qty,\n  grr_pack_composn.abs_strnt_uom_cd,\n  rltv_strnt_qty,\n  hmo_dilution_cd,\n  form_desc,\n  generic_prod_lng_nm as brand_name1,\n  ims_prod_lng_nm as brand_name\nfrom grr_pack\nleft join grr_pack_composn on grr_pack.grr_pack_cd=grr_pack_composn.grr_pack_cd\nleft join grr_mlcl using(mlcl_id) -- get molecule information\nwhere coalesce(ctrysp_reg_status_cd, 'X') not in ('NOTKNOWN', 'X', 'UNREG'); -- remove non-drugs\n```\n\n----------------------------------------\n\nTITLE: Load Input Tables (SQL)\nDESCRIPTION: This SQL command loads the extracted GGR data into the staging tables within the DevV5 schema.  The `load_input_tables` function takes the vocabulary source name ('GGR'), the vocabulary date (TO_DATE('20170901', 'yyyymmdd')), and a label ('GGR 20170901') as arguments. The function likely handles the data import from CSV files into temporary tables within the database.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/GGR/readme.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT sources.load_input_tables('GGR',TO_DATE('20170901', 'yyyymmdd'),'GGR 20170901');\n```\n\n----------------------------------------\n\nTITLE: Insert into concept_relationship_manual SQL\nDESCRIPTION: This script inserts data into the concept_relationship_manual table. It is a manual step and the script is located at /manual work/inserts_into_crm.sql.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/UK_Biobank/readme.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\n/manual work/inserts_into_crm.sql\n```\n\n----------------------------------------\n\nTITLE: Get Summary Concept Relationship\nDESCRIPTION: This SQL query retrieves a summary of changes in the 'concept_relationship' table between the current schema and 'devv5'. It relies on the `qa_tests.get_summary` function.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/NDC_SPL/readme.md#_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nselect * from qa_tests.get_summary (table_name=>'concept_relationship',pCompareWith=>'devv5');\n```\n\n----------------------------------------\n\nTITLE: Run genericupdate SQL script\nDESCRIPTION: Executes the 'genericupdate.sql' script to perform generic updates. Requires the /working/directory path to be available.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/LPD_Belgium/readme.md#_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\ngenericupdate.sql\n```\n\n----------------------------------------\n\nTITLE: Generic Update SQL\nDESCRIPTION: This step performs a generic update to the DevV5 database schema using the `devv5.GenericUpdate()` function.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/GPI/readme.md#_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nRun generic_update: devv5.GenericUpdate();\n```\n\n----------------------------------------\n\nTITLE: Generate concept_relationship_manual CSV\nDESCRIPTION: This SQL query is used to generate the CSV file for the concept_relationship_manual table. It selects specific columns from the concept_relationship_manual table and orders the results by vocabulary_id_1, vocabulary_id_2, relationship_id, concept_code_1, concept_code_2, invalid_reason, valid_start_date, and valid_end_date. This file is then uploaded into the working schema.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/LOINC/manual_work/readme.md#_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT concept_code_1,\n       concept_code_2,\n       vocabulary_id_1,\n       vocabulary_id_2,\n       relationship_id,\n       valid_start_date,\n       valid_end_date,\n       invalid_reason\nFROM concept_relationship_manual\nORDER BY vocabulary_id_1, vocabulary_id_2, relationship_id, concept_code_1, concept_code_2, invalid_reason, valid_start_date, valid_end_date\n```\n\n----------------------------------------\n\nTITLE: SQL: Load Stage Tables\nDESCRIPTION: This step executes the load_stage.sql script.  This script is responsible for transferring data from the source tables to the staging tables, preparing it for the final update process.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/CIViC/readme.md#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nload_stage.sql\n```\n\n----------------------------------------\n\nTITLE: Domain Changes Statistics Retrieval\nDESCRIPTION: This SQL snippet retrieves statistics about domain changes using the 'qa_tests.get_domain_changes()' function. The DISTINCT keyword ensures only unique change results are returned.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/HCPCS/readme.md#_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT DISTINCT * FROM qa_tests.get_domain_changes();\n```\n\n----------------------------------------\n\nTITLE: Run init_full SQL script\nDESCRIPTION: Executes the SQL script 'init_full.sql' to initialize the manual mapping table (relationship_to_concept_to_map). This table is used for manually mapping relationships between concepts.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/LPD_Belgium/readme.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\ninit_full.sql\n```\n\n----------------------------------------\n\nTITLE: View Manual Concepts SQL\nDESCRIPTION: These SQL queries retrieve data from the `devv5.v_base_concept_manual`, `devv5.v_base_concept_relationship_manual`, and `devv5.v_base_concept_synonym_manual` views, limiting the results to 100 rows. These views contain information about manual concepts and relationships with author and editor information. No privilege is required.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/working/packages/admin_pack/readme.md#_snippet_20\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM devv5.v_base_concept_manual LIMIT 100;\nSELECT * FROM devv5.v_base_concept_relationship_manual LIMIT 100;\nSELECT * FROM devv5.v_base_concept_synonym_manual LIMIT 100;\n```\n\n----------------------------------------\n\nTITLE: Generating concept_manual CSV file using SQL\nDESCRIPTION: This SQL query generates the CSV file for the concept_manual table. It selects specific columns from the concept_manual table and orders the results by vocabulary_id, concept_code, invalid_reason, valid_start_date, valid_end_date, and concept_name. The resulting data is then exported as a CSV file with specific formatting detailed in the document.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/CPT4/manual work/readme.md#_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT concept_name,\n       domain_id,\n       vocabulary_id,\n       concept_class_id,\n       standard_concept,\n       concept_code,\n       valid_start_date,\n       valid_end_date,\n       invalid_reason\nFROM concept_manual\nORDER BY vocabulary_id, concept_code, invalid_reason, valid_start_date, valid_end_date, concept_name\n```\n\n----------------------------------------\n\nTITLE: Run Basic Tables Check\nDESCRIPTION: This SQL script retrieves checks from qa_tests.get_checks(). The result should be NULL if all checks pass.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/EORTC/readme.md#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM qa_tests.get_checks();\n```\n\n----------------------------------------\n\nTITLE: Domain Changes Statistics SQL\nDESCRIPTION: This SQL statement executes the get_domain_changes function within the qa_tests schema. Requires the qa_tests.get_domain_changes() function to be defined. The results should be interpreted to analyze changes in domain assignments.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/HemOnc/readme.md#_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM qa_tests.get_domain_changes();\n```\n\n----------------------------------------\n\nTITLE: Extracting data into kdc_atc table using SQL\nDESCRIPTION: This SQL query is used to generate the CSV file that will be extracted into the `kdc_atc` table. It selects `concept_code`, `concept_code_2`, `vocabulary_id`, `vocabulary_id_2`, `relationship_id`, `valid_start_date`, `valid_end_date`, and `invalid_reason` columns from the `kdc_atc` table.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/ATC/manual work/readme.md#_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n    concept_code,\n    concept_code_2,\n    vocabulary_id,\n    vocabulary_id_2,\n    relationship_id,\n    valid_start_date,\n    valid_end_date,\n    invalid_reason\nFROM kdc_atc;\n```\n\n----------------------------------------\n\nTITLE: Create Source Tables SQL\nDESCRIPTION: This step involves running the `create_source_tables.sql` script. The specific content and functionality of this SQL script are not provided, but it is presumed to create the necessary tables in the database to house the NFC source data.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/NFC/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\ncreate_source_tables.sql\n```\n\n----------------------------------------\n\nTITLE: Selecting Data from concept_manual Table SQL\nDESCRIPTION: This SQL query retrieves data from the concept_manual table and orders the results based on vocabulary_id, concept_code, invalid_reason, valid_start_date, valid_end_date, and concept_name. The query is used to generate the content for uploading into the working schema.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/dmd/manual_work/readme.md#_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT concept_name,\n       domain_id,\n       vocabulary_id,\n       concept_class_id,\n       standard_concept,\n       concept_code,\n       valid_start_date,\n       valid_end_date,\n       invalid_reason\nFROM concept_manual\nORDER BY vocabulary_id, concept_code, invalid_reason, valid_start_date, valid_end_date, concept_name\n```\n\n----------------------------------------\n\nTITLE: Get Concept Summary (SQL)\nDESCRIPTION: This SQL query retrieves a distinct set of records from the result of the `get_summary` function in the `qa_tests` schema for the 'concept' table in the 'devv5' schema. It provides a summary of the data in the concept table.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/ICD10PCS/readme.md#_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\n    SELECT DISTINCT * FROM qa_tests.get_summary('concept','devv5');\n```\n\n----------------------------------------\n\nTITLE: Get Concept Summary\nDESCRIPTION: This SQL script retrieves a summary of the 'concept' table from the qa_tests schema. The results should be interpreted to understand the state of the vocabulary.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/EORTC/readme.md#_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM qa_tests.get_summary('concept');\n```\n\n----------------------------------------\n\nTITLE: Extract Concept Synonym Manual Data SQL\nDESCRIPTION: This SQL query extracts data from the `concept_synonym_manual` table to generate a CSV file for manual staging of concept synonyms. The query selects synonym-related columns and orders the result set by vocabulary, concept code, language, and synonym name. This facilitates manual handling of synonym data during vocabulary refresh.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/Read/manual_work/readme.md#_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT synonym_name,\n       synonym_concept_code,\n       synonym_vocabulary_id,\n       language_concept_id\nFROM concept_synonym_manual\nORDER BY synonym_vocabulary_id, synonym_concept_code, language_concept_id, synonym_name;\n```\n\n----------------------------------------\n\nTITLE: Get Concept Relationship Summary (SQL)\nDESCRIPTION: This SQL query retrieves a distinct set of records from the result of the `get_summary` function in the `qa_tests` schema for the 'concept_relationship' table in the 'devv5' schema. It provides a summary of the data in the concept_relationship table.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/ICD10PCS/readme.md#_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\n    SELECT DISTINCT * FROM qa_tests.get_summary('concept_relationship','devv5');\n```\n\n----------------------------------------\n\nTITLE: Selecting Data from concept_relationship_manual Table SQL\nDESCRIPTION: This SQL query retrieves data from the concept_relationship_manual table and orders the results based on vocabulary_id_1, vocabulary_id_2, relationship_id, concept_code_1, concept_code_2, invalid_reason, valid_start_date, and valid_end_date. The query is used to generate the content for the respective CSV file.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/dmd/manual_work/readme.md#_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT concept_code_1,\n       concept_code_2,\n       vocabulary_id_1,\n       vocabulary_id_2,\n       relationship_id,\n       valid_start_date,\n       valid_end_date,\n       invalid_reason\nFROM concept_relationship_manual\nORDER BY vocabulary_id_1, vocabulary_id_2, relationship_id, concept_code_1, concept_code_2, invalid_reason, valid_start_date, valid_end_date\n```\n\n----------------------------------------\n\nTITLE: Get Newly Concepts (SQL)\nDESCRIPTION: This SQL query retrieves a distinct set of records from the result of the `get_newly_concepts` function in the `qa_tests` schema for the 'devv5' schema. It identifies newly added concepts in the vocabulary.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/ICD10PCS/readme.md#_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\n    SELECT DISTINCT * FROM qa_tests.get_newly_concepts('devv5');\n```\n\n----------------------------------------\n\nTITLE: Get Standard Concept Changes\nDESCRIPTION: This SQL script retrieves changes in standard concepts using qa_tests.get_standard_concept_changes(). The results should be interpreted to understand modifications to existing standard concepts.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/EORTC/readme.md#_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM qa_tests.get_standard_concept_changes();\n```\n\n----------------------------------------\n\nTITLE: Extract Concept Manual Data SQL\nDESCRIPTION: This SQL query extracts data from the `concept_manual` table to generate a CSV file for manual staging. The query selects specific columns and orders the result set by vocabulary, concept code, invalid reason, valid start date, valid end date, and concept name. This is a crucial step in environments where automatic staging is not available.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/Read/manual_work/readme.md#_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT concept_name,\n       domain_id,\n       vocabulary_id,\n       concept_class_id,\n       standard_concept,\n       concept_code,\n       valid_start_date,\n       valid_end_date,\n       invalid_reason\nFROM concept_manual\nORDER BY vocabulary_id, concept_code, invalid_reason, valid_start_date, valid_end_date, concept_name;\n```\n\n----------------------------------------\n\nTITLE: Extracting data into new_atc_codes_ings_for_manual table using SQL\nDESCRIPTION: This SQL query is used to generate the CSV file that will be extracted into the `new_atc_codes_ings_for_manual` table. It selects `source`, `class_code`, `class_name`, `relationship_id`, `ids`, and `names` columns from the `new_atc_codes_ings_for_manual` table.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/ATC/manual work/readme.md#_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n    source,\n    class_code,\n    class_name,\n    relationship_id,\n    ids,\n    names\nFROM new_atc_codes_ings_for_manual\n```\n\n----------------------------------------\n\nTITLE: Querying concept_manual Table in SQL\nDESCRIPTION: This SQL query extracts data from the concept_manual table. It selects the concept_name, domain_id, vocabulary_id, concept_class_id, standard_concept, concept_code, valid_start_date, valid_end_date, and invalid_reason columns. The result set is ordered by vocabulary_id, concept_code, invalid_reason, valid_start_date, valid_end_date, and concept_name.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/RxNorm_E/readme_for_manual_tables.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT concept_name,\n       domain_id,\n       vocabulary_id,\n       concept_class_id,\n       standard_concept,\n       concept_code,\n       valid_start_date,\n       valid_end_date,\n       invalid_reason\nFROM concept_manual\nORDER BY vocabulary_id, concept_code, invalid_reason, valid_start_date, valid_end_date, concept_name\n```\n\n----------------------------------------\n\nTITLE: Create Source Tables SQL\nDESCRIPTION: Executes the SQL script create_source_tables.sql to create necessary source tables in the DevV5 schema. This step prepares the database to receive CCAM data.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/CCAM/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\ncreate_source_tables.sql\n```\n\n----------------------------------------\n\nTITLE: Create index file in Shell\nDESCRIPTION: This shell command creates an index file named `cap_allxmlfilelist.dat` containing a list of all XML files in the specified input directory. The file is used as input for subsequent data loading processes.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/CAP/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncd /path/to/input/folder/\nfind . -maxdepth 1 -name \"*.xml\" > cap_allxmlfilelist.dat\n```\n\n----------------------------------------\n\nTITLE: Extracting data into ned_adm_r table using SQL\nDESCRIPTION: This SQL query is used to generate the CSV file that will be extracted into the `ned_adm_r` table. It selects `class_code`, `class_name`, `old`, and `new` columns from the `new_adm_r` table.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/ATC/manual work/readme.md#_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \n       class_code,\n       class_name,\n       old,\n       new\nFROM new_adm_r\n```\n\n----------------------------------------\n\nTITLE: Loading Input Tables with SQL\nDESCRIPTION: This SQL statement calls the `load_input_tables` function from the `sources` schema to load ISBT data into the database. It assumes that the function and schema are properly configured in the DevV5 environment. The `ISBT` parameter specifies the data source to be loaded.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/ISBT/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT sources.load_input_tables('ISBT');\n```\n\n----------------------------------------\n\nTITLE: Run crm_changes.sql to Deprecate and Add Mappings (SQL)\nDESCRIPTION: This SQL script is used to deprecate old mappings for specific ICD10CM codes and add new mappings to the concept_relationship_manual table. This ensures the vocabulary is up-to-date with the latest mappings.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/ICD10CM/manual_work/readme.md#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nN/A - Script available at https://github.com/OHDSI/Vocabulary-v5.0/blob/icd10cm-documentation/ICD10CM/manual_work/crm_changes.sql\n```\n\n----------------------------------------\n\nTITLE: Load UMLS Input Tables SQL\nDESCRIPTION: This SQL statement loads the unpacked UMLS data into the input tables within the 'devv5' database. It specifies the source ('UMLS'), the vocabulary date ('20180507'), and the UMLS version ('2018AA').\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/UMLS/readme.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT sources.load_input_tables('UMLS',TO_DATE('20180507','YYYYMMDD'),'2018AA');\n```\n\n----------------------------------------\n\nTITLE: Running ICD_CDE_source.sql\nDESCRIPTION: This script integrates source data into the ICD common data environment. It serves to prepare the data for manual review and mapping. The successful execution of this script populates the CDE with the latest ICD data.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/CIM10/manual_work/readme.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nICD_CDE_source.sql\n```\n\n----------------------------------------\n\nTITLE: Extracting data into norske_result table using SQL\nDESCRIPTION: This SQL query is used to generate the CSV file that will be extracted into the `norske_result` table. It selects `concept_id`, `concept_name`, `form`, `atc_code`, `atc_name`, `rx_ids`, and `rx_names` columns from the `norske_result` table.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/ATC/manual work/readme.md#_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n    concept_id,\n    concept_name,\n    form,\n    atc_code,\n    atc_name,\n    rx_ids,\n    rx_names\nFROM norske_result;\n```\n\n----------------------------------------\n\nTITLE: Load Staging Tables SQL\nDESCRIPTION: This SQL script loads the staged data from the source tables into temporary staging tables. It prepares the data for the final update process by transforming and cleaning as necessary. It requires the source tables to be already created and populated.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/PPI/readme.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\n2. Run load_stage.sql\n```\n\n----------------------------------------\n\nTITLE: Creating relationship_to_concept_manual Table in SQL\nDESCRIPTION: This SQL script creates the table relationship_to_concept_manual with columns for source attribute name, source attribute concept class, target concept ID, target concept code, target concept name, precedence, conversion factor, and indicator. The table is used to store manually defined relationships between concepts.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/GRR/manual_work/manual_work_readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\ncreate table relationship_to_concept_manual\n\t(\n\t\tsource_attr_name varchar(255),\n\t\tsource_attr_concept_class varchar(50),\n\t\ttarget_concept_id integer,\n\t\ttarget_concept_code varchar(50),\n\t\ttarget_concept_name varchar(255),\n\t\tprecedence integer,\n\t\tconversion_factor float,\n\t\tindicator_rxe varchar(10)\n\t);\n```\n\n----------------------------------------\n\nTITLE: Run SQL script to load stage\nDESCRIPTION: This step involves executing the `load_stage.sql` script.  This script processes the data from the source tables and populates the staging tables with transformed and cleaned DRG data.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/DRG/readme.md#_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\n-- No specific SQL code provided, but this step refers to executing load_stage.sql\n```\n\n----------------------------------------\n\nTITLE: Running mapping_refresh.sql\nDESCRIPTION: This script creates the icd10_refresh table. This table is intended to contain a list of potential replacement mappings and codes that are currently without mappings. The script should be executed within the vocabulary database context.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/CIM10/manual_work/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nmapping_refresh.sql\n```\n\n----------------------------------------\n\nTITLE: Creating API Codes Failed Table SQL\nDESCRIPTION: This SQL statement creates the `api_codes_failed` table, used for storing concept codes that failed during API processing. It has a single column, `concept_code`, which is a VARCHAR(50).\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/working/packages/APIgrabber/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE apigrabber.api_codes_failed (concept_code VARCHAR(50));\n```\n\n----------------------------------------\n\nTITLE: Create icd10gm_refresh Table - SQL\nDESCRIPTION: This step involves running the mapping_refresh.sql script. This script is responsible for creating a table named icd10gm_refresh. The icd10gm_refresh table will contain a list of potential replacement mappings and codes that currently lack mappings.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/ICD10GM/manual_work/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nN/A - The code is located in the file mapping_refresh.sql (https://github.com/OHDSI/Vocabulary-v5.0/blob/icd10gm-documentation/ICD10GM/manual_work/mapping_refresh.sql)\n```\n\n----------------------------------------\n\nTITLE: Load input tables in devv5 (SQL)\nDESCRIPTION: This SQL statement calls the `sources.load_input_tables` function to load the prepared data into the designated DRG input tables within the devv5 database schema.  It takes the vocabulary date as input. Ensure the date matches the intended vocabulary release date.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/DRG/readme.md#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT sources.load_input_tables('DRG',TO_DATE('20150417','YYYYMMDD'));\n```\n\n----------------------------------------\n\nTITLE: Run pp SQL script\nDESCRIPTION: Executes the 'pp.sql' script. The purpose of this script is not explicitly defined in the provided documentation.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/LPD_Belgium/readme.md#_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\npp.sql\n```\n\n----------------------------------------\n\nTITLE: Run create_source_tables.sql\nDESCRIPTION: This step involves executing the `create_source_tables.sql` script. The purpose of this script is to create the necessary source tables within the database schema, which will be used as staging areas for data loading and transformation during the CDM update process.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/CDM/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\n-- No specific code provided for this step, assuming the script contains SQL statements to create tables.\n```\n\n----------------------------------------\n\nTITLE: Restore Basic Tables in SQL\nDESCRIPTION: This SQL block restores the base tables to a specific point in time using the `audit.RestoreBasicTables()` function. The `iLogID` parameter specifies the log ID to restore to.  This is the final step in reverting the dev-schema to a previous state based on the audit logs.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/working/packages/audit_pack/readme.md#_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nDO $$\nBEGIN\n\tPERFORM audit.RestoreBasicTables(iLogID=>XXXXX);\nEND $$;\n```\n\n----------------------------------------\n\nTITLE: Building RxE Vocabulary SQL\nDESCRIPTION: This step involves running the `Build_RxE.sql` script, which builds the RxE vocabulary based on the data in the staging tables. This script likely includes logic for creating, updating, and deleting concepts and relationships within the RxE vocabulary based on the DPD data.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/DPD/readme.md#_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nBuild_RxE.sql\n```\n\n----------------------------------------\n\nTITLE: Concept Summary SQL\nDESCRIPTION: This SQL query retrieves a distinct summary of the 'concept' table from the `devv5` schema, using the `get_summary` function in the `qa_tests` schema. This helps to understand the overall structure and content of the concept table after the update.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/SNOMED Veterinary/readme.md#_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT DISTINCT * FROM qa_tests.get_summary('concept', 'devv5');\n```\n\n----------------------------------------\n\nTITLE: Drug Name and Concept ID Mapping\nDESCRIPTION: This snippet represents a row in the vocabulary mapping file. It includes the drug name, concept ID, a descriptive name, and a flag indicating whether the mapping is active or primary. The snippet demonstrates the structure and content of the mapping entries.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/GRR/manual_work/relationship_to_concept_old.txt#_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nLisodura\t43571062\tLisodura\t1\n```\n\n----------------------------------------\n\nTITLE: Concept Summary SQL\nDESCRIPTION: This SQL script retrieves a summary of the concept table by executing the `get_summary` function within the `qa_tests` schema with the argument 'concept'. The results of this query provide insights into the overall state of the concept table.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/OPS/readme.md#_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM qa_tests.get_summary('concept');\n```\n\n----------------------------------------\n\nTITLE: Executing Generic Update Stored Procedure\nDESCRIPTION: This SQL statement executes the `GenericUpdate` stored procedure within the `devv5` schema. This procedure is presumably responsible for applying the changes related to the ISBT update to the target tables. It is assumed that the stored procedure has been defined and configured in the database.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/ISBT/readme.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\ndevv5.GenericUpdate();\n```\n\n----------------------------------------\n\nTITLE: Generic Update - SQL\nDESCRIPTION: This SQL statement executes the GenericUpdate procedure for vocabulary updates. It's a generic function call without specific parameters in this context, used after loading and processing ICD10CM data.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/ICD10CM/readme.md#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT devv5.GenericUpdate();\n```\n\n----------------------------------------\n\nTITLE: SNOMED Relationship Insertion (SQL)\nDESCRIPTION: The `crs_insert` script implements new relationships to SNOMED concepts. A critical warning indicates that this script overwrites the `CONCEPT_RELATIONSHIP_STAGE` and `CONCEPT_RELATIONSHIP_MANUAL` tables, suggesting it's a potentially destructive operation. It depends on the output of previous scripts or other SNOMED-related data.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/ICD10PCS/snomed_hierarchy/README.md#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\ncrs_insert\n```\n\n----------------------------------------\n\nTITLE: Loading Input Tables in DevV5 with fresh vocab date\nDESCRIPTION: This SQL statement loads input tables for OPCS4 in the devv5 schema, setting the vocabulary date and version. It requires the `sources` schema to be present and the `load_input_tables` function to be defined within it. The parameters are the vocabulary ID ('OPCS4'), the vocabulary date (TO_DATE('20180614','YYYYMMDD')), and the version ('DATAMIGRATION 25.1.0_20180614000001').\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/OPCS4/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT sources.load_input_tables('OPCS4',TO_DATE('20180614','YYYYMMDD'),'DATAMIGRATION 25.1.0_20180614000001');\n```\n\n----------------------------------------\n\nTITLE: SQL: Create Source Tables\nDESCRIPTION: This step involves running the create_source_tables.sql script. This script is responsible for creating the necessary tables within the DevV5 schema to store the source CIViC data before it is transformed and loaded into the main vocabulary tables.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/CIViC/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\ncreate_source_tables.sql\n```\n\n----------------------------------------\n\nTITLE: Create Source Tables SQL\nDESCRIPTION: This script creates the necessary source tables in your schema to hold the UK Biobank data.  It is the first step in uploading the source data. The script should be run against the DevV5 schema.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/UK_Biobank/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\ncreate_source_tables.sql\n```\n\n----------------------------------------\n\nTITLE: Integrate Data into ICD CDE - SQL\nDESCRIPTION: This step involves running the ICD_CDE_source.sql script. This script is responsible for integrating data into the ICD common data environment (CDE).\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/ICD10GM/manual_work/readme.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nN/A - The code is located in the file ICD_CDE_source.sql\n```\n\n----------------------------------------\n\nTITLE: Concatenating Files (Batch)\nDESCRIPTION: This batch script (concat.bat) is used to concatenate multiple files into a single file. The specific files being concatenated are not specified in the provided text, but it's a preparatory step for the overall process. The output of this script is likely used in the next step.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/AMIS/README.md#_snippet_3\n\nLANGUAGE: Batch\nCODE:\n```\n/* Placeholder for the actual batch script content of concat.bat */\n@echo off\nREM Example: copy /b file1.txt + file2.txt combined.txt\n\n```\n\n----------------------------------------\n\nTITLE: Drug Name and Concept ID Mapping\nDESCRIPTION: This snippet represents a row in the vocabulary mapping file. It includes the drug name, concept ID, a descriptive name, and a flag indicating whether the mapping is active or primary. The snippet demonstrates the structure and content of the mapping entries.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/GRR/manual_work/relationship_to_concept_old.txt#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nLisiplus Al\t43571059\tLisiplus Al\t1\n```\n\n----------------------------------------\n\nTITLE: Post Proc Clean Up SQL\nDESCRIPTION: This SQL script, `post_proc_clean_up.sql`, is used for fixing duplicates created in vocabulary 'GRR' by `concept_name` and `concept_class` but with different `concept_code`.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/GRR/readme.md#_snippet_9\n\nLANGUAGE: SQL\nCODE:\n```\npost_proc_clean_up.sql\n```\n\n----------------------------------------\n\nTITLE: Generic Vocabulary Update using genericupdate\nDESCRIPTION: This SQL command performs a generic update on the vocabulary using the `genericupdate` function. This is a final step in the update process.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/NCCD/readme.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nselect devv5.genericupdate();\n```\n\n----------------------------------------\n\nTITLE: Drug Name and Concept ID Mapping\nDESCRIPTION: This snippet represents a row in the vocabulary mapping file. It includes the drug name, concept ID, a descriptive name, and a flag indicating whether the mapping is active or primary. The snippet demonstrates the structure and content of the mapping entries.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/GRR/manual_work/relationship_to_concept_old.txt#_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nLisodura Plus\t43571063\tLisodura Plus\t1\n```\n\n----------------------------------------\n\nTITLE: Remove header and footer lines from text file (SED and HEAD)\nDESCRIPTION: This shell command removes the first two header lines and the last two footer lines from the extracted text file. It uses `sed` to delete the header lines and `head` to keep all lines except the last two, redirecting the output to a new file named FY.txt. This is crucial for preparing the data for database loading.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/DRG/readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nsed '1,2d' *Table_5.txt | head -n-2 > FY.txt\n```\n\n----------------------------------------\n\nTITLE: Drug Name and Concept ID Mapping\nDESCRIPTION: This snippet represents a row in the vocabulary mapping file. It includes the drug name, concept ID, a descriptive name, and a flag indicating whether the mapping is active or primary. The snippet demonstrates the structure and content of the mapping entries.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/GRR/manual_work/relationship_to_concept_old.txt#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nLisinopril Sandoz\t43128958\tLISINOPRIL SANDOZ\t1\n```\n\n----------------------------------------\n\nTITLE: Querying concept_synonym_manual Table in SQL\nDESCRIPTION: This SQL query extracts data from the concept_synonym_manual table. It selects the synonym_name, synonym_concept_code, synonym_vocabulary_id, and language_concept_id columns. The result set is ordered by synonym_vocabulary_id, synonym_concept_code, language_concept_id, and synonym_name.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/RxNorm_E/readme_for_manual_tables.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT synonym_name,\n       synonym_concept_code,\n       synonym_vocabulary_id,\n       language_concept_id\nFROM concept_synonym_manual\nORDER BY synonym_vocabulary_id, synonym_concept_code, language_concept_id, synonym_name\n```\n\n----------------------------------------\n\nTITLE: Drug Name and Concept ID Mapping\nDESCRIPTION: This snippet represents a row in the vocabulary mapping file. It includes the drug name, concept ID, a descriptive name, and a flag indicating whether the mapping is active or primary. The snippet demonstrates the structure and content of the mapping entries.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/GRR/manual_work/relationship_to_concept_old.txt#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nLiskantin\t43571061\tLiskantin\t1\n```\n\n----------------------------------------\n\nTITLE: Drug Name and Concept ID Mapping\nDESCRIPTION: This snippet represents a row in the vocabulary mapping file. It includes the drug name, concept ID, a descriptive name, and a flag indicating whether the mapping is active or primary. The snippet demonstrates the structure and content of the mapping entries.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/GRR/manual_work/relationship_to_concept_old.txt#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nLisinopril Stada\t43571047\tLisinopril Stada\t1\n```\n\n----------------------------------------\n\nTITLE: Create and Populate ICD-10 Refresh Table\nDESCRIPTION: This SQL script creates the icd10_refresh table, which contains a list of potential replacement mappings and codes without mappings, addressing problems identified during the initial load stage of the ICD-10 vocabulary refresh. The script is intended to be executed as part of the vocabulary refresh process.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/ICD10/manual_work/readme.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nRefer to [mapping_refresh.sql](https://github.com/OHDSI/Vocabulary-v5.0/blob/icd10-documentation/ICD10/manual_work/mapping_refresh.sql) for the full SQL script.\n```\n\n----------------------------------------\n\nTITLE: Extract concept_manual Data using SQL\nDESCRIPTION: This SQL query extracts data from the concept_manual table. The extracted data includes concept details such as concept_name, domain_id, vocabulary_id, concept_class_id, standard_concept, concept_code, valid_start_date, valid_end_date, and invalid_reason. The results are ordered by vocabulary_id, concept_code, invalid_reason, valid_start_date, valid_end_date, and concept_name.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/CVX/manual_work/readme.md#_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT concept_name,\n       domain_id,\n       vocabulary_id,\n       concept_class_id,\n       standard_concept,\n       concept_code,\n       valid_start_date,\n       valid_end_date,\n       invalid_reason\nFROM concept_manual\nORDER BY vocabulary_id, concept_code, invalid_reason, valid_start_date, valid_end_date, concept_name\n```\n\n----------------------------------------\n\nTITLE: Recreate Schema in SQL\nDESCRIPTION: This SQL block recreates the dev-schema using the `devv5.FastRecreateSchema()` function. This function includes deprecated relationships and synonyms. It is a preliminary step to restoring the schema to a specific point in time using the audit logs.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/working/packages/audit_pack/readme.md#_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nDO $$\nBEGIN\n\tPERFORM devv5.FastRecreateSchema(include_deprecated_rels=>true,include_synonyms=>true);\nEND $$;\n```\n\n----------------------------------------\n\nTITLE: SNOMED Ancestor Table Generation (SQL)\nDESCRIPTION: The `pool_generation.sql` script creates an intermediate table for identifying SNOMED ancestors. This is likely a prerequisite step for establishing relationships between concepts. No dependencies are explicitly mentioned, but requires SNOMED vocabulary tables.\nSOURCE: https://github.com/ohdsi/vocabulary-v5.0/blob/master/ICD10PCS/snomed_hierarchy/README.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\npool_generation.sql\n```"
  }
]