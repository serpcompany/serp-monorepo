[
  {
    "owner": "binance",
    "repo": "binance-futures-connector-python",
    "content": "TITLE: Basic REST API Usage with CM Futures\nDESCRIPTION: Example showing how to initialize the CM Futures client and perform basic operations like getting server time, account information and placing orders.\nSOURCE: https://github.com/binance/binance-futures-connector-python/blob/main/README.md#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom binance.cm_futures import CMFutures\n\ncm_futures_client = CMFutures()\n\n# get server time\nprint(cm_futures_client.time())\n\ncm_futures_client = CMFutures(key='<api_key>', secret='<api_secret>')\n\n# Get account information\nprint(cm_futures_client.account())\n\n# Post a new order\nparams = {\n    'symbol': 'BTCUSDT',\n    'side': 'SELL',\n    'type': 'LIMIT',\n    'timeInForce': 'GTC',\n    'quantity': 0.002,\n    'price': 59808\n}\n\nresponse = cm_futures_client.new_order(**params)\nprint(response)\n```\n\n----------------------------------------\n\nTITLE: Authentication Methods Implementation\nDESCRIPTION: Examples showing both HMAC and RSA authentication methods for the Binance API.\nSOURCE: https://github.com/binance/binance-futures-connector-python/blob/main/README.md#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# HMAC Authentication\nclient = Client(api_key, api_secret)\nprint(client.account())\n\n# RSA Authentication\nkey = \"\"\nwith open(\"/Users/john/private_key.pem\", \"r\") as f: # Location of private key file\n    private_key = f.read()\nprivate_key_passphrase = \"\" # Optional: only used for encrypted RSA key\n\nclient = Client(key=key, private_key=private_key, private_key_passphrase=private_key_passphrase)\nprint(client.account())\n```\n\n----------------------------------------\n\nTITLE: Websocket Implementation Example\nDESCRIPTION: Demonstration of websocket client implementation for real-time data streaming from Binance Futures.\nSOURCE: https://github.com/binance/binance-futures-connector-python/blob/main/README.md#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# WebSocket Stream Client\nimport time\nfrom binance.websocket.um_futures.websocket_client import UMFuturesWebsocketClient\n\ndef message_handler(_, message):\n    logging.info(message)\n\nmy_client = UMFuturesWebsocketClient(on_message=message_handler)\n\n# Subscribe to a single symbol stream\nmy_client.agg_trade(symbol=\"bnbusdt\")\ntime.sleep(5)\nlogging.info(\"closing ws connection\")\nmy_client.stop()\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependencies for Binance Futures Connector in Python\nDESCRIPTION: This code snippet defines the required Python packages and their minimum versions for the Binance Futures Connector. It includes requests for HTTP communication, websocket-client for WebSocket connections, and pycryptodome for cryptographic operations.\nSOURCE: https://github.com/binance/binance-futures-connector-python/blob/main/requirements/common.txt#2025-04-19_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nrequests>=2.25.1\nwebsocket-client>=1.5.0\npycryptodome>=3.15.0\n```\n\n----------------------------------------\n\nTITLE: Proxy Configuration Example\nDESCRIPTION: Example showing how to configure and use proxy settings with the websocket client.\nSOURCE: https://github.com/binance/binance-futures-connector-python/blob/main/README.md#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# WebSocket Stream Client\nimport time\nfrom binance.websocket.um_futures.websocket_client import UMFuturesWebsocketClient\n\nproxies = {'http': 'http://1.2.3.4:8080'}\n\ndef message_handler(_, message):\n    logging.info(message)\n\nmy_client = UMFuturesWebsocketClient(on_message=message_handler, proxies=proxies)\n\n# Subscribe to a single symbol stream\nmy_client.agg_trade(symbol=\"bnbusdt\")\ntime.sleep(5)\nlogging.info(\"closing ws connection\")\nmy_client.stop()\n```\n\n----------------------------------------\n\nTITLE: Installing Binance Futures Connector\nDESCRIPTION: Command to install the Binance Futures connector library using pip package manager.\nSOURCE: https://github.com/binance/binance-futures-connector-python/blob/main/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install binance-futures-connector\n```\n\n----------------------------------------\n\nTITLE: Installing Python Test Dependencies for Binance Futures Connector\nDESCRIPTION: Requirements file that defines testing dependencies for the Python project. Includes pytest for testing, coverage reporting tools, code formatters like black and flake8, and test automation tools like tox.\nSOURCE: https://github.com/binance/binance-futures-connector-python/blob/main/requirements/requirements-test.txt#2025-04-19_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n-r common.txt\npytest-cov==2.8.1\npytest==5.4.1\nsure==1.4.11\nresponses==0.10.12\npytest-pep8==1.0.6\nblack\nflake8\ntox\ntox-pyenv\nwheel\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies for Binance Futures Connector Documentation\nDESCRIPTION: This requirements file specifies the Python packages needed for documentation and development of the Binance Futures Connector. It includes a reference to a separate test requirements file, the pre-commit framework for code quality checks, and Sphinx with its RTD theme for documentation generation.\nSOURCE: https://github.com/binance/binance-futures-connector-python/blob/main/requirements/requirements-dev.txt#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-r requirements-test.txt\npre-commit\nsphinx\nsphinx_rtd_theme\n```\n\n----------------------------------------\n\nTITLE: Importing Common Dependencies for Binance Futures Connector Python\nDESCRIPTION: This line imports dependencies from a common requirements file. The '-r' flag tells pip to read and include all dependencies listed in the referenced file, which helps maintain consistency across related packages and simplifies dependency management.\nSOURCE: https://github.com/binance/binance-futures-connector-python/blob/main/requirements/requirements.txt#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-r common.txt\n```"
  }
]